// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.GoogleBigQueryObjectDataset;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class GoogleBigQueryObjectDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        GoogleBigQueryObjectDataset model = BinaryData.fromString(
            "{\"type\":\"GoogleBigQueryObject\",\"typeProperties\":{\"tableName\":\"datablt\",\"table\":\"datavnpbgcesfddfclmo\",\"dataset\":\"datarofofkbcjzzw\"},\"description\":\"oblbtdqzhixccnkf\",\"structure\":\"datagvyoxmyqzyqe\",\"schema\":\"databbzdsluokcevox\",\"linkedServiceName\":{\"referenceName\":\"ddpwmgw\",\"parameters\":{\"vvvgyphheovejk\":\"datakfjvqglaxsei\",\"thrtzpuv\":\"dataaleczt\"}},\"parameters\":{\"zembqqiehdhjofyw\":{\"type\":\"String\",\"defaultValue\":\"datarqefnquollouurm\"},\"hvpaglyyhrgma\":{\"type\":\"Float\",\"defaultValue\":\"dataxoxlorxgslqcxu\"},\"tocrbfgqicmdrgcu\":{\"type\":\"Array\",\"defaultValue\":\"datamlutyjukkedp\"},\"cmljzksqimybqj\":{\"type\":\"Bool\",\"defaultValue\":\"datavkrwrjcqh\"}},\"annotations\":[\"dataomhcaqpv\",\"dataszopeuku\"],\"folder\":{\"name\":\"wbsskgqjemo\"},\"\":{\"gipdzym\":\"datafsjbpwjwz\"}}")
            .toObject(GoogleBigQueryObjectDataset.class);
        Assertions.assertEquals("oblbtdqzhixccnkf", model.description());
        Assertions.assertEquals("ddpwmgw", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("zembqqiehdhjofyw").type());
        Assertions.assertEquals("wbsskgqjemo", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        GoogleBigQueryObjectDataset model = new GoogleBigQueryObjectDataset().withDescription("oblbtdqzhixccnkf")
            .withStructure("datagvyoxmyqzyqe")
            .withSchema("databbzdsluokcevox")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("ddpwmgw")
                .withParameters(mapOf("vvvgyphheovejk", "datakfjvqglaxsei", "thrtzpuv", "dataaleczt")))
            .withParameters(mapOf("zembqqiehdhjofyw",
                new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("datarqefnquollouurm"),
                "hvpaglyyhrgma",
                new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("dataxoxlorxgslqcxu"),
                "tocrbfgqicmdrgcu",
                new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("datamlutyjukkedp"),
                "cmljzksqimybqj",
                new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("datavkrwrjcqh")))
            .withAnnotations(Arrays.asList("dataomhcaqpv", "dataszopeuku"))
            .withFolder(new DatasetFolder().withName("wbsskgqjemo"))
            .withTableName("datablt")
            .withTable("datavnpbgcesfddfclmo")
            .withDataset("datarofofkbcjzzw");
        model = BinaryData.fromObject(model).toObject(GoogleBigQueryObjectDataset.class);
        Assertions.assertEquals("oblbtdqzhixccnkf", model.description());
        Assertions.assertEquals("ddpwmgw", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("zembqqiehdhjofyw").type());
        Assertions.assertEquals("wbsskgqjemo", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
