// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.GoogleBigQueryObjectDataset;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class GoogleBigQueryObjectDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        GoogleBigQueryObjectDataset model =
            BinaryData
                .fromString(
                    "{\"type\":\"GoogleBigQueryObject\",\"typeProperties\":{\"tableName\":\"datamemfvrcclclfkfvy\",\"table\":\"datammw\",\"dataset\":\"datapoipjylxtebvse\"},\"description\":\"zvvpaysqwh\",\"structure\":\"datacyandb\",\"schema\":\"databntcvpvd\",\"linkedServiceName\":{\"referenceName\":\"moqqctfvxuosqp\",\"parameters\":{\"wyjzuakkiubeqk\":\"datapjpjmsbzzjsnyf\"}},\"parameters\":{\"hogsezre\":{\"type\":\"Int\",\"defaultValue\":\"dataglhxsoanguhb\"},\"itwkejmg\":{\"type\":\"Float\",\"defaultValue\":\"datagpdtyzpx\"},\"skvsdfvhryp\":{\"type\":\"Array\",\"defaultValue\":\"datadupe\"}},\"annotations\":[\"datammpkapvnpeukg\",\"datamfakeqn\",\"datatromlcsvk\",\"datafpsrowshvfxj\"],\"folder\":{\"name\":\"awmv\"},\"\":{\"znyjyu\":\"dataabjropxfqdml\",\"wgdp\":\"dataql\",\"iri\":\"datah\",\"dpkwdtobpgdcid\":\"dataamqtrhqdoxdegacd\"}}")
                .toObject(GoogleBigQueryObjectDataset.class);
        Assertions.assertEquals("zvvpaysqwh", model.description());
        Assertions.assertEquals("moqqctfvxuosqp", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("hogsezre").type());
        Assertions.assertEquals("awmv", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        GoogleBigQueryObjectDataset model =
            new GoogleBigQueryObjectDataset()
                .withDescription("zvvpaysqwh")
                .withStructure("datacyandb")
                .withSchema("databntcvpvd")
                .withLinkedServiceName(
                    new LinkedServiceReference()
                        .withReferenceName("moqqctfvxuosqp")
                        .withParameters(mapOf("wyjzuakkiubeqk", "datapjpjmsbzzjsnyf")))
                .withParameters(
                    mapOf(
                        "hogsezre",
                        new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("dataglhxsoanguhb"),
                        "itwkejmg",
                        new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("datagpdtyzpx"),
                        "skvsdfvhryp",
                        new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("datadupe")))
                .withAnnotations(Arrays.asList("datammpkapvnpeukg", "datamfakeqn", "datatromlcsvk", "datafpsrowshvfxj"))
                .withFolder(new DatasetFolder().withName("awmv"))
                .withTableName("datamemfvrcclclfkfvy")
                .withTable("datammw")
                .withDataset("datapoipjylxtebvse");
        model = BinaryData.fromObject(model).toObject(GoogleBigQueryObjectDataset.class);
        Assertions.assertEquals("zvvpaysqwh", model.description());
        Assertions.assertEquals("moqqctfvxuosqp", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("hogsezre").type());
        Assertions.assertEquals("awmv", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
