// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.GoogleBigQueryObjectDataset;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class GoogleBigQueryObjectDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        GoogleBigQueryObjectDataset model = BinaryData.fromString(
            "{\"type\":\"asomafe\",\"typeProperties\":{\"tableName\":\"datab\",\"table\":\"datakpsvok\",\"dataset\":\"dataankxvcptfgfbhn\"},\"description\":\"z\",\"structure\":\"datardxpcpautfzptr\",\"schema\":\"datazytrt\",\"linkedServiceName\":{\"referenceName\":\"f\",\"parameters\":{\"qvp\":\"datadxcyuwen\",\"pmecsmxfzynf\":\"dataawvoqatdjkal\",\"yqkkpgwgss\":\"datam\"}},\"parameters\":{\"vdsqxkjwd\":{\"type\":\"String\",\"defaultValue\":\"datairnbnlq\"}},\"annotations\":[\"datairzyudrq\",\"dataxrxhxmlfouqp\"],\"folder\":{\"name\":\"andbp\"},\"\":{\"jxcqcaczzvwaeztt\":\"datah\",\"qlyyslg\":\"datajqyfy\",\"bdsvkllrzhshhkb\":\"dataf\",\"rgfwhfzh\":\"datahcazkgdjth\"}}")
            .toObject(GoogleBigQueryObjectDataset.class);
        Assertions.assertEquals("z", model.description());
        Assertions.assertEquals("f", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("vdsqxkjwd").type());
        Assertions.assertEquals("andbp", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        GoogleBigQueryObjectDataset model = new GoogleBigQueryObjectDataset().withDescription("z")
            .withStructure("datardxpcpautfzptr")
            .withSchema("datazytrt")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("f")
                .withParameters(
                    mapOf("qvp", "datadxcyuwen", "pmecsmxfzynf", "dataawvoqatdjkal", "yqkkpgwgss", "datam")))
            .withParameters(mapOf("vdsqxkjwd",
                new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("datairnbnlq")))
            .withAnnotations(Arrays.asList("datairzyudrq", "dataxrxhxmlfouqp"))
            .withFolder(new DatasetFolder().withName("andbp"))
            .withTableName("datab")
            .withTable("datakpsvok")
            .withDataset("dataankxvcptfgfbhn");
        model = BinaryData.fromObject(model).toObject(GoogleBigQueryObjectDataset.class);
        Assertions.assertEquals("z", model.description());
        Assertions.assertEquals("f", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("vdsqxkjwd").type());
        Assertions.assertEquals("andbp", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
