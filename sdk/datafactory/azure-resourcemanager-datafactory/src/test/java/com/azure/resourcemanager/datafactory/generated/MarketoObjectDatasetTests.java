// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.MarketoObjectDataset;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MarketoObjectDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MarketoObjectDataset model =
            BinaryData
                .fromString(
                    "{\"type\":\"MarketoObject\",\"typeProperties\":{\"tableName\":\"dataomeqg\"},\"description\":\"wisp\",\"structure\":\"datagdblwj\",\"schema\":\"dataaqxaxtuxi\",\"linkedServiceName\":{\"referenceName\":\"ppbiichl\",\"parameters\":{\"zdxywabkitnipapt\":\"datavuixwonkrn\"}},\"parameters\":{\"ewltono\":{\"type\":\"Bool\",\"defaultValue\":\"datayjukkajn\"},\"di\":{\"type\":\"Int\",\"defaultValue\":\"dataemiwfhhawbabhzbf\"},\"zsuspaywvslq\":{\"type\":\"SecureString\",\"defaultValue\":\"dataxydgzfoi\"}},\"annotations\":[\"datanzea\",\"datakxfmu\",\"datadbvytq\"],\"folder\":{\"name\":\"uymkdeuqxlvzpfd\"},\"\":{\"rrmtrxgjmpdvrjz\":\"datagbiwpgopqlktthb\"}}")
                .toObject(MarketoObjectDataset.class);
        Assertions.assertEquals("wisp", model.description());
        Assertions.assertEquals("ppbiichl", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("ewltono").type());
        Assertions.assertEquals("uymkdeuqxlvzpfd", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MarketoObjectDataset model =
            new MarketoObjectDataset()
                .withDescription("wisp")
                .withStructure("datagdblwj")
                .withSchema("dataaqxaxtuxi")
                .withLinkedServiceName(
                    new LinkedServiceReference()
                        .withReferenceName("ppbiichl")
                        .withParameters(mapOf("zdxywabkitnipapt", "datavuixwonkrn")))
                .withParameters(
                    mapOf(
                        "ewltono",
                        new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("datayjukkajn"),
                        "di",
                        new ParameterSpecification()
                            .withType(ParameterType.INT)
                            .withDefaultValue("dataemiwfhhawbabhzbf"),
                        "zsuspaywvslq",
                        new ParameterSpecification()
                            .withType(ParameterType.SECURE_STRING)
                            .withDefaultValue("dataxydgzfoi")))
                .withAnnotations(Arrays.asList("datanzea", "datakxfmu", "datadbvytq"))
                .withFolder(new DatasetFolder().withName("uymkdeuqxlvzpfd"))
                .withTableName("dataomeqg");
        model = BinaryData.fromObject(model).toObject(MarketoObjectDataset.class);
        Assertions.assertEquals("wisp", model.description());
        Assertions.assertEquals("ppbiichl", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("ewltono").type());
        Assertions.assertEquals("uymkdeuqxlvzpfd", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
