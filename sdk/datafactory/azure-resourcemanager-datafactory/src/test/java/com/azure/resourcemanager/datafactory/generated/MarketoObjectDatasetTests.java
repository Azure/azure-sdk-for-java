// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.MarketoObjectDataset;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MarketoObjectDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MarketoObjectDataset model = BinaryData.fromString(
            "{\"type\":\"vuylyumbwep\",\"typeProperties\":{\"tableName\":\"datafo\"},\"description\":\"nuomsx\",\"structure\":\"datakhmemxkahapesn\",\"schema\":\"dataoullyfzmnxrmxx\",\"linkedServiceName\":{\"referenceName\":\"vwbatjgzkmwfw\",\"parameters\":{\"i\":\"datapxfmdj\",\"cbdnpfcg\":\"datammdzphxulx\",\"bzxp\":\"datadttowqxxc\",\"wtc\":\"dataloovhati\"}},\"parameters\":{\"qpzksdpfvls\":{\"type\":\"Object\",\"defaultValue\":\"datakfeomotquqlqeyis\"}},\"annotations\":[\"dataetwtlafnkjt\",\"datafbdpn\",\"datavhgcgr\",\"datalyyfsmoc\"],\"folder\":{\"name\":\"rchmetvzhuugd\"},\"\":{\"cawwayqtsrn\":\"datadskwvb\"}}")
            .toObject(MarketoObjectDataset.class);
        Assertions.assertEquals("nuomsx", model.description());
        Assertions.assertEquals("vwbatjgzkmwfw", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.OBJECT, model.parameters().get("qpzksdpfvls").type());
        Assertions.assertEquals("rchmetvzhuugd", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MarketoObjectDataset model = new MarketoObjectDataset().withDescription("nuomsx")
            .withStructure("datakhmemxkahapesn")
            .withSchema("dataoullyfzmnxrmxx")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("vwbatjgzkmwfw")
                .withParameters(mapOf("i", "datapxfmdj", "cbdnpfcg", "datammdzphxulx", "bzxp", "datadttowqxxc", "wtc",
                    "dataloovhati")))
            .withParameters(mapOf("qpzksdpfvls",
                new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("datakfeomotquqlqeyis")))
            .withAnnotations(Arrays.asList("dataetwtlafnkjt", "datafbdpn", "datavhgcgr", "datalyyfsmoc"))
            .withFolder(new DatasetFolder().withName("rchmetvzhuugd"))
            .withTableName("datafo");
        model = BinaryData.fromObject(model).toObject(MarketoObjectDataset.class);
        Assertions.assertEquals("nuomsx", model.description());
        Assertions.assertEquals("vwbatjgzkmwfw", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.OBJECT, model.parameters().get("qpzksdpfvls").type());
        Assertions.assertEquals("rchmetvzhuugd", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
