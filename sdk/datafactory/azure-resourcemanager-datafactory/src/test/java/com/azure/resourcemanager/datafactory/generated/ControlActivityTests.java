// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ControlActivity;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class ControlActivityTests {
    @Test
    public void testDeserialize() {
        ControlActivity model =
            BinaryData
                .fromString(
                    "{\"type\":\"Container\",\"name\":\"umljcirvpef\",\"description\":\"dvei\",\"dependsOn\":[{\"activity\":\"jnsxzajlnsjhwjuy\",\"dependencyConditions\":[\"Skipped\"],\"\":{}},{\"activity\":\"vmv\",\"dependencyConditions\":[\"Completed\",\"Skipped\",\"Succeeded\",\"Completed\"],\"\":{}}],\"userProperties\":[{\"name\":\"eqbw\"},{\"name\":\"ntghyksarcdr\"}],\"\":{}}")
                .toObject(ControlActivity.class);
        Assertions.assertEquals("umljcirvpef", model.name());
        Assertions.assertEquals("dvei", model.description());
        Assertions.assertEquals("jnsxzajlnsjhwjuy", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("eqbw", model.userProperties().get(0).name());
    }

    @Test
    public void testSerialize() {
        ControlActivity model =
            new ControlActivity()
                .withName("umljcirvpef")
                .withDescription("dvei")
                .withDependsOn(
                    Arrays
                        .asList(
                            new ActivityDependency()
                                .withActivity("jnsxzajlnsjhwjuy")
                                .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED))
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency()
                                .withActivity("vmv")
                                .withDependencyConditions(
                                    Arrays
                                        .asList(
                                            DependencyCondition.COMPLETED,
                                            DependencyCondition.SKIPPED,
                                            DependencyCondition.SUCCEEDED,
                                            DependencyCondition.COMPLETED))
                                .withAdditionalProperties(mapOf())))
                .withUserProperties(
                    Arrays.asList(new UserProperty().withName("eqbw"), new UserProperty().withName("ntghyksarcdr")));
        model = BinaryData.fromObject(model).toObject(ControlActivity.class);
        Assertions.assertEquals("umljcirvpef", model.name());
        Assertions.assertEquals("dvei", model.description());
        Assertions.assertEquals("jnsxzajlnsjhwjuy", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("eqbw", model.userProperties().get(0).name());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
