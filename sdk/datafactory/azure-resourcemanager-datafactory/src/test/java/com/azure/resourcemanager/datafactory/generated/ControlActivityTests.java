// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.ControlActivity;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ControlActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ControlActivity model = BinaryData.fromString(
            "{\"type\":\"Container\",\"name\":\"exkoncia\",\"description\":\"l\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"xkctedh\",\"dependencyConditions\":[\"Succeeded\",\"Completed\",\"Failed\"],\"\":{\"bu\":\"dataajniwbyzyjuyxyl\",\"sigkinykjxq\":\"dataojdzcluy\",\"jqpjzturdi\":\"dataspeqgedpi\",\"oqakvutedetxokqu\":\"dataerkwmafy\"}},{\"activity\":\"jdwcwj\",\"dependencyConditions\":[\"Skipped\",\"Succeeded\"],\"\":{\"blfefbbvitlnnp\":\"dataehxahnqjbav\"}},{\"activity\":\"fufwrerbndr\",\"dependencyConditions\":[\"Failed\",\"Succeeded\",\"Completed\"],\"\":{\"py\":\"dataavmdcctemvaajyi\",\"swurzaqubryhvbv\":\"datagwih\"}}],\"userProperties\":[{\"name\":\"dwaupjo\",\"value\":\"datagryocgwkp\"},{\"name\":\"ilyznbb\",\"value\":\"dataimxznfoaks\"}],\"\":{\"iwf\":\"dataswznlbbhtl\"}}")
            .toObject(ControlActivity.class);
        Assertions.assertEquals("exkoncia", model.name());
        Assertions.assertEquals("l", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("xkctedh", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("dwaupjo", model.userProperties().get(0).name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ControlActivity model = new ControlActivity().withName("exkoncia")
            .withDescription("l")
            .withState(ActivityState.ACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
            .withDependsOn(Arrays.asList(
                new ActivityDependency().withActivity("xkctedh")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED,
                        DependencyCondition.COMPLETED, DependencyCondition.FAILED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("jdwcwj")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.SUCCEEDED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("fufwrerbndr")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED, DependencyCondition.SUCCEEDED,
                        DependencyCondition.COMPLETED))
                    .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("dwaupjo").withValue("datagryocgwkp"),
                new UserProperty().withName("ilyznbb").withValue("dataimxznfoaks")));
        model = BinaryData.fromObject(model).toObject(ControlActivity.class);
        Assertions.assertEquals("exkoncia", model.name());
        Assertions.assertEquals("l", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("xkctedh", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("dwaupjo", model.userProperties().get(0).name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
