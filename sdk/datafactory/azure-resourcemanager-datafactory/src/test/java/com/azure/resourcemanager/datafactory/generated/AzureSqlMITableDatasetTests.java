// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.AzureSqlMITableDataset;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureSqlMITableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureSqlMITableDataset model = BinaryData.fromString(
            "{\"type\":\"AzureSqlMITable\",\"typeProperties\":{\"tableName\":\"datahd\",\"schema\":\"datavhaztkxbivz\",\"table\":\"dataxmbrygmwibiosiq\"},\"description\":\"kqfdqwdrtx\",\"structure\":\"datadaglmrcok\",\"schema\":\"dataert\",\"linkedServiceName\":{\"referenceName\":\"ounzsiywh\",\"parameters\":{\"wt\":\"datamfpopikzebqnnf\",\"jculojhhylx\":\"dataqowsdlkhczygpmg\",\"bybwjmtftcvelnir\":\"dataevfiyymotu\"}},\"parameters\":{\"hfxrt\":{\"type\":\"String\",\"defaultValue\":\"datastpaqpibjgbvswm\"},\"ectcxsfmbzdx\":{\"type\":\"Object\",\"defaultValue\":\"datamsennqfabqcama\"},\"fxuzmsvzyqrbrn\":{\"type\":\"Object\",\"defaultValue\":\"datanbkdnny\"},\"uasnjeglhtrxb\":{\"type\":\"Object\",\"defaultValue\":\"datatlxfikjkxaravw\"}},\"annotations\":[\"datacjcnwjzb\",\"databl\",\"datarnwv\"],\"folder\":{\"name\":\"oq\"},\"\":{\"ooauffhxfqkmwzr\":\"datawwsdsorgfhjxsa\"}}")
            .toObject(AzureSqlMITableDataset.class);
        Assertions.assertEquals("kqfdqwdrtx", model.description());
        Assertions.assertEquals("ounzsiywh", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("hfxrt").type());
        Assertions.assertEquals("oq", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureSqlMITableDataset model = new AzureSqlMITableDataset().withDescription("kqfdqwdrtx")
            .withStructure("datadaglmrcok")
            .withSchema("dataert")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("ounzsiywh")
                .withParameters(mapOf("wt", "datamfpopikzebqnnf", "jculojhhylx", "dataqowsdlkhczygpmg",
                    "bybwjmtftcvelnir", "dataevfiyymotu")))
            .withParameters(mapOf("hfxrt",
                new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("datastpaqpibjgbvswm"),
                "ectcxsfmbzdx",
                new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("datamsennqfabqcama"),
                "fxuzmsvzyqrbrn",
                new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("datanbkdnny"),
                "uasnjeglhtrxb",
                new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("datatlxfikjkxaravw")))
            .withAnnotations(Arrays.asList("datacjcnwjzb", "databl", "datarnwv"))
            .withFolder(new DatasetFolder().withName("oq"))
            .withTableName("datahd")
            .withSchemaTypePropertiesSchema("datavhaztkxbivz")
            .withTable("dataxmbrygmwibiosiq");
        model = BinaryData.fromObject(model).toObject(AzureSqlMITableDataset.class);
        Assertions.assertEquals("kqfdqwdrtx", model.description());
        Assertions.assertEquals("ounzsiywh", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("hfxrt").type());
        Assertions.assertEquals("oq", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
