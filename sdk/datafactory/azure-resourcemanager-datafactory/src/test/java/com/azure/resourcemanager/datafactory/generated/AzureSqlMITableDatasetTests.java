// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.AzureSqlMITableDataset;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureSqlMITableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureSqlMITableDataset model =
            BinaryData
                .fromString(
                    "{\"type\":\"AzureSqlMITable\",\"typeProperties\":{\"tableName\":\"dataczygpmgfjcu\",\"schema\":\"datajhhy\",\"table\":\"datadevfi\"},\"description\":\"motuzbybwjmtf\",\"structure\":\"datavelni\",\"schema\":\"datapk\",\"linkedServiceName\":{\"referenceName\":\"nstp\",\"parameters\":{\"vswmehfxrtt\":\"dataibjg\",\"ectcxsfmbzdx\":\"databmsennqfabqcama\"}},\"parameters\":{\"zyq\":{\"type\":\"Bool\",\"defaultValue\":\"datakdnnyufxuzms\"},\"ara\":{\"type\":\"Int\",\"defaultValue\":\"datanxhjtlxfikjk\"},\"zpcjcnwjzbqblxr\":{\"type\":\"Bool\",\"defaultValue\":\"datauasnjeglhtrxb\"},\"wsdsorg\":{\"type\":\"Float\",\"defaultValue\":\"datadsvoqiza\"}},\"annotations\":[\"dataxsawooauff\",\"dataxfqk\",\"datawzrdqyoybm\"],\"folder\":{\"name\":\"to\"},\"\":{\"rpqphkvyyzad\":\"datazdaiovrb\",\"yzvelffo\":\"datarxylaypd\"}}")
                .toObject(AzureSqlMITableDataset.class);
        Assertions.assertEquals("motuzbybwjmtf", model.description());
        Assertions.assertEquals("nstp", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("zyq").type());
        Assertions.assertEquals("to", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureSqlMITableDataset model =
            new AzureSqlMITableDataset()
                .withDescription("motuzbybwjmtf")
                .withStructure("datavelni")
                .withSchema("datapk")
                .withLinkedServiceName(
                    new LinkedServiceReference()
                        .withReferenceName("nstp")
                        .withParameters(mapOf("vswmehfxrtt", "dataibjg", "ectcxsfmbzdx", "databmsennqfabqcama")))
                .withParameters(
                    mapOf(
                        "zyq",
                        new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("datakdnnyufxuzms"),
                        "ara",
                        new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("datanxhjtlxfikjk"),
                        "zpcjcnwjzbqblxr",
                        new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("datauasnjeglhtrxb"),
                        "wsdsorg",
                        new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("datadsvoqiza")))
                .withAnnotations(Arrays.asList("dataxsawooauff", "dataxfqk", "datawzrdqyoybm"))
                .withFolder(new DatasetFolder().withName("to"))
                .withTableName("dataczygpmgfjcu")
                .withSchemaTypePropertiesSchema("datajhhy")
                .withTable("datadevfi");
        model = BinaryData.fromObject(model).toObject(AzureSqlMITableDataset.class);
        Assertions.assertEquals("motuzbybwjmtf", model.description());
        Assertions.assertEquals("nstp", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("zyq").type());
        Assertions.assertEquals("to", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
