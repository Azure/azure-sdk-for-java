// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.AzureSqlMITableDataset;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureSqlMITableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureSqlMITableDataset model = BinaryData.fromString(
            "{\"type\":\"fmsxjwdy\",\"typeProperties\":{\"tableName\":\"datamcreihu\",\"schema\":\"datarnig\",\"table\":\"datainuwqxungrob\"},\"description\":\"xmvzjow\",\"structure\":\"datageerclbl\",\"schema\":\"datahpwachyeu\",\"linkedServiceName\":{\"referenceName\":\"jwmvwryvdi\",\"parameters\":{\"txsytrtexegwmrq\":\"dataikgpruccwmec\"}},\"parameters\":{\"oqkajwjuriarsbc\":{\"type\":\"String\",\"defaultValue\":\"datahvycfjncindi\"}},\"annotations\":[\"datanhzcknjxizb\"],\"folder\":{\"name\":\"ygzkztxfexwacyy\"},\"\":{\"p\":\"datax\",\"b\":\"datandzkfevuiiui\"}}")
            .toObject(AzureSqlMITableDataset.class);
        Assertions.assertEquals("xmvzjow", model.description());
        Assertions.assertEquals("jwmvwryvdi", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("oqkajwjuriarsbc").type());
        Assertions.assertEquals("ygzkztxfexwacyy", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureSqlMITableDataset model = new AzureSqlMITableDataset().withDescription("xmvzjow")
            .withStructure("datageerclbl")
            .withSchema("datahpwachyeu")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("jwmvwryvdi")
                .withParameters(mapOf("txsytrtexegwmrq", "dataikgpruccwmec")))
            .withParameters(mapOf("oqkajwjuriarsbc",
                new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("datahvycfjncindi")))
            .withAnnotations(Arrays.asList("datanhzcknjxizb"))
            .withFolder(new DatasetFolder().withName("ygzkztxfexwacyy"))
            .withTableName("datamcreihu")
            .withSchemaTypePropertiesSchema("datarnig")
            .withTable("datainuwqxungrob");
        model = BinaryData.fromObject(model).toObject(AzureSqlMITableDataset.class);
        Assertions.assertEquals("xmvzjow", model.description());
        Assertions.assertEquals("jwmvwryvdi", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("oqkajwjuriarsbc").type());
        Assertions.assertEquals("ygzkztxfexwacyy", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
