// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.AzureSqlMITableDataset;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureSqlMITableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureSqlMITableDataset model = BinaryData.fromString(
            "{\"type\":\"AzureSqlMITable\",\"typeProperties\":{\"tableName\":\"dataifvulxf\",\"schema\":\"datayrvjlgdezvjq\",\"table\":\"datahoyiyaxqvjweiw\"},\"description\":\"zkddnvovb\",\"structure\":\"dataqbmdqrxyglaets\",\"schema\":\"datalw\",\"linkedServiceName\":{\"referenceName\":\"jdtlriefooyycux\",\"parameters\":{\"ipsdudgcozzomehx\":\"datac\",\"lczipvwdtgc\":\"dataantolamlbijuxkq\",\"kwx\":\"datazdqiqdlrat\",\"lhpryjfzihuio\":\"dataauwxsuykznhrfgsl\"}},\"parameters\":{\"kbdgddkrh\":{\"type\":\"Bool\",\"defaultValue\":\"dataajtfey\"},\"kzwtjwwguzytij\":{\"type\":\"Bool\",\"defaultValue\":\"dataxbeuuqu\"}},\"annotations\":[\"datanondegjdyd\"],\"folder\":{\"name\":\"kkbjuckcatuq\"},\"\":{\"lyseidtoak\":\"dataowcnxtpz\",\"rytgrhzbqfdpfawr\":\"datat\",\"gdirda\":\"datatvcshtkutzcttb\",\"zjgcfjfx\":\"datam\"}}")
            .toObject(AzureSqlMITableDataset.class);
        Assertions.assertEquals("zkddnvovb", model.description());
        Assertions.assertEquals("jdtlriefooyycux", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("kbdgddkrh").type());
        Assertions.assertEquals("kkbjuckcatuq", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureSqlMITableDataset model = new AzureSqlMITableDataset().withDescription("zkddnvovb")
            .withStructure("dataqbmdqrxyglaets")
            .withSchema("datalw")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("jdtlriefooyycux")
                .withParameters(mapOf("ipsdudgcozzomehx", "datac", "lczipvwdtgc", "dataantolamlbijuxkq", "kwx",
                    "datazdqiqdlrat", "lhpryjfzihuio", "dataauwxsuykznhrfgsl")))
            .withParameters(mapOf("kbdgddkrh",
                new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("dataajtfey"),
                "kzwtjwwguzytij",
                new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("dataxbeuuqu")))
            .withAnnotations(Arrays.asList("datanondegjdyd"))
            .withFolder(new DatasetFolder().withName("kkbjuckcatuq"))
            .withTableName("dataifvulxf")
            .withSchemaTypePropertiesSchema("datayrvjlgdezvjq")
            .withTable("datahoyiyaxqvjweiw");
        model = BinaryData.fromObject(model).toObject(AzureSqlMITableDataset.class);
        Assertions.assertEquals("zkddnvovb", model.description());
        Assertions.assertEquals("jdtlriefooyycux", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("kbdgddkrh").type());
        Assertions.assertEquals("kkbjuckcatuq", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
