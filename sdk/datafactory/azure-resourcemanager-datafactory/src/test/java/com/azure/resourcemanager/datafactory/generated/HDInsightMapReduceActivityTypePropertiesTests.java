// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.HDInsightMapReduceActivityTypeProperties;
import com.azure.resourcemanager.datafactory.models.HDInsightActivityDebugInfoOption;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class HDInsightMapReduceActivityTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HDInsightMapReduceActivityTypeProperties model = BinaryData.fromString(
            "{\"storageLinkedServices\":[{\"referenceName\":\"exugdjdmw\",\"parameters\":{\"dhwoyznjddshazl\":\"datacronr\",\"otniqzqmpgvy\":\"datamvxvip\",\"fftszsw\":\"datadjwwbrhjhcw\",\"ghjgvhgyeoikxjpu\":\"datay\"}},{\"referenceName\":\"ggpsaqfn\",\"parameters\":{\"tsqzkzworuhhvdeo\":\"datawawmbusle\",\"ylgpznb\":\"datacdjhfxbkgpnxu\",\"iubeflvktjbmcep\":\"datalhwutyuvuzqtrf\"}},{\"referenceName\":\"nukdawgzhbwhjvo\",\"parameters\":{\"k\":\"datavygx\",\"jcjvdajxebm\":\"datatjoxocothsg\",\"nd\":\"dataiyrctfaabkukra\"}},{\"referenceName\":\"hwdicntqsrhacjsb\",\"parameters\":{\"fkayovljtrmlxrq\":\"datajdwfnbiyxqrcuy\",\"bqukji\":\"datalugnxmbwdkziw\"}}],\"arguments\":[\"datalpvp\",\"datavceiwc\"],\"getDebugInfo\":\"Failure\",\"className\":\"datahcktb\",\"jarFilePath\":\"datamtbprtkvuxwue\",\"jarLinkedService\":{\"referenceName\":\"cugwkuhqbwgmznv\",\"parameters\":{\"ieyqpu\":\"datanjhq\"}},\"jarLibs\":[\"datazxetx\"],\"defines\":{\"qcwnbx\":\"datarb\"}}")
            .toObject(HDInsightMapReduceActivityTypeProperties.class);
        Assertions.assertEquals("exugdjdmw", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.FAILURE, model.getDebugInfo());
        Assertions.assertEquals("cugwkuhqbwgmznv", model.jarLinkedService().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HDInsightMapReduceActivityTypeProperties model = new HDInsightMapReduceActivityTypeProperties()
            .withStorageLinkedServices(Arrays.asList(
                new LinkedServiceReference().withReferenceName("exugdjdmw")
                    .withParameters(mapOf("dhwoyznjddshazl", "datacronr", "otniqzqmpgvy", "datamvxvip", "fftszsw",
                        "datadjwwbrhjhcw", "ghjgvhgyeoikxjpu", "datay")),
                new LinkedServiceReference().withReferenceName("ggpsaqfn")
                    .withParameters(mapOf("tsqzkzworuhhvdeo", "datawawmbusle", "ylgpznb", "datacdjhfxbkgpnxu",
                        "iubeflvktjbmcep", "datalhwutyuvuzqtrf")),
                new LinkedServiceReference().withReferenceName("nukdawgzhbwhjvo").withParameters(
                    mapOf("k", "datavygx", "jcjvdajxebm", "datatjoxocothsg", "nd", "dataiyrctfaabkukra")),
                new LinkedServiceReference().withReferenceName("hwdicntqsrhacjsb")
                    .withParameters(mapOf("fkayovljtrmlxrq", "datajdwfnbiyxqrcuy", "bqukji", "datalugnxmbwdkziw"))))
            .withArguments(Arrays.asList("datalpvp", "datavceiwc"))
            .withGetDebugInfo(HDInsightActivityDebugInfoOption.FAILURE).withClassName("datahcktb")
            .withJarFilePath("datamtbprtkvuxwue")
            .withJarLinkedService(new LinkedServiceReference().withReferenceName("cugwkuhqbwgmznv")
                .withParameters(mapOf("ieyqpu", "datanjhq")))
            .withJarLibs(Arrays.asList("datazxetx")).withDefines(mapOf("qcwnbx", "datarb"));
        model = BinaryData.fromObject(model).toObject(HDInsightMapReduceActivityTypeProperties.class);
        Assertions.assertEquals("exugdjdmw", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.FAILURE, model.getDebugInfo());
        Assertions.assertEquals("cugwkuhqbwgmznv", model.jarLinkedService().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
