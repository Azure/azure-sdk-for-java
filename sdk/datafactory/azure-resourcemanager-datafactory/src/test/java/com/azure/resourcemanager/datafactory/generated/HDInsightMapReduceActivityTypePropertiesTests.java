// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.HDInsightMapReduceActivityTypeProperties;
import com.azure.resourcemanager.datafactory.models.HDInsightActivityDebugInfoOption;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class HDInsightMapReduceActivityTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HDInsightMapReduceActivityTypeProperties model = BinaryData.fromString(
            "{\"storageLinkedServices\":[{\"referenceName\":\"heqvzwummwuaxxcb\",\"parameters\":{\"qrbtrmi\":\"datacdujhzaiw\"}},{\"referenceName\":\"l\",\"parameters\":{\"ubyfspliw\":\"datadukamtfkufvabci\",\"ajpyuwrggfgll\":\"datakozlpsf\"}},{\"referenceName\":\"su\",\"parameters\":{\"qhugjeaetgmmf\":\"datavytbqqmxkuyyrcqs\",\"upkpyzaenarfy\":\"datafdqoepwyy\"}}],\"arguments\":[\"datai\",\"datakhoygfgchlc\"],\"getDebugInfo\":\"Always\",\"className\":\"datacsskgug\",\"jarFilePath\":\"datakl\",\"jarLinkedService\":{\"referenceName\":\"mymkccclefawfeea\",\"parameters\":{\"gowfqrykikhf\":\"datamm\"}},\"jarLibs\":[\"datacllz\",\"dataazi\",\"dataohtsmkfyox\"],\"defines\":{\"fbiboyex\":\"datafsehbxbqionnqsz\",\"cqjgwtiasfbp\":\"datacrwwdteyvpv\",\"xxhbrysnszsehoe\":\"datamv\"}}")
            .toObject(HDInsightMapReduceActivityTypeProperties.class);
        Assertions.assertEquals("heqvzwummwuaxxcb", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.ALWAYS, model.getDebugInfo());
        Assertions.assertEquals("mymkccclefawfeea", model.jarLinkedService().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HDInsightMapReduceActivityTypeProperties model = new HDInsightMapReduceActivityTypeProperties()
            .withStorageLinkedServices(Arrays.asList(
                new LinkedServiceReference().withReferenceName("heqvzwummwuaxxcb")
                    .withParameters(mapOf("qrbtrmi", "datacdujhzaiw")),
                new LinkedServiceReference().withReferenceName("l")
                    .withParameters(mapOf("ubyfspliw", "datadukamtfkufvabci", "ajpyuwrggfgll", "datakozlpsf")),
                new LinkedServiceReference().withReferenceName("su")
                    .withParameters(mapOf("qhugjeaetgmmf", "datavytbqqmxkuyyrcqs", "upkpyzaenarfy", "datafdqoepwyy"))))
            .withArguments(Arrays.asList("datai", "datakhoygfgchlc"))
            .withGetDebugInfo(HDInsightActivityDebugInfoOption.ALWAYS)
            .withClassName("datacsskgug")
            .withJarFilePath("datakl")
            .withJarLinkedService(new LinkedServiceReference().withReferenceName("mymkccclefawfeea")
                .withParameters(mapOf("gowfqrykikhf", "datamm")))
            .withJarLibs(Arrays.asList("datacllz", "dataazi", "dataohtsmkfyox"))
            .withDefines(mapOf("fbiboyex", "datafsehbxbqionnqsz", "cqjgwtiasfbp", "datacrwwdteyvpv", "xxhbrysnszsehoe",
                "datamv"));
        model = BinaryData.fromObject(model).toObject(HDInsightMapReduceActivityTypeProperties.class);
        Assertions.assertEquals("heqvzwummwuaxxcb", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.ALWAYS, model.getDebugInfo());
        Assertions.assertEquals("mymkccclefawfeea", model.jarLinkedService().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
