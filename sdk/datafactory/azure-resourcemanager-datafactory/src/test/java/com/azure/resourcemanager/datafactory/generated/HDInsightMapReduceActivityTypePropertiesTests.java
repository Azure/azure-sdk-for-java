// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.HDInsightMapReduceActivityTypeProperties;
import com.azure.resourcemanager.datafactory.models.HDInsightActivityDebugInfoOption;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class HDInsightMapReduceActivityTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HDInsightMapReduceActivityTypeProperties model = BinaryData.fromString(
            "{\"storageLinkedServices\":[{\"referenceName\":\"jq\",\"parameters\":{\"ep\":\"datagwyqbqmelmqk\"}},{\"referenceName\":\"ehsveaer\",\"parameters\":{\"nstjfkjboyggr\":\"databrnlbfnuppwqks\",\"bgej\":\"dataztcxyphdkxwst\",\"g\":\"datapvegmtgoeayhoj\"}},{\"referenceName\":\"ezcrssmbdjzc\",\"parameters\":{\"dtj\":\"dataxbwqgkfx\",\"bc\":\"datayevvuddnwj\",\"pftzbkev\":\"dataflemxbmaiiv\",\"bjpumpqlugzydyl\":\"datal\"}},{\"referenceName\":\"rsis\",\"parameters\":{\"fzhtkp\":\"datafomiesvfnxxkm\"}}],\"arguments\":[\"datacazrfhfjwikvakj\"],\"getDebugInfo\":\"Always\",\"className\":\"datahqilvajc\",\"jarFilePath\":\"datapwlf\",\"jarLinkedService\":{\"referenceName\":\"ardjqwdrooo\",\"parameters\":{\"vdqcmegwajjzxcq\":\"datasyd\"}},\"jarLibs\":[\"dataxewocwmadyelwo\",\"datalxa\",\"datahanfjrdcaw\",\"datazqldakbijcxctn\"],\"defines\":{\"yhnoll\":\"datayczzwhwsidnqiav\",\"eoxoe\":\"datauhocb\",\"fcurn\":\"dataprtz\",\"stok\":\"dataujcunyua\"}}")
            .toObject(HDInsightMapReduceActivityTypeProperties.class);
        Assertions.assertEquals("jq", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.ALWAYS, model.getDebugInfo());
        Assertions.assertEquals("ardjqwdrooo", model.jarLinkedService().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HDInsightMapReduceActivityTypeProperties model = new HDInsightMapReduceActivityTypeProperties()
            .withStorageLinkedServices(Arrays.asList(
                new LinkedServiceReference().withReferenceName("jq").withParameters(mapOf("ep", "datagwyqbqmelmqk")),
                new LinkedServiceReference().withReferenceName("ehsveaer")
                    .withParameters(mapOf("nstjfkjboyggr", "databrnlbfnuppwqks", "bgej", "dataztcxyphdkxwst", "g",
                        "datapvegmtgoeayhoj")),
                new LinkedServiceReference().withReferenceName("ezcrssmbdjzc")
                    .withParameters(mapOf("dtj", "dataxbwqgkfx", "bc", "datayevvuddnwj", "pftzbkev", "dataflemxbmaiiv",
                        "bjpumpqlugzydyl", "datal")),
                new LinkedServiceReference().withReferenceName("rsis")
                    .withParameters(mapOf("fzhtkp", "datafomiesvfnxxkm"))))
            .withArguments(Arrays.asList("datacazrfhfjwikvakj"))
            .withGetDebugInfo(HDInsightActivityDebugInfoOption.ALWAYS)
            .withClassName("datahqilvajc")
            .withJarFilePath("datapwlf")
            .withJarLinkedService(new LinkedServiceReference().withReferenceName("ardjqwdrooo")
                .withParameters(mapOf("vdqcmegwajjzxcq", "datasyd")))
            .withJarLibs(Arrays.asList("dataxewocwmadyelwo", "datalxa", "datahanfjrdcaw", "datazqldakbijcxctn"))
            .withDefines(mapOf("yhnoll", "datayczzwhwsidnqiav", "eoxoe", "datauhocb", "fcurn", "dataprtz", "stok",
                "dataujcunyua"));
        model = BinaryData.fromObject(model).toObject(HDInsightMapReduceActivityTypeProperties.class);
        Assertions.assertEquals("jq", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.ALWAYS, model.getDebugInfo());
        Assertions.assertEquals("ardjqwdrooo", model.jarLinkedService().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
