// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.HDInsightMapReduceActivityTypeProperties;
import com.azure.resourcemanager.datafactory.models.HDInsightActivityDebugInfoOption;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class HDInsightMapReduceActivityTypePropertiesTests {
    @Test
    public void testDeserialize() {
        HDInsightMapReduceActivityTypeProperties model =
            BinaryData
                .fromString(
                    "{\"storageLinkedServices\":[{\"referenceName\":\"dfl\",\"parameters\":{}},{\"referenceName\":\"ns\",\"parameters\":{}},{\"referenceName\":\"qkzfz\",\"parameters\":{}}],\"arguments\":[],\"getDebugInfo\":\"None\",\"jarLinkedService\":{\"referenceName\":\"totryegpkhxrme\",\"parameters\":{}},\"jarLibs\":[],\"defines\":{}}")
                .toObject(HDInsightMapReduceActivityTypeProperties.class);
        Assertions.assertEquals("dfl", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.NONE, model.getDebugInfo());
        Assertions.assertEquals("totryegpkhxrme", model.jarLinkedService().referenceName());
    }

    @Test
    public void testSerialize() {
        HDInsightMapReduceActivityTypeProperties model =
            new HDInsightMapReduceActivityTypeProperties()
                .withStorageLinkedServices(
                    Arrays
                        .asList(
                            new LinkedServiceReference().withReferenceName("dfl").withParameters(mapOf()),
                            new LinkedServiceReference().withReferenceName("ns").withParameters(mapOf()),
                            new LinkedServiceReference().withReferenceName("qkzfz").withParameters(mapOf())))
                .withArguments(Arrays.asList())
                .withGetDebugInfo(HDInsightActivityDebugInfoOption.NONE)
                .withJarLinkedService(
                    new LinkedServiceReference().withReferenceName("totryegpkhxrme").withParameters(mapOf()))
                .withJarLibs(Arrays.asList())
                .withDefines(mapOf());
        model = BinaryData.fromObject(model).toObject(HDInsightMapReduceActivityTypeProperties.class);
        Assertions.assertEquals("dfl", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.NONE, model.getDebugInfo());
        Assertions.assertEquals("totryegpkhxrme", model.jarLinkedService().referenceName());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
