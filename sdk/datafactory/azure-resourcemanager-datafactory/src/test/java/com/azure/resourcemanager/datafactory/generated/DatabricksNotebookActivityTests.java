// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DatabricksNotebookActivity;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DatabricksNotebookActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DatabricksNotebookActivity model = BinaryData.fromString(
            "{\"type\":\"DatabricksNotebook\",\"typeProperties\":{\"notebookPath\":\"dataidcytnzy\",\"baseParameters\":{\"nt\":\"datadwgqisrlhxfmvngd\",\"hnh\":\"datavn\"},\"libraries\":[{\"j\":\"databorjyprcojwiigt\",\"iftm\":\"dataczoqpkpib\",\"hlnaymsgbyho\":\"datazofont\",\"ennobjixoqqjbsag\":\"dataqugycorgnxmn\"},{\"r\":\"dataeoefwnjsorhpga\",\"hwxu\":\"datamwlpa\",\"s\":\"dataaktnmwlklqhw\"},{\"lsuiyvbildw\":\"datakoezcabf\",\"nvjqeigpylpmtw\":\"datal\"}]},\"linkedServiceName\":{\"referenceName\":\"dt\",\"parameters\":{\"indyurwzrxkha\":\"datavaxsw\"}},\"policy\":{\"timeout\":\"datajambtvc\",\"retry\":\"datalpbvponxhszrot\",\"retryIntervalInSeconds\":1589919162,\"secureInput\":true,\"secureOutput\":true,\"\":{\"nbzikl\":\"dataao\",\"zvvkehasxjmf\":\"datayzrtawjk\"}},\"name\":\"bs\",\"description\":\"xwcimamtqfrdfoiq\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"nrj\",\"dependencyConditions\":[\"Succeeded\",\"Succeeded\",\"Failed\"],\"\":{\"kmlfcgk\":\"dataytjmlroxvsclmt\",\"bestyy\":\"dataeitphzuaznsbvu\",\"impuwgrny\":\"dataljo\",\"awzjhfauub\":\"datarizsekfudranmdcf\"}},{\"activity\":\"vnaf\",\"dependencyConditions\":[\"Succeeded\",\"Completed\"],\"\":{\"grufbzgnrjfzba\":\"datacmviclhommhaxt\"}},{\"activity\":\"qmmkmqdfjeu\",\"dependencyConditions\":[\"Failed\",\"Skipped\",\"Failed\",\"Failed\"],\"\":{\"vywolccxd\":\"dataskzplbzyju\",\"spnzqohhhexgxn\":\"datatkhehbosaxge\",\"vfottycfo\":\"datafodxiy\",\"sjxurrhpihtxgjzi\":\"datatzdxbspglcbhah\"}},{\"activity\":\"yhujgrbjmzagxjoi\",\"dependencyConditions\":[\"Completed\",\"Skipped\",\"Succeeded\",\"Skipped\"],\"\":{\"d\":\"datacrf\",\"jzquwjgfihlo\":\"datatcf\",\"efxvggkjbhs\":\"dataauorzbk\",\"yajijzrt\":\"datayy\"}}],\"userProperties\":[{\"name\":\"gonhmblkkel\",\"value\":\"datajk\"},{\"name\":\"emneu\",\"value\":\"datapynenca\"},{\"name\":\"kqvcf\",\"value\":\"datargwxgczwxyghs\"}],\"\":{\"hygbe\":\"datavxcrzpdqwa\",\"lmfh\":\"datafiwbtfki\"}}")
            .toObject(DatabricksNotebookActivity.class);
        Assertions.assertEquals("bs", model.name());
        Assertions.assertEquals("xwcimamtqfrdfoiq", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("nrj", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("gonhmblkkel", model.userProperties().get(0).name());
        Assertions.assertEquals("dt", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1589919162, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DatabricksNotebookActivity model = new DatabricksNotebookActivity().withName("bs")
            .withDescription("xwcimamtqfrdfoiq")
            .withState(ActivityState.ACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
            .withDependsOn(Arrays.asList(
                new ActivityDependency().withActivity("nrj")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED,
                        DependencyCondition.SUCCEEDED, DependencyCondition.FAILED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("vnaf")
                    .withDependencyConditions(
                        Arrays.asList(DependencyCondition.SUCCEEDED, DependencyCondition.COMPLETED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("qmmkmqdfjeu")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED, DependencyCondition.SKIPPED,
                        DependencyCondition.FAILED, DependencyCondition.FAILED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("yhujgrbjmzagxjoi")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED, DependencyCondition.SKIPPED,
                        DependencyCondition.SUCCEEDED, DependencyCondition.SKIPPED))
                    .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("gonhmblkkel").withValue("datajk"),
                new UserProperty().withName("emneu").withValue("datapynenca"),
                new UserProperty().withName("kqvcf").withValue("datargwxgczwxyghs")))
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("dt")
                .withParameters(mapOf("indyurwzrxkha", "datavaxsw")))
            .withPolicy(new ActivityPolicy().withTimeout("datajambtvc")
                .withRetry("datalpbvponxhszrot")
                .withRetryIntervalInSeconds(1589919162)
                .withSecureInput(true)
                .withSecureOutput(true)
                .withAdditionalProperties(mapOf()))
            .withNotebookPath("dataidcytnzy")
            .withBaseParameters(mapOf("nt", "datadwgqisrlhxfmvngd", "hnh", "datavn"))
            .withLibraries(Arrays.asList(
                mapOf("j", "databorjyprcojwiigt", "iftm", "dataczoqpkpib", "hlnaymsgbyho", "datazofont",
                    "ennobjixoqqjbsag", "dataqugycorgnxmn"),
                mapOf("r", "dataeoefwnjsorhpga", "hwxu", "datamwlpa", "s", "dataaktnmwlklqhw"),
                mapOf("lsuiyvbildw", "datakoezcabf", "nvjqeigpylpmtw", "datal")));
        model = BinaryData.fromObject(model).toObject(DatabricksNotebookActivity.class);
        Assertions.assertEquals("bs", model.name());
        Assertions.assertEquals("xwcimamtqfrdfoiq", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("nrj", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("gonhmblkkel", model.userProperties().get(0).name());
        Assertions.assertEquals("dt", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1589919162, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
