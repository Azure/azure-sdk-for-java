// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DatabricksNotebookActivity;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DatabricksNotebookActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DatabricksNotebookActivity model = BinaryData.fromString(
            "{\"type\":\"DatabricksNotebook\",\"typeProperties\":{\"notebookPath\":\"datalzqmwmwoggbxias\",\"baseParameters\":{\"lfedwhvhlzpvpix\":\"dataucnp\",\"vc\":\"datajvycodfubnvdibb\",\"nmptxlrvkl\":\"databtmh\",\"sdi\":\"datapauqya\"},\"libraries\":[{\"bvahj\":\"datavksoxykrmalen\",\"gojopsgedsyyku\":\"datavbnlxe\"},{\"ntlf\":\"datafmt\",\"vazffzhbh\":\"dataiq\"},{\"cy\":\"datagwlrdgpudbimehd\",\"ut\":\"datayfhwkbhapfnyo\"}]},\"linkedServiceName\":{\"referenceName\":\"ehjrmf\",\"parameters\":{\"zcpyirngfujvx\":\"dataihnhwgzunbcv\"}},\"policy\":{\"timeout\":\"dataqqf\",\"retry\":\"datadobutkqwrsxxcaxg\",\"retryIntervalInSeconds\":1935871213,\"secureInput\":true,\"secureOutput\":false,\"\":{\"fcblv\":\"datanchrvsfnlgwpuas\",\"dhdiiwvz\":\"datakhdigxxtfvoa\",\"tm\":\"dataffm\",\"hxpmtz\":\"dataartpdyhbpfxm\"}},\"name\":\"vxfglilfjcowr\",\"description\":\"yocjxsgrtnita\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"vp\",\"dependencyConditions\":[\"Succeeded\",\"Failed\"],\"\":{\"t\":\"datanffexzzijt\",\"plwyluvqp\":\"dataewniwt\"}},{\"activity\":\"wvoyqsnt\",\"dependencyConditions\":[\"Failed\",\"Completed\",\"Skipped\",\"Skipped\"],\"\":{\"sxcqto\":\"dataaldss\"}},{\"activity\":\"oanxinlm\",\"dependencyConditions\":[\"Succeeded\"],\"\":{\"s\":\"databuiv\"}}],\"userProperties\":[{\"name\":\"nenhyhdu\",\"value\":\"dataayk\"},{\"name\":\"jhwybbdaedq\",\"value\":\"datatzsltsxmdace\"}],\"\":{\"qjxdirdcxuiam\":\"dataapfieau\",\"fyivvtxqp\":\"dataxlhfxjcqofpwjjtd\",\"dbjd\":\"datamqogtohzfvysv\",\"mzjppblnervt\":\"datahtxvmnyslpdq\"}}")
            .toObject(DatabricksNotebookActivity.class);
        Assertions.assertEquals("vxfglilfjcowr", model.name());
        Assertions.assertEquals("yocjxsgrtnita", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("vp", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("nenhyhdu", model.userProperties().get(0).name());
        Assertions.assertEquals("ehjrmf", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1935871213, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DatabricksNotebookActivity model
            = new DatabricksNotebookActivity().withName("vxfglilfjcowr")
                .withDescription("yocjxsgrtnita")
                .withState(ActivityState.INACTIVE)
                .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
                .withDependsOn(Arrays.asList(
                    new ActivityDependency().withActivity("vp")
                        .withDependencyConditions(
                            Arrays.asList(DependencyCondition.SUCCEEDED, DependencyCondition.FAILED))
                        .withAdditionalProperties(mapOf()),
                    new ActivityDependency().withActivity("wvoyqsnt")
                        .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED,
                            DependencyCondition.COMPLETED, DependencyCondition.SKIPPED, DependencyCondition.SKIPPED))
                        .withAdditionalProperties(mapOf()),
                    new ActivityDependency().withActivity("oanxinlm")
                        .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED))
                        .withAdditionalProperties(mapOf())))
                .withUserProperties(Arrays.asList(new UserProperty().withName("nenhyhdu").withValue("dataayk"),
                    new UserProperty().withName("jhwybbdaedq").withValue("datatzsltsxmdace")))
                .withLinkedServiceName(new LinkedServiceReference().withReferenceName("ehjrmf")
                    .withParameters(mapOf("zcpyirngfujvx", "dataihnhwgzunbcv")))
                .withPolicy(new ActivityPolicy().withTimeout("dataqqf")
                    .withRetry("datadobutkqwrsxxcaxg")
                    .withRetryIntervalInSeconds(1935871213)
                    .withSecureInput(true)
                    .withSecureOutput(false)
                    .withAdditionalProperties(mapOf()))
                .withNotebookPath("datalzqmwmwoggbxias")
                .withBaseParameters(mapOf("lfedwhvhlzpvpix", "dataucnp", "vc", "datajvycodfubnvdibb", "nmptxlrvkl",
                    "databtmh", "sdi", "datapauqya"))
                .withLibraries(Arrays.asList(mapOf("bvahj", "datavksoxykrmalen", "gojopsgedsyyku", "datavbnlxe"),
                    mapOf("ntlf", "datafmt", "vazffzhbh", "dataiq"),
                    mapOf("cy", "datagwlrdgpudbimehd", "ut", "datayfhwkbhapfnyo")));
        model = BinaryData.fromObject(model).toObject(DatabricksNotebookActivity.class);
        Assertions.assertEquals("vxfglilfjcowr", model.name());
        Assertions.assertEquals("yocjxsgrtnita", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("vp", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("nenhyhdu", model.userProperties().get(0).name());
        Assertions.assertEquals("ehjrmf", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1935871213, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
