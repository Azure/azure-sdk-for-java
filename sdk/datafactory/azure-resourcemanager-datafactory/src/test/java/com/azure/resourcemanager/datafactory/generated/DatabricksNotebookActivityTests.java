// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DatabricksNotebookActivity;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DatabricksNotebookActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DatabricksNotebookActivity model = BinaryData.fromString(
            "{\"type\":\"DatabricksNotebook\",\"typeProperties\":{\"notebookPath\":\"dataga\",\"baseParameters\":{\"sxu\":\"datair\",\"zchkww\":\"databnbofyeggaauubk\",\"lujwcyvpxbqujno\":\"databxjpytkakhvao\",\"gwzvdqpxicpozzhf\":\"datafxirjcc\"},\"libraries\":[{\"ps\":\"dataqpc\",\"fkzu\":\"datardkdomyqbeasbvz\",\"bmfqtnqaqlt\":\"datazqudqgfr\"},{\"yfitdprbmmfqte\":\"datahfphawjovqtvbusy\",\"egykzdspbjk\":\"dataxgikdcjmbwrhpwtu\",\"gerangxnafo\":\"datandsrwhjhi\"},{\"qcxrvwduspxij\":\"dataq\",\"yvzpv\":\"dataremvzqc\",\"ucfsup\":\"datasduzfyb\",\"yjwxwpoywymtw\":\"dataqpg\"},{\"x\":\"datadgbg\",\"gia\":\"datazrzhkhmw\",\"nlzalsuj\":\"datarftpgqxnyoakd\"}]},\"linkedServiceName\":{\"referenceName\":\"gz\",\"parameters\":{\"bmfejtdboa\":\"databce\",\"jypgbhfzypy\":\"datanya\"}},\"policy\":{\"timeout\":\"datarlrjgrzxaa\",\"retry\":\"databhkaqzahjqslshc\",\"retryIntervalInSeconds\":1784468344,\"secureInput\":true,\"secureOutput\":false,\"\":{\"co\":\"datagsnf\",\"upaqzithojrtcdav\":\"datat\",\"wezwkparj\":\"datarifmtk\"}},\"name\":\"xirsvjozexxzkci\",\"description\":\"keawrumhz\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"gsshdubq\",\"dependencyConditions\":[\"Failed\"],\"\":{\"khi\":\"databomw\",\"wbormfnntpocf\":\"dataqiqx\",\"dohytkhq\":\"datavmzs\"}},{\"activity\":\"h\",\"dependencyConditions\":[\"Failed\",\"Skipped\",\"Failed\"],\"\":{\"eaivbzrmsoeddwji\":\"datamttsw\",\"oatfiomd\":\"datarzavciffqameccuq\"}},{\"activity\":\"ecrbcvhkkdsy\",\"dependencyConditions\":[\"Completed\",\"Succeeded\"],\"\":{\"xluqpzwlbccxjbal\":\"databzohvpq\"}}],\"userProperties\":[{\"name\":\"jnknfv\",\"value\":\"dataavr\"}],\"\":{\"qcvan\":\"dataib\",\"s\":\"datauiiprfijmil\"}}")
            .toObject(DatabricksNotebookActivity.class);
        Assertions.assertEquals("xirsvjozexxzkci", model.name());
        Assertions.assertEquals("keawrumhz", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("gsshdubq", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("jnknfv", model.userProperties().get(0).name());
        Assertions.assertEquals("gz", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1784468344, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DatabricksNotebookActivity model = new DatabricksNotebookActivity().withName("xirsvjozexxzkci")
            .withDescription("keawrumhz")
            .withState(ActivityState.INACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
            .withDependsOn(Arrays.asList(
                new ActivityDependency().withActivity("gsshdubq")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("h")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED, DependencyCondition.SKIPPED,
                        DependencyCondition.FAILED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("ecrbcvhkkdsy")
                    .withDependencyConditions(
                        Arrays.asList(DependencyCondition.COMPLETED, DependencyCondition.SUCCEEDED))
                    .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("jnknfv").withValue("dataavr")))
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("gz")
                .withParameters(mapOf("bmfejtdboa", "databce", "jypgbhfzypy", "datanya")))
            .withPolicy(new ActivityPolicy().withTimeout("datarlrjgrzxaa")
                .withRetry("databhkaqzahjqslshc")
                .withRetryIntervalInSeconds(1784468344)
                .withSecureInput(true)
                .withSecureOutput(false)
                .withAdditionalProperties(mapOf()))
            .withNotebookPath("dataga")
            .withBaseParameters(mapOf("sxu", "datair", "zchkww", "databnbofyeggaauubk", "lujwcyvpxbqujno",
                "databxjpytkakhvao", "gwzvdqpxicpozzhf", "datafxirjcc"))
            .withLibraries(
                Arrays.asList(mapOf("ps", "dataqpc", "fkzu", "datardkdomyqbeasbvz", "bmfqtnqaqlt", "datazqudqgfr"),
                    mapOf("yfitdprbmmfqte", "datahfphawjovqtvbusy", "egykzdspbjk", "dataxgikdcjmbwrhpwtu",
                        "gerangxnafo", "datandsrwhjhi"),
                    mapOf("qcxrvwduspxij", "dataq", "yvzpv", "dataremvzqc", "ucfsup", "datasduzfyb", "yjwxwpoywymtw",
                        "dataqpg"),
                    mapOf("x", "datadgbg", "gia", "datazrzhkhmw", "nlzalsuj", "datarftpgqxnyoakd")));
        model = BinaryData.fromObject(model).toObject(DatabricksNotebookActivity.class);
        Assertions.assertEquals("xirsvjozexxzkci", model.name());
        Assertions.assertEquals("keawrumhz", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("gsshdubq", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("jnknfv", model.userProperties().get(0).name());
        Assertions.assertEquals("gz", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1784468344, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
