// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.AzureMLExecutePipelineActivity;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureMLExecutePipelineActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureMLExecutePipelineActivity model = BinaryData.fromString(
            "{\"type\":\"AzureMLExecutePipeline\",\"typeProperties\":{\"mlPipelineId\":\"datat\",\"mlPipelineEndpointId\":\"dataawtfyzq\",\"version\":\"dataglixhapvwacwrcte\",\"experimentName\":\"dataucnknzncoxeop\",\"mlPipelineParameters\":\"dataleuaxrsyxeqwgaei\",\"dataPathAssignments\":\"dataovrcdcidcxkyw\",\"mlParentRunId\":\"dataztssqbclaeciwz\",\"continueOnStepFailure\":\"datattkhaxqyinfdmq\"},\"linkedServiceName\":{\"referenceName\":\"jkhqaxpicza\",\"parameters\":{\"ufezwgwmdv\":\"datavsnnqv\",\"dkjusqhr\":\"dataskffqqaobbq\",\"ykhtsycct\":\"dataadffdr\",\"siembc\":\"datarvn\"}},\"policy\":{\"timeout\":\"datam\",\"retry\":\"datawh\",\"retryIntervalInSeconds\":886184387,\"secureInput\":true,\"secureOutput\":true,\"\":{\"oa\":\"datacorqbmk\"}},\"name\":\"aaqfqgmwdohvinvz\",\"description\":\"ubsaskgi\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"acxldhoqcdpwx\",\"dependencyConditions\":[\"Skipped\",\"Skipped\"],\"\":{\"axc\":\"datagznp\",\"zo\":\"datahtlqhikmfzdlh\",\"idnj\":\"datahnuziaztmxwmjaev\"}}],\"userProperties\":[{\"name\":\"unhwdirtiyraqyav\",\"value\":\"datayk\"},{\"name\":\"gcfh\",\"value\":\"datah\"},{\"name\":\"ns\",\"value\":\"datahzysuoqfbyc\"},{\"name\":\"aryxrttn\",\"value\":\"datajhjbfoemm\"}],\"\":{\"jm\":\"datatlgdvvpxhdefydit\"}}")
            .toObject(AzureMLExecutePipelineActivity.class);
        Assertions.assertEquals("aaqfqgmwdohvinvz", model.name());
        Assertions.assertEquals("ubsaskgi", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.onInactiveMarkAs());
        Assertions.assertEquals("acxldhoqcdpwx", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("unhwdirtiyraqyav", model.userProperties().get(0).name());
        Assertions.assertEquals("jkhqaxpicza", model.linkedServiceName().referenceName());
        Assertions.assertEquals(886184387, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureMLExecutePipelineActivity model = new AzureMLExecutePipelineActivity().withName("aaqfqgmwdohvinvz")
            .withDescription("ubsaskgi")
            .withState(ActivityState.INACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SUCCEEDED)
            .withDependsOn(Arrays.asList(new ActivityDependency().withActivity("acxldhoqcdpwx")
                .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.SKIPPED))
                .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("unhwdirtiyraqyav").withValue("datayk"),
                new UserProperty().withName("gcfh").withValue("datah"),
                new UserProperty().withName("ns").withValue("datahzysuoqfbyc"),
                new UserProperty().withName("aryxrttn").withValue("datajhjbfoemm")))
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("jkhqaxpicza")
                .withParameters(mapOf("ufezwgwmdv", "datavsnnqv", "dkjusqhr", "dataskffqqaobbq", "ykhtsycct",
                    "dataadffdr", "siembc", "datarvn")))
            .withPolicy(new ActivityPolicy().withTimeout("datam")
                .withRetry("datawh")
                .withRetryIntervalInSeconds(886184387)
                .withSecureInput(true)
                .withSecureOutput(true)
                .withAdditionalProperties(mapOf()))
            .withMlPipelineId("datat")
            .withMlPipelineEndpointId("dataawtfyzq")
            .withVersion("dataglixhapvwacwrcte")
            .withExperimentName("dataucnknzncoxeop")
            .withMlPipelineParameters("dataleuaxrsyxeqwgaei")
            .withDataPathAssignments("dataovrcdcidcxkyw")
            .withMlParentRunId("dataztssqbclaeciwz")
            .withContinueOnStepFailure("datattkhaxqyinfdmq");
        model = BinaryData.fromObject(model).toObject(AzureMLExecutePipelineActivity.class);
        Assertions.assertEquals("aaqfqgmwdohvinvz", model.name());
        Assertions.assertEquals("ubsaskgi", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.onInactiveMarkAs());
        Assertions.assertEquals("acxldhoqcdpwx", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("unhwdirtiyraqyav", model.userProperties().get(0).name());
        Assertions.assertEquals("jkhqaxpicza", model.linkedServiceName().referenceName());
        Assertions.assertEquals(886184387, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
