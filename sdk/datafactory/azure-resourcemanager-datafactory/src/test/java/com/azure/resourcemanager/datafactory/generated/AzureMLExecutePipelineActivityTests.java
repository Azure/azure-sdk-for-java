// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.AzureMLExecutePipelineActivity;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureMLExecutePipelineActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureMLExecutePipelineActivity model = BinaryData.fromString(
            "{\"type\":\"AzureMLExecutePipeline\",\"typeProperties\":{\"mlPipelineId\":\"datamymalvoydqgelc\",\"mlPipelineEndpointId\":\"dataccco\",\"version\":\"dataljzqvevmzpo\",\"experimentName\":\"datah\",\"mlPipelineParameters\":\"dataipnbdkhvxt\",\"dataPathAssignments\":\"dataihydwkdvy\",\"mlParentRunId\":\"datazqjpyq\",\"continueOnStepFailure\":\"dataqydtllpwzaya\"},\"linkedServiceName\":{\"referenceName\":\"ell\",\"parameters\":{\"edsnubirusknpy\":\"dataplhre\"}},\"policy\":{\"timeout\":\"datatoktrjwnqfdgcr\",\"retry\":\"datagktmzooszvungkkf\",\"retryIntervalInSeconds\":1773094085,\"secureInput\":false,\"secureOutput\":false,\"\":{\"pidb\":\"datatyeqeasiadscjha\",\"lcowb\":\"dataqvi\",\"w\":\"datapvmndqmzcgqedono\",\"eaahnkntldddk\":\"datawhvqkeuiy\"}},\"name\":\"pvusigw\",\"description\":\"qnxrrji\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"ksoodqnouwxkeql\",\"dependencyConditions\":[\"Failed\",\"Failed\",\"Skipped\",\"Succeeded\"],\"\":{\"hxlcvzqhtgtadtoo\":\"datanqvudfi\"}},{\"activity\":\"k\",\"dependencyConditions\":[\"Skipped\",\"Failed\"],\"\":{\"petwgtmpytom\":\"datanlqwxskltz\",\"g\":\"datatubhvb\",\"zdazxfz\":\"datavpyjpaih\",\"sjnlekotqhd\":\"datallihwpsrdaoixgqt\"}}],\"userProperties\":[{\"name\":\"kn\",\"value\":\"datahyoimtfk\"},{\"name\":\"cdjswxeknhvcc\",\"value\":\"datauntghwcbgc\"},{\"name\":\"gbyfcbcak\",\"value\":\"dataqvhwzeukuml\"},{\"name\":\"f\",\"value\":\"databo\"}],\"\":{\"muiqir\":\"datawaiywzgv\",\"zbnqmxirspj\":\"datasznxz\",\"zisdnbourw\":\"dataakrbew\",\"sdluquyxgmzyqftl\":\"datag\"}}")
            .toObject(AzureMLExecutePipelineActivity.class);
        Assertions.assertEquals("pvusigw", model.name());
        Assertions.assertEquals("qnxrrji", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("ksoodqnouwxkeql", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("kn", model.userProperties().get(0).name());
        Assertions.assertEquals("ell", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1773094085, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureMLExecutePipelineActivity model = new AzureMLExecutePipelineActivity().withName("pvusigw")
            .withDescription("qnxrrji")
            .withState(ActivityState.ACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
            .withDependsOn(Arrays.asList(
                new ActivityDependency().withActivity("ksoodqnouwxkeql")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED, DependencyCondition.FAILED,
                        DependencyCondition.SKIPPED, DependencyCondition.SUCCEEDED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("k")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.FAILED))
                    .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("kn").withValue("datahyoimtfk"),
                new UserProperty().withName("cdjswxeknhvcc").withValue("datauntghwcbgc"),
                new UserProperty().withName("gbyfcbcak").withValue("dataqvhwzeukuml"),
                new UserProperty().withName("f").withValue("databo")))
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("ell")
                .withParameters(mapOf("edsnubirusknpy", "dataplhre")))
            .withPolicy(new ActivityPolicy().withTimeout("datatoktrjwnqfdgcr")
                .withRetry("datagktmzooszvungkkf")
                .withRetryIntervalInSeconds(1773094085)
                .withSecureInput(false)
                .withSecureOutput(false)
                .withAdditionalProperties(mapOf()))
            .withMlPipelineId("datamymalvoydqgelc")
            .withMlPipelineEndpointId("dataccco")
            .withVersion("dataljzqvevmzpo")
            .withExperimentName("datah")
            .withMlPipelineParameters("dataipnbdkhvxt")
            .withDataPathAssignments("dataihydwkdvy")
            .withMlParentRunId("datazqjpyq")
            .withContinueOnStepFailure("dataqydtllpwzaya");
        model = BinaryData.fromObject(model).toObject(AzureMLExecutePipelineActivity.class);
        Assertions.assertEquals("pvusigw", model.name());
        Assertions.assertEquals("qnxrrji", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("ksoodqnouwxkeql", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("kn", model.userProperties().get(0).name());
        Assertions.assertEquals("ell", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1773094085, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
