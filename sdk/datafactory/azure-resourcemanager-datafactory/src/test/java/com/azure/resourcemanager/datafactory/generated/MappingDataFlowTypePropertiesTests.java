// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.MappingDataFlowTypeProperties;
import com.azure.resourcemanager.datafactory.models.DataFlowReference;
import com.azure.resourcemanager.datafactory.models.DataFlowReferenceType;
import com.azure.resourcemanager.datafactory.models.DataFlowSink;
import com.azure.resourcemanager.datafactory.models.DataFlowSource;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.Transformation;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MappingDataFlowTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MappingDataFlowTypeProperties model = BinaryData.fromString(
            "{\"sources\":[{\"schemaLinkedService\":{\"referenceName\":\"ee\",\"parameters\":{\"jhdhz\":\"datahryvcjwqwoqsra\"}},\"name\":\"b\",\"description\":\"ijh\",\"dataset\":{\"referenceName\":\"zgdkkagvwu\",\"parameters\":{\"mzhwilzzhni\":\"datausmmor\",\"neyttl\":\"datamriprlk\",\"bkut\":\"datacxiv\",\"ynbpvzlqywauy\":\"dataumltwjflu\"}},\"linkedService\":{\"referenceName\":\"jckhmocgj\",\"parameters\":{\"bsjrclrv\":\"dataouarhwvixqqggljk\",\"nrbctbhpjhxpcvrd\":\"dataz\",\"it\":\"datay\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"qady\",\"datasetParameters\":\"datajahwriuomzczf\",\"parameters\":{\"xwspcaxikhfjq\":\"dataeevsa\",\"ysemtmesrfsvpin\":\"databglcxkxgzzromvy\"},\"\":{\"zbbgspftesubzpvp\":\"dataatqtdiswxspvckoj\"}}},{\"schemaLinkedService\":{\"referenceName\":\"ylytcovqseusr\",\"parameters\":{\"zfxnxmlbmuos\":\"datad\",\"zlwhbwzjnufzrfgm\":\"datakjmdihdcyy\",\"tftedz\":\"dataqgnnbz\",\"vdpwwobtdphti\":\"dataubjtvgjsxmtyjjv\"}},\"name\":\"sffofwanmhksca\",\"description\":\"azcg\",\"dataset\":{\"referenceName\":\"friwgybjp\",\"parameters\":{\"wewqkj\":\"datakscvgllixdgbyf\"}},\"linkedService\":{\"referenceName\":\"prwpxsoohu\",\"parameters\":{\"lfb\":\"datacskltezuuggg\",\"srtmdylperpiltt\":\"datardcgu\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"czfcmfpfbod\",\"datasetParameters\":\"dataresrgvtshuvft\",\"parameters\":{\"zgjypanhxmpdxxz\":\"datavmuqke\",\"tnxlkfhglhr\":\"datatwwzjw\",\"qxovppqibukk\":\"dataoxqwecrsnhpcse\",\"etjsczivfqbqna\":\"datavzrlrmlcc\"},\"\":{\"yvdgxlyzk\":\"datayenzsieuscpl\"}}}],\"sinks\":[{\"schemaLinkedService\":{\"referenceName\":\"shezs\",\"parameters\":{\"sayebra\":\"datalrupjovmo\",\"ykykip\":\"datawzlpzbtz\",\"mbezacfpztg\":\"datasdyepfno\"}},\"rejectedDataLinkedService\":{\"referenceName\":\"wyqejgaao\",\"parameters\":{\"ngdyfcixrhlcq\":\"datagkppgkqzkcyzmf\",\"goiutgw\":\"datahoe\",\"yntacihnco\":\"datamkahpqha\",\"mliqmvlb\":\"datamip\"}},\"name\":\"i\",\"description\":\"aqgrv\",\"dataset\":{\"referenceName\":\"omxp\",\"parameters\":{\"wiqbuoutm\":\"datatsdfjyieso\",\"gbww\":\"datayzgleofjs\"}},\"linkedService\":{\"referenceName\":\"dajfwnncfma\",\"parameters\":{\"l\":\"datagjj\",\"uxtndopgjttbasua\":\"dataiqlwixvtbou\",\"lndbeaqbkixv\":\"dataap\",\"spugzfeuzjljmph\":\"datalwynpbbfqvzfj\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"ezolgjzm\",\"datasetParameters\":\"datauydoccnx\",\"parameters\":{\"hbatecaatsdohzni\":\"datanzbuia\",\"wiinjdllw\":\"datacbdaom\"},\"\":{\"owavvqxuajgcqw\":\"datae\"}}}],\"transformations\":[{\"name\":\"nkgfcfdr\",\"description\":\"si\",\"dataset\":{\"referenceName\":\"xtclhuulriqbyok\",\"parameters\":{\"cdjwsu\":\"databzsxebrslttfy\",\"holhujbfw\":\"dataardnagttpufpbpgn\",\"whdmcvhtbbz\":\"dataiplkysolsyjprxs\"}},\"linkedService\":{\"referenceName\":\"f\",\"parameters\":{\"zgihotje\":\"datawzbxpc\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"mx\",\"datasetParameters\":\"datalrrskap\",\"parameters\":{\"uyader\":\"dataiee\"},\"\":{\"yimyccgrvk\":\"dataokyk\",\"ersejeg\":\"dataxzznnui\"}}},{\"name\":\"rkjguwrjmwvvbt\",\"description\":\"kxxi\",\"dataset\":{\"referenceName\":\"gxql\",\"parameters\":{\"vjaqu\":\"dataotjgxieqfkyfhi\"}},\"linkedService\":{\"referenceName\":\"yynvskpa\",\"parameters\":{\"bxcbccwkqm\":\"datageumexm\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"p\",\"datasetParameters\":\"dataiscr\",\"parameters\":{\"dahlfxlmuifmuadj\":\"datagftrqrejdaahuqim\",\"skiioshjgczetybn\":\"datafsn\",\"j\":\"datagztlcgc\"},\"\":{\"mywj\":\"dataj\",\"cljkxpyl\":\"dataebecuvlbefv\"}}}],\"script\":\"oxz\",\"scriptLines\":[\"syxjijeyp\",\"vrbkerdkdkgaw\"]}")
            .toObject(MappingDataFlowTypeProperties.class);
        Assertions.assertEquals("b", model.sources().get(0).name());
        Assertions.assertEquals("ijh", model.sources().get(0).description());
        Assertions.assertEquals("zgdkkagvwu", model.sources().get(0).dataset().referenceName());
        Assertions.assertEquals("jckhmocgj", model.sources().get(0).linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.sources().get(0).flowlet().type());
        Assertions.assertEquals("qady", model.sources().get(0).flowlet().referenceName());
        Assertions.assertEquals("ee", model.sources().get(0).schemaLinkedService().referenceName());
        Assertions.assertEquals("i", model.sinks().get(0).name());
        Assertions.assertEquals("aqgrv", model.sinks().get(0).description());
        Assertions.assertEquals("omxp", model.sinks().get(0).dataset().referenceName());
        Assertions.assertEquals("dajfwnncfma", model.sinks().get(0).linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.sinks().get(0).flowlet().type());
        Assertions.assertEquals("ezolgjzm", model.sinks().get(0).flowlet().referenceName());
        Assertions.assertEquals("shezs", model.sinks().get(0).schemaLinkedService().referenceName());
        Assertions.assertEquals("wyqejgaao", model.sinks().get(0).rejectedDataLinkedService().referenceName());
        Assertions.assertEquals("nkgfcfdr", model.transformations().get(0).name());
        Assertions.assertEquals("si", model.transformations().get(0).description());
        Assertions.assertEquals("xtclhuulriqbyok", model.transformations().get(0).dataset().referenceName());
        Assertions.assertEquals("f", model.transformations().get(0).linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE,
            model.transformations().get(0).flowlet().type());
        Assertions.assertEquals("mx", model.transformations().get(0).flowlet().referenceName());
        Assertions.assertEquals("oxz", model.script());
        Assertions.assertEquals("syxjijeyp", model.scriptLines().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MappingDataFlowTypeProperties model
            = new MappingDataFlowTypeProperties()
                .withSources(
                    Arrays.asList(
                        new DataFlowSource().withName("b")
                            .withDescription("ijh")
                            .withDataset(new DatasetReference().withReferenceName("zgdkkagvwu")
                                .withParameters(mapOf("mzhwilzzhni", "datausmmor", "neyttl", "datamriprlk", "bkut",
                                    "datacxiv", "ynbpvzlqywauy", "dataumltwjflu")))
                            .withLinkedService(new LinkedServiceReference().withReferenceName("jckhmocgj")
                                .withParameters(mapOf("bsjrclrv", "dataouarhwvixqqggljk", "nrbctbhpjhxpcvrd", "dataz",
                                    "it", "datay")))
                            .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                                .withReferenceName("qady")
                                .withDatasetParameters("datajahwriuomzczf")
                                .withParameters(
                                    mapOf("xwspcaxikhfjq", "dataeevsa", "ysemtmesrfsvpin", "databglcxkxgzzromvy"))
                                .withAdditionalProperties(mapOf()))
                            .withSchemaLinkedService(new LinkedServiceReference().withReferenceName("ee")
                                .withParameters(mapOf("jhdhz", "datahryvcjwqwoqsra"))),
                        new DataFlowSource().withName("sffofwanmhksca")
                            .withDescription("azcg")
                            .withDataset(new DatasetReference().withReferenceName("friwgybjp")
                                .withParameters(mapOf("wewqkj", "datakscvgllixdgbyf")))
                            .withLinkedService(new LinkedServiceReference().withReferenceName("prwpxsoohu")
                                .withParameters(mapOf("lfb", "datacskltezuuggg", "srtmdylperpiltt", "datardcgu")))
                            .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                                .withReferenceName("czfcmfpfbod")
                                .withDatasetParameters("dataresrgvtshuvft")
                                .withParameters(mapOf("zgjypanhxmpdxxz", "datavmuqke", "tnxlkfhglhr", "datatwwzjw",
                                    "qxovppqibukk", "dataoxqwecrsnhpcse", "etjsczivfqbqna", "datavzrlrmlcc"))
                                .withAdditionalProperties(mapOf()))
                            .withSchemaLinkedService(new LinkedServiceReference().withReferenceName("ylytcovqseusr")
                                .withParameters(mapOf("zfxnxmlbmuos", "datad", "zlwhbwzjnufzrfgm", "datakjmdihdcyy",
                                    "tftedz", "dataqgnnbz", "vdpwwobtdphti", "dataubjtvgjsxmtyjjv")))))
                .withSinks(
                    Arrays.asList(new DataFlowSink().withName("i")
                        .withDescription("aqgrv")
                        .withDataset(new DatasetReference().withReferenceName("omxp")
                            .withParameters(mapOf("wiqbuoutm", "datatsdfjyieso", "gbww", "datayzgleofjs")))
                        .withLinkedService(new LinkedServiceReference().withReferenceName("dajfwnncfma")
                            .withParameters(mapOf("l", "datagjj", "uxtndopgjttbasua", "dataiqlwixvtbou", "lndbeaqbkixv",
                                "dataap", "spugzfeuzjljmph", "datalwynpbbfqvzfj")))
                        .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                            .withReferenceName("ezolgjzm")
                            .withDatasetParameters("datauydoccnx")
                            .withParameters(mapOf("hbatecaatsdohzni", "datanzbuia", "wiinjdllw", "datacbdaom"))
                            .withAdditionalProperties(mapOf()))
                        .withSchemaLinkedService(new LinkedServiceReference().withReferenceName("shezs")
                            .withParameters(mapOf("sayebra", "datalrupjovmo", "ykykip", "datawzlpzbtz", "mbezacfpztg",
                                "datasdyepfno")))
                        .withRejectedDataLinkedService(new LinkedServiceReference().withReferenceName("wyqejgaao")
                            .withParameters(mapOf("ngdyfcixrhlcq", "datagkppgkqzkcyzmf", "goiutgw", "datahoe",
                                "yntacihnco", "datamkahpqha", "mliqmvlb", "datamip")))))
                .withTransformations(Arrays.asList(
                    new Transformation().withName("nkgfcfdr")
                        .withDescription("si")
                        .withDataset(new DatasetReference().withReferenceName("xtclhuulriqbyok")
                            .withParameters(mapOf("cdjwsu", "databzsxebrslttfy", "holhujbfw", "dataardnagttpufpbpgn",
                                "whdmcvhtbbz", "dataiplkysolsyjprxs")))
                        .withLinkedService(new LinkedServiceReference().withReferenceName("f")
                            .withParameters(mapOf("zgihotje", "datawzbxpc")))
                        .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                            .withReferenceName("mx")
                            .withDatasetParameters("datalrrskap")
                            .withParameters(mapOf("uyader", "dataiee"))
                            .withAdditionalProperties(mapOf())),
                    new Transformation().withName("rkjguwrjmwvvbt")
                        .withDescription("kxxi")
                        .withDataset(new DatasetReference().withReferenceName("gxql")
                            .withParameters(mapOf("vjaqu", "dataotjgxieqfkyfhi")))
                        .withLinkedService(new LinkedServiceReference().withReferenceName("yynvskpa")
                            .withParameters(mapOf("bxcbccwkqm", "datageumexm")))
                        .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                            .withReferenceName("p")
                            .withDatasetParameters("dataiscr")
                            .withParameters(mapOf("dahlfxlmuifmuadj", "datagftrqrejdaahuqim", "skiioshjgczetybn",
                                "datafsn", "j", "datagztlcgc"))
                            .withAdditionalProperties(mapOf()))))
                .withScript("oxz")
                .withScriptLines(Arrays.asList("syxjijeyp", "vrbkerdkdkgaw"));
        model = BinaryData.fromObject(model).toObject(MappingDataFlowTypeProperties.class);
        Assertions.assertEquals("b", model.sources().get(0).name());
        Assertions.assertEquals("ijh", model.sources().get(0).description());
        Assertions.assertEquals("zgdkkagvwu", model.sources().get(0).dataset().referenceName());
        Assertions.assertEquals("jckhmocgj", model.sources().get(0).linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.sources().get(0).flowlet().type());
        Assertions.assertEquals("qady", model.sources().get(0).flowlet().referenceName());
        Assertions.assertEquals("ee", model.sources().get(0).schemaLinkedService().referenceName());
        Assertions.assertEquals("i", model.sinks().get(0).name());
        Assertions.assertEquals("aqgrv", model.sinks().get(0).description());
        Assertions.assertEquals("omxp", model.sinks().get(0).dataset().referenceName());
        Assertions.assertEquals("dajfwnncfma", model.sinks().get(0).linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.sinks().get(0).flowlet().type());
        Assertions.assertEquals("ezolgjzm", model.sinks().get(0).flowlet().referenceName());
        Assertions.assertEquals("shezs", model.sinks().get(0).schemaLinkedService().referenceName());
        Assertions.assertEquals("wyqejgaao", model.sinks().get(0).rejectedDataLinkedService().referenceName());
        Assertions.assertEquals("nkgfcfdr", model.transformations().get(0).name());
        Assertions.assertEquals("si", model.transformations().get(0).description());
        Assertions.assertEquals("xtclhuulriqbyok", model.transformations().get(0).dataset().referenceName());
        Assertions.assertEquals("f", model.transformations().get(0).linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE,
            model.transformations().get(0).flowlet().type());
        Assertions.assertEquals("mx", model.transformations().get(0).flowlet().referenceName());
        Assertions.assertEquals("oxz", model.script());
        Assertions.assertEquals("syxjijeyp", model.scriptLines().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
