// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.MappingDataFlowTypeProperties;
import com.azure.resourcemanager.datafactory.models.DataFlowReference;
import com.azure.resourcemanager.datafactory.models.DataFlowReferenceType;
import com.azure.resourcemanager.datafactory.models.DataFlowSink;
import com.azure.resourcemanager.datafactory.models.DataFlowSource;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.Transformation;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class MappingDataFlowTypePropertiesTests {
    @Test
    public void testDeserialize() {
        MappingDataFlowTypeProperties model =
            BinaryData
                .fromString(
                    "{\"sources\":[{\"schemaLinkedService\":{\"referenceName\":\"vwrdnhfukuvsj\",\"parameters\":{}},\"name\":\"wsmystuluqypf\",\"description\":\"lerchpq\",\"dataset\":{\"referenceName\":\"f\",\"parameters\":{}},\"linkedService\":{\"referenceName\":\"abwidfcxsspuun\",\"parameters\":{}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"hkx\",\"parameters\":{},\"\":{}}},{\"schemaLinkedService\":{\"referenceName\":\"i\",\"parameters\":{}},\"name\":\"fhoqca\",\"description\":\"wdaomdjvlpjxxkzb\",\"dataset\":{\"referenceName\":\"sgeivsiy\",\"parameters\":{}},\"linkedService\":{\"referenceName\":\"dncj\",\"parameters\":{}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"bzo\",\"parameters\":{},\"\":{}}},{\"schemaLinkedService\":{\"referenceName\":\"apzwyrpgog\",\"parameters\":{}},\"name\":\"xepnyl\",\"description\":\"uajlyj\",\"dataset\":{\"referenceName\":\"vofqzhvfc\",\"parameters\":{}},\"linkedService\":{\"referenceName\":\"fmo\",\"parameters\":{}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"kjpvdwxf\",\"parameters\":{},\"\":{}}},{\"schemaLinkedService\":{\"referenceName\":\"wzjbh\",\"parameters\":{}},\"name\":\"sxjrk\",\"description\":\"btrnegvm\",\"dataset\":{\"referenceName\":\"uqeqv\",\"parameters\":{}},\"linkedService\":{\"referenceName\":\"pa\",\"parameters\":{}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"kkdmfl\",\"parameters\":{},\"\":{}}}],\"sinks\":[{\"schemaLinkedService\":{\"referenceName\":\"xrrilozapee\",\"parameters\":{}},\"rejectedDataLinkedService\":{\"referenceName\":\"pxlktwkuziycsl\",\"parameters\":{}},\"name\":\"ufuztcktyhjtq\",\"description\":\"cgzulwmmrqzzr\",\"dataset\":{\"referenceName\":\"vpglydz\",\"parameters\":{}},\"linkedService\":{\"referenceName\":\"vqeevtoep\",\"parameters\":{}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"nwy\",\"parameters\":{},\"\":{}}}],\"transformations\":[{\"name\":\"vzvfvaawzqadfl\",\"description\":\"ur\",\"dataset\":{\"referenceName\":\"laecxndticok\",\"parameters\":{}},\"linkedService\":{\"referenceName\":\"mlqtmldgxob\",\"parameters\":{}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"lnpkciay\",\"parameters\":{},\"\":{}}}],\"script\":\"hya\",\"scriptLines\":[\"jlb\",\"xqvkjlmxhomdyn\",\"dwdigumb\"]}")
                .toObject(MappingDataFlowTypeProperties.class);
        Assertions.assertEquals("wsmystuluqypf", model.sources().get(0).name());
        Assertions.assertEquals("lerchpq", model.sources().get(0).description());
        Assertions.assertEquals("f", model.sources().get(0).dataset().referenceName());
        Assertions.assertEquals("abwidfcxsspuun", model.sources().get(0).linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.sources().get(0).flowlet().type());
        Assertions.assertEquals("hkx", model.sources().get(0).flowlet().referenceName());
        Assertions.assertEquals("vwrdnhfukuvsj", model.sources().get(0).schemaLinkedService().referenceName());
        Assertions.assertEquals("ufuztcktyhjtq", model.sinks().get(0).name());
        Assertions.assertEquals("cgzulwmmrqzzr", model.sinks().get(0).description());
        Assertions.assertEquals("vpglydz", model.sinks().get(0).dataset().referenceName());
        Assertions.assertEquals("vqeevtoep", model.sinks().get(0).linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.sinks().get(0).flowlet().type());
        Assertions.assertEquals("nwy", model.sinks().get(0).flowlet().referenceName());
        Assertions.assertEquals("xrrilozapee", model.sinks().get(0).schemaLinkedService().referenceName());
        Assertions.assertEquals("pxlktwkuziycsl", model.sinks().get(0).rejectedDataLinkedService().referenceName());
        Assertions.assertEquals("vzvfvaawzqadfl", model.transformations().get(0).name());
        Assertions.assertEquals("ur", model.transformations().get(0).description());
        Assertions.assertEquals("laecxndticok", model.transformations().get(0).dataset().referenceName());
        Assertions.assertEquals("mlqtmldgxob", model.transformations().get(0).linkedService().referenceName());
        Assertions
            .assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.transformations().get(0).flowlet().type());
        Assertions.assertEquals("lnpkciay", model.transformations().get(0).flowlet().referenceName());
        Assertions.assertEquals("hya", model.script());
        Assertions.assertEquals("jlb", model.scriptLines().get(0));
    }

    @Test
    public void testSerialize() {
        MappingDataFlowTypeProperties model =
            new MappingDataFlowTypeProperties()
                .withSources(
                    Arrays
                        .asList(
                            new DataFlowSource()
                                .withName("wsmystuluqypf")
                                .withDescription("lerchpq")
                                .withDataset(new DatasetReference().withReferenceName("f").withParameters(mapOf()))
                                .withLinkedService(
                                    new LinkedServiceReference()
                                        .withReferenceName("abwidfcxsspuun")
                                        .withParameters(mapOf()))
                                .withFlowlet(
                                    new DataFlowReference()
                                        .withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                                        .withReferenceName("hkx")
                                        .withParameters(mapOf())
                                        .withAdditionalProperties(mapOf()))
                                .withSchemaLinkedService(
                                    new LinkedServiceReference()
                                        .withReferenceName("vwrdnhfukuvsj")
                                        .withParameters(mapOf())),
                            new DataFlowSource()
                                .withName("fhoqca")
                                .withDescription("wdaomdjvlpjxxkzb")
                                .withDataset(
                                    new DatasetReference().withReferenceName("sgeivsiy").withParameters(mapOf()))
                                .withLinkedService(
                                    new LinkedServiceReference().withReferenceName("dncj").withParameters(mapOf()))
                                .withFlowlet(
                                    new DataFlowReference()
                                        .withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                                        .withReferenceName("bzo")
                                        .withParameters(mapOf())
                                        .withAdditionalProperties(mapOf()))
                                .withSchemaLinkedService(
                                    new LinkedServiceReference().withReferenceName("i").withParameters(mapOf())),
                            new DataFlowSource()
                                .withName("xepnyl")
                                .withDescription("uajlyj")
                                .withDataset(
                                    new DatasetReference().withReferenceName("vofqzhvfc").withParameters(mapOf()))
                                .withLinkedService(
                                    new LinkedServiceReference().withReferenceName("fmo").withParameters(mapOf()))
                                .withFlowlet(
                                    new DataFlowReference()
                                        .withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                                        .withReferenceName("kjpvdwxf")
                                        .withParameters(mapOf())
                                        .withAdditionalProperties(mapOf()))
                                .withSchemaLinkedService(
                                    new LinkedServiceReference()
                                        .withReferenceName("apzwyrpgog")
                                        .withParameters(mapOf())),
                            new DataFlowSource()
                                .withName("sxjrk")
                                .withDescription("btrnegvm")
                                .withDataset(new DatasetReference().withReferenceName("uqeqv").withParameters(mapOf()))
                                .withLinkedService(
                                    new LinkedServiceReference().withReferenceName("pa").withParameters(mapOf()))
                                .withFlowlet(
                                    new DataFlowReference()
                                        .withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                                        .withReferenceName("kkdmfl")
                                        .withParameters(mapOf())
                                        .withAdditionalProperties(mapOf()))
                                .withSchemaLinkedService(
                                    new LinkedServiceReference().withReferenceName("wzjbh").withParameters(mapOf()))))
                .withSinks(
                    Arrays
                        .asList(
                            new DataFlowSink()
                                .withName("ufuztcktyhjtq")
                                .withDescription("cgzulwmmrqzzr")
                                .withDataset(
                                    new DatasetReference().withReferenceName("vpglydz").withParameters(mapOf()))
                                .withLinkedService(
                                    new LinkedServiceReference().withReferenceName("vqeevtoep").withParameters(mapOf()))
                                .withFlowlet(
                                    new DataFlowReference()
                                        .withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                                        .withReferenceName("nwy")
                                        .withParameters(mapOf())
                                        .withAdditionalProperties(mapOf()))
                                .withSchemaLinkedService(
                                    new LinkedServiceReference()
                                        .withReferenceName("xrrilozapee")
                                        .withParameters(mapOf()))
                                .withRejectedDataLinkedService(
                                    new LinkedServiceReference()
                                        .withReferenceName("pxlktwkuziycsl")
                                        .withParameters(mapOf()))))
                .withTransformations(
                    Arrays
                        .asList(
                            new Transformation()
                                .withName("vzvfvaawzqadfl")
                                .withDescription("ur")
                                .withDataset(
                                    new DatasetReference().withReferenceName("laecxndticok").withParameters(mapOf()))
                                .withLinkedService(
                                    new LinkedServiceReference()
                                        .withReferenceName("mlqtmldgxob")
                                        .withParameters(mapOf()))
                                .withFlowlet(
                                    new DataFlowReference()
                                        .withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                                        .withReferenceName("lnpkciay")
                                        .withParameters(mapOf())
                                        .withAdditionalProperties(mapOf()))))
                .withScript("hya")
                .withScriptLines(Arrays.asList("jlb", "xqvkjlmxhomdyn", "dwdigumb"));
        model = BinaryData.fromObject(model).toObject(MappingDataFlowTypeProperties.class);
        Assertions.assertEquals("wsmystuluqypf", model.sources().get(0).name());
        Assertions.assertEquals("lerchpq", model.sources().get(0).description());
        Assertions.assertEquals("f", model.sources().get(0).dataset().referenceName());
        Assertions.assertEquals("abwidfcxsspuun", model.sources().get(0).linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.sources().get(0).flowlet().type());
        Assertions.assertEquals("hkx", model.sources().get(0).flowlet().referenceName());
        Assertions.assertEquals("vwrdnhfukuvsj", model.sources().get(0).schemaLinkedService().referenceName());
        Assertions.assertEquals("ufuztcktyhjtq", model.sinks().get(0).name());
        Assertions.assertEquals("cgzulwmmrqzzr", model.sinks().get(0).description());
        Assertions.assertEquals("vpglydz", model.sinks().get(0).dataset().referenceName());
        Assertions.assertEquals("vqeevtoep", model.sinks().get(0).linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.sinks().get(0).flowlet().type());
        Assertions.assertEquals("nwy", model.sinks().get(0).flowlet().referenceName());
        Assertions.assertEquals("xrrilozapee", model.sinks().get(0).schemaLinkedService().referenceName());
        Assertions.assertEquals("pxlktwkuziycsl", model.sinks().get(0).rejectedDataLinkedService().referenceName());
        Assertions.assertEquals("vzvfvaawzqadfl", model.transformations().get(0).name());
        Assertions.assertEquals("ur", model.transformations().get(0).description());
        Assertions.assertEquals("laecxndticok", model.transformations().get(0).dataset().referenceName());
        Assertions.assertEquals("mlqtmldgxob", model.transformations().get(0).linkedService().referenceName());
        Assertions
            .assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.transformations().get(0).flowlet().type());
        Assertions.assertEquals("lnpkciay", model.transformations().get(0).flowlet().referenceName());
        Assertions.assertEquals("hya", model.script());
        Assertions.assertEquals("jlb", model.scriptLines().get(0));
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
