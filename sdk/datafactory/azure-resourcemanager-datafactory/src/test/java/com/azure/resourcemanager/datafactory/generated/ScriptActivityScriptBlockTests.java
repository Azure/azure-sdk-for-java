// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ScriptActivityParameter;
import com.azure.resourcemanager.datafactory.models.ScriptActivityParameterDirection;
import com.azure.resourcemanager.datafactory.models.ScriptActivityParameterType;
import com.azure.resourcemanager.datafactory.models.ScriptActivityScriptBlock;
import com.azure.resourcemanager.datafactory.models.ScriptType;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ScriptActivityScriptBlockTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScriptActivityScriptBlock model = BinaryData.fromString(
            "{\"text\":\"datacgmyjmcw\",\"type\":\"Query\",\"parameters\":[{\"name\":\"datarvbzvi\",\"type\":\"Int16\",\"value\":\"dataeblrnu\",\"direction\":\"Output\",\"size\":1720230643}]}")
            .toObject(ScriptActivityScriptBlock.class);
        Assertions.assertEquals(ScriptType.QUERY, model.type());
        Assertions.assertEquals(ScriptActivityParameterType.INT16, model.parameters().get(0).type());
        Assertions.assertEquals(ScriptActivityParameterDirection.OUTPUT, model.parameters().get(0).direction());
        Assertions.assertEquals(1720230643, model.parameters().get(0).size());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScriptActivityScriptBlock model
            = new ScriptActivityScriptBlock().withText("datacgmyjmcw").withType(ScriptType.QUERY)
                .withParameters(Arrays.asList(new ScriptActivityParameter().withName("datarvbzvi")
                    .withType(ScriptActivityParameterType.INT16).withValue("dataeblrnu")
                    .withDirection(ScriptActivityParameterDirection.OUTPUT).withSize(1720230643)));
        model = BinaryData.fromObject(model).toObject(ScriptActivityScriptBlock.class);
        Assertions.assertEquals(ScriptType.QUERY, model.type());
        Assertions.assertEquals(ScriptActivityParameterType.INT16, model.parameters().get(0).type());
        Assertions.assertEquals(ScriptActivityParameterDirection.OUTPUT, model.parameters().get(0).direction());
        Assertions.assertEquals(1720230643, model.parameters().get(0).size());
    }
}
