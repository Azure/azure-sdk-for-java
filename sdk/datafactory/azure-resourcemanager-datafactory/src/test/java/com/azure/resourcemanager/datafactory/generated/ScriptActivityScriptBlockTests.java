// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ScriptActivityParameter;
import com.azure.resourcemanager.datafactory.models.ScriptActivityParameterDirection;
import com.azure.resourcemanager.datafactory.models.ScriptActivityParameterType;
import com.azure.resourcemanager.datafactory.models.ScriptActivityScriptBlock;
import com.azure.resourcemanager.datafactory.models.ScriptType;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class ScriptActivityScriptBlockTests {
    @Test
    public void testDeserialize() {
        ScriptActivityScriptBlock model =
            BinaryData
                .fromString(
                    "{\"type\":\"NonQuery\",\"parameters\":[{\"type\":\"Timespan\",\"direction\":\"InputOutput\",\"size\":91185170},{\"type\":\"Int64\",\"direction\":\"Input\",\"size\":811988917}]}")
                .toObject(ScriptActivityScriptBlock.class);
        Assertions.assertEquals(ScriptType.NON_QUERY, model.type());
        Assertions.assertEquals(ScriptActivityParameterType.TIMESPAN, model.parameters().get(0).type());
        Assertions.assertEquals(ScriptActivityParameterDirection.INPUT_OUTPUT, model.parameters().get(0).direction());
        Assertions.assertEquals(91185170, model.parameters().get(0).size());
    }

    @Test
    public void testSerialize() {
        ScriptActivityScriptBlock model =
            new ScriptActivityScriptBlock()
                .withType(ScriptType.NON_QUERY)
                .withParameters(
                    Arrays
                        .asList(
                            new ScriptActivityParameter()
                                .withType(ScriptActivityParameterType.TIMESPAN)
                                .withDirection(ScriptActivityParameterDirection.INPUT_OUTPUT)
                                .withSize(91185170),
                            new ScriptActivityParameter()
                                .withType(ScriptActivityParameterType.INT64)
                                .withDirection(ScriptActivityParameterDirection.INPUT)
                                .withSize(811988917)));
        model = BinaryData.fromObject(model).toObject(ScriptActivityScriptBlock.class);
        Assertions.assertEquals(ScriptType.NON_QUERY, model.type());
        Assertions.assertEquals(ScriptActivityParameterType.TIMESPAN, model.parameters().get(0).type());
        Assertions.assertEquals(ScriptActivityParameterDirection.INPUT_OUTPUT, model.parameters().get(0).direction());
        Assertions.assertEquals(91185170, model.parameters().get(0).size());
    }
}
