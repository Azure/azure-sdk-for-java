// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ScriptActivityParameter;
import com.azure.resourcemanager.datafactory.models.ScriptActivityParameterDirection;
import com.azure.resourcemanager.datafactory.models.ScriptActivityParameterType;
import com.azure.resourcemanager.datafactory.models.ScriptActivityScriptBlock;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ScriptActivityScriptBlockTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScriptActivityScriptBlock model = BinaryData.fromString(
            "{\"text\":\"datayd\",\"type\":\"dataceuywyam\",\"parameters\":[{\"name\":\"datavokvoqjbjdy\",\"type\":\"String\",\"value\":\"datalvyhietezn\",\"direction\":\"Output\",\"size\":1974811964},{\"name\":\"datavihhgpekzul\",\"type\":\"Int16\",\"value\":\"datafi\",\"direction\":\"InputOutput\",\"size\":903706520},{\"name\":\"datadrys\",\"type\":\"Single\",\"value\":\"datacfrtijzsumgzebqb\",\"direction\":\"InputOutput\",\"size\":925862689}]}")
            .toObject(ScriptActivityScriptBlock.class);
        Assertions.assertEquals(ScriptActivityParameterType.STRING, model.parameters().get(0).type());
        Assertions.assertEquals(ScriptActivityParameterDirection.OUTPUT, model.parameters().get(0).direction());
        Assertions.assertEquals(1974811964, model.parameters().get(0).size());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScriptActivityScriptBlock model = new ScriptActivityScriptBlock().withText("datayd")
            .withType("dataceuywyam")
            .withParameters(Arrays.asList(
                new ScriptActivityParameter().withName("datavokvoqjbjdy")
                    .withType(ScriptActivityParameterType.STRING)
                    .withValue("datalvyhietezn")
                    .withDirection(ScriptActivityParameterDirection.OUTPUT)
                    .withSize(1974811964),
                new ScriptActivityParameter().withName("datavihhgpekzul")
                    .withType(ScriptActivityParameterType.INT16)
                    .withValue("datafi")
                    .withDirection(ScriptActivityParameterDirection.INPUT_OUTPUT)
                    .withSize(903706520),
                new ScriptActivityParameter().withName("datadrys")
                    .withType(ScriptActivityParameterType.SINGLE)
                    .withValue("datacfrtijzsumgzebqb")
                    .withDirection(ScriptActivityParameterDirection.INPUT_OUTPUT)
                    .withSize(925862689)));
        model = BinaryData.fromObject(model).toObject(ScriptActivityScriptBlock.class);
        Assertions.assertEquals(ScriptActivityParameterType.STRING, model.parameters().get(0).type());
        Assertions.assertEquals(ScriptActivityParameterDirection.OUTPUT, model.parameters().get(0).direction());
        Assertions.assertEquals(1974811964, model.parameters().get(0).size());
    }
}
