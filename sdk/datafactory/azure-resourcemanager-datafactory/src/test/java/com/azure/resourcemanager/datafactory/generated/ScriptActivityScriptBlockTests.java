// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ScriptActivityParameter;
import com.azure.resourcemanager.datafactory.models.ScriptActivityParameterDirection;
import com.azure.resourcemanager.datafactory.models.ScriptActivityParameterType;
import com.azure.resourcemanager.datafactory.models.ScriptActivityScriptBlock;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ScriptActivityScriptBlockTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScriptActivityScriptBlock model = BinaryData.fromString(
            "{\"text\":\"dataplvrqkmpqs\",\"type\":\"datalvinxwtxtetwqk\",\"parameters\":[{\"name\":\"dataumzw\",\"type\":\"Decimal\",\"value\":\"datavkneozp\",\"direction\":\"Input\",\"size\":1382124393},{\"name\":\"dataugqwxslisgfxw\",\"type\":\"DateTime\",\"value\":\"dataajtzquhqrjwllg\",\"direction\":\"Input\",\"size\":451418164}]}")
            .toObject(ScriptActivityScriptBlock.class);
        Assertions.assertEquals(ScriptActivityParameterType.DECIMAL, model.parameters().get(0).type());
        Assertions.assertEquals(ScriptActivityParameterDirection.INPUT, model.parameters().get(0).direction());
        Assertions.assertEquals(1382124393, model.parameters().get(0).size());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScriptActivityScriptBlock model = new ScriptActivityScriptBlock().withText("dataplvrqkmpqs")
            .withType("datalvinxwtxtetwqk")
            .withParameters(Arrays.asList(
                new ScriptActivityParameter().withName("dataumzw")
                    .withType(ScriptActivityParameterType.DECIMAL)
                    .withValue("datavkneozp")
                    .withDirection(ScriptActivityParameterDirection.INPUT)
                    .withSize(1382124393),
                new ScriptActivityParameter().withName("dataugqwxslisgfxw")
                    .withType(ScriptActivityParameterType.DATE_TIME)
                    .withValue("dataajtzquhqrjwllg")
                    .withDirection(ScriptActivityParameterDirection.INPUT)
                    .withSize(451418164)));
        model = BinaryData.fromObject(model).toObject(ScriptActivityScriptBlock.class);
        Assertions.assertEquals(ScriptActivityParameterType.DECIMAL, model.parameters().get(0).type());
        Assertions.assertEquals(ScriptActivityParameterDirection.INPUT, model.parameters().get(0).direction());
        Assertions.assertEquals(1382124393, model.parameters().get(0).size());
    }
}
