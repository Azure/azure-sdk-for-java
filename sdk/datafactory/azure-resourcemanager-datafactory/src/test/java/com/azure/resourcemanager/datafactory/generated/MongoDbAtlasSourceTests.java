// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.MongoDbAtlasSource;
import com.azure.resourcemanager.datafactory.models.MongoDbCursorMethodsProperties;
import java.util.HashMap;
import java.util.Map;

public final class MongoDbAtlasSourceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MongoDbAtlasSource model = BinaryData.fromString(
            "{\"type\":\"MongoDbAtlasSource\",\"filter\":\"datazjwj\",\"cursorMethods\":{\"project\":\"datalihanawipdqoz\",\"sort\":\"datalqzopvhwmtdbfrj\",\"skip\":\"datavu\",\"limit\":\"dataps\",\"\":{\"jxkxl\":\"dataagordbsascntdw\",\"feqnmb\":\"dataowdwiffa\",\"tthsuzxyl\":\"datagcb\"}},\"batchSize\":\"dataf\",\"queryTimeout\":\"datas\",\"additionalColumns\":\"datanscobhhbljsvpok\",\"sourceRetryCount\":\"dataobygff\",\"sourceRetryWait\":\"datahnusrfffago\",\"maxConcurrentConnections\":\"datafwzysvnvrfjgbxup\",\"disableMetricsCollection\":\"datag\",\"\":{\"rowrmesziubkyvc\":\"datavwuje\",\"wdjbyaav\":\"datakoufwkaomytlx\",\"xyhuetztorhu\":\"datamsxamncuhxznma\"}}")
            .toObject(MongoDbAtlasSource.class);
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MongoDbAtlasSource model = new MongoDbAtlasSource().withSourceRetryCount("dataobygff")
            .withSourceRetryWait("datahnusrfffago")
            .withMaxConcurrentConnections("datafwzysvnvrfjgbxup")
            .withDisableMetricsCollection("datag")
            .withFilter("datazjwj")
            .withCursorMethods(new MongoDbCursorMethodsProperties().withProject("datalihanawipdqoz")
                .withSort("datalqzopvhwmtdbfrj")
                .withSkip("datavu")
                .withLimit("dataps")
                .withAdditionalProperties(mapOf()))
            .withBatchSize("dataf")
            .withQueryTimeout("datas")
            .withAdditionalColumns("datanscobhhbljsvpok");
        model = BinaryData.fromObject(model).toObject(MongoDbAtlasSource.class);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
