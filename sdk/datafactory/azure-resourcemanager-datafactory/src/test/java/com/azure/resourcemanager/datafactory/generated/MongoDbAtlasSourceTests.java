// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.MongoDbAtlasSource;
import com.azure.resourcemanager.datafactory.models.MongoDbCursorMethodsProperties;
import java.util.HashMap;
import java.util.Map;

public final class MongoDbAtlasSourceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MongoDbAtlasSource model =
            BinaryData
                .fromString(
                    "{\"type\":\"MongoDbAtlasSource\",\"filter\":\"dataodwqzbiuk\",\"cursorMethods\":{\"project\":\"datayfvyzaofai\",\"sort\":\"datanfvexiuuqaf\",\"skip\":\"dataseyxpgkmlnj\",\"limit\":\"dataaywgc\",\"\":{\"wv\":\"datafafpyglnfwjs\"}},\"batchSize\":\"datablucpmqwkfgmkp\",\"queryTimeout\":\"datakstzqz\",\"additionalColumns\":\"datawrcajfers\",\"sourceRetryCount\":\"dataxlkcw\",\"sourceRetryWait\":\"dataejssksgxykdepqcy\",\"maxConcurrentConnections\":\"datahwsxpzkmotgmd\",\"disableMetricsCollection\":\"datawwqevbiuntp\",\"\":{\"qgywr\":\"datawjxlycelf\",\"ruldt\":\"datau\"}}")
                .toObject(MongoDbAtlasSource.class);
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MongoDbAtlasSource model =
            new MongoDbAtlasSource()
                .withSourceRetryCount("dataxlkcw")
                .withSourceRetryWait("dataejssksgxykdepqcy")
                .withMaxConcurrentConnections("datahwsxpzkmotgmd")
                .withDisableMetricsCollection("datawwqevbiuntp")
                .withFilter("dataodwqzbiuk")
                .withCursorMethods(
                    new MongoDbCursorMethodsProperties()
                        .withProject("datayfvyzaofai")
                        .withSort("datanfvexiuuqaf")
                        .withSkip("dataseyxpgkmlnj")
                        .withLimit("dataaywgc")
                        .withAdditionalProperties(mapOf()))
                .withBatchSize("datablucpmqwkfgmkp")
                .withQueryTimeout("datakstzqz")
                .withAdditionalColumns("datawrcajfers");
        model = BinaryData.fromObject(model).toObject(MongoDbAtlasSource.class);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
