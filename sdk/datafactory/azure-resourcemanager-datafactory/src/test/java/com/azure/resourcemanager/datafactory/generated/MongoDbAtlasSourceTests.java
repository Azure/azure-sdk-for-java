// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.MongoDbAtlasSource;
import com.azure.resourcemanager.datafactory.models.MongoDbCursorMethodsProperties;
import java.util.HashMap;
import java.util.Map;

public final class MongoDbAtlasSourceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MongoDbAtlasSource model = BinaryData.fromString(
            "{\"type\":\"MongoDbAtlasSource\",\"filter\":\"dataqxisav\",\"cursorMethods\":{\"project\":\"dataxwz\",\"sort\":\"datahibridagwu\",\"skip\":\"datadymoqvcjkrynziu\",\"limit\":\"datah\",\"\":{\"xjwzt\":\"datarygwagvui\",\"cv\":\"datafotllf\"}},\"batchSize\":\"datanbccffsbz\",\"queryTimeout\":\"datatfxq\",\"additionalColumns\":\"dataj\",\"sourceRetryCount\":\"dataud\",\"sourceRetryWait\":\"datattavbch\",\"maxConcurrentConnections\":\"datavq\",\"disableMetricsCollection\":\"datalferjwhonn\",\"\":{\"cqulfqttfqgdoowg\":\"dataexn\",\"hhsvsnedh\":\"dataooi\"}}")
            .toObject(MongoDbAtlasSource.class);
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MongoDbAtlasSource model = new MongoDbAtlasSource().withSourceRetryCount("dataud")
            .withSourceRetryWait("datattavbch")
            .withMaxConcurrentConnections("datavq")
            .withDisableMetricsCollection("datalferjwhonn")
            .withFilter("dataqxisav")
            .withCursorMethods(new MongoDbCursorMethodsProperties().withProject("dataxwz")
                .withSort("datahibridagwu")
                .withSkip("datadymoqvcjkrynziu")
                .withLimit("datah")
                .withAdditionalProperties(mapOf()))
            .withBatchSize("datanbccffsbz")
            .withQueryTimeout("datatfxq")
            .withAdditionalColumns("dataj");
        model = BinaryData.fromObject(model).toObject(MongoDbAtlasSource.class);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
