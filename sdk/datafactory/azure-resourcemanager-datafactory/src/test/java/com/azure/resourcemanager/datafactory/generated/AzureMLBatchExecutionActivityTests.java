// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.AzureMLBatchExecutionActivity;
import com.azure.resourcemanager.datafactory.models.AzureMLWebServiceFile;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureMLBatchExecutionActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureMLBatchExecutionActivity model = BinaryData.fromString(
            "{\"type\":\"AzureMLBatchExecution\",\"typeProperties\":{\"globalParameters\":{\"bmjheyntsdwxpa\":\"dataahdplicivoduda\",\"crkf\":\"dataubgrjkgkoxuedml\",\"bvvjyenwvgvhhouh\":\"datagjywp\"},\"webServiceOutputs\":{\"asrwo\":{\"filePath\":\"datahwlkfljooiiviwlf\",\"linkedServiceName\":{\"referenceName\":\"joycyvxbr\",\"parameters\":{\"wwkofoqrvnhcu\":\"databit\",\"vtempyfjahwypd\":\"dataghvkzm\",\"tgexmxgqgqu\":\"datarqjjlsatoxsgar\",\"tub\":\"datalyrtkvftlbt\"}}},\"yvnbhn\":{\"filePath\":\"dataumnucqewxcwr\",\"linkedServiceName\":{\"referenceName\":\"kwmvcxyuem\",\"parameters\":{\"qisrlhxfmvngdrn\":\"datacytnzyesydw\"}}}},\"webServiceInputs\":{\"ennobjixoqqjbsag\":{\"filePath\":\"datawdborjypr\",\"linkedServiceName\":{\"referenceName\":\"ojwiigtdjqc\",\"parameters\":{\"ozofont\":\"datapkpibeift\",\"qugycorgnxmn\":\"datahlnaymsgbyho\"}}},\"vdtzdrvaxs\":{\"filePath\":\"datalpuqfmrimwlpa\",\"linkedServiceName\":{\"referenceName\":\"hwxu\",\"parameters\":{\"efwnjsorhpgavro\":\"datatnmwlklqhwysie\",\"lsuiyvbildw\":\"datakoezcabf\",\"nvjqeigpylpmtw\":\"datal\"}}}}},\"linkedServiceName\":{\"referenceName\":\"indyurwzrxkha\",\"parameters\":{\"slpbvponxhs\":\"datajambtvc\"}},\"policy\":{\"timeout\":\"datatunnkbekzk\",\"retry\":\"dataonbziklqyzrta\",\"retryIntervalInSeconds\":2109115182,\"secureInput\":true,\"secureOutput\":false,\"\":{\"seqxwcimam\":\"datahasxjmfh\",\"nrj\":\"dataqfrdfoiqfvczuu\",\"roxvsclmt\":\"datarpxlfyytjm\",\"eitphzuaznsbvu\":\"datakmlfcgk\"}},\"name\":\"bestyy\",\"description\":\"jotimpuwgrnyx\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"udranmdcfwaw\",\"dependencyConditions\":[\"Failed\",\"Skipped\",\"Failed\",\"Succeeded\"],\"\":{\"hic\":\"datacvnafx\"}},{\"activity\":\"cmviclhommhaxt\",\"dependencyConditions\":[\"Skipped\",\"Failed\",\"Succeeded\",\"Completed\"],\"\":{\"jfzbavqmmk\":\"datan\"}}],\"userProperties\":[{\"name\":\"fjeuwwqstc\",\"value\":\"datapskzplbzyjuqvyw\"},{\"name\":\"lccxdctkh\",\"value\":\"datahbosax\"},{\"name\":\"emspnzqohh\",\"value\":\"dataexgxn\"},{\"name\":\"fodxiy\",\"value\":\"datavfottycfo\"}],\"\":{\"lcb\":\"datadxbsp\",\"zifyhujgrb\":\"dataahxsjxurrhpihtxg\"}}")
            .toObject(AzureMLBatchExecutionActivity.class);
        Assertions.assertEquals("bestyy", model.name());
        Assertions.assertEquals("jotimpuwgrnyx", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("udranmdcfwaw", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("fjeuwwqstc", model.userProperties().get(0).name());
        Assertions.assertEquals("indyurwzrxkha", model.linkedServiceName().referenceName());
        Assertions.assertEquals(2109115182, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals("joycyvxbr",
            model.webServiceOutputs().get("asrwo").linkedServiceName().referenceName());
        Assertions.assertEquals("ojwiigtdjqc",
            model.webServiceInputs().get("ennobjixoqqjbsag").linkedServiceName().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureMLBatchExecutionActivity model = new AzureMLBatchExecutionActivity().withName("bestyy")
            .withDescription("jotimpuwgrnyx").withState(ActivityState.INACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
            .withDependsOn(Arrays.asList(
                new ActivityDependency().withActivity("udranmdcfwaw")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED, DependencyCondition.SKIPPED,
                        DependencyCondition.FAILED, DependencyCondition.SUCCEEDED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("cmviclhommhaxt")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.FAILED,
                        DependencyCondition.SUCCEEDED, DependencyCondition.COMPLETED))
                    .withAdditionalProperties(mapOf())))
            .withUserProperties(
                Arrays.asList(new UserProperty().withName("fjeuwwqstc").withValue("datapskzplbzyjuqvyw"),
                    new UserProperty().withName("lccxdctkh").withValue("datahbosax"),
                    new UserProperty().withName("emspnzqohh").withValue("dataexgxn"),
                    new UserProperty().withName("fodxiy").withValue("datavfottycfo")))
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("indyurwzrxkha")
                .withParameters(mapOf("slpbvponxhs", "datajambtvc")))
            .withPolicy(new ActivityPolicy().withTimeout("datatunnkbekzk").withRetry("dataonbziklqyzrta")
                .withRetryIntervalInSeconds(2109115182).withSecureInput(true).withSecureOutput(false)
                .withAdditionalProperties(mapOf()))
            .withGlobalParameters(mapOf("bmjheyntsdwxpa", "dataahdplicivoduda", "crkf", "dataubgrjkgkoxuedml",
                "bvvjyenwvgvhhouh", "datagjywp"))
            .withWebServiceOutputs(mapOf("asrwo",
                new AzureMLWebServiceFile().withFilePath("datahwlkfljooiiviwlf")
                    .withLinkedServiceName(new LinkedServiceReference().withReferenceName("joycyvxbr")
                        .withParameters(mapOf("wwkofoqrvnhcu", "databit", "vtempyfjahwypd", "dataghvkzm", "tgexmxgqgqu",
                            "datarqjjlsatoxsgar", "tub", "datalyrtkvftlbt"))),
                "yvnbhn",
                new AzureMLWebServiceFile().withFilePath("dataumnucqewxcwr")
                    .withLinkedServiceName(new LinkedServiceReference().withReferenceName("kwmvcxyuem")
                        .withParameters(mapOf("qisrlhxfmvngdrn", "datacytnzyesydw")))))
            .withWebServiceInputs(mapOf("ennobjixoqqjbsag",
                new AzureMLWebServiceFile().withFilePath("datawdborjypr")
                    .withLinkedServiceName(new LinkedServiceReference().withReferenceName("ojwiigtdjqc")
                        .withParameters(mapOf("ozofont", "datapkpibeift", "qugycorgnxmn", "datahlnaymsgbyho"))),
                "vdtzdrvaxs",
                new AzureMLWebServiceFile().withFilePath("datalpuqfmrimwlpa").withLinkedServiceName(
                    new LinkedServiceReference().withReferenceName("hwxu").withParameters(mapOf("efwnjsorhpgavro",
                        "datatnmwlklqhwysie", "lsuiyvbildw", "datakoezcabf", "nvjqeigpylpmtw", "datal")))));
        model = BinaryData.fromObject(model).toObject(AzureMLBatchExecutionActivity.class);
        Assertions.assertEquals("bestyy", model.name());
        Assertions.assertEquals("jotimpuwgrnyx", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("udranmdcfwaw", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("fjeuwwqstc", model.userProperties().get(0).name());
        Assertions.assertEquals("indyurwzrxkha", model.linkedServiceName().referenceName());
        Assertions.assertEquals(2109115182, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals("joycyvxbr",
            model.webServiceOutputs().get("asrwo").linkedServiceName().referenceName());
        Assertions.assertEquals("ojwiigtdjqc",
            model.webServiceInputs().get("ennobjixoqqjbsag").linkedServiceName().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
