// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.AzureMLBatchExecutionActivity;
import com.azure.resourcemanager.datafactory.models.AzureMLWebServiceFile;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureMLBatchExecutionActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureMLBatchExecutionActivity model = BinaryData.fromString(
            "{\"type\":\"crcpishj\",\"typeProperties\":{\"globalParameters\":{\"qlbjxps\":\"datarqponugco\",\"zygdkovytjsrboq\":\"datavvggvnqpar\"},\"webServiceOutputs\":{\"swlmxepygkfuwgkb\":{\"filePath\":\"dataqqvukjtcdppdmmf\",\"linkedServiceName\":{\"referenceName\":\"ubcccltygxzit\",\"parameters\":{\"vydvdjc\":\"datab\",\"rfayd\":\"datadhar\"}}},\"lefpuxjhxsfb\":{\"filePath\":\"datajqtk\",\"linkedServiceName\":{\"referenceName\":\"zwmqzkjecz\",\"parameters\":{\"jacvmhpueiuhhn\":\"datafew\",\"kvfjbxvhuili\":\"dataxnxxwafialipymn\",\"ahqqumoz\":\"datadyuuotqpljw\"}}}},\"webServiceInputs\":{\"ocjkqo\":{\"filePath\":\"dataaysmmztvkgxz\",\"linkedServiceName\":{\"referenceName\":\"rhnkm\",\"parameters\":{\"iypsmpgopcl\":\"datanplnnxopixx\",\"we\":\"datatysirhnwseb\",\"ddcqteozayjim\":\"datasxrnji\",\"jtmdw\":\"datacb\"}}},\"peafzvxbvk\":{\"filePath\":\"datacfnomwaoebvjmmsg\",\"linkedServiceName\":{\"referenceName\":\"koql\",\"parameters\":{\"hztdzmeiicdybcor\":\"dataerztenzkbppg\",\"ztzhwbwrocuv\":\"datamdzafdqqjds\",\"gzrt\":\"datapqag\",\"je\":\"datausxh\"}}},\"g\":{\"filePath\":\"dataj\",\"linkedServiceName\":{\"referenceName\":\"nmoekohxkgxyd\",\"parameters\":{\"wsage\":\"datapzetradbihn\",\"hoxux\":\"dataosbzydbt\",\"zeoxz\":\"datavbsazzh\",\"rjfpqemylkyg\":\"datarhakhaec\"}}}}},\"linkedServiceName\":{\"referenceName\":\"bv\",\"parameters\":{\"ctehxwnxp\":\"datamt\",\"b\":\"dataerhdablqol\"}},\"policy\":{\"timeout\":\"datahpcwwsqavpuwt\",\"retry\":\"dataqcfzdfmqoeofy\",\"retryIntervalInSeconds\":1978374101,\"secureInput\":true,\"secureOutput\":false,\"\":{\"qatgazd\":\"dataym\",\"aebaw\":\"datahih\",\"nmzraegyvxlnp\":\"datapajdkjq\"}},\"name\":\"ov\",\"description\":\"x\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"iv\",\"dependencyConditions\":[\"Succeeded\",\"Completed\",\"Succeeded\",\"Completed\"],\"\":{\"syd\":\"dataaxyyvxetgsdhwmbe\",\"rkqdbqhz\":\"datarkchbnatrdr\"}},{\"activity\":\"vatypjk\",\"dependencyConditions\":[\"Completed\"],\"\":{\"vrlbezhwsvoi\":\"datadlehcqbjjphuakpk\",\"fzrjcbadnwpruydc\":\"datadcxjcjiqxybbbytm\",\"pdmeeabcnh\":\"datav\"}},{\"activity\":\"amydwdb\",\"dependencyConditions\":[\"Skipped\",\"Completed\",\"Failed\"],\"\":{\"dhp\":\"dataixnuzbmffzig\",\"wfxgu\":\"dataecrviobfui\"}},{\"activity\":\"az\",\"dependencyConditions\":[\"Succeeded\",\"Succeeded\",\"Skipped\",\"Failed\"],\"\":{\"bsuqarm\":\"datanma\",\"rgbugprfiympy\":\"datajuldojor\",\"pdbc\":\"databcpieiqolym\",\"syylukpjdm\":\"dataedohhbnkhgp\"}}],\"userProperties\":[{\"name\":\"jhukngdf\",\"value\":\"dataspw\"},{\"name\":\"fjxljrrgvyuqunnv\",\"value\":\"datakpdlkviaen\"},{\"name\":\"ydkgicbkijyv\",\"value\":\"dataukauhnhdhssu\"},{\"name\":\"hkgfvgxmnan\",\"value\":\"datac\"}],\"\":{\"coruyistjwlnt\":\"datartvyvxbtpqjgb\",\"tu\":\"datapi\",\"gulymouwnnhbz\":\"datapncdebpelgy\",\"fqqjydrhwnnux\":\"datascztsatfu\"}}")
            .toObject(AzureMLBatchExecutionActivity.class);
        Assertions.assertEquals("ov", model.name());
        Assertions.assertEquals("x", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("iv", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("jhukngdf", model.userProperties().get(0).name());
        Assertions.assertEquals("bv", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1978374101, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals("ubcccltygxzit",
            model.webServiceOutputs().get("swlmxepygkfuwgkb").linkedServiceName().referenceName());
        Assertions.assertEquals("rhnkm", model.webServiceInputs().get("ocjkqo").linkedServiceName().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureMLBatchExecutionActivity model = new AzureMLBatchExecutionActivity().withName("ov")
            .withDescription("x")
            .withState(ActivityState.INACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
            .withDependsOn(Arrays.asList(
                new ActivityDependency().withActivity("iv")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED,
                        DependencyCondition.COMPLETED, DependencyCondition.SUCCEEDED, DependencyCondition.COMPLETED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("vatypjk")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("amydwdb")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.COMPLETED,
                        DependencyCondition.FAILED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("az")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED,
                        DependencyCondition.SUCCEEDED, DependencyCondition.SKIPPED, DependencyCondition.FAILED))
                    .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("jhukngdf").withValue("dataspw"),
                new UserProperty().withName("fjxljrrgvyuqunnv").withValue("datakpdlkviaen"),
                new UserProperty().withName("ydkgicbkijyv").withValue("dataukauhnhdhssu"),
                new UserProperty().withName("hkgfvgxmnan").withValue("datac")))
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("bv")
                .withParameters(mapOf("ctehxwnxp", "datamt", "b", "dataerhdablqol")))
            .withPolicy(new ActivityPolicy().withTimeout("datahpcwwsqavpuwt")
                .withRetry("dataqcfzdfmqoeofy")
                .withRetryIntervalInSeconds(1978374101)
                .withSecureInput(true)
                .withSecureOutput(false)
                .withAdditionalProperties(mapOf()))
            .withGlobalParameters(mapOf("qlbjxps", "datarqponugco", "zygdkovytjsrboq", "datavvggvnqpar"))
            .withWebServiceOutputs(mapOf("swlmxepygkfuwgkb",
                new AzureMLWebServiceFile().withFilePath("dataqqvukjtcdppdmmf")
                    .withLinkedServiceName(new LinkedServiceReference().withReferenceName("ubcccltygxzit")
                        .withParameters(mapOf("vydvdjc", "datab", "rfayd", "datadhar"))),
                "lefpuxjhxsfb",
                new AzureMLWebServiceFile().withFilePath("datajqtk")
                    .withLinkedServiceName(new LinkedServiceReference().withReferenceName("zwmqzkjecz")
                        .withParameters(mapOf("jacvmhpueiuhhn", "datafew", "kvfjbxvhuili", "dataxnxxwafialipymn",
                            "ahqqumoz", "datadyuuotqpljw")))))
            .withWebServiceInputs(mapOf("ocjkqo",
                new AzureMLWebServiceFile().withFilePath("dataaysmmztvkgxz")
                    .withLinkedServiceName(new LinkedServiceReference().withReferenceName("rhnkm")
                        .withParameters(mapOf("iypsmpgopcl", "datanplnnxopixx", "we", "datatysirhnwseb",
                            "ddcqteozayjim", "datasxrnji", "jtmdw", "datacb"))),
                "peafzvxbvk",
                new AzureMLWebServiceFile().withFilePath("datacfnomwaoebvjmmsg")
                    .withLinkedServiceName(new LinkedServiceReference().withReferenceName("koql")
                        .withParameters(mapOf("hztdzmeiicdybcor", "dataerztenzkbppg", "ztzhwbwrocuv", "datamdzafdqqjds",
                            "gzrt", "datapqag", "je", "datausxh"))),
                "g",
                new AzureMLWebServiceFile().withFilePath("dataj")
                    .withLinkedServiceName(new LinkedServiceReference().withReferenceName("nmoekohxkgxyd")
                        .withParameters(mapOf("wsage", "datapzetradbihn", "hoxux", "dataosbzydbt", "zeoxz",
                            "datavbsazzh", "rjfpqemylkyg", "datarhakhaec")))));
        model = BinaryData.fromObject(model).toObject(AzureMLBatchExecutionActivity.class);
        Assertions.assertEquals("ov", model.name());
        Assertions.assertEquals("x", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("iv", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("jhukngdf", model.userProperties().get(0).name());
        Assertions.assertEquals("bv", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1978374101, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals("ubcccltygxzit",
            model.webServiceOutputs().get("swlmxepygkfuwgkb").linkedServiceName().referenceName());
        Assertions.assertEquals("rhnkm", model.webServiceInputs().get("ocjkqo").linkedServiceName().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
