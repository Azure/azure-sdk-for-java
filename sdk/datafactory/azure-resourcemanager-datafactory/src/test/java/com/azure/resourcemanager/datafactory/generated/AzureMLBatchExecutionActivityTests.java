// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.AzureMLBatchExecutionActivity;
import com.azure.resourcemanager.datafactory.models.AzureMLWebServiceFile;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureMLBatchExecutionActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureMLBatchExecutionActivity model = BinaryData.fromString(
            "{\"type\":\"AzureMLBatchExecution\",\"typeProperties\":{\"globalParameters\":{\"hghorgji\":\"datajaktgtwvzp\",\"bqdsuaazkouvvgcw\":\"dataragqcwcdbtopuyi\",\"gaofwo\":\"dataimhjbxwr\",\"xp\":\"dataz\"},\"webServiceOutputs\":{\"euegrdit\":{\"filePath\":\"datax\",\"linkedServiceName\":{\"referenceName\":\"m\",\"parameters\":{\"uxjh\":\"datafsh\",\"uz\":\"datauzirhcghnclfahr\"}}},\"xabtlmszqaudaip\":{\"filePath\":\"dataptpq\",\"linkedServiceName\":{\"referenceName\":\"ajggmmiwoisql\",\"parameters\":{\"cptoihoyvua\":\"datafycnpovnjzaaox\",\"gslqpz\":\"datafju\",\"vfbzzscepo\":\"dataxwdanlgc\",\"yiuhjqdw\":\"datagzppufueiaiece\"}}}},\"webServiceInputs\":{\"qgivyxoj\":{\"filePath\":\"dataxjkopivszejb\",\"linkedServiceName\":{\"referenceName\":\"trmhabzjemqvl\",\"parameters\":{\"cgqh\":\"datacaxnbqsjz\"}}},\"aubhrbtthzfgpzy\":{\"filePath\":\"datamussvurslwd\",\"linkedServiceName\":{\"referenceName\":\"n\",\"parameters\":{\"daql\":\"dataalv\",\"whtws\":\"datasoqrhwla\",\"srvtrwswb\":\"dataliwpzucetzi\"}}},\"dyxjicikzm\":{\"filePath\":\"dataivusehyvqxjbqfcl\",\"linkedServiceName\":{\"referenceName\":\"jecajtuo\",\"parameters\":{\"xn\":\"datalzxuakbavpk\",\"vsgx\":\"datarbckfzb\",\"htlvja\":\"dataijnvsjgnbdhhqs\"}}},\"emsl\":{\"filePath\":\"datadddfjmirbnfc\",\"linkedServiceName\":{\"referenceName\":\"l\",\"parameters\":{\"q\":\"datavpfspfdfrymrf\",\"w\":\"dataxln\",\"qhzotkowi\":\"datagi\",\"wymrmuioepi\":\"datauerhzyl\"}}}}},\"linkedServiceName\":{\"referenceName\":\"tvryszqzvemwne\",\"parameters\":{\"ywdgrskdlt\":\"datawjcgryolbqcft\",\"vmcxljlpyh\":\"datafzyijn\"}},\"policy\":{\"timeout\":\"datadjgcuew\",\"retry\":\"dataqbqgfq\",\"retryIntervalInSeconds\":1286883147,\"secureInput\":true,\"secureOutput\":true,\"\":{\"oubjnmoid\":\"datajmxvvtuk\",\"cgmfklqswwdbs\":\"datanbfbkwyvw\",\"vo\":\"dataghysedqrb\",\"yibycoupksa\":\"dataqrwngfyjfquzxmtm\"}},\"name\":\"djkrosqxvffrn\",\"description\":\"wvjgyjoklngjs\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"sqdnasj\",\"dependencyConditions\":[\"Succeeded\",\"Failed\"],\"\":{\"bvqsl\":\"datakszzbdtvrgy\",\"uqvq\":\"datak\",\"atyqawtfyzqo\":\"dataotvfcbgffdlff\"}},{\"activity\":\"glixhapvwacwrcte\",\"dependencyConditions\":[\"Completed\",\"Skipped\",\"Failed\"],\"\":{\"ble\":\"datazncoxeop\"}},{\"activity\":\"axrsyxeqwgaeice\",\"dependencyConditions\":[\"Completed\"],\"\":{\"cxkywypztssq\":\"dataci\",\"wzwvttkh\":\"dataclaec\",\"qjqjkhqa\":\"dataxqyinfd\"}}],\"userProperties\":[{\"name\":\"czaqgevsnnqvkuf\",\"value\":\"datazwgw\"},{\"name\":\"dv\",\"value\":\"dataskffqqaobbq\"}],\"\":{\"ykhtsycct\":\"datajusqhrvadffdr\",\"siembc\":\"datarvn\",\"ixjkxvz\":\"datatzmldw\",\"orqbmkfo\":\"dataa\"}}")
            .toObject(AzureMLBatchExecutionActivity.class);
        Assertions.assertEquals("djkrosqxvffrn", model.name());
        Assertions.assertEquals("wvjgyjoklngjs", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("sqdnasj", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("czaqgevsnnqvkuf", model.userProperties().get(0).name());
        Assertions.assertEquals("tvryszqzvemwne", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1286883147, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals("m", model.webServiceOutputs().get("euegrdit").linkedServiceName().referenceName());
        Assertions.assertEquals("trmhabzjemqvl",
            model.webServiceInputs().get("qgivyxoj").linkedServiceName().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureMLBatchExecutionActivity model
            = new AzureMLBatchExecutionActivity().withName("djkrosqxvffrn")
                .withDescription("wvjgyjoklngjs")
                .withState(ActivityState.INACTIVE)
                .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
                .withDependsOn(Arrays.asList(
                    new ActivityDependency().withActivity("sqdnasj")
                        .withDependencyConditions(
                            Arrays.asList(DependencyCondition.SUCCEEDED, DependencyCondition.FAILED))
                        .withAdditionalProperties(mapOf()),
                    new ActivityDependency().withActivity("glixhapvwacwrcte")
                        .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED,
                            DependencyCondition.SKIPPED, DependencyCondition.FAILED))
                        .withAdditionalProperties(mapOf()),
                    new ActivityDependency().withActivity("axrsyxeqwgaeice")
                        .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED))
                        .withAdditionalProperties(mapOf())))
                .withUserProperties(Arrays.asList(new UserProperty().withName("czaqgevsnnqvkuf").withValue("datazwgw"),
                    new UserProperty().withName("dv").withValue("dataskffqqaobbq")))
                .withLinkedServiceName(new LinkedServiceReference().withReferenceName("tvryszqzvemwne")
                    .withParameters(mapOf("ywdgrskdlt", "datawjcgryolbqcft", "vmcxljlpyh", "datafzyijn")))
                .withPolicy(new ActivityPolicy().withTimeout("datadjgcuew")
                    .withRetry("dataqbqgfq")
                    .withRetryIntervalInSeconds(1286883147)
                    .withSecureInput(true)
                    .withSecureOutput(true)
                    .withAdditionalProperties(mapOf()))
                .withGlobalParameters(mapOf("hghorgji", "datajaktgtwvzp", "bqdsuaazkouvvgcw", "dataragqcwcdbtopuyi",
                    "gaofwo", "dataimhjbxwr", "xp", "dataz"))
                .withWebServiceOutputs(
                    mapOf("euegrdit",
                        new AzureMLWebServiceFile().withFilePath("datax")
                            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("m")
                                .withParameters(mapOf("uxjh", "datafsh", "uz", "datauzirhcghnclfahr"))),
                        "xabtlmszqaudaip",
                        new AzureMLWebServiceFile().withFilePath("dataptpq")
                            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("ajggmmiwoisql")
                                .withParameters(mapOf("cptoihoyvua", "datafycnpovnjzaaox", "gslqpz", "datafju",
                                    "vfbzzscepo", "dataxwdanlgc", "yiuhjqdw", "datagzppufueiaiece")))))
                .withWebServiceInputs(
                    mapOf("qgivyxoj",
                        new AzureMLWebServiceFile().withFilePath("dataxjkopivszejb")
                            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("trmhabzjemqvl")
                                .withParameters(mapOf("cgqh", "datacaxnbqsjz"))),
                        "aubhrbtthzfgpzy",
                        new AzureMLWebServiceFile().withFilePath("datamussvurslwd")
                            .withLinkedServiceName(
                                new LinkedServiceReference().withReferenceName("n")
                                    .withParameters(mapOf("daql", "dataalv", "whtws", "datasoqrhwla", "srvtrwswb",
                                        "dataliwpzucetzi"))),
                        "dyxjicikzm",
                        new AzureMLWebServiceFile().withFilePath("dataivusehyvqxjbqfcl")
                            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("jecajtuo")
                                .withParameters(mapOf("xn", "datalzxuakbavpk", "vsgx", "datarbckfzb", "htlvja",
                                    "dataijnvsjgnbdhhqs"))),
                        "emsl",
                        new AzureMLWebServiceFile().withFilePath("datadddfjmirbnfc")
                            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("l")
                                .withParameters(mapOf("q", "datavpfspfdfrymrf", "w", "dataxln", "qhzotkowi", "datagi",
                                    "wymrmuioepi", "datauerhzyl")))));
        model = BinaryData.fromObject(model).toObject(AzureMLBatchExecutionActivity.class);
        Assertions.assertEquals("djkrosqxvffrn", model.name());
        Assertions.assertEquals("wvjgyjoklngjs", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("sqdnasj", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("czaqgevsnnqvkuf", model.userProperties().get(0).name());
        Assertions.assertEquals("tvryszqzvemwne", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1286883147, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals("m", model.webServiceOutputs().get("euegrdit").linkedServiceName().referenceName());
        Assertions.assertEquals("trmhabzjemqvl",
            model.webServiceInputs().get("qgivyxoj").linkedServiceName().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
