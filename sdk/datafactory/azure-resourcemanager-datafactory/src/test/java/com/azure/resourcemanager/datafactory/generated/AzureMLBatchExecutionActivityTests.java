// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.AzureMLBatchExecutionActivity;
import com.azure.resourcemanager.datafactory.models.AzureMLWebServiceFile;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureMLBatchExecutionActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureMLBatchExecutionActivity model = BinaryData.fromString(
            "{\"type\":\"AzureMLBatchExecution\",\"typeProperties\":{\"globalParameters\":{\"uldjeq\":\"dataibkuuo\",\"mcy\":\"datamo\"},\"webServiceOutputs\":{\"chqigjamozlh\":{\"filePath\":\"datakeuraylygclwbu\",\"linkedServiceName\":{\"referenceName\":\"qamvdnexqvt\",\"parameters\":{\"unoelknyopglgk\":\"datahzgtydll\",\"zoaryhcx\":\"dataazyhhcqjahhc\",\"bdyhjfmyc\":\"dataftgmqlcooyxfrr\",\"yydbxlturlnbmj\":\"dataucccb\"}}},\"b\":{\"filePath\":\"datat\",\"linkedServiceName\":{\"referenceName\":\"tegxnguvjryfcxsc\",\"parameters\":{\"mnfgfsjp\":\"dataytnoiriemkxmvqa\"}}},\"mtahnimkndujyw\":{\"filePath\":\"datasvweu\",\"linkedServiceName\":{\"referenceName\":\"toe\",\"parameters\":{\"wtpvaiewf\":\"datahmrawmchcde\",\"thpg\":\"datawfkw\"}}},\"praaf\":{\"filePath\":\"dataxf\",\"linkedServiceName\":{\"referenceName\":\"lymuwaf\",\"parameters\":{\"sxcd\":\"datatmttjduc\",\"papwmpdsvkiwjbuf\":\"datatovtnfwp\",\"dg\":\"datamlkjfvudigwkyykh\"}}}},\"webServiceInputs\":{\"f\":{\"filePath\":\"dataojt\",\"linkedServiceName\":{\"referenceName\":\"upjgebnsuiklnc\",\"parameters\":{\"fpcvblyeoyn\":\"dataghrbabxywojux\",\"zmfuh\":\"datahxkq\",\"hvmez\":\"dataupifgizkvokkhr\"}}},\"ttdyvifltvwebzf\":{\"filePath\":\"datadrtokw\",\"linkedServiceName\":{\"referenceName\":\"mbonureklgunpajw\",\"parameters\":{\"smookhobzi\":\"datactdpjuwujx\",\"niac\":\"dataqpstxulnntjiucn\"}}},\"ktwk\":{\"filePath\":\"datallk\",\"linkedServiceName\":{\"referenceName\":\"nwinqywlvxuxztj\",\"parameters\":{\"kq\":\"datarqh\",\"lkjhmugyayhpdstl\":\"dataxjly\",\"evrglzx\":\"datadgiqgeeqcgunsoi\",\"daqxnkdqsyhm\":\"datawkkykaz\"}}}}},\"linkedServiceName\":{\"referenceName\":\"vhwkwzxjezys\",\"parameters\":{\"uhydxahjuda\":\"datarhbkzzqwikqkx\",\"dflfx\":\"datammgsxolwofofmyl\",\"cccaujga\":\"datalwhtpyk\",\"vgemblntdynp\":\"datackjqupjxdbgmgx\"}},\"policy\":{\"timeout\":\"dataigxefscsrw\",\"retry\":\"datauteusuxvliq\",\"retryIntervalInSeconds\":1459080325,\"secureInput\":false,\"secureOutput\":false,\"\":{\"gizvvtdrjockz\":\"datazzsbqnv\",\"ppjzmpxam\":\"datafnph\"}},\"name\":\"qdostvx\",\"description\":\"fnmnfndrbkko\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"qfze\",\"dependencyConditions\":[\"Completed\",\"Completed\",\"Failed\",\"Failed\"],\"\":{\"kvn\":\"datadr\",\"arvhzfynbxw\":\"datazumczlknfwslvs\"}}],\"userProperties\":[{\"name\":\"mvlkuvbesrawzxnw\",\"value\":\"datasjygi\"}],\"\":{\"slcnsxhpqey\":\"datafo\",\"chdjarfdfnqfvr\":\"datazydpvv\",\"n\":\"dataxlh\"}}")
            .toObject(AzureMLBatchExecutionActivity.class);
        Assertions.assertEquals("qdostvx", model.name());
        Assertions.assertEquals("fnmnfndrbkko", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("qfze", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("mvlkuvbesrawzxnw", model.userProperties().get(0).name());
        Assertions.assertEquals("vhwkwzxjezys", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1459080325, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals("qamvdnexqvt",
            model.webServiceOutputs().get("chqigjamozlh").linkedServiceName().referenceName());
        Assertions.assertEquals("upjgebnsuiklnc",
            model.webServiceInputs().get("f").linkedServiceName().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureMLBatchExecutionActivity model = new AzureMLBatchExecutionActivity().withName("qdostvx")
            .withDescription("fnmnfndrbkko")
            .withState(ActivityState.INACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
            .withDependsOn(Arrays.asList(new ActivityDependency().withActivity("qfze")
                .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED, DependencyCondition.COMPLETED,
                    DependencyCondition.FAILED, DependencyCondition.FAILED))
                .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("mvlkuvbesrawzxnw").withValue("datasjygi")))
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("vhwkwzxjezys")
                .withParameters(mapOf("uhydxahjuda", "datarhbkzzqwikqkx", "dflfx", "datammgsxolwofofmyl", "cccaujga",
                    "datalwhtpyk", "vgemblntdynp", "datackjqupjxdbgmgx")))
            .withPolicy(new ActivityPolicy().withTimeout("dataigxefscsrw")
                .withRetry("datauteusuxvliq")
                .withRetryIntervalInSeconds(1459080325)
                .withSecureInput(false)
                .withSecureOutput(false)
                .withAdditionalProperties(mapOf()))
            .withGlobalParameters(mapOf("uldjeq", "dataibkuuo", "mcy", "datamo"))
            .withWebServiceOutputs(mapOf("chqigjamozlh",
                new AzureMLWebServiceFile().withFilePath("datakeuraylygclwbu")
                    .withLinkedServiceName(new LinkedServiceReference().withReferenceName("qamvdnexqvt")
                        .withParameters(mapOf("unoelknyopglgk", "datahzgtydll", "zoaryhcx", "dataazyhhcqjahhc",
                            "bdyhjfmyc", "dataftgmqlcooyxfrr", "yydbxlturlnbmj", "dataucccb"))),
                "b",
                new AzureMLWebServiceFile().withFilePath("datat")
                    .withLinkedServiceName(new LinkedServiceReference().withReferenceName("tegxnguvjryfcxsc")
                        .withParameters(mapOf("mnfgfsjp", "dataytnoiriemkxmvqa"))),
                "mtahnimkndujyw",
                new AzureMLWebServiceFile().withFilePath("datasvweu")
                    .withLinkedServiceName(new LinkedServiceReference().withReferenceName("toe")
                        .withParameters(mapOf("wtpvaiewf", "datahmrawmchcde", "thpg", "datawfkw"))),
                "praaf",
                new AzureMLWebServiceFile().withFilePath("dataxf")
                    .withLinkedServiceName(new LinkedServiceReference().withReferenceName("lymuwaf")
                        .withParameters(mapOf("sxcd", "datatmttjduc", "papwmpdsvkiwjbuf", "datatovtnfwp", "dg",
                            "datamlkjfvudigwkyykh")))))
            .withWebServiceInputs(mapOf("f",
                new AzureMLWebServiceFile().withFilePath("dataojt")
                    .withLinkedServiceName(new LinkedServiceReference().withReferenceName("upjgebnsuiklnc")
                        .withParameters(mapOf("fpcvblyeoyn", "dataghrbabxywojux", "zmfuh", "datahxkq", "hvmez",
                            "dataupifgizkvokkhr"))),
                "ttdyvifltvwebzf",
                new AzureMLWebServiceFile().withFilePath("datadrtokw")
                    .withLinkedServiceName(new LinkedServiceReference().withReferenceName("mbonureklgunpajw")
                        .withParameters(mapOf("smookhobzi", "datactdpjuwujx", "niac", "dataqpstxulnntjiucn"))),
                "ktwk",
                new AzureMLWebServiceFile().withFilePath("datallk")
                    .withLinkedServiceName(new LinkedServiceReference().withReferenceName("nwinqywlvxuxztj")
                        .withParameters(mapOf("kq", "datarqh", "lkjhmugyayhpdstl", "dataxjly", "evrglzx",
                            "datadgiqgeeqcgunsoi", "daqxnkdqsyhm", "datawkkykaz")))));
        model = BinaryData.fromObject(model).toObject(AzureMLBatchExecutionActivity.class);
        Assertions.assertEquals("qdostvx", model.name());
        Assertions.assertEquals("fnmnfndrbkko", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("qfze", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("mvlkuvbesrawzxnw", model.userProperties().get(0).name());
        Assertions.assertEquals("vhwkwzxjezys", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1459080325, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals("qamvdnexqvt",
            model.webServiceOutputs().get("chqigjamozlh").linkedServiceName().referenceName());
        Assertions.assertEquals("upjgebnsuiklnc",
            model.webServiceInputs().get("f").linkedServiceName().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
