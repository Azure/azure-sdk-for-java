// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DataFlow;
import com.azure.resourcemanager.datafactory.models.DataFlowDebugPackage;
import com.azure.resourcemanager.datafactory.models.DataFlowDebugPackageDebugSettings;
import com.azure.resourcemanager.datafactory.models.DataFlowDebugResource;
import com.azure.resourcemanager.datafactory.models.DataFlowFolder;
import com.azure.resourcemanager.datafactory.models.DataFlowSourceSetting;
import com.azure.resourcemanager.datafactory.models.DataFlowStagingInfo;
import com.azure.resourcemanager.datafactory.models.Dataset;
import com.azure.resourcemanager.datafactory.models.DatasetDebugResource;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeReference;
import com.azure.resourcemanager.datafactory.models.LinkedService;
import com.azure.resourcemanager.datafactory.models.LinkedServiceDebugResource;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DataFlowDebugPackageTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DataFlowDebugPackage model = BinaryData.fromString(
            "{\"sessionId\":\"zfjltfvnzcyjto\",\"dataFlow\":{\"properties\":{\"type\":\"DataFlow\",\"description\":\"opv\",\"annotations\":[\"databzqgqqi\",\"dataedsvqwthmk\",\"dataibcysihsgqc\"],\"folder\":{\"name\":\"ohsdtmcd\"}},\"name\":\"ufcohdxbz\"},\"dataFlows\":[{\"properties\":{\"type\":\"DataFlow\",\"description\":\"uapcvhdbevwqqxe\",\"annotations\":[\"dataonqzinkfkbgbzbow\"],\"folder\":{\"name\":\"o\"}},\"name\":\"jmygvk\"},{\"properties\":{\"type\":\"DataFlow\",\"description\":\"kjjeokbz\",\"annotations\":[\"datazrxcczurt\",\"datae\",\"datapqxbkwvzgnzvdf\",\"datazdix\"],\"folder\":{\"name\":\"pnodawopqhe\"}},\"name\":\"ptmcgsbostzelnd\"},{\"properties\":{\"type\":\"DataFlow\",\"description\":\"tutmzl\",\"annotations\":[\"datajlvfhrbbpneqv\",\"datawwyyurmoch\",\"dataprprsnmokay\",\"dataejnhlbkpb\"],\"folder\":{\"name\":\"piljhahzvech\"}},\"name\":\"bnwieholew\"}],\"datasets\":[{\"properties\":{\"type\":\"Dataset\",\"description\":\"ubwefqs\",\"structure\":\"datapaq\",\"schema\":\"datae\",\"linkedServiceName\":{\"referenceName\":\"rqwexjkmfxapjwog\",\"parameters\":{\"pud\":\"datao\",\"yawbzasqbu\":\"datadabtqwp\",\"oguyaip\":\"dataljgkyex\",\"waz\":\"datadsdaultxijjumf\"}},\"parameters\":{\"usfzsvtuikzha\":{\"type\":\"Array\",\"defaultValue\":\"datacjngzqdqxtbjwgny\"},\"qnzrd\":{\"type\":\"Object\",\"defaultValue\":\"datalcfhmlrqryxy\"},\"tgoe\":{\"type\":\"String\",\"defaultValue\":\"datavwxzn\"}},\"annotations\":[\"datab\",\"databp\"],\"folder\":{\"name\":\"f\"},\"\":{\"kyrioovzid\":\"datavntjlrigjk\",\"xrizkzobgop\":\"dataxwaabzmifrygznmm\",\"lxecwcrojphslh\":\"datalhslnelxieixyn\",\"fmvigorqjbttzh\":\"dataawjutifd\"}},\"name\":\"glka\"},{\"properties\":{\"type\":\"Dataset\",\"description\":\"onqjujeickpzvcpo\",\"structure\":\"dataxelnwc\",\"schema\":\"datayjede\",\"linkedServiceName\":{\"referenceName\":\"xm\",\"parameters\":{\"uamwabzxrvxc\":\"datakqscazuawxtzx\",\"sphaivmxyasflvg\":\"datas\"}},\"parameters\":{\"mjblmljhlny\":{\"type\":\"Object\",\"defaultValue\":\"datawakoihkn\"},\"mv\":{\"type\":\"Object\",\"defaultValue\":\"datatqyryuzcbmqqv\"}},\"annotations\":[\"datatayx\",\"datansup\",\"dataujlzqnhcvsqltn\",\"dataoibgsxg\"],\"folder\":{\"name\":\"yqo\"},\"\":{\"fdbxiqxeiiqbim\":\"dataqoxwd\"}},\"name\":\"mwwinhehfqpofv\"},{\"properties\":{\"type\":\"Dataset\",\"description\":\"cblembnkbwv\",\"structure\":\"dataxk\",\"schema\":\"datavqihebwtswbzuwf\",\"linkedServiceName\":{\"referenceName\":\"duragegizvc\",\"parameters\":{\"gkxkbsazgakg\":\"datalisdjubggbq\",\"apvu\":\"datacyrcmjdmspo\"}},\"parameters\":{\"nlvxbcuii\":{\"type\":\"SecureString\",\"defaultValue\":\"dataiofrzgbzjedmstk\"},\"v\":{\"type\":\"String\",\"defaultValue\":\"datatwfans\"}},\"annotations\":[\"databmikost\",\"dataz\",\"datakiwbuqnyoph\"],\"folder\":{\"name\":\"l\"},\"\":{\"e\":\"datarpfbcunezz\",\"wl\":\"dataelfwy\",\"psihcla\":\"dataxjwet\"}},\"name\":\"va\"}],\"linkedServices\":[{\"properties\":{\"type\":\"LinkedService\",\"version\":\"rsqqwztcm\",\"connectVia\":{\"referenceName\":\"kchcxwa\",\"parameters\":{\"jkjexf\":\"dataw\",\"hkbffmbm\":\"dataeqvhpsylkk\",\"gjxsnptfu\":\"datazjrgyww\"}},\"description\":\"icgaao\",\"parameters\":{\"vru\":{\"type\":\"SecureString\",\"defaultValue\":\"dataqutdewemxs\"},\"tixo\":{\"type\":\"String\",\"defaultValue\":\"datazjgehkfkim\"},\"qepqwhixmon\":{\"type\":\"Array\",\"defaultValue\":\"dataqyinl\"}},\"annotations\":[\"datahiyxgvelfclduc\"],\"\":{\"uwc\":\"datards\",\"egstmninwjizci\":\"datab\",\"tbxqmuluxlxq\":\"datanghgshej\"}},\"name\":\"nersb\"}],\"staging\":{\"linkedService\":{\"referenceName\":\"crwnamikz\",\"parameters\":{\"ziqgfuh\":\"dataqbsms\",\"hczznvf\":\"datakzruswh\",\"wwixzvumw\":\"dataycjsx\"}},\"folderPath\":\"dataqhndvnoam\"},\"debugSettings\":{\"sourceSettings\":[{\"sourceName\":\"aohdjh\",\"rowLimit\":1043529198,\"\":{\"agltsxoa\":\"datakxcoxpelnje\",\"npbs\":\"dataftgz\"}},{\"sourceName\":\"e\",\"rowLimit\":1075307971,\"\":{\"awtxxpk\":\"datasrmozihmip\"}},{\"sourceName\":\"cxcjxgry\",\"rowLimit\":1729978627,\"\":{\"ztrksxwpndf\":\"dataycilrmcaykggnox\"}}],\"parameters\":{\"jaosrxuzv\":\"datanznthjtw\",\"xqdlyrtltlapr\":\"dataamktcqiosmgbzah\"},\"datasetParameters\":\"datazkatb\"},\"\":{\"gunbtgfebwlnbm\":\"dataznnbsoqeqalarvl\",\"av\":\"datayreeudz\",\"lmjjyuo\":\"datapdqmjxlyyzglgouw\",\"nlb\":\"dataqtobaxkjeyt\"}}")
            .toObject(DataFlowDebugPackage.class);
        Assertions.assertEquals("zfjltfvnzcyjto", model.sessionId());
        Assertions.assertEquals("ufcohdxbz", model.dataFlow().name());
        Assertions.assertEquals("opv", model.dataFlow().properties().description());
        Assertions.assertEquals("ohsdtmcd", model.dataFlow().properties().folder().name());
        Assertions.assertEquals("jmygvk", model.dataFlows().get(0).name());
        Assertions.assertEquals("uapcvhdbevwqqxe", model.dataFlows().get(0).properties().description());
        Assertions.assertEquals("o", model.dataFlows().get(0).properties().folder().name());
        Assertions.assertEquals("glka", model.datasets().get(0).name());
        Assertions.assertEquals("ubwefqs", model.datasets().get(0).properties().description());
        Assertions.assertEquals("rqwexjkmfxapjwog",
            model.datasets().get(0).properties().linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.ARRAY,
            model.datasets().get(0).properties().parameters().get("usfzsvtuikzha").type());
        Assertions.assertEquals("f", model.datasets().get(0).properties().folder().name());
        Assertions.assertEquals("nersb", model.linkedServices().get(0).name());
        Assertions.assertEquals("rsqqwztcm", model.linkedServices().get(0).properties().version());
        Assertions.assertEquals("kchcxwa", model.linkedServices().get(0).properties().connectVia().referenceName());
        Assertions.assertEquals("icgaao", model.linkedServices().get(0).properties().description());
        Assertions.assertEquals(ParameterType.SECURE_STRING,
            model.linkedServices().get(0).properties().parameters().get("vru").type());
        Assertions.assertEquals("crwnamikz", model.staging().linkedService().referenceName());
        Assertions.assertEquals("aohdjh", model.debugSettings().sourceSettings().get(0).sourceName());
        Assertions.assertEquals(1043529198, model.debugSettings().sourceSettings().get(0).rowLimit());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DataFlowDebugPackage model = new DataFlowDebugPackage().withSessionId("zfjltfvnzcyjto")
            .withDataFlow(new DataFlowDebugResource().withName("ufcohdxbz")
                .withProperties(new DataFlow().withDescription("opv")
                    .withAnnotations(Arrays.asList("databzqgqqi", "dataedsvqwthmk", "dataibcysihsgqc"))
                    .withFolder(new DataFlowFolder().withName("ohsdtmcd"))))
            .withDataFlows(Arrays.asList(
                new DataFlowDebugResource().withName("jmygvk")
                    .withProperties(new DataFlow().withDescription("uapcvhdbevwqqxe")
                        .withAnnotations(Arrays.asList("dataonqzinkfkbgbzbow"))
                        .withFolder(new DataFlowFolder().withName("o"))),
                new DataFlowDebugResource().withName("ptmcgsbostzelnd")
                    .withProperties(new DataFlow().withDescription("kjjeokbz")
                        .withAnnotations(Arrays.asList("datazrxcczurt", "datae", "datapqxbkwvzgnzvdf", "datazdix"))
                        .withFolder(new DataFlowFolder().withName("pnodawopqhe"))),
                new DataFlowDebugResource().withName("bnwieholew")
                    .withProperties(new DataFlow().withDescription("tutmzl")
                        .withAnnotations(
                            Arrays.asList("datajlvfhrbbpneqv", "datawwyyurmoch", "dataprprsnmokay", "dataejnhlbkpb"))
                        .withFolder(new DataFlowFolder().withName("piljhahzvech")))))
            .withDatasets(Arrays.asList(
                new DatasetDebugResource().withName("glka")
                    .withProperties(new Dataset().withDescription("ubwefqs")
                        .withStructure("datapaq")
                        .withSchema("datae")
                        .withLinkedServiceName(new LinkedServiceReference().withReferenceName("rqwexjkmfxapjwog")
                            .withParameters(mapOf("pud", "datao", "yawbzasqbu", "datadabtqwp", "oguyaip", "dataljgkyex",
                                "waz", "datadsdaultxijjumf")))
                        .withParameters(mapOf("usfzsvtuikzha",
                            new ParameterSpecification().withType(ParameterType.ARRAY)
                                .withDefaultValue("datacjngzqdqxtbjwgny"),
                            "qnzrd",
                            new ParameterSpecification().withType(ParameterType.OBJECT)
                                .withDefaultValue("datalcfhmlrqryxy"),
                            "tgoe",
                            new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("datavwxzn")))
                        .withAnnotations(Arrays.asList("datab", "databp"))
                        .withFolder(new DatasetFolder().withName("f"))
                        .withAdditionalProperties(mapOf("type", "Dataset"))),
                new DatasetDebugResource().withName("mwwinhehfqpofv")
                    .withProperties(new Dataset().withDescription("onqjujeickpzvcpo")
                        .withStructure("dataxelnwc")
                        .withSchema("datayjede")
                        .withLinkedServiceName(new LinkedServiceReference().withReferenceName("xm")
                            .withParameters(mapOf("uamwabzxrvxc", "datakqscazuawxtzx", "sphaivmxyasflvg", "datas")))
                        .withParameters(mapOf("mjblmljhlny",
                            new ParameterSpecification().withType(ParameterType.OBJECT)
                                .withDefaultValue("datawakoihkn"),
                            "mv",
                            new ParameterSpecification().withType(ParameterType.OBJECT)
                                .withDefaultValue("datatqyryuzcbmqqv")))
                        .withAnnotations(Arrays.asList("datatayx", "datansup", "dataujlzqnhcvsqltn", "dataoibgsxg"))
                        .withFolder(new DatasetFolder().withName("yqo"))
                        .withAdditionalProperties(mapOf("type", "Dataset"))),
                new DatasetDebugResource().withName("va")
                    .withProperties(new Dataset().withDescription("cblembnkbwv")
                        .withStructure("dataxk")
                        .withSchema("datavqihebwtswbzuwf")
                        .withLinkedServiceName(new LinkedServiceReference().withReferenceName("duragegizvc")
                            .withParameters(mapOf("gkxkbsazgakg", "datalisdjubggbq", "apvu", "datacyrcmjdmspo")))
                        .withParameters(mapOf("nlvxbcuii",
                            new ParameterSpecification().withType(ParameterType.SECURE_STRING)
                                .withDefaultValue("dataiofrzgbzjedmstk"),
                            "v",
                            new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("datatwfans")))
                        .withAnnotations(Arrays.asList("databmikost", "dataz", "datakiwbuqnyoph"))
                        .withFolder(new DatasetFolder().withName("l"))
                        .withAdditionalProperties(mapOf("type", "Dataset")))))
            .withLinkedServices(
                Arrays
                    .asList(
                        new LinkedServiceDebugResource().withName("nersb")
                            .withProperties(new LinkedService().withVersion("rsqqwztcm")
                                .withConnectVia(new IntegrationRuntimeReference().withReferenceName("kchcxwa")
                                    .withParameters(mapOf("jkjexf", "dataw", "hkbffmbm", "dataeqvhpsylkk", "gjxsnptfu",
                                        "datazjrgyww")))
                                .withDescription("icgaao")
                                .withParameters(mapOf("vru",
                                    new ParameterSpecification().withType(ParameterType.SECURE_STRING)
                                        .withDefaultValue("dataqutdewemxs"),
                                    "tixo",
                                    new ParameterSpecification().withType(ParameterType.STRING)
                                        .withDefaultValue("datazjgehkfkim"),
                                    "qepqwhixmon",
                                    new ParameterSpecification().withType(ParameterType.ARRAY)
                                        .withDefaultValue("dataqyinl")))
                                .withAnnotations(Arrays.asList("datahiyxgvelfclduc"))
                                .withAdditionalProperties(mapOf("type", "LinkedService")))))
            .withStaging(new DataFlowStagingInfo()
                .withLinkedService(new LinkedServiceReference().withReferenceName("crwnamikz")
                    .withParameters(mapOf("ziqgfuh", "dataqbsms", "hczznvf", "datakzruswh", "wwixzvumw", "dataycjsx")))
                .withFolderPath("dataqhndvnoam"))
            .withDebugSettings(new DataFlowDebugPackageDebugSettings()
                .withSourceSettings(Arrays.asList(
                    new DataFlowSourceSetting().withSourceName("aohdjh")
                        .withRowLimit(1043529198)
                        .withAdditionalProperties(mapOf()),
                    new DataFlowSourceSetting().withSourceName("e")
                        .withRowLimit(1075307971)
                        .withAdditionalProperties(mapOf()),
                    new DataFlowSourceSetting().withSourceName("cxcjxgry")
                        .withRowLimit(1729978627)
                        .withAdditionalProperties(mapOf())))
                .withParameters(mapOf("jaosrxuzv", "datanznthjtw", "xqdlyrtltlapr", "dataamktcqiosmgbzah"))
                .withDatasetParameters("datazkatb"))
            .withAdditionalProperties(mapOf());
        model = BinaryData.fromObject(model).toObject(DataFlowDebugPackage.class);
        Assertions.assertEquals("zfjltfvnzcyjto", model.sessionId());
        Assertions.assertEquals("ufcohdxbz", model.dataFlow().name());
        Assertions.assertEquals("opv", model.dataFlow().properties().description());
        Assertions.assertEquals("ohsdtmcd", model.dataFlow().properties().folder().name());
        Assertions.assertEquals("jmygvk", model.dataFlows().get(0).name());
        Assertions.assertEquals("uapcvhdbevwqqxe", model.dataFlows().get(0).properties().description());
        Assertions.assertEquals("o", model.dataFlows().get(0).properties().folder().name());
        Assertions.assertEquals("glka", model.datasets().get(0).name());
        Assertions.assertEquals("ubwefqs", model.datasets().get(0).properties().description());
        Assertions.assertEquals("rqwexjkmfxapjwog",
            model.datasets().get(0).properties().linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.ARRAY,
            model.datasets().get(0).properties().parameters().get("usfzsvtuikzha").type());
        Assertions.assertEquals("f", model.datasets().get(0).properties().folder().name());
        Assertions.assertEquals("nersb", model.linkedServices().get(0).name());
        Assertions.assertEquals("rsqqwztcm", model.linkedServices().get(0).properties().version());
        Assertions.assertEquals("kchcxwa", model.linkedServices().get(0).properties().connectVia().referenceName());
        Assertions.assertEquals("icgaao", model.linkedServices().get(0).properties().description());
        Assertions.assertEquals(ParameterType.SECURE_STRING,
            model.linkedServices().get(0).properties().parameters().get("vru").type());
        Assertions.assertEquals("crwnamikz", model.staging().linkedService().referenceName());
        Assertions.assertEquals("aohdjh", model.debugSettings().sourceSettings().get(0).sourceName());
        Assertions.assertEquals(1043529198, model.debugSettings().sourceSettings().get(0).rowLimit());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
