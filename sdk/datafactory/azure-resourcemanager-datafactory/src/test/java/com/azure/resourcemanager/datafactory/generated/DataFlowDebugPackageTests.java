// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DataFlow;
import com.azure.resourcemanager.datafactory.models.DataFlowDebugPackage;
import com.azure.resourcemanager.datafactory.models.DataFlowDebugPackageDebugSettings;
import com.azure.resourcemanager.datafactory.models.DataFlowDebugResource;
import com.azure.resourcemanager.datafactory.models.DataFlowSourceSetting;
import com.azure.resourcemanager.datafactory.models.DataFlowStagingInfo;
import com.azure.resourcemanager.datafactory.models.Dataset;
import com.azure.resourcemanager.datafactory.models.DatasetDebugResource;
import com.azure.resourcemanager.datafactory.models.LinkedService;
import com.azure.resourcemanager.datafactory.models.LinkedServiceDebugResource;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class DataFlowDebugPackageTests {
    @Test
    public void testDeserialize() {
        DataFlowDebugPackage model =
            BinaryData
                .fromString(
                    "{\"sessionId\":\"jabudurgkakmo\",\"dataFlow\":{\"properties\":{\"type\":\"DataFlow\",\"description\":\"jjklff\",\"annotations\":[]},\"name\":\"qlgzrfzeeye\"},\"dataFlows\":[{\"properties\":{\"type\":\"DataFlow\",\"description\":\"kayuhqlbjbs\",\"annotations\":[]},\"name\":\"wrv\"}],\"datasets\":[{\"properties\":{\"type\":\"Dataset\",\"description\":\"mfpgv\",\"parameters\":{},\"annotations\":[],\"\":{}},\"name\":\"haq\"},{\"properties\":{\"type\":\"Dataset\",\"description\":\"ss\",\"parameters\":{},\"annotations\":[],\"\":{}},\"name\":\"rezpdr\"},{\"properties\":{\"type\":\"Dataset\",\"description\":\"euyowqkd\",\"parameters\":{},\"annotations\":[],\"\":{}},\"name\":\"rcgp\"},{\"properties\":{\"type\":\"Dataset\",\"description\":\"pzimejzanlfzxi\",\"parameters\":{},\"annotations\":[],\"\":{}},\"name\":\"okixrjqcir\"}],\"linkedServices\":[{\"properties\":{\"type\":\"LinkedService\",\"description\":\"lazszrn\",\"parameters\":{},\"annotations\":[],\"\":{}},\"name\":\"dfpwpjylwbtlhfls\"},{\"properties\":{\"type\":\"LinkedService\",\"description\":\"hszfjvfb\",\"parameters\":{},\"annotations\":[],\"\":{}},\"name\":\"jagrqmqhldvr\"}],\"staging\":{\"linkedService\":{\"referenceName\":\"ojnal\",\"parameters\":{}}},\"debugSettings\":{\"sourceSettings\":[{\"sourceName\":\"ex\",\"rowLimit\":1287835593,\"\":{}},{\"sourceName\":\"luqhhahhxv\",\"rowLimit\":1777288150,\"\":{}},{\"sourceName\":\"wpjgwws\",\"rowLimit\":1679710100,\"\":{}}],\"parameters\":{}},\"\":{}}")
                .toObject(DataFlowDebugPackage.class);
        Assertions.assertEquals("jabudurgkakmo", model.sessionId());
        Assertions.assertEquals("qlgzrfzeeye", model.dataFlow().name());
        Assertions.assertEquals("jjklff", model.dataFlow().properties().description());
        Assertions.assertEquals("wrv", model.dataFlows().get(0).name());
        Assertions.assertEquals("kayuhqlbjbs", model.dataFlows().get(0).properties().description());
        Assertions.assertEquals("haq", model.datasets().get(0).name());
        Assertions.assertEquals("mfpgv", model.datasets().get(0).properties().description());
        Assertions.assertEquals("dfpwpjylwbtlhfls", model.linkedServices().get(0).name());
        Assertions.assertEquals("lazszrn", model.linkedServices().get(0).properties().description());
        Assertions.assertEquals("ojnal", model.staging().linkedService().referenceName());
        Assertions.assertEquals("ex", model.debugSettings().sourceSettings().get(0).sourceName());
        Assertions.assertEquals(1287835593, model.debugSettings().sourceSettings().get(0).rowLimit());
    }

    @Test
    public void testSerialize() {
        DataFlowDebugPackage model =
            new DataFlowDebugPackage()
                .withSessionId("jabudurgkakmo")
                .withDataFlow(
                    new DataFlowDebugResource()
                        .withName("qlgzrfzeeye")
                        .withProperties(new DataFlow().withDescription("jjklff").withAnnotations(Arrays.asList())))
                .withDataFlows(
                    Arrays
                        .asList(
                            new DataFlowDebugResource()
                                .withName("wrv")
                                .withProperties(
                                    new DataFlow().withDescription("kayuhqlbjbs").withAnnotations(Arrays.asList()))))
                .withDatasets(
                    Arrays
                        .asList(
                            new DatasetDebugResource()
                                .withName("haq")
                                .withProperties(
                                    new Dataset()
                                        .withDescription("mfpgv")
                                        .withParameters(mapOf())
                                        .withAnnotations(Arrays.asList())
                                        .withAdditionalProperties(mapOf("type", "Dataset"))),
                            new DatasetDebugResource()
                                .withName("rezpdr")
                                .withProperties(
                                    new Dataset()
                                        .withDescription("ss")
                                        .withParameters(mapOf())
                                        .withAnnotations(Arrays.asList())
                                        .withAdditionalProperties(mapOf("type", "Dataset"))),
                            new DatasetDebugResource()
                                .withName("rcgp")
                                .withProperties(
                                    new Dataset()
                                        .withDescription("euyowqkd")
                                        .withParameters(mapOf())
                                        .withAnnotations(Arrays.asList())
                                        .withAdditionalProperties(mapOf("type", "Dataset"))),
                            new DatasetDebugResource()
                                .withName("okixrjqcir")
                                .withProperties(
                                    new Dataset()
                                        .withDescription("pzimejzanlfzxi")
                                        .withParameters(mapOf())
                                        .withAnnotations(Arrays.asList())
                                        .withAdditionalProperties(mapOf("type", "Dataset")))))
                .withLinkedServices(
                    Arrays
                        .asList(
                            new LinkedServiceDebugResource()
                                .withName("dfpwpjylwbtlhfls")
                                .withProperties(
                                    new LinkedService()
                                        .withDescription("lazszrn")
                                        .withParameters(mapOf())
                                        .withAnnotations(Arrays.asList())
                                        .withAdditionalProperties(mapOf("type", "LinkedService"))),
                            new LinkedServiceDebugResource()
                                .withName("jagrqmqhldvr")
                                .withProperties(
                                    new LinkedService()
                                        .withDescription("hszfjvfb")
                                        .withParameters(mapOf())
                                        .withAnnotations(Arrays.asList())
                                        .withAdditionalProperties(mapOf("type", "LinkedService")))))
                .withStaging(
                    new DataFlowStagingInfo()
                        .withLinkedService(
                            new LinkedServiceReference().withReferenceName("ojnal").withParameters(mapOf())))
                .withDebugSettings(
                    new DataFlowDebugPackageDebugSettings()
                        .withSourceSettings(
                            Arrays
                                .asList(
                                    new DataFlowSourceSetting()
                                        .withSourceName("ex")
                                        .withRowLimit(1287835593)
                                        .withAdditionalProperties(mapOf()),
                                    new DataFlowSourceSetting()
                                        .withSourceName("luqhhahhxv")
                                        .withRowLimit(1777288150)
                                        .withAdditionalProperties(mapOf()),
                                    new DataFlowSourceSetting()
                                        .withSourceName("wpjgwws")
                                        .withRowLimit(1679710100)
                                        .withAdditionalProperties(mapOf())))
                        .withParameters(mapOf()))
                .withAdditionalProperties(mapOf());
        model = BinaryData.fromObject(model).toObject(DataFlowDebugPackage.class);
        Assertions.assertEquals("jabudurgkakmo", model.sessionId());
        Assertions.assertEquals("qlgzrfzeeye", model.dataFlow().name());
        Assertions.assertEquals("jjklff", model.dataFlow().properties().description());
        Assertions.assertEquals("wrv", model.dataFlows().get(0).name());
        Assertions.assertEquals("kayuhqlbjbs", model.dataFlows().get(0).properties().description());
        Assertions.assertEquals("haq", model.datasets().get(0).name());
        Assertions.assertEquals("mfpgv", model.datasets().get(0).properties().description());
        Assertions.assertEquals("dfpwpjylwbtlhfls", model.linkedServices().get(0).name());
        Assertions.assertEquals("lazszrn", model.linkedServices().get(0).properties().description());
        Assertions.assertEquals("ojnal", model.staging().linkedService().referenceName());
        Assertions.assertEquals("ex", model.debugSettings().sourceSettings().get(0).sourceName());
        Assertions.assertEquals(1287835593, model.debugSettings().sourceSettings().get(0).rowLimit());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
