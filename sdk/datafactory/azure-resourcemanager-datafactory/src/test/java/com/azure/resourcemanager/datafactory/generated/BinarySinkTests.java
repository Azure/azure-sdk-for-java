// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.BinarySink;
import com.azure.resourcemanager.datafactory.models.StoreWriteSettings;
import java.util.HashMap;
import java.util.Map;

public final class BinarySinkTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        BinarySink model =
            BinaryData
                .fromString(
                    "{\"type\":\"BinarySink\",\"storeSettings\":{\"type\":\"StoreWriteSettings\",\"maxConcurrentConnections\":\"datax\",\"disableMetricsCollection\":\"datanmsfqntakroxkurf\",\"copyBehavior\":\"datawcmzpwkcagfqg\",\"\":{\"prdpvblonlh\":\"datamj\",\"zqavimxnhylwog\":\"datagexwjhic\",\"bgda\":\"datavl\",\"hdxlfntdclkmgg\":\"datat\"}},\"writeBatchSize\":\"datalfyxaiaf\",\"writeBatchTimeout\":\"datamxekfvycvhwduo\",\"sinkRetryCount\":\"dataapzzcxk\",\"sinkRetryWait\":\"datasbahcassqeybd\",\"maxConcurrentConnections\":\"dataeyakg\",\"disableMetricsCollection\":\"dataohfq\",\"\":{\"awctaarboxal\":\"datakicxtumqi\",\"xwevl\":\"dataoadmcvvkjnpe\",\"bo\":\"datahuahlqm\",\"xoyllx\":\"datagpmmz\"}}")
                .toObject(BinarySink.class);
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        BinarySink model =
            new BinarySink()
                .withWriteBatchSize("datalfyxaiaf")
                .withWriteBatchTimeout("datamxekfvycvhwduo")
                .withSinkRetryCount("dataapzzcxk")
                .withSinkRetryWait("datasbahcassqeybd")
                .withMaxConcurrentConnections("dataeyakg")
                .withDisableMetricsCollection("dataohfq")
                .withStoreSettings(
                    new StoreWriteSettings()
                        .withMaxConcurrentConnections("datax")
                        .withDisableMetricsCollection("datanmsfqntakroxkurf")
                        .withCopyBehavior("datawcmzpwkcagfqg")
                        .withAdditionalProperties(mapOf("type", "StoreWriteSettings")));
        model = BinaryData.fromObject(model).toObject(BinarySink.class);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
