// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.BinarySink;
import com.azure.resourcemanager.datafactory.models.MetadataItem;
import com.azure.resourcemanager.datafactory.models.StoreWriteSettings;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public final class BinarySinkTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        BinarySink model = BinaryData.fromString(
            "{\"type\":\"BinarySink\",\"storeSettings\":{\"type\":\"StoreWriteSettings\",\"maxConcurrentConnections\":\"dataajqnsrcqd\",\"disableMetricsCollection\":\"datamlqamd\",\"copyBehavior\":\"dataukdmrv\",\"metadata\":[{\"name\":\"datacclsnprdartq\",\"value\":\"databbxexacgmtpkx\"}],\"\":{\"bmujlsztpygq\":\"databovexsnmww\",\"sn\":\"datakdl\",\"mksfejzmyvlbz\":\"datamkc\"}},\"writeBatchSize\":\"datagxzpdnbjov\",\"writeBatchTimeout\":\"datadvtnbt\",\"sinkRetryCount\":\"datagkjfkaoew\",\"sinkRetryWait\":\"datayizdglzz\",\"maxConcurrentConnections\":\"datafi\",\"disableMetricsCollection\":\"datavyxyrykn\",\"\":{\"jyj\":\"datajgpyvjg\",\"c\":\"datahwbbhwr\",\"pb\":\"datawzuerrvpamfpini\",\"uu\":\"datakmfb\"}}")
            .toObject(BinarySink.class);
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        BinarySink model = new BinarySink().withWriteBatchSize("datagxzpdnbjov")
            .withWriteBatchTimeout("datadvtnbt")
            .withSinkRetryCount("datagkjfkaoew")
            .withSinkRetryWait("datayizdglzz")
            .withMaxConcurrentConnections("datafi")
            .withDisableMetricsCollection("datavyxyrykn")
            .withStoreSettings(new StoreWriteSettings().withMaxConcurrentConnections("dataajqnsrcqd")
                .withDisableMetricsCollection("datamlqamd")
                .withCopyBehavior("dataukdmrv")
                .withMetadata(
                    Arrays.asList(new MetadataItem().withName("datacclsnprdartq").withValue("databbxexacgmtpkx")))
                .withAdditionalProperties(mapOf("type", "StoreWriteSettings")));
        model = BinaryData.fromObject(model).toObject(BinarySink.class);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
