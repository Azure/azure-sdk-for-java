// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.BinarySink;
import com.azure.resourcemanager.datafactory.models.MetadataItem;
import com.azure.resourcemanager.datafactory.models.StoreWriteSettings;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public final class BinarySinkTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        BinarySink model = BinaryData.fromString(
            "{\"type\":\"BinarySink\",\"storeSettings\":{\"type\":\"StoreWriteSettings\",\"maxConcurrentConnections\":\"dataalecqyzdyzilo\",\"disableMetricsCollection\":\"datakbtnhiaqegjvhyv\",\"copyBehavior\":\"databhclb\",\"metadata\":[{\"name\":\"dataqzzyr\",\"value\":\"datavnacxmjmhclhcqcj\"},{\"name\":\"datawmbwqgsidaso\",\"value\":\"datarjggv\"},{\"name\":\"datatjebbacscirzt\",\"value\":\"datapxxbkxwhsfhe\"},{\"name\":\"datastfe\",\"value\":\"dataslyqmlg\"}],\"\":{\"ja\":\"datacnybhvzltbg\",\"qjbn\":\"datapjmkruzogssz\",\"mqe\":\"dataaxcd\",\"ltugobscpt\":\"datahsirotj\"}},\"writeBatchSize\":\"datagqyuvhl\",\"writeBatchTimeout\":\"dataj\",\"sinkRetryCount\":\"datagjnqifoznfdbou\",\"sinkRetryWait\":\"dataksxkdjpfsmdgrhdl\",\"maxConcurrentConnections\":\"dataehhqxyj\",\"disableMetricsCollection\":\"datakwvrrptblsata\",\"\":{\"dnjmjies\":\"dataryfxwwqbeyv\"}}")
            .toObject(BinarySink.class);
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        BinarySink model = new BinarySink().withWriteBatchSize("datagqyuvhl")
            .withWriteBatchTimeout("dataj")
            .withSinkRetryCount("datagjnqifoznfdbou")
            .withSinkRetryWait("dataksxkdjpfsmdgrhdl")
            .withMaxConcurrentConnections("dataehhqxyj")
            .withDisableMetricsCollection("datakwvrrptblsata")
            .withStoreSettings(new StoreWriteSettings().withMaxConcurrentConnections("dataalecqyzdyzilo")
                .withDisableMetricsCollection("datakbtnhiaqegjvhyv")
                .withCopyBehavior("databhclb")
                .withMetadata(Arrays.asList(new MetadataItem().withName("dataqzzyr").withValue("datavnacxmjmhclhcqcj"),
                    new MetadataItem().withName("datawmbwqgsidaso").withValue("datarjggv"),
                    new MetadataItem().withName("datatjebbacscirzt").withValue("datapxxbkxwhsfhe"),
                    new MetadataItem().withName("datastfe").withValue("dataslyqmlg")))
                .withAdditionalProperties(mapOf("type", "StoreWriteSettings")));
        model = BinaryData.fromObject(model).toObject(BinarySink.class);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
