// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.BinarySink;
import com.azure.resourcemanager.datafactory.models.MetadataItem;
import com.azure.resourcemanager.datafactory.models.StoreWriteSettings;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public final class BinarySinkTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        BinarySink model = BinaryData.fromString(
            "{\"type\":\"BinarySink\",\"storeSettings\":{\"type\":\"StoreWriteSettings\",\"maxConcurrentConnections\":\"datavhddvtnbtv\",\"disableMetricsCollection\":\"datakjfkaoe\",\"copyBehavior\":\"datamyizdglzzaufi\",\"metadata\":[{\"name\":\"dataxyrykngntjgpy\",\"value\":\"datagsjyjnhwbbhw\"},{\"name\":\"datac\",\"value\":\"datazuerrvpamfpin\"}],\"\":{\"lqge\":\"databfkmfbruuh\"}},\"writeBatchSize\":\"datanlbjfsoll\",\"writeBatchTimeout\":\"datau\",\"sinkRetryCount\":\"datanhxrcjshicvr\",\"sinkRetryWait\":\"databgpcal\",\"maxConcurrentConnections\":\"dataxppvp\",\"disableMetricsCollection\":\"datarfshkjgspboae\",\"\":{\"wpubdhqn\":\"dataibrooogijiqw\",\"axiimqnqmbfptz\":\"datarbvruhdjziv\",\"kkzulmqx\":\"dataxmksxxbdtjvvngn\",\"nwij\":\"dataic\"}}")
            .toObject(BinarySink.class);
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        BinarySink model = new BinarySink().withWriteBatchSize("datanlbjfsoll")
            .withWriteBatchTimeout("datau")
            .withSinkRetryCount("datanhxrcjshicvr")
            .withSinkRetryWait("databgpcal")
            .withMaxConcurrentConnections("dataxppvp")
            .withDisableMetricsCollection("datarfshkjgspboae")
            .withStoreSettings(new StoreWriteSettings().withMaxConcurrentConnections("datavhddvtnbtv")
                .withDisableMetricsCollection("datakjfkaoe")
                .withCopyBehavior("datamyizdglzzaufi")
                .withMetadata(
                    Arrays.asList(new MetadataItem().withName("dataxyrykngntjgpy").withValue("datagsjyjnhwbbhw"),
                        new MetadataItem().withName("datac").withValue("datazuerrvpamfpin")))
                .withAdditionalProperties(mapOf("type", "StoreWriteSettings")));
        model = BinaryData.fromObject(model).toObject(BinarySink.class);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
