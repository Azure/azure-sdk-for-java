// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.JsonSink;
import com.azure.resourcemanager.datafactory.models.JsonWriteSettings;
import com.azure.resourcemanager.datafactory.models.MetadataItem;
import com.azure.resourcemanager.datafactory.models.StoreWriteSettings;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public final class JsonSinkTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        JsonSink model = BinaryData.fromString(
            "{\"type\":\"JsonSink\",\"storeSettings\":{\"type\":\"StoreWriteSettings\",\"maxConcurrentConnections\":\"dataspfwmfc\",\"disableMetricsCollection\":\"datatoxsthjyyiry\",\"copyBehavior\":\"dataqmkmwdoknvyilh\",\"metadata\":[{\"name\":\"datadioxgs\",\"value\":\"dataxoyrgvrt\"},{\"name\":\"datatmzglbplqhbrar\",\"value\":\"datadepsxufyqcqf\"}],\"\":{\"xgxbgochpxps\":\"dataye\"}},\"formatSettings\":{\"type\":\"JsonWriteSettings\",\"filePattern\":\"datawsioozrugb\",\"\":{\"zjjtapvqjebtd\":\"datalwckuvlz\"}},\"writeBatchSize\":\"datagkeexsozpkvylvty\",\"writeBatchTimeout\":\"datatfqpmpywwybu\",\"sinkRetryCount\":\"datamjc\",\"sinkRetryWait\":\"dataoecdqun\",\"maxConcurrentConnections\":\"dataqcocc\",\"disableMetricsCollection\":\"dataxjrr\",\"\":{\"uoup\":\"databnkqps\"}}")
            .toObject(JsonSink.class);
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        JsonSink model = new JsonSink().withWriteBatchSize("datagkeexsozpkvylvty")
            .withWriteBatchTimeout("datatfqpmpywwybu")
            .withSinkRetryCount("datamjc")
            .withSinkRetryWait("dataoecdqun")
            .withMaxConcurrentConnections("dataqcocc")
            .withDisableMetricsCollection("dataxjrr")
            .withStoreSettings(new StoreWriteSettings().withMaxConcurrentConnections("dataspfwmfc")
                .withDisableMetricsCollection("datatoxsthjyyiry")
                .withCopyBehavior("dataqmkmwdoknvyilh")
                .withMetadata(Arrays.asList(new MetadataItem().withName("datadioxgs").withValue("dataxoyrgvrt"),
                    new MetadataItem().withName("datatmzglbplqhbrar").withValue("datadepsxufyqcqf")))
                .withAdditionalProperties(mapOf("type", "StoreWriteSettings")))
            .withFormatSettings(new JsonWriteSettings().withFilePattern("datawsioozrugb"));
        model = BinaryData.fromObject(model).toObject(JsonSink.class);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
