// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.JsonSink;
import com.azure.resourcemanager.datafactory.models.JsonWriteSettings;
import com.azure.resourcemanager.datafactory.models.StoreWriteSettings;
import java.util.HashMap;
import java.util.Map;

public final class JsonSinkTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        JsonSink model =
            BinaryData
                .fromString(
                    "{\"type\":\"JsonSink\",\"storeSettings\":{\"type\":\"StoreWriteSettings\",\"maxConcurrentConnections\":\"dataolzinxx\",\"disableMetricsCollection\":\"dataixr\",\"copyBehavior\":\"datawxcaa\",\"\":{\"hacfiyrywfry\":\"dataqosgzgsgzlbunm\",\"iiarlldy\":\"datarreebjmslbxf\",\"wuebrvrh\":\"datafjdtykhsafrf\",\"ybwh\":\"dataqkfffvgbklei\"}},\"formatSettings\":{\"type\":\"JsonWriteSettings\",\"filePattern\":\"dataebvkmtljzilkyvyb\",\"\":{\"mxcukurkg\":\"datagirpitzq\"}},\"writeBatchSize\":\"dataxqanrk\",\"writeBatchTimeout\":\"datadjfsvfbjcnad\",\"sinkRetryCount\":\"databrntvhppykrlz\",\"sinkRetryWait\":\"datalsvxpolatorjm\",\"maxConcurrentConnections\":\"databnmuxlthyxryv\",\"disableMetricsCollection\":\"datazhsigddgbcnqv\",\"\":{\"lemzrw\":\"databffcvtij\",\"kmkwddgyqeni\":\"datagvgogczgcm\",\"rtcbvifcrnxst\":\"datarznam\"}}")
                .toObject(JsonSink.class);
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        JsonSink model =
            new JsonSink()
                .withWriteBatchSize("dataxqanrk")
                .withWriteBatchTimeout("datadjfsvfbjcnad")
                .withSinkRetryCount("databrntvhppykrlz")
                .withSinkRetryWait("datalsvxpolatorjm")
                .withMaxConcurrentConnections("databnmuxlthyxryv")
                .withDisableMetricsCollection("datazhsigddgbcnqv")
                .withStoreSettings(
                    new StoreWriteSettings()
                        .withMaxConcurrentConnections("dataolzinxx")
                        .withDisableMetricsCollection("dataixr")
                        .withCopyBehavior("datawxcaa")
                        .withAdditionalProperties(mapOf("type", "StoreWriteSettings")))
                .withFormatSettings(new JsonWriteSettings().withFilePattern("dataebvkmtljzilkyvyb"));
        model = BinaryData.fromObject(model).toObject(JsonSink.class);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
