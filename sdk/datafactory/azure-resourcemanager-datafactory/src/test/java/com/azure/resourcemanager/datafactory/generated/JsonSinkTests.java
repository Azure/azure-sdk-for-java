// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.JsonSink;
import com.azure.resourcemanager.datafactory.models.JsonWriteSettings;
import com.azure.resourcemanager.datafactory.models.StoreWriteSettings;
import java.util.HashMap;
import java.util.Map;

public final class JsonSinkTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        JsonSink model = BinaryData.fromString(
            "{\"type\":\"JsonSink\",\"storeSettings\":{\"type\":\"StoreWriteSettings\",\"maxConcurrentConnections\":\"dataeebjmslbx\",\"disableMetricsCollection\":\"dataiiarlldy\",\"copyBehavior\":\"datajdtykhsafrfvwueb\",\"\":{\"kleipybwhesb\":\"datahwqkfffvg\",\"qgir\":\"databvkmtljzilkyvybl\"}},\"formatSettings\":{\"type\":\"JsonWriteSettings\",\"filePattern\":\"datazqr\",\"\":{\"qx\":\"dataukurkg\"}},\"writeBatchSize\":\"datanrkhc\",\"writeBatchTimeout\":\"datafsvfbjcnadwrb\",\"sinkRetryCount\":\"datatvhppykrl\",\"sinkRetryWait\":\"dataalsvxpola\",\"maxConcurrentConnections\":\"datarjmsabnmu\",\"disableMetricsCollection\":\"datathyxryv\",\"\":{\"bffcvtij\":\"datahsigddgbcnqvbn\",\"gvgogczgcm\":\"datalemzrw\",\"rznam\":\"datakmkwddgyqeni\",\"wvgwv\":\"datartcbvifcrnxst\"}}")
            .toObject(JsonSink.class);
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        JsonSink model = new JsonSink().withWriteBatchSize("datanrkhc").withWriteBatchTimeout("datafsvfbjcnadwrb")
            .withSinkRetryCount("datatvhppykrl").withSinkRetryWait("dataalsvxpola")
            .withMaxConcurrentConnections("datarjmsabnmu").withDisableMetricsCollection("datathyxryv")
            .withStoreSettings(new StoreWriteSettings().withMaxConcurrentConnections("dataeebjmslbx")
                .withDisableMetricsCollection("dataiiarlldy").withCopyBehavior("datajdtykhsafrfvwueb")
                .withAdditionalProperties(mapOf("type", "StoreWriteSettings")))
            .withFormatSettings(new JsonWriteSettings().withFilePattern("datazqr"));
        model = BinaryData.fromObject(model).toObject(JsonSink.class);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
