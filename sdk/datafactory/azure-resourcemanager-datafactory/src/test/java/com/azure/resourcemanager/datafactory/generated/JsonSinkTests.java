// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.JsonSink;
import com.azure.resourcemanager.datafactory.models.JsonWriteSettings;
import com.azure.resourcemanager.datafactory.models.MetadataItem;
import com.azure.resourcemanager.datafactory.models.StoreWriteSettings;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public final class JsonSinkTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        JsonSink model = BinaryData.fromString(
            "{\"type\":\"JsonSink\",\"storeSettings\":{\"type\":\"StoreWriteSettings\",\"maxConcurrentConnections\":\"datarzubdtzs\",\"disableMetricsCollection\":\"datahmhzpurnpkk\",\"copyBehavior\":\"datakzcfiosralbx\",\"metadata\":[{\"name\":\"dataluvcwu\",\"value\":\"databhxoaqfpqfpkrmlb\"},{\"name\":\"dataqogzaw\",\"value\":\"dataqdnxum\"},{\"name\":\"datavnvs\",\"value\":\"datautq\"}],\"\":{\"lygfvbfejb\":\"datantcwrluqaq\",\"sm\":\"datazklgpifv\",\"auwmsnplqfivx\":\"datak\"}},\"formatSettings\":{\"type\":\"JsonWriteSettings\",\"filePattern\":\"datadjzgovmkplr\",\"\":{\"aogvmqza\":\"datapaxoeylpo\"}},\"writeBatchSize\":\"dataqcqhwfskmkdrpkdp\",\"writeBatchTimeout\":\"dataldwcxjvexlutxcmc\",\"sinkRetryCount\":\"dataotqocnryyp\",\"sinkRetryWait\":\"dataduldsolbz\",\"maxConcurrentConnections\":\"datarufkeylkpvaagrd\",\"disableMetricsCollection\":\"datavglqdsphvo\",\"\":{\"thzfotfrfhrjka\":\"dataryhuo\",\"nitrmzvnrfkzn\":\"datadofshgmqxwop\",\"rnxrjmilogcn\":\"dataaittbmobrxhwpg\",\"plrtxhzt\":\"datafgqibb\"}}")
            .toObject(JsonSink.class);
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        JsonSink model = new JsonSink().withWriteBatchSize("dataqcqhwfskmkdrpkdp")
            .withWriteBatchTimeout("dataldwcxjvexlutxcmc")
            .withSinkRetryCount("dataotqocnryyp")
            .withSinkRetryWait("dataduldsolbz")
            .withMaxConcurrentConnections("datarufkeylkpvaagrd")
            .withDisableMetricsCollection("datavglqdsphvo")
            .withStoreSettings(new StoreWriteSettings().withMaxConcurrentConnections("datarzubdtzs")
                .withDisableMetricsCollection("datahmhzpurnpkk")
                .withCopyBehavior("datakzcfiosralbx")
                .withMetadata(Arrays.asList(new MetadataItem().withName("dataluvcwu").withValue("databhxoaqfpqfpkrmlb"),
                    new MetadataItem().withName("dataqogzaw").withValue("dataqdnxum"),
                    new MetadataItem().withName("datavnvs").withValue("datautq")))
                .withAdditionalProperties(mapOf("type", "StoreWriteSettings")))
            .withFormatSettings(new JsonWriteSettings().withFilePattern("datadjzgovmkplr"));
        model = BinaryData.fromObject(model).toObject(JsonSink.class);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
