// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.TeradataTableDataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class TeradataTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TeradataTableDataset model = BinaryData.fromString(
            "{\"type\":\"TeradataTable\",\"typeProperties\":{\"database\":\"datairgcjfai\",\"table\":\"datalpj\"},\"description\":\"krxifqn\",\"structure\":\"dataorxsqtzngxbsale\",\"schema\":\"datauxcmmhipbvskc\",\"linkedServiceName\":{\"referenceName\":\"tlynkwfsaangfg\",\"parameters\":{\"idyli\":\"datavm\"}},\"parameters\":{\"eonmzrjjaojp\":{\"type\":\"Bool\",\"defaultValue\":\"datanacgdnx\"}},\"annotations\":[\"datad\",\"datazigecwsad\"],\"folder\":{\"name\":\"udd\"},\"\":{\"vyigdeipnf\":\"dataqdmohheuyuunxmy\"}}")
            .toObject(TeradataTableDataset.class);
        Assertions.assertEquals("krxifqn", model.description());
        Assertions.assertEquals("tlynkwfsaangfg", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("eonmzrjjaojp").type());
        Assertions.assertEquals("udd", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TeradataTableDataset model = new TeradataTableDataset().withDescription("krxifqn")
            .withStructure("dataorxsqtzngxbsale")
            .withSchema("datauxcmmhipbvskc")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("tlynkwfsaangfg")
                .withParameters(mapOf("idyli", "datavm")))
            .withParameters(mapOf("eonmzrjjaojp",
                new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("datanacgdnx")))
            .withAnnotations(Arrays.asList("datad", "datazigecwsad"))
            .withFolder(new DatasetFolder().withName("udd"))
            .withDatabase("datairgcjfai")
            .withTable("datalpj");
        model = BinaryData.fromObject(model).toObject(TeradataTableDataset.class);
        Assertions.assertEquals("krxifqn", model.description());
        Assertions.assertEquals("tlynkwfsaangfg", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("eonmzrjjaojp").type());
        Assertions.assertEquals("udd", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
