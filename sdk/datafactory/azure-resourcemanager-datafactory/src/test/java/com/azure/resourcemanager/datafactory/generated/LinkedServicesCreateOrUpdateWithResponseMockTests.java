// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.datafactory.DataFactoryManager;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeReference;
import com.azure.resourcemanager.datafactory.models.LinkedService;
import com.azure.resourcemanager.datafactory.models.LinkedServiceResource;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class LinkedServicesCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"properties\":{\"type\":\"LinkedService\",\"connectVia\":{\"referenceName\":\"sf\",\"parameters\":{\"neqmjodvknxjtttk\":\"datafrtaufrxxvzq\",\"s\":\"datamhquc\"}},\"description\":\"odcxvdqfk\",\"parameters\":{\"bxfrliyikcnlbe\":{\"type\":\"Bool\",\"defaultValue\":\"datafoaabltvlttopl\"},\"diogwckvoxlih\":{\"type\":\"Int\",\"defaultValue\":\"datayoxjqysfej\"},\"nchrouvtbptdeum\":{\"type\":\"Int\",\"defaultValue\":\"datafznzemisqunxwos\"},\"b\":{\"type\":\"Array\",\"defaultValue\":\"datazxqr\"}},\"annotations\":[\"dataeodgpqdcrn\"],\"\":{\"wsnccmunh\":\"datatowohtu\",\"rngney\":\"datawcsgczvui\",\"nelmim\":\"dataxzdayzfuv\",\"gjmznptevafczg\":\"dataccevbprecgeregft\"}},\"name\":\"egdeiynlcdqx\",\"type\":\"nbjkwgk\",\"etag\":\"wkazmw\",\"id\":\"sfejkrcgcfjnozi\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        DataFactoryManager manager = DataFactoryManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        LinkedServiceResource response
            = manager
                .linkedServices().define(
                    "kuxphbwmbgwgmyg")
                .withExistingFactory("zpxlyabjrz", "ssjfwur")
                .withProperties(new LinkedService()
                    .withConnectVia(new IntegrationRuntimeReference().withReferenceName("snkylqd").withParameters(
                        mapOf("frjewqwdglmfsjp", "datadzz", "lt", "datafdh", "qtzghtjx", "dataywykfuovk")))
                    .withDescription("ywoq")
                    .withParameters(mapOf("vykthx",
                        new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("dataiioa"),
                        "egqzqdcohsqufsy",
                        new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("datawjwl")))
                    .withAnnotations(Arrays.asList("datanzsjoxuogyak", "dataxjzalhun", "datamngstvn"))
                    .withAdditionalProperties(mapOf("type", "LinkedService")))
                .withIfMatch("kv").create();

        Assertions.assertEquals("sfejkrcgcfjnozi", response.id());
        Assertions.assertEquals("sf", response.properties().connectVia().referenceName());
        Assertions.assertEquals("odcxvdqfk", response.properties().description());
        Assertions.assertEquals(ParameterType.BOOL, response.properties().parameters().get("bxfrliyikcnlbe").type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
