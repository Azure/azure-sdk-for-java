// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.datafactory.DataFactoryManager;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeReference;
import com.azure.resourcemanager.datafactory.models.LinkedService;
import com.azure.resourcemanager.datafactory.models.LinkedServiceResource;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class LinkedServicesCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"type\":\"LinkedService\",\"version\":\"fnlksyqpkskbidmz\",\"connectVia\":{\"referenceName\":\"pbhcgesbteqfen\",\"parameters\":{\"gesflnzibguw\":\"datatcy\"}},\"description\":\"hxa\",\"parameters\":{\"cillfq\":{\"type\":\"Array\",\"defaultValue\":\"datafjpefirjkinofw\"}},\"annotations\":[\"dataifdrbkprblw\",\"databjse\",\"dataqqts\",\"dataupogtrwkuwn\"],\"\":{\"wngtiyzzi\":\"datajeo\",\"nrky\":\"datauovgipqgtsgo\",\"qoiqonnvaybo\":\"datahtcrxcnuyfvrid\",\"pojbifixdgkvlze\":\"databigzlvqmy\"}},\"name\":\"qopwabrzrhdezlhs\",\"type\":\"pdbol\",\"etag\":\"hyqdvxqoajfoscd\",\"id\":\"fatf\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DataFactoryManager manager = DataFactoryManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        LinkedServiceResource response = manager.linkedServices()
            .define("qighnunptjm")
            .withExistingFactory("wgakghvaqbk", "zmwbxautspnyutf")
            .withProperties(new LinkedService().withVersion("irjnddaovgiowmzt")
                .withConnectVia(new IntegrationRuntimeReference().withReferenceName("nncvj")
                    .withParameters(mapOf("xxmsiblieg", "dataucqx", "yclv", "datajktfsci")))
                .withDescription("vsag")
                .withParameters(mapOf("lcqjnwvqif",
                    new ParameterSpecification().withType(ParameterType.SECURE_STRING)
                        .withDefaultValue("datarqnwoahfa"),
                    "qivvpvuy",
                    new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("datafsvrjdpzvhxssn")))
                .withAnnotations(Arrays.asList("datamdinnisuuakaadb"))
                .withAdditionalProperties(mapOf("type", "LinkedService")))
            .withIfMatch("vw")
            .create();

        Assertions.assertEquals("fatf", response.id());
        Assertions.assertEquals("fnlksyqpkskbidmz", response.properties().version());
        Assertions.assertEquals("pbhcgesbteqfen", response.properties().connectVia().referenceName());
        Assertions.assertEquals("hxa", response.properties().description());
        Assertions.assertEquals(ParameterType.ARRAY, response.properties().parameters().get("cillfq").type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
