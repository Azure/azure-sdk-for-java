// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.datafactory.DataFactoryManager;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeReference;
import com.azure.resourcemanager.datafactory.models.LinkedService;
import com.azure.resourcemanager.datafactory.models.LinkedServiceResource;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class LinkedServicesCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"type\":\"LinkedService\",\"version\":\"vkcufwse\",\"connectVia\":{\"referenceName\":\"kalekneaho\",\"parameters\":{\"gtrnjzbvbwabily\":\"dataupxibu\",\"qpkskbidmz\":\"datamfaxepuvwahfnlks\",\"qf\":\"datajpbhcgesbt\"}},\"description\":\"hlitcydgesflnzi\",\"parameters\":{\"rjkinofwzci\":{\"type\":\"String\",\"defaultValue\":\"datadhxamjhpqfjpef\"}},\"annotations\":[\"dataqesyifdrbkprblw\",\"databjse\",\"dataqqts\",\"dataupogtrwkuwn\"],\"wngtiyzzi\":\"datajeo\",\"nrky\":\"datauovgipqgtsgo\",\"qoiqonnvaybo\":\"datahtcrxcnuyfvrid\",\"pojbifixdgkvlze\":\"databigzlvqmy\"},\"name\":\"qopwabrzrhdezlhs\",\"type\":\"pdbol\",\"etag\":\"hyqdvxqoajfoscd\",\"id\":\"fatf\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DataFactoryManager manager = DataFactoryManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        LinkedServiceResource response
            = manager.linkedServices()
                .define("wdqojxyabv")
                .withExistingFactory("yw", "raovqbnzrrkmanr")
                .withProperties(new LinkedService().withVersion("silahsk")
                    .withConnectVia(new IntegrationRuntimeReference().withReferenceName("eazgfdy")
                        .withParameters(mapOf("uyrzidoyv", "dataiielbtgexiwcqei", "fplmpbvzbtrft", "datau", "rao",
                            "datatpvoehsf", "eyuillrrq", "dataqrxewdgzfqs")))
                    .withDescription("phiqje")
                    .withParameters(mapOf("ljcblppnq",
                        new ParameterSpecification().withType(ParameterType.SECURE_STRING).withDefaultValue("dataoqg"),
                        "bkz",
                        new ParameterSpecification().withType(ParameterType.OBJECT)
                            .withDefaultValue("datavcwjiwgakghva"),
                        "spnyutfhqighnun",
                        new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("databxau")))
                    .withAnnotations(Arrays.asList("datamzbir", "datanddaovgi"))
                    .withAdditionalProperties(mapOf("woahfaqlcq", "dataivsagrfjhcrq", "type", "LinkedService", "yclv",
                        "dataliegzjktfsci", "cvjdvxucqxjxxmsi", "dataztrln")))
                .withIfMatch("hsv")
                .create();

        Assertions.assertEquals("fatf", response.id());
        Assertions.assertEquals("vkcufwse", response.properties().version());
        Assertions.assertEquals("kalekneaho", response.properties().connectVia().referenceName());
        Assertions.assertEquals("hlitcydgesflnzi", response.properties().description());
        Assertions.assertEquals(ParameterType.STRING, response.properties().parameters().get("rjkinofwzci").type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
