// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.HBaseObjectDataset;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class HBaseObjectDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HBaseObjectDataset model = BinaryData.fromString(
            "{\"type\":\"HBaseObject\",\"typeProperties\":{\"tableName\":\"datazcxxvzjoyxjgahx\"},\"description\":\"rr\",\"structure\":\"datakt\",\"schema\":\"datatkbcer\",\"linkedServiceName\":{\"referenceName\":\"cvcp\",\"parameters\":{\"kmpwyvlhnh\":\"dataj\"}},\"parameters\":{\"lrcygotohzwto\":{\"type\":\"Int\",\"defaultValue\":\"datalebgjgylsacagi\"},\"jzelsriemvupmea\":{\"type\":\"Float\",\"defaultValue\":\"databxitrapwzhlutj\"},\"vldeehcbsaip\":{\"type\":\"Float\",\"defaultValue\":\"dataysy\"}},\"annotations\":[\"dataofkegbvbbdledffl\",\"datavsluazzxfjv\"],\"folder\":{\"name\":\"pxzee\"},\"\":{\"qdczmrjgobekx\":\"datapbscboxr\",\"rzzbs\":\"dataheowsecaf\",\"rjsbdbm\":\"datai\",\"vmrfaptndrmmn\":\"dataeesacuicnvqiqsu\"}}")
            .toObject(HBaseObjectDataset.class);
        Assertions.assertEquals("rr", model.description());
        Assertions.assertEquals("cvcp", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("lrcygotohzwto").type());
        Assertions.assertEquals("pxzee", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HBaseObjectDataset model = new HBaseObjectDataset().withDescription("rr")
            .withStructure("datakt")
            .withSchema("datatkbcer")
            .withLinkedServiceName(
                new LinkedServiceReference().withReferenceName("cvcp").withParameters(mapOf("kmpwyvlhnh", "dataj")))
            .withParameters(mapOf("lrcygotohzwto",
                new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("datalebgjgylsacagi"),
                "jzelsriemvupmea",
                new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("databxitrapwzhlutj"),
                "vldeehcbsaip", new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("dataysy")))
            .withAnnotations(Arrays.asList("dataofkegbvbbdledffl", "datavsluazzxfjv"))
            .withFolder(new DatasetFolder().withName("pxzee"))
            .withTableName("datazcxxvzjoyxjgahx");
        model = BinaryData.fromObject(model).toObject(HBaseObjectDataset.class);
        Assertions.assertEquals("rr", model.description());
        Assertions.assertEquals("cvcp", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("lrcygotohzwto").type());
        Assertions.assertEquals("pxzee", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
