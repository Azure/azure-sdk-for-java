// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.HBaseObjectDataset;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class HBaseObjectDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HBaseObjectDataset model =
            BinaryData
                .fromString(
                    "{\"type\":\"HBaseObject\",\"typeProperties\":{\"tableName\":\"dataksqimybq\"},\"description\":\"fiomhcaqpvhs\",\"structure\":\"datapeu\",\"schema\":\"datafdswbss\",\"linkedServiceName\":{\"referenceName\":\"g\",\"parameters\":{\"jbpwjwzqgipdz\":\"datamosqmf\",\"dq\":\"datamzkhxfpzcu\"}},\"parameters\":{\"ncoqxtvytzq\":{\"type\":\"Object\",\"defaultValue\":\"datavvlyibweuaugtxl\"},\"zbdbrlbo\":{\"type\":\"Object\",\"defaultValue\":\"datadjvzmxyrazzstjvc\"},\"upmwxdsokrlnrpey\":{\"type\":\"Float\",\"defaultValue\":\"datayolacbibtkeie\"},\"wvunknsgvx\":{\"type\":\"String\",\"defaultValue\":\"dataiulddgiqlnhcxw\"}},\"annotations\":[\"datameatrtcqyfjvifb\",\"dataojtehqyo\",\"datatrcoufk\",\"datambhukdfpknvk\"],\"folder\":{\"name\":\"zje\"},\"\":{\"hzjlrknckkfxm\":\"datameo\"}}")
                .toObject(HBaseObjectDataset.class);
        Assertions.assertEquals("fiomhcaqpvhs", model.description());
        Assertions.assertEquals("g", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.OBJECT, model.parameters().get("ncoqxtvytzq").type());
        Assertions.assertEquals("zje", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HBaseObjectDataset model =
            new HBaseObjectDataset()
                .withDescription("fiomhcaqpvhs")
                .withStructure("datapeu")
                .withSchema("datafdswbss")
                .withLinkedServiceName(
                    new LinkedServiceReference()
                        .withReferenceName("g")
                        .withParameters(mapOf("jbpwjwzqgipdz", "datamosqmf", "dq", "datamzkhxfpzcu")))
                .withParameters(
                    mapOf(
                        "ncoqxtvytzq",
                        new ParameterSpecification()
                            .withType(ParameterType.OBJECT)
                            .withDefaultValue("datavvlyibweuaugtxl"),
                        "zbdbrlbo",
                        new ParameterSpecification()
                            .withType(ParameterType.OBJECT)
                            .withDefaultValue("datadjvzmxyrazzstjvc"),
                        "upmwxdsokrlnrpey",
                        new ParameterSpecification()
                            .withType(ParameterType.FLOAT)
                            .withDefaultValue("datayolacbibtkeie"),
                        "wvunknsgvx",
                        new ParameterSpecification()
                            .withType(ParameterType.STRING)
                            .withDefaultValue("dataiulddgiqlnhcxw")))
                .withAnnotations(
                    Arrays.asList("datameatrtcqyfjvifb", "dataojtehqyo", "datatrcoufk", "datambhukdfpknvk"))
                .withFolder(new DatasetFolder().withName("zje"))
                .withTableName("dataksqimybq");
        model = BinaryData.fromObject(model).toObject(HBaseObjectDataset.class);
        Assertions.assertEquals("fiomhcaqpvhs", model.description());
        Assertions.assertEquals("g", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.OBJECT, model.parameters().get("ncoqxtvytzq").type());
        Assertions.assertEquals("zje", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
