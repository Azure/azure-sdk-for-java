// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.datafactory.DataFactoryManager;
import com.azure.resourcemanager.datafactory.models.LinkedServiceResource;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class LinkedServicesListByFactoryMockTests {
    @Test
    public void testListByFactory() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"type\":\"LinkedService\",\"connectVia\":{\"referenceName\":\"sdwcx\",\"parameters\":{\"perbnbsd\":\"dataidyansnunvgqtvg\",\"jgtqqrmi\":\"datavrdsv\",\"irvzbmhmkoxsavzn\":\"datamnmxspz\",\"mebwcuf\":\"datapaw\"}},\"description\":\"qqtpwhicnnan\",\"parameters\":{\"puzxinw\":{\"type\":\"SecureString\",\"defaultValue\":\"databdptmzsdwxls\"},\"rhzd\":{\"type\":\"Object\",\"defaultValue\":\"dataz\"},\"qbwkx\":{\"type\":\"SecureString\",\"defaultValue\":\"dataauhl\"},\"goijhc\":{\"type\":\"Object\",\"defaultValue\":\"dataroewwrhvdwrowec\"}},\"annotations\":[\"dataprviivczupcl\",\"dataitvym\"],\"\":{\"mudyuoholy\":\"datatsnnsxouz\"}},\"name\":\"wszxl\",\"type\":\"rrczhnvtihjt\",\"etag\":\"lnh\",\"id\":\"tuktmrorepbqkmyl\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DataFactoryManager manager = DataFactoryManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<LinkedServiceResource> response
            = manager.linkedServices().listByFactory("sitypashvjr", "niztgaduslnrqy", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("tuktmrorepbqkmyl", response.iterator().next().id());
        Assertions.assertEquals("sdwcx", response.iterator().next().properties().connectVia().referenceName());
        Assertions.assertEquals("qqtpwhicnnan", response.iterator().next().properties().description());
        Assertions.assertEquals(ParameterType.SECURE_STRING,
            response.iterator().next().properties().parameters().get("puzxinw").type());
    }
}
