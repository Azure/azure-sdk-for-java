// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.datafactory.DataFactoryManager;
import com.azure.resourcemanager.datafactory.models.LinkedServiceResource;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class LinkedServicesListByFactoryMockTests {
    @Test
    public void testListByFactory() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"type\":\"LinkedService\",\"version\":\"ubsidwgya\",\"connectVia\":{\"referenceName\":\"pefs\",\"parameters\":{\"fhsckecume\":\"datadcmjfieydtnpqtwo\",\"koaxstqqjqliyxze\":\"datagoaxtwtkkmuir\",\"oiaotaaxluovzm\":\"dataiiudnmojjmimy\",\"ltblm\":\"datajirp\"}},\"description\":\"bafcmsotudnkr\",\"parameters\":{\"eel\":{\"type\":\"Int\",\"defaultValue\":\"dataqeiguxix\"}},\"annotations\":[\"datavinumd\"],\"\":{\"rn\":\"datayvz\",\"obagaigtpjjz\":\"datakany\",\"wd\":\"dataqolmoifxli\"}},\"name\":\"qxqjvjubjqjxobm\",\"type\":\"jtzatr\",\"etag\":\"rneugbupkjyosq\",\"id\":\"xedkkdk\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DataFactoryManager manager = DataFactoryManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<LinkedServiceResource> response
            = manager.linkedServices().listByFactory("grcjoycqndgbxtz", "teszohntch", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("xedkkdk", response.iterator().next().id());
        Assertions.assertEquals("ubsidwgya", response.iterator().next().properties().version());
        Assertions.assertEquals("pefs", response.iterator().next().properties().connectVia().referenceName());
        Assertions.assertEquals("bafcmsotudnkr", response.iterator().next().properties().description());
        Assertions.assertEquals(ParameterType.INT,
            response.iterator().next().properties().parameters().get("eel").type());
    }
}
