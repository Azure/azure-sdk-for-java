// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetCompression;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.DatasetStorageFormat;
import com.azure.resourcemanager.datafactory.models.FileShareDataset;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class FileShareDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        FileShareDataset model = BinaryData.fromString(
            "{\"type\":\"gsulwvgseufigvfj\",\"typeProperties\":{\"folderPath\":\"datancpr\",\"fileName\":\"datasjvjnkoiznz\",\"modifiedDatetimeStart\":\"databiba\",\"modifiedDatetimeEnd\":\"datagicovjt\",\"format\":{\"type\":\"rmjxyvuodnxc\",\"serializer\":\"dataassqfy\",\"deserializer\":\"datawppeygk\",\"\":{\"ttuvsq\":\"dataloasybxhqvovdpm\",\"qgxqbfkc\":\"datasrvjnqt\"}},\"fileFilter\":\"datancnr\",\"compression\":{\"type\":\"dataj\",\"level\":\"dataywevsfgdrmnszdo\",\"\":{\"ghndae\":\"datasqsvzvmxtc\"}}},\"description\":\"zkilmciwuh\",\"structure\":\"dataekypyovljl\",\"schema\":\"datadlbybpa\",\"linkedServiceName\":{\"referenceName\":\"hpzysovsnw\",\"parameters\":{\"ag\":\"datanzgesfhs\",\"zpbyfyvynpmggq\":\"dataahn\"}},\"parameters\":{\"bloejzsaxzgkq\":{\"type\":\"Float\",\"defaultValue\":\"datavqbugihcdvfoizo\"}},\"annotations\":[\"dataeppjnaphifkfrp\",\"datap\",\"dataubpebrm\"],\"folder\":{\"name\":\"fpghtbttpkim\"},\"\":{\"mhrcmelycpgoku\":\"datankkhbykr\",\"bnvmshfuzzlapy\":\"datahrvybn\",\"uptessjlwjta\":\"dataxlvzcgulaebxiauq\"}}")
            .toObject(FileShareDataset.class);
        Assertions.assertEquals("zkilmciwuh", model.description());
        Assertions.assertEquals("hpzysovsnw", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.FLOAT, model.parameters().get("bloejzsaxzgkq").type());
        Assertions.assertEquals("fpghtbttpkim", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        FileShareDataset model = new FileShareDataset().withDescription("zkilmciwuh")
            .withStructure("dataekypyovljl")
            .withSchema("datadlbybpa")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("hpzysovsnw")
                .withParameters(mapOf("ag", "datanzgesfhs", "zpbyfyvynpmggq", "dataahn")))
            .withParameters(mapOf("bloejzsaxzgkq",
                new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("datavqbugihcdvfoizo")))
            .withAnnotations(Arrays.asList("dataeppjnaphifkfrp", "datap", "dataubpebrm"))
            .withFolder(new DatasetFolder().withName("fpghtbttpkim"))
            .withFolderPath("datancpr")
            .withFileName("datasjvjnkoiznz")
            .withModifiedDatetimeStart("databiba")
            .withModifiedDatetimeEnd("datagicovjt")
            .withFormat(new DatasetStorageFormat().withSerializer("dataassqfy")
                .withDeserializer("datawppeygk")
                .withAdditionalProperties(mapOf("type", "rmjxyvuodnxc")))
            .withFileFilter("datancnr")
            .withCompression(new DatasetCompression().withType("dataj")
                .withLevel("dataywevsfgdrmnszdo")
                .withAdditionalProperties(mapOf()));
        model = BinaryData.fromObject(model).toObject(FileShareDataset.class);
        Assertions.assertEquals("zkilmciwuh", model.description());
        Assertions.assertEquals("hpzysovsnw", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.FLOAT, model.parameters().get("bloejzsaxzgkq").type());
        Assertions.assertEquals("fpghtbttpkim", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
