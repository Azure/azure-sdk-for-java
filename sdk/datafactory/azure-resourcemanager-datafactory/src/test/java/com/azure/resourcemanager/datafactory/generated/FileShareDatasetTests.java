// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetCompression;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.DatasetStorageFormat;
import com.azure.resourcemanager.datafactory.models.FileShareDataset;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class FileShareDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        FileShareDataset model = BinaryData.fromString(
            "{\"type\":\"FileShare\",\"typeProperties\":{\"folderPath\":\"datalmcvrjaznotdofq\",\"fileName\":\"databq\",\"modifiedDatetimeStart\":\"dataqkpsbqsb\",\"modifiedDatetimeEnd\":\"dataitaftazgcxsvqlc\",\"format\":{\"type\":\"DatasetStorageFormat\",\"serializer\":\"dataylamxow\",\"deserializer\":\"datacjoyutehlkarvt\",\"\":{\"whpcekggvmfnn\":\"datauksxiknsgofun\",\"txtpwcvgifws\":\"databxngdfkkede\"}},\"fileFilter\":\"datajzijaciwmmpdt\",\"compression\":{\"type\":\"dataonbz\",\"level\":\"datanfzyviiwsuanz\",\"\":{\"kzqqhbtfloilmkf\":\"datayui\",\"ikdlpsxntugfwimq\":\"dataeoiipjpngvyvu\",\"fmvswx\":\"dataryclo\",\"wulkr\":\"datajeleifqhdxt\"}}},\"description\":\"paevykbyjecrqk\",\"structure\":\"datakkchsfoulborc\",\"schema\":\"dataibsdqbdyblpe\",\"linkedServiceName\":{\"referenceName\":\"t\",\"parameters\":{\"lerufollcshju\":\"datapgweoqhbjqlqf\",\"xvjeazrah\":\"dataihbymjjvtpne\",\"qamcthtpqgfz\":\"datalhbimyii\"}},\"parameters\":{\"vflgzhc\":{\"type\":\"Bool\",\"defaultValue\":\"datakdi\"},\"pccxziv\":{\"type\":\"Object\",\"defaultValue\":\"datawahcrxofgrutv\"},\"jd\":{\"type\":\"SecureString\",\"defaultValue\":\"datahzghhhkvn\"}},\"annotations\":[\"dataq\"],\"folder\":{\"name\":\"njvpmxn\"},\"\":{\"olrwvtlgxyfj\":\"datazstqlf\"}}")
            .toObject(FileShareDataset.class);
        Assertions.assertEquals("paevykbyjecrqk", model.description());
        Assertions.assertEquals("t", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("vflgzhc").type());
        Assertions.assertEquals("njvpmxn", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        FileShareDataset model = new FileShareDataset().withDescription("paevykbyjecrqk")
            .withStructure("datakkchsfoulborc")
            .withSchema("dataibsdqbdyblpe")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("t")
                .withParameters(mapOf("lerufollcshju", "datapgweoqhbjqlqf", "xvjeazrah", "dataihbymjjvtpne",
                    "qamcthtpqgfz", "datalhbimyii")))
            .withParameters(mapOf("vflgzhc",
                new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("datakdi"), "pccxziv",
                new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("datawahcrxofgrutv"), "jd",
                new ParameterSpecification().withType(ParameterType.SECURE_STRING).withDefaultValue("datahzghhhkvn")))
            .withAnnotations(Arrays.asList("dataq"))
            .withFolder(new DatasetFolder().withName("njvpmxn"))
            .withFolderPath("datalmcvrjaznotdofq")
            .withFileName("databq")
            .withModifiedDatetimeStart("dataqkpsbqsb")
            .withModifiedDatetimeEnd("dataitaftazgcxsvqlc")
            .withFormat(new DatasetStorageFormat().withSerializer("dataylamxow")
                .withDeserializer("datacjoyutehlkarvt")
                .withAdditionalProperties(mapOf("type", "DatasetStorageFormat")))
            .withFileFilter("datajzijaciwmmpdt")
            .withCompression(new DatasetCompression().withType("dataonbz")
                .withLevel("datanfzyviiwsuanz")
                .withAdditionalProperties(mapOf()));
        model = BinaryData.fromObject(model).toObject(FileShareDataset.class);
        Assertions.assertEquals("paevykbyjecrqk", model.description());
        Assertions.assertEquals("t", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("vflgzhc").type());
        Assertions.assertEquals("njvpmxn", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
