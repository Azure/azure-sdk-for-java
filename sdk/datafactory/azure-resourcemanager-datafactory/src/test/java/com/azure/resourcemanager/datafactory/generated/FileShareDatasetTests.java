// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetCompression;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.DatasetStorageFormat;
import com.azure.resourcemanager.datafactory.models.FileShareDataset;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class FileShareDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        FileShareDataset model = BinaryData.fromString(
            "{\"type\":\"FileShare\",\"typeProperties\":{\"folderPath\":\"dataeyobqaj\",\"fileName\":\"datairv\",\"modifiedDatetimeStart\":\"datarvkgpogplbjuvl\",\"modifiedDatetimeEnd\":\"dataxnrnjh\",\"format\":{\"type\":\"DatasetStorageFormat\",\"serializer\":\"dataegesbxne\",\"deserializer\":\"datamjmoplu\",\"\":{\"mwqpdkesjqbzkqm\":\"datakkfhsovadkrmj\",\"tspzjnrr\":\"datavporiwbwggi\",\"htrgz\":\"dataikwsbzrhdugq\",\"jfhrjhiycbause\":\"dataru\"}},\"fileFilter\":\"dataczkvihvtuw\",\"compression\":{\"type\":\"datasqwzszoszjgzu\",\"level\":\"datafnyskwwu\",\"\":{\"slhip\":\"dataczavoj\",\"vchyluqalpcufj\":\"dataukvbljpxpr\",\"tiztqds\":\"dataf\"}}},\"description\":\"h\",\"structure\":\"datasaaxxsrit\",\"schema\":\"datawbaaes\",\"linkedServiceName\":{\"referenceName\":\"yefmxwoqotii\",\"parameters\":{\"sty\":\"datapasrvrmt\",\"k\":\"datakjhorlxkpy\",\"b\":\"datannycntrqxxwtd\",\"oxtdyqavfx\":\"datajtsuhqh\"}},\"parameters\":{\"bgh\":{\"type\":\"SecureString\",\"defaultValue\":\"datasyaksinpaamih\"},\"iys\":{\"type\":\"Array\",\"defaultValue\":\"datagpbgchcgsfzhbj\"},\"sgw\":{\"type\":\"SecureString\",\"defaultValue\":\"datasdjpgxe\"},\"f\":{\"type\":\"Int\",\"defaultValue\":\"dataferznzcbivoveomk\"}},\"annotations\":[\"dataooplfpohim\",\"datackycjpeebzn\"],\"folder\":{\"name\":\"xsuloutnpb\"},\"\":{\"cdmwk\":\"dataoqohgp\",\"sl\":\"dataupf\"}}")
            .toObject(FileShareDataset.class);
        Assertions.assertEquals("h", model.description());
        Assertions.assertEquals("yefmxwoqotii", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.SECURE_STRING, model.parameters().get("bgh").type());
        Assertions.assertEquals("xsuloutnpb", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        FileShareDataset model = new FileShareDataset().withDescription("h")
            .withStructure("datasaaxxsrit")
            .withSchema("datawbaaes")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("yefmxwoqotii")
                .withParameters(mapOf("sty", "datapasrvrmt", "k", "datakjhorlxkpy", "b", "datannycntrqxxwtd",
                    "oxtdyqavfx", "datajtsuhqh")))
            .withParameters(mapOf("bgh",
                new ParameterSpecification().withType(ParameterType.SECURE_STRING)
                    .withDefaultValue("datasyaksinpaamih"),
                "iys",
                new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("datagpbgchcgsfzhbj"),
                "sgw",
                new ParameterSpecification().withType(ParameterType.SECURE_STRING).withDefaultValue("datasdjpgxe"), "f",
                new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("dataferznzcbivoveomk")))
            .withAnnotations(Arrays.asList("dataooplfpohim", "datackycjpeebzn"))
            .withFolder(new DatasetFolder().withName("xsuloutnpb"))
            .withFolderPath("dataeyobqaj")
            .withFileName("datairv")
            .withModifiedDatetimeStart("datarvkgpogplbjuvl")
            .withModifiedDatetimeEnd("dataxnrnjh")
            .withFormat(new DatasetStorageFormat().withSerializer("dataegesbxne")
                .withDeserializer("datamjmoplu")
                .withAdditionalProperties(mapOf("type", "DatasetStorageFormat")))
            .withFileFilter("dataczkvihvtuw")
            .withCompression(new DatasetCompression().withType("datasqwzszoszjgzu")
                .withLevel("datafnyskwwu")
                .withAdditionalProperties(mapOf()));
        model = BinaryData.fromObject(model).toObject(FileShareDataset.class);
        Assertions.assertEquals("h", model.description());
        Assertions.assertEquals("yefmxwoqotii", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.SECURE_STRING, model.parameters().get("bgh").type());
        Assertions.assertEquals("xsuloutnpb", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
