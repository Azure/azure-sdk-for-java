// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.SwitchActivityTypeProperties;
import com.azure.resourcemanager.datafactory.models.Activity;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.Expression;
import com.azure.resourcemanager.datafactory.models.SwitchCase;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SwitchActivityTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SwitchActivityTypeProperties model = BinaryData.fromString(
            "{\"on\":{\"value\":\"neherqbelmsx\"},\"cases\":[{\"value\":\"zcdnipjtduvsvg\",\"activities\":[{\"type\":\"Activity\",\"name\":\"dtomknzotmiizk\",\"description\":\"ooaskflrqwfmbkk\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"outhb\",\"dependencyConditions\":[]},{\"activity\":\"vcbwudiyfi\",\"dependencyConditions\":[]},{\"activity\":\"pw\",\"dependencyConditions\":[]}],\"userProperties\":[{\"name\":\"ivqzqcmrxhal\",\"value\":\"datazgzf\"},{\"name\":\"ijcetcystrs\",\"value\":\"datayttxspaafs\"}],\"\":{\"tqnxhulgtqve\":\"datayoerlr\",\"kjzbxmgsxbk\":\"datamwbmqpbfjbsoljqk\"}},{\"type\":\"Activity\",\"name\":\"kambdoq\",\"description\":\"o\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"rbjhyld\",\"dependencyConditions\":[]},{\"activity\":\"nwcejcz\",\"dependencyConditions\":[]},{\"activity\":\"kfxdaqwnkjyfyy\",\"dependencyConditions\":[]}],\"userProperties\":[{\"name\":\"iugca\",\"value\":\"datashgryof\"},{\"name\":\"uvu\",\"value\":\"datakrkibno\"},{\"name\":\"uocmxtyjaxk\",\"value\":\"datayovwtpm\"}],\"\":{\"mzsvdrryzxhtvyth\":\"datas\"}},{\"type\":\"Activity\",\"name\":\"ynlmfv\",\"description\":\"yzacjxczjosixter\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"m\",\"dependencyConditions\":[]},{\"activity\":\"mezlhmtrq\",\"dependencyConditions\":[]},{\"activity\":\"ncscaynhzmz\",\"dependencyConditions\":[]}],\"userProperties\":[{\"name\":\"wwpitwleluqq\",\"value\":\"datapphotbsgkliuct\"},{\"name\":\"fzhvxqotwcfbq\",\"value\":\"dataezchpjhuhyx\"},{\"name\":\"f\",\"value\":\"datarfwmxwjcsxqkm\"},{\"name\":\"nauleofdxzno\",\"value\":\"datakdoffeu\"}],\"\":{\"jf\":\"datagnugiiyc\"}}]},{\"value\":\"n\",\"activities\":[{\"type\":\"Activity\",\"name\":\"nbrfscrabrqdb\",\"description\":\"gilzrruvnlubk\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"yxntuzgceuzhp\",\"dependencyConditions\":[]},{\"activity\":\"mnpodsqil\",\"dependencyConditions\":[]},{\"activity\":\"vxpfayophpu\",\"dependencyConditions\":[]}],\"userProperties\":[{\"name\":\"aqhbqvb\",\"value\":\"datatesxufrwiivekr\"}],\"\":{\"z\":\"datajtvjrrkdlwe\"}},{\"type\":\"Activity\",\"name\":\"cdoat\",\"description\":\"kth\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"aeiavdhhcikl\",\"dependencyConditions\":[]},{\"activity\":\"nroxgwqgbvnctcbm\",\"dependencyConditions\":[]},{\"activity\":\"ecozvxdb\",\"dependencyConditions\":[]},{\"activity\":\"twkzfp\",\"dependencyConditions\":[]}],\"userProperties\":[{\"name\":\"vjui\",\"value\":\"databtku\"},{\"name\":\"iuxtyvpvegxdzo\",\"value\":\"datafkzj\"}],\"\":{\"qvlktqs\":\"dataxznlxcjkteubn\",\"rblbt\":\"datam\",\"lr\":\"datasxnaot\"}}]}],\"defaultActivities\":[{\"type\":\"Activity\",\"name\":\"ktwfjylhmmiba\",\"description\":\"cl\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"hzucpixfdbicpchb\",\"dependencyConditions\":[\"Skipped\",\"Failed\",\"Skipped\",\"Succeeded\"],\"\":{\"vhnhyxcwsnhszmu\":\"dataqbp\",\"cxdam\":\"dataarea\"}}],\"userProperties\":[{\"name\":\"mqydpieleru\",\"value\":\"datayfnpcrsfq\"},{\"name\":\"qmlisjqonvjur\",\"value\":\"dataczdelqazb\"},{\"name\":\"ixg\",\"value\":\"datarkbhwwpaec\"},{\"name\":\"uvqacae\",\"value\":\"datavn\"}],\"\":{\"rr\":\"datajmojgdbo\"}},{\"type\":\"Activity\",\"name\":\"xldkhgn\",\"description\":\"ofesjksmyee\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"ncxkazmydsqvjkfz\",\"dependencyConditions\":[\"Skipped\"],\"\":{\"tdvgdujkdac\":\"datawgcmmvvbwrilcyep\",\"y\":\"datavyeckbudepulbxgd\"}},{\"activity\":\"ywmezoi\",\"dependencyConditions\":[\"Succeeded\",\"Succeeded\"],\"\":{\"vvnbbeys\":\"dataicfkkcpkvujwfyv\",\"uq\":\"datafsiiadfjxfiv\",\"toqka\":\"dataptzxilwnvfbr\",\"huawiit\":\"datalek\"}}],\"userProperties\":[{\"name\":\"bidknehhkcutxmq\",\"value\":\"databhfbwduuvkrskq\"},{\"name\":\"okhpzvphjkffc\",\"value\":\"datavfur\"},{\"name\":\"dhopzymhrfwchim\",\"value\":\"dataeovji\"}],\"\":{\"qhlbsvyo\":\"datawdexldo\",\"qwfuavofeouucg\":\"dataiexmfeechltxa\",\"ogbmeksegd\":\"datai\",\"nmxbhgsimenjh\":\"dataqnoc\"}},{\"type\":\"Activity\",\"name\":\"wknazcwja\",\"description\":\"vnollpz\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"quiqkuxajl\",\"dependencyConditions\":[\"Succeeded\",\"Completed\",\"Skipped\"],\"\":{\"bnmaiq\":\"datarnowexfykdirc\",\"jrxoi\":\"datajoirxngmm\"}},{\"activity\":\"mnsmdsmzkjlh\",\"dependencyConditions\":[\"Failed\",\"Skipped\",\"Succeeded\"],\"\":{\"medyb\":\"databyfiochf\"}}],\"userProperties\":[{\"name\":\"zoae\",\"value\":\"datadhvszwgmpzbxqf\"}],\"\":{\"lqnrds\":\"datapwglkvspbdjushzf\",\"wewgda\":\"datarvp\",\"dlilkw\":\"datahzdhszk\"}}]}")
            .toObject(SwitchActivityTypeProperties.class);
        Assertions.assertEquals("neherqbelmsx", model.on().value());
        Assertions.assertEquals("zcdnipjtduvsvg", model.cases().get(0).value());
        Assertions.assertEquals("dtomknzotmiizk", model.cases().get(0).activities().get(0).name());
        Assertions.assertEquals("ooaskflrqwfmbkk", model.cases().get(0).activities().get(0).description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.cases().get(0).activities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED,
            model.cases().get(0).activities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("outhb", model.cases().get(0).activities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals("ivqzqcmrxhal",
            model.cases().get(0).activities().get(0).userProperties().get(0).name());
        Assertions.assertEquals("ktwfjylhmmiba", model.defaultActivities().get(0).name());
        Assertions.assertEquals("cl", model.defaultActivities().get(0).description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.defaultActivities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.defaultActivities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("hzucpixfdbicpchb", model.defaultActivities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED,
            model.defaultActivities().get(0).dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("mqydpieleru", model.defaultActivities().get(0).userProperties().get(0).name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SwitchActivityTypeProperties model
            = new SwitchActivityTypeProperties().withOn(new Expression().withValue("neherqbelmsx"))
                .withCases(Arrays.asList(
                    new SwitchCase().withValue("zcdnipjtduvsvg")
                        .withActivities(Arrays.asList(
                            new Activity().withName("dtomknzotmiizk")
                                .withDescription("ooaskflrqwfmbkk")
                                .withState(ActivityState.INACTIVE)
                                .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
                                .withDependsOn(Arrays.asList(
                                    new ActivityDependency().withActivity("outhb")
                                        .withDependencyConditions(Arrays.asList())
                                        .withAdditionalProperties(mapOf()),
                                    new ActivityDependency().withActivity("vcbwudiyfi")
                                        .withDependencyConditions(Arrays.asList())
                                        .withAdditionalProperties(mapOf()),
                                    new ActivityDependency().withActivity("pw")
                                        .withDependencyConditions(Arrays.asList())
                                        .withAdditionalProperties(mapOf())))
                                .withUserProperties(Arrays.asList(
                                    new UserProperty().withName("ivqzqcmrxhal").withValue("datazgzf"),
                                    new UserProperty().withName("ijcetcystrs").withValue("datayttxspaafs")))
                                .withAdditionalProperties(mapOf("type", "Activity")),
                            new Activity().withName("kambdoq")
                                .withDescription("o")
                                .withState(ActivityState.INACTIVE)
                                .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
                                .withDependsOn(Arrays.asList(
                                    new ActivityDependency().withActivity("rbjhyld")
                                        .withDependencyConditions(Arrays.asList())
                                        .withAdditionalProperties(mapOf()),
                                    new ActivityDependency().withActivity("nwcejcz")
                                        .withDependencyConditions(Arrays.asList())
                                        .withAdditionalProperties(mapOf()),
                                    new ActivityDependency().withActivity("kfxdaqwnkjyfyy")
                                        .withDependencyConditions(Arrays.asList())
                                        .withAdditionalProperties(mapOf())))
                                .withUserProperties(Arrays.asList(
                                    new UserProperty().withName("iugca").withValue("datashgryof"),
                                    new UserProperty().withName("uvu").withValue("datakrkibno"),
                                    new UserProperty().withName("uocmxtyjaxk").withValue("datayovwtpm")))
                                .withAdditionalProperties(mapOf("type", "Activity")),
                            new Activity().withName("ynlmfv")
                                .withDescription("yzacjxczjosixter")
                                .withState(ActivityState.INACTIVE)
                                .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
                                .withDependsOn(Arrays.asList(
                                    new ActivityDependency().withActivity("m")
                                        .withDependencyConditions(Arrays.asList())
                                        .withAdditionalProperties(mapOf()),
                                    new ActivityDependency().withActivity("mezlhmtrq")
                                        .withDependencyConditions(Arrays.asList())
                                        .withAdditionalProperties(mapOf()),
                                    new ActivityDependency().withActivity("ncscaynhzmz")
                                        .withDependencyConditions(Arrays.asList())
                                        .withAdditionalProperties(mapOf())))
                                .withUserProperties(Arrays.asList(
                                    new UserProperty().withName("wwpitwleluqq").withValue("datapphotbsgkliuct"),
                                    new UserProperty().withName("fzhvxqotwcfbq").withValue("dataezchpjhuhyx"),
                                    new UserProperty().withName("f").withValue("datarfwmxwjcsxqkm"),
                                    new UserProperty().withName("nauleofdxzno").withValue("datakdoffeu")))
                                .withAdditionalProperties(mapOf("type", "Activity")))),
                    new SwitchCase().withValue("n")
                        .withActivities(Arrays.asList(
                            new Activity().withName("nbrfscrabrqdb")
                                .withDescription("gilzrruvnlubk")
                                .withState(ActivityState.INACTIVE)
                                .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
                                .withDependsOn(Arrays.asList(
                                    new ActivityDependency().withActivity("yxntuzgceuzhp")
                                        .withDependencyConditions(Arrays.asList())
                                        .withAdditionalProperties(mapOf()),
                                    new ActivityDependency().withActivity("mnpodsqil")
                                        .withDependencyConditions(Arrays.asList())
                                        .withAdditionalProperties(mapOf()),
                                    new ActivityDependency().withActivity("vxpfayophpu")
                                        .withDependencyConditions(Arrays.asList())
                                        .withAdditionalProperties(mapOf())))
                                .withUserProperties(Arrays
                                    .asList(new UserProperty().withName("aqhbqvb").withValue("datatesxufrwiivekr")))
                                .withAdditionalProperties(mapOf("type", "Activity")),
                            new Activity().withName("cdoat")
                                .withDescription("kth")
                                .withState(ActivityState.INACTIVE)
                                .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
                                .withDependsOn(Arrays.asList(
                                    new ActivityDependency().withActivity("aeiavdhhcikl")
                                        .withDependencyConditions(Arrays.asList())
                                        .withAdditionalProperties(mapOf()),
                                    new ActivityDependency().withActivity("nroxgwqgbvnctcbm")
                                        .withDependencyConditions(Arrays.asList())
                                        .withAdditionalProperties(mapOf()),
                                    new ActivityDependency().withActivity("ecozvxdb")
                                        .withDependencyConditions(Arrays.asList())
                                        .withAdditionalProperties(mapOf()),
                                    new ActivityDependency().withActivity("twkzfp")
                                        .withDependencyConditions(Arrays.asList())
                                        .withAdditionalProperties(mapOf())))
                                .withUserProperties(
                                    Arrays.asList(new UserProperty().withName("vjui").withValue("databtku"),
                                        new UserProperty().withName("iuxtyvpvegxdzo").withValue("datafkzj")))
                                .withAdditionalProperties(mapOf("type", "Activity"))))))
                .withDefaultActivities(Arrays.asList(
                    new Activity().withName("ktwfjylhmmiba")
                        .withDescription("cl")
                        .withState(ActivityState.INACTIVE)
                        .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
                        .withDependsOn(Arrays.asList(new ActivityDependency().withActivity("hzucpixfdbicpchb")
                            .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED,
                                DependencyCondition.FAILED, DependencyCondition.SKIPPED, DependencyCondition.SUCCEEDED))
                            .withAdditionalProperties(mapOf())))
                        .withUserProperties(
                            Arrays.asList(new UserProperty().withName("mqydpieleru").withValue("datayfnpcrsfq"),
                                new UserProperty().withName("qmlisjqonvjur").withValue("dataczdelqazb"),
                                new UserProperty().withName("ixg").withValue("datarkbhwwpaec"),
                                new UserProperty().withName("uvqacae").withValue("datavn")))
                        .withAdditionalProperties(mapOf("type", "Activity")),
                    new Activity().withName("xldkhgn")
                        .withDescription("ofesjksmyee")
                        .withState(ActivityState.ACTIVE)
                        .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
                        .withDependsOn(Arrays.asList(
                            new ActivityDependency().withActivity("ncxkazmydsqvjkfz")
                                .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED))
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency().withActivity("ywmezoi")
                                .withDependencyConditions(
                                    Arrays.asList(DependencyCondition.SUCCEEDED, DependencyCondition.SUCCEEDED))
                                .withAdditionalProperties(mapOf())))
                        .withUserProperties(Arrays.asList(
                            new UserProperty().withName("bidknehhkcutxmq").withValue("databhfbwduuvkrskq"),
                            new UserProperty().withName("okhpzvphjkffc").withValue("datavfur"),
                            new UserProperty().withName("dhopzymhrfwchim").withValue("dataeovji")))
                        .withAdditionalProperties(mapOf("type", "Activity")),
                    new Activity().withName("wknazcwja")
                        .withDescription("vnollpz")
                        .withState(ActivityState.INACTIVE)
                        .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
                        .withDependsOn(Arrays.asList(
                            new ActivityDependency().withActivity("quiqkuxajl")
                                .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED,
                                    DependencyCondition.COMPLETED, DependencyCondition.SKIPPED))
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency().withActivity("mnsmdsmzkjlh")
                                .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED,
                                    DependencyCondition.SKIPPED, DependencyCondition.SUCCEEDED))
                                .withAdditionalProperties(mapOf())))
                        .withUserProperties(
                            Arrays.asList(new UserProperty().withName("zoae").withValue("datadhvszwgmpzbxqf")))
                        .withAdditionalProperties(mapOf("type", "Activity"))));
        model = BinaryData.fromObject(model).toObject(SwitchActivityTypeProperties.class);
        Assertions.assertEquals("neherqbelmsx", model.on().value());
        Assertions.assertEquals("zcdnipjtduvsvg", model.cases().get(0).value());
        Assertions.assertEquals("dtomknzotmiizk", model.cases().get(0).activities().get(0).name());
        Assertions.assertEquals("ooaskflrqwfmbkk", model.cases().get(0).activities().get(0).description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.cases().get(0).activities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED,
            model.cases().get(0).activities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("outhb", model.cases().get(0).activities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals("ivqzqcmrxhal",
            model.cases().get(0).activities().get(0).userProperties().get(0).name());
        Assertions.assertEquals("ktwfjylhmmiba", model.defaultActivities().get(0).name());
        Assertions.assertEquals("cl", model.defaultActivities().get(0).description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.defaultActivities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.defaultActivities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("hzucpixfdbicpchb", model.defaultActivities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED,
            model.defaultActivities().get(0).dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("mqydpieleru", model.defaultActivities().get(0).userProperties().get(0).name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
