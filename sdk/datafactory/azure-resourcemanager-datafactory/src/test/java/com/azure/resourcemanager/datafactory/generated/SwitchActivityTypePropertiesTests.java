// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.SwitchActivityTypeProperties;
import com.azure.resourcemanager.datafactory.models.Activity;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.Expression;
import com.azure.resourcemanager.datafactory.models.SwitchCase;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SwitchActivityTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SwitchActivityTypeProperties model = BinaryData.fromString(
            "{\"on\":{\"value\":\"ohxsmhvj\"},\"cases\":[{\"value\":\"hcpsuf\",\"activities\":[{\"type\":\"Activity\",\"name\":\"cvfxsvxkcyhkhw\",\"description\":\"vwfo\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"enrcovq\",\"dependencyConditions\":[]},{\"activity\":\"yd\",\"dependencyConditions\":[]},{\"activity\":\"yctkrga\",\"dependencyConditions\":[]}],\"userProperties\":[{\"name\":\"mrxxmgzsln\",\"value\":\"datacawrhomavvni\"}],\"\":{\"qyetfxyxsk\":\"dataoone\",\"af\":\"datavkdpnqcuprlrz\"}},{\"type\":\"Activity\",\"name\":\"kcueov\",\"description\":\"mzee\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"inifnmcc\",\"dependencyConditions\":[]}],\"userProperties\":[{\"name\":\"bytzm\",\"value\":\"dataamesdcm\"}],\"\":{\"hyrh\":\"dataatnf\",\"gyyufhcfeggy\":\"datavaap\",\"bdvazqsbrqspvltu\":\"datauj\",\"ftcinj\":\"datavujuxvllx\"}},{\"type\":\"Activity\",\"name\":\"rayoask\",\"description\":\"lqweo\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"bzawdwtzxqbqzpl\",\"dependencyConditions\":[]},{\"activity\":\"yjk\",\"dependencyConditions\":[]},{\"activity\":\"chpwvhiaxkmditcz\",\"dependencyConditions\":[]},{\"activity\":\"scqobuj\",\"dependencyConditions\":[]}],\"userProperties\":[{\"name\":\"fhlwgka\",\"value\":\"dataxp\"},{\"name\":\"kmbdhcc\",\"value\":\"datajotccbduwswf\"},{\"name\":\"qycubmeih\",\"value\":\"datagmewdmlk\"}],\"\":{\"obui\":\"datahslbiptsfqcw\",\"unjegomegma\":\"datafda\"}}]}],\"defaultActivities\":[{\"type\":\"Activity\",\"name\":\"eablknqnqqcgi\",\"description\":\"fdeogmwlpopjlgt\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"azpoxmx\",\"dependencyConditions\":[\"Succeeded\"],\"\":{\"mmved\":\"datacskpgnagncguqfn\",\"tpbezlucxbudaj\":\"datawdez\"}}],\"userProperties\":[{\"name\":\"vvbw\",\"value\":\"dataunr\"},{\"name\":\"myvbiuvxlhf\",\"value\":\"datakllxoahfvkyhfd\"},{\"name\":\"hqzvfzxseqscoy\",\"value\":\"dataxbaw\"},{\"name\":\"isbhkeskgnj\",\"value\":\"dataavoqcyl\"}],\"\":{\"pxwzewpngcocb\":\"datadmrqra\",\"nt\":\"datahmsjobzvsug\",\"bswb\":\"datalzbwtivgdcr\"}}]}")
            .toObject(SwitchActivityTypeProperties.class);
        Assertions.assertEquals("ohxsmhvj", model.on().value());
        Assertions.assertEquals("hcpsuf", model.cases().get(0).value());
        Assertions.assertEquals("cvfxsvxkcyhkhw", model.cases().get(0).activities().get(0).name());
        Assertions.assertEquals("vwfo", model.cases().get(0).activities().get(0).description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.cases().get(0).activities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED,
            model.cases().get(0).activities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("enrcovq", model.cases().get(0).activities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals("mrxxmgzsln", model.cases().get(0).activities().get(0).userProperties().get(0).name());
        Assertions.assertEquals("eablknqnqqcgi", model.defaultActivities().get(0).name());
        Assertions.assertEquals("fdeogmwlpopjlgt", model.defaultActivities().get(0).description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.defaultActivities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED,
            model.defaultActivities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("azpoxmx", model.defaultActivities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED,
            model.defaultActivities().get(0).dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("vvbw", model.defaultActivities().get(0).userProperties().get(0).name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SwitchActivityTypeProperties model = new SwitchActivityTypeProperties()
            .withOn(new Expression().withValue("ohxsmhvj"))
            .withCases(Arrays.asList(new SwitchCase().withValue("hcpsuf")
                .withActivities(Arrays.asList(
                    new Activity().withName("cvfxsvxkcyhkhw")
                        .withDescription("vwfo")
                        .withState(ActivityState.ACTIVE)
                        .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
                        .withDependsOn(Arrays.asList(
                            new ActivityDependency().withActivity("enrcovq")
                                .withDependencyConditions(Arrays.asList())
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency().withActivity("yd")
                                .withDependencyConditions(Arrays.asList())
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency().withActivity("yctkrga")
                                .withDependencyConditions(Arrays.asList())
                                .withAdditionalProperties(mapOf())))
                        .withUserProperties(
                            Arrays.asList(new UserProperty().withName("mrxxmgzsln").withValue("datacawrhomavvni")))
                        .withAdditionalProperties(mapOf("type", "Activity")),
                    new Activity().withName("kcueov")
                        .withDescription("mzee")
                        .withState(ActivityState.INACTIVE)
                        .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
                        .withDependsOn(Arrays.asList(new ActivityDependency().withActivity("inifnmcc")
                            .withDependencyConditions(Arrays.asList())
                            .withAdditionalProperties(mapOf())))
                        .withUserProperties(
                            Arrays.asList(new UserProperty().withName("bytzm").withValue("dataamesdcm")))
                        .withAdditionalProperties(mapOf("type", "Activity")),
                    new Activity().withName("rayoask")
                        .withDescription("lqweo")
                        .withState(ActivityState.INACTIVE)
                        .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SUCCEEDED)
                        .withDependsOn(Arrays.asList(
                            new ActivityDependency().withActivity("bzawdwtzxqbqzpl")
                                .withDependencyConditions(Arrays.asList())
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency().withActivity("yjk")
                                .withDependencyConditions(Arrays.asList())
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency().withActivity("chpwvhiaxkmditcz")
                                .withDependencyConditions(Arrays.asList())
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency().withActivity("scqobuj")
                                .withDependencyConditions(Arrays.asList())
                                .withAdditionalProperties(mapOf())))
                        .withUserProperties(Arrays.asList(new UserProperty().withName("fhlwgka").withValue("dataxp"),
                            new UserProperty().withName("kmbdhcc").withValue("datajotccbduwswf"),
                            new UserProperty().withName("qycubmeih").withValue("datagmewdmlk")))
                        .withAdditionalProperties(mapOf("type", "Activity"))))))
            .withDefaultActivities(Arrays.asList(new Activity().withName("eablknqnqqcgi")
                .withDescription("fdeogmwlpopjlgt")
                .withState(ActivityState.ACTIVE)
                .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SUCCEEDED)
                .withDependsOn(Arrays.asList(new ActivityDependency().withActivity("azpoxmx")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED))
                    .withAdditionalProperties(mapOf())))
                .withUserProperties(Arrays.asList(new UserProperty().withName("vvbw").withValue("dataunr"),
                    new UserProperty().withName("myvbiuvxlhf").withValue("datakllxoahfvkyhfd"),
                    new UserProperty().withName("hqzvfzxseqscoy").withValue("dataxbaw"),
                    new UserProperty().withName("isbhkeskgnj").withValue("dataavoqcyl")))
                .withAdditionalProperties(mapOf("type", "Activity"))));
        model = BinaryData.fromObject(model).toObject(SwitchActivityTypeProperties.class);
        Assertions.assertEquals("ohxsmhvj", model.on().value());
        Assertions.assertEquals("hcpsuf", model.cases().get(0).value());
        Assertions.assertEquals("cvfxsvxkcyhkhw", model.cases().get(0).activities().get(0).name());
        Assertions.assertEquals("vwfo", model.cases().get(0).activities().get(0).description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.cases().get(0).activities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED,
            model.cases().get(0).activities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("enrcovq", model.cases().get(0).activities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals("mrxxmgzsln", model.cases().get(0).activities().get(0).userProperties().get(0).name());
        Assertions.assertEquals("eablknqnqqcgi", model.defaultActivities().get(0).name());
        Assertions.assertEquals("fdeogmwlpopjlgt", model.defaultActivities().get(0).description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.defaultActivities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED,
            model.defaultActivities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("azpoxmx", model.defaultActivities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED,
            model.defaultActivities().get(0).dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("vvbw", model.defaultActivities().get(0).userProperties().get(0).name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
