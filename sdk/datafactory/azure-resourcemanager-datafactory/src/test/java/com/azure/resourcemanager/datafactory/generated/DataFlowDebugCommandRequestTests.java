// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DataFlowDebugCommandPayload;
import com.azure.resourcemanager.datafactory.models.DataFlowDebugCommandRequest;
import com.azure.resourcemanager.datafactory.models.DataFlowDebugCommandType;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class DataFlowDebugCommandRequestTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DataFlowDebugCommandRequest model =
            BinaryData
                .fromString(
                    "{\"sessionId\":\"fcbahhp\",\"command\":\"executeExpressionQuery\",\"commandPayload\":{\"streamName\":\"o\",\"rowLimits\":2134608057,\"columns\":[\"filkmkkholv\"],\"expression\":\"dviauogp\"}}")
                .toObject(DataFlowDebugCommandRequest.class);
        Assertions.assertEquals("fcbahhp", model.sessionId());
        Assertions.assertEquals(DataFlowDebugCommandType.EXECUTE_EXPRESSION_QUERY, model.command());
        Assertions.assertEquals("o", model.commandPayload().streamName());
        Assertions.assertEquals(2134608057, model.commandPayload().rowLimits());
        Assertions.assertEquals("filkmkkholv", model.commandPayload().columns().get(0));
        Assertions.assertEquals("dviauogp", model.commandPayload().expression());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DataFlowDebugCommandRequest model =
            new DataFlowDebugCommandRequest()
                .withSessionId("fcbahhp")
                .withCommand(DataFlowDebugCommandType.EXECUTE_EXPRESSION_QUERY)
                .withCommandPayload(
                    new DataFlowDebugCommandPayload()
                        .withStreamName("o")
                        .withRowLimits(2134608057)
                        .withColumns(Arrays.asList("filkmkkholv"))
                        .withExpression("dviauogp"));
        model = BinaryData.fromObject(model).toObject(DataFlowDebugCommandRequest.class);
        Assertions.assertEquals("fcbahhp", model.sessionId());
        Assertions.assertEquals(DataFlowDebugCommandType.EXECUTE_EXPRESSION_QUERY, model.command());
        Assertions.assertEquals("o", model.commandPayload().streamName());
        Assertions.assertEquals(2134608057, model.commandPayload().rowLimits());
        Assertions.assertEquals("filkmkkholv", model.commandPayload().columns().get(0));
        Assertions.assertEquals("dviauogp", model.commandPayload().expression());
    }
}
