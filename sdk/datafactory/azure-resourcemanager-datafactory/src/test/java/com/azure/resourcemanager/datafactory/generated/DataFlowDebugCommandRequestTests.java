// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DataFlowDebugCommandPayload;
import com.azure.resourcemanager.datafactory.models.DataFlowDebugCommandRequest;
import com.azure.resourcemanager.datafactory.models.DataFlowDebugCommandType;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class DataFlowDebugCommandRequestTests {
    @Test
    public void testDeserialize() {
        DataFlowDebugCommandRequest model =
            BinaryData
                .fromString(
                    "{\"sessionId\":\"v\",\"command\":\"executeStatisticsQuery\",\"commandPayload\":{\"streamName\":\"llqwjygvjayvblmh\",\"rowLimits\":1458242132,\"columns\":[\"bxvvyhg\",\"opbyrqufegxu\",\"wz\",\"bnhlmc\"],\"expression\":\"p\"}}")
                .toObject(DataFlowDebugCommandRequest.class);
        Assertions.assertEquals("v", model.sessionId());
        Assertions.assertEquals(DataFlowDebugCommandType.EXECUTE_STATISTICS_QUERY, model.command());
        Assertions.assertEquals("llqwjygvjayvblmh", model.commandPayload().streamName());
        Assertions.assertEquals(1458242132, model.commandPayload().rowLimits());
        Assertions.assertEquals("bxvvyhg", model.commandPayload().columns().get(0));
        Assertions.assertEquals("p", model.commandPayload().expression());
    }

    @Test
    public void testSerialize() {
        DataFlowDebugCommandRequest model =
            new DataFlowDebugCommandRequest()
                .withSessionId("v")
                .withCommand(DataFlowDebugCommandType.EXECUTE_STATISTICS_QUERY)
                .withCommandPayload(
                    new DataFlowDebugCommandPayload()
                        .withStreamName("llqwjygvjayvblmh")
                        .withRowLimits(1458242132)
                        .withColumns(Arrays.asList("bxvvyhg", "opbyrqufegxu", "wz", "bnhlmc"))
                        .withExpression("p"));
        model = BinaryData.fromObject(model).toObject(DataFlowDebugCommandRequest.class);
        Assertions.assertEquals("v", model.sessionId());
        Assertions.assertEquals(DataFlowDebugCommandType.EXECUTE_STATISTICS_QUERY, model.command());
        Assertions.assertEquals("llqwjygvjayvblmh", model.commandPayload().streamName());
        Assertions.assertEquals(1458242132, model.commandPayload().rowLimits());
        Assertions.assertEquals("bxvvyhg", model.commandPayload().columns().get(0));
        Assertions.assertEquals("p", model.commandPayload().expression());
    }
}
