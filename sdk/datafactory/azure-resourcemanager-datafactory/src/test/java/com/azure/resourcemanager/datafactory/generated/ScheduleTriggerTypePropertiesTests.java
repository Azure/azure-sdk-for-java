// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.ScheduleTriggerTypeProperties;
import com.azure.resourcemanager.datafactory.models.DayOfWeek;
import com.azure.resourcemanager.datafactory.models.DaysOfWeek;
import com.azure.resourcemanager.datafactory.models.RecurrenceFrequency;
import com.azure.resourcemanager.datafactory.models.RecurrenceSchedule;
import com.azure.resourcemanager.datafactory.models.RecurrenceScheduleOccurrence;
import com.azure.resourcemanager.datafactory.models.ScheduleTriggerRecurrence;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ScheduleTriggerTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScheduleTriggerTypeProperties model = BinaryData.fromString(
            "{\"recurrence\":{\"frequency\":\"NotSpecified\",\"interval\":772728705,\"startTime\":\"2021-05-24T22:03:25Z\",\"endTime\":\"2020-12-30T08:39:54Z\",\"timeZone\":\"admihgbtnle\",\"schedule\":{\"minutes\":[2062956689,1290519894,198397061,1571649348],\"hours\":[1416322378,1266191776,2003495644],\"weekDays\":[\"Friday\",\"Wednesday\",\"Thursday\"],\"monthDays\":[1521800441],\"monthlyOccurrences\":[{\"day\":\"Tuesday\",\"occurrence\":71551699,\"\":{\"dlgignja\":\"datayjx\",\"r\":\"dataccixwtwzgbuhcrw\"}}],\"\":{\"mfufs\":\"dataznz\",\"uwxehozazb\":\"datavsjiojvetlcqaa\",\"imyccdog\":\"datacbdkqrywv\",\"kakdjnszj\":\"datahwhvgo\"}},\"\":{\"tuzhcpxtdvy\":\"datawb\",\"fe\":\"dataxv\",\"lvea\":\"datalyoiyovcrmo\",\"ezrajpedowmh\":\"datauz\"}}}")
            .toObject(ScheduleTriggerTypeProperties.class);
        Assertions.assertEquals(RecurrenceFrequency.NOT_SPECIFIED, model.recurrence().frequency());
        Assertions.assertEquals(772728705, model.recurrence().interval());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-24T22:03:25Z"), model.recurrence().startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-30T08:39:54Z"), model.recurrence().endTime());
        Assertions.assertEquals("admihgbtnle", model.recurrence().timeZone());
        Assertions.assertEquals(2062956689, model.recurrence().schedule().minutes().get(0));
        Assertions.assertEquals(1416322378, model.recurrence().schedule().hours().get(0));
        Assertions.assertEquals(DaysOfWeek.FRIDAY, model.recurrence().schedule().weekDays().get(0));
        Assertions.assertEquals(1521800441, model.recurrence().schedule().monthDays().get(0));
        Assertions.assertEquals(DayOfWeek.TUESDAY, model.recurrence().schedule().monthlyOccurrences().get(0).day());
        Assertions.assertEquals(71551699, model.recurrence().schedule().monthlyOccurrences().get(0).occurrence());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScheduleTriggerTypeProperties model = new ScheduleTriggerTypeProperties()
            .withRecurrence(new ScheduleTriggerRecurrence().withFrequency(RecurrenceFrequency.NOT_SPECIFIED)
                .withInterval(772728705)
                .withStartTime(OffsetDateTime.parse("2021-05-24T22:03:25Z"))
                .withEndTime(OffsetDateTime.parse("2020-12-30T08:39:54Z"))
                .withTimeZone("admihgbtnle")
                .withSchedule(new RecurrenceSchedule()
                    .withMinutes(Arrays.asList(2062956689, 1290519894, 198397061, 1571649348))
                    .withHours(Arrays.asList(1416322378, 1266191776, 2003495644))
                    .withWeekDays(Arrays.asList(DaysOfWeek.FRIDAY, DaysOfWeek.WEDNESDAY, DaysOfWeek.THURSDAY))
                    .withMonthDays(Arrays.asList(1521800441))
                    .withMonthlyOccurrences(Arrays.asList(new RecurrenceScheduleOccurrence().withDay(DayOfWeek.TUESDAY)
                        .withOccurrence(71551699)
                        .withAdditionalProperties(mapOf())))
                    .withAdditionalProperties(mapOf()))
                .withAdditionalProperties(mapOf()));
        model = BinaryData.fromObject(model).toObject(ScheduleTriggerTypeProperties.class);
        Assertions.assertEquals(RecurrenceFrequency.NOT_SPECIFIED, model.recurrence().frequency());
        Assertions.assertEquals(772728705, model.recurrence().interval());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-24T22:03:25Z"), model.recurrence().startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-30T08:39:54Z"), model.recurrence().endTime());
        Assertions.assertEquals("admihgbtnle", model.recurrence().timeZone());
        Assertions.assertEquals(2062956689, model.recurrence().schedule().minutes().get(0));
        Assertions.assertEquals(1416322378, model.recurrence().schedule().hours().get(0));
        Assertions.assertEquals(DaysOfWeek.FRIDAY, model.recurrence().schedule().weekDays().get(0));
        Assertions.assertEquals(1521800441, model.recurrence().schedule().monthDays().get(0));
        Assertions.assertEquals(DayOfWeek.TUESDAY, model.recurrence().schedule().monthlyOccurrences().get(0).day());
        Assertions.assertEquals(71551699, model.recurrence().schedule().monthlyOccurrences().get(0).occurrence());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
