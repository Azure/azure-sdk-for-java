// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.ScheduleTriggerTypeProperties;
import com.azure.resourcemanager.datafactory.models.DayOfWeek;
import com.azure.resourcemanager.datafactory.models.DaysOfWeek;
import com.azure.resourcemanager.datafactory.models.RecurrenceFrequency;
import com.azure.resourcemanager.datafactory.models.RecurrenceSchedule;
import com.azure.resourcemanager.datafactory.models.RecurrenceScheduleOccurrence;
import com.azure.resourcemanager.datafactory.models.ScheduleTriggerRecurrence;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ScheduleTriggerTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScheduleTriggerTypeProperties model = BinaryData.fromString(
            "{\"recurrence\":{\"frequency\":\"Month\",\"interval\":344035972,\"startTime\":\"2021-10-09T02:30:24Z\",\"endTime\":\"2021-01-05T14:10:51Z\",\"timeZone\":\"ekmwzsmyak\",\"schedule\":{\"minutes\":[1052879269,348269140],\"hours\":[1766816008,2054418512,2101542608,699538918],\"weekDays\":[\"Monday\",\"Saturday\"],\"monthDays\":[1038176636,390845598,1063219120,1945461682],\"monthlyOccurrences\":[{\"day\":\"Sunday\",\"occurrence\":1187472245,\"\":{\"uwttrvgzjfptprfq\":\"dataoghkhzwfns\"}},{\"day\":\"Friday\",\"occurrence\":2051440417,\"\":{\"qtkxiyj\":\"datadzvtfkd\",\"dhpi\":\"databezvxe\",\"gwbkfcajtxzduqth\":\"datakrqkylmfydiod\"}},{\"day\":\"Thursday\",\"occurrence\":1550901884,\"\":{\"fvjfaqah\":\"dataaexewftqo\",\"bdajc\":\"dataeskdsbp\",\"jryppvdhklcczg\":\"datarlnxjucoj\"}}],\"\":{\"rbuvwug\":\"datagzstcfwbfta\",\"umejpqxuiodwblau\":\"datawrclxhvesoodxmmt\"}},\"\":{\"mtzlcvokvo\":\"dataxydvceuywy\",\"znnlsqymvihhgp\":\"datajbjdyoccnlvyhiet\"}}}")
            .toObject(ScheduleTriggerTypeProperties.class);
        Assertions.assertEquals(RecurrenceFrequency.MONTH, model.recurrence().frequency());
        Assertions.assertEquals(344035972, model.recurrence().interval());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-09T02:30:24Z"), model.recurrence().startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-05T14:10:51Z"), model.recurrence().endTime());
        Assertions.assertEquals("ekmwzsmyak", model.recurrence().timeZone());
        Assertions.assertEquals(1052879269, model.recurrence().schedule().minutes().get(0));
        Assertions.assertEquals(1766816008, model.recurrence().schedule().hours().get(0));
        Assertions.assertEquals(DaysOfWeek.MONDAY, model.recurrence().schedule().weekDays().get(0));
        Assertions.assertEquals(1038176636, model.recurrence().schedule().monthDays().get(0));
        Assertions.assertEquals(DayOfWeek.SUNDAY, model.recurrence().schedule().monthlyOccurrences().get(0).day());
        Assertions.assertEquals(1187472245, model.recurrence().schedule().monthlyOccurrences().get(0).occurrence());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScheduleTriggerTypeProperties model = new ScheduleTriggerTypeProperties()
            .withRecurrence(new ScheduleTriggerRecurrence().withFrequency(RecurrenceFrequency.MONTH)
                .withInterval(344035972)
                .withStartTime(OffsetDateTime.parse("2021-10-09T02:30:24Z"))
                .withEndTime(OffsetDateTime.parse("2021-01-05T14:10:51Z"))
                .withTimeZone("ekmwzsmyak")
                .withSchedule(new RecurrenceSchedule().withMinutes(Arrays.asList(1052879269, 348269140))
                    .withHours(Arrays.asList(1766816008, 2054418512, 2101542608, 699538918))
                    .withWeekDays(Arrays.asList(DaysOfWeek.MONDAY, DaysOfWeek.SATURDAY))
                    .withMonthDays(Arrays.asList(1038176636, 390845598, 1063219120, 1945461682))
                    .withMonthlyOccurrences(Arrays.asList(
                        new RecurrenceScheduleOccurrence().withDay(DayOfWeek.SUNDAY)
                            .withOccurrence(1187472245)
                            .withAdditionalProperties(mapOf()),
                        new RecurrenceScheduleOccurrence().withDay(DayOfWeek.FRIDAY)
                            .withOccurrence(2051440417)
                            .withAdditionalProperties(mapOf()),
                        new RecurrenceScheduleOccurrence().withDay(DayOfWeek.THURSDAY)
                            .withOccurrence(1550901884)
                            .withAdditionalProperties(mapOf())))
                    .withAdditionalProperties(mapOf()))
                .withAdditionalProperties(mapOf()));
        model = BinaryData.fromObject(model).toObject(ScheduleTriggerTypeProperties.class);
        Assertions.assertEquals(RecurrenceFrequency.MONTH, model.recurrence().frequency());
        Assertions.assertEquals(344035972, model.recurrence().interval());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-09T02:30:24Z"), model.recurrence().startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-05T14:10:51Z"), model.recurrence().endTime());
        Assertions.assertEquals("ekmwzsmyak", model.recurrence().timeZone());
        Assertions.assertEquals(1052879269, model.recurrence().schedule().minutes().get(0));
        Assertions.assertEquals(1766816008, model.recurrence().schedule().hours().get(0));
        Assertions.assertEquals(DaysOfWeek.MONDAY, model.recurrence().schedule().weekDays().get(0));
        Assertions.assertEquals(1038176636, model.recurrence().schedule().monthDays().get(0));
        Assertions.assertEquals(DayOfWeek.SUNDAY, model.recurrence().schedule().monthlyOccurrences().get(0).day());
        Assertions.assertEquals(1187472245, model.recurrence().schedule().monthlyOccurrences().get(0).occurrence());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
