// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.ScheduleTriggerTypeProperties;
import com.azure.resourcemanager.datafactory.models.DaysOfWeek;
import com.azure.resourcemanager.datafactory.models.RecurrenceFrequency;
import com.azure.resourcemanager.datafactory.models.RecurrenceSchedule;
import com.azure.resourcemanager.datafactory.models.ScheduleTriggerRecurrence;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class ScheduleTriggerTypePropertiesTests {
    @Test
    public void testDeserialize() {
        ScheduleTriggerTypeProperties model =
            BinaryData
                .fromString(
                    "{\"recurrence\":{\"frequency\":\"Hour\",\"interval\":763957936,\"startTime\":\"2021-05-02T21:03:28Z\",\"endTime\":\"2021-07-11T00:05:59Z\",\"timeZone\":\"qhftzbpyfaofd\",\"schedule\":{\"minutes\":[1994379023,829172503,1908838756,1876037012],\"hours\":[183772622,940286573],\"weekDays\":[\"Tuesday\"],\"monthDays\":[478729922],\"monthlyOccurrences\":[],\"\":{}},\"\":{}}}")
                .toObject(ScheduleTriggerTypeProperties.class);
        Assertions.assertEquals(RecurrenceFrequency.HOUR, model.recurrence().frequency());
        Assertions.assertEquals(763957936, model.recurrence().interval());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-02T21:03:28Z"), model.recurrence().startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-11T00:05:59Z"), model.recurrence().endTime());
        Assertions.assertEquals("qhftzbpyfaofd", model.recurrence().timeZone());
        Assertions.assertEquals(1994379023, model.recurrence().schedule().minutes().get(0));
        Assertions.assertEquals(183772622, model.recurrence().schedule().hours().get(0));
        Assertions.assertEquals(DaysOfWeek.TUESDAY, model.recurrence().schedule().weekDays().get(0));
        Assertions.assertEquals(478729922, model.recurrence().schedule().monthDays().get(0));
    }

    @Test
    public void testSerialize() {
        ScheduleTriggerTypeProperties model =
            new ScheduleTriggerTypeProperties()
                .withRecurrence(
                    new ScheduleTriggerRecurrence()
                        .withFrequency(RecurrenceFrequency.HOUR)
                        .withInterval(763957936)
                        .withStartTime(OffsetDateTime.parse("2021-05-02T21:03:28Z"))
                        .withEndTime(OffsetDateTime.parse("2021-07-11T00:05:59Z"))
                        .withTimeZone("qhftzbpyfaofd")
                        .withSchedule(
                            new RecurrenceSchedule()
                                .withMinutes(Arrays.asList(1994379023, 829172503, 1908838756, 1876037012))
                                .withHours(Arrays.asList(183772622, 940286573))
                                .withWeekDays(Arrays.asList(DaysOfWeek.TUESDAY))
                                .withMonthDays(Arrays.asList(478729922))
                                .withMonthlyOccurrences(Arrays.asList())
                                .withAdditionalProperties(mapOf()))
                        .withAdditionalProperties(mapOf()));
        model = BinaryData.fromObject(model).toObject(ScheduleTriggerTypeProperties.class);
        Assertions.assertEquals(RecurrenceFrequency.HOUR, model.recurrence().frequency());
        Assertions.assertEquals(763957936, model.recurrence().interval());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-02T21:03:28Z"), model.recurrence().startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-11T00:05:59Z"), model.recurrence().endTime());
        Assertions.assertEquals("qhftzbpyfaofd", model.recurrence().timeZone());
        Assertions.assertEquals(1994379023, model.recurrence().schedule().minutes().get(0));
        Assertions.assertEquals(183772622, model.recurrence().schedule().hours().get(0));
        Assertions.assertEquals(DaysOfWeek.TUESDAY, model.recurrence().schedule().weekDays().get(0));
        Assertions.assertEquals(478729922, model.recurrence().schedule().monthDays().get(0));
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
