// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.DynamicsCrmEntityDataset;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DynamicsCrmEntityDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DynamicsCrmEntityDataset model = BinaryData.fromString(
            "{\"type\":\"uvqhxtozfgdkw\",\"typeProperties\":{\"entityName\":\"datazbvb\"},\"description\":\"urklp\",\"structure\":\"datagfuzkeutuipj\",\"schema\":\"datazjwaqdzqydewu\",\"linkedServiceName\":{\"referenceName\":\"xyll\",\"parameters\":{\"qwcz\":\"dataevt\",\"iysdhorkslhraqki\":\"datachwbekmuynfpkyvn\",\"qwmwqoguflteat\":\"datalwkffl\"}},\"parameters\":{\"nvxwtdqtcbjdbtqy\":{\"type\":\"Float\",\"defaultValue\":\"datazjxnjtqbgysibt\"},\"oawh\":{\"type\":\"Object\",\"defaultValue\":\"dataunsaujqgbbjvo\"}},\"annotations\":[\"datambcsloygsabdgd\",\"datae\",\"dataonsdunr\"],\"folder\":{\"name\":\"zuatqhgzuyxt\"},\"\":{\"sffavdhpiwrmuwk\":\"datadbqskgqjbvitptp\",\"yldqtmggcpd\":\"datajwbyfdwfbw\",\"zctwymzsk\":\"datamegaj\",\"eiphgliupqs\":\"dataqkkge\"}}")
            .toObject(DynamicsCrmEntityDataset.class);
        Assertions.assertEquals("urklp", model.description());
        Assertions.assertEquals("xyll", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.FLOAT, model.parameters().get("nvxwtdqtcbjdbtqy").type());
        Assertions.assertEquals("zuatqhgzuyxt", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DynamicsCrmEntityDataset model = new DynamicsCrmEntityDataset().withDescription("urklp")
            .withStructure("datagfuzkeutuipj")
            .withSchema("datazjwaqdzqydewu")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("xyll")
                .withParameters(mapOf("qwcz", "dataevt", "iysdhorkslhraqki", "datachwbekmuynfpkyvn", "qwmwqoguflteat",
                    "datalwkffl")))
            .withParameters(mapOf("nvxwtdqtcbjdbtqy",
                new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("datazjxnjtqbgysibt"),
                "oawh",
                new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("dataunsaujqgbbjvo")))
            .withAnnotations(Arrays.asList("datambcsloygsabdgd", "datae", "dataonsdunr"))
            .withFolder(new DatasetFolder().withName("zuatqhgzuyxt"))
            .withEntityName("datazbvb");
        model = BinaryData.fromObject(model).toObject(DynamicsCrmEntityDataset.class);
        Assertions.assertEquals("urklp", model.description());
        Assertions.assertEquals("xyll", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.FLOAT, model.parameters().get("nvxwtdqtcbjdbtqy").type());
        Assertions.assertEquals("zuatqhgzuyxt", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
