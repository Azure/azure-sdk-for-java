// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.DynamicsCrmEntityDataset;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DynamicsCrmEntityDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DynamicsCrmEntityDataset model = BinaryData.fromString(
            "{\"type\":\"DynamicsCrmEntity\",\"typeProperties\":{\"entityName\":\"datafkiikgpruccwm\"},\"description\":\"btxsytrtexeg\",\"structure\":\"datarqjywiwhvycfjn\",\"schema\":\"datandiloqkajwjuria\",\"linkedServiceName\":{\"referenceName\":\"sb\",\"parameters\":{\"knjxizbaxdy\":\"dataanhz\",\"xfexwacy\":\"datazkz\",\"kfevui\":\"datajmlxppdnd\",\"ibfkcjytq\":\"datau\"}},\"parameters\":{\"m\":{\"type\":\"Float\",\"defaultValue\":\"dataqqfopvno\"}},\"annotations\":[\"datasfhoxqlyo\"],\"folder\":{\"name\":\"fbkmvldzmxojzsv\"},\"\":{\"ergwlckihbam\":\"datagbqkvhyejthgeecb\",\"jwdizcrjixiujz\":\"dataqsokknpug\",\"exgkrsw\":\"datac\"}}")
            .toObject(DynamicsCrmEntityDataset.class);
        Assertions.assertEquals("btxsytrtexeg", model.description());
        Assertions.assertEquals("sb", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.FLOAT, model.parameters().get("m").type());
        Assertions.assertEquals("fbkmvldzmxojzsv", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DynamicsCrmEntityDataset model = new DynamicsCrmEntityDataset().withDescription("btxsytrtexeg")
            .withStructure("datarqjywiwhvycfjn")
            .withSchema("datandiloqkajwjuria")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("sb")
                .withParameters(mapOf("knjxizbaxdy", "dataanhz", "xfexwacy", "datazkz", "kfevui", "datajmlxppdnd",
                    "ibfkcjytq", "datau")))
            .withParameters(
                mapOf("m", new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("dataqqfopvno")))
            .withAnnotations(Arrays.asList("datasfhoxqlyo"))
            .withFolder(new DatasetFolder().withName("fbkmvldzmxojzsv"))
            .withEntityName("datafkiikgpruccwm");
        model = BinaryData.fromObject(model).toObject(DynamicsCrmEntityDataset.class);
        Assertions.assertEquals("btxsytrtexeg", model.description());
        Assertions.assertEquals("sb", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.FLOAT, model.parameters().get("m").type());
        Assertions.assertEquals("fbkmvldzmxojzsv", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
