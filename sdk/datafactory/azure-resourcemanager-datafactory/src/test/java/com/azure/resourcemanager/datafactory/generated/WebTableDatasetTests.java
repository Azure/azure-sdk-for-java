// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.WebTableDataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class WebTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WebTableDataset model =
            BinaryData
                .fromString(
                    "{\"type\":\"WebTable\",\"typeProperties\":{\"index\":\"datajxnavpyxqbkxdtb\",\"path\":\"dataihainzkefkzlxvc\"},\"description\":\"cgoeozlibcbnu\",\"structure\":\"datau\",\"schema\":\"dataajvvq\",\"linkedServiceName\":{\"referenceName\":\"honyonelivgtibt\",\"parameters\":{\"fytkhhkemrv\":\"dataqjcajg\",\"dyulglhelwr\":\"dataxeoj\",\"px\":\"dataklfqfx\",\"skvctvu\":\"dataogypbztgaexj\"}},\"parameters\":{\"cyxrn\":{\"type\":\"Object\",\"defaultValue\":\"datattmhlvr\"}},\"annotations\":[\"datafajnpdw\",\"datajggkwdepem\",\"dataiayfiqiidxco\",\"datajvudyhgtrttcuayi\"],\"folder\":{\"name\":\"nkmm\"},\"\":{\"qgqexowqzrtgqr\":\"dataf\",\"obothx\":\"datakkvfygkuobpwainp\",\"qgzyvextc\":\"dataewhpnyjt\",\"whdlrifioz\":\"dataslroldow\"}}")
                .toObject(WebTableDataset.class);
        Assertions.assertEquals("cgoeozlibcbnu", model.description());
        Assertions.assertEquals("honyonelivgtibt", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.OBJECT, model.parameters().get("cyxrn").type());
        Assertions.assertEquals("nkmm", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WebTableDataset model =
            new WebTableDataset()
                .withDescription("cgoeozlibcbnu")
                .withStructure("datau")
                .withSchema("dataajvvq")
                .withLinkedServiceName(
                    new LinkedServiceReference()
                        .withReferenceName("honyonelivgtibt")
                        .withParameters(
                            mapOf(
                                "fytkhhkemrv",
                                "dataqjcajg",
                                "dyulglhelwr",
                                "dataxeoj",
                                "px",
                                "dataklfqfx",
                                "skvctvu",
                                "dataogypbztgaexj")))
                .withParameters(
                    mapOf(
                        "cyxrn",
                        new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("datattmhlvr")))
                .withAnnotations(
                    Arrays.asList("datafajnpdw", "datajggkwdepem", "dataiayfiqiidxco", "datajvudyhgtrttcuayi"))
                .withFolder(new DatasetFolder().withName("nkmm"))
                .withIndex("datajxnavpyxqbkxdtb")
                .withPath("dataihainzkefkzlxvc");
        model = BinaryData.fromObject(model).toObject(WebTableDataset.class);
        Assertions.assertEquals("cgoeozlibcbnu", model.description());
        Assertions.assertEquals("honyonelivgtibt", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.OBJECT, model.parameters().get("cyxrn").type());
        Assertions.assertEquals("nkmm", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
