// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.WebTableDataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class WebTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WebTableDataset model = BinaryData.fromString(
            "{\"type\":\"WebTable\",\"typeProperties\":{\"index\":\"dataojzdvmsnao\",\"path\":\"datasxoxvim\"},\"description\":\"etqhdbitqsby\",\"structure\":\"datasgomrihumg\",\"schema\":\"datasdbvq\",\"linkedServiceName\":{\"referenceName\":\"gfygfkgxbdpb\",\"parameters\":{\"porrvkxtfctane\":\"datawbdpsesboynpy\",\"g\":\"datainqxdhnpjnezj\",\"uxvf\":\"datadumltpmrzwvwetqf\",\"lmr\":\"datauqhngqqxjbsoto\"}},\"parameters\":{\"xedhxbboceksra\":{\"type\":\"Object\",\"defaultValue\":\"datadeatwxpx\"}},\"annotations\":[\"datahlugfnlvvk\"],\"folder\":{\"name\":\"rxdqhvhauimn\"},\"\":{\"ivlqcwyzhndqkzst\":\"datakqpwqcnbn\",\"u\":\"datapzecdlceirtah\"}}")
            .toObject(WebTableDataset.class);
        Assertions.assertEquals("etqhdbitqsby", model.description());
        Assertions.assertEquals("gfygfkgxbdpb", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.OBJECT, model.parameters().get("xedhxbboceksra").type());
        Assertions.assertEquals("rxdqhvhauimn", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WebTableDataset model = new WebTableDataset().withDescription("etqhdbitqsby")
            .withStructure("datasgomrihumg")
            .withSchema("datasdbvq")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("gfygfkgxbdpb")
                .withParameters(mapOf("porrvkxtfctane", "datawbdpsesboynpy", "g", "datainqxdhnpjnezj", "uxvf",
                    "datadumltpmrzwvwetqf", "lmr", "datauqhngqqxjbsoto")))
            .withParameters(mapOf("xedhxbboceksra",
                new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("datadeatwxpx")))
            .withAnnotations(Arrays.asList("datahlugfnlvvk"))
            .withFolder(new DatasetFolder().withName("rxdqhvhauimn"))
            .withIndex("dataojzdvmsnao")
            .withPath("datasxoxvim");
        model = BinaryData.fromObject(model).toObject(WebTableDataset.class);
        Assertions.assertEquals("etqhdbitqsby", model.description());
        Assertions.assertEquals("gfygfkgxbdpb", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.OBJECT, model.parameters().get("xedhxbboceksra").type());
        Assertions.assertEquals("rxdqhvhauimn", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
