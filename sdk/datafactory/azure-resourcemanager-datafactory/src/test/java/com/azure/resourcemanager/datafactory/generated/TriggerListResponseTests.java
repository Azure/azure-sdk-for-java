// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.TriggerResourceInner;
import com.azure.resourcemanager.datafactory.models.Trigger;
import com.azure.resourcemanager.datafactory.models.TriggerListResponse;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class TriggerListResponseTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TriggerListResponse model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"type\":\"kb\",\"description\":\"rj\",\"runtimeState\":\"Started\",\"annotations\":[\"datacmisofie\"],\"\":{\"qdhcu\":\"datafoj\",\"khihihlhzds\":\"datalcplc\",\"mvec\":\"datatzbsrgnowcjhf\"}},\"name\":\"txmwoteyow\",\"type\":\"uqovekqvgqouwif\",\"etag\":\"pjwyiv\",\"id\":\"kfxcvhrfs\"},{\"properties\":{\"type\":\"uagrttikteusqc\",\"description\":\"vyklxuby\",\"runtimeState\":\"Started\",\"annotations\":[\"datamfblcqcuubg\",\"dataibrta\",\"datametttwgd\",\"datalqxihhrmooiz\"],\"\":{\"hyrpetogebjoxs\":\"dataypxiutcxap\",\"abrqnkkzj\":\"datahvnh\",\"rgaehvvibrxjj\":\"datajb\",\"lftidgfcwqmpim\":\"datatoqbeitpkxztmoob\"}},\"name\":\"xzhemjyh\",\"type\":\"uj\",\"etag\":\"t\",\"id\":\"ozzwculkba\"},{\"properties\":{\"type\":\"fajnjwltlwtjjguk\",\"description\":\"lhsnvkcdmx\",\"runtimeState\":\"Started\",\"annotations\":[\"dataimlnwiaaomylw\",\"dataazul\",\"datasethwwn\"],\"\":{\"zswpchwa\":\"datal\"}},\"name\":\"bousn\",\"type\":\"pgfewetwlyx\",\"etag\":\"cxy\",\"id\":\"hdjhlimmbcx\"},{\"properties\":{\"type\":\"bcporxvxcjzhqizx\",\"description\":\"xtgqscjavftjuh\",\"runtimeState\":\"Disabled\",\"annotations\":[\"datamtggu\"],\"\":{\"ghfcfiwrxgkneuvy\":\"datajrajcivm\"}},\"name\":\"zqodfvpgshox\",\"type\":\"gbpfgz\",\"etag\":\"tx\",\"id\":\"flbqvgaq\"}],\"nextLink\":\"gafcqu\"}")
            .toObject(TriggerListResponse.class);
        Assertions.assertEquals("kfxcvhrfs", model.value().get(0).id());
        Assertions.assertEquals("rj", model.value().get(0).properties().description());
        Assertions.assertEquals("gafcqu", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TriggerListResponse model
            = new TriggerListResponse()
                .withValue(Arrays.asList(
                    new TriggerResourceInner().withId("kfxcvhrfs")
                        .withProperties(new Trigger().withDescription("rj")
                            .withAnnotations(Arrays.asList("datacmisofie"))
                            .withAdditionalProperties(mapOf("type", "kb", "runtimeState", "Started"))),
                    new TriggerResourceInner().withId("ozzwculkba")
                        .withProperties(new Trigger().withDescription("vyklxuby")
                            .withAnnotations(
                                Arrays.asList("datamfblcqcuubg", "dataibrta", "datametttwgd", "datalqxihhrmooiz"))
                            .withAdditionalProperties(mapOf("type", "uagrttikteusqc", "runtimeState", "Started"))),
                    new TriggerResourceInner().withId("hdjhlimmbcx")
                        .withProperties(new Trigger().withDescription("lhsnvkcdmx")
                            .withAnnotations(Arrays.asList("dataimlnwiaaomylw", "dataazul", "datasethwwn"))
                            .withAdditionalProperties(mapOf("type", "fajnjwltlwtjjguk", "runtimeState", "Started"))),
                    new TriggerResourceInner().withId("flbqvgaq")
                        .withProperties(new Trigger().withDescription("xtgqscjavftjuh")
                            .withAnnotations(Arrays.asList("datamtggu"))
                            .withAdditionalProperties(mapOf("type", "bcporxvxcjzhqizx", "runtimeState", "Disabled")))))
                .withNextLink("gafcqu");
        model = BinaryData.fromObject(model).toObject(TriggerListResponse.class);
        Assertions.assertEquals("kfxcvhrfs", model.value().get(0).id());
        Assertions.assertEquals("rj", model.value().get(0).properties().description());
        Assertions.assertEquals("gafcqu", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
