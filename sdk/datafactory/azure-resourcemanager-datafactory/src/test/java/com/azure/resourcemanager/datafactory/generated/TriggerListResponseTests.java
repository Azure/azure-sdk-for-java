// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.TriggerResourceInner;
import com.azure.resourcemanager.datafactory.models.Trigger;
import com.azure.resourcemanager.datafactory.models.TriggerListResponse;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class TriggerListResponseTests {
    @Test
    public void testDeserialize() {
        TriggerListResponse model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"properties\":{\"type\":\"Trigger\",\"description\":\"z\",\"runtimeState\":\"Disabled\",\"annotations\":[],\"\":{}},\"name\":\"nayrhyrnxxmueedn\",\"type\":\"dvstkw\",\"etag\":\"tchealmf\",\"id\":\"d\"},{\"properties\":{\"type\":\"Trigger\",\"description\":\"ygdvwv\",\"runtimeState\":\"Stopped\",\"annotations\":[],\"\":{}},\"name\":\"wxrt\",\"type\":\"dxepxgyq\",\"etag\":\"vrvmnpkukghim\",\"id\":\"lxgwimfnjhf\"},{\"properties\":{\"type\":\"Trigger\",\"description\":\"wmszkk\",\"runtimeState\":\"Stopped\",\"annotations\":[],\"\":{}},\"name\":\"fkzikfj\",\"type\":\"n\",\"etag\":\"ivx\",\"id\":\"zel\"}],\"nextLink\":\"irels\"}")
                .toObject(TriggerListResponse.class);
        Assertions.assertEquals("d", model.value().get(0).id());
        Assertions.assertEquals("z", model.value().get(0).properties().description());
        Assertions.assertEquals("irels", model.nextLink());
    }

    @Test
    public void testSerialize() {
        TriggerListResponse model =
            new TriggerListResponse()
                .withValue(
                    Arrays
                        .asList(
                            new TriggerResourceInner()
                                .withId("d")
                                .withProperties(
                                    new Trigger()
                                        .withDescription("z")
                                        .withAnnotations(Arrays.asList())
                                        .withAdditionalProperties(
                                            mapOf("type", "Trigger", "runtimeState", "Disabled"))),
                            new TriggerResourceInner()
                                .withId("lxgwimfnjhf")
                                .withProperties(
                                    new Trigger()
                                        .withDescription("ygdvwv")
                                        .withAnnotations(Arrays.asList())
                                        .withAdditionalProperties(mapOf("type", "Trigger", "runtimeState", "Stopped"))),
                            new TriggerResourceInner()
                                .withId("zel")
                                .withProperties(
                                    new Trigger()
                                        .withDescription("wmszkk")
                                        .withAnnotations(Arrays.asList())
                                        .withAdditionalProperties(
                                            mapOf("type", "Trigger", "runtimeState", "Stopped")))))
                .withNextLink("irels");
        model = BinaryData.fromObject(model).toObject(TriggerListResponse.class);
        Assertions.assertEquals("d", model.value().get(0).id());
        Assertions.assertEquals("z", model.value().get(0).properties().description());
        Assertions.assertEquals("irels", model.nextLink());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
