// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.TriggerResourceInner;
import com.azure.resourcemanager.datafactory.models.Trigger;
import com.azure.resourcemanager.datafactory.models.TriggerListResponse;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class TriggerListResponseTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TriggerListResponse model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"properties\":{\"type\":\"Trigger\",\"description\":\"nifmzzsdymbrnysu\",\"runtimeState\":\"Stopped\",\"annotations\":[\"datafwgckhocxvdfffw\"],\"\":{\"spave\":\"dataroud\",\"bunzozudh\":\"datahrv\"}},\"name\":\"gkmoyxcdyuibhmfd\",\"type\":\"zydvfvf\",\"etag\":\"naeo\",\"id\":\"rvhmgor\"},{\"properties\":{\"type\":\"Trigger\",\"description\":\"ukiscvwmzhw\",\"runtimeState\":\"Disabled\",\"annotations\":[\"dataxvxilcbtg\"],\"\":{\"vodggxdbee\":\"datazeyqxtjjfzqlqhyc\",\"wiuagydwqf\":\"datamieknlraria\",\"ocqwogfnzjvus\":\"dataylyrfgiagtco\"}},\"name\":\"ld\",\"type\":\"zuxylfsbtkadpyso\",\"etag\":\"btgkbugrjqctoj\",\"id\":\"isofieypefojyqd\"}],\"nextLink\":\"u\"}")
                .toObject(TriggerListResponse.class);
        Assertions.assertEquals("rvhmgor", model.value().get(0).id());
        Assertions.assertEquals("nifmzzsdymbrnysu", model.value().get(0).properties().description());
        Assertions.assertEquals("u", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TriggerListResponse model =
            new TriggerListResponse()
                .withValue(
                    Arrays
                        .asList(
                            new TriggerResourceInner()
                                .withId("rvhmgor")
                                .withProperties(
                                    new Trigger()
                                        .withDescription("nifmzzsdymbrnysu")
                                        .withAnnotations(Arrays.asList("datafwgckhocxvdfffw"))
                                        .withAdditionalProperties(mapOf("type", "Trigger", "runtimeState", "Stopped"))),
                            new TriggerResourceInner()
                                .withId("isofieypefojyqd")
                                .withProperties(
                                    new Trigger()
                                        .withDescription("ukiscvwmzhw")
                                        .withAnnotations(Arrays.asList("dataxvxilcbtg"))
                                        .withAdditionalProperties(
                                            mapOf("type", "Trigger", "runtimeState", "Disabled")))))
                .withNextLink("u");
        model = BinaryData.fromObject(model).toObject(TriggerListResponse.class);
        Assertions.assertEquals("rvhmgor", model.value().get(0).id());
        Assertions.assertEquals("nifmzzsdymbrnysu", model.value().get(0).properties().description());
        Assertions.assertEquals("u", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
