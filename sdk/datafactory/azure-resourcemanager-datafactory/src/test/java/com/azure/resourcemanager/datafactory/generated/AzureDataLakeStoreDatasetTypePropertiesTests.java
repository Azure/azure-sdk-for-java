// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.AzureDataLakeStoreDatasetTypeProperties;
import com.azure.resourcemanager.datafactory.models.DatasetCompression;
import com.azure.resourcemanager.datafactory.models.DatasetStorageFormat;
import java.util.HashMap;
import java.util.Map;

public final class AzureDataLakeStoreDatasetTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureDataLakeStoreDatasetTypeProperties model =
            BinaryData
                .fromString(
                    "{\"folderPath\":\"dataailxqkdyqjvzvcg\",\"fileName\":\"dataspzesfkqqxuhvz\",\"format\":{\"type\":\"DatasetStorageFormat\",\"serializer\":\"datarouszxacdwukokgo\",\"deserializer\":\"dataj\",\"\":{\"h\":\"datatubcmu\",\"bcuufkrfn\":\"databtzvxxv\",\"wwp\":\"datacnihkswxmfurqmw\"}},\"compression\":{\"type\":\"dataum\",\"level\":\"dataahbqsvnkxm\",\"\":{\"edr\":\"datau\"}}}")
                .toObject(AzureDataLakeStoreDatasetTypeProperties.class);
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureDataLakeStoreDatasetTypeProperties model =
            new AzureDataLakeStoreDatasetTypeProperties()
                .withFolderPath("dataailxqkdyqjvzvcg")
                .withFileName("dataspzesfkqqxuhvz")
                .withFormat(
                    new DatasetStorageFormat()
                        .withSerializer("datarouszxacdwukokgo")
                        .withDeserializer("dataj")
                        .withAdditionalProperties(mapOf("type", "DatasetStorageFormat")))
                .withCompression(
                    new DatasetCompression()
                        .withType("dataum")
                        .withLevel("dataahbqsvnkxm")
                        .withAdditionalProperties(mapOf()));
        model = BinaryData.fromObject(model).toObject(AzureDataLakeStoreDatasetTypeProperties.class);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
