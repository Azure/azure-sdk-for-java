// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.AzureDataLakeStoreDatasetTypeProperties;
import com.azure.resourcemanager.datafactory.models.DatasetCompression;
import com.azure.resourcemanager.datafactory.models.DatasetStorageFormat;
import java.util.HashMap;
import java.util.Map;

public final class AzureDataLakeStoreDatasetTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureDataLakeStoreDatasetTypeProperties model = BinaryData.fromString(
            "{\"folderPath\":\"datavkgpogplbjuvlnhx\",\"fileName\":\"datanjhina\",\"format\":{\"type\":\"sbxnep\",\"serializer\":\"datajmoplukfy\",\"deserializer\":\"datafhsovadkrmjxmwq\",\"\":{\"wggijtspzjnrrhik\":\"dataesjqbzkqmxvporiw\"}},\"compression\":{\"type\":\"databz\",\"level\":\"datad\",\"\":{\"zfrunjfhrjhiycba\":\"datauhtr\",\"hvtuwyjsqwzsz\":\"dataseqnczkv\"}}}")
            .toObject(AzureDataLakeStoreDatasetTypeProperties.class);
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureDataLakeStoreDatasetTypeProperties model
            = new AzureDataLakeStoreDatasetTypeProperties().withFolderPath("datavkgpogplbjuvlnhx")
                .withFileName("datanjhina")
                .withFormat(new DatasetStorageFormat().withSerializer("datajmoplukfy")
                    .withDeserializer("datafhsovadkrmjxmwq")
                    .withAdditionalProperties(mapOf("type", "sbxnep")))
                .withCompression(
                    new DatasetCompression().withType("databz").withLevel("datad").withAdditionalProperties(mapOf()));
        model = BinaryData.fromObject(model).toObject(AzureDataLakeStoreDatasetTypeProperties.class);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
