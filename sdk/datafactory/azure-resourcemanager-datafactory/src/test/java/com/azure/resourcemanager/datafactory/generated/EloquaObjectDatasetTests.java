// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.EloquaObjectDataset;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class EloquaObjectDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        EloquaObjectDataset model = BinaryData.fromString(
            "{\"type\":\"ljnzpqhqqsarkyul\",\"typeProperties\":{\"tableName\":\"dataqrwwbdrwro\"},\"description\":\"mea\",\"structure\":\"datajqenhekzazvgeytl\",\"schema\":\"datas\",\"linkedServiceName\":{\"referenceName\":\"fcvedks\",\"parameters\":{\"crhnx\":\"datatolkyqfnj\",\"wunrtcsra\":\"datamfv\",\"nbunsodtevzshqy\":\"datawhyxfshmbydmv\",\"pshaezc\":\"dataeb\"}},\"parameters\":{\"ejst\":{\"type\":\"Array\",\"defaultValue\":\"datarnovqdmh\"},\"jakgk\":{\"type\":\"SecureString\",\"defaultValue\":\"dataa\"},\"hsobvcnsbioez\":{\"type\":\"String\",\"defaultValue\":\"dataqdsoqzhxwdjoxwkb\"}},\"annotations\":[\"datahn\",\"dataz\"],\"folder\":{\"name\":\"z\"},\"\":{\"cmwbejywwwvn\":\"datagtkxncwdytnlr\",\"fyziruqvgnjxiak\":\"datawwkrmqevrhhafqfu\",\"yugmb\":\"datayjmzbmxgikyl\",\"loxtvq\":\"datadcv\"}}")
            .toObject(EloquaObjectDataset.class);
        Assertions.assertEquals("mea", model.description());
        Assertions.assertEquals("fcvedks", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("ejst").type());
        Assertions.assertEquals("z", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        EloquaObjectDataset model = new EloquaObjectDataset().withDescription("mea")
            .withStructure("datajqenhekzazvgeytl")
            .withSchema("datas")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("fcvedks")
                .withParameters(mapOf("crhnx", "datatolkyqfnj", "wunrtcsra", "datamfv", "nbunsodtevzshqy",
                    "datawhyxfshmbydmv", "pshaezc", "dataeb")))
            .withParameters(mapOf("ejst",
                new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("datarnovqdmh"), "jakgk",
                new ParameterSpecification().withType(ParameterType.SECURE_STRING).withDefaultValue("dataa"),
                "hsobvcnsbioez",
                new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("dataqdsoqzhxwdjoxwkb")))
            .withAnnotations(Arrays.asList("datahn", "dataz"))
            .withFolder(new DatasetFolder().withName("z"))
            .withTableName("dataqrwwbdrwro");
        model = BinaryData.fromObject(model).toObject(EloquaObjectDataset.class);
        Assertions.assertEquals("mea", model.description());
        Assertions.assertEquals("fcvedks", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("ejst").type());
        Assertions.assertEquals("z", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
