// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.EloquaObjectDataset;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class EloquaObjectDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        EloquaObjectDataset model =
            BinaryData
                .fromString(
                    "{\"type\":\"EloquaObject\",\"typeProperties\":{\"tableName\":\"datalvxboc\"},\"description\":\"wmfvuhzmolhveoln\",\"structure\":\"datafm\",\"schema\":\"datadxqupyml\",\"linkedServiceName\":{\"referenceName\":\"klmnjqzmqynhitr\",\"parameters\":{\"nrjocogwf\":\"datagqrbthbfpi\",\"pkhuvnlmdcnut\":\"datakywzrqeiad\",\"ioynctfqhhvv\":\"dataexmizunzbq\"}},\"parameters\":{\"vavlyaqtlocnwme\":{\"type\":\"Array\",\"defaultValue\":\"dataaaaiaib\"},\"v\":{\"type\":\"Int\",\"defaultValue\":\"datazuzqcrlko\"},\"ozf\":{\"type\":\"Bool\",\"defaultValue\":\"datayhenfsfyqncowmh\"},\"agwaakktbjort\":{\"type\":\"Float\",\"defaultValue\":\"datajiaaosla\"}},\"annotations\":[\"dataajqhsnsejplis\",\"dataxyljzbkdw\",\"datafjwxgvtkjctvrpea\",\"datazzkvfc\"],\"folder\":{\"name\":\"vq\"},\"\":{\"tgcptctxpoeg\":\"datahtraitrmsukxtu\"}}")
                .toObject(EloquaObjectDataset.class);
        Assertions.assertEquals("wmfvuhzmolhveoln", model.description());
        Assertions.assertEquals("klmnjqzmqynhitr", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("vavlyaqtlocnwme").type());
        Assertions.assertEquals("vq", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        EloquaObjectDataset model =
            new EloquaObjectDataset()
                .withDescription("wmfvuhzmolhveoln")
                .withStructure("datafm")
                .withSchema("datadxqupyml")
                .withLinkedServiceName(
                    new LinkedServiceReference()
                        .withReferenceName("klmnjqzmqynhitr")
                        .withParameters(
                            mapOf(
                                "nrjocogwf",
                                "datagqrbthbfpi",
                                "pkhuvnlmdcnut",
                                "datakywzrqeiad",
                                "ioynctfqhhvv",
                                "dataexmizunzbq")))
                .withParameters(
                    mapOf(
                        "vavlyaqtlocnwme",
                        new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("dataaaaiaib"),
                        "v",
                        new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("datazuzqcrlko"),
                        "ozf",
                        new ParameterSpecification()
                            .withType(ParameterType.BOOL)
                            .withDefaultValue("datayhenfsfyqncowmh"),
                        "agwaakktbjort",
                        new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("datajiaaosla")))
                .withAnnotations(
                    Arrays.asList("dataajqhsnsejplis", "dataxyljzbkdw", "datafjwxgvtkjctvrpea", "datazzkvfc"))
                .withFolder(new DatasetFolder().withName("vq"))
                .withTableName("datalvxboc");
        model = BinaryData.fromObject(model).toObject(EloquaObjectDataset.class);
        Assertions.assertEquals("wmfvuhzmolhveoln", model.description());
        Assertions.assertEquals("klmnjqzmqynhitr", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("vavlyaqtlocnwme").type());
        Assertions.assertEquals("vq", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
