// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.RerunTumblingWindowTrigger;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class RerunTumblingWindowTriggerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        RerunTumblingWindowTrigger model = BinaryData.fromString(
            "{\"type\":\"RerunTumblingWindowTrigger\",\"typeProperties\":{\"parentTrigger\":\"datacfvfwwevy\",\"requestedStartTime\":\"2021-06-28T12:07:37Z\",\"requestedEndTime\":\"2021-09-01T10:13:05Z\",\"rerunConcurrency\":727069286},\"description\":\"x\",\"runtimeState\":\"Stopped\",\"annotations\":[\"datazttogblri\",\"datan\"],\"\":{\"jpalnzrjqlqh\":\"dataucolposnqljlwkj\"}}")
            .toObject(RerunTumblingWindowTrigger.class);
        Assertions.assertEquals("x", model.description());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-28T12:07:37Z"), model.requestedStartTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-01T10:13:05Z"), model.requestedEndTime());
        Assertions.assertEquals(727069286, model.rerunConcurrency());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        RerunTumblingWindowTrigger model = new RerunTumblingWindowTrigger().withDescription("x")
            .withAnnotations(Arrays.asList("datazttogblri", "datan"))
            .withParentTrigger("datacfvfwwevy")
            .withRequestedStartTime(OffsetDateTime.parse("2021-06-28T12:07:37Z"))
            .withRequestedEndTime(OffsetDateTime.parse("2021-09-01T10:13:05Z"))
            .withRerunConcurrency(727069286);
        model = BinaryData.fromObject(model).toObject(RerunTumblingWindowTrigger.class);
        Assertions.assertEquals("x", model.description());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-28T12:07:37Z"), model.requestedStartTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-01T10:13:05Z"), model.requestedEndTime());
        Assertions.assertEquals(727069286, model.rerunConcurrency());
    }
}
