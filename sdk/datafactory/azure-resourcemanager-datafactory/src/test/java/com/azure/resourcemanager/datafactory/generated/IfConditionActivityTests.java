// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.Activity;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.Expression;
import com.azure.resourcemanager.datafactory.models.IfConditionActivity;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class IfConditionActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IfConditionActivity model = BinaryData.fromString(
            "{\"type\":\"IfCondition\",\"typeProperties\":{\"expression\":{\"value\":\"wbqcofsqruy\"},\"ifTrueActivities\":[{\"type\":\"Activity\",\"name\":\"em\",\"description\":\"jzhix\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"uj\",\"dependencyConditions\":[\"Succeeded\",\"Failed\",\"Failed\",\"Completed\"],\"\":{\"bshyul\":\"datawtkhfcnceowvi\",\"zcpoydaifxmbxqzc\":\"datahepnmeg\"}},{\"activity\":\"c\",\"dependencyConditions\":[\"Failed\",\"Skipped\",\"Succeeded\",\"Failed\"],\"\":{\"vanpjvqrwlseeu\":\"datapldaoiidxknsqdru\"}},{\"activity\":\"xxrwov\",\"dependencyConditions\":[\"Succeeded\",\"Completed\",\"Completed\",\"Completed\"],\"\":{\"vytrzsqbckqgte\":\"databwqrot\"}},{\"activity\":\"inznkvyicj\",\"dependencyConditions\":[\"Succeeded\",\"Completed\",\"Completed\",\"Succeeded\"],\"\":{\"buvyuzzwph\":\"dataeskindgmk\",\"ikwvcogq\":\"dataliflxrnsyvmu\",\"cthrrxrki\":\"dataim\"}}],\"userProperties\":[{\"name\":\"dhbmizbevje\",\"value\":\"dataufxuug\"},{\"name\":\"dbpjoycpys\",\"value\":\"datacmavln\"},{\"name\":\"bm\",\"value\":\"datanvfgwgoxfd\"}],\"\":{\"bifpc\":\"datazoxhazafmq\",\"gjxklojdydha\":\"dataammpeakdhebzquq\",\"sxgjih\":\"datafjwm\"}},{\"type\":\"Activity\",\"name\":\"xoxjghumvpt\",\"description\":\"o\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"lcjuzzzi\",\"dependencyConditions\":[\"Succeeded\",\"Failed\"],\"\":{\"yhpilqojdmz\":\"dataovbgdbaornx\",\"rymzlqircivxaqz\":\"datajcpzzqji\",\"ye\":\"datavgxqtkcvnyi\"}},{\"activity\":\"wfsivg\",\"dependencyConditions\":[\"Completed\",\"Skipped\"],\"\":{\"kklz\":\"datadyztnsutes\",\"vtivefsr\":\"datah\",\"dmcoxobrv\":\"datatcxhpntewvfvs\"}}],\"userProperties\":[{\"name\":\"rvnnfieaqbv\",\"value\":\"datauehggeea\"},{\"name\":\"brslbzcyubqemrxm\",\"value\":\"dataibexaxu\"},{\"name\":\"wwqnwxohbmvg\",\"value\":\"datagdnzvohrnqn\"},{\"name\":\"runkyuzcpi\",\"value\":\"dataas\"}],\"\":{\"ascvcmt\":\"datatiocsfpcyyi\",\"adtyhmoph\":\"dataukboryn\"}}],\"ifFalseActivities\":[{\"type\":\"Activity\",\"name\":\"hvnqwdphnc\",\"description\":\"bqij\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"nhrhxhmtxpx\",\"dependencyConditions\":[\"Completed\",\"Failed\",\"Skipped\"],\"\":{\"vijdtmjybb\":\"datantiz\",\"sliou\":\"datadhwadnccunrviqrz\"}},{\"activity\":\"a\",\"dependencyConditions\":[\"Skipped\",\"Succeeded\",\"Completed\"],\"\":{\"ir\":\"dataggbuajwrrgqudnm\"}}],\"userProperties\":[{\"name\":\"ztkxfhix\",\"value\":\"datauuzaczmej\"},{\"name\":\"iiegpdhit\",\"value\":\"datatketw\"},{\"name\":\"sko\",\"value\":\"datamqhzys\"},{\"name\":\"chbvejgfx\",\"value\":\"datajqevmzhk\"}],\"\":{\"pnxylhrlbohdxln\":\"datangdgk\"}},{\"type\":\"Activity\",\"name\":\"lvcbcxb\",\"description\":\"snhqqqaedgwghqqi\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"uenb\",\"dependencyConditions\":[\"Succeeded\"],\"\":{\"opibaxkywqs\":\"dataoopksmj\",\"pfe\":\"datanrcuvlfzd\"}}],\"userProperties\":[{\"name\":\"cahlsavinoora\",\"value\":\"dataspfinyijmwqgmhf\"},{\"name\":\"lbd\",\"value\":\"datadhedmfidro\"},{\"name\":\"fpucwmdmbys\",\"value\":\"dataqbgndfzheyxccx\"}],\"\":{\"uppkzuxsbbmxfut\":\"dataioawrorexicwb\",\"helyopobg\":\"datay\"}}]},\"name\":\"l\",\"description\":\"ki\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"fmpiffgtqhghy\",\"dependencyConditions\":[\"Skipped\",\"Completed\",\"Failed\"],\"\":{\"hucxmybuqjpgbiya\":\"datagmlaer\",\"fyinh\":\"datagat\"}},{\"activity\":\"vbmbf\",\"dependencyConditions\":[\"Failed\",\"Completed\",\"Failed\",\"Failed\"],\"\":{\"yvopotiefxhaqq\":\"datadkdcvowaslswwg\",\"ypuon\":\"datavhfdezomykjbl\"}},{\"activity\":\"vmymfaiw\",\"dependencyConditions\":[\"Skipped\",\"Completed\"],\"\":{\"va\":\"dataddsxsq\",\"roedwipauclety\":\"datayzd\",\"hboqeue\":\"datazziavguskvvnzn\"}},{\"activity\":\"yfl\",\"dependencyConditions\":[\"Skipped\",\"Succeeded\",\"Skipped\",\"Succeeded\"],\"\":{\"jnsbdw\":\"datazda\"}}],\"userProperties\":[{\"name\":\"q\",\"value\":\"databafrbhrsp\"},{\"name\":\"kvok\",\"value\":\"datamere\"}],\"\":{\"decxbiknf\":\"dataessuwkcn\",\"fxdntpksb\":\"datapixfdojxby\",\"svahbqoojdnmrxj\":\"dataigegwaidqzfl\",\"nkadanl\":\"dataumrzfdbo\"}}")
            .toObject(IfConditionActivity.class);
        Assertions.assertEquals("l", model.name());
        Assertions.assertEquals("ki", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("fmpiffgtqhghy", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("q", model.userProperties().get(0).name());
        Assertions.assertEquals("wbqcofsqruy", model.expression().value());
        Assertions.assertEquals("em", model.ifTrueActivities().get(0).name());
        Assertions.assertEquals("jzhix", model.ifTrueActivities().get(0).description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.ifTrueActivities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.ifTrueActivities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("uj", model.ifTrueActivities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED,
            model.ifTrueActivities().get(0).dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("dhbmizbevje", model.ifTrueActivities().get(0).userProperties().get(0).name());
        Assertions.assertEquals("hvnqwdphnc", model.ifFalseActivities().get(0).name());
        Assertions.assertEquals("bqij", model.ifFalseActivities().get(0).description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.ifFalseActivities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.ifFalseActivities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("nhrhxhmtxpx", model.ifFalseActivities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED,
            model.ifFalseActivities().get(0).dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("ztkxfhix", model.ifFalseActivities().get(0).userProperties().get(0).name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IfConditionActivity model = new IfConditionActivity().withName("l").withDescription("ki")
            .withState(ActivityState.INACTIVE).withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
            .withDependsOn(Arrays.asList(
                new ActivityDependency().withActivity("fmpiffgtqhghy")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.COMPLETED,
                        DependencyCondition.FAILED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("vbmbf")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED, DependencyCondition.COMPLETED,
                        DependencyCondition.FAILED, DependencyCondition.FAILED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("vmymfaiw")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.COMPLETED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("yfl")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.SUCCEEDED,
                        DependencyCondition.SKIPPED, DependencyCondition.SUCCEEDED))
                    .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("q").withValue("databafrbhrsp"),
                new UserProperty().withName("kvok").withValue("datamere")))
            .withExpression(new Expression().withValue("wbqcofsqruy"))
            .withIfTrueActivities(Arrays.asList(
                new Activity().withName("em").withDescription("jzhix").withState(ActivityState.ACTIVE)
                    .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
                    .withDependsOn(Arrays.asList(
                        new ActivityDependency()
                            .withActivity("uj")
                            .withDependencyConditions(
                                Arrays.asList(DependencyCondition.SUCCEEDED, DependencyCondition.FAILED,
                                    DependencyCondition.FAILED, DependencyCondition.COMPLETED))
                            .withAdditionalProperties(mapOf()),
                        new ActivityDependency().withActivity("c")
                            .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED,
                                DependencyCondition.SKIPPED, DependencyCondition.SUCCEEDED, DependencyCondition.FAILED))
                            .withAdditionalProperties(mapOf()),
                        new ActivityDependency().withActivity("xxrwov")
                            .withDependencyConditions(
                                Arrays.asList(DependencyCondition.SUCCEEDED, DependencyCondition.COMPLETED,
                                    DependencyCondition.COMPLETED, DependencyCondition.COMPLETED))
                            .withAdditionalProperties(mapOf()),
                        new ActivityDependency().withActivity("inznkvyicj")
                            .withDependencyConditions(
                                Arrays.asList(DependencyCondition.SUCCEEDED, DependencyCondition.COMPLETED,
                                    DependencyCondition.COMPLETED, DependencyCondition.SUCCEEDED))
                            .withAdditionalProperties(mapOf())))
                    .withUserProperties(
                        Arrays.asList(new UserProperty().withName("dhbmizbevje").withValue("dataufxuug"),
                            new UserProperty().withName("dbpjoycpys").withValue("datacmavln"),
                            new UserProperty().withName("bm").withValue("datanvfgwgoxfd")))
                    .withAdditionalProperties(mapOf("type", "Activity")),
                new Activity()
                    .withName("xoxjghumvpt").withDescription("o").withState(
                        ActivityState.ACTIVE)
                    .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
                    .withDependsOn(Arrays.asList(
                        new ActivityDependency().withActivity("lcjuzzzi")
                            .withDependencyConditions(
                                Arrays.asList(DependencyCondition.SUCCEEDED, DependencyCondition.FAILED))
                            .withAdditionalProperties(mapOf()),
                        new ActivityDependency().withActivity("wfsivg")
                            .withDependencyConditions(
                                Arrays.asList(DependencyCondition.COMPLETED, DependencyCondition.SKIPPED))
                            .withAdditionalProperties(mapOf())))
                    .withUserProperties(
                        Arrays.asList(new UserProperty().withName("rvnnfieaqbv").withValue("datauehggeea"),
                            new UserProperty().withName("brslbzcyubqemrxm").withValue("dataibexaxu"),
                            new UserProperty().withName("wwqnwxohbmvg").withValue("datagdnzvohrnqn"),
                            new UserProperty().withName("runkyuzcpi").withValue("dataas")))
                    .withAdditionalProperties(mapOf("type", "Activity"))))
            .withIfFalseActivities(Arrays.asList(
                new Activity().withName("hvnqwdphnc").withDescription("bqij").withState(ActivityState.ACTIVE)
                    .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
                    .withDependsOn(Arrays.asList(
                        new ActivityDependency().withActivity("nhrhxhmtxpx")
                            .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED,
                                DependencyCondition.FAILED, DependencyCondition.SKIPPED))
                            .withAdditionalProperties(mapOf()),
                        new ActivityDependency().withActivity("a")
                            .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED,
                                DependencyCondition.SUCCEEDED, DependencyCondition.COMPLETED))
                            .withAdditionalProperties(mapOf())))
                    .withUserProperties(
                        Arrays.asList(new UserProperty().withName("ztkxfhix").withValue("datauuzaczmej"),
                            new UserProperty().withName("iiegpdhit").withValue("datatketw"),
                            new UserProperty().withName("sko").withValue("datamqhzys"),
                            new UserProperty().withName("chbvejgfx").withValue("datajqevmzhk")))
                    .withAdditionalProperties(mapOf("type", "Activity")),
                new Activity().withName("lvcbcxb").withDescription("snhqqqaedgwghqqi").withState(ActivityState.INACTIVE)
                    .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
                    .withDependsOn(Arrays.asList(new ActivityDependency().withActivity("uenb")
                        .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED))
                        .withAdditionalProperties(mapOf())))
                    .withUserProperties(
                        Arrays.asList(new UserProperty().withName("cahlsavinoora").withValue("dataspfinyijmwqgmhf"),
                            new UserProperty().withName("lbd").withValue("datadhedmfidro"),
                            new UserProperty().withName("fpucwmdmbys").withValue("dataqbgndfzheyxccx")))
                    .withAdditionalProperties(mapOf("type", "Activity"))));
        model = BinaryData.fromObject(model).toObject(IfConditionActivity.class);
        Assertions.assertEquals("l", model.name());
        Assertions.assertEquals("ki", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("fmpiffgtqhghy", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("q", model.userProperties().get(0).name());
        Assertions.assertEquals("wbqcofsqruy", model.expression().value());
        Assertions.assertEquals("em", model.ifTrueActivities().get(0).name());
        Assertions.assertEquals("jzhix", model.ifTrueActivities().get(0).description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.ifTrueActivities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.ifTrueActivities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("uj", model.ifTrueActivities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED,
            model.ifTrueActivities().get(0).dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("dhbmizbevje", model.ifTrueActivities().get(0).userProperties().get(0).name());
        Assertions.assertEquals("hvnqwdphnc", model.ifFalseActivities().get(0).name());
        Assertions.assertEquals("bqij", model.ifFalseActivities().get(0).description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.ifFalseActivities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.ifFalseActivities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("nhrhxhmtxpx", model.ifFalseActivities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED,
            model.ifFalseActivities().get(0).dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("ztkxfhix", model.ifFalseActivities().get(0).userProperties().get(0).name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
