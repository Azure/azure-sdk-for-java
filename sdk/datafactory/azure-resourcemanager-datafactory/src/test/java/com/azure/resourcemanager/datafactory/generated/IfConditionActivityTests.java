// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.Activity;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.Expression;
import com.azure.resourcemanager.datafactory.models.IfConditionActivity;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class IfConditionActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IfConditionActivity model = BinaryData.fromString(
            "{\"type\":\"IfCondition\",\"typeProperties\":{\"expression\":{\"value\":\"pvbmbf\"},\"ifTrueActivities\":[{\"type\":\"Activity\",\"name\":\"uamdydkdcvowasl\",\"description\":\"w\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"tiefxhaqqavhfd\",\"dependencyConditions\":[\"Failed\",\"Completed\"],\"\":{\"vmymfaiw\":\"datajblmypuon\",\"xsqcvabyzdaroe\":\"datalrphadd\",\"typzziavg\":\"datawipaucl\",\"zyfldjkkvaci\":\"dataskvvnznghboqeu\"}},{\"activity\":\"daejn\",\"dependencyConditions\":[\"Skipped\"],\"\":{\"frb\":\"datafuqqb\"}}],\"userProperties\":[{\"name\":\"p\",\"value\":\"datakvok\"},{\"name\":\"mere\",\"value\":\"datanoessuwkcnhdecxb\"},{\"name\":\"knfepixf\",\"value\":\"dataojxbyxfxdnt\"},{\"name\":\"ksbtige\",\"value\":\"datawaidqzf\"}],\"\":{\"lumrzfdb\":\"datavahbqoojdnmrx\",\"qlrmbgiaoxpfko\":\"datatnkadanl\",\"xezurhgucns\":\"datavc\",\"ibgczkk\":\"datapbleazvyftklbb\"}},{\"type\":\"Activity\",\"name\":\"rl\",\"description\":\"dkwibdri\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"lhecztmwwmybv\",\"dependencyConditions\":[\"Failed\",\"Failed\",\"Succeeded\",\"Completed\"],\"\":{\"udskcadkyoo\":\"datajglponkrhpyed\",\"f\":\"datavqpcjr\"}},{\"activity\":\"yduzzyx\",\"dependencyConditions\":[\"Skipped\",\"Failed\",\"Completed\"],\"\":{\"nectfpbfgmghohox\":\"dataufmy\",\"vqcxrrkc\":\"dataonts\",\"zs\":\"dataclqlibpmfn\"}}],\"userProperties\":[{\"name\":\"kktlodsyyzmf\",\"value\":\"datagzljgrtfic\"},{\"name\":\"ejmzbasxapcegtc\",\"value\":\"dataufet\"}],\"\":{\"xgxqdmvfdocjaf\":\"datatjnneynmgvqysghk\",\"wmtfjzuqhyqvm\":\"datafiddnktutwcz\",\"dpeedzowverhtyc\":\"databsj\",\"mdsisll\":\"dataigtsrrlelpobm\"}}],\"ifFalseActivities\":[{\"type\":\"Activity\",\"name\":\"l\",\"description\":\"riimojozhd\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"fqb\",\"dependencyConditions\":[\"Skipped\",\"Completed\"],\"\":{\"ngiff\":\"dataudcvqeowepvn\"}},{\"activity\":\"ntopfqguovqqrc\",\"dependencyConditions\":[\"Completed\",\"Succeeded\",\"Skipped\"],\"\":{\"kefowncudcrw\":\"dataagurgurpcguwyuz\",\"jca\":\"dataiqsrqebjgof\"}},{\"activity\":\"d\",\"dependencyConditions\":[\"Failed\",\"Skipped\",\"Skipped\"],\"\":{\"mseao\":\"dataf\",\"bslwxcf\":\"dataq\",\"wnmnxppgfep\":\"datavedxyeba\"}}],\"userProperties\":[{\"name\":\"djva\",\"value\":\"dataae\"},{\"name\":\"oqknz\",\"value\":\"datanvvkfbmrppjf\"},{\"name\":\"eabgpw\",\"value\":\"datas\"}],\"\":{\"n\":\"datai\",\"telimqxwih\":\"datavdjmvzcycg\",\"hz\":\"datapyexjrguziglr\",\"isklotwnppstpq\":\"datamrvgcbf\"}},{\"type\":\"Activity\",\"name\":\"s\",\"description\":\"awolhlfffeznb\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"ywiscoq\",\"dependencyConditions\":[\"Completed\"],\"\":{\"qkcikfeshxo\":\"datapchdpdevcmp\",\"d\":\"datatvkxpsxlpypzgdet\",\"sutspocrskkraap\":\"datagyhu\"}}],\"userProperties\":[{\"name\":\"ziif\",\"value\":\"datajigtqyzoc\"}],\"\":{\"bwdfjcep\":\"datawcflciooxybmk\"}},{\"type\":\"Activity\",\"name\":\"cpwtj\",\"description\":\"uhrtqn\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"kns\",\"dependencyConditions\":[\"Failed\",\"Completed\",\"Skipped\"],\"\":{\"vejxh\":\"datawo\"}},{\"activity\":\"eolzftfyjcen\",\"dependencyConditions\":[\"Skipped\",\"Skipped\",\"Completed\"],\"\":{\"wyyyerzbmlhgytk\":\"dataxh\",\"jftcrjoh\":\"datahevodddnegwsyxdf\"}},{\"activity\":\"i\",\"dependencyConditions\":[\"Failed\"],\"\":{\"rjxkphaq\":\"datatcqjgcdltwlpu\"}}],\"userProperties\":[{\"name\":\"jufljqz\",\"value\":\"dataixlzaavvuvhyerj\"}],\"\":{\"spli\":\"datayxepllbneepfjib\"}},{\"type\":\"Activity\",\"name\":\"fqjweigywj\",\"description\":\"p\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"efdqnsuaoml\",\"dependencyConditions\":[\"Succeeded\",\"Skipped\",\"Skipped\",\"Completed\"],\"\":{\"mcrllecquo\":\"datanane\"}}],\"userProperties\":[{\"name\":\"hkv\",\"value\":\"dataofxkelwvcyprpog\"},{\"name\":\"qvuftkiyghcmpyki\",\"value\":\"dataochpzcgs\"},{\"name\":\"pklfnst\",\"value\":\"datat\"}],\"\":{\"esf\":\"datawotk\",\"d\":\"datarsgfpds\",\"fun\":\"dataivepmtt\",\"oczoiduk\":\"datakcji\"}}]},\"name\":\"jjfne\",\"description\":\"qalwjcqbnvbzem\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"cehlgryvkubfotgi\",\"dependencyConditions\":[\"Skipped\",\"Failed\"],\"\":{\"fttsdtnqlggtrjzi\":\"datakirxy\",\"cinjej\":\"dataxzbu\",\"jzenagmhhmgtbqzf\":\"datainlysguladd\",\"qcprbwsndloldx\":\"datampgibmngb\"}}],\"userProperties\":[{\"name\":\"j\",\"value\":\"datajyx\"},{\"name\":\"euqcbgbs\",\"value\":\"datagxak\"},{\"name\":\"kbryolzbmdntajgg\",\"value\":\"datauyokctymsbhdi\"}],\"\":{\"pwwfei\":\"dataobsenxgkjfuwtluk\"}}")
            .toObject(IfConditionActivity.class);
        Assertions.assertEquals("jjfne", model.name());
        Assertions.assertEquals("qalwjcqbnvbzem", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.onInactiveMarkAs());
        Assertions.assertEquals("cehlgryvkubfotgi", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("j", model.userProperties().get(0).name());
        Assertions.assertEquals("pvbmbf", model.expression().value());
        Assertions.assertEquals("uamdydkdcvowasl", model.ifTrueActivities().get(0).name());
        Assertions.assertEquals("w", model.ifTrueActivities().get(0).description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.ifTrueActivities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.ifTrueActivities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("tiefxhaqqavhfd", model.ifTrueActivities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED,
            model.ifTrueActivities().get(0).dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("p", model.ifTrueActivities().get(0).userProperties().get(0).name());
        Assertions.assertEquals("l", model.ifFalseActivities().get(0).name());
        Assertions.assertEquals("riimojozhd", model.ifFalseActivities().get(0).description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.ifFalseActivities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED,
            model.ifFalseActivities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("fqb", model.ifFalseActivities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED,
            model.ifFalseActivities().get(0).dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("djva", model.ifFalseActivities().get(0).userProperties().get(0).name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IfConditionActivity model
            = new IfConditionActivity().withName("jjfne")
                .withDescription("qalwjcqbnvbzem")
                .withState(ActivityState.INACTIVE)
                .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SUCCEEDED)
                .withDependsOn(Arrays.asList(new ActivityDependency().withActivity("cehlgryvkubfotgi")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.FAILED))
                    .withAdditionalProperties(mapOf())))
                .withUserProperties(Arrays.asList(new UserProperty().withName("j").withValue("datajyx"),
                    new UserProperty().withName("euqcbgbs").withValue("datagxak"),
                    new UserProperty().withName("kbryolzbmdntajgg").withValue("datauyokctymsbhdi")))
                .withExpression(new Expression().withValue("pvbmbf"))
                .withIfTrueActivities(
                    Arrays
                        .asList(
                            new Activity().withName("uamdydkdcvowasl")
                                .withDescription("w")
                                .withState(ActivityState.INACTIVE)
                                .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
                                .withDependsOn(
                                    Arrays.asList(
                                        new ActivityDependency().withActivity("tiefxhaqqavhfd")
                                            .withDependencyConditions(Arrays
                                                .asList(DependencyCondition.FAILED, DependencyCondition.COMPLETED))
                                            .withAdditionalProperties(mapOf()),
                                        new ActivityDependency().withActivity("daejn")
                                            .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED))
                                            .withAdditionalProperties(mapOf())))
                                .withUserProperties(Arrays.asList(
                                    new UserProperty().withName("p").withValue("datakvok"),
                                    new UserProperty().withName("mere").withValue("datanoessuwkcnhdecxb"),
                                    new UserProperty()
                                        .withName("knfepixf")
                                        .withValue("dataojxbyxfxdnt"),
                                    new UserProperty().withName("ksbtige").withValue("datawaidqzf")))
                                .withAdditionalProperties(mapOf("type", "Activity")),
                            new Activity().withName("rl")
                                .withDescription("dkwibdri")
                                .withState(ActivityState.INACTIVE)
                                .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
                                .withDependsOn(
                                    Arrays
                                        .asList(
                                            new ActivityDependency().withActivity("lhecztmwwmybv")
                                                .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED,
                                                    DependencyCondition.FAILED, DependencyCondition.SUCCEEDED,
                                                    DependencyCondition.COMPLETED))
                                                .withAdditionalProperties(mapOf()),
                                            new ActivityDependency().withActivity("yduzzyx")
                                                .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED,
                                                    DependencyCondition.FAILED, DependencyCondition.COMPLETED))
                                                .withAdditionalProperties(mapOf())))
                                .withUserProperties(Arrays
                                    .asList(new UserProperty().withName("kktlodsyyzmf").withValue("datagzljgrtfic"),
                                        new UserProperty().withName("ejmzbasxapcegtc").withValue("dataufet")))
                                .withAdditionalProperties(mapOf("type", "Activity"))))
                .withIfFalseActivities(
                    Arrays
                        .asList(
                            new Activity().withName("l")
                                .withDescription("riimojozhd")
                                .withState(ActivityState.INACTIVE)
                                .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SUCCEEDED)
                                .withDependsOn(
                                    Arrays.asList(
                                        new ActivityDependency().withActivity("fqb")
                                            .withDependencyConditions(Arrays
                                                .asList(DependencyCondition.SKIPPED, DependencyCondition.COMPLETED))
                                            .withAdditionalProperties(mapOf()),
                                        new ActivityDependency().withActivity("ntopfqguovqqrc")
                                            .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED,
                                                DependencyCondition.SUCCEEDED, DependencyCondition.SKIPPED))
                                            .withAdditionalProperties(mapOf()),
                                        new ActivityDependency().withActivity("d")
                                            .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED,
                                                DependencyCondition.SKIPPED, DependencyCondition.SKIPPED))
                                            .withAdditionalProperties(mapOf())))
                                .withUserProperties(Arrays.asList(
                                    new UserProperty().withName("djva").withValue("dataae"),
                                    new UserProperty().withName("oqknz").withValue("datanvvkfbmrppjf"),
                                    new UserProperty().withName("eabgpw").withValue("datas")))
                                .withAdditionalProperties(mapOf("type", "Activity")),
                            new Activity().withName("s")
                                .withDescription("awolhlfffeznb")
                                .withState(ActivityState.INACTIVE)
                                .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
                                .withDependsOn(Arrays.asList(new ActivityDependency()
                                    .withActivity("ywiscoq")
                                    .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED))
                                    .withAdditionalProperties(mapOf())))
                                .withUserProperties(
                                    Arrays.asList(new UserProperty().withName("ziif").withValue("datajigtqyzoc")))
                                .withAdditionalProperties(mapOf("type", "Activity")),
                            new Activity().withName("cpwtj")
                                .withDescription("uhrtqn")
                                .withState(ActivityState.INACTIVE)
                                .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SUCCEEDED)
                                .withDependsOn(Arrays.asList(new ActivityDependency()
                                    .withActivity("kns")
                                    .withDependencyConditions(
                                        Arrays.asList(DependencyCondition.FAILED, DependencyCondition.COMPLETED,
                                            DependencyCondition.SKIPPED))
                                    .withAdditionalProperties(mapOf()),
                                    new ActivityDependency().withActivity("eolzftfyjcen")
                                        .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED,
                                            DependencyCondition.SKIPPED, DependencyCondition.COMPLETED))
                                        .withAdditionalProperties(mapOf()),
                                    new ActivityDependency().withActivity("i")
                                        .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED))
                                        .withAdditionalProperties(mapOf())))
                                .withUserProperties(Arrays
                                    .asList(new UserProperty().withName("jufljqz").withValue("dataixlzaavvuvhyerj")))
                                .withAdditionalProperties(mapOf("type", "Activity")),
                            new Activity().withName("fqjweigywj")
                                .withDescription("p")
                                .withState(ActivityState.ACTIVE)
                                .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
                                .withDependsOn(
                                    Arrays
                                        .asList(new ActivityDependency().withActivity("efdqnsuaoml")
                                            .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED,
                                                DependencyCondition.SKIPPED, DependencyCondition.SKIPPED,
                                                DependencyCondition.COMPLETED))
                                            .withAdditionalProperties(mapOf())))
                                .withUserProperties(
                                    Arrays.asList(new UserProperty().withName("hkv").withValue("dataofxkelwvcyprpog"),
                                        new UserProperty().withName("qvuftkiyghcmpyki").withValue("dataochpzcgs"),
                                        new UserProperty().withName("pklfnst").withValue("datat")))
                                .withAdditionalProperties(mapOf("type", "Activity"))));
        model = BinaryData.fromObject(model).toObject(IfConditionActivity.class);
        Assertions.assertEquals("jjfne", model.name());
        Assertions.assertEquals("qalwjcqbnvbzem", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.onInactiveMarkAs());
        Assertions.assertEquals("cehlgryvkubfotgi", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("j", model.userProperties().get(0).name());
        Assertions.assertEquals("pvbmbf", model.expression().value());
        Assertions.assertEquals("uamdydkdcvowasl", model.ifTrueActivities().get(0).name());
        Assertions.assertEquals("w", model.ifTrueActivities().get(0).description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.ifTrueActivities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.ifTrueActivities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("tiefxhaqqavhfd", model.ifTrueActivities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED,
            model.ifTrueActivities().get(0).dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("p", model.ifTrueActivities().get(0).userProperties().get(0).name());
        Assertions.assertEquals("l", model.ifFalseActivities().get(0).name());
        Assertions.assertEquals("riimojozhd", model.ifFalseActivities().get(0).description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.ifFalseActivities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED,
            model.ifFalseActivities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("fqb", model.ifFalseActivities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED,
            model.ifFalseActivities().get(0).dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("djva", model.ifFalseActivities().get(0).userProperties().get(0).name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
