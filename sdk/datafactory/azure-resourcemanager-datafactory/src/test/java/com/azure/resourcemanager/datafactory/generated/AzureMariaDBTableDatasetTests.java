// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.AzureMariaDBTableDataset;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureMariaDBTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureMariaDBTableDataset model = BinaryData.fromString(
            "{\"type\":\"wapdunhdikatzmtu\",\"typeProperties\":{\"tableName\":\"dataoeqcrjvcjskqsfn\"},\"description\":\"nh\",\"structure\":\"datajkbi\",\"schema\":\"datalwzlv\",\"linkedServiceName\":{\"referenceName\":\"cmcu\",\"parameters\":{\"cfbaobo\":\"datanlodi\"}},\"parameters\":{\"ksaxyeedvpmodkt\":{\"type\":\"Float\",\"defaultValue\":\"datapsvax\"}},\"annotations\":[\"dataydvvgkmorbpcjesf\",\"datavuztnsvmsh\",\"datakg\",\"datagf\"],\"folder\":{\"name\":\"meh\"},\"\":{\"ivrfnztx\":\"datalpkryrcbmjjviu\",\"ohlgrjcx\":\"datamrmgftjvii\"}}")
            .toObject(AzureMariaDBTableDataset.class);
        Assertions.assertEquals("nh", model.description());
        Assertions.assertEquals("cmcu", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.FLOAT, model.parameters().get("ksaxyeedvpmodkt").type());
        Assertions.assertEquals("meh", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureMariaDBTableDataset model = new AzureMariaDBTableDataset().withDescription("nh")
            .withStructure("datajkbi")
            .withSchema("datalwzlv")
            .withLinkedServiceName(
                new LinkedServiceReference().withReferenceName("cmcu").withParameters(mapOf("cfbaobo", "datanlodi")))
            .withParameters(mapOf("ksaxyeedvpmodkt",
                new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("datapsvax")))
            .withAnnotations(Arrays.asList("dataydvvgkmorbpcjesf", "datavuztnsvmsh", "datakg", "datagf"))
            .withFolder(new DatasetFolder().withName("meh"))
            .withTableName("dataoeqcrjvcjskqsfn");
        model = BinaryData.fromObject(model).toObject(AzureMariaDBTableDataset.class);
        Assertions.assertEquals("nh", model.description());
        Assertions.assertEquals("cmcu", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.FLOAT, model.parameters().get("ksaxyeedvpmodkt").type());
        Assertions.assertEquals("meh", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
