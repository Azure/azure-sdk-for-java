// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.AzureMariaDBTableDataset;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureMariaDBTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureMariaDBTableDataset model = BinaryData.fromString(
            "{\"type\":\"AzureMariaDBTable\",\"typeProperties\":{\"tableName\":\"datahvxjuai\"},\"description\":\"znirnygtix\",\"structure\":\"datayob\",\"schema\":\"dataphvd\",\"linkedServiceName\":{\"referenceName\":\"orxzpqdi\",\"parameters\":{\"tkehldopjsxvbb\":\"datacltfcieileem\"}},\"parameters\":{\"bn\":{\"type\":\"Array\",\"defaultValue\":\"datakm\"},\"zwmzhcmrloq\":{\"type\":\"Bool\",\"defaultValue\":\"dataidipwt\"},\"dnmbjqbngzldv\":{\"type\":\"Bool\",\"defaultValue\":\"datatyzavkyjjl\"}},\"annotations\":[\"dataoptythctoxo\"],\"folder\":{\"name\":\"qnerw\"},\"\":{\"pejomeqgxhwisp\":\"datavidsssfzsgzgu\",\"xirppbiichlygkv\":\"dataogdblwjsbaqxaxt\",\"wonkrnizdxywabki\":\"datai\",\"aptgvnaqyjukka\":\"datani\"}}")
            .toObject(AzureMariaDBTableDataset.class);
        Assertions.assertEquals("znirnygtix", model.description());
        Assertions.assertEquals("orxzpqdi", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("bn").type());
        Assertions.assertEquals("qnerw", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureMariaDBTableDataset model = new AzureMariaDBTableDataset().withDescription("znirnygtix")
            .withStructure("datayob")
            .withSchema("dataphvd")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("orxzpqdi")
                .withParameters(mapOf("tkehldopjsxvbb", "datacltfcieileem")))
            .withParameters(mapOf("bn",
                new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("datakm"), "zwmzhcmrloq",
                new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("dataidipwt"),
                "dnmbjqbngzldv",
                new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("datatyzavkyjjl")))
            .withAnnotations(Arrays.asList("dataoptythctoxo"))
            .withFolder(new DatasetFolder().withName("qnerw"))
            .withTableName("datahvxjuai");
        model = BinaryData.fromObject(model).toObject(AzureMariaDBTableDataset.class);
        Assertions.assertEquals("znirnygtix", model.description());
        Assertions.assertEquals("orxzpqdi", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("bn").type());
        Assertions.assertEquals("qnerw", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
