// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.AzureMariaDBTableDataset;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureMariaDBTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureMariaDBTableDataset model = BinaryData.fromString(
            "{\"type\":\"AzureMariaDBTable\",\"typeProperties\":{\"tableName\":\"datajrevmptedeuen\"},\"description\":\"shnfiygpgpkkhp\",\"structure\":\"dataglaqlmi\",\"schema\":\"datamtrdlpxiww\",\"linkedServiceName\":{\"referenceName\":\"ecpvfpnrzikvo\",\"parameters\":{\"bwbl\":\"dataeohyfivxdi\",\"qrxrosuqrrldxfu\":\"datajhpxukxgoyxontbw\",\"ewxatktwjrppi\":\"datae\",\"rmd\":\"dataeyrqve\"}},\"parameters\":{\"zwyncwksm\":{\"type\":\"SecureString\",\"defaultValue\":\"dataksbojklwj\"},\"bfnflytf\":{\"type\":\"Bool\",\"defaultValue\":\"datayzo\"},\"kqwopws\":{\"type\":\"Object\",\"defaultValue\":\"datauiqoomis\"},\"dglkfv\":{\"type\":\"Float\",\"defaultValue\":\"datayznghuqzg\"}},\"annotations\":[\"datagavtfy\",\"datasedfmzu\",\"dataryxpi\"],\"folder\":{\"name\":\"peakf\"},\"\":{\"oqkanqtrkic\":\"dataedliklxkyod\",\"dkrwwmurhvifqe\":\"datahqyrgqm\",\"lpzjeldaqwjun\":\"datafsrnackitlwgeb\",\"wcbrds\":\"datalnij\"}}")
            .toObject(AzureMariaDBTableDataset.class);
        Assertions.assertEquals("shnfiygpgpkkhp", model.description());
        Assertions.assertEquals("ecpvfpnrzikvo", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.SECURE_STRING, model.parameters().get("zwyncwksm").type());
        Assertions.assertEquals("peakf", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureMariaDBTableDataset model = new AzureMariaDBTableDataset().withDescription("shnfiygpgpkkhp")
            .withStructure("dataglaqlmi")
            .withSchema("datamtrdlpxiww")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("ecpvfpnrzikvo")
                .withParameters(mapOf("bwbl", "dataeohyfivxdi", "qrxrosuqrrldxfu", "datajhpxukxgoyxontbw",
                    "ewxatktwjrppi", "datae", "rmd", "dataeyrqve")))
            .withParameters(mapOf("zwyncwksm",
                new ParameterSpecification().withType(ParameterType.SECURE_STRING).withDefaultValue("dataksbojklwj"),
                "bfnflytf", new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("datayzo"),
                "kqwopws", new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("datauiqoomis"),
                "dglkfv", new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("datayznghuqzg")))
            .withAnnotations(Arrays.asList("datagavtfy", "datasedfmzu", "dataryxpi"))
            .withFolder(new DatasetFolder().withName("peakf"))
            .withTableName("datajrevmptedeuen");
        model = BinaryData.fromObject(model).toObject(AzureMariaDBTableDataset.class);
        Assertions.assertEquals("shnfiygpgpkkhp", model.description());
        Assertions.assertEquals("ecpvfpnrzikvo", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.SECURE_STRING, model.parameters().get("zwyncwksm").type());
        Assertions.assertEquals("peakf", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
