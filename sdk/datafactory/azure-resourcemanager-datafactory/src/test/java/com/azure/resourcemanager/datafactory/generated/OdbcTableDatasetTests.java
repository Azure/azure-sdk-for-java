// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.OdbcTableDataset;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class OdbcTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        OdbcTableDataset model = BinaryData.fromString(
            "{\"type\":\"OdbcTable\",\"typeProperties\":{\"tableName\":\"dataygzkztxfexwacyy\"},\"description\":\"lxppd\",\"structure\":\"datazkf\",\"schema\":\"datauiiu\",\"linkedServiceName\":{\"referenceName\":\"ibfkcjytq\",\"parameters\":{\"qqfopvno\":\"dataz\"}},\"parameters\":{\"zyfbkmvldzmxojz\":{\"type\":\"Float\",\"defaultValue\":\"datasfhoxqlyo\"},\"vhyejthgeecbp\":{\"type\":\"String\",\"defaultValue\":\"dataaigbq\"},\"kknpugzjw\":{\"type\":\"Int\",\"defaultValue\":\"datawlckihbamyqs\"}},\"annotations\":[\"datacrjixiujzkcs\",\"dataxgkrswksykkbxk\",\"dataxbbwlmnwz\"],\"folder\":{\"name\":\"vuqddlgg\"},\"\":{\"gcmfnsffetpkmixw\":\"dataolgzubakdlkv\"}}")
            .toObject(OdbcTableDataset.class);
        Assertions.assertEquals("lxppd", model.description());
        Assertions.assertEquals("ibfkcjytq", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.FLOAT, model.parameters().get("zyfbkmvldzmxojz").type());
        Assertions.assertEquals("vuqddlgg", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        OdbcTableDataset model = new OdbcTableDataset().withDescription("lxppd")
            .withStructure("datazkf")
            .withSchema("datauiiu")
            .withLinkedServiceName(
                new LinkedServiceReference().withReferenceName("ibfkcjytq").withParameters(mapOf("qqfopvno", "dataz")))
            .withParameters(mapOf("zyfbkmvldzmxojz",
                new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("datasfhoxqlyo"),
                "vhyejthgeecbp",
                new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("dataaigbq"), "kknpugzjw",
                new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("datawlckihbamyqs")))
            .withAnnotations(Arrays.asList("datacrjixiujzkcs", "dataxgkrswksykkbxk", "dataxbbwlmnwz"))
            .withFolder(new DatasetFolder().withName("vuqddlgg"))
            .withTableName("dataygzkztxfexwacyy");
        model = BinaryData.fromObject(model).toObject(OdbcTableDataset.class);
        Assertions.assertEquals("lxppd", model.description());
        Assertions.assertEquals("ibfkcjytq", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.FLOAT, model.parameters().get("zyfbkmvldzmxojz").type());
        Assertions.assertEquals("vuqddlgg", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
