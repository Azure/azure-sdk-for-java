// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.OdbcTableDataset;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class OdbcTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        OdbcTableDataset model = BinaryData.fromString(
            "{\"type\":\"OdbcTable\",\"typeProperties\":{\"tableName\":\"databfb\"},\"description\":\"ow\",\"structure\":\"dataljdkxhmewyaolc\",\"schema\":\"datax\",\"linkedServiceName\":{\"referenceName\":\"rdpuyytbpkrp\",\"parameters\":{\"nefnoafp\":\"dataetpo\"}},\"parameters\":{\"ufcmuajwblxp\":{\"type\":\"String\",\"defaultValue\":\"datayrxowv\"}},\"annotations\":[\"datazfrfaw\",\"datannsvrfajynihti\",\"dataufgzq\"],\"folder\":{\"name\":\"uctblfehbgcgyoh\"},\"\":{\"xonebldxagmd\":\"dataeqljxdumhy\",\"xjsjqu\":\"datajwcngk\",\"crzhnsbylg\":\"dataohufzdtsrpjuvgz\",\"nbfulv\":\"datagbhuqczou\"}}")
            .toObject(OdbcTableDataset.class);
        Assertions.assertEquals("ow", model.description());
        Assertions.assertEquals("rdpuyytbpkrp", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("ufcmuajwblxp").type());
        Assertions.assertEquals("uctblfehbgcgyoh", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        OdbcTableDataset model = new OdbcTableDataset().withDescription("ow")
            .withStructure("dataljdkxhmewyaolc")
            .withSchema("datax")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("rdpuyytbpkrp")
                .withParameters(mapOf("nefnoafp", "dataetpo")))
            .withParameters(mapOf("ufcmuajwblxp",
                new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("datayrxowv")))
            .withAnnotations(Arrays.asList("datazfrfaw", "datannsvrfajynihti", "dataufgzq"))
            .withFolder(new DatasetFolder().withName("uctblfehbgcgyoh"))
            .withTableName("databfb");
        model = BinaryData.fromObject(model).toObject(OdbcTableDataset.class);
        Assertions.assertEquals("ow", model.description());
        Assertions.assertEquals("rdpuyytbpkrp", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("ufcmuajwblxp").type());
        Assertions.assertEquals("uctblfehbgcgyoh", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
