// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.OdbcTableDataset;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class OdbcTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        OdbcTableDataset model = BinaryData.fromString(
            "{\"type\":\"eujywdalisdeqngc\",\"typeProperties\":{\"tableName\":\"datamunwjivtbuszbdjr\"},\"description\":\"dz\",\"structure\":\"datalooulpozm\",\"schema\":\"datahyclxrsidoebldp\",\"linkedServiceName\":{\"referenceName\":\"iaffj\",\"parameters\":{\"x\":\"datanhrevimxm\",\"wdsoqtbfkvuozbzc\":\"datajppitygv\",\"urlcydjhtkjs\":\"datanqekwankl\",\"lr\":\"datarwiyndurdonkgobx\"}},\"parameters\":{\"froefq\":{\"type\":\"SecureString\",\"defaultValue\":\"datarswknpdrgnmza\"}},\"annotations\":[\"dataevyrejyoybkqftu\"],\"folder\":{\"name\":\"m\"},\"\":{\"wsicvwqzoc\":\"datavvbucnnrovomep\"}}")
            .toObject(OdbcTableDataset.class);
        Assertions.assertEquals("dz", model.description());
        Assertions.assertEquals("iaffj", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.SECURE_STRING, model.parameters().get("froefq").type());
        Assertions.assertEquals("m", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        OdbcTableDataset model = new OdbcTableDataset().withDescription("dz")
            .withStructure("datalooulpozm")
            .withSchema("datahyclxrsidoebldp")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("iaffj")
                .withParameters(mapOf("x", "datanhrevimxm", "wdsoqtbfkvuozbzc", "datajppitygv", "urlcydjhtkjs",
                    "datanqekwankl", "lr", "datarwiyndurdonkgobx")))
            .withParameters(mapOf("froefq",
                new ParameterSpecification().withType(ParameterType.SECURE_STRING)
                    .withDefaultValue("datarswknpdrgnmza")))
            .withAnnotations(Arrays.asList("dataevyrejyoybkqftu"))
            .withFolder(new DatasetFolder().withName("m"))
            .withTableName("datamunwjivtbuszbdjr");
        model = BinaryData.fromObject(model).toObject(OdbcTableDataset.class);
        Assertions.assertEquals("dz", model.description());
        Assertions.assertEquals("iaffj", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.SECURE_STRING, model.parameters().get("froefq").type());
        Assertions.assertEquals("m", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
