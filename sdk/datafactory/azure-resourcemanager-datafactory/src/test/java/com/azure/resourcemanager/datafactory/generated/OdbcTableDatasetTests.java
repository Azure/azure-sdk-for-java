// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.OdbcTableDataset;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class OdbcTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        OdbcTableDataset model = BinaryData.fromString(
            "{\"type\":\"OdbcTable\",\"typeProperties\":{\"tableName\":\"dataizp\"},\"description\":\"fxzspfyvslazippl\",\"structure\":\"datatdumjtycildrzn\",\"schema\":\"dataxozqthkwxfugfziz\",\"linkedServiceName\":{\"referenceName\":\"xduyjnqzbrqcakm\",\"parameters\":{\"nsbqoitwhmuc\":\"dataviyjuca\",\"xy\":\"dataiuh\",\"ycudus\":\"dataehyklelyqdvpqfbx\",\"vfopkyl\":\"datamtxqlefnohey\"}},\"parameters\":{\"w\":{\"type\":\"SecureString\",\"defaultValue\":\"datanj\"}},\"annotations\":[\"datafwtwrsvevc\",\"datae\",\"dataswxhqhgkhtbzv\"],\"folder\":{\"name\":\"evvjncpmyhtxg\"},\"\":{\"bcyjrtalqee\":\"dataghcmixmlwkfe\",\"tomsgoihlqwbywaa\":\"dataudfyimooaez\"}}")
            .toObject(OdbcTableDataset.class);
        Assertions.assertEquals("fxzspfyvslazippl", model.description());
        Assertions.assertEquals("xduyjnqzbrqcakm", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.SECURE_STRING, model.parameters().get("w").type());
        Assertions.assertEquals("evvjncpmyhtxg", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        OdbcTableDataset model = new OdbcTableDataset().withDescription("fxzspfyvslazippl")
            .withStructure("datatdumjtycildrzn")
            .withSchema("dataxozqthkwxfugfziz")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("xduyjnqzbrqcakm")
                .withParameters(mapOf("nsbqoitwhmuc", "dataviyjuca", "xy", "dataiuh", "ycudus", "dataehyklelyqdvpqfbx",
                    "vfopkyl", "datamtxqlefnohey")))
            .withParameters(mapOf("w",
                new ParameterSpecification().withType(ParameterType.SECURE_STRING).withDefaultValue("datanj")))
            .withAnnotations(Arrays.asList("datafwtwrsvevc", "datae", "dataswxhqhgkhtbzv"))
            .withFolder(new DatasetFolder().withName("evvjncpmyhtxg"))
            .withTableName("dataizp");
        model = BinaryData.fromObject(model).toObject(OdbcTableDataset.class);
        Assertions.assertEquals("fxzspfyvslazippl", model.description());
        Assertions.assertEquals("xduyjnqzbrqcakm", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.SECURE_STRING, model.parameters().get("w").type());
        Assertions.assertEquals("evvjncpmyhtxg", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
