// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.CosmosDbMongoDbApiSource;
import com.azure.resourcemanager.datafactory.models.MongoDbCursorMethodsProperties;
import java.util.HashMap;
import java.util.Map;

public final class CosmosDbMongoDbApiSourceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CosmosDbMongoDbApiSource model = BinaryData.fromString(
            "{\"type\":\"CosmosDbMongoDbApiSource\",\"filter\":\"datacugchtwxifudlrxb\",\"cursorMethods\":{\"project\":\"datatpvgmqzitcuvmllt\",\"sort\":\"dataufqsfpzeszveg\",\"skip\":\"databmyvgmbirvv\",\"limit\":\"databqxisavktuxw\",\"\":{\"cdymoqvcjkrynzi\":\"datahibridagwu\"}},\"batchSize\":\"datamhedhry\",\"queryTimeout\":\"dataagvuioxjwzt\",\"additionalColumns\":\"dataotllfzcvhf\",\"sourceRetryCount\":\"dataccffsbz\",\"sourceRetryWait\":\"datatfxq\",\"maxConcurrentConnections\":\"dataj\",\"disableMetricsCollection\":\"dataud\",\"\":{\"hpzvqzmlfer\":\"datatavb\",\"nnqudexnicqu\":\"datawh\"}}")
            .toObject(CosmosDbMongoDbApiSource.class);
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CosmosDbMongoDbApiSource model = new CosmosDbMongoDbApiSource().withSourceRetryCount("dataccffsbz")
            .withSourceRetryWait("datatfxq")
            .withMaxConcurrentConnections("dataj")
            .withDisableMetricsCollection("dataud")
            .withFilter("datacugchtwxifudlrxb")
            .withCursorMethods(new MongoDbCursorMethodsProperties().withProject("datatpvgmqzitcuvmllt")
                .withSort("dataufqsfpzeszveg")
                .withSkip("databmyvgmbirvv")
                .withLimit("databqxisavktuxw")
                .withAdditionalProperties(mapOf()))
            .withBatchSize("datamhedhry")
            .withQueryTimeout("dataagvuioxjwzt")
            .withAdditionalColumns("dataotllfzcvhf");
        model = BinaryData.fromObject(model).toObject(CosmosDbMongoDbApiSource.class);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
