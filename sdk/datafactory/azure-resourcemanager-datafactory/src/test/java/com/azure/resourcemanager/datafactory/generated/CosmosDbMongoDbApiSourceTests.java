// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.CosmosDbMongoDbApiSource;
import com.azure.resourcemanager.datafactory.models.MongoDbCursorMethodsProperties;
import java.util.HashMap;
import java.util.Map;

public final class CosmosDbMongoDbApiSourceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CosmosDbMongoDbApiSource model =
            BinaryData
                .fromString(
                    "{\"type\":\"CosmosDbMongoDbApiSource\",\"filter\":\"datagabsfjrjzdq\",\"cursorMethods\":{\"project\":\"dataor\",\"sort\":\"datadibepgfrbijoehh\",\"skip\":\"datawsgqziwooet\",\"limit\":\"datassyazmmbuxqtokck\",\"\":{\"yruh\":\"dataftqk\"}},\"batchSize\":\"datawucmqfurbtbogxly\",\"queryTimeout\":\"databvxjguwtsfi\",\"additionalColumns\":\"dataiznbif\",\"sourceRetryCount\":\"dataix\",\"sourceRetryWait\":\"datakj\",\"maxConcurrentConnections\":\"dataxl\",\"disableMetricsCollection\":\"datamvrblj\",\"\":{\"vhtzidzqrpfhzxk\":\"datasaskullvtsauj\",\"bnmthxcmxqdexnkp\":\"dataygkuidgwdhawjco\",\"pnjgiumuztbcjt\":\"dataoxcmsmzy\",\"ehmvrveurpzrysef\":\"datamcnrgwgcstozrv\"}}")
                .toObject(CosmosDbMongoDbApiSource.class);
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CosmosDbMongoDbApiSource model =
            new CosmosDbMongoDbApiSource()
                .withSourceRetryCount("dataix")
                .withSourceRetryWait("datakj")
                .withMaxConcurrentConnections("dataxl")
                .withDisableMetricsCollection("datamvrblj")
                .withFilter("datagabsfjrjzdq")
                .withCursorMethods(
                    new MongoDbCursorMethodsProperties()
                        .withProject("dataor")
                        .withSort("datadibepgfrbijoehh")
                        .withSkip("datawsgqziwooet")
                        .withLimit("datassyazmmbuxqtokck")
                        .withAdditionalProperties(mapOf()))
                .withBatchSize("datawucmqfurbtbogxly")
                .withQueryTimeout("databvxjguwtsfi")
                .withAdditionalColumns("dataiznbif");
        model = BinaryData.fromObject(model).toObject(CosmosDbMongoDbApiSource.class);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
