// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.SybaseTableDataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SybaseTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SybaseTableDataset model = BinaryData.fromString(
            "{\"type\":\"SybaseTable\",\"typeProperties\":{\"tableName\":\"datatxa\"},\"description\":\"ujdbq\",\"structure\":\"datayexb\",\"schema\":\"datagxqqqasfeooqftp\",\"linkedServiceName\":{\"referenceName\":\"evtarphklqlii\",\"parameters\":{\"wgjnofgij\":\"datan\",\"zmwyw\":\"datadgsebjuymtevae\",\"edogzougxbxx\":\"datarjkejv\"}},\"parameters\":{\"mtenfdvdoe\":{\"type\":\"String\",\"defaultValue\":\"dataphivfh\"}},\"annotations\":[\"datawusrjzhdt\",\"datasyfezfsmyljd\",\"datayyrwnmwtqi\"],\"folder\":{\"name\":\"nnkynkstd\"},\"\":{\"wvaosckfavhk\":\"datahjfphfxaqjyihjc\",\"weifdyfa\":\"datapsp\"}}")
            .toObject(SybaseTableDataset.class);
        Assertions.assertEquals("ujdbq", model.description());
        Assertions.assertEquals("evtarphklqlii", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("mtenfdvdoe").type());
        Assertions.assertEquals("nnkynkstd", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SybaseTableDataset model = new SybaseTableDataset().withDescription("ujdbq")
            .withStructure("datayexb")
            .withSchema("datagxqqqasfeooqftp")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("evtarphklqlii")
                .withParameters(
                    mapOf("wgjnofgij", "datan", "zmwyw", "datadgsebjuymtevae", "edogzougxbxx", "datarjkejv")))
            .withParameters(mapOf("mtenfdvdoe",
                new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("dataphivfh")))
            .withAnnotations(Arrays.asList("datawusrjzhdt", "datasyfezfsmyljd", "datayyrwnmwtqi"))
            .withFolder(new DatasetFolder().withName("nnkynkstd"))
            .withTableName("datatxa");
        model = BinaryData.fromObject(model).toObject(SybaseTableDataset.class);
        Assertions.assertEquals("ujdbq", model.description());
        Assertions.assertEquals("evtarphklqlii", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("mtenfdvdoe").type());
        Assertions.assertEquals("nnkynkstd", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
