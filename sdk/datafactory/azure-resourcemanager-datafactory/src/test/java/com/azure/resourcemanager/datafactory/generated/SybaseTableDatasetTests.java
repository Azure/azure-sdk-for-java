// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.SybaseTableDataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SybaseTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SybaseTableDataset model =
            BinaryData
                .fromString(
                    "{\"type\":\"SybaseTable\",\"typeProperties\":{\"tableName\":\"dataokez\"},\"description\":\"ezknfzqnzbflbqmh\",\"structure\":\"datayxxvwedhagqbbse\",\"schema\":\"dataayuflmsyz\",\"linkedServiceName\":{\"referenceName\":\"dcrolrze\",\"parameters\":{\"ivt\":\"datamphzkymunw\",\"wdalisd\":\"datauszbdjrdfeuj\",\"dz\":\"dataqngca\",\"p\":\"datanloou\"}},\"parameters\":{\"iaffj\":{\"type\":\"Object\",\"defaultValue\":\"datahyclxrsidoebldp\"},\"x\":{\"type\":\"Bool\",\"defaultValue\":\"datanhrevimxm\"}},\"annotations\":[\"datapitygv\",\"datawdsoqtbfkvuozbzc\"],\"folder\":{\"name\":\"ekwanklp\"},\"\":{\"kjse\":\"datacydjh\",\"rdonkgobx\":\"datawiynd\",\"olenrswknpdr\":\"datalr\"}}")
                .toObject(SybaseTableDataset.class);
        Assertions.assertEquals("ezknfzqnzbflbqmh", model.description());
        Assertions.assertEquals("dcrolrze", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.OBJECT, model.parameters().get("iaffj").type());
        Assertions.assertEquals("ekwanklp", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SybaseTableDataset model =
            new SybaseTableDataset()
                .withDescription("ezknfzqnzbflbqmh")
                .withStructure("datayxxvwedhagqbbse")
                .withSchema("dataayuflmsyz")
                .withLinkedServiceName(
                    new LinkedServiceReference()
                        .withReferenceName("dcrolrze")
                        .withParameters(
                            mapOf(
                                "ivt",
                                "datamphzkymunw",
                                "wdalisd",
                                "datauszbdjrdfeuj",
                                "dz",
                                "dataqngca",
                                "p",
                                "datanloou")))
                .withParameters(
                    mapOf(
                        "iaffj",
                        new ParameterSpecification()
                            .withType(ParameterType.OBJECT)
                            .withDefaultValue("datahyclxrsidoebldp"),
                        "x",
                        new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("datanhrevimxm")))
                .withAnnotations(Arrays.asList("datapitygv", "datawdsoqtbfkvuozbzc"))
                .withFolder(new DatasetFolder().withName("ekwanklp"))
                .withTableName("dataokez");
        model = BinaryData.fromObject(model).toObject(SybaseTableDataset.class);
        Assertions.assertEquals("ezknfzqnzbflbqmh", model.description());
        Assertions.assertEquals("dcrolrze", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.OBJECT, model.parameters().get("iaffj").type());
        Assertions.assertEquals("ekwanklp", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
