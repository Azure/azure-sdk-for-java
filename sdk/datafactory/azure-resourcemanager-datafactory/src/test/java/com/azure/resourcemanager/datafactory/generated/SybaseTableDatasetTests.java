// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.SybaseTableDataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SybaseTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SybaseTableDataset model = BinaryData.fromString(
            "{\"type\":\"vxjdqosxzmdz\",\"typeProperties\":{\"tableName\":\"databk\"},\"description\":\"bqfufke\",\"structure\":\"datafkicxhsevmnkggh\",\"schema\":\"dataryjok\",\"linkedServiceName\":{\"referenceName\":\"lwvbjsarxs\",\"parameters\":{\"gieabbf\":\"datapabwbpzgfgqpudhg\",\"avlozu\":\"datax\",\"jsfmaxcebnbe\":\"datagsnuhwy\"}},\"parameters\":{\"v\":{\"type\":\"String\",\"defaultValue\":\"dataqqerwqxpj\"},\"httuobrx\":{\"type\":\"Array\",\"defaultValue\":\"dataf\"},\"cwtfmabvbmn\":{\"type\":\"Int\",\"defaultValue\":\"dataytebjkjge\"}},\"annotations\":[\"dataofxfmhlvyqnslbq\",\"datamlqkiekhj\",\"dataqqrugwespscvs\"],\"folder\":{\"name\":\"tluwozfvzasupc\"},\"\":{\"cgmlmpn\":\"dataxcvwioqhc\"}}")
            .toObject(SybaseTableDataset.class);
        Assertions.assertEquals("bqfufke", model.description());
        Assertions.assertEquals("lwvbjsarxs", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("v").type());
        Assertions.assertEquals("tluwozfvzasupc", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SybaseTableDataset model = new SybaseTableDataset().withDescription("bqfufke")
            .withStructure("datafkicxhsevmnkggh")
            .withSchema("dataryjok")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("lwvbjsarxs")
                .withParameters(
                    mapOf("gieabbf", "datapabwbpzgfgqpudhg", "avlozu", "datax", "jsfmaxcebnbe", "datagsnuhwy")))
            .withParameters(mapOf("v",
                new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("dataqqerwqxpj"),
                "httuobrx", new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("dataf"),
                "cwtfmabvbmn",
                new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("dataytebjkjge")))
            .withAnnotations(Arrays.asList("dataofxfmhlvyqnslbq", "datamlqkiekhj", "dataqqrugwespscvs"))
            .withFolder(new DatasetFolder().withName("tluwozfvzasupc"))
            .withTableName("databk");
        model = BinaryData.fromObject(model).toObject(SybaseTableDataset.class);
        Assertions.assertEquals("bqfufke", model.description());
        Assertions.assertEquals("lwvbjsarxs", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("v").type());
        Assertions.assertEquals("tluwozfvzasupc", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
