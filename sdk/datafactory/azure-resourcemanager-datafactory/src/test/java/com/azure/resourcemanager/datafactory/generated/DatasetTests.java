// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.Dataset;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        Dataset model = BinaryData.fromString(
            "{\"type\":\"m\",\"description\":\"rtuzqogs\",\"structure\":\"datanevfdnw\",\"schema\":\"datamewzsyyc\",\"linkedServiceName\":{\"referenceName\":\"uzsoi\",\"parameters\":{\"qbrqubpaxhexiili\":\"datadpfrxtrthzvaytdw\"}},\"parameters\":{\"oruzfgsquyfxrxx\":{\"type\":\"String\",\"defaultValue\":\"datairqtdqoa\"},\"lwnwxuqlcvydyp\":{\"type\":\"SecureString\",\"defaultValue\":\"datatramxjez\"}},\"annotations\":[\"dataooaojkniodkooebw\",\"dataujhemmsbvdkcrodt\",\"datainfwjlfltkacjve\",\"datakdlfoa\"],\"folder\":{\"name\":\"kfpagao\"},\"\":{\"jnsjervtiagxsd\":\"datalpqblylsyxk\",\"beyvpnqicvinvkjj\":\"datazuempsbzkf\",\"yhmlwpaztzp\":\"datadxrbuukzcle\",\"ckw\":\"datafn\"}}")
            .toObject(Dataset.class);
        Assertions.assertEquals("rtuzqogs", model.description());
        Assertions.assertEquals("uzsoi", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("oruzfgsquyfxrxx").type());
        Assertions.assertEquals("kfpagao", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        Dataset model = new Dataset().withDescription("rtuzqogs")
            .withStructure("datanevfdnw")
            .withSchema("datamewzsyyc")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("uzsoi")
                .withParameters(mapOf("qbrqubpaxhexiili", "datadpfrxtrthzvaytdw")))
            .withParameters(mapOf("oruzfgsquyfxrxx",
                new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("datairqtdqoa"),
                "lwnwxuqlcvydyp",
                new ParameterSpecification().withType(ParameterType.SECURE_STRING).withDefaultValue("datatramxjez")))
            .withAnnotations(
                Arrays.asList("dataooaojkniodkooebw", "dataujhemmsbvdkcrodt", "datainfwjlfltkacjve", "datakdlfoa"))
            .withFolder(new DatasetFolder().withName("kfpagao"))
            .withAdditionalProperties(mapOf("type", "m"));
        model = BinaryData.fromObject(model).toObject(Dataset.class);
        Assertions.assertEquals("rtuzqogs", model.description());
        Assertions.assertEquals("uzsoi", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("oruzfgsquyfxrxx").type());
        Assertions.assertEquals("kfpagao", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
