// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.Dataset;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        Dataset model =
            BinaryData
                .fromString(
                    "{\"type\":\"Dataset\",\"description\":\"mjsjqb\",\"structure\":\"datahyxxrwlycoduhpk\",\"schema\":\"datagymare\",\"linkedServiceName\":{\"referenceName\":\"n\",\"parameters\":{\"dgssofwqmzqal\":\"dataqugjhkycube\",\"cqqudf\":\"datarmnjijpx\",\"ayffim\":\"databyxbaaabjy\",\"gsexne\":\"datazrtuzq\"}},\"parameters\":{\"ewzsyyceuzsoib\":{\"type\":\"Int\",\"defaultValue\":\"datanw\"}},\"annotations\":[\"datapfrxtrthzvay\",\"datadwkqbrq\",\"databpaxhexiilivpdt\",\"datairqtdqoa\"],\"folder\":{\"name\":\"uzf\"},\"\":{\"zwl\":\"datauyfxrxxleptramxj\",\"tdooaoj\":\"datanwxuqlcvydyp\"}}")
                .toObject(Dataset.class);
        Assertions.assertEquals("mjsjqb", model.description());
        Assertions.assertEquals("n", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("ewzsyyceuzsoib").type());
        Assertions.assertEquals("uzf", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        Dataset model =
            new Dataset()
                .withDescription("mjsjqb")
                .withStructure("datahyxxrwlycoduhpk")
                .withSchema("datagymare")
                .withLinkedServiceName(
                    new LinkedServiceReference()
                        .withReferenceName("n")
                        .withParameters(
                            mapOf(
                                "dgssofwqmzqal",
                                "dataqugjhkycube",
                                "cqqudf",
                                "datarmnjijpx",
                                "ayffim",
                                "databyxbaaabjy",
                                "gsexne",
                                "datazrtuzq")))
                .withParameters(
                    mapOf(
                        "ewzsyyceuzsoib",
                        new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("datanw")))
                .withAnnotations(
                    Arrays.asList("datapfrxtrthzvay", "datadwkqbrq", "databpaxhexiilivpdt", "datairqtdqoa"))
                .withFolder(new DatasetFolder().withName("uzf"))
                .withAdditionalProperties(mapOf("type", "Dataset"));
        model = BinaryData.fromObject(model).toObject(Dataset.class);
        Assertions.assertEquals("mjsjqb", model.description());
        Assertions.assertEquals("n", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("ewzsyyceuzsoib").type());
        Assertions.assertEquals("uzf", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
