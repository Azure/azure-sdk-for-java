// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.datafactory.DataFactoryManager;
import com.azure.resourcemanager.datafactory.models.ChangeDataCaptureFolder;
import com.azure.resourcemanager.datafactory.models.ChangeDataCaptureResource;
import com.azure.resourcemanager.datafactory.models.ConnectionType;
import com.azure.resourcemanager.datafactory.models.DataMapperMapping;
import com.azure.resourcemanager.datafactory.models.FrequencyType;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.MapperConnection;
import com.azure.resourcemanager.datafactory.models.MapperDslConnectorProperties;
import com.azure.resourcemanager.datafactory.models.MapperPolicy;
import com.azure.resourcemanager.datafactory.models.MapperPolicyRecurrence;
import com.azure.resourcemanager.datafactory.models.MapperSourceConnectionsInfo;
import com.azure.resourcemanager.datafactory.models.MapperTable;
import com.azure.resourcemanager.datafactory.models.MapperTargetConnectionsInfo;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ChangeDataCapturesCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"properties\":{\"folder\":{\"name\":\"jbzekrwpwyiy\"},\"description\":\"rcsekhuzim\",\"sourceConnectionsInfo\":[{\"sourceEntities\":[{},{},{},{}],\"connection\":{\"linkedService\":{\"referenceName\":\"suqpraqjscnilpvx\"},\"linkedServiceType\":\"pewtby\",\"type\":\"linkedservicetype\",\"isInlineDataset\":false,\"commonDslConnectorProperties\":[{},{},{},{}]}},{\"sourceEntities\":[{},{},{}],\"connection\":{\"linkedService\":{\"referenceName\":\"hrvembit\"},\"linkedServiceType\":\"axieuntceekh\",\"type\":\"linkedservicetype\",\"isInlineDataset\":false,\"commonDslConnectorProperties\":[{},{},{}]}}],\"targetConnectionsInfo\":[{\"targetEntities\":[{},{}],\"connection\":{\"linkedService\":{\"referenceName\":\"fbfrzrqsi\"},\"linkedServiceType\":\"b\",\"type\":\"linkedservicetype\",\"isInlineDataset\":false,\"commonDslConnectorProperties\":[{},{},{},{}]},\"dataMapperMappings\":[{}],\"relationships\":[\"datactmilpztwzj\",\"databaudtppsu\",\"datakntnvgwgtgxgg\"]},{\"targetEntities\":[{},{},{}],\"connection\":{\"linkedService\":{\"referenceName\":\"l\"},\"linkedServiceType\":\"zqxcygevgjzrsb\",\"type\":\"linkedservicetype\",\"isInlineDataset\":true,\"commonDslConnectorProperties\":[{},{},{}]},\"dataMapperMappings\":[{}],\"relationships\":[\"datafbmwzbfpclenioz\",\"dataruqhrpwz\"]},{\"targetEntities\":[{},{}],\"connection\":{\"linkedService\":{\"referenceName\":\"lwalldeyorhg\"},\"linkedServiceType\":\"dvchsvrpno\",\"type\":\"linkedservicetype\",\"isInlineDataset\":false,\"commonDslConnectorProperties\":[{},{}]},\"dataMapperMappings\":[{},{},{}],\"relationships\":[\"datas\",\"databzrfmfad\",\"datafkjdw\",\"datagyooewyvwwvk\"]},{\"targetEntities\":[{},{},{},{}],\"connection\":{\"linkedService\":{\"referenceName\":\"hkhszesxsyrvj\"},\"linkedServiceType\":\"pknbwh\",\"type\":\"linkedservicetype\",\"isInlineDataset\":false,\"commonDslConnectorProperties\":[{}]},\"dataMapperMappings\":[{}],\"relationships\":[\"dataf\",\"datashjlpznx\",\"dataymdqljngroawltab\",\"datacmrreajpy\"]}],\"policy\":{\"mode\":\"trnogfyaim\",\"recurrence\":{\"frequency\":\"Hour\",\"interval\":1551436161}},\"allowVNetOverride\":false,\"status\":\"lwubkmdusnwok\"},\"name\":\"x\",\"type\":\"auk\",\"etag\":\"zlfpkinr\",\"\":{\"lzwykkr\":\"datalwrnigztxcjnwz\",\"npgqzmgivk\":\"dataqcqg\",\"ihjlzjt\":\"datahiaaklxpwhv\"},\"id\":\"nrfuabqotyoa\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        DataFactoryManager manager = DataFactoryManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        ChangeDataCaptureResource response
            = manager
                .changeDataCaptures().define(
                    "mokaqnu")
                .withExistingFactory("slifcwj", "yfdjzefkzcajav")
                .withSourceConnectionsInfo(
                    Arrays.asList(
                        new MapperSourceConnectionsInfo()
                            .withSourceEntities(Arrays.asList(new MapperTable(), new MapperTable(), new MapperTable()))
                            .withConnection(new MapperConnection()
                                .withLinkedService(new LinkedServiceReference().withReferenceName("jxycdryjgx"))
                                .withLinkedServiceType("an").withType(ConnectionType.LINKEDSERVICETYPE)
                                .withIsInlineDataset(true).withCommonDslConnectorProperties(Arrays
                                    .asList(new MapperDslConnectorProperties(), new MapperDslConnectorProperties()))),
                        new MapperSourceConnectionsInfo()
                            .withSourceEntities(Arrays.asList(new MapperTable(), new MapperTable(), new MapperTable()))
                            .withConnection(new MapperConnection()
                                .withLinkedService(new LinkedServiceReference().withReferenceName("vb"))
                                .withLinkedServiceType("zkhp").withType(ConnectionType.LINKEDSERVICETYPE)
                                .withIsInlineDataset(true).withCommonDslConnectorProperties(Arrays
                                    .asList(new MapperDslConnectorProperties()))),
                        new MapperSourceConnectionsInfo().withSourceEntities(Arrays.asList(new MapperTable()))
                            .withConnection(
                                new MapperConnection()
                                    .withLinkedService(new LinkedServiceReference().withReferenceName("sbccxb"))
                                    .withLinkedServiceType("kussldjsb").withType(ConnectionType.LINKEDSERVICETYPE)
                                    .withIsInlineDataset(false)
                                    .withCommonDslConnectorProperties(Arrays
                                        .asList(new MapperDslConnectorProperties(), new MapperDslConnectorProperties(),
                                            new MapperDslConnectorProperties())))))
                .withTargetConnectionsInfo(
                    Arrays.asList(
                        new MapperTargetConnectionsInfo()
                            .withTargetEntities(Arrays.asList(new MapperTable(), new MapperTable()))
                            .withConnection(new MapperConnection()
                                .withLinkedService(new LinkedServiceReference().withReferenceName("ckt"))
                                .withLinkedServiceType("eraqlmfyhwdog").withType(ConnectionType.LINKEDSERVICETYPE)
                                .withIsInlineDataset(false)
                                .withCommonDslConnectorProperties(Arrays.asList(new MapperDslConnectorProperties())))
                            .withDataMapperMappings(Arrays.asList(new DataMapperMapping(), new DataMapperMapping(),
                                new DataMapperMapping(), new DataMapperMapping()))
                            .withRelationships(Arrays.asList("dataeyox")),
                        new MapperTargetConnectionsInfo()
                            .withTargetEntities(Arrays.asList(new MapperTable(), new MapperTable()))
                            .withConnection(new MapperConnection()
                                .withLinkedService(new LinkedServiceReference().withReferenceName("sr"))
                                .withLinkedServiceType("mzswgpxhsbpb").withType(ConnectionType.LINKEDSERVICETYPE)
                                .withIsInlineDataset(false)
                                .withCommonDslConnectorProperties(Arrays.asList(new MapperDslConnectorProperties())))
                            .withDataMapperMappings(Arrays.asList(new DataMapperMapping(), new DataMapperMapping(),
                                new DataMapperMapping(), new DataMapperMapping()))
                            .withRelationships(Arrays.asList("datagaqyrtbniysp", "dataghnnxkouvsmmi", "datafiigslbri",
                                "datawknncdfc"))))
                .withPolicy(new MapperPolicy().withMode("yulmxonobozg").withRecurrence(
                    new MapperPolicyRecurrence().withFrequency(FrequencyType.MINUTE).withInterval(337781917)))
                .withFolder(new ChangeDataCaptureFolder().withName("gymbefvuutlirzr")).withDescription("lbdezvmfuhearh")
                .withAllowVNetOverride(false).withStatus("pzqwcr").withIfMatch("wxhpufvucn").create();

        Assertions.assertEquals("nrfuabqotyoa", response.id());
        Assertions.assertEquals("jbzekrwpwyiy", response.folder().name());
        Assertions.assertEquals("rcsekhuzim", response.description());
        Assertions.assertEquals("suqpraqjscnilpvx",
            response.sourceConnectionsInfo().get(0).connection().linkedService().referenceName());
        Assertions.assertEquals("pewtby", response.sourceConnectionsInfo().get(0).connection().linkedServiceType());
        Assertions.assertEquals(ConnectionType.LINKEDSERVICETYPE,
            response.sourceConnectionsInfo().get(0).connection().type());
        Assertions.assertEquals(false, response.sourceConnectionsInfo().get(0).connection().isInlineDataset());
        Assertions.assertEquals("fbfrzrqsi",
            response.targetConnectionsInfo().get(0).connection().linkedService().referenceName());
        Assertions.assertEquals("b", response.targetConnectionsInfo().get(0).connection().linkedServiceType());
        Assertions.assertEquals(ConnectionType.LINKEDSERVICETYPE,
            response.targetConnectionsInfo().get(0).connection().type());
        Assertions.assertEquals(false, response.targetConnectionsInfo().get(0).connection().isInlineDataset());
        Assertions.assertEquals("trnogfyaim", response.policy().mode());
        Assertions.assertEquals(FrequencyType.HOUR, response.policy().recurrence().frequency());
        Assertions.assertEquals(1551436161, response.policy().recurrence().interval());
        Assertions.assertEquals(false, response.allowVNetOverride());
        Assertions.assertEquals("lwubkmdusnwok", response.status());
    }
}
