// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.datafactory.DataFactoryManager;
import com.azure.resourcemanager.datafactory.models.ChangeDataCaptureFolder;
import com.azure.resourcemanager.datafactory.models.ChangeDataCaptureResource;
import com.azure.resourcemanager.datafactory.models.ConnectionType;
import com.azure.resourcemanager.datafactory.models.DataMapperMapping;
import com.azure.resourcemanager.datafactory.models.FrequencyType;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.MapperConnection;
import com.azure.resourcemanager.datafactory.models.MapperDslConnectorProperties;
import com.azure.resourcemanager.datafactory.models.MapperPolicy;
import com.azure.resourcemanager.datafactory.models.MapperPolicyRecurrence;
import com.azure.resourcemanager.datafactory.models.MapperSourceConnectionsInfo;
import com.azure.resourcemanager.datafactory.models.MapperTable;
import com.azure.resourcemanager.datafactory.models.MapperTargetConnectionsInfo;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ChangeDataCapturesCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"folder\":{\"name\":\"szisd\"},\"description\":\"pimzwzxtshv\",\"sourceConnectionsInfo\":[{\"sourceEntities\":[{},{}],\"connection\":{\"linkedService\":{\"referenceName\":\"lkofxwbtlfxhhg\"},\"linkedServiceType\":\"cehzuozvu\",\"type\":\"linkedservicetype\",\"isInlineDataset\":false,\"commonDslConnectorProperties\":[{},{},{},{}]}},{\"sourceEntities\":[{},{},{}],\"connection\":{\"linkedService\":{\"referenceName\":\"nqzzadydnoetbku\"},\"linkedServiceType\":\"utwsabryo\",\"type\":\"linkedservicetype\",\"isInlineDataset\":true,\"commonDslConnectorProperties\":[{}]}},{\"sourceEntities\":[{},{},{},{}],\"connection\":{\"linkedService\":{\"referenceName\":\"etam\"},\"linkedServiceType\":\"dcwdpqzminxipozz\",\"type\":\"linkedservicetype\",\"isInlineDataset\":false,\"commonDslConnectorProperties\":[{},{}]}},{\"sourceEntities\":[{},{},{},{}],\"connection\":{\"linkedService\":{\"referenceName\":\"mzura\"},\"linkedServiceType\":\"ekpetxywerylj\",\"type\":\"linkedservicetype\",\"isInlineDataset\":false,\"commonDslConnectorProperties\":[{},{}]}}],\"targetConnectionsInfo\":[{\"targetEntities\":[{},{},{},{}],\"connection\":{\"linkedService\":{\"referenceName\":\"jknxxuw\"},\"linkedServiceType\":\"fjldshvaentatu\",\"type\":\"linkedservicetype\",\"isInlineDataset\":false,\"commonDslConnectorProperties\":[{},{},{},{}]},\"dataMapperMappings\":[{},{}],\"relationships\":[\"datauponspv\",\"datajjm\"]},{\"targetEntities\":[{}],\"connection\":{\"linkedService\":{\"referenceName\":\"cgelhy\"},\"linkedServiceType\":\"cwriibvtqq\",\"type\":\"linkedservicetype\",\"isInlineDataset\":true,\"commonDslConnectorProperties\":[{},{},{}]},\"dataMapperMappings\":[{},{},{},{}],\"relationships\":[\"dataunwnuzktmlkofm\",\"dataviq\"]},{\"targetEntities\":[{},{}],\"connection\":{\"linkedService\":{\"referenceName\":\"dztpcrgpyz\"},\"linkedServiceType\":\"rscbproevodo\",\"type\":\"linkedservicetype\",\"isInlineDataset\":false,\"commonDslConnectorProperties\":[{},{}]},\"dataMapperMappings\":[{}],\"relationships\":[\"datadfuptppdzad\",\"datazx\",\"datamyulgqf\"]},{\"targetEntities\":[{},{},{},{}],\"connection\":{\"linkedService\":{\"referenceName\":\"itzwyjklynxxgc\"},\"linkedServiceType\":\"okkiqccshf\",\"type\":\"linkedservicetype\",\"isInlineDataset\":true,\"commonDslConnectorProperties\":[{},{}]},\"dataMapperMappings\":[{},{}],\"relationships\":[\"dataqoaeshnzidczx\",\"dataxqgy\"]}],\"policy\":{\"mode\":\"bufhn\",\"recurrence\":{\"frequency\":\"Minute\",\"interval\":2006538711}},\"allowVNetOverride\":true,\"status\":\"eezsxyl\"},\"name\":\"fqy\",\"type\":\"bpjtypeinqptfh\",\"etag\":\"flrhssmfsbg\",\"\":{\"rs\":\"datawptay\",\"glsfzhvzyhqqhioi\":\"datarrkmucrg\",\"dwciewoixkfxguis\":\"dataeaimvezltzpyj\",\"de\":\"dataojqgxeywaee\"},\"id\":\"bzrf\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DataFactoryManager manager = DataFactoryManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        ChangeDataCaptureResource response
            = manager.changeDataCaptures()
                .define("wvphp")
                .withExistingFactory("u", "pxekl")
                .withSourceConnectionsInfo(
                    Arrays.asList(
                        new MapperSourceConnectionsInfo().withSourceEntities(Arrays.asList(new MapperTable()))
                            .withConnection(new MapperConnection()
                                .withLinkedService(new LinkedServiceReference().withReferenceName("pazlbn"))
                                .withLinkedServiceType("ksvramim")
                                .withType(ConnectionType.LINKEDSERVICETYPE)
                                .withIsInlineDataset(false)
                                .withCommonDslConnectorProperties(Arrays.asList(new MapperDslConnectorProperties()))),
                        new MapperSourceConnectionsInfo()
                            .withSourceEntities(Arrays.asList(new MapperTable(), new MapperTable(), new MapperTable(),
                                new MapperTable()))
                            .withConnection(new MapperConnection()
                                .withLinkedService(new LinkedServiceReference().withReferenceName("atimalsh"))
                                .withLinkedServiceType("dna")
                                .withType(ConnectionType.LINKEDSERVICETYPE)
                                .withIsInlineDataset(true)
                                .withCommonDslConnectorProperties(Arrays.asList(new MapperDslConnectorProperties(),
                                    new MapperDslConnectorProperties()))),
                        new MapperSourceConnectionsInfo()
                            .withSourceEntities(Arrays.asList(new MapperTable(), new MapperTable()))
                            .withConnection(
                                new MapperConnection()
                                    .withLinkedService(new LinkedServiceReference().withReferenceName("wocugfllcai"))
                                    .withLinkedServiceType("ktqfp")
                                    .withType(ConnectionType.LINKEDSERVICETYPE)
                                    .withIsInlineDataset(false)
                                    .withCommonDslConnectorProperties(Arrays.asList(new MapperDslConnectorProperties(),
                                        new MapperDslConnectorProperties()))),
                        new MapperSourceConnectionsInfo()
                            .withSourceEntities(Arrays.asList(new MapperTable(), new MapperTable(), new MapperTable(),
                                new MapperTable()))
                            .withConnection(new MapperConnection()
                                .withLinkedService(new LinkedServiceReference().withReferenceName("thw"))
                                .withLinkedServiceType("nglsrlwcfmhz")
                                .withType(ConnectionType.LINKEDSERVICETYPE)
                                .withIsInlineDataset(false)
                                .withCommonDslConnectorProperties(Arrays.asList(new MapperDslConnectorProperties(),
                                    new MapperDslConnectorProperties())))))
                .withTargetConnectionsInfo(Arrays.asList(
                    new MapperTargetConnectionsInfo()
                        .withTargetEntities(Arrays.asList(new MapperTable(), new MapperTable(), new MapperTable()))
                        .withConnection(new MapperConnection()
                            .withLinkedService(new LinkedServiceReference().withReferenceName("rclc"))
                            .withLinkedServiceType("kejncogooqwavrzi")
                            .withType(ConnectionType.LINKEDSERVICETYPE)
                            .withIsInlineDataset(true)
                            .withCommonDslConnectorProperties(Arrays.asList(new MapperDslConnectorProperties(),
                                new MapperDslConnectorProperties(), new MapperDslConnectorProperties())))
                        .withDataMapperMappings(
                            Arrays.asList(new DataMapperMapping(), new DataMapperMapping(), new DataMapperMapping()))
                        .withRelationships(
                            Arrays.asList("dataplgtqumuytavachs", "datakejuahevtfvvnin", "datapbkg", "datagwmb")),
                    new MapperTargetConnectionsInfo().withTargetEntities(Arrays.asList(new MapperTable()))
                        .withConnection(new MapperConnection()
                            .withLinkedService(new LinkedServiceReference().withReferenceName("mseswflyktrbgt"))
                            .withLinkedServiceType("imldceuhhludjwf")
                            .withType(ConnectionType.LINKEDSERVICETYPE)
                            .withIsInlineDataset(true)
                            .withCommonDslConnectorProperties(Arrays.asList(new MapperDslConnectorProperties())))
                        .withDataMapperMappings(
                            Arrays.asList(new DataMapperMapping(), new DataMapperMapping(), new DataMapperMapping()))
                        .withRelationships(Arrays.asList("datauryim", "datanhugttypgdlzuz"))))
                .withPolicy(new MapperPolicy().withMode("kcqparvylu")
                    .withRecurrence(
                        new MapperPolicyRecurrence().withFrequency(FrequencyType.HOUR).withInterval(2032913621)))
                .withFolder(new ChangeDataCaptureFolder().withName("ryvqwqanhfekk"))
                .withDescription("erbfuxbdtgjrssrb")
                .withAllowVNetOverride(true)
                .withStatus("qsx")
                .withIfMatch("wyzclashtgzlwqer")
                .create();

        Assertions.assertEquals("bzrf", response.id());
        Assertions.assertEquals("szisd", response.folder().name());
        Assertions.assertEquals("pimzwzxtshv", response.description());
        Assertions.assertEquals("lkofxwbtlfxhhg",
            response.sourceConnectionsInfo().get(0).connection().linkedService().referenceName());
        Assertions.assertEquals("cehzuozvu", response.sourceConnectionsInfo().get(0).connection().linkedServiceType());
        Assertions.assertEquals(ConnectionType.LINKEDSERVICETYPE,
            response.sourceConnectionsInfo().get(0).connection().type());
        Assertions.assertEquals(false, response.sourceConnectionsInfo().get(0).connection().isInlineDataset());
        Assertions.assertEquals("jknxxuw",
            response.targetConnectionsInfo().get(0).connection().linkedService().referenceName());
        Assertions.assertEquals("fjldshvaentatu",
            response.targetConnectionsInfo().get(0).connection().linkedServiceType());
        Assertions.assertEquals(ConnectionType.LINKEDSERVICETYPE,
            response.targetConnectionsInfo().get(0).connection().type());
        Assertions.assertEquals(false, response.targetConnectionsInfo().get(0).connection().isInlineDataset());
        Assertions.assertEquals("bufhn", response.policy().mode());
        Assertions.assertEquals(FrequencyType.MINUTE, response.policy().recurrence().frequency());
        Assertions.assertEquals(2006538711, response.policy().recurrence().interval());
        Assertions.assertEquals(true, response.allowVNetOverride());
        Assertions.assertEquals("eezsxyl", response.status());
    }
}
