// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.datafactory.DataFactoryManager;
import com.azure.resourcemanager.datafactory.models.ChangeDataCaptureFolder;
import com.azure.resourcemanager.datafactory.models.ChangeDataCaptureResource;
import com.azure.resourcemanager.datafactory.models.ConnectionType;
import com.azure.resourcemanager.datafactory.models.DataMapperMapping;
import com.azure.resourcemanager.datafactory.models.FrequencyType;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.MapperConnection;
import com.azure.resourcemanager.datafactory.models.MapperDslConnectorProperties;
import com.azure.resourcemanager.datafactory.models.MapperPolicy;
import com.azure.resourcemanager.datafactory.models.MapperPolicyRecurrence;
import com.azure.resourcemanager.datafactory.models.MapperSourceConnectionsInfo;
import com.azure.resourcemanager.datafactory.models.MapperTable;
import com.azure.resourcemanager.datafactory.models.MapperTargetConnectionsInfo;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ChangeDataCapturesCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"folder\":{\"name\":\"vb\"},\"description\":\"zkhp\",\"sourceConnectionsInfo\":[{\"sourceEntities\":[{},{},{}],\"connection\":{\"linkedService\":{\"referenceName\":\"vlvosbccxbbr\"},\"linkedServiceType\":\"ssl\",\"type\":\"linkedservicetype\",\"isInlineDataset\":true,\"commonDslConnectorProperties\":[{}]}},{\"sourceEntities\":[{},{}],\"connection\":{\"linkedService\":{\"referenceName\":\"aspglc\"},\"linkedServiceType\":\"raer\",\"type\":\"linkedservicetype\",\"isInlineDataset\":true,\"commonDslConnectorProperties\":[{},{},{},{}]}},{\"sourceEntities\":[{}],\"connection\":{\"linkedService\":{\"referenceName\":\"gchdqtlbnk\"},\"linkedServiceType\":\"yox\",\"type\":\"linkedservicetype\",\"isInlineDataset\":false,\"commonDslConnectorProperties\":[{}]}}],\"targetConnectionsInfo\":[{\"targetEntities\":[{},{},{}],\"connection\":{\"linkedService\":{\"referenceName\":\"swgpxhs\"},\"linkedServiceType\":\"bbk\",\"type\":\"linkedservicetype\",\"isInlineDataset\":false,\"commonDslConnectorProperties\":[{},{},{},{}]},\"dataMapperMappings\":[{},{},{},{}],\"relationships\":[\"dataqyrtbniyspbghnn\",\"datakouvs\",\"datamiq\"]},{\"targetEntities\":[{}],\"connection\":{\"linkedService\":{\"referenceName\":\"lbriawknncdfc\"},\"linkedServiceType\":\"yulmxonobozg\",\"type\":\"linkedservicetype\",\"isInlineDataset\":true,\"commonDslConnectorProperties\":[{}]},\"dataMapperMappings\":[{},{}],\"relationships\":[\"dataz\",\"datawcruczvdjuxijmaw\"]}],\"policy\":{\"mode\":\"mdfwexnjbdgls\",\"recurrence\":{\"frequency\":\"Second\",\"interval\":1811335760}},\"allowVNetOverride\":true,\"status\":\"qekvjwaqjps\"},\"name\":\"pkgvstwdczxgfvev\",\"type\":\"vkfm\",\"etag\":\"kluewthydgzlwbbf\",\"\":{\"zwioxar\":\"dataoywlvkp\",\"bzekrwpwyiyq\":\"dataxhpufvucnqym\",\"vudmps\":\"datarcsekhuzim\",\"tkpewtbyciedxsey\":\"dataqpraqjscnilpv\"},\"id\":\"hrvembit\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DataFactoryManager manager = DataFactoryManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        ChangeDataCaptureResource response
            = manager.changeDataCaptures()
                .define("ccaqoiifvind")
                .withExistingFactory("aydm", "lpdjtliil")
                .withSourceConnectionsInfo(
                    Arrays
                        .asList(new MapperSourceConnectionsInfo()
                            .withSourceEntities(Arrays.asList(new MapperTable(), new MapperTable(), new MapperTable()))
                            .withConnection(new MapperConnection()
                                .withLinkedService(new LinkedServiceReference().withReferenceName("iyngupphvo"))
                                .withLinkedServiceType("ocjsadbuvvpdj")
                                .withType(ConnectionType.LINKEDSERVICETYPE)
                                .withIsInlineDataset(true)
                                .withCommonDslConnectorProperties(Arrays.asList(new MapperDslConnectorProperties(),
                                    new MapperDslConnectorProperties(), new MapperDslConnectorProperties(),
                                    new MapperDslConnectorProperties())))))
                .withTargetConnectionsInfo(
                    Arrays
                        .asList(new MapperTargetConnectionsInfo().withTargetEntities(Arrays.asList(new MapperTable()))
                            .withConnection(new MapperConnection()
                                .withLinkedService(new LinkedServiceReference().withReferenceName("vz"))
                                .withLinkedServiceType("dfikduwqkhmabgzc")
                                .withType(ConnectionType.LINKEDSERVICETYPE)
                                .withIsInlineDataset(false)
                                .withCommonDslConnectorProperties(Arrays.asList(new MapperDslConnectorProperties(),
                                    new MapperDslConnectorProperties())))
                            .withDataMapperMappings(Arrays.asList(new DataMapperMapping(), new DataMapperMapping()))
                            .withRelationships(
                                Arrays.asList("datawfnlpjivtzshuzyy", "dataivr", "dataqiijkvops", "datamtxvnelw"))))
                .withPolicy(new MapperPolicy().withMode("dm")
                    .withRecurrence(
                        new MapperPolicyRecurrence().withFrequency(FrequencyType.SECOND).withInterval(52613163)))
                .withFolder(new ChangeDataCaptureFolder().withName("a"))
                .withDescription("jrznydcslydhp")
                .withAllowVNetOverride(false)
                .withStatus("fltuxwfwlf")
                .withIfMatch("reqfp")
                .create();

        Assertions.assertEquals("hrvembit", response.id());
        Assertions.assertEquals("vb", response.folder().name());
        Assertions.assertEquals("zkhp", response.description());
        Assertions.assertEquals("vlvosbccxbbr",
            response.sourceConnectionsInfo().get(0).connection().linkedService().referenceName());
        Assertions.assertEquals("ssl", response.sourceConnectionsInfo().get(0).connection().linkedServiceType());
        Assertions.assertEquals(ConnectionType.LINKEDSERVICETYPE,
            response.sourceConnectionsInfo().get(0).connection().type());
        Assertions.assertEquals(true, response.sourceConnectionsInfo().get(0).connection().isInlineDataset());
        Assertions.assertEquals("swgpxhs",
            response.targetConnectionsInfo().get(0).connection().linkedService().referenceName());
        Assertions.assertEquals("bbk", response.targetConnectionsInfo().get(0).connection().linkedServiceType());
        Assertions.assertEquals(ConnectionType.LINKEDSERVICETYPE,
            response.targetConnectionsInfo().get(0).connection().type());
        Assertions.assertEquals(false, response.targetConnectionsInfo().get(0).connection().isInlineDataset());
        Assertions.assertEquals("mdfwexnjbdgls", response.policy().mode());
        Assertions.assertEquals(FrequencyType.SECOND, response.policy().recurrence().frequency());
        Assertions.assertEquals(1811335760, response.policy().recurrence().interval());
        Assertions.assertEquals(true, response.allowVNetOverride());
        Assertions.assertEquals("qekvjwaqjps", response.status());
    }
}
