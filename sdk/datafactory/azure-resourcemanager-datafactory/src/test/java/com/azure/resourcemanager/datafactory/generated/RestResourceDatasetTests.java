// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.RestResourceDataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class RestResourceDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        RestResourceDataset model = BinaryData.fromString(
            "{\"type\":\"RestResource\",\"typeProperties\":{\"relativeUrl\":\"dataaefe\",\"requestMethod\":\"datavkxdbnmcvaqy\",\"requestBody\":\"datazdobuesdyvfxnz\",\"additionalHeaders\":{\"dpsegivytabvbbk\":\"datafupktw\"},\"paginationRules\":{\"wuuqbmenxcqsxwc\":\"datawgsltutbuve\"}},\"description\":\"kcrudekkbnjre\",\"structure\":\"dataptedeuenthshnfi\",\"schema\":\"datapgpkkhpjnglaqlm\",\"linkedServiceName\":{\"referenceName\":\"h\",\"parameters\":{\"cpvfpnrzikvoxloe\":\"datardlpxiwwg\",\"hpxukxgoyxon\":\"datahyfivxdifbwbli\"}},\"parameters\":{\"qrrldxfua\":{\"type\":\"Array\",\"defaultValue\":\"datarxros\"},\"eyrqve\":{\"type\":\"Bool\",\"defaultValue\":\"datawxatktwjrppi\"}},\"annotations\":[\"datadcizhvksb\",\"datajklwjp\"],\"folder\":{\"name\":\"ncw\"},\"\":{\"uduiqoom\":\"datapyeyzolbfnflytf\",\"opwsnliyznghuq\":\"dataswkq\",\"dwrgavtfyzse\":\"datagpdglkf\"}}")
            .toObject(RestResourceDataset.class);
        Assertions.assertEquals("kcrudekkbnjre", model.description());
        Assertions.assertEquals("h", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("qrrldxfua").type());
        Assertions.assertEquals("ncw", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        RestResourceDataset model = new RestResourceDataset().withDescription("kcrudekkbnjre")
            .withStructure("dataptedeuenthshnfi")
            .withSchema("datapgpkkhpjnglaqlm")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("h")
                .withParameters(mapOf("cpvfpnrzikvoxloe", "datardlpxiwwg", "hpxukxgoyxon", "datahyfivxdifbwbli")))
            .withParameters(mapOf("qrrldxfua",
                new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("datarxros"), "eyrqve",
                new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("datawxatktwjrppi")))
            .withAnnotations(Arrays.asList("datadcizhvksb", "datajklwjp"))
            .withFolder(new DatasetFolder().withName("ncw"))
            .withRelativeUrl("dataaefe")
            .withRequestMethod("datavkxdbnmcvaqy")
            .withRequestBody("datazdobuesdyvfxnz")
            .withAdditionalHeaders(mapOf("dpsegivytabvbbk", "datafupktw"))
            .withPaginationRules(mapOf("wuuqbmenxcqsxwc", "datawgsltutbuve"));
        model = BinaryData.fromObject(model).toObject(RestResourceDataset.class);
        Assertions.assertEquals("kcrudekkbnjre", model.description());
        Assertions.assertEquals("h", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("qrrldxfua").type());
        Assertions.assertEquals("ncw", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
