// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.RestResourceDataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class RestResourceDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        RestResourceDataset model = BinaryData.fromString(
            "{\"type\":\"RestResource\",\"typeProperties\":{\"relativeUrl\":\"datamplu\",\"requestMethod\":\"dataebrmjjnfp\",\"requestBody\":\"datatbttpkimskhnkkh\",\"additionalHeaders\":{\"el\":\"datarsmhrc\",\"ybnzbnvmsh\":\"datacpgokuthr\",\"ebxiauqsuptessj\":\"datauzzlapyixlvzcgul\"},\"paginationRules\":{\"aslkvcvwpvl\":\"datatatpvblskxgxqay\",\"bwh\":\"datajbvyezjwjkqo\",\"gqefgzjvbxqcb\":\"dataieyozvrcwfpucwnb\",\"uuciagvkdlhu\":\"dataoarx\"}},\"description\":\"klbjoafmjfe\",\"structure\":\"datalvoepknarse\",\"schema\":\"datancsqoacbuqd\",\"linkedServiceName\":{\"referenceName\":\"sapleqfg\",\"parameters\":{\"z\":\"datanvszglvyake\"}},\"parameters\":{\"brveci\":{\"type\":\"Int\",\"defaultValue\":\"datalaqcwggchxvlqg\"},\"unnep\":{\"type\":\"Array\",\"defaultValue\":\"datavphirlzbip\"},\"vwkaujttwyk\":{\"type\":\"Object\",\"defaultValue\":\"datazzkueruwcjomi\"},\"lfkvga\":{\"type\":\"Float\",\"defaultValue\":\"databwofxxdplr\"}},\"annotations\":[\"datatuxlbpxrhrfjen\",\"dataazwef\",\"dataktlhqash\",\"dataostjixyz\"],\"folder\":{\"name\":\"i\"},\"\":{\"cbpzf\":\"datadwjtacfvvtd\",\"fiwltkfysu\":\"datamcsaugbr\",\"hkl\":\"datate\",\"syyhgqokjbmsrk\":\"datawhcv\"}}")
            .toObject(RestResourceDataset.class);
        Assertions.assertEquals("klbjoafmjfe", model.description());
        Assertions.assertEquals("sapleqfg", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("brveci").type());
        Assertions.assertEquals("i", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        RestResourceDataset model = new RestResourceDataset().withDescription("klbjoafmjfe")
            .withStructure("datalvoepknarse")
            .withSchema("datancsqoacbuqd")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("sapleqfg")
                .withParameters(mapOf("z", "datanvszglvyake")))
            .withParameters(mapOf("brveci",
                new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("datalaqcwggchxvlqg"),
                "unnep", new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("datavphirlzbip"),
                "vwkaujttwyk",
                new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("datazzkueruwcjomi"),
                "lfkvga",
                new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("databwofxxdplr")))
            .withAnnotations(Arrays.asList("datatuxlbpxrhrfjen", "dataazwef", "dataktlhqash", "dataostjixyz"))
            .withFolder(new DatasetFolder().withName("i"))
            .withRelativeUrl("datamplu")
            .withRequestMethod("dataebrmjjnfp")
            .withRequestBody("datatbttpkimskhnkkh")
            .withAdditionalHeaders(
                mapOf("el", "datarsmhrc", "ybnzbnvmsh", "datacpgokuthr", "ebxiauqsuptessj", "datauzzlapyixlvzcgul"))
            .withPaginationRules(mapOf("aslkvcvwpvl", "datatatpvblskxgxqay", "bwh", "datajbvyezjwjkqo", "gqefgzjvbxqcb",
                "dataieyozvrcwfpucwnb", "uuciagvkdlhu", "dataoarx"));
        model = BinaryData.fromObject(model).toObject(RestResourceDataset.class);
        Assertions.assertEquals("klbjoafmjfe", model.description());
        Assertions.assertEquals("sapleqfg", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("brveci").type());
        Assertions.assertEquals("i", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
