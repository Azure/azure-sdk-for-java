// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeReference;
import com.azure.resourcemanager.datafactory.models.MongoDbAtlasLinkedService;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MongoDbAtlasLinkedServiceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MongoDbAtlasLinkedService model = BinaryData.fromString(
            "{\"type\":\"fshhc\",\"typeProperties\":{\"connectionString\":\"datayvjispkgkhvpvbz\",\"database\":\"datayo\",\"driverVersion\":\"dataxstxsfztlvs\"},\"connectVia\":{\"referenceName\":\"sowyhxwhdyfgtwx\",\"parameters\":{\"im\":\"databzfiacmwmc\",\"tnolziohdxyuk\":\"datahrfmcjjxxwzdwmju\",\"sffpizef\":\"dataplfwykrpojen\",\"zcevf\":\"datajgblehxpeuahvxf\"}},\"description\":\"ekyd\",\"parameters\":{\"pejhyrzzxqtcg\":{\"type\":\"Bool\",\"defaultValue\":\"datafkneckvyrvdszri\"},\"juingnfunhtzgxs\":{\"type\":\"Bool\",\"defaultValue\":\"datahzcicitykzyi\"},\"dhjztbwzjbqzqwb\":{\"type\":\"Object\",\"defaultValue\":\"datamopk\"}},\"annotations\":[\"datahqzdbzlkd\",\"databekvprkwpvxieqc\"],\"\":{\"aeiuex\":\"datazshfafbeh\",\"ecrizkabafdlsiza\":\"datapgrmwdwlraeplpf\"}}")
            .toObject(MongoDbAtlasLinkedService.class);
        Assertions.assertEquals("sowyhxwhdyfgtwx", model.connectVia().referenceName());
        Assertions.assertEquals("ekyd", model.description());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("pejhyrzzxqtcg").type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MongoDbAtlasLinkedService model = new MongoDbAtlasLinkedService()
            .withConnectVia(new IntegrationRuntimeReference().withReferenceName("sowyhxwhdyfgtwx")
                .withParameters(mapOf("im", "databzfiacmwmc", "tnolziohdxyuk", "datahrfmcjjxxwzdwmju", "sffpizef",
                    "dataplfwykrpojen", "zcevf", "datajgblehxpeuahvxf")))
            .withDescription("ekyd")
            .withParameters(mapOf("pejhyrzzxqtcg",
                new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("datafkneckvyrvdszri"),
                "juingnfunhtzgxs",
                new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("datahzcicitykzyi"),
                "dhjztbwzjbqzqwb",
                new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("datamopk")))
            .withAnnotations(Arrays.asList("datahqzdbzlkd", "databekvprkwpvxieqc"))
            .withConnectionString("datayvjispkgkhvpvbz")
            .withDatabase("datayo")
            .withDriverVersion("dataxstxsfztlvs");
        model = BinaryData.fromObject(model).toObject(MongoDbAtlasLinkedService.class);
        Assertions.assertEquals("sowyhxwhdyfgtwx", model.connectVia().referenceName());
        Assertions.assertEquals("ekyd", model.description());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("pejhyrzzxqtcg").type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
