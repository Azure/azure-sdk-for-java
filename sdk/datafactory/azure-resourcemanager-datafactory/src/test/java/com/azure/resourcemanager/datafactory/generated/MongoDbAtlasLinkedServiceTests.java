// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeReference;
import com.azure.resourcemanager.datafactory.models.MongoDbAtlasLinkedService;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MongoDbAtlasLinkedServiceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MongoDbAtlasLinkedService model = BinaryData.fromString(
            "{\"type\":\"MongoDbAtlas\",\"typeProperties\":{\"connectionString\":\"datajawpzrtse\",\"database\":\"dataxpkrwgznacmkw\",\"driverVersion\":\"dataeljniadg\"},\"connectVia\":{\"referenceName\":\"bwnyyihct\",\"parameters\":{\"htvughu\":\"datamzozb\",\"vnfyfyftkvzb\":\"dataiql\"}},\"description\":\"jykiumagfy\",\"parameters\":{\"twf\":{\"type\":\"Bool\",\"defaultValue\":\"datajzpl\"},\"cfqynmldhgzzohta\":{\"type\":\"Int\",\"defaultValue\":\"datacvbzkbebuafbdd\"},\"rksypoosfxzobovs\":{\"type\":\"SecureString\",\"defaultValue\":\"datauhdqhq\"},\"xgllmdeoubvfxi\":{\"type\":\"Float\",\"defaultValue\":\"datatd\"}},\"annotations\":[\"datamncjhmvvzeaic\",\"datavbsjtfqwlbeqcz\",\"datascgropuqgiscgk\",\"dataciyikqlyoorme\"],\"\":{\"hxuznbcpiadj\":\"datalqijykck\"}}")
            .toObject(MongoDbAtlasLinkedService.class);
        Assertions.assertEquals("bwnyyihct", model.connectVia().referenceName());
        Assertions.assertEquals("jykiumagfy", model.description());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("twf").type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MongoDbAtlasLinkedService model
            = new MongoDbAtlasLinkedService()
                .withConnectVia(new IntegrationRuntimeReference().withReferenceName("bwnyyihct")
                    .withParameters(mapOf("htvughu", "datamzozb", "vnfyfyftkvzb", "dataiql")))
                .withDescription("jykiumagfy")
                .withParameters(
                    mapOf("twf", new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("datajzpl"),
                        "cfqynmldhgzzohta",
                        new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("datacvbzkbebuafbdd"),
                        "rksypoosfxzobovs",
                        new ParameterSpecification().withType(ParameterType.SECURE_STRING)
                            .withDefaultValue("datauhdqhq"),
                        "xgllmdeoubvfxi",
                        new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("datatd")))
                .withAnnotations(
                    Arrays.asList("datamncjhmvvzeaic", "datavbsjtfqwlbeqcz", "datascgropuqgiscgk", "dataciyikqlyoorme"))
                .withConnectionString("datajawpzrtse").withDatabase("dataxpkrwgznacmkw")
                .withDriverVersion("dataeljniadg");
        model = BinaryData.fromObject(model).toObject(MongoDbAtlasLinkedService.class);
        Assertions.assertEquals("bwnyyihct", model.connectVia().referenceName());
        Assertions.assertEquals("jykiumagfy", model.description());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("twf").type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
