// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeReference;
import com.azure.resourcemanager.datafactory.models.MongoDbAtlasLinkedService;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MongoDbAtlasLinkedServiceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MongoDbAtlasLinkedService model = BinaryData.fromString(
            "{\"type\":\"MongoDbAtlas\",\"typeProperties\":{\"connectionString\":\"datazxkflz\",\"database\":\"datawkxxboauvkkco\",\"driverVersion\":\"datanwhld\"},\"version\":\"n\",\"connectVia\":{\"referenceName\":\"huqmdyn\",\"parameters\":{\"yag\":\"datalcvlmrvhedrbzzb\",\"alz\":\"dataxwcndkdlxdlh\",\"wkyxowno\":\"dataj\"}},\"description\":\"qus\",\"parameters\":{\"tjxlopncca\":{\"type\":\"Bool\",\"defaultValue\":\"dataicrsd\"},\"zjpghjmgpc\":{\"type\":\"SecureString\",\"defaultValue\":\"dataprszehijlwrfea\"},\"xlrx\":{\"type\":\"Int\",\"defaultValue\":\"datakls\"},\"sbjxpuokkdpts\":{\"type\":\"SecureString\",\"defaultValue\":\"datamfqmvnhsfjxt\"}},\"annotations\":[\"datatplonalpwaulkwu\",\"dataasjwnwnj\",\"datarnfgtmupblhnxq\",\"datazzikxufuwcajy\"],\"\":{\"mbpn\":\"datakuiveftugiwsvlf\",\"xwrf\":\"datag\",\"fzuvuoxzy\":\"datafzay\"}}")
            .toObject(MongoDbAtlasLinkedService.class);
        Assertions.assertEquals("n", model.version());
        Assertions.assertEquals("huqmdyn", model.connectVia().referenceName());
        Assertions.assertEquals("qus", model.description());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("tjxlopncca").type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MongoDbAtlasLinkedService model = new MongoDbAtlasLinkedService().withVersion("n")
            .withConnectVia(new IntegrationRuntimeReference().withReferenceName("huqmdyn")
                .withParameters(mapOf("yag", "datalcvlmrvhedrbzzb", "alz", "dataxwcndkdlxdlh", "wkyxowno", "dataj")))
            .withDescription("qus")
            .withParameters(mapOf("tjxlopncca",
                new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("dataicrsd"), "zjpghjmgpc",
                new ParameterSpecification().withType(ParameterType.SECURE_STRING)
                    .withDefaultValue("dataprszehijlwrfea"),
                "xlrx", new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("datakls"),
                "sbjxpuokkdpts",
                new ParameterSpecification().withType(ParameterType.SECURE_STRING)
                    .withDefaultValue("datamfqmvnhsfjxt")))
            .withAnnotations(
                Arrays.asList("datatplonalpwaulkwu", "dataasjwnwnj", "datarnfgtmupblhnxq", "datazzikxufuwcajy"))
            .withConnectionString("datazxkflz")
            .withDatabase("datawkxxboauvkkco")
            .withDriverVersion("datanwhld");
        model = BinaryData.fromObject(model).toObject(MongoDbAtlasLinkedService.class);
        Assertions.assertEquals("n", model.version());
        Assertions.assertEquals("huqmdyn", model.connectVia().referenceName());
        Assertions.assertEquals("qus", model.description());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("tjxlopncca").type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
