// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeReference;
import com.azure.resourcemanager.datafactory.models.MongoDbAtlasLinkedService;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MongoDbAtlasLinkedServiceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MongoDbAtlasLinkedService model =
            BinaryData
                .fromString(
                    "{\"type\":\"MongoDbAtlas\",\"typeProperties\":{\"connectionString\":\"datamu\",\"database\":\"datajabpnxohagcojgmy\",\"driverVersion\":\"datad\"},\"connectVia\":{\"referenceName\":\"qehrqtgdipb\",\"parameters\":{\"kbfykgmwurcx\":\"dataweyuigyzse\",\"vjgovbbn\":\"datajyxyunypf\",\"aqgmztlru\":\"datajxr\",\"ou\":\"datank\"}},\"description\":\"qffgjsqq\",\"parameters\":{\"bdqiuppavqov\":{\"type\":\"SecureString\",\"defaultValue\":\"dataoglwuj\"},\"tfbibtrwglj\":{\"type\":\"String\",\"defaultValue\":\"datamegnkr\"},\"phgimyomje\":{\"type\":\"String\",\"defaultValue\":\"dataezdxqhj\"},\"fxxx\":{\"type\":\"Object\",\"defaultValue\":\"datanieeqj\"}},\"annotations\":[\"datauxkepga\",\"datarijbiterqfu\"],\"\":{\"wpg\":\"datarcanlpfqdd\"}}")
                .toObject(MongoDbAtlasLinkedService.class);
        Assertions.assertEquals("qehrqtgdipb", model.connectVia().referenceName());
        Assertions.assertEquals("qffgjsqq", model.description());
        Assertions.assertEquals(ParameterType.SECURE_STRING, model.parameters().get("bdqiuppavqov").type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MongoDbAtlasLinkedService model =
            new MongoDbAtlasLinkedService()
                .withConnectVia(
                    new IntegrationRuntimeReference()
                        .withReferenceName("qehrqtgdipb")
                        .withParameters(
                            mapOf(
                                "kbfykgmwurcx",
                                "dataweyuigyzse",
                                "vjgovbbn",
                                "datajyxyunypf",
                                "aqgmztlru",
                                "datajxr",
                                "ou",
                                "datank")))
                .withDescription("qffgjsqq")
                .withParameters(
                    mapOf(
                        "bdqiuppavqov",
                        new ParameterSpecification()
                            .withType(ParameterType.SECURE_STRING)
                            .withDefaultValue("dataoglwuj"),
                        "tfbibtrwglj",
                        new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("datamegnkr"),
                        "phgimyomje",
                        new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("dataezdxqhj"),
                        "fxxx",
                        new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("datanieeqj")))
                .withAnnotations(Arrays.asList("datauxkepga", "datarijbiterqfu"))
                .withConnectionString("datamu")
                .withDatabase("datajabpnxohagcojgmy")
                .withDriverVersion("datad");
        model = BinaryData.fromObject(model).toObject(MongoDbAtlasLinkedService.class);
        Assertions.assertEquals("qehrqtgdipb", model.connectVia().referenceName());
        Assertions.assertEquals("qffgjsqq", model.description());
        Assertions.assertEquals(ParameterType.SECURE_STRING, model.parameters().get("bdqiuppavqov").type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
