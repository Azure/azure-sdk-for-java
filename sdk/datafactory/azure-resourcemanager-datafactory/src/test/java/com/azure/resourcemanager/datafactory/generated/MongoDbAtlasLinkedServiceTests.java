// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeReference;
import com.azure.resourcemanager.datafactory.models.MongoDbAtlasLinkedService;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MongoDbAtlasLinkedServiceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MongoDbAtlasLinkedService model = BinaryData.fromString(
            "{\"type\":\"MongoDbAtlas\",\"typeProperties\":{\"connectionString\":\"datakubwkdi\",\"database\":\"dataslnbyi\",\"driverVersion\":\"dataetwwjvxycygcv\"},\"connectVia\":{\"referenceName\":\"bfeitya\",\"parameters\":{\"pd\":\"datacvttkg\",\"icucqtecie\":\"dataqn\",\"zhjjlypwgwbycfam\":\"datascx\",\"irhhbogxw\":\"dataikisppygothi\"}},\"description\":\"pymyerpus\",\"parameters\":{\"gbzjoyyptnok\":{\"type\":\"String\",\"defaultValue\":\"datatjliwbnwd\"},\"zxkflz\":{\"type\":\"Int\",\"defaultValue\":\"dataxkzeowizvje\"}},\"annotations\":[\"dataxxboauvkkc\",\"datawgnwhldctn\"],\"\":{\"rvhed\":\"datauqmdynmtnlcvl\",\"yag\":\"databzzb\"}}")
            .toObject(MongoDbAtlasLinkedService.class);
        Assertions.assertEquals("bfeitya", model.connectVia().referenceName());
        Assertions.assertEquals("pymyerpus", model.description());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("gbzjoyyptnok").type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MongoDbAtlasLinkedService model = new MongoDbAtlasLinkedService()
            .withConnectVia(new IntegrationRuntimeReference().withReferenceName("bfeitya")
                .withParameters(mapOf("pd", "datacvttkg", "icucqtecie", "dataqn", "zhjjlypwgwbycfam", "datascx",
                    "irhhbogxw", "dataikisppygothi")))
            .withDescription("pymyerpus")
            .withParameters(mapOf("gbzjoyyptnok",
                new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("datatjliwbnwd"), "zxkflz",
                new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("dataxkzeowizvje")))
            .withAnnotations(Arrays.asList("dataxxboauvkkc", "datawgnwhldctn")).withConnectionString("datakubwkdi")
            .withDatabase("dataslnbyi").withDriverVersion("dataetwwjvxycygcv");
        model = BinaryData.fromObject(model).toObject(MongoDbAtlasLinkedService.class);
        Assertions.assertEquals("bfeitya", model.connectVia().referenceName());
        Assertions.assertEquals("pymyerpus", model.description());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("gbzjoyyptnok").type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
