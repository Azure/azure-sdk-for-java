// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeReference;
import com.azure.resourcemanager.datafactory.models.MongoDbAtlasLinkedService;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MongoDbAtlasLinkedServiceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MongoDbAtlasLinkedService model = BinaryData.fromString(
            "{\"type\":\"MongoDbAtlas\",\"typeProperties\":{\"connectionString\":\"datapasriletbhlbh\",\"database\":\"dataijqgcvqewxrq\",\"driverVersion\":\"datax\"},\"version\":\"puhkiz\",\"connectVia\":{\"referenceName\":\"kzvjyvobevfbmxz\",\"parameters\":{\"lkpajio\":\"dataghs\",\"meuyxhcwu\":\"dataybyilhdbb\",\"go\":\"datat\",\"laqqfrgiplxr\":\"datachoji\"}},\"description\":\"bsbkvfk\",\"parameters\":{\"utjit\":{\"type\":\"Array\",\"defaultValue\":\"dataoijsxv\"},\"pjinz\":{\"type\":\"Array\",\"defaultValue\":\"dataknarscxnk\"}},\"annotations\":[\"datarsm\",\"datann\"],\"\":{\"wwqchxowppvux\":\"datawoxve\",\"ir\":\"dataactoqqehn\",\"tvnlbkizebbrwlp\":\"datagnvuolv\",\"zgwywyxbwuam\":\"dataqmisoiqge\"}}")
            .toObject(MongoDbAtlasLinkedService.class);
        Assertions.assertEquals("puhkiz", model.version());
        Assertions.assertEquals("kzvjyvobevfbmxz", model.connectVia().referenceName());
        Assertions.assertEquals("bsbkvfk", model.description());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("utjit").type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MongoDbAtlasLinkedService model = new MongoDbAtlasLinkedService().withVersion("puhkiz")
            .withConnectVia(new IntegrationRuntimeReference().withReferenceName("kzvjyvobevfbmxz")
                .withParameters(mapOf("lkpajio", "dataghs", "meuyxhcwu", "dataybyilhdbb", "go", "datat", "laqqfrgiplxr",
                    "datachoji")))
            .withDescription("bsbkvfk")
            .withParameters(mapOf("utjit",
                new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("dataoijsxv"), "pjinz",
                new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("dataknarscxnk")))
            .withAnnotations(Arrays.asList("datarsm", "datann"))
            .withConnectionString("datapasriletbhlbh")
            .withDatabase("dataijqgcvqewxrq")
            .withDriverVersion("datax");
        model = BinaryData.fromObject(model).toObject(MongoDbAtlasLinkedService.class);
        Assertions.assertEquals("puhkiz", model.version());
        Assertions.assertEquals("kzvjyvobevfbmxz", model.connectVia().referenceName());
        Assertions.assertEquals("bsbkvfk", model.description());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("utjit").type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
