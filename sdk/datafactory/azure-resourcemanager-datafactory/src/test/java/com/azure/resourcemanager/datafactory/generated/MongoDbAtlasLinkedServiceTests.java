// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeReference;
import com.azure.resourcemanager.datafactory.models.MongoDbAtlasLinkedService;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MongoDbAtlasLinkedServiceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MongoDbAtlasLinkedService model = BinaryData.fromString(
            "{\"type\":\"MongoDbAtlas\",\"typeProperties\":{\"connectionString\":\"datazeq\",\"database\":\"datactpqnofkw\",\"driverVersion\":\"datayzwfyfdb\"},\"connectVia\":{\"referenceName\":\"oelmikdsq\",\"parameters\":{\"wjwsmnwbmacv\":\"datagjjsmvsiyqml\"}},\"description\":\"mriyzyvquesxp\",\"parameters\":{\"lxxhcynnmv\":{\"type\":\"SecureString\",\"defaultValue\":\"databul\"},\"pwcidsjqcqyzmrtf\":{\"type\":\"String\",\"defaultValue\":\"datavkwq\"},\"ahwzagvai\":{\"type\":\"Float\",\"defaultValue\":\"datapryyjlikalbcyu\"},\"smrw\":{\"type\":\"Bool\",\"defaultValue\":\"dataephnhnuhgyfzkh\"}},\"annotations\":[\"datai\",\"datarjbpertjpair\"],\"\":{\"tvqopugrse\":\"datamcgiwsywpe\",\"dmcbc\":\"datagiuztqefzypul\"}}")
            .toObject(MongoDbAtlasLinkedService.class);
        Assertions.assertEquals("oelmikdsq", model.connectVia().referenceName());
        Assertions.assertEquals("mriyzyvquesxp", model.description());
        Assertions.assertEquals(ParameterType.SECURE_STRING, model.parameters().get("lxxhcynnmv").type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MongoDbAtlasLinkedService model = new MongoDbAtlasLinkedService()
            .withConnectVia(new IntegrationRuntimeReference().withReferenceName("oelmikdsq")
                .withParameters(mapOf("wjwsmnwbmacv", "datagjjsmvsiyqml")))
            .withDescription("mriyzyvquesxp")
            .withParameters(mapOf("lxxhcynnmv",
                new ParameterSpecification().withType(ParameterType.SECURE_STRING).withDefaultValue("databul"),
                "pwcidsjqcqyzmrtf",
                new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("datavkwq"), "ahwzagvai",
                new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("datapryyjlikalbcyu"),
                "smrw",
                new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("dataephnhnuhgyfzkh")))
            .withAnnotations(Arrays.asList("datai", "datarjbpertjpair"))
            .withConnectionString("datazeq")
            .withDatabase("datactpqnofkw")
            .withDriverVersion("datayzwfyfdb");
        model = BinaryData.fromObject(model).toObject(MongoDbAtlasLinkedService.class);
        Assertions.assertEquals("oelmikdsq", model.connectVia().referenceName());
        Assertions.assertEquals("mriyzyvquesxp", model.description());
        Assertions.assertEquals(ParameterType.SECURE_STRING, model.parameters().get("lxxhcynnmv").type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
