// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeReference;
import com.azure.resourcemanager.datafactory.models.MongoDbAtlasLinkedService;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MongoDbAtlasLinkedServiceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MongoDbAtlasLinkedService model = BinaryData.fromString(
            "{\"type\":\"MongoDbAtlas\",\"typeProperties\":{\"connectionString\":\"datarp\",\"database\":\"datasozaoutjliwbnw\",\"driverVersion\":\"datagbzjoyyptnok\"},\"version\":\"qxkzeowizvj\",\"connectVia\":{\"referenceName\":\"zxkflz\",\"parameters\":{\"wgnwhldctn\":\"dataxxboauvkkc\",\"mtnlcvl\":\"datachuqmdy\"}},\"description\":\"vhedrbz\",\"parameters\":{\"dkdlxd\":{\"type\":\"Int\",\"defaultValue\":\"datagwxwc\"},\"j\":{\"type\":\"String\",\"defaultValue\":\"dataalz\"},\"oypqussxi\":{\"type\":\"SecureString\",\"defaultValue\":\"datayxow\"}},\"annotations\":[\"datacrsdgtj\",\"datalop\"],\"\":{\"prszehijlwrfea\":\"dataaxt\",\"qaklsfx\":\"datazjpghjmgpc\",\"mfqmvnhsfjxt\":\"datarxix\"}}")
            .toObject(MongoDbAtlasLinkedService.class);
        Assertions.assertEquals("qxkzeowizvj", model.version());
        Assertions.assertEquals("zxkflz", model.connectVia().referenceName());
        Assertions.assertEquals("vhedrbz", model.description());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("dkdlxd").type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MongoDbAtlasLinkedService model = new MongoDbAtlasLinkedService().withVersion("qxkzeowizvj")
            .withConnectVia(new IntegrationRuntimeReference().withReferenceName("zxkflz")
                .withParameters(mapOf("wgnwhldctn", "dataxxboauvkkc", "mtnlcvl", "datachuqmdy")))
            .withDescription("vhedrbz")
            .withParameters(mapOf("dkdlxd",
                new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("datagwxwc"), "j",
                new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("dataalz"), "oypqussxi",
                new ParameterSpecification().withType(ParameterType.SECURE_STRING).withDefaultValue("datayxow")))
            .withAnnotations(Arrays.asList("datacrsdgtj", "datalop"))
            .withConnectionString("datarp")
            .withDatabase("datasozaoutjliwbnw")
            .withDriverVersion("datagbzjoyyptnok");
        model = BinaryData.fromObject(model).toObject(MongoDbAtlasLinkedService.class);
        Assertions.assertEquals("qxkzeowizvj", model.version());
        Assertions.assertEquals("zxkflz", model.connectVia().referenceName());
        Assertions.assertEquals("vhedrbz", model.description());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("dkdlxd").type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
