// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeReference;
import com.azure.resourcemanager.datafactory.models.MongoDbAtlasLinkedService;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MongoDbAtlasLinkedServiceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MongoDbAtlasLinkedService model = BinaryData.fromString(
            "{\"type\":\"MongoDbAtlas\",\"typeProperties\":{\"connectionString\":\"datanksmaebdrxj\",\"database\":\"datamrseau\",\"driverVersion\":\"dataovbgrqwfuxntuegy\"},\"connectVia\":{\"referenceName\":\"eket\",\"parameters\":{\"hhbxgfhgkdm\":\"dataptqhatfg\",\"vqihmqhqjd\":\"dataflhhbupqovuw\",\"ljxagcalyq\":\"databgcemjt\"}},\"description\":\"raxil\",\"parameters\":{\"rhiehxjou\":{\"type\":\"Object\",\"defaultValue\":\"datapdmdsypks\"},\"qvvyhgpgjd\":{\"type\":\"Object\",\"defaultValue\":\"datahsbecxuvkba\"},\"puku\":{\"type\":\"Bool\",\"defaultValue\":\"datakdje\"}},\"annotations\":[\"datawiztvucyackg\",\"dataa\"],\"\":{\"smurjab\":\"datagtpcohfksixvwkpc\"}}")
            .toObject(MongoDbAtlasLinkedService.class);
        Assertions.assertEquals("eket", model.connectVia().referenceName());
        Assertions.assertEquals("raxil", model.description());
        Assertions.assertEquals(ParameterType.OBJECT, model.parameters().get("rhiehxjou").type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MongoDbAtlasLinkedService model
            = new MongoDbAtlasLinkedService()
                .withConnectVia(new IntegrationRuntimeReference().withReferenceName("eket")
                    .withParameters(mapOf("hhbxgfhgkdm", "dataptqhatfg", "vqihmqhqjd", "dataflhhbupqovuw", "ljxagcalyq",
                        "databgcemjt")))
                .withDescription("raxil")
                .withParameters(mapOf("rhiehxjou",
                    new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("datapdmdsypks"),
                    "qvvyhgpgjd",
                    new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("datahsbecxuvkba"),
                    "puku", new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("datakdje")))
                .withAnnotations(Arrays.asList("datawiztvucyackg", "dataa")).withConnectionString("datanksmaebdrxj")
                .withDatabase("datamrseau").withDriverVersion("dataovbgrqwfuxntuegy");
        model = BinaryData.fromObject(model).toObject(MongoDbAtlasLinkedService.class);
        Assertions.assertEquals("eket", model.connectVia().referenceName());
        Assertions.assertEquals("raxil", model.description());
        Assertions.assertEquals(ParameterType.OBJECT, model.parameters().get("rhiehxjou").type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
