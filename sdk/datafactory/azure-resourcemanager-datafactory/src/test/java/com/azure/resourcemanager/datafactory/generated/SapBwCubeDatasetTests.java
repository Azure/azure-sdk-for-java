// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.SapBwCubeDataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SapBwCubeDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SapBwCubeDataset model = BinaryData.fromString(
            "{\"type\":\"SapBwCube\",\"description\":\"pu\",\"structure\":\"dataa\",\"schema\":\"datasujtgg\",\"linkedServiceName\":{\"referenceName\":\"bszam\",\"parameters\":{\"lrnhhjtvhqsz\":\"dataejpdcliqwzutiy\",\"dp\":\"datasyovqmqc\"}},\"parameters\":{\"kjthl\":{\"type\":\"Object\",\"defaultValue\":\"datanf\"},\"wfubk\":{\"type\":\"String\",\"defaultValue\":\"dataxw\"},\"uktdrsjtmnkxjouw\":{\"type\":\"Int\",\"defaultValue\":\"datajjxumowynjmoozm\"}},\"annotations\":[\"datafdt\",\"datatia\"],\"folder\":{\"name\":\"rnuhcfhepisqbc\"},\"\":{\"blcyeqdobobaq\":\"dataoiommemsoq\",\"srsixwn\":\"dataabebckc\",\"qyyfrridzfpsfyak\":\"datapjcxbjgfm\"}}")
            .toObject(SapBwCubeDataset.class);
        Assertions.assertEquals("pu", model.description());
        Assertions.assertEquals("bszam", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.OBJECT, model.parameters().get("kjthl").type());
        Assertions.assertEquals("rnuhcfhepisqbc", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SapBwCubeDataset model = new SapBwCubeDataset().withDescription("pu")
            .withStructure("dataa")
            .withSchema("datasujtgg")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("bszam")
                .withParameters(mapOf("lrnhhjtvhqsz", "dataejpdcliqwzutiy", "dp", "datasyovqmqc")))
            .withParameters(
                mapOf("kjthl", new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("datanf"),
                    "wfubk", new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("dataxw"),
                    "uktdrsjtmnkxjouw",
                    new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("datajjxumowynjmoozm")))
            .withAnnotations(Arrays.asList("datafdt", "datatia"))
            .withFolder(new DatasetFolder().withName("rnuhcfhepisqbc"));
        model = BinaryData.fromObject(model).toObject(SapBwCubeDataset.class);
        Assertions.assertEquals("pu", model.description());
        Assertions.assertEquals("bszam", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.OBJECT, model.parameters().get("kjthl").type());
        Assertions.assertEquals("rnuhcfhepisqbc", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
