// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.SapBwCubeDataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SapBwCubeDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SapBwCubeDataset model =
            BinaryData
                .fromString(
                    "{\"type\":\"SapBwCube\",\"description\":\"efqckievyrejyo\",\"structure\":\"datakqf\",\"schema\":\"datasdwmnrtvvbuc\",\"linkedServiceName\":{\"referenceName\":\"nrovome\",\"parameters\":{\"hennmsgpywdib\":\"datasicvwqzocsf\",\"ibrbknuubxc\":\"datagvnrgalvwrhr\",\"qdvnpyeevff\":\"dataojtu\"}},\"parameters\":{\"chrtczwjcu\":{\"type\":\"Array\",\"defaultValue\":\"datatdowlxmwefcbyb\"},\"jqdjlgkuirxxeuwi\":{\"type\":\"Int\",\"defaultValue\":\"datanvy\"},\"viwxohktxagfuj\":{\"type\":\"String\",\"defaultValue\":\"datacvnfgb\"},\"asfeooq\":{\"type\":\"Object\",\"defaultValue\":\"datajnyexbvxgxqq\"}},\"annotations\":[\"datavev\",\"dataarp\",\"dataklqlii\",\"dataeanuwg\"],\"folder\":{\"name\":\"fgijydgs\"},\"\":{\"mwywhrjkejva\":\"datauymtevaeb\",\"gcphivfhrmte\":\"datadogzougxbxxgj\",\"usrjzhdtrsyfezf\":\"datafdvdoeary\"}}")
                .toObject(SapBwCubeDataset.class);
        Assertions.assertEquals("efqckievyrejyo", model.description());
        Assertions.assertEquals("nrovome", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("chrtczwjcu").type());
        Assertions.assertEquals("fgijydgs", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SapBwCubeDataset model =
            new SapBwCubeDataset()
                .withDescription("efqckievyrejyo")
                .withStructure("datakqf")
                .withSchema("datasdwmnrtvvbuc")
                .withLinkedServiceName(
                    new LinkedServiceReference()
                        .withReferenceName("nrovome")
                        .withParameters(
                            mapOf(
                                "hennmsgpywdib",
                                "datasicvwqzocsf",
                                "ibrbknuubxc",
                                "datagvnrgalvwrhr",
                                "qdvnpyeevff",
                                "dataojtu")))
                .withParameters(
                    mapOf(
                        "chrtczwjcu",
                        new ParameterSpecification()
                            .withType(ParameterType.ARRAY)
                            .withDefaultValue("datatdowlxmwefcbyb"),
                        "jqdjlgkuirxxeuwi",
                        new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("datanvy"),
                        "viwxohktxagfuj",
                        new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("datacvnfgb"),
                        "asfeooq",
                        new ParameterSpecification()
                            .withType(ParameterType.OBJECT)
                            .withDefaultValue("datajnyexbvxgxqq")))
                .withAnnotations(Arrays.asList("datavev", "dataarp", "dataklqlii", "dataeanuwg"))
                .withFolder(new DatasetFolder().withName("fgijydgs"));
        model = BinaryData.fromObject(model).toObject(SapBwCubeDataset.class);
        Assertions.assertEquals("efqckievyrejyo", model.description());
        Assertions.assertEquals("nrovome", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("chrtczwjcu").type());
        Assertions.assertEquals("fgijydgs", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
