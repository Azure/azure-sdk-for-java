// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.SapBwCubeDataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SapBwCubeDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SapBwCubeDataset model = BinaryData.fromString(
            "{\"type\":\"dqseypdlmajpuy\",\"description\":\"a\",\"structure\":\"datamzgccy\",\"schema\":\"datauvmsie\",\"linkedServiceName\":{\"referenceName\":\"edmmvoneeyr\",\"parameters\":{\"spl\":\"datarxtzayqwddigeb\"}},\"parameters\":{\"izdnuehx\":{\"type\":\"Array\",\"defaultValue\":\"datawwveeozbjkjq\"},\"rxactsawvxcimp\":{\"type\":\"String\",\"defaultValue\":\"datassjdywbnklg\"}},\"annotations\":[\"datarm\",\"datalzmslubnknyfuy\",\"datajhvrrllfswarmy\"],\"folder\":{\"name\":\"rotgeysyq\"},\"\":{\"xia\":\"dataehfwwcbf\"}}")
            .toObject(SapBwCubeDataset.class);
        Assertions.assertEquals("a", model.description());
        Assertions.assertEquals("edmmvoneeyr", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("izdnuehx").type());
        Assertions.assertEquals("rotgeysyq", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SapBwCubeDataset model = new SapBwCubeDataset().withDescription("a")
            .withStructure("datamzgccy")
            .withSchema("datauvmsie")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("edmmvoneeyr")
                .withParameters(mapOf("spl", "datarxtzayqwddigeb")))
            .withParameters(mapOf("izdnuehx",
                new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("datawwveeozbjkjq"),
                "rxactsawvxcimp",
                new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("datassjdywbnklg")))
            .withAnnotations(Arrays.asList("datarm", "datalzmslubnknyfuy", "datajhvrrllfswarmy"))
            .withFolder(new DatasetFolder().withName("rotgeysyq"));
        model = BinaryData.fromObject(model).toObject(SapBwCubeDataset.class);
        Assertions.assertEquals("a", model.description());
        Assertions.assertEquals("edmmvoneeyr", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("izdnuehx").type());
        Assertions.assertEquals("rotgeysyq", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
