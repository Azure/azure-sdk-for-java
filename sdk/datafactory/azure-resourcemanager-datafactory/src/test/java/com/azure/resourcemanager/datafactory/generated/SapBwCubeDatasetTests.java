// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.SapBwCubeDataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SapBwCubeDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SapBwCubeDataset model = BinaryData.fromString(
            "{\"type\":\"SapBwCube\",\"description\":\"kwakkchsf\",\"structure\":\"datalb\",\"schema\":\"datacxu\",\"linkedServiceName\":{\"referenceName\":\"bsdqbdybl\",\"parameters\":{\"m\":\"datat\",\"lerufollcshju\":\"datapgweoqhbjqlqf\",\"xvjeazrah\":\"dataihbymjjvtpne\",\"qamcthtpqgfz\":\"datalhbimyii\"}},\"parameters\":{\"vflgzhc\":{\"type\":\"Bool\",\"defaultValue\":\"datakdi\"},\"pccxziv\":{\"type\":\"Object\",\"defaultValue\":\"datawahcrxofgrutv\"},\"jd\":{\"type\":\"SecureString\",\"defaultValue\":\"datahzghhhkvn\"}},\"annotations\":[\"dataq\"],\"folder\":{\"name\":\"njvpmxn\"},\"\":{\"olrwvtlgxyfj\":\"datazstqlf\"}}")
            .toObject(SapBwCubeDataset.class);
        Assertions.assertEquals("kwakkchsf", model.description());
        Assertions.assertEquals("bsdqbdybl", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("vflgzhc").type());
        Assertions.assertEquals("njvpmxn", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SapBwCubeDataset model = new SapBwCubeDataset().withDescription("kwakkchsf")
            .withStructure("datalb")
            .withSchema("datacxu")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("bsdqbdybl")
                .withParameters(mapOf("m", "datat", "lerufollcshju", "datapgweoqhbjqlqf", "xvjeazrah",
                    "dataihbymjjvtpne", "qamcthtpqgfz", "datalhbimyii")))
            .withParameters(mapOf("vflgzhc",
                new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("datakdi"), "pccxziv",
                new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("datawahcrxofgrutv"), "jd",
                new ParameterSpecification().withType(ParameterType.SECURE_STRING).withDefaultValue("datahzghhhkvn")))
            .withAnnotations(Arrays.asList("dataq"))
            .withFolder(new DatasetFolder().withName("njvpmxn"));
        model = BinaryData.fromObject(model).toObject(SapBwCubeDataset.class);
        Assertions.assertEquals("kwakkchsf", model.description());
        Assertions.assertEquals("bsdqbdybl", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("vflgzhc").type());
        Assertions.assertEquals("njvpmxn", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
