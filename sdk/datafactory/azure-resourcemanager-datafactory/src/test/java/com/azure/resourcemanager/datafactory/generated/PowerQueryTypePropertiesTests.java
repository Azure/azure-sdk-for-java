// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.PowerQueryTypeProperties;
import com.azure.resourcemanager.datafactory.models.DataFlowReference;
import com.azure.resourcemanager.datafactory.models.DataFlowReferenceType;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.PowerQuerySource;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PowerQueryTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PowerQueryTypeProperties model =
            BinaryData
                .fromString(
                    "{\"sources\":[{\"script\":\"zkn\",\"schemaLinkedService\":{\"referenceName\":\"kmjqncfvdsc\",\"parameters\":{\"vndrwbgodtg\":\"datamvwfnqqwy\",\"ai\":\"datarssgwjf\"}},\"name\":\"jmu\",\"description\":\"vecvzts\",\"dataset\":{\"referenceName\":\"gmusaictdscnkzzo\",\"parameters\":{\"hlbzqixbnjrqvzy\":\"dataddclzeqozr\",\"me\":\"dataexozonynp\",\"jxvcvaso\":\"datadpabcreuwzosg\",\"xzv\":\"datamr\"}},\"linkedService\":{\"referenceName\":\"b\",\"parameters\":{\"uvecovsd\":\"datazygba\",\"akrlimzfvppkeqsi\":\"datahzrtd\",\"gygnhrkombc\":\"datajmcl\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"jdopggorwjo\",\"datasetParameters\":\"datarotpvclpof\",\"parameters\":{\"kptskwxjgvhxc\":\"datam\",\"kmkook\":\"databmk\",\"wk\":\"dataputmgvmuyakm\"},\"\":{\"qjimejtgzjxxlfej\":\"datawzkroyrdurxfl\"}}},{\"script\":\"uqloiwyayyzivrmi\",\"schemaLinkedService\":{\"referenceName\":\"dql\",\"parameters\":{\"xfns\":\"datawhrktjleifibfipl\",\"mhn\":\"dataycjowlyeyzmudsq\"}},\"name\":\"lzbuwodmachbkvn\",\"description\":\"bjrmvgo\",\"dataset\":{\"referenceName\":\"lehmum\",\"parameters\":{\"prwnhkgqggoxsst\":\"datallcz\"}},\"linkedService\":{\"referenceName\":\"vrak\",\"parameters\":{\"emjpequ\":\"dataynjcwmhlymgnukxr\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"zaudgjtfbclakkuc\",\"datasetParameters\":\"datawnhczbutou\",\"parameters\":{\"cqqwwvgwkslvlize\":\"datatirjwayh\",\"v\":\"datavbia\",\"wkhojqttbspvkhg\":\"datasrgekzyqxadyfhb\",\"xrk\":\"dataaqjsgyzstujr\"},\"\":{\"lduyehiiittugyuq\":\"datad\",\"csozjv\":\"datarldaxurfqa\"}}},{\"script\":\"zciggbnvtxofwa\",\"schemaLinkedService\":{\"referenceName\":\"yxwhoeamo\",\"parameters\":{\"fpnimtwuuhaueg\":\"datadoey\",\"zjy\":\"datakwmnfeub\"}},\"name\":\"kwfugiphrrkuu\",\"description\":\"qdurhzzfopue\",\"dataset\":{\"referenceName\":\"usvwluj\",\"parameters\":{\"fmwc\":\"datanibittoztjdqumq\",\"rbelfnzz\":\"dataddtgctxegtvgwy\",\"unomir\":\"datayizwbxgdebxla\"}},\"linkedService\":{\"referenceName\":\"fabenqla\",\"parameters\":{\"bcpjstbhem\":\"datagewayxfl\",\"eapdrbzyv\":\"datacucsqsnxfbxu\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"adulpodkaxp\",\"datasetParameters\":\"databkzhmhjd\",\"parameters\":{\"hfzt\":\"datadeluqroja\",\"bkuwpzqxlc\":\"dataraysrkgzkyhu\",\"ecjvxf\":\"dataeak\",\"ppwooaj\":\"dataqufqizj\"},\"\":{\"xpxhnzlslekc\":\"datajmjjxi\",\"adeghztldsvc\":\"datatgzkjtyqpd\",\"qymjzucwwmejjqhd\":\"datadjiah\",\"ookyfoz\":\"datawvmqxi\"}}}],\"script\":\"nzxbyp\",\"documentLocale\":\"pgaixwrgrkkderf\"}")
                .toObject(PowerQueryTypeProperties.class);
        Assertions.assertEquals("jmu", model.sources().get(0).name());
        Assertions.assertEquals("vecvzts", model.sources().get(0).description());
        Assertions.assertEquals("gmusaictdscnkzzo", model.sources().get(0).dataset().referenceName());
        Assertions.assertEquals("b", model.sources().get(0).linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.sources().get(0).flowlet().type());
        Assertions.assertEquals("jdopggorwjo", model.sources().get(0).flowlet().referenceName());
        Assertions.assertEquals("kmjqncfvdsc", model.sources().get(0).schemaLinkedService().referenceName());
        Assertions.assertEquals("zkn", model.sources().get(0).script());
        Assertions.assertEquals("nzxbyp", model.script());
        Assertions.assertEquals("pgaixwrgrkkderf", model.documentLocale());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PowerQueryTypeProperties model =
            new PowerQueryTypeProperties()
                .withSources(
                    Arrays
                        .asList(
                            new PowerQuerySource()
                                .withName("jmu")
                                .withDescription("vecvzts")
                                .withDataset(
                                    new DatasetReference()
                                        .withReferenceName("gmusaictdscnkzzo")
                                        .withParameters(
                                            mapOf(
                                                "hlbzqixbnjrqvzy",
                                                "dataddclzeqozr",
                                                "me",
                                                "dataexozonynp",
                                                "jxvcvaso",
                                                "datadpabcreuwzosg",
                                                "xzv",
                                                "datamr")))
                                .withLinkedService(
                                    new LinkedServiceReference()
                                        .withReferenceName("b")
                                        .withParameters(
                                            mapOf(
                                                "uvecovsd",
                                                "datazygba",
                                                "akrlimzfvppkeqsi",
                                                "datahzrtd",
                                                "gygnhrkombc",
                                                "datajmcl")))
                                .withFlowlet(
                                    new DataFlowReference()
                                        .withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                                        .withReferenceName("jdopggorwjo")
                                        .withDatasetParameters("datarotpvclpof")
                                        .withParameters(
                                            mapOf(
                                                "kptskwxjgvhxc",
                                                "datam",
                                                "kmkook",
                                                "databmk",
                                                "wk",
                                                "dataputmgvmuyakm"))
                                        .withAdditionalProperties(mapOf()))
                                .withSchemaLinkedService(
                                    new LinkedServiceReference()
                                        .withReferenceName("kmjqncfvdsc")
                                        .withParameters(mapOf("vndrwbgodtg", "datamvwfnqqwy", "ai", "datarssgwjf")))
                                .withScript("zkn"),
                            new PowerQuerySource()
                                .withName("lzbuwodmachbkvn")
                                .withDescription("bjrmvgo")
                                .withDataset(
                                    new DatasetReference()
                                        .withReferenceName("lehmum")
                                        .withParameters(mapOf("prwnhkgqggoxsst", "datallcz")))
                                .withLinkedService(
                                    new LinkedServiceReference()
                                        .withReferenceName("vrak")
                                        .withParameters(mapOf("emjpequ", "dataynjcwmhlymgnukxr")))
                                .withFlowlet(
                                    new DataFlowReference()
                                        .withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                                        .withReferenceName("zaudgjtfbclakkuc")
                                        .withDatasetParameters("datawnhczbutou")
                                        .withParameters(
                                            mapOf(
                                                "cqqwwvgwkslvlize",
                                                "datatirjwayh",
                                                "v",
                                                "datavbia",
                                                "wkhojqttbspvkhg",
                                                "datasrgekzyqxadyfhb",
                                                "xrk",
                                                "dataaqjsgyzstujr"))
                                        .withAdditionalProperties(mapOf()))
                                .withSchemaLinkedService(
                                    new LinkedServiceReference()
                                        .withReferenceName("dql")
                                        .withParameters(
                                            mapOf("xfns", "datawhrktjleifibfipl", "mhn", "dataycjowlyeyzmudsq")))
                                .withScript("uqloiwyayyzivrmi"),
                            new PowerQuerySource()
                                .withName("kwfugiphrrkuu")
                                .withDescription("qdurhzzfopue")
                                .withDataset(
                                    new DatasetReference()
                                        .withReferenceName("usvwluj")
                                        .withParameters(
                                            mapOf(
                                                "fmwc",
                                                "datanibittoztjdqumq",
                                                "rbelfnzz",
                                                "dataddtgctxegtvgwy",
                                                "unomir",
                                                "datayizwbxgdebxla")))
                                .withLinkedService(
                                    new LinkedServiceReference()
                                        .withReferenceName("fabenqla")
                                        .withParameters(
                                            mapOf("bcpjstbhem", "datagewayxfl", "eapdrbzyv", "datacucsqsnxfbxu")))
                                .withFlowlet(
                                    new DataFlowReference()
                                        .withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                                        .withReferenceName("adulpodkaxp")
                                        .withDatasetParameters("databkzhmhjd")
                                        .withParameters(
                                            mapOf(
                                                "hfzt",
                                                "datadeluqroja",
                                                "bkuwpzqxlc",
                                                "dataraysrkgzkyhu",
                                                "ecjvxf",
                                                "dataeak",
                                                "ppwooaj",
                                                "dataqufqizj"))
                                        .withAdditionalProperties(mapOf()))
                                .withSchemaLinkedService(
                                    new LinkedServiceReference()
                                        .withReferenceName("yxwhoeamo")
                                        .withParameters(mapOf("fpnimtwuuhaueg", "datadoey", "zjy", "datakwmnfeub")))
                                .withScript("zciggbnvtxofwa")))
                .withScript("nzxbyp")
                .withDocumentLocale("pgaixwrgrkkderf");
        model = BinaryData.fromObject(model).toObject(PowerQueryTypeProperties.class);
        Assertions.assertEquals("jmu", model.sources().get(0).name());
        Assertions.assertEquals("vecvzts", model.sources().get(0).description());
        Assertions.assertEquals("gmusaictdscnkzzo", model.sources().get(0).dataset().referenceName());
        Assertions.assertEquals("b", model.sources().get(0).linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.sources().get(0).flowlet().type());
        Assertions.assertEquals("jdopggorwjo", model.sources().get(0).flowlet().referenceName());
        Assertions.assertEquals("kmjqncfvdsc", model.sources().get(0).schemaLinkedService().referenceName());
        Assertions.assertEquals("zkn", model.sources().get(0).script());
        Assertions.assertEquals("nzxbyp", model.script());
        Assertions.assertEquals("pgaixwrgrkkderf", model.documentLocale());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
