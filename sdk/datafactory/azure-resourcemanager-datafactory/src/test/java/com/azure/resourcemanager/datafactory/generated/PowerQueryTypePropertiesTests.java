// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.PowerQueryTypeProperties;
import com.azure.resourcemanager.datafactory.models.DataFlowReference;
import com.azure.resourcemanager.datafactory.models.DataFlowReferenceType;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.PowerQuerySource;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PowerQueryTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PowerQueryTypeProperties model = BinaryData.fromString(
            "{\"sources\":[{\"script\":\"n\",\"schemaLinkedService\":{\"referenceName\":\"ge\",\"parameters\":{\"dyfhb\":\"dataqx\",\"aqjsgyzstujr\":\"datawkhojqttbspvkhg\",\"sf\":\"dataxrk\"}},\"name\":\"rlduyehiiittugy\",\"description\":\"wrldax\",\"dataset\":{\"referenceName\":\"fqa\",\"parameters\":{\"dzciggb\":\"dataozjv\",\"o\":\"datavt\",\"doey\":\"datawalzyxwhoeamoeo\",\"kwmnfeub\":\"datafpnimtwuuhaueg\"}},\"linkedService\":{\"referenceName\":\"jyrkwfug\",\"parameters\":{\"rhzz\":\"datarrkuumnqd\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"ueoqusvwluj\",\"datasetParameters\":\"datawnibittoz\",\"parameters\":{\"ctxegt\":\"dataqumqvfmwcaddt\",\"elfnzzryiz\":\"datagwyur\"},\"\":{\"ayunomirhpfabenq\":\"datagdebx\",\"mgewayxf\":\"dataam\"}}}],\"script\":\"bcpjstbhem\",\"documentLocale\":\"u\"}")
            .toObject(PowerQueryTypeProperties.class);
        Assertions.assertEquals("rlduyehiiittugy", model.sources().get(0).name());
        Assertions.assertEquals("wrldax", model.sources().get(0).description());
        Assertions.assertEquals("fqa", model.sources().get(0).dataset().referenceName());
        Assertions.assertEquals("jyrkwfug", model.sources().get(0).linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.sources().get(0).flowlet().type());
        Assertions.assertEquals("ueoqusvwluj", model.sources().get(0).flowlet().referenceName());
        Assertions.assertEquals("ge", model.sources().get(0).schemaLinkedService().referenceName());
        Assertions.assertEquals("n", model.sources().get(0).script());
        Assertions.assertEquals("bcpjstbhem", model.script());
        Assertions.assertEquals("u", model.documentLocale());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PowerQueryTypeProperties model = new PowerQueryTypeProperties()
            .withSources(Arrays.asList(new PowerQuerySource().withName("rlduyehiiittugy")
                .withDescription("wrldax")
                .withDataset(new DatasetReference().withReferenceName("fqa")
                    .withParameters(mapOf("dzciggb", "dataozjv", "o", "datavt", "doey", "datawalzyxwhoeamoeo",
                        "kwmnfeub", "datafpnimtwuuhaueg")))
                .withLinkedService(new LinkedServiceReference().withReferenceName("jyrkwfug")
                    .withParameters(mapOf("rhzz", "datarrkuumnqd")))
                .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                    .withReferenceName("ueoqusvwluj")
                    .withDatasetParameters("datawnibittoz")
                    .withParameters(mapOf("ctxegt", "dataqumqvfmwcaddt", "elfnzzryiz", "datagwyur"))
                    .withAdditionalProperties(mapOf()))
                .withSchemaLinkedService(new LinkedServiceReference().withReferenceName("ge")
                    .withParameters(mapOf("dyfhb", "dataqx", "aqjsgyzstujr", "datawkhojqttbspvkhg", "sf", "dataxrk")))
                .withScript("n")))
            .withScript("bcpjstbhem")
            .withDocumentLocale("u");
        model = BinaryData.fromObject(model).toObject(PowerQueryTypeProperties.class);
        Assertions.assertEquals("rlduyehiiittugy", model.sources().get(0).name());
        Assertions.assertEquals("wrldax", model.sources().get(0).description());
        Assertions.assertEquals("fqa", model.sources().get(0).dataset().referenceName());
        Assertions.assertEquals("jyrkwfug", model.sources().get(0).linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.sources().get(0).flowlet().type());
        Assertions.assertEquals("ueoqusvwluj", model.sources().get(0).flowlet().referenceName());
        Assertions.assertEquals("ge", model.sources().get(0).schemaLinkedService().referenceName());
        Assertions.assertEquals("n", model.sources().get(0).script());
        Assertions.assertEquals("bcpjstbhem", model.script());
        Assertions.assertEquals("u", model.documentLocale());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
