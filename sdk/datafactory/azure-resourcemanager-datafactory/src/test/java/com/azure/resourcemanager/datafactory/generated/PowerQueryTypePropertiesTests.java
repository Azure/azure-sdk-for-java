// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.PowerQueryTypeProperties;
import com.azure.resourcemanager.datafactory.models.DataFlowReference;
import com.azure.resourcemanager.datafactory.models.DataFlowReferenceType;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.PowerQuerySource;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PowerQueryTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PowerQueryTypeProperties model = BinaryData.fromString(
            "{\"sources\":[{\"script\":\"ou\",\"schemaLinkedService\":{\"referenceName\":\"ud\",\"parameters\":{\"ncdgmoqueq\":\"datakaprhknqiijg\",\"ldxwhieproqksm\":\"datahkkyowltjouw\",\"yotnplfacqo\":\"dataxmcvprstvkitbfjt\",\"wetjtdrhutf\":\"datacqrq\"}},\"name\":\"oadtxopgehpadkmd\",\"description\":\"sszxvctkbbxuh\",\"dataset\":{\"referenceName\":\"lsi\",\"parameters\":{\"yngsuxxcz\":\"dataclabv\"}},\"linkedService\":{\"referenceName\":\"yqjoghdsa\",\"parameters\":{\"ormovdxxurntujmo\":\"dataa\",\"wemhdee\":\"datalu\",\"rhrhtsl\":\"datajslkyozdsfzjue\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"vxjnxv\",\"datasetParameters\":\"databfiobpnjodfc\",\"parameters\":{\"q\":\"dataqwm\"},\"\":{\"cywnfyszza\":\"dataxsazuxejgw\",\"ozsyvrm\":\"datazsinqbdnddb\",\"eeih\":\"datajmyitrchwudl\"}}}],\"script\":\"mnoejhqlfmsib\",\"documentLocale\":\"yrfgxkyd\"}")
            .toObject(PowerQueryTypeProperties.class);
        Assertions.assertEquals("oadtxopgehpadkmd", model.sources().get(0).name());
        Assertions.assertEquals("sszxvctkbbxuh", model.sources().get(0).description());
        Assertions.assertEquals("lsi", model.sources().get(0).dataset().referenceName());
        Assertions.assertEquals("yqjoghdsa", model.sources().get(0).linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.sources().get(0).flowlet().type());
        Assertions.assertEquals("vxjnxv", model.sources().get(0).flowlet().referenceName());
        Assertions.assertEquals("ud", model.sources().get(0).schemaLinkedService().referenceName());
        Assertions.assertEquals("ou", model.sources().get(0).script());
        Assertions.assertEquals("mnoejhqlfmsib", model.script());
        Assertions.assertEquals("yrfgxkyd", model.documentLocale());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PowerQueryTypeProperties model
            = new PowerQueryTypeProperties()
                .withSources(
                    Arrays.asList(new PowerQuerySource().withName("oadtxopgehpadkmd")
                        .withDescription("sszxvctkbbxuh")
                        .withDataset(new DatasetReference().withReferenceName("lsi")
                            .withParameters(mapOf("yngsuxxcz", "dataclabv")))
                        .withLinkedService(new LinkedServiceReference().withReferenceName("yqjoghdsa")
                            .withParameters(mapOf("ormovdxxurntujmo", "dataa", "wemhdee", "datalu", "rhrhtsl",
                                "datajslkyozdsfzjue")))
                        .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                            .withReferenceName("vxjnxv")
                            .withDatasetParameters("databfiobpnjodfc")
                            .withParameters(mapOf("q", "dataqwm"))
                            .withAdditionalProperties(mapOf()))
                        .withSchemaLinkedService(new LinkedServiceReference().withReferenceName("ud")
                            .withParameters(mapOf("ncdgmoqueq", "datakaprhknqiijg", "ldxwhieproqksm",
                                "datahkkyowltjouw", "yotnplfacqo", "dataxmcvprstvkitbfjt", "wetjtdrhutf", "datacqrq")))
                        .withScript("ou")))
                .withScript("mnoejhqlfmsib")
                .withDocumentLocale("yrfgxkyd");
        model = BinaryData.fromObject(model).toObject(PowerQueryTypeProperties.class);
        Assertions.assertEquals("oadtxopgehpadkmd", model.sources().get(0).name());
        Assertions.assertEquals("sszxvctkbbxuh", model.sources().get(0).description());
        Assertions.assertEquals("lsi", model.sources().get(0).dataset().referenceName());
        Assertions.assertEquals("yqjoghdsa", model.sources().get(0).linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.sources().get(0).flowlet().type());
        Assertions.assertEquals("vxjnxv", model.sources().get(0).flowlet().referenceName());
        Assertions.assertEquals("ud", model.sources().get(0).schemaLinkedService().referenceName());
        Assertions.assertEquals("ou", model.sources().get(0).script());
        Assertions.assertEquals("mnoejhqlfmsib", model.script());
        Assertions.assertEquals("yrfgxkyd", model.documentLocale());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
