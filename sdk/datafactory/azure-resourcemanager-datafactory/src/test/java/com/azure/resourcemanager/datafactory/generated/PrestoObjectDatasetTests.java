// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.PrestoObjectDataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PrestoObjectDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PrestoObjectDataset model = BinaryData.fromString(
            "{\"type\":\"PrestoObject\",\"typeProperties\":{\"tableName\":\"dataceqtl\",\"table\":\"datap\",\"schema\":\"datam\"},\"description\":\"ccurn\",\"structure\":\"dataunlakgixhqj\",\"schema\":\"datagqwbbxiwtwfgo\",\"linkedServiceName\":{\"referenceName\":\"lalvemnnzug\",\"parameters\":{\"mtsnvo\":\"datayydsyweoh\",\"tsw\":\"datavb\",\"vdticcaf\":\"datadopnsep\",\"ppwxnikfz\":\"datagzwkopxdkbtwoqh\"}},\"parameters\":{\"jzrfx\":{\"type\":\"Array\",\"defaultValue\":\"dataduvqzjnnuww\"}},\"annotations\":[\"databcqjkbkjcurxrjw\",\"datazrieitqmlzuw\"],\"folder\":{\"name\":\"zqajxkmpe\"},\"\":{\"eszunb\":\"datalgeehbdjgplnlxr\"}}")
            .toObject(PrestoObjectDataset.class);
        Assertions.assertEquals("ccurn", model.description());
        Assertions.assertEquals("lalvemnnzug", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("jzrfx").type());
        Assertions.assertEquals("zqajxkmpe", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PrestoObjectDataset model = new PrestoObjectDataset().withDescription("ccurn")
            .withStructure("dataunlakgixhqj")
            .withSchema("datagqwbbxiwtwfgo")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("lalvemnnzug")
                .withParameters(mapOf("mtsnvo", "datayydsyweoh", "tsw", "datavb", "vdticcaf", "datadopnsep",
                    "ppwxnikfz", "datagzwkopxdkbtwoqh")))
            .withParameters(mapOf("jzrfx",
                new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("dataduvqzjnnuww")))
            .withAnnotations(Arrays.asList("databcqjkbkjcurxrjw", "datazrieitqmlzuw"))
            .withFolder(new DatasetFolder().withName("zqajxkmpe"))
            .withTableName("dataceqtl")
            .withTable("datap")
            .withSchemaTypePropertiesSchema("datam");
        model = BinaryData.fromObject(model).toObject(PrestoObjectDataset.class);
        Assertions.assertEquals("ccurn", model.description());
        Assertions.assertEquals("lalvemnnzug", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("jzrfx").type());
        Assertions.assertEquals("zqajxkmpe", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
