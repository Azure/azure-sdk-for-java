// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.PrestoObjectDataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PrestoObjectDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PrestoObjectDataset model =
            BinaryData
                .fromString(
                    "{\"type\":\"PrestoObject\",\"typeProperties\":{\"tableName\":\"dataarluobbvalq\",\"table\":\"dataknyujxysvclfjy\",\"schema\":\"datavildlfflle\"},\"description\":\"mtxfqpfi\",\"structure\":\"datacgbfou\",\"schema\":\"databpgcryvidbz\",\"linkedServiceName\":{\"referenceName\":\"ylbvj\",\"parameters\":{\"xjftecgprz\":\"datangw\",\"dq\":\"dataqm\"}},\"parameters\":{\"xoyxuuco\":{\"type\":\"String\",\"defaultValue\":\"datayqhaat\"}},\"annotations\":[\"datayruxrzhhlh\",\"datavmgsbpgmncrv\",\"datapi\",\"dataoromppzsauqmeu\"],\"folder\":{\"name\":\"fcmpuaiugoceqtl\"},\"\":{\"ncfunlakgixhqjqh\":\"datajymwiccu\"}}")
                .toObject(PrestoObjectDataset.class);
        Assertions.assertEquals("mtxfqpfi", model.description());
        Assertions.assertEquals("ylbvj", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("xoyxuuco").type());
        Assertions.assertEquals("fcmpuaiugoceqtl", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PrestoObjectDataset model =
            new PrestoObjectDataset()
                .withDescription("mtxfqpfi")
                .withStructure("datacgbfou")
                .withSchema("databpgcryvidbz")
                .withLinkedServiceName(
                    new LinkedServiceReference()
                        .withReferenceName("ylbvj")
                        .withParameters(mapOf("xjftecgprz", "datangw", "dq", "dataqm")))
                .withParameters(
                    mapOf(
                        "xoyxuuco",
                        new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("datayqhaat")))
                .withAnnotations(Arrays.asList("datayruxrzhhlh", "datavmgsbpgmncrv", "datapi", "dataoromppzsauqmeu"))
                .withFolder(new DatasetFolder().withName("fcmpuaiugoceqtl"))
                .withTableName("dataarluobbvalq")
                .withTable("dataknyujxysvclfjy")
                .withSchemaTypePropertiesSchema("datavildlfflle");
        model = BinaryData.fromObject(model).toObject(PrestoObjectDataset.class);
        Assertions.assertEquals("mtxfqpfi", model.description());
        Assertions.assertEquals("ylbvj", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("xoyxuuco").type());
        Assertions.assertEquals("fcmpuaiugoceqtl", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
