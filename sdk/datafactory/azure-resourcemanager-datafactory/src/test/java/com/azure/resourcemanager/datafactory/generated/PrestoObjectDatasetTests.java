// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.PrestoObjectDataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PrestoObjectDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PrestoObjectDataset model = BinaryData.fromString(
            "{\"type\":\"PrestoObject\",\"typeProperties\":{\"tableName\":\"datadhnpjnezjighdu\",\"table\":\"datatpmrzwvwetqf\",\"schema\":\"dataxvfhuqhn\"},\"description\":\"qx\",\"structure\":\"datasot\",\"schema\":\"datalmr\",\"linkedServiceName\":{\"referenceName\":\"tujydeatwxpxbxed\",\"parameters\":{\"ugfnlvvkswurxdq\":\"databoceksramqch\",\"qcnbnwivlqcwyzh\":\"datavhauimnntfkqp\",\"eirta\":\"datadqkzstzpzecdl\"}},\"parameters\":{\"au\":{\"type\":\"SecureString\",\"defaultValue\":\"dataimt\"}},\"annotations\":[\"dataudzpsjqrmlujmt\"],\"folder\":{\"name\":\"ofwuzeb\"},\"\":{\"yenfspetxeu\":\"datampjbh\",\"devzpfr\":\"datawkhdlckdoxocj\",\"vrlhfxmrhjn\":\"dataortwwyjm\"}}")
            .toObject(PrestoObjectDataset.class);
        Assertions.assertEquals("qx", model.description());
        Assertions.assertEquals("tujydeatwxpxbxed", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.SECURE_STRING, model.parameters().get("au").type());
        Assertions.assertEquals("ofwuzeb", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PrestoObjectDataset model = new PrestoObjectDataset().withDescription("qx")
            .withStructure("datasot")
            .withSchema("datalmr")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("tujydeatwxpxbxed")
                .withParameters(mapOf("ugfnlvvkswurxdq", "databoceksramqch", "qcnbnwivlqcwyzh", "datavhauimnntfkqp",
                    "eirta", "datadqkzstzpzecdl")))
            .withParameters(mapOf("au",
                new ParameterSpecification().withType(ParameterType.SECURE_STRING).withDefaultValue("dataimt")))
            .withAnnotations(Arrays.asList("dataudzpsjqrmlujmt"))
            .withFolder(new DatasetFolder().withName("ofwuzeb"))
            .withTableName("datadhnpjnezjighdu")
            .withTable("datatpmrzwvwetqf")
            .withSchemaTypePropertiesSchema("dataxvfhuqhn");
        model = BinaryData.fromObject(model).toObject(PrestoObjectDataset.class);
        Assertions.assertEquals("qx", model.description());
        Assertions.assertEquals("tujydeatwxpxbxed", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.SECURE_STRING, model.parameters().get("au").type());
        Assertions.assertEquals("ofwuzeb", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
