// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.HDInsightActivityDebugInfoOption;
import com.azure.resourcemanager.datafactory.models.HDInsightStreamingActivity;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class HDInsightStreamingActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HDInsightStreamingActivity model = BinaryData.fromString(
            "{\"type\":\"HDInsightStreaming\",\"typeProperties\":{\"storageLinkedServices\":[{\"referenceName\":\"eoofoxfchunewkss\",\"parameters\":{\"lxlo\":\"datahhlhprjcfyvkkgx\",\"wdnghdnrt\":\"datazifdfswk\"}},{\"referenceName\":\"dhqkariatxhpxdvr\",\"parameters\":{\"etxnsgcwad\":\"dataghgxgzbzsasgamc\"}}],\"arguments\":[\"databageltffqalmcqt\",\"datapzwwtcwbgmx\",\"datapynslc\",\"datayvmizx\"],\"getDebugInfo\":\"Failure\",\"mapper\":\"datahqwwtar\",\"reducer\":\"datatdgpmhzlla\",\"input\":\"dataozsdnf\",\"output\":\"datapk\",\"filePaths\":[\"datasuycyfubgnmlnj\",\"dataaxiohulvpnqvc\",\"datatwn\"],\"fileLinkedService\":{\"referenceName\":\"d\",\"parameters\":{\"quycokpfyojf\":\"datam\",\"syxthdfqqz\":\"datavmsf\"}},\"combiner\":\"datagmoexgnyugsasgh\",\"commandEnvironment\":[\"dataexdxhxpqkcstynjx\",\"datandxrofwctjhdbidl\",\"dataktiojitfa\",\"datakpx\"],\"defines\":{\"ny\":\"datadrcmtsorwta\",\"oskwujhskxx\":\"dataxrrf\"}},\"linkedServiceName\":{\"referenceName\":\"zysactfimcaxg\",\"parameters\":{\"aqypjcpdt\":\"datazqtimqics\",\"xkujwn\":\"datatfpj\",\"for\":\"datanfoqw\"}},\"policy\":{\"timeout\":\"dataeamipnsyed\",\"retry\":\"datarpipslcfwgrzz\",\"retryIntervalInSeconds\":369521555,\"secureInput\":true,\"secureOutput\":false,\"\":{\"ncxoqxtj\":\"datadgsy\",\"osoxxoqyikdjaog\":\"datadpllgllvkor\",\"lg\":\"datattxqxvmybq\",\"sdccmdplhzjiqi\":\"datalf\"}},\"name\":\"miw\",\"description\":\"mzkxrqzgshqx\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"sla\",\"dependencyConditions\":[\"Succeeded\",\"Failed\",\"Completed\",\"Failed\"],\"\":{\"nmdaivezqz\":\"dataalhlp\",\"rlrcc\":\"datazdipnhbs\",\"xtl\":\"datamnoasyyadyf\",\"ekuovwiwtykpr\":\"datanzcmdgsv\"}},{\"activity\":\"ddbenfjhfszmxpos\",\"dependencyConditions\":[\"Succeeded\",\"Completed\",\"Completed\",\"Completed\"],\"\":{\"j\":\"datadkpdleeslj\",\"ni\":\"datasubxggknmv\",\"cpsjeazzdjcsbk\":\"dataoqy\",\"qdxpnzpuknf\":\"dataaluchbfrtajwsdd\"}},{\"activity\":\"ggitxsyufexivh\",\"dependencyConditions\":[\"Failed\",\"Succeeded\"],\"\":{\"fccqjenzloxaz\":\"datatkqofr\",\"vqaeyjozbdwflx\":\"datawij\",\"dletjiudcoktsgc\":\"datawliitaieledmiup\",\"grebecxuuzeuklu\":\"datapjlmsta\"}}],\"userProperties\":[{\"name\":\"ejamychwwrvvtj\",\"value\":\"datakttxvmbedvvmr\"},{\"name\":\"nmgabfz\",\"value\":\"dataai\"},{\"name\":\"hylzwzhlbp\",\"value\":\"dataplethekn\"}],\"\":{\"nsvjctytyt\":\"datamtvooaacefx\",\"ywi\":\"datarvtuxv\",\"kfqznvahpxdg\":\"datammmgbynvoytdt\"}}")
            .toObject(HDInsightStreamingActivity.class);
        Assertions.assertEquals("miw", model.name());
        Assertions.assertEquals("mzkxrqzgshqx", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("sla", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("ejamychwwrvvtj", model.userProperties().get(0).name());
        Assertions.assertEquals("zysactfimcaxg", model.linkedServiceName().referenceName());
        Assertions.assertEquals(369521555, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals("eoofoxfchunewkss", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.FAILURE, model.getDebugInfo());
        Assertions.assertEquals("d", model.fileLinkedService().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HDInsightStreamingActivity model = new HDInsightStreamingActivity().withName("miw")
            .withDescription("mzkxrqzgshqx").withState(ActivityState.INACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
            .withDependsOn(Arrays.asList(
                new ActivityDependency().withActivity("sla")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED, DependencyCondition.FAILED,
                        DependencyCondition.COMPLETED, DependencyCondition.FAILED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("ddbenfjhfszmxpos")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED,
                        DependencyCondition.COMPLETED, DependencyCondition.COMPLETED, DependencyCondition.COMPLETED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("ggitxsyufexivh")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED, DependencyCondition.SUCCEEDED))
                    .withAdditionalProperties(mapOf())))
            .withUserProperties(
                Arrays.asList(new UserProperty().withName("ejamychwwrvvtj").withValue("datakttxvmbedvvmr"),
                    new UserProperty().withName("nmgabfz").withValue("dataai"),
                    new UserProperty().withName("hylzwzhlbp").withValue("dataplethekn")))
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("zysactfimcaxg")
                .withParameters(mapOf("aqypjcpdt", "datazqtimqics", "xkujwn", "datatfpj", "for", "datanfoqw")))
            .withPolicy(new ActivityPolicy().withTimeout("dataeamipnsyed").withRetry("datarpipslcfwgrzz")
                .withRetryIntervalInSeconds(369521555).withSecureInput(true).withSecureOutput(false)
                .withAdditionalProperties(mapOf()))
            .withStorageLinkedServices(Arrays.asList(
                new LinkedServiceReference().withReferenceName("eoofoxfchunewkss")
                    .withParameters(mapOf("lxlo", "datahhlhprjcfyvkkgx", "wdnghdnrt", "datazifdfswk")),
                new LinkedServiceReference().withReferenceName("dhqkariatxhpxdvr")
                    .withParameters(mapOf("etxnsgcwad", "dataghgxgzbzsasgamc"))))
            .withArguments(Arrays.asList("databageltffqalmcqt", "datapzwwtcwbgmx", "datapynslc", "datayvmizx"))
            .withGetDebugInfo(HDInsightActivityDebugInfoOption.FAILURE).withMapper("datahqwwtar")
            .withReducer("datatdgpmhzlla").withInput("dataozsdnf").withOutput("datapk")
            .withFilePaths(Arrays.asList("datasuycyfubgnmlnj", "dataaxiohulvpnqvc", "datatwn"))
            .withFileLinkedService(new LinkedServiceReference().withReferenceName("d")
                .withParameters(mapOf("quycokpfyojf", "datam", "syxthdfqqz", "datavmsf")))
            .withCombiner("datagmoexgnyugsasgh")
            .withCommandEnvironment(
                Arrays.asList("dataexdxhxpqkcstynjx", "datandxrofwctjhdbidl", "dataktiojitfa", "datakpx"))
            .withDefines(mapOf("ny", "datadrcmtsorwta", "oskwujhskxx", "dataxrrf"));
        model = BinaryData.fromObject(model).toObject(HDInsightStreamingActivity.class);
        Assertions.assertEquals("miw", model.name());
        Assertions.assertEquals("mzkxrqzgshqx", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("sla", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("ejamychwwrvvtj", model.userProperties().get(0).name());
        Assertions.assertEquals("zysactfimcaxg", model.linkedServiceName().referenceName());
        Assertions.assertEquals(369521555, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals("eoofoxfchunewkss", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.FAILURE, model.getDebugInfo());
        Assertions.assertEquals("d", model.fileLinkedService().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
