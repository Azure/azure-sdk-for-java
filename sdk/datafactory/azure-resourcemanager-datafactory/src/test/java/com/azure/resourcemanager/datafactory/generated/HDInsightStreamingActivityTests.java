// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.HDInsightActivityDebugInfoOption;
import com.azure.resourcemanager.datafactory.models.HDInsightStreamingActivity;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class HDInsightStreamingActivityTests {
    @Test
    public void testDeserialize() {
        HDInsightStreamingActivity model =
            BinaryData
                .fromString(
                    "{\"type\":\"HDInsightStreaming\",\"typeProperties\":{\"storageLinkedServices\":[{\"referenceName\":\"kxkhupzerufgj\",\"parameters\":{}},{\"referenceName\":\"cdr\",\"parameters\":{}},{\"referenceName\":\"fcemftzgyyky\",\"parameters\":{}}],\"arguments\":[],\"getDebugInfo\":\"Always\",\"filePaths\":[],\"fileLinkedService\":{\"referenceName\":\"qnhttwdowrczfj\",\"parameters\":{}},\"commandEnvironment\":[],\"defines\":{}},\"linkedServiceName\":{\"referenceName\":\"mhmnulwemp\",\"parameters\":{}},\"policy\":{\"retryIntervalInSeconds\":1098032878,\"secureInput\":false,\"secureOutput\":false,\"\":{}},\"name\":\"zpfl\",\"description\":\"nawmhhgzotfriyrg\",\"dependsOn\":[{\"activity\":\"kvzwxxyxhighctx\",\"dependencyConditions\":[\"Skipped\",\"Completed\",\"Completed\"],\"\":{}}],\"userProperties\":[{\"name\":\"deykvskiczdfrje\"},{\"name\":\"zikgqabooh\"}],\"\":{}}")
                .toObject(HDInsightStreamingActivity.class);
        Assertions.assertEquals("zpfl", model.name());
        Assertions.assertEquals("nawmhhgzotfriyrg", model.description());
        Assertions.assertEquals("kvzwxxyxhighctx", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("deykvskiczdfrje", model.userProperties().get(0).name());
        Assertions.assertEquals("mhmnulwemp", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1098032878, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals("kxkhupzerufgj", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.ALWAYS, model.getDebugInfo());
        Assertions.assertEquals("qnhttwdowrczfj", model.fileLinkedService().referenceName());
    }

    @Test
    public void testSerialize() {
        HDInsightStreamingActivity model =
            new HDInsightStreamingActivity()
                .withName("zpfl")
                .withDescription("nawmhhgzotfriyrg")
                .withDependsOn(
                    Arrays
                        .asList(
                            new ActivityDependency()
                                .withActivity("kvzwxxyxhighctx")
                                .withDependencyConditions(
                                    Arrays
                                        .asList(
                                            DependencyCondition.SKIPPED,
                                            DependencyCondition.COMPLETED,
                                            DependencyCondition.COMPLETED))
                                .withAdditionalProperties(mapOf())))
                .withUserProperties(
                    Arrays
                        .asList(
                            new UserProperty().withName("deykvskiczdfrje"), new UserProperty().withName("zikgqabooh")))
                .withLinkedServiceName(
                    new LinkedServiceReference().withReferenceName("mhmnulwemp").withParameters(mapOf()))
                .withPolicy(
                    new ActivityPolicy()
                        .withRetryIntervalInSeconds(1098032878)
                        .withSecureInput(false)
                        .withSecureOutput(false)
                        .withAdditionalProperties(mapOf()))
                .withStorageLinkedServices(
                    Arrays
                        .asList(
                            new LinkedServiceReference().withReferenceName("kxkhupzerufgj").withParameters(mapOf()),
                            new LinkedServiceReference().withReferenceName("cdr").withParameters(mapOf()),
                            new LinkedServiceReference().withReferenceName("fcemftzgyyky").withParameters(mapOf())))
                .withArguments(Arrays.asList())
                .withGetDebugInfo(HDInsightActivityDebugInfoOption.ALWAYS)
                .withFilePaths(Arrays.asList())
                .withFileLinkedService(
                    new LinkedServiceReference().withReferenceName("qnhttwdowrczfj").withParameters(mapOf()))
                .withCommandEnvironment(Arrays.asList())
                .withDefines(mapOf());
        model = BinaryData.fromObject(model).toObject(HDInsightStreamingActivity.class);
        Assertions.assertEquals("zpfl", model.name());
        Assertions.assertEquals("nawmhhgzotfriyrg", model.description());
        Assertions.assertEquals("kvzwxxyxhighctx", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("deykvskiczdfrje", model.userProperties().get(0).name());
        Assertions.assertEquals("mhmnulwemp", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1098032878, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals("kxkhupzerufgj", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.ALWAYS, model.getDebugInfo());
        Assertions.assertEquals("qnhttwdowrczfj", model.fileLinkedService().referenceName());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
