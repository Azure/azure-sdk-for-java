// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.HDInsightActivityDebugInfoOption;
import com.azure.resourcemanager.datafactory.models.HDInsightStreamingActivity;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class HDInsightStreamingActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HDInsightStreamingActivity model = BinaryData.fromString(
            "{\"type\":\"HDInsightStreaming\",\"typeProperties\":{\"storageLinkedServices\":[{\"referenceName\":\"zydyl\",\"parameters\":{\"e\":\"dataisddmfom\"}},{\"referenceName\":\"vfnxxkmrf\",\"parameters\":{\"rfhfjwikva\":\"datakprbmca\",\"uhqilvajctpw\":\"datajx\"}},{\"referenceName\":\"frfardjqwdr\",\"parameters\":{\"syd\":\"dataoo\",\"lsxewocwmadyelw\":\"datavdqcmegwajjzxcq\"}},{\"referenceName\":\"ll\",\"parameters\":{\"zqldakbijcxctn\":\"datahanfjrdcaw\",\"avoyhnollnuhoc\":\"datajxyczzwhwsidnq\",\"nhujcunyuasstok\":\"databeoxoewprtzofcu\"}}],\"arguments\":[\"datay\",\"datayblmcen\",\"datactc\"],\"getDebugInfo\":\"Always\",\"mapper\":\"datauplxksphzyu\",\"reducer\":\"datayts\",\"input\":\"datafmajswr\",\"output\":\"datadst\",\"filePaths\":[\"datakqzulosl\"],\"fileLinkedService\":{\"referenceName\":\"fnhej\",\"parameters\":{\"lvi\":\"dataugyuxcffbs\",\"zwtzdyz\":\"datas\",\"sojdmesoxj\":\"datafgn\",\"biouuqox\":\"datapwbgfhjwchvu\"}},\"combiner\":\"datatws\",\"commandEnvironment\":[\"datadghlokvisqzmhei\",\"datasioonnfjgrtkeg\",\"datatvwffvbvuxpyveav\",\"datatzbzykks\"],\"defines\":{\"zdcj\":\"dataan\"}},\"linkedServiceName\":{\"referenceName\":\"zpmwxvfrmvtwwb\",\"parameters\":{\"lqydhhypuvhucawm\":\"datavfosbrqeyw\"}},\"policy\":{\"timeout\":\"datajll\",\"retry\":\"databqvnbxgk\",\"retryIntervalInSeconds\":1536315462,\"secureInput\":false,\"secureOutput\":false,\"\":{\"qvzwummw\":\"databytzh\"}},\"name\":\"ax\",\"description\":\"bihgcduj\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"rbtrmif\",\"dependencyConditions\":[\"Completed\",\"Failed\",\"Completed\"],\"\":{\"fkufv\":\"dataam\"}},{\"activity\":\"bcinuby\",\"dependencyConditions\":[\"Skipped\",\"Failed\",\"Completed\"],\"\":{\"ajpyuwrggfgll\":\"datakozlpsf\",\"gzvytb\":\"datasu\",\"j\":\"dataqmxkuyyrcqsyqhu\"}}],\"userProperties\":[{\"name\":\"tgmmfdfdqoepw\",\"value\":\"datayeupkpyzaenar\"},{\"name\":\"yrlqiykhoygfgch\",\"value\":\"datacbt\"}],\"\":{\"yklyhmymkcc\":\"dataskgu\"}}")
            .toObject(HDInsightStreamingActivity.class);
        Assertions.assertEquals("ax", model.name());
        Assertions.assertEquals("bihgcduj", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("rbtrmif", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("tgmmfdfdqoepw", model.userProperties().get(0).name());
        Assertions.assertEquals("zpmwxvfrmvtwwb", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1536315462, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals("zydyl", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.ALWAYS, model.getDebugInfo());
        Assertions.assertEquals("fnhej", model.fileLinkedService().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HDInsightStreamingActivity model = new HDInsightStreamingActivity().withName("ax").withDescription("bihgcduj")
            .withState(ActivityState.ACTIVE).withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
            .withDependsOn(Arrays.asList(
                new ActivityDependency().withActivity("rbtrmif")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED, DependencyCondition.FAILED,
                        DependencyCondition.COMPLETED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("bcinuby")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.FAILED,
                        DependencyCondition.COMPLETED))
                    .withAdditionalProperties(mapOf())))
            .withUserProperties(
                Arrays.asList(new UserProperty().withName("tgmmfdfdqoepw").withValue("datayeupkpyzaenar"),
                    new UserProperty().withName("yrlqiykhoygfgch").withValue("datacbt")))
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("zpmwxvfrmvtwwb")
                .withParameters(mapOf("lqydhhypuvhucawm", "datavfosbrqeyw")))
            .withPolicy(new ActivityPolicy().withTimeout("datajll").withRetry("databqvnbxgk")
                .withRetryIntervalInSeconds(1536315462).withSecureInput(false).withSecureOutput(false)
                .withAdditionalProperties(mapOf()))
            .withStorageLinkedServices(Arrays.asList(
                new LinkedServiceReference().withReferenceName("zydyl").withParameters(mapOf("e", "dataisddmfom")),
                new LinkedServiceReference().withReferenceName("vfnxxkmrf")
                    .withParameters(mapOf("rfhfjwikva", "datakprbmca", "uhqilvajctpw", "datajx")),
                new LinkedServiceReference().withReferenceName("frfardjqwdr")
                    .withParameters(mapOf("syd", "dataoo", "lsxewocwmadyelw", "datavdqcmegwajjzxcq")),
                new LinkedServiceReference().withReferenceName("ll")
                    .withParameters(mapOf("zqldakbijcxctn", "datahanfjrdcaw", "avoyhnollnuhoc", "datajxyczzwhwsidnq",
                        "nhujcunyuasstok", "databeoxoewprtzofcu"))))
            .withArguments(Arrays.asList("datay", "datayblmcen", "datactc"))
            .withGetDebugInfo(HDInsightActivityDebugInfoOption.ALWAYS).withMapper("datauplxksphzyu")
            .withReducer("datayts").withInput("datafmajswr").withOutput("datadst")
            .withFilePaths(Arrays.asList("datakqzulosl"))
            .withFileLinkedService(new LinkedServiceReference().withReferenceName("fnhej")
                .withParameters(mapOf("lvi", "dataugyuxcffbs", "zwtzdyz", "datas", "sojdmesoxj", "datafgn", "biouuqox",
                    "datapwbgfhjwchvu")))
            .withCombiner("datatws")
            .withCommandEnvironment(
                Arrays.asList("datadghlokvisqzmhei", "datasioonnfjgrtkeg", "datatvwffvbvuxpyveav", "datatzbzykks"))
            .withDefines(mapOf("zdcj", "dataan"));
        model = BinaryData.fromObject(model).toObject(HDInsightStreamingActivity.class);
        Assertions.assertEquals("ax", model.name());
        Assertions.assertEquals("bihgcduj", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("rbtrmif", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("tgmmfdfdqoepw", model.userProperties().get(0).name());
        Assertions.assertEquals("zpmwxvfrmvtwwb", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1536315462, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals("zydyl", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.ALWAYS, model.getDebugInfo());
        Assertions.assertEquals("fnhej", model.fileLinkedService().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
