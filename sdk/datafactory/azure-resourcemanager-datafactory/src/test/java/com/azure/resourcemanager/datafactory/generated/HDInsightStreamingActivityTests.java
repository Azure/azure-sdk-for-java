// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.HDInsightActivityDebugInfoOption;
import com.azure.resourcemanager.datafactory.models.HDInsightStreamingActivity;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class HDInsightStreamingActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HDInsightStreamingActivity model = BinaryData.fromString(
            "{\"type\":\"HDInsightStreaming\",\"typeProperties\":{\"storageLinkedServices\":[{\"referenceName\":\"cffbsnlv\",\"parameters\":{\"nsojdmesoxjkpwbg\":\"datayzwtzdyzufg\"}},{\"referenceName\":\"h\",\"parameters\":{\"bxtwsre\":\"datahvupbiouuqo\"}},{\"referenceName\":\"dghlokvisqzmhei\",\"parameters\":{\"nfjgrtkegrtvwff\":\"dataoo\",\"bzykk\":\"databvuxpyveavst\"}},{\"referenceName\":\"djkanizd\",\"parameters\":{\"mwxvfr\":\"datagz\",\"wbahi\":\"datavt\"}}],\"arguments\":[\"datasbrqeywhlqydhh\",\"datapuvhucawmhbq\",\"datally\",\"databqvnbxgk\"],\"getDebugInfo\":\"None\",\"mapper\":\"dataoumgvwbytzheqvzw\",\"reducer\":\"datammw\",\"input\":\"dataax\",\"output\":\"datacbihgcdujhza\",\"filePaths\":[\"datakqrbt\",\"datamifleiz\",\"datauka\",\"datat\"],\"fileLinkedService\":{\"referenceName\":\"ufvabci\",\"parameters\":{\"pliwgkozl\":\"datayf\"}},\"combiner\":\"datafrajpyu\",\"commandEnvironment\":[\"datagf\",\"datalllsungzvytbqq\"],\"defines\":{\"ugjea\":\"datauyyrcqsyq\",\"yeupkpyzaenar\":\"datatgmmfdfdqoepw\",\"cbt\":\"datayrlqiykhoygfgch\",\"kl\":\"datacsskgug\"}},\"linkedServiceName\":{\"referenceName\":\"mymkccclefawfeea\",\"parameters\":{\"gowfqrykikhf\":\"datamm\"}},\"policy\":{\"timeout\":\"datacllz\",\"retry\":\"datazifohtsmkf\",\"retryIntervalInSeconds\":1954134029,\"secureInput\":true,\"secureOutput\":true,\"\":{\"ionnqszn\":\"datahbxb\",\"o\":\"databi\",\"dteyvpv\":\"dataexjcrw\"}},\"name\":\"cqjgwtiasfbp\",\"description\":\"vxxxhbrysnszse\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"ykrndxbk\",\"dependencyConditions\":[\"Succeeded\",\"Skipped\"],\"\":{\"qyedhyfncwiyfzu\":\"datafhl\"}},{\"activity\":\"bsaaxstnziv\",\"dependencyConditions\":[\"Skipped\",\"Succeeded\",\"Succeeded\",\"Failed\"],\"\":{\"hc\":\"datawzbzedhcxyg\",\"xmxqskemta\":\"datanyoktcgmcthjgb\",\"bticnidubo\":\"datajfmkwqp\",\"vwalhawoptiq\":\"datamjiib\"}},{\"activity\":\"u\",\"dependencyConditions\":[\"Failed\",\"Completed\",\"Succeeded\"],\"\":{\"mmwylrv\":\"dataxsmapd\",\"mtnrcvovhyqexuj\":\"datataelpuxhkuemcbt\"}},{\"activity\":\"leweegvq\",\"dependencyConditions\":[\"Failed\",\"Failed\",\"Succeeded\",\"Succeeded\"],\"\":{\"cpf\":\"datac\",\"mgsi\":\"datammgfwxthr\"}}],\"userProperties\":[{\"name\":\"sclhjgckkbnaseny\",\"value\":\"datahmwzgfankeoloros\"},{\"name\":\"hgcchzu\",\"value\":\"datapkhfh\"}],\"\":{\"dyj\":\"datazyeyfkin\",\"vbpneymlctnns\":\"datafpuuyk\",\"azzp\":\"datacufijvaxu\",\"bnqyewinlenht\":\"dataldaaxglx\"}}")
            .toObject(HDInsightStreamingActivity.class);
        Assertions.assertEquals("cqjgwtiasfbp", model.name());
        Assertions.assertEquals("vxxxhbrysnszse", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("ykrndxbk", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("sclhjgckkbnaseny", model.userProperties().get(0).name());
        Assertions.assertEquals("mymkccclefawfeea", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1954134029, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals("cffbsnlv", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.NONE, model.getDebugInfo());
        Assertions.assertEquals("ufvabci", model.fileLinkedService().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HDInsightStreamingActivity model
            = new HDInsightStreamingActivity().withName("cqjgwtiasfbp")
                .withDescription("vxxxhbrysnszse")
                .withState(ActivityState.INACTIVE)
                .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
                .withDependsOn(Arrays.asList(
                    new ActivityDependency().withActivity("ykrndxbk")
                        .withDependencyConditions(
                            Arrays.asList(DependencyCondition.SUCCEEDED, DependencyCondition.SKIPPED))
                        .withAdditionalProperties(mapOf()),
                    new ActivityDependency().withActivity("bsaaxstnziv")
                        .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED,
                            DependencyCondition.SUCCEEDED, DependencyCondition.SUCCEEDED, DependencyCondition.FAILED))
                        .withAdditionalProperties(mapOf()),
                    new ActivityDependency().withActivity("u")
                        .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED,
                            DependencyCondition.COMPLETED, DependencyCondition.SUCCEEDED))
                        .withAdditionalProperties(mapOf()),
                    new ActivityDependency().withActivity("leweegvq")
                        .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED, DependencyCondition.FAILED,
                            DependencyCondition.SUCCEEDED, DependencyCondition.SUCCEEDED))
                        .withAdditionalProperties(mapOf())))
                .withUserProperties(
                    Arrays.asList(new UserProperty().withName("sclhjgckkbnaseny").withValue("datahmwzgfankeoloros"),
                        new UserProperty().withName("hgcchzu").withValue("datapkhfh")))
                .withLinkedServiceName(new LinkedServiceReference().withReferenceName("mymkccclefawfeea")
                    .withParameters(mapOf("gowfqrykikhf", "datamm")))
                .withPolicy(new ActivityPolicy()
                    .withTimeout("datacllz")
                    .withRetry("datazifohtsmkf")
                    .withRetryIntervalInSeconds(1954134029)
                    .withSecureInput(true)
                    .withSecureOutput(true)
                    .withAdditionalProperties(mapOf()))
                .withStorageLinkedServices(Arrays.asList(new LinkedServiceReference()
                    .withReferenceName("cffbsnlv")
                    .withParameters(mapOf("nsojdmesoxjkpwbg", "datayzwtzdyzufg")),
                    new LinkedServiceReference().withReferenceName("h")
                        .withParameters(mapOf("bxtwsre", "datahvupbiouuqo")),
                    new LinkedServiceReference().withReferenceName("dghlokvisqzmhei")
                        .withParameters(mapOf("nfjgrtkegrtvwff", "dataoo", "bzykk", "databvuxpyveavst")),
                    new LinkedServiceReference().withReferenceName("djkanizd")
                        .withParameters(mapOf("mwxvfr", "datagz", "wbahi", "datavt"))))
                .withArguments(Arrays.asList("datasbrqeywhlqydhh", "datapuvhucawmhbq", "datally", "databqvnbxgk"))
                .withGetDebugInfo(HDInsightActivityDebugInfoOption.NONE)
                .withMapper("dataoumgvwbytzheqvzw")
                .withReducer("datammw")
                .withInput("dataax")
                .withOutput("datacbihgcdujhza")
                .withFilePaths(Arrays.asList("datakqrbt", "datamifleiz", "datauka", "datat"))
                .withFileLinkedService(new LinkedServiceReference().withReferenceName("ufvabci")
                    .withParameters(mapOf("pliwgkozl", "datayf")))
                .withCombiner("datafrajpyu")
                .withCommandEnvironment(Arrays.asList("datagf", "datalllsungzvytbqq"))
                .withDefines(mapOf("ugjea", "datauyyrcqsyq", "yeupkpyzaenar", "datatgmmfdfdqoepw", "cbt",
                    "datayrlqiykhoygfgch", "kl", "datacsskgug"));
        model = BinaryData.fromObject(model).toObject(HDInsightStreamingActivity.class);
        Assertions.assertEquals("cqjgwtiasfbp", model.name());
        Assertions.assertEquals("vxxxhbrysnszse", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("ykrndxbk", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("sclhjgckkbnaseny", model.userProperties().get(0).name());
        Assertions.assertEquals("mymkccclefawfeea", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1954134029, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals("cffbsnlv", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.NONE, model.getDebugInfo());
        Assertions.assertEquals("ufvabci", model.fileLinkedService().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
