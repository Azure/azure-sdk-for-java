// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.HDInsightActivityDebugInfoOption;
import com.azure.resourcemanager.datafactory.models.HDInsightStreamingActivity;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class HDInsightStreamingActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HDInsightStreamingActivity model = BinaryData.fromString(
            "{\"type\":\"HDInsightStreaming\",\"typeProperties\":{\"storageLinkedServices\":[{\"referenceName\":\"y\",\"parameters\":{\"xamup\":\"datalmcenjct\",\"yubytslfmajswrf\":\"dataxksph\"}},{\"referenceName\":\"s\",\"parameters\":{\"ufnhejualug\":\"datakqzulosl\"}},{\"referenceName\":\"uxcffbsnlvissyzw\",\"parameters\":{\"kpwbgfhjwchvu\":\"datayzufgnnsojdmesox\",\"xtwsreadghlokvis\":\"databiouuqox\"}}],\"arguments\":[\"dataheimsioonnf\",\"datagrtkeg\",\"datatvwffvbvuxpyveav\"],\"getDebugInfo\":\"Always\",\"mapper\":\"databzykk\",\"reducer\":\"datadjkanizd\",\"input\":\"datajxgzpmwx\",\"output\":\"datafrm\",\"filePaths\":[\"dataww\",\"dataah\",\"datavfosbrqeyw\",\"datalqydhhypuvhucawm\"],\"fileLinkedService\":{\"referenceName\":\"qjllyzb\",\"parameters\":{\"bytzh\":\"databxgkudioumgv\",\"ax\":\"dataqvzwummw\",\"wkqrbtrmifleizd\":\"datacbihgcdujhza\"}},\"combiner\":\"dataam\",\"commandEnvironment\":[\"dataufvabci\",\"dataubyfspliw\"],\"defines\":{\"ggfgl\":\"datazlpsfrajpyuw\",\"mxkuyyrcqs\":\"datalsungzvytbq\",\"fdqoepwyy\":\"dataqhugjeaetgmmf\"}},\"linkedServiceName\":{\"referenceName\":\"pkpyza\",\"parameters\":{\"hoy\":\"datarfyrlqiy\",\"ugyk\":\"datafgchlcbtxcssk\"}},\"policy\":{\"timeout\":\"datamymkccclefawfeea\",\"retry\":\"datanmmo\",\"retryIntervalInSeconds\":5753856,\"secureInput\":true,\"secureOutput\":false,\"\":{\"gwtcll\":\"datakh\"}},\"name\":\"waz\",\"description\":\"ohtsmkfyox\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"bxbqionnqsznfb\",\"dependencyConditions\":[\"Succeeded\",\"Succeeded\",\"Failed\",\"Failed\"],\"\":{\"wdteyvpv\":\"datar\",\"mv\":\"datacqjgwtiasfbp\",\"vwbykrndxbkvzwq\":\"dataxxhbrysnszsehoe\"}}],\"userProperties\":[{\"name\":\"hlnqyedhyfncw\",\"value\":\"datayfzuw\"}],\"\":{\"zbzedhcxyg\":\"dataaxstnzivvccgtuji\",\"nyoktcgmcthjgb\":\"datahc\"}}")
            .toObject(HDInsightStreamingActivity.class);
        Assertions.assertEquals("waz", model.name());
        Assertions.assertEquals("ohtsmkfyox", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.onInactiveMarkAs());
        Assertions.assertEquals("bxbqionnqsznfb", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("hlnqyedhyfncw", model.userProperties().get(0).name());
        Assertions.assertEquals("pkpyza", model.linkedServiceName().referenceName());
        Assertions.assertEquals(5753856, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals("y", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.ALWAYS, model.getDebugInfo());
        Assertions.assertEquals("qjllyzb", model.fileLinkedService().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HDInsightStreamingActivity model
            = new HDInsightStreamingActivity().withName("waz")
                .withDescription("ohtsmkfyox")
                .withState(ActivityState.INACTIVE)
                .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SUCCEEDED)
                .withDependsOn(Arrays.asList(new ActivityDependency().withActivity("bxbqionnqsznfb")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED,
                        DependencyCondition.SUCCEEDED, DependencyCondition.FAILED, DependencyCondition.FAILED))
                    .withAdditionalProperties(mapOf())))
                .withUserProperties(Arrays.asList(new UserProperty().withName("hlnqyedhyfncw").withValue("datayfzuw")))
                .withLinkedServiceName(new LinkedServiceReference().withReferenceName("pkpyza")
                    .withParameters(mapOf("hoy", "datarfyrlqiy", "ugyk", "datafgchlcbtxcssk")))
                .withPolicy(new ActivityPolicy().withTimeout("datamymkccclefawfeea")
                    .withRetry("datanmmo")
                    .withRetryIntervalInSeconds(5753856)
                    .withSecureInput(true)
                    .withSecureOutput(false)
                    .withAdditionalProperties(mapOf()))
                .withStorageLinkedServices(
                    Arrays
                        .asList(
                            new LinkedServiceReference().withReferenceName("y")
                                .withParameters(mapOf("xamup", "datalmcenjct", "yubytslfmajswrf", "dataxksph")),
                            new LinkedServiceReference().withReferenceName("s")
                                .withParameters(mapOf("ufnhejualug", "datakqzulosl")),
                            new LinkedServiceReference().withReferenceName("uxcffbsnlvissyzw")
                                .withParameters(mapOf("kpwbgfhjwchvu", "datayzufgnnsojdmesox", "xtwsreadghlokvis",
                                    "databiouuqox"))))
                .withArguments(Arrays.asList("dataheimsioonnf", "datagrtkeg", "datatvwffvbvuxpyveav"))
                .withGetDebugInfo(HDInsightActivityDebugInfoOption.ALWAYS)
                .withMapper("databzykk")
                .withReducer("datadjkanizd")
                .withInput("datajxgzpmwx")
                .withOutput("datafrm")
                .withFilePaths(Arrays.asList("dataww", "dataah", "datavfosbrqeyw", "datalqydhhypuvhucawm"))
                .withFileLinkedService(new LinkedServiceReference().withReferenceName("qjllyzb")
                    .withParameters(mapOf("bytzh", "databxgkudioumgv", "ax", "dataqvzwummw", "wkqrbtrmifleizd",
                        "datacbihgcdujhza")))
                .withCombiner("dataam")
                .withCommandEnvironment(Arrays.asList("dataufvabci", "dataubyfspliw"))
                .withDefines(mapOf("ggfgl", "datazlpsfrajpyuw", "mxkuyyrcqs", "datalsungzvytbq", "fdqoepwyy",
                    "dataqhugjeaetgmmf"));
        model = BinaryData.fromObject(model).toObject(HDInsightStreamingActivity.class);
        Assertions.assertEquals("waz", model.name());
        Assertions.assertEquals("ohtsmkfyox", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.onInactiveMarkAs());
        Assertions.assertEquals("bxbqionnqsznfb", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("hlnqyedhyfncw", model.userProperties().get(0).name());
        Assertions.assertEquals("pkpyza", model.linkedServiceName().referenceName());
        Assertions.assertEquals(5753856, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals("y", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.ALWAYS, model.getDebugInfo());
        Assertions.assertEquals("qjllyzb", model.fileLinkedService().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
