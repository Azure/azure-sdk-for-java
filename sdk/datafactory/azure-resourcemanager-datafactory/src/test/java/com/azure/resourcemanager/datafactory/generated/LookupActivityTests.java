// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.CopySource;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.LookupActivity;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class LookupActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        LookupActivity model = BinaryData.fromString(
            "{\"type\":\"Lookup\",\"typeProperties\":{\"source\":{\"type\":\"CopySource\",\"sourceRetryCount\":\"datazufxuugvdbp\",\"sourceRetryWait\":\"dataycpystcmavl\",\"maxConcurrentConnections\":\"databm\",\"disableMetricsCollection\":\"datavfgwgoxfd\",\"\":{\"bifpc\":\"datazoxhazafmq\",\"gjxklojdydha\":\"dataammpeakdhebzquq\",\"sxgjih\":\"datafjwm\"}},\"dataset\":{\"referenceName\":\"xoxjghumvpt\",\"parameters\":{\"fealcjuzzz\":\"datagll\"}},\"firstRowOnly\":\"datakucrnov\"},\"linkedServiceName\":{\"referenceName\":\"dbaornxsyhpilqo\",\"parameters\":{\"z\":\"datazejcpzzqjinry\"}},\"policy\":{\"timeout\":\"datarcivxaq\",\"retry\":\"datavgxqtkcvnyi\",\"retryIntervalInSeconds\":802962573,\"secureInput\":false,\"secureOutput\":false,\"\":{\"utesqkklzyhav\":\"datagxelzuvdyztn\",\"ltc\":\"dataivefs\",\"vsidmcoxobrvzder\":\"datahpntewv\"}},\"name\":\"nnfi\",\"description\":\"qb\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"eeagbrslbzcyubq\",\"dependencyConditions\":[\"Skipped\",\"Skipped\",\"Completed\",\"Failed\"],\"\":{\"xuswwqnwxo\":\"dataex\"}}],\"userProperties\":[{\"name\":\"vgagdnzvo\",\"value\":\"datarnqnurunky\"},{\"name\":\"zcpifasifdtiocsf\",\"value\":\"datacyyicascvcmthu\"},{\"name\":\"borynmadtyhm\",\"value\":\"dataphoem\"}],\"\":{\"qfoatqnhr\":\"dataqwdphncftbqij\",\"tiznvijdtmjy\":\"dataxhmtxpxdtmrwjk\",\"z\":\"databkdhwadnccunrviq\",\"a\":\"datasliou\"}}")
            .toObject(LookupActivity.class);
        Assertions.assertEquals("nnfi", model.name());
        Assertions.assertEquals("qb", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("eeagbrslbzcyubq", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("vgagdnzvo", model.userProperties().get(0).name());
        Assertions.assertEquals("dbaornxsyhpilqo", model.linkedServiceName().referenceName());
        Assertions.assertEquals(802962573, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals("xoxjghumvpt", model.dataset().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        LookupActivity model = new LookupActivity().withName("nnfi")
            .withDescription("qb")
            .withState(ActivityState.ACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
            .withDependsOn(Arrays.asList(new ActivityDependency().withActivity("eeagbrslbzcyubq")
                .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.SKIPPED,
                    DependencyCondition.COMPLETED, DependencyCondition.FAILED))
                .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("vgagdnzvo").withValue("datarnqnurunky"),
                new UserProperty().withName("zcpifasifdtiocsf").withValue("datacyyicascvcmthu"),
                new UserProperty().withName("borynmadtyhm").withValue("dataphoem")))
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("dbaornxsyhpilqo")
                .withParameters(mapOf("z", "datazejcpzzqjinry")))
            .withPolicy(new ActivityPolicy().withTimeout("datarcivxaq")
                .withRetry("datavgxqtkcvnyi")
                .withRetryIntervalInSeconds(802962573)
                .withSecureInput(false)
                .withSecureOutput(false)
                .withAdditionalProperties(mapOf()))
            .withSource(new CopySource().withSourceRetryCount("datazufxuugvdbp")
                .withSourceRetryWait("dataycpystcmavl")
                .withMaxConcurrentConnections("databm")
                .withDisableMetricsCollection("datavfgwgoxfd")
                .withAdditionalProperties(mapOf("type", "CopySource")))
            .withDataset(
                new DatasetReference().withReferenceName("xoxjghumvpt").withParameters(mapOf("fealcjuzzz", "datagll")))
            .withFirstRowOnly("datakucrnov");
        model = BinaryData.fromObject(model).toObject(LookupActivity.class);
        Assertions.assertEquals("nnfi", model.name());
        Assertions.assertEquals("qb", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("eeagbrslbzcyubq", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("vgagdnzvo", model.userProperties().get(0).name());
        Assertions.assertEquals("dbaornxsyhpilqo", model.linkedServiceName().referenceName());
        Assertions.assertEquals(802962573, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals("xoxjghumvpt", model.dataset().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
