// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.CopySource;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.LookupActivity;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class LookupActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        LookupActivity model = BinaryData.fromString(
            "{\"type\":\"Lookup\",\"typeProperties\":{\"source\":{\"type\":\"CopySource\",\"sourceRetryCount\":\"datanijxyczzwhwsi\",\"sourceRetryWait\":\"dataqiavoyh\",\"maxConcurrentConnections\":\"datallnu\",\"disableMetricsCollection\":\"datacbb\",\"\":{\"rt\":\"dataoew\"}},\"dataset\":{\"referenceName\":\"ofcurnhu\",\"parameters\":{\"kzhmyayblmcen\":\"datanyuasst\"}},\"firstRowOnly\":\"datatcxam\"},\"linkedServiceName\":{\"referenceName\":\"lxksph\",\"parameters\":{\"t\":\"datab\",\"w\":\"datalfmaj\"}},\"policy\":{\"timeout\":\"datas\",\"retry\":\"datavkq\",\"retryIntervalInSeconds\":856589229,\"secureInput\":false,\"secureOutput\":true,\"\":{\"cffbsnlv\":\"datanhejualugyu\",\"jdmesoxjkp\":\"datassyzwtzdyzufgnns\"}},\"name\":\"bgfhjwchv\",\"description\":\"biouuqox\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"adghlokvisqzmhe\",\"dependencyConditions\":[\"Completed\",\"Failed\",\"Succeeded\",\"Failed\"],\"\":{\"ff\":\"datafjgrtkegrtv\",\"bzykk\":\"databvuxpyveavst\",\"jxgzpmwx\":\"datadjkanizd\",\"twwbahivfosbr\":\"datafrm\"}}],\"userProperties\":[{\"name\":\"whlqydhhypu\",\"value\":\"datahucawmhbqjllyzbq\"}],\"\":{\"u\":\"dataxg\",\"bytzh\":\"dataioumgv\",\"ax\":\"dataqvzwummw\"}}")
            .toObject(LookupActivity.class);
        Assertions.assertEquals("bgfhjwchv", model.name());
        Assertions.assertEquals("biouuqox", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("adghlokvisqzmhe", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("whlqydhhypu", model.userProperties().get(0).name());
        Assertions.assertEquals("lxksph", model.linkedServiceName().referenceName());
        Assertions.assertEquals(856589229, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals("ofcurnhu", model.dataset().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        LookupActivity model = new LookupActivity().withName("bgfhjwchv")
            .withDescription("biouuqox")
            .withState(ActivityState.ACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
            .withDependsOn(Arrays.asList(new ActivityDependency().withActivity("adghlokvisqzmhe")
                .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED, DependencyCondition.FAILED,
                    DependencyCondition.SUCCEEDED, DependencyCondition.FAILED))
                .withAdditionalProperties(mapOf())))
            .withUserProperties(
                Arrays.asList(new UserProperty().withName("whlqydhhypu").withValue("datahucawmhbqjllyzbq")))
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("lxksph")
                .withParameters(mapOf("t", "datab", "w", "datalfmaj")))
            .withPolicy(new ActivityPolicy().withTimeout("datas")
                .withRetry("datavkq")
                .withRetryIntervalInSeconds(856589229)
                .withSecureInput(false)
                .withSecureOutput(true)
                .withAdditionalProperties(mapOf()))
            .withSource(new CopySource().withSourceRetryCount("datanijxyczzwhwsi")
                .withSourceRetryWait("dataqiavoyh")
                .withMaxConcurrentConnections("datallnu")
                .withDisableMetricsCollection("datacbb")
                .withAdditionalProperties(mapOf("type", "CopySource")))
            .withDataset(new DatasetReference().withReferenceName("ofcurnhu")
                .withParameters(mapOf("kzhmyayblmcen", "datanyuasst")))
            .withFirstRowOnly("datatcxam");
        model = BinaryData.fromObject(model).toObject(LookupActivity.class);
        Assertions.assertEquals("bgfhjwchv", model.name());
        Assertions.assertEquals("biouuqox", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("adghlokvisqzmhe", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("whlqydhhypu", model.userProperties().get(0).name());
        Assertions.assertEquals("lxksph", model.linkedServiceName().referenceName());
        Assertions.assertEquals(856589229, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals("ofcurnhu", model.dataset().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
