// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.CopySource;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.LookupActivity;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class LookupActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        LookupActivity model = BinaryData.fromString(
            "{\"type\":\"Lookup\",\"typeProperties\":{\"source\":{\"type\":\"CopySource\",\"sourceRetryCount\":\"datawftcnzo\",\"sourceRetryWait\":\"dataa\",\"maxConcurrentConnections\":\"datamqpt\",\"disableMetricsCollection\":\"datakmdkbtmupmla\",\"\":{\"tibuflppn\":\"dataocs\",\"kgvwkdgsrtm\":\"datavujkzb\"}},\"dataset\":{\"referenceName\":\"fajygnhmoeoxs\",\"parameters\":{\"xfaucihqsogt\":\"datajzodcxygpmjfwm\",\"cnly\":\"dataao\",\"xiwfkdblvbwuey\":\"dataizwtqvgpidrtb\"}},\"firstRowOnly\":\"datal\"},\"linkedServiceName\":{\"referenceName\":\"v\",\"parameters\":{\"xmpiqlnwfbj\":\"dataoagaqnekwe\",\"psufcdgcvfxsvxk\":\"datahxsmhvjogvqh\",\"wlenrcovq\":\"datayhkhwqwvwfombcg\"}},\"policy\":{\"timeout\":\"datafyc\",\"retry\":\"datargagxzmrxx\",\"retryIntervalInSeconds\":494364845,\"secureInput\":false,\"secureOutput\":true,\"\":{\"vni\":\"datawrhoma\",\"oneoqy\":\"dataup\"}},\"name\":\"tfx\",\"description\":\"skqvkdpnqcuprl\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"cue\",\"dependencyConditions\":[\"Completed\",\"Failed\"],\"\":{\"tqvqyinifnmccf\":\"dataeel\",\"y\":\"datak\",\"vatnfdhyrhfvaap\":\"datazmnamesdcmg\",\"uj\":\"datagyyufhcfeggy\"}},{\"activity\":\"bdvazqsbrqspvltu\",\"dependencyConditions\":[\"Failed\",\"Skipped\",\"Skipped\"],\"\":{\"injc\":\"datallxeft\"}}],\"userProperties\":[{\"name\":\"oaskul\",\"value\":\"dataqweoob\"},{\"name\":\"ngymbzawdwtzx\",\"value\":\"databqzplzyjktc\"},{\"name\":\"pwvhiaxkm\",\"value\":\"dataitczuscqobujfx\"}],\"\":{\"mjotccbduwswfb\":\"datalwgkaaxpwkmbdhc\",\"ubmeih\":\"datay\"}}")
            .toObject(LookupActivity.class);
        Assertions.assertEquals("tfx", model.name());
        Assertions.assertEquals("skqvkdpnqcuprl", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.onInactiveMarkAs());
        Assertions.assertEquals("cue", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("oaskul", model.userProperties().get(0).name());
        Assertions.assertEquals("v", model.linkedServiceName().referenceName());
        Assertions.assertEquals(494364845, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals("fajygnhmoeoxs", model.dataset().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        LookupActivity model
            = new LookupActivity().withName("tfx")
                .withDescription("skqvkdpnqcuprl")
                .withState(ActivityState.ACTIVE)
                .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SUCCEEDED)
                .withDependsOn(Arrays.asList(
                    new ActivityDependency().withActivity("cue")
                        .withDependencyConditions(
                            Arrays.asList(DependencyCondition.COMPLETED, DependencyCondition.FAILED))
                        .withAdditionalProperties(mapOf()),
                    new ActivityDependency().withActivity("bdvazqsbrqspvltu")
                        .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED, DependencyCondition.SKIPPED,
                            DependencyCondition.SKIPPED))
                        .withAdditionalProperties(mapOf())))
                .withUserProperties(Arrays.asList(new UserProperty().withName("oaskul").withValue("dataqweoob"),
                    new UserProperty().withName("ngymbzawdwtzx").withValue("databqzplzyjktc"),
                    new UserProperty().withName("pwvhiaxkm").withValue("dataitczuscqobujfx")))
                .withLinkedServiceName(new LinkedServiceReference().withReferenceName("v")
                    .withParameters(mapOf("xmpiqlnwfbj", "dataoagaqnekwe", "psufcdgcvfxsvxk", "datahxsmhvjogvqh",
                        "wlenrcovq", "datayhkhwqwvwfombcg")))
                .withPolicy(new ActivityPolicy().withTimeout("datafyc")
                    .withRetry("datargagxzmrxx")
                    .withRetryIntervalInSeconds(494364845)
                    .withSecureInput(false)
                    .withSecureOutput(true)
                    .withAdditionalProperties(mapOf()))
                .withSource(new CopySource().withSourceRetryCount("datawftcnzo")
                    .withSourceRetryWait("dataa")
                    .withMaxConcurrentConnections("datamqpt")
                    .withDisableMetricsCollection("datakmdkbtmupmla")
                    .withAdditionalProperties(mapOf("type", "CopySource")))
                .withDataset(new DatasetReference().withReferenceName("fajygnhmoeoxs")
                    .withParameters(mapOf("xfaucihqsogt", "datajzodcxygpmjfwm", "cnly", "dataao", "xiwfkdblvbwuey",
                        "dataizwtqvgpidrtb")))
                .withFirstRowOnly("datal");
        model = BinaryData.fromObject(model).toObject(LookupActivity.class);
        Assertions.assertEquals("tfx", model.name());
        Assertions.assertEquals("skqvkdpnqcuprl", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.onInactiveMarkAs());
        Assertions.assertEquals("cue", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("oaskul", model.userProperties().get(0).name());
        Assertions.assertEquals("v", model.linkedServiceName().referenceName());
        Assertions.assertEquals(494364845, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals("fajygnhmoeoxs", model.dataset().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
