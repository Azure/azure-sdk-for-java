// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.CopySource;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.LookupActivity;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class LookupActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        LookupActivity model = BinaryData.fromString(
            "{\"type\":\"Lookup\",\"typeProperties\":{\"source\":{\"type\":\"CopySource\",\"sourceRetryCount\":\"datasmnelqlqnwv\",\"sourceRetryWait\":\"dataxzdimnfnrpq\",\"maxConcurrentConnections\":\"datazgncyksblre\",\"disableMetricsCollection\":\"datawak\",\"\":{\"lwqhzyrugst\":\"dataiylkfnedxdemcyr\",\"ugkttlpw\":\"datazpozqluu\",\"lqdotqe\":\"dataolajevww\",\"jbbwftcnz\":\"datauenteucao\"}},\"dataset\":{\"referenceName\":\"kdademqptxekmdk\",\"parameters\":{\"lppnevujkzb\":\"dataupmlayejocsqtibu\",\"fajygnhmoeoxs\":\"datakgvwkdgsrtm\",\"z\":\"databl\"}},\"firstRowOnly\":\"datacxygpmj\"},\"linkedServiceName\":{\"referenceName\":\"mtxfaucihqs\",\"parameters\":{\"oacnlyzi\":\"dataq\",\"xiwfkdblvbwuey\":\"datawtqvgpidrtb\"}},\"policy\":{\"timeout\":\"dataujvmnooagaqnekwe\",\"retry\":\"datampiql\",\"retryIntervalInSeconds\":1187162100,\"secureInput\":false,\"secureOutput\":true,\"\":{\"hcpsuf\":\"datamhvjogv\"}},\"name\":\"dgcvfxsvxk\",\"description\":\"hkhwqwvw\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"wlenrcovq\",\"dependencyConditions\":[\"Skipped\"],\"\":{\"gzslnnc\":\"datactkrgagxzmrxx\",\"vni\":\"datawrhoma\"}},{\"activity\":\"up\",\"dependencyConditions\":[\"Skipped\",\"Completed\"],\"\":{\"kqvkdpnqcuprl\":\"datayetfxyx\",\"ovsqmzee\":\"datazfafekcu\",\"fgkbytzmnamesdcm\":\"dataitqvqyinifnmc\"}},{\"activity\":\"mv\",\"dependencyConditions\":[\"Failed\"],\"\":{\"vaap\":\"datahyrh\",\"uj\":\"datagyyufhcfeggy\"}}],\"userProperties\":[{\"name\":\"vazqsbrqspvl\",\"value\":\"datauxvujuxvl\"},{\"name\":\"x\",\"value\":\"dataftcinj\"},{\"name\":\"rayoask\",\"value\":\"datallqweoobbngym\"}],\"\":{\"wtzxq\":\"dataw\",\"pwvhiaxkm\":\"dataqzplzyjktc\",\"fhlwgka\":\"dataitczuscqobujfx\",\"kmbdhcc\":\"dataxp\"}}")
            .toObject(LookupActivity.class);
        Assertions.assertEquals("dgcvfxsvxk", model.name());
        Assertions.assertEquals("hkhwqwvw", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("wlenrcovq", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("vazqsbrqspvl", model.userProperties().get(0).name());
        Assertions.assertEquals("mtxfaucihqs", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1187162100, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals("kdademqptxekmdk", model.dataset().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        LookupActivity model = new LookupActivity().withName("dgcvfxsvxk")
            .withDescription("hkhwqwvw")
            .withState(ActivityState.INACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
            .withDependsOn(Arrays.asList(
                new ActivityDependency().withActivity("wlenrcovq")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("up")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.COMPLETED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("mv")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED))
                    .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("vazqsbrqspvl").withValue("datauxvujuxvl"),
                new UserProperty().withName("x").withValue("dataftcinj"),
                new UserProperty().withName("rayoask").withValue("datallqweoobbngym")))
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("mtxfaucihqs")
                .withParameters(mapOf("oacnlyzi", "dataq", "xiwfkdblvbwuey", "datawtqvgpidrtb")))
            .withPolicy(new ActivityPolicy().withTimeout("dataujvmnooagaqnekwe")
                .withRetry("datampiql")
                .withRetryIntervalInSeconds(1187162100)
                .withSecureInput(false)
                .withSecureOutput(true)
                .withAdditionalProperties(mapOf()))
            .withSource(new CopySource().withSourceRetryCount("datasmnelqlqnwv")
                .withSourceRetryWait("dataxzdimnfnrpq")
                .withMaxConcurrentConnections("datazgncyksblre")
                .withDisableMetricsCollection("datawak")
                .withAdditionalProperties(mapOf("type", "CopySource")))
            .withDataset(
                new DatasetReference().withReferenceName("kdademqptxekmdk")
                    .withParameters(mapOf("lppnevujkzb", "dataupmlayejocsqtibu", "fajygnhmoeoxs", "datakgvwkdgsrtm",
                        "z", "databl")))
            .withFirstRowOnly("datacxygpmj");
        model = BinaryData.fromObject(model).toObject(LookupActivity.class);
        Assertions.assertEquals("dgcvfxsvxk", model.name());
        Assertions.assertEquals("hkhwqwvw", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("wlenrcovq", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("vazqsbrqspvl", model.userProperties().get(0).name());
        Assertions.assertEquals("mtxfaucihqs", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1187162100, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals("kdademqptxekmdk", model.dataset().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
