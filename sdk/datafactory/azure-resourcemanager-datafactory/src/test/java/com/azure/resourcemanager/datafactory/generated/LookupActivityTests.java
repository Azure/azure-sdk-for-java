// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.CopySource;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.LookupActivity;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class LookupActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        LookupActivity model =
            BinaryData
                .fromString(
                    "{\"type\":\"Lookup\",\"typeProperties\":{\"source\":{\"type\":\"CopySource\",\"sourceRetryCount\":\"databx\",\"sourceRetryWait\":\"dataygmqnuyusnhnnek\",\"maxConcurrentConnections\":\"datadlbcucwfcbugtc\",\"disableMetricsCollection\":\"dataydldavozmibtk\",\"\":{\"xxwt\":\"datapgllsrran\",\"lkgzczjwizrulrk\":\"datarro\"}},\"dataset\":{\"referenceName\":\"yldtt\",\"parameters\":{\"myc\":\"datapqmkpobenaahdj\",\"qhpphjimo\":\"datatvpeirhstwpbvw\",\"js\":\"datacqpqkpnvsuaizxdl\",\"gfejiu\":\"dataxotyjgx\"}},\"firstRowOnly\":\"datadsftmllc\"},\"linkedServiceName\":{\"referenceName\":\"vunvnggqacforuw\",\"parameters\":{\"ruuscb\":\"datand\",\"vofo\":\"datattjdioevifzqq\",\"jxsofsiritp\":\"datappphwvduuzpiooa\",\"nrl\":\"dataqp\"}},\"policy\":{\"timeout\":\"dataxevizzcjnfyubctw\",\"retry\":\"datan\",\"retryIntervalInSeconds\":1577241932,\"secureInput\":true,\"secureOutput\":true,\"\":{\"riad\":\"datafpkleieafpvbslly\",\"uylsk\":\"datanbofeucctppbgzf\",\"trqsobusurxv\":\"datavvwd\",\"tknywxpmef\":\"datadxlbsnskcksf\"}},\"name\":\"nccbvchozkmifyxd\",\"description\":\"gbi\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"rkw\",\"dependencyConditions\":[\"Succeeded\",\"Skipped\",\"Completed\",\"Failed\"],\"\":{\"syhnfqnek\":\"databulvk\",\"deahfg\":\"dataxd\",\"lq\":\"datajahnsmktk\",\"xnlaurviyntc\":\"dataxjdolobtzr\"}},{\"activity\":\"lpbzo\",\"dependencyConditions\":[\"Completed\",\"Succeeded\"],\"\":{\"daxttoenf\":\"databfktelblbungrkj\",\"jfywmmqzbznr\":\"datahip\"}},{\"activity\":\"w\",\"dependencyConditions\":[\"Skipped\",\"Skipped\",\"Succeeded\"],\"\":{\"wotpiaklefw\":\"datagnkxjdaxdiundz\",\"dcgd\":\"dataiabfntrmkeawmfe\",\"ngiuzbpgskg\":\"datajbnfwdff\"}},{\"activity\":\"wspxhhnvxpzjtik\",\"dependencyConditions\":[\"Failed\"],\"\":{\"akgzcmbgw\":\"datawefstize\",\"jpxpwxabvxwoa\":\"datalnmddflckum\",\"ozkm\":\"dataoeillszdgy\",\"yrwdmgrfhvew\":\"databzuilynbdvbuxlji\"}}],\"userProperties\":[{\"name\":\"mybokqpfhswbpjz\",\"value\":\"datayzydlys\"},{\"name\":\"thpnw\",\"value\":\"datapkisefygdaume\"},{\"name\":\"kgmgqynejqk\",\"value\":\"datasxiczvfxoihc\"}],\"\":{\"ecwyrtluujyespcg\":\"dataxbksaf\",\"iwiaqrc\":\"dataszwvooxieyyww\",\"w\":\"datafybktbviaqvzzszc\",\"vygdefpy\":\"datarxo\"}}")
                .toObject(LookupActivity.class);
        Assertions.assertEquals("nccbvchozkmifyxd", model.name());
        Assertions.assertEquals("gbi", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("rkw", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("mybokqpfhswbpjz", model.userProperties().get(0).name());
        Assertions.assertEquals("vunvnggqacforuw", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1577241932, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals("yldtt", model.dataset().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        LookupActivity model =
            new LookupActivity()
                .withName("nccbvchozkmifyxd")
                .withDescription("gbi")
                .withState(ActivityState.INACTIVE)
                .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
                .withDependsOn(
                    Arrays
                        .asList(
                            new ActivityDependency()
                                .withActivity("rkw")
                                .withDependencyConditions(
                                    Arrays
                                        .asList(
                                            DependencyCondition.SUCCEEDED,
                                            DependencyCondition.SKIPPED,
                                            DependencyCondition.COMPLETED,
                                            DependencyCondition.FAILED))
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency()
                                .withActivity("lpbzo")
                                .withDependencyConditions(
                                    Arrays.asList(DependencyCondition.COMPLETED, DependencyCondition.SUCCEEDED))
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency()
                                .withActivity("w")
                                .withDependencyConditions(
                                    Arrays
                                        .asList(
                                            DependencyCondition.SKIPPED,
                                            DependencyCondition.SKIPPED,
                                            DependencyCondition.SUCCEEDED))
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency()
                                .withActivity("wspxhhnvxpzjtik")
                                .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED))
                                .withAdditionalProperties(mapOf())))
                .withUserProperties(
                    Arrays
                        .asList(
                            new UserProperty().withName("mybokqpfhswbpjz").withValue("datayzydlys"),
                            new UserProperty().withName("thpnw").withValue("datapkisefygdaume"),
                            new UserProperty().withName("kgmgqynejqk").withValue("datasxiczvfxoihc")))
                .withLinkedServiceName(
                    new LinkedServiceReference()
                        .withReferenceName("vunvnggqacforuw")
                        .withParameters(
                            mapOf(
                                "ruuscb",
                                "datand",
                                "vofo",
                                "datattjdioevifzqq",
                                "jxsofsiritp",
                                "datappphwvduuzpiooa",
                                "nrl",
                                "dataqp")))
                .withPolicy(
                    new ActivityPolicy()
                        .withTimeout("dataxevizzcjnfyubctw")
                        .withRetry("datan")
                        .withRetryIntervalInSeconds(1577241932)
                        .withSecureInput(true)
                        .withSecureOutput(true)
                        .withAdditionalProperties(mapOf()))
                .withSource(
                    new CopySource()
                        .withSourceRetryCount("databx")
                        .withSourceRetryWait("dataygmqnuyusnhnnek")
                        .withMaxConcurrentConnections("datadlbcucwfcbugtc")
                        .withDisableMetricsCollection("dataydldavozmibtk")
                        .withAdditionalProperties(mapOf("type", "CopySource")))
                .withDataset(
                    new DatasetReference()
                        .withReferenceName("yldtt")
                        .withParameters(
                            mapOf(
                                "myc",
                                "datapqmkpobenaahdj",
                                "qhpphjimo",
                                "datatvpeirhstwpbvw",
                                "js",
                                "datacqpqkpnvsuaizxdl",
                                "gfejiu",
                                "dataxotyjgx")))
                .withFirstRowOnly("datadsftmllc");
        model = BinaryData.fromObject(model).toObject(LookupActivity.class);
        Assertions.assertEquals("nccbvchozkmifyxd", model.name());
        Assertions.assertEquals("gbi", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("rkw", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("mybokqpfhswbpjz", model.userProperties().get(0).name());
        Assertions.assertEquals("vunvnggqacforuw", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1577241932, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals("yldtt", model.dataset().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
