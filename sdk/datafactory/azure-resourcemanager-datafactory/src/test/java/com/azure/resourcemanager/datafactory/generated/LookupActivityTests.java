// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.CopySource;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.LookupActivity;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class LookupActivityTests {
    @Test
    public void testDeserialize() {
        LookupActivity model =
            BinaryData
                .fromString(
                    "{\"type\":\"Lookup\",\"typeProperties\":{\"source\":{\"type\":\"CopySource\",\"\":{}},\"dataset\":{\"referenceName\":\"ogmipnmliqmvl\",\"parameters\":{}}},\"linkedServiceName\":{\"referenceName\":\"aqgrv\",\"parameters\":{}},\"policy\":{\"retryIntervalInSeconds\":1709581448,\"secureInput\":true,\"secureOutput\":false,\"\":{}},\"name\":\"yies\",\"description\":\"wiqbuoutm\",\"dependsOn\":[{\"activity\":\"gleofjsbgbw\",\"dependencyConditions\":[\"Failed\",\"Skipped\",\"Skipped\"],\"\":{}},{\"activity\":\"wnncfmaciqg\",\"dependencyConditions\":[\"Completed\",\"Succeeded\",\"Succeeded\",\"Skipped\"],\"\":{}},{\"activity\":\"wixvtbouguxtndop\",\"dependencyConditions\":[\"Failed\"],\"\":{}}],\"userProperties\":[{\"name\":\"ualapdl\"},{\"name\":\"db\"},{\"name\":\"aqbkixvvlwynpbbf\"},{\"name\":\"vzfjm\"}],\"\":{}}")
                .toObject(LookupActivity.class);
        Assertions.assertEquals("yies", model.name());
        Assertions.assertEquals("wiqbuoutm", model.description());
        Assertions.assertEquals("gleofjsbgbw", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("ualapdl", model.userProperties().get(0).name());
        Assertions.assertEquals("aqgrv", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1709581448, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals("ogmipnmliqmvl", model.dataset().referenceName());
    }

    @Test
    public void testSerialize() {
        LookupActivity model =
            new LookupActivity()
                .withName("yies")
                .withDescription("wiqbuoutm")
                .withDependsOn(
                    Arrays
                        .asList(
                            new ActivityDependency()
                                .withActivity("gleofjsbgbw")
                                .withDependencyConditions(
                                    Arrays
                                        .asList(
                                            DependencyCondition.FAILED,
                                            DependencyCondition.SKIPPED,
                                            DependencyCondition.SKIPPED))
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency()
                                .withActivity("wnncfmaciqg")
                                .withDependencyConditions(
                                    Arrays
                                        .asList(
                                            DependencyCondition.COMPLETED,
                                            DependencyCondition.SUCCEEDED,
                                            DependencyCondition.SUCCEEDED,
                                            DependencyCondition.SKIPPED))
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency()
                                .withActivity("wixvtbouguxtndop")
                                .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED))
                                .withAdditionalProperties(mapOf())))
                .withUserProperties(
                    Arrays
                        .asList(
                            new UserProperty().withName("ualapdl"),
                            new UserProperty().withName("db"),
                            new UserProperty().withName("aqbkixvvlwynpbbf"),
                            new UserProperty().withName("vzfjm")))
                .withLinkedServiceName(new LinkedServiceReference().withReferenceName("aqgrv").withParameters(mapOf()))
                .withPolicy(
                    new ActivityPolicy()
                        .withRetryIntervalInSeconds(1709581448)
                        .withSecureInput(true)
                        .withSecureOutput(false)
                        .withAdditionalProperties(mapOf()))
                .withSource(new CopySource().withAdditionalProperties(mapOf("type", "CopySource")))
                .withDataset(new DatasetReference().withReferenceName("ogmipnmliqmvl").withParameters(mapOf()));
        model = BinaryData.fromObject(model).toObject(LookupActivity.class);
        Assertions.assertEquals("yies", model.name());
        Assertions.assertEquals("wiqbuoutm", model.description());
        Assertions.assertEquals("gleofjsbgbw", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("ualapdl", model.userProperties().get(0).name());
        Assertions.assertEquals("aqgrv", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1709581448, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals("ogmipnmliqmvl", model.dataset().referenceName());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
