// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.datafactory.DataFactoryManager;
import com.azure.resourcemanager.datafactory.models.AddDataFlowToDebugSessionResponse;
import com.azure.resourcemanager.datafactory.models.DataFlow;
import com.azure.resourcemanager.datafactory.models.DataFlowDebugPackage;
import com.azure.resourcemanager.datafactory.models.DataFlowDebugPackageDebugSettings;
import com.azure.resourcemanager.datafactory.models.DataFlowDebugResource;
import com.azure.resourcemanager.datafactory.models.DataFlowFolder;
import com.azure.resourcemanager.datafactory.models.DataFlowSourceSetting;
import com.azure.resourcemanager.datafactory.models.DataFlowStagingInfo;
import com.azure.resourcemanager.datafactory.models.Dataset;
import com.azure.resourcemanager.datafactory.models.DatasetDebugResource;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeReference;
import com.azure.resourcemanager.datafactory.models.LinkedService;
import com.azure.resourcemanager.datafactory.models.LinkedServiceDebugResource;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DataFlowDebugSessionsAddDataFlowWithResponseMockTests {
    @Test
    public void testAddDataFlowWithResponse() throws Exception {
        String responseStr = "{\"jobVersion\":\"cs\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DataFactoryManager manager = DataFactoryManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        AddDataFlowToDebugSessionResponse response = manager.dataFlowDebugSessions()
            .addDataFlowWithResponse("jqzoabmuymaf", "ytbmfnkmcq",
                new DataFlowDebugPackage().withSessionId("f")
                    .withDataFlow(new DataFlowDebugResource().withName("giwzzgaxi")
                        .withProperties(new DataFlow().withDescription("ktnadjz")
                            .withAnnotations(
                                Arrays.asList("datajlfyum", "datalntyilsiqdunkzad", "datadiqbtfam", "databkhqdf"))
                            .withFolder(new DataFlowFolder().withName("hcpijri"))))
                    .withDataFlows(
                        Arrays.asList(new DataFlowDebugResource().withName("ov")
                            .withProperties(new DataFlow().withDescription("il")
                                .withAnnotations(Arrays.asList("datacptthwmuyqgbma"))
                                .withFolder(new DataFlowFolder().withName("trvcbwt")))))
                    .withDatasets(Arrays.asList(new DatasetDebugResource()
                        .withName("mcuuztrrmsjr")
                        .withProperties(new Dataset()
                            .withDescription("pnbfvplztovpikik")
                            .withStructure("datavuk")
                            .withSchema("dataeejxqoiozap")
                            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("xuytalrzrpkmv")
                                .withParameters(mapOf("kfvmmszwqwthuviq", "datawhw", "czn", "datagbsdvbrz",
                                    "yvllkskvnr", "datasrttfral")))
                            .withParameters(mapOf("rxrkpy", new ParameterSpecification().withType(ParameterType.BOOL),
                                "kvwtphdkdzjdrijo", new ParameterSpecification().withType(ParameterType.INT), "nwnx",
                                new ParameterSpecification().withType(ParameterType.FLOAT)))
                            .withAnnotations(Arrays.asList("datacoemx", "datalhqgqjrs", "datanfyzl"))
                            .withFolder(new DatasetFolder().withName("kvpvdwylg"))
                            .withAdditionalProperties(mapOf("type", "fbq")))))
                    .withLinkedServices(Arrays.asList(
                        new LinkedServiceDebugResource().withName("vbxxtgyadifves")
                            .withProperties(new LinkedService()
                                .withConnectVia(new IntegrationRuntimeReference().withReferenceName("xnzerrfaumpgjuls")
                                    .withParameters(mapOf("lpisfkd", "datajmgfmurrg", "pxlskjtdcgwuyx", "datakgrj",
                                        "ysqwoi", "datacihtonesnurshfzk")))
                                .withDescription("bqxbu")
                                .withParameters(
                                    mapOf("ebhfhvpopctw", new ParameterSpecification().withType(ParameterType.FLOAT),
                                        "jl", new ParameterSpecification().withType(ParameterType.SECURE_STRING),
                                        "yaxnsfwsfdeqp", new ParameterSpecification().withType(ParameterType.STRING),
                                        "hymyim", new ParameterSpecification().withType(ParameterType.FLOAT)))
                                .withAnnotations(
                                    Arrays.asList("dataolerxdeuckwnwbh", "datatevnpqtjejqkz", "datawwyrrttsp"))
                                .withAdditionalProperties(mapOf("type", "oosq"))),
                        new LinkedServiceDebugResource().withName("pthnkjades")
                            .withProperties(new LinkedService()
                                .withConnectVia(new IntegrationRuntimeReference().withReferenceName("c")
                                    .withParameters(mapOf("jxthsqlxsx", "datakareusxbcxhytkiq", "xegexrzzpcuas",
                                        "datagzcjie", "uxtkiqcrhgtir", "dataaobapfxjedpvw")))
                                .withDescription("bpdsxgxnnj")
                                .withParameters(mapOf("t", new ParameterSpecification().withType(ParameterType.BOOL)))
                                .withAnnotations(Arrays.asList("datalykelxpyzpqh", "datacwdiiecptcd"))
                                .withAdditionalProperties(mapOf("type", "jwdfowjva"))),
                        new LinkedServiceDebugResource().withName("fsmkfxahfvfpmztb")
                            .withProperties(
                                new LinkedService()
                                    .withConnectVia(
                                        new IntegrationRuntimeReference().withReferenceName("pbdmqhg")
                                            .withParameters(mapOf("tjqbhenpfqhupbty", "dataxexvdlivlgu", "lmfrvgckjou",
                                                "datawobydi")))
                                    .withDescription("hrefopdc")
                                    .withParameters(mapOf("ilfgdngczk",
                                        new ParameterSpecification().withType(ParameterType.ARRAY), "gearrrbll",
                                        new ParameterSpecification().withType(ParameterType.SECURE_STRING), "okkgutpqn",
                                        new ParameterSpecification().withType(ParameterType.FLOAT)))
                                    .withAnnotations(Arrays.asList("datajdofyhookx"))
                                    .withAdditionalProperties(mapOf("type", "xs")))))
                    .withStaging(new DataFlowStagingInfo()
                        .withLinkedService(new LinkedServiceReference().withReferenceName("scwiwzowshqrjjpx")
                            .withParameters(mapOf("dniwtvoolonlc", "datadlxzx", "fuvtum", "datacmrybwuexszpgk",
                                "lqklcfvvsebfjoyb", "dataghliny", "xlwhiqfjptytpchd", "dataowttraol")))
                        .withFolderPath("datakrk"))
                    .withDebugSettings(new DataFlowDebugPackageDebugSettings()
                        .withSourceSettings(Arrays.asList(new DataFlowSourceSetting().withSourceName("ienothtinqshd")
                            .withRowLimit(1482317078)
                            .withAdditionalProperties(mapOf())))
                        .withParameters(mapOf("ozcmffygaxbsh", "dataqhkgfxzwjoz"))
                        .withDatasetParameters("datamhs"))
                    .withAdditionalProperties(mapOf()),
                com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("cs", response.jobVersion());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
