// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.datafactory.DataFactoryManager;
import com.azure.resourcemanager.datafactory.models.AddDataFlowToDebugSessionResponse;
import com.azure.resourcemanager.datafactory.models.DataFlow;
import com.azure.resourcemanager.datafactory.models.DataFlowDebugPackage;
import com.azure.resourcemanager.datafactory.models.DataFlowDebugPackageDebugSettings;
import com.azure.resourcemanager.datafactory.models.DataFlowDebugResource;
import com.azure.resourcemanager.datafactory.models.DataFlowFolder;
import com.azure.resourcemanager.datafactory.models.DataFlowSourceSetting;
import com.azure.resourcemanager.datafactory.models.DataFlowStagingInfo;
import com.azure.resourcemanager.datafactory.models.Dataset;
import com.azure.resourcemanager.datafactory.models.DatasetDebugResource;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeReference;
import com.azure.resourcemanager.datafactory.models.LinkedService;
import com.azure.resourcemanager.datafactory.models.LinkedServiceDebugResource;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class DataFlowDebugSessionsAddDataFlowWithResponseMockTests {
    @Test
    public void testAddDataFlowWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr = "{\"jobVersion\":\"pywpednousxr\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        DataFactoryManager manager = DataFactoryManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        AddDataFlowToDebugSessionResponse response
            = manager.dataFlowDebugSessions()
                .addDataFlowWithResponse("zobpxfgp", "dzdzswvfwiunj",
                    new DataFlowDebugPackage().withSessionId("xgztfzgd")
                        .withDataFlow(new DataFlowDebugResource().withName("wjcwwbunfymbwin")
                            .withProperties(new DataFlow().withDescription("vbiryxsa")
                                .withAnnotations(Arrays.asList("datag", "datansesxwkhkcd", "dataofakmopqfzvvtif",
                                    "dataqsuemewfutovb"))
                                .withFolder(new DataFlowFolder().withName("fucxtmhmzcnpsd"))))
                        .withDataFlows(Arrays.asList(
                            new DataFlowDebugResource().withName("ayjeh")
                                .withProperties(new DataFlow().withDescription("t")
                                    .withAnnotations(Arrays.asList("dataokttqgokhaj", "dataylkflf",
                                        "dataofjskndwywbptvym", "datampdcddbe"))
                                    .withFolder(new DataFlowFolder().withName("prlxxbmy"))),
                            new DataFlowDebugResource().withName("wzbkgtgvrrzmkte")
                                .withProperties(new DataFlow().withDescription("owvqpncifdxtibvq")
                                    .withAnnotations(Arrays.asList("datapfdlcstucsw", "datamnsdw"))
                                    .withFolder(new DataFlowFolder().withName("atfgoerjmhtxip"))),
                            new DataFlowDebugResource().withName("mlaile")
                                .withProperties(new DataFlow().withDescription("euxxtslhjcwlfz")
                                    .withAnnotations(Arrays.asList("datawexcktg", "datacccgoik", "datajjskzuhdiyavfey",
                                        "databyduyastybomiyj"))
                                    .withFolder(new DataFlowFolder().withName("seemh"))),
                            new DataFlowDebugResource().withName("dfsteouzoglvt")
                                .withProperties(new DataFlow().withDescription("usiv")
                                    .withAnnotations(Arrays.asList("dataunnjwmdtbx", "datatomcba", "dataamtdfpkfw"))
                                    .withFolder(new DataFlowFolder().withName("elxd")))))
                        .withDatasets(Arrays.asList(
                            new DatasetDebugResource().withName("oy")
                                .withProperties(new Dataset().withDescription("ejvlf").withStructure("datarqkgibpehqb")
                                    .withSchema("datazcmqqehxigsi")
                                    .withLinkedServiceName(new LinkedServiceReference().withReferenceName("fb")
                                        .withParameters(mapOf("lbzxyejoxd", "dataoaypixryf", "tbpiccriqhiwyk",
                                            "datarjulttqgun", "mgparbirgw", "datazncfh", "irnfnlyvdryx", "datagewd")))
                                    .withParameters(
                                        mapOf("tazuac", new ParameterSpecification().withType(ParameterType.ARRAY)))
                                    .withAnnotations(Arrays.asList("dataslstekbbq", "datatvpsxycvoex"))
                                    .withFolder(new DatasetFolder().withName("xrvxwlfmbbr"))
                                    .withAdditionalProperties(mapOf("type", "Dataset"))),
                            new DatasetDebugResource().withName("hrxgvubsxajr").withProperties(new Dataset()
                                .withDescription("a").withStructure("datannlasf").withSchema("datajyvu")
                                .withLinkedServiceName(new LinkedServiceReference().withReferenceName("yexlpmbtm")
                                    .withParameters(mapOf("amsgfvuffdvukjy", "datavbpnye")))
                                .withParameters(
                                    mapOf("nrgmjp", new ParameterSpecification().withType(ParameterType.INT),
                                        "efwxcuzu", new ParameterSpecification().withType(ParameterType.FLOAT),
                                        "bysyprskj", new ParameterSpecification().withType(ParameterType.OBJECT)))
                                .withAnnotations(Arrays.asList("datavbvkvomnoslbkrh", "datanvozjudg", "datadsflitmm"))
                                .withFolder(new DatasetFolder().withName("z"))
                                .withAdditionalProperties(mapOf("type", "Dataset")))))
                        .withLinkedServices(
                            Arrays.asList(
                                new LinkedServiceDebugResource().withName("cxwkwkxln")
                                    .withProperties(new LinkedService()
                                        .withConnectVia(new IntegrationRuntimeReference().withReferenceName("jvzpvisqf")
                                            .withParameters(mapOf("kenrlcjms", "datalmxvmrdpfan", "dahhiid",
                                                "datapgmebx", "jnoibclfqdtfj", "dataogakrpmjodbdcy")))
                                        .withDescription("v")
                                        .withParameters(mapOf("yvstv",
                                            new ParameterSpecification().withType(ParameterType.ARRAY), "slqyhabgocq",
                                            new ParameterSpecification().withType(ParameterType.ARRAY), "li",
                                            new ParameterSpecification().withType(ParameterType.FLOAT)))
                                        .withAnnotations(Arrays.asList("datanhcklllwgrkvl",
                                            "dataqkpxvemjjfvanefw"))
                                        .withAdditionalProperties(mapOf("type", "LinkedService"))),
                                new LinkedServiceDebugResource().withName("pbitcsbzuyfrann")
                                    .withProperties(new LinkedService()
                                        .withConnectVia(new IntegrationRuntimeReference().withReferenceName("ba")
                                            .withParameters(mapOf("mwbshqpjueo", "datanjxyproqebsuij", "krejuuii",
                                                "datahtltooikzouv", "arxyh", "datarbtfarb", "xbis", "dataukc")))
                                        .withDescription("itjovjrirg")
                                        .withParameters(mapOf("acb",
                                            new ParameterSpecification().withType(ParameterType.BOOL), "ioxtqxrbrdpz",
                                            new ParameterSpecification().withType(ParameterType.FLOAT), "yczlylud",
                                            new ParameterSpecification().withType(ParameterType.FLOAT), "iaxigeo",
                                            new ParameterSpecification().withType(ParameterType.OBJECT)))
                                        .withAnnotations(Arrays.asList("datahkhnzsrgiwvze", "datag", "datajtuzqreprn"))
                                        .withAdditionalProperties(mapOf("type", "LinkedService")))))
                        .withStaging(
                            new DataFlowStagingInfo()
                                .withLinkedService(new LinkedServiceReference().withReferenceName("dymuehvvvrtsnc")
                                    .withParameters(mapOf("pxfhixaagvkwe", "dataunhoogagtjcmly", "bgva", "datalcito",
                                        "fnffjxdccwuzqwv", "datazfiwao", "bawzafzdzhh", "datakewlyrweups")))
                                .withFolderPath("dataxcelvawwj"))
                        .withDebugSettings(new DataFlowDebugPackageDebugSettings()
                            .withSourceSettings(Arrays.asList(
                                new DataFlowSourceSetting().withSourceName("jv").withRowLimit(1429028510)
                                    .withAdditionalProperties(mapOf()),
                                new DataFlowSourceSetting().withSourceName("pmlckzdwietfxpdz").withRowLimit(834316963)
                                    .withAdditionalProperties(mapOf()),
                                new DataFlowSourceSetting().withSourceName("lygjtibhzjhqfuq").withRowLimit(490505781)
                                    .withAdditionalProperties(mapOf()),
                                new DataFlowSourceSetting().withSourceName("yeczlxunhntsqsp").withRowLimit(1295527653)
                                    .withAdditionalProperties(mapOf())))
                            .withParameters(mapOf("veknwldqj", "dataversu", "cwngg", "datagzcwrhhgnmjxxov", "cwiz",
                                "datavjbgynpapzbbcfu"))
                            .withDatasetParameters("datam"))
                        .withAdditionalProperties(mapOf()),
                    com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("pywpednousxr", response.jobVersion());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
