// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.datafactory.DataFactoryManager;
import com.azure.resourcemanager.datafactory.models.AddDataFlowToDebugSessionResponse;
import com.azure.resourcemanager.datafactory.models.DataFlow;
import com.azure.resourcemanager.datafactory.models.DataFlowDebugPackage;
import com.azure.resourcemanager.datafactory.models.DataFlowDebugPackageDebugSettings;
import com.azure.resourcemanager.datafactory.models.DataFlowDebugResource;
import com.azure.resourcemanager.datafactory.models.DataFlowFolder;
import com.azure.resourcemanager.datafactory.models.DataFlowSourceSetting;
import com.azure.resourcemanager.datafactory.models.DataFlowStagingInfo;
import com.azure.resourcemanager.datafactory.models.Dataset;
import com.azure.resourcemanager.datafactory.models.DatasetDebugResource;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeReference;
import com.azure.resourcemanager.datafactory.models.LinkedService;
import com.azure.resourcemanager.datafactory.models.LinkedServiceDebugResource;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DataFlowDebugSessionsAddDataFlowWithResponseMockTests {
    @Test
    public void testAddDataFlowWithResponse() throws Exception {
        String responseStr = "{\"jobVersion\":\"mgllnyohnhfup\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DataFactoryManager manager = DataFactoryManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        AddDataFlowToDebugSessionResponse response
            = manager.dataFlowDebugSessions()
                .addDataFlowWithResponse("ccwievjndvaf", "cvn", new DataFlowDebugPackage().withSessionId("xlcgycv")
                    .withDataFlow(new DataFlowDebugResource().withName("utsabuvuuweq")
                        .withProperties(new DataFlow().withDescription("cfxz")
                            .withAnnotations(Arrays.asList("dataioqtafmbxtn"))
                            .withFolder(new DataFlowFolder().withName("y"))))
                    .withDataFlows(Arrays.asList(
                        new DataFlowDebugResource().withName("sqhkjuqrklxnbbkb")
                            .withProperties(new DataFlow().withDescription("netuvsqv")
                                .withAnnotations(Arrays
                                    .asList("dataumdznbl", "dataofdmlrtlhpfucfi", "dataaklflwqdj", "databogtbykskq"))
                                .withFolder(new DataFlowFolder().withName("prrixkobmrrnkd"))),
                        new DataFlowDebugResource().withName("dctsqxwqsszdwwk")
                            .withProperties(new DataFlow().withDescription("n")
                                .withAnnotations(Arrays.asList("dataua", "databfxvlacllteuksgu", "datacotgqgevie",
                                    "datayhowvnzwhypj"))
                                .withFolder(new DataFlowFolder().withName("alptjpsbdch"))),
                        new DataFlowDebugResource().withName("ddus")
                            .withProperties(new DataFlow().withDescription("zmcprtanagehbrh")
                                .withAnnotations(Arrays.asList("dataatjsseb", "datadusj", "datailp", "dataccxeg"))
                                .withFolder(new DataFlowFolder().withName("tqgcjvklnrzoafx")))))
                    .withDatasets(Arrays.asList(
                        new DatasetDebugResource().withName("bqodyvvpcoia")
                            .withProperties(new Dataset()
                                .withDescription("hh")
                                .withStructure("datalmxzdwpdwbnouk")
                                .withSchema("datanyegh")
                                .withLinkedServiceName(new LinkedServiceReference().withReferenceName("fmuxd")
                                    .withParameters(mapOf("zle", "datagdcszzzedf")))
                                .withParameters(mapOf("deqmfzyhikhnw",
                                    new ParameterSpecification().withType(ParameterType.OBJECT), "ftlj",
                                    new ParameterSpecification().withType(ParameterType.ARRAY)))
                                .withAnnotations(Arrays.asList("datapfk", "dataybe", "dataax", "datathppjxtobeq"))
                                .withFolder(new DatasetFolder().withName("adoqijfll"))
                                .withAdditionalProperties(mapOf("type", "Dataset"))),
                        new DatasetDebugResource().withName("jakezorhjh")
                            .withProperties(new Dataset().withDescription("gvaecww")
                                .withStructure("datag")
                                .withSchema("dataabhfrg")
                                .withLinkedServiceName(new LinkedServiceReference().withReferenceName("p")
                                    .withParameters(mapOf("krfe", "datah")))
                                .withParameters(mapOf("zxvgfxzckqwqujpu",
                                    new ParameterSpecification().withType(ParameterType.STRING), "sjalhw",
                                    new ParameterSpecification().withType(ParameterType.INT), "pvpdsvycjuxab",
                                    new ParameterSpecification()
                                        .withType(ParameterType.BOOL),
                                    "phgogmgg", new ParameterSpecification().withType(ParameterType.BOOL)))
                                .withAnnotations(Arrays.asList("datacizrst", "datannmjpgzw"))
                                .withFolder(new DatasetFolder().withName("pzshgsidkz"))
                                .withAdditionalProperties(mapOf("type", "Dataset"))),
                        new DatasetDebugResource().withName("pzingxbk")
                            .withProperties(new Dataset().withDescription("qh")
                                .withStructure("datauldztvum")
                                .withSchema("datakrxgaiddgdgkhiqw")
                                .withLinkedServiceName(
                                    new LinkedServiceReference().withReferenceName("wxrcydmkyoojcfsb")
                                        .withParameters(mapOf("krcmxt", "databnxey", "aqlszlymyq", "datawolzuk")))
                                .withParameters(
                                    mapOf("uwqmi", new ParameterSpecification().withType(ParameterType.FLOAT)))
                                .withAnnotations(
                                    Arrays.asList("datawmzmhcvrfqqmbu", "datati", "datarmcymwr", "datakkaztu"))
                                .withFolder(new DatasetFolder().withName("tkedvxhqhp"))
                                .withAdditionalProperties(mapOf("type", "Dataset"))),
                        new DatasetDebugResource().withName("eforxakpmz")
                            .withProperties(new Dataset().withDescription("riottzyru")
                                .withStructure("dataihwiezc")
                                .withSchema("datazjdplkuyouqnf")
                                .withLinkedServiceName(new LinkedServiceReference().withReferenceName("d")
                                    .withParameters(mapOf("ffymrzoupipdkgpt", "datajpkvlgahpztvl", "crtpz", "datamym")))
                                .withParameters(mapOf("wbzrbqpzgsrphbf",
                                    new ParameterSpecification().withType(ParameterType.SECURE_STRING), "fytwrnvwaxmey",
                                    new ParameterSpecification().withType(ParameterType.OBJECT), "mfqmhcqvuqwzaj",
                                    new ParameterSpecification().withType(ParameterType.BOOL), "maimwufuvtyp",
                                    new ParameterSpecification().withType(ParameterType.ARRAY)))
                                .withAnnotations(
                                    Arrays.asList("datallri", "datakn", "databcgnphengkwh", "dataekxohqvq"))
                                .withFolder(new DatasetFolder().withName("oqtvmkjle"))
                                .withAdditionalProperties(mapOf("type", "Dataset")))))
                    .withLinkedServices(Arrays.asList(new LinkedServiceDebugResource().withName("upsob")
                        .withProperties(new LinkedService().withVersion("rgykrcjvoivn")
                            .withConnectVia(new IntegrationRuntimeReference().withReferenceName("ovwkjeguviphxii")
                                .withParameters(mapOf("oylpmeccbblg", "datahfrb", "xcrxuyorhrtihzw", "datalej")))
                            .withDescription("flwlmh")
                            .withParameters(
                                mapOf("fosfpgquxqvkuu", new ParameterSpecification().withType(ParameterType.BOOL),
                                    "hmnvfhyiaxezp", new ParameterSpecification().withType(ParameterType.BOOL), "czqjo",
                                    new ParameterSpecification().withType(ParameterType.STRING)))
                            .withAnnotations(Arrays.asList("datapsgug", "datawokb", "datazpxlxbvhh", "dataa"))
                            .withAdditionalProperties(mapOf("type", "LinkedService")))))
                    .withStaging(new DataFlowStagingInfo()
                        .withLinkedService(new LinkedServiceReference().withReferenceName("dypwpmyf")
                            .withParameters(mapOf("yhenahhpnbvzdfy", "datajx", "dvbnpyedrkgrtda", "datajbzwvnxwduu")))
                        .withFolderPath("dataitoimtar"))
                    .withDebugSettings(new DataFlowDebugPackageDebugSettings()
                        .withSourceSettings(Arrays.asList(
                            new DataFlowSourceSetting().withSourceName("bmodbpcduyh")
                                .withRowLimit(1956848894)
                                .withAdditionalProperties(mapOf()),
                            new DataFlowSourceSetting().withSourceName("ibvrfkxi")
                                .withRowLimit(792560570)
                                .withAdditionalProperties(mapOf()),
                            new DataFlowSourceSetting().withSourceName("rcwzmdenc")
                                .withRowLimit(1303417436)
                                .withAdditionalProperties(mapOf())))
                        .withParameters(
                            mapOf("qej", "datawxzrkcvbfeuc", "cjkhexxn", "datazhteti", "onmcxriqfr", "dataxlce"))
                        .withDatasetParameters("datab"))
                    .withAdditionalProperties(mapOf()), com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("mgllnyohnhfup", response.jobVersion());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
