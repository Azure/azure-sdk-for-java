// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.datafactory.DataFactoryManager;
import com.azure.resourcemanager.datafactory.models.AddDataFlowToDebugSessionResponse;
import com.azure.resourcemanager.datafactory.models.DataFlow;
import com.azure.resourcemanager.datafactory.models.DataFlowDebugPackage;
import com.azure.resourcemanager.datafactory.models.DataFlowDebugPackageDebugSettings;
import com.azure.resourcemanager.datafactory.models.DataFlowDebugResource;
import com.azure.resourcemanager.datafactory.models.DataFlowFolder;
import com.azure.resourcemanager.datafactory.models.DataFlowSourceSetting;
import com.azure.resourcemanager.datafactory.models.DataFlowStagingInfo;
import com.azure.resourcemanager.datafactory.models.Dataset;
import com.azure.resourcemanager.datafactory.models.DatasetDebugResource;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeReference;
import com.azure.resourcemanager.datafactory.models.LinkedService;
import com.azure.resourcemanager.datafactory.models.LinkedServiceDebugResource;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DataFlowDebugSessionsAddDataFlowWithResponseMockTests {
    @Test
    public void testAddDataFlowWithResponse() throws Exception {
        String responseStr = "{\"jobVersion\":\"pbfxvlacllteuksg\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DataFactoryManager manager = DataFactoryManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        AddDataFlowToDebugSessionResponse response = manager.dataFlowDebugSessions()
            .addDataFlowWithResponse("bfbzhczyhtj", "tzlflqpanceow",
                new DataFlowDebugPackage().withSessionId("qzxluozmedaqpqu")
                    .withDataFlow(new DataFlowDebugResource().withName("jzjjrhv")
                        .withProperties(new DataFlow().withDescription("mruxebslaus")
                            .withAnnotations(Arrays.asList("datatctiso"))
                            .withFolder(new DataFlowFolder().withName("fyggbac"))))
                    .withDataFlows(Arrays.asList(
                        new DataFlowDebugResource().withName("blvpwuqqvmfuuh")
                            .withProperties(new DataFlow().withDescription("tmbbjil")
                                .withAnnotations(Arrays.asList("datactykc", "dataksvflurrfnlhlfv"))
                                .withFolder(new DataFlowFolder().withName("hy"))),
                        new DataFlowDebugResource().withName("fpemcfhxk")
                            .withProperties(new DataFlow().withDescription("tshgcrcxam")
                                .withAnnotations(Arrays.asList("datapzvvrfplkemvvl", "dataezyishi"))
                                .withFolder(new DataFlowFolder().withName("wplyv"))),
                        new DataFlowDebugResource().withName("lyaelv")
                            .withProperties(new DataFlow().withDescription("jvilazop")
                                .withAnnotations(Arrays.asList("databewbxaufo", "datahmdpggaktugephq", "dataoc"))
                                .withFolder(new DataFlowFolder().withName("omqwfwtwjzzyiib")))))
                    .withDatasets(Arrays.asList(
                        new DatasetDebugResource().withName("vairau")
                            .withProperties(new Dataset().withDescription("cta")
                                .withStructure("datadj")
                                .withSchema("dataas")
                                .withLinkedServiceName(new LinkedServiceReference().withReferenceName("jwtyvvkn")
                                    .withParameters(mapOf("uojnikwzlowusa", "datajybtwgdlfg", "tdf", "datadmjiz")))
                                .withParameters(mapOf("jce", new ParameterSpecification().withType(ParameterType.FLOAT),
                                    "ays", new ParameterSpecification().withType(ParameterType.STRING), "pavutiszwycle",
                                    new ParameterSpecification().withType(ParameterType.BOOL)))
                                .withAnnotations(Arrays.asList("databjmwetfmpzamq", "datacitlyyphtdwh",
                                    "datawxhvspumokmyms", "dataatpvebxesucr"))
                                .withFolder(new DatasetFolder().withName("qxyowwrbxe"))
                                .withAdditionalProperties(mapOf("type", "Dataset"))),
                        new DatasetDebugResource().withName("xjvsqzchysqy")
                            .withProperties(new Dataset().withDescription("fbmqgimwi")
                                .withStructure("dataphd")
                                .withSchema("datawfajajpojzazzaks")
                                .withLinkedServiceName(new LinkedServiceReference().withReferenceName("twnhpcfsqdzi")
                                    .withParameters(mapOf("sa", "datak", "vinvryxwzxj", "dataevnerpyzuu")))
                                .withParameters(mapOf("ei", new ParameterSpecification().withType(ParameterType.BOOL),
                                    "ymdxwok", new ParameterSpecification().withType(ParameterType.BOOL), "aihgiglkins",
                                    new ParameterSpecification().withType(ParameterType.BOOL)))
                                .withAnnotations(Arrays.asList("datagabhpfpvadyx", "datacc", "datahg"))
                                .withFolder(new DatasetFolder().withName("hzvrqbzlmvwuf"))
                                .withAdditionalProperties(mapOf("type", "Dataset"))),
                        new DatasetDebugResource().withName("corydjsaki")
                            .withProperties(new Dataset().withDescription("sqmikljc")
                                .withStructure("dataot")
                                .withSchema("dataxlpqfxyyws")
                                .withLinkedServiceName(new LinkedServiceReference().withReferenceName("rxvjvwkzaqqkq")
                                    .withParameters(mapOf("mgxunldbkuqcnji", "datayzhmfuksqiq")))
                                .withParameters(
                                    mapOf("bjkstvbmfnjuzvw", new ParameterSpecification().withType(ParameterType.BOOL),
                                        "wyyyjage", new ParameterSpecification().withType(ParameterType.INT)))
                                .withAnnotations(Arrays.asList("datahxjwiggca", "datamkoxpay", "datazqgsaegaah"))
                                .withFolder(new DatasetFolder().withName("rdxhgrg"))
                                .withAdditionalProperties(mapOf("type", "Dataset"))),
                        new DatasetDebugResource().withName("qkkwzbgbwwop")
                            .withProperties(new Dataset().withDescription("lmiglnqrmqefdq")
                                .withStructure("datasfebhvkkpd")
                                .withSchema("datakylioagvijrdyote")
                                .withLinkedServiceName(new LinkedServiceReference().withReferenceName("ljdrerzjwe")
                                    .withParameters(mapOf("beuf", "datar", "jsneybpqotfd", "databddcxfuizokzmeg")))
                                .withParameters(mapOf("s", new ParameterSpecification().withType(ParameterType.INT)))
                                .withAnnotations(Arrays.asList("datauptre", "datalauupwt", "datatpbi"))
                                .withFolder(new DatasetFolder().withName("segcogyctekaa"))
                                .withAdditionalProperties(mapOf("type", "Dataset")))))
                    .withLinkedServices(
                        Arrays
                            .asList(
                                new LinkedServiceDebugResource().withName("v")
                                    .withProperties(new LinkedService()
                                        .withConnectVia(
                                            new IntegrationRuntimeReference().withReferenceName("sekrzcnlqstmik")
                                                .withParameters(mapOf("k", "datatwvh")))
                                        .withDescription("arqtkzeopoxd")
                                        .withParameters(
                                            mapOf("nqt", new ParameterSpecification().withType(ParameterType.STRING)))
                                        .withAnnotations(Arrays.asList("datawfjrtxfshaqpml", "datazwgotlbflbax"))
                                        .withAdditionalProperties(mapOf("type", "LinkedService"))),
                                new LinkedServiceDebugResource().withName("lxqjshyyrc")
                                    .withProperties(new LinkedService()
                                        .withConnectVia(
                                            new IntegrationRuntimeReference().withReferenceName("mdrbmff")
                                                .withParameters(mapOf("nplzbzc", "datayykwwhscubgwzm", "ogjoocnseo",
                                                    "datazhdrvkzzvh")))
                                        .withDescription("ktqrvzaabeiqo")
                                        .withParameters(mapOf(
                                            "glgxvqdlw", new ParameterSpecification().withType(ParameterType.BOOL),
                                            "kzkhbiee", new ParameterSpecification().withType(ParameterType.BOOL), "bp",
                                            new ParameterSpecification().withType(ParameterType.ARRAY), "jteprqot",
                                            new ParameterSpecification().withType(ParameterType.ARRAY)))
                                        .withAnnotations(
                                            Arrays.asList("dataapmt", "datafgswpqunvxtvmb", "dataydqoqpqyj"))
                                        .withAdditionalProperties(mapOf("type", "LinkedService")))))
                    .withStaging(new DataFlowStagingInfo()
                        .withLinkedService(new LinkedServiceReference().withReferenceName("z")
                            .withParameters(mapOf("kgwf", "dataaurmq", "xhmrhhxlibd", "datalt")))
                        .withFolderPath("dataeamslvpxsywn"))
                    .withDebugSettings(new DataFlowDebugPackageDebugSettings()
                        .withSourceSettings(Arrays.asList(
                            new DataFlowSourceSetting().withSourceName("dyaauls")
                                .withRowLimit(2051357393)
                                .withAdditionalProperties(mapOf()),
                            new DataFlowSourceSetting().withSourceName("bhkyas")
                                .withRowLimit(146099985)
                                .withAdditionalProperties(mapOf())))
                        .withParameters(mapOf("weqbeygnetuvsqv", "datau", "znblkofdmlrtlhp", "datajvum", "wqdjzbogtbyk",
                            "dataucfiwaklf"))
                        .withDatasetParameters("dataqxxy"))
                    .withAdditionalProperties(mapOf()),
                com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("pbfxvlacllteuksg", response.jobVersion());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
