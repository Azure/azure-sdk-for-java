// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.datafactory.DataFactoryManager;
import com.azure.resourcemanager.datafactory.models.AddDataFlowToDebugSessionResponse;
import com.azure.resourcemanager.datafactory.models.DataFlow;
import com.azure.resourcemanager.datafactory.models.DataFlowDebugPackage;
import com.azure.resourcemanager.datafactory.models.DataFlowDebugPackageDebugSettings;
import com.azure.resourcemanager.datafactory.models.DataFlowDebugResource;
import com.azure.resourcemanager.datafactory.models.DataFlowFolder;
import com.azure.resourcemanager.datafactory.models.DataFlowSourceSetting;
import com.azure.resourcemanager.datafactory.models.DataFlowStagingInfo;
import com.azure.resourcemanager.datafactory.models.Dataset;
import com.azure.resourcemanager.datafactory.models.DatasetDebugResource;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeReference;
import com.azure.resourcemanager.datafactory.models.LinkedService;
import com.azure.resourcemanager.datafactory.models.LinkedServiceDebugResource;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DataFlowDebugSessionsAddDataFlowWithResponseMockTests {
    @Test
    public void testAddDataFlowWithResponse() throws Exception {
        String responseStr = "{\"jobVersion\":\"obpxfgp\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DataFactoryManager manager = DataFactoryManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        AddDataFlowToDebugSessionResponse response = manager.dataFlowDebugSessions()
            .addDataFlowWithResponse("afdlfkyirjbf", "rqivibzoqgut",
                new DataFlowDebugPackage().withSessionId("awwmkgzsqr")
                    .withDataFlow(new DataFlowDebugResource().withName("aa")
                        .withProperties(new DataFlow().withDescription("cjmhaarkhlayer")
                            .withAnnotations(Arrays.asList("dataiuwne", "dataebheiywmxsxlmk"))
                            .withFolder(new DataFlowFolder().withName("nngwpgbfrtx"))))
                    .withDataFlows(Arrays.asList(new DataFlowDebugResource().withName("xgxohiw")
                        .withProperties(new DataFlow().withDescription("pmdnigajbxjnr")
                            .withAnnotations(Arrays.asList("dataqpafrwmxmdj", "datazhutcaqqdchmxr", "datahljqhoiqvkzm"))
                            .withFolder(new DataFlowFolder().withName("xzttgva")))))
                    .withDatasets(
                        Arrays.asList(new DatasetDebugResource().withName("gqiybfskxuyosd")
                            .withProperties(new Dataset()
                                .withDescription("heukcla")
                                .withStructure("dataipwkxf")
                                .withSchema("dataharsvai")
                                .withLinkedServiceName(new LinkedServiceReference().withReferenceName("hme")
                                    .withParameters(mapOf("ajtqyevqtydxkpy", "dataakpr", "mlo", "dataxcjafhctqn",
                                        "zucuaixvjv", "dataok")))
                                .withParameters(mapOf("mq", new ParameterSpecification().withType(ParameterType.BOOL),
                                    "bxexyydibfqrtpip", new ParameterSpecification().withType(ParameterType.FLOAT),
                                    "zi", new ParameterSpecification().withType(ParameterType.STRING), "vudvpyba",
                                    new ParameterSpecification().withType(ParameterType.OBJECT)))
                                .withAnnotations(Arrays.asList("datalnttgpblnxq", "datagecijrncvjs"))
                                .withFolder(new DatasetFolder().withName("urcxtyfbbomugubc"))
                                .withAdditionalProperties(mapOf("type", "Dataset")))))
                    .withLinkedServices(Arrays.asList(
                        new LinkedServiceDebugResource().withName("qsb")
                            .withProperties(new LinkedService().withVersion("uclq")
                                .withConnectVia(new IntegrationRuntimeReference().withReferenceName("wpgipttpsedtwt")
                                    .withParameters(mapOf("utonp", "datahuusr", "ls", "datatazpupkebwses")))
                                .withDescription("wdfoprdytsgypvi")
                                .withParameters(mapOf("qzdoy",
                                    new ParameterSpecification().withType(ParameterType.BOOL), "pkjpcgtgnhz",
                                    new ParameterSpecification().withType(ParameterType.SECURE_STRING), "hwftjn",
                                    new ParameterSpecification().withType(ParameterType.FLOAT), "ptqxksi",
                                    new ParameterSpecification().withType(ParameterType.FLOAT)))
                                .withAnnotations(Arrays.asList("datafhaj"))
                                .withAdditionalProperties(mapOf("type", "LinkedService"))),
                        new LinkedServiceDebugResource().withName("xzhobtxub")
                            .withProperties(new LinkedService().withVersion("gncke")
                                .withConnectVia(new IntegrationRuntimeReference().withReferenceName("tqaomihrtbksd")
                                    .withParameters(mapOf("oxnlvix", "dataxwficz", "xzaolzkoyniragb", "datadsi", "h",
                                        "dataiukmkmthioae")))
                                .withDescription("lcen")
                                .withParameters(
                                    mapOf("lkvmftrqa", new ParameterSpecification().withType(ParameterType.INT),
                                        "uqpoltqvnkofv", new ParameterSpecification().withType(ParameterType.INT)))
                                .withAnnotations(
                                    Arrays.asList("dataddvqtruyzbrk", "datasax", "datahnsepdwxflm", "datacmfidr"))
                                .withAdditionalProperties(mapOf("type", "LinkedService"))),
                        new LinkedServiceDebugResource().withName("fewqnznctnmkits")
                            .withProperties(
                                new LinkedService().withVersion("berydeo")
                                    .withConnectVia(new IntegrationRuntimeReference().withReferenceName("efgnibhqie")
                                        .withParameters(mapOf("hz", "datapzx", "a", "datantoqfx", "b", "datawclvyxomug",
                                            "xd", "dataygwfcwacch")))
                                    .withDescription("r")
                                    .withParameters(mapOf("qzjzuonttfvjf",
                                        new ParameterSpecification().withType(ParameterType.BOOL), "yzbgrgpuavka",
                                        new ParameterSpecification().withType(ParameterType.STRING)))
                                    .withAnnotations(Arrays.asList("datauxwgz", "datayjpmelvemybo", "datae"))
                                    .withAdditionalProperties(mapOf("type", "LinkedService")))))
                    .withStaging(new DataFlowStagingInfo()
                        .withLinkedService(new LinkedServiceReference().withReferenceName("opevqsabo")
                            .withParameters(mapOf("vorzudys", "datanugxnzpqegga", "skwjmqn", "datadiex")))
                        .withFolderPath("dataerggqaohax"))
                    .withDebugSettings(new DataFlowDebugPackageDebugSettings()
                        .withSourceSettings(Arrays.asList(
                            new DataFlowSourceSetting().withSourceName("eior")
                                .withRowLimit(1763863507)
                                .withAdditionalProperties(mapOf()),
                            new DataFlowSourceSetting().withSourceName("xgidjiijpdbwknbm")
                                .withRowLimit(1164476227)
                                .withAdditionalProperties(mapOf())))
                        .withParameters(
                            mapOf("wbgbmp", "datahsltodl", "usq", "datatrsxhiuhgvgno", "wvieymkguvrd", "datadofnp"))
                        .withDatasetParameters("dataproytd"))
                    .withAdditionalProperties(mapOf()),
                com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("obpxfgp", response.jobVersion());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
