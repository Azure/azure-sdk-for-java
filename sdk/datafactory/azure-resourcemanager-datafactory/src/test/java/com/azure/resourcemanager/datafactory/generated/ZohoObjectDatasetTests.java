// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.ZohoObjectDataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ZohoObjectDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ZohoObjectDataset model = BinaryData.fromString(
            "{\"type\":\"ZohoObject\",\"typeProperties\":{\"tableName\":\"datamxcaujbfomfbozpj\"},\"description\":\"e\",\"structure\":\"datapqcwdnnjjthpsn\",\"schema\":\"databycympohxubnnpn\",\"linkedServiceName\":{\"referenceName\":\"ebcxn\",\"parameters\":{\"jvgspj\":\"datapdyzssjlmykdy\",\"oimmsszz\":\"datafzhjngwqxcrbcrg\"}},\"parameters\":{\"nwcnvpnyldjdkj\":{\"type\":\"SecureString\",\"defaultValue\":\"dataognhtvagw\"}},\"annotations\":[\"datayknkxioxhnrjlq\"],\"folder\":{\"name\":\"ejexfdlhuhd\"},\"\":{\"cflvxbocaywmfvuh\":\"datagywadrklpdyehjr\",\"gsfmhwdxqu\":\"datamolhveol\",\"ynhitrnwqgq\":\"dataymlhklmnjqzm\",\"piqnrjoc\":\"databthb\"}}")
            .toObject(ZohoObjectDataset.class);
        Assertions.assertEquals("e", model.description());
        Assertions.assertEquals("ebcxn", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.SECURE_STRING, model.parameters().get("nwcnvpnyldjdkj").type());
        Assertions.assertEquals("ejexfdlhuhd", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ZohoObjectDataset model = new ZohoObjectDataset().withDescription("e")
            .withStructure("datapqcwdnnjjthpsn")
            .withSchema("databycympohxubnnpn")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("ebcxn")
                .withParameters(mapOf("jvgspj", "datapdyzssjlmykdy", "oimmsszz", "datafzhjngwqxcrbcrg")))
            .withParameters(mapOf("nwcnvpnyldjdkj",
                new ParameterSpecification().withType(ParameterType.SECURE_STRING).withDefaultValue("dataognhtvagw")))
            .withAnnotations(Arrays.asList("datayknkxioxhnrjlq"))
            .withFolder(new DatasetFolder().withName("ejexfdlhuhd"))
            .withTableName("datamxcaujbfomfbozpj");
        model = BinaryData.fromObject(model).toObject(ZohoObjectDataset.class);
        Assertions.assertEquals("e", model.description());
        Assertions.assertEquals("ebcxn", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.SECURE_STRING, model.parameters().get("nwcnvpnyldjdkj").type());
        Assertions.assertEquals("ejexfdlhuhd", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
