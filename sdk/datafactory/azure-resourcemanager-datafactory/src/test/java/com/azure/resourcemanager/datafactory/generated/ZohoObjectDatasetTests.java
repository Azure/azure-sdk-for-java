// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.ZohoObjectDataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ZohoObjectDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ZohoObjectDataset model = BinaryData.fromString(
            "{\"type\":\"ma\",\"typeProperties\":{\"tableName\":\"dataldic\"},\"description\":\"fwl\",\"structure\":\"dataitvkyahfoyfzoi\",\"schema\":\"dataaeprevcjukfal\",\"linkedServiceName\":{\"referenceName\":\"ceechc\",\"parameters\":{\"nylfhicrjriyb\":\"dataqbeqpucnu\",\"fsnqocybrh\":\"databydrlqllb\",\"oqjfeamzkuxdgpks\":\"datagiknrlugseiqb\"}},\"parameters\":{\"ldrqqv\":{\"type\":\"Int\",\"defaultValue\":\"datanvnj\"},\"xlxedthfwlnvq\":{\"type\":\"Object\",\"defaultValue\":\"datausq\"},\"blnlmpuyypaggpai\":{\"type\":\"Object\",\"defaultValue\":\"datayfi\"},\"zwloqrmgdhy\":{\"type\":\"Int\",\"defaultValue\":\"datae\"}},\"annotations\":[\"datavlxtywukhjdspl\",\"dataitxrrgkwiyoyh\"],\"folder\":{\"name\":\"vxcodwkwoytcac\"},\"\":{\"lfwfiikqcdnzs\":\"dataizfue\",\"gne\":\"dataiu\",\"mcrxlyzoaho\":\"datao\"}}")
            .toObject(ZohoObjectDataset.class);
        Assertions.assertEquals("fwl", model.description());
        Assertions.assertEquals("ceechc", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("ldrqqv").type());
        Assertions.assertEquals("vxcodwkwoytcac", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ZohoObjectDataset model = new ZohoObjectDataset().withDescription("fwl")
            .withStructure("dataitvkyahfoyfzoi")
            .withSchema("dataaeprevcjukfal")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("ceechc")
                .withParameters(mapOf("nylfhicrjriyb", "dataqbeqpucnu", "fsnqocybrh", "databydrlqllb",
                    "oqjfeamzkuxdgpks", "datagiknrlugseiqb")))
            .withParameters(mapOf("ldrqqv",
                new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("datanvnj"), "xlxedthfwlnvq",
                new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("datausq"),
                "blnlmpuyypaggpai",
                new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("datayfi"), "zwloqrmgdhy",
                new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("datae")))
            .withAnnotations(Arrays.asList("datavlxtywukhjdspl", "dataitxrrgkwiyoyh"))
            .withFolder(new DatasetFolder().withName("vxcodwkwoytcac"))
            .withTableName("dataldic");
        model = BinaryData.fromObject(model).toObject(ZohoObjectDataset.class);
        Assertions.assertEquals("fwl", model.description());
        Assertions.assertEquals("ceechc", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("ldrqqv").type());
        Assertions.assertEquals("vxcodwkwoytcac", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
