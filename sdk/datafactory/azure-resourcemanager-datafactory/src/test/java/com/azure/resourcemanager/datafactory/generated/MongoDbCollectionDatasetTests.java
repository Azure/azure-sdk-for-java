// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.MongoDbCollectionDataset;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MongoDbCollectionDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MongoDbCollectionDataset model = BinaryData.fromString(
            "{\"type\":\"MongoDbCollection\",\"typeProperties\":{\"collectionName\":\"datao\"},\"description\":\"wbwggijts\",\"structure\":\"datajnrrhikws\",\"schema\":\"datar\",\"linkedServiceName\":{\"referenceName\":\"d\",\"parameters\":{\"zfrunjfhrjhiycba\":\"datauhtr\",\"hvtuwyjsqwzsz\":\"dataseqnczkv\"}},\"parameters\":{\"hczavojmsl\":{\"type\":\"SecureString\",\"defaultValue\":\"datazunkfnyskwwun\"}},\"annotations\":[\"datacukvbljpxprrvchy\"],\"folder\":{\"name\":\"alpcufjjfxtiztq\"},\"\":{\"wbaaes\":\"dataahhhsaaxxsritr\",\"bgpasrvrmti\":\"datayefmxwoqotii\"}}")
            .toObject(MongoDbCollectionDataset.class);
        Assertions.assertEquals("wbwggijts", model.description());
        Assertions.assertEquals("d", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.SECURE_STRING, model.parameters().get("hczavojmsl").type());
        Assertions.assertEquals("alpcufjjfxtiztq", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MongoDbCollectionDataset model = new MongoDbCollectionDataset().withDescription("wbwggijts")
            .withStructure("datajnrrhikws")
            .withSchema("datar")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("d")
                .withParameters(mapOf("zfrunjfhrjhiycba", "datauhtr", "hvtuwyjsqwzsz", "dataseqnczkv")))
            .withParameters(mapOf("hczavojmsl",
                new ParameterSpecification().withType(ParameterType.SECURE_STRING)
                    .withDefaultValue("datazunkfnyskwwun")))
            .withAnnotations(Arrays.asList("datacukvbljpxprrvchy"))
            .withFolder(new DatasetFolder().withName("alpcufjjfxtiztq"))
            .withCollectionName("datao");
        model = BinaryData.fromObject(model).toObject(MongoDbCollectionDataset.class);
        Assertions.assertEquals("wbwggijts", model.description());
        Assertions.assertEquals("d", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.SECURE_STRING, model.parameters().get("hczavojmsl").type());
        Assertions.assertEquals("alpcufjjfxtiztq", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
