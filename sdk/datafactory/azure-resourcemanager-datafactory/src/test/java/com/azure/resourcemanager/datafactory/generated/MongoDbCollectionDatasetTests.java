// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.MongoDbCollectionDataset;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MongoDbCollectionDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MongoDbCollectionDataset model = BinaryData.fromString(
            "{\"type\":\"MongoDbCollection\",\"typeProperties\":{\"collectionName\":\"datab\"},\"description\":\"wxs\",\"structure\":\"datajgg\",\"schema\":\"datagaef\",\"linkedServiceName\":{\"referenceName\":\"awkmibu\",\"parameters\":{\"updyttqm\":\"dataiurni\"}},\"parameters\":{\"s\":{\"type\":\"Array\",\"defaultValue\":\"datal\"}},\"annotations\":[\"datahhtuqmtxynof\",\"dataqobfixngxebihe\"],\"folder\":{\"name\":\"kingiqcdolrpgu\"},\"\":{\"dafbncuy\":\"datalbsm\",\"fzxjzi\":\"dataeykcnhpplzh\",\"wnuwkkfzzetl\":\"dataucrln\",\"vwywjvrlgqpwwlzp\":\"datahdyxz\"}}")
            .toObject(MongoDbCollectionDataset.class);
        Assertions.assertEquals("wxs", model.description());
        Assertions.assertEquals("awkmibu", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("s").type());
        Assertions.assertEquals("kingiqcdolrpgu", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MongoDbCollectionDataset model = new MongoDbCollectionDataset().withDescription("wxs")
            .withStructure("datajgg")
            .withSchema("datagaef")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("awkmibu")
                .withParameters(mapOf("updyttqm", "dataiurni")))
            .withParameters(
                mapOf("s", new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("datal")))
            .withAnnotations(Arrays.asList("datahhtuqmtxynof", "dataqobfixngxebihe"))
            .withFolder(new DatasetFolder().withName("kingiqcdolrpgu"))
            .withCollectionName("datab");
        model = BinaryData.fromObject(model).toObject(MongoDbCollectionDataset.class);
        Assertions.assertEquals("wxs", model.description());
        Assertions.assertEquals("awkmibu", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("s").type());
        Assertions.assertEquals("kingiqcdolrpgu", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
