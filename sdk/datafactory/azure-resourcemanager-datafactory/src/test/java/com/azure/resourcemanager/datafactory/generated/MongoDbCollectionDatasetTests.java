// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.MongoDbCollectionDataset;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MongoDbCollectionDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MongoDbCollectionDataset model = BinaryData.fromString(
            "{\"type\":\"cjomipvwkaujtt\",\"typeProperties\":{\"collectionName\":\"datar\"},\"description\":\"k\",\"structure\":\"datavbwofxxdplre\",\"schema\":\"datakvgahcbtu\",\"linkedServiceName\":{\"referenceName\":\"lbpxrhrfjenrazwe\",\"parameters\":{\"tostjixyzsecig\":\"datatlhqas\",\"fomcsau\":\"datazdwjtacfvvtdpcbp\"}},\"parameters\":{\"tkfysunt\":{\"type\":\"Int\",\"defaultValue\":\"dataiw\"},\"hcvasyy\":{\"type\":\"Array\",\"defaultValue\":\"dataklx\"},\"ixyxxhwrlqomaqs\":{\"type\":\"Array\",\"defaultValue\":\"dataokjbmsr\"}},\"annotations\":[\"datapzzbrwn\"],\"folder\":{\"name\":\"zsxagysokli\"},\"\":{\"bhujcydyl\":\"dataybvrrbnhyl\"}}")
            .toObject(MongoDbCollectionDataset.class);
        Assertions.assertEquals("k", model.description());
        Assertions.assertEquals("lbpxrhrfjenrazwe", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("tkfysunt").type());
        Assertions.assertEquals("zsxagysokli", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MongoDbCollectionDataset model = new MongoDbCollectionDataset().withDescription("k")
            .withStructure("datavbwofxxdplre")
            .withSchema("datakvgahcbtu")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("lbpxrhrfjenrazwe")
                .withParameters(mapOf("tostjixyzsecig", "datatlhqas", "fomcsau", "datazdwjtacfvvtdpcbp")))
            .withParameters(
                mapOf("tkfysunt", new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("dataiw"),
                    "hcvasyy", new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("dataklx"),
                    "ixyxxhwrlqomaqs",
                    new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("dataokjbmsr")))
            .withAnnotations(Arrays.asList("datapzzbrwn"))
            .withFolder(new DatasetFolder().withName("zsxagysokli"))
            .withCollectionName("datar");
        model = BinaryData.fromObject(model).toObject(MongoDbCollectionDataset.class);
        Assertions.assertEquals("k", model.description());
        Assertions.assertEquals("lbpxrhrfjenrazwe", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("tkfysunt").type());
        Assertions.assertEquals("zsxagysokli", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
