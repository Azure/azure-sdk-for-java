// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.MongoDbCollectionDataset;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MongoDbCollectionDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MongoDbCollectionDataset model =
            BinaryData
                .fromString(
                    "{\"type\":\"MongoDbCollection\",\"typeProperties\":{\"collectionName\":\"datad\"},\"description\":\"sjqb\",\"structure\":\"dataqmxv\",\"schema\":\"datariwbwggij\",\"linkedServiceName\":{\"referenceName\":\"spzjn\",\"parameters\":{\"htrgz\":\"dataikwsbzrhdugq\",\"jfhrjhiycbause\":\"dataru\",\"ihvtuwyjsqw\":\"datanczk\",\"oszjgz\":\"datas\"}},\"parameters\":{\"hczavojmsl\":{\"type\":\"String\",\"defaultValue\":\"datayskwwun\"},\"uqalpcufjjfxt\":{\"type\":\"Array\",\"defaultValue\":\"datacukvbljpxprrvchy\"},\"rcwbaae\":{\"type\":\"Object\",\"defaultValue\":\"dataqdstahhhsaaxxsri\"},\"xwoqotiiqbgpasr\":{\"type\":\"Bool\",\"defaultValue\":\"dataef\"}},\"annotations\":[\"datatistyikjhorlx\",\"datapypkennycntrq\",\"dataxwtdmbqjtsuhqh\"],\"folder\":{\"name\":\"tdyqav\"},\"\":{\"npaami\":\"dataqmzxsyaks\",\"hvwt\":\"datawb\",\"kiy\":\"datapbgchcgsfzhb\",\"cfferznzc\":\"dataqbjsdjpgxeysgw\"}}")
                .toObject(MongoDbCollectionDataset.class);
        Assertions.assertEquals("sjqb", model.description());
        Assertions.assertEquals("spzjn", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("hczavojmsl").type());
        Assertions.assertEquals("tdyqav", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MongoDbCollectionDataset model =
            new MongoDbCollectionDataset()
                .withDescription("sjqb")
                .withStructure("dataqmxv")
                .withSchema("datariwbwggij")
                .withLinkedServiceName(
                    new LinkedServiceReference()
                        .withReferenceName("spzjn")
                        .withParameters(
                            mapOf(
                                "htrgz",
                                "dataikwsbzrhdugq",
                                "jfhrjhiycbause",
                                "dataru",
                                "ihvtuwyjsqw",
                                "datanczk",
                                "oszjgz",
                                "datas")))
                .withParameters(
                    mapOf(
                        "hczavojmsl",
                        new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("datayskwwun"),
                        "uqalpcufjjfxt",
                        new ParameterSpecification()
                            .withType(ParameterType.ARRAY)
                            .withDefaultValue("datacukvbljpxprrvchy"),
                        "rcwbaae",
                        new ParameterSpecification()
                            .withType(ParameterType.OBJECT)
                            .withDefaultValue("dataqdstahhhsaaxxsri"),
                        "xwoqotiiqbgpasr",
                        new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("dataef")))
                .withAnnotations(Arrays.asList("datatistyikjhorlx", "datapypkennycntrq", "dataxwtdmbqjtsuhqh"))
                .withFolder(new DatasetFolder().withName("tdyqav"))
                .withCollectionName("datad");
        model = BinaryData.fromObject(model).toObject(MongoDbCollectionDataset.class);
        Assertions.assertEquals("sjqb", model.description());
        Assertions.assertEquals("spzjn", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("hczavojmsl").type());
        Assertions.assertEquals("tdyqav", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
