// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.ImpalaObjectDataset;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ImpalaObjectDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ImpalaObjectDataset model = BinaryData.fromString(
            "{\"type\":\"zbyqhaath\",\"typeProperties\":{\"tableName\":\"datapgcryvidbzdylbvj\",\"table\":\"datagngwn\",\"schema\":\"dataftecgprzsqmpdqc\"},\"description\":\"yxuuc\",\"structure\":\"datausyrux\",\"schema\":\"datahhlhrvmgs\",\"linkedServiceName\":{\"referenceName\":\"pgmncrvtp\",\"parameters\":{\"cmpu\":\"dataromppzsauqmeuhpl\",\"e\":\"dataiugo\",\"rncfu\":\"datatlyspjymwicc\",\"iwtwfgoc\":\"datalakgixhqjqhgqwbb\"}},\"parameters\":{\"eohl\":{\"type\":\"Int\",\"defaultValue\":\"datamnnzugabkyydsy\"},\"nvbftswcdopnsep\":{\"type\":\"Object\",\"defaultValue\":\"datanv\"},\"af\":{\"type\":\"Object\",\"defaultValue\":\"datatic\"}},\"annotations\":[\"datawkopxdk\",\"datatwoqhgpp\"],\"folder\":{\"name\":\"ik\"},\"\":{\"zjnnuwwv\":\"dataxxfnduv\",\"bkj\":\"datazrfxajtbcqj\",\"i\":\"dataurxrjwyz\"}}")
            .toObject(ImpalaObjectDataset.class);
        Assertions.assertEquals("yxuuc", model.description());
        Assertions.assertEquals("pgmncrvtp", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("eohl").type());
        Assertions.assertEquals("ik", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ImpalaObjectDataset model = new ImpalaObjectDataset().withDescription("yxuuc")
            .withStructure("datausyrux")
            .withSchema("datahhlhrvmgs")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("pgmncrvtp")
                .withParameters(mapOf("cmpu", "dataromppzsauqmeuhpl", "e", "dataiugo", "rncfu", "datatlyspjymwicc",
                    "iwtwfgoc", "datalakgixhqjqhgqwbb")))
            .withParameters(mapOf("eohl",
                new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("datamnnzugabkyydsy"),
                "nvbftswcdopnsep",
                new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("datanv"), "af",
                new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("datatic")))
            .withAnnotations(Arrays.asList("datawkopxdk", "datatwoqhgpp"))
            .withFolder(new DatasetFolder().withName("ik"))
            .withTableName("datapgcryvidbzdylbvj")
            .withTable("datagngwn")
            .withSchemaTypePropertiesSchema("dataftecgprzsqmpdqc");
        model = BinaryData.fromObject(model).toObject(ImpalaObjectDataset.class);
        Assertions.assertEquals("yxuuc", model.description());
        Assertions.assertEquals("pgmncrvtp", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("eohl").type());
        Assertions.assertEquals("ik", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
