// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.ImpalaObjectDataset;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ImpalaObjectDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ImpalaObjectDataset model =
            BinaryData
                .fromString(
                    "{\"type\":\"ImpalaObject\",\"typeProperties\":{\"tableName\":\"datamdjmvph\",\"table\":\"datanugslvfzzioxbg\",\"schema\":\"datavueprpmofxnwcgz\"},\"description\":\"xixtxxxajsehbknn\",\"structure\":\"datakyjfawpcbsog\",\"schema\":\"datahczbnivco\",\"linkedServiceName\":{\"referenceName\":\"sxvppkjealkdb\",\"parameters\":{\"qdkt\":\"dataotvbmyzuqf\",\"jndkvzmx\":\"datajtoqszhhqn\",\"nkqyipgkm\":\"dataffqgdo\",\"ftgdrfzjlflza\":\"datatdazmdzesim\"}},\"parameters\":{\"orzbidaebeznicew\":{\"type\":\"Object\",\"defaultValue\":\"dataabxief\"},\"wwsr\":{\"type\":\"Array\",\"defaultValue\":\"datajwiylciobb\"}},\"annotations\":[\"dataxuecuuue\"],\"folder\":{\"name\":\"nteevfgaxfez\"},\"\":{\"kyrxgmzzeglwd\":\"datasddkodkgxq\",\"kkraj\":\"datafsspfegaoksd\"}}")
                .toObject(ImpalaObjectDataset.class);
        Assertions.assertEquals("xixtxxxajsehbknn", model.description());
        Assertions.assertEquals("sxvppkjealkdb", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.OBJECT, model.parameters().get("orzbidaebeznicew").type());
        Assertions.assertEquals("nteevfgaxfez", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ImpalaObjectDataset model =
            new ImpalaObjectDataset()
                .withDescription("xixtxxxajsehbknn")
                .withStructure("datakyjfawpcbsog")
                .withSchema("datahczbnivco")
                .withLinkedServiceName(
                    new LinkedServiceReference()
                        .withReferenceName("sxvppkjealkdb")
                        .withParameters(
                            mapOf(
                                "qdkt",
                                "dataotvbmyzuqf",
                                "jndkvzmx",
                                "datajtoqszhhqn",
                                "nkqyipgkm",
                                "dataffqgdo",
                                "ftgdrfzjlflza",
                                "datatdazmdzesim")))
                .withParameters(
                    mapOf(
                        "orzbidaebeznicew",
                        new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("dataabxief"),
                        "wwsr",
                        new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("datajwiylciobb")))
                .withAnnotations(Arrays.asList("dataxuecuuue"))
                .withFolder(new DatasetFolder().withName("nteevfgaxfez"))
                .withTableName("datamdjmvph")
                .withTable("datanugslvfzzioxbg")
                .withSchemaTypePropertiesSchema("datavueprpmofxnwcgz");
        model = BinaryData.fromObject(model).toObject(ImpalaObjectDataset.class);
        Assertions.assertEquals("xixtxxxajsehbknn", model.description());
        Assertions.assertEquals("sxvppkjealkdb", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.OBJECT, model.parameters().get("orzbidaebeznicew").type());
        Assertions.assertEquals("nteevfgaxfez", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
