// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.ImpalaObjectDataset;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ImpalaObjectDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ImpalaObjectDataset model = BinaryData.fromString(
            "{\"type\":\"ImpalaObject\",\"typeProperties\":{\"tableName\":\"dataznlf\",\"table\":\"datafzx\",\"schema\":\"dataz\"},\"description\":\"ugtkxncwdytnlr\",\"structure\":\"datamwbe\",\"schema\":\"dataww\",\"linkedServiceName\":{\"referenceName\":\"vnhwwkrmqe\",\"parameters\":{\"gnjxiakgyjm\":\"datahafqfudfyziruq\"}},\"parameters\":{\"c\":{\"type\":\"Array\",\"defaultValue\":\"dataikyluyugmbr\"}},\"annotations\":[\"dataoxtv\",\"datac\"],\"folder\":{\"name\":\"yhmmglvnbenkps\"},\"\":{\"nkxvcptf\":\"dataky\",\"gazhlrdxpc\":\"datafbhnkxasomaf\"}}")
            .toObject(ImpalaObjectDataset.class);
        Assertions.assertEquals("ugtkxncwdytnlr", model.description());
        Assertions.assertEquals("vnhwwkrmqe", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("c").type());
        Assertions.assertEquals("yhmmglvnbenkps", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ImpalaObjectDataset model = new ImpalaObjectDataset().withDescription("ugtkxncwdytnlr")
            .withStructure("datamwbe")
            .withSchema("dataww")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("vnhwwkrmqe")
                .withParameters(mapOf("gnjxiakgyjm", "datahafqfudfyziruq")))
            .withParameters(mapOf("c",
                new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("dataikyluyugmbr")))
            .withAnnotations(Arrays.asList("dataoxtv", "datac"))
            .withFolder(new DatasetFolder().withName("yhmmglvnbenkps"))
            .withTableName("dataznlf")
            .withTable("datafzx")
            .withSchemaTypePropertiesSchema("dataz");
        model = BinaryData.fromObject(model).toObject(ImpalaObjectDataset.class);
        Assertions.assertEquals("ugtkxncwdytnlr", model.description());
        Assertions.assertEquals("vnhwwkrmqe", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("c").type());
        Assertions.assertEquals("yhmmglvnbenkps", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
