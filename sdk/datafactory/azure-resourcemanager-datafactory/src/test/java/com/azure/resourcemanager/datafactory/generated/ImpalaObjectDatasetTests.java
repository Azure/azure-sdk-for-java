// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.ImpalaObjectDataset;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ImpalaObjectDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ImpalaObjectDataset model = BinaryData.fromString(
            "{\"type\":\"ImpalaObject\",\"typeProperties\":{\"tableName\":\"datahvpsuwichm\",\"table\":\"datazbyfkoc\",\"schema\":\"datazdct\"},\"description\":\"lwscrngtwgxrol\",\"structure\":\"dataplksdksutacucti\",\"schema\":\"datavis\",\"linkedServiceName\":{\"referenceName\":\"bvjh\",\"parameters\":{\"lphngrxlexoweoro\":\"datamqququ\",\"mtgbqpfy\":\"datarqicg\",\"nzhrplc\":\"datavhtvijvwmrg\"}},\"parameters\":{\"q\":{\"type\":\"Float\",\"defaultValue\":\"dataquuu\"},\"cmbkygvxjdqo\":{\"type\":\"Float\",\"defaultValue\":\"datatqyzyc\"}},\"annotations\":[\"datamdzlyb\"],\"folder\":{\"name\":\"fk\"},\"\":{\"sryjokvl\":\"datafkicxhsevmnkggh\"}}")
            .toObject(ImpalaObjectDataset.class);
        Assertions.assertEquals("lwscrngtwgxrol", model.description());
        Assertions.assertEquals("bvjh", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.FLOAT, model.parameters().get("q").type());
        Assertions.assertEquals("fk", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ImpalaObjectDataset model = new ImpalaObjectDataset().withDescription("lwscrngtwgxrol")
            .withStructure("dataplksdksutacucti")
            .withSchema("datavis")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("bvjh")
                .withParameters(
                    mapOf("lphngrxlexoweoro", "datamqququ", "mtgbqpfy", "datarqicg", "nzhrplc", "datavhtvijvwmrg")))
            .withParameters(mapOf("q",
                new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("dataquuu"), "cmbkygvxjdqo",
                new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("datatqyzyc")))
            .withAnnotations(Arrays.asList("datamdzlyb"))
            .withFolder(new DatasetFolder().withName("fk"))
            .withTableName("datahvpsuwichm")
            .withTable("datazbyfkoc")
            .withSchemaTypePropertiesSchema("datazdct");
        model = BinaryData.fromObject(model).toObject(ImpalaObjectDataset.class);
        Assertions.assertEquals("lwscrngtwgxrol", model.description());
        Assertions.assertEquals("bvjh", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.FLOAT, model.parameters().get("q").type());
        Assertions.assertEquals("fk", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
