// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.TriggerResourceInner;
import com.azure.resourcemanager.datafactory.models.Trigger;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class TriggerResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TriggerResourceInner model = BinaryData.fromString(
            "{\"properties\":{\"type\":\"dvetnws\",\"description\":\"utnw\",\"runtimeState\":\"Stopped\",\"annotations\":[\"datavuzhyr\",\"dataewipm\",\"dataekdxuku\",\"datagsjj\"],\"\":{\"hvvmuvgpmun\":\"datadxgketwzhhzjhfj\"}},\"name\":\"sx\",\"type\":\"hfbuzjyihsasbhud\",\"etag\":\"ohyuemslynsq\",\"id\":\"pfoobr\"}")
            .toObject(TriggerResourceInner.class);
        Assertions.assertEquals("pfoobr", model.id());
        Assertions.assertEquals("utnw", model.properties().description());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TriggerResourceInner model = new TriggerResourceInner().withId("pfoobr")
            .withProperties(new Trigger().withDescription("utnw")
                .withAnnotations(Arrays.asList("datavuzhyr", "dataewipm", "dataekdxuku", "datagsjj"))
                .withAdditionalProperties(mapOf("type", "dvetnws", "runtimeState", "Stopped")));
        model = BinaryData.fromObject(model).toObject(TriggerResourceInner.class);
        Assertions.assertEquals("pfoobr", model.id());
        Assertions.assertEquals("utnw", model.properties().description());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
