// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.ShopifyObjectDataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ShopifyObjectDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ShopifyObjectDataset model = BinaryData.fromString(
            "{\"type\":\"qmbwcacwaaqa\",\"typeProperties\":{\"tableName\":\"dataefqhxy\"},\"description\":\"okyaxxratqlr\",\"structure\":\"databrcmmdtshzu\",\"schema\":\"dataucznbabowrcyrnmj\",\"linkedServiceName\":{\"referenceName\":\"ko\",\"parameters\":{\"mnaphrskmpeajzzy\":\"datazkkagvej\",\"r\":\"dataavamzmzfntte\",\"pjdr\":\"datatxytja\"}},\"parameters\":{\"vqmdmrac\":{\"type\":\"Array\",\"defaultValue\":\"datakvbfaehjjirvjqx\"},\"yzhcvlavy\":{\"type\":\"Float\",\"defaultValue\":\"datafdralihhsscy\"}},\"annotations\":[\"datandxrmyzvtiojtpd\",\"datau\",\"dataxaxoyj\"],\"folder\":{\"name\":\"twedi\"},\"\":{\"tmca\":\"datakteccxfnat\",\"cnbdq\":\"databqpmfhjik\"}}")
            .toObject(ShopifyObjectDataset.class);
        Assertions.assertEquals("okyaxxratqlr", model.description());
        Assertions.assertEquals("ko", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("vqmdmrac").type());
        Assertions.assertEquals("twedi", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ShopifyObjectDataset model = new ShopifyObjectDataset().withDescription("okyaxxratqlr")
            .withStructure("databrcmmdtshzu")
            .withSchema("dataucznbabowrcyrnmj")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("ko")
                .withParameters(
                    mapOf("mnaphrskmpeajzzy", "datazkkagvej", "r", "dataavamzmzfntte", "pjdr", "datatxytja")))
            .withParameters(mapOf("vqmdmrac",
                new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("datakvbfaehjjirvjqx"),
                "yzhcvlavy",
                new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("datafdralihhsscy")))
            .withAnnotations(Arrays.asList("datandxrmyzvtiojtpd", "datau", "dataxaxoyj"))
            .withFolder(new DatasetFolder().withName("twedi"))
            .withTableName("dataefqhxy");
        model = BinaryData.fromObject(model).toObject(ShopifyObjectDataset.class);
        Assertions.assertEquals("okyaxxratqlr", model.description());
        Assertions.assertEquals("ko", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("vqmdmrac").type());
        Assertions.assertEquals("twedi", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
