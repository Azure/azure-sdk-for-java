// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.MetadataItem;
import com.azure.resourcemanager.datafactory.models.OrcSink;
import com.azure.resourcemanager.datafactory.models.OrcWriteSettings;
import com.azure.resourcemanager.datafactory.models.StoreWriteSettings;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public final class OrcSinkTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        OrcSink model = BinaryData.fromString(
            "{\"type\":\"OrcSink\",\"storeSettings\":{\"type\":\"StoreWriteSettings\",\"maxConcurrentConnections\":\"datazzbr\",\"disableMetricsCollection\":\"datakeylk\",\"copyBehavior\":\"dataaagrdfwvgl\",\"metadata\":[{\"name\":\"datahvo\",\"value\":\"datacryhuohthzfot\"},{\"name\":\"datafhrjkah\",\"value\":\"datafshgmqxwoppn\"},{\"name\":\"datarmzv\",\"value\":\"datafkznyait\"}],\"\":{\"rjmilog\":\"dataobrxhwpgkrn\",\"btplrtxhztufwyrs\":\"datanzfgqi\",\"buyd\":\"datajjsoyus\"}},\"formatSettings\":{\"type\":\"OrcWriteSettings\",\"maxRowsPerFile\":\"dataknttkdrblehen\",\"fileNamePrefix\":\"datat\",\"\":{\"bijikjf\":\"dataeo\",\"whbpojujpifxtg\":\"dataib\"}},\"writeBatchSize\":\"dataavfjx\",\"writeBatchTimeout\":\"datawx\",\"sinkRetryCount\":\"dataauh\",\"sinkRetryWait\":\"datachphovu\",\"maxConcurrentConnections\":\"datasczwcxlncoh\",\"disableMetricsCollection\":\"datafvyriawfwwsgdkbd\",\"\":{\"rtoxsthjyyiryb\":\"dataspfwmfc\"}}")
            .toObject(OrcSink.class);
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        OrcSink model = new OrcSink().withWriteBatchSize("dataavfjx")
            .withWriteBatchTimeout("datawx")
            .withSinkRetryCount("dataauh")
            .withSinkRetryWait("datachphovu")
            .withMaxConcurrentConnections("datasczwcxlncoh")
            .withDisableMetricsCollection("datafvyriawfwwsgdkbd")
            .withStoreSettings(new StoreWriteSettings().withMaxConcurrentConnections("datazzbr")
                .withDisableMetricsCollection("datakeylk")
                .withCopyBehavior("dataaagrdfwvgl")
                .withMetadata(Arrays.asList(new MetadataItem().withName("datahvo").withValue("datacryhuohthzfot"),
                    new MetadataItem().withName("datafhrjkah").withValue("datafshgmqxwoppn"),
                    new MetadataItem().withName("datarmzv").withValue("datafkznyait")))
                .withAdditionalProperties(mapOf("type", "StoreWriteSettings")))
            .withFormatSettings(
                new OrcWriteSettings().withMaxRowsPerFile("dataknttkdrblehen").withFileNamePrefix("datat"));
        model = BinaryData.fromObject(model).toObject(OrcSink.class);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
