// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.MetadataItem;
import com.azure.resourcemanager.datafactory.models.OrcSink;
import com.azure.resourcemanager.datafactory.models.OrcWriteSettings;
import com.azure.resourcemanager.datafactory.models.StoreWriteSettings;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public final class OrcSinkTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        OrcSink model = BinaryData.fromString(
            "{\"type\":\"xljsbtosiwc\",\"storeSettings\":{\"type\":\"lyhgiisn\",\"maxConcurrentConnections\":\"datax\",\"disableMetricsCollection\":\"databo\",\"copyBehavior\":\"datapyilojwcza\",\"metadata\":[{\"name\":\"dataauskishhm\",\"value\":\"datapgrkd\"},{\"name\":\"datazaunbwcqti\",\"value\":\"datavzds\"}],\"\":{\"pplrdkcazujvh\":\"datahjlploa\",\"elaaexcnxrtlnzd\":\"datauzbsxhivnc\"}},\"formatSettings\":{\"type\":\"aboozxkdzmtkmn\",\"maxRowsPerFile\":\"datammzisljxphwy\",\"fileNamePrefix\":\"datamcpfrakucgjreoac\",\"\":{\"kyet\":\"datademrclsxg\",\"yflke\":\"datatkhihixisd\"}},\"writeBatchSize\":\"dataqgehbw\",\"writeBatchTimeout\":\"dataoc\",\"sinkRetryCount\":\"datazlfhhwdajfth\",\"sinkRetryWait\":\"datawuomjd\",\"maxConcurrentConnections\":\"dataufqhq\",\"disableMetricsCollection\":\"dataio\",\"\":{\"pyemppwkryzrdqpk\":\"dataxxbneiobub\",\"myhjgmfyernckg\":\"datafuvhoiqqzb\",\"kafiokeolzizfbun\":\"datawiq\",\"muwl\":\"datamxhfttmj\"}}")
            .toObject(OrcSink.class);
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        OrcSink model = new OrcSink().withWriteBatchSize("dataqgehbw")
            .withWriteBatchTimeout("dataoc")
            .withSinkRetryCount("datazlfhhwdajfth")
            .withSinkRetryWait("datawuomjd")
            .withMaxConcurrentConnections("dataufqhq")
            .withDisableMetricsCollection("dataio")
            .withStoreSettings(new StoreWriteSettings().withMaxConcurrentConnections("datax")
                .withDisableMetricsCollection("databo")
                .withCopyBehavior("datapyilojwcza")
                .withMetadata(Arrays.asList(new MetadataItem().withName("dataauskishhm").withValue("datapgrkd"),
                    new MetadataItem().withName("datazaunbwcqti").withValue("datavzds")))
                .withAdditionalProperties(mapOf("type", "lyhgiisn")))
            .withFormatSettings(new OrcWriteSettings().withMaxRowsPerFile("datammzisljxphwy")
                .withFileNamePrefix("datamcpfrakucgjreoac"));
        model = BinaryData.fromObject(model).toObject(OrcSink.class);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
