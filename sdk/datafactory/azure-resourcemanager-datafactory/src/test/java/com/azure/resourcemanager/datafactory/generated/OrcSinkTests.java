// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.OrcSink;
import com.azure.resourcemanager.datafactory.models.OrcWriteSettings;
import com.azure.resourcemanager.datafactory.models.StoreWriteSettings;
import java.util.HashMap;
import java.util.Map;

public final class OrcSinkTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        OrcSink model =
            BinaryData
                .fromString(
                    "{\"type\":\"OrcSink\",\"storeSettings\":{\"type\":\"StoreWriteSettings\",\"maxConcurrentConnections\":\"datagwv\",\"disableMetricsCollection\":\"datasqlyahlaoqkcit\",\"copyBehavior\":\"datauzvaxltrznwh\",\"\":{\"ddkkoyzsyjvk\":\"datasauvprqzpfpbxl\",\"hczqm\":\"dataldonsekazxewnlpc\",\"zzcbohbbavode\":\"dataxmyfrmfclkyncjya\",\"bvhxnjorvpc\":\"dataduabqbverbjcts\"}},\"formatSettings\":{\"type\":\"OrcWriteSettings\",\"maxRowsPerFile\":\"datalppuknnmnp\",\"fileNamePrefix\":\"datanm\",\"\":{\"efivozrdzrik\":\"datadh\",\"gozoelamerpbctrw\":\"dataiucvvrkxpb\",\"ywq\":\"datavnscmacb\"}},\"writeBatchSize\":\"dataztlf\",\"writeBatchTimeout\":\"datalgxrsn\",\"sinkRetryCount\":\"datarooaahhvsf\",\"sinkRetryWait\":\"datawkinkhvtxngme\",\"maxConcurrentConnections\":\"dataninjhdkvkqjjouh\",\"disableMetricsCollection\":\"datakcttpcctvcjdrmkn\",\"\":{\"zbmyftzbxfgo\":\"datavcrj\",\"egursbzmixwaxtn\":\"datarbullqnfz\",\"gsuqmrkyaovcbds\":\"datavtzdvxsgdaajl\",\"j\":\"dataxhpqlxnb\"}}")
                .toObject(OrcSink.class);
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        OrcSink model =
            new OrcSink()
                .withWriteBatchSize("dataztlf")
                .withWriteBatchTimeout("datalgxrsn")
                .withSinkRetryCount("datarooaahhvsf")
                .withSinkRetryWait("datawkinkhvtxngme")
                .withMaxConcurrentConnections("dataninjhdkvkqjjouh")
                .withDisableMetricsCollection("datakcttpcctvcjdrmkn")
                .withStoreSettings(
                    new StoreWriteSettings()
                        .withMaxConcurrentConnections("datagwv")
                        .withDisableMetricsCollection("datasqlyahlaoqkcit")
                        .withCopyBehavior("datauzvaxltrznwh")
                        .withAdditionalProperties(mapOf("type", "StoreWriteSettings")))
                .withFormatSettings(
                    new OrcWriteSettings().withMaxRowsPerFile("datalppuknnmnp").withFileNamePrefix("datanm"));
        model = BinaryData.fromObject(model).toObject(OrcSink.class);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
