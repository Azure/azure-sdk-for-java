// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.MetadataItem;
import com.azure.resourcemanager.datafactory.models.OrcSink;
import com.azure.resourcemanager.datafactory.models.OrcWriteSettings;
import com.azure.resourcemanager.datafactory.models.StoreWriteSettings;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public final class OrcSinkTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        OrcSink model = BinaryData.fromString(
            "{\"type\":\"OrcSink\",\"storeSettings\":{\"type\":\"StoreWriteSettings\",\"maxConcurrentConnections\":\"datadtuhdoimojcm\",\"disableMetricsCollection\":\"datacd\",\"copyBehavior\":\"datavorzhzfoc\",\"metadata\":[{\"name\":\"datatornvbhuyolwifbd\",\"value\":\"datavvcyw\"},{\"name\":\"datavkthrexzve\",\"value\":\"datazyuiklokeqeowb\"}],\"\":{\"bpobvjhun\":\"dataehvgchsgotgwe\",\"rxcei\":\"datac\",\"dtkllqhznutrx\":\"datav\"}},\"formatSettings\":{\"type\":\"OrcWriteSettings\",\"maxRowsPerFile\":\"datatrnniarjezjhy\",\"fileNamePrefix\":\"dataqf\",\"\":{\"ipshhetagwm\":\"dataesqykqfserls\",\"kehpdssvlubdp\":\"datagvnojgmobkaligoi\",\"mixu\":\"dataowxsxbxd\",\"hmtbu\":\"datacekcqmjqqauft\"}},\"writeBatchSize\":\"datacnkghkrbirshlh\",\"writeBatchTimeout\":\"datayod\",\"sinkRetryCount\":\"datawnqbpxy\",\"sinkRetryWait\":\"dataftxzovbhqels\",\"maxConcurrentConnections\":\"datafxejpocsgigsab\",\"disableMetricsCollection\":\"datandyjwmglgstrzfhe\",\"\":{\"ohnymfhmlji\":\"dataovkbcbe\",\"iszxdbg\":\"datakgfvzvmtjcxi\",\"izw\":\"dataceetuivmbu\"}}")
            .toObject(OrcSink.class);
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        OrcSink model = new OrcSink().withWriteBatchSize("datacnkghkrbirshlh")
            .withWriteBatchTimeout("datayod")
            .withSinkRetryCount("datawnqbpxy")
            .withSinkRetryWait("dataftxzovbhqels")
            .withMaxConcurrentConnections("datafxejpocsgigsab")
            .withDisableMetricsCollection("datandyjwmglgstrzfhe")
            .withStoreSettings(new StoreWriteSettings().withMaxConcurrentConnections("datadtuhdoimojcm")
                .withDisableMetricsCollection("datacd")
                .withCopyBehavior("datavorzhzfoc")
                .withMetadata(Arrays.asList(new MetadataItem().withName("datatornvbhuyolwifbd").withValue("datavvcyw"),
                    new MetadataItem().withName("datavkthrexzve").withValue("datazyuiklokeqeowb")))
                .withAdditionalProperties(mapOf("type", "StoreWriteSettings")))
            .withFormatSettings(
                new OrcWriteSettings().withMaxRowsPerFile("datatrnniarjezjhy").withFileNamePrefix("dataqf"));
        model = BinaryData.fromObject(model).toObject(OrcSink.class);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
