// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.DataLakeAnalyticsUsqlActivityTypeProperties;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DataLakeAnalyticsUsqlActivityTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DataLakeAnalyticsUsqlActivityTypeProperties model = BinaryData.fromString(
            "{\"scriptPath\":\"dataipnclnbfxme\",\"scriptLinkedService\":{\"referenceName\":\"y\",\"parameters\":{\"bqbwbw\":\"datafrfzghnjaqzdzkyq\"}},\"degreeOfParallelism\":\"datawmmvb\",\"priority\":\"dataftkceyjt\",\"parameters\":{\"pzrcq\":\"dataoxtlqytxft\",\"phkmwbtrqklondbv\":\"datasjqrgtapawp\",\"rbjtjvqdwz\":\"dataqtpebaawzsxp\"},\"runtimeVersion\":\"dataxdgt\",\"compilationMode\":\"dataieqlikyctunfukeh\"}")
            .toObject(DataLakeAnalyticsUsqlActivityTypeProperties.class);
        Assertions.assertEquals("y", model.scriptLinkedService().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DataLakeAnalyticsUsqlActivityTypeProperties model
            = new DataLakeAnalyticsUsqlActivityTypeProperties().withScriptPath("dataipnclnbfxme")
                .withScriptLinkedService(new LinkedServiceReference().withReferenceName("y")
                    .withParameters(mapOf("bqbwbw", "datafrfzghnjaqzdzkyq")))
                .withDegreeOfParallelism("datawmmvb")
                .withPriority("dataftkceyjt")
                .withParameters(mapOf("pzrcq", "dataoxtlqytxft", "phkmwbtrqklondbv", "datasjqrgtapawp", "rbjtjvqdwz",
                    "dataqtpebaawzsxp"))
                .withRuntimeVersion("dataxdgt")
                .withCompilationMode("dataieqlikyctunfukeh");
        model = BinaryData.fromObject(model).toObject(DataLakeAnalyticsUsqlActivityTypeProperties.class);
        Assertions.assertEquals("y", model.scriptLinkedService().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
