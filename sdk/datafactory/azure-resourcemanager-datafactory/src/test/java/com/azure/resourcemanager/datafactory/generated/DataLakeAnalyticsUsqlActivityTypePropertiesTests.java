// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.DataLakeAnalyticsUsqlActivityTypeProperties;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DataLakeAnalyticsUsqlActivityTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DataLakeAnalyticsUsqlActivityTypeProperties model =
            BinaryData
                .fromString(
                    "{\"scriptPath\":\"datalweozccdo\",\"scriptLinkedService\":{\"referenceName\":\"tjnktheh\",\"parameters\":{\"ciklbnroxgwqgbv\":\"datajraeiavdh\"}},\"degreeOfParallelism\":\"datatcbmn\",\"priority\":\"dataozvxdbztwkzfpuw\",\"parameters\":{\"kuviuxtyvpvegxdz\":\"datauixb\",\"zn\":\"datapfkzjxjn\",\"ntqvlktqsb\":\"dataxcjkteu\",\"jiktwfjyl\":\"dataurblbtvsxnaothlr\"},\"runtimeVersion\":\"datamibao\",\"compilationMode\":\"datalbznwegy\"}")
                .toObject(DataLakeAnalyticsUsqlActivityTypeProperties.class);
        Assertions.assertEquals("tjnktheh", model.scriptLinkedService().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DataLakeAnalyticsUsqlActivityTypeProperties model =
            new DataLakeAnalyticsUsqlActivityTypeProperties()
                .withScriptPath("datalweozccdo")
                .withScriptLinkedService(
                    new LinkedServiceReference()
                        .withReferenceName("tjnktheh")
                        .withParameters(mapOf("ciklbnroxgwqgbv", "datajraeiavdh")))
                .withDegreeOfParallelism("datatcbmn")
                .withPriority("dataozvxdbztwkzfpuw")
                .withParameters(
                    mapOf(
                        "kuviuxtyvpvegxdz",
                        "datauixb",
                        "zn",
                        "datapfkzjxjn",
                        "ntqvlktqsb",
                        "dataxcjkteu",
                        "jiktwfjyl",
                        "dataurblbtvsxnaothlr"))
                .withRuntimeVersion("datamibao")
                .withCompilationMode("datalbznwegy");
        model = BinaryData.fromObject(model).toObject(DataLakeAnalyticsUsqlActivityTypeProperties.class);
        Assertions.assertEquals("tjnktheh", model.scriptLinkedService().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
