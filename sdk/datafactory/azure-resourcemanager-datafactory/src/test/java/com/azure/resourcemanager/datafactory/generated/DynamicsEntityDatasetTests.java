// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.DynamicsEntityDataset;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DynamicsEntityDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DynamicsEntityDataset model =
            BinaryData
                .fromString(
                    "{\"type\":\"DynamicsEntity\",\"typeProperties\":{\"entityName\":\"datammtbt\"},\"description\":\"u\",\"structure\":\"datavvraabeurdeewlsu\",\"schema\":\"datacbwkdwjyj\",\"linkedServiceName\":{\"referenceName\":\"zni\",\"parameters\":{\"cr\":\"dataofmftasp\"}},\"parameters\":{\"nuwqxungro\":{\"type\":\"Float\",\"defaultValue\":\"datatrnighm\"}},\"annotations\":[\"datafmsxjwdy\",\"datawxm\"],\"folder\":{\"name\":\"ow\"},\"\":{\"chy\":\"dataeerclbltbhpw\",\"gpruccwme\":\"dataurjwmvwryvdifkii\"}}")
                .toObject(DynamicsEntityDataset.class);
        Assertions.assertEquals("u", model.description());
        Assertions.assertEquals("zni", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.FLOAT, model.parameters().get("nuwqxungro").type());
        Assertions.assertEquals("ow", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DynamicsEntityDataset model =
            new DynamicsEntityDataset()
                .withDescription("u")
                .withStructure("datavvraabeurdeewlsu")
                .withSchema("datacbwkdwjyj")
                .withLinkedServiceName(
                    new LinkedServiceReference().withReferenceName("zni").withParameters(mapOf("cr", "dataofmftasp")))
                .withParameters(
                    mapOf(
                        "nuwqxungro",
                        new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("datatrnighm")))
                .withAnnotations(Arrays.asList("datafmsxjwdy", "datawxm"))
                .withFolder(new DatasetFolder().withName("ow"))
                .withEntityName("datammtbt");
        model = BinaryData.fromObject(model).toObject(DynamicsEntityDataset.class);
        Assertions.assertEquals("u", model.description());
        Assertions.assertEquals("zni", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.FLOAT, model.parameters().get("nuwqxungro").type());
        Assertions.assertEquals("ow", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
