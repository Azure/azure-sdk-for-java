// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.DynamicsEntityDataset;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DynamicsEntityDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DynamicsEntityDataset model = BinaryData.fromString(
            "{\"type\":\"DynamicsEntity\",\"typeProperties\":{\"entityName\":\"datab\"},\"description\":\"cjy\",\"structure\":\"datadcizeqqfop\",\"schema\":\"dataopmotdsf\",\"linkedServiceName\":{\"referenceName\":\"o\",\"parameters\":{\"ldzmxojzsvmaigb\":\"datayoazyfbkm\"}},\"parameters\":{\"ihba\":{\"type\":\"String\",\"defaultValue\":\"dataejthgeecbpergwlc\"},\"jixiujzkc\":{\"type\":\"String\",\"defaultValue\":\"datasokknpugzjwdizc\"},\"w\":{\"type\":\"String\",\"defaultValue\":\"datagkr\"},\"okn\":{\"type\":\"Int\",\"defaultValue\":\"datakkbxktxbbwlmnw\"}},\"annotations\":[\"dataddlggb\",\"dataa\"],\"folder\":{\"name\":\"zubak\"},\"\":{\"ffetp\":\"datavggcmfn\",\"wewzlscgsme\":\"datami\",\"thhx\":\"datanqvxgvohd\"}}")
            .toObject(DynamicsEntityDataset.class);
        Assertions.assertEquals("cjy", model.description());
        Assertions.assertEquals("o", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("ihba").type());
        Assertions.assertEquals("zubak", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DynamicsEntityDataset model
            = new DynamicsEntityDataset().withDescription("cjy")
                .withStructure("datadcizeqqfop")
                .withSchema("dataopmotdsf")
                .withLinkedServiceName(new LinkedServiceReference().withReferenceName("o")
                    .withParameters(mapOf("ldzmxojzsvmaigb", "datayoazyfbkm")))
                .withParameters(mapOf("ihba",
                    new ParameterSpecification().withType(ParameterType.STRING)
                        .withDefaultValue("dataejthgeecbpergwlc"),
                    "jixiujzkc",
                    new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("datasokknpugzjwdizc"),
                    "w", new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("datagkr"), "okn",
                    new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("datakkbxktxbbwlmnw")))
                .withAnnotations(Arrays.asList("dataddlggb", "dataa"))
                .withFolder(new DatasetFolder().withName("zubak"))
                .withEntityName("datab");
        model = BinaryData.fromObject(model).toObject(DynamicsEntityDataset.class);
        Assertions.assertEquals("cjy", model.description());
        Assertions.assertEquals("o", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("ihba").type());
        Assertions.assertEquals("zubak", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
