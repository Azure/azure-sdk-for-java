// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.DynamicsEntityDataset;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DynamicsEntityDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DynamicsEntityDataset model = BinaryData.fromString(
            "{\"type\":\"DynamicsEntity\",\"typeProperties\":{\"entityName\":\"datacucrcm\"},\"description\":\"ixpqj\",\"structure\":\"dataifhb\",\"schema\":\"dataldtt\",\"linkedServiceName\":{\"referenceName\":\"hqclnaihtgs\",\"parameters\":{\"mtrawrqkza\":\"datakvllrhtpmglxkoi\",\"paklw\":\"databun\",\"zltkaszfj\":\"datalweeprne\"}},\"parameters\":{\"pg\":{\"type\":\"Object\",\"defaultValue\":\"datadux\"},\"nwsb\":{\"type\":\"Float\",\"defaultValue\":\"dataebmvrdjom\"},\"esdfedsb\":{\"type\":\"SecureString\",\"defaultValue\":\"datalsflxk\"},\"i\":{\"type\":\"Object\",\"defaultValue\":\"datancoinmphymc\"}},\"annotations\":[\"datatvdhqnufbxwe\",\"datai\",\"datantojovfnybydhuih\"],\"folder\":{\"name\":\"wud\"},\"\":{\"mosqircamqprlob\":\"dataorhjkehwv\",\"gelajdyolje\":\"dataugejcvjkjyczcmt\",\"jkjymgqbgcx\":\"datayxqfmzsizzhravr\",\"lermkmerg\":\"datanqxgz\"}}")
            .toObject(DynamicsEntityDataset.class);
        Assertions.assertEquals("ixpqj", model.description());
        Assertions.assertEquals("hqclnaihtgs", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.OBJECT, model.parameters().get("pg").type());
        Assertions.assertEquals("wud", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DynamicsEntityDataset model = new DynamicsEntityDataset().withDescription("ixpqj")
            .withStructure("dataifhb")
            .withSchema("dataldtt")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("hqclnaihtgs")
                .withParameters(
                    mapOf("mtrawrqkza", "datakvllrhtpmglxkoi", "paklw", "databun", "zltkaszfj", "datalweeprne")))
            .withParameters(mapOf("pg",
                new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("datadux"), "nwsb",
                new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("dataebmvrdjom"),
                "esdfedsb",
                new ParameterSpecification().withType(ParameterType.SECURE_STRING).withDefaultValue("datalsflxk"), "i",
                new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("datancoinmphymc")))
            .withAnnotations(Arrays.asList("datatvdhqnufbxwe", "datai", "datantojovfnybydhuih"))
            .withFolder(new DatasetFolder().withName("wud"))
            .withEntityName("datacucrcm");
        model = BinaryData.fromObject(model).toObject(DynamicsEntityDataset.class);
        Assertions.assertEquals("ixpqj", model.description());
        Assertions.assertEquals("hqclnaihtgs", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.OBJECT, model.parameters().get("pg").type());
        Assertions.assertEquals("wud", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
