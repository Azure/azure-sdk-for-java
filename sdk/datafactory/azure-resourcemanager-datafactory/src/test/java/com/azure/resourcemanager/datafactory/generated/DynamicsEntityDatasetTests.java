// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.DynamicsEntityDataset;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DynamicsEntityDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DynamicsEntityDataset model = BinaryData.fromString(
            "{\"type\":\"itaxju\",\"typeProperties\":{\"entityName\":\"datakitzm\"},\"description\":\"tjlxsgcemegdzdvy\",\"structure\":\"datau\",\"schema\":\"dataf\",\"linkedServiceName\":{\"referenceName\":\"yzufldifnivlutgg\",\"parameters\":{\"oiyygkts\":\"datacxauhvcgzxhklsqx\",\"xxoxwfzbkv\":\"dataj\"}},\"parameters\":{\"snbwutlvuwm\":{\"type\":\"Bool\",\"defaultValue\":\"dataxphsowbe\"}},\"annotations\":[\"dataustihtgrafjajvky\",\"datammjczvog\"],\"folder\":{\"name\":\"rjenn\"},\"\":{\"xnrp\":\"dataaeuwqdwxhhlbmyph\",\"ywbihqbtodjfyx\":\"datahewokyqsfkxf\",\"rugyozzzawnjdv\":\"datavkvwzdmvddqw\"}}")
            .toObject(DynamicsEntityDataset.class);
        Assertions.assertEquals("tjlxsgcemegdzdvy", model.description());
        Assertions.assertEquals("yzufldifnivlutgg", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("snbwutlvuwm").type());
        Assertions.assertEquals("rjenn", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DynamicsEntityDataset model = new DynamicsEntityDataset().withDescription("tjlxsgcemegdzdvy")
            .withStructure("datau")
            .withSchema("dataf")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("yzufldifnivlutgg")
                .withParameters(mapOf("oiyygkts", "datacxauhvcgzxhklsqx", "xxoxwfzbkv", "dataj")))
            .withParameters(mapOf("snbwutlvuwm",
                new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("dataxphsowbe")))
            .withAnnotations(Arrays.asList("dataustihtgrafjajvky", "datammjczvog"))
            .withFolder(new DatasetFolder().withName("rjenn"))
            .withEntityName("datakitzm");
        model = BinaryData.fromObject(model).toObject(DynamicsEntityDataset.class);
        Assertions.assertEquals("tjlxsgcemegdzdvy", model.description());
        Assertions.assertEquals("yzufldifnivlutgg", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("snbwutlvuwm").type());
        Assertions.assertEquals("rjenn", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
