// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DayOfWeek;
import com.azure.resourcemanager.datafactory.models.DaysOfWeek;
import com.azure.resourcemanager.datafactory.models.RecurrenceSchedule;
import com.azure.resourcemanager.datafactory.models.RecurrenceScheduleOccurrence;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class RecurrenceScheduleTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        RecurrenceSchedule model = BinaryData.fromString(
            "{\"minutes\":[1595972014,1433983322],\"hours\":[361140125,2089173549,318625791,687688636],\"weekDays\":[\"Saturday\",\"Saturday\",\"Saturday\"],\"monthDays\":[308225619,1477806779],\"monthlyOccurrences\":[{\"day\":\"Tuesday\",\"occurrence\":456629767,\"\":{\"lvea\":\"datalyoiyovcrmo\",\"ezrajpedowmh\":\"datauz\",\"xnopdeqqf\":\"datazrrikvyu\"}},{\"day\":\"Friday\",\"occurrence\":992003430,\"\":{\"hvpx\":\"datafikiu\",\"mxnjk\":\"datatqbwneilg\",\"llcykihymdguk\":\"dataspnsbbhdjee\",\"oh\":\"datamkqokzvxknygi\"}}],\"\":{\"zchqwnud\":\"dataxjyxhwvnyup\",\"ib\":\"datalazvsmnxblc\",\"eh\":\"datamgfwdxukmeo\",\"rbwvai\":\"datan\"}}")
            .toObject(RecurrenceSchedule.class);
        Assertions.assertEquals(1595972014, model.minutes().get(0));
        Assertions.assertEquals(361140125, model.hours().get(0));
        Assertions.assertEquals(DaysOfWeek.SATURDAY, model.weekDays().get(0));
        Assertions.assertEquals(308225619, model.monthDays().get(0));
        Assertions.assertEquals(DayOfWeek.TUESDAY, model.monthlyOccurrences().get(0).day());
        Assertions.assertEquals(456629767, model.monthlyOccurrences().get(0).occurrence());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        RecurrenceSchedule model = new RecurrenceSchedule().withMinutes(Arrays.asList(1595972014, 1433983322))
            .withHours(Arrays.asList(361140125, 2089173549, 318625791, 687688636))
            .withWeekDays(Arrays.asList(DaysOfWeek.SATURDAY, DaysOfWeek.SATURDAY, DaysOfWeek.SATURDAY))
            .withMonthDays(Arrays.asList(308225619, 1477806779))
            .withMonthlyOccurrences(Arrays.asList(
                new RecurrenceScheduleOccurrence().withDay(DayOfWeek.TUESDAY)
                    .withOccurrence(456629767)
                    .withAdditionalProperties(mapOf()),
                new RecurrenceScheduleOccurrence().withDay(DayOfWeek.FRIDAY)
                    .withOccurrence(992003430)
                    .withAdditionalProperties(mapOf())))
            .withAdditionalProperties(mapOf());
        model = BinaryData.fromObject(model).toObject(RecurrenceSchedule.class);
        Assertions.assertEquals(1595972014, model.minutes().get(0));
        Assertions.assertEquals(361140125, model.hours().get(0));
        Assertions.assertEquals(DaysOfWeek.SATURDAY, model.weekDays().get(0));
        Assertions.assertEquals(308225619, model.monthDays().get(0));
        Assertions.assertEquals(DayOfWeek.TUESDAY, model.monthlyOccurrences().get(0).day());
        Assertions.assertEquals(456629767, model.monthlyOccurrences().get(0).occurrence());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
