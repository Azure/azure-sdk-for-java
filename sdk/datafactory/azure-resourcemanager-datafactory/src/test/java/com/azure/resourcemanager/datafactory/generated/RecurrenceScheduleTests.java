// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DayOfWeek;
import com.azure.resourcemanager.datafactory.models.DaysOfWeek;
import com.azure.resourcemanager.datafactory.models.RecurrenceSchedule;
import com.azure.resourcemanager.datafactory.models.RecurrenceScheduleOccurrence;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class RecurrenceScheduleTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        RecurrenceSchedule model = BinaryData.fromString(
            "{\"minutes\":[1084855348,1703489869,2077722094],\"hours\":[479973707],\"weekDays\":[\"Thursday\",\"Monday\",\"Monday\"],\"monthDays\":[1682107136,85333768],\"monthlyOccurrences\":[{\"day\":\"Friday\",\"occurrence\":257877485,\"\":{\"wjrpl\":\"dataiihabojargetncfl\",\"naeefzlwohobaac\":\"datakcqe\",\"noeiqhbr\":\"dataglvixfl\",\"kpbrr\":\"datacgmyjmcw\"}}],\"\":{\"rsandmusud\":\"datavinkkteblrn\",\"mikfdifbeottvio\":\"datajoshmmzotcpf\",\"va\":\"datanejpjzqbdutvnlo\"}}")
            .toObject(RecurrenceSchedule.class);
        Assertions.assertEquals(1084855348, model.minutes().get(0));
        Assertions.assertEquals(479973707, model.hours().get(0));
        Assertions.assertEquals(DaysOfWeek.THURSDAY, model.weekDays().get(0));
        Assertions.assertEquals(1682107136, model.monthDays().get(0));
        Assertions.assertEquals(DayOfWeek.FRIDAY, model.monthlyOccurrences().get(0).day());
        Assertions.assertEquals(257877485, model.monthlyOccurrences().get(0).occurrence());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        RecurrenceSchedule model
            = new RecurrenceSchedule().withMinutes(Arrays.asList(1084855348, 1703489869, 2077722094))
                .withHours(Arrays.asList(479973707))
                .withWeekDays(Arrays.asList(DaysOfWeek.THURSDAY, DaysOfWeek.MONDAY, DaysOfWeek.MONDAY))
                .withMonthDays(Arrays.asList(1682107136, 85333768))
                .withMonthlyOccurrences(Arrays.asList(new RecurrenceScheduleOccurrence().withDay(DayOfWeek.FRIDAY)
                    .withOccurrence(257877485)
                    .withAdditionalProperties(mapOf())))
                .withAdditionalProperties(mapOf());
        model = BinaryData.fromObject(model).toObject(RecurrenceSchedule.class);
        Assertions.assertEquals(1084855348, model.minutes().get(0));
        Assertions.assertEquals(479973707, model.hours().get(0));
        Assertions.assertEquals(DaysOfWeek.THURSDAY, model.weekDays().get(0));
        Assertions.assertEquals(1682107136, model.monthDays().get(0));
        Assertions.assertEquals(DayOfWeek.FRIDAY, model.monthlyOccurrences().get(0).day());
        Assertions.assertEquals(257877485, model.monthlyOccurrences().get(0).occurrence());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
