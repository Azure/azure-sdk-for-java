// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DayOfWeek;
import com.azure.resourcemanager.datafactory.models.DaysOfWeek;
import com.azure.resourcemanager.datafactory.models.RecurrenceSchedule;
import com.azure.resourcemanager.datafactory.models.RecurrenceScheduleOccurrence;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class RecurrenceScheduleTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        RecurrenceSchedule model = BinaryData.fromString(
            "{\"minutes\":[838577333,1015295902,1361107137,935311628],\"hours\":[42721077,250190456,1152116541,561427787],\"weekDays\":[\"Wednesday\",\"Sunday\",\"Sunday\"],\"monthDays\":[1433827538,1439724963,1228605740],\"monthlyOccurrences\":[{\"day\":\"Monday\",\"occurrence\":1026545552,\"\":{\"zywxzxrohtqc\":\"dataeeuligunwyfkucv\",\"xdeaisk\":\"dataidspe\",\"yjnmdc\":\"datacmcqslngmsip\",\"cxacgeiyfpfaaah\":\"datatj\"}}],\"\":{\"pqgcadntzfjldnv\":\"datauplf\",\"oygcofh\":\"datapmez\",\"bgmxm\":\"datanehhi\",\"wuwbnngcdtxxyz\":\"dataxbaazn\"}}")
            .toObject(RecurrenceSchedule.class);
        Assertions.assertEquals(838577333, model.minutes().get(0));
        Assertions.assertEquals(42721077, model.hours().get(0));
        Assertions.assertEquals(DaysOfWeek.WEDNESDAY, model.weekDays().get(0));
        Assertions.assertEquals(1433827538, model.monthDays().get(0));
        Assertions.assertEquals(DayOfWeek.MONDAY, model.monthlyOccurrences().get(0).day());
        Assertions.assertEquals(1026545552, model.monthlyOccurrences().get(0).occurrence());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        RecurrenceSchedule model
            = new RecurrenceSchedule().withMinutes(Arrays.asList(838577333, 1015295902, 1361107137, 935311628))
                .withHours(Arrays.asList(42721077, 250190456, 1152116541, 561427787))
                .withWeekDays(Arrays.asList(DaysOfWeek.WEDNESDAY, DaysOfWeek.SUNDAY, DaysOfWeek.SUNDAY))
                .withMonthDays(Arrays.asList(1433827538, 1439724963, 1228605740))
                .withMonthlyOccurrences(Arrays.asList(new RecurrenceScheduleOccurrence().withDay(DayOfWeek.MONDAY)
                    .withOccurrence(1026545552).withAdditionalProperties(mapOf())))
                .withAdditionalProperties(mapOf());
        model = BinaryData.fromObject(model).toObject(RecurrenceSchedule.class);
        Assertions.assertEquals(838577333, model.minutes().get(0));
        Assertions.assertEquals(42721077, model.hours().get(0));
        Assertions.assertEquals(DaysOfWeek.WEDNESDAY, model.weekDays().get(0));
        Assertions.assertEquals(1433827538, model.monthDays().get(0));
        Assertions.assertEquals(DayOfWeek.MONDAY, model.monthlyOccurrences().get(0).day());
        Assertions.assertEquals(1026545552, model.monthlyOccurrences().get(0).occurrence());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
