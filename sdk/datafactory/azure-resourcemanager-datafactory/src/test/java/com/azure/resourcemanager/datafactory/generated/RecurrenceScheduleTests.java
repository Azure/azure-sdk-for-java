// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DayOfWeek;
import com.azure.resourcemanager.datafactory.models.DaysOfWeek;
import com.azure.resourcemanager.datafactory.models.RecurrenceSchedule;
import com.azure.resourcemanager.datafactory.models.RecurrenceScheduleOccurrence;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class RecurrenceScheduleTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        RecurrenceSchedule model = BinaryData.fromString(
            "{\"minutes\":[375537031,1717718914,372186737,1764050808],\"hours\":[262504222,1587118023,325450941,810878790],\"weekDays\":[\"Wednesday\"],\"monthDays\":[1241874594],\"monthlyOccurrences\":[{\"day\":\"Thursday\",\"occurrence\":514886352,\"\":{\"hxphuplfopqgcadn\":\"datayfpfaa\",\"oygcofh\":\"datazfjldnvfpmez\"}},{\"day\":\"Wednesday\",\"occurrence\":404410098,\"\":{\"xbaazn\":\"databgmxm\",\"ybndiqpadhrij\":\"datawuwbnngcdtxxyz\",\"lqsfpctqgrnb\":\"datauqtjcyllpas\",\"vcabchdzx\":\"datajdefsqunernbd\"}},{\"day\":\"Wednesday\",\"occurrence\":1181308151,\"\":{\"mnfavllbskl\":\"dataaadcz\",\"kcea\":\"dataakkihxpofv\",\"vawbt\":\"dataorppzb\",\"egknaec\":\"datavq\"}},{\"day\":\"Tuesday\",\"occurrence\":1250228809,\"\":{\"dswhbsej\":\"dataqocdrjguhsjlroa\",\"yjtollugzsvzi\":\"datauboyrf\"}}],\"\":{\"llmutwmarfbszlp\":\"datasbdaudsvdb\",\"czrd\":\"datax\",\"mkw\":\"databeb\"}}")
            .toObject(RecurrenceSchedule.class);
        Assertions.assertEquals(375537031, model.minutes().get(0));
        Assertions.assertEquals(262504222, model.hours().get(0));
        Assertions.assertEquals(DaysOfWeek.WEDNESDAY, model.weekDays().get(0));
        Assertions.assertEquals(1241874594, model.monthDays().get(0));
        Assertions.assertEquals(DayOfWeek.THURSDAY, model.monthlyOccurrences().get(0).day());
        Assertions.assertEquals(514886352, model.monthlyOccurrences().get(0).occurrence());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        RecurrenceSchedule model
            = new RecurrenceSchedule().withMinutes(Arrays.asList(375537031, 1717718914, 372186737, 1764050808))
                .withHours(Arrays.asList(262504222, 1587118023, 325450941, 810878790))
                .withWeekDays(Arrays.asList(DaysOfWeek.WEDNESDAY))
                .withMonthDays(Arrays.asList(1241874594))
                .withMonthlyOccurrences(Arrays.asList(
                    new RecurrenceScheduleOccurrence().withDay(DayOfWeek.THURSDAY)
                        .withOccurrence(514886352)
                        .withAdditionalProperties(mapOf()),
                    new RecurrenceScheduleOccurrence().withDay(DayOfWeek.WEDNESDAY)
                        .withOccurrence(404410098)
                        .withAdditionalProperties(mapOf()),
                    new RecurrenceScheduleOccurrence().withDay(DayOfWeek.WEDNESDAY)
                        .withOccurrence(1181308151)
                        .withAdditionalProperties(mapOf()),
                    new RecurrenceScheduleOccurrence().withDay(DayOfWeek.TUESDAY)
                        .withOccurrence(1250228809)
                        .withAdditionalProperties(mapOf())))
                .withAdditionalProperties(mapOf());
        model = BinaryData.fromObject(model).toObject(RecurrenceSchedule.class);
        Assertions.assertEquals(375537031, model.minutes().get(0));
        Assertions.assertEquals(262504222, model.hours().get(0));
        Assertions.assertEquals(DaysOfWeek.WEDNESDAY, model.weekDays().get(0));
        Assertions.assertEquals(1241874594, model.monthDays().get(0));
        Assertions.assertEquals(DayOfWeek.THURSDAY, model.monthlyOccurrences().get(0).day());
        Assertions.assertEquals(514886352, model.monthlyOccurrences().get(0).occurrence());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
