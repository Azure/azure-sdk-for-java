// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DayOfWeek;
import com.azure.resourcemanager.datafactory.models.DaysOfWeek;
import com.azure.resourcemanager.datafactory.models.RecurrenceSchedule;
import com.azure.resourcemanager.datafactory.models.RecurrenceScheduleOccurrence;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class RecurrenceScheduleTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        RecurrenceSchedule model = BinaryData.fromString(
            "{\"minutes\":[855765251,1655443106,2090510823,1836359328],\"hours\":[879333962,787747970,349030599,462374271],\"weekDays\":[\"Thursday\"],\"monthDays\":[199972520,1755547689,554487281,722555937],\"monthlyOccurrences\":[{\"day\":\"Wednesday\",\"occurrence\":1575003480,\"\":{\"rysgabhpfpv\":\"datahgiglkin\",\"jcckhgstohzvrq\":\"datady\"}},{\"day\":\"Friday\",\"occurrence\":2031325920,\"\":{\"u\":\"datafhduniqumpspo\"}},{\"day\":\"Friday\",\"occurrence\":1890860893,\"\":{\"iqzfjlprljilpua\":\"datagkdwvtmmvq\",\"kfxzgopckmmagfbr\":\"dataxidytj\",\"ryourl\":\"datayvrlycikwqtlg\",\"jvsqzchysqy\":\"dataw\"}}],\"\":{\"pqfxyywsxrxv\":\"dataqmikljczxotblx\",\"yijyzhmfuksqi\":\"datavwkzaqqk\"}}")
            .toObject(RecurrenceSchedule.class);
        Assertions.assertEquals(855765251, model.minutes().get(0));
        Assertions.assertEquals(879333962, model.hours().get(0));
        Assertions.assertEquals(DaysOfWeek.THURSDAY, model.weekDays().get(0));
        Assertions.assertEquals(199972520, model.monthDays().get(0));
        Assertions.assertEquals(DayOfWeek.WEDNESDAY, model.monthlyOccurrences().get(0).day());
        Assertions.assertEquals(1575003480, model.monthlyOccurrences().get(0).occurrence());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        RecurrenceSchedule model
            = new RecurrenceSchedule().withMinutes(Arrays.asList(855765251, 1655443106, 2090510823, 1836359328))
                .withHours(Arrays.asList(879333962, 787747970, 349030599, 462374271))
                .withWeekDays(Arrays.asList(DaysOfWeek.THURSDAY))
                .withMonthDays(Arrays.asList(199972520, 1755547689, 554487281, 722555937))
                .withMonthlyOccurrences(Arrays.asList(
                    new RecurrenceScheduleOccurrence().withDay(DayOfWeek.WEDNESDAY)
                        .withOccurrence(1575003480)
                        .withAdditionalProperties(mapOf()),
                    new RecurrenceScheduleOccurrence().withDay(DayOfWeek.FRIDAY)
                        .withOccurrence(2031325920)
                        .withAdditionalProperties(mapOf()),
                    new RecurrenceScheduleOccurrence().withDay(DayOfWeek.FRIDAY)
                        .withOccurrence(1890860893)
                        .withAdditionalProperties(mapOf())))
                .withAdditionalProperties(mapOf());
        model = BinaryData.fromObject(model).toObject(RecurrenceSchedule.class);
        Assertions.assertEquals(855765251, model.minutes().get(0));
        Assertions.assertEquals(879333962, model.hours().get(0));
        Assertions.assertEquals(DaysOfWeek.THURSDAY, model.weekDays().get(0));
        Assertions.assertEquals(199972520, model.monthDays().get(0));
        Assertions.assertEquals(DayOfWeek.WEDNESDAY, model.monthlyOccurrences().get(0).day());
        Assertions.assertEquals(1575003480, model.monthlyOccurrences().get(0).occurrence());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
