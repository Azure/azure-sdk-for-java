// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DayOfWeek;
import com.azure.resourcemanager.datafactory.models.DaysOfWeek;
import com.azure.resourcemanager.datafactory.models.RecurrenceSchedule;
import com.azure.resourcemanager.datafactory.models.RecurrenceScheduleOccurrence;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class RecurrenceScheduleTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        RecurrenceSchedule model = BinaryData.fromString(
            "{\"minutes\":[1911277150],\"hours\":[696989868,1734952040,620096548],\"weekDays\":[\"Thursday\",\"Tuesday\",\"Sunday\",\"Monday\"],\"monthDays\":[1999704139,1204825517,1970111194],\"monthlyOccurrences\":[{\"day\":\"Friday\",\"occurrence\":1269070866,\"\":{\"diiiutdzhkb\":\"datarvwgpj\",\"ydzqml\":\"dataouavotfmgtxz\",\"znxd\":\"datarxjqpbbj\"}}],\"\":{\"jirtiubvyudk\":\"dataaaumyu\",\"msexaejb\":\"dataonrrarznlr\",\"xiigwxzwq\":\"datatouneudfhclsse\",\"aedsqfdulndy\":\"datapudupishcvsj\"}}")
            .toObject(RecurrenceSchedule.class);
        Assertions.assertEquals(1911277150, model.minutes().get(0));
        Assertions.assertEquals(696989868, model.hours().get(0));
        Assertions.assertEquals(DaysOfWeek.THURSDAY, model.weekDays().get(0));
        Assertions.assertEquals(1999704139, model.monthDays().get(0));
        Assertions.assertEquals(DayOfWeek.FRIDAY, model.monthlyOccurrences().get(0).day());
        Assertions.assertEquals(1269070866, model.monthlyOccurrences().get(0).occurrence());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        RecurrenceSchedule model = new RecurrenceSchedule().withMinutes(Arrays.asList(1911277150))
            .withHours(Arrays.asList(696989868, 1734952040, 620096548))
            .withWeekDays(Arrays.asList(DaysOfWeek.THURSDAY, DaysOfWeek.TUESDAY, DaysOfWeek.SUNDAY, DaysOfWeek.MONDAY))
            .withMonthDays(Arrays.asList(1999704139, 1204825517, 1970111194))
            .withMonthlyOccurrences(Arrays.asList(new RecurrenceScheduleOccurrence().withDay(DayOfWeek.FRIDAY)
                .withOccurrence(1269070866)
                .withAdditionalProperties(mapOf())))
            .withAdditionalProperties(mapOf());
        model = BinaryData.fromObject(model).toObject(RecurrenceSchedule.class);
        Assertions.assertEquals(1911277150, model.minutes().get(0));
        Assertions.assertEquals(696989868, model.hours().get(0));
        Assertions.assertEquals(DaysOfWeek.THURSDAY, model.weekDays().get(0));
        Assertions.assertEquals(1999704139, model.monthDays().get(0));
        Assertions.assertEquals(DayOfWeek.FRIDAY, model.monthlyOccurrences().get(0).day());
        Assertions.assertEquals(1269070866, model.monthlyOccurrences().get(0).occurrence());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
