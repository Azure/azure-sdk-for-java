// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DayOfWeek;
import com.azure.resourcemanager.datafactory.models.DaysOfWeek;
import com.azure.resourcemanager.datafactory.models.RecurrenceSchedule;
import com.azure.resourcemanager.datafactory.models.RecurrenceScheduleOccurrence;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class RecurrenceScheduleTests {
    @Test
    public void testDeserialize() {
        RecurrenceSchedule model =
            BinaryData
                .fromString(
                    "{\"minutes\":[835835875],\"hours\":[467110750,2099170935,1159132618,1873275845],\"weekDays\":[\"Friday\",\"Saturday\"],\"monthDays\":[635232448],\"monthlyOccurrences\":[{\"day\":\"Wednesday\",\"occurrence\":1115501689,\"\":{}},{\"day\":\"Tuesday\",\"occurrence\":1170962395,\"\":{}},{\"day\":\"Sunday\",\"occurrence\":2140204926,\"\":{}}],\"\":{}}")
                .toObject(RecurrenceSchedule.class);
        Assertions.assertEquals(835835875, model.minutes().get(0));
        Assertions.assertEquals(467110750, model.hours().get(0));
        Assertions.assertEquals(DaysOfWeek.FRIDAY, model.weekDays().get(0));
        Assertions.assertEquals(635232448, model.monthDays().get(0));
        Assertions.assertEquals(DayOfWeek.WEDNESDAY, model.monthlyOccurrences().get(0).day());
        Assertions.assertEquals(1115501689, model.monthlyOccurrences().get(0).occurrence());
    }

    @Test
    public void testSerialize() {
        RecurrenceSchedule model =
            new RecurrenceSchedule()
                .withMinutes(Arrays.asList(835835875))
                .withHours(Arrays.asList(467110750, 2099170935, 1159132618, 1873275845))
                .withWeekDays(Arrays.asList(DaysOfWeek.FRIDAY, DaysOfWeek.SATURDAY))
                .withMonthDays(Arrays.asList(635232448))
                .withMonthlyOccurrences(
                    Arrays
                        .asList(
                            new RecurrenceScheduleOccurrence()
                                .withDay(DayOfWeek.WEDNESDAY)
                                .withOccurrence(1115501689)
                                .withAdditionalProperties(mapOf()),
                            new RecurrenceScheduleOccurrence()
                                .withDay(DayOfWeek.TUESDAY)
                                .withOccurrence(1170962395)
                                .withAdditionalProperties(mapOf()),
                            new RecurrenceScheduleOccurrence()
                                .withDay(DayOfWeek.SUNDAY)
                                .withOccurrence(2140204926)
                                .withAdditionalProperties(mapOf())))
                .withAdditionalProperties(mapOf());
        model = BinaryData.fromObject(model).toObject(RecurrenceSchedule.class);
        Assertions.assertEquals(835835875, model.minutes().get(0));
        Assertions.assertEquals(467110750, model.hours().get(0));
        Assertions.assertEquals(DaysOfWeek.FRIDAY, model.weekDays().get(0));
        Assertions.assertEquals(635232448, model.monthDays().get(0));
        Assertions.assertEquals(DayOfWeek.WEDNESDAY, model.monthlyOccurrences().get(0).day());
        Assertions.assertEquals(1115501689, model.monthlyOccurrences().get(0).occurrence());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
