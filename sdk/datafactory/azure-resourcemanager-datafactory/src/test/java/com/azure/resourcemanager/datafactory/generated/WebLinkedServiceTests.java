// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.WebLinkedService;
import com.azure.resourcemanager.datafactory.models.WebLinkedServiceTypeProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class WebLinkedServiceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WebLinkedService model = BinaryData.fromString(
            "{\"type\":\"Web\",\"typeProperties\":{\"authenticationType\":\"WebLinkedServiceTypeProperties\",\"url\":\"datakhmsobu\"},\"version\":\"okiclrmmudvo\",\"connectVia\":{\"referenceName\":\"bscidkwznw\",\"parameters\":{\"ybcppdvuotkvk\":\"dataizdoysmzgbogdjw\"}},\"description\":\"mkupbnkcwauyl\",\"parameters\":{\"afqzylempah\":{\"type\":\"SecureString\",\"defaultValue\":\"datarpyfrtlu\"},\"pwrnhqaf\":{\"type\":\"Array\",\"defaultValue\":\"dataxeikeo\"}},\"annotations\":[\"dataysp\",\"datajkxgfmesxjeqqfy\",\"datav\",\"datakxtanlvoorv\"],\"\":{\"tps\":\"datancqcu\",\"egxlzd\":\"datagqlnolspvxp\",\"smnwsffia\":\"dataatptzkmfvdrkcw\"}}")
            .toObject(WebLinkedService.class);
        Assertions.assertEquals("okiclrmmudvo", model.version());
        Assertions.assertEquals("bscidkwznw", model.connectVia().referenceName());
        Assertions.assertEquals("mkupbnkcwauyl", model.description());
        Assertions.assertEquals(ParameterType.SECURE_STRING, model.parameters().get("afqzylempah").type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WebLinkedService model = new WebLinkedService().withVersion("okiclrmmudvo")
            .withConnectVia(new IntegrationRuntimeReference().withReferenceName("bscidkwznw")
                .withParameters(mapOf("ybcppdvuotkvk", "dataizdoysmzgbogdjw")))
            .withDescription("mkupbnkcwauyl")
            .withParameters(mapOf("afqzylempah",
                new ParameterSpecification().withType(ParameterType.SECURE_STRING).withDefaultValue("datarpyfrtlu"),
                "pwrnhqaf", new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("dataxeikeo")))
            .withAnnotations(Arrays.asList("dataysp", "datajkxgfmesxjeqqfy", "datav", "datakxtanlvoorv"))
            .withTypeProperties(new WebLinkedServiceTypeProperties().withUrl("datakhmsobu"));
        model = BinaryData.fromObject(model).toObject(WebLinkedService.class);
        Assertions.assertEquals("okiclrmmudvo", model.version());
        Assertions.assertEquals("bscidkwznw", model.connectVia().referenceName());
        Assertions.assertEquals("mkupbnkcwauyl", model.description());
        Assertions.assertEquals(ParameterType.SECURE_STRING, model.parameters().get("afqzylempah").type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
