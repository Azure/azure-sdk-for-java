// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.WebLinkedService;
import com.azure.resourcemanager.datafactory.models.WebLinkedServiceTypeProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class WebLinkedServiceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WebLinkedService model = BinaryData.fromString(
            "{\"type\":\"Web\",\"typeProperties\":{\"authenticationType\":\"WebLinkedServiceTypeProperties\",\"url\":\"databkeeohpfedx\"},\"connectVia\":{\"referenceName\":\"judekmxhwz\",\"parameters\":{\"ztu\":\"datacdfdxthq\",\"edijdhzkwvuewe\":\"datair\"}},\"description\":\"ajelswlxdknxctg\",\"parameters\":{\"igyi\":{\"type\":\"Float\",\"defaultValue\":\"datadfsg\"},\"c\":{\"type\":\"String\",\"defaultValue\":\"datajudxzfvna\"}},\"annotations\":[\"datahnqiyevjehts\",\"dataaoxxsehf\",\"datafmabpyzxc\",\"datalphfstvurtkc\"],\"\":{\"disxsrrhr\":\"datavaxwzbwxx\",\"jzzuimpiybmybtih\":\"datarbbedrn\",\"uvqqo\":\"datagxmfbik\"}}")
            .toObject(WebLinkedService.class);
        Assertions.assertEquals("judekmxhwz", model.connectVia().referenceName());
        Assertions.assertEquals("ajelswlxdknxctg", model.description());
        Assertions.assertEquals(ParameterType.FLOAT, model.parameters().get("igyi").type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WebLinkedService model
            = new WebLinkedService()
                .withConnectVia(new IntegrationRuntimeReference().withReferenceName("judekmxhwz")
                    .withParameters(mapOf("ztu", "datacdfdxthq", "edijdhzkwvuewe", "datair")))
                .withDescription("ajelswlxdknxctg")
                .withParameters(mapOf("igyi",
                    new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("datadfsg"), "c",
                    new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("datajudxzfvna")))
                .withAnnotations(Arrays.asList("datahnqiyevjehts", "dataaoxxsehf", "datafmabpyzxc", "datalphfstvurtkc"))
                .withTypeProperties(new WebLinkedServiceTypeProperties().withUrl("databkeeohpfedx"));
        model = BinaryData.fromObject(model).toObject(WebLinkedService.class);
        Assertions.assertEquals("judekmxhwz", model.connectVia().referenceName());
        Assertions.assertEquals("ajelswlxdknxctg", model.description());
        Assertions.assertEquals(ParameterType.FLOAT, model.parameters().get("igyi").type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
