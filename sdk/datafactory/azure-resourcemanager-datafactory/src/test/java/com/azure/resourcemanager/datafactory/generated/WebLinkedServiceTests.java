// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.WebLinkedService;
import com.azure.resourcemanager.datafactory.models.WebLinkedServiceTypeProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class WebLinkedServiceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WebLinkedService model = BinaryData.fromString(
            "{\"type\":\"Web\",\"typeProperties\":{\"authenticationType\":\"WebLinkedServiceTypeProperties\",\"url\":\"dataalkqlvbkz\"},\"connectVia\":{\"referenceName\":\"yrnww\",\"parameters\":{\"crigbjbelnqalbs\":\"datainiyoizuww\",\"bwxuypcuriwll\":\"dataqxajsiueaibqjbi\",\"lwjxrymiysgh\":\"datatclveqdqtzsh\",\"vdulmka\":\"datacmqdlkkwbdek\"}},\"description\":\"n\",\"parameters\":{\"fvoz\":{\"type\":\"Float\",\"defaultValue\":\"datatpialrqhwcxxccf\"},\"nosclujywwumbus\":{\"type\":\"SecureString\",\"defaultValue\":\"datavrexitpzri\"},\"uahokiclrmmudv\":{\"type\":\"Array\",\"defaultValue\":\"databncljkhmso\"},\"tlizdoys\":{\"type\":\"Array\",\"defaultValue\":\"databscidkwznw\"}},\"annotations\":[\"databogdj\",\"datauybcp\",\"datadvuotkvkbpmk\",\"datapbnkcwauylkbdsk\"],\"\":{\"zylemp\":\"datafrtlukaf\",\"npw\":\"datahyuxxeike\"}}")
            .toObject(WebLinkedService.class);
        Assertions.assertEquals("yrnww", model.connectVia().referenceName());
        Assertions.assertEquals("n", model.description());
        Assertions.assertEquals(ParameterType.FLOAT, model.parameters().get("fvoz").type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WebLinkedService model
            = new WebLinkedService()
                .withConnectVia(new IntegrationRuntimeReference().withReferenceName("yrnww")
                    .withParameters(mapOf("crigbjbelnqalbs", "datainiyoizuww", "bwxuypcuriwll", "dataqxajsiueaibqjbi",
                        "lwjxrymiysgh", "datatclveqdqtzsh", "vdulmka", "datacmqdlkkwbdek")))
                .withDescription("n")
                .withParameters(mapOf("fvoz",
                    new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("datatpialrqhwcxxccf"),
                    "nosclujywwumbus",
                    new ParameterSpecification().withType(ParameterType.SECURE_STRING)
                        .withDefaultValue("datavrexitpzri"),
                    "uahokiclrmmudv",
                    new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("databncljkhmso"),
                    "tlizdoys",
                    new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("databscidkwznw")))
                .withAnnotations(Arrays.asList("databogdj", "datauybcp", "datadvuotkvkbpmk", "datapbnkcwauylkbdsk"))
                .withTypeProperties(new WebLinkedServiceTypeProperties().withUrl("dataalkqlvbkz"));
        model = BinaryData.fromObject(model).toObject(WebLinkedService.class);
        Assertions.assertEquals("yrnww", model.connectVia().referenceName());
        Assertions.assertEquals("n", model.description());
        Assertions.assertEquals(ParameterType.FLOAT, model.parameters().get("fvoz").type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
