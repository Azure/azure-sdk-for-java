// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.HDInsightActivityDebugInfoOption;
import com.azure.resourcemanager.datafactory.models.HDInsightPigActivity;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class HDInsightPigActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HDInsightPigActivity model = BinaryData.fromString(
            "{\"type\":\"HDInsightPig\",\"typeProperties\":{\"storageLinkedServices\":[{\"referenceName\":\"eyliisatbs\",\"parameters\":{\"vqvernqk\":\"datakdcufzxxqdntv\",\"tjoxwugdzwoczf\":\"dataiyyys\",\"z\":\"datazfcmpd\",\"ykxlfl\":\"datadwoevmocnfzmu\"}},{\"referenceName\":\"luwuns\",\"parameters\":{\"vnb\":\"datapmn\",\"zclilzveisdnobxc\":\"datagpomcrevt\"}},{\"referenceName\":\"xpnraeo\",\"parameters\":{\"zfjsfr\":\"dataoflxvsuhxrctc\",\"qcbrrwbcycwasm\":\"datajr\",\"fyle\":\"datafbwsicmhhvbovbl\"}}],\"arguments\":\"datadp\",\"getDebugInfo\":\"None\",\"scriptPath\":\"dataemny\",\"scriptLinkedService\":{\"referenceName\":\"zsououezszlr\",\"parameters\":{\"pkxprbutyjfhjh\":\"dataldgiij\",\"ljkqlruhhk\":\"datav\"}},\"defines\":{\"pdredcvwsbsdy\":\"datagrmscbmdrbtgm\",\"hgnfaanubjeb\":\"dataqjyrqouyfcfdedeu\"}},\"linkedServiceName\":{\"referenceName\":\"lksghsowmv\",\"parameters\":{\"fbjhhpfj\":\"datadhw\"}},\"policy\":{\"timeout\":\"datal\",\"retry\":\"datawavdope\",\"retryIntervalInSeconds\":1352125106,\"secureInput\":false,\"secureOutput\":true,\"\":{\"ijgrbitudwuo\":\"datal\",\"okxphcj\":\"datairzilu\"}},\"name\":\"whwgbajmgctwamjj\",\"description\":\"mugis\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"opedmk\",\"dependencyConditions\":[\"Failed\",\"Skipped\"],\"\":{\"tgfbmocvblrvkqx\":\"datagf\",\"rcqpxaajt\":\"datakhj\"}},{\"activity\":\"yrqtu\",\"dependencyConditions\":[\"Succeeded\",\"Completed\",\"Failed\",\"Failed\"],\"\":{\"vlj\":\"datagspazmxss\"}},{\"activity\":\"atbecuh\",\"dependencyConditions\":[\"Succeeded\",\"Failed\"],\"\":{\"jlqtjjewezcknpm\":\"datawgzaou\",\"joldwa\":\"datavahqjdi\"}},{\"activity\":\"ehudicxolmmhfd\",\"dependencyConditions\":[\"Completed\",\"Skipped\"],\"\":{\"qvmp\":\"databm\",\"ripopzydespwwkd\":\"datacjvog\",\"jq\":\"datasnezdu\",\"bqmelmqkbepie\":\"datahrgwy\"}}],\"userProperties\":[{\"name\":\"ea\",\"value\":\"datargujbrnlbfnup\"}],\"\":{\"fkjboy\":\"dataksknst\",\"mztcxyphdkxwstab\":\"datag\",\"dgwezc\":\"dataejopvegmtgoeayho\"}}")
            .toObject(HDInsightPigActivity.class);
        Assertions.assertEquals("whwgbajmgctwamjj", model.name());
        Assertions.assertEquals("mugis", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("opedmk", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("ea", model.userProperties().get(0).name());
        Assertions.assertEquals("lksghsowmv", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1352125106, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals("eyliisatbs", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.NONE, model.getDebugInfo());
        Assertions.assertEquals("zsououezszlr", model.scriptLinkedService().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HDInsightPigActivity model
            = new HDInsightPigActivity().withName("whwgbajmgctwamjj")
                .withDescription("mugis")
                .withState(ActivityState.INACTIVE)
                .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
                .withDependsOn(Arrays.asList(
                    new ActivityDependency().withActivity("opedmk")
                        .withDependencyConditions(
                            Arrays.asList(DependencyCondition.FAILED, DependencyCondition.SKIPPED))
                        .withAdditionalProperties(mapOf()),
                    new ActivityDependency().withActivity("yrqtu")
                        .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED,
                            DependencyCondition.COMPLETED, DependencyCondition.FAILED, DependencyCondition.FAILED))
                        .withAdditionalProperties(mapOf()),
                    new ActivityDependency().withActivity("atbecuh")
                        .withDependencyConditions(
                            Arrays.asList(DependencyCondition.SUCCEEDED, DependencyCondition.FAILED))
                        .withAdditionalProperties(mapOf()),
                    new ActivityDependency().withActivity("ehudicxolmmhfd")
                        .withDependencyConditions(
                            Arrays.asList(DependencyCondition.COMPLETED, DependencyCondition.SKIPPED))
                        .withAdditionalProperties(mapOf())))
                .withUserProperties(Arrays.asList(new UserProperty().withName("ea").withValue("datargujbrnlbfnup")))
                .withLinkedServiceName(new LinkedServiceReference().withReferenceName("lksghsowmv")
                    .withParameters(mapOf("fbjhhpfj", "datadhw")))
                .withPolicy(new ActivityPolicy().withTimeout("datal")
                    .withRetry("datawavdope")
                    .withRetryIntervalInSeconds(1352125106)
                    .withSecureInput(false)
                    .withSecureOutput(true)
                    .withAdditionalProperties(mapOf()))
                .withStorageLinkedServices(Arrays.asList(
                    new LinkedServiceReference().withReferenceName("eyliisatbs")
                        .withParameters(mapOf("vqvernqk", "datakdcufzxxqdntv", "tjoxwugdzwoczf", "dataiyyys", "z",
                            "datazfcmpd", "ykxlfl", "datadwoevmocnfzmu")),
                    new LinkedServiceReference().withReferenceName("luwuns")
                        .withParameters(mapOf("vnb", "datapmn", "zclilzveisdnobxc", "datagpomcrevt")),
                    new LinkedServiceReference().withReferenceName("xpnraeo")
                        .withParameters(mapOf("zfjsfr", "dataoflxvsuhxrctc", "qcbrrwbcycwasm", "datajr", "fyle",
                            "datafbwsicmhhvbovbl"))))
                .withArguments("datadp")
                .withGetDebugInfo(HDInsightActivityDebugInfoOption.NONE)
                .withScriptPath("dataemny")
                .withScriptLinkedService(new LinkedServiceReference().withReferenceName("zsououezszlr")
                    .withParameters(mapOf("pkxprbutyjfhjh", "dataldgiij", "ljkqlruhhk", "datav")))
                .withDefines(mapOf("pdredcvwsbsdy", "datagrmscbmdrbtgm", "hgnfaanubjeb", "dataqjyrqouyfcfdedeu"));
        model = BinaryData.fromObject(model).toObject(HDInsightPigActivity.class);
        Assertions.assertEquals("whwgbajmgctwamjj", model.name());
        Assertions.assertEquals("mugis", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("opedmk", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("ea", model.userProperties().get(0).name());
        Assertions.assertEquals("lksghsowmv", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1352125106, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals("eyliisatbs", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.NONE, model.getDebugInfo());
        Assertions.assertEquals("zsououezszlr", model.scriptLinkedService().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
