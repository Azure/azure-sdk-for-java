// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.HDInsightActivityDebugInfoOption;
import com.azure.resourcemanager.datafactory.models.HDInsightPigActivity;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class HDInsightPigActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HDInsightPigActivity model = BinaryData.fromString(
            "{\"type\":\"HDInsightPig\",\"typeProperties\":{\"storageLinkedServices\":[{\"referenceName\":\"yrajdvvsaatyyper\",\"parameters\":{\"tvotfhhayfxkf\":\"datacchvwwchaz\",\"cmfm\":\"dataxxefzliguwqos\",\"gjcn\":\"datanlj\"}},{\"referenceName\":\"a\",\"parameters\":{\"nrvjbnhbxvvu\":\"datativsknewpnp\",\"kj\":\"dataq\"}},{\"referenceName\":\"o\",\"parameters\":{\"cqdthmlqamdlcu\":\"dataqns\"}}],\"arguments\":\"datamrvryakc\",\"getDebugInfo\":\"Failure\",\"scriptPath\":\"datap\",\"scriptLinkedService\":{\"referenceName\":\"ar\",\"parameters\":{\"bwobovexsnmwwhbm\":\"dataabbxexacgmtpk\",\"nkmkcimksfejzm\":\"datajlsztpygqwkdlx\",\"nb\":\"datavlbzmngxzp\",\"kjfkaoe\":\"dataovhddvtnbtvl\"}},\"defines\":{\"ufi\":\"datayizdglzz\",\"ykng\":\"datawvyxy\",\"hwrnc\":\"datatjgpyvjgsjyjnhwb\",\"pb\":\"datawzuerrvpamfpini\"}},\"linkedServiceName\":{\"referenceName\":\"mfbruuhylqgeovn\",\"parameters\":{\"rqu\":\"datafsol\",\"jshicvrmwbgpc\":\"datalnhxr\",\"bxppvpgsrfshkjg\":\"datal\",\"rooogijiqwxwpub\":\"datapboaevtxi\"}},\"policy\":{\"timeout\":\"datanp\",\"retry\":\"datavruhdjzivlaxii\",\"retryIntervalInSeconds\":479943524,\"secureInput\":false,\"secureOutput\":true,\"\":{\"n\":\"datazixmksxxbdtjv\",\"kzulmqxficinw\":\"datanv\",\"x\":\"datajve\",\"t\":\"dataxerxttobosjxbny\"}},\"name\":\"nruditumyycvty\",\"description\":\"lyimhspj\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"qvwhjgtbhre\",\"dependencyConditions\":[\"Succeeded\",\"Succeeded\"],\"\":{\"ougcwzgd\":\"datapbtqibq\",\"tp\":\"datadrdxoutkgezuln\",\"oljbpoeo\":\"dataarejxjhl\"}}],\"userProperties\":[{\"name\":\"khhavwhrivvzrccy\",\"value\":\"datarx\"}],\"\":{\"deearbbxane\":\"datapw\",\"cppqcgbpcen\":\"dataiqkjupvidzh\",\"hd\":\"datar\",\"btlharjbakp\":\"dataxup\"}}")
            .toObject(HDInsightPigActivity.class);
        Assertions.assertEquals("nruditumyycvty", model.name());
        Assertions.assertEquals("lyimhspj", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("qvwhjgtbhre", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("khhavwhrivvzrccy", model.userProperties().get(0).name());
        Assertions.assertEquals("mfbruuhylqgeovn", model.linkedServiceName().referenceName());
        Assertions.assertEquals(479943524, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals("yrajdvvsaatyyper", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.FAILURE, model.getDebugInfo());
        Assertions.assertEquals("ar", model.scriptLinkedService().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HDInsightPigActivity model = new HDInsightPigActivity().withName("nruditumyycvty")
            .withDescription("lyimhspj")
            .withState(ActivityState.INACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
            .withDependsOn(Arrays.asList(new ActivityDependency().withActivity("qvwhjgtbhre")
                .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED, DependencyCondition.SUCCEEDED))
                .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("khhavwhrivvzrccy").withValue("datarx")))
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("mfbruuhylqgeovn")
                .withParameters(mapOf("rqu", "datafsol", "jshicvrmwbgpc", "datalnhxr", "bxppvpgsrfshkjg", "datal",
                    "rooogijiqwxwpub", "datapboaevtxi")))
            .withPolicy(new ActivityPolicy().withTimeout("datanp")
                .withRetry("datavruhdjzivlaxii")
                .withRetryIntervalInSeconds(479943524)
                .withSecureInput(false)
                .withSecureOutput(true)
                .withAdditionalProperties(mapOf()))
            .withStorageLinkedServices(
                Arrays
                    .asList(
                        new LinkedServiceReference().withReferenceName("yrajdvvsaatyyper")
                            .withParameters(mapOf("tvotfhhayfxkf", "datacchvwwchaz", "cmfm", "dataxxefzliguwqos",
                                "gjcn", "datanlj")),
                        new LinkedServiceReference()
                            .withReferenceName("a")
                            .withParameters(mapOf("nrvjbnhbxvvu", "datativsknewpnp", "kj", "dataq")),
                        new LinkedServiceReference().withReferenceName("o")
                            .withParameters(mapOf("cqdthmlqamdlcu", "dataqns"))))
            .withArguments("datamrvryakc")
            .withGetDebugInfo(HDInsightActivityDebugInfoOption.FAILURE)
            .withScriptPath("datap")
            .withScriptLinkedService(new LinkedServiceReference().withReferenceName("ar")
                .withParameters(mapOf("bwobovexsnmwwhbm", "dataabbxexacgmtpk", "nkmkcimksfejzm", "datajlsztpygqwkdlx",
                    "nb", "datavlbzmngxzp", "kjfkaoe", "dataovhddvtnbtvl")))
            .withDefines(mapOf("ufi", "datayizdglzz", "ykng", "datawvyxy", "hwrnc", "datatjgpyvjgsjyjnhwb", "pb",
                "datawzuerrvpamfpini"));
        model = BinaryData.fromObject(model).toObject(HDInsightPigActivity.class);
        Assertions.assertEquals("nruditumyycvty", model.name());
        Assertions.assertEquals("lyimhspj", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("qvwhjgtbhre", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("khhavwhrivvzrccy", model.userProperties().get(0).name());
        Assertions.assertEquals("mfbruuhylqgeovn", model.linkedServiceName().referenceName());
        Assertions.assertEquals(479943524, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals("yrajdvvsaatyyper", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.FAILURE, model.getDebugInfo());
        Assertions.assertEquals("ar", model.scriptLinkedService().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
