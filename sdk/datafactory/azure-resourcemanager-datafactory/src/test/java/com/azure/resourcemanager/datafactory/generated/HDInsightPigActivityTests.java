// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.HDInsightActivityDebugInfoOption;
import com.azure.resourcemanager.datafactory.models.HDInsightPigActivity;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class HDInsightPigActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HDInsightPigActivity model = BinaryData.fromString(
            "{\"type\":\"HDInsightPig\",\"typeProperties\":{\"storageLinkedServices\":[{\"referenceName\":\"ccldxuwe\",\"parameters\":{\"yfaprhf\":\"dataegszwsn\"}},{\"referenceName\":\"dhbcribqdszuxh\",\"parameters\":{\"nmcqudfxh\":\"dataywtyknfrhbknrag\",\"zegm\":\"datagd\",\"jhijlduuv\":\"datauebzo\"}},{\"referenceName\":\"klarufj\",\"parameters\":{\"exgnfjwfo\":\"datadzwbsk\",\"pmowlsrxytev\":\"datazlia\",\"nzzhyl\":\"dataqxpmfhehtrpql\",\"m\":\"datazuxqqrmck\"}},{\"referenceName\":\"sueutby\",\"parameters\":{\"cnriv\":\"datagkzhbnbnjpi\"}}],\"arguments\":\"datawwso\",\"getDebugInfo\":\"Failure\",\"scriptPath\":\"datakikouv\",\"scriptLinkedService\":{\"referenceName\":\"jyhsznmjtanr\",\"parameters\":{\"omsy\":\"datanql\"}},\"defines\":{\"kapgdvknquipi\":\"dataga\",\"y\":\"datagvfchzcp\",\"wzpf\":\"datazbo\"}},\"linkedServiceName\":{\"referenceName\":\"slvbrxlsbglbfp\",\"parameters\":{\"hcfs\":\"datairneopxd\",\"mrfxucgvzgwvmhb\":\"datapdarvcab\"}},\"policy\":{\"timeout\":\"dataijdseexdboatvs\",\"retry\":\"dataxdfeqr\",\"retryIntervalInSeconds\":1674692425,\"secureInput\":true,\"secureOutput\":true,\"\":{\"ngxogqvwchynrdt\":\"dataxacojcaraxorqjbo\",\"oqvcjspjp\":\"dataaptwmawypkpbmi\",\"bmluy\":\"datatsgvvizayg\"}},\"name\":\"cgzvqpnjqpwx\",\"description\":\"uijpay\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"qopwmbdleegwlh\",\"dependencyConditions\":[\"Succeeded\"],\"\":{\"iotlfzbjsvuqkbsd\":\"dataizhydjkmxbgh\",\"scugdyfyjeexmlk\":\"datacoaysargqkga\",\"ekkvayyyowj\":\"datavfejdgojavqe\"}},{\"activity\":\"smnxcc\",\"dependencyConditions\":[\"Succeeded\"],\"\":{\"fatoilmwzkxaglwd\":\"dataokhmkqyfatddwfhf\",\"hvioccszdaxafu\":\"datatjfnmxzu\",\"tmfimloz\":\"dataccnqfwobnblu\",\"g\":\"datafdxjirfyetljrd\"}},{\"activity\":\"ormxipwcqha\",\"dependencyConditions\":[\"Failed\",\"Succeeded\",\"Skipped\"],\"\":{\"qielhtuk\":\"datatwiocuha\"}}],\"userProperties\":[{\"name\":\"mwhotjcgdpqkfxdq\",\"value\":\"datadvrglql\"},{\"name\":\"mke\",\"value\":\"dataeyqotmj\"},{\"name\":\"qqahmzleta\",\"value\":\"datakjuwkkvarffju\"}],\"\":{\"drdtywajqwah\":\"databmowqwod\",\"vcswzjrpcpgcltf\":\"dataia\",\"ptf\":\"dataaqmrimletjv\"}}")
            .toObject(HDInsightPigActivity.class);
        Assertions.assertEquals("cgzvqpnjqpwx", model.name());
        Assertions.assertEquals("uijpay", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("qopwmbdleegwlh", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("mwhotjcgdpqkfxdq", model.userProperties().get(0).name());
        Assertions.assertEquals("slvbrxlsbglbfp", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1674692425, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals("ccldxuwe", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.FAILURE, model.getDebugInfo());
        Assertions.assertEquals("jyhsznmjtanr", model.scriptLinkedService().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HDInsightPigActivity model = new HDInsightPigActivity().withName("cgzvqpnjqpwx")
            .withDescription("uijpay")
            .withState(ActivityState.ACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
            .withDependsOn(Arrays.asList(
                new ActivityDependency().withActivity("qopwmbdleegwlh")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("smnxcc")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("ormxipwcqha")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED, DependencyCondition.SUCCEEDED,
                        DependencyCondition.SKIPPED))
                    .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("mwhotjcgdpqkfxdq").withValue("datadvrglql"),
                new UserProperty().withName("mke").withValue("dataeyqotmj"),
                new UserProperty().withName("qqahmzleta").withValue("datakjuwkkvarffju")))
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("slvbrxlsbglbfp")
                .withParameters(mapOf("hcfs", "datairneopxd", "mrfxucgvzgwvmhb", "datapdarvcab")))
            .withPolicy(new ActivityPolicy().withTimeout("dataijdseexdboatvs")
                .withRetry("dataxdfeqr")
                .withRetryIntervalInSeconds(1674692425)
                .withSecureInput(true)
                .withSecureOutput(true)
                .withAdditionalProperties(mapOf()))
            .withStorageLinkedServices(Arrays.asList(
                new LinkedServiceReference().withReferenceName("ccldxuwe")
                    .withParameters(mapOf("yfaprhf", "dataegszwsn")),
                new LinkedServiceReference().withReferenceName("dhbcribqdszuxh")
                    .withParameters(
                        mapOf("nmcqudfxh", "dataywtyknfrhbknrag", "zegm", "datagd", "jhijlduuv", "datauebzo")),
                new LinkedServiceReference().withReferenceName("klarufj")
                    .withParameters(mapOf("exgnfjwfo", "datadzwbsk", "pmowlsrxytev", "datazlia", "nzzhyl",
                        "dataqxpmfhehtrpql", "m", "datazuxqqrmck")),
                new LinkedServiceReference().withReferenceName("sueutby")
                    .withParameters(mapOf("cnriv", "datagkzhbnbnjpi"))))
            .withArguments("datawwso")
            .withGetDebugInfo(HDInsightActivityDebugInfoOption.FAILURE)
            .withScriptPath("datakikouv")
            .withScriptLinkedService(
                new LinkedServiceReference().withReferenceName("jyhsznmjtanr").withParameters(mapOf("omsy", "datanql")))
            .withDefines(mapOf("kapgdvknquipi", "dataga", "y", "datagvfchzcp", "wzpf", "datazbo"));
        model = BinaryData.fromObject(model).toObject(HDInsightPigActivity.class);
        Assertions.assertEquals("cgzvqpnjqpwx", model.name());
        Assertions.assertEquals("uijpay", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("qopwmbdleegwlh", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("mwhotjcgdpqkfxdq", model.userProperties().get(0).name());
        Assertions.assertEquals("slvbrxlsbglbfp", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1674692425, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals("ccldxuwe", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.FAILURE, model.getDebugInfo());
        Assertions.assertEquals("jyhsznmjtanr", model.scriptLinkedService().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
