// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.HDInsightActivityDebugInfoOption;
import com.azure.resourcemanager.datafactory.models.HDInsightPigActivity;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class HDInsightPigActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HDInsightPigActivity model = BinaryData.fromString(
            "{\"type\":\"djmv\",\"typeProperties\":{\"storageLinkedServices\":[{\"referenceName\":\"mgho\",\"parameters\":{\"qcxrrkcvclqlibpm\":\"datacontsr\",\"zs\":\"datan\",\"gzljgrtfic\":\"datahkkktlodsyyzmf\",\"ufet\":\"dataejmzbasxapcegtc\"}}],\"arguments\":\"datattjnneynmgvqysgh\",\"getDebugInfo\":\"Failure\",\"scriptPath\":\"datax\",\"scriptLinkedService\":{\"referenceName\":\"mvfdo\",\"parameters\":{\"ktutwczdwmt\":\"datafcfidd\"}},\"defines\":{\"mobsjudpeed\":\"datauqhyq\",\"igtsrrlelpobm\":\"dataowverhtyc\",\"qgluhr\":\"datamdsisll\",\"fqb\":\"dataimojozhdcptxxb\"}},\"linkedServiceName\":{\"referenceName\":\"pvnrngiffsn\",\"parameters\":{\"vqqrcyeu\":\"datafqgu\",\"u\":\"datawvzagurgurpc\",\"dcrwoiqsrqebjgo\":\"datayuzhkefownc\",\"chkmq\":\"datamjcahda\"}},\"policy\":{\"timeout\":\"dataseaomqqb\",\"retry\":\"datawxcf\",\"retryIntervalInSeconds\":952320530,\"secureInput\":false,\"secureOutput\":false,\"\":{\"nxppgfeppne\":\"datarwn\",\"nvvkfbmrppjf\":\"datajvataeaoqknz\",\"s\":\"dataeabgpw\",\"n\":\"dataewi\"}},\"name\":\"cycgftelimqxw\",\"description\":\"npyexjr\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"ih\",\"dependencyConditions\":[\"Failed\",\"Skipped\",\"Completed\",\"Skipped\"],\"\":{\"twnppstpqws\":\"datafciskl\"}},{\"activity\":\"eawolhlfffe\",\"dependencyConditions\":[\"Failed\",\"Completed\",\"Failed\",\"Skipped\"],\"\":{\"ipchdpdev\":\"datarsywiscoqtvx\",\"kfesh\":\"datampoqkc\",\"lpyp\":\"dataomtvkxps\",\"utspocr\":\"datagdetydqgyhuy\"}},{\"activity\":\"kkraapczmziiftj\",\"dependencyConditions\":[\"Completed\"],\"\":{\"wcflciooxybmk\":\"datazocfy\",\"cpwtj\":\"databwdfjcep\"}},{\"activity\":\"kuhrtqnbdgc\",\"dependencyConditions\":[\"Skipped\",\"Succeeded\"],\"\":{\"xhf\":\"databbccbqxwojve\"}}],\"userProperties\":[{\"name\":\"zftfyjcen\",\"value\":\"dataidlpmlxhzwyy\"}],\"\":{\"dnegwsyxdf\":\"datazbmlhgytkthevod\",\"i\":\"datajftcrjoh\"}}")
            .toObject(HDInsightPigActivity.class);
        Assertions.assertEquals("cycgftelimqxw", model.name());
        Assertions.assertEquals("npyexjr", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("ih", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("zftfyjcen", model.userProperties().get(0).name());
        Assertions.assertEquals("pvnrngiffsn", model.linkedServiceName().referenceName());
        Assertions.assertEquals(952320530, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals("mgho", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.FAILURE, model.getDebugInfo());
        Assertions.assertEquals("mvfdo", model.scriptLinkedService().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HDInsightPigActivity model = new HDInsightPigActivity().withName("cycgftelimqxw")
            .withDescription("npyexjr")
            .withState(ActivityState.ACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
            .withDependsOn(Arrays.asList(
                new ActivityDependency().withActivity("ih")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED, DependencyCondition.SKIPPED,
                        DependencyCondition.COMPLETED, DependencyCondition.SKIPPED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("eawolhlfffe")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED, DependencyCondition.COMPLETED,
                        DependencyCondition.FAILED, DependencyCondition.SKIPPED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("kkraapczmziiftj")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("kuhrtqnbdgc")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.SUCCEEDED))
                    .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("zftfyjcen").withValue("dataidlpmlxhzwyy")))
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("pvnrngiffsn")
                .withParameters(mapOf("vqqrcyeu", "datafqgu", "u", "datawvzagurgurpc", "dcrwoiqsrqebjgo",
                    "datayuzhkefownc", "chkmq", "datamjcahda")))
            .withPolicy(new ActivityPolicy().withTimeout("dataseaomqqb")
                .withRetry("datawxcf")
                .withRetryIntervalInSeconds(952320530)
                .withSecureInput(false)
                .withSecureOutput(false)
                .withAdditionalProperties(mapOf()))
            .withStorageLinkedServices(Arrays.asList(new LinkedServiceReference().withReferenceName("mgho")
                .withParameters(mapOf("qcxrrkcvclqlibpm", "datacontsr", "zs", "datan", "gzljgrtfic",
                    "datahkkktlodsyyzmf", "ufet", "dataejmzbasxapcegtc"))))
            .withArguments("datattjnneynmgvqysgh")
            .withGetDebugInfo(HDInsightActivityDebugInfoOption.FAILURE)
            .withScriptPath("datax")
            .withScriptLinkedService(new LinkedServiceReference().withReferenceName("mvfdo")
                .withParameters(mapOf("ktutwczdwmt", "datafcfidd")))
            .withDefines(mapOf("mobsjudpeed", "datauqhyq", "igtsrrlelpobm", "dataowverhtyc", "qgluhr", "datamdsisll",
                "fqb", "dataimojozhdcptxxb"));
        model = BinaryData.fromObject(model).toObject(HDInsightPigActivity.class);
        Assertions.assertEquals("cycgftelimqxw", model.name());
        Assertions.assertEquals("npyexjr", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("ih", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("zftfyjcen", model.userProperties().get(0).name());
        Assertions.assertEquals("pvnrngiffsn", model.linkedServiceName().referenceName());
        Assertions.assertEquals(952320530, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals("mgho", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.FAILURE, model.getDebugInfo());
        Assertions.assertEquals("mvfdo", model.scriptLinkedService().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
