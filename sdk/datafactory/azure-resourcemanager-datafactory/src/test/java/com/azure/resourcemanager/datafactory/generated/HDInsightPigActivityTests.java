// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.HDInsightActivityDebugInfoOption;
import com.azure.resourcemanager.datafactory.models.HDInsightPigActivity;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class HDInsightPigActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HDInsightPigActivity model =
            BinaryData
                .fromString(
                    "{\"type\":\"HDInsightPig\",\"typeProperties\":{\"storageLinkedServices\":[{\"referenceName\":\"gijiqwxw\",\"parameters\":{\"qnprbvruhdjzivl\":\"datad\",\"mq\":\"dataxi\"}},{\"referenceName\":\"qmbfptzixmks\",\"parameters\":{\"n\":\"datadtjv\",\"kzulmqxficinw\":\"datanv\",\"x\":\"datajve\"}}],\"arguments\":\"dataer\",\"getDebugInfo\":\"Failure\",\"scriptPath\":\"databosjxbnytten\",\"scriptLinkedService\":{\"referenceName\":\"ditumyycvtya\",\"parameters\":{\"qvwhjgtbhre\":\"dataimhspjqhivxb\",\"btqibqbougcwzgd\":\"datautqoh\",\"tp\":\"datadrdxoutkgezuln\"}},\"defines\":{\"eoy\":\"dataejxjhlxoljbp\",\"havwhrivvzrc\":\"datayk\",\"eearbbxaneviqk\":\"datayfrxlsypwu\"}},\"linkedServiceName\":{\"referenceName\":\"pvidzhjcppqcgbp\",\"parameters\":{\"jbakpasuugcngdu\":\"datairjhdlxuptbtlha\"}},\"policy\":{\"timeout\":\"datae\",\"retry\":\"dataguvaimkoyrp\",\"retryIntervalInSeconds\":1099083192,\"secureInput\":true,\"secureOutput\":true,\"\":{\"xbjqiabitevv\":\"databozlmrhnghvlvd\",\"kdfyvgcftaqydcr\":\"datawiypyljzk\",\"r\":\"datalhmneykxewemtaz\",\"e\":\"datajzpxo\"}},\"name\":\"erxmlfnugl\",\"description\":\"rkrtdkp\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"n\",\"dependencyConditions\":[\"Skipped\",\"Succeeded\",\"Skipped\",\"Completed\"],\"\":{\"jzq\":\"datajhwkl\",\"panwejbngojna\":\"datag\"}},{\"activity\":\"swytkwt\",\"dependencyConditions\":[\"Failed\",\"Succeeded\",\"Failed\"],\"\":{\"bhrvonea\":\"dataormfhruhwxmnrdfj\",\"rxtoxlx\":\"datapjmjigypbdfrtasa\",\"ycissh\":\"datajijttsyrxynnfsk\"}},{\"activity\":\"pxftyhfc\",\"dependencyConditions\":[\"Succeeded\",\"Succeeded\",\"Succeeded\",\"Failed\"],\"\":{\"ztpnrysxxajr\":\"dataqaawryctzslf\",\"ddvnobesowbtnfq\":\"datacighl\"}},{\"activity\":\"wcaxj\",\"dependencyConditions\":[\"Skipped\",\"Skipped\"],\"\":{\"cxofqjninrsk\":\"dataucmeuuuajiot\",\"ygwpwqux\":\"dataekqtiuveazuciwbi\"}}],\"userProperties\":[{\"name\":\"slspihux\",\"value\":\"datavviotvoolkm\"}],\"\":{\"frfwaehsso\":\"dataefbbrndaquxv\",\"avpy\":\"datao\"}}")
                .toObject(HDInsightPigActivity.class);
        Assertions.assertEquals("erxmlfnugl", model.name());
        Assertions.assertEquals("rkrtdkp", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.onInactiveMarkAs());
        Assertions.assertEquals("n", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("slspihux", model.userProperties().get(0).name());
        Assertions.assertEquals("pvidzhjcppqcgbp", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1099083192, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals("gijiqwxw", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.FAILURE, model.getDebugInfo());
        Assertions.assertEquals("ditumyycvtya", model.scriptLinkedService().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HDInsightPigActivity model =
            new HDInsightPigActivity()
                .withName("erxmlfnugl")
                .withDescription("rkrtdkp")
                .withState(ActivityState.ACTIVE)
                .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SUCCEEDED)
                .withDependsOn(
                    Arrays
                        .asList(
                            new ActivityDependency()
                                .withActivity("n")
                                .withDependencyConditions(
                                    Arrays
                                        .asList(
                                            DependencyCondition.SKIPPED,
                                            DependencyCondition.SUCCEEDED,
                                            DependencyCondition.SKIPPED,
                                            DependencyCondition.COMPLETED))
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency()
                                .withActivity("swytkwt")
                                .withDependencyConditions(
                                    Arrays
                                        .asList(
                                            DependencyCondition.FAILED,
                                            DependencyCondition.SUCCEEDED,
                                            DependencyCondition.FAILED))
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency()
                                .withActivity("pxftyhfc")
                                .withDependencyConditions(
                                    Arrays
                                        .asList(
                                            DependencyCondition.SUCCEEDED,
                                            DependencyCondition.SUCCEEDED,
                                            DependencyCondition.SUCCEEDED,
                                            DependencyCondition.FAILED))
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency()
                                .withActivity("wcaxj")
                                .withDependencyConditions(
                                    Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.SKIPPED))
                                .withAdditionalProperties(mapOf())))
                .withUserProperties(Arrays.asList(new UserProperty().withName("slspihux").withValue("datavviotvoolkm")))
                .withLinkedServiceName(
                    new LinkedServiceReference()
                        .withReferenceName("pvidzhjcppqcgbp")
                        .withParameters(mapOf("jbakpasuugcngdu", "datairjhdlxuptbtlha")))
                .withPolicy(
                    new ActivityPolicy()
                        .withTimeout("datae")
                        .withRetry("dataguvaimkoyrp")
                        .withRetryIntervalInSeconds(1099083192)
                        .withSecureInput(true)
                        .withSecureOutput(true)
                        .withAdditionalProperties(mapOf()))
                .withStorageLinkedServices(
                    Arrays
                        .asList(
                            new LinkedServiceReference()
                                .withReferenceName("gijiqwxw")
                                .withParameters(mapOf("qnprbvruhdjzivl", "datad", "mq", "dataxi")),
                            new LinkedServiceReference()
                                .withReferenceName("qmbfptzixmks")
                                .withParameters(mapOf("n", "datadtjv", "kzulmqxficinw", "datanv", "x", "datajve"))))
                .withArguments("dataer")
                .withGetDebugInfo(HDInsightActivityDebugInfoOption.FAILURE)
                .withScriptPath("databosjxbnytten")
                .withScriptLinkedService(
                    new LinkedServiceReference()
                        .withReferenceName("ditumyycvtya")
                        .withParameters(
                            mapOf(
                                "qvwhjgtbhre",
                                "dataimhspjqhivxb",
                                "btqibqbougcwzgd",
                                "datautqoh",
                                "tp",
                                "datadrdxoutkgezuln")))
                .withDefines(
                    mapOf("eoy", "dataejxjhlxoljbp", "havwhrivvzrc", "datayk", "eearbbxaneviqk", "datayfrxlsypwu"));
        model = BinaryData.fromObject(model).toObject(HDInsightPigActivity.class);
        Assertions.assertEquals("erxmlfnugl", model.name());
        Assertions.assertEquals("rkrtdkp", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.onInactiveMarkAs());
        Assertions.assertEquals("n", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("slspihux", model.userProperties().get(0).name());
        Assertions.assertEquals("pvidzhjcppqcgbp", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1099083192, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals("gijiqwxw", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.FAILURE, model.getDebugInfo());
        Assertions.assertEquals("ditumyycvtya", model.scriptLinkedService().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
