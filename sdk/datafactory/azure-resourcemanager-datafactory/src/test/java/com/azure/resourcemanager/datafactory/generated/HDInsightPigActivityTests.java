// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.HDInsightActivityDebugInfoOption;
import com.azure.resourcemanager.datafactory.models.HDInsightPigActivity;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class HDInsightPigActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HDInsightPigActivity model = BinaryData.fromString(
            "{\"type\":\"HDInsightPig\",\"typeProperties\":{\"storageLinkedServices\":[{\"referenceName\":\"nb\",\"parameters\":{\"oewimyiz\":\"datahddvtnbtvlgkjfk\",\"ry\":\"dataglzzaufinwvyx\",\"nhwbbhwrncxw\":\"datangntjgpyvjgsjy\"}}],\"arguments\":\"dataerr\",\"getDebugInfo\":\"None\",\"scriptPath\":\"datafpiniopbfkmfbru\",\"scriptLinkedService\":{\"referenceName\":\"yl\",\"parameters\":{\"fsol\":\"dataovnlb\",\"lnhxr\":\"datarqu\",\"l\":\"datajshicvrmwbgpc\",\"pboaevtxi\":\"databxppvpgsrfshkjg\"}},\"defines\":{\"ubdh\":\"dataoogijiqwxw\",\"bvruhdjzi\":\"datanp\"}},\"linkedServiceName\":{\"referenceName\":\"axiimqnqmbfptz\",\"parameters\":{\"gnvkkzulmqxf\":\"dataksxxbdtjvv\",\"eyxt\":\"datacinwij\",\"ttobosjxb\":\"dataer\",\"uditumyycvtya\":\"dataytten\"}},\"policy\":{\"timeout\":\"dataimhspjqhivxb\",\"retry\":\"datavwhjgtbh\",\"retryIntervalInSeconds\":964395596,\"secureInput\":false,\"secureOutput\":false,\"\":{\"drdxoutkgezuln\":\"databtqibqbougcwzgd\",\"arejxjhl\":\"datatp\"}},\"name\":\"oljbpoeo\",\"description\":\"yk\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"ivvzrccyfrxl\",\"dependencyConditions\":[\"Succeeded\",\"Failed\",\"Succeeded\",\"Skipped\"],\"\":{\"bx\":\"dataar\",\"pvidzhjcppqcgbp\":\"dataneviqkj\"}},{\"activity\":\"enirjhdlxu\",\"dependencyConditions\":[\"Skipped\",\"Succeeded\"],\"\":{\"ulvdenhgu\":\"dataarjbakpasuugcng\",\"wkbozlmrhnghvlvd\":\"dataaimkoyrppsnljd\"}},{\"activity\":\"xbjqiabitevv\",\"dependencyConditions\":[\"Succeeded\",\"Failed\",\"Succeeded\"],\"\":{\"xkdfyvgc\":\"datajz\",\"wemt\":\"datataqydcrjlhmneykx\",\"lfnuglmyr\":\"datazmrejzpxoqegerx\"}},{\"activity\":\"rt\",\"dependencyConditions\":[\"Succeeded\"],\"\":{\"itlmcaehjhwkl\":\"datazwgrs\"}}],\"userProperties\":[{\"name\":\"qqgyp\",\"value\":\"datanwe\"},{\"name\":\"bngojnaks\",\"value\":\"dataytk\"}],\"\":{\"hwxmnrdfjobhrvon\":\"dataoaafksormfhr\"}}")
            .toObject(HDInsightPigActivity.class);
        Assertions.assertEquals("oljbpoeo", model.name());
        Assertions.assertEquals("yk", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("ivvzrccyfrxl", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("qqgyp", model.userProperties().get(0).name());
        Assertions.assertEquals("axiimqnqmbfptz", model.linkedServiceName().referenceName());
        Assertions.assertEquals(964395596, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals("nb", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.NONE, model.getDebugInfo());
        Assertions.assertEquals("yl", model.scriptLinkedService().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HDInsightPigActivity model = new HDInsightPigActivity().withName("oljbpoeo").withDescription("yk")
            .withState(ActivityState.INACTIVE).withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
            .withDependsOn(Arrays.asList(
                new ActivityDependency()
                    .withActivity("ivvzrccyfrxl")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED, DependencyCondition.FAILED,
                        DependencyCondition.SUCCEEDED, DependencyCondition.SKIPPED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("enirjhdlxu")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.SUCCEEDED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("xbjqiabitevv")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED, DependencyCondition.FAILED,
                        DependencyCondition.SUCCEEDED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("rt")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED))
                    .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("qqgyp").withValue("datanwe"),
                new UserProperty().withName("bngojnaks").withValue("dataytk")))
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("axiimqnqmbfptz")
                .withParameters(mapOf("gnvkkzulmqxf", "dataksxxbdtjvv", "eyxt", "datacinwij", "ttobosjxb", "dataer",
                    "uditumyycvtya", "dataytten")))
            .withPolicy(new ActivityPolicy().withTimeout("dataimhspjqhivxb").withRetry("datavwhjgtbh")
                .withRetryIntervalInSeconds(964395596).withSecureInput(false).withSecureOutput(false)
                .withAdditionalProperties(mapOf()))
            .withStorageLinkedServices(Arrays.asList(new LinkedServiceReference().withReferenceName("nb")
                .withParameters(mapOf("oewimyiz", "datahddvtnbtvlgkjfk", "ry", "dataglzzaufinwvyx", "nhwbbhwrncxw",
                    "datangntjgpyvjgsjy"))))
            .withArguments("dataerr").withGetDebugInfo(HDInsightActivityDebugInfoOption.NONE)
            .withScriptPath("datafpiniopbfkmfbru")
            .withScriptLinkedService(
                new LinkedServiceReference().withReferenceName("yl")
                    .withParameters(mapOf("fsol", "dataovnlb", "lnhxr", "datarqu", "l", "datajshicvrmwbgpc",
                        "pboaevtxi", "databxppvpgsrfshkjg")))
            .withDefines(mapOf("ubdh", "dataoogijiqwxw", "bvruhdjzi", "datanp"));
        model = BinaryData.fromObject(model).toObject(HDInsightPigActivity.class);
        Assertions.assertEquals("oljbpoeo", model.name());
        Assertions.assertEquals("yk", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("ivvzrccyfrxl", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("qqgyp", model.userProperties().get(0).name());
        Assertions.assertEquals("axiimqnqmbfptz", model.linkedServiceName().referenceName());
        Assertions.assertEquals(964395596, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals("nb", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.NONE, model.getDebugInfo());
        Assertions.assertEquals("yl", model.scriptLinkedService().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
