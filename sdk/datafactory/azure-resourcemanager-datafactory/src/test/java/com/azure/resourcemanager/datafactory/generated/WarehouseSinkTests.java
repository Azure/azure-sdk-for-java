// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DWCopyCommandDefaultValue;
import com.azure.resourcemanager.datafactory.models.DWCopyCommandSettings;
import com.azure.resourcemanager.datafactory.models.WarehouseSink;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class WarehouseSinkTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WarehouseSink model = BinaryData.fromString(
            "{\"type\":\"WarehouseSink\",\"preCopyScript\":\"dataamshqvku\",\"allowCopyCommand\":\"datazvzqhvzjdsn\",\"copyCommandSettings\":{\"defaultValues\":[{\"columnName\":\"dataani\",\"defaultValue\":\"dataz\"}],\"additionalOptions\":{\"vwwvznp\":\"xaqugjalmzpfylq\"}},\"tableOption\":\"datacizropzgjleecffb\",\"writeBehavior\":\"datakvb\",\"writeBatchSize\":\"datastqwnpegoupdq\",\"writeBatchTimeout\":\"datalvd\",\"sinkRetryCount\":\"dataqcqlexobeekzy\",\"sinkRetryWait\":\"datapatwbbf\",\"maxConcurrentConnections\":\"dataflhnwohlc\",\"disableMetricsCollection\":\"datahfuydgdhitavga\",\"\":{\"zeebdefepwkhr\":\"datapzlcvibpd\",\"qvnlhsxea\":\"datazzwgbbozivfo\",\"km\":\"dataxsqquvvscb\",\"ibwuzvmorsyi\":\"datahdukprq\"}}")
            .toObject(WarehouseSink.class);
        Assertions.assertEquals("xaqugjalmzpfylq", model.copyCommandSettings().additionalOptions().get("vwwvznp"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WarehouseSink model = new WarehouseSink().withWriteBatchSize("datastqwnpegoupdq")
            .withWriteBatchTimeout("datalvd")
            .withSinkRetryCount("dataqcqlexobeekzy")
            .withSinkRetryWait("datapatwbbf")
            .withMaxConcurrentConnections("dataflhnwohlc")
            .withDisableMetricsCollection("datahfuydgdhitavga")
            .withPreCopyScript("dataamshqvku")
            .withAllowCopyCommand("datazvzqhvzjdsn")
            .withCopyCommandSettings(new DWCopyCommandSettings()
                .withDefaultValues(
                    Arrays.asList(new DWCopyCommandDefaultValue().withColumnName("dataani").withDefaultValue("dataz")))
                .withAdditionalOptions(mapOf("vwwvznp", "xaqugjalmzpfylq")))
            .withTableOption("datacizropzgjleecffb")
            .withWriteBehavior("datakvb");
        model = BinaryData.fromObject(model).toObject(WarehouseSink.class);
        Assertions.assertEquals("xaqugjalmzpfylq", model.copyCommandSettings().additionalOptions().get("vwwvznp"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
