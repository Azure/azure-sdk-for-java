// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DWCopyCommandDefaultValue;
import com.azure.resourcemanager.datafactory.models.DWCopyCommandSettings;
import com.azure.resourcemanager.datafactory.models.WarehouseSink;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class WarehouseSinkTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WarehouseSink model = BinaryData.fromString(
            "{\"type\":\"WarehouseSink\",\"preCopyScript\":\"datafcxdldhhkdeviw\",\"allowCopyCommand\":\"datahfxvl\",\"copyCommandSettings\":{\"defaultValues\":[{\"columnName\":\"datasmgh\",\"defaultValue\":\"datatuujcuavctxyrmws\"},{\"columnName\":\"datazmy\",\"defaultValue\":\"datan\"}],\"additionalOptions\":{\"ugpkunvygupgnnvm\":\"jxvotidlwmewrgul\"}},\"tableOption\":\"datazqmxwwmekms\",\"writeBehavior\":\"datafjbefszfrxfy\",\"writeBatchSize\":\"dataypxcqmdeecd\",\"writeBatchTimeout\":\"datajsizyhp\",\"sinkRetryCount\":\"dataykgrtwhmad\",\"sinkRetryWait\":\"datasmwjkqtfyuygy\",\"maxConcurrentConnections\":\"datahchxueaitzgewwqw\",\"disableMetricsCollection\":\"datatkr\",\"\":{\"pkrrppmwozwji\":\"databzrlfsewusq\",\"vzslttkpirku\":\"dataxyrtec\",\"zhsdpfoabmahuwxo\":\"datacee\",\"tgsocqkdclbzqnao\":\"dataddqzewrr\"}}")
            .toObject(WarehouseSink.class);
        Assertions.assertEquals("jxvotidlwmewrgul",
            model.copyCommandSettings().additionalOptions().get("ugpkunvygupgnnvm"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WarehouseSink model
            = new WarehouseSink().withWriteBatchSize("dataypxcqmdeecd")
                .withWriteBatchTimeout("datajsizyhp")
                .withSinkRetryCount("dataykgrtwhmad")
                .withSinkRetryWait("datasmwjkqtfyuygy")
                .withMaxConcurrentConnections("datahchxueaitzgewwqw")
                .withDisableMetricsCollection("datatkr")
                .withPreCopyScript("datafcxdldhhkdeviw")
                .withAllowCopyCommand("datahfxvl")
                .withCopyCommandSettings(new DWCopyCommandSettings()
                    .withDefaultValues(Arrays.asList(
                        new DWCopyCommandDefaultValue().withColumnName("datasmgh")
                            .withDefaultValue("datatuujcuavctxyrmws"),
                        new DWCopyCommandDefaultValue().withColumnName("datazmy").withDefaultValue("datan")))
                    .withAdditionalOptions(mapOf("ugpkunvygupgnnvm", "jxvotidlwmewrgul")))
                .withTableOption("datazqmxwwmekms")
                .withWriteBehavior("datafjbefszfrxfy");
        model = BinaryData.fromObject(model).toObject(WarehouseSink.class);
        Assertions.assertEquals("jxvotidlwmewrgul",
            model.copyCommandSettings().additionalOptions().get("ugpkunvygupgnnvm"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
