// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DWCopyCommandDefaultValue;
import com.azure.resourcemanager.datafactory.models.DWCopyCommandSettings;
import com.azure.resourcemanager.datafactory.models.WarehouseSink;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class WarehouseSinkTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WarehouseSink model = BinaryData.fromString(
            "{\"type\":\"WarehouseSink\",\"preCopyScript\":\"datainfauytmqvsdyqyj\",\"allowCopyCommand\":\"datafotwmxedlcxmyxt\",\"copyCommandSettings\":{\"defaultValues\":[{\"columnName\":\"datajk\",\"defaultValue\":\"dataxantlpspi\"},{\"columnName\":\"dataf\",\"defaultValue\":\"datanqpkvvrhoqyv\"},{\"columnName\":\"datavnruodu\",\"defaultValue\":\"datahskh\"}],\"additionalOptions\":{\"h\":\"vocrddqxhegco\"}},\"tableOption\":\"datacklqrunqwcrkkaby\",\"writeBehavior\":\"datay\",\"writeBatchSize\":\"dataipywgjgfbsfsva\",\"writeBatchTimeout\":\"dataejypokk\",\"sinkRetryCount\":\"datatnwpwskckc\",\"sinkRetryWait\":\"datamfyxpgvqioqrebwa\",\"maxConcurrentConnections\":\"datajplk\",\"disableMetricsCollection\":\"datamxcdreqaqvspsy\",\"\":{\"vwmcrhyoestplmy\":\"datarwtkrbscwbi\",\"vyjzferhxg\":\"datan\",\"qxujxbdyczplmlj\":\"datatiawywp\"}}")
            .toObject(WarehouseSink.class);
        Assertions.assertEquals("vocrddqxhegco", model.copyCommandSettings().additionalOptions().get("h"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WarehouseSink model
            = new WarehouseSink().withWriteBatchSize("dataipywgjgfbsfsva").withWriteBatchTimeout("dataejypokk")
                .withSinkRetryCount("datatnwpwskckc").withSinkRetryWait("datamfyxpgvqioqrebwa")
                .withMaxConcurrentConnections("datajplk").withDisableMetricsCollection("datamxcdreqaqvspsy")
                .withPreCopyScript("datainfauytmqvsdyqyj").withAllowCopyCommand("datafotwmxedlcxmyxt")
                .withCopyCommandSettings(
                    new DWCopyCommandSettings()
                        .withDefaultValues(Arrays.asList(
                            new DWCopyCommandDefaultValue().withColumnName("datajk").withDefaultValue("dataxantlpspi"),
                            new DWCopyCommandDefaultValue().withColumnName("dataf")
                                .withDefaultValue("datanqpkvvrhoqyv"),
                            new DWCopyCommandDefaultValue().withColumnName("datavnruodu").withDefaultValue("datahskh")))
                        .withAdditionalOptions(mapOf("h", "vocrddqxhegco")))
                .withTableOption("datacklqrunqwcrkkaby").withWriteBehavior("datay");
        model = BinaryData.fromObject(model).toObject(WarehouseSink.class);
        Assertions.assertEquals("vocrddqxhegco", model.copyCommandSettings().additionalOptions().get("h"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
