// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DWCopyCommandDefaultValue;
import com.azure.resourcemanager.datafactory.models.DWCopyCommandSettings;
import com.azure.resourcemanager.datafactory.models.WarehouseSink;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class WarehouseSinkTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WarehouseSink model = BinaryData.fromString(
            "{\"type\":\"WarehouseSink\",\"preCopyScript\":\"datadukp\",\"allowCopyCommand\":\"datayibwuzvmors\",\"copyCommandSettings\":{\"defaultValues\":[{\"columnName\":\"dataxazuboigorwpbbjz\",\"defaultValue\":\"dataaqoilgkznnzpvjw\"},{\"columnName\":\"dataoviceqyrajdvvsa\",\"defaultValue\":\"datayypercazc\"},{\"columnName\":\"datavwwchazztvotfhha\",\"defaultValue\":\"dataxkfgxxef\"}],\"additionalOptions\":{\"nlj\":\"guwqoszcmfm\",\"a\":\"gjcn\",\"tivsknewpnp\":\"m\"}},\"tableOption\":\"datarvjbnhbxvvufq\",\"writeBehavior\":\"datajuosajqnsrcqdth\",\"writeBatchSize\":\"dataqamdlcu\",\"writeBatchTimeout\":\"datamrvryakc\",\"sinkRetryCount\":\"datasnprda\",\"sinkRetryWait\":\"dataqgabbxexacgmt\",\"maxConcurrentConnections\":\"dataxb\",\"disableMetricsCollection\":\"databovexsnmww\",\"\":{\"kdl\":\"dataujlsztpygq\",\"mkc\":\"datasn\",\"n\":\"datamksfejzmyvlbz\",\"ovhddvtnbtvl\":\"dataxzpdnb\"}}")
            .toObject(WarehouseSink.class);
        Assertions.assertEquals("guwqoszcmfm", model.copyCommandSettings().additionalOptions().get("nlj"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WarehouseSink model = new WarehouseSink().withWriteBatchSize("dataqamdlcu")
            .withWriteBatchTimeout("datamrvryakc")
            .withSinkRetryCount("datasnprda")
            .withSinkRetryWait("dataqgabbxexacgmt")
            .withMaxConcurrentConnections("dataxb")
            .withDisableMetricsCollection("databovexsnmww")
            .withPreCopyScript("datadukp")
            .withAllowCopyCommand("datayibwuzvmors")
            .withCopyCommandSettings(new DWCopyCommandSettings().withDefaultValues(Arrays.asList(
                new DWCopyCommandDefaultValue().withColumnName("dataxazuboigorwpbbjz")
                    .withDefaultValue("dataaqoilgkznnzpvjw"),
                new DWCopyCommandDefaultValue().withColumnName("dataoviceqyrajdvvsa").withDefaultValue("datayypercazc"),
                new DWCopyCommandDefaultValue().withColumnName("datavwwchazztvotfhha")
                    .withDefaultValue("dataxkfgxxef")))
                .withAdditionalOptions(mapOf("nlj", "guwqoszcmfm", "a", "gjcn", "tivsknewpnp", "m")))
            .withTableOption("datarvjbnhbxvvufq")
            .withWriteBehavior("datajuosajqnsrcqdth");
        model = BinaryData.fromObject(model).toObject(WarehouseSink.class);
        Assertions.assertEquals("guwqoszcmfm", model.copyCommandSettings().additionalOptions().get("nlj"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
