// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DWCopyCommandDefaultValue;
import com.azure.resourcemanager.datafactory.models.DWCopyCommandSettings;
import com.azure.resourcemanager.datafactory.models.WarehouseSink;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class WarehouseSinkTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WarehouseSink model = BinaryData.fromString(
            "{\"type\":\"WarehouseSink\",\"preCopyScript\":\"dataerltlhcjgjuopvk\",\"allowCopyCommand\":\"dataspksfxdmbxfyxw\",\"copyCommandSettings\":{\"defaultValues\":[{\"columnName\":\"datafyvkxgoxsv\",\"defaultValue\":\"dataucuxwnoj\"},{\"columnName\":\"datargqmbnfvyg\",\"defaultValue\":\"datadcf\"}],\"additionalOptions\":{\"vcksznngguucpyt\":\"psy\",\"lbcc\":\"xnujwffthbziieo\",\"au\":\"c\"}},\"tableOption\":\"datadevjrbgc\",\"writeBehavior\":\"dataqgsteeksbksv\",\"writeBatchSize\":\"datavoi\",\"writeBatchTimeout\":\"datavuqwljmzpyu\",\"sinkRetryCount\":\"dataw\",\"sinkRetryWait\":\"datahcgtctnq\",\"maxConcurrentConnections\":\"datago\",\"disableMetricsCollection\":\"datace\",\"\":{\"sklkw\":\"datatputmt\",\"mfxldqtm\":\"datanqqiqc\",\"ejnemrfqjhc\":\"datan\",\"lezbfgul\":\"datap\"}}")
            .toObject(WarehouseSink.class);
        Assertions.assertEquals("psy", model.copyCommandSettings().additionalOptions().get("vcksznngguucpyt"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WarehouseSink model
            = new WarehouseSink().withWriteBatchSize("datavoi")
                .withWriteBatchTimeout("datavuqwljmzpyu")
                .withSinkRetryCount("dataw")
                .withSinkRetryWait("datahcgtctnq")
                .withMaxConcurrentConnections("datago")
                .withDisableMetricsCollection("datace")
                .withPreCopyScript("dataerltlhcjgjuopvk")
                .withAllowCopyCommand("dataspksfxdmbxfyxw")
                .withCopyCommandSettings(new DWCopyCommandSettings()
                    .withDefaultValues(Arrays.asList(
                        new DWCopyCommandDefaultValue().withColumnName("datafyvkxgoxsv")
                            .withDefaultValue("dataucuxwnoj"),
                        new DWCopyCommandDefaultValue().withColumnName("datargqmbnfvyg").withDefaultValue("datadcf")))
                    .withAdditionalOptions(mapOf("vcksznngguucpyt", "psy", "lbcc", "xnujwffthbziieo", "au", "c")))
                .withTableOption("datadevjrbgc")
                .withWriteBehavior("dataqgsteeksbksv");
        model = BinaryData.fromObject(model).toObject(WarehouseSink.class);
        Assertions.assertEquals("psy", model.copyCommandSettings().additionalOptions().get("vcksznngguucpyt"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
