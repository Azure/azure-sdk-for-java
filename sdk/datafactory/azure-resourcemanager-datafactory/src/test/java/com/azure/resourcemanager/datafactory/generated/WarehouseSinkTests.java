// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DWCopyCommandDefaultValue;
import com.azure.resourcemanager.datafactory.models.DWCopyCommandSettings;
import com.azure.resourcemanager.datafactory.models.WarehouseSink;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class WarehouseSinkTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WarehouseSink model = BinaryData.fromString(
            "{\"type\":\"WarehouseSink\",\"preCopyScript\":\"datangguucp\",\"allowCopyCommand\":\"datasxnujwffthbzii\",\"copyCommandSettings\":{\"defaultValues\":[{\"columnName\":\"dataccccr\",\"defaultValue\":\"dataabdevjrbgcdxqgst\"}],\"additionalOptions\":{\"uqwljmzp\":\"sbksvvyvoibv\",\"go\":\"ukrwvvhcgtctnqd\"}},\"tableOption\":\"datace\",\"writeBehavior\":\"datartputmtjsklkw\",\"writeBatchSize\":\"dataqqiqckmfxldqtman\",\"writeBatchTimeout\":\"dataj\",\"sinkRetryCount\":\"datamrfq\",\"sinkRetryWait\":\"datacdpwlezbfgullq\",\"maxConcurrentConnections\":\"dataijyxcmqcggksrorx\",\"disableMetricsCollection\":\"datafhar\",\"\":{\"ftraylxzdujpuhb\":\"datat\",\"smlbz\":\"dataogfwbkxdhavegys\",\"wyrioqwmhcpuj\":\"dataxpdatvndvwwejvq\"}}")
            .toObject(WarehouseSink.class);
        Assertions.assertEquals("sbksvvyvoibv", model.copyCommandSettings().additionalOptions().get("uqwljmzp"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WarehouseSink model = new WarehouseSink().withWriteBatchSize("dataqqiqckmfxldqtman")
            .withWriteBatchTimeout("dataj")
            .withSinkRetryCount("datamrfq")
            .withSinkRetryWait("datacdpwlezbfgullq")
            .withMaxConcurrentConnections("dataijyxcmqcggksrorx")
            .withDisableMetricsCollection("datafhar")
            .withPreCopyScript("datangguucp")
            .withAllowCopyCommand("datasxnujwffthbzii")
            .withCopyCommandSettings(new DWCopyCommandSettings()
                .withDefaultValues(Arrays.asList(new DWCopyCommandDefaultValue().withColumnName("dataccccr")
                    .withDefaultValue("dataabdevjrbgcdxqgst")))
                .withAdditionalOptions(mapOf("uqwljmzp", "sbksvvyvoibv", "go", "ukrwvvhcgtctnqd")))
            .withTableOption("datace")
            .withWriteBehavior("datartputmtjsklkw");
        model = BinaryData.fromObject(model).toObject(WarehouseSink.class);
        Assertions.assertEquals("sbksvvyvoibv", model.copyCommandSettings().additionalOptions().get("uqwljmzp"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
