// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DWCopyCommandDefaultValue;
import com.azure.resourcemanager.datafactory.models.DWCopyCommandSettings;
import com.azure.resourcemanager.datafactory.models.WarehouseSink;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class WarehouseSinkTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WarehouseSink model = BinaryData.fromString(
            "{\"type\":\"WarehouseSink\",\"preCopyScript\":\"dataioqwmhcpujygnt\",\"allowCopyCommand\":\"datae\",\"copyCommandSettings\":{\"defaultValues\":[{\"columnName\":\"datath\",\"defaultValue\":\"datawy\"},{\"columnName\":\"dataxprsocfxlrzjjffl\",\"defaultValue\":\"datamuljfaulwlz\"},{\"columnName\":\"dataygnepj\",\"defaultValue\":\"dataxqdrphiyxjq\"}],\"additionalOptions\":{\"l\":\"pz\",\"wvio\":\"chpfzsfutaapb\"}},\"tableOption\":\"datayhsorcavkfhyoig\",\"writeBehavior\":\"dataedfterat\",\"writeBatchSize\":\"datakg\",\"writeBatchTimeout\":\"datarmujizd\",\"sinkRetryCount\":\"dataepfjdiwz\",\"sinkRetryWait\":\"datamumuc\",\"maxConcurrentConnections\":\"dataq\",\"disableMetricsCollection\":\"datascva\",\"\":{\"avgoullxpaylkras\":\"datagelnjgftqk\",\"skkziebmwyod\":\"datab\",\"qtxpf\":\"datamplgdxdtxbrdbw\",\"kdoukqsc\":\"datafrfvhbbnoevkkr\"}}")
            .toObject(WarehouseSink.class);
        Assertions.assertEquals("pz", model.copyCommandSettings().additionalOptions().get("l"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WarehouseSink model = new WarehouseSink().withWriteBatchSize("datakg").withWriteBatchTimeout("datarmujizd")
            .withSinkRetryCount("dataepfjdiwz").withSinkRetryWait("datamumuc").withMaxConcurrentConnections("dataq")
            .withDisableMetricsCollection("datascva").withPreCopyScript("dataioqwmhcpujygnt")
            .withAllowCopyCommand("datae")
            .withCopyCommandSettings(new DWCopyCommandSettings()
                .withDefaultValues(Arrays.asList(
                    new DWCopyCommandDefaultValue().withColumnName("datath").withDefaultValue("datawy"),
                    new DWCopyCommandDefaultValue().withColumnName("dataxprsocfxlrzjjffl")
                        .withDefaultValue("datamuljfaulwlz"),
                    new DWCopyCommandDefaultValue().withColumnName("dataygnepj").withDefaultValue("dataxqdrphiyxjq")))
                .withAdditionalOptions(mapOf("l", "pz", "wvio", "chpfzsfutaapb")))
            .withTableOption("datayhsorcavkfhyoig").withWriteBehavior("dataedfterat");
        model = BinaryData.fromObject(model).toObject(WarehouseSink.class);
        Assertions.assertEquals("pz", model.copyCommandSettings().additionalOptions().get("l"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
