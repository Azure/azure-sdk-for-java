// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.HDInsightActivityDebugInfoOption;
import com.azure.resourcemanager.datafactory.models.HDInsightMapReduceActivity;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class HDInsightMapReduceActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HDInsightMapReduceActivity model = BinaryData.fromString(
            "{\"type\":\"HDInsightMapReduce\",\"typeProperties\":{\"storageLinkedServices\":[{\"referenceName\":\"rnlbfnuppwqkskns\",\"parameters\":{\"cx\":\"datakjboyggrmz\",\"gmtgoeayhojdgwez\":\"dataphdkxwstabgejopv\"}},{\"referenceName\":\"r\",\"parameters\":{\"dtj\":\"databdjzcfdpxbwqgkfx\",\"bc\":\"datayevvuddnwj\"}},{\"referenceName\":\"flemxbmaiiv\",\"parameters\":{\"o\":\"datatzbkevh\",\"sis\":\"datajpumpqlugzydylf\"}},{\"referenceName\":\"dmfo\",\"parameters\":{\"tkprbm\":\"datasvfnxxkmrfz\"}}],\"arguments\":[\"datarfhfjwikva\",\"datajx\"],\"getDebugInfo\":\"Always\",\"className\":\"dataqilvajc\",\"jarFilePath\":\"datapwlf\",\"jarLinkedService\":{\"referenceName\":\"ardjqwdrooo\",\"parameters\":{\"vdqcmegwajjzxcq\":\"datasyd\"}},\"jarLibs\":[\"dataxewocwmadyelwo\",\"datalxa\",\"datahanfjrdcaw\",\"datazqldakbijcxctn\"],\"defines\":{\"yhnoll\":\"datayczzwhwsidnqiav\",\"eoxoe\":\"datauhocb\",\"fcurn\":\"dataprtz\",\"stok\":\"dataujcunyua\"}},\"linkedServiceName\":{\"referenceName\":\"myayblmcenjc\",\"parameters\":{\"yubytslfmajswrf\":\"dataamuplxksph\",\"gvkqz\":\"datas\"}},\"policy\":{\"timeout\":\"datas\",\"retry\":\"dataufnhejualug\",\"retryIntervalInSeconds\":1662073469,\"secureInput\":false,\"secureOutput\":true,\"\":{\"s\":\"datalvi\"}},\"name\":\"zwtzdyz\",\"description\":\"gnnsojdmesox\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"h\",\"dependencyConditions\":[\"Succeeded\",\"Skipped\",\"Succeeded\"],\"\":{\"xtwsreadghlokvis\":\"databiouuqox\",\"kegrtvwff\":\"datazmheimsioonnfjgr\"}}],\"userProperties\":[{\"name\":\"uxpyveavstzbz\",\"value\":\"datakksdjkanizdcjx\"},{\"name\":\"zpmwxvfrmvtwwb\",\"value\":\"datahivfosbrqeywhlq\"}],\"\":{\"hbqjlly\":\"datahypuvhucaw\",\"dioumgvwb\":\"databqvnbxgk\"}}")
            .toObject(HDInsightMapReduceActivity.class);
        Assertions.assertEquals("zwtzdyz", model.name());
        Assertions.assertEquals("gnnsojdmesox", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("h", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("uxpyveavstzbz", model.userProperties().get(0).name());
        Assertions.assertEquals("myayblmcenjc", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1662073469, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals("rnlbfnuppwqkskns", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.ALWAYS, model.getDebugInfo());
        Assertions.assertEquals("ardjqwdrooo", model.jarLinkedService().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HDInsightMapReduceActivity model = new HDInsightMapReduceActivity().withName("zwtzdyz")
            .withDescription("gnnsojdmesox")
            .withState(ActivityState.INACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
            .withDependsOn(Arrays.asList(new ActivityDependency().withActivity("h")
                .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED, DependencyCondition.SKIPPED,
                    DependencyCondition.SUCCEEDED))
                .withAdditionalProperties(mapOf())))
            .withUserProperties(
                Arrays.asList(new UserProperty().withName("uxpyveavstzbz").withValue("datakksdjkanizdcjx"),
                    new UserProperty().withName("zpmwxvfrmvtwwb").withValue("datahivfosbrqeywhlq")))
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("myayblmcenjc")
                .withParameters(mapOf("yubytslfmajswrf", "dataamuplxksph", "gvkqz", "datas")))
            .withPolicy(new ActivityPolicy().withTimeout("datas")
                .withRetry("dataufnhejualug")
                .withRetryIntervalInSeconds(1662073469)
                .withSecureInput(false)
                .withSecureOutput(true)
                .withAdditionalProperties(mapOf()))
            .withStorageLinkedServices(Arrays.asList(
                new LinkedServiceReference().withReferenceName("rnlbfnuppwqkskns")
                    .withParameters(mapOf("cx", "datakjboyggrmz", "gmtgoeayhojdgwez", "dataphdkxwstabgejopv")),
                new LinkedServiceReference().withReferenceName("r")
                    .withParameters(mapOf("dtj", "databdjzcfdpxbwqgkfx", "bc", "datayevvuddnwj")),
                new LinkedServiceReference().withReferenceName("flemxbmaiiv")
                    .withParameters(mapOf("o", "datatzbkevh", "sis", "datajpumpqlugzydylf")),
                new LinkedServiceReference().withReferenceName("dmfo")
                    .withParameters(mapOf("tkprbm", "datasvfnxxkmrfz"))))
            .withArguments(Arrays.asList("datarfhfjwikva", "datajx"))
            .withGetDebugInfo(HDInsightActivityDebugInfoOption.ALWAYS)
            .withClassName("dataqilvajc")
            .withJarFilePath("datapwlf")
            .withJarLinkedService(new LinkedServiceReference().withReferenceName("ardjqwdrooo")
                .withParameters(mapOf("vdqcmegwajjzxcq", "datasyd")))
            .withJarLibs(Arrays.asList("dataxewocwmadyelwo", "datalxa", "datahanfjrdcaw", "datazqldakbijcxctn"))
            .withDefines(mapOf("yhnoll", "datayczzwhwsidnqiav", "eoxoe", "datauhocb", "fcurn", "dataprtz", "stok",
                "dataujcunyua"));
        model = BinaryData.fromObject(model).toObject(HDInsightMapReduceActivity.class);
        Assertions.assertEquals("zwtzdyz", model.name());
        Assertions.assertEquals("gnnsojdmesox", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("h", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("uxpyveavstzbz", model.userProperties().get(0).name());
        Assertions.assertEquals("myayblmcenjc", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1662073469, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals("rnlbfnuppwqkskns", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.ALWAYS, model.getDebugInfo());
        Assertions.assertEquals("ardjqwdrooo", model.jarLinkedService().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
