// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.HDInsightActivityDebugInfoOption;
import com.azure.resourcemanager.datafactory.models.HDInsightMapReduceActivity;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class HDInsightMapReduceActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HDInsightMapReduceActivity model = BinaryData.fromString(
            "{\"type\":\"HDInsightMapReduce\",\"typeProperties\":{\"storageLinkedServices\":[{\"referenceName\":\"usvukgfzbykapme\",\"parameters\":{\"dtg\":\"datapvma\"}}],\"arguments\":[\"dataubnwymyewbfo\",\"datawv\",\"dataetj\",\"datanjbahxyfdd\"],\"getDebugInfo\":\"Failure\",\"className\":\"dataksr\",\"jarFilePath\":\"datajh\",\"jarLinkedService\":{\"referenceName\":\"rmptj\",\"parameters\":{\"pjracyxnzadfl\":\"dataaw\"}},\"jarLibs\":[\"datahgdzrcqdvapo\",\"dataeminerejrd\"],\"defines\":{\"mxhztdcadbmvqgqm\":\"datao\"}},\"linkedServiceName\":{\"referenceName\":\"rpagmhhwcyasz\",\"parameters\":{\"ni\":\"datamtcihupoelj\",\"awbsdeqqbdcbnrg\":\"datayoxajit\",\"mtgtnb\":\"datapnor\",\"rwldeinhnsd\":\"datasopuwesmxodyto\"}},\"policy\":{\"timeout\":\"dataaqtqnqmsiptzg\",\"retry\":\"dataujukenk\",\"retryIntervalInSeconds\":1282940357,\"secureInput\":true,\"secureOutput\":false,\"\":{\"kzxrmmoy\":\"dataobuihprvokodrpy\",\"xoubekafdxgtgcfk\":\"dataufkxy\"}},\"name\":\"aeu\",\"description\":\"htlk\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"qet\",\"dependencyConditions\":[\"Completed\",\"Skipped\",\"Succeeded\"],\"\":{\"btskmqkanuxj\":\"datawlwysrswzhciazw\",\"xlcdgkcufan\":\"datadyvzod\",\"sk\":\"datajlk\",\"qjwvqia\":\"datawuubafqzihmvw\"}}],\"userProperties\":[{\"name\":\"jzviv\",\"value\":\"datadlrtcfu\"},{\"name\":\"mzxhgwzby\",\"value\":\"datatwuuwehntjssj\"}],\"\":{\"h\":\"dataatpymvqi\",\"ityjznpryouujqye\":\"dataca\",\"vhc\":\"datazoivincnihm\"}}")
            .toObject(HDInsightMapReduceActivity.class);
        Assertions.assertEquals("aeu", model.name());
        Assertions.assertEquals("htlk", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("qet", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("jzviv", model.userProperties().get(0).name());
        Assertions.assertEquals("rpagmhhwcyasz", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1282940357, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals("usvukgfzbykapme", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.FAILURE, model.getDebugInfo());
        Assertions.assertEquals("rmptj", model.jarLinkedService().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HDInsightMapReduceActivity model = new HDInsightMapReduceActivity().withName("aeu").withDescription("htlk")
            .withState(ActivityState.INACTIVE).withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
            .withDependsOn(Arrays.asList(new ActivityDependency().withActivity("qet")
                .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED, DependencyCondition.SKIPPED,
                    DependencyCondition.SUCCEEDED))
                .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("jzviv").withValue("datadlrtcfu"),
                new UserProperty().withName("mzxhgwzby").withValue("datatwuuwehntjssj")))
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("rpagmhhwcyasz")
                .withParameters(mapOf("ni", "datamtcihupoelj", "awbsdeqqbdcbnrg", "datayoxajit", "mtgtnb", "datapnor",
                    "rwldeinhnsd", "datasopuwesmxodyto")))
            .withPolicy(new ActivityPolicy().withTimeout("dataaqtqnqmsiptzg").withRetry("dataujukenk")
                .withRetryIntervalInSeconds(1282940357).withSecureInput(true).withSecureOutput(false)
                .withAdditionalProperties(mapOf()))
            .withStorageLinkedServices(Arrays.asList(new LinkedServiceReference().withReferenceName("usvukgfzbykapme")
                .withParameters(mapOf("dtg", "datapvma"))))
            .withArguments(Arrays.asList("dataubnwymyewbfo", "datawv", "dataetj", "datanjbahxyfdd"))
            .withGetDebugInfo(HDInsightActivityDebugInfoOption.FAILURE).withClassName("dataksr")
            .withJarFilePath("datajh")
            .withJarLinkedService(new LinkedServiceReference().withReferenceName("rmptj")
                .withParameters(mapOf("pjracyxnzadfl", "dataaw")))
            .withJarLibs(Arrays.asList("datahgdzrcqdvapo", "dataeminerejrd"))
            .withDefines(mapOf("mxhztdcadbmvqgqm", "datao"));
        model = BinaryData.fromObject(model).toObject(HDInsightMapReduceActivity.class);
        Assertions.assertEquals("aeu", model.name());
        Assertions.assertEquals("htlk", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("qet", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("jzviv", model.userProperties().get(0).name());
        Assertions.assertEquals("rpagmhhwcyasz", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1282940357, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals("usvukgfzbykapme", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.FAILURE, model.getDebugInfo());
        Assertions.assertEquals("rmptj", model.jarLinkedService().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
