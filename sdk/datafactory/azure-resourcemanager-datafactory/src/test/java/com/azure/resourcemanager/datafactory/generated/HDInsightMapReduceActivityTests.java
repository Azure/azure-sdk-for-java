// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.HDInsightActivityDebugInfoOption;
import com.azure.resourcemanager.datafactory.models.HDInsightMapReduceActivity;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class HDInsightMapReduceActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HDInsightMapReduceActivity model = BinaryData.fromString(
            "{\"type\":\"HDInsightMapReduce\",\"typeProperties\":{\"storageLinkedServices\":[{\"referenceName\":\"oxwugdzwo\",\"parameters\":{\"c\":\"dataiz\"}},{\"referenceName\":\"pddzzdw\",\"parameters\":{\"uwunsnyqpmnyvnbm\":\"datamocnfzmuyykxlfly\",\"revt\":\"datapom\",\"xpnraeo\":\"datazclilzveisdnobxc\",\"xvsuhxrctcozfj\":\"dataixof\"}},{\"referenceName\":\"frbjrbqc\",\"parameters\":{\"wsicmhhvbovb\":\"datawbcycwasmrf\",\"dp\":\"dataxfylez\",\"mn\":\"dataurf\",\"zszlrv\":\"datakfzsouou\"}},{\"referenceName\":\"qldgii\",\"parameters\":{\"tyjf\":\"datakxprb\",\"qlruhhkkbfgr\":\"datajhbvllj\",\"pdredcvwsbsdy\":\"datascbmdrbtgm\",\"hgnfaanubjeb\":\"dataqjyrqouyfcfdedeu\"}}],\"arguments\":[\"dataksghsowmvtmj\",\"datahwn\",\"datab\"],\"getDebugInfo\":\"Failure\",\"className\":\"datapfjzcvlkpwav\",\"jarFilePath\":\"dataopecjmovrs\",\"jarLinkedService\":{\"referenceName\":\"l\",\"parameters\":{\"tudw\":\"datagrb\",\"luzokxph\":\"dataoxirz\"}},\"jarLibs\":[\"datawhwgbajmgctwamjj\",\"datavmu\",\"dataistnyzm\",\"datahopedmkxtdyxz\"],\"defines\":{\"khj\":\"datatgfbmocvblrvkqx\",\"yrqtu\":\"datarcqpxaajt\",\"ssbvlj\":\"datatzmubxngspazm\"}},\"linkedServiceName\":{\"referenceName\":\"tb\",\"parameters\":{\"q\":\"datahwcakkewgzaousj\",\"wezcknpmeva\":\"datajj\",\"hjoldwahehudi\":\"dataqjd\",\"d\":\"dataxolmmh\"}},\"policy\":{\"timeout\":\"dataoiwbmjqvmpzc\",\"retry\":\"dataogrripop\",\"retryIntervalInSeconds\":1331421673,\"secureInput\":false,\"secureOutput\":false,\"\":{\"wyq\":\"datadmsnezdumjqdhr\",\"kbepieh\":\"dataqmelm\",\"er\":\"datave\"}},\"name\":\"u\",\"description\":\"rnlbfnuppwqkskns\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"yggrmztcxyphd\",\"dependencyConditions\":[\"Skipped\"],\"\":{\"gmtgoeayhojdgwez\":\"dataabgejopv\",\"smbdjz\":\"datar\",\"yevvuddnwj\":\"datafdpxbwqgkfxcdtj\",\"flemxbmaiiv\":\"databc\"}},{\"activity\":\"pftzbkev\",\"dependencyConditions\":[\"Succeeded\"],\"\":{\"dyl\":\"datapumpqlugz\",\"dmfo\":\"datarsis\",\"svfnxxkmrfz\":\"datai\",\"azrfhfjwikvakj\":\"datatkprbm\"}}],\"userProperties\":[{\"name\":\"hqilvajc\",\"value\":\"datapwlf\"},{\"name\":\"fardjqwdrooooobs\",\"value\":\"datadqv\"},{\"name\":\"qcme\",\"value\":\"datawajjzxcqnl\"}],\"\":{\"xau\":\"datawocwmadyelwol\"}}")
            .toObject(HDInsightMapReduceActivity.class);
        Assertions.assertEquals("u", model.name());
        Assertions.assertEquals("rnlbfnuppwqkskns", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("yggrmztcxyphd", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("hqilvajc", model.userProperties().get(0).name());
        Assertions.assertEquals("tb", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1331421673, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals("oxwugdzwo", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.FAILURE, model.getDebugInfo());
        Assertions.assertEquals("l", model.jarLinkedService().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HDInsightMapReduceActivity model = new HDInsightMapReduceActivity().withName("u")
            .withDescription("rnlbfnuppwqkskns")
            .withState(ActivityState.ACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
            .withDependsOn(Arrays.asList(
                new ActivityDependency().withActivity("yggrmztcxyphd")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("pftzbkev")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED))
                    .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("hqilvajc").withValue("datapwlf"),
                new UserProperty().withName("fardjqwdrooooobs").withValue("datadqv"),
                new UserProperty().withName("qcme").withValue("datawajjzxcqnl")))
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("tb")
                .withParameters(mapOf("q", "datahwcakkewgzaousj", "wezcknpmeva", "datajj", "hjoldwahehudi", "dataqjd",
                    "d", "dataxolmmh")))
            .withPolicy(new ActivityPolicy().withTimeout("dataoiwbmjqvmpzc")
                .withRetry("dataogrripop")
                .withRetryIntervalInSeconds(1331421673)
                .withSecureInput(false)
                .withSecureOutput(false)
                .withAdditionalProperties(mapOf()))
            .withStorageLinkedServices(Arrays.asList(
                new LinkedServiceReference().withReferenceName("oxwugdzwo").withParameters(mapOf("c", "dataiz")),
                new LinkedServiceReference().withReferenceName("pddzzdw")
                    .withParameters(mapOf("uwunsnyqpmnyvnbm", "datamocnfzmuyykxlfly", "revt", "datapom", "xpnraeo",
                        "datazclilzveisdnobxc", "xvsuhxrctcozfj", "dataixof")),
                new LinkedServiceReference().withReferenceName("frbjrbqc")
                    .withParameters(mapOf("wsicmhhvbovb", "datawbcycwasmrf", "dp", "dataxfylez", "mn", "dataurf",
                        "zszlrv", "datakfzsouou")),
                new LinkedServiceReference().withReferenceName("qldgii")
                    .withParameters(mapOf("tyjf", "datakxprb", "qlruhhkkbfgr", "datajhbvllj", "pdredcvwsbsdy",
                        "datascbmdrbtgm", "hgnfaanubjeb", "dataqjyrqouyfcfdedeu"))))
            .withArguments(Arrays.asList("dataksghsowmvtmj", "datahwn", "datab"))
            .withGetDebugInfo(HDInsightActivityDebugInfoOption.FAILURE)
            .withClassName("datapfjzcvlkpwav")
            .withJarFilePath("dataopecjmovrs")
            .withJarLinkedService(new LinkedServiceReference().withReferenceName("l")
                .withParameters(mapOf("tudw", "datagrb", "luzokxph", "dataoxirz")))
            .withJarLibs(Arrays.asList("datawhwgbajmgctwamjj", "datavmu", "dataistnyzm", "datahopedmkxtdyxz"))
            .withDefines(mapOf("khj", "datatgfbmocvblrvkqx", "yrqtu", "datarcqpxaajt", "ssbvlj", "datatzmubxngspazm"));
        model = BinaryData.fromObject(model).toObject(HDInsightMapReduceActivity.class);
        Assertions.assertEquals("u", model.name());
        Assertions.assertEquals("rnlbfnuppwqkskns", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("yggrmztcxyphd", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("hqilvajc", model.userProperties().get(0).name());
        Assertions.assertEquals("tb", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1331421673, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals("oxwugdzwo", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.FAILURE, model.getDebugInfo());
        Assertions.assertEquals("l", model.jarLinkedService().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
