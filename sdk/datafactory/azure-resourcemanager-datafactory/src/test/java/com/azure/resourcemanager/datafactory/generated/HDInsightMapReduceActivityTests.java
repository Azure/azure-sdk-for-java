// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.HDInsightActivityDebugInfoOption;
import com.azure.resourcemanager.datafactory.models.HDInsightMapReduceActivity;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class HDInsightMapReduceActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HDInsightMapReduceActivity model = BinaryData.fromString(
            "{\"type\":\"HDInsightMapReduce\",\"typeProperties\":{\"storageLinkedServices\":[{\"referenceName\":\"ctnijxyczzw\",\"parameters\":{\"oyhnollnuhocbbe\":\"dataidnqia\",\"prtz\":\"dataxoe\",\"ujcunyua\":\"datafcurn\",\"hm\":\"datastok\"}},{\"referenceName\":\"ayblmcenjctcxamu\",\"parameters\":{\"swrf\":\"dataksphzyubytslfma\",\"gvkqz\":\"datas\"}}],\"arguments\":[\"datas\",\"datayufnhejualugyuxc\"],\"getDebugInfo\":\"None\",\"className\":\"datasnlvissyzwtzdyz\",\"jarFilePath\":\"datafgn\",\"jarLinkedService\":{\"referenceName\":\"ojdmesoxj\",\"parameters\":{\"pbiou\":\"databgfhjwchv\",\"lokvisqzmhe\":\"dataqoxbxtwsreadg\",\"vwff\":\"datamsioonnfjgrtkegr\",\"bzykk\":\"databvuxpyveavst\"}},\"jarLibs\":[\"datakani\"],\"defines\":{\"frm\":\"datajxgzpmwx\",\"eywhlqydhh\":\"datatwwbahivfosbr\",\"lly\":\"datapuvhucawmhbq\",\"dioumgvwb\":\"databqvnbxgk\"}},\"linkedServiceName\":{\"referenceName\":\"zheqvzwumm\",\"parameters\":{\"ihgcdujhz\":\"dataxxc\"}},\"policy\":{\"timeout\":\"datakqrbt\",\"retry\":\"dataifleizdu\",\"retryIntervalInSeconds\":802993205,\"secureInput\":false,\"secureOutput\":false,\"\":{\"liwgk\":\"dataabcinubyfs\",\"ggfgl\":\"datazlpsfrajpyuw\",\"mxkuyyrcqs\":\"datalsungzvytbq\"}},\"name\":\"qhugjeaetgmmf\",\"description\":\"dqoepwyyeupkp\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"fyrlqiykh\",\"dependencyConditions\":[\"Skipped\",\"Completed\",\"Succeeded\"],\"\":{\"yklyhmymkcc\":\"datalcbtxcsskgu\",\"v\":\"datalefawfeea\",\"gowfqrykikhf\":\"datamm\",\"fohtsmkf\":\"datawtcllzwaz\"}},{\"activity\":\"oxbavfseh\",\"dependencyConditions\":[\"Skipped\",\"Succeeded\"],\"\":{\"znf\":\"datannq\"}}],\"userProperties\":[{\"name\":\"o\",\"value\":\"dataexjcrw\"},{\"name\":\"dteyvpv\",\"value\":\"datacqjgwtiasfbp\"},{\"name\":\"mv\",\"value\":\"dataxxhbrysnszsehoe\"},{\"name\":\"vwbykrndxbkvzwq\",\"value\":\"datamfh\"}],\"\":{\"yfncwiyfzu\":\"datayed\",\"ccgtujiwzbzed\":\"databsaaxstnziv\",\"mct\":\"datacxygjhclnyoktc\",\"kemtajjfmk\":\"datajgbrxmxq\"}}")
            .toObject(HDInsightMapReduceActivity.class);
        Assertions.assertEquals("qhugjeaetgmmf", model.name());
        Assertions.assertEquals("dqoepwyyeupkp", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.onInactiveMarkAs());
        Assertions.assertEquals("fyrlqiykh", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("o", model.userProperties().get(0).name());
        Assertions.assertEquals("zheqvzwumm", model.linkedServiceName().referenceName());
        Assertions.assertEquals(802993205, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals("ctnijxyczzw", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.NONE, model.getDebugInfo());
        Assertions.assertEquals("ojdmesoxj", model.jarLinkedService().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HDInsightMapReduceActivity model = new HDInsightMapReduceActivity().withName("qhugjeaetgmmf")
            .withDescription("dqoepwyyeupkp")
            .withState(ActivityState.ACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SUCCEEDED)
            .withDependsOn(Arrays.asList(
                new ActivityDependency().withActivity("fyrlqiykh")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.COMPLETED,
                        DependencyCondition.SUCCEEDED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("oxbavfseh")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.SUCCEEDED))
                    .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("o").withValue("dataexjcrw"),
                new UserProperty().withName("dteyvpv").withValue("datacqjgwtiasfbp"),
                new UserProperty().withName("mv").withValue("dataxxhbrysnszsehoe"),
                new UserProperty().withName("vwbykrndxbkvzwq").withValue("datamfh")))
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("zheqvzwumm")
                .withParameters(mapOf("ihgcdujhz", "dataxxc")))
            .withPolicy(new ActivityPolicy().withTimeout("datakqrbt")
                .withRetry("dataifleizdu")
                .withRetryIntervalInSeconds(802993205)
                .withSecureInput(false)
                .withSecureOutput(false)
                .withAdditionalProperties(mapOf()))
            .withStorageLinkedServices(Arrays.asList(
                new LinkedServiceReference().withReferenceName("ctnijxyczzw")
                    .withParameters(mapOf("oyhnollnuhocbbe", "dataidnqia", "prtz", "dataxoe", "ujcunyua", "datafcurn",
                        "hm", "datastok")),
                new LinkedServiceReference().withReferenceName("ayblmcenjctcxamu")
                    .withParameters(mapOf("swrf", "dataksphzyubytslfma", "gvkqz", "datas"))))
            .withArguments(Arrays.asList("datas", "datayufnhejualugyuxc"))
            .withGetDebugInfo(HDInsightActivityDebugInfoOption.NONE)
            .withClassName("datasnlvissyzwtzdyz")
            .withJarFilePath("datafgn")
            .withJarLinkedService(new LinkedServiceReference().withReferenceName("ojdmesoxj")
                .withParameters(mapOf("pbiou", "databgfhjwchv", "lokvisqzmhe", "dataqoxbxtwsreadg", "vwff",
                    "datamsioonnfjgrtkegr", "bzykk", "databvuxpyveavst")))
            .withJarLibs(Arrays.asList("datakani"))
            .withDefines(mapOf("frm", "datajxgzpmwx", "eywhlqydhh", "datatwwbahivfosbr", "lly", "datapuvhucawmhbq",
                "dioumgvwb", "databqvnbxgk"));
        model = BinaryData.fromObject(model).toObject(HDInsightMapReduceActivity.class);
        Assertions.assertEquals("qhugjeaetgmmf", model.name());
        Assertions.assertEquals("dqoepwyyeupkp", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.onInactiveMarkAs());
        Assertions.assertEquals("fyrlqiykh", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("o", model.userProperties().get(0).name());
        Assertions.assertEquals("zheqvzwumm", model.linkedServiceName().referenceName());
        Assertions.assertEquals(802993205, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals("ctnijxyczzw", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.NONE, model.getDebugInfo());
        Assertions.assertEquals("ojdmesoxj", model.jarLinkedService().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
