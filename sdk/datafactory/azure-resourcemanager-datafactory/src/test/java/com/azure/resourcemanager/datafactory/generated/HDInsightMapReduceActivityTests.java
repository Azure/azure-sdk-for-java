// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.HDInsightActivityDebugInfoOption;
import com.azure.resourcemanager.datafactory.models.HDInsightMapReduceActivity;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class HDInsightMapReduceActivityTests {
    @Test
    public void testDeserialize() {
        HDInsightMapReduceActivity model =
            BinaryData
                .fromString(
                    "{\"type\":\"HDInsightMapReduce\",\"typeProperties\":{\"storageLinkedServices\":[{\"referenceName\":\"tzarogatmoljiy\",\"parameters\":{}}],\"arguments\":[],\"getDebugInfo\":\"Failure\",\"jarLinkedService\":{\"referenceName\":\"vfkn\",\"parameters\":{}},\"jarLibs\":[],\"defines\":{}},\"linkedServiceName\":{\"referenceName\":\"nsjulugdybnh\",\"parameters\":{}},\"policy\":{\"retryIntervalInSeconds\":1634987138,\"secureInput\":false,\"secureOutput\":false,\"\":{}},\"name\":\"ihtd\",\"description\":\"wjekptycaydbj\",\"dependsOn\":[{\"activity\":\"ymlcfnzhmhsurlg\",\"dependencyConditions\":[\"Failed\",\"Failed\",\"Succeeded\"],\"\":{}}],\"userProperties\":[{\"name\":\"tauolawiubmom\"},{\"name\":\"gvvjhvvlr\"},{\"name\":\"ohewjj\"}],\"\":{}}")
                .toObject(HDInsightMapReduceActivity.class);
        Assertions.assertEquals("ihtd", model.name());
        Assertions.assertEquals("wjekptycaydbj", model.description());
        Assertions.assertEquals("ymlcfnzhmhsurlg", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("tauolawiubmom", model.userProperties().get(0).name());
        Assertions.assertEquals("nsjulugdybnh", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1634987138, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals("tzarogatmoljiy", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.FAILURE, model.getDebugInfo());
        Assertions.assertEquals("vfkn", model.jarLinkedService().referenceName());
    }

    @Test
    public void testSerialize() {
        HDInsightMapReduceActivity model =
            new HDInsightMapReduceActivity()
                .withName("ihtd")
                .withDescription("wjekptycaydbj")
                .withDependsOn(
                    Arrays
                        .asList(
                            new ActivityDependency()
                                .withActivity("ymlcfnzhmhsurlg")
                                .withDependencyConditions(
                                    Arrays
                                        .asList(
                                            DependencyCondition.FAILED,
                                            DependencyCondition.FAILED,
                                            DependencyCondition.SUCCEEDED))
                                .withAdditionalProperties(mapOf())))
                .withUserProperties(
                    Arrays
                        .asList(
                            new UserProperty().withName("tauolawiubmom"),
                            new UserProperty().withName("gvvjhvvlr"),
                            new UserProperty().withName("ohewjj")))
                .withLinkedServiceName(
                    new LinkedServiceReference().withReferenceName("nsjulugdybnh").withParameters(mapOf()))
                .withPolicy(
                    new ActivityPolicy()
                        .withRetryIntervalInSeconds(1634987138)
                        .withSecureInput(false)
                        .withSecureOutput(false)
                        .withAdditionalProperties(mapOf()))
                .withStorageLinkedServices(
                    Arrays
                        .asList(
                            new LinkedServiceReference().withReferenceName("tzarogatmoljiy").withParameters(mapOf())))
                .withArguments(Arrays.asList())
                .withGetDebugInfo(HDInsightActivityDebugInfoOption.FAILURE)
                .withJarLinkedService(new LinkedServiceReference().withReferenceName("vfkn").withParameters(mapOf()))
                .withJarLibs(Arrays.asList())
                .withDefines(mapOf());
        model = BinaryData.fromObject(model).toObject(HDInsightMapReduceActivity.class);
        Assertions.assertEquals("ihtd", model.name());
        Assertions.assertEquals("wjekptycaydbj", model.description());
        Assertions.assertEquals("ymlcfnzhmhsurlg", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("tauolawiubmom", model.userProperties().get(0).name());
        Assertions.assertEquals("nsjulugdybnh", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1634987138, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals("tzarogatmoljiy", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.FAILURE, model.getDebugInfo());
        Assertions.assertEquals("vfkn", model.jarLinkedService().referenceName());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
