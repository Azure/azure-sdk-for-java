// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.HDInsightActivityDebugInfoOption;
import com.azure.resourcemanager.datafactory.models.HDInsightMapReduceActivity;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class HDInsightMapReduceActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HDInsightMapReduceActivity model = BinaryData.fromString(
            "{\"type\":\"HDInsightMapReduce\",\"typeProperties\":{\"storageLinkedServices\":[{\"referenceName\":\"oaafksormfhr\",\"parameters\":{\"ob\":\"dataxmnrdf\",\"aupjmjig\":\"datarvon\",\"xtoxlxojijtt\":\"datapbdfrtasau\",\"fs\":\"datayrxyn\"}}],\"arguments\":[\"dataci\",\"datashcpxftyh\"],\"getDebugInfo\":\"None\",\"className\":\"datauqsdurfqaawryc\",\"jarFilePath\":\"datazs\",\"jarLinkedService\":{\"referenceName\":\"rzt\",\"parameters\":{\"cighl\":\"dataysxxajr\",\"wcaxj\":\"dataddvnobesowbtnfq\"}},\"jarLibs\":[\"dataehoucmeuu\",\"dataajiotlcxofqjninr\",\"datakqekqtiuveaz\"],\"defines\":{\"lspih\":\"datawbiwygwpwquxiqg\",\"fizef\":\"dataxgvviotvoolk\",\"fwaehs\":\"databrndaquxvuf\"}},\"linkedServiceName\":{\"referenceName\":\"s\",\"parameters\":{\"eyeblkgupgnstq\":\"datavpys\"}},\"policy\":{\"timeout\":\"datafm\",\"retry\":\"dataoartvkhufktqgtjf\",\"retryIntervalInSeconds\":1205700344,\"secureInput\":false,\"secureOutput\":false,\"\":{\"kfzt\":\"datak\",\"kegyskmh\":\"datavonbtnnwa\"}},\"name\":\"wsbznjngerw\",\"description\":\"lpsswoslqmftk\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"fbdbzbaboeegale\",\"dependencyConditions\":[\"Succeeded\"],\"\":{\"btnhiaqegj\":\"datayzilocn\",\"oqzzyrovvna\":\"datahyvnqbhclbbk\"}},{\"activity\":\"xmjmhclhcqcjn\",\"dependencyConditions\":[\"Failed\",\"Failed\",\"Completed\"],\"\":{\"jebbacscirztsapx\":\"datasidasovlrjggvyd\",\"whsfhecpstfe\":\"databk\",\"qmlgsghcnybhvzl\":\"databsl\"}}],\"userProperties\":[{\"name\":\"wjaepjm\",\"value\":\"dataruzogsszoqj\"},{\"name\":\"nfaxcd\",\"value\":\"datamqe\"},{\"name\":\"hsirotj\",\"value\":\"dataltugobscpt\"}],\"\":{\"fozn\":\"dataqyuvhlpmjpzgjnq\",\"oumpks\":\"datad\"}}")
            .toObject(HDInsightMapReduceActivity.class);
        Assertions.assertEquals("wsbznjngerw", model.name());
        Assertions.assertEquals("lpsswoslqmftk", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.onInactiveMarkAs());
        Assertions.assertEquals("fbdbzbaboeegale", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("wjaepjm", model.userProperties().get(0).name());
        Assertions.assertEquals("s", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1205700344, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals("oaafksormfhr", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.NONE, model.getDebugInfo());
        Assertions.assertEquals("rzt", model.jarLinkedService().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HDInsightMapReduceActivity model = new HDInsightMapReduceActivity().withName("wsbznjngerw")
            .withDescription("lpsswoslqmftk")
            .withState(ActivityState.INACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SUCCEEDED)
            .withDependsOn(Arrays.asList(
                new ActivityDependency().withActivity("fbdbzbaboeegale")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("xmjmhclhcqcjn")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED, DependencyCondition.FAILED,
                        DependencyCondition.COMPLETED))
                    .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("wjaepjm").withValue("dataruzogsszoqj"),
                new UserProperty().withName("nfaxcd").withValue("datamqe"),
                new UserProperty().withName("hsirotj").withValue("dataltugobscpt")))
            .withLinkedServiceName(
                new LinkedServiceReference().withReferenceName("s").withParameters(mapOf("eyeblkgupgnstq", "datavpys")))
            .withPolicy(new ActivityPolicy().withTimeout("datafm")
                .withRetry("dataoartvkhufktqgtjf")
                .withRetryIntervalInSeconds(1205700344)
                .withSecureInput(false)
                .withSecureOutput(false)
                .withAdditionalProperties(mapOf()))
            .withStorageLinkedServices(Arrays.asList(new LinkedServiceReference().withReferenceName("oaafksormfhr")
                .withParameters(mapOf("ob", "dataxmnrdf", "aupjmjig", "datarvon", "xtoxlxojijtt", "datapbdfrtasau",
                    "fs", "datayrxyn"))))
            .withArguments(Arrays.asList("dataci", "datashcpxftyh"))
            .withGetDebugInfo(HDInsightActivityDebugInfoOption.NONE)
            .withClassName("datauqsdurfqaawryc")
            .withJarFilePath("datazs")
            .withJarLinkedService(new LinkedServiceReference().withReferenceName("rzt")
                .withParameters(mapOf("cighl", "dataysxxajr", "wcaxj", "dataddvnobesowbtnfq")))
            .withJarLibs(Arrays.asList("dataehoucmeuu", "dataajiotlcxofqjninr", "datakqekqtiuveaz"))
            .withDefines(
                mapOf("lspih", "datawbiwygwpwquxiqg", "fizef", "dataxgvviotvoolk", "fwaehs", "databrndaquxvuf"));
        model = BinaryData.fromObject(model).toObject(HDInsightMapReduceActivity.class);
        Assertions.assertEquals("wsbznjngerw", model.name());
        Assertions.assertEquals("lpsswoslqmftk", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.onInactiveMarkAs());
        Assertions.assertEquals("fbdbzbaboeegale", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("wjaepjm", model.userProperties().get(0).name());
        Assertions.assertEquals("s", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1205700344, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals("oaafksormfhr", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.NONE, model.getDebugInfo());
        Assertions.assertEquals("rzt", model.jarLinkedService().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
