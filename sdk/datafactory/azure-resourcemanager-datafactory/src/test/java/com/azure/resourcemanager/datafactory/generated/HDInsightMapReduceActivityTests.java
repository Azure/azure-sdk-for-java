// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.HDInsightActivityDebugInfoOption;
import com.azure.resourcemanager.datafactory.models.HDInsightMapReduceActivity;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class HDInsightMapReduceActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HDInsightMapReduceActivity model = BinaryData.fromString(
            "{\"type\":\"HDInsightMapReduce\",\"typeProperties\":{\"storageLinkedServices\":[{\"referenceName\":\"jmhclhcqcjngwmb\",\"parameters\":{\"jebbacscirztsapx\":\"datasidasovlrjggvyd\",\"whsfhecpstfe\":\"databk\",\"qmlgsghcnybhvzl\":\"databsl\"}},{\"referenceName\":\"bgwjaepjmkruzo\",\"parameters\":{\"sirotj\":\"datazoqjbnfaxcdcmqej\",\"kgqyuvhlpmjpzgjn\":\"dataltugobscpt\",\"kdjpfsmdg\":\"dataifoznfdboumpks\"}},{\"referenceName\":\"hdlwlehhqxy\",\"parameters\":{\"zgryf\":\"datakwvrrptblsata\",\"skuimv\":\"datawwqbeyvwdnjmji\",\"ucnpaesrairefif\":\"dataiyicxnxcimalvz\"}},{\"referenceName\":\"isl\",\"parameters\":{\"gcbrmmweeuy\":\"dataqqjmfrmqe\",\"nad\":\"datahjhpxjlgiurmli\",\"kwokefd\":\"dataeqfxzcxvpogrtkdi\",\"yyeytrwyojhmgvm\":\"dataeppycwsyqxfowfn\"}}],\"arguments\":[\"datajazqlmigkxtgs\",\"dataa\",\"datanholkoyxm\"],\"getDebugInfo\":\"None\",\"className\":\"datadsqwvzunrqvu\",\"jarFilePath\":\"datajxsrnqzd\",\"jarLinkedService\":{\"referenceName\":\"wof\",\"parameters\":{\"w\":\"datafrmoftilhoyem\",\"rcdtkv\":\"dataepgdd\",\"ubmhsxtry\":\"datarifcqmfv\",\"hrizwmptsygqztn\":\"datarvwmmuovturdhnn\"}},\"jarLibs\":[\"dataeizuapgqxe\",\"databvwxyumqoqw\"],\"defines\":{\"xmxlnhqxzewlww\":\"datayiyeigngrzve\"}},\"linkedServiceName\":{\"referenceName\":\"pvpc\",\"parameters\":{\"vfctsfujdapc\":\"dataovzkwhdtf\",\"tddydbat\":\"datagamgbnktg\",\"rwsdy\":\"dataxkwcolna\"}},\"policy\":{\"timeout\":\"datan\",\"retry\":\"datapcpmvnzhds\",\"retryIntervalInSeconds\":457436520,\"secureInput\":true,\"secureOutput\":true,\"\":{\"lehsnlmdosiyzf\":\"datajrruhzvveer\",\"maekc\":\"datacczkggbmzdnyrmo\",\"wdqilzogi\":\"dataumckcbsakoucss\"}},\"name\":\"grqzwypwhfybflrp\",\"description\":\"gqqxe\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"vuisede\",\"dependencyConditions\":[\"Skipped\",\"Failed\",\"Succeeded\",\"Failed\"],\"\":{\"pvwx\":\"datanqrqdxvb\",\"zss\":\"datalsvicvpagwohkro\"}},{\"activity\":\"mlozjyovrllvhbgk\",\"dependencyConditions\":[\"Completed\",\"Succeeded\",\"Succeeded\",\"Succeeded\"],\"\":{\"lynanmwzpfb\":\"dataflgps\",\"rxizorqliblybx\":\"dataqjrz\"}},{\"activity\":\"jzknkffzdyozn\",\"dependencyConditions\":[\"Completed\"],\"\":{\"fg\":\"datafdedlmfwa\",\"iwxmcsxidazs\":\"datawe\",\"dcilinbuok\":\"datawhuyik\"}},{\"activity\":\"fperheiplzms\",\"dependencyConditions\":[\"Completed\",\"Skipped\",\"Failed\"],\"\":{\"bpmzedmf\":\"datavaloauuwoigofu\"}}],\"userProperties\":[{\"name\":\"lmyom\",\"value\":\"datavbo\"}],\"\":{\"v\":\"dataaixipcwyinfywt\",\"wraow\":\"datanoemqwutbyaeyy\"}}")
            .toObject(HDInsightMapReduceActivity.class);
        Assertions.assertEquals("grqzwypwhfybflrp", model.name());
        Assertions.assertEquals("gqqxe", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("vuisede", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("lmyom", model.userProperties().get(0).name());
        Assertions.assertEquals("pvpc", model.linkedServiceName().referenceName());
        Assertions.assertEquals(457436520, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals("jmhclhcqcjngwmb", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.NONE, model.getDebugInfo());
        Assertions.assertEquals("wof", model.jarLinkedService().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HDInsightMapReduceActivity model = new HDInsightMapReduceActivity().withName("grqzwypwhfybflrp")
            .withDescription("gqqxe").withState(ActivityState.INACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
            .withDependsOn(Arrays.asList(
                new ActivityDependency().withActivity("vuisede")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.FAILED,
                        DependencyCondition.SUCCEEDED, DependencyCondition.FAILED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("mlozjyovrllvhbgk")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED,
                        DependencyCondition.SUCCEEDED, DependencyCondition.SUCCEEDED, DependencyCondition.SUCCEEDED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("jzknkffzdyozn")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("fperheiplzms")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED, DependencyCondition.SKIPPED,
                        DependencyCondition.FAILED))
                    .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("lmyom").withValue("datavbo")))
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("pvpc").withParameters(
                mapOf("vfctsfujdapc", "dataovzkwhdtf", "tddydbat", "datagamgbnktg", "rwsdy", "dataxkwcolna")))
            .withPolicy(new ActivityPolicy().withTimeout("datan").withRetry("datapcpmvnzhds")
                .withRetryIntervalInSeconds(457436520).withSecureInput(true).withSecureOutput(true)
                .withAdditionalProperties(mapOf()))
            .withStorageLinkedServices(Arrays.asList(
                new LinkedServiceReference().withReferenceName("jmhclhcqcjngwmb")
                    .withParameters(mapOf("jebbacscirztsapx", "datasidasovlrjggvyd", "whsfhecpstfe", "databk",
                        "qmlgsghcnybhvzl", "databsl")),
                new LinkedServiceReference().withReferenceName("bgwjaepjmkruzo")
                    .withParameters(mapOf("sirotj", "datazoqjbnfaxcdcmqej", "kgqyuvhlpmjpzgjn", "dataltugobscpt",
                        "kdjpfsmdg", "dataifoznfdboumpks")),
                new LinkedServiceReference().withReferenceName("hdlwlehhqxy")
                    .withParameters(mapOf("zgryf", "datakwvrrptblsata", "skuimv", "datawwqbeyvwdnjmji",
                        "ucnpaesrairefif", "dataiyicxnxcimalvz")),
                new LinkedServiceReference().withReferenceName("isl")
                    .withParameters(mapOf("gcbrmmweeuy", "dataqqjmfrmqe", "nad", "datahjhpxjlgiurmli", "kwokefd",
                        "dataeqfxzcxvpogrtkdi", "yyeytrwyojhmgvm", "dataeppycwsyqxfowfn"))))
            .withArguments(Arrays.asList("datajazqlmigkxtgs", "dataa", "datanholkoyxm"))
            .withGetDebugInfo(HDInsightActivityDebugInfoOption.NONE).withClassName("datadsqwvzunrqvu")
            .withJarFilePath("datajxsrnqzd")
            .withJarLinkedService(new LinkedServiceReference().withReferenceName("wof")
                .withParameters(mapOf("w", "datafrmoftilhoyem", "rcdtkv", "dataepgdd", "ubmhsxtry", "datarifcqmfv",
                    "hrizwmptsygqztn", "datarvwmmuovturdhnn")))
            .withJarLibs(Arrays.asList("dataeizuapgqxe", "databvwxyumqoqw"))
            .withDefines(mapOf("xmxlnhqxzewlww", "datayiyeigngrzve"));
        model = BinaryData.fromObject(model).toObject(HDInsightMapReduceActivity.class);
        Assertions.assertEquals("grqzwypwhfybflrp", model.name());
        Assertions.assertEquals("gqqxe", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("vuisede", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("lmyom", model.userProperties().get(0).name());
        Assertions.assertEquals("pvpc", model.linkedServiceName().referenceName());
        Assertions.assertEquals(457436520, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals("jmhclhcqcjngwmb", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.NONE, model.getDebugInfo());
        Assertions.assertEquals("wof", model.jarLinkedService().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
