// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.DatabricksSparkPythonActivity;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class DatabricksSparkPythonActivityTests {
    @Test
    public void testDeserialize() {
        DatabricksSparkPythonActivity model =
            BinaryData
                .fromString(
                    "{\"type\":\"DatabricksSparkPython\",\"typeProperties\":{\"parameters\":[],\"libraries\":[{}]},\"linkedServiceName\":{\"referenceName\":\"uuzhw\",\"parameters\":{}},\"policy\":{\"retryIntervalInSeconds\":1624681992,\"secureInput\":true,\"secureOutput\":false,\"\":{}},\"name\":\"b\",\"description\":\"kymffztsils\",\"dependsOn\":[{\"activity\":\"syeiih\",\"dependencyConditions\":[\"Completed\",\"Completed\"],\"\":{}}],\"userProperties\":[{\"name\":\"yese\"}],\"\":{}}")
                .toObject(DatabricksSparkPythonActivity.class);
        Assertions.assertEquals("b", model.name());
        Assertions.assertEquals("kymffztsils", model.description());
        Assertions.assertEquals("syeiih", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("yese", model.userProperties().get(0).name());
        Assertions.assertEquals("uuzhw", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1624681992, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
    }

    @Test
    public void testSerialize() {
        DatabricksSparkPythonActivity model =
            new DatabricksSparkPythonActivity()
                .withName("b")
                .withDescription("kymffztsils")
                .withDependsOn(
                    Arrays
                        .asList(
                            new ActivityDependency()
                                .withActivity("syeiih")
                                .withDependencyConditions(
                                    Arrays.asList(DependencyCondition.COMPLETED, DependencyCondition.COMPLETED))
                                .withAdditionalProperties(mapOf())))
                .withUserProperties(Arrays.asList(new UserProperty().withName("yese")))
                .withLinkedServiceName(new LinkedServiceReference().withReferenceName("uuzhw").withParameters(mapOf()))
                .withPolicy(
                    new ActivityPolicy()
                        .withRetryIntervalInSeconds(1624681992)
                        .withSecureInput(true)
                        .withSecureOutput(false)
                        .withAdditionalProperties(mapOf()))
                .withParameters(Arrays.asList())
                .withLibraries(Arrays.asList(mapOf()));
        model = BinaryData.fromObject(model).toObject(DatabricksSparkPythonActivity.class);
        Assertions.assertEquals("b", model.name());
        Assertions.assertEquals("kymffztsils", model.description());
        Assertions.assertEquals("syeiih", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("yese", model.userProperties().get(0).name());
        Assertions.assertEquals("uuzhw", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1624681992, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
