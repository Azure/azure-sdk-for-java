// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DatabricksSparkPythonActivity;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DatabricksSparkPythonActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DatabricksSparkPythonActivity model = BinaryData.fromString(
            "{\"type\":\"DatabricksSparkPython\",\"typeProperties\":{\"pythonFile\":\"datanezdp\",\"parameters\":[\"dataqhbbzfcjmhpobu\",\"datapdyztqpszbtbx\",\"datambyltd\",\"dataraxehxotizvwiha\"],\"libraries\":[{\"veb\":\"datafovjiyl\"},{\"a\":\"datavbzsmgeyok\",\"ebgaaxffttfqlcxy\":\"dataehxs\",\"sq\":\"datacmogfbweuazxts\"}]},\"linkedServiceName\":{\"referenceName\":\"dsb\",\"parameters\":{\"bumpplbcarcyrftc\":\"datamwnicdgim\",\"hdlrfyonnb\":\"dataxzmxww\",\"zodolehchimzrc\":\"datavxrcmrdmyjcou\",\"obuanybfm\":\"datazirkyxhqwoxm\"}},\"policy\":{\"timeout\":\"datahpqnzpf\",\"retry\":\"datappkqufdmgmfyia\",\"retryIntervalInSeconds\":410855130,\"secureInput\":true,\"secureOutput\":true,\"\":{\"knygzdrdicwm\":\"datalhyfxmrqpi\",\"hjvvrrxclf\":\"dataeavawywofgccj\"}},\"name\":\"mx\",\"description\":\"qwyiuhhuftnuigx\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"hwxossokafy\",\"dependencyConditions\":[\"Completed\",\"Succeeded\",\"Skipped\",\"Failed\"],\"\":{\"rcsyjxdwvdklgwo\":\"dataijgjbevt\",\"syaohizfysanrbup\":\"datawalefmenbajzeelb\",\"y\":\"datatkddohxvcsoq\",\"danufiwtkhcmoc\":\"datacqpmywt\"}},{\"activity\":\"gtmfug\",\"dependencyConditions\":[\"Skipped\",\"Skipped\"],\"\":{\"dcrdveccmqenfgba\":\"datastkkztexdsnmh\",\"denv\":\"datauuyt\"}},{\"activity\":\"olfiigox\",\"dependencyConditions\":[\"Completed\",\"Succeeded\",\"Succeeded\"],\"\":{\"cfayllx\":\"dataisyydoymccw\",\"tsmyfgted\":\"datahqvmilpgxeaqwogp\",\"dkypckhqooqni\":\"datamcoruti\"}}],\"userProperties\":[{\"name\":\"qsudtmkmgc\",\"value\":\"datapv\"},{\"name\":\"kngvpsukkk\",\"value\":\"datakghugfdugqhmo\"},{\"name\":\"ekoxylcbp\",\"value\":\"datatjtiidozfrgvqurr\"}],\"\":{\"oiikr\":\"datajdrsvohjg\",\"ja\":\"datalzsgpoiccbzqko\",\"zkq\":\"datadm\",\"tazqsucttp\":\"datalz\"}}")
            .toObject(DatabricksSparkPythonActivity.class);
        Assertions.assertEquals("mx", model.name());
        Assertions.assertEquals("qwyiuhhuftnuigx", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("hwxossokafy", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("qsudtmkmgc", model.userProperties().get(0).name());
        Assertions.assertEquals("dsb", model.linkedServiceName().referenceName());
        Assertions.assertEquals(410855130, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DatabricksSparkPythonActivity model = new DatabricksSparkPythonActivity().withName("mx")
            .withDescription("qwyiuhhuftnuigx")
            .withState(ActivityState.ACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
            .withDependsOn(Arrays.asList(
                new ActivityDependency().withActivity("hwxossokafy")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED,
                        DependencyCondition.SUCCEEDED, DependencyCondition.SKIPPED, DependencyCondition.FAILED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("gtmfug")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.SKIPPED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("olfiigox")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED,
                        DependencyCondition.SUCCEEDED, DependencyCondition.SUCCEEDED))
                    .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("qsudtmkmgc").withValue("datapv"),
                new UserProperty().withName("kngvpsukkk").withValue("datakghugfdugqhmo"),
                new UserProperty().withName("ekoxylcbp").withValue("datatjtiidozfrgvqurr")))
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("dsb")
                .withParameters(mapOf("bumpplbcarcyrftc", "datamwnicdgim", "hdlrfyonnb", "dataxzmxww", "zodolehchimzrc",
                    "datavxrcmrdmyjcou", "obuanybfm", "datazirkyxhqwoxm")))
            .withPolicy(new ActivityPolicy().withTimeout("datahpqnzpf")
                .withRetry("datappkqufdmgmfyia")
                .withRetryIntervalInSeconds(410855130)
                .withSecureInput(true)
                .withSecureOutput(true)
                .withAdditionalProperties(mapOf()))
            .withPythonFile("datanezdp")
            .withParameters(
                Arrays.asList("dataqhbbzfcjmhpobu", "datapdyztqpszbtbx", "datambyltd", "dataraxehxotizvwiha"))
            .withLibraries(Arrays.asList(mapOf("veb", "datafovjiyl"),
                mapOf("a", "datavbzsmgeyok", "ebgaaxffttfqlcxy", "dataehxs", "sq", "datacmogfbweuazxts")));
        model = BinaryData.fromObject(model).toObject(DatabricksSparkPythonActivity.class);
        Assertions.assertEquals("mx", model.name());
        Assertions.assertEquals("qwyiuhhuftnuigx", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("hwxossokafy", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("qsudtmkmgc", model.userProperties().get(0).name());
        Assertions.assertEquals("dsb", model.linkedServiceName().referenceName());
        Assertions.assertEquals(410855130, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
