// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DatabricksSparkPythonActivity;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DatabricksSparkPythonActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DatabricksSparkPythonActivity model = BinaryData.fromString(
            "{\"type\":\"hymd\",\"typeProperties\":{\"pythonFile\":\"datackijv\",\"parameters\":[\"datagzkfjq\",\"databbpjlrvxryjxjd\"],\"libraries\":[{\"twzgbuh\":\"datanjalccix\",\"mfufs\":\"datarwqrfejznz\"},{\"tlcqaafuwxehoza\":\"datasjiojv\",\"y\":\"databgcbdkq\",\"vgowkak\":\"datavtimyccdognhw\",\"jiykwbytuzhcpx\":\"datajns\"}]},\"linkedServiceName\":{\"referenceName\":\"zlyoiyovc\",\"parameters\":{\"edowmhgzrrikvyu\":\"dataalveavuzjezraj\"}},\"policy\":{\"timeout\":\"dataopdeqqfyc\",\"retry\":\"dataupxf\",\"retryIntervalInSeconds\":1522713628,\"secureInput\":false,\"secureOutput\":true,\"\":{\"ilgamxnj\":\"dataptqbwn\",\"pnsbbhdjeegllcy\":\"dataw\"}},\"name\":\"ukfmkq\",\"description\":\"zvxknyg\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"xjyxhwvnyup\",\"dependencyConditions\":[\"Skipped\",\"Failed\"],\"\":{\"lcr\":\"datanuddlazvsmnx\",\"oxehynur\":\"databymgfwdxukm\"}},{\"activity\":\"w\",\"dependencyConditions\":[\"Completed\",\"Skipped\"],\"\":{\"o\":\"datamda\",\"ym\":\"datajnvmfm\",\"pjxdi\":\"datalztorvw\",\"kbcouavo\":\"dataiutdz\"}},{\"activity\":\"fmgtxzvy\",\"dependencyConditions\":[\"Skipped\",\"Failed\"],\"\":{\"znxd\":\"datarxjqpbbj\",\"kjirti\":\"dataiwaaumy\",\"gonrrarznlrr\":\"databvyud\"}},{\"activity\":\"sexaejbmtoun\",\"dependencyConditions\":[\"Succeeded\",\"Skipped\",\"Completed\",\"Completed\"],\"\":{\"upishcvsjaaedsqf\":\"datasedxiigwxzwqjpu\",\"romhsias\":\"dataulndywghnptfvolj\"}}],\"userProperties\":[{\"name\":\"pelq\",\"value\":\"datakwc\"},{\"name\":\"pmsyhrvifurg\",\"value\":\"dataxhoqfvuqimdgk\"},{\"name\":\"fghc\",\"value\":\"dataiipnszrrmq\"}],\"\":{\"yoffglwmk\":\"datayawtdsnvxhxkmdec\",\"lqnzxsdbfbkqi\":\"databxusn\",\"ngrdu\":\"dataehxmztf\"}}")
            .toObject(DatabricksSparkPythonActivity.class);
        Assertions.assertEquals("ukfmkq", model.name());
        Assertions.assertEquals("zvxknyg", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("xjyxhwvnyup", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("pelq", model.userProperties().get(0).name());
        Assertions.assertEquals("zlyoiyovc", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1522713628, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DatabricksSparkPythonActivity model
            = new DatabricksSparkPythonActivity().withName("ukfmkq")
                .withDescription("zvxknyg")
                .withState(ActivityState.ACTIVE)
                .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
                .withDependsOn(Arrays.asList(
                    new ActivityDependency().withActivity("xjyxhwvnyup")
                        .withDependencyConditions(
                            Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.FAILED))
                        .withAdditionalProperties(mapOf()),
                    new ActivityDependency().withActivity("w")
                        .withDependencyConditions(
                            Arrays.asList(DependencyCondition.COMPLETED, DependencyCondition.SKIPPED))
                        .withAdditionalProperties(mapOf()),
                    new ActivityDependency().withActivity("fmgtxzvy")
                        .withDependencyConditions(
                            Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.FAILED))
                        .withAdditionalProperties(mapOf()),
                    new ActivityDependency().withActivity("sexaejbmtoun")
                        .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED,
                            DependencyCondition.SKIPPED, DependencyCondition.COMPLETED, DependencyCondition.COMPLETED))
                        .withAdditionalProperties(mapOf())))
                .withUserProperties(Arrays.asList(new UserProperty().withName("pelq").withValue("datakwc"),
                    new UserProperty().withName("pmsyhrvifurg").withValue("dataxhoqfvuqimdgk"),
                    new UserProperty().withName("fghc").withValue("dataiipnszrrmq")))
                .withLinkedServiceName(new LinkedServiceReference().withReferenceName("zlyoiyovc")
                    .withParameters(mapOf("edowmhgzrrikvyu", "dataalveavuzjezraj")))
                .withPolicy(new ActivityPolicy().withTimeout("dataopdeqqfyc")
                    .withRetry("dataupxf")
                    .withRetryIntervalInSeconds(1522713628)
                    .withSecureInput(false)
                    .withSecureOutput(true)
                    .withAdditionalProperties(mapOf()))
                .withPythonFile("datackijv")
                .withParameters(Arrays.asList("datagzkfjq", "databbpjlrvxryjxjd"))
                .withLibraries(Arrays.asList(mapOf("twzgbuh", "datanjalccix", "mfufs", "datarwqrfejznz"),
                    mapOf("tlcqaafuwxehoza", "datasjiojv", "y", "databgcbdkq", "vgowkak", "datavtimyccdognhw",
                        "jiykwbytuzhcpx", "datajns")));
        model = BinaryData.fromObject(model).toObject(DatabricksSparkPythonActivity.class);
        Assertions.assertEquals("ukfmkq", model.name());
        Assertions.assertEquals("zvxknyg", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("xjyxhwvnyup", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("pelq", model.userProperties().get(0).name());
        Assertions.assertEquals("zlyoiyovc", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1522713628, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
