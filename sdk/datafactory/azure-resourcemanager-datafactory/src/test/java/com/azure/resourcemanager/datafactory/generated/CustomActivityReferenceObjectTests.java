// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.CustomActivityReferenceObject;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CustomActivityReferenceObjectTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CustomActivityReferenceObject model = BinaryData.fromString(
            "{\"linkedServices\":[{\"referenceName\":\"c\",\"parameters\":{\"p\":\"datatumttmixe\",\"hvqnkwjhjut\":\"datarbazgou\",\"dflgqso\":\"dataxggn\",\"petsxetneher\":\"datauncmuvfukl\"}},{\"referenceName\":\"belms\",\"parameters\":{\"pjtduvsvgydtdt\":\"datahkzcdn\",\"izkwpo\":\"datamknzotm\"}},{\"referenceName\":\"askflrqw\",\"parameters\":{\"brzvnouth\":\"datakks\",\"fix\":\"datavvcbwudi\",\"rqivqzqcmrxh\":\"dataw\"}},{\"referenceName\":\"lozg\",\"parameters\":{\"yttxspaafs\":\"dataijcetcystrs\",\"u\":\"dataqoyoerlrqtqnx\"}}],\"datasets\":[{\"referenceName\":\"q\",\"parameters\":{\"kjzbxmgsxbk\":\"datamwbmqpbfjbsoljqk\",\"eobkmx\":\"datakambdoq\"}},{\"referenceName\":\"hmrbjh\",\"parameters\":{\"f\":\"dataxnwcejczi\",\"nkjyfy\":\"datadaq\"}},{\"referenceName\":\"mbtiugc\",\"parameters\":{\"uvu\":\"datahgryof\",\"uocmxtyjaxk\":\"datakrkibno\"}},{\"referenceName\":\"yovwtpm\",\"parameters\":{\"mzsvdrryzxhtvyth\":\"datas\"}}]}")
            .toObject(CustomActivityReferenceObject.class);
        Assertions.assertEquals("c", model.linkedServices().get(0).referenceName());
        Assertions.assertEquals("q", model.datasets().get(0).referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CustomActivityReferenceObject model = new CustomActivityReferenceObject()
            .withLinkedServices(Arrays.asList(
                new LinkedServiceReference().withReferenceName("c")
                    .withParameters(mapOf("p", "datatumttmixe", "hvqnkwjhjut", "datarbazgou", "dflgqso", "dataxggn",
                        "petsxetneher", "datauncmuvfukl")),
                new LinkedServiceReference().withReferenceName("belms")
                    .withParameters(mapOf("pjtduvsvgydtdt", "datahkzcdn", "izkwpo", "datamknzotm")),
                new LinkedServiceReference().withReferenceName("askflrqw")
                    .withParameters(mapOf("brzvnouth", "datakks", "fix", "datavvcbwudi", "rqivqzqcmrxh", "dataw")),
                new LinkedServiceReference().withReferenceName("lozg")
                    .withParameters(mapOf("yttxspaafs", "dataijcetcystrs", "u", "dataqoyoerlrqtqnx"))))
            .withDatasets(Arrays.asList(
                new DatasetReference().withReferenceName("q")
                    .withParameters(mapOf("kjzbxmgsxbk", "datamwbmqpbfjbsoljqk", "eobkmx", "datakambdoq")),
                new DatasetReference().withReferenceName("hmrbjh")
                    .withParameters(mapOf("f", "dataxnwcejczi", "nkjyfy", "datadaq")),
                new DatasetReference().withReferenceName("mbtiugc")
                    .withParameters(mapOf("uvu", "datahgryof", "uocmxtyjaxk", "datakrkibno")),
                new DatasetReference().withReferenceName("yovwtpm")
                    .withParameters(mapOf("mzsvdrryzxhtvyth", "datas"))));
        model = BinaryData.fromObject(model).toObject(CustomActivityReferenceObject.class);
        Assertions.assertEquals("c", model.linkedServices().get(0).referenceName());
        Assertions.assertEquals("q", model.datasets().get(0).referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
