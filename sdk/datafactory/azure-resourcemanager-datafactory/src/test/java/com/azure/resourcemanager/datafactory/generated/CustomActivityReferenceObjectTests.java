// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.CustomActivityReferenceObject;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CustomActivityReferenceObjectTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CustomActivityReferenceObject model = BinaryData.fromString(
            "{\"linkedServices\":[{\"referenceName\":\"uttlmfc\",\"parameters\":{\"okdqkfbpf\":\"datagaiypihqmmm\"}},{\"referenceName\":\"xnivvuwrvghlzr\",\"parameters\":{\"pbddhfkjsqqqun\":\"datapipwtrtrbf\",\"uyhvaovoqonqjlpc\":\"dataawzkefz\",\"tyz\":\"datayqiytrhhmld\"}}],\"datasets\":[{\"referenceName\":\"st\",\"parameters\":{\"mcprg\":\"datafgzovbbcsbcfe\",\"gvxhw\":\"datachfssbqwvr\",\"mfbl\":\"dataqipfrrvngill\",\"mdffoibx\":\"datagekouxurlifc\"}},{\"referenceName\":\"gcuppwsgawq\",\"parameters\":{\"qbt\":\"datanjz\"}},{\"referenceName\":\"ft\",\"parameters\":{\"ga\":\"datazhox\",\"vtefevhedfzxs\":\"datanouh\"}},{\"referenceName\":\"ypara\",\"parameters\":{\"iqgqvprl\":\"datasfnjokrf\",\"xdxnmuosoziqcui\":\"datasglqiuqsqzu\",\"tgeejxwbredxmd\":\"datakuyaxpuk\",\"oaejylqgenbe\":\"datafxlkwy\"}}]}")
            .toObject(CustomActivityReferenceObject.class);
        Assertions.assertEquals("uttlmfc", model.linkedServices().get(0).referenceName());
        Assertions.assertEquals("st", model.datasets().get(0).referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CustomActivityReferenceObject model = new CustomActivityReferenceObject()
            .withLinkedServices(Arrays.asList(
                new LinkedServiceReference().withReferenceName("uttlmfc")
                    .withParameters(mapOf("okdqkfbpf", "datagaiypihqmmm")),
                new LinkedServiceReference().withReferenceName("xnivvuwrvghlzr")
                    .withParameters(mapOf("pbddhfkjsqqqun", "datapipwtrtrbf", "uyhvaovoqonqjlpc", "dataawzkefz", "tyz",
                        "datayqiytrhhmld"))))
            .withDatasets(Arrays.asList(
                new DatasetReference().withReferenceName("st")
                    .withParameters(mapOf("mcprg", "datafgzovbbcsbcfe", "gvxhw", "datachfssbqwvr", "mfbl",
                        "dataqipfrrvngill", "mdffoibx", "datagekouxurlifc")),
                new DatasetReference().withReferenceName("gcuppwsgawq").withParameters(mapOf("qbt", "datanjz")),
                new DatasetReference().withReferenceName("ft")
                    .withParameters(mapOf("ga", "datazhox", "vtefevhedfzxs", "datanouh")),
                new DatasetReference().withReferenceName("ypara")
                    .withParameters(mapOf("iqgqvprl", "datasfnjokrf", "xdxnmuosoziqcui", "datasglqiuqsqzu",
                        "tgeejxwbredxmd", "datakuyaxpuk", "oaejylqgenbe", "datafxlkwy"))));
        model = BinaryData.fromObject(model).toObject(CustomActivityReferenceObject.class);
        Assertions.assertEquals("uttlmfc", model.linkedServices().get(0).referenceName());
        Assertions.assertEquals("st", model.datasets().get(0).referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
