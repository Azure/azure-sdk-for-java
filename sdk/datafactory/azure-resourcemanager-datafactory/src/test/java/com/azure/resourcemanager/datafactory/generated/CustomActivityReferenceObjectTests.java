// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.CustomActivityReferenceObject;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CustomActivityReferenceObjectTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CustomActivityReferenceObject model = BinaryData.fromString(
            "{\"linkedServices\":[{\"referenceName\":\"ylfdryes\",\"parameters\":{\"ybvgemkz\":\"datasparbjsv\",\"czctwacbnhk\":\"dataolvnosb\",\"fh\":\"datadcvjhykptcijuntm\"}},{\"referenceName\":\"ccqhtlqrfsrfxr\",\"parameters\":{\"vzadybhydlqf\":\"dataymtcwac\",\"aesp\":\"dataidastuihn\",\"haoviwuttlmfcn\":\"datawgpjri\"}}],\"datasets\":[{\"referenceName\":\"aiypihqmmmbokdqk\",\"parameters\":{\"l\":\"datafzxnivvuwrvg\",\"bfi\":\"datarlkgpipwtrt\"}},{\"referenceName\":\"bddhfkjsqqqu\",\"parameters\":{\"hvaovoqonqjl\":\"datawzkefzdu\",\"yqiytrhhmld\":\"datac\"}},{\"referenceName\":\"tyz\",\"parameters\":{\"lkfg\":\"datast\",\"fe\":\"dataovbbcsb\",\"chfssbqwvr\":\"datamcprg\",\"qipfrrvngill\":\"datagvxhw\"}}]}")
            .toObject(CustomActivityReferenceObject.class);
        Assertions.assertEquals("ylfdryes", model.linkedServices().get(0).referenceName());
        Assertions.assertEquals("aiypihqmmmbokdqk", model.datasets().get(0).referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CustomActivityReferenceObject model
            = new CustomActivityReferenceObject()
                .withLinkedServices(Arrays.asList(
                    new LinkedServiceReference().withReferenceName("ylfdryes")
                        .withParameters(mapOf("ybvgemkz", "datasparbjsv", "czctwacbnhk", "dataolvnosb", "fh",
                            "datadcvjhykptcijuntm")),
                    new LinkedServiceReference().withReferenceName("ccqhtlqrfsrfxr")
                        .withParameters(mapOf("vzadybhydlqf", "dataymtcwac", "aesp", "dataidastuihn", "haoviwuttlmfcn",
                            "datawgpjri"))))
                .withDatasets(Arrays.asList(
                    new DatasetReference().withReferenceName("aiypihqmmmbokdqk")
                        .withParameters(mapOf("l", "datafzxnivvuwrvg", "bfi", "datarlkgpipwtrt")),
                    new DatasetReference().withReferenceName("bddhfkjsqqqu")
                        .withParameters(mapOf("hvaovoqonqjl", "datawzkefzdu", "yqiytrhhmld", "datac")),
                    new DatasetReference().withReferenceName("tyz")
                        .withParameters(mapOf("lkfg", "datast", "fe", "dataovbbcsb", "chfssbqwvr", "datamcprg",
                            "qipfrrvngill", "datagvxhw"))));
        model = BinaryData.fromObject(model).toObject(CustomActivityReferenceObject.class);
        Assertions.assertEquals("ylfdryes", model.linkedServices().get(0).referenceName());
        Assertions.assertEquals("aiypihqmmmbokdqk", model.datasets().get(0).referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
