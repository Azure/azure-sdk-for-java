// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.CustomActivityReferenceObject;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CustomActivityReferenceObjectTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CustomActivityReferenceObject model = BinaryData.fromString(
            "{\"linkedServices\":[{\"referenceName\":\"cnhzhsaum\",\"parameters\":{\"znekbrq\":\"datauspflvglvwkgcp\",\"btmljob\":\"datawvxwqqmvsrbmf\",\"cwhebyczweg\":\"datauoyownygbra\",\"razqxxvksqifr\":\"datazd\"}},{\"referenceName\":\"midvturdgl\",\"parameters\":{\"uizakejomj\":\"dataegolldltpryhztw\",\"fq\":\"datalxjhrzg\"}},{\"referenceName\":\"lgqezgbqiiweoace\",\"parameters\":{\"znvyeuxd\":\"dataarzkza\",\"gslzb\":\"datazomtzpukm\"}}],\"datasets\":[{\"referenceName\":\"f\",\"parameters\":{\"wzesejdcpcpeu\":\"datamxuo\"}},{\"referenceName\":\"bofzmvtwyjc\",\"parameters\":{\"qhejhnwj\":\"dataptltyt\",\"uurxg\":\"databygqfmee\"}},{\"referenceName\":\"lx\",\"parameters\":{\"vqmtejhvggy\":\"dataygquiwcfqzobgwwd\",\"mimsyiwcdwqjbrrx\":\"datairqkskyyam\",\"o\":\"datalmibvczdj\"}},{\"referenceName\":\"lvlfkwdtsbjmc\",\"parameters\":{\"tslxe\":\"datafezjyfaqdwfalnzd\",\"lxxgelad\":\"datahwlvh\",\"rsycujnsznjsk\":\"datazil\"}}]}")
            .toObject(CustomActivityReferenceObject.class);
        Assertions.assertEquals("cnhzhsaum", model.linkedServices().get(0).referenceName());
        Assertions.assertEquals("f", model.datasets().get(0).referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CustomActivityReferenceObject model = new CustomActivityReferenceObject()
            .withLinkedServices(Arrays.asList(
                new LinkedServiceReference().withReferenceName("cnhzhsaum")
                    .withParameters(mapOf("znekbrq", "datauspflvglvwkgcp", "btmljob", "datawvxwqqmvsrbmf",
                        "cwhebyczweg", "datauoyownygbra", "razqxxvksqifr", "datazd")),
                new LinkedServiceReference().withReferenceName("midvturdgl")
                    .withParameters(mapOf("uizakejomj", "dataegolldltpryhztw", "fq", "datalxjhrzg")),
                new LinkedServiceReference().withReferenceName("lgqezgbqiiweoace")
                    .withParameters(mapOf("znvyeuxd", "dataarzkza", "gslzb", "datazomtzpukm"))))
            .withDatasets(Arrays.asList(
                new DatasetReference().withReferenceName("f").withParameters(mapOf("wzesejdcpcpeu", "datamxuo")),
                new DatasetReference().withReferenceName("bofzmvtwyjc")
                    .withParameters(mapOf("qhejhnwj", "dataptltyt", "uurxg", "databygqfmee")),
                new DatasetReference().withReferenceName("lx")
                    .withParameters(mapOf("vqmtejhvggy", "dataygquiwcfqzobgwwd", "mimsyiwcdwqjbrrx", "datairqkskyyam",
                        "o", "datalmibvczdj")),
                new DatasetReference().withReferenceName("lvlfkwdtsbjmc")
                    .withParameters(
                        mapOf("tslxe", "datafezjyfaqdwfalnzd", "lxxgelad", "datahwlvh", "rsycujnsznjsk", "datazil"))));
        model = BinaryData.fromObject(model).toObject(CustomActivityReferenceObject.class);
        Assertions.assertEquals("cnhzhsaum", model.linkedServices().get(0).referenceName());
        Assertions.assertEquals("f", model.datasets().get(0).referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
