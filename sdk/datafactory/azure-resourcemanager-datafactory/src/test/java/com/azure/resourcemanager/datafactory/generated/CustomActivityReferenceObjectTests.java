// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.CustomActivityReferenceObject;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CustomActivityReferenceObjectTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CustomActivityReferenceObject model = BinaryData.fromString(
            "{\"linkedServices\":[{\"referenceName\":\"tl\",\"parameters\":{\"zrzi\":\"dataeyhpbt\",\"y\":\"datahkkdcjymdoldb\"}},{\"referenceName\":\"xgephviuexfbrsd\",\"parameters\":{\"agaxru\":\"datayi\"}}],\"datasets\":[{\"referenceName\":\"mtiuxy\",\"parameters\":{\"qlhzdbbitpgr\":\"datavp\",\"mojxbvgiee\":\"datahpmsdgmxwfodvzp\",\"vjodgplagwvgb\":\"dataevhnqtba\",\"syszl\":\"dataxmqudnqcbbbhin\"}},{\"referenceName\":\"fzkvrmdoshiyy\",\"parameters\":{\"ybp\":\"datanrg\",\"rvqticgsdcpmclku\":\"datawjjbmkhxun\",\"dcqrssqwzndzuxlg\":\"datadabh\"}},{\"referenceName\":\"y\",\"parameters\":{\"m\":\"datayqlzo\",\"jvbzablmpnt\":\"dataa\"}}]}")
            .toObject(CustomActivityReferenceObject.class);
        Assertions.assertEquals("tl", model.linkedServices().get(0).referenceName());
        Assertions.assertEquals("mtiuxy", model.datasets().get(0).referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CustomActivityReferenceObject model
            = new CustomActivityReferenceObject()
                .withLinkedServices(Arrays.asList(
                    new LinkedServiceReference().withReferenceName("tl")
                        .withParameters(mapOf("zrzi", "dataeyhpbt", "y", "datahkkdcjymdoldb")),
                    new LinkedServiceReference().withReferenceName("xgephviuexfbrsd")
                        .withParameters(mapOf("agaxru", "datayi"))))
                .withDatasets(Arrays.asList(
                    new DatasetReference().withReferenceName("mtiuxy")
                        .withParameters(mapOf("qlhzdbbitpgr", "datavp", "mojxbvgiee", "datahpmsdgmxwfodvzp",
                            "vjodgplagwvgb", "dataevhnqtba", "syszl", "dataxmqudnqcbbbhin")),
                    new DatasetReference().withReferenceName("fzkvrmdoshiyy")
                        .withParameters(mapOf("ybp", "datanrg", "rvqticgsdcpmclku", "datawjjbmkhxun",
                            "dcqrssqwzndzuxlg", "datadabh")),
                    new DatasetReference().withReferenceName("y")
                        .withParameters(mapOf("m", "datayqlzo", "jvbzablmpnt", "dataa"))));
        model = BinaryData.fromObject(model).toObject(CustomActivityReferenceObject.class);
        Assertions.assertEquals("tl", model.linkedServices().get(0).referenceName());
        Assertions.assertEquals("mtiuxy", model.datasets().get(0).referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
