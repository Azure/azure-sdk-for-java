// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.CustomActivityReferenceObject;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class CustomActivityReferenceObjectTests {
    @Test
    public void testDeserialize() {
        CustomActivityReferenceObject model =
            BinaryData
                .fromString(
                    "{\"linkedServices\":[{\"referenceName\":\"ggljkybsjrclrv\",\"parameters\":{}},{\"referenceName\":\"nrbctbhpjhxpcvrd\",\"parameters\":{}},{\"referenceName\":\"it\",\"parameters\":{}}],\"datasets\":[{\"referenceName\":\"dynzjahwr\",\"parameters\":{}}]}")
                .toObject(CustomActivityReferenceObject.class);
        Assertions.assertEquals("ggljkybsjrclrv", model.linkedServices().get(0).referenceName());
        Assertions.assertEquals("dynzjahwr", model.datasets().get(0).referenceName());
    }

    @Test
    public void testSerialize() {
        CustomActivityReferenceObject model =
            new CustomActivityReferenceObject()
                .withLinkedServices(
                    Arrays
                        .asList(
                            new LinkedServiceReference().withReferenceName("ggljkybsjrclrv").withParameters(mapOf()),
                            new LinkedServiceReference().withReferenceName("nrbctbhpjhxpcvrd").withParameters(mapOf()),
                            new LinkedServiceReference().withReferenceName("it").withParameters(mapOf())))
                .withDatasets(
                    Arrays.asList(new DatasetReference().withReferenceName("dynzjahwr").withParameters(mapOf())));
        model = BinaryData.fromObject(model).toObject(CustomActivityReferenceObject.class);
        Assertions.assertEquals("ggljkybsjrclrv", model.linkedServices().get(0).referenceName());
        Assertions.assertEquals("dynzjahwr", model.datasets().get(0).referenceName());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
