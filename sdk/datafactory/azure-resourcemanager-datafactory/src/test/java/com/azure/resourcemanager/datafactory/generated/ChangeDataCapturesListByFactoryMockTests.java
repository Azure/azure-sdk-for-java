// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.datafactory.DataFactoryManager;
import com.azure.resourcemanager.datafactory.models.ChangeDataCaptureResource;
import com.azure.resourcemanager.datafactory.models.ConnectionType;
import com.azure.resourcemanager.datafactory.models.FrequencyType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ChangeDataCapturesListByFactoryMockTests {
    @Test
    public void testListByFactory() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"folder\":{\"name\":\"mlaile\"},\"description\":\"usiv\",\"sourceConnectionsInfo\":[{\"sourceEntities\":[{},{},{}],\"connection\":{\"linkedService\":{\"referenceName\":\"jwmdtbx\"},\"linkedServiceType\":\"omc\",\"type\":\"linkedservicetype\",\"isInlineDataset\":true,\"commonDslConnectorProperties\":[{}]}},{\"sourceEntities\":[{},{},{},{}],\"connection\":{\"linkedService\":{\"referenceName\":\"fwzqaelxd\"},\"linkedServiceType\":\"dfsteouzoglvt\",\"type\":\"linkedservicetype\",\"isInlineDataset\":true,\"commonDslConnectorProperties\":[{},{},{}]}},{\"sourceEntities\":[{},{},{}],\"connection\":{\"linkedService\":{\"referenceName\":\"zrqkgibpeh\"},\"linkedServiceType\":\"ctzcm\",\"type\":\"linkedservicetype\",\"isInlineDataset\":false,\"commonDslConnectorProperties\":[{}]}}],\"targetConnectionsInfo\":[{\"targetEntities\":[{},{},{},{}],\"connection\":{\"linkedService\":{\"referenceName\":\"bwsdoaypixry\"},\"linkedServiceType\":\"lbzxyejoxd\",\"type\":\"linkedservicetype\",\"isInlineDataset\":false,\"commonDslConnectorProperties\":[{},{}]},\"dataMapperMappings\":[{},{},{}],\"relationships\":[\"datanptbpiccriqhiwy\"]},{\"targetEntities\":[{},{}],\"connection\":{\"linkedService\":{\"referenceName\":\"fhlmgpar\"},\"linkedServiceType\":\"rgwmge\",\"type\":\"linkedservicetype\",\"isInlineDataset\":true,\"commonDslConnectorProperties\":[{}]},\"dataMapperMappings\":[{}],\"relationships\":[\"datavdryxouqwt\"]},{\"targetEntities\":[{},{},{},{}],\"connection\":{\"linkedService\":{\"referenceName\":\"awxslstekbbqq\"},\"linkedServiceType\":\"psxycvoexbx\",\"type\":\"linkedservicetype\",\"isInlineDataset\":false,\"commonDslConnectorProperties\":[{},{},{}]},\"dataMapperMappings\":[{}],\"relationships\":[\"databracgmnelozzfwy\"]}],\"policy\":{\"mode\":\"dutfktm\",\"recurrence\":{\"frequency\":\"Hour\",\"interval\":1329023766}},\"allowVNetOverride\":false,\"status\":\"trkesdfujfpnwfz\"},\"name\":\"lqmsybvjfnuyoyd\",\"type\":\"fknnlasfbpjyvu\",\"etag\":\"exlpmbtmc\",\"\":{\"yexamsgfvuffdvuk\":\"databp\",\"wxc\":\"dataykmdxnrgmjpcke\"},\"id\":\"ualb\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DataFactoryManager manager = DataFactoryManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<ChangeDataCaptureResource> response
            = manager.changeDataCaptures().listByFactory("stybom", "yjfjsseem", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("ualb", response.iterator().next().id());
        Assertions.assertEquals("mlaile", response.iterator().next().folder().name());
        Assertions.assertEquals("usiv", response.iterator().next().description());
        Assertions.assertEquals("jwmdtbx",
            response.iterator().next().sourceConnectionsInfo().get(0).connection().linkedService().referenceName());
        Assertions.assertEquals("omc",
            response.iterator().next().sourceConnectionsInfo().get(0).connection().linkedServiceType());
        Assertions.assertEquals(ConnectionType.LINKEDSERVICETYPE,
            response.iterator().next().sourceConnectionsInfo().get(0).connection().type());
        Assertions.assertEquals(true,
            response.iterator().next().sourceConnectionsInfo().get(0).connection().isInlineDataset());
        Assertions.assertEquals("bwsdoaypixry",
            response.iterator().next().targetConnectionsInfo().get(0).connection().linkedService().referenceName());
        Assertions.assertEquals("lbzxyejoxd",
            response.iterator().next().targetConnectionsInfo().get(0).connection().linkedServiceType());
        Assertions.assertEquals(ConnectionType.LINKEDSERVICETYPE,
            response.iterator().next().targetConnectionsInfo().get(0).connection().type());
        Assertions.assertEquals(false,
            response.iterator().next().targetConnectionsInfo().get(0).connection().isInlineDataset());
        Assertions.assertEquals("dutfktm", response.iterator().next().policy().mode());
        Assertions.assertEquals(FrequencyType.HOUR, response.iterator().next().policy().recurrence().frequency());
        Assertions.assertEquals(1329023766, response.iterator().next().policy().recurrence().interval());
        Assertions.assertEquals(false, response.iterator().next().allowVNetOverride());
        Assertions.assertEquals("trkesdfujfpnwfz", response.iterator().next().status());
    }
}
