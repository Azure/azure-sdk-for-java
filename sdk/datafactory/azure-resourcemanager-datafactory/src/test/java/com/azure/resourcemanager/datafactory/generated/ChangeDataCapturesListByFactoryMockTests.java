// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.datafactory.DataFactoryManager;
import com.azure.resourcemanager.datafactory.models.ChangeDataCaptureResource;
import com.azure.resourcemanager.datafactory.models.ConnectionType;
import com.azure.resourcemanager.datafactory.models.FrequencyType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ChangeDataCapturesListByFactoryMockTests {
    @Test
    public void testListByFactory() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"folder\":{\"name\":\"icuc\"},\"description\":\"lhdwmqmdivx\",\"sourceConnectionsInfo\":[{\"sourceEntities\":[{},{},{}],\"connection\":{\"linkedService\":{\"referenceName\":\"qpczcimpdjn\"},\"linkedServiceType\":\"w\",\"type\":\"linkedservicetype\",\"isInlineDataset\":true,\"commonDslConnectorProperties\":[{},{},{},{}]}}],\"targetConnectionsInfo\":[{\"targetEntities\":[{}],\"connection\":{\"linkedService\":{\"referenceName\":\"gjptabdyvjhant\"},\"linkedServiceType\":\"zkiowzifhl\",\"type\":\"linkedservicetype\",\"isInlineDataset\":false,\"commonDslConnectorProperties\":[{}]},\"dataMapperMappings\":[{}],\"relationships\":[\"datadhxopjvqgwr\",\"datacpatpxrwsqfnuqeh\",\"dataypixghahz\"]},{\"targetEntities\":[{},{},{},{}],\"connection\":{\"linkedService\":{\"referenceName\":\"ciewbywblgja\"},\"linkedServiceType\":\"ggvxjwevnrknb\",\"type\":\"linkedservicetype\",\"isInlineDataset\":false,\"commonDslConnectorProperties\":[{},{},{}]},\"dataMapperMappings\":[{}],\"relationships\":[\"datawqvu\"]}],\"policy\":{\"mode\":\"jctwtgozaivfa\",\"recurrence\":{\"frequency\":\"Second\",\"interval\":1938405349}},\"allowVNetOverride\":true,\"status\":\"pyllswjzhsfuvo\"},\"name\":\"h\",\"type\":\"lnb\",\"etag\":\"pehjgeqfpzh\",\"\":{\"lqt\":\"datalbziud\",\"rpzubem\":\"datacrverpvyusxx\",\"mqhujsb\":\"datadpryvnr\"},\"id\":\"bauljmnp\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DataFactoryManager manager = DataFactoryManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<ChangeDataCaptureResource> response
            = manager.changeDataCaptures().listByFactory("xpcma", "ao", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("bauljmnp", response.iterator().next().id());
        Assertions.assertEquals("icuc", response.iterator().next().folder().name());
        Assertions.assertEquals("lhdwmqmdivx", response.iterator().next().description());
        Assertions.assertEquals("qpczcimpdjn",
            response.iterator().next().sourceConnectionsInfo().get(0).connection().linkedService().referenceName());
        Assertions.assertEquals("w",
            response.iterator().next().sourceConnectionsInfo().get(0).connection().linkedServiceType());
        Assertions.assertEquals(ConnectionType.LINKEDSERVICETYPE,
            response.iterator().next().sourceConnectionsInfo().get(0).connection().type());
        Assertions.assertEquals(true,
            response.iterator().next().sourceConnectionsInfo().get(0).connection().isInlineDataset());
        Assertions.assertEquals("gjptabdyvjhant",
            response.iterator().next().targetConnectionsInfo().get(0).connection().linkedService().referenceName());
        Assertions.assertEquals("zkiowzifhl",
            response.iterator().next().targetConnectionsInfo().get(0).connection().linkedServiceType());
        Assertions.assertEquals(ConnectionType.LINKEDSERVICETYPE,
            response.iterator().next().targetConnectionsInfo().get(0).connection().type());
        Assertions.assertEquals(false,
            response.iterator().next().targetConnectionsInfo().get(0).connection().isInlineDataset());
        Assertions.assertEquals("jctwtgozaivfa", response.iterator().next().policy().mode());
        Assertions.assertEquals(FrequencyType.SECOND, response.iterator().next().policy().recurrence().frequency());
        Assertions.assertEquals(1938405349, response.iterator().next().policy().recurrence().interval());
        Assertions.assertEquals(true, response.iterator().next().allowVNetOverride());
        Assertions.assertEquals("pyllswjzhsfuvo", response.iterator().next().status());
    }
}
