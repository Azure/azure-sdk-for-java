// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.datafactory.DataFactoryManager;
import com.azure.resourcemanager.datafactory.models.ChangeDataCaptureResource;
import com.azure.resourcemanager.datafactory.models.ConnectionType;
import com.azure.resourcemanager.datafactory.models.FrequencyType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ChangeDataCapturesListByFactoryMockTests {
    @Test
    public void testListByFactory() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"folder\":{\"name\":\"ghnnxkouvsmmi\"},\"description\":\"iigslbriawkn\",\"sourceConnectionsInfo\":[{\"sourceEntities\":[{}],\"connection\":{\"linkedService\":{\"referenceName\":\"eyulmxonobozge\"},\"linkedServiceType\":\"tcxknipzqwcr\",\"type\":\"linkedservicetype\",\"isInlineDataset\":true,\"commonDslConnectorProperties\":[{},{},{},{}]}},{\"sourceEntities\":[{}],\"connection\":{\"linkedService\":{\"referenceName\":\"maws\"},\"linkedServiceType\":\"dfwex\",\"type\":\"linkedservicetype\",\"isInlineDataset\":false,\"commonDslConnectorProperties\":[{},{},{}]}},{\"sourceEntities\":[{}],\"connection\":{\"linkedService\":{\"referenceName\":\"oarmlbqekvjwaq\"},\"linkedServiceType\":\"sjrpkgvstwdcz\",\"type\":\"linkedservicetype\",\"isInlineDataset\":false,\"commonDslConnectorProperties\":[{}]}},{\"sourceEntities\":[{}],\"connection\":{\"linkedService\":{\"referenceName\":\"fmytkluewthydgz\"},\"linkedServiceType\":\"bbfun\",\"type\":\"linkedservicetype\",\"isInlineDataset\":true,\"commonDslConnectorProperties\":[{},{},{},{}]}}],\"targetConnectionsInfo\":[{\"targetEntities\":[{},{},{},{}],\"connection\":{\"linkedService\":{\"referenceName\":\"ioxarwxhpufvuc\"},\"linkedServiceType\":\"ymjbzekrwpwyi\",\"type\":\"linkedservicetype\",\"isInlineDataset\":true,\"commonDslConnectorProperties\":[{},{}]},\"dataMapperMappings\":[{}],\"relationships\":[\"datazimevudmpsu\",\"datapra\",\"datajscni\"]},{\"targetEntities\":[{},{},{}],\"connection\":{\"linkedService\":{\"referenceName\":\"kpewtbyciedxs\"},\"linkedServiceType\":\"jj\",\"type\":\"linkedservicetype\",\"isInlineDataset\":false,\"commonDslConnectorProperties\":[{}]},\"dataMapperMappings\":[{},{},{},{}],\"relationships\":[\"dataaxieuntceekh\",\"dataxgu\",\"datazzcpwbfbfrzr\"]}],\"policy\":{\"mode\":\"ipqbyvesxuzda\",\"recurrence\":{\"frequency\":\"Second\",\"interval\":891591548}},\"allowVNetOverride\":false,\"status\":\"wzjkbaudtpp\"},\"name\":\"qkntnvgwgtgxggm\",\"type\":\"wulqpzqxcyg\",\"etag\":\"gjzrsb\",\"\":{\"cleniozqruqh\":\"datavvbsbkyfbmwzbf\",\"rhgohdv\":\"datapwzhpyymlwalldey\",\"kmqvivps\":\"datahsvrpnoxb\",\"fkjdw\":\"databzrfmfad\"},\"id\":\"yooewyvwwvki\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DataFactoryManager manager = DataFactoryManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<ChangeDataCaptureResource> response
            = manager.changeDataCaptures().listByFactory("bkm", "wmmwjugaqyrtbniy", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("yooewyvwwvki", response.iterator().next().id());
        Assertions.assertEquals("ghnnxkouvsmmi", response.iterator().next().folder().name());
        Assertions.assertEquals("iigslbriawkn", response.iterator().next().description());
        Assertions.assertEquals("eyulmxonobozge",
            response.iterator().next().sourceConnectionsInfo().get(0).connection().linkedService().referenceName());
        Assertions.assertEquals("tcxknipzqwcr",
            response.iterator().next().sourceConnectionsInfo().get(0).connection().linkedServiceType());
        Assertions.assertEquals(ConnectionType.LINKEDSERVICETYPE,
            response.iterator().next().sourceConnectionsInfo().get(0).connection().type());
        Assertions.assertEquals(true,
            response.iterator().next().sourceConnectionsInfo().get(0).connection().isInlineDataset());
        Assertions.assertEquals("ioxarwxhpufvuc",
            response.iterator().next().targetConnectionsInfo().get(0).connection().linkedService().referenceName());
        Assertions.assertEquals("ymjbzekrwpwyi",
            response.iterator().next().targetConnectionsInfo().get(0).connection().linkedServiceType());
        Assertions.assertEquals(ConnectionType.LINKEDSERVICETYPE,
            response.iterator().next().targetConnectionsInfo().get(0).connection().type());
        Assertions.assertEquals(true,
            response.iterator().next().targetConnectionsInfo().get(0).connection().isInlineDataset());
        Assertions.assertEquals("ipqbyvesxuzda", response.iterator().next().policy().mode());
        Assertions.assertEquals(FrequencyType.SECOND, response.iterator().next().policy().recurrence().frequency());
        Assertions.assertEquals(891591548, response.iterator().next().policy().recurrence().interval());
        Assertions.assertEquals(false, response.iterator().next().allowVNetOverride());
        Assertions.assertEquals("wzjkbaudtpp", response.iterator().next().status());
    }
}
