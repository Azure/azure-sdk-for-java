// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.CustomEventsTrigger;
import com.azure.resourcemanager.datafactory.models.PipelineReference;
import com.azure.resourcemanager.datafactory.models.TriggerPipelineReference;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CustomEventsTriggerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CustomEventsTrigger model = BinaryData.fromString(
            "{\"type\":\"CustomEventsTrigger\",\"typeProperties\":{\"subjectBeginsWith\":\"zcmwqfdhgpmvlfmv\",\"subjectEndsWith\":\"mjmp\",\"events\":[\"datazxbafscdp\",\"datazporjhubzkzjazf\"],\"scope\":\"y\"},\"pipelines\":[{\"pipelineReference\":{\"referenceName\":\"tcnyhsdgmoxnelhx\",\"name\":\"fyzb\"},\"parameters\":{\"prgpm\":\"datafcsvipwahehuc\",\"fzcsklvtceaoi\":\"datatjvuhcw\",\"bjfhpaywwesa\":\"dataurqlcdh\"}},{\"pipelineReference\":{\"referenceName\":\"uqpskvxbdlrar\",\"name\":\"iat\"},\"parameters\":{\"nyfjwoaom\":\"dataqsbyyleyopgyyg\"}}],\"description\":\"kpcwffo\",\"runtimeState\":\"Disabled\",\"annotations\":[\"datavgjuzgqkxs\",\"dataavbteaegyojy\"],\"\":{\"hbztlvujbhw\":\"datapcdhqjc\",\"cihkjjjbit\":\"dataszrhf\",\"fwmasodsmjn\":\"datauriizyrgzxpr\"}}")
            .toObject(CustomEventsTrigger.class);
        Assertions.assertEquals("kpcwffo", model.description());
        Assertions.assertEquals("tcnyhsdgmoxnelhx", model.pipelines().get(0).pipelineReference().referenceName());
        Assertions.assertEquals("fyzb", model.pipelines().get(0).pipelineReference().name());
        Assertions.assertEquals("zcmwqfdhgpmvlfmv", model.subjectBeginsWith());
        Assertions.assertEquals("mjmp", model.subjectEndsWith());
        Assertions.assertEquals("y", model.scope());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CustomEventsTrigger model = new CustomEventsTrigger().withDescription("kpcwffo")
            .withAnnotations(Arrays.asList("datavgjuzgqkxs", "dataavbteaegyojy"))
            .withPipelines(Arrays.asList(
                new TriggerPipelineReference()
                    .withPipelineReference(
                        new PipelineReference().withReferenceName("tcnyhsdgmoxnelhx").withName("fyzb"))
                    .withParameters(mapOf("prgpm", "datafcsvipwahehuc", "fzcsklvtceaoi", "datatjvuhcw", "bjfhpaywwesa",
                        "dataurqlcdh")),
                new TriggerPipelineReference()
                    .withPipelineReference(new PipelineReference().withReferenceName("uqpskvxbdlrar").withName("iat"))
                    .withParameters(mapOf("nyfjwoaom", "dataqsbyyleyopgyyg"))))
            .withSubjectBeginsWith("zcmwqfdhgpmvlfmv")
            .withSubjectEndsWith("mjmp")
            .withEvents(Arrays.asList("datazxbafscdp", "datazporjhubzkzjazf"))
            .withScope("y");
        model = BinaryData.fromObject(model).toObject(CustomEventsTrigger.class);
        Assertions.assertEquals("kpcwffo", model.description());
        Assertions.assertEquals("tcnyhsdgmoxnelhx", model.pipelines().get(0).pipelineReference().referenceName());
        Assertions.assertEquals("fyzb", model.pipelines().get(0).pipelineReference().name());
        Assertions.assertEquals("zcmwqfdhgpmvlfmv", model.subjectBeginsWith());
        Assertions.assertEquals("mjmp", model.subjectEndsWith());
        Assertions.assertEquals("y", model.scope());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
