// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.CustomEventsTrigger;
import com.azure.resourcemanager.datafactory.models.PipelineReference;
import com.azure.resourcemanager.datafactory.models.TriggerPipelineReference;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CustomEventsTriggerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CustomEventsTrigger model = BinaryData.fromString(
            "{\"type\":\"CustomEventsTrigger\",\"typeProperties\":{\"subjectBeginsWith\":\"uwdesyttkaufabtp\",\"subjectEndsWith\":\"ntnjnkvsnsiphl\",\"events\":[\"datacedz\",\"datadvzbxtzgx\",\"dataxqe\"],\"scope\":\"uzubntuimi\"},\"pipelines\":[{\"pipelineReference\":{\"referenceName\":\"uby\",\"name\":\"hencgfzhbtzu\"},\"parameters\":{\"txkhyvjomqrioa\":\"datatchxtbcqjvyz\",\"rglmjrufwqpnmcw\":\"datazmrwlsrjjaj\"}},{\"pipelineReference\":{\"referenceName\":\"fpytfdzkbkyt\",\"name\":\"twwk\"},\"parameters\":{\"rzvlupnfrlygyjrl\":\"databdozdkrmplj\",\"gzwhfeqz\":\"datag\",\"djagyksgntgiwaa\":\"datavjlsyzzkgebe\"}},{\"pipelineReference\":{\"referenceName\":\"jbxh\",\"name\":\"hgbloeae\"},\"parameters\":{\"lx\":\"dataum\"}},{\"pipelineReference\":{\"referenceName\":\"gbyxpma\",\"name\":\"rn\"},\"parameters\":{\"faf\":\"datahviqwfctiy\"}}],\"description\":\"rnsktdgbombnc\",\"runtimeState\":\"Stopped\",\"annotations\":[\"datapqwntrqvlcunnbai\"],\"\":{\"kdaphzemnjastkb\":\"datacpruommtucazgrl\",\"qbwim\":\"dataz\",\"r\":\"datajhmgocal\",\"nreukcrcsdaip\":\"datakmwyoukfim\"}}")
            .toObject(CustomEventsTrigger.class);
        Assertions.assertEquals("rnsktdgbombnc", model.description());
        Assertions.assertEquals("uby", model.pipelines().get(0).pipelineReference().referenceName());
        Assertions.assertEquals("hencgfzhbtzu", model.pipelines().get(0).pipelineReference().name());
        Assertions.assertEquals("uwdesyttkaufabtp", model.subjectBeginsWith());
        Assertions.assertEquals("ntnjnkvsnsiphl", model.subjectEndsWith());
        Assertions.assertEquals("uzubntuimi", model.scope());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CustomEventsTrigger model
            = new CustomEventsTrigger().withDescription("rnsktdgbombnc")
                .withAnnotations(Arrays.asList("datapqwntrqvlcunnbai"))
                .withPipelines(Arrays.asList(new TriggerPipelineReference()
                    .withPipelineReference(new PipelineReference().withReferenceName("uby").withName("hencgfzhbtzu"))
                    .withParameters(mapOf("txkhyvjomqrioa", "datatchxtbcqjvyz", "rglmjrufwqpnmcw", "datazmrwlsrjjaj")),
                    new TriggerPipelineReference().withPipelineReference(
                        new PipelineReference().withReferenceName("fpytfdzkbkyt").withName("twwk"))
                        .withParameters(mapOf("rzvlupnfrlygyjrl", "databdozdkrmplj", "gzwhfeqz", "datag",
                            "djagyksgntgiwaa", "datavjlsyzzkgebe")),
                    new TriggerPipelineReference()
                        .withPipelineReference(new PipelineReference().withReferenceName("jbxh").withName("hgbloeae"))
                        .withParameters(mapOf("lx", "dataum")),
                    new TriggerPipelineReference()
                        .withPipelineReference(new PipelineReference().withReferenceName("gbyxpma").withName("rn"))
                        .withParameters(mapOf("faf", "datahviqwfctiy"))))
                .withSubjectBeginsWith("uwdesyttkaufabtp").withSubjectEndsWith("ntnjnkvsnsiphl")
                .withEvents(Arrays.asList("datacedz", "datadvzbxtzgx", "dataxqe")).withScope("uzubntuimi");
        model = BinaryData.fromObject(model).toObject(CustomEventsTrigger.class);
        Assertions.assertEquals("rnsktdgbombnc", model.description());
        Assertions.assertEquals("uby", model.pipelines().get(0).pipelineReference().referenceName());
        Assertions.assertEquals("hencgfzhbtzu", model.pipelines().get(0).pipelineReference().name());
        Assertions.assertEquals("uwdesyttkaufabtp", model.subjectBeginsWith());
        Assertions.assertEquals("ntnjnkvsnsiphl", model.subjectEndsWith());
        Assertions.assertEquals("uzubntuimi", model.scope());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
