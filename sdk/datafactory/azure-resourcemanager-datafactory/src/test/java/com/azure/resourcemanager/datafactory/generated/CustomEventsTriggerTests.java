// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.CustomEventsTrigger;
import com.azure.resourcemanager.datafactory.models.PipelineReference;
import com.azure.resourcemanager.datafactory.models.TriggerPipelineReference;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CustomEventsTriggerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CustomEventsTrigger model = BinaryData.fromString(
            "{\"type\":\"CustomEventsTrigger\",\"typeProperties\":{\"subjectBeginsWith\":\"moxnelhxhz\",\"subjectEndsWith\":\"zbnkofcs\",\"events\":[\"datapwahehuc\",\"dataprgpm\"],\"scope\":\"tjvuhcw\"},\"pipelines\":[{\"pipelineReference\":{\"referenceName\":\"sklvtcea\",\"name\":\"uurqlcdhe\"},\"parameters\":{\"suqps\":\"datahpaywwesa\",\"hxqsbyy\":\"datavxbdlraridiat\",\"oaomogkpcwffo\":\"dataeyopgyygrnyfj\",\"zgqkxsoavbteaegy\":\"dataomxmvgj\"}},{\"pipelineReference\":{\"referenceName\":\"ytoepcdhqjczh\",\"name\":\"tlvujbh\"},\"parameters\":{\"kjjjbitmuri\":\"datazrhfwci\",\"masodsmjn\":\"datazyrgzxprtf\"}},{\"pipelineReference\":{\"referenceName\":\"doomhrlgidqxbrdh\",\"name\":\"cq\"},\"parameters\":{\"hienkliyfgkzwkyq\":\"datapjd\"}}],\"description\":\"diybdoyykhi\",\"runtimeState\":\"Stopped\",\"annotations\":[\"dataktwijoxkkynppqt\"],\"\":{\"wjatyhkqqj\":\"dataf\"}}")
            .toObject(CustomEventsTrigger.class);
        Assertions.assertEquals("diybdoyykhi", model.description());
        Assertions.assertEquals("sklvtcea", model.pipelines().get(0).pipelineReference().referenceName());
        Assertions.assertEquals("uurqlcdhe", model.pipelines().get(0).pipelineReference().name());
        Assertions.assertEquals("moxnelhxhz", model.subjectBeginsWith());
        Assertions.assertEquals("zbnkofcs", model.subjectEndsWith());
        Assertions.assertEquals("tjvuhcw", model.scope());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CustomEventsTrigger model = new CustomEventsTrigger().withDescription("diybdoyykhi")
            .withAnnotations(Arrays.asList("dataktwijoxkkynppqt"))
            .withPipelines(Arrays.asList(
                new TriggerPipelineReference()
                    .withPipelineReference(new PipelineReference().withReferenceName("sklvtcea").withName("uurqlcdhe"))
                    .withParameters(mapOf("suqps", "datahpaywwesa", "hxqsbyy", "datavxbdlraridiat", "oaomogkpcwffo",
                        "dataeyopgyygrnyfj", "zgqkxsoavbteaegy", "dataomxmvgj")),
                new TriggerPipelineReference()
                    .withPipelineReference(
                        new PipelineReference().withReferenceName("ytoepcdhqjczh").withName("tlvujbh"))
                    .withParameters(mapOf("kjjjbitmuri", "datazrhfwci", "masodsmjn", "datazyrgzxprtf")),
                new TriggerPipelineReference()
                    .withPipelineReference(new PipelineReference().withReferenceName("doomhrlgidqxbrdh").withName("cq"))
                    .withParameters(mapOf("hienkliyfgkzwkyq", "datapjd"))))
            .withSubjectBeginsWith("moxnelhxhz")
            .withSubjectEndsWith("zbnkofcs")
            .withEvents(Arrays.asList("datapwahehuc", "dataprgpm"))
            .withScope("tjvuhcw");
        model = BinaryData.fromObject(model).toObject(CustomEventsTrigger.class);
        Assertions.assertEquals("diybdoyykhi", model.description());
        Assertions.assertEquals("sklvtcea", model.pipelines().get(0).pipelineReference().referenceName());
        Assertions.assertEquals("uurqlcdhe", model.pipelines().get(0).pipelineReference().name());
        Assertions.assertEquals("moxnelhxhz", model.subjectBeginsWith());
        Assertions.assertEquals("zbnkofcs", model.subjectEndsWith());
        Assertions.assertEquals("tjvuhcw", model.scope());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
