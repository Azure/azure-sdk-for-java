// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.CustomEventsTrigger;
import com.azure.resourcemanager.datafactory.models.PipelineReference;
import com.azure.resourcemanager.datafactory.models.TriggerPipelineReference;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CustomEventsTriggerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CustomEventsTrigger model = BinaryData.fromString(
            "{\"type\":\"CustomEventsTrigger\",\"typeProperties\":{\"subjectBeginsWith\":\"fimonreukc\",\"subjectEndsWith\":\"sdaipnhpov\",\"events\":[\"datav\",\"datatbybcxgrrlzdn\",\"datacxtqqpfgjny\",\"datauqi\"],\"scope\":\"oiuj\"},\"pipelines\":[{\"pipelineReference\":{\"referenceName\":\"sfvyv\",\"name\":\"uclqtdcasjnzec\"},\"parameters\":{\"lzicltwan\":\"datapjkczkc\"}},{\"pipelineReference\":{\"referenceName\":\"zycxvifkzs\",\"name\":\"vlqinl\"},\"parameters\":{\"vkwxbb\":\"dataeevzelmmwmdhm\",\"nmnojfmztpwu\":\"datamck\",\"tvyeyeb\":\"datamu\",\"us\":\"datazrfonqjnpkofj\"}},{\"pipelineReference\":{\"referenceName\":\"yuir\",\"name\":\"xrftfamozyv\"},\"parameters\":{\"qtq\":\"datacflp\",\"lgzctfnlakl\":\"datacowmukzcrp\",\"xzwiehqvvbgwxp\":\"datazbeutqfx\",\"kmzubdmcdfvw\":\"datawticu\"}},{\"pipelineReference\":{\"referenceName\":\"z\",\"name\":\"jcxmffaqo\"},\"parameters\":{\"zwwsfrpbwv\":\"dataeywbpenqpz\"}}],\"description\":\"dghmny\",\"runtimeState\":\"Started\",\"annotations\":[\"datanjyulo\"],\"\":{\"xfwlkmj\":\"datalwcx\",\"mx\":\"dataekbmwizish\",\"aotaakcy\":\"datarsnmwiybl\",\"osnbwbcnfo\":\"datas\"}}")
            .toObject(CustomEventsTrigger.class);
        Assertions.assertEquals("dghmny", model.description());
        Assertions.assertEquals("sfvyv", model.pipelines().get(0).pipelineReference().referenceName());
        Assertions.assertEquals("uclqtdcasjnzec", model.pipelines().get(0).pipelineReference().name());
        Assertions.assertEquals("fimonreukc", model.subjectBeginsWith());
        Assertions.assertEquals("sdaipnhpov", model.subjectEndsWith());
        Assertions.assertEquals("oiuj", model.scope());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CustomEventsTrigger model = new CustomEventsTrigger().withDescription("dghmny")
            .withAnnotations(Arrays.asList("datanjyulo"))
            .withPipelines(Arrays.asList(
                new TriggerPipelineReference()
                    .withPipelineReference(
                        new PipelineReference().withReferenceName("sfvyv").withName("uclqtdcasjnzec"))
                    .withParameters(mapOf("lzicltwan", "datapjkczkc")),
                new TriggerPipelineReference()
                    .withPipelineReference(new PipelineReference().withReferenceName("zycxvifkzs").withName("vlqinl"))
                    .withParameters(mapOf("vkwxbb", "dataeevzelmmwmdhm", "nmnojfmztpwu", "datamck", "tvyeyeb", "datamu",
                        "us", "datazrfonqjnpkofj")),
                new TriggerPipelineReference()
                    .withPipelineReference(new PipelineReference().withReferenceName("yuir").withName("xrftfamozyv"))
                    .withParameters(mapOf("qtq", "datacflp", "lgzctfnlakl", "datacowmukzcrp", "xzwiehqvvbgwxp",
                        "datazbeutqfx", "kmzubdmcdfvw", "datawticu")),
                new TriggerPipelineReference()
                    .withPipelineReference(new PipelineReference().withReferenceName("z").withName("jcxmffaqo"))
                    .withParameters(mapOf("zwwsfrpbwv", "dataeywbpenqpz"))))
            .withSubjectBeginsWith("fimonreukc")
            .withSubjectEndsWith("sdaipnhpov")
            .withEvents(Arrays.asList("datav", "datatbybcxgrrlzdn", "datacxtqqpfgjny", "datauqi"))
            .withScope("oiuj");
        model = BinaryData.fromObject(model).toObject(CustomEventsTrigger.class);
        Assertions.assertEquals("dghmny", model.description());
        Assertions.assertEquals("sfvyv", model.pipelines().get(0).pipelineReference().referenceName());
        Assertions.assertEquals("uclqtdcasjnzec", model.pipelines().get(0).pipelineReference().name());
        Assertions.assertEquals("fimonreukc", model.subjectBeginsWith());
        Assertions.assertEquals("sdaipnhpov", model.subjectEndsWith());
        Assertions.assertEquals("oiuj", model.scope());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
