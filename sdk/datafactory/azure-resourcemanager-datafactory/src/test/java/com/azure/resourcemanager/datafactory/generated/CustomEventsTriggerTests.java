// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.CustomEventsTrigger;
import com.azure.resourcemanager.datafactory.models.PipelineReference;
import com.azure.resourcemanager.datafactory.models.TriggerPipelineReference;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CustomEventsTriggerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CustomEventsTrigger model = BinaryData.fromString(
            "{\"type\":\"CustomEventsTrigger\",\"typeProperties\":{\"subjectBeginsWith\":\"vdzzukhlwvvh\",\"subjectEndsWith\":\"kadmihgbtnlejzda\",\"events\":[\"datak\",\"datajvikpgzkfjqo\"],\"scope\":\"bpjlr\"},\"pipelines\":[{\"pipelineReference\":{\"referenceName\":\"jxjdlgign\",\"name\":\"lccix\"},\"parameters\":{\"jznzgmfufszvsji\":\"datazgbuhcrwqrf\",\"lcqaafuwxeho\":\"datajve\",\"q\":\"dataazbgcbd\"}},{\"pipelineReference\":{\"referenceName\":\"wvtimy\",\"name\":\"dogn\"},\"parameters\":{\"jns\":\"datavgowkak\",\"dv\":\"datajiykwbytuzhcpx\"}}],\"description\":\"xv\",\"runtimeState\":\"Disabled\",\"annotations\":[\"datay\",\"dataiyovcrmoalvea\",\"datauz\"],\"\":{\"rrikv\":\"datarajpedowmhg\"}}")
            .toObject(CustomEventsTrigger.class);
        Assertions.assertEquals("xv", model.description());
        Assertions.assertEquals("jxjdlgign", model.pipelines().get(0).pipelineReference().referenceName());
        Assertions.assertEquals("lccix", model.pipelines().get(0).pipelineReference().name());
        Assertions.assertEquals("vdzzukhlwvvh", model.subjectBeginsWith());
        Assertions.assertEquals("kadmihgbtnlejzda", model.subjectEndsWith());
        Assertions.assertEquals("bpjlr", model.scope());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CustomEventsTrigger model = new CustomEventsTrigger().withDescription("xv")
            .withAnnotations(Arrays.asList("datay", "dataiyovcrmoalvea", "datauz"))
            .withPipelines(Arrays.asList(
                new TriggerPipelineReference()
                    .withPipelineReference(new PipelineReference().withReferenceName("jxjdlgign").withName("lccix"))
                    .withParameters(
                        mapOf("jznzgmfufszvsji", "datazgbuhcrwqrf", "lcqaafuwxeho", "datajve", "q", "dataazbgcbd")),
                new TriggerPipelineReference()
                    .withPipelineReference(new PipelineReference().withReferenceName("wvtimy").withName("dogn"))
                    .withParameters(mapOf("jns", "datavgowkak", "dv", "datajiykwbytuzhcpx"))))
            .withSubjectBeginsWith("vdzzukhlwvvh")
            .withSubjectEndsWith("kadmihgbtnlejzda")
            .withEvents(Arrays.asList("datak", "datajvikpgzkfjqo"))
            .withScope("bpjlr");
        model = BinaryData.fromObject(model).toObject(CustomEventsTrigger.class);
        Assertions.assertEquals("xv", model.description());
        Assertions.assertEquals("jxjdlgign", model.pipelines().get(0).pipelineReference().referenceName());
        Assertions.assertEquals("lccix", model.pipelines().get(0).pipelineReference().name());
        Assertions.assertEquals("vdzzukhlwvvh", model.subjectBeginsWith());
        Assertions.assertEquals("kadmihgbtnlejzda", model.subjectEndsWith());
        Assertions.assertEquals("bpjlr", model.scope());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
