// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.CustomEventsTrigger;
import com.azure.resourcemanager.datafactory.models.PipelineReference;
import com.azure.resourcemanager.datafactory.models.TriggerPipelineReference;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CustomEventsTriggerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CustomEventsTrigger model =
            BinaryData
                .fromString(
                    "{\"type\":\"CustomEventsTrigger\",\"typeProperties\":{\"subjectBeginsWith\":\"qdj\",\"subjectEndsWith\":\"u\",\"events\":[\"datayjmjvzpldhbapfrr\",\"datawrmdmrhsybvn\",\"dataaxmipkatjyxh\"],\"scope\":\"jjvsvlmdlysf\"},\"pipelines\":[{\"pipelineReference\":{\"referenceName\":\"floamgnpfiiv\",\"name\":\"snrknikpgjuk\"},\"parameters\":{\"ycl\":\"datayl\"}}],\"description\":\"epashmfbzkfehrs\",\"runtimeState\":\"Disabled\",\"annotations\":[\"datasuwsuroddohn\",\"databbxa\"],\"\":{\"soiekdmnva\":\"dataorsandslrndi\",\"fdextdarnhpxz\":\"databhxujgyzfsswezn\"}}")
                .toObject(CustomEventsTrigger.class);
        Assertions.assertEquals("epashmfbzkfehrs", model.description());
        Assertions.assertEquals("floamgnpfiiv", model.pipelines().get(0).pipelineReference().referenceName());
        Assertions.assertEquals("snrknikpgjuk", model.pipelines().get(0).pipelineReference().name());
        Assertions.assertEquals("qdj", model.subjectBeginsWith());
        Assertions.assertEquals("u", model.subjectEndsWith());
        Assertions.assertEquals("jjvsvlmdlysf", model.scope());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CustomEventsTrigger model =
            new CustomEventsTrigger()
                .withDescription("epashmfbzkfehrs")
                .withAnnotations(Arrays.asList("datasuwsuroddohn", "databbxa"))
                .withPipelines(
                    Arrays
                        .asList(
                            new TriggerPipelineReference()
                                .withPipelineReference(
                                    new PipelineReference().withReferenceName("floamgnpfiiv").withName("snrknikpgjuk"))
                                .withParameters(mapOf("ycl", "datayl"))))
                .withSubjectBeginsWith("qdj")
                .withSubjectEndsWith("u")
                .withEvents(Arrays.asList("datayjmjvzpldhbapfrr", "datawrmdmrhsybvn", "dataaxmipkatjyxh"))
                .withScope("jjvsvlmdlysf");
        model = BinaryData.fromObject(model).toObject(CustomEventsTrigger.class);
        Assertions.assertEquals("epashmfbzkfehrs", model.description());
        Assertions.assertEquals("floamgnpfiiv", model.pipelines().get(0).pipelineReference().referenceName());
        Assertions.assertEquals("snrknikpgjuk", model.pipelines().get(0).pipelineReference().name());
        Assertions.assertEquals("qdj", model.subjectBeginsWith());
        Assertions.assertEquals("u", model.subjectEndsWith());
        Assertions.assertEquals("jjvsvlmdlysf", model.scope());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
