// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DataFlowReference;
import com.azure.resourcemanager.datafactory.models.DataFlowReferenceType;
import com.azure.resourcemanager.datafactory.models.DataFlowSource;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DataFlowSourceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DataFlowSource model = BinaryData.fromString(
            "{\"schemaLinkedService\":{\"referenceName\":\"jxildfkcef\",\"parameters\":{\"oisfmnaybdjn\":\"datazqp\",\"lwivqt\":\"dataumentqontwhymxym\"}},\"name\":\"wlhlsycoybajasq\",\"description\":\"fajcywhjqwm\",\"dataset\":{\"referenceName\":\"qo\",\"parameters\":{\"kiymjzpwd\":\"dataxcpup\",\"nhqnampp\":\"datavwtiwsmosa\",\"eajbkajlcyizyddc\":\"dataltassaekewna\"}},\"linkedService\":{\"referenceName\":\"od\",\"parameters\":{\"e\":\"datafsxxby\",\"pwgoljt\":\"dataqlvge\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"mxsdobygoog\",\"datasetParameters\":\"dataapjxvazyjfucsao\",\"parameters\":{\"kvibfa\":\"dataos\",\"nzpducdaaktu\":\"datagmat\"},\"\":{\"kpp\":\"datazboimyfpqdo\",\"ikff\":\"datawyytfvpctf\"}}}")
            .toObject(DataFlowSource.class);
        Assertions.assertEquals("wlhlsycoybajasq", model.name());
        Assertions.assertEquals("fajcywhjqwm", model.description());
        Assertions.assertEquals("qo", model.dataset().referenceName());
        Assertions.assertEquals("od", model.linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.flowlet().type());
        Assertions.assertEquals("mxsdobygoog", model.flowlet().referenceName());
        Assertions.assertEquals("jxildfkcef", model.schemaLinkedService().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DataFlowSource model = new DataFlowSource().withName("wlhlsycoybajasq")
            .withDescription("fajcywhjqwm")
            .withDataset(new DatasetReference().withReferenceName("qo")
                .withParameters(mapOf("kiymjzpwd", "dataxcpup", "nhqnampp", "datavwtiwsmosa", "eajbkajlcyizyddc",
                    "dataltassaekewna")))
            .withLinkedService(new LinkedServiceReference().withReferenceName("od")
                .withParameters(mapOf("e", "datafsxxby", "pwgoljt", "dataqlvge")))
            .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                .withReferenceName("mxsdobygoog")
                .withDatasetParameters("dataapjxvazyjfucsao")
                .withParameters(mapOf("kvibfa", "dataos", "nzpducdaaktu", "datagmat"))
                .withAdditionalProperties(mapOf()))
            .withSchemaLinkedService(new LinkedServiceReference().withReferenceName("jxildfkcef")
                .withParameters(mapOf("oisfmnaybdjn", "datazqp", "lwivqt", "dataumentqontwhymxym")));
        model = BinaryData.fromObject(model).toObject(DataFlowSource.class);
        Assertions.assertEquals("wlhlsycoybajasq", model.name());
        Assertions.assertEquals("fajcywhjqwm", model.description());
        Assertions.assertEquals("qo", model.dataset().referenceName());
        Assertions.assertEquals("od", model.linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.flowlet().type());
        Assertions.assertEquals("mxsdobygoog", model.flowlet().referenceName());
        Assertions.assertEquals("jxildfkcef", model.schemaLinkedService().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
