// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DataFlowReference;
import com.azure.resourcemanager.datafactory.models.DataFlowReferenceType;
import com.azure.resourcemanager.datafactory.models.DataFlowSource;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DataFlowSourceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DataFlowSource model = BinaryData.fromString(
            "{\"schemaLinkedService\":{\"referenceName\":\"vewuyqaeoh\",\"parameters\":{\"aurghooxa\":\"datagejkbvhh\",\"hxjxjoezlqxrkdkn\":\"dataxb\",\"tzamicbig\":\"dataobektmbozo\",\"euairaabmdlqjb\":\"datacdgzseznux\"}},\"name\":\"dp\",\"description\":\"xlhupmomihzbdnp\",\"dataset\":{\"referenceName\":\"kcdpreyxelyi\",\"parameters\":{\"fss\":\"dataflr\",\"rkbhammgmqfm\":\"datayghsf\",\"gquxweysland\":\"datafgvqcpdw\",\"hcgawn\":\"datadcdjhunh\"}},\"linkedService\":{\"referenceName\":\"nquoxsotireimse\",\"parameters\":{\"cjzlquzexokjxebj\":\"datasxstcyilbvzmm\",\"inzabwmvoglj\":\"datab\",\"pgidnw\":\"datav\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"aqidoyzltgiomqo\",\"datasetParameters\":\"dataepiaeapfsergd\",\"parameters\":{\"b\":\"dataqnacyheq\"},\"\":{\"jozfym\":\"datancjubk\",\"ipsejbsvsia\":\"datawmbupyvqyvliq\",\"zydisnuep\":\"dataeswhd\",\"nldpxottd\":\"datawyj\"}}}")
            .toObject(DataFlowSource.class);
        Assertions.assertEquals("dp", model.name());
        Assertions.assertEquals("xlhupmomihzbdnp", model.description());
        Assertions.assertEquals("kcdpreyxelyi", model.dataset().referenceName());
        Assertions.assertEquals("nquoxsotireimse", model.linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.flowlet().type());
        Assertions.assertEquals("aqidoyzltgiomqo", model.flowlet().referenceName());
        Assertions.assertEquals("vewuyqaeoh", model.schemaLinkedService().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DataFlowSource model = new DataFlowSource().withName("dp")
            .withDescription("xlhupmomihzbdnp")
            .withDataset(new DatasetReference().withReferenceName("kcdpreyxelyi")
                .withParameters(mapOf("fss", "dataflr", "rkbhammgmqfm", "datayghsf", "gquxweysland", "datafgvqcpdw",
                    "hcgawn", "datadcdjhunh")))
            .withLinkedService(new LinkedServiceReference().withReferenceName("nquoxsotireimse")
                .withParameters(
                    mapOf("cjzlquzexokjxebj", "datasxstcyilbvzmm", "inzabwmvoglj", "datab", "pgidnw", "datav")))
            .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                .withReferenceName("aqidoyzltgiomqo")
                .withDatasetParameters("dataepiaeapfsergd")
                .withParameters(mapOf("b", "dataqnacyheq"))
                .withAdditionalProperties(mapOf()))
            .withSchemaLinkedService(new LinkedServiceReference().withReferenceName("vewuyqaeoh")
                .withParameters(mapOf("aurghooxa", "datagejkbvhh", "hxjxjoezlqxrkdkn", "dataxb", "tzamicbig",
                    "dataobektmbozo", "euairaabmdlqjb", "datacdgzseznux")));
        model = BinaryData.fromObject(model).toObject(DataFlowSource.class);
        Assertions.assertEquals("dp", model.name());
        Assertions.assertEquals("xlhupmomihzbdnp", model.description());
        Assertions.assertEquals("kcdpreyxelyi", model.dataset().referenceName());
        Assertions.assertEquals("nquoxsotireimse", model.linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.flowlet().type());
        Assertions.assertEquals("aqidoyzltgiomqo", model.flowlet().referenceName());
        Assertions.assertEquals("vewuyqaeoh", model.schemaLinkedService().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
