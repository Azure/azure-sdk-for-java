// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DataFlowReference;
import com.azure.resourcemanager.datafactory.models.DataFlowReferenceType;
import com.azure.resourcemanager.datafactory.models.DataFlowSource;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DataFlowSourceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DataFlowSource model = BinaryData.fromString(
            "{\"schemaLinkedService\":{\"referenceName\":\"pbninjgazlsvbzfc\",\"parameters\":{\"hsy\":\"dataeedwjccik\"}},\"name\":\"krdre\",\"description\":\"olr\",\"dataset\":{\"referenceName\":\"ehqbeivdlhydwbdb\",\"parameters\":{\"ytjlkesmmpath\":\"datalpu\",\"llbvgwzsfftedous\":\"databtahdeanii\",\"aqo\":\"dataktjtgra\",\"btxxwpfhnjzud\":\"datafkbebauzl\"}},\"linkedService\":{\"referenceName\":\"pzkg\",\"parameters\":{\"ygisrz\":\"dataoywhczzqrhmngqbe\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"kdidjc\",\"datasetParameters\":\"datarmpwctofld\",\"parameters\":{\"xkbrfg\":\"datacdhz\",\"fj\":\"datarwjiyew\",\"xet\":\"datarwq\"},\"\":{\"ycnawthvmaxgnuy\":\"datawvrrmdqn\"}}}")
            .toObject(DataFlowSource.class);
        Assertions.assertEquals("krdre", model.name());
        Assertions.assertEquals("olr", model.description());
        Assertions.assertEquals("ehqbeivdlhydwbdb", model.dataset().referenceName());
        Assertions.assertEquals("pzkg", model.linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.flowlet().type());
        Assertions.assertEquals("kdidjc", model.flowlet().referenceName());
        Assertions.assertEquals("pbninjgazlsvbzfc", model.schemaLinkedService().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DataFlowSource model = new DataFlowSource().withName("krdre")
            .withDescription("olr")
            .withDataset(new DatasetReference().withReferenceName("ehqbeivdlhydwbdb")
                .withParameters(mapOf("ytjlkesmmpath", "datalpu", "llbvgwzsfftedous", "databtahdeanii", "aqo",
                    "dataktjtgra", "btxxwpfhnjzud", "datafkbebauzl")))
            .withLinkedService(new LinkedServiceReference().withReferenceName("pzkg")
                .withParameters(mapOf("ygisrz", "dataoywhczzqrhmngqbe")))
            .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                .withReferenceName("kdidjc")
                .withDatasetParameters("datarmpwctofld")
                .withParameters(mapOf("xkbrfg", "datacdhz", "fj", "datarwjiyew", "xet", "datarwq"))
                .withAdditionalProperties(mapOf()))
            .withSchemaLinkedService(new LinkedServiceReference().withReferenceName("pbninjgazlsvbzfc")
                .withParameters(mapOf("hsy", "dataeedwjccik")));
        model = BinaryData.fromObject(model).toObject(DataFlowSource.class);
        Assertions.assertEquals("krdre", model.name());
        Assertions.assertEquals("olr", model.description());
        Assertions.assertEquals("ehqbeivdlhydwbdb", model.dataset().referenceName());
        Assertions.assertEquals("pzkg", model.linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.flowlet().type());
        Assertions.assertEquals("kdidjc", model.flowlet().referenceName());
        Assertions.assertEquals("pbninjgazlsvbzfc", model.schemaLinkedService().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
