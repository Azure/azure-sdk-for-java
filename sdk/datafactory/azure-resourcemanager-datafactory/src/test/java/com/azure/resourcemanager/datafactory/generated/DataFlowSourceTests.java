// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DataFlowReference;
import com.azure.resourcemanager.datafactory.models.DataFlowReferenceType;
import com.azure.resourcemanager.datafactory.models.DataFlowSource;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DataFlowSourceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DataFlowSource model =
            BinaryData
                .fromString(
                    "{\"schemaLinkedService\":{\"referenceName\":\"zlpzbtzuyky\",\"parameters\":{\"fp\":\"datafsdyepfnocmbeza\"}},\"name\":\"tga\",\"description\":\"yqejga\",\"dataset\":{\"referenceName\":\"kctgkp\",\"parameters\":{\"fngdyfcixr\":\"dataqzkcyzm\",\"mkahpqha\":\"datalcqvhoejgoiutgw\",\"mip\":\"datayntacihnco\"}},\"linkedService\":{\"referenceName\":\"liqmvlbhikeaq\",\"parameters\":{\"dtsdfjy\":\"datagpomxpu\",\"mpyzgleo\":\"dataesocwiqbuou\",\"bwwzvdajf\":\"datajsb\",\"lwixvtbou\":\"datanncfmaciqgjjrlhi\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"tnd\",\"datasetParameters\":\"datagjttbasualapdlnd\",\"parameters\":{\"ixv\":\"dataqb\",\"spugzfeuzjljmph\":\"datalwynpbbfqvzfj\",\"zolgjzmicuydocc\":\"dataky\",\"iadhbatec\":\"dataxshanzb\"},\"\":{\"iucbda\":\"datasdohz\",\"pow\":\"datambwiinjdllwktl\",\"g\":\"datavvqxua\",\"si\":\"dataqwulynkgfcfdru\"}}}")
                .toObject(DataFlowSource.class);
        Assertions.assertEquals("tga", model.name());
        Assertions.assertEquals("yqejga", model.description());
        Assertions.assertEquals("kctgkp", model.dataset().referenceName());
        Assertions.assertEquals("liqmvlbhikeaq", model.linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.flowlet().type());
        Assertions.assertEquals("tnd", model.flowlet().referenceName());
        Assertions.assertEquals("zlpzbtzuyky", model.schemaLinkedService().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DataFlowSource model =
            new DataFlowSource()
                .withName("tga")
                .withDescription("yqejga")
                .withDataset(
                    new DatasetReference()
                        .withReferenceName("kctgkp")
                        .withParameters(
                            mapOf(
                                "fngdyfcixr",
                                "dataqzkcyzm",
                                "mkahpqha",
                                "datalcqvhoejgoiutgw",
                                "mip",
                                "datayntacihnco")))
                .withLinkedService(
                    new LinkedServiceReference()
                        .withReferenceName("liqmvlbhikeaq")
                        .withParameters(
                            mapOf(
                                "dtsdfjy",
                                "datagpomxpu",
                                "mpyzgleo",
                                "dataesocwiqbuou",
                                "bwwzvdajf",
                                "datajsb",
                                "lwixvtbou",
                                "datanncfmaciqgjjrlhi")))
                .withFlowlet(
                    new DataFlowReference()
                        .withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                        .withReferenceName("tnd")
                        .withDatasetParameters("datagjttbasualapdlnd")
                        .withParameters(
                            mapOf(
                                "ixv",
                                "dataqb",
                                "spugzfeuzjljmph",
                                "datalwynpbbfqvzfj",
                                "zolgjzmicuydocc",
                                "dataky",
                                "iadhbatec",
                                "dataxshanzb"))
                        .withAdditionalProperties(mapOf()))
                .withSchemaLinkedService(
                    new LinkedServiceReference()
                        .withReferenceName("zlpzbtzuyky")
                        .withParameters(mapOf("fp", "datafsdyepfnocmbeza")));
        model = BinaryData.fromObject(model).toObject(DataFlowSource.class);
        Assertions.assertEquals("tga", model.name());
        Assertions.assertEquals("yqejga", model.description());
        Assertions.assertEquals("kctgkp", model.dataset().referenceName());
        Assertions.assertEquals("liqmvlbhikeaq", model.linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.flowlet().type());
        Assertions.assertEquals("tnd", model.flowlet().referenceName());
        Assertions.assertEquals("zlpzbtzuyky", model.schemaLinkedService().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
