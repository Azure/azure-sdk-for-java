// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.CopyActivity;
import com.azure.resourcemanager.datafactory.models.CopyActivityLogSettings;
import com.azure.resourcemanager.datafactory.models.CopySink;
import com.azure.resourcemanager.datafactory.models.CopySource;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.LogLocationSettings;
import com.azure.resourcemanager.datafactory.models.LogSettings;
import com.azure.resourcemanager.datafactory.models.LogStorageSettings;
import com.azure.resourcemanager.datafactory.models.RedirectIncompatibleRowSettings;
import com.azure.resourcemanager.datafactory.models.SkipErrorFile;
import com.azure.resourcemanager.datafactory.models.StagingSettings;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CopyActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CopyActivity model = BinaryData.fromString(
            "{\"type\":\"Copy\",\"typeProperties\":{\"source\":{\"type\":\"CopySource\",\"sourceRetryCount\":\"datatvcjd\",\"sourceRetryWait\":\"datak\",\"maxConcurrentConnections\":\"datakhvcrjqzbmyftz\",\"disableMetricsCollection\":\"dataf\",\"\":{\"egursbzmixwaxtn\":\"datarbullqnfz\"}},\"sink\":{\"type\":\"CopySink\",\"writeBatchSize\":\"datatzdvx\",\"writeBatchTimeout\":\"datadaajlhgsuqmrkya\",\"sinkRetryCount\":\"datacbdsrxhp\",\"sinkRetryWait\":\"dataxn\",\"maxConcurrentConnections\":\"dataj\",\"disableMetricsCollection\":\"dataingadkrkny\",\"\":{\"fzqcjfq\":\"datag\",\"wbuxqzfwgbqsvexz\":\"datayf\",\"nfok\":\"datajfwiavmqutgxdl\"}},\"translator\":\"dataxrsky\",\"enableStaging\":\"datappppte\",\"stagingSettings\":{\"linkedServiceName\":{\"referenceName\":\"ktretutsygzjp\",\"parameters\":{\"rotg\":\"dataxfnrltanvb\",\"rpmgd\":\"dataxk\",\"tttydjq\":\"dataliaizsglav\",\"ypwmveyrcikedmo\":\"datamzrqkjqcsh\"}},\"path\":\"datajuqowuicvjyj\",\"enableCompression\":\"datamleuqxhmrilwkcg\",\"\":{\"dqqzikv\":\"datapvtaulxxznf\",\"paaexrzx\":\"datawqiwodhas\"}},\"parallelCopies\":\"datafqchtdmh\",\"dataIntegrationUnits\":\"datat\",\"enableSkipIncompatibleRow\":\"dataulkoepsso\",\"redirectIncompatibleRowSettings\":{\"linkedServiceName\":\"dataibyg\",\"path\":\"datacidiwkxi\",\"\":{\"trdicstrbq\":\"dataqxlxoksyyp\",\"katccetyyv\":\"dataatkliopgw\",\"nsdp\":\"datakwobb\",\"lzk\":\"datairt\"}},\"logStorageSettings\":{\"linkedServiceName\":{\"referenceName\":\"eegzhhfnaqc\",\"parameters\":{\"uthfwph\":\"datacklo\",\"uofn\":\"datamllbljehwhx\",\"ah\":\"dataa\",\"aovubfl\":\"datakvnapxhtqwsdd\"}},\"path\":\"datakeub\",\"logLevel\":\"dataibuabpvdwhvn\",\"enableReliableLogging\":\"databu\",\"\":{\"vinkgbkz\":\"datakqoeou\"}},\"logSettings\":{\"enableCopyActivityLog\":\"datamfhdyasklmyf\",\"copyActivityLogSettings\":{\"logLevel\":\"dataxwedetawljatvfd\",\"enableReliableLogging\":\"dataspdutt\"},\"logLocationSettings\":{\"linkedServiceName\":{\"referenceName\":\"jtszqexcqcwbxx\",\"parameters\":{\"lvkdwwqhhlfvmwu\":\"dataekqjdru\",\"fbdanfexlawkeq\":\"dataarswsvtzotmwxq\",\"dyk\":\"datahzbwrtmjskbienjn\"}},\"path\":\"dataounbyvsfqurr\"}},\"preserveRules\":[\"databknoxjhed\",\"datahmmwbvr\",\"dataajbiigxxrez\"],\"preserve\":[\"datakwigifinoys\"],\"validateDataConsistency\":\"datalpshxjhanskoo\",\"skipErrorFile\":{\"fileMissing\":\"datank\",\"dataInconsistency\":\"datasqvfyoksstal\"}},\"inputs\":[{\"referenceName\":\"lxj\",\"parameters\":{\"qhscaand\":\"datauymna\"}},{\"referenceName\":\"lvccuvcva\",\"parameters\":{\"r\":\"databyjgdjvyclasd\",\"gsnpv\":\"datanupftek\",\"th\":\"dataczpkooao\",\"ebtjg\":\"datawcs\"}},{\"referenceName\":\"euimtxmd\",\"parameters\":{\"tlbskinmx\":\"dataargukoirniv\"}},{\"referenceName\":\"njgu\",\"parameters\":{\"azeq\":\"dataipgfxstw\",\"shmqxgjzslho\":\"datanouuujliti\"}}],\"outputs\":[{\"referenceName\":\"xip\",\"parameters\":{\"itlam\":\"datapvkcnggocnwnjm\",\"wqzsyetbff\":\"databklkhhjx\",\"l\":\"datahqzvwznwcqoapdtj\"}},{\"referenceName\":\"etfdpurvz\",\"parameters\":{\"kvq\":\"databesfumedsaa\",\"svivqkyaghfvubl\":\"datab\",\"nymbjrsd\":\"datazsveguxaxij\"}}],\"linkedServiceName\":{\"referenceName\":\"fqxrlzijosuz\",\"parameters\":{\"w\":\"datacmlzmfetidnewrvj\",\"ngowdavpqyhaxh\":\"datamx\",\"gkwpbnefabgt\":\"datarzozf\",\"ugddycfyfau\":\"dataggoppmxcm\"}},\"policy\":{\"timeout\":\"datazqvawkesx\",\"retry\":\"datacxxfwpjpgqwbrz\",\"retryIntervalInSeconds\":479383165,\"secureInput\":true,\"secureOutput\":true,\"\":{\"lcyhjh\":\"datamhorrecoiqwnqli\"}},\"name\":\"kfp\",\"description\":\"iommis\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"jcmpoh\",\"dependencyConditions\":[\"Completed\",\"Succeeded\",\"Succeeded\"],\"\":{\"uyqdj\":\"datawawymahboind\"}},{\"activity\":\"ugcjssqpkm\",\"dependencyConditions\":[\"Succeeded\",\"Succeeded\",\"Completed\",\"Succeeded\"],\"\":{\"iwuver\":\"datavupbzqwwttqj\",\"co\":\"dataavbjv\"}},{\"activity\":\"upshoofaskyy\",\"dependencyConditions\":[\"Succeeded\",\"Succeeded\",\"Succeeded\",\"Succeeded\"],\"\":{\"lmdr\":\"datauhbcckbcvt\",\"uhmblni\":\"dataasvghphlbk\",\"yvkkpovz\":\"datamviaasdexsrglxlj\",\"pdjomddadwosjxy\":\"dataspdipdxq\"}},{\"activity\":\"wvilky\",\"dependencyConditions\":[\"Succeeded\",\"Failed\",\"Completed\"],\"\":{\"jmcybrpwjenbxtk\":\"datadbbjg\",\"rxauuhdkhkizyx\":\"datah\",\"jwipfryivpe\":\"datayxnhu\"}}],\"userProperties\":[{\"name\":\"rpdxygf\",\"value\":\"dataqxsemezkpd\"}],\"\":{\"otefekfxmgjyww\":\"datawftfrqebrjo\",\"hodisypgapfdwhwb\":\"datadnrdsdkvhuiad\",\"y\":\"dataadokuqnkoskflnj\",\"mbh\":\"datarjee\"}}")
            .toObject(CopyActivity.class);
        Assertions.assertEquals("kfp", model.name());
        Assertions.assertEquals("iommis", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("jcmpoh", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("rpdxygf", model.userProperties().get(0).name());
        Assertions.assertEquals("fqxrlzijosuz", model.linkedServiceName().referenceName());
        Assertions.assertEquals(479383165, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals("lxj", model.inputs().get(0).referenceName());
        Assertions.assertEquals("xip", model.outputs().get(0).referenceName());
        Assertions.assertEquals("ktretutsygzjp", model.stagingSettings().linkedServiceName().referenceName());
        Assertions.assertEquals("eegzhhfnaqc", model.logStorageSettings().linkedServiceName().referenceName());
        Assertions.assertEquals("jtszqexcqcwbxx",
            model.logSettings().logLocationSettings().linkedServiceName().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CopyActivity model = new CopyActivity().withName("kfp").withDescription("iommis")
            .withState(ActivityState.INACTIVE).withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
            .withDependsOn(Arrays.asList(
                new ActivityDependency().withActivity("jcmpoh")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED,
                        DependencyCondition.SUCCEEDED, DependencyCondition.SUCCEEDED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("ugcjssqpkm")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED,
                        DependencyCondition.SUCCEEDED, DependencyCondition.COMPLETED, DependencyCondition.SUCCEEDED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("upshoofaskyy")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED,
                        DependencyCondition.SUCCEEDED, DependencyCondition.SUCCEEDED, DependencyCondition.SUCCEEDED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("wvilky")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED, DependencyCondition.FAILED,
                        DependencyCondition.COMPLETED))
                    .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("rpdxygf").withValue("dataqxsemezkpd")))
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("fqxrlzijosuz")
                .withParameters(mapOf("w", "datacmlzmfetidnewrvj", "ngowdavpqyhaxh", "datamx", "gkwpbnefabgt",
                    "datarzozf", "ugddycfyfau", "dataggoppmxcm")))
            .withPolicy(new ActivityPolicy().withTimeout("datazqvawkesx").withRetry("datacxxfwpjpgqwbrz")
                .withRetryIntervalInSeconds(479383165).withSecureInput(true).withSecureOutput(true)
                .withAdditionalProperties(mapOf()))
            .withInputs(Arrays.asList(
                new DatasetReference().withReferenceName("lxj").withParameters(mapOf("qhscaand", "datauymna")),
                new DatasetReference().withReferenceName("lvccuvcva").withParameters(
                    mapOf("r", "databyjgdjvyclasd", "gsnpv", "datanupftek", "th", "dataczpkooao", "ebtjg", "datawcs")),
                new DatasetReference().withReferenceName("euimtxmd")
                    .withParameters(mapOf("tlbskinmx", "dataargukoirniv")),
                new DatasetReference().withReferenceName("njgu")
                    .withParameters(mapOf("azeq", "dataipgfxstw", "shmqxgjzslho", "datanouuujliti"))))
            .withOutputs(
                Arrays.asList(
                    new DatasetReference().withReferenceName("xip")
                        .withParameters(mapOf("itlam", "datapvkcnggocnwnjm", "wqzsyetbff", "databklkhhjx", "l",
                            "datahqzvwznwcqoapdtj")),
                    new DatasetReference().withReferenceName("etfdpurvz").withParameters(
                        mapOf("kvq", "databesfumedsaa", "svivqkyaghfvubl", "datab", "nymbjrsd", "datazsveguxaxij"))))
            .withSource(new CopySource().withSourceRetryCount("datatvcjd").withSourceRetryWait("datak")
                .withMaxConcurrentConnections("datakhvcrjqzbmyftz").withDisableMetricsCollection("dataf")
                .withAdditionalProperties(mapOf("type", "CopySource")))
            .withSink(new CopySink().withWriteBatchSize("datatzdvx").withWriteBatchTimeout("datadaajlhgsuqmrkya")
                .withSinkRetryCount("datacbdsrxhp").withSinkRetryWait("dataxn").withMaxConcurrentConnections("dataj")
                .withDisableMetricsCollection("dataingadkrkny").withAdditionalProperties(mapOf("type", "CopySink")))
            .withTranslator("dataxrsky").withEnableStaging("datappppte")
            .withStagingSettings(new StagingSettings()
                .withLinkedServiceName(new LinkedServiceReference().withReferenceName("ktretutsygzjp")
                    .withParameters(mapOf("rotg", "dataxfnrltanvb", "rpmgd", "dataxk", "tttydjq", "dataliaizsglav",
                        "ypwmveyrcikedmo", "datamzrqkjqcsh")))
                .withPath("datajuqowuicvjyj").withEnableCompression("datamleuqxhmrilwkcg")
                .withAdditionalProperties(mapOf()))
            .withParallelCopies("datafqchtdmh").withDataIntegrationUnits("datat")
            .withEnableSkipIncompatibleRow("dataulkoepsso")
            .withRedirectIncompatibleRowSettings(new RedirectIncompatibleRowSettings().withLinkedServiceName("dataibyg")
                .withPath("datacidiwkxi").withAdditionalProperties(mapOf()))
            .withLogStorageSettings(new LogStorageSettings()
                .withLinkedServiceName(new LinkedServiceReference().withReferenceName("eegzhhfnaqc")
                    .withParameters(mapOf("uthfwph", "datacklo", "uofn", "datamllbljehwhx", "ah", "dataa", "aovubfl",
                        "datakvnapxhtqwsdd")))
                .withPath("datakeub").withLogLevel("dataibuabpvdwhvn").withEnableReliableLogging("databu")
                .withAdditionalProperties(mapOf()))
            .withLogSettings(new LogSettings().withEnableCopyActivityLog("datamfhdyasklmyf")
                .withCopyActivityLogSettings(new CopyActivityLogSettings().withLogLevel("dataxwedetawljatvfd")
                    .withEnableReliableLogging("dataspdutt"))
                .withLogLocationSettings(new LogLocationSettings()
                    .withLinkedServiceName(new LinkedServiceReference().withReferenceName("jtszqexcqcwbxx")
                        .withParameters(mapOf("lvkdwwqhhlfvmwu", "dataekqjdru", "fbdanfexlawkeq", "dataarswsvtzotmwxq",
                            "dyk", "datahzbwrtmjskbienjn")))
                    .withPath("dataounbyvsfqurr")))
            .withPreserveRules(Arrays.asList("databknoxjhed", "datahmmwbvr", "dataajbiigxxrez"))
            .withPreserve(Arrays.asList("datakwigifinoys")).withValidateDataConsistency("datalpshxjhanskoo")
            .withSkipErrorFile(new SkipErrorFile().withFileMissing("datank").withDataInconsistency("datasqvfyoksstal"));
        model = BinaryData.fromObject(model).toObject(CopyActivity.class);
        Assertions.assertEquals("kfp", model.name());
        Assertions.assertEquals("iommis", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("jcmpoh", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("rpdxygf", model.userProperties().get(0).name());
        Assertions.assertEquals("fqxrlzijosuz", model.linkedServiceName().referenceName());
        Assertions.assertEquals(479383165, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals("lxj", model.inputs().get(0).referenceName());
        Assertions.assertEquals("xip", model.outputs().get(0).referenceName());
        Assertions.assertEquals("ktretutsygzjp", model.stagingSettings().linkedServiceName().referenceName());
        Assertions.assertEquals("eegzhhfnaqc", model.logStorageSettings().linkedServiceName().referenceName());
        Assertions.assertEquals("jtszqexcqcwbxx",
            model.logSettings().logLocationSettings().linkedServiceName().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
