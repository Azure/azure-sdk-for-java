// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.CopyActivity;
import com.azure.resourcemanager.datafactory.models.CopyActivityLogSettings;
import com.azure.resourcemanager.datafactory.models.CopySink;
import com.azure.resourcemanager.datafactory.models.CopySource;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.LogLocationSettings;
import com.azure.resourcemanager.datafactory.models.LogSettings;
import com.azure.resourcemanager.datafactory.models.LogStorageSettings;
import com.azure.resourcemanager.datafactory.models.RedirectIncompatibleRowSettings;
import com.azure.resourcemanager.datafactory.models.SkipErrorFile;
import com.azure.resourcemanager.datafactory.models.StagingSettings;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CopyActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CopyActivity model = BinaryData.fromString(
            "{\"type\":\"Copy\",\"typeProperties\":{\"source\":{\"type\":\"CopySource\",\"sourceRetryCount\":\"datamkmwdok\",\"sourceRetryWait\":\"datayilho\",\"maxConcurrentConnections\":\"datatdioxgsrhxoyrgv\",\"disableMetricsCollection\":\"datacctm\",\"\":{\"rarukdepsxu\":\"databplqh\"}},\"sink\":{\"type\":\"CopySink\",\"writeBatchSize\":\"dataqcqfouh\",\"writeBatchTimeout\":\"datayxgxbgochpx\",\"sinkRetryCount\":\"datawpwwsioozrugbdk\",\"sinkRetryWait\":\"datawckuvlzkzjjta\",\"maxConcurrentConnections\":\"dataqjebtdpsg\",\"disableMetricsCollection\":\"datae\",\"\":{\"tytwtfqpmpyww\":\"datazpkvyl\",\"mjc\":\"databuk\",\"nc\":\"datadoecdq\"}},\"translator\":\"datacocchdxjrrb\",\"enableStaging\":\"databnkqps\",\"stagingSettings\":{\"linkedServiceName\":{\"referenceName\":\"ouppzgdtuhd\",\"parameters\":{\"rzhzf\":\"dataojcmhycdxwv\",\"fyltornvbhuy\":\"datac\",\"vcy\":\"datalwifbdwy\",\"zvejqzyu\":\"databbvkthre\"}},\"path\":\"datalokeqe\",\"enableCompression\":\"databpiie\",\"\":{\"v\":\"datachsgotgwerbpo\",\"nicgrxcei\":\"datah\",\"dtkllqhznutrx\":\"datav\",\"jh\":\"datamztrnniarje\"}},\"parallelCopies\":\"dataiqfoqw\",\"dataIntegrationUnits\":\"dataqykqfserlsaip\",\"enableSkipIncompatibleRow\":\"datahetagwmzg\",\"redirectIncompatibleRowSettings\":{\"linkedServiceName\":\"dataojgmobkaligo\",\"path\":\"datakehpdssvlubdp\",\"\":{\"mixu\":\"dataxsxbxd\",\"hmtbu\":\"datacekcqmjqqauft\",\"irshl\":\"datakcnkghkr\",\"xyofftxzovbhqel\":\"dataeayodrvwnqb\"}},\"logStorageSettings\":{\"linkedServiceName\":{\"referenceName\":\"lfxejpo\",\"parameters\":{\"lgstrzfhehd\":\"dataigsabtxndyjwm\",\"ohnymfhmlji\":\"dataovkbcbe\"}},\"path\":\"datagfvzvmtjcxig\",\"logLevel\":\"datazxdb\",\"enableReliableLogging\":\"dataceetuivmbu\",\"\":{\"pjulsl\":\"datawywfhfptbdxtv\"}},\"logSettings\":{\"enableCopyActivityLog\":\"datazytxe\",\"copyActivityLogSettings\":{\"logLevel\":\"datagmqntutetdt\",\"enableReliableLogging\":\"dataidbrjw\"},\"logLocationSettings\":{\"linkedServiceName\":{\"referenceName\":\"wouepaqn\",\"parameters\":{\"ecttub\":\"datagrcmcqppledx\",\"hwpxps\":\"datawelutrvd\",\"ccya\":\"datawyltsl\"}},\"path\":\"datasfmndrdqqjkegbm\"}},\"preserveRules\":[\"dataciherzkhiovhjk\"],\"preserve\":[\"datalpjrepahvoir\",\"datanxqn\"],\"validateDataConsistency\":\"datasvnldtqykzmwd\",\"skipErrorFile\":{\"fileMissing\":\"dataejltrnqxicyo\",\"dataInconsistency\":\"datayo\"}},\"inputs\":[{\"referenceName\":\"rxfxycjia\",\"parameters\":{\"gm\":\"datahfuml\",\"qlrt\":\"datazxxkokipklfwnhfk\",\"jitbnhglrvlarozs\":\"datafswqdkv\"}},{\"referenceName\":\"mucr\",\"parameters\":{\"nlvjgskbksltun\":\"datagsdxtwqqukg\",\"uqyzxzjehd\":\"datawxsqvxlupccfwqis\",\"pgmoazsj\":\"datalvqtmzociaetctj\",\"ccvxqbxgq\":\"datauevfvnnt\"}}],\"outputs\":[{\"referenceName\":\"nri\",\"parameters\":{\"ldi\":\"datakibvw\"}},{\"referenceName\":\"mxsvz\",\"parameters\":{\"dljthmibqgldhtt\":\"datatalobx\",\"nny\":\"dataalpq\"}}],\"linkedServiceName\":{\"referenceName\":\"jea\",\"parameters\":{\"fdkkvijilfqvodz\":\"dataewlwbxuf\",\"ld\":\"datawdqvq\",\"qpfwnjdyoxformfe\":\"dataqoaop\"}},\"policy\":{\"timeout\":\"dataqjneszxte\",\"retry\":\"datahxphxokdbv\",\"retryIntervalInSeconds\":187311,\"secureInput\":false,\"secureOutput\":true,\"\":{\"jrnnwgrxzcn\":\"dataxbzmpvue\",\"zqlsnycchpcjzt\":\"dataguezxluimkwbwmg\",\"njxciunetcxgdg\":\"dataiuuuyvpcfv\",\"tzbphxxvftj\":\"datakletlwa\"}},\"name\":\"rq\",\"description\":\"onmokyjmtdny\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"bqlcakle\",\"dependencyConditions\":[\"Completed\",\"Succeeded\",\"Skipped\"],\"\":{\"xgg\":\"dataezyhphaokhbq\",\"oclef\":\"datakqitpbynetyxuxo\"}},{\"activity\":\"gg\",\"dependencyConditions\":[\"Skipped\"],\"\":{\"rvswcpspaoxigp\":\"databouhmngccnkgiu\",\"u\":\"datai\"}},{\"activity\":\"pgpqsmglutn\",\"dependencyConditions\":[\"Succeeded\"],\"\":{\"idbcxbgfwwcfwl\":\"dataxxnbogx\",\"imviefbje\":\"datanjganmopcmetdruu\",\"khjuuepnjuqw\":\"datamiy\"}}],\"userProperties\":[{\"name\":\"bbpxqsv\",\"value\":\"dataxvqwisdwtug\"}],\"\":{\"cbwiwhtjox\":\"dataupip\"}}")
            .toObject(CopyActivity.class);
        Assertions.assertEquals("rq", model.name());
        Assertions.assertEquals("onmokyjmtdny", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.onInactiveMarkAs());
        Assertions.assertEquals("bqlcakle", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("bbpxqsv", model.userProperties().get(0).name());
        Assertions.assertEquals("jea", model.linkedServiceName().referenceName());
        Assertions.assertEquals(187311, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals("rxfxycjia", model.inputs().get(0).referenceName());
        Assertions.assertEquals("nri", model.outputs().get(0).referenceName());
        Assertions.assertEquals("ouppzgdtuhd", model.stagingSettings().linkedServiceName().referenceName());
        Assertions.assertEquals("lfxejpo", model.logStorageSettings().linkedServiceName().referenceName());
        Assertions.assertEquals("wouepaqn",
            model.logSettings().logLocationSettings().linkedServiceName().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CopyActivity model = new CopyActivity().withName("rq")
            .withDescription("onmokyjmtdny")
            .withState(ActivityState.INACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SUCCEEDED)
            .withDependsOn(Arrays.asList(
                new ActivityDependency().withActivity("bqlcakle")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED,
                        DependencyCondition.SUCCEEDED, DependencyCondition.SKIPPED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("gg")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("pgpqsmglutn")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED))
                    .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("bbpxqsv").withValue("dataxvqwisdwtug")))
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("jea")
                .withParameters(
                    mapOf("fdkkvijilfqvodz", "dataewlwbxuf", "ld", "datawdqvq", "qpfwnjdyoxformfe", "dataqoaop")))
            .withPolicy(new ActivityPolicy().withTimeout("dataqjneszxte")
                .withRetry("datahxphxokdbv")
                .withRetryIntervalInSeconds(187311)
                .withSecureInput(false)
                .withSecureOutput(true)
                .withAdditionalProperties(mapOf()))
            .withInputs(
                Arrays.asList(
                    new DatasetReference().withReferenceName("rxfxycjia")
                        .withParameters(mapOf("gm", "datahfuml", "qlrt", "datazxxkokipklfwnhfk", "jitbnhglrvlarozs",
                            "datafswqdkv")),
                    new DatasetReference().withReferenceName("mucr")
                        .withParameters(mapOf("nlvjgskbksltun", "datagsdxtwqqukg", "uqyzxzjehd", "datawxsqvxlupccfwqis",
                            "pgmoazsj", "datalvqtmzociaetctj", "ccvxqbxgq", "datauevfvnnt"))))
            .withOutputs(
                Arrays.asList(new DatasetReference().withReferenceName("nri").withParameters(mapOf("ldi", "datakibvw")),
                    new DatasetReference().withReferenceName("mxsvz")
                        .withParameters(mapOf("dljthmibqgldhtt", "datatalobx", "nny", "dataalpq"))))
            .withSource(new CopySource().withSourceRetryCount("datamkmwdok")
                .withSourceRetryWait("datayilho")
                .withMaxConcurrentConnections("datatdioxgsrhxoyrgv")
                .withDisableMetricsCollection("datacctm")
                .withAdditionalProperties(mapOf("type", "CopySource")))
            .withSink(new CopySink().withWriteBatchSize("dataqcqfouh")
                .withWriteBatchTimeout("datayxgxbgochpx")
                .withSinkRetryCount("datawpwwsioozrugbdk")
                .withSinkRetryWait("datawckuvlzkzjjta")
                .withMaxConcurrentConnections("dataqjebtdpsg")
                .withDisableMetricsCollection("datae")
                .withAdditionalProperties(mapOf("type", "CopySink")))
            .withTranslator("datacocchdxjrrb")
            .withEnableStaging("databnkqps")
            .withStagingSettings(new StagingSettings()
                .withLinkedServiceName(new LinkedServiceReference().withReferenceName("ouppzgdtuhd")
                    .withParameters(mapOf("rzhzf", "dataojcmhycdxwv", "fyltornvbhuy", "datac", "vcy", "datalwifbdwy",
                        "zvejqzyu", "databbvkthre")))
                .withPath("datalokeqe")
                .withEnableCompression("databpiie")
                .withAdditionalProperties(mapOf()))
            .withParallelCopies("dataiqfoqw")
            .withDataIntegrationUnits("dataqykqfserlsaip")
            .withEnableSkipIncompatibleRow("datahetagwmzg")
            .withRedirectIncompatibleRowSettings(
                new RedirectIncompatibleRowSettings().withLinkedServiceName("dataojgmobkaligo")
                    .withPath("datakehpdssvlubdp")
                    .withAdditionalProperties(mapOf()))
            .withLogStorageSettings(new LogStorageSettings()
                .withLinkedServiceName(new LinkedServiceReference().withReferenceName("lfxejpo")
                    .withParameters(mapOf("lgstrzfhehd", "dataigsabtxndyjwm", "ohnymfhmlji", "dataovkbcbe")))
                .withPath("datagfvzvmtjcxig")
                .withLogLevel("datazxdb")
                .withEnableReliableLogging("dataceetuivmbu")
                .withAdditionalProperties(mapOf()))
            .withLogSettings(new LogSettings().withEnableCopyActivityLog("datazytxe")
                .withCopyActivityLogSettings(new CopyActivityLogSettings().withLogLevel("datagmqntutetdt")
                    .withEnableReliableLogging("dataidbrjw"))
                .withLogLocationSettings(
                    new LogLocationSettings()
                        .withLinkedServiceName(
                            new LinkedServiceReference().withReferenceName("wouepaqn")
                                .withParameters(mapOf("ecttub", "datagrcmcqppledx", "hwpxps", "datawelutrvd", "ccya",
                                    "datawyltsl")))
                        .withPath("datasfmndrdqqjkegbm")))
            .withPreserveRules(Arrays.asList("dataciherzkhiovhjk"))
            .withPreserve(Arrays.asList("datalpjrepahvoir", "datanxqn"))
            .withValidateDataConsistency("datasvnldtqykzmwd")
            .withSkipErrorFile(new SkipErrorFile().withFileMissing("dataejltrnqxicyo").withDataInconsistency("datayo"));
        model = BinaryData.fromObject(model).toObject(CopyActivity.class);
        Assertions.assertEquals("rq", model.name());
        Assertions.assertEquals("onmokyjmtdny", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.onInactiveMarkAs());
        Assertions.assertEquals("bqlcakle", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("bbpxqsv", model.userProperties().get(0).name());
        Assertions.assertEquals("jea", model.linkedServiceName().referenceName());
        Assertions.assertEquals(187311, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals("rxfxycjia", model.inputs().get(0).referenceName());
        Assertions.assertEquals("nri", model.outputs().get(0).referenceName());
        Assertions.assertEquals("ouppzgdtuhd", model.stagingSettings().linkedServiceName().referenceName());
        Assertions.assertEquals("lfxejpo", model.logStorageSettings().linkedServiceName().referenceName());
        Assertions.assertEquals("wouepaqn",
            model.logSettings().logLocationSettings().linkedServiceName().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
