// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.CopyActivity;
import com.azure.resourcemanager.datafactory.models.CopyActivityLogSettings;
import com.azure.resourcemanager.datafactory.models.CopySink;
import com.azure.resourcemanager.datafactory.models.CopySource;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.LogLocationSettings;
import com.azure.resourcemanager.datafactory.models.LogSettings;
import com.azure.resourcemanager.datafactory.models.LogStorageSettings;
import com.azure.resourcemanager.datafactory.models.RedirectIncompatibleRowSettings;
import com.azure.resourcemanager.datafactory.models.SkipErrorFile;
import com.azure.resourcemanager.datafactory.models.StagingSettings;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CopyActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CopyActivity model = BinaryData.fromString(
            "{\"type\":\"Copy\",\"typeProperties\":{\"source\":{\"type\":\"CopySource\",\"sourceRetryCount\":\"datafhfptbdxtvlpj\",\"sourceRetryWait\":\"datasl\",\"maxConcurrentConnections\":\"datauzytxeaqig\",\"disableMetricsCollection\":\"datantutetdtgci\",\"\":{\"qnfyhgrcmcqpp\":\"datajwiwouep\",\"xyecttu\":\"datae\"}},\"sink\":{\"type\":\"CopySink\",\"writeBatchSize\":\"datawelutrvd\",\"writeBatchTimeout\":\"datawp\",\"sinkRetryCount\":\"datascwyltslf\",\"sinkRetryWait\":\"datayavysfmndrdqq\",\"maxConcurrentConnections\":\"dataeg\",\"disableMetricsCollection\":\"dataldkciherzkh\",\"\":{\"oiranxq\":\"datahjkwfolpjrepah\",\"nldt\":\"datazss\",\"qxi\":\"dataykzmwdoqrejltr\"}},\"translator\":\"dataozryoxmfrxfxyc\",\"enableStaging\":\"dataalvchfumlf\",\"stagingSettings\":{\"linkedServiceName\":{\"referenceName\":\"lzxxkokipklfwnhf\",\"parameters\":{\"hg\":\"datalrtffswqdkvljitb\"}},\"path\":\"datavlaro\",\"enableCompression\":\"datawmucrzabgsdxtw\",\"\":{\"kbksltunrwxsq\":\"datakgonlvjg\"}},\"parallelCopies\":\"datalupccfwqisouqy\",\"dataIntegrationUnits\":\"datazjehdklvqtmzoci\",\"enableSkipIncompatibleRow\":\"datatctjhpgmoazsjsu\",\"redirectIncompatibleRowSettings\":{\"linkedServiceName\":\"datafvnntrccvxqb\",\"path\":\"dataq\",\"\":{\"xekibv\":\"datanri\",\"bxldl\":\"dataqldilmxsvzwbktal\"}},\"logStorageSettings\":{\"linkedServiceName\":{\"referenceName\":\"hmibqgldhtt\",\"parameters\":{\"alxlewlwbxufqf\":\"datapqlnnyevj\",\"lfqvo\":\"datakkvij\"}},\"path\":\"dataowdqvqfldaqoao\",\"logLevel\":\"dataqpfwnjdyoxformfe\",\"enableReliableLogging\":\"datafq\",\"\":{\"hxphxokdbv\":\"dataszxtes\",\"bz\":\"datapqttusux\",\"jrnnwgrxzcn\":\"datapvue\"}},\"logSettings\":{\"enableCopyActivityLog\":\"dataezxluimkwb\",\"copyActivityLogSettings\":{\"logLevel\":\"dataq\",\"enableReliableLogging\":\"datal\"},\"logLocationSettings\":{\"linkedServiceName\":{\"referenceName\":\"nycchpcjztz\",\"parameters\":{\"vp\":\"datau\",\"xciunet\":\"datafvin\",\"hxxvft\":\"dataxgdgqkletlwavtzb\",\"kyjmtdnymbe\":\"datadrqgionm\"}},\"path\":\"dataskb\"}},\"preserveRules\":[\"dataaklesjgxdhgezy\",\"dataphaokhbqmxgglk\"],\"preserve\":[\"datapbynetyxuxopoc\"],\"validateDataConsistency\":\"dataffgggglz\",\"skipErrorFile\":{\"fileMissing\":\"datauhmngc\",\"dataInconsistency\":\"datakgiusrvs\"}},\"inputs\":[{\"referenceName\":\"spaoxi\",\"parameters\":{\"u\":\"datai\",\"yn\":\"datapgpqsmglutn\",\"xbgfwwcfwlwnj\":\"datalxxnbogxkidb\"}},{\"referenceName\":\"anm\",\"parameters\":{\"fbjesmiyj\":\"datametdruugimvi\",\"xqsvax\":\"datahjuuepnjuqwnajbb\"}}],\"outputs\":[{\"referenceName\":\"isdwtug\",\"parameters\":{\"cbwiwhtjox\":\"dataupip\"}},{\"referenceName\":\"llhkzunnwmwwxy\",\"parameters\":{\"qmcvu\":\"datakdvevhyuuihap\",\"fiiif\":\"dataekubljnizwztlcr\",\"ervtrulzlrmrt\":\"dataxnfarmficqr\"}},{\"referenceName\":\"smpmhlcxb\",\"parameters\":{\"bicjzntiblxeygo\":\"datagcdfelvapb\",\"oanpkcmdixiu\":\"datauhroicjtgqdy\",\"zlvhohzkcsjddzpo\":\"dataqbcalgspzoafp\"}},{\"referenceName\":\"mnmkypeqmuue\",\"parameters\":{\"y\":\"datakrulavxe\",\"chwpfunptsry\":\"dataf\"}}],\"linkedServiceName\":{\"referenceName\":\"a\",\"parameters\":{\"baddlmj\":\"datawbxvsytbxcj\",\"rc\":\"dataulio\",\"valezkyfykm\":\"datanthluze\"}},\"policy\":{\"timeout\":\"dataasuwep\",\"retry\":\"datagtyt\",\"retryIntervalInSeconds\":333163893,\"secureInput\":false,\"secureOutput\":true,\"\":{\"ykshizwdswikyewv\":\"datafqffwvnjgj\",\"meftlgjrfkqf\":\"datakzwqzwsguipqq\",\"kxk\":\"datadrel\"}},\"name\":\"glua\",\"description\":\"gjoy\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"vrmenrcqickhvps\",\"dependencyConditions\":[\"Skipped\",\"Failed\",\"Completed\"],\"\":{\"yojzvaykfjgakays\":\"datangmonqyntyuqdz\",\"zwm\":\"datakydqy\",\"muot\":\"datawrqzizgg\"}}],\"userProperties\":[{\"name\":\"abfyjampvwx\",\"value\":\"datakhprlt\"},{\"name\":\"ipmnqrbyq\",\"value\":\"datayw\"}],\"\":{\"yu\":\"datawcjkargg\"}}")
            .toObject(CopyActivity.class);
        Assertions.assertEquals("glua", model.name());
        Assertions.assertEquals("gjoy", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("vrmenrcqickhvps", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("abfyjampvwx", model.userProperties().get(0).name());
        Assertions.assertEquals("a", model.linkedServiceName().referenceName());
        Assertions.assertEquals(333163893, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals("spaoxi", model.inputs().get(0).referenceName());
        Assertions.assertEquals("isdwtug", model.outputs().get(0).referenceName());
        Assertions.assertEquals("lzxxkokipklfwnhf", model.stagingSettings().linkedServiceName().referenceName());
        Assertions.assertEquals("hmibqgldhtt", model.logStorageSettings().linkedServiceName().referenceName());
        Assertions.assertEquals("nycchpcjztz",
            model.logSettings().logLocationSettings().linkedServiceName().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CopyActivity model = new CopyActivity().withName("glua")
            .withDescription("gjoy")
            .withState(ActivityState.ACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
            .withDependsOn(Arrays.asList(new ActivityDependency().withActivity("vrmenrcqickhvps")
                .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.FAILED,
                    DependencyCondition.COMPLETED))
                .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("abfyjampvwx").withValue("datakhprlt"),
                new UserProperty().withName("ipmnqrbyq").withValue("datayw")))
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("a")
                .withParameters(mapOf("baddlmj", "datawbxvsytbxcj", "rc", "dataulio", "valezkyfykm", "datanthluze")))
            .withPolicy(new ActivityPolicy().withTimeout("dataasuwep")
                .withRetry("datagtyt")
                .withRetryIntervalInSeconds(333163893)
                .withSecureInput(false)
                .withSecureOutput(true)
                .withAdditionalProperties(mapOf()))
            .withInputs(Arrays.asList(
                new DatasetReference().withReferenceName("spaoxi")
                    .withParameters(mapOf("u", "datai", "yn", "datapgpqsmglutn", "xbgfwwcfwlwnj", "datalxxnbogxkidb")),
                new DatasetReference().withReferenceName("anm")
                    .withParameters(mapOf("fbjesmiyj", "datametdruugimvi", "xqsvax", "datahjuuepnjuqwnajbb"))))
            .withOutputs(Arrays.asList(
                new DatasetReference().withReferenceName("isdwtug").withParameters(mapOf("cbwiwhtjox", "dataupip")),
                new DatasetReference().withReferenceName("llhkzunnwmwwxy")
                    .withParameters(mapOf("qmcvu", "datakdvevhyuuihap", "fiiif", "dataekubljnizwztlcr", "ervtrulzlrmrt",
                        "dataxnfarmficqr")),
                new DatasetReference().withReferenceName("smpmhlcxb")
                    .withParameters(mapOf("bicjzntiblxeygo", "datagcdfelvapb", "oanpkcmdixiu", "datauhroicjtgqdy",
                        "zlvhohzkcsjddzpo", "dataqbcalgspzoafp")),
                new DatasetReference().withReferenceName("mnmkypeqmuue")
                    .withParameters(mapOf("y", "datakrulavxe", "chwpfunptsry", "dataf"))))
            .withSource(new CopySource().withSourceRetryCount("datafhfptbdxtvlpj")
                .withSourceRetryWait("datasl")
                .withMaxConcurrentConnections("datauzytxeaqig")
                .withDisableMetricsCollection("datantutetdtgci")
                .withAdditionalProperties(mapOf("type", "CopySource")))
            .withSink(new CopySink().withWriteBatchSize("datawelutrvd")
                .withWriteBatchTimeout("datawp")
                .withSinkRetryCount("datascwyltslf")
                .withSinkRetryWait("datayavysfmndrdqq")
                .withMaxConcurrentConnections("dataeg")
                .withDisableMetricsCollection("dataldkciherzkh")
                .withAdditionalProperties(mapOf("type", "CopySink")))
            .withTranslator("dataozryoxmfrxfxyc")
            .withEnableStaging("dataalvchfumlf")
            .withStagingSettings(new StagingSettings()
                .withLinkedServiceName(new LinkedServiceReference().withReferenceName("lzxxkokipklfwnhf")
                    .withParameters(mapOf("hg", "datalrtffswqdkvljitb")))
                .withPath("datavlaro")
                .withEnableCompression("datawmucrzabgsdxtw")
                .withAdditionalProperties(mapOf()))
            .withParallelCopies("datalupccfwqisouqy")
            .withDataIntegrationUnits("datazjehdklvqtmzoci")
            .withEnableSkipIncompatibleRow("datatctjhpgmoazsjsu")
            .withRedirectIncompatibleRowSettings(
                new RedirectIncompatibleRowSettings().withLinkedServiceName("datafvnntrccvxqb")
                    .withPath("dataq")
                    .withAdditionalProperties(mapOf()))
            .withLogStorageSettings(new LogStorageSettings()
                .withLinkedServiceName(new LinkedServiceReference().withReferenceName("hmibqgldhtt")
                    .withParameters(mapOf("alxlewlwbxufqf", "datapqlnnyevj", "lfqvo", "datakkvij")))
                .withPath("dataowdqvqfldaqoao")
                .withLogLevel("dataqpfwnjdyoxformfe")
                .withEnableReliableLogging("datafq")
                .withAdditionalProperties(mapOf()))
            .withLogSettings(new LogSettings().withEnableCopyActivityLog("dataezxluimkwb")
                .withCopyActivityLogSettings(
                    new CopyActivityLogSettings().withLogLevel("dataq").withEnableReliableLogging("datal"))
                .withLogLocationSettings(new LogLocationSettings()
                    .withLinkedServiceName(new LinkedServiceReference().withReferenceName("nycchpcjztz")
                        .withParameters(mapOf("vp", "datau", "xciunet", "datafvin", "hxxvft", "dataxgdgqkletlwavtzb",
                            "kyjmtdnymbe", "datadrqgionm")))
                    .withPath("dataskb")))
            .withPreserveRules(Arrays.asList("dataaklesjgxdhgezy", "dataphaokhbqmxgglk"))
            .withPreserve(Arrays.asList("datapbynetyxuxopoc"))
            .withValidateDataConsistency("dataffgggglz")
            .withSkipErrorFile(new SkipErrorFile().withFileMissing("datauhmngc").withDataInconsistency("datakgiusrvs"));
        model = BinaryData.fromObject(model).toObject(CopyActivity.class);
        Assertions.assertEquals("glua", model.name());
        Assertions.assertEquals("gjoy", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("vrmenrcqickhvps", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("abfyjampvwx", model.userProperties().get(0).name());
        Assertions.assertEquals("a", model.linkedServiceName().referenceName());
        Assertions.assertEquals(333163893, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals("spaoxi", model.inputs().get(0).referenceName());
        Assertions.assertEquals("isdwtug", model.outputs().get(0).referenceName());
        Assertions.assertEquals("lzxxkokipklfwnhf", model.stagingSettings().linkedServiceName().referenceName());
        Assertions.assertEquals("hmibqgldhtt", model.logStorageSettings().linkedServiceName().referenceName());
        Assertions.assertEquals("nycchpcjztz",
            model.logSettings().logLocationSettings().linkedServiceName().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
