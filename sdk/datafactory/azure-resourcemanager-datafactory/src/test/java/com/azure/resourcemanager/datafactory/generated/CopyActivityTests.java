// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.CopyActivity;
import com.azure.resourcemanager.datafactory.models.CopyActivityLogSettings;
import com.azure.resourcemanager.datafactory.models.CopySink;
import com.azure.resourcemanager.datafactory.models.CopySource;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.LogLocationSettings;
import com.azure.resourcemanager.datafactory.models.LogSettings;
import com.azure.resourcemanager.datafactory.models.LogStorageSettings;
import com.azure.resourcemanager.datafactory.models.RedirectIncompatibleRowSettings;
import com.azure.resourcemanager.datafactory.models.SkipErrorFile;
import com.azure.resourcemanager.datafactory.models.StagingSettings;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CopyActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CopyActivity model = BinaryData.fromString(
            "{\"type\":\"zfwdmae\",\"typeProperties\":{\"source\":{\"type\":\"fzgpvdlx\",\"sourceRetryCount\":\"dataotclcuxzllnwmgqc\",\"sourceRetryWait\":\"datagjequox\",\"maxConcurrentConnections\":\"datagfspwhfhdguuvg\",\"disableMetricsCollection\":\"datavz\",\"\":{\"m\":\"dataytqzx\",\"rmeufhkoe\":\"datanwpwrfetjg\"}},\"sink\":{\"type\":\"rjmicha\",\"writeBatchSize\":\"dataen\",\"writeBatchTimeout\":\"dataqjvdde\",\"sinkRetryCount\":\"datavrjhtpxydiuviup\",\"sinkRetryWait\":\"datatnsyrrybdyqiv\",\"maxConcurrentConnections\":\"datasuhozihd\",\"disableMetricsCollection\":\"datadjwth\",\"\":{\"irnjgsovzbd\":\"dataijgasnafdjinw\",\"bjjl\":\"datarcepanhygcahi\",\"hehzxzaz\":\"datasvjzbggsnanojt\"}},\"translator\":\"dataronsxjdgaim\",\"enableStaging\":\"datansowszbeflhx\",\"stagingSettings\":{\"linkedServiceName\":{\"referenceName\":\"rgokyngarwzutzjx\",\"parameters\":{\"miixngekcwe\":\"datasmnatnpolueylqys\",\"f\":\"databqtkdginmhlgp\",\"wrwvbqv\":\"dataqccey\"}},\"path\":\"dataqgqrsopqgiqf\",\"enableCompression\":\"datatl\",\"\":{\"hfaabibvslo\":\"datazcgugslpvyktf\",\"jzashhiztfmibwzu\":\"datadkpvvkqlkhdxn\",\"wtbfxxsfjn\":\"dataydajck\"}},\"parallelCopies\":\"datascjig\",\"dataIntegrationUnits\":\"datakdsvayyhtiy\",\"enableSkipIncompatibleRow\":\"datahmniz\",\"redirectIncompatibleRowSettings\":{\"linkedServiceName\":\"databtehkytl\",\"path\":\"datamyznwrcfqwkqul\",\"\":{\"jxlssosndn\":\"datavqohwiwhrq\",\"cdd\":\"datapxnsjj\"}},\"logStorageSettings\":{\"linkedServiceName\":{\"referenceName\":\"g\",\"parameters\":{\"xb\":\"datani\",\"jgczpdio\":\"datasjhpm\",\"cwmabehr\":\"datadtjylimzvjwjhmtc\"}},\"path\":\"dataskzw\",\"logLevel\":\"datah\",\"enableReliableLogging\":\"datahz\",\"\":{\"njwvc\":\"dataaesoxoavlwwpvj\"}},\"logSettings\":{\"enableCopyActivityLog\":\"dataqlceflgsndurhqoz\",\"copyActivityLogSettings\":{\"logLevel\":\"datawkdehjlo\",\"enableReliableLogging\":\"datacwo\"},\"logLocationSettings\":{\"linkedServiceName\":{\"referenceName\":\"uxedpqwz\",\"parameters\":{\"j\":\"datamgbxjgxrh\",\"ebdfmdjnfeealp\":\"dataubcvuc\",\"mwdrvkbcsvn\":\"datauclkbw\",\"jrz\":\"datavkhfzldzz\"}},\"path\":\"dataqengopd\"}},\"preserveRules\":[\"datandliodajxvszdyv\",\"datamiufbwreaw\",\"datanzhsmueedbhnkle\",\"datavzd\"],\"preserve\":[\"dataqajia\",\"datatcyrdtrdukdmsktu\"],\"validateDataConsistency\":\"datah\",\"skipErrorFile\":{\"fileMissing\":\"datavy\",\"dataInconsistency\":\"datayfbsgrzwdwdudxq\"}},\"inputs\":[{\"referenceName\":\"rpsplw\",\"parameters\":{\"krnkuuot\":\"datacseybvtgcoznnjqx\",\"ybmgm\":\"datay\"}},{\"referenceName\":\"kxkmtuyn\",\"parameters\":{\"hqtqqshbip\":\"datatfjpisv\"}},{\"referenceName\":\"huhujkzj\",\"parameters\":{\"oqldnhwdfxgec\":\"datagphipt\",\"z\":\"datackkd\",\"xdzmpjfbdm\":\"datahsnimom\",\"xxnmyxzh\":\"dataawhb\"}},{\"referenceName\":\"ocqoydqyzhfnyl\",\"parameters\":{\"wywayjinlsk\":\"datadsa\",\"qltygyeyxm\":\"dataprnkn\",\"moswcxlgzquq\":\"datawgnwxtmhwgen\"}}],\"outputs\":[{\"referenceName\":\"svqpifzavctywa\",\"parameters\":{\"vnpgsqlanuhmsrnp\":\"dataczprzrsqcu\",\"pdlsoajqxy\":\"dataoaghoeqiwpd\"}},{\"referenceName\":\"lh\",\"parameters\":{\"pikgqjdoglecj\":\"datapyybwlys\"}},{\"referenceName\":\"gyivsiirx\",\"parameters\":{\"iniidaxbesbwci\":\"datapqp\",\"uasjrs\":\"datayjch\",\"omihgksqwzuosyyx\":\"dataq\",\"yrowgi\":\"datardxzudfarzayr\"}}],\"linkedServiceName\":{\"referenceName\":\"vxbovpoeuufwsmde\",\"parameters\":{\"mfydphlslnomqbd\":\"databxzjedycjisxsp\"}},\"policy\":{\"timeout\":\"dataqfzlbpe\",\"retry\":\"datajp\",\"retryIntervalInSeconds\":1909933114,\"secureInput\":false,\"secureOutput\":false,\"\":{\"dchdsxvkmgppxz\":\"datatpgzybezmyjq\",\"bwddpjsokosugr\":\"datajysmtsktous\"}},\"name\":\"whqafzgzmon\",\"description\":\"nie\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"hfmognnwx\",\"dependencyConditions\":[\"Completed\",\"Failed\"],\"\":{\"jyy\":\"dataam\"}},{\"activity\":\"fpnbyxygubvi\",\"dependencyConditions\":[\"Failed\",\"Failed\",\"Succeeded\"],\"\":{\"iuf\":\"datasxhvzg\"}}],\"userProperties\":[{\"name\":\"gsdxjx\",\"value\":\"dataddxoatlprsrkennn\"}],\"\":{\"njtfplgxc\":\"datavlgsadpv\"}}")
            .toObject(CopyActivity.class);
        Assertions.assertEquals("whqafzgzmon", model.name());
        Assertions.assertEquals("nie", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.onInactiveMarkAs());
        Assertions.assertEquals("hfmognnwx", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("gsdxjx", model.userProperties().get(0).name());
        Assertions.assertEquals("vxbovpoeuufwsmde", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1909933114, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals("rpsplw", model.inputs().get(0).referenceName());
        Assertions.assertEquals("svqpifzavctywa", model.outputs().get(0).referenceName());
        Assertions.assertEquals("rgokyngarwzutzjx", model.stagingSettings().linkedServiceName().referenceName());
        Assertions.assertEquals("g", model.logStorageSettings().linkedServiceName().referenceName());
        Assertions.assertEquals("uxedpqwz",
            model.logSettings().logLocationSettings().linkedServiceName().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CopyActivity model
            = new CopyActivity().withName("whqafzgzmon")
                .withDescription("nie")
                .withState(ActivityState.INACTIVE)
                .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SUCCEEDED)
                .withDependsOn(Arrays.asList(
                    new ActivityDependency().withActivity("hfmognnwx")
                        .withDependencyConditions(
                            Arrays.asList(DependencyCondition.COMPLETED, DependencyCondition.FAILED))
                        .withAdditionalProperties(mapOf()),
                    new ActivityDependency().withActivity("fpnbyxygubvi")
                        .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED, DependencyCondition.FAILED,
                            DependencyCondition.SUCCEEDED))
                        .withAdditionalProperties(mapOf())))
                .withUserProperties(
                    Arrays.asList(new UserProperty().withName("gsdxjx").withValue("dataddxoatlprsrkennn")))
                .withLinkedServiceName(new LinkedServiceReference().withReferenceName("vxbovpoeuufwsmde")
                    .withParameters(mapOf("mfydphlslnomqbd", "databxzjedycjisxsp")))
                .withPolicy(new ActivityPolicy()
                    .withTimeout("dataqfzlbpe")
                    .withRetry("datajp")
                    .withRetryIntervalInSeconds(1909933114)
                    .withSecureInput(false)
                    .withSecureOutput(false)
                    .withAdditionalProperties(mapOf()))
                .withInputs(Arrays.asList(new DatasetReference()
                    .withReferenceName("rpsplw")
                    .withParameters(mapOf("krnkuuot", "datacseybvtgcoznnjqx", "ybmgm", "datay")),
                    new DatasetReference().withReferenceName("kxkmtuyn")
                        .withParameters(mapOf("hqtqqshbip", "datatfjpisv")),
                    new DatasetReference().withReferenceName("huhujkzj")
                        .withParameters(mapOf("oqldnhwdfxgec", "datagphipt", "z", "datackkd", "xdzmpjfbdm",
                            "datahsnimom", "xxnmyxzh", "dataawhb")),
                    new DatasetReference().withReferenceName("ocqoydqyzhfnyl")
                        .withParameters(mapOf("wywayjinlsk", "datadsa", "qltygyeyxm", "dataprnkn", "moswcxlgzquq",
                            "datawgnwxtmhwgen"))))
                .withOutputs(Arrays.asList(new DatasetReference()
                    .withReferenceName("svqpifzavctywa")
                    .withParameters(mapOf("vnpgsqlanuhmsrnp", "dataczprzrsqcu", "pdlsoajqxy", "dataoaghoeqiwpd")),
                    new DatasetReference().withReferenceName("lh")
                        .withParameters(mapOf("pikgqjdoglecj", "datapyybwlys")),
                    new DatasetReference().withReferenceName("gyivsiirx")
                        .withParameters(mapOf("iniidaxbesbwci", "datapqp", "uasjrs", "datayjch", "omihgksqwzuosyyx",
                            "dataq", "yrowgi", "datardxzudfarzayr"))))
                .withSource(new CopySource().withSourceRetryCount("dataotclcuxzllnwmgqc")
                    .withSourceRetryWait("datagjequox")
                    .withMaxConcurrentConnections("datagfspwhfhdguuvg")
                    .withDisableMetricsCollection("datavz")
                    .withAdditionalProperties(mapOf("type", "fzgpvdlx")))
                .withSink(new CopySink().withWriteBatchSize("dataen")
                    .withWriteBatchTimeout("dataqjvdde")
                    .withSinkRetryCount("datavrjhtpxydiuviup")
                    .withSinkRetryWait("datatnsyrrybdyqiv")
                    .withMaxConcurrentConnections("datasuhozihd")
                    .withDisableMetricsCollection("datadjwth")
                    .withAdditionalProperties(mapOf("type", "rjmicha")))
                .withTranslator("dataronsxjdgaim")
                .withEnableStaging("datansowszbeflhx")
                .withStagingSettings(new StagingSettings()
                    .withLinkedServiceName(new LinkedServiceReference().withReferenceName("rgokyngarwzutzjx")
                        .withParameters(mapOf("miixngekcwe", "datasmnatnpolueylqys", "f", "databqtkdginmhlgp",
                            "wrwvbqv", "dataqccey")))
                    .withPath("dataqgqrsopqgiqf")
                    .withEnableCompression("datatl")
                    .withAdditionalProperties(mapOf()))
                .withParallelCopies("datascjig")
                .withDataIntegrationUnits("datakdsvayyhtiy")
                .withEnableSkipIncompatibleRow("datahmniz")
                .withRedirectIncompatibleRowSettings(
                    new RedirectIncompatibleRowSettings().withLinkedServiceName("databtehkytl")
                        .withPath("datamyznwrcfqwkqul")
                        .withAdditionalProperties(mapOf()))
                .withLogStorageSettings(new LogStorageSettings()
                    .withLinkedServiceName(new LinkedServiceReference().withReferenceName("g")
                        .withParameters(
                            mapOf("xb", "datani", "jgczpdio", "datasjhpm", "cwmabehr", "datadtjylimzvjwjhmtc")))
                    .withPath("dataskzw")
                    .withLogLevel("datah")
                    .withEnableReliableLogging("datahz")
                    .withAdditionalProperties(mapOf()))
                .withLogSettings(new LogSettings().withEnableCopyActivityLog("dataqlceflgsndurhqoz")
                    .withCopyActivityLogSettings(
                        new CopyActivityLogSettings().withLogLevel("datawkdehjlo").withEnableReliableLogging("datacwo"))
                    .withLogLocationSettings(new LogLocationSettings()
                        .withLinkedServiceName(new LinkedServiceReference().withReferenceName("uxedpqwz")
                            .withParameters(mapOf("j", "datamgbxjgxrh", "ebdfmdjnfeealp", "dataubcvuc", "mwdrvkbcsvn",
                                "datauclkbw", "jrz", "datavkhfzldzz")))
                        .withPath("dataqengopd")))
                .withPreserveRules(
                    Arrays.asList("datandliodajxvszdyv", "datamiufbwreaw", "datanzhsmueedbhnkle", "datavzd"))
                .withPreserve(Arrays.asList("dataqajia", "datatcyrdtrdukdmsktu"))
                .withValidateDataConsistency("datah")
                .withSkipErrorFile(
                    new SkipErrorFile().withFileMissing("datavy").withDataInconsistency("datayfbsgrzwdwdudxq"));
        model = BinaryData.fromObject(model).toObject(CopyActivity.class);
        Assertions.assertEquals("whqafzgzmon", model.name());
        Assertions.assertEquals("nie", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.onInactiveMarkAs());
        Assertions.assertEquals("hfmognnwx", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("gsdxjx", model.userProperties().get(0).name());
        Assertions.assertEquals("vxbovpoeuufwsmde", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1909933114, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals("rpsplw", model.inputs().get(0).referenceName());
        Assertions.assertEquals("svqpifzavctywa", model.outputs().get(0).referenceName());
        Assertions.assertEquals("rgokyngarwzutzjx", model.stagingSettings().linkedServiceName().referenceName());
        Assertions.assertEquals("g", model.logStorageSettings().linkedServiceName().referenceName());
        Assertions.assertEquals("uxedpqwz",
            model.logSettings().logLocationSettings().linkedServiceName().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
