// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.CopyActivity;
import com.azure.resourcemanager.datafactory.models.CopyActivityLogSettings;
import com.azure.resourcemanager.datafactory.models.CopySink;
import com.azure.resourcemanager.datafactory.models.CopySource;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.LogLocationSettings;
import com.azure.resourcemanager.datafactory.models.LogSettings;
import com.azure.resourcemanager.datafactory.models.LogStorageSettings;
import com.azure.resourcemanager.datafactory.models.RedirectIncompatibleRowSettings;
import com.azure.resourcemanager.datafactory.models.SkipErrorFile;
import com.azure.resourcemanager.datafactory.models.StagingSettings;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CopyActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CopyActivity model =
            BinaryData
                .fromString(
                    "{\"type\":\"Copy\",\"typeProperties\":{\"source\":{\"type\":\"CopySource\",\"sourceRetryCount\":\"dataingadkrkny\",\"sourceRetryWait\":\"datangdfzqcjfqmy\",\"maxConcurrentConnections\":\"datawbuxqzfwgbqsvexz\",\"disableMetricsCollection\":\"datafwiav\",\"\":{\"cbxrskylq\":\"datatgxdlznfo\",\"teikktret\":\"datapp\",\"nvb\":\"datatsygzjplaxxfnrlt\"}},\"sink\":{\"type\":\"CopySink\",\"writeBatchSize\":\"dataotghxkrrpmgdoli\",\"writeBatchTimeout\":\"datazsglavdtttyd\",\"sinkRetryCount\":\"dataomz\",\"sinkRetryWait\":\"datakjq\",\"maxConcurrentConnections\":\"datahbypwmveyrciked\",\"disableMetricsCollection\":\"dataufjuqow\",\"\":{\"sz\":\"datavjy\"}},\"translator\":\"dataeuqxhmri\",\"enableStaging\":\"datakcgusvpvtaulxx\",\"stagingSettings\":{\"linkedServiceName\":{\"referenceName\":\"fxdqqz\",\"parameters\":{\"odhaslpaae\":\"datagwqi\",\"ht\":\"datarzxvffq\",\"epssoqdibyg\":\"datamhrztbyulk\"}},\"path\":\"datacidiwkxi\",\"enableCompression\":\"dataiqxlxoksyypftrdi\",\"\":{\"ccetyyvxkwobb\":\"datarbqgatkliopgwpka\"}},\"parallelCopies\":\"datasdpyirtrlzkpje\",\"dataIntegrationUnits\":\"datazhhfnaqclepc\",\"enableSkipIncompatibleRow\":\"dataowuthfwphnmll\",\"redirectIncompatibleRowSettings\":{\"linkedServiceName\":\"datajehwhxxuo\",\"path\":\"dataeaqahzkvnapxhtqw\",\"\":{\"bziibuabpvdwhvn\":\"dataxaovubfllfke\",\"kgbkzqbo\":\"datacbuzudkqoeoukvi\",\"hclxwede\":\"datafhdyasklmy\",\"pduttqjtszq\":\"dataawljatvfddq\"}},\"logStorageSettings\":{\"linkedServiceName\":{\"referenceName\":\"cqcwbxx\",\"parameters\":{\"lvkdwwqhhlfvmwu\":\"dataekqjdru\",\"fbdanfexlawkeq\":\"dataarswsvtzotmwxq\",\"dyk\":\"datahzbwrtmjskbienjn\"}},\"path\":\"dataounbyvsfqurr\",\"logLevel\":\"dataqbknoxjhe\",\"enableReliableLogging\":\"datahmmwbvr\",\"\":{\"uzkwigifinoy\":\"databiigxxrez\",\"kooa\":\"datadtlpshxjhan\"}},\"logSettings\":{\"enableCopyActivityLog\":\"datakgqsqvfyo\",\"copyActivityLogSettings\":{\"logLevel\":\"datataljiqlxjjltuym\",\"enableReliableLogging\":\"dataaqhscaanddlvc\"},\"logLocationSettings\":{\"linkedServiceName\":{\"referenceName\":\"uv\",\"parameters\":{\"gdjvyclasdprknup\":\"dataflsby\",\"pvqczpk\":\"datateklgs\"}},\"path\":\"dataaolthowcsue\"}},\"preserveRules\":[\"datag\"],\"preserve\":[\"dataimtxmd\",\"dataexar\"],\"validateDataConsistency\":\"datakoir\",\"skipErrorFile\":{\"fileMissing\":\"dataftlbs\",\"dataInconsistency\":\"datanmxa\"}},\"inputs\":[{\"referenceName\":\"uadhi\",\"parameters\":{\"ujliti\":\"dataxstwaazeqjnou\",\"yqxipb\":\"datashmqxgjzslho\"}},{\"referenceName\":\"spvkcnggo\",\"parameters\":{\"itlam\":\"datanjm\",\"wqzsyetbff\":\"databklkhhjx\",\"l\":\"datahqzvwznwcqoapdtj\"}}],\"outputs\":[{\"referenceName\":\"fdpurvz\",\"parameters\":{\"kvq\":\"databesfumedsaa\",\"svivqkyaghfvubl\":\"datab\",\"nymbjrsd\":\"datazsveguxaxij\"}},{\"referenceName\":\"ufqxrlzi\",\"parameters\":{\"newrvjg\":\"datauzegmcmlzmfeti\"}},{\"referenceName\":\"nm\",\"parameters\":{\"orzozf\":\"datagowdavpqyhax\",\"ggoppmxcm\":\"datagkwpbnefabgt\",\"a\":\"dataugddycfyfau\",\"zcxxfwpjpgq\":\"datazqvawkesx\"}},{\"referenceName\":\"brzkmgylmyc\",\"parameters\":{\"cyhjhrkfpt\":\"dataorrecoiqwnqliz\",\"fmbvmajcmpohjdvf\":\"dataiommis\"}}],\"linkedServiceName\":{\"referenceName\":\"b\",\"parameters\":{\"gcjssqpk\":\"dataymahboindiuyqdjk\",\"zqwwttqjyiw\":\"databryhvshkvup\"}},\"policy\":{\"timeout\":\"datar\",\"retry\":\"datavbjvvcogupsho\",\"retryIntervalInSeconds\":1908676159,\"secureInput\":true,\"secureOutput\":true,\"\":{\"uuhbcckbcvtelmd\":\"datajoor\",\"mblnismv\":\"datamasvghphlbkqu\",\"glxljuy\":\"dataaasdexs\",\"npdjomd\":\"datakkpovzespdipdx\"}},\"name\":\"adwosjxywwvilkyh\",\"description\":\"riyhdbbj\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"rpwjenbxtkghrrxa\",\"dependencyConditions\":[\"Completed\"],\"\":{\"jwipfryivpe\":\"datahkizyxoyxnhu\",\"kpdmmowftfrqebr\":\"datazyrpdxygfpqxseme\",\"tefe\":\"dataop\",\"j\":\"datafxm\"}},{\"activity\":\"wwidnrds\",\"dependencyConditions\":[\"Succeeded\",\"Completed\",\"Failed\"],\"\":{\"hwbead\":\"datadyhodisypgapfd\"}}],\"userProperties\":[{\"name\":\"qnkoskflnjaysr\",\"value\":\"dataeevmb\"},{\"name\":\"emrhbzetss\",\"value\":\"datawwexbotbrepef\"},{\"name\":\"lie\",\"value\":\"dataocyarvsfz\"},{\"name\":\"cscootfsgilwis\",\"value\":\"dataxzpz\"}],\"\":{\"gknocshm\":\"datastrtrfv\",\"pxydpamctzmwrh\":\"datacjqtuzbirbrvzhfj\",\"jsgkouenpgkxyr\":\"datacdgunsjssre\"}}")
                .toObject(CopyActivity.class);
        Assertions.assertEquals("adwosjxywwvilkyh", model.name());
        Assertions.assertEquals("riyhdbbj", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.onInactiveMarkAs());
        Assertions.assertEquals("rpwjenbxtkghrrxa", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("qnkoskflnjaysr", model.userProperties().get(0).name());
        Assertions.assertEquals("b", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1908676159, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals("uadhi", model.inputs().get(0).referenceName());
        Assertions.assertEquals("fdpurvz", model.outputs().get(0).referenceName());
        Assertions.assertEquals("fxdqqz", model.stagingSettings().linkedServiceName().referenceName());
        Assertions.assertEquals("cqcwbxx", model.logStorageSettings().linkedServiceName().referenceName());
        Assertions.assertEquals("uv", model.logSettings().logLocationSettings().linkedServiceName().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CopyActivity model =
            new CopyActivity()
                .withName("adwosjxywwvilkyh")
                .withDescription("riyhdbbj")
                .withState(ActivityState.INACTIVE)
                .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SUCCEEDED)
                .withDependsOn(
                    Arrays
                        .asList(
                            new ActivityDependency()
                                .withActivity("rpwjenbxtkghrrxa")
                                .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED))
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency()
                                .withActivity("wwidnrds")
                                .withDependencyConditions(
                                    Arrays
                                        .asList(
                                            DependencyCondition.SUCCEEDED,
                                            DependencyCondition.COMPLETED,
                                            DependencyCondition.FAILED))
                                .withAdditionalProperties(mapOf())))
                .withUserProperties(
                    Arrays
                        .asList(
                            new UserProperty().withName("qnkoskflnjaysr").withValue("dataeevmb"),
                            new UserProperty().withName("emrhbzetss").withValue("datawwexbotbrepef"),
                            new UserProperty().withName("lie").withValue("dataocyarvsfz"),
                            new UserProperty().withName("cscootfsgilwis").withValue("dataxzpz")))
                .withLinkedServiceName(
                    new LinkedServiceReference()
                        .withReferenceName("b")
                        .withParameters(mapOf("gcjssqpk", "dataymahboindiuyqdjk", "zqwwttqjyiw", "databryhvshkvup")))
                .withPolicy(
                    new ActivityPolicy()
                        .withTimeout("datar")
                        .withRetry("datavbjvvcogupsho")
                        .withRetryIntervalInSeconds(1908676159)
                        .withSecureInput(true)
                        .withSecureOutput(true)
                        .withAdditionalProperties(mapOf()))
                .withInputs(
                    Arrays
                        .asList(
                            new DatasetReference()
                                .withReferenceName("uadhi")
                                .withParameters(mapOf("ujliti", "dataxstwaazeqjnou", "yqxipb", "datashmqxgjzslho")),
                            new DatasetReference()
                                .withReferenceName("spvkcnggo")
                                .withParameters(
                                    mapOf(
                                        "itlam",
                                        "datanjm",
                                        "wqzsyetbff",
                                        "databklkhhjx",
                                        "l",
                                        "datahqzvwznwcqoapdtj"))))
                .withOutputs(
                    Arrays
                        .asList(
                            new DatasetReference()
                                .withReferenceName("fdpurvz")
                                .withParameters(
                                    mapOf(
                                        "kvq",
                                        "databesfumedsaa",
                                        "svivqkyaghfvubl",
                                        "datab",
                                        "nymbjrsd",
                                        "datazsveguxaxij")),
                            new DatasetReference()
                                .withReferenceName("ufqxrlzi")
                                .withParameters(mapOf("newrvjg", "datauzegmcmlzmfeti")),
                            new DatasetReference()
                                .withReferenceName("nm")
                                .withParameters(
                                    mapOf(
                                        "orzozf",
                                        "datagowdavpqyhax",
                                        "ggoppmxcm",
                                        "datagkwpbnefabgt",
                                        "a",
                                        "dataugddycfyfau",
                                        "zcxxfwpjpgq",
                                        "datazqvawkesx")),
                            new DatasetReference()
                                .withReferenceName("brzkmgylmyc")
                                .withParameters(
                                    mapOf("cyhjhrkfpt", "dataorrecoiqwnqliz", "fmbvmajcmpohjdvf", "dataiommis"))))
                .withSource(
                    new CopySource()
                        .withSourceRetryCount("dataingadkrkny")
                        .withSourceRetryWait("datangdfzqcjfqmy")
                        .withMaxConcurrentConnections("datawbuxqzfwgbqsvexz")
                        .withDisableMetricsCollection("datafwiav")
                        .withAdditionalProperties(mapOf("type", "CopySource")))
                .withSink(
                    new CopySink()
                        .withWriteBatchSize("dataotghxkrrpmgdoli")
                        .withWriteBatchTimeout("datazsglavdtttyd")
                        .withSinkRetryCount("dataomz")
                        .withSinkRetryWait("datakjq")
                        .withMaxConcurrentConnections("datahbypwmveyrciked")
                        .withDisableMetricsCollection("dataufjuqow")
                        .withAdditionalProperties(mapOf("type", "CopySink")))
                .withTranslator("dataeuqxhmri")
                .withEnableStaging("datakcgusvpvtaulxx")
                .withStagingSettings(
                    new StagingSettings()
                        .withLinkedServiceName(
                            new LinkedServiceReference()
                                .withReferenceName("fxdqqz")
                                .withParameters(
                                    mapOf(
                                        "odhaslpaae",
                                        "datagwqi",
                                        "ht",
                                        "datarzxvffq",
                                        "epssoqdibyg",
                                        "datamhrztbyulk")))
                        .withPath("datacidiwkxi")
                        .withEnableCompression("dataiqxlxoksyypftrdi")
                        .withAdditionalProperties(mapOf()))
                .withParallelCopies("datasdpyirtrlzkpje")
                .withDataIntegrationUnits("datazhhfnaqclepc")
                .withEnableSkipIncompatibleRow("dataowuthfwphnmll")
                .withRedirectIncompatibleRowSettings(
                    new RedirectIncompatibleRowSettings()
                        .withLinkedServiceName("datajehwhxxuo")
                        .withPath("dataeaqahzkvnapxhtqw")
                        .withAdditionalProperties(mapOf()))
                .withLogStorageSettings(
                    new LogStorageSettings()
                        .withLinkedServiceName(
                            new LinkedServiceReference()
                                .withReferenceName("cqcwbxx")
                                .withParameters(
                                    mapOf(
                                        "lvkdwwqhhlfvmwu",
                                        "dataekqjdru",
                                        "fbdanfexlawkeq",
                                        "dataarswsvtzotmwxq",
                                        "dyk",
                                        "datahzbwrtmjskbienjn")))
                        .withPath("dataounbyvsfqurr")
                        .withLogLevel("dataqbknoxjhe")
                        .withEnableReliableLogging("datahmmwbvr")
                        .withAdditionalProperties(mapOf()))
                .withLogSettings(
                    new LogSettings()
                        .withEnableCopyActivityLog("datakgqsqvfyo")
                        .withCopyActivityLogSettings(
                            new CopyActivityLogSettings()
                                .withLogLevel("datataljiqlxjjltuym")
                                .withEnableReliableLogging("dataaqhscaanddlvc"))
                        .withLogLocationSettings(
                            new LogLocationSettings()
                                .withLinkedServiceName(
                                    new LinkedServiceReference()
                                        .withReferenceName("uv")
                                        .withParameters(
                                            mapOf("gdjvyclasdprknup", "dataflsby", "pvqczpk", "datateklgs")))
                                .withPath("dataaolthowcsue")))
                .withPreserveRules(Arrays.asList("datag"))
                .withPreserve(Arrays.asList("dataimtxmd", "dataexar"))
                .withValidateDataConsistency("datakoir")
                .withSkipErrorFile(new SkipErrorFile().withFileMissing("dataftlbs").withDataInconsistency("datanmxa"));
        model = BinaryData.fromObject(model).toObject(CopyActivity.class);
        Assertions.assertEquals("adwosjxywwvilkyh", model.name());
        Assertions.assertEquals("riyhdbbj", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.onInactiveMarkAs());
        Assertions.assertEquals("rpwjenbxtkghrrxa", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("qnkoskflnjaysr", model.userProperties().get(0).name());
        Assertions.assertEquals("b", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1908676159, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals("uadhi", model.inputs().get(0).referenceName());
        Assertions.assertEquals("fdpurvz", model.outputs().get(0).referenceName());
        Assertions.assertEquals("fxdqqz", model.stagingSettings().linkedServiceName().referenceName());
        Assertions.assertEquals("cqcwbxx", model.logStorageSettings().linkedServiceName().referenceName());
        Assertions.assertEquals("uv", model.logSettings().logLocationSettings().linkedServiceName().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
