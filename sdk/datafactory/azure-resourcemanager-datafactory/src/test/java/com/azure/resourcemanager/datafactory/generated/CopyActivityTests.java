// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.CopyActivity;
import com.azure.resourcemanager.datafactory.models.CopyActivityLogSettings;
import com.azure.resourcemanager.datafactory.models.CopySink;
import com.azure.resourcemanager.datafactory.models.CopySource;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.LogLocationSettings;
import com.azure.resourcemanager.datafactory.models.LogSettings;
import com.azure.resourcemanager.datafactory.models.LogStorageSettings;
import com.azure.resourcemanager.datafactory.models.RedirectIncompatibleRowSettings;
import com.azure.resourcemanager.datafactory.models.SkipErrorFile;
import com.azure.resourcemanager.datafactory.models.StagingSettings;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CopyActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CopyActivity model = BinaryData.fromString(
            "{\"type\":\"Copy\",\"typeProperties\":{\"source\":{\"type\":\"CopySource\",\"sourceRetryCount\":\"datatytwtfqpmpyww\",\"sourceRetryWait\":\"dataukqmjcwdo\",\"maxConcurrentConnections\":\"datadqun\",\"disableMetricsCollection\":\"dataqcocc\",\"\":{\"rbyrb\":\"dataj\"}},\"sink\":{\"type\":\"CopySink\",\"writeBatchSize\":\"dataqpsquou\",\"writeBatchTimeout\":\"datazgdtu\",\"sinkRetryCount\":\"dataoimojcm\",\"sinkRetryWait\":\"datacd\",\"maxConcurrentConnections\":\"datavorzhzfoc\",\"disableMetricsCollection\":\"datayltornv\",\"\":{\"yv\":\"datayolwifbd\"}},\"translator\":\"datayw\",\"enableStaging\":\"datavkthrexzve\",\"stagingSettings\":{\"linkedServiceName\":{\"referenceName\":\"zyuiklokeqeowb\",\"parameters\":{\"bpobvjhun\":\"dataehvgchsgotgwe\",\"rxcei\":\"datac\",\"dtkllqhznutrx\":\"datav\"}},\"path\":\"dataz\",\"enableCompression\":\"datanniarjezj\",\"\":{\"sqykqfserlsai\":\"dataiqfoqw\",\"tagwmzgvnojgm\":\"datashh\",\"oi\":\"databkali\",\"owxsxbxd\":\"datakehpdssvlubdp\"}},\"parallelCopies\":\"dataixurcekc\",\"dataIntegrationUnits\":\"datajqqauftg\",\"enableSkipIncompatibleRow\":\"datatbu\",\"redirectIncompatibleRowSettings\":{\"linkedServiceName\":\"datacnkghkrbirshlh\",\"path\":\"datayod\",\"\":{\"xzovbhqelssl\":\"datanqbpxyoff\",\"sgigs\":\"dataxejpo\"}},\"logStorageSettings\":{\"linkedServiceName\":{\"referenceName\":\"tx\",\"parameters\":{\"dzovkbcbefohny\":\"datajwmglgstrzfhe\",\"gfvzvmtjcxig\":\"datafhmljim\",\"eet\":\"dataszxdbgl\",\"izw\":\"dataivmbu\"}},\"path\":\"datafhfptbdxtvlpj\",\"logLevel\":\"datasl\",\"enableReliableLogging\":\"datauzytxeaqig\",\"\":{\"tgcidbrjwi\":\"datatutet\",\"grcmcqppledx\":\"dataouepaqnfy\",\"welutrvd\":\"dataecttub\"}},\"logSettings\":{\"enableCopyActivityLog\":\"datapxpscw\",\"copyActivityLogSettings\":{\"logLevel\":\"dataslf\",\"enableReliableLogging\":\"datayavysfmndrdqq\"},\"logLocationSettings\":{\"linkedServiceName\":{\"referenceName\":\"k\",\"parameters\":{\"erzkhiovh\":\"datamldkci\"}},\"path\":\"datawfolpjrep\"}},\"preserveRules\":[\"dataoiranxq\"],\"preserve\":[\"datasvnldtqykzmwd\",\"dataqre\",\"dataltrnq\"],\"validateDataConsistency\":\"datacyozryoxmfrxfx\",\"skipErrorFile\":{\"fileMissing\":\"dataialvchfu\",\"dataInconsistency\":\"datafgmlzxxk\"}},\"inputs\":[{\"referenceName\":\"pklfwnhf\",\"parameters\":{\"hg\":\"datalrtffswqdkvljitb\"}},{\"referenceName\":\"rvlarozswmucr\",\"parameters\":{\"nlvjgskbksltun\":\"datagsdxtwqqukg\",\"uqyzxzjehd\":\"datawxsqvxlupccfwqis\",\"pgmoazsj\":\"datalvqtmzociaetctj\",\"ccvxqbxgq\":\"datauevfvnnt\"}}],\"outputs\":[{\"referenceName\":\"nri\",\"parameters\":{\"ldi\":\"datakibvw\"}},{\"referenceName\":\"mxsvz\",\"parameters\":{\"dljthmibqgldhtt\":\"datatalobx\",\"nny\":\"dataalpq\"}}],\"linkedServiceName\":{\"referenceName\":\"jea\",\"parameters\":{\"fdkkvijilfqvodz\":\"dataewlwbxuf\",\"ld\":\"datawdqvq\",\"qpfwnjdyoxformfe\":\"dataqoaop\"}},\"policy\":{\"timeout\":\"dataqjneszxte\",\"retry\":\"datahxphxokdbv\",\"retryIntervalInSeconds\":187311,\"secureInput\":false,\"secureOutput\":true,\"\":{\"jrnnwgrxzcn\":\"dataxbzmpvue\",\"zqlsnycchpcjzt\":\"dataguezxluimkwbwmg\",\"njxciunetcxgdg\":\"dataiuuuyvpcfv\",\"tzbphxxvftj\":\"datakletlwa\"}},\"name\":\"rq\",\"description\":\"onmokyjmtdny\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"bqlcakle\",\"dependencyConditions\":[\"Completed\",\"Succeeded\",\"Skipped\"],\"\":{\"xgg\":\"dataezyhphaokhbq\",\"oclef\":\"datakqitpbynetyxuxo\"}},{\"activity\":\"gg\",\"dependencyConditions\":[\"Skipped\"],\"\":{\"rvswcpspaoxigp\":\"databouhmngccnkgiu\",\"u\":\"datai\"}},{\"activity\":\"pgpqsmglutn\",\"dependencyConditions\":[\"Succeeded\"],\"\":{\"idbcxbgfwwcfwl\":\"dataxxnbogx\",\"imviefbje\":\"datanjganmopcmetdruu\",\"khjuuepnjuqw\":\"datamiy\"}}],\"userProperties\":[{\"name\":\"bbpxqsv\",\"value\":\"dataxvqwisdwtug\"}],\"\":{\"cbwiwhtjox\":\"dataupip\"}}")
            .toObject(CopyActivity.class);
        Assertions.assertEquals("rq", model.name());
        Assertions.assertEquals("onmokyjmtdny", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.onInactiveMarkAs());
        Assertions.assertEquals("bqlcakle", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("bbpxqsv", model.userProperties().get(0).name());
        Assertions.assertEquals("jea", model.linkedServiceName().referenceName());
        Assertions.assertEquals(187311, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals("pklfwnhf", model.inputs().get(0).referenceName());
        Assertions.assertEquals("nri", model.outputs().get(0).referenceName());
        Assertions.assertEquals("zyuiklokeqeowb", model.stagingSettings().linkedServiceName().referenceName());
        Assertions.assertEquals("tx", model.logStorageSettings().linkedServiceName().referenceName());
        Assertions.assertEquals("k", model.logSettings().logLocationSettings().linkedServiceName().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CopyActivity model = new CopyActivity().withName("rq")
            .withDescription("onmokyjmtdny")
            .withState(ActivityState.INACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SUCCEEDED)
            .withDependsOn(Arrays.asList(
                new ActivityDependency().withActivity("bqlcakle")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED,
                        DependencyCondition.SUCCEEDED, DependencyCondition.SKIPPED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("gg")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("pgpqsmglutn")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED))
                    .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("bbpxqsv").withValue("dataxvqwisdwtug")))
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("jea")
                .withParameters(
                    mapOf("fdkkvijilfqvodz", "dataewlwbxuf", "ld", "datawdqvq", "qpfwnjdyoxformfe", "dataqoaop")))
            .withPolicy(new ActivityPolicy().withTimeout("dataqjneszxte")
                .withRetry("datahxphxokdbv")
                .withRetryIntervalInSeconds(187311)
                .withSecureInput(false)
                .withSecureOutput(true)
                .withAdditionalProperties(mapOf()))
            .withInputs(Arrays.asList(
                new DatasetReference().withReferenceName("pklfwnhf")
                    .withParameters(mapOf("hg", "datalrtffswqdkvljitb")),
                new DatasetReference().withReferenceName("rvlarozswmucr")
                    .withParameters(mapOf("nlvjgskbksltun", "datagsdxtwqqukg", "uqyzxzjehd", "datawxsqvxlupccfwqis",
                        "pgmoazsj", "datalvqtmzociaetctj", "ccvxqbxgq", "datauevfvnnt"))))
            .withOutputs(
                Arrays.asList(new DatasetReference().withReferenceName("nri").withParameters(mapOf("ldi", "datakibvw")),
                    new DatasetReference().withReferenceName("mxsvz")
                        .withParameters(mapOf("dljthmibqgldhtt", "datatalobx", "nny", "dataalpq"))))
            .withSource(new CopySource().withSourceRetryCount("datatytwtfqpmpyww")
                .withSourceRetryWait("dataukqmjcwdo")
                .withMaxConcurrentConnections("datadqun")
                .withDisableMetricsCollection("dataqcocc")
                .withAdditionalProperties(mapOf("type", "CopySource")))
            .withSink(new CopySink().withWriteBatchSize("dataqpsquou")
                .withWriteBatchTimeout("datazgdtu")
                .withSinkRetryCount("dataoimojcm")
                .withSinkRetryWait("datacd")
                .withMaxConcurrentConnections("datavorzhzfoc")
                .withDisableMetricsCollection("datayltornv")
                .withAdditionalProperties(mapOf("type", "CopySink")))
            .withTranslator("datayw")
            .withEnableStaging("datavkthrexzve")
            .withStagingSettings(new StagingSettings()
                .withLinkedServiceName(new LinkedServiceReference().withReferenceName("zyuiklokeqeowb")
                    .withParameters(
                        mapOf("bpobvjhun", "dataehvgchsgotgwe", "rxcei", "datac", "dtkllqhznutrx", "datav")))
                .withPath("dataz")
                .withEnableCompression("datanniarjezj")
                .withAdditionalProperties(mapOf()))
            .withParallelCopies("dataixurcekc")
            .withDataIntegrationUnits("datajqqauftg")
            .withEnableSkipIncompatibleRow("datatbu")
            .withRedirectIncompatibleRowSettings(
                new RedirectIncompatibleRowSettings().withLinkedServiceName("datacnkghkrbirshlh")
                    .withPath("datayod")
                    .withAdditionalProperties(mapOf()))
            .withLogStorageSettings(new LogStorageSettings()
                .withLinkedServiceName(new LinkedServiceReference().withReferenceName("tx")
                    .withParameters(mapOf("dzovkbcbefohny", "datajwmglgstrzfhe", "gfvzvmtjcxig", "datafhmljim", "eet",
                        "dataszxdbgl", "izw", "dataivmbu")))
                .withPath("datafhfptbdxtvlpj")
                .withLogLevel("datasl")
                .withEnableReliableLogging("datauzytxeaqig")
                .withAdditionalProperties(mapOf()))
            .withLogSettings(new LogSettings().withEnableCopyActivityLog("datapxpscw")
                .withCopyActivityLogSettings(new CopyActivityLogSettings().withLogLevel("dataslf")
                    .withEnableReliableLogging("datayavysfmndrdqq"))
                .withLogLocationSettings(
                    new LogLocationSettings().withLinkedServiceName(new LinkedServiceReference().withReferenceName("k")
                        .withParameters(mapOf("erzkhiovh", "datamldkci"))).withPath("datawfolpjrep")))
            .withPreserveRules(Arrays.asList("dataoiranxq"))
            .withPreserve(Arrays.asList("datasvnldtqykzmwd", "dataqre", "dataltrnq"))
            .withValidateDataConsistency("datacyozryoxmfrxfx")
            .withSkipErrorFile(
                new SkipErrorFile().withFileMissing("dataialvchfu").withDataInconsistency("datafgmlzxxk"));
        model = BinaryData.fromObject(model).toObject(CopyActivity.class);
        Assertions.assertEquals("rq", model.name());
        Assertions.assertEquals("onmokyjmtdny", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.onInactiveMarkAs());
        Assertions.assertEquals("bqlcakle", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("bbpxqsv", model.userProperties().get(0).name());
        Assertions.assertEquals("jea", model.linkedServiceName().referenceName());
        Assertions.assertEquals(187311, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals("pklfwnhf", model.inputs().get(0).referenceName());
        Assertions.assertEquals("nri", model.outputs().get(0).referenceName());
        Assertions.assertEquals("zyuiklokeqeowb", model.stagingSettings().linkedServiceName().referenceName());
        Assertions.assertEquals("tx", model.logStorageSettings().linkedServiceName().referenceName());
        Assertions.assertEquals("k", model.logSettings().logLocationSettings().linkedServiceName().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
