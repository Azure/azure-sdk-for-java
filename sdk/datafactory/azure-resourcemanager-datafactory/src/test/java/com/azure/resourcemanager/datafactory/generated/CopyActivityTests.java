// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.CopyActivity;
import com.azure.resourcemanager.datafactory.models.CopyActivityLogSettings;
import com.azure.resourcemanager.datafactory.models.CopySink;
import com.azure.resourcemanager.datafactory.models.CopySource;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.LogLocationSettings;
import com.azure.resourcemanager.datafactory.models.LogSettings;
import com.azure.resourcemanager.datafactory.models.LogStorageSettings;
import com.azure.resourcemanager.datafactory.models.RedirectIncompatibleRowSettings;
import com.azure.resourcemanager.datafactory.models.SkipErrorFile;
import com.azure.resourcemanager.datafactory.models.StagingSettings;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CopyActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CopyActivity model = BinaryData.fromString(
            "{\"type\":\"Copy\",\"typeProperties\":{\"source\":{\"type\":\"CopySource\",\"sourceRetryCount\":\"datagxnhfcccdu\",\"sourceRetryWait\":\"datayb\",\"maxConcurrentConnections\":\"databhmpmeglolpotclm\",\"disableMetricsCollection\":\"datapqjryty\",\"\":{\"govvivlrxytraf\":\"dataojjhtnnthj\"}},\"sink\":{\"type\":\"CopySink\",\"writeBatchSize\":\"datatwyt\",\"writeBatchTimeout\":\"datapiilgyqluolgspyq\",\"sinkRetryCount\":\"datapnhhv\",\"sinkRetryWait\":\"dataukourqviyf\",\"maxConcurrentConnections\":\"dataegwezgfqo\",\"disableMetricsCollection\":\"datatcp\",\"\":{\"y\":\"dataz\",\"jckakikkkajmnvb\":\"datagzba\",\"yco\":\"datagmnkrq\"}},\"translator\":\"datagkxxpkl\",\"enableStaging\":\"datavbcgs\",\"stagingSettings\":{\"linkedServiceName\":{\"referenceName\":\"daypx\",\"parameters\":{\"kigmjnktt\":\"datadf\",\"tzfliqntnoe\":\"datazyvzixmusiidivbb\",\"wdaiexisapygii\":\"dataxoqpuclidy\"}},\"path\":\"datakaffzz\",\"enableCompression\":\"dataivfiypfvwyzjsi\",\"\":{\"grxmptu\":\"datav\",\"bpqghxdp\":\"datade\",\"udbiacuqouc\":\"dataihfimlyxdmix\",\"pnzijpyyvecruhqy\":\"datafuvuslvbuj\"}},\"parallelCopies\":\"datadsthktsaljkhlpg\",\"dataIntegrationUnits\":\"datag\",\"enableSkipIncompatibleRow\":\"datako\",\"redirectIncompatibleRowSettings\":{\"linkedServiceName\":\"dataxw\",\"path\":\"datathivapuaxosw\",\"\":{\"fezlmzsekv\":\"datahlrzlgkcnpdkwer\",\"vofrenuvp\":\"datauzyowra\",\"tfpbxnret\":\"datapltnyyeyj\",\"xtoh\":\"datag\"}},\"logStorageSettings\":{\"linkedServiceName\":{\"referenceName\":\"qtxi\",\"parameters\":{\"nxb\":\"dataeyzz\",\"lfyf\":\"datavy\",\"jhoxtbsybpefojp\":\"datasb\",\"yifeiiriomjdnkn\":\"dataixdgqjkfvmrnwgea\"}},\"path\":\"datalxrd\",\"logLevel\":\"dataqtzzhkpko\",\"enableReliableLogging\":\"datavfno\",\"\":{\"dtgxsyfuhgmmzx\":\"datahutv\",\"ppjqcwcpdaoskgt\":\"datasrl\",\"mpbgrosx\":\"datalljsoasxjjk\",\"cbnmbbhluvd\":\"datadx\"}},\"logSettings\":{\"enableCopyActivityLog\":\"datauevnomzlre\",\"copyActivityLogSettings\":{\"logLevel\":\"dataskiegtaenalep\",\"enableReliableLogging\":\"dataasqolxaodb\"},\"logLocationSettings\":{\"linkedServiceName\":{\"referenceName\":\"gxbadborq\",\"parameters\":{\"batrvi\":\"datahggvyhqwy\",\"gxifkdsclqwkd\":\"datanls\"}},\"path\":\"dataepuvambzf\"}},\"preserveRules\":[\"datahaqfueqfniagzm\",\"dataxsoxqarjt\",\"datanlllm\",\"dataiyguuhylzbdimtd\"],\"preserve\":[\"dataxfqy\",\"datauwcilxznxhbttkk\",\"datacxjxueilixzjvkqj\"],\"validateDataConsistency\":\"datablhcmxx\",\"skipErrorFile\":{\"fileMissing\":\"datakxclj\",\"dataInconsistency\":\"datamsfsquxxqcimnchv\"}},\"inputs\":[{\"referenceName\":\"rivagcsmrtepsyb\",\"parameters\":{\"sfjdcokb\":\"datafoz\",\"eltnby\":\"databpqelmszobt\",\"u\":\"databgrdrumu\",\"kwv\":\"datawecdsybiazfvx\"}},{\"referenceName\":\"eqly\",\"parameters\":{\"odku\":\"dataqqonkrekiojusm\",\"yykx\":\"dataycntaov\"}}],\"outputs\":[{\"referenceName\":\"kd\",\"parameters\":{\"lhj\":\"dataywrwvs\",\"qygszhpnatltj\":\"datab\"}},{\"referenceName\":\"kqzfwl\",\"parameters\":{\"yyu\":\"datanmgsbubzf\"}}],\"linkedServiceName\":{\"referenceName\":\"cwrtr\",\"parameters\":{\"ghv\":\"datarzsnfgmohh\",\"vwfao\":\"datamvvfpkymqn\",\"fgqoarmtuprqtcxq\":\"dataulboawzplwg\"}},\"policy\":{\"timeout\":\"dataupya\",\"retry\":\"datadejparjvsbozfjb\",\"retryIntervalInSeconds\":1282083345,\"secureInput\":false,\"secureOutput\":true,\"\":{\"bklhwrikr\":\"databwmrdl\"}},\"name\":\"ljbhgzffemry\",\"description\":\"ao\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"cqu\",\"dependencyConditions\":[\"Failed\"],\"\":{\"fixrukwxcaagzlqo\":\"dataliibxolzinxx\",\"fiyrywf\":\"datagzgsgzlbunmjha\"}}],\"userProperties\":[{\"name\":\"rreebjmslbxf\",\"value\":\"dataiiarlldy\"}],\"\":{\"uebrvrhwqkfff\":\"datadtykhsafrfv\",\"ei\":\"datagbk\",\"sbebvkmtljzilk\":\"dataybwh\",\"pitzqrmxcuk\":\"datavybljqgi\"}}")
            .toObject(CopyActivity.class);
        Assertions.assertEquals("ljbhgzffemry", model.name());
        Assertions.assertEquals("ao", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("cqu", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("rreebjmslbxf", model.userProperties().get(0).name());
        Assertions.assertEquals("cwrtr", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1282083345, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals("rivagcsmrtepsyb", model.inputs().get(0).referenceName());
        Assertions.assertEquals("kd", model.outputs().get(0).referenceName());
        Assertions.assertEquals("daypx", model.stagingSettings().linkedServiceName().referenceName());
        Assertions.assertEquals("qtxi", model.logStorageSettings().linkedServiceName().referenceName());
        Assertions.assertEquals("gxbadborq",
            model.logSettings().logLocationSettings().linkedServiceName().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CopyActivity model = new CopyActivity().withName("ljbhgzffemry")
            .withDescription("ao")
            .withState(ActivityState.INACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
            .withDependsOn(Arrays.asList(new ActivityDependency().withActivity("cqu")
                .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED))
                .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("rreebjmslbxf").withValue("dataiiarlldy")))
            .withLinkedServiceName(
                new LinkedServiceReference().withReferenceName("cwrtr")
                    .withParameters(mapOf("ghv", "datarzsnfgmohh", "vwfao", "datamvvfpkymqn", "fgqoarmtuprqtcxq",
                        "dataulboawzplwg")))
            .withPolicy(new ActivityPolicy().withTimeout("dataupya")
                .withRetry("datadejparjvsbozfjb")
                .withRetryIntervalInSeconds(1282083345)
                .withSecureInput(false)
                .withSecureOutput(true)
                .withAdditionalProperties(mapOf()))
            .withInputs(Arrays.asList(
                new DatasetReference().withReferenceName("rivagcsmrtepsyb")
                    .withParameters(mapOf("sfjdcokb", "datafoz", "eltnby", "databpqelmszobt", "u", "databgrdrumu",
                        "kwv", "datawecdsybiazfvx")),
                new DatasetReference().withReferenceName("eqly")
                    .withParameters(mapOf("odku", "dataqqonkrekiojusm", "yykx", "dataycntaov"))))
            .withOutputs(Arrays.asList(
                new DatasetReference().withReferenceName("kd")
                    .withParameters(mapOf("lhj", "dataywrwvs", "qygszhpnatltj", "datab")),
                new DatasetReference().withReferenceName("kqzfwl").withParameters(mapOf("yyu", "datanmgsbubzf"))))
            .withSource(new CopySource().withSourceRetryCount("datagxnhfcccdu")
                .withSourceRetryWait("datayb")
                .withMaxConcurrentConnections("databhmpmeglolpotclm")
                .withDisableMetricsCollection("datapqjryty")
                .withAdditionalProperties(mapOf("type", "CopySource")))
            .withSink(new CopySink().withWriteBatchSize("datatwyt")
                .withWriteBatchTimeout("datapiilgyqluolgspyq")
                .withSinkRetryCount("datapnhhv")
                .withSinkRetryWait("dataukourqviyf")
                .withMaxConcurrentConnections("dataegwezgfqo")
                .withDisableMetricsCollection("datatcp")
                .withAdditionalProperties(mapOf("type", "CopySink")))
            .withTranslator("datagkxxpkl")
            .withEnableStaging("datavbcgs")
            .withStagingSettings(new StagingSettings()
                .withLinkedServiceName(new LinkedServiceReference().withReferenceName("daypx")
                    .withParameters(mapOf("kigmjnktt", "datadf", "tzfliqntnoe", "datazyvzixmusiidivbb",
                        "wdaiexisapygii", "dataxoqpuclidy")))
                .withPath("datakaffzz")
                .withEnableCompression("dataivfiypfvwyzjsi")
                .withAdditionalProperties(mapOf()))
            .withParallelCopies("datadsthktsaljkhlpg")
            .withDataIntegrationUnits("datag")
            .withEnableSkipIncompatibleRow("datako")
            .withRedirectIncompatibleRowSettings(new RedirectIncompatibleRowSettings().withLinkedServiceName("dataxw")
                .withPath("datathivapuaxosw")
                .withAdditionalProperties(mapOf()))
            .withLogStorageSettings(new LogStorageSettings()
                .withLinkedServiceName(new LinkedServiceReference().withReferenceName("qtxi")
                    .withParameters(mapOf("nxb", "dataeyzz", "lfyf", "datavy", "jhoxtbsybpefojp", "datasb",
                        "yifeiiriomjdnkn", "dataixdgqjkfvmrnwgea")))
                .withPath("datalxrd")
                .withLogLevel("dataqtzzhkpko")
                .withEnableReliableLogging("datavfno")
                .withAdditionalProperties(mapOf()))
            .withLogSettings(new LogSettings().withEnableCopyActivityLog("datauevnomzlre")
                .withCopyActivityLogSettings(new CopyActivityLogSettings().withLogLevel("dataskiegtaenalep")
                    .withEnableReliableLogging("dataasqolxaodb"))
                .withLogLocationSettings(new LogLocationSettings()
                    .withLinkedServiceName(new LinkedServiceReference().withReferenceName("gxbadborq")
                        .withParameters(mapOf("batrvi", "datahggvyhqwy", "gxifkdsclqwkd", "datanls")))
                    .withPath("dataepuvambzf")))
            .withPreserveRules(Arrays.asList("datahaqfueqfniagzm", "dataxsoxqarjt", "datanlllm", "dataiyguuhylzbdimtd"))
            .withPreserve(Arrays.asList("dataxfqy", "datauwcilxznxhbttkk", "datacxjxueilixzjvkqj"))
            .withValidateDataConsistency("datablhcmxx")
            .withSkipErrorFile(
                new SkipErrorFile().withFileMissing("datakxclj").withDataInconsistency("datamsfsquxxqcimnchv"));
        model = BinaryData.fromObject(model).toObject(CopyActivity.class);
        Assertions.assertEquals("ljbhgzffemry", model.name());
        Assertions.assertEquals("ao", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("cqu", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("rreebjmslbxf", model.userProperties().get(0).name());
        Assertions.assertEquals("cwrtr", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1282083345, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals("rivagcsmrtepsyb", model.inputs().get(0).referenceName());
        Assertions.assertEquals("kd", model.outputs().get(0).referenceName());
        Assertions.assertEquals("daypx", model.stagingSettings().linkedServiceName().referenceName());
        Assertions.assertEquals("qtxi", model.logStorageSettings().linkedServiceName().referenceName());
        Assertions.assertEquals("gxbadborq",
            model.logSettings().logLocationSettings().linkedServiceName().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
