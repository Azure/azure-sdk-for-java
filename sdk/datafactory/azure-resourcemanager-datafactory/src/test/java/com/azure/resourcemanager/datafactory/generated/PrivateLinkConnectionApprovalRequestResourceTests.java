// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.PrivateEndpoint;
import com.azure.resourcemanager.datafactory.models.PrivateLinkConnectionApprovalRequest;
import com.azure.resourcemanager.datafactory.models.PrivateLinkConnectionApprovalRequestResource;
import com.azure.resourcemanager.datafactory.models.PrivateLinkConnectionState;
import org.junit.jupiter.api.Assertions;

public final class PrivateLinkConnectionApprovalRequestResourceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PrivateLinkConnectionApprovalRequestResource model = BinaryData.fromString(
            "{\"properties\":{\"privateLinkServiceConnectionState\":{\"status\":\"xzujksrlsm\",\"description\":\"sqplpvmjcd\",\"actionsRequired\":\"wb\"},\"privateEndpoint\":{\"id\":\"vteo\"}},\"name\":\"vgp\",\"type\":\"deugf\",\"etag\":\"zec\",\"id\":\"xw\"}")
            .toObject(PrivateLinkConnectionApprovalRequestResource.class);
        Assertions.assertEquals("xw", model.id());
        Assertions.assertEquals("xzujksrlsm", model.properties().privateLinkServiceConnectionState().status());
        Assertions.assertEquals("sqplpvmjcd", model.properties().privateLinkServiceConnectionState().description());
        Assertions.assertEquals("wb", model.properties().privateLinkServiceConnectionState().actionsRequired());
        Assertions.assertEquals("vteo", model.properties().privateEndpoint().id());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PrivateLinkConnectionApprovalRequestResource model
            = new PrivateLinkConnectionApprovalRequestResource().withId("xw")
                .withProperties(new PrivateLinkConnectionApprovalRequest()
                    .withPrivateLinkServiceConnectionState(new PrivateLinkConnectionState().withStatus("xzujksrlsm")
                        .withDescription("sqplpvmjcd")
                        .withActionsRequired("wb"))
                    .withPrivateEndpoint(new PrivateEndpoint().withId("vteo")));
        model = BinaryData.fromObject(model).toObject(PrivateLinkConnectionApprovalRequestResource.class);
        Assertions.assertEquals("xw", model.id());
        Assertions.assertEquals("xzujksrlsm", model.properties().privateLinkServiceConnectionState().status());
        Assertions.assertEquals("sqplpvmjcd", model.properties().privateLinkServiceConnectionState().description());
        Assertions.assertEquals("wb", model.properties().privateLinkServiceConnectionState().actionsRequired());
        Assertions.assertEquals("vteo", model.properties().privateEndpoint().id());
    }
}
