// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.PrivateEndpoint;
import com.azure.resourcemanager.datafactory.models.PrivateLinkConnectionApprovalRequest;
import com.azure.resourcemanager.datafactory.models.PrivateLinkConnectionApprovalRequestResource;
import com.azure.resourcemanager.datafactory.models.PrivateLinkConnectionState;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class PrivateLinkConnectionApprovalRequestResourceTests {
    @Test
    public void testDeserialize() {
        PrivateLinkConnectionApprovalRequestResource model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"privateLinkServiceConnectionState\":{\"status\":\"jn\",\"description\":\"ytxifqjzgxmrh\",\"actionsRequired\":\"lw\"},\"privateEndpoint\":{\"id\":\"sutrgjup\"}},\"name\":\"utpwoqhihejqgw\",\"type\":\"nfqn\",\"etag\":\"ypsxjvfoim\",\"id\":\"slirciz\"}")
                .toObject(PrivateLinkConnectionApprovalRequestResource.class);
        Assertions.assertEquals("slirciz", model.id());
        Assertions.assertEquals("jn", model.properties().privateLinkServiceConnectionState().status());
        Assertions.assertEquals("ytxifqjzgxmrh", model.properties().privateLinkServiceConnectionState().description());
        Assertions.assertEquals("lw", model.properties().privateLinkServiceConnectionState().actionsRequired());
        Assertions.assertEquals("sutrgjup", model.properties().privateEndpoint().id());
    }

    @Test
    public void testSerialize() {
        PrivateLinkConnectionApprovalRequestResource model =
            new PrivateLinkConnectionApprovalRequestResource()
                .withId("slirciz")
                .withProperties(
                    new PrivateLinkConnectionApprovalRequest()
                        .withPrivateLinkServiceConnectionState(
                            new PrivateLinkConnectionState()
                                .withStatus("jn")
                                .withDescription("ytxifqjzgxmrh")
                                .withActionsRequired("lw"))
                        .withPrivateEndpoint(new PrivateEndpoint().withId("sutrgjup")));
        model = BinaryData.fromObject(model).toObject(PrivateLinkConnectionApprovalRequestResource.class);
        Assertions.assertEquals("slirciz", model.id());
        Assertions.assertEquals("jn", model.properties().privateLinkServiceConnectionState().status());
        Assertions.assertEquals("ytxifqjzgxmrh", model.properties().privateLinkServiceConnectionState().description());
        Assertions.assertEquals("lw", model.properties().privateLinkServiceConnectionState().actionsRequired());
        Assertions.assertEquals("sutrgjup", model.properties().privateEndpoint().id());
    }
}
