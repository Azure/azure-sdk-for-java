// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.PrivateEndpoint;
import com.azure.resourcemanager.datafactory.models.PrivateLinkConnectionApprovalRequest;
import com.azure.resourcemanager.datafactory.models.PrivateLinkConnectionApprovalRequestResource;
import com.azure.resourcemanager.datafactory.models.PrivateLinkConnectionState;
import org.junit.jupiter.api.Assertions;

public final class PrivateLinkConnectionApprovalRequestResourceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PrivateLinkConnectionApprovalRequestResource model = BinaryData.fromString(
            "{\"properties\":{\"privateLinkServiceConnectionState\":{\"status\":\"zohmnrxxbs\",\"description\":\"klinhmdptysprq\",\"actionsRequired\":\"nzxojpslsvjgpli\"},\"privateEndpoint\":{\"id\":\"qwoyxqvapco\"}},\"name\":\"oucqpqojx\",\"type\":\"zrzdcgd\",\"etag\":\"enribc\",\"id\":\"etzqd\"}")
            .toObject(PrivateLinkConnectionApprovalRequestResource.class);
        Assertions.assertEquals("etzqd", model.id());
        Assertions.assertEquals("zohmnrxxbs", model.properties().privateLinkServiceConnectionState().status());
        Assertions.assertEquals("klinhmdptysprq", model.properties().privateLinkServiceConnectionState().description());
        Assertions.assertEquals("nzxojpslsvjgpli",
            model.properties().privateLinkServiceConnectionState().actionsRequired());
        Assertions.assertEquals("qwoyxqvapco", model.properties().privateEndpoint().id());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PrivateLinkConnectionApprovalRequestResource model
            = new PrivateLinkConnectionApprovalRequestResource().withId("etzqd")
                .withProperties(new PrivateLinkConnectionApprovalRequest()
                    .withPrivateLinkServiceConnectionState(new PrivateLinkConnectionState().withStatus("zohmnrxxbs")
                        .withDescription("klinhmdptysprq")
                        .withActionsRequired("nzxojpslsvjgpli"))
                    .withPrivateEndpoint(new PrivateEndpoint().withId("qwoyxqvapco")));
        model = BinaryData.fromObject(model).toObject(PrivateLinkConnectionApprovalRequestResource.class);
        Assertions.assertEquals("etzqd", model.id());
        Assertions.assertEquals("zohmnrxxbs", model.properties().privateLinkServiceConnectionState().status());
        Assertions.assertEquals("klinhmdptysprq", model.properties().privateLinkServiceConnectionState().description());
        Assertions.assertEquals("nzxojpslsvjgpli",
            model.properties().privateLinkServiceConnectionState().actionsRequired());
        Assertions.assertEquals("qwoyxqvapco", model.properties().privateEndpoint().id());
    }
}
