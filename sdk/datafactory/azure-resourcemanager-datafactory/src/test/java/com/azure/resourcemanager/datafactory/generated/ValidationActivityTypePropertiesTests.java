// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.ValidationActivityTypeProperties;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ValidationActivityTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ValidationActivityTypeProperties model = BinaryData.fromString(
            "{\"timeout\":\"dataf\",\"sleep\":\"datarhoujkcpyerf\",\"minimumSize\":\"datagtrijbolksehty\",\"childItems\":\"datagsurfnktxht\",\"dataset\":{\"referenceName\":\"rzdqqo\",\"parameters\":{\"dkqwffcv\":\"dataaltccttjibognhu\",\"bhkqgbijzo\":\"datahknvnfppw\",\"lscnknkukempa\":\"dataxuti\",\"kstkankzyqizxujl\":\"datavajbgpu\"}}}")
            .toObject(ValidationActivityTypeProperties.class);
        Assertions.assertEquals("rzdqqo", model.dataset().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ValidationActivityTypeProperties model = new ValidationActivityTypeProperties().withTimeout("dataf")
            .withSleep("datarhoujkcpyerf")
            .withMinimumSize("datagtrijbolksehty")
            .withChildItems("datagsurfnktxht")
            .withDataset(new DatasetReference().withReferenceName("rzdqqo")
                .withParameters(mapOf("dkqwffcv", "dataaltccttjibognhu", "bhkqgbijzo", "datahknvnfppw", "lscnknkukempa",
                    "dataxuti", "kstkankzyqizxujl", "datavajbgpu")));
        model = BinaryData.fromObject(model).toObject(ValidationActivityTypeProperties.class);
        Assertions.assertEquals("rzdqqo", model.dataset().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
