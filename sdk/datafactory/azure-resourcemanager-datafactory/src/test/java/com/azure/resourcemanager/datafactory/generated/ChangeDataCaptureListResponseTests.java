// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.ChangeDataCaptureResourceInner;
import com.azure.resourcemanager.datafactory.models.ChangeDataCaptureFolder;
import com.azure.resourcemanager.datafactory.models.ChangeDataCaptureListResponse;
import com.azure.resourcemanager.datafactory.models.ConnectionType;
import com.azure.resourcemanager.datafactory.models.DataMapperMapping;
import com.azure.resourcemanager.datafactory.models.FrequencyType;
import com.azure.resourcemanager.datafactory.models.MapperConnection;
import com.azure.resourcemanager.datafactory.models.MapperPolicy;
import com.azure.resourcemanager.datafactory.models.MapperPolicyRecurrence;
import com.azure.resourcemanager.datafactory.models.MapperSourceConnectionsInfo;
import com.azure.resourcemanager.datafactory.models.MapperTable;
import com.azure.resourcemanager.datafactory.models.MapperTargetConnectionsInfo;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ChangeDataCaptureListResponseTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ChangeDataCaptureListResponse model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"folder\":{\"name\":\"mmzrrscub\"},\"description\":\"sd\",\"sourceConnectionsInfo\":[{\"sourceEntities\":[{}],\"connection\":{\"type\":\"linkedservicetype\"}},{\"sourceEntities\":[{},{},{},{}],\"connection\":{\"type\":\"linkedservicetype\"}}],\"targetConnectionsInfo\":[{\"targetEntities\":[{}],\"connection\":{\"type\":\"linkedservicetype\"},\"dataMapperMappings\":[{},{}],\"relationships\":[\"dataabwibvjogjo\",\"datamcyefoyzbam\",\"datain\"]},{\"targetEntities\":[{},{}],\"connection\":{\"type\":\"linkedservicetype\"},\"dataMapperMappings\":[{},{},{}],\"relationships\":[\"dataoldtvevboclzhz\"]},{\"targetEntities\":[{}],\"connection\":{\"type\":\"linkedservicetype\"},\"dataMapperMappings\":[{},{}],\"relationships\":[\"datatxpnrupza\",\"datamrdixtreki\",\"dataswyskbruffg\"]},{\"targetEntities\":[{},{}],\"connection\":{\"type\":\"linkedservicetype\"},\"dataMapperMappings\":[{},{},{}],\"relationships\":[\"dataxhrp\",\"datahvmblcouqehbhbc\"]}],\"policy\":{\"mode\":\"ziryrandoy\",\"recurrence\":{\"frequency\":\"Minute\",\"interval\":1798358498}},\"allowVNetOverride\":true,\"status\":\"kfqlwx\"},\"name\":\"ykalsyga\",\"type\":\"njpnnbmj\",\"etag\":\"ibjgsjjxxahm\",\"\":{\"xyivpinbm\":\"datadzyqe\"},\"id\":\"bjijkgqxnh\"},{\"properties\":{\"folder\":{\"name\":\"eznjaujv\"},\"description\":\"nnggiycwkdtaawxw\",\"sourceConnectionsInfo\":[{\"sourceEntities\":[{},{},{},{}],\"connection\":{\"type\":\"linkedservicetype\"}},{\"sourceEntities\":[{}],\"connection\":{\"type\":\"linkedservicetype\"}}],\"targetConnectionsInfo\":[{\"targetEntities\":[{},{}],\"connection\":{\"type\":\"linkedservicetype\"},\"dataMapperMappings\":[{},{}],\"relationships\":[\"datanxwbjsidbirkfp\",\"datasokdgoge\",\"dataijymrhbguzozky\",\"datawnf\"]},{\"targetEntities\":[{},{}],\"connection\":{\"type\":\"linkedservicetype\"},\"dataMapperMappings\":[{}],\"relationships\":[\"dataffjkutycyarnroo\",\"datag\",\"dataabzoghktdpyczhco\",\"dataocnhzqrottjzcfyj\"]},{\"targetEntities\":[{},{},{}],\"connection\":{\"type\":\"linkedservicetype\"},\"dataMapperMappings\":[{},{},{}],\"relationships\":[\"datapqinf\",\"datazpyglqdhmrj\"]}],\"policy\":{\"mode\":\"alcxpjbyy\",\"recurrence\":{\"frequency\":\"Second\",\"interval\":1715277105}},\"allowVNetOverride\":false,\"status\":\"kyhfqzvsqxfxj\"},\"name\":\"gcm\",\"type\":\"qjhhhqxuwyvc\",\"etag\":\"oyvivbsiz\",\"\":{\"lzijiufehgmvflnw\":\"dataszlbscm\",\"kxrerlniylylyfwx\":\"datav\"},\"id\":\"tgqztwhghmup\"},{\"properties\":{\"folder\":{\"name\":\"jtcdxabbujftaben\"},\"description\":\"klqpx\",\"sourceConnectionsInfo\":[{\"sourceEntities\":[{},{},{}],\"connection\":{\"type\":\"linkedservicetype\"}},{\"sourceEntities\":[{},{}],\"connection\":{\"type\":\"linkedservicetype\"}}],\"targetConnectionsInfo\":[{\"targetEntities\":[{}],\"connection\":{\"type\":\"linkedservicetype\"},\"dataMapperMappings\":[{}],\"relationships\":[\"datagnhgook\",\"datatalvnbwgp\",\"dataemeluclv\",\"datajjukyrdnqodxah\"]},{\"targetEntities\":[{},{}],\"connection\":{\"type\":\"linkedservicetype\"},\"dataMapperMappings\":[{},{},{},{}],\"relationships\":[\"datazoqgyipemchga\",\"datasczuejdtxptlghwz\",\"dataomew\",\"dataj\"]},{\"targetEntities\":[{},{},{},{}],\"connection\":{\"type\":\"linkedservicetype\"},\"dataMapperMappings\":[{},{},{}],\"relationships\":[\"datamoaiancz\",\"datavodrrslblxydkxr\",\"datavvbxiwkgfbqljnq\",\"datahychocokuleh\"]}],\"policy\":{\"mode\":\"qlrqffaweyurk\",\"recurrence\":{\"frequency\":\"Second\",\"interval\":662993818}},\"allowVNetOverride\":false,\"status\":\"juqdbrx\"},\"name\":\"gchbapxkiy\",\"type\":\"j\",\"etag\":\"ajb\",\"\":{\"u\":\"datagd\",\"vpmclujyxkyxlz\":\"dataioycbl\"},\"id\":\"jgkz\"}],\"nextLink\":\"taf\"}")
            .toObject(ChangeDataCaptureListResponse.class);
        Assertions.assertEquals("bjijkgqxnh", model.value().get(0).id());
        Assertions.assertEquals("mmzrrscub", model.value().get(0).folder().name());
        Assertions.assertEquals("sd", model.value().get(0).description());
        Assertions.assertEquals(ConnectionType.LINKEDSERVICETYPE,
            model.value().get(0).sourceConnectionsInfo().get(0).connection().type());
        Assertions.assertEquals(ConnectionType.LINKEDSERVICETYPE,
            model.value().get(0).targetConnectionsInfo().get(0).connection().type());
        Assertions.assertEquals("ziryrandoy", model.value().get(0).policy().mode());
        Assertions.assertEquals(FrequencyType.MINUTE, model.value().get(0).policy().recurrence().frequency());
        Assertions.assertEquals(1798358498, model.value().get(0).policy().recurrence().interval());
        Assertions.assertEquals(true, model.value().get(0).allowVNetOverride());
        Assertions.assertEquals("kfqlwx", model.value().get(0).status());
        Assertions.assertEquals("taf", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ChangeDataCaptureListResponse model
            = new ChangeDataCaptureListResponse()
                .withValue(Arrays.asList(
                    new ChangeDataCaptureResourceInner().withId("bjijkgqxnh")
                        .withFolder(new ChangeDataCaptureFolder().withName("mmzrrscub"))
                        .withDescription("sd")
                        .withSourceConnectionsInfo(Arrays.asList(
                            new MapperSourceConnectionsInfo().withSourceEntities(Arrays.asList(new MapperTable()))
                                .withConnection(new MapperConnection().withType(ConnectionType.LINKEDSERVICETYPE)),
                            new MapperSourceConnectionsInfo()
                                .withSourceEntities(Arrays.asList(new MapperTable(), new MapperTable(),
                                    new MapperTable(), new MapperTable()))
                                .withConnection(new MapperConnection().withType(ConnectionType.LINKEDSERVICETYPE))))
                        .withTargetConnectionsInfo(
                            Arrays.asList(
                                new MapperTargetConnectionsInfo().withTargetEntities(Arrays.asList(new MapperTable()))
                                    .withConnection(new MapperConnection().withType(ConnectionType.LINKEDSERVICETYPE))
                                    .withDataMapperMappings(
                                        Arrays.asList(new DataMapperMapping(), new DataMapperMapping()))
                                    .withRelationships(Arrays.asList("dataabwibvjogjo", "datamcyefoyzbam", "datain")),
                                new MapperTargetConnectionsInfo()
                                    .withTargetEntities(Arrays.asList(new MapperTable(), new MapperTable()))
                                    .withConnection(new MapperConnection().withType(ConnectionType.LINKEDSERVICETYPE))
                                    .withDataMapperMappings(Arrays.asList(new DataMapperMapping(),
                                        new DataMapperMapping(), new DataMapperMapping()))
                                    .withRelationships(Arrays.asList("dataoldtvevboclzhz")),
                                new MapperTargetConnectionsInfo().withTargetEntities(Arrays.asList(new MapperTable()))
                                    .withConnection(new MapperConnection().withType(ConnectionType.LINKEDSERVICETYPE))
                                    .withDataMapperMappings(
                                        Arrays.asList(new DataMapperMapping(), new DataMapperMapping()))
                                    .withRelationships(
                                        Arrays.asList("datatxpnrupza", "datamrdixtreki", "dataswyskbruffg")),
                                new MapperTargetConnectionsInfo()
                                    .withTargetEntities(Arrays.asList(new MapperTable(), new MapperTable()))
                                    .withConnection(new MapperConnection().withType(ConnectionType.LINKEDSERVICETYPE))
                                    .withDataMapperMappings(Arrays.asList(new DataMapperMapping(),
                                        new DataMapperMapping(), new DataMapperMapping()))
                                    .withRelationships(Arrays.asList("dataxhrp", "datahvmblcouqehbhbc"))))
                        .withPolicy(new MapperPolicy().withMode("ziryrandoy")
                            .withRecurrence(new MapperPolicyRecurrence().withFrequency(FrequencyType.MINUTE)
                                .withInterval(1798358498)))
                        .withAllowVNetOverride(true)
                        .withStatus("kfqlwx")
                        .withAdditionalProperties(
                            mapOf("name", "ykalsyga", "etag", "ibjgsjjxxahm", "type", "njpnnbmj")),
                    new ChangeDataCaptureResourceInner()
                        .withId("tgqztwhghmup")
                        .withFolder(new ChangeDataCaptureFolder().withName("eznjaujv"))
                        .withDescription("nnggiycwkdtaawxw")
                        .withSourceConnectionsInfo(Arrays.asList(
                            new MapperSourceConnectionsInfo()
                                .withSourceEntities(Arrays.asList(new MapperTable(), new MapperTable(),
                                    new MapperTable(), new MapperTable()))
                                .withConnection(new MapperConnection().withType(ConnectionType.LINKEDSERVICETYPE)),
                            new MapperSourceConnectionsInfo().withSourceEntities(Arrays.asList(new MapperTable()))
                                .withConnection(new MapperConnection().withType(ConnectionType.LINKEDSERVICETYPE))))
                        .withTargetConnectionsInfo(Arrays.asList(
                            new MapperTargetConnectionsInfo()
                                .withTargetEntities(Arrays.asList(new MapperTable(), new MapperTable()))
                                .withConnection(new MapperConnection().withType(ConnectionType.LINKEDSERVICETYPE))
                                .withDataMapperMappings(Arrays.asList(new DataMapperMapping(), new DataMapperMapping()))
                                .withRelationships(Arrays.asList("datanxwbjsidbirkfp", "datasokdgoge",
                                    "dataijymrhbguzozky", "datawnf")),
                            new MapperTargetConnectionsInfo()
                                .withTargetEntities(Arrays.asList(new MapperTable(), new MapperTable()))
                                .withConnection(new MapperConnection().withType(ConnectionType.LINKEDSERVICETYPE))
                                .withDataMapperMappings(Arrays.asList(new DataMapperMapping()))
                                .withRelationships(
                                    Arrays.asList("dataffjkutycyarnroo", "datag", "dataabzoghktdpyczhco",
                                        "dataocnhzqrottjzcfyj")),
                            new MapperTargetConnectionsInfo()
                                .withTargetEntities(
                                    Arrays.asList(new MapperTable(), new MapperTable(), new MapperTable()))
                                .withConnection(new MapperConnection().withType(ConnectionType.LINKEDSERVICETYPE))
                                .withDataMapperMappings(Arrays
                                    .asList(new DataMapperMapping(), new DataMapperMapping(), new DataMapperMapping()))
                                .withRelationships(Arrays.asList("datapqinf", "datazpyglqdhmrj"))))
                        .withPolicy(new MapperPolicy().withMode("alcxpjbyy")
                            .withRecurrence(new MapperPolicyRecurrence().withFrequency(FrequencyType.SECOND)
                                .withInterval(1715277105)))
                        .withAllowVNetOverride(false)
                        .withStatus("kyhfqzvsqxfxj")
                        .withAdditionalProperties(mapOf("name", "gcm", "etag", "oyvivbsiz", "type", "qjhhhqxuwyvc")),
                    new ChangeDataCaptureResourceInner()
                        .withId("jgkz")
                        .withFolder(new ChangeDataCaptureFolder().withName("jtcdxabbujftaben"))
                        .withDescription("klqpx")
                        .withSourceConnectionsInfo(Arrays.asList(
                            new MapperSourceConnectionsInfo()
                                .withSourceEntities(
                                    Arrays.asList(new MapperTable(), new MapperTable(), new MapperTable()))
                                .withConnection(new MapperConnection().withType(ConnectionType.LINKEDSERVICETYPE)),
                            new MapperSourceConnectionsInfo()
                                .withSourceEntities(Arrays.asList(new MapperTable(), new MapperTable()))
                                .withConnection(new MapperConnection().withType(ConnectionType.LINKEDSERVICETYPE))))
                        .withTargetConnectionsInfo(Arrays.asList(
                            new MapperTargetConnectionsInfo().withTargetEntities(Arrays.asList(new MapperTable()))
                                .withConnection(new MapperConnection().withType(ConnectionType.LINKEDSERVICETYPE))
                                .withDataMapperMappings(Arrays.asList(new DataMapperMapping()))
                                .withRelationships(Arrays.asList("datagnhgook", "datatalvnbwgp", "dataemeluclv",
                                    "datajjukyrdnqodxah")),
                            new MapperTargetConnectionsInfo()
                                .withTargetEntities(Arrays.asList(new MapperTable(), new MapperTable()))
                                .withConnection(new MapperConnection().withType(ConnectionType.LINKEDSERVICETYPE))
                                .withDataMapperMappings(
                                    Arrays.asList(new DataMapperMapping(), new DataMapperMapping(),
                                        new DataMapperMapping(), new DataMapperMapping()))
                                .withRelationships(
                                    Arrays.asList("datazoqgyipemchga", "datasczuejdtxptlghwz", "dataomew", "dataj")),
                            new MapperTargetConnectionsInfo()
                                .withTargetEntities(Arrays.asList(new MapperTable(), new MapperTable(),
                                    new MapperTable(), new MapperTable()))
                                .withConnection(new MapperConnection().withType(ConnectionType.LINKEDSERVICETYPE))
                                .withDataMapperMappings(Arrays.asList(new DataMapperMapping(), new DataMapperMapping(),
                                    new DataMapperMapping()))
                                .withRelationships(Arrays.asList("datamoaiancz", "datavodrrslblxydkxr",
                                    "datavvbxiwkgfbqljnq", "datahychocokuleh"))))
                        .withPolicy(new MapperPolicy().withMode("qlrqffaweyurk")
                            .withRecurrence(new MapperPolicyRecurrence().withFrequency(FrequencyType.SECOND)
                                .withInterval(662993818)))
                        .withAllowVNetOverride(false)
                        .withStatus("juqdbrx")
                        .withAdditionalProperties(mapOf("name", "gchbapxkiy", "etag", "ajb", "type", "j"))))
                .withNextLink("taf");
        model = BinaryData.fromObject(model).toObject(ChangeDataCaptureListResponse.class);
        Assertions.assertEquals("bjijkgqxnh", model.value().get(0).id());
        Assertions.assertEquals("mmzrrscub", model.value().get(0).folder().name());
        Assertions.assertEquals("sd", model.value().get(0).description());
        Assertions.assertEquals(ConnectionType.LINKEDSERVICETYPE,
            model.value().get(0).sourceConnectionsInfo().get(0).connection().type());
        Assertions.assertEquals(ConnectionType.LINKEDSERVICETYPE,
            model.value().get(0).targetConnectionsInfo().get(0).connection().type());
        Assertions.assertEquals("ziryrandoy", model.value().get(0).policy().mode());
        Assertions.assertEquals(FrequencyType.MINUTE, model.value().get(0).policy().recurrence().frequency());
        Assertions.assertEquals(1798358498, model.value().get(0).policy().recurrence().interval());
        Assertions.assertEquals(true, model.value().get(0).allowVNetOverride());
        Assertions.assertEquals("kfqlwx", model.value().get(0).status());
        Assertions.assertEquals("taf", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
