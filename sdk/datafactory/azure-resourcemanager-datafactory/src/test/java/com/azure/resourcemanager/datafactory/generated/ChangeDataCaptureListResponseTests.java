// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.ChangeDataCaptureResourceInner;
import com.azure.resourcemanager.datafactory.models.ChangeDataCaptureFolder;
import com.azure.resourcemanager.datafactory.models.ChangeDataCaptureListResponse;
import com.azure.resourcemanager.datafactory.models.ConnectionType;
import com.azure.resourcemanager.datafactory.models.DataMapperMapping;
import com.azure.resourcemanager.datafactory.models.FrequencyType;
import com.azure.resourcemanager.datafactory.models.MapperConnection;
import com.azure.resourcemanager.datafactory.models.MapperPolicy;
import com.azure.resourcemanager.datafactory.models.MapperPolicyRecurrence;
import com.azure.resourcemanager.datafactory.models.MapperSourceConnectionsInfo;
import com.azure.resourcemanager.datafactory.models.MapperTable;
import com.azure.resourcemanager.datafactory.models.MapperTargetConnectionsInfo;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ChangeDataCaptureListResponseTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ChangeDataCaptureListResponse model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"folder\":{\"name\":\"sbs\"},\"description\":\"qqagwwr\",\"sourceConnectionsInfo\":[{\"sourceEntities\":[{}],\"connection\":{\"type\":\"linkedservicetype\"}}],\"targetConnectionsInfo\":[{\"targetEntities\":[{},{}],\"connection\":{\"type\":\"linkedservicetype\"},\"dataMapperMappings\":[{},{},{},{}],\"relationships\":[\"datak\",\"datahltnjadhqoawjq\",\"datayueayfbpcmsp\",\"databyrrueqth\"]}],\"policy\":{\"mode\":\"gnmbscbbxigdhx\",\"recurrence\":{\"frequency\":\"Minute\",\"interval\":391572277}},\"allowVNetOverride\":true,\"status\":\"wdpyq\"},\"name\":\"bxubmdna\",\"type\":\"bqwremjela\",\"etag\":\"cigeleohdbvqvw\",\"\":{\"ybxc\":\"dataopwbeonrlkwzd\",\"hkrttzrazis\":\"dataakxcptsoqfyiaseq\",\"vanbwzohmnrxxbs\":\"dataykiue\",\"dptysprqs\":\"datajklinh\"},\"id\":\"zxojpslsv\"},{\"properties\":{\"folder\":{\"name\":\"liufiqwoyxq\"},\"description\":\"pcohhoucqpqojx\",\"sourceConnectionsInfo\":[{\"sourceEntities\":[{},{},{},{}],\"connection\":{\"type\":\"linkedservicetype\"}}],\"targetConnectionsInfo\":[{\"targetEntities\":[{},{}],\"connection\":{\"type\":\"linkedservicetype\"},\"dataMapperMappings\":[{}],\"relationships\":[\"databcawetz\",\"dataddtjwfljhznam\",\"datauatmzwcjjncqtj\",\"datamizvgbgatzuuvbx\"]}],\"policy\":{\"mode\":\"rebwggahtt\",\"recurrence\":{\"frequency\":\"Hour\",\"interval\":2015075078}},\"allowVNetOverride\":false,\"status\":\"utlxjoqzasunwqrj\"},\"name\":\"rg\",\"type\":\"aohcmbuocn\",\"etag\":\"ohmbpyr\",\"\":{\"vkfkmr\":\"datameblyd\"},\"id\":\"xne\"}],\"nextLink\":\"sm\"}")
            .toObject(ChangeDataCaptureListResponse.class);
        Assertions.assertEquals("zxojpslsv", model.value().get(0).id());
        Assertions.assertEquals("sbs", model.value().get(0).folder().name());
        Assertions.assertEquals("qqagwwr", model.value().get(0).description());
        Assertions.assertEquals(ConnectionType.LINKEDSERVICETYPE,
            model.value().get(0).sourceConnectionsInfo().get(0).connection().type());
        Assertions.assertEquals(ConnectionType.LINKEDSERVICETYPE,
            model.value().get(0).targetConnectionsInfo().get(0).connection().type());
        Assertions.assertEquals("gnmbscbbxigdhx", model.value().get(0).policy().mode());
        Assertions.assertEquals(FrequencyType.MINUTE, model.value().get(0).policy().recurrence().frequency());
        Assertions.assertEquals(391572277, model.value().get(0).policy().recurrence().interval());
        Assertions.assertEquals(true, model.value().get(0).allowVNetOverride());
        Assertions.assertEquals("wdpyq", model.value().get(0).status());
        Assertions.assertEquals("sm", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ChangeDataCaptureListResponse model
            = new ChangeDataCaptureListResponse()
                .withValue(
                    Arrays
                        .asList(
                            new ChangeDataCaptureResourceInner().withId("zxojpslsv")
                                .withFolder(new ChangeDataCaptureFolder().withName("sbs"))
                                .withDescription("qqagwwr")
                                .withSourceConnectionsInfo(Arrays.asList(new MapperSourceConnectionsInfo()
                                    .withSourceEntities(Arrays.asList(new MapperTable()))
                                    .withConnection(new MapperConnection().withType(ConnectionType.LINKEDSERVICETYPE))))
                                .withTargetConnectionsInfo(Arrays.asList(new MapperTargetConnectionsInfo()
                                    .withTargetEntities(Arrays.asList(new MapperTable(), new MapperTable()))
                                    .withConnection(new MapperConnection().withType(ConnectionType.LINKEDSERVICETYPE))
                                    .withDataMapperMappings(Arrays.asList(new DataMapperMapping(),
                                        new DataMapperMapping(), new DataMapperMapping(), new DataMapperMapping()))
                                    .withRelationships(Arrays.asList("datak", "datahltnjadhqoawjq", "datayueayfbpcmsp",
                                        "databyrrueqth"))))
                                .withPolicy(new MapperPolicy().withMode("gnmbscbbxigdhx")
                                    .withRecurrence(new MapperPolicyRecurrence().withFrequency(FrequencyType.MINUTE)
                                        .withInterval(391572277)))
                                .withAllowVNetOverride(true)
                                .withStatus("wdpyq")
                                .withAdditionalProperties(
                                    mapOf("name", "bxubmdna", "etag", "cigeleohdbvqvw", "type", "bqwremjela")),
                            new ChangeDataCaptureResourceInner().withId("xne")
                                .withFolder(new ChangeDataCaptureFolder().withName("liufiqwoyxq"))
                                .withDescription("pcohhoucqpqojx")
                                .withSourceConnectionsInfo(Arrays.asList(new MapperSourceConnectionsInfo()
                                    .withSourceEntities(Arrays.asList(new MapperTable(), new MapperTable(),
                                        new MapperTable(), new MapperTable()))
                                    .withConnection(new MapperConnection().withType(ConnectionType.LINKEDSERVICETYPE))))
                                .withTargetConnectionsInfo(Arrays.asList(new MapperTargetConnectionsInfo()
                                    .withTargetEntities(Arrays.asList(new MapperTable(), new MapperTable()))
                                    .withConnection(new MapperConnection().withType(ConnectionType.LINKEDSERVICETYPE))
                                    .withDataMapperMappings(Arrays.asList(new DataMapperMapping()))
                                    .withRelationships(Arrays.asList("databcawetz", "dataddtjwfljhznam",
                                        "datauatmzwcjjncqtj", "datamizvgbgatzuuvbx"))))
                                .withPolicy(new MapperPolicy().withMode("rebwggahtt")
                                    .withRecurrence(new MapperPolicyRecurrence().withFrequency(FrequencyType.HOUR)
                                        .withInterval(2015075078)))
                                .withAllowVNetOverride(false)
                                .withStatus("utlxjoqzasunwqrj")
                                .withAdditionalProperties(
                                    mapOf("name", "rg", "etag", "ohmbpyr", "type", "aohcmbuocn"))))
                .withNextLink("sm");
        model = BinaryData.fromObject(model).toObject(ChangeDataCaptureListResponse.class);
        Assertions.assertEquals("zxojpslsv", model.value().get(0).id());
        Assertions.assertEquals("sbs", model.value().get(0).folder().name());
        Assertions.assertEquals("qqagwwr", model.value().get(0).description());
        Assertions.assertEquals(ConnectionType.LINKEDSERVICETYPE,
            model.value().get(0).sourceConnectionsInfo().get(0).connection().type());
        Assertions.assertEquals(ConnectionType.LINKEDSERVICETYPE,
            model.value().get(0).targetConnectionsInfo().get(0).connection().type());
        Assertions.assertEquals("gnmbscbbxigdhx", model.value().get(0).policy().mode());
        Assertions.assertEquals(FrequencyType.MINUTE, model.value().get(0).policy().recurrence().frequency());
        Assertions.assertEquals(391572277, model.value().get(0).policy().recurrence().interval());
        Assertions.assertEquals(true, model.value().get(0).allowVNetOverride());
        Assertions.assertEquals("wdpyq", model.value().get(0).status());
        Assertions.assertEquals("sm", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
