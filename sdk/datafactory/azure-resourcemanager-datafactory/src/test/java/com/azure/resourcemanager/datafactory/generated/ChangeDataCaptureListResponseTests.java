// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.ChangeDataCaptureResourceInner;
import com.azure.resourcemanager.datafactory.models.ChangeDataCaptureFolder;
import com.azure.resourcemanager.datafactory.models.ChangeDataCaptureListResponse;
import com.azure.resourcemanager.datafactory.models.ConnectionType;
import com.azure.resourcemanager.datafactory.models.DataMapperMapping;
import com.azure.resourcemanager.datafactory.models.FrequencyType;
import com.azure.resourcemanager.datafactory.models.MapperConnection;
import com.azure.resourcemanager.datafactory.models.MapperPolicy;
import com.azure.resourcemanager.datafactory.models.MapperPolicyRecurrence;
import com.azure.resourcemanager.datafactory.models.MapperSourceConnectionsInfo;
import com.azure.resourcemanager.datafactory.models.MapperTable;
import com.azure.resourcemanager.datafactory.models.MapperTargetConnectionsInfo;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ChangeDataCaptureListResponseTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ChangeDataCaptureListResponse model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"folder\":{\"name\":\"hpv\"},\"description\":\"mslclblyjxlt\",\"sourceConnectionsInfo\":[{\"sourceEntities\":[{}],\"connection\":{\"type\":\"linkedservicetype\"}},{\"sourceEntities\":[{},{},{}],\"connection\":{\"type\":\"linkedservicetype\"}},{\"sourceEntities\":[{},{},{},{}],\"connection\":{\"type\":\"linkedservicetype\"}},{\"sourceEntities\":[{},{},{},{}],\"connection\":{\"type\":\"linkedservicetype\"}}],\"targetConnectionsInfo\":[{\"targetEntities\":[{},{},{}],\"connection\":{\"type\":\"linkedservicetype\"},\"dataMapperMappings\":[{}],\"relationships\":[\"datadrtc\",\"dataukdqkkyihztg\"]},{\"targetEntities\":[{},{},{}],\"connection\":{\"type\":\"linkedservicetype\"},\"dataMapperMappings\":[{},{}],\"relationships\":[\"datadoychillcecfeh\",\"datawaoaguhi\"]},{\"targetEntities\":[{},{}],\"connection\":{\"type\":\"linkedservicetype\"},\"dataMapperMappings\":[{},{},{},{}],\"relationships\":[\"datacsjvhrwef\"]}],\"policy\":{\"mode\":\"wqejpmvsse\",\"recurrence\":{\"frequency\":\"Minute\",\"interval\":18531700}},\"allowVNetOverride\":true,\"status\":\"tczhupeuknijd\"},\"name\":\"yespydjfbocyv\",\"type\":\"ulrtywikdmh\",\"etag\":\"kuflgbh\",\"\":{\"f\":\"dataacdixmx\",\"oeoq\":\"datasryjqgdkfno\",\"jchnta\":\"datavjhvefgwbm\"},\"id\":\"ay\"},{\"properties\":{\"folder\":{\"name\":\"ulpzealb\"},\"description\":\"kyojwyvfk\",\"sourceConnectionsInfo\":[{\"sourceEntities\":[{}],\"connection\":{\"type\":\"linkedservicetype\"}},{\"sourceEntities\":[{},{},{}],\"connection\":{\"type\":\"linkedservicetype\"}}],\"targetConnectionsInfo\":[{\"targetEntities\":[{},{}],\"connection\":{\"type\":\"linkedservicetype\"},\"dataMapperMappings\":[{},{},{},{}],\"relationships\":[\"datacubiwsdr\",\"datapxqwo\",\"dataiffjxcjrm\",\"datauabwibvjogjo\"]},{\"targetEntities\":[{},{},{},{}],\"connection\":{\"type\":\"linkedservicetype\"},\"dataMapperMappings\":[{},{},{},{}],\"relationships\":[\"databamwineo\",\"datavfkakpold\"]},{\"targetEntities\":[{},{},{},{}],\"connection\":{\"type\":\"linkedservicetype\"},\"dataMapperMappings\":[{}],\"relationships\":[\"datahzjkn\",\"datauxgvttxpnr\",\"datapzaamrdixtreki\"]}],\"policy\":{\"mode\":\"wyskbruffgll\",\"recurrence\":{\"frequency\":\"Hour\",\"interval\":1275101011}},\"allowVNetOverride\":false,\"status\":\"rpq\"},\"name\":\"mblcouqehbhbcds\",\"type\":\"ryrando\",\"etag\":\"mbltoo\",\"\":{\"aolnjpnnbmjk\":\"datafqlwxldykalsy\",\"nadzyq\":\"dataibjgsjjxxahm\"},\"id\":\"xyivpinbm\"},{\"properties\":{\"folder\":{\"name\":\"jijkgqxnhmbke\"},\"description\":\"jauj\",\"sourceConnectionsInfo\":[{\"sourceEntities\":[{},{},{},{}],\"connection\":{\"type\":\"linkedservicetype\"}}],\"targetConnectionsInfo\":[{\"targetEntities\":[{},{},{}],\"connection\":{\"type\":\"linkedservicetype\"},\"dataMapperMappings\":[{},{}],\"relationships\":[\"dataawxwfek\",\"dataumrrqmbzm\",\"datakratbnxwbj\"]},{\"targetEntities\":[{},{},{},{}],\"connection\":{\"type\":\"linkedservicetype\"},\"dataMapperMappings\":[{},{},{}],\"relationships\":[\"datakso\",\"datadgo\",\"dataewijymrhbguz\"]},{\"targetEntities\":[{},{},{},{}],\"connection\":{\"type\":\"linkedservicetype\"},\"dataMapperMappings\":[{},{}],\"relationships\":[\"datazhhh\",\"datao\"]},{\"targetEntities\":[{},{},{},{}],\"connection\":{\"type\":\"linkedservicetype\"},\"dataMapperMappings\":[{},{},{},{}],\"relationships\":[\"datacyar\",\"dataroohguabzogh\",\"datat\"]}],\"policy\":{\"mode\":\"yczhco\",\"recurrence\":{\"frequency\":\"Second\",\"interval\":953952910}},\"allowVNetOverride\":true,\"status\":\"ttjzcfyjzpt\"},\"name\":\"lohap\",\"type\":\"nfszpyglqdhmrjz\",\"etag\":\"l\",\"\":{\"ypsjoq\":\"datajb\"},\"id\":\"enky\"}],\"nextLink\":\"qzvs\"}")
            .toObject(ChangeDataCaptureListResponse.class);
        Assertions.assertEquals("ay", model.value().get(0).id());
        Assertions.assertEquals("hpv", model.value().get(0).folder().name());
        Assertions.assertEquals("mslclblyjxlt", model.value().get(0).description());
        Assertions.assertEquals(ConnectionType.LINKEDSERVICETYPE,
            model.value().get(0).sourceConnectionsInfo().get(0).connection().type());
        Assertions.assertEquals(ConnectionType.LINKEDSERVICETYPE,
            model.value().get(0).targetConnectionsInfo().get(0).connection().type());
        Assertions.assertEquals("wqejpmvsse", model.value().get(0).policy().mode());
        Assertions.assertEquals(FrequencyType.MINUTE, model.value().get(0).policy().recurrence().frequency());
        Assertions.assertEquals(18531700, model.value().get(0).policy().recurrence().interval());
        Assertions.assertEquals(true, model.value().get(0).allowVNetOverride());
        Assertions.assertEquals("tczhupeuknijd", model.value().get(0).status());
        Assertions.assertEquals("qzvs", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ChangeDataCaptureListResponse model = new ChangeDataCaptureListResponse()
            .withValue(Arrays.asList(
                new ChangeDataCaptureResourceInner().withId("ay")
                    .withFolder(new ChangeDataCaptureFolder().withName("hpv"))
                    .withDescription("mslclblyjxlt")
                    .withSourceConnectionsInfo(Arrays.asList(
                        new MapperSourceConnectionsInfo().withSourceEntities(Arrays.asList(new MapperTable()))
                            .withConnection(new MapperConnection().withType(ConnectionType.LINKEDSERVICETYPE)),
                        new MapperSourceConnectionsInfo()
                            .withSourceEntities(Arrays.asList(new MapperTable(), new MapperTable(), new MapperTable()))
                            .withConnection(new MapperConnection().withType(ConnectionType.LINKEDSERVICETYPE)),
                        new MapperSourceConnectionsInfo()
                            .withSourceEntities(Arrays.asList(new MapperTable(), new MapperTable(), new MapperTable(),
                                new MapperTable()))
                            .withConnection(new MapperConnection().withType(ConnectionType.LINKEDSERVICETYPE)),
                        new MapperSourceConnectionsInfo()
                            .withSourceEntities(Arrays.asList(new MapperTable(), new MapperTable(), new MapperTable(),
                                new MapperTable()))
                            .withConnection(new MapperConnection().withType(ConnectionType.LINKEDSERVICETYPE))))
                    .withTargetConnectionsInfo(Arrays
                        .asList(
                            new MapperTargetConnectionsInfo()
                                .withTargetEntities(
                                    Arrays.asList(new MapperTable(), new MapperTable(), new MapperTable()))
                                .withConnection(new MapperConnection().withType(ConnectionType.LINKEDSERVICETYPE))
                                .withDataMapperMappings(Arrays.asList(new DataMapperMapping()))
                                .withRelationships(Arrays.asList("datadrtc", "dataukdqkkyihztg")),
                            new MapperTargetConnectionsInfo()
                                .withTargetEntities(
                                    Arrays.asList(new MapperTable(), new MapperTable(), new MapperTable()))
                                .withConnection(new MapperConnection().withType(ConnectionType.LINKEDSERVICETYPE))
                                .withDataMapperMappings(Arrays.asList(new DataMapperMapping(), new DataMapperMapping()))
                                .withRelationships(Arrays.asList("datadoychillcecfeh", "datawaoaguhi")),
                            new MapperTargetConnectionsInfo()
                                .withTargetEntities(Arrays.asList(new MapperTable(), new MapperTable()))
                                .withConnection(new MapperConnection().withType(ConnectionType.LINKEDSERVICETYPE))
                                .withDataMapperMappings(Arrays.asList(new DataMapperMapping(), new DataMapperMapping(),
                                    new DataMapperMapping(), new DataMapperMapping()))
                                .withRelationships(Arrays.asList("datacsjvhrwef"))))
                    .withPolicy(new MapperPolicy().withMode("wqejpmvsse")
                        .withRecurrence(
                            new MapperPolicyRecurrence().withFrequency(FrequencyType.MINUTE).withInterval(18531700)))
                    .withAllowVNetOverride(true)
                    .withStatus("tczhupeuknijd")
                    .withAdditionalProperties(mapOf("name", "yespydjfbocyv", "etag", "kuflgbh", "type", "ulrtywikdmh")),
                new ChangeDataCaptureResourceInner().withId("xyivpinbm")
                    .withFolder(new ChangeDataCaptureFolder().withName("ulpzealb"))
                    .withDescription("kyojwyvfk")
                    .withSourceConnectionsInfo(Arrays.asList(
                        new MapperSourceConnectionsInfo().withSourceEntities(Arrays.asList(new MapperTable()))
                            .withConnection(new MapperConnection().withType(ConnectionType.LINKEDSERVICETYPE)),
                        new MapperSourceConnectionsInfo()
                            .withSourceEntities(Arrays.asList(new MapperTable(), new MapperTable(), new MapperTable()))
                            .withConnection(new MapperConnection().withType(ConnectionType.LINKEDSERVICETYPE))))
                    .withTargetConnectionsInfo(Arrays.asList(new MapperTargetConnectionsInfo()
                        .withTargetEntities(Arrays.asList(new MapperTable(), new MapperTable()))
                        .withConnection(new MapperConnection().withType(ConnectionType.LINKEDSERVICETYPE))
                        .withDataMapperMappings(
                            Arrays.asList(new DataMapperMapping(), new DataMapperMapping(), new DataMapperMapping(),
                                new DataMapperMapping()))
                        .withRelationships(
                            Arrays.asList("datacubiwsdr", "datapxqwo", "dataiffjxcjrm", "datauabwibvjogjo")),
                        new MapperTargetConnectionsInfo()
                            .withTargetEntities(Arrays.asList(new MapperTable(), new MapperTable(), new MapperTable(),
                                new MapperTable()))
                            .withConnection(new MapperConnection().withType(ConnectionType.LINKEDSERVICETYPE))
                            .withDataMapperMappings(Arrays.asList(new DataMapperMapping(), new DataMapperMapping(),
                                new DataMapperMapping(), new DataMapperMapping()))
                            .withRelationships(Arrays.asList("databamwineo", "datavfkakpold")),
                        new MapperTargetConnectionsInfo()
                            .withTargetEntities(Arrays.asList(new MapperTable(), new MapperTable(), new MapperTable(),
                                new MapperTable()))
                            .withConnection(new MapperConnection().withType(ConnectionType.LINKEDSERVICETYPE))
                            .withDataMapperMappings(Arrays.asList(new DataMapperMapping()))
                            .withRelationships(Arrays.asList("datahzjkn", "datauxgvttxpnr", "datapzaamrdixtreki"))))
                    .withPolicy(
                        new MapperPolicy().withMode("wyskbruffgll")
                            .withRecurrence(new MapperPolicyRecurrence().withFrequency(FrequencyType.HOUR)
                                .withInterval(1275101011)))
                    .withAllowVNetOverride(false)
                    .withStatus("rpq")
                    .withAdditionalProperties(mapOf("name", "mblcouqehbhbcds", "etag", "mbltoo", "type", "ryrando")),
                new ChangeDataCaptureResourceInner().withId("enky")
                    .withFolder(new ChangeDataCaptureFolder().withName("jijkgqxnhmbke"))
                    .withDescription("jauj")
                    .withSourceConnectionsInfo(Arrays.asList(new MapperSourceConnectionsInfo()
                        .withSourceEntities(
                            Arrays.asList(new MapperTable(), new MapperTable(), new MapperTable(), new MapperTable()))
                        .withConnection(new MapperConnection().withType(ConnectionType.LINKEDSERVICETYPE))))
                    .withTargetConnectionsInfo(Arrays
                        .asList(
                            new MapperTargetConnectionsInfo()
                                .withTargetEntities(
                                    Arrays.asList(new MapperTable(), new MapperTable(), new MapperTable()))
                                .withConnection(new MapperConnection().withType(ConnectionType.LINKEDSERVICETYPE))
                                .withDataMapperMappings(Arrays.asList(new DataMapperMapping(), new DataMapperMapping()))
                                .withRelationships(Arrays.asList("dataawxwfek", "dataumrrqmbzm", "datakratbnxwbj")),
                            new MapperTargetConnectionsInfo()
                                .withTargetEntities(Arrays.asList(new MapperTable(), new MapperTable(),
                                    new MapperTable(), new MapperTable()))
                                .withConnection(new MapperConnection().withType(ConnectionType.LINKEDSERVICETYPE))
                                .withDataMapperMappings(Arrays.asList(new DataMapperMapping(), new DataMapperMapping(),
                                    new DataMapperMapping()))
                                .withRelationships(Arrays.asList("datakso", "datadgo", "dataewijymrhbguz")),
                            new MapperTargetConnectionsInfo()
                                .withTargetEntities(Arrays.asList(new MapperTable(), new MapperTable(),
                                    new MapperTable(), new MapperTable()))
                                .withConnection(new MapperConnection().withType(ConnectionType.LINKEDSERVICETYPE))
                                .withDataMapperMappings(Arrays.asList(new DataMapperMapping(), new DataMapperMapping()))
                                .withRelationships(Arrays.asList("datazhhh", "datao")),
                            new MapperTargetConnectionsInfo()
                                .withTargetEntities(Arrays.asList(new MapperTable(), new MapperTable(),
                                    new MapperTable(), new MapperTable()))
                                .withConnection(new MapperConnection().withType(ConnectionType.LINKEDSERVICETYPE))
                                .withDataMapperMappings(Arrays.asList(new DataMapperMapping(), new DataMapperMapping(),
                                    new DataMapperMapping(), new DataMapperMapping()))
                                .withRelationships(Arrays.asList("datacyar", "dataroohguabzogh", "datat"))))
                    .withPolicy(
                        new MapperPolicy().withMode("yczhco")
                            .withRecurrence(new MapperPolicyRecurrence().withFrequency(FrequencyType.SECOND)
                                .withInterval(953952910)))
                    .withAllowVNetOverride(true)
                    .withStatus("ttjzcfyjzpt")
                    .withAdditionalProperties(mapOf("name", "lohap", "etag", "l", "type", "nfszpyglqdhmrjz"))))
            .withNextLink("qzvs");
        model = BinaryData.fromObject(model).toObject(ChangeDataCaptureListResponse.class);
        Assertions.assertEquals("ay", model.value().get(0).id());
        Assertions.assertEquals("hpv", model.value().get(0).folder().name());
        Assertions.assertEquals("mslclblyjxlt", model.value().get(0).description());
        Assertions.assertEquals(ConnectionType.LINKEDSERVICETYPE,
            model.value().get(0).sourceConnectionsInfo().get(0).connection().type());
        Assertions.assertEquals(ConnectionType.LINKEDSERVICETYPE,
            model.value().get(0).targetConnectionsInfo().get(0).connection().type());
        Assertions.assertEquals("wqejpmvsse", model.value().get(0).policy().mode());
        Assertions.assertEquals(FrequencyType.MINUTE, model.value().get(0).policy().recurrence().frequency());
        Assertions.assertEquals(18531700, model.value().get(0).policy().recurrence().interval());
        Assertions.assertEquals(true, model.value().get(0).allowVNetOverride());
        Assertions.assertEquals("tczhupeuknijd", model.value().get(0).status());
        Assertions.assertEquals("qzvs", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
