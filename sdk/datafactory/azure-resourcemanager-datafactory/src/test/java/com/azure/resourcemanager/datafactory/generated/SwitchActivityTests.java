// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.Activity;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.Expression;
import com.azure.resourcemanager.datafactory.models.SwitchActivity;
import com.azure.resourcemanager.datafactory.models.SwitchCase;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SwitchActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SwitchActivity model = BinaryData.fromString(
            "{\"type\":\"Switch\",\"typeProperties\":{\"on\":{\"value\":\"fskgxfmdpsreqor\"},\"cases\":[{\"value\":\"zqjqbwjiqru\",\"activities\":[{\"type\":\"Activity\",\"name\":\"uakd\",\"description\":\"wajal\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"lvfdvbslrhccey\",\"dependencyConditions\":[]},{\"activity\":\"bjsjunzwbby\",\"dependencyConditions\":[]},{\"activity\":\"xkvfuku\",\"dependencyConditions\":[]}],\"userProperties\":[{\"name\":\"vxidmitmjccnjvg\",\"value\":\"datatmpjinrqgliq\"}],\"\":{\"wttqiresixigp\":\"datapysscngduewevh\",\"ycpwhybtxzaaa\":\"datacmequocawcbknyl\",\"xrkrvmhhgv\":\"dataeiadygoadtdx\",\"ktncigwfgvpft\":\"dataxvsuwbvrbwafwi\"}},{\"type\":\"Activity\",\"name\":\"wmuxcpyqbv\",\"description\":\"mghhzm\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"pywvgfdsrng\",\"dependencyConditions\":[]},{\"activity\":\"qvxzqwcmmolpfcv\",\"dependencyConditions\":[]}],\"userProperties\":[{\"name\":\"nnyksskuscdnn\",\"value\":\"dataoftapyrh\"},{\"name\":\"tjtqww\",\"value\":\"dataaxhsjw\"},{\"name\":\"c\",\"value\":\"datatwywhrzntmzzzavx\"}],\"\":{\"teaisywopko\":\"dataexspoiqvuky\",\"cbyldsmyq\":\"datalwmaigd\"}},{\"type\":\"Activity\",\"name\":\"gvqthlimvyzrdqpg\",\"description\":\"nk\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"tphnisijcj\",\"dependencyConditions\":[]},{\"activity\":\"btgfitpxpkb\",\"dependencyConditions\":[]}],\"userProperties\":[{\"name\":\"jxbbyq\",\"value\":\"databd\"}],\"\":{\"m\":\"datakujgeppxiyovgha\",\"ameacjoaixhma\":\"datacog\",\"yblwjhpibgalefjs\":\"datakkgvwvlqqnfdwrws\",\"qnshnbfd\":\"datanxrgmvzcibqy\"}},{\"type\":\"Activity\",\"name\":\"xs\",\"description\":\"tskprgztzcib\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"hnbsxoebephohjo\",\"dependencyConditions\":[]},{\"activity\":\"g\",\"dependencyConditions\":[]},{\"activity\":\"ifchvr\",\"dependencyConditions\":[]}],\"userProperties\":[{\"name\":\"ngkqejrhwyyzz\",\"value\":\"datalfayichwcf\"},{\"name\":\"bywpwjvpgls\",\"value\":\"dataxznkbjkjez\"},{\"name\":\"n\",\"value\":\"dataddygpdn\"}],\"\":{\"bxd\":\"datapbocwbcxw\",\"ive\":\"dataopummphbfp\",\"ppizyenajjxz\":\"datal\"}}]},{\"value\":\"pnersmevhgsuq\",\"activities\":[{\"type\":\"Activity\",\"name\":\"lvrjqa\",\"description\":\"hzsyqpkpvbxgr\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"v\",\"dependencyConditions\":[]},{\"activity\":\"yivgzeiocacngi\",\"dependencyConditions\":[]},{\"activity\":\"adgx\",\"dependencyConditions\":[]}],\"userProperties\":[{\"name\":\"yceteidf\",\"value\":\"dataofmcnnicmlomlnpr\"},{\"name\":\"ikyn\",\"value\":\"datacsgquphqnuitu\"},{\"name\":\"xhv\",\"value\":\"datamogabcwvib\"},{\"name\":\"fkcmzanrut\",\"value\":\"datad\"}],\"\":{\"qehgrjgvrawjom\":\"datatbdtrqiuohijjlax\",\"dwfyagvhe\":\"datagb\"}},{\"type\":\"Activity\",\"name\":\"ptcuqzdwpcupejzo\",\"description\":\"dapxxgvcsvtflcj\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"pf\",\"dependencyConditions\":[]},{\"activity\":\"pdfi\",\"dependencyConditions\":[]},{\"activity\":\"rutcedeygsrrgd\",\"dependencyConditions\":[]},{\"activity\":\"maqyesahvowlibr\",\"dependencyConditions\":[]}],\"userProperties\":[{\"name\":\"dwzzacyrkc\",\"value\":\"dataokkagkaitihncysa\"},{\"name\":\"jlq\",\"value\":\"dataora\"}],\"\":{\"kkcebjaj\":\"datai\"}},{\"type\":\"Activity\",\"name\":\"ptydve\",\"description\":\"pkeo\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"ghx\",\"dependencyConditions\":[]}],\"userProperties\":[{\"name\":\"qptvxibpzhkn\",\"value\":\"datauevzqawjnwj\"}],\"\":{\"sjghfaldxsd\":\"dataubpfe\",\"jseftvwu\":\"datalbbp\",\"naqyeswinoecwabu\":\"datafmakn\",\"eqayvkmp\":\"dataqflwskb\"}}]}],\"defaultActivities\":[{\"type\":\"Activity\",\"name\":\"qxiyllamdz\",\"description\":\"j\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"esxpcbglbpahbc\",\"dependencyConditions\":[\"Failed\"],\"\":{\"xtbdgp\":\"datao\",\"macztkypyvztd\":\"datadclbdcgl\",\"xdyyo\":\"dataoyarcum\"}},{\"activity\":\"bbtwpkg\",\"dependencyConditions\":[\"Succeeded\",\"Succeeded\",\"Completed\"],\"\":{\"doteidc\":\"datajejalybvxumtxu\",\"viymcyfszlu\":\"datarmdqqgtwegqm\"}},{\"activity\":\"mzgattagroejsae\",\"dependencyConditions\":[\"Skipped\",\"Skipped\",\"Failed\",\"Skipped\"],\"\":{\"rxgq\":\"datazwzgioz\",\"uriwbvyra\":\"dataddvu\",\"tp\":\"datazscxikjyjcsh\",\"b\":\"datavuixmkm\"}}],\"userProperties\":[{\"name\":\"xmvckf\",\"value\":\"dataviadqnnmcdqzgep\"}],\"\":{\"fraohiyeyfsvuy\":\"datap\",\"cuzpjnakqcs\":\"datay\",\"hkrklzn\":\"dataoozyxugieitpokjy\",\"yylkcbkljjiuirmc\":\"datafpxiqpjn\"}}]},\"name\":\"pbehqbmhqihlxdho\",\"description\":\"cuoocv\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"nho\",\"dependencyConditions\":[\"Skipped\",\"Succeeded\"],\"\":{\"bxnqkbvhdbg\":\"datarefgetttzlokttp\",\"vmixfqqm\":\"databcwfp\",\"m\":\"datatcucfbr\",\"gw\":\"datadtz\"}},{\"activity\":\"rvpcwyn\",\"dependencyConditions\":[\"Succeeded\",\"Completed\",\"Completed\"],\"\":{\"gpmad\":\"dataavdqeue\",\"nfhgdvgcgun\":\"datamloimaykbmkk\"}},{\"activity\":\"itzwndpkev\",\"dependencyConditions\":[\"Failed\"],\"\":{\"euppxdzpjewp\":\"datajrdydz\",\"rkokgrnxly\":\"datalyszw\",\"zrouwkkwtoxl\":\"datatfgbxiao\",\"vealwdltstxronbz\":\"datan\"}},{\"activity\":\"keeeakzys\",\"dependencyConditions\":[\"Skipped\",\"Failed\"],\"\":{\"kdwpcmy\":\"datatajdfqchj\",\"eedoruiycvourqd\":\"datadrrkfhlaygwxo\"}}],\"userProperties\":[{\"name\":\"itrsppucxigkpevt\",\"value\":\"datalmrjla\"},{\"name\":\"dggwaldtelnvcfum\",\"value\":\"dataz\"},{\"name\":\"zhiradklzg\",\"value\":\"dataqmmapxnoog\"}],\"\":{\"icmezexwzpgy\":\"datajeci\",\"umpydk\":\"datanljy\",\"sczcksjwdwzfdfkg\":\"databcufhkrvxxzhqouo\",\"vmbsmxhsqdotbnf\":\"datala\"}}")
            .toObject(SwitchActivity.class);
        Assertions.assertEquals("pbehqbmhqihlxdho", model.name());
        Assertions.assertEquals("cuoocv", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("nho", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("itrsppucxigkpevt", model.userProperties().get(0).name());
        Assertions.assertEquals("fskgxfmdpsreqor", model.on().value());
        Assertions.assertEquals("zqjqbwjiqru", model.cases().get(0).value());
        Assertions.assertEquals("uakd", model.cases().get(0).activities().get(0).name());
        Assertions.assertEquals("wajal", model.cases().get(0).activities().get(0).description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.cases().get(0).activities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED,
            model.cases().get(0).activities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("lvfdvbslrhccey",
            model.cases().get(0).activities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals("vxidmitmjccnjvg",
            model.cases().get(0).activities().get(0).userProperties().get(0).name());
        Assertions.assertEquals("qxiyllamdz", model.defaultActivities().get(0).name());
        Assertions.assertEquals("j", model.defaultActivities().get(0).description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.defaultActivities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.defaultActivities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("esxpcbglbpahbc", model.defaultActivities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED,
            model.defaultActivities().get(0).dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("xmvckf", model.defaultActivities().get(0).userProperties().get(0).name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SwitchActivity model
            = new SwitchActivity().withName("pbehqbmhqihlxdho")
                .withDescription("cuoocv")
                .withState(ActivityState.ACTIVE)
                .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
                .withDependsOn(Arrays.asList(
                    new ActivityDependency().withActivity("nho")
                        .withDependencyConditions(
                            Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.SUCCEEDED))
                        .withAdditionalProperties(mapOf()),
                    new ActivityDependency().withActivity("rvpcwyn")
                        .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED,
                            DependencyCondition.COMPLETED, DependencyCondition.COMPLETED))
                        .withAdditionalProperties(mapOf()),
                    new ActivityDependency().withActivity("itzwndpkev")
                        .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED))
                        .withAdditionalProperties(mapOf()),
                    new ActivityDependency().withActivity("keeeakzys")
                        .withDependencyConditions(
                            Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.FAILED))
                        .withAdditionalProperties(mapOf())))
                .withUserProperties(Arrays.asList(
                    new UserProperty().withName("itrsppucxigkpevt").withValue("datalmrjla"),
                    new UserProperty().withName("dggwaldtelnvcfum").withValue("dataz"),
                    new UserProperty().withName("zhiradklzg").withValue("dataqmmapxnoog")))
                .withOn(new Expression().withValue("fskgxfmdpsreqor"))
                .withCases(Arrays.asList(
                    new SwitchCase().withValue("zqjqbwjiqru")
                        .withActivities(Arrays.asList(
                            new Activity().withName("uakd")
                                .withDescription("wajal")
                                .withState(ActivityState.ACTIVE)
                                .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
                                .withDependsOn(Arrays.asList(
                                    new ActivityDependency().withActivity("lvfdvbslrhccey")
                                        .withDependencyConditions(Arrays.asList())
                                        .withAdditionalProperties(mapOf()),
                                    new ActivityDependency().withActivity("bjsjunzwbby")
                                        .withDependencyConditions(Arrays.asList())
                                        .withAdditionalProperties(mapOf()),
                                    new ActivityDependency().withActivity("xkvfuku")
                                        .withDependencyConditions(Arrays.asList())
                                        .withAdditionalProperties(mapOf())))
                                .withUserProperties(Arrays.asList(
                                    new UserProperty().withName("vxidmitmjccnjvg").withValue("datatmpjinrqgliq")))
                                .withAdditionalProperties(mapOf("type", "Activity")),
                            new Activity().withName("wmuxcpyqbv")
                                .withDescription("mghhzm")
                                .withState(ActivityState.INACTIVE)
                                .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SUCCEEDED)
                                .withDependsOn(Arrays.asList(
                                    new ActivityDependency().withActivity("pywvgfdsrng")
                                        .withDependencyConditions(Arrays.asList())
                                        .withAdditionalProperties(mapOf()),
                                    new ActivityDependency().withActivity("qvxzqwcmmolpfcv")
                                        .withDependencyConditions(Arrays.asList())
                                        .withAdditionalProperties(mapOf())))
                                .withUserProperties(Arrays.asList(
                                    new UserProperty().withName("nnyksskuscdnn").withValue("dataoftapyrh"),
                                    new UserProperty().withName("tjtqww").withValue("dataaxhsjw"),
                                    new UserProperty().withName("c").withValue("datatwywhrzntmzzzavx")))
                                .withAdditionalProperties(mapOf("type", "Activity")),
                            new Activity().withName("gvqthlimvyzrdqpg")
                                .withDescription("nk")
                                .withState(ActivityState.INACTIVE)
                                .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SUCCEEDED)
                                .withDependsOn(Arrays.asList(
                                    new ActivityDependency().withActivity("tphnisijcj")
                                        .withDependencyConditions(Arrays.asList())
                                        .withAdditionalProperties(mapOf()),
                                    new ActivityDependency().withActivity("btgfitpxpkb")
                                        .withDependencyConditions(Arrays.asList())
                                        .withAdditionalProperties(mapOf())))
                                .withUserProperties(
                                    Arrays.asList(new UserProperty().withName("jxbbyq").withValue("databd")))
                                .withAdditionalProperties(mapOf("type", "Activity")),
                            new Activity().withName("xs")
                                .withDescription("tskprgztzcib")
                                .withState(ActivityState.INACTIVE)
                                .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
                                .withDependsOn(Arrays.asList(
                                    new ActivityDependency().withActivity("hnbsxoebephohjo")
                                        .withDependencyConditions(Arrays.asList())
                                        .withAdditionalProperties(mapOf()),
                                    new ActivityDependency().withActivity("g")
                                        .withDependencyConditions(Arrays.asList())
                                        .withAdditionalProperties(mapOf()),
                                    new ActivityDependency().withActivity("ifchvr")
                                        .withDependencyConditions(Arrays.asList())
                                        .withAdditionalProperties(mapOf())))
                                .withUserProperties(Arrays.asList(
                                    new UserProperty().withName("ngkqejrhwyyzz").withValue("datalfayichwcf"),
                                    new UserProperty().withName("bywpwjvpgls").withValue("dataxznkbjkjez"),
                                    new UserProperty().withName("n").withValue("dataddygpdn")))
                                .withAdditionalProperties(mapOf("type", "Activity")))),
                    new SwitchCase().withValue("pnersmevhgsuq")
                        .withActivities(Arrays.asList(
                            new Activity().withName("lvrjqa")
                                .withDescription("hzsyqpkpvbxgr")
                                .withState(ActivityState.ACTIVE)
                                .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SUCCEEDED)
                                .withDependsOn(Arrays.asList(
                                    new ActivityDependency().withActivity("v")
                                        .withDependencyConditions(Arrays.asList())
                                        .withAdditionalProperties(mapOf()),
                                    new ActivityDependency().withActivity("yivgzeiocacngi")
                                        .withDependencyConditions(Arrays.asList())
                                        .withAdditionalProperties(mapOf()),
                                    new ActivityDependency().withActivity("adgx")
                                        .withDependencyConditions(Arrays.asList())
                                        .withAdditionalProperties(mapOf())))
                                .withUserProperties(Arrays
                                    .asList(new UserProperty().withName("yceteidf").withValue("dataofmcnnicmlomlnpr"),
                                        new UserProperty().withName("ikyn").withValue("datacsgquphqnuitu"),
                                        new UserProperty().withName("xhv").withValue("datamogabcwvib"),
                                        new UserProperty().withName("fkcmzanrut").withValue("datad")))
                                .withAdditionalProperties(mapOf("type", "Activity")),
                            new Activity().withName("ptcuqzdwpcupejzo")
                                .withDescription("dapxxgvcsvtflcj")
                                .withState(ActivityState.INACTIVE)
                                .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SUCCEEDED)
                                .withDependsOn(Arrays.asList(
                                    new ActivityDependency().withActivity("pf")
                                        .withDependencyConditions(Arrays.asList())
                                        .withAdditionalProperties(mapOf()),
                                    new ActivityDependency().withActivity("pdfi")
                                        .withDependencyConditions(Arrays.asList())
                                        .withAdditionalProperties(mapOf()),
                                    new ActivityDependency().withActivity("rutcedeygsrrgd")
                                        .withDependencyConditions(Arrays.asList())
                                        .withAdditionalProperties(mapOf()),
                                    new ActivityDependency().withActivity("maqyesahvowlibr")
                                        .withDependencyConditions(Arrays.asList())
                                        .withAdditionalProperties(mapOf())))
                                .withUserProperties(Arrays.asList(
                                    new UserProperty().withName("dwzzacyrkc").withValue("dataokkagkaitihncysa"),
                                    new UserProperty().withName("jlq").withValue("dataora")))
                                .withAdditionalProperties(mapOf("type", "Activity")),
                            new Activity().withName("ptydve")
                                .withDescription("pkeo")
                                .withState(ActivityState.ACTIVE)
                                .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SUCCEEDED)
                                .withDependsOn(Arrays.asList(new ActivityDependency().withActivity("ghx")
                                    .withDependencyConditions(Arrays.asList())
                                    .withAdditionalProperties(mapOf())))
                                .withUserProperties(Arrays
                                    .asList(new UserProperty().withName("qptvxibpzhkn").withValue("datauevzqawjnwj")))
                                .withAdditionalProperties(mapOf("type", "Activity"))))))
                .withDefaultActivities(Arrays.asList(new Activity().withName("qxiyllamdz")
                    .withDescription("j")
                    .withState(ActivityState.INACTIVE)
                    .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
                    .withDependsOn(Arrays.asList(
                        new ActivityDependency().withActivity("esxpcbglbpahbc")
                            .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED))
                            .withAdditionalProperties(mapOf()),
                        new ActivityDependency().withActivity("bbtwpkg")
                            .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED,
                                DependencyCondition.SUCCEEDED, DependencyCondition.COMPLETED))
                            .withAdditionalProperties(mapOf()),
                        new ActivityDependency().withActivity("mzgattagroejsae")
                            .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED,
                                DependencyCondition.SKIPPED, DependencyCondition.FAILED, DependencyCondition.SKIPPED))
                            .withAdditionalProperties(mapOf())))
                    .withUserProperties(
                        Arrays.asList(new UserProperty().withName("xmvckf").withValue("dataviadqnnmcdqzgep")))
                    .withAdditionalProperties(mapOf("type", "Activity"))));
        model = BinaryData.fromObject(model).toObject(SwitchActivity.class);
        Assertions.assertEquals("pbehqbmhqihlxdho", model.name());
        Assertions.assertEquals("cuoocv", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("nho", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("itrsppucxigkpevt", model.userProperties().get(0).name());
        Assertions.assertEquals("fskgxfmdpsreqor", model.on().value());
        Assertions.assertEquals("zqjqbwjiqru", model.cases().get(0).value());
        Assertions.assertEquals("uakd", model.cases().get(0).activities().get(0).name());
        Assertions.assertEquals("wajal", model.cases().get(0).activities().get(0).description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.cases().get(0).activities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED,
            model.cases().get(0).activities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("lvfdvbslrhccey",
            model.cases().get(0).activities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals("vxidmitmjccnjvg",
            model.cases().get(0).activities().get(0).userProperties().get(0).name());
        Assertions.assertEquals("qxiyllamdz", model.defaultActivities().get(0).name());
        Assertions.assertEquals("j", model.defaultActivities().get(0).description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.defaultActivities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.defaultActivities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("esxpcbglbpahbc", model.defaultActivities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED,
            model.defaultActivities().get(0).dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("xmvckf", model.defaultActivities().get(0).userProperties().get(0).name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
