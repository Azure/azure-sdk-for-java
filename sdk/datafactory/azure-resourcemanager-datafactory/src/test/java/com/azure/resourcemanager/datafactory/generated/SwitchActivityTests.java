// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.Activity;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.Expression;
import com.azure.resourcemanager.datafactory.models.SwitchActivity;
import com.azure.resourcemanager.datafactory.models.SwitchCase;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SwitchActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SwitchActivity model = BinaryData.fromString(
            "{\"type\":\"Switch\",\"typeProperties\":{\"on\":{\"value\":\"b\"},\"cases\":[{\"value\":\"mvckfiviadqnnm\",\"activities\":[{\"type\":\"Activity\",\"name\":\"zgepjyp\",\"description\":\"fraohiyeyfsvuy\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"jnakqcsgo\",\"dependencyConditions\":[]},{\"activity\":\"zyxu\",\"dependencyConditions\":[]},{\"activity\":\"ieitp\",\"dependencyConditions\":[]},{\"activity\":\"kjyjhkrk\",\"dependencyConditions\":[]}],\"userProperties\":[{\"name\":\"ifpxiqpjnqyylkc\",\"value\":\"datakljjiuirmcupb\"}],\"\":{\"hoagcuoocv\":\"databmhqihlx\",\"hogbwhawref\":\"datatmpxnb\",\"tzlo\":\"dataet\",\"pmbx\":\"datat\"}},{\"type\":\"Activity\",\"name\":\"qkbvhd\",\"description\":\"nbcw\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"f\",\"dependencyConditions\":[]},{\"activity\":\"qmutc\",\"dependencyConditions\":[]},{\"activity\":\"cfbrjmpdtzugwu\",\"dependencyConditions\":[]},{\"activity\":\"vpcwy\",\"dependencyConditions\":[]}],\"userProperties\":[{\"name\":\"iko\",\"value\":\"dataravdq\"},{\"name\":\"uewgpmademloima\",\"value\":\"datakbmkkun\"},{\"name\":\"hgdvgcgunqitzwn\",\"value\":\"datapkevtofvqjrdyd\"}],\"\":{\"lyszw\":\"datauppxdzpjewp\",\"tfgbxiao\":\"datarkokgrnxly\",\"n\":\"datazrouwkkwtoxl\"}}]}],\"defaultActivities\":[{\"type\":\"Activity\",\"name\":\"alwdlt\",\"description\":\"xron\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"akz\",\"dependencyConditions\":[\"Failed\",\"Failed\",\"Skipped\"],\"\":{\"ch\":\"datajtajdf\",\"pcmyqdrrkfhlayg\":\"datawkd\",\"ruiycvourq\":\"dataxoreed\",\"cxigkpevtblmrjl\":\"datamzsitrspp\"}},{\"activity\":\"ldggwaldte\",\"dependencyConditions\":[\"Skipped\",\"Completed\",\"Completed\"],\"\":{\"hiradklzgiqm\":\"dataezc\",\"icmezexwzpgy\":\"dataapxnoogmfujeci\",\"umpydk\":\"datanljy\",\"sczcksjwdwzfdfkg\":\"databcufhkrvxxzhqouo\"}},{\"activity\":\"la\",\"dependencyConditions\":[\"Skipped\",\"Failed\",\"Completed\",\"Succeeded\"],\"\":{\"bnfbniybotu\":\"datasqdo\",\"cvwqyf\":\"datazjfkuqvterbsgwoy\",\"mxmiw\":\"dataxwg\",\"hilypuxbnvquxut\":\"dataz\"}}],\"userProperties\":[{\"name\":\"sttmvai\",\"value\":\"datanzqnqwk\"},{\"name\":\"evbgjhmyzsqov\",\"value\":\"datatid\"}],\"\":{\"p\":\"datayyajlnotmirg\"}},{\"type\":\"Activity\",\"name\":\"cln\",\"description\":\"xme\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"fzghnjaqzdzk\",\"dependencyConditions\":[\"Succeeded\"],\"\":{\"ftkceyjt\":\"databwbwvtwmmvba\",\"zrcq\":\"dataeyoxtlqytxfte\",\"phkmwbtrqklondbv\":\"datasjqrgtapawp\"}},{\"activity\":\"qtpebaawzsxp\",\"dependencyConditions\":[\"Completed\",\"Failed\",\"Completed\"],\"\":{\"wzyvxdgten\":\"dataq\",\"ukehxvktlrcauad\":\"dataeqlikyctun\",\"wnrqfi\":\"dataprjs\"}},{\"activity\":\"qamxxpfyl\",\"dependencyConditions\":[\"Failed\"],\"\":{\"tgwwtaolfdgjrg\":\"datatepuo\",\"rpp\":\"datahpvohvcaq\",\"arnjueqo\":\"datazz\",\"htncadrmthhfx\":\"datazjgvqzo\"}}],\"userProperties\":[{\"name\":\"npazbfrqotigxnd\",\"value\":\"datarxnvwqyhk\"}],\"\":{\"jg\":\"datasscpjtiungjbfmr\",\"kghd\":\"dataesamhxkjjhflrgx\",\"zwieizzxjjdb\":\"datadgqpbgzyaf\",\"htqtbcwtcqjsvlzd\":\"dataxuinrsrrijcwn\"}},{\"type\":\"Activity\",\"name\":\"stzbvdzj\",\"description\":\"ocjua\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"bk\",\"dependencyConditions\":[\"Completed\",\"Completed\"],\"\":{\"cyuf\":\"dataljnqiprjahgqzby\",\"feahnruqhmu\":\"datau\",\"zo\":\"datayajppuflvazp\"}},{\"activity\":\"sqmli\",\"dependencyConditions\":[\"Failed\"],\"\":{\"xnts\":\"datallpobz\",\"wwhml\":\"datayntkfziitbwth\",\"bfg\":\"datas\",\"nzuufpdwk\":\"datajkkra\"}},{\"activity\":\"xephwxd\",\"dependencyConditions\":[\"Succeeded\"],\"\":{\"q\":\"datameq\",\"mxuoxk\":\"datajca\",\"qdjfldzvgo\":\"datapleooom\",\"jlqnaxfvs\":\"dataqucgaofo\"}},{\"activity\":\"ustr\",\"dependencyConditions\":[\"Skipped\"],\"\":{\"lrqbdtcjbx\":\"datajbknpzhfhibhgwb\",\"wahb\":\"datachijwpskneprumhi\",\"crxqp\":\"datadgwkimmvatrvjk\"}}],\"userProperties\":[{\"name\":\"ujxdnia\",\"value\":\"dataeterjerhwgiuduw\"},{\"name\":\"qytppjdyikdykxh\",\"value\":\"datarkdtucyutrp\"}],\"\":{\"cvftijlshlcrjyne\":\"dataukm\",\"ajbah\":\"dataxaednczvnwyfzav\",\"uxysmqeeodf\":\"datahyxhfejtyw\"}}]},\"name\":\"lwfsmpbwwphj\",\"description\":\"mcaofxgw\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"xq\",\"dependencyConditions\":[\"Failed\",\"Succeeded\",\"Failed\",\"Skipped\"],\"\":{\"jqynwqcov\":\"dataxkxjrttzhnam\",\"orcmayqas\":\"datajvrsurqhhbddxko\",\"fxmpyvlfujsbcfog\":\"datavepld\"}},{\"activity\":\"ubqcqnch\",\"dependencyConditions\":[\"Succeeded\",\"Succeeded\"],\"\":{\"svprumttrvkhu\":\"datadknblbrixvcp\",\"w\":\"dataxtx\",\"lrtuegqhq\":\"datajbanlmpmvegxgymx\",\"vjuowkt\":\"datalnjeybgpjy\"}},{\"activity\":\"bpv\",\"dependencyConditions\":[\"Failed\",\"Failed\",\"Completed\"],\"\":{\"vttttjm\":\"datagedipnnz\"}}],\"userProperties\":[{\"name\":\"uw\",\"value\":\"dataaeekom\"},{\"name\":\"esgurpcwpbtumtt\",\"value\":\"dataixewp\"}],\"\":{\"jhjutixggnl\":\"dataazgoushvqnk\",\"uklepetsxe\":\"dataflgqsoiuncmuv\"}}")
            .toObject(SwitchActivity.class);
        Assertions.assertEquals("lwfsmpbwwphj", model.name());
        Assertions.assertEquals("mcaofxgw", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("xq", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("uw", model.userProperties().get(0).name());
        Assertions.assertEquals("b", model.on().value());
        Assertions.assertEquals("mvckfiviadqnnm", model.cases().get(0).value());
        Assertions.assertEquals("zgepjyp", model.cases().get(0).activities().get(0).name());
        Assertions.assertEquals("fraohiyeyfsvuy", model.cases().get(0).activities().get(0).description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.cases().get(0).activities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED,
            model.cases().get(0).activities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("jnakqcsgo", model.cases().get(0).activities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals("ifpxiqpjnqyylkc",
            model.cases().get(0).activities().get(0).userProperties().get(0).name());
        Assertions.assertEquals("alwdlt", model.defaultActivities().get(0).name());
        Assertions.assertEquals("xron", model.defaultActivities().get(0).description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.defaultActivities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.defaultActivities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("akz", model.defaultActivities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED,
            model.defaultActivities().get(0).dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("sttmvai", model.defaultActivities().get(0).userProperties().get(0).name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SwitchActivity model = new SwitchActivity().withName("lwfsmpbwwphj")
            .withDescription("mcaofxgw")
            .withState(ActivityState.INACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
            .withDependsOn(Arrays.asList(
                new ActivityDependency().withActivity("xq")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED, DependencyCondition.SUCCEEDED,
                        DependencyCondition.FAILED, DependencyCondition.SKIPPED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("ubqcqnch")
                    .withDependencyConditions(
                        Arrays.asList(DependencyCondition.SUCCEEDED, DependencyCondition.SUCCEEDED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("bpv")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED, DependencyCondition.FAILED,
                        DependencyCondition.COMPLETED))
                    .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("uw").withValue("dataaeekom"),
                new UserProperty().withName("esgurpcwpbtumtt").withValue("dataixewp")))
            .withOn(new Expression().withValue("b"))
            .withCases(Arrays.asList(new SwitchCase().withValue("mvckfiviadqnnm")
                .withActivities(Arrays.asList(
                    new Activity().withName("zgepjyp")
                        .withDescription("fraohiyeyfsvuy")
                        .withState(ActivityState.ACTIVE)
                        .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
                        .withDependsOn(Arrays.asList(
                            new ActivityDependency().withActivity("jnakqcsgo")
                                .withDependencyConditions(Arrays.asList())
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency().withActivity("zyxu")
                                .withDependencyConditions(Arrays.asList())
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency().withActivity("ieitp")
                                .withDependencyConditions(Arrays.asList())
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency().withActivity("kjyjhkrk")
                                .withDependencyConditions(Arrays.asList())
                                .withAdditionalProperties(mapOf())))
                        .withUserProperties(Arrays
                            .asList(new UserProperty().withName("ifpxiqpjnqyylkc").withValue("datakljjiuirmcupb")))
                        .withAdditionalProperties(mapOf("type", "Activity")),
                    new Activity().withName("qkbvhd")
                        .withDescription("nbcw")
                        .withState(ActivityState.INACTIVE)
                        .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
                        .withDependsOn(Arrays.asList(
                            new ActivityDependency().withActivity("f")
                                .withDependencyConditions(Arrays.asList())
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency().withActivity("qmutc")
                                .withDependencyConditions(Arrays.asList())
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency().withActivity("cfbrjmpdtzugwu")
                                .withDependencyConditions(Arrays.asList())
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency().withActivity("vpcwy")
                                .withDependencyConditions(Arrays.asList())
                                .withAdditionalProperties(mapOf())))
                        .withUserProperties(Arrays.asList(new UserProperty().withName("iko").withValue("dataravdq"),
                            new UserProperty().withName("uewgpmademloima").withValue("datakbmkkun"),
                            new UserProperty().withName("hgdvgcgunqitzwn").withValue("datapkevtofvqjrdyd")))
                        .withAdditionalProperties(mapOf("type", "Activity"))))))
            .withDefaultActivities(Arrays.asList(
                new Activity()
                    .withName("alwdlt")
                    .withDescription("xron")
                    .withState(ActivityState.ACTIVE)
                    .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
                    .withDependsOn(Arrays.asList(new ActivityDependency()
                        .withActivity("akz")
                        .withDependencyConditions(
                            Arrays.asList(DependencyCondition.FAILED, DependencyCondition.FAILED,
                                DependencyCondition.SKIPPED))
                        .withAdditionalProperties(mapOf()),
                        new ActivityDependency().withActivity("ldggwaldte")
                            .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED,
                                DependencyCondition.COMPLETED, DependencyCondition.COMPLETED))
                            .withAdditionalProperties(mapOf()),
                        new ActivityDependency().withActivity("la")
                            .withDependencyConditions(
                                Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.FAILED,
                                    DependencyCondition.COMPLETED, DependencyCondition.SUCCEEDED))
                            .withAdditionalProperties(mapOf())))
                    .withUserProperties(Arrays
                        .asList(new UserProperty().withName("sttmvai")
                            .withValue("datanzqnqwk"),
                            new UserProperty().withName("evbgjhmyzsqov").withValue("datatid")))
                    .withAdditionalProperties(mapOf("type", "Activity")),
                new Activity().withName("cln")
                    .withDescription("xme")
                    .withState(ActivityState.ACTIVE)
                    .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
                    .withDependsOn(Arrays.asList(
                        new ActivityDependency().withActivity("fzghnjaqzdzk")
                            .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED))
                            .withAdditionalProperties(mapOf()),
                        new ActivityDependency().withActivity("qtpebaawzsxp")
                            .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED,
                                DependencyCondition.FAILED, DependencyCondition.COMPLETED))
                            .withAdditionalProperties(mapOf()),
                        new ActivityDependency().withActivity("qamxxpfyl")
                            .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED))
                            .withAdditionalProperties(mapOf())))
                    .withUserProperties(
                        Arrays.asList(new UserProperty().withName("npazbfrqotigxnd").withValue("datarxnvwqyhk")))
                    .withAdditionalProperties(mapOf("type", "Activity")),
                new Activity().withName("stzbvdzj")
                    .withDescription("ocjua")
                    .withState(ActivityState.INACTIVE)
                    .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
                    .withDependsOn(Arrays.asList(
                        new ActivityDependency().withActivity("bk")
                            .withDependencyConditions(
                                Arrays.asList(DependencyCondition.COMPLETED, DependencyCondition.COMPLETED))
                            .withAdditionalProperties(mapOf()),
                        new ActivityDependency().withActivity("sqmli")
                            .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED))
                            .withAdditionalProperties(mapOf()),
                        new ActivityDependency().withActivity("xephwxd")
                            .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED))
                            .withAdditionalProperties(mapOf()),
                        new ActivityDependency().withActivity("ustr")
                            .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED))
                            .withAdditionalProperties(mapOf())))
                    .withUserProperties(
                        Arrays.asList(new UserProperty().withName("ujxdnia").withValue("dataeterjerhwgiuduw"),
                            new UserProperty().withName("qytppjdyikdykxh").withValue("datarkdtucyutrp")))
                    .withAdditionalProperties(mapOf("type", "Activity"))));
        model = BinaryData.fromObject(model).toObject(SwitchActivity.class);
        Assertions.assertEquals("lwfsmpbwwphj", model.name());
        Assertions.assertEquals("mcaofxgw", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("xq", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("uw", model.userProperties().get(0).name());
        Assertions.assertEquals("b", model.on().value());
        Assertions.assertEquals("mvckfiviadqnnm", model.cases().get(0).value());
        Assertions.assertEquals("zgepjyp", model.cases().get(0).activities().get(0).name());
        Assertions.assertEquals("fraohiyeyfsvuy", model.cases().get(0).activities().get(0).description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.cases().get(0).activities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED,
            model.cases().get(0).activities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("jnakqcsgo", model.cases().get(0).activities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals("ifpxiqpjnqyylkc",
            model.cases().get(0).activities().get(0).userProperties().get(0).name());
        Assertions.assertEquals("alwdlt", model.defaultActivities().get(0).name());
        Assertions.assertEquals("xron", model.defaultActivities().get(0).description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.defaultActivities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.defaultActivities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("akz", model.defaultActivities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED,
            model.defaultActivities().get(0).dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("sttmvai", model.defaultActivities().get(0).userProperties().get(0).name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
