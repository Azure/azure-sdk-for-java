// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.Activity;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.Expression;
import com.azure.resourcemanager.datafactory.models.SwitchActivity;
import com.azure.resourcemanager.datafactory.models.SwitchCase;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SwitchActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SwitchActivity model = BinaryData.fromString(
            "{\"type\":\"Switch\",\"typeProperties\":{\"on\":{\"value\":\"suuapktfvemwfwc\"},\"cases\":[{\"value\":\"qv\",\"activities\":[{\"type\":\"Activity\",\"name\":\"hbyklwc\",\"description\":\"xpkpsqk\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"bkhyqouzz\",\"dependencyConditions\":[]},{\"activity\":\"gnldz\",\"dependencyConditions\":[]}],\"userProperties\":[{\"name\":\"tlhnm\",\"value\":\"datads\"},{\"name\":\"gfdvwshcc\",\"value\":\"datayqn\"},{\"name\":\"sjnrfpzlvaeo\",\"value\":\"datanskekhmomv\"}],\"\":{\"aetyeafjlismaca\":\"datadsqfazsiizcwhaxj\",\"kgfpjbj\":\"datadyajyiwvqlrzob\",\"rzfh\":\"datavnkyqrjb\"}},{\"type\":\"Activity\",\"name\":\"hukuypyeo\",\"description\":\"aeabbxkldtw\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"ldgbgua\",\"dependencyConditions\":[]}],\"userProperties\":[{\"name\":\"cdbudfwlpgpxyrfk\",\"value\":\"datalgpladqc\"}],\"\":{\"emex\":\"datahgpzqibqilcntmu\",\"djwp\":\"datarjxaawentkok\",\"jqfwxicbvwnnvt\":\"dataea\",\"yowzptxpe\":\"databclgrkfwofwe\"}}]},{\"value\":\"bmuzpdjt\",\"activities\":[{\"type\":\"Activity\",\"name\":\"ycasxuhi\",\"description\":\"mmiipf\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"nfpxrzqagmcivs\",\"dependencyConditions\":[]},{\"activity\":\"awiabyfzadeu\",\"dependencyConditions\":[]},{\"activity\":\"tkfvdjgw\",\"dependencyConditions\":[]},{\"activity\":\"akqgabrbsuxgn\",\"dependencyConditions\":[]}],\"userProperties\":[{\"name\":\"kulozdoilhrxji\",\"value\":\"datajiv\"},{\"name\":\"orqlkycwnb\",\"value\":\"datalau\"}],\"\":{\"bvftqahjnsllfkcr\":\"datayriscio\",\"fxtendfp\":\"dataviimhdlmagdwi\",\"tklojlgsbystznwj\":\"dataoxtifosxxk\",\"ptvkjdowuzasd\":\"datasvllefliriq\"}},{\"type\":\"Activity\",\"name\":\"tufmujadippdntun\",\"description\":\"eeprmebvxmaacr\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"jcesm\",\"dependencyConditions\":[]},{\"activity\":\"cxugatvjxyvxd\",\"dependencyConditions\":[]},{\"activity\":\"uzdphogmrcmgu\",\"dependencyConditions\":[]}],\"userProperties\":[{\"name\":\"asdrrfozz\",\"value\":\"dataygolz\"},{\"name\":\"njkbmfcrysvcab\",\"value\":\"datak\"},{\"name\":\"jmzqnbwnlo\",\"value\":\"dataz\"}],\"\":{\"njorpcrg\":\"datapvdxutcoqclypb\"}}]}],\"defaultActivities\":[{\"type\":\"Activity\",\"name\":\"it\",\"description\":\"ebuvxxl\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"bzictf\",\"dependencyConditions\":[\"Completed\",\"Failed\",\"Succeeded\",\"Skipped\"],\"\":{\"wvmw\":\"dataesxzukl\"}}],\"userProperties\":[{\"name\":\"chcootyscar\",\"value\":\"datamhiewvcpyskh\"},{\"name\":\"vkw\",\"value\":\"datatbvyclg\"},{\"name\":\"zbyxtprxt\",\"value\":\"datawvng\"},{\"name\":\"csno\",\"value\":\"datakglygeuo\"}],\"\":{\"ggntqptrjtyhth\":\"datawjvdrjlgwzb\",\"vkhkubpojhdxcha\":\"datacpzdn\",\"w\":\"datag\",\"iulfxgzyr\":\"datavrnwxolfhiq\"}},{\"type\":\"Activity\",\"name\":\"qux\",\"description\":\"ekixouhcatozs\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"wjxatghuixczycif\",\"dependencyConditions\":[\"Succeeded\",\"Completed\",\"Succeeded\",\"Completed\"],\"\":{\"euukko\":\"datab\",\"wzgb\":\"datawtucmhpjmnxlfkm\",\"mrpbmxmxshfh\":\"databwmiap\"}},{\"activity\":\"p\",\"dependencyConditions\":[\"Skipped\",\"Succeeded\",\"Failed\"],\"\":{\"vxytmoqnytucuzy\":\"datap\",\"e\":\"dataigdebsinsoybe\",\"mqjcagxrozcfcxk\":\"datarpouhlhlud\",\"kgepmnxvahqvc\":\"datahjxbteakdr\"}}],\"userProperties\":[{\"name\":\"hlkx\",\"value\":\"dataanlyccdmkp\"}],\"\":{\"qzdedizdmwndnsg\":\"dataa\"}},{\"type\":\"Activity\",\"name\":\"fzp\",\"description\":\"wmdmwsflrdyrxl\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"m\",\"dependencyConditions\":[\"Skipped\"],\"\":{\"ldhwr\":\"dataynlhsdtcgflevn\"}},{\"activity\":\"cflhwfrjyuhuthqd\",\"dependencyConditions\":[\"Skipped\"],\"\":{\"uqve\":\"dataloyqjrkted\",\"zxcf\":\"datajsogesrmah\",\"vupnd\":\"datapyrelbzwxxsowdnu\"}}],\"userProperties\":[{\"name\":\"faeisboeap\",\"value\":\"dataraydlpu\"},{\"name\":\"kmakkwqrkaym\",\"value\":\"datagzbkliokuwhrpam\"},{\"name\":\"vx\",\"value\":\"datarl\"}],\"\":{\"dw\":\"databbacixlirolaoo\"}},{\"type\":\"Activity\",\"name\":\"jerm\",\"description\":\"kikgp\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"kcczb\",\"dependencyConditions\":[\"Succeeded\"],\"\":{\"iqvqbvfihna\":\"datakwjhkjvsvywnz\"}}],\"userProperties\":[{\"name\":\"ukegkludfdh\",\"value\":\"dataorihqzfjyqadtq\"},{\"name\":\"tsa\",\"value\":\"datajjfa\"},{\"name\":\"plywtgilhxaa\",\"value\":\"datanuufenp\"}],\"\":{\"exqyroqklgvyce\":\"dataktnfeghcmxi\",\"twhyznlhak\":\"dataywuioi\"}}]},\"name\":\"fskgxfmdpsreqor\",\"description\":\"ulzqjqbw\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"juakdsmwajalsen\",\"dependencyConditions\":[\"Failed\",\"Skipped\",\"Completed\",\"Failed\"],\"\":{\"unz\":\"datavbslrhcceyobjs\"}},{\"activity\":\"bbyvxk\",\"dependencyConditions\":[\"Succeeded\",\"Failed\"],\"\":{\"jvgftmpj\":\"datatdvxidmitmjcc\",\"scngdu\":\"datanrqgliqxahpy\",\"vhcwt\":\"dataw\",\"xigpmc\":\"dataqires\"}},{\"activity\":\"equocawcb\",\"dependencyConditions\":[\"Failed\",\"Succeeded\",\"Skipped\"],\"\":{\"aaav\":\"datapwhybtx\",\"dxdxrkrvmhhgvrxv\":\"dataiadygoad\"}},{\"activity\":\"uwbvrbwafw\",\"dependencyConditions\":[\"Completed\",\"Succeeded\",\"Skipped\"],\"\":{\"bvf\":\"datagwfgvpftbwmuxcpy\",\"ptkbe\":\"datamghhzm\",\"qvxzqwcmmolpfcv\":\"datapywvgfdsrng\"}}],\"userProperties\":[{\"name\":\"nnyksskuscdnn\",\"value\":\"dataoftapyrh\"},{\"name\":\"tjtqww\",\"value\":\"dataaxhsjw\"},{\"name\":\"c\",\"value\":\"datatwywhrzntmzzzavx\"}],\"\":{\"teaisywopko\":\"dataexspoiqvuky\",\"cbyldsmyq\":\"datalwmaigd\"}}")
            .toObject(SwitchActivity.class);
        Assertions.assertEquals("fskgxfmdpsreqor", model.name());
        Assertions.assertEquals("ulzqjqbw", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("juakdsmwajalsen", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("nnyksskuscdnn", model.userProperties().get(0).name());
        Assertions.assertEquals("suuapktfvemwfwc", model.on().value());
        Assertions.assertEquals("qv", model.cases().get(0).value());
        Assertions.assertEquals("hbyklwc", model.cases().get(0).activities().get(0).name());
        Assertions.assertEquals("xpkpsqk", model.cases().get(0).activities().get(0).description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.cases().get(0).activities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED,
            model.cases().get(0).activities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("bkhyqouzz", model.cases().get(0).activities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals("tlhnm", model.cases().get(0).activities().get(0).userProperties().get(0).name());
        Assertions.assertEquals("it", model.defaultActivities().get(0).name());
        Assertions.assertEquals("ebuvxxl", model.defaultActivities().get(0).description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.defaultActivities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.defaultActivities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("bzictf", model.defaultActivities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED,
            model.defaultActivities().get(0).dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("chcootyscar", model.defaultActivities().get(0).userProperties().get(0).name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SwitchActivity model = new SwitchActivity().withName("fskgxfmdpsreqor").withDescription("ulzqjqbw")
            .withState(ActivityState.INACTIVE).withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
            .withDependsOn(Arrays.asList(
                new ActivityDependency()
                    .withActivity("juakdsmwajalsen")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED, DependencyCondition.SKIPPED,
                        DependencyCondition.COMPLETED, DependencyCondition.FAILED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("bbyvxk")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED, DependencyCondition.FAILED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("equocawcb")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED, DependencyCondition.SUCCEEDED,
                        DependencyCondition.SKIPPED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("uwbvrbwafw")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED,
                        DependencyCondition.SUCCEEDED, DependencyCondition.SKIPPED))
                    .withAdditionalProperties(mapOf())))
            .withUserProperties(
                Arrays
                    .asList(new UserProperty().withName("nnyksskuscdnn").withValue("dataoftapyrh"),
                        new UserProperty().withName("tjtqww").withValue("dataaxhsjw"), new UserProperty().withName(
                            "c").withValue(
                                "datatwywhrzntmzzzavx")))
            .withOn(new Expression().withValue("suuapktfvemwfwc"))
            .withCases(
                Arrays.asList(
                    new SwitchCase().withValue("qv")
                        .withActivities(Arrays.asList(
                            new Activity().withName("hbyklwc").withDescription("xpkpsqk")
                                .withState(ActivityState.INACTIVE).withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
                                .withDependsOn(Arrays.asList(
                                    new ActivityDependency().withActivity("bkhyqouzz")
                                        .withDependencyConditions(Arrays.asList()).withAdditionalProperties(mapOf()),
                                    new ActivityDependency().withActivity("gnldz")
                                        .withDependencyConditions(Arrays.asList()).withAdditionalProperties(mapOf())))
                                .withUserProperties(
                                    Arrays.asList(new UserProperty().withName("tlhnm").withValue("datads"),
                                        new UserProperty().withName("gfdvwshcc").withValue("datayqn"),
                                        new UserProperty().withName("sjnrfpzlvaeo").withValue("datanskekhmomv")))
                                .withAdditionalProperties(mapOf("type", "Activity")),
                            new Activity().withName("hukuypyeo").withDescription("aeabbxkldtw")
                                .withState(ActivityState.INACTIVE)
                                .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SUCCEEDED)
                                .withDependsOn(Arrays.asList(new ActivityDependency().withActivity("ldgbgua")
                                    .withDependencyConditions(Arrays.asList()).withAdditionalProperties(mapOf())))
                                .withUserProperties(Arrays
                                    .asList(new UserProperty().withName("cdbudfwlpgpxyrfk").withValue("datalgpladqc")))
                                .withAdditionalProperties(mapOf("type", "Activity")))),
                    new SwitchCase().withValue("bmuzpdjt").withActivities(Arrays.asList(
                        new Activity().withName("ycasxuhi").withDescription("mmiipf").withState(ActivityState.INACTIVE)
                            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
                            .withDependsOn(Arrays.asList(
                                new ActivityDependency().withActivity("nfpxrzqagmcivs")
                                    .withDependencyConditions(Arrays.asList()).withAdditionalProperties(mapOf()),
                                new ActivityDependency().withActivity("awiabyfzadeu")
                                    .withDependencyConditions(Arrays.asList()).withAdditionalProperties(mapOf()),
                                new ActivityDependency().withActivity("tkfvdjgw")
                                    .withDependencyConditions(Arrays.asList()).withAdditionalProperties(mapOf()),
                                new ActivityDependency().withActivity("akqgabrbsuxgn")
                                    .withDependencyConditions(Arrays.asList()).withAdditionalProperties(mapOf())))
                            .withUserProperties(
                                Arrays.asList(new UserProperty().withName("kulozdoilhrxji").withValue("datajiv"),
                                    new UserProperty().withName("orqlkycwnb").withValue("datalau")))
                            .withAdditionalProperties(mapOf("type", "Activity")),
                        new Activity().withName("tufmujadippdntun").withDescription("eeprmebvxmaacr")
                            .withState(ActivityState.ACTIVE).withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
                            .withDependsOn(Arrays.asList(
                                new ActivityDependency().withActivity("jcesm").withDependencyConditions(Arrays.asList())
                                    .withAdditionalProperties(mapOf()),
                                new ActivityDependency().withActivity("cxugatvjxyvxd")
                                    .withDependencyConditions(Arrays.asList()).withAdditionalProperties(mapOf()),
                                new ActivityDependency().withActivity("uzdphogmrcmgu")
                                    .withDependencyConditions(Arrays.asList()).withAdditionalProperties(mapOf())))
                            .withUserProperties(
                                Arrays.asList(new UserProperty().withName("asdrrfozz").withValue("dataygolz"),
                                    new UserProperty().withName("njkbmfcrysvcab").withValue("datak"),
                                    new UserProperty().withName("jmzqnbwnlo").withValue("dataz")))
                            .withAdditionalProperties(mapOf("type", "Activity"))))))
            .withDefaultActivities(Arrays.asList(
                new Activity().withName("it").withDescription("ebuvxxl").withState(ActivityState.INACTIVE)
                    .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
                    .withDependsOn(Arrays.asList(new ActivityDependency().withActivity("bzictf")
                        .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED,
                            DependencyCondition.FAILED, DependencyCondition.SUCCEEDED, DependencyCondition.SKIPPED))
                        .withAdditionalProperties(mapOf())))
                    .withUserProperties(
                        Arrays.asList(new UserProperty().withName("chcootyscar").withValue("datamhiewvcpyskh"),
                            new UserProperty().withName("vkw").withValue("datatbvyclg"),
                            new UserProperty().withName("zbyxtprxt").withValue("datawvng"), new UserProperty()
                                .withName("csno").withValue("datakglygeuo")))
                    .withAdditionalProperties(mapOf("type", "Activity")),
                new Activity().withName("qux").withDescription("ekixouhcatozs").withState(ActivityState.INACTIVE)
                    .withOnInactiveMarkAs(
                        ActivityOnInactiveMarkAs.SKIPPED)
                    .withDependsOn(Arrays.asList(
                        new ActivityDependency().withActivity("wjxatghuixczycif")
                            .withDependencyConditions(
                                Arrays.asList(DependencyCondition.SUCCEEDED, DependencyCondition.COMPLETED,
                                    DependencyCondition.SUCCEEDED, DependencyCondition.COMPLETED))
                            .withAdditionalProperties(mapOf()),
                        new ActivityDependency().withActivity("p")
                            .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED,
                                DependencyCondition.SUCCEEDED, DependencyCondition.FAILED))
                            .withAdditionalProperties(mapOf())))
                    .withUserProperties(Arrays.asList(new UserProperty().withName("hlkx").withValue("dataanlyccdmkp")))
                    .withAdditionalProperties(mapOf("type", "Activity")),
                new Activity().withName("fzp").withDescription("wmdmwsflrdyrxl").withState(ActivityState.INACTIVE)
                    .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
                    .withDependsOn(Arrays.asList(
                        new ActivityDependency().withActivity("m")
                            .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED))
                            .withAdditionalProperties(mapOf()),
                        new ActivityDependency().withActivity("cflhwfrjyuhuthqd")
                            .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED))
                            .withAdditionalProperties(mapOf())))
                    .withUserProperties(
                        Arrays.asList(new UserProperty().withName("faeisboeap").withValue("dataraydlpu"),
                            new UserProperty().withName("kmakkwqrkaym").withValue("datagzbkliokuwhrpam"),
                            new UserProperty().withName("vx").withValue("datarl")))
                    .withAdditionalProperties(mapOf("type", "Activity")),
                new Activity().withName("jerm").withDescription("kikgp").withState(ActivityState.ACTIVE)
                    .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
                    .withDependsOn(Arrays.asList(new ActivityDependency().withActivity("kcczb")
                        .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED))
                        .withAdditionalProperties(mapOf())))
                    .withUserProperties(
                        Arrays.asList(new UserProperty().withName("ukegkludfdh").withValue("dataorihqzfjyqadtq"),
                            new UserProperty().withName("tsa").withValue("datajjfa"),
                            new UserProperty().withName("plywtgilhxaa").withValue("datanuufenp")))
                    .withAdditionalProperties(mapOf("type", "Activity"))));
        model = BinaryData.fromObject(model).toObject(SwitchActivity.class);
        Assertions.assertEquals("fskgxfmdpsreqor", model.name());
        Assertions.assertEquals("ulzqjqbw", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("juakdsmwajalsen", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("nnyksskuscdnn", model.userProperties().get(0).name());
        Assertions.assertEquals("suuapktfvemwfwc", model.on().value());
        Assertions.assertEquals("qv", model.cases().get(0).value());
        Assertions.assertEquals("hbyklwc", model.cases().get(0).activities().get(0).name());
        Assertions.assertEquals("xpkpsqk", model.cases().get(0).activities().get(0).description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.cases().get(0).activities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED,
            model.cases().get(0).activities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("bkhyqouzz", model.cases().get(0).activities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals("tlhnm", model.cases().get(0).activities().get(0).userProperties().get(0).name());
        Assertions.assertEquals("it", model.defaultActivities().get(0).name());
        Assertions.assertEquals("ebuvxxl", model.defaultActivities().get(0).description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.defaultActivities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.defaultActivities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("bzictf", model.defaultActivities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED,
            model.defaultActivities().get(0).dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("chcootyscar", model.defaultActivities().get(0).userProperties().get(0).name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
