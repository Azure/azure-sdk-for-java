// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.AzureBlobFSDataset;
import com.azure.resourcemanager.datafactory.models.DatasetCompression;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.DatasetStorageFormat;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureBlobFSDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureBlobFSDataset model = BinaryData.fromString(
            "{\"type\":\"AzureBlobFSFile\",\"typeProperties\":{\"folderPath\":\"datauk\",\"fileName\":\"datagoojjfuk\",\"format\":{\"type\":\"DatasetStorageFormat\",\"serializer\":\"datacm\",\"deserializer\":\"datah\",\"\":{\"xvs\":\"datazv\",\"cnihkswxmfurqmw\":\"datacuufkrfn\"}},\"compression\":{\"type\":\"datawpntumotah\",\"level\":\"datasvnkxmyt\",\"\":{\"hxg\":\"dataedr\"}}},\"description\":\"myrhkvx\",\"structure\":\"datamiemqyftgpqos\",\"schema\":\"datafqvjmghpakbqyhls\",\"linkedServiceName\":{\"referenceName\":\"rnfbmeqagkn\",\"parameters\":{\"evztnjawrhul\":\"dataybn\",\"rxbkitzmnhitax\":\"datammqmbwppx\",\"vyljubvfjyzufldi\":\"dataucltjlxsgcemegdz\"}},\"parameters\":{\"zxhkl\":{\"type\":\"Int\",\"defaultValue\":\"datautggmaacxauhvc\"}},\"annotations\":[\"datatoiyygktsrjyx\"],\"folder\":{\"name\":\"wfzbkve\"},\"\":{\"vuwmsumustihtgr\":\"datafxphsowbebsnbwut\"}}")
            .toObject(AzureBlobFSDataset.class);
        Assertions.assertEquals("myrhkvx", model.description());
        Assertions.assertEquals("rnfbmeqagkn", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("zxhkl").type());
        Assertions.assertEquals("wfzbkve", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureBlobFSDataset model = new AzureBlobFSDataset().withDescription("myrhkvx")
            .withStructure("datamiemqyftgpqos")
            .withSchema("datafqvjmghpakbqyhls")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("rnfbmeqagkn")
                .withParameters(mapOf("evztnjawrhul", "dataybn", "rxbkitzmnhitax", "datammqmbwppx", "vyljubvfjyzufldi",
                    "dataucltjlxsgcemegdz")))
            .withParameters(mapOf("zxhkl",
                new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("datautggmaacxauhvc")))
            .withAnnotations(Arrays.asList("datatoiyygktsrjyx"))
            .withFolder(new DatasetFolder().withName("wfzbkve"))
            .withFolderPath("datauk")
            .withFileName("datagoojjfuk")
            .withFormat(new DatasetStorageFormat().withSerializer("datacm")
                .withDeserializer("datah")
                .withAdditionalProperties(mapOf("type", "DatasetStorageFormat")))
            .withCompression(new DatasetCompression().withType("datawpntumotah")
                .withLevel("datasvnkxmyt")
                .withAdditionalProperties(mapOf()));
        model = BinaryData.fromObject(model).toObject(AzureBlobFSDataset.class);
        Assertions.assertEquals("myrhkvx", model.description());
        Assertions.assertEquals("rnfbmeqagkn", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("zxhkl").type());
        Assertions.assertEquals("wfzbkve", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
