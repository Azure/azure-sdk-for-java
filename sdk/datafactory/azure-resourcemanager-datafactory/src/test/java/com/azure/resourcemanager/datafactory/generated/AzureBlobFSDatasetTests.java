// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.AzureBlobFSDataset;
import com.azure.resourcemanager.datafactory.models.DatasetCompression;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.DatasetStorageFormat;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureBlobFSDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureBlobFSDataset model =
            BinaryData
                .fromString(
                    "{\"type\":\"AzureBlobFSFile\",\"typeProperties\":{\"folderPath\":\"datagc\",\"fileName\":\"datayrhkvxzzmiem\",\"format\":{\"type\":\"DatasetStorageFormat\",\"serializer\":\"datatgp\",\"deserializer\":\"datasw\",\"\":{\"ornfbm\":\"datavjmghpakbqyhl\"}},\"compression\":{\"type\":\"dataagkncjmybnyevz\",\"level\":\"datajawrhulemm\",\"\":{\"kitzm\":\"datawppxirx\",\"cltjl\":\"datahitaxj\"}}},\"description\":\"gcem\",\"structure\":\"datadzdvyljubv\",\"schema\":\"datayzufldifnivlutgg\",\"linkedServiceName\":{\"referenceName\":\"aacxauhvc\",\"parameters\":{\"oiyygkts\":\"datahklsqx\",\"xxoxwfzbkv\":\"dataj\"}},\"parameters\":{\"snbwutlvuwm\":{\"type\":\"Bool\",\"defaultValue\":\"dataxphsowbe\"}},\"annotations\":[\"dataustihtgrafjajvky\",\"datammjczvog\"],\"folder\":{\"name\":\"rjenn\"},\"\":{\"xnrp\":\"dataaeuwqdwxhhlbmyph\",\"ywbihqbtodjfyx\":\"datahewokyqsfkxf\",\"rugyozzzawnjdv\":\"datavkvwzdmvddqw\"}}")
                .toObject(AzureBlobFSDataset.class);
        Assertions.assertEquals("gcem", model.description());
        Assertions.assertEquals("aacxauhvc", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("snbwutlvuwm").type());
        Assertions.assertEquals("rjenn", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureBlobFSDataset model =
            new AzureBlobFSDataset()
                .withDescription("gcem")
                .withStructure("datadzdvyljubv")
                .withSchema("datayzufldifnivlutgg")
                .withLinkedServiceName(
                    new LinkedServiceReference()
                        .withReferenceName("aacxauhvc")
                        .withParameters(mapOf("oiyygkts", "datahklsqx", "xxoxwfzbkv", "dataj")))
                .withParameters(
                    mapOf(
                        "snbwutlvuwm",
                        new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("dataxphsowbe")))
                .withAnnotations(Arrays.asList("dataustihtgrafjajvky", "datammjczvog"))
                .withFolder(new DatasetFolder().withName("rjenn"))
                .withFolderPath("datagc")
                .withFileName("datayrhkvxzzmiem")
                .withFormat(
                    new DatasetStorageFormat()
                        .withSerializer("datatgp")
                        .withDeserializer("datasw")
                        .withAdditionalProperties(mapOf("type", "DatasetStorageFormat")))
                .withCompression(
                    new DatasetCompression()
                        .withType("dataagkncjmybnyevz")
                        .withLevel("datajawrhulemm")
                        .withAdditionalProperties(mapOf()));
        model = BinaryData.fromObject(model).toObject(AzureBlobFSDataset.class);
        Assertions.assertEquals("gcem", model.description());
        Assertions.assertEquals("aacxauhvc", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("snbwutlvuwm").type());
        Assertions.assertEquals("rjenn", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
