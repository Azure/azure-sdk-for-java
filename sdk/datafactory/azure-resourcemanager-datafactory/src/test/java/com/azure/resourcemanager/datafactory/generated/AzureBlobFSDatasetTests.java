// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.AzureBlobFSDataset;
import com.azure.resourcemanager.datafactory.models.DatasetCompression;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.DatasetStorageFormat;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureBlobFSDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureBlobFSDataset model = BinaryData.fromString(
            "{\"type\":\"bjsdj\",\"typeProperties\":{\"folderPath\":\"datakfnyskwwunqhc\",\"fileName\":\"datavoj\",\"format\":{\"type\":\"hipcukvbljpx\",\"serializer\":\"datarvchyluqalp\",\"deserializer\":\"datafjjfxtizt\",\"\":{\"xxsri\":\"datatahhhsa\",\"yyefmxwoqotiiqb\":\"datarcwbaae\",\"sty\":\"datapasrvrmt\",\"k\":\"datakjhorlxkpy\"}},\"compression\":{\"type\":\"datanycntr\",\"level\":\"dataxwtdmbqjtsuhqh\",\"\":{\"x\":\"datatdyqav\",\"npaami\":\"dataqmzxsyaks\",\"hvwt\":\"datawb\",\"kiy\":\"datapbgchcgsfzhb\"}}},\"description\":\"xeysgwkcffe\",\"structure\":\"datanzcbivove\",\"schema\":\"datakhfeqcooplfpo\",\"linkedServiceName\":{\"referenceName\":\"imgckycjpeebznbz\",\"parameters\":{\"tn\":\"dataulo\",\"hgpncdmwkhupfhs\":\"databmxooq\"}},\"parameters\":{\"iunyevdyzdsytc\":{\"type\":\"Float\",\"defaultValue\":\"dataa\"}},\"annotations\":[\"datawhcamwuynfxkc\",\"datasfcmvhadrpb\",\"datatvyrkljqkq\"],\"folder\":{\"name\":\"jtvjkowggxawwd\"},\"\":{\"lprgeganihkjcner\":\"datapnkteiidlbovwb\"}}")
            .toObject(AzureBlobFSDataset.class);
        Assertions.assertEquals("xeysgwkcffe", model.description());
        Assertions.assertEquals("imgckycjpeebznbz", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.FLOAT, model.parameters().get("iunyevdyzdsytc").type());
        Assertions.assertEquals("jtvjkowggxawwd", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureBlobFSDataset model = new AzureBlobFSDataset().withDescription("xeysgwkcffe")
            .withStructure("datanzcbivove")
            .withSchema("datakhfeqcooplfpo")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("imgckycjpeebznbz")
                .withParameters(mapOf("tn", "dataulo", "hgpncdmwkhupfhs", "databmxooq")))
            .withParameters(mapOf("iunyevdyzdsytc",
                new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("dataa")))
            .withAnnotations(Arrays.asList("datawhcamwuynfxkc", "datasfcmvhadrpb", "datatvyrkljqkq"))
            .withFolder(new DatasetFolder().withName("jtvjkowggxawwd"))
            .withFolderPath("datakfnyskwwunqhc")
            .withFileName("datavoj")
            .withFormat(new DatasetStorageFormat().withSerializer("datarvchyluqalp")
                .withDeserializer("datafjjfxtizt")
                .withAdditionalProperties(mapOf("type", "hipcukvbljpx")))
            .withCompression(new DatasetCompression().withType("datanycntr")
                .withLevel("dataxwtdmbqjtsuhqh")
                .withAdditionalProperties(mapOf()));
        model = BinaryData.fromObject(model).toObject(AzureBlobFSDataset.class);
        Assertions.assertEquals("xeysgwkcffe", model.description());
        Assertions.assertEquals("imgckycjpeebznbz", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.FLOAT, model.parameters().get("iunyevdyzdsytc").type());
        Assertions.assertEquals("jtvjkowggxawwd", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
