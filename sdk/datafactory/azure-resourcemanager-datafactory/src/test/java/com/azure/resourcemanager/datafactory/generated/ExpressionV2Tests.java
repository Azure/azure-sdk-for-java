// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ExpressionV2;
import com.azure.resourcemanager.datafactory.models.ExpressionV2Type;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ExpressionV2Tests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ExpressionV2 model = BinaryData.fromString(
            "{\"type\":\"Binary\",\"value\":\"cvkmedrkolpneb\",\"operators\":[\"fvkskjd\",\"djxvcxepjfxcmrhi\"],\"operands\":[{\"type\":\"Binary\",\"value\":\"etflirbvqkbxg\",\"operators\":[\"inyursqf\",\"rz\",\"yxmfipvg\"],\"operands\":[{\"type\":\"Field\",\"value\":\"f\",\"operators\":[\"xa\",\"xvftllsu\"],\"operands\":[{},{},{}]}]}]}")
            .toObject(ExpressionV2.class);
        Assertions.assertEquals(ExpressionV2Type.BINARY, model.type());
        Assertions.assertEquals("cvkmedrkolpneb", model.value());
        Assertions.assertEquals("fvkskjd", model.operators().get(0));
        Assertions.assertEquals(ExpressionV2Type.BINARY, model.operands().get(0).type());
        Assertions.assertEquals("etflirbvqkbxg", model.operands().get(0).value());
        Assertions.assertEquals("inyursqf", model.operands().get(0).operators().get(0));
        Assertions.assertEquals(ExpressionV2Type.FIELD, model.operands().get(0).operands().get(0).type());
        Assertions.assertEquals("f", model.operands().get(0).operands().get(0).value());
        Assertions.assertEquals("xa", model.operands().get(0).operands().get(0).operators().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ExpressionV2 model = new ExpressionV2().withType(ExpressionV2Type.BINARY)
            .withValue("cvkmedrkolpneb")
            .withOperators(Arrays.asList("fvkskjd", "djxvcxepjfxcmrhi"))
            .withOperands(Arrays.asList(new ExpressionV2().withType(ExpressionV2Type.BINARY)
                .withValue("etflirbvqkbxg")
                .withOperators(Arrays.asList("inyursqf", "rz", "yxmfipvg"))
                .withOperands(Arrays.asList(new ExpressionV2().withType(ExpressionV2Type.FIELD)
                    .withValue("f")
                    .withOperators(Arrays.asList("xa", "xvftllsu"))
                    .withOperands(Arrays.asList(new ExpressionV2(), new ExpressionV2(), new ExpressionV2()))))));
        model = BinaryData.fromObject(model).toObject(ExpressionV2.class);
        Assertions.assertEquals(ExpressionV2Type.BINARY, model.type());
        Assertions.assertEquals("cvkmedrkolpneb", model.value());
        Assertions.assertEquals("fvkskjd", model.operators().get(0));
        Assertions.assertEquals(ExpressionV2Type.BINARY, model.operands().get(0).type());
        Assertions.assertEquals("etflirbvqkbxg", model.operands().get(0).value());
        Assertions.assertEquals("inyursqf", model.operands().get(0).operators().get(0));
        Assertions.assertEquals(ExpressionV2Type.FIELD, model.operands().get(0).operands().get(0).type());
        Assertions.assertEquals("f", model.operands().get(0).operands().get(0).value());
        Assertions.assertEquals("xa", model.operands().get(0).operands().get(0).operators().get(0));
    }
}
