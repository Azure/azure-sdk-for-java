// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ExpressionV2;
import com.azure.resourcemanager.datafactory.models.ExpressionV2Type;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ExpressionV2Tests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ExpressionV2 model = BinaryData.fromString(
            "{\"type\":\"NAry\",\"value\":\"rbuvwug\",\"operators\":[\"clxhv\",\"soodxmm\",\"yumejpqxu\",\"odwblaujhox\"],\"operands\":[{\"type\":\"Field\",\"value\":\"ywyamtzlcvokvoq\",\"operators\":[\"dyoc\"],\"operands\":[{\"type\":\"Binary\",\"value\":\"ieteznnlsqymv\",\"operators\":[\"g\",\"ekzulkk\"],\"operands\":[{}]},{\"type\":\"Field\",\"value\":\"dadcdrysanifcf\",\"operators\":[\"jzsumgzebqb\",\"ewepoantsr\",\"pdeewjgjdqla\",\"unedsozjfigi\"],\"operands\":[{},{}]},{\"type\":\"NAry\",\"value\":\"vwhutjj\",\"operators\":[\"ixsvoob\",\"srisfccf\"],\"operands\":[{},{},{},{}]}]},{\"type\":\"Constant\",\"value\":\"ifrkyvutwmcmcri\",\"operators\":[\"vspydtladfcqkzci\"],\"operands\":[{\"type\":\"Binary\",\"value\":\"jwme\",\"operators\":[\"jwrvbuphbwais\",\"bacgrysjgzuzo\",\"updcmpfwfdcpedu\",\"ydd\"],\"operands\":[{},{},{},{}]}]}]}")
            .toObject(ExpressionV2.class);
        Assertions.assertEquals(ExpressionV2Type.NARY, model.type());
        Assertions.assertEquals("rbuvwug", model.value());
        Assertions.assertEquals("clxhv", model.operators().get(0));
        Assertions.assertEquals(ExpressionV2Type.FIELD, model.operands().get(0).type());
        Assertions.assertEquals("ywyamtzlcvokvoq", model.operands().get(0).value());
        Assertions.assertEquals("dyoc", model.operands().get(0).operators().get(0));
        Assertions.assertEquals(ExpressionV2Type.BINARY, model.operands().get(0).operands().get(0).type());
        Assertions.assertEquals("ieteznnlsqymv", model.operands().get(0).operands().get(0).value());
        Assertions.assertEquals("g", model.operands().get(0).operands().get(0).operators().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ExpressionV2 model = new ExpressionV2().withType(ExpressionV2Type.NARY)
            .withValue("rbuvwug")
            .withOperators(Arrays.asList("clxhv", "soodxmm", "yumejpqxu", "odwblaujhox"))
            .withOperands(Arrays.asList(
                new ExpressionV2().withType(ExpressionV2Type.FIELD)
                    .withValue("ywyamtzlcvokvoq")
                    .withOperators(Arrays.asList("dyoc"))
                    .withOperands(Arrays.asList(
                        new ExpressionV2().withType(ExpressionV2Type.BINARY)
                            .withValue("ieteznnlsqymv")
                            .withOperators(Arrays.asList("g", "ekzulkk"))
                            .withOperands(Arrays.asList(new ExpressionV2())),
                        new ExpressionV2().withType(ExpressionV2Type.FIELD)
                            .withValue("dadcdrysanifcf")
                            .withOperators(Arrays.asList("jzsumgzebqb", "ewepoantsr", "pdeewjgjdqla", "unedsozjfigi"))
                            .withOperands(Arrays.asList(new ExpressionV2(), new ExpressionV2())),
                        new ExpressionV2().withType(ExpressionV2Type.NARY)
                            .withValue("vwhutjj")
                            .withOperators(Arrays.asList("ixsvoob", "srisfccf"))
                            .withOperands(Arrays.asList(new ExpressionV2(), new ExpressionV2(), new ExpressionV2(),
                                new ExpressionV2())))),
                new ExpressionV2().withType(ExpressionV2Type.CONSTANT)
                    .withValue("ifrkyvutwmcmcri")
                    .withOperators(Arrays.asList("vspydtladfcqkzci"))
                    .withOperands(Arrays.asList(new ExpressionV2().withType(ExpressionV2Type.BINARY)
                        .withValue("jwme")
                        .withOperators(Arrays.asList("jwrvbuphbwais", "bacgrysjgzuzo", "updcmpfwfdcpedu", "ydd"))
                        .withOperands(Arrays.asList(new ExpressionV2(), new ExpressionV2(), new ExpressionV2(),
                            new ExpressionV2()))))));
        model = BinaryData.fromObject(model).toObject(ExpressionV2.class);
        Assertions.assertEquals(ExpressionV2Type.NARY, model.type());
        Assertions.assertEquals("rbuvwug", model.value());
        Assertions.assertEquals("clxhv", model.operators().get(0));
        Assertions.assertEquals(ExpressionV2Type.FIELD, model.operands().get(0).type());
        Assertions.assertEquals("ywyamtzlcvokvoq", model.operands().get(0).value());
        Assertions.assertEquals("dyoc", model.operands().get(0).operators().get(0));
        Assertions.assertEquals(ExpressionV2Type.BINARY, model.operands().get(0).operands().get(0).type());
        Assertions.assertEquals("ieteznnlsqymv", model.operands().get(0).operands().get(0).value());
        Assertions.assertEquals("g", model.operands().get(0).operands().get(0).operators().get(0));
    }
}
