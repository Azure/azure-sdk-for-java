// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ExpressionV2;
import com.azure.resourcemanager.datafactory.models.ExpressionV2Type;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ExpressionV2Tests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ExpressionV2 model = BinaryData.fromString(
            "{\"type\":\"Field\",\"value\":\"vyosmxov\",\"operators\":[\"bahxcwjqtfsxcak\",\"ezdvne\"],\"operands\":[{\"type\":\"Unary\",\"value\":\"ejwqeypaoa\",\"operators\":[\"whiyus\",\"hmjlkknwsja\",\"mrnrhsv\",\"jnlerm\"],\"operands\":[{\"type\":\"Field\",\"value\":\"cqynvfekjvclbkk\",\"operators\":[\"rbd\",\"s\",\"ftqah\",\"vpmwnmuzcjnkaw\"],\"operands\":[{},{},{}]}]}]}")
            .toObject(ExpressionV2.class);
        Assertions.assertEquals(ExpressionV2Type.FIELD, model.type());
        Assertions.assertEquals("vyosmxov", model.value());
        Assertions.assertEquals("bahxcwjqtfsxcak", model.operators().get(0));
        Assertions.assertEquals(ExpressionV2Type.UNARY, model.operands().get(0).type());
        Assertions.assertEquals("ejwqeypaoa", model.operands().get(0).value());
        Assertions.assertEquals("whiyus", model.operands().get(0).operators().get(0));
        Assertions.assertEquals(ExpressionV2Type.FIELD, model.operands().get(0).operands().get(0).type());
        Assertions.assertEquals("cqynvfekjvclbkk", model.operands().get(0).operands().get(0).value());
        Assertions.assertEquals("rbd", model.operands().get(0).operands().get(0).operators().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ExpressionV2 model = new ExpressionV2().withType(ExpressionV2Type.FIELD)
            .withValue("vyosmxov")
            .withOperators(Arrays.asList("bahxcwjqtfsxcak", "ezdvne"))
            .withOperands(Arrays.asList(new ExpressionV2().withType(ExpressionV2Type.UNARY)
                .withValue("ejwqeypaoa")
                .withOperators(Arrays.asList("whiyus", "hmjlkknwsja", "mrnrhsv", "jnlerm"))
                .withOperands(Arrays.asList(new ExpressionV2().withType(ExpressionV2Type.FIELD)
                    .withValue("cqynvfekjvclbkk")
                    .withOperators(Arrays.asList("rbd", "s", "ftqah", "vpmwnmuzcjnkaw"))
                    .withOperands(Arrays.asList(new ExpressionV2(), new ExpressionV2(), new ExpressionV2()))))));
        model = BinaryData.fromObject(model).toObject(ExpressionV2.class);
        Assertions.assertEquals(ExpressionV2Type.FIELD, model.type());
        Assertions.assertEquals("vyosmxov", model.value());
        Assertions.assertEquals("bahxcwjqtfsxcak", model.operators().get(0));
        Assertions.assertEquals(ExpressionV2Type.UNARY, model.operands().get(0).type());
        Assertions.assertEquals("ejwqeypaoa", model.operands().get(0).value());
        Assertions.assertEquals("whiyus", model.operands().get(0).operators().get(0));
        Assertions.assertEquals(ExpressionV2Type.FIELD, model.operands().get(0).operands().get(0).type());
        Assertions.assertEquals("cqynvfekjvclbkk", model.operands().get(0).operands().get(0).value());
        Assertions.assertEquals("rbd", model.operands().get(0).operands().get(0).operators().get(0));
    }
}
