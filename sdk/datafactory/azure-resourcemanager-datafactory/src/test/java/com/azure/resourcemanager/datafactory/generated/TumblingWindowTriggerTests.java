// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DependencyReference;
import com.azure.resourcemanager.datafactory.models.PipelineReference;
import com.azure.resourcemanager.datafactory.models.RetryPolicy;
import com.azure.resourcemanager.datafactory.models.TriggerPipelineReference;
import com.azure.resourcemanager.datafactory.models.TumblingWindowFrequency;
import com.azure.resourcemanager.datafactory.models.TumblingWindowTrigger;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class TumblingWindowTriggerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TumblingWindowTrigger model = BinaryData.fromString(
            "{\"type\":\"jsghuokjwvsacwdu\",\"pipeline\":{\"pipelineReference\":{\"referenceName\":\"pcoiaaagvaec\",\"name\":\"dqgoo\"},\"parameters\":{\"fh\":\"datafrgmpu\",\"wcxzxvgfxzck\":\"datakrfe\",\"jal\":\"datawqujpugj\"}},\"typeProperties\":{\"frequency\":\"Minute\",\"interval\":1684959165,\"startTime\":\"2021-12-01T05:51:53Z\",\"endTime\":\"2021-11-29T21:19:29Z\",\"delay\":\"datadsvycj\",\"maxConcurrency\":1878853669,\"retryPolicy\":{\"count\":\"datapuphgogmggkkjc\",\"intervalInSeconds\":31605107},\"dependsOn\":[{\"type\":\"nnmjpgzw\"},{\"type\":\"upzs\"},{\"type\":\"sidkziparp\"}]},\"description\":\"zuykly\",\"runtimeState\":\"Disabled\",\"annotations\":[\"datalevardbrdrt\",\"dataakezorhjhyzqhb\"],\"\":{\"dgd\":\"datadztvumvxkrxgai\",\"ojc\":\"datakhiqwuwxrcydmky\",\"nxeyfkrcmxtbwolz\":\"datasbygm\",\"buwqmicukwmz\":\"datakjaqlszlymyqpw\"}}")
            .toObject(TumblingWindowTrigger.class);
        Assertions.assertEquals("zuykly", model.description());
        Assertions.assertEquals("pcoiaaagvaec", model.pipeline().pipelineReference().referenceName());
        Assertions.assertEquals("dqgoo", model.pipeline().pipelineReference().name());
        Assertions.assertEquals(TumblingWindowFrequency.MINUTE, model.frequency());
        Assertions.assertEquals(1684959165, model.interval());
        Assertions.assertEquals(OffsetDateTime.parse("2021-12-01T05:51:53Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-29T21:19:29Z"), model.endTime());
        Assertions.assertEquals(1878853669, model.maxConcurrency());
        Assertions.assertEquals(31605107, model.retryPolicy().intervalInSeconds());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TumblingWindowTrigger model = new TumblingWindowTrigger().withDescription("zuykly")
            .withAnnotations(Arrays.asList("datalevardbrdrt", "dataakezorhjhyzqhb"))
            .withPipeline(new TriggerPipelineReference()
                .withPipelineReference(new PipelineReference().withReferenceName("pcoiaaagvaec").withName("dqgoo"))
                .withParameters(mapOf("fh", "datafrgmpu", "wcxzxvgfxzck", "datakrfe", "jal", "datawqujpugj")))
            .withFrequency(TumblingWindowFrequency.MINUTE)
            .withInterval(1684959165)
            .withStartTime(OffsetDateTime.parse("2021-12-01T05:51:53Z"))
            .withEndTime(OffsetDateTime.parse("2021-11-29T21:19:29Z"))
            .withDelay("datadsvycj")
            .withMaxConcurrency(1878853669)
            .withRetryPolicy(new RetryPolicy().withCount("datapuphgogmggkkjc").withIntervalInSeconds(31605107))
            .withDependsOn(
                Arrays.asList(new DependencyReference(), new DependencyReference(), new DependencyReference()));
        model = BinaryData.fromObject(model).toObject(TumblingWindowTrigger.class);
        Assertions.assertEquals("zuykly", model.description());
        Assertions.assertEquals("pcoiaaagvaec", model.pipeline().pipelineReference().referenceName());
        Assertions.assertEquals("dqgoo", model.pipeline().pipelineReference().name());
        Assertions.assertEquals(TumblingWindowFrequency.MINUTE, model.frequency());
        Assertions.assertEquals(1684959165, model.interval());
        Assertions.assertEquals(OffsetDateTime.parse("2021-12-01T05:51:53Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-29T21:19:29Z"), model.endTime());
        Assertions.assertEquals(1878853669, model.maxConcurrency());
        Assertions.assertEquals(31605107, model.retryPolicy().intervalInSeconds());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
