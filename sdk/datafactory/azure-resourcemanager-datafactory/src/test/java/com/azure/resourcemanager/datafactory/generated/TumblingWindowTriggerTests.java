// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DependencyReference;
import com.azure.resourcemanager.datafactory.models.PipelineReference;
import com.azure.resourcemanager.datafactory.models.RetryPolicy;
import com.azure.resourcemanager.datafactory.models.TriggerPipelineReference;
import com.azure.resourcemanager.datafactory.models.TumblingWindowFrequency;
import com.azure.resourcemanager.datafactory.models.TumblingWindowTrigger;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class TumblingWindowTriggerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TumblingWindowTrigger model = BinaryData.fromString(
            "{\"type\":\"TumblingWindowTrigger\",\"pipeline\":{\"pipelineReference\":{\"referenceName\":\"jov\",\"name\":\"heijmwajvuwa\"},\"parameters\":{\"twow\":\"datamdlpbkfsl\",\"bobgwvhdbie\":\"datawrnkuwgrtvy\"}},\"typeProperties\":{\"frequency\":\"Hour\",\"interval\":181282605,\"startTime\":\"2021-02-19T11:56:14Z\",\"endTime\":\"2021-11-19T15:00:37Z\",\"delay\":\"datacaschhfmidkd\",\"maxConcurrency\":1051348296,\"retryPolicy\":{\"count\":\"datatessvmdoxxcvug\",\"intervalInSeconds\":102399606},\"dependsOn\":[{\"type\":\"DependencyReference\"},{\"type\":\"DependencyReference\"}]},\"description\":\"uukhssret\",\"runtimeState\":\"Disabled\",\"annotations\":[\"datazkc\"],\"\":{\"ogmcblwhzvnisinp\":\"dataqtdwk\",\"jajahngaczggfia\":\"datacwwpuka\",\"ozxotwra\":\"datamuptnhuybtmtokoh\"}}")
            .toObject(TumblingWindowTrigger.class);
        Assertions.assertEquals("uukhssret", model.description());
        Assertions.assertEquals("jov", model.pipeline().pipelineReference().referenceName());
        Assertions.assertEquals("heijmwajvuwa", model.pipeline().pipelineReference().name());
        Assertions.assertEquals(TumblingWindowFrequency.HOUR, model.frequency());
        Assertions.assertEquals(181282605, model.interval());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-19T11:56:14Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-19T15:00:37Z"), model.endTime());
        Assertions.assertEquals(1051348296, model.maxConcurrency());
        Assertions.assertEquals(102399606, model.retryPolicy().intervalInSeconds());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TumblingWindowTrigger model = new TumblingWindowTrigger().withDescription("uukhssret")
            .withAnnotations(Arrays.asList("datazkc"))
            .withPipeline(new TriggerPipelineReference()
                .withPipelineReference(new PipelineReference().withReferenceName("jov").withName("heijmwajvuwa"))
                .withParameters(mapOf("twow", "datamdlpbkfsl", "bobgwvhdbie", "datawrnkuwgrtvy")))
            .withFrequency(TumblingWindowFrequency.HOUR)
            .withInterval(181282605)
            .withStartTime(OffsetDateTime.parse("2021-02-19T11:56:14Z"))
            .withEndTime(OffsetDateTime.parse("2021-11-19T15:00:37Z"))
            .withDelay("datacaschhfmidkd")
            .withMaxConcurrency(1051348296)
            .withRetryPolicy(new RetryPolicy().withCount("datatessvmdoxxcvug").withIntervalInSeconds(102399606))
            .withDependsOn(Arrays.asList(new DependencyReference(), new DependencyReference()));
        model = BinaryData.fromObject(model).toObject(TumblingWindowTrigger.class);
        Assertions.assertEquals("uukhssret", model.description());
        Assertions.assertEquals("jov", model.pipeline().pipelineReference().referenceName());
        Assertions.assertEquals("heijmwajvuwa", model.pipeline().pipelineReference().name());
        Assertions.assertEquals(TumblingWindowFrequency.HOUR, model.frequency());
        Assertions.assertEquals(181282605, model.interval());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-19T11:56:14Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-19T15:00:37Z"), model.endTime());
        Assertions.assertEquals(1051348296, model.maxConcurrency());
        Assertions.assertEquals(102399606, model.retryPolicy().intervalInSeconds());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
