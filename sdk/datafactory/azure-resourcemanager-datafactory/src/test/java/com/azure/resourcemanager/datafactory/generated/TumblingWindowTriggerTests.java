// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DependencyReference;
import com.azure.resourcemanager.datafactory.models.PipelineReference;
import com.azure.resourcemanager.datafactory.models.RetryPolicy;
import com.azure.resourcemanager.datafactory.models.TriggerPipelineReference;
import com.azure.resourcemanager.datafactory.models.TumblingWindowFrequency;
import com.azure.resourcemanager.datafactory.models.TumblingWindowTrigger;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class TumblingWindowTriggerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TumblingWindowTrigger model = BinaryData.fromString(
            "{\"type\":\"TumblingWindowTrigger\",\"pipeline\":{\"pipelineReference\":{\"referenceName\":\"zwky\",\"name\":\"ndiybdoyyk\"},\"parameters\":{\"oxk\":\"dataiandktwi\",\"owjatyhkq\":\"dataynppqtxpj\",\"qzvawfpu\":\"datajcimoi\",\"kjcgupxnuv\":\"datagyhschamwofqntt\"}},\"typeProperties\":{\"frequency\":\"Minute\",\"interval\":1054429650,\"startTime\":\"2021-10-07T05:22:50Z\",\"endTime\":\"2021-05-15T18:23:14Z\",\"delay\":\"datamv\",\"maxConcurrency\":1121710310,\"retryPolicy\":{\"count\":\"dataiyo\",\"intervalInSeconds\":972348562},\"dependsOn\":[{\"type\":\"DependencyReference\"}]},\"description\":\"zokplolcalyvcxvc\",\"runtimeState\":\"Disabled\",\"annotations\":[\"datantb\",\"datatdqsqb\"],\"\":{\"wd\":\"dataswzafqr\",\"d\":\"datafgfspzw\",\"kkscooqnvht\":\"datauxwvjcdjvlwczw\",\"m\":\"datafckrmrbaoidt\"}}")
            .toObject(TumblingWindowTrigger.class);
        Assertions.assertEquals("zokplolcalyvcxvc", model.description());
        Assertions.assertEquals("zwky", model.pipeline().pipelineReference().referenceName());
        Assertions.assertEquals("ndiybdoyyk", model.pipeline().pipelineReference().name());
        Assertions.assertEquals(TumblingWindowFrequency.MINUTE, model.frequency());
        Assertions.assertEquals(1054429650, model.interval());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-07T05:22:50Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-15T18:23:14Z"), model.endTime());
        Assertions.assertEquals(1121710310, model.maxConcurrency());
        Assertions.assertEquals(972348562, model.retryPolicy().intervalInSeconds());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TumblingWindowTrigger model = new TumblingWindowTrigger().withDescription("zokplolcalyvcxvc")
            .withAnnotations(Arrays.asList("datantb", "datatdqsqb"))
            .withPipeline(new TriggerPipelineReference()
                .withPipelineReference(new PipelineReference().withReferenceName("zwky").withName("ndiybdoyyk"))
                .withParameters(mapOf("oxk", "dataiandktwi", "owjatyhkq", "dataynppqtxpj", "qzvawfpu", "datajcimoi",
                    "kjcgupxnuv", "datagyhschamwofqntt")))
            .withFrequency(TumblingWindowFrequency.MINUTE)
            .withInterval(1054429650)
            .withStartTime(OffsetDateTime.parse("2021-10-07T05:22:50Z"))
            .withEndTime(OffsetDateTime.parse("2021-05-15T18:23:14Z"))
            .withDelay("datamv")
            .withMaxConcurrency(1121710310)
            .withRetryPolicy(new RetryPolicy().withCount("dataiyo").withIntervalInSeconds(972348562))
            .withDependsOn(Arrays.asList(new DependencyReference()));
        model = BinaryData.fromObject(model).toObject(TumblingWindowTrigger.class);
        Assertions.assertEquals("zokplolcalyvcxvc", model.description());
        Assertions.assertEquals("zwky", model.pipeline().pipelineReference().referenceName());
        Assertions.assertEquals("ndiybdoyyk", model.pipeline().pipelineReference().name());
        Assertions.assertEquals(TumblingWindowFrequency.MINUTE, model.frequency());
        Assertions.assertEquals(1054429650, model.interval());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-07T05:22:50Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-15T18:23:14Z"), model.endTime());
        Assertions.assertEquals(1121710310, model.maxConcurrency());
        Assertions.assertEquals(972348562, model.retryPolicy().intervalInSeconds());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
