// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DependencyReference;
import com.azure.resourcemanager.datafactory.models.PipelineReference;
import com.azure.resourcemanager.datafactory.models.RetryPolicy;
import com.azure.resourcemanager.datafactory.models.TriggerPipelineReference;
import com.azure.resourcemanager.datafactory.models.TumblingWindowFrequency;
import com.azure.resourcemanager.datafactory.models.TumblingWindowTrigger;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class TumblingWindowTriggerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TumblingWindowTrigger model = BinaryData.fromString(
            "{\"type\":\"TumblingWindowTrigger\",\"pipeline\":{\"pipelineReference\":{\"referenceName\":\"spnsbbhdjee\",\"name\":\"lcykihymdgukfmk\"},\"parameters\":{\"mohrllxjyxhwv\":\"datazvxknyg\",\"wnudd\":\"datayupszch\",\"ib\":\"dataazvsmnxblc\",\"eh\":\"datamgfwdxukmeo\"}},\"typeProperties\":{\"frequency\":\"Hour\",\"interval\":908330647,\"startTime\":\"2021-10-27T03:53:44Z\",\"endTime\":\"2021-02-20T05:31:07Z\",\"delay\":\"dataaiiuqmda\",\"maxConcurrency\":253707305,\"retryPolicy\":{\"count\":\"datanvmfmry\",\"intervalInSeconds\":1812804884},\"dependsOn\":[{\"type\":\"DependencyReference\"}]},\"description\":\"rvwgpj\",\"runtimeState\":\"Disabled\",\"annotations\":[\"datautdzhkbc\",\"datauavotfmgtxz\"],\"\":{\"qpbbjcznxd\":\"datazqmlkrx\",\"kjirti\":\"dataiwaaumy\"}}")
            .toObject(TumblingWindowTrigger.class);
        Assertions.assertEquals("rvwgpj", model.description());
        Assertions.assertEquals("spnsbbhdjee", model.pipeline().pipelineReference().referenceName());
        Assertions.assertEquals("lcykihymdgukfmk", model.pipeline().pipelineReference().name());
        Assertions.assertEquals(TumblingWindowFrequency.HOUR, model.frequency());
        Assertions.assertEquals(908330647, model.interval());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-27T03:53:44Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-20T05:31:07Z"), model.endTime());
        Assertions.assertEquals(253707305, model.maxConcurrency());
        Assertions.assertEquals(1812804884, model.retryPolicy().intervalInSeconds());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TumblingWindowTrigger model = new TumblingWindowTrigger().withDescription("rvwgpj")
            .withAnnotations(Arrays.asList("datautdzhkbc", "datauavotfmgtxz"))
            .withPipeline(new TriggerPipelineReference()
                .withPipelineReference(
                    new PipelineReference().withReferenceName("spnsbbhdjee").withName("lcykihymdgukfmk"))
                .withParameters(mapOf("mohrllxjyxhwv", "datazvxknyg", "wnudd", "datayupszch", "ib", "dataazvsmnxblc",
                    "eh", "datamgfwdxukmeo")))
            .withFrequency(TumblingWindowFrequency.HOUR)
            .withInterval(908330647)
            .withStartTime(OffsetDateTime.parse("2021-10-27T03:53:44Z"))
            .withEndTime(OffsetDateTime.parse("2021-02-20T05:31:07Z"))
            .withDelay("dataaiiuqmda")
            .withMaxConcurrency(253707305)
            .withRetryPolicy(new RetryPolicy().withCount("datanvmfmry").withIntervalInSeconds(1812804884))
            .withDependsOn(Arrays.asList(new DependencyReference()));
        model = BinaryData.fromObject(model).toObject(TumblingWindowTrigger.class);
        Assertions.assertEquals("rvwgpj", model.description());
        Assertions.assertEquals("spnsbbhdjee", model.pipeline().pipelineReference().referenceName());
        Assertions.assertEquals("lcykihymdgukfmk", model.pipeline().pipelineReference().name());
        Assertions.assertEquals(TumblingWindowFrequency.HOUR, model.frequency());
        Assertions.assertEquals(908330647, model.interval());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-27T03:53:44Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-20T05:31:07Z"), model.endTime());
        Assertions.assertEquals(253707305, model.maxConcurrency());
        Assertions.assertEquals(1812804884, model.retryPolicy().intervalInSeconds());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
