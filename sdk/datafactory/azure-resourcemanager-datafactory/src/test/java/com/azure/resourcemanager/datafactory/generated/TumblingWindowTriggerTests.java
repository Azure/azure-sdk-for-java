// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DependencyReference;
import com.azure.resourcemanager.datafactory.models.PipelineReference;
import com.azure.resourcemanager.datafactory.models.RetryPolicy;
import com.azure.resourcemanager.datafactory.models.TriggerPipelineReference;
import com.azure.resourcemanager.datafactory.models.TumblingWindowFrequency;
import com.azure.resourcemanager.datafactory.models.TumblingWindowTrigger;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class TumblingWindowTriggerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TumblingWindowTrigger model =
            BinaryData
                .fromString(
                    "{\"type\":\"TumblingWindowTrigger\",\"pipeline\":{\"pipelineReference\":{\"referenceName\":\"vlnv\",\"name\":\"l\"},\"parameters\":{\"d\":\"dataxpugetwgjlx\",\"tzkdqi\":\"datavfnqazvavspjdxa\",\"yredzhnylir\":\"dataumaijcullkyrss\",\"jrrolwrv\":\"datarxykplvjsqazecdo\"}},\"typeProperties\":{\"frequency\":\"Minute\",\"interval\":243301845,\"startTime\":\"2021-10-01T16:23:36Z\",\"endTime\":\"2021-02-01T07:00:41Z\",\"delay\":\"dataykusfqmgjexiqejv\",\"maxConcurrency\":408948443,\"retryPolicy\":{\"count\":\"datanoexwarqazfsrv\",\"intervalInSeconds\":425533184},\"dependsOn\":[{\"type\":\"DependencyReference\"},{\"type\":\"DependencyReference\"},{\"type\":\"DependencyReference\"},{\"type\":\"DependencyReference\"}]},\"description\":\"hazwewh\",\"runtimeState\":\"Started\",\"annotations\":[\"datadycspidc\",\"dataxjfgxynuxvya\",\"datakcuozwowwmulq\",\"dataaeq\"],\"\":{\"cxkrzuzepdvx\":\"datatqlbjezcwf\"}}")
                .toObject(TumblingWindowTrigger.class);
        Assertions.assertEquals("hazwewh", model.description());
        Assertions.assertEquals("vlnv", model.pipeline().pipelineReference().referenceName());
        Assertions.assertEquals("l", model.pipeline().pipelineReference().name());
        Assertions.assertEquals(TumblingWindowFrequency.MINUTE, model.frequency());
        Assertions.assertEquals(243301845, model.interval());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-01T16:23:36Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-01T07:00:41Z"), model.endTime());
        Assertions.assertEquals(408948443, model.maxConcurrency());
        Assertions.assertEquals(425533184, model.retryPolicy().intervalInSeconds());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TumblingWindowTrigger model =
            new TumblingWindowTrigger()
                .withDescription("hazwewh")
                .withAnnotations(Arrays.asList("datadycspidc", "dataxjfgxynuxvya", "datakcuozwowwmulq", "dataaeq"))
                .withPipeline(
                    new TriggerPipelineReference()
                        .withPipelineReference(new PipelineReference().withReferenceName("vlnv").withName("l"))
                        .withParameters(
                            mapOf(
                                "d",
                                "dataxpugetwgjlx",
                                "tzkdqi",
                                "datavfnqazvavspjdxa",
                                "yredzhnylir",
                                "dataumaijcullkyrss",
                                "jrrolwrv",
                                "datarxykplvjsqazecdo")))
                .withFrequency(TumblingWindowFrequency.MINUTE)
                .withInterval(243301845)
                .withStartTime(OffsetDateTime.parse("2021-10-01T16:23:36Z"))
                .withEndTime(OffsetDateTime.parse("2021-02-01T07:00:41Z"))
                .withDelay("dataykusfqmgjexiqejv")
                .withMaxConcurrency(408948443)
                .withRetryPolicy(new RetryPolicy().withCount("datanoexwarqazfsrv").withIntervalInSeconds(425533184))
                .withDependsOn(
                    Arrays
                        .asList(
                            new DependencyReference(),
                            new DependencyReference(),
                            new DependencyReference(),
                            new DependencyReference()));
        model = BinaryData.fromObject(model).toObject(TumblingWindowTrigger.class);
        Assertions.assertEquals("hazwewh", model.description());
        Assertions.assertEquals("vlnv", model.pipeline().pipelineReference().referenceName());
        Assertions.assertEquals("l", model.pipeline().pipelineReference().name());
        Assertions.assertEquals(TumblingWindowFrequency.MINUTE, model.frequency());
        Assertions.assertEquals(243301845, model.interval());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-01T16:23:36Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-01T07:00:41Z"), model.endTime());
        Assertions.assertEquals(408948443, model.maxConcurrency());
        Assertions.assertEquals(425533184, model.retryPolicy().intervalInSeconds());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
