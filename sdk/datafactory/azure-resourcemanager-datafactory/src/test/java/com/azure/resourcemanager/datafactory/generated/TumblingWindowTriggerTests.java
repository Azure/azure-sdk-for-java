// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DependencyReference;
import com.azure.resourcemanager.datafactory.models.PipelineReference;
import com.azure.resourcemanager.datafactory.models.RetryPolicy;
import com.azure.resourcemanager.datafactory.models.TriggerPipelineReference;
import com.azure.resourcemanager.datafactory.models.TumblingWindowFrequency;
import com.azure.resourcemanager.datafactory.models.TumblingWindowTrigger;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class TumblingWindowTriggerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TumblingWindowTrigger model = BinaryData.fromString(
            "{\"type\":\"TumblingWindowTrigger\",\"pipeline\":{\"pipelineReference\":{\"referenceName\":\"j\",\"name\":\"sfvyv\"},\"parameters\":{\"jkczkcd\":\"dataclqtdcasjnzeckpg\",\"abzy\":\"datazicltwa\",\"zspw\":\"dataxvif\",\"inlqkzee\":\"datal\"}},\"typeProperties\":{\"frequency\":\"Month\",\"interval\":1329395575,\"startTime\":\"2021-08-16T22:36:54Z\",\"endTime\":\"2021-07-20T02:17:02Z\",\"delay\":\"datamdhmdvk\",\"maxConcurrency\":300833021,\"retryPolicy\":{\"count\":\"datavmc\",\"intervalInSeconds\":874325874},\"dependsOn\":[{\"type\":\"DependencyReference\"}]},\"description\":\"jfmztpwujmu\",\"runtimeState\":\"Disabled\",\"annotations\":[\"datayebwzrfonqj\"],\"\":{\"rf\":\"dataofjfusneyuirrr\",\"cflp\":\"datafamozyvjm\",\"cowmukzcrp\":\"dataqtq\"}}")
            .toObject(TumblingWindowTrigger.class);
        Assertions.assertEquals("jfmztpwujmu", model.description());
        Assertions.assertEquals("j", model.pipeline().pipelineReference().referenceName());
        Assertions.assertEquals("sfvyv", model.pipeline().pipelineReference().name());
        Assertions.assertEquals(TumblingWindowFrequency.MONTH, model.frequency());
        Assertions.assertEquals(1329395575, model.interval());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-16T22:36:54Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-20T02:17:02Z"), model.endTime());
        Assertions.assertEquals(300833021, model.maxConcurrency());
        Assertions.assertEquals(874325874, model.retryPolicy().intervalInSeconds());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TumblingWindowTrigger model = new TumblingWindowTrigger().withDescription("jfmztpwujmu")
            .withAnnotations(Arrays.asList("datayebwzrfonqj"))
            .withPipeline(new TriggerPipelineReference()
                .withPipelineReference(new PipelineReference().withReferenceName("j").withName("sfvyv"))
                .withParameters(mapOf("jkczkcd", "dataclqtdcasjnzeckpg", "abzy", "datazicltwa", "zspw", "dataxvif",
                    "inlqkzee", "datal")))
            .withFrequency(TumblingWindowFrequency.MONTH).withInterval(1329395575)
            .withStartTime(OffsetDateTime.parse("2021-08-16T22:36:54Z"))
            .withEndTime(OffsetDateTime.parse("2021-07-20T02:17:02Z")).withDelay("datamdhmdvk")
            .withMaxConcurrency(300833021)
            .withRetryPolicy(new RetryPolicy().withCount("datavmc").withIntervalInSeconds(874325874))
            .withDependsOn(Arrays.asList(new DependencyReference()));
        model = BinaryData.fromObject(model).toObject(TumblingWindowTrigger.class);
        Assertions.assertEquals("jfmztpwujmu", model.description());
        Assertions.assertEquals("j", model.pipeline().pipelineReference().referenceName());
        Assertions.assertEquals("sfvyv", model.pipeline().pipelineReference().name());
        Assertions.assertEquals(TumblingWindowFrequency.MONTH, model.frequency());
        Assertions.assertEquals(1329395575, model.interval());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-16T22:36:54Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-20T02:17:02Z"), model.endTime());
        Assertions.assertEquals(300833021, model.maxConcurrency());
        Assertions.assertEquals(874325874, model.retryPolicy().intervalInSeconds());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
