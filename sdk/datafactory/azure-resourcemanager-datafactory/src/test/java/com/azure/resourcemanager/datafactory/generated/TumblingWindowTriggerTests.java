// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DependencyReference;
import com.azure.resourcemanager.datafactory.models.PipelineReference;
import com.azure.resourcemanager.datafactory.models.RetryPolicy;
import com.azure.resourcemanager.datafactory.models.TriggerPipelineReference;
import com.azure.resourcemanager.datafactory.models.TumblingWindowFrequency;
import com.azure.resourcemanager.datafactory.models.TumblingWindowTrigger;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class TumblingWindowTriggerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TumblingWindowTrigger model = BinaryData.fromString(
            "{\"type\":\"TumblingWindowTrigger\",\"pipeline\":{\"pipelineReference\":{\"referenceName\":\"tx\",\"name\":\"uxmegrix\"},\"parameters\":{\"tcoibiodfy\":\"datazjlqrpsqpj\",\"oemcajjazo\":\"dataafenwvvxcah\"}},\"typeProperties\":{\"frequency\":\"Month\",\"interval\":838287368,\"startTime\":\"2021-04-15T18:57:46Z\",\"endTime\":\"2021-07-24T14:06:28Z\",\"delay\":\"datahxydx\",\"maxConcurrency\":2006064884,\"retryPolicy\":{\"count\":\"datailgtbslagtmkii\",\"intervalInSeconds\":1595340480},\"dependsOn\":[{\"type\":\"DependencyReference\"},{\"type\":\"DependencyReference\"},{\"type\":\"DependencyReference\"},{\"type\":\"DependencyReference\"}]},\"description\":\"jpvgvbz\",\"runtimeState\":\"Stopped\",\"annotations\":[\"datazgrfaq\",\"datatqmcszdptoyt\",\"datanxgqovfrtm\"],\"\":{\"jiocvjmyi\":\"datazrexmcawpbifzw\"}}")
            .toObject(TumblingWindowTrigger.class);
        Assertions.assertEquals("jpvgvbz", model.description());
        Assertions.assertEquals("tx", model.pipeline().pipelineReference().referenceName());
        Assertions.assertEquals("uxmegrix", model.pipeline().pipelineReference().name());
        Assertions.assertEquals(TumblingWindowFrequency.MONTH, model.frequency());
        Assertions.assertEquals(838287368, model.interval());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-15T18:57:46Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-24T14:06:28Z"), model.endTime());
        Assertions.assertEquals(2006064884, model.maxConcurrency());
        Assertions.assertEquals(1595340480, model.retryPolicy().intervalInSeconds());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TumblingWindowTrigger model = new TumblingWindowTrigger().withDescription("jpvgvbz")
            .withAnnotations(Arrays.asList("datazgrfaq", "datatqmcszdptoyt", "datanxgqovfrtm"))
            .withPipeline(new TriggerPipelineReference()
                .withPipelineReference(new PipelineReference().withReferenceName("tx").withName("uxmegrix"))
                .withParameters(mapOf("tcoibiodfy", "datazjlqrpsqpj", "oemcajjazo", "dataafenwvvxcah")))
            .withFrequency(TumblingWindowFrequency.MONTH).withInterval(838287368)
            .withStartTime(OffsetDateTime.parse("2021-04-15T18:57:46Z"))
            .withEndTime(OffsetDateTime.parse("2021-07-24T14:06:28Z")).withDelay("datahxydx")
            .withMaxConcurrency(2006064884)
            .withRetryPolicy(new RetryPolicy().withCount("datailgtbslagtmkii").withIntervalInSeconds(1595340480))
            .withDependsOn(Arrays.asList(new DependencyReference(), new DependencyReference(),
                new DependencyReference(), new DependencyReference()));
        model = BinaryData.fromObject(model).toObject(TumblingWindowTrigger.class);
        Assertions.assertEquals("jpvgvbz", model.description());
        Assertions.assertEquals("tx", model.pipeline().pipelineReference().referenceName());
        Assertions.assertEquals("uxmegrix", model.pipeline().pipelineReference().name());
        Assertions.assertEquals(TumblingWindowFrequency.MONTH, model.frequency());
        Assertions.assertEquals(838287368, model.interval());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-15T18:57:46Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-24T14:06:28Z"), model.endTime());
        Assertions.assertEquals(2006064884, model.maxConcurrency());
        Assertions.assertEquals(1595340480, model.retryPolicy().intervalInSeconds());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
