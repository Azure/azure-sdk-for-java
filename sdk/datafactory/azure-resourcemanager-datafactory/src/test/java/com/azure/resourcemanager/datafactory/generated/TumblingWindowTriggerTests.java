// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DependencyReference;
import com.azure.resourcemanager.datafactory.models.PipelineReference;
import com.azure.resourcemanager.datafactory.models.RetryPolicy;
import com.azure.resourcemanager.datafactory.models.TriggerPipelineReference;
import com.azure.resourcemanager.datafactory.models.TumblingWindowFrequency;
import com.azure.resourcemanager.datafactory.models.TumblingWindowTrigger;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class TumblingWindowTriggerTests {
    @Test
    public void testDeserialize() {
        TumblingWindowTrigger model =
            BinaryData
                .fromString(
                    "{\"type\":\"TumblingWindowTrigger\",\"pipeline\":{\"pipelineReference\":{\"referenceName\":\"asmcolmugpyvaos\",\"name\":\"l\"},\"parameters\":{}},\"typeProperties\":{\"frequency\":\"Hour\",\"interval\":829641302,\"startTime\":\"2021-10-17T17:31:36Z\",\"endTime\":\"2021-09-08T15:56:22Z\",\"maxConcurrency\":1847990135,\"retryPolicy\":{\"intervalInSeconds\":1587213878},\"dependsOn\":[{\"type\":\"DependencyReference\"},{\"type\":\"DependencyReference\"}]},\"description\":\"nobguqisqsqkpdmi\",\"runtimeState\":\"Stopped\",\"annotations\":[],\"\":{}}")
                .toObject(TumblingWindowTrigger.class);
        Assertions.assertEquals("nobguqisqsqkpdmi", model.description());
        Assertions.assertEquals("asmcolmugpyvaos", model.pipeline().pipelineReference().referenceName());
        Assertions.assertEquals("l", model.pipeline().pipelineReference().name());
        Assertions.assertEquals(TumblingWindowFrequency.HOUR, model.frequency());
        Assertions.assertEquals(829641302, model.interval());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-17T17:31:36Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-08T15:56:22Z"), model.endTime());
        Assertions.assertEquals(1847990135, model.maxConcurrency());
        Assertions.assertEquals(1587213878, model.retryPolicy().intervalInSeconds());
    }

    @Test
    public void testSerialize() {
        TumblingWindowTrigger model =
            new TumblingWindowTrigger()
                .withDescription("nobguqisqsqkpdmi")
                .withAnnotations(Arrays.asList())
                .withPipeline(
                    new TriggerPipelineReference()
                        .withPipelineReference(
                            new PipelineReference().withReferenceName("asmcolmugpyvaos").withName("l"))
                        .withParameters(mapOf()))
                .withFrequency(TumblingWindowFrequency.HOUR)
                .withInterval(829641302)
                .withStartTime(OffsetDateTime.parse("2021-10-17T17:31:36Z"))
                .withEndTime(OffsetDateTime.parse("2021-09-08T15:56:22Z"))
                .withMaxConcurrency(1847990135)
                .withRetryPolicy(new RetryPolicy().withIntervalInSeconds(1587213878))
                .withDependsOn(Arrays.asList(new DependencyReference(), new DependencyReference()));
        model = BinaryData.fromObject(model).toObject(TumblingWindowTrigger.class);
        Assertions.assertEquals("nobguqisqsqkpdmi", model.description());
        Assertions.assertEquals("asmcolmugpyvaos", model.pipeline().pipelineReference().referenceName());
        Assertions.assertEquals("l", model.pipeline().pipelineReference().name());
        Assertions.assertEquals(TumblingWindowFrequency.HOUR, model.frequency());
        Assertions.assertEquals(829641302, model.interval());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-17T17:31:36Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-08T15:56:22Z"), model.endTime());
        Assertions.assertEquals(1847990135, model.maxConcurrency());
        Assertions.assertEquals(1587213878, model.retryPolicy().intervalInSeconds());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
