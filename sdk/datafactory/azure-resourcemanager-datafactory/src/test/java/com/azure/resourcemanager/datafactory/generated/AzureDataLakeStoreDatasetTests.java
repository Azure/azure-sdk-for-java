// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.AzureDataLakeStoreDataset;
import com.azure.resourcemanager.datafactory.models.DatasetCompression;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.DatasetStorageFormat;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureDataLakeStoreDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureDataLakeStoreDataset model = BinaryData.fromString(
            "{\"type\":\"tvnpccxzivxpmh\",\"typeProperties\":{\"folderPath\":\"datavykbyjecrqkwakk\",\"fileName\":\"datasfoulborcxu\",\"format\":{\"type\":\"dqbdyblp\",\"serializer\":\"datat\",\"deserializer\":\"datawpgweoqhbj\",\"\":{\"c\":\"datafblerufol\",\"tpnerxvjea\":\"datahjucihbymjj\"}},\"compression\":{\"type\":\"dataahelh\",\"level\":\"datamyi\",\"\":{\"cthtpq\":\"dataa\",\"zkdiuvflgzhcw\":\"datafzdos\",\"g\":\"datagwahcrxo\"}}},\"description\":\"hh\",\"structure\":\"datavnnjd\",\"schema\":\"datajq\",\"linkedServiceName\":{\"referenceName\":\"vhnjvpmxnhtmz\",\"parameters\":{\"vtlgx\":\"datalfxolr\",\"twwgwqubot\":\"datafjswequflzyyopoa\",\"jiemimdtnpo\":\"datavufrk\"}},\"parameters\":{\"ft\":{\"type\":\"String\",\"defaultValue\":\"datakreeeddd\"},\"uwbrnqyxfedqne\":{\"type\":\"String\",\"defaultValue\":\"dataulpclhsiige\"}},\"annotations\":[\"datawynxoqgvbz\"],\"folder\":{\"name\":\"pw\"},\"\":{\"a\":\"dataobqajejir\"}}")
            .toObject(AzureDataLakeStoreDataset.class);
        Assertions.assertEquals("hh", model.description());
        Assertions.assertEquals("vhnjvpmxnhtmz", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("ft").type());
        Assertions.assertEquals("pw", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureDataLakeStoreDataset model = new AzureDataLakeStoreDataset().withDescription("hh")
            .withStructure("datavnnjd")
            .withSchema("datajq")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("vhnjvpmxnhtmz")
                .withParameters(
                    mapOf("vtlgx", "datalfxolr", "twwgwqubot", "datafjswequflzyyopoa", "jiemimdtnpo", "datavufrk")))
            .withParameters(mapOf("ft",
                new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("datakreeeddd"),
                "uwbrnqyxfedqne",
                new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("dataulpclhsiige")))
            .withAnnotations(Arrays.asList("datawynxoqgvbz"))
            .withFolder(new DatasetFolder().withName("pw"))
            .withFolderPath("datavykbyjecrqkwakk")
            .withFileName("datasfoulborcxu")
            .withFormat(new DatasetStorageFormat().withSerializer("datat")
                .withDeserializer("datawpgweoqhbj")
                .withAdditionalProperties(mapOf("type", "dqbdyblp")))
            .withCompression(
                new DatasetCompression().withType("dataahelh").withLevel("datamyi").withAdditionalProperties(mapOf()));
        model = BinaryData.fromObject(model).toObject(AzureDataLakeStoreDataset.class);
        Assertions.assertEquals("hh", model.description());
        Assertions.assertEquals("vhnjvpmxnhtmz", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("ft").type());
        Assertions.assertEquals("pw", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
