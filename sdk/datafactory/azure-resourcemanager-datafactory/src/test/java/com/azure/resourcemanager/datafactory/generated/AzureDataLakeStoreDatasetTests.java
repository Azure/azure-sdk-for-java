// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.AzureDataLakeStoreDataset;
import com.azure.resourcemanager.datafactory.models.DatasetCompression;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.DatasetStorageFormat;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureDataLakeStoreDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureDataLakeStoreDataset model =
            BinaryData
                .fromString(
                    "{\"type\":\"AzureDataLakeStoreFile\",\"typeProperties\":{\"folderPath\":\"datablwal\",\"fileName\":\"datassnqe\",\"format\":{\"type\":\"DatasetStorageFormat\",\"serializer\":\"datatbptgcsma\",\"deserializer\":\"dataxrwqfmd\",\"\":{\"psibxovuqo\":\"datavtamqwzmnobfew\",\"qnzjcyqqz\":\"datajrkblndyclwgycv\",\"dpisjdl\":\"dataembtbwnalb\",\"eopsk\":\"dataajvmvvlooubsfxip\"}},\"compression\":{\"type\":\"datacjomlupf\",\"level\":\"datausjcd\",\"\":{\"j\":\"datalgdwzrgdqyx\",\"cwwsj\":\"datalgrcavqcwyzoqzkm\"}}},\"description\":\"iixepbntqqwwgfgs\",\"structure\":\"datailefej\",\"schema\":\"datawrznequ\",\"linkedServiceName\":{\"referenceName\":\"ynttwknhajk\",\"parameters\":{\"cydi\":\"datayogjmqjh\",\"vjbssfcriqxz\":\"datanm\",\"py\":\"dataxtdlxwmvcdkucp\",\"pnr\":\"datafrwrgorogeuvmkr\"}},\"parameters\":{\"snqpljpete\":{\"type\":\"Object\",\"defaultValue\":\"datalzof\"},\"ub\":{\"type\":\"Array\",\"defaultValue\":\"dataikelpmwgr\"},\"gjzscueza\":{\"type\":\"String\",\"defaultValue\":\"datahvo\"}},\"annotations\":[\"datadfwgqjhewcffrx\",\"datagezkhzpriqisse\",\"dataerrusyzaiv\",\"datapsjnpck\"],\"folder\":{\"name\":\"jy\"},\"\":{\"jarsbbdddwok\":\"datanbdawsaoplvvmnbk\"}}")
                .toObject(AzureDataLakeStoreDataset.class);
        Assertions.assertEquals("iixepbntqqwwgfgs", model.description());
        Assertions.assertEquals("ynttwknhajk", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.OBJECT, model.parameters().get("snqpljpete").type());
        Assertions.assertEquals("jy", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureDataLakeStoreDataset model =
            new AzureDataLakeStoreDataset()
                .withDescription("iixepbntqqwwgfgs")
                .withStructure("datailefej")
                .withSchema("datawrznequ")
                .withLinkedServiceName(
                    new LinkedServiceReference()
                        .withReferenceName("ynttwknhajk")
                        .withParameters(
                            mapOf(
                                "cydi",
                                "datayogjmqjh",
                                "vjbssfcriqxz",
                                "datanm",
                                "py",
                                "dataxtdlxwmvcdkucp",
                                "pnr",
                                "datafrwrgorogeuvmkr")))
                .withParameters(
                    mapOf(
                        "snqpljpete",
                        new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("datalzof"),
                        "ub",
                        new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("dataikelpmwgr"),
                        "gjzscueza",
                        new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("datahvo")))
                .withAnnotations(
                    Arrays.asList("datadfwgqjhewcffrx", "datagezkhzpriqisse", "dataerrusyzaiv", "datapsjnpck"))
                .withFolder(new DatasetFolder().withName("jy"))
                .withFolderPath("datablwal")
                .withFileName("datassnqe")
                .withFormat(
                    new DatasetStorageFormat()
                        .withSerializer("datatbptgcsma")
                        .withDeserializer("dataxrwqfmd")
                        .withAdditionalProperties(mapOf("type", "DatasetStorageFormat")))
                .withCompression(
                    new DatasetCompression()
                        .withType("datacjomlupf")
                        .withLevel("datausjcd")
                        .withAdditionalProperties(mapOf()));
        model = BinaryData.fromObject(model).toObject(AzureDataLakeStoreDataset.class);
        Assertions.assertEquals("iixepbntqqwwgfgs", model.description());
        Assertions.assertEquals("ynttwknhajk", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.OBJECT, model.parameters().get("snqpljpete").type());
        Assertions.assertEquals("jy", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
