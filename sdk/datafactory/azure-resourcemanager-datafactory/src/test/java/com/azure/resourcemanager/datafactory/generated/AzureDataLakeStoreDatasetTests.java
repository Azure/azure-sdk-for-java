// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.AzureDataLakeStoreDataset;
import com.azure.resourcemanager.datafactory.models.DatasetCompression;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.DatasetStorageFormat;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureDataLakeStoreDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureDataLakeStoreDataset model = BinaryData.fromString(
            "{\"type\":\"AzureDataLakeStoreFile\",\"typeProperties\":{\"folderPath\":\"datawgr\",\"fileName\":\"databwudhvosgjzs\",\"format\":{\"type\":\"DatasetStorageFormat\",\"serializer\":\"datazalivdfwgq\",\"deserializer\":\"dataewcffrxgg\",\"\":{\"priqissener\":\"datah\",\"ujyduonbdawsao\":\"datausyzaivnpsjnpckp\"}},\"compression\":{\"type\":\"datavvm\",\"level\":\"datakxjarsbbdddw\",\"\":{\"kdyqjvz\":\"dataxailx\"}}},\"description\":\"grdspzesfkqq\",\"structure\":\"datahvzf\",\"schema\":\"datarouszxacdwukokgo\",\"linkedServiceName\":{\"referenceName\":\"j\",\"parameters\":{\"tzvxxvsb\":\"dataktubcmunhg\",\"furqm\":\"datauufkrfnkcnihkswx\",\"motahbqsvnk\":\"datamwwpnt\",\"gc\":\"datamytzuaedrlh\"}},\"parameters\":{\"yftgpqoswgfqv\":{\"type\":\"Int\",\"defaultValue\":\"datakvxzzmiem\"},\"qyhls\":{\"type\":\"Array\",\"defaultValue\":\"datahpak\"},\"gkncjm\":{\"type\":\"String\",\"defaultValue\":\"datafbmeq\"}},\"annotations\":[\"datayevztnjaw\",\"datahul\",\"datammqmbwppx\",\"datarxbkitzmnhitax\"],\"folder\":{\"name\":\"l\"},\"\":{\"dvyljubvfjy\":\"dataxsgcemegd\",\"ifnivlut\":\"dataufl\",\"aacxauhvc\":\"datag\"}}")
            .toObject(AzureDataLakeStoreDataset.class);
        Assertions.assertEquals("grdspzesfkqq", model.description());
        Assertions.assertEquals("j", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("yftgpqoswgfqv").type());
        Assertions.assertEquals("l", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureDataLakeStoreDataset model = new AzureDataLakeStoreDataset().withDescription("grdspzesfkqq")
            .withStructure("datahvzf")
            .withSchema("datarouszxacdwukokgo")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("j")
                .withParameters(mapOf("tzvxxvsb", "dataktubcmunhg", "furqm", "datauufkrfnkcnihkswx", "motahbqsvnk",
                    "datamwwpnt", "gc", "datamytzuaedrlh")))
            .withParameters(mapOf("yftgpqoswgfqv",
                new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("datakvxzzmiem"), "qyhls",
                new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("datahpak"), "gkncjm",
                new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("datafbmeq")))
            .withAnnotations(Arrays.asList("datayevztnjaw", "datahul", "datammqmbwppx", "datarxbkitzmnhitax"))
            .withFolder(new DatasetFolder().withName("l"))
            .withFolderPath("datawgr")
            .withFileName("databwudhvosgjzs")
            .withFormat(new DatasetStorageFormat().withSerializer("datazalivdfwgq")
                .withDeserializer("dataewcffrxgg")
                .withAdditionalProperties(mapOf("type", "DatasetStorageFormat")))
            .withCompression(new DatasetCompression().withType("datavvm")
                .withLevel("datakxjarsbbdddw")
                .withAdditionalProperties(mapOf()));
        model = BinaryData.fromObject(model).toObject(AzureDataLakeStoreDataset.class);
        Assertions.assertEquals("grdspzesfkqq", model.description());
        Assertions.assertEquals("j", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("yftgpqoswgfqv").type());
        Assertions.assertEquals("l", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
