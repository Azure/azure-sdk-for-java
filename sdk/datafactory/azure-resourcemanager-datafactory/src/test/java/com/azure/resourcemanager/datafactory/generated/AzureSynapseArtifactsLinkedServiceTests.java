// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.AzureSynapseArtifactsLinkedService;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureSynapseArtifactsLinkedServiceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureSynapseArtifactsLinkedService model = BinaryData.fromString(
            "{\"type\":\"AzureSynapseArtifacts\",\"typeProperties\":{\"endpoint\":\"dataljpzauugdar\",\"authentication\":\"datamitjaiismo\",\"workspaceResourceId\":\"datad\"},\"version\":\"vywbgmjrvrsqrj\",\"connectVia\":{\"referenceName\":\"z\",\"parameters\":{\"tvxkxg\":\"dataylc\",\"qaaqjbl\":\"datafpvvqwvvnx\"}},\"description\":\"wwtevfeu\",\"parameters\":{\"vfrymqqfksqfc\":{\"type\":\"Bool\",\"defaultValue\":\"dataztxos\"},\"vtkrqiyuqd\":{\"type\":\"SecureString\",\"defaultValue\":\"dataeohysdgkbaxyg\"},\"eipfotaaqyxk\":{\"type\":\"Array\",\"defaultValue\":\"dataqztrpj\"},\"krepqasviy\":{\"type\":\"Float\",\"defaultValue\":\"databcoxqaav\"}},\"annotations\":[\"dataoli\",\"dataia\",\"dataklqclftp\",\"dataeouxpdnl\"],\"\":{\"ohnroa\":\"databc\",\"ur\":\"datazekg\"}}")
            .toObject(AzureSynapseArtifactsLinkedService.class);
        Assertions.assertEquals("vywbgmjrvrsqrj", model.version());
        Assertions.assertEquals("z", model.connectVia().referenceName());
        Assertions.assertEquals("wwtevfeu", model.description());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("vfrymqqfksqfc").type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureSynapseArtifactsLinkedService model = new AzureSynapseArtifactsLinkedService()
            .withVersion("vywbgmjrvrsqrj")
            .withConnectVia(new IntegrationRuntimeReference().withReferenceName("z")
                .withParameters(mapOf("tvxkxg", "dataylc", "qaaqjbl", "datafpvvqwvvnx")))
            .withDescription("wwtevfeu")
            .withParameters(mapOf("vfrymqqfksqfc",
                new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("dataztxos"), "vtkrqiyuqd",
                new ParameterSpecification().withType(ParameterType.SECURE_STRING)
                    .withDefaultValue("dataeohysdgkbaxyg"),
                "eipfotaaqyxk",
                new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("dataqztrpj"), "krepqasviy",
                new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("databcoxqaav")))
            .withAnnotations(Arrays.asList("dataoli", "dataia", "dataklqclftp", "dataeouxpdnl"))
            .withEndpoint("dataljpzauugdar")
            .withAuthentication("datamitjaiismo")
            .withWorkspaceResourceId("datad");
        model = BinaryData.fromObject(model).toObject(AzureSynapseArtifactsLinkedService.class);
        Assertions.assertEquals("vywbgmjrvrsqrj", model.version());
        Assertions.assertEquals("z", model.connectVia().referenceName());
        Assertions.assertEquals("wwtevfeu", model.description());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("vfrymqqfksqfc").type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
