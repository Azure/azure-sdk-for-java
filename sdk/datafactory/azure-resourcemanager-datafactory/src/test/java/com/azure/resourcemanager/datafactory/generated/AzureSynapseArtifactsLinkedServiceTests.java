// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.AzureSynapseArtifactsLinkedService;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureSynapseArtifactsLinkedServiceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureSynapseArtifactsLinkedService model = BinaryData.fromString(
            "{\"type\":\"AzureSynapseArtifacts\",\"typeProperties\":{\"endpoint\":\"dataz\",\"authentication\":\"dataogdjwuybcppdvuo\",\"workspaceResourceId\":\"datavk\"},\"connectVia\":{\"referenceName\":\"mkupbnkcwauyl\",\"parameters\":{\"qzylempahyuxxe\":\"dataskrpyfrtluka\",\"rnhq\":\"datakeonp\"}},\"description\":\"uvvysphjkxgfmes\",\"parameters\":{\"oorvzhdncqcuwtp\":{\"type\":\"Bool\",\"defaultValue\":\"datafynvckxtanl\"}},\"annotations\":[\"dataq\",\"datanolspvxpiegxlzd\",\"dataatptzkmfvdrkcw\"],\"\":{\"frzzxirxxkmozkd\":\"datanwsffiahf\",\"vpyznjwm\":\"datazhrhki\",\"bzzwsesqytktvof\":\"datauuzny\"}}")
            .toObject(AzureSynapseArtifactsLinkedService.class);
        Assertions.assertEquals("mkupbnkcwauyl", model.connectVia().referenceName());
        Assertions.assertEquals("uvvysphjkxgfmes", model.description());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("oorvzhdncqcuwtp").type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureSynapseArtifactsLinkedService model = new AzureSynapseArtifactsLinkedService()
            .withConnectVia(new IntegrationRuntimeReference().withReferenceName("mkupbnkcwauyl")
                .withParameters(mapOf("qzylempahyuxxe", "dataskrpyfrtluka", "rnhq", "datakeonp")))
            .withDescription("uvvysphjkxgfmes")
            .withParameters(mapOf("oorvzhdncqcuwtp",
                new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("datafynvckxtanl")))
            .withAnnotations(Arrays.asList("dataq", "datanolspvxpiegxlzd", "dataatptzkmfvdrkcw"))
            .withEndpoint("dataz")
            .withAuthentication("dataogdjwuybcppdvuo")
            .withWorkspaceResourceId("datavk");
        model = BinaryData.fromObject(model).toObject(AzureSynapseArtifactsLinkedService.class);
        Assertions.assertEquals("mkupbnkcwauyl", model.connectVia().referenceName());
        Assertions.assertEquals("uvvysphjkxgfmes", model.description());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("oorvzhdncqcuwtp").type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
