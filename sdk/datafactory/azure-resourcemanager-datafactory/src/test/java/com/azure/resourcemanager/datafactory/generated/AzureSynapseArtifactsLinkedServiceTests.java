// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.AzureSynapseArtifactsLinkedService;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureSynapseArtifactsLinkedServiceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureSynapseArtifactsLinkedService model =
            BinaryData
                .fromString(
                    "{\"type\":\"AzureSynapseArtifacts\",\"typeProperties\":{\"endpoint\":\"datavvb\",\"authentication\":\"datanpriyttiqdcjg\",\"workspaceResourceId\":\"datacwmq\"},\"connectVia\":{\"referenceName\":\"woetjrfruc\",\"parameters\":{\"expothtpaqm\":\"datawdxbpvbsibzmvdey\",\"kymqmgudvy\":\"datawieshqiel\",\"lcwdg\":\"dataecuve\"}},\"description\":\"kjvrr\",\"parameters\":{\"doxpvqpblqubfpe\":{\"type\":\"Int\",\"defaultValue\":\"dataehyirsvr\"}},\"annotations\":[\"datagynheamzlqvaj\"],\"\":{\"sythuioixpfgqlw\":\"datavc\"}}")
                .toObject(AzureSynapseArtifactsLinkedService.class);
        Assertions.assertEquals("woetjrfruc", model.connectVia().referenceName());
        Assertions.assertEquals("kjvrr", model.description());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("doxpvqpblqubfpe").type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureSynapseArtifactsLinkedService model =
            new AzureSynapseArtifactsLinkedService()
                .withConnectVia(
                    new IntegrationRuntimeReference()
                        .withReferenceName("woetjrfruc")
                        .withParameters(
                            mapOf(
                                "expothtpaqm",
                                "datawdxbpvbsibzmvdey",
                                "kymqmgudvy",
                                "datawieshqiel",
                                "lcwdg",
                                "dataecuve")))
                .withDescription("kjvrr")
                .withParameters(
                    mapOf(
                        "doxpvqpblqubfpe",
                        new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("dataehyirsvr")))
                .withAnnotations(Arrays.asList("datagynheamzlqvaj"))
                .withEndpoint("datavvb")
                .withAuthentication("datanpriyttiqdcjg")
                .withWorkspaceResourceId("datacwmq");
        model = BinaryData.fromObject(model).toObject(AzureSynapseArtifactsLinkedService.class);
        Assertions.assertEquals("woetjrfruc", model.connectVia().referenceName());
        Assertions.assertEquals("kjvrr", model.description());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("doxpvqpblqubfpe").type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
