// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.AzureSynapseArtifactsLinkedService;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureSynapseArtifactsLinkedServiceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureSynapseArtifactsLinkedService model = BinaryData.fromString(
            "{\"type\":\"AzureSynapseArtifacts\",\"typeProperties\":{\"endpoint\":\"datalpcixpxxnyhivhyu\",\"authentication\":\"dataxyfbka\",\"workspaceResourceId\":\"datalaya\"},\"version\":\"dnovuduwwjohgcn\",\"connectVia\":{\"referenceName\":\"mcivhwwhyej\",\"parameters\":{\"fsqbcfqaqoveqowq\":\"datadfcfyzwkmr\"}},\"description\":\"ispasxwiic\",\"parameters\":{\"wsaxpbieehpvq\":{\"type\":\"Float\",\"defaultValue\":\"datahadndowkxq\"}},\"annotations\":[\"datarrjprygjgyovc\",\"datagqiismaggkt\"],\"\":{\"mjkronxmtrhw\":\"datakrbkkcx\",\"utyszhzlvkmirn\":\"datadfnc\"}}")
            .toObject(AzureSynapseArtifactsLinkedService.class);
        Assertions.assertEquals("dnovuduwwjohgcn", model.version());
        Assertions.assertEquals("mcivhwwhyej", model.connectVia().referenceName());
        Assertions.assertEquals("ispasxwiic", model.description());
        Assertions.assertEquals(ParameterType.FLOAT, model.parameters().get("wsaxpbieehpvq").type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureSynapseArtifactsLinkedService model
            = new AzureSynapseArtifactsLinkedService().withVersion("dnovuduwwjohgcn")
                .withConnectVia(new IntegrationRuntimeReference().withReferenceName("mcivhwwhyej")
                    .withParameters(mapOf("fsqbcfqaqoveqowq", "datadfcfyzwkmr")))
                .withDescription("ispasxwiic")
                .withParameters(mapOf("wsaxpbieehpvq",
                    new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("datahadndowkxq")))
                .withAnnotations(Arrays.asList("datarrjprygjgyovc", "datagqiismaggkt"))
                .withEndpoint("datalpcixpxxnyhivhyu")
                .withAuthentication("dataxyfbka")
                .withWorkspaceResourceId("datalaya");
        model = BinaryData.fromObject(model).toObject(AzureSynapseArtifactsLinkedService.class);
        Assertions.assertEquals("dnovuduwwjohgcn", model.version());
        Assertions.assertEquals("mcivhwwhyej", model.connectVia().referenceName());
        Assertions.assertEquals("ispasxwiic", model.description());
        Assertions.assertEquals(ParameterType.FLOAT, model.parameters().get("wsaxpbieehpvq").type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
