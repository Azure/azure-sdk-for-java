// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.AzureSynapseArtifactsLinkedService;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureSynapseArtifactsLinkedServiceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureSynapseArtifactsLinkedService model = BinaryData.fromString(
            "{\"type\":\"AzureSynapseArtifacts\",\"typeProperties\":{\"endpoint\":\"dataarjiriccu\",\"authentication\":\"datatjvrzdjg\",\"workspaceResourceId\":\"datafayvbsiaenvpzdbz\"},\"version\":\"zgaujvc\",\"connectVia\":{\"referenceName\":\"fybx\",\"parameters\":{\"efijpjiudnust\":\"dataceomsqarbtrkdn\",\"hbhue\":\"datamoxohgkd\",\"jvfrhyxlwqyo\":\"datauvrlxzq\",\"ernbj\":\"datasq\"}},\"description\":\"gmemky\",\"parameters\":{\"mkchjdxrbbhukx\":{\"type\":\"Array\",\"defaultValue\":\"datax\"}},\"annotations\":[\"datayrbeqpgad\"],\"\":{\"ctoqcezmznoej\":\"dataesgnxdvgxtefvs\",\"jy\":\"dataduyqb\",\"utxas\":\"dataajdpbnbpzxnopr\",\"iihggzqh\":\"dataighcxik\"}}")
            .toObject(AzureSynapseArtifactsLinkedService.class);
        Assertions.assertEquals("zgaujvc", model.version());
        Assertions.assertEquals("fybx", model.connectVia().referenceName());
        Assertions.assertEquals("gmemky", model.description());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("mkchjdxrbbhukx").type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureSynapseArtifactsLinkedService model = new AzureSynapseArtifactsLinkedService().withVersion("zgaujvc")
            .withConnectVia(new IntegrationRuntimeReference().withReferenceName("fybx")
                .withParameters(mapOf("efijpjiudnust", "dataceomsqarbtrkdn", "hbhue", "datamoxohgkd", "jvfrhyxlwqyo",
                    "datauvrlxzq", "ernbj", "datasq")))
            .withDescription("gmemky")
            .withParameters(mapOf("mkchjdxrbbhukx",
                new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("datax")))
            .withAnnotations(Arrays.asList("datayrbeqpgad"))
            .withEndpoint("dataarjiriccu")
            .withAuthentication("datatjvrzdjg")
            .withWorkspaceResourceId("datafayvbsiaenvpzdbz");
        model = BinaryData.fromObject(model).toObject(AzureSynapseArtifactsLinkedService.class);
        Assertions.assertEquals("zgaujvc", model.version());
        Assertions.assertEquals("fybx", model.connectVia().referenceName());
        Assertions.assertEquals("gmemky", model.description());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("mkchjdxrbbhukx").type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
