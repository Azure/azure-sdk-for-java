// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.UntilActivityTypeProperties;
import com.azure.resourcemanager.datafactory.models.Activity;
import com.azure.resourcemanager.datafactory.models.Expression;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class UntilActivityTypePropertiesTests {
    @Test
    public void testDeserialize() {
        UntilActivityTypeProperties model =
            BinaryData
                .fromString(
                    "{\"expression\":{\"value\":\"zuxlrarwpewsau\"},\"activities\":[{\"type\":\"Activity\",\"name\":\"jtighsxj\",\"description\":\"tnkqbala\",\"dependsOn\":[],\"userProperties\":[],\"\":{}},{\"type\":\"Activity\",\"name\":\"h\",\"description\":\"hjnhjiot\",\"dependsOn\":[],\"userProperties\":[],\"\":{}}]}")
                .toObject(UntilActivityTypeProperties.class);
        Assertions.assertEquals("zuxlrarwpewsau", model.expression().value());
        Assertions.assertEquals("jtighsxj", model.activities().get(0).name());
        Assertions.assertEquals("tnkqbala", model.activities().get(0).description());
    }

    @Test
    public void testSerialize() {
        UntilActivityTypeProperties model =
            new UntilActivityTypeProperties()
                .withExpression(new Expression().withValue("zuxlrarwpewsau"))
                .withActivities(
                    Arrays
                        .asList(
                            new Activity()
                                .withName("jtighsxj")
                                .withDescription("tnkqbala")
                                .withDependsOn(Arrays.asList())
                                .withUserProperties(Arrays.asList())
                                .withAdditionalProperties(mapOf("type", "Activity")),
                            new Activity()
                                .withName("h")
                                .withDescription("hjnhjiot")
                                .withDependsOn(Arrays.asList())
                                .withUserProperties(Arrays.asList())
                                .withAdditionalProperties(mapOf("type", "Activity"))));
        model = BinaryData.fromObject(model).toObject(UntilActivityTypeProperties.class);
        Assertions.assertEquals("zuxlrarwpewsau", model.expression().value());
        Assertions.assertEquals("jtighsxj", model.activities().get(0).name());
        Assertions.assertEquals("tnkqbala", model.activities().get(0).description());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
