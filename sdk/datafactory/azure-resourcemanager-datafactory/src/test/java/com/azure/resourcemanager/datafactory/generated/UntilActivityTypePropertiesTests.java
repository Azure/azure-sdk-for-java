// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.UntilActivityTypeProperties;
import com.azure.resourcemanager.datafactory.models.Activity;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.Expression;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class UntilActivityTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        UntilActivityTypeProperties model = BinaryData.fromString(
            "{\"expression\":{\"value\":\"skos\"},\"timeout\":\"datavclzutvqk\",\"activities\":[{\"type\":\"Activity\",\"name\":\"jm\",\"description\":\"fskqwjlohkaffyny\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"yijxkucxpqpax\",\"dependencyConditions\":[\"Failed\",\"Completed\",\"Failed\"],\"\":{\"ftiwbdm\":\"dataiufjnjgupjjppbal\",\"xgo\":\"datanuvawm\",\"yza\":\"datapzqrb\",\"qzmwxoogi\":\"datawrufiouafxp\"}}],\"userProperties\":[{\"name\":\"plzb\",\"value\":\"datavpuigtnjye\"},{\"name\":\"fvvi\",\"value\":\"dataxoitnqmiwlrijex\"}],\"\":{\"pyk\":\"datayve\",\"v\":\"datahrqusbtw\",\"vkxshkyluqxndmta\":\"datazgnxepapm\"}}]}")
            .toObject(UntilActivityTypeProperties.class);
        Assertions.assertEquals("skos", model.expression().value());
        Assertions.assertEquals("jm", model.activities().get(0).name());
        Assertions.assertEquals("fskqwjlohkaffyny", model.activities().get(0).description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.activities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.activities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("yijxkucxpqpax", model.activities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED,
            model.activities().get(0).dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("plzb", model.activities().get(0).userProperties().get(0).name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        UntilActivityTypeProperties model
            = new UntilActivityTypeProperties().withExpression(new Expression().withValue("skos"))
                .withTimeout("datavclzutvqk")
                .withActivities(Arrays.asList(new Activity().withName("jm")
                    .withDescription("fskqwjlohkaffyny")
                    .withState(ActivityState.ACTIVE)
                    .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SUCCEEDED)
                    .withDependsOn(Arrays.asList(new ActivityDependency().withActivity("yijxkucxpqpax")
                        .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED,
                            DependencyCondition.COMPLETED, DependencyCondition.FAILED))
                        .withAdditionalProperties(mapOf())))
                    .withUserProperties(Arrays.asList(new UserProperty().withName("plzb").withValue("datavpuigtnjye"),
                        new UserProperty().withName("fvvi").withValue("dataxoitnqmiwlrijex")))
                    .withAdditionalProperties(mapOf("type", "Activity"))));
        model = BinaryData.fromObject(model).toObject(UntilActivityTypeProperties.class);
        Assertions.assertEquals("skos", model.expression().value());
        Assertions.assertEquals("jm", model.activities().get(0).name());
        Assertions.assertEquals("fskqwjlohkaffyny", model.activities().get(0).description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.activities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.activities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("yijxkucxpqpax", model.activities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED,
            model.activities().get(0).dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("plzb", model.activities().get(0).userProperties().get(0).name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
