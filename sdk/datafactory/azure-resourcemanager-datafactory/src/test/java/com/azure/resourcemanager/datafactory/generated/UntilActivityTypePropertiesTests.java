// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.UntilActivityTypeProperties;
import com.azure.resourcemanager.datafactory.models.Activity;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.Expression;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class UntilActivityTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        UntilActivityTypeProperties model = BinaryData.fromString(
            "{\"expression\":{\"value\":\"enmuevq\"},\"timeout\":\"datas\",\"activities\":[{\"type\":\"Activity\",\"name\":\"golbpwegzdion\",\"description\":\"nespkxnhfd\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"qxnd\",\"dependencyConditions\":[\"Completed\",\"Succeeded\"],\"\":{\"afvxxiizkehfk\":\"dataqbicjh\",\"krwihbyufmuinhq\":\"dataoczxmw\",\"ih\":\"dataqfowx\",\"qxk\":\"dataxzdgotoonsduir\"}},{\"activity\":\"aeuhxnpa\",\"dependencyConditions\":[\"Completed\",\"Failed\",\"Failed\"],\"\":{\"gobu\":\"dataolfyq\",\"rwvlzbdfmhzgti\":\"datavnaxtbnjmjw\",\"et\":\"dataybimitgx\"}},{\"activity\":\"wloo\",\"dependencyConditions\":[\"Failed\",\"Succeeded\"],\"\":{\"xytvjezi\":\"databzrrreftwhii\"}}],\"userProperties\":[{\"name\":\"lfnbzekwoajb\",\"value\":\"datawrvckyhncqy\"},{\"name\":\"g\",\"value\":\"datavpxsdtnxg\"},{\"name\":\"wxmqyhtlnnpftay\",\"value\":\"datao\"},{\"name\":\"gxamhmqexyoy\",\"value\":\"datacwzkcreuf\"}],\"\":{\"sxybalsmia\":\"datavelcrwhrp\",\"qzypvc\":\"datauvbo\",\"luhkhiycddon\":\"databyyvxjelsjhgrvy\",\"bkez\":\"dataikujjdoelaw\"}}]}")
            .toObject(UntilActivityTypeProperties.class);
        Assertions.assertEquals("enmuevq", model.expression().value());
        Assertions.assertEquals("golbpwegzdion", model.activities().get(0).name());
        Assertions.assertEquals("nespkxnhfd", model.activities().get(0).description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.activities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.activities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("qxnd", model.activities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED,
            model.activities().get(0).dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("lfnbzekwoajb", model.activities().get(0).userProperties().get(0).name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        UntilActivityTypeProperties model
            = new UntilActivityTypeProperties().withExpression(new Expression().withValue("enmuevq"))
                .withTimeout("datas")
                .withActivities(Arrays.asList(new Activity()
                    .withName("golbpwegzdion").withDescription("nespkxnhfd").withState(
                        ActivityState.ACTIVE)
                    .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
                    .withDependsOn(Arrays.asList(
                        new ActivityDependency().withActivity("qxnd")
                            .withDependencyConditions(
                                Arrays.asList(DependencyCondition.COMPLETED, DependencyCondition.SUCCEEDED))
                            .withAdditionalProperties(mapOf()),
                        new ActivityDependency().withActivity("aeuhxnpa")
                            .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED,
                                DependencyCondition.FAILED, DependencyCondition.FAILED))
                            .withAdditionalProperties(mapOf()),
                        new ActivityDependency().withActivity("wloo")
                            .withDependencyConditions(
                                Arrays.asList(DependencyCondition.FAILED, DependencyCondition.SUCCEEDED))
                            .withAdditionalProperties(mapOf())))
                    .withUserProperties(
                        Arrays.asList(new UserProperty().withName("lfnbzekwoajb").withValue("datawrvckyhncqy"),
                            new UserProperty().withName("g").withValue("datavpxsdtnxg"),
                            new UserProperty().withName("wxmqyhtlnnpftay").withValue("datao"),
                            new UserProperty().withName("gxamhmqexyoy").withValue("datacwzkcreuf")))
                    .withAdditionalProperties(mapOf("type", "Activity"))));
        model = BinaryData.fromObject(model).toObject(UntilActivityTypeProperties.class);
        Assertions.assertEquals("enmuevq", model.expression().value());
        Assertions.assertEquals("golbpwegzdion", model.activities().get(0).name());
        Assertions.assertEquals("nespkxnhfd", model.activities().get(0).description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.activities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.activities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("qxnd", model.activities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED,
            model.activities().get(0).dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("lfnbzekwoajb", model.activities().get(0).userProperties().get(0).name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
