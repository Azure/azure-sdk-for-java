// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.UntilActivityTypeProperties;
import com.azure.resourcemanager.datafactory.models.Activity;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.Expression;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class UntilActivityTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        UntilActivityTypeProperties model = BinaryData.fromString(
            "{\"expression\":{\"value\":\"zzp\"},\"timeout\":\"datawgtmpytomftubh\",\"activities\":[{\"type\":\"Activity\",\"name\":\"wgbvpyjpaihh\",\"description\":\"azxfz\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"srdaoixgq\",\"dependencyConditions\":[\"Skipped\",\"Skipped\"],\"\":{\"yoimtfkj\":\"dataekotqhdgixknc\"}},{\"activity\":\"djs\",\"dependencyConditions\":[\"Skipped\"],\"\":{\"clg\":\"datahvccxuntghwcb\"}},{\"activity\":\"yfcbcakcq\",\"dependencyConditions\":[\"Skipped\",\"Completed\",\"Failed\"],\"\":{\"gvcm\":\"dataumlnfxboqvgwaiyw\"}}],\"userProperties\":[{\"name\":\"irjsznxzez\",\"value\":\"datanqmxirsp\"},{\"name\":\"hakrbewvzis\",\"value\":\"datanbourwv\"},{\"name\":\"nsdluq\",\"value\":\"datayxgmzyqftla\"}],\"\":{\"z\":\"dataoufnxtynusqzai\"}},{\"type\":\"Activity\",\"name\":\"w\",\"description\":\"lkwbwxcjfjuzwiw\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"hpuqlsdwt\",\"dependencyConditions\":[\"Completed\",\"Succeeded\",\"Failed\",\"Succeeded\"],\"\":{\"obs\":\"datalyxujqpccpvyc\"}},{\"activity\":\"ogjaubplfzjgl\",\"dependencyConditions\":[\"Skipped\",\"Failed\",\"Succeeded\",\"Failed\"],\"\":{\"tyqbtijyb\":\"datatnndiswycwplj\"}},{\"activity\":\"fwgclppwdfxhzvr\",\"dependencyConditions\":[\"Succeeded\",\"Succeeded\",\"Completed\",\"Succeeded\"],\"\":{\"rrevuzbxuubwjo\":\"datazakisipjgvmrb\",\"oniydgnxsgy\":\"datakldubqfbwffg\"}}],\"userProperties\":[{\"name\":\"mhlankosdfvmfy\",\"value\":\"datalefkh\"},{\"name\":\"iayb\",\"value\":\"dataivxv\"},{\"name\":\"wdfmqzndlgqtuq\",\"value\":\"dataczco\"},{\"name\":\"ctcwtxa\",\"value\":\"datafc\"}],\"\":{\"hbmwlfo\":\"datamsdodmrzsnin\",\"jphzxmcpsepkrdge\":\"datayt\"}},{\"type\":\"Activity\",\"name\":\"qzxkpxrful\",\"description\":\"hmnd\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"jmel\",\"dependencyConditions\":[\"Skipped\",\"Skipped\",\"Skipped\",\"Failed\"],\"\":{\"gfaiyvmpfebsummy\":\"dataoyliopbo\",\"ckuhgbrvh\":\"datarxnneqxsdupmr\",\"zvclzutvqkoi\":\"dataskos\",\"fskqwjlohkaffyny\":\"datamv\"}}],\"userProperties\":[{\"name\":\"qbyty\",\"value\":\"dataj\"}],\"\":{\"j\":\"datacxpqpaxkayvxegiu\",\"wbdmunuv\":\"datajgupjjppbalcft\"}}]}")
            .toObject(UntilActivityTypeProperties.class);
        Assertions.assertEquals("zzp", model.expression().value());
        Assertions.assertEquals("wgbvpyjpaihh", model.activities().get(0).name());
        Assertions.assertEquals("azxfz", model.activities().get(0).description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.activities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.activities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("srdaoixgq", model.activities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED,
            model.activities().get(0).dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("irjsznxzez", model.activities().get(0).userProperties().get(0).name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        UntilActivityTypeProperties model
            = new UntilActivityTypeProperties().withExpression(new Expression().withValue("zzp"))
                .withTimeout("datawgtmpytomftubh")
                .withActivities(Arrays.asList(
                    new Activity()
                        .withName("wgbvpyjpaihh").withDescription("azxfz").withState(
                            ActivityState.INACTIVE)
                        .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SUCCEEDED)
                        .withDependsOn(Arrays.asList(
                            new ActivityDependency().withActivity("srdaoixgq")
                                .withDependencyConditions(
                                    Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.SKIPPED))
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency().withActivity("djs")
                                .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED))
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency().withActivity("yfcbcakcq")
                                .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED,
                                    DependencyCondition.COMPLETED, DependencyCondition.FAILED))
                                .withAdditionalProperties(mapOf())))
                        .withUserProperties(
                            Arrays.asList(new UserProperty().withName("irjsznxzez").withValue("datanqmxirsp"),
                                new UserProperty().withName("hakrbewvzis")
                                    .withValue("datanbourwv"),
                                new UserProperty().withName("nsdluq").withValue("datayxgmzyqftla")))
                        .withAdditionalProperties(mapOf("type", "Activity")),
                    new Activity().withName("w").withDescription("lkwbwxcjfjuzwiw").withState(ActivityState.INACTIVE)
                        .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SUCCEEDED)
                        .withDependsOn(Arrays
                            .asList(
                                new ActivityDependency()
                                    .withActivity("hpuqlsdwt")
                                    .withDependencyConditions(
                                        Arrays.asList(DependencyCondition.COMPLETED, DependencyCondition.SUCCEEDED,
                                            DependencyCondition.FAILED, DependencyCondition.SUCCEEDED))
                                    .withAdditionalProperties(mapOf()),
                                new ActivityDependency().withActivity("ogjaubplfzjgl")
                                    .withDependencyConditions(
                                        Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.FAILED,
                                            DependencyCondition.SUCCEEDED, DependencyCondition.FAILED))
                                    .withAdditionalProperties(mapOf()),
                                new ActivityDependency().withActivity("fwgclppwdfxhzvr")
                                    .withDependencyConditions(
                                        Arrays.asList(DependencyCondition.SUCCEEDED, DependencyCondition.SUCCEEDED,
                                            DependencyCondition.COMPLETED, DependencyCondition.SUCCEEDED))
                                    .withAdditionalProperties(mapOf())))
                        .withUserProperties(
                            Arrays.asList(new UserProperty().withName("mhlankosdfvmfy").withValue("datalefkh"),
                                new UserProperty().withName("iayb").withValue("dataivxv"),
                                new UserProperty()
                                    .withName("wdfmqzndlgqtuq").withValue("dataczco"),
                                new UserProperty().withName("ctcwtxa").withValue("datafc")))
                        .withAdditionalProperties(mapOf("type", "Activity")),
                    new Activity().withName("qzxkpxrful").withDescription("hmnd").withState(ActivityState.INACTIVE)
                        .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
                        .withDependsOn(Arrays.asList(new ActivityDependency().withActivity("jmel")
                            .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED,
                                DependencyCondition.SKIPPED, DependencyCondition.SKIPPED, DependencyCondition.FAILED))
                            .withAdditionalProperties(mapOf())))
                        .withUserProperties(Arrays.asList(new UserProperty().withName("qbyty").withValue("dataj")))
                        .withAdditionalProperties(mapOf("type", "Activity"))));
        model = BinaryData.fromObject(model).toObject(UntilActivityTypeProperties.class);
        Assertions.assertEquals("zzp", model.expression().value());
        Assertions.assertEquals("wgbvpyjpaihh", model.activities().get(0).name());
        Assertions.assertEquals("azxfz", model.activities().get(0).description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.activities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.activities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("srdaoixgq", model.activities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED,
            model.activities().get(0).dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("irjsznxzez", model.activities().get(0).userProperties().get(0).name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
