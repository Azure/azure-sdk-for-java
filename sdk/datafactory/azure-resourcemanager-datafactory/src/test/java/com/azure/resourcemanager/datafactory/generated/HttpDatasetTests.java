// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetCompression;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.DatasetStorageFormat;
import com.azure.resourcemanager.datafactory.models.HttpDataset;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class HttpDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HttpDataset model = BinaryData.fromString(
            "{\"type\":\"HttpFile\",\"typeProperties\":{\"relativeUrl\":\"datayhbceevogir\",\"requestMethod\":\"dataw\",\"requestBody\":\"datatvuxeu\",\"additionalHeaders\":\"datadssijuaxxf\",\"format\":{\"type\":\"DatasetStorageFormat\",\"serializer\":\"datapkcpws\",\"deserializer\":\"datannmjun\",\"\":{\"bcyc\":\"dataxcltj\",\"sihxvtac\":\"dataqak\",\"pxpry\":\"datawf\"}},\"compression\":{\"type\":\"datasbubwhzqqgugwlux\",\"level\":\"datatqmmkdhwq\",\"\":{\"ucosvkkeer\":\"dataebagmfpkephuj\",\"lgnuee\":\"datavypaxpjpyi\",\"cgmbg\":\"datafpffbuqxknv\",\"zoksgqhb\":\"datayojfchicpare\"}}},\"description\":\"juxilozbl\",\"structure\":\"datarfldfljwtkbptsfl\",\"schema\":\"dataumbmwgftshfg\",\"linkedServiceName\":{\"referenceName\":\"uxuqiagskoi\",\"parameters\":{\"hskxpa\":\"datai\",\"rjugcfeb\":\"datawkgvnlfueyxfzibr\",\"bvr\":\"dataiuce\"}},\"parameters\":{\"qjzlwrduxntp\":{\"type\":\"String\",\"defaultValue\":\"dataknbdzwilsxry\"}},\"annotations\":[\"datagj\"],\"folder\":{\"name\":\"xfwf\"},\"\":{\"upjckiehdm\":\"dataveyfbkqynlzxeme\"}}")
            .toObject(HttpDataset.class);
        Assertions.assertEquals("juxilozbl", model.description());
        Assertions.assertEquals("uxuqiagskoi", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("qjzlwrduxntp").type());
        Assertions.assertEquals("xfwf", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HttpDataset model = new HttpDataset().withDescription("juxilozbl")
            .withStructure("datarfldfljwtkbptsfl")
            .withSchema("dataumbmwgftshfg")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("uxuqiagskoi")
                .withParameters(mapOf("hskxpa", "datai", "rjugcfeb", "datawkgvnlfueyxfzibr", "bvr", "dataiuce")))
            .withParameters(mapOf("qjzlwrduxntp",
                new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("dataknbdzwilsxry")))
            .withAnnotations(Arrays.asList("datagj"))
            .withFolder(new DatasetFolder().withName("xfwf"))
            .withRelativeUrl("datayhbceevogir")
            .withRequestMethod("dataw")
            .withRequestBody("datatvuxeu")
            .withAdditionalHeaders("datadssijuaxxf")
            .withFormat(new DatasetStorageFormat().withSerializer("datapkcpws")
                .withDeserializer("datannmjun")
                .withAdditionalProperties(mapOf("type", "DatasetStorageFormat")))
            .withCompression(new DatasetCompression().withType("datasbubwhzqqgugwlux")
                .withLevel("datatqmmkdhwq")
                .withAdditionalProperties(mapOf()));
        model = BinaryData.fromObject(model).toObject(HttpDataset.class);
        Assertions.assertEquals("juxilozbl", model.description());
        Assertions.assertEquals("uxuqiagskoi", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("qjzlwrduxntp").type());
        Assertions.assertEquals("xfwf", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
