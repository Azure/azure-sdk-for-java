// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.VerticaTableDataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class VerticaTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VerticaTableDataset model = BinaryData.fromString(
            "{\"type\":\"VerticaTable\",\"typeProperties\":{\"tableName\":\"datao\",\"table\":\"dataguhbnhogsezreneg\",\"schema\":\"datadtyzpx\"},\"description\":\"twkejmgem\",\"structure\":\"dataupehs\",\"schema\":\"datasdfvhrypezammpka\",\"linkedServiceName\":{\"referenceName\":\"vnpeukgnmf\",\"parameters\":{\"mlcsvk\":\"dataqnitr\",\"xlawmvdyqab\":\"datafpsrowshvfxj\"}},\"parameters\":{\"nyjyuwqlzwgd\":{\"type\":\"String\",\"defaultValue\":\"datafqdmll\"}},\"annotations\":[\"datawiril\"],\"folder\":{\"name\":\"trhqdoxdeg\"},\"\":{\"idpdaqermndd\":\"dataedpkwdtobpgd\",\"dureevivk\":\"datairqqclsaqife\",\"fpxeswctlfytb\":\"dataglioklsu\",\"ddfclmowu\":\"datatytvnpbgces\"}}")
            .toObject(VerticaTableDataset.class);
        Assertions.assertEquals("twkejmgem", model.description());
        Assertions.assertEquals("vnpeukgnmf", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("nyjyuwqlzwgd").type());
        Assertions.assertEquals("trhqdoxdeg", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VerticaTableDataset model = new VerticaTableDataset().withDescription("twkejmgem")
            .withStructure("dataupehs")
            .withSchema("datasdfvhrypezammpka")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("vnpeukgnmf")
                .withParameters(mapOf("mlcsvk", "dataqnitr", "xlawmvdyqab", "datafpsrowshvfxj")))
            .withParameters(mapOf("nyjyuwqlzwgd",
                new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("datafqdmll")))
            .withAnnotations(Arrays.asList("datawiril"))
            .withFolder(new DatasetFolder().withName("trhqdoxdeg"))
            .withTableName("datao")
            .withTable("dataguhbnhogsezreneg")
            .withSchemaTypePropertiesSchema("datadtyzpx");
        model = BinaryData.fromObject(model).toObject(VerticaTableDataset.class);
        Assertions.assertEquals("twkejmgem", model.description());
        Assertions.assertEquals("vnpeukgnmf", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("nyjyuwqlzwgd").type());
        Assertions.assertEquals("trhqdoxdeg", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
