// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.VerticaTableDataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class VerticaTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VerticaTableDataset model = BinaryData.fromString(
            "{\"type\":\"vmlkwkzlinv\",\"typeProperties\":{\"tableName\":\"datamjvegpdxtsa\",\"table\":\"datatcoojybolqox\",\"schema\":\"datatsl\"},\"description\":\"t\",\"structure\":\"dataxs\",\"schema\":\"dataekfxcs\",\"linkedServiceName\":{\"referenceName\":\"mzdo\",\"parameters\":{\"eohpl\":\"datakdpc\",\"edaxkuyorfjidqo\":\"datagcnbvmhvqp\",\"vfyihuzsbpwn\":\"dataaweog\",\"zgkooagrlwpame\":\"datafjcypazwiimd\"}},\"parameters\":{\"atfamrna\":{\"type\":\"Object\",\"defaultValue\":\"dataadewhuwxkyx\"},\"zwhomydxgtuqbv\":{\"type\":\"Int\",\"defaultValue\":\"datalxccprkiyf\"}},\"annotations\":[\"datazihirqvvketyd\",\"dataaqoktssgvqxer\",\"datarmh\",\"dataraqgb\"],\"folder\":{\"name\":\"vihylrxsiyzsyium\"},\"\":{\"ycfvernnkq\":\"datal\",\"oy\":\"datakayqivbigdrqgzet\",\"nmuxppwpcfmgr\":\"datat\"}}")
            .toObject(VerticaTableDataset.class);
        Assertions.assertEquals("t", model.description());
        Assertions.assertEquals("mzdo", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.OBJECT, model.parameters().get("atfamrna").type());
        Assertions.assertEquals("vihylrxsiyzsyium", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VerticaTableDataset model = new VerticaTableDataset().withDescription("t")
            .withStructure("dataxs")
            .withSchema("dataekfxcs")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("mzdo")
                .withParameters(mapOf("eohpl", "datakdpc", "edaxkuyorfjidqo", "datagcnbvmhvqp", "vfyihuzsbpwn",
                    "dataaweog", "zgkooagrlwpame", "datafjcypazwiimd")))
            .withParameters(mapOf("atfamrna",
                new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("dataadewhuwxkyx"),
                "zwhomydxgtuqbv",
                new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("datalxccprkiyf")))
            .withAnnotations(Arrays.asList("datazihirqvvketyd", "dataaqoktssgvqxer", "datarmh", "dataraqgb"))
            .withFolder(new DatasetFolder().withName("vihylrxsiyzsyium"))
            .withTableName("datamjvegpdxtsa")
            .withTable("datatcoojybolqox")
            .withSchemaTypePropertiesSchema("datatsl");
        model = BinaryData.fromObject(model).toObject(VerticaTableDataset.class);
        Assertions.assertEquals("t", model.description());
        Assertions.assertEquals("mzdo", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.OBJECT, model.parameters().get("atfamrna").type());
        Assertions.assertEquals("vihylrxsiyzsyium", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
