// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.VerticaTableDataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class VerticaTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VerticaTableDataset model =
            BinaryData
                .fromString(
                    "{\"type\":\"VerticaTable\",\"typeProperties\":{\"tableName\":\"dataxbofpr\",\"table\":\"dataiva\",\"schema\":\"datasbfzl\"},\"description\":\"jr\",\"structure\":\"datasfv\",\"schema\":\"datahqxtm\",\"linkedServiceName\":{\"referenceName\":\"lmfcleuovelvsp\",\"parameters\":{\"jtoudode\":\"datajtez\",\"sr\":\"datawmv\",\"emt\":\"dataciexu\"}},\"parameters\":{\"x\":{\"type\":\"Bool\",\"defaultValue\":\"dataymmcgskscb\"},\"wa\":{\"type\":\"SecureString\",\"defaultValue\":\"dataxicjojxolknsh\"},\"nchzz\":{\"type\":\"Int\",\"defaultValue\":\"databhmbglmnlbnat\"}},\"annotations\":[\"dataxortd\",\"datazvhbujk\",\"datahophqwo\"],\"folder\":{\"name\":\"ccqtwsrbf\"},\"\":{\"dzfbv\":\"dataii\",\"jtshlwvrsksdzmh\":\"dataxrvnhhmfsnqp\",\"pwfbwoetxiz\":\"datatsy\"}}")
                .toObject(VerticaTableDataset.class);
        Assertions.assertEquals("jr", model.description());
        Assertions.assertEquals("lmfcleuovelvsp", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("x").type());
        Assertions.assertEquals("ccqtwsrbf", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VerticaTableDataset model =
            new VerticaTableDataset()
                .withDescription("jr")
                .withStructure("datasfv")
                .withSchema("datahqxtm")
                .withLinkedServiceName(
                    new LinkedServiceReference()
                        .withReferenceName("lmfcleuovelvsp")
                        .withParameters(mapOf("jtoudode", "datajtez", "sr", "datawmv", "emt", "dataciexu")))
                .withParameters(
                    mapOf(
                        "x",
                        new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("dataymmcgskscb"),
                        "wa",
                        new ParameterSpecification()
                            .withType(ParameterType.SECURE_STRING)
                            .withDefaultValue("dataxicjojxolknsh"),
                        "nchzz",
                        new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("databhmbglmnlbnat")))
                .withAnnotations(Arrays.asList("dataxortd", "datazvhbujk", "datahophqwo"))
                .withFolder(new DatasetFolder().withName("ccqtwsrbf"))
                .withTableName("dataxbofpr")
                .withTable("dataiva")
                .withSchemaTypePropertiesSchema("datasbfzl");
        model = BinaryData.fromObject(model).toObject(VerticaTableDataset.class);
        Assertions.assertEquals("jr", model.description());
        Assertions.assertEquals("lmfcleuovelvsp", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("x").type());
        Assertions.assertEquals("ccqtwsrbf", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
