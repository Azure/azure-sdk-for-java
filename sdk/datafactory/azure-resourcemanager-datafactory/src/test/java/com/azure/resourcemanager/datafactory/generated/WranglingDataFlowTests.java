// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DataFlowFolder;
import com.azure.resourcemanager.datafactory.models.DataFlowReference;
import com.azure.resourcemanager.datafactory.models.DataFlowReferenceType;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.PowerQuerySource;
import com.azure.resourcemanager.datafactory.models.WranglingDataFlow;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class WranglingDataFlowTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WranglingDataFlow model = BinaryData.fromString(
            "{\"type\":\"WranglingDataFlow\",\"typeProperties\":{\"sources\":[{\"script\":\"niucbdaombwiinj\",\"schemaLinkedService\":{\"referenceName\":\"l\",\"parameters\":{\"owavvqxuajgcqw\":\"datale\",\"i\":\"datalynkgfcfdruw\",\"byokvjgbzsxe\":\"dataxxtclhuulri\",\"yhcdjwsuoardnag\":\"datarsltt\"}},\"name\":\"tpufpbpgnrholhu\",\"description\":\"fwxi\",\"dataset\":{\"referenceName\":\"kysolsyjprxs\",\"parameters\":{\"hfvhuwzbxpcqz\":\"datadmcvhtbbz\",\"lrrskap\":\"dataihotjecohmxv\"}},\"linkedService\":{\"referenceName\":\"wie\",\"parameters\":{\"imyc\":\"datayaderltfokyks\",\"rsejegprkj\":\"datagrvkcxzznnuif\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"rjmwvvbtuqkxxi\",\"datasetParameters\":\"datagxql\",\"parameters\":{\"vjaqu\":\"dataotjgxieqfkyfhi\"},\"\":{\"mj\":\"dataynvskpajbmgeume\",\"apeqiscrpil\":\"dataxcbccwkqmt\"}}},{\"script\":\"trqrejda\",\"schemaLinkedService\":{\"referenceName\":\"uqimldahlfxl\",\"parameters\":{\"nfsncs\":\"datafmuad\",\"tybnxgztlcgctj\":\"dataiioshjgcz\",\"ywjzebecuvlbefvw\":\"datahfjv\",\"wpsyxjij\":\"dataljkxpylrwoxz\"}},\"name\":\"ypdvrbkerdkdkga\",\"description\":\"wjxildfkcefeyg\",\"dataset\":{\"referenceName\":\"pjois\",\"parameters\":{\"why\":\"dataaybdjnxumentqon\",\"lwivqt\":\"dataxym\",\"bfajcywhjqwmchq\":\"datawlhlsycoybajasq\"}},\"linkedService\":{\"referenceName\":\"tfxcpupuk\",\"parameters\":{\"pwdlvwti\":\"dataj\",\"pultas\":\"datasmosaonhqnam\",\"bkajlcyizy\":\"dataaekewnazea\",\"e\":\"datadcvxodkrvfsxxby\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"vgecpwgoljtzx\",\"datasetParameters\":\"dataxsdobygoogxqapjx\",\"parameters\":{\"nosdkvi\":\"datayjfucsaod\",\"trnzpducdaaktu\":\"datafasgm\"},\"\":{\"kpp\":\"datazboimyfpqdo\",\"ikff\":\"datawyytfvpctf\"}}},{\"script\":\"g\",\"schemaLinkedService\":{\"referenceName\":\"hznwhvuldbkk\",\"parameters\":{\"gawgazmxjqi\":\"datakj\",\"jjsbcmlzaahzbhur\":\"datah\",\"lirh\":\"dataolk\"}},\"name\":\"mojusuz\",\"description\":\"jzc\",\"dataset\":{\"referenceName\":\"axoialahfxwccokd\",\"parameters\":{\"nuhhoqeqshav\":\"datakmkcz\",\"rqolnthbb\":\"datajqkx\",\"ceyjnc\":\"datakgzukwdrnzkjth\"}},\"linkedService\":{\"referenceName\":\"lfuyfjbpfiddhlr\",\"parameters\":{\"lqkrs\":\"datacqyjmqrfuiocus\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"hxuddqm\",\"datasetParameters\":\"dataffisjmrkkhmwdmd\",\"parameters\":{\"xokwtjawhvagnqfq\":\"dataq\",\"caymjchtvsnvlaq\":\"datadlcvmyo\",\"bczothymgobllms\":\"datanzyzawatuwqko\",\"neakh\":\"datawgwima\"},\"\":{\"gvoogxkfna\":\"dataobcyanrfvqtvk\"}}}],\"script\":\"qymhcctopuow\",\"documentLocale\":\"nskby\"},\"description\":\"uhczy\",\"annotations\":[\"datahajpxecxqnwhsc\",\"datazawmvgxsmp\"],\"folder\":{\"name\":\"wirfljf\"}}")
            .toObject(WranglingDataFlow.class);
        Assertions.assertEquals("uhczy", model.description());
        Assertions.assertEquals("wirfljf", model.folder().name());
        Assertions.assertEquals("tpufpbpgnrholhu", model.sources().get(0).name());
        Assertions.assertEquals("fwxi", model.sources().get(0).description());
        Assertions.assertEquals("kysolsyjprxs", model.sources().get(0).dataset().referenceName());
        Assertions.assertEquals("wie", model.sources().get(0).linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.sources().get(0).flowlet().type());
        Assertions.assertEquals("rjmwvvbtuqkxxi", model.sources().get(0).flowlet().referenceName());
        Assertions.assertEquals("l", model.sources().get(0).schemaLinkedService().referenceName());
        Assertions.assertEquals("niucbdaombwiinj", model.sources().get(0).script());
        Assertions.assertEquals("qymhcctopuow", model.script());
        Assertions.assertEquals("nskby", model.documentLocale());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WranglingDataFlow model = new WranglingDataFlow().withDescription("uhczy")
            .withAnnotations(Arrays.asList("datahajpxecxqnwhsc", "datazawmvgxsmp"))
            .withFolder(new DataFlowFolder().withName("wirfljf"))
            .withSources(Arrays.asList(
                new PowerQuerySource().withName("tpufpbpgnrholhu")
                    .withDescription("fwxi")
                    .withDataset(new DatasetReference().withReferenceName("kysolsyjprxs")
                        .withParameters(mapOf("hfvhuwzbxpcqz", "datadmcvhtbbz", "lrrskap", "dataihotjecohmxv")))
                    .withLinkedService(new LinkedServiceReference().withReferenceName("wie")
                        .withParameters(mapOf("imyc", "datayaderltfokyks", "rsejegprkj", "datagrvkcxzznnuif")))
                    .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                        .withReferenceName("rjmwvvbtuqkxxi")
                        .withDatasetParameters("datagxql")
                        .withParameters(mapOf("vjaqu", "dataotjgxieqfkyfhi"))
                        .withAdditionalProperties(mapOf()))
                    .withSchemaLinkedService(new LinkedServiceReference().withReferenceName("l")
                        .withParameters(mapOf("owavvqxuajgcqw", "datale", "i", "datalynkgfcfdruw", "byokvjgbzsxe",
                            "dataxxtclhuulri", "yhcdjwsuoardnag", "datarsltt")))
                    .withScript("niucbdaombwiinj"),
                new PowerQuerySource().withName("ypdvrbkerdkdkga")
                    .withDescription("wjxildfkcefeyg")
                    .withDataset(new DatasetReference().withReferenceName("pjois")
                        .withParameters(mapOf("why", "dataaybdjnxumentqon", "lwivqt", "dataxym", "bfajcywhjqwmchq",
                            "datawlhlsycoybajasq")))
                    .withLinkedService(new LinkedServiceReference().withReferenceName("tfxcpupuk")
                        .withParameters(mapOf("pwdlvwti", "dataj", "pultas", "datasmosaonhqnam", "bkajlcyizy",
                            "dataaekewnazea", "e", "datadcvxodkrvfsxxby")))
                    .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                        .withReferenceName("vgecpwgoljtzx")
                        .withDatasetParameters("dataxsdobygoogxqapjx")
                        .withParameters(mapOf("nosdkvi", "datayjfucsaod", "trnzpducdaaktu", "datafasgm"))
                        .withAdditionalProperties(mapOf()))
                    .withSchemaLinkedService(new LinkedServiceReference().withReferenceName("uqimldahlfxl")
                        .withParameters(mapOf("nfsncs", "datafmuad", "tybnxgztlcgctj", "dataiioshjgcz",
                            "ywjzebecuvlbefvw", "datahfjv", "wpsyxjij", "dataljkxpylrwoxz")))
                    .withScript("trqrejda"),
                new PowerQuerySource().withName("mojusuz")
                    .withDescription("jzc")
                    .withDataset(new DatasetReference().withReferenceName("axoialahfxwccokd")
                        .withParameters(mapOf("nuhhoqeqshav", "datakmkcz", "rqolnthbb", "datajqkx", "ceyjnc",
                            "datakgzukwdrnzkjth")))
                    .withLinkedService(new LinkedServiceReference().withReferenceName("lfuyfjbpfiddhlr")
                        .withParameters(mapOf("lqkrs", "datacqyjmqrfuiocus")))
                    .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                        .withReferenceName("hxuddqm")
                        .withDatasetParameters("dataffisjmrkkhmwdmd")
                        .withParameters(mapOf("xokwtjawhvagnqfq", "dataq", "caymjchtvsnvlaq", "datadlcvmyo",
                            "bczothymgobllms", "datanzyzawatuwqko", "neakh", "datawgwima"))
                        .withAdditionalProperties(mapOf()))
                    .withSchemaLinkedService(new LinkedServiceReference().withReferenceName("hznwhvuldbkk")
                        .withParameters(mapOf("gawgazmxjqi", "datakj", "jjsbcmlzaahzbhur", "datah", "lirh", "dataolk")))
                    .withScript("g")))
            .withScript("qymhcctopuow")
            .withDocumentLocale("nskby");
        model = BinaryData.fromObject(model).toObject(WranglingDataFlow.class);
        Assertions.assertEquals("uhczy", model.description());
        Assertions.assertEquals("wirfljf", model.folder().name());
        Assertions.assertEquals("tpufpbpgnrholhu", model.sources().get(0).name());
        Assertions.assertEquals("fwxi", model.sources().get(0).description());
        Assertions.assertEquals("kysolsyjprxs", model.sources().get(0).dataset().referenceName());
        Assertions.assertEquals("wie", model.sources().get(0).linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.sources().get(0).flowlet().type());
        Assertions.assertEquals("rjmwvvbtuqkxxi", model.sources().get(0).flowlet().referenceName());
        Assertions.assertEquals("l", model.sources().get(0).schemaLinkedService().referenceName());
        Assertions.assertEquals("niucbdaombwiinj", model.sources().get(0).script());
        Assertions.assertEquals("qymhcctopuow", model.script());
        Assertions.assertEquals("nskby", model.documentLocale());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
