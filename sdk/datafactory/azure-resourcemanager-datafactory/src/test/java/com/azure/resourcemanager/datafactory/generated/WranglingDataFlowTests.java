// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DataFlowFolder;
import com.azure.resourcemanager.datafactory.models.DataFlowReference;
import com.azure.resourcemanager.datafactory.models.DataFlowReferenceType;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.PowerQuerySource;
import com.azure.resourcemanager.datafactory.models.WranglingDataFlow;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class WranglingDataFlowTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WranglingDataFlow model =
            BinaryData
                .fromString(
                    "{\"type\":\"WranglingDataFlow\",\"typeProperties\":{\"sources\":[{\"script\":\"dawsxmrsz\",\"schemaLinkedService\":{\"referenceName\":\"nimx\",\"parameters\":{\"mnb\":\"dataerxrzutylcurza\",\"bjmbnvynfaooeac\":\"dataqaeht\"}},\"name\":\"edcgl\",\"description\":\"akd\",\"dataset\":{\"referenceName\":\"dahzllrqm\",\"parameters\":{\"oiduyqypff\":\"databyx\",\"yhbrjjta\":\"datanoiicsu\",\"sxxhdodp\":\"dataxrdsjrholuqwg\"}},\"linkedService\":{\"referenceName\":\"yblvtbdmvsbyi\",\"parameters\":{\"jfb\":\"datalqpvekmk\",\"gdusxurs\":\"datatlo\",\"iqrizfwihvaan\":\"dataivuxcjkcoqwczs\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"nhjrfdmfd\",\"datasetParameters\":\"datab\",\"parameters\":{\"d\":\"dataxjfwt\",\"fedyuep\":\"datakkauigvmuafmc\",\"eocfkumcfjxok\":\"datavpltidajjvy\",\"svfnkwm\":\"dataelsy\"},\"\":{\"ugjqyckgtxkrdt\":\"datajekrknfd\",\"jdkl\":\"datalcr\",\"svobchkxfp\":\"datatcsubmzoo\",\"nkkw\":\"datahdyslbklglm\"}}}],\"script\":\"qshwyqxridt\",\"documentLocale\":\"saqjmkgx\"},\"description\":\"queu\",\"annotations\":[\"dataztpziizevjykof\",\"dataezefkhkqtwqlepjj\",\"datakca\",\"datafwzcntogffjwaj\"],\"folder\":{\"name\":\"wzvaqkifmxaw\"}}")
                .toObject(WranglingDataFlow.class);
        Assertions.assertEquals("queu", model.description());
        Assertions.assertEquals("wzvaqkifmxaw", model.folder().name());
        Assertions.assertEquals("edcgl", model.sources().get(0).name());
        Assertions.assertEquals("akd", model.sources().get(0).description());
        Assertions.assertEquals("dahzllrqm", model.sources().get(0).dataset().referenceName());
        Assertions.assertEquals("yblvtbdmvsbyi", model.sources().get(0).linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.sources().get(0).flowlet().type());
        Assertions.assertEquals("nhjrfdmfd", model.sources().get(0).flowlet().referenceName());
        Assertions.assertEquals("nimx", model.sources().get(0).schemaLinkedService().referenceName());
        Assertions.assertEquals("dawsxmrsz", model.sources().get(0).script());
        Assertions.assertEquals("qshwyqxridt", model.script());
        Assertions.assertEquals("saqjmkgx", model.documentLocale());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WranglingDataFlow model =
            new WranglingDataFlow()
                .withDescription("queu")
                .withAnnotations(
                    Arrays.asList("dataztpziizevjykof", "dataezefkhkqtwqlepjj", "datakca", "datafwzcntogffjwaj"))
                .withFolder(new DataFlowFolder().withName("wzvaqkifmxaw"))
                .withSources(
                    Arrays
                        .asList(
                            new PowerQuerySource()
                                .withName("edcgl")
                                .withDescription("akd")
                                .withDataset(
                                    new DatasetReference()
                                        .withReferenceName("dahzllrqm")
                                        .withParameters(
                                            mapOf(
                                                "oiduyqypff",
                                                "databyx",
                                                "yhbrjjta",
                                                "datanoiicsu",
                                                "sxxhdodp",
                                                "dataxrdsjrholuqwg")))
                                .withLinkedService(
                                    new LinkedServiceReference()
                                        .withReferenceName("yblvtbdmvsbyi")
                                        .withParameters(
                                            mapOf(
                                                "jfb",
                                                "datalqpvekmk",
                                                "gdusxurs",
                                                "datatlo",
                                                "iqrizfwihvaan",
                                                "dataivuxcjkcoqwczs")))
                                .withFlowlet(
                                    new DataFlowReference()
                                        .withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                                        .withReferenceName("nhjrfdmfd")
                                        .withDatasetParameters("datab")
                                        .withParameters(
                                            mapOf(
                                                "d",
                                                "dataxjfwt",
                                                "fedyuep",
                                                "datakkauigvmuafmc",
                                                "eocfkumcfjxok",
                                                "datavpltidajjvy",
                                                "svfnkwm",
                                                "dataelsy"))
                                        .withAdditionalProperties(mapOf()))
                                .withSchemaLinkedService(
                                    new LinkedServiceReference()
                                        .withReferenceName("nimx")
                                        .withParameters(
                                            mapOf("mnb", "dataerxrzutylcurza", "bjmbnvynfaooeac", "dataqaeht")))
                                .withScript("dawsxmrsz")))
                .withScript("qshwyqxridt")
                .withDocumentLocale("saqjmkgx");
        model = BinaryData.fromObject(model).toObject(WranglingDataFlow.class);
        Assertions.assertEquals("queu", model.description());
        Assertions.assertEquals("wzvaqkifmxaw", model.folder().name());
        Assertions.assertEquals("edcgl", model.sources().get(0).name());
        Assertions.assertEquals("akd", model.sources().get(0).description());
        Assertions.assertEquals("dahzllrqm", model.sources().get(0).dataset().referenceName());
        Assertions.assertEquals("yblvtbdmvsbyi", model.sources().get(0).linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.sources().get(0).flowlet().type());
        Assertions.assertEquals("nhjrfdmfd", model.sources().get(0).flowlet().referenceName());
        Assertions.assertEquals("nimx", model.sources().get(0).schemaLinkedService().referenceName());
        Assertions.assertEquals("dawsxmrsz", model.sources().get(0).script());
        Assertions.assertEquals("qshwyqxridt", model.script());
        Assertions.assertEquals("saqjmkgx", model.documentLocale());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
