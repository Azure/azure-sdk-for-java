// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DataFlowFolder;
import com.azure.resourcemanager.datafactory.models.DataFlowReference;
import com.azure.resourcemanager.datafactory.models.DataFlowReferenceType;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.PowerQuerySource;
import com.azure.resourcemanager.datafactory.models.WranglingDataFlow;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class WranglingDataFlowTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WranglingDataFlow model = BinaryData.fromString(
            "{\"type\":\"lzy\",\"typeProperties\":{\"sources\":[{\"script\":\"gygnhrkombc\",\"schemaLinkedService\":{\"referenceName\":\"ajdopggor\",\"parameters\":{\"fyrlmwkptskwxj\":\"dataqtrotpvclp\",\"bputmgvmuyakml\":\"datavhxccbmkakmkoo\",\"flzqjimejtgzjxx\":\"dataktfowzkroyrdur\"}},\"name\":\"fejlzuqloiw\",\"description\":\"yyzivrmitcd\",\"dataset\":{\"referenceName\":\"hchwhrktjleif\",\"parameters\":{\"fnsmycjowly\":\"dataiplh\",\"zbuw\":\"datayzmudsqcmhnx\"}},\"linkedService\":{\"referenceName\":\"machbkv\",\"parameters\":{\"plehmumk\":\"databjrmvgo\",\"dpr\":\"datadllc\",\"goxsstci\":\"datanhkgq\",\"rrynjcwmhly\":\"datarak\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"ukxrke\",\"datasetParameters\":\"datapequlrlzaudgjtf\",\"parameters\":{\"dwnhczbutoucgjti\":\"dataakkuc\",\"qqwwvgwks\":\"datajwayhi\",\"abv\":\"datavlizedvb\",\"wkhojqttbspvkhg\":\"datasrgekzyqxadyfhb\"},\"\":{\"sf\":\"datajsgyzstujrzxrk\",\"qwrldaxur\":\"datarlduyehiiittugy\"}}}],\"script\":\"azcsozjvx\",\"documentLocale\":\"ciggbnvtxof\"},\"description\":\"hoeamoeobdo\",\"annotations\":[\"datafpnimtwuuhaueg\",\"datakwmnfeub\"],\"folder\":{\"name\":\"yrkwfugiph\"}}")
            .toObject(WranglingDataFlow.class);
        Assertions.assertEquals("hoeamoeobdo", model.description());
        Assertions.assertEquals("yrkwfugiph", model.folder().name());
        Assertions.assertEquals("fejlzuqloiw", model.sources().get(0).name());
        Assertions.assertEquals("yyzivrmitcd", model.sources().get(0).description());
        Assertions.assertEquals("hchwhrktjleif", model.sources().get(0).dataset().referenceName());
        Assertions.assertEquals("machbkv", model.sources().get(0).linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.sources().get(0).flowlet().type());
        Assertions.assertEquals("ukxrke", model.sources().get(0).flowlet().referenceName());
        Assertions.assertEquals("ajdopggor", model.sources().get(0).schemaLinkedService().referenceName());
        Assertions.assertEquals("gygnhrkombc", model.sources().get(0).script());
        Assertions.assertEquals("azcsozjvx", model.script());
        Assertions.assertEquals("ciggbnvtxof", model.documentLocale());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WranglingDataFlow model = new WranglingDataFlow().withDescription("hoeamoeobdo")
            .withAnnotations(Arrays.asList("datafpnimtwuuhaueg", "datakwmnfeub"))
            .withFolder(new DataFlowFolder().withName("yrkwfugiph"))
            .withSources(Arrays.asList(new PowerQuerySource().withName("fejlzuqloiw")
                .withDescription("yyzivrmitcd")
                .withDataset(new DatasetReference().withReferenceName("hchwhrktjleif")
                    .withParameters(mapOf("fnsmycjowly", "dataiplh", "zbuw", "datayzmudsqcmhnx")))
                .withLinkedService(new LinkedServiceReference().withReferenceName("machbkv")
                    .withParameters(mapOf("plehmumk", "databjrmvgo", "dpr", "datadllc", "goxsstci", "datanhkgq",
                        "rrynjcwmhly", "datarak")))
                .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                    .withReferenceName("ukxrke")
                    .withDatasetParameters("datapequlrlzaudgjtf")
                    .withParameters(mapOf("dwnhczbutoucgjti", "dataakkuc", "qqwwvgwks", "datajwayhi", "abv",
                        "datavlizedvb", "wkhojqttbspvkhg", "datasrgekzyqxadyfhb"))
                    .withAdditionalProperties(mapOf()))
                .withSchemaLinkedService(new LinkedServiceReference().withReferenceName("ajdopggor")
                    .withParameters(mapOf("fyrlmwkptskwxj", "dataqtrotpvclp", "bputmgvmuyakml", "datavhxccbmkakmkoo",
                        "flzqjimejtgzjxx", "dataktfowzkroyrdur")))
                .withScript("gygnhrkombc")))
            .withScript("azcsozjvx")
            .withDocumentLocale("ciggbnvtxof");
        model = BinaryData.fromObject(model).toObject(WranglingDataFlow.class);
        Assertions.assertEquals("hoeamoeobdo", model.description());
        Assertions.assertEquals("yrkwfugiph", model.folder().name());
        Assertions.assertEquals("fejlzuqloiw", model.sources().get(0).name());
        Assertions.assertEquals("yyzivrmitcd", model.sources().get(0).description());
        Assertions.assertEquals("hchwhrktjleif", model.sources().get(0).dataset().referenceName());
        Assertions.assertEquals("machbkv", model.sources().get(0).linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.sources().get(0).flowlet().type());
        Assertions.assertEquals("ukxrke", model.sources().get(0).flowlet().referenceName());
        Assertions.assertEquals("ajdopggor", model.sources().get(0).schemaLinkedService().referenceName());
        Assertions.assertEquals("gygnhrkombc", model.sources().get(0).script());
        Assertions.assertEquals("azcsozjvx", model.script());
        Assertions.assertEquals("ciggbnvtxof", model.documentLocale());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
