// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.GoogleBigQueryV2ObjectDataset;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class GoogleBigQueryV2ObjectDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        GoogleBigQueryV2ObjectDataset model = BinaryData.fromString(
            "{\"type\":\"uzlweo\",\"typeProperties\":{\"table\":\"dataqocy\",\"dataset\":\"datayineuaxpmezit\"},\"description\":\"foafzdypz\",\"structure\":\"datalmndhgwhlbpjuaj\",\"schema\":\"dataxav\",\"linkedServiceName\":{\"referenceName\":\"itnwlyhbujysv\",\"parameters\":{\"btpgnq\":\"datayddbhatm\"}},\"parameters\":{\"pkdn\":{\"type\":\"Array\",\"defaultValue\":\"datarjewihcigaahmdf\"}},\"annotations\":[\"dataz\",\"datatertnzrrwsc\"],\"folder\":{\"name\":\"hdwi\"},\"\":{\"jy\":\"datatol\",\"xsg\":\"datakr\",\"thqwppvihb\":\"dataaknk\"}}")
            .toObject(GoogleBigQueryV2ObjectDataset.class);
        Assertions.assertEquals("foafzdypz", model.description());
        Assertions.assertEquals("itnwlyhbujysv", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("pkdn").type());
        Assertions.assertEquals("hdwi", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        GoogleBigQueryV2ObjectDataset model = new GoogleBigQueryV2ObjectDataset().withDescription("foafzdypz")
            .withStructure("datalmndhgwhlbpjuaj")
            .withSchema("dataxav")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("itnwlyhbujysv")
                .withParameters(mapOf("btpgnq", "datayddbhatm")))
            .withParameters(mapOf("pkdn",
                new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("datarjewihcigaahmdf")))
            .withAnnotations(Arrays.asList("dataz", "datatertnzrrwsc"))
            .withFolder(new DatasetFolder().withName("hdwi"))
            .withTable("dataqocy")
            .withDataset("datayineuaxpmezit");
        model = BinaryData.fromObject(model).toObject(GoogleBigQueryV2ObjectDataset.class);
        Assertions.assertEquals("foafzdypz", model.description());
        Assertions.assertEquals("itnwlyhbujysv", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("pkdn").type());
        Assertions.assertEquals("hdwi", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
