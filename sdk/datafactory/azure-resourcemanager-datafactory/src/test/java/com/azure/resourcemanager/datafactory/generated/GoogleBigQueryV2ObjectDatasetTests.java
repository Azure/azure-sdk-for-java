// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.GoogleBigQueryV2ObjectDataset;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class GoogleBigQueryV2ObjectDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        GoogleBigQueryV2ObjectDataset model = BinaryData.fromString(
            "{\"type\":\"GoogleBigQueryV2Object\",\"typeProperties\":{\"table\":\"datancoqxtvytzq\",\"dataset\":\"dataldjvzmxy\"},\"description\":\"zz\",\"structure\":\"datajv\",\"schema\":\"datazbdbrlbo\",\"linkedServiceName\":{\"referenceName\":\"ltyo\",\"parameters\":{\"sokrlnrpeyl\":\"databibtkeiecupmwx\",\"dgiql\":\"dataiiul\"}},\"parameters\":{\"vunknsgvxhxr\":{\"type\":\"Object\",\"defaultValue\":\"dataw\"},\"yfjvifbmojtehq\":{\"type\":\"SecureString\",\"defaultValue\":\"datatrtc\"},\"mbhukdfpknvk\":{\"type\":\"Int\",\"defaultValue\":\"datatrcoufk\"}},\"annotations\":[\"datazje\"],\"folder\":{\"name\":\"meo\"},\"\":{\"knckkfxmuqeqkw\":\"datajl\",\"hdtezgfctu\":\"dataphfvsftsstwlpxca\"}}")
            .toObject(GoogleBigQueryV2ObjectDataset.class);
        Assertions.assertEquals("zz", model.description());
        Assertions.assertEquals("ltyo", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.OBJECT, model.parameters().get("vunknsgvxhxr").type());
        Assertions.assertEquals("meo", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        GoogleBigQueryV2ObjectDataset model = new GoogleBigQueryV2ObjectDataset().withDescription("zz")
            .withStructure("datajv")
            .withSchema("datazbdbrlbo")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("ltyo")
                .withParameters(mapOf("sokrlnrpeyl", "databibtkeiecupmwx", "dgiql", "dataiiul")))
            .withParameters(mapOf("vunknsgvxhxr",
                new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("dataw"), "yfjvifbmojtehq",
                new ParameterSpecification().withType(ParameterType.SECURE_STRING).withDefaultValue("datatrtc"),
                "mbhukdfpknvk",
                new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("datatrcoufk")))
            .withAnnotations(Arrays.asList("datazje"))
            .withFolder(new DatasetFolder().withName("meo"))
            .withTable("datancoqxtvytzq")
            .withDataset("dataldjvzmxy");
        model = BinaryData.fromObject(model).toObject(GoogleBigQueryV2ObjectDataset.class);
        Assertions.assertEquals("zz", model.description());
        Assertions.assertEquals("ltyo", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.OBJECT, model.parameters().get("vunknsgvxhxr").type());
        Assertions.assertEquals("meo", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
