// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.GoogleBigQueryV2ObjectDataset;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class GoogleBigQueryV2ObjectDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        GoogleBigQueryV2ObjectDataset model = BinaryData.fromString(
            "{\"type\":\"GoogleBigQueryV2Object\",\"typeProperties\":{\"table\":\"datamllznyjyuw\",\"dataset\":\"datazwgdpvhwiril\"},\"description\":\"qtr\",\"structure\":\"datadoxdegacdedpkw\",\"schema\":\"dataobp\",\"linkedServiceName\":{\"referenceName\":\"dcidpdaq\",\"parameters\":{\"lsaqifepdureeviv\":\"datanddlirqq\"}},\"parameters\":{\"tlfytbltytv\":{\"type\":\"SecureString\",\"defaultValue\":\"dataoklsuffpxesw\"},\"clmowurofo\":{\"type\":\"Array\",\"defaultValue\":\"datagcesfdd\"}},\"annotations\":[\"datacj\"],\"folder\":{\"name\":\"weob\"},\"\":{\"hixcc\":\"datadq\",\"og\":\"datakf\",\"bzd\":\"datayoxmyqzyqepg\",\"vo\":\"dataluokc\"}}")
            .toObject(GoogleBigQueryV2ObjectDataset.class);
        Assertions.assertEquals("qtr", model.description());
        Assertions.assertEquals("dcidpdaq", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.SECURE_STRING, model.parameters().get("tlfytbltytv").type());
        Assertions.assertEquals("weob", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        GoogleBigQueryV2ObjectDataset model
            = new GoogleBigQueryV2ObjectDataset().withDescription("qtr")
                .withStructure("datadoxdegacdedpkw")
                .withSchema("dataobp")
                .withLinkedServiceName(new LinkedServiceReference().withReferenceName("dcidpdaq")
                    .withParameters(mapOf("lsaqifepdureeviv", "datanddlirqq")))
                .withParameters(mapOf("tlfytbltytv",
                    new ParameterSpecification().withType(ParameterType.SECURE_STRING)
                        .withDefaultValue("dataoklsuffpxesw"),
                    "clmowurofo",
                    new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("datagcesfdd")))
                .withAnnotations(Arrays.asList("datacj"))
                .withFolder(new DatasetFolder().withName("weob"))
                .withTable("datamllznyjyuw")
                .withDataset("datazwgdpvhwiril");
        model = BinaryData.fromObject(model).toObject(GoogleBigQueryV2ObjectDataset.class);
        Assertions.assertEquals("qtr", model.description());
        Assertions.assertEquals("dcidpdaq", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.SECURE_STRING, model.parameters().get("tlfytbltytv").type());
        Assertions.assertEquals("weob", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
