// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.HiveAuthenticationType;
import com.azure.resourcemanager.datafactory.models.HiveLinkedService;
import com.azure.resourcemanager.datafactory.models.HiveServerType;
import com.azure.resourcemanager.datafactory.models.HiveThriftTransportProtocol;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.SecretBase;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class HiveLinkedServiceTests {
    @Test
    public void testDeserialize() {
        HiveLinkedService model =
            BinaryData
                .fromString(
                    "{\"type\":\"Hive\",\"typeProperties\":{\"serverType\":\"HiveServer2\",\"thriftTransportProtocol\":\"Binary\",\"authenticationType\":\"Username\",\"password\":{\"type\":\"SecretBase\"}},\"connectVia\":{\"referenceName\":\"ocjxw\",\"parameters\":{}},\"description\":\"zrvtx\",\"parameters\":{\"unlcpxxv\":{\"type\":\"Array\"},\"eyngjg\":{\"type\":\"String\"}},\"annotations\":[],\"\":{}}")
                .toObject(HiveLinkedService.class);
        Assertions.assertEquals("ocjxw", model.connectVia().referenceName());
        Assertions.assertEquals("zrvtx", model.description());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("unlcpxxv").type());
        Assertions.assertEquals(HiveServerType.HIVE_SERVER2, model.serverType());
        Assertions.assertEquals(HiveThriftTransportProtocol.BINARY, model.thriftTransportProtocol());
        Assertions.assertEquals(HiveAuthenticationType.USERNAME, model.authenticationType());
    }

    @Test
    public void testSerialize() {
        HiveLinkedService model =
            new HiveLinkedService()
                .withConnectVia(new IntegrationRuntimeReference().withReferenceName("ocjxw").withParameters(mapOf()))
                .withDescription("zrvtx")
                .withParameters(
                    mapOf(
                        "unlcpxxv",
                        new ParameterSpecification().withType(ParameterType.ARRAY),
                        "eyngjg",
                        new ParameterSpecification().withType(ParameterType.STRING)))
                .withAnnotations(Arrays.asList())
                .withServerType(HiveServerType.HIVE_SERVER2)
                .withThriftTransportProtocol(HiveThriftTransportProtocol.BINARY)
                .withAuthenticationType(HiveAuthenticationType.USERNAME)
                .withPassword(new SecretBase());
        model = BinaryData.fromObject(model).toObject(HiveLinkedService.class);
        Assertions.assertEquals("ocjxw", model.connectVia().referenceName());
        Assertions.assertEquals("zrvtx", model.description());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("unlcpxxv").type());
        Assertions.assertEquals(HiveServerType.HIVE_SERVER2, model.serverType());
        Assertions.assertEquals(HiveThriftTransportProtocol.BINARY, model.thriftTransportProtocol());
        Assertions.assertEquals(HiveAuthenticationType.USERNAME, model.authenticationType());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
