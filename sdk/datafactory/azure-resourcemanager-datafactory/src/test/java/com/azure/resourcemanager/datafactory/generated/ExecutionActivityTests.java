// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.ExecutionActivity;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ExecutionActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ExecutionActivity model = BinaryData.fromString(
            "{\"type\":\"Execution\",\"linkedServiceName\":{\"referenceName\":\"pspaxhfuwygssssj\",\"parameters\":{\"vdcciyzrdj\":\"dataepylmssdv\"}},\"policy\":{\"timeout\":\"datawk\",\"retry\":\"datayxyksdel\",\"retryIntervalInSeconds\":1192309188,\"secureInput\":true,\"secureOutput\":true,\"\":{\"ynxkxqnwcekqsbn\":\"datatu\"}},\"name\":\"adfapzebjegwwgve\",\"description\":\"ywuuveisjbp\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"tkajlsrwzvdf\",\"dependencyConditions\":[\"Succeeded\",\"Failed\"],\"\":{\"bovtjmdymd\":\"datajqfxfiyjzuqg\",\"xkwwfyevhurklowm\":\"datap\",\"ei\":\"datarvzclilyoix\"}}],\"userProperties\":[{\"name\":\"izvsihsmtx\",\"value\":\"datacajh\"},{\"name\":\"juqqtzrnubo\",\"value\":\"datagouxki\"},{\"name\":\"npgugrjx\",\"value\":\"datadlgorvu\"}],\"\":{\"pxtipk\":\"databzslmffcttkprx\"}}")
            .toObject(ExecutionActivity.class);
        Assertions.assertEquals("adfapzebjegwwgve", model.name());
        Assertions.assertEquals("ywuuveisjbp", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.onInactiveMarkAs());
        Assertions.assertEquals("tkajlsrwzvdf", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("izvsihsmtx", model.userProperties().get(0).name());
        Assertions.assertEquals("pspaxhfuwygssssj", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1192309188, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ExecutionActivity model = new ExecutionActivity().withName("adfapzebjegwwgve").withDescription("ywuuveisjbp")
            .withState(ActivityState.INACTIVE).withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SUCCEEDED)
            .withDependsOn(Arrays.asList(new ActivityDependency().withActivity("tkajlsrwzvdf")
                .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED, DependencyCondition.FAILED))
                .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("izvsihsmtx").withValue("datacajh"),
                new UserProperty().withName("juqqtzrnubo").withValue("datagouxki"),
                new UserProperty().withName("npgugrjx").withValue("datadlgorvu")))
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("pspaxhfuwygssssj")
                .withParameters(mapOf("vdcciyzrdj", "dataepylmssdv")))
            .withPolicy(new ActivityPolicy().withTimeout("datawk").withRetry("datayxyksdel")
                .withRetryIntervalInSeconds(1192309188).withSecureInput(true).withSecureOutput(true)
                .withAdditionalProperties(mapOf()));
        model = BinaryData.fromObject(model).toObject(ExecutionActivity.class);
        Assertions.assertEquals("adfapzebjegwwgve", model.name());
        Assertions.assertEquals("ywuuveisjbp", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.onInactiveMarkAs());
        Assertions.assertEquals("tkajlsrwzvdf", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("izvsihsmtx", model.userProperties().get(0).name());
        Assertions.assertEquals("pspaxhfuwygssssj", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1192309188, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
