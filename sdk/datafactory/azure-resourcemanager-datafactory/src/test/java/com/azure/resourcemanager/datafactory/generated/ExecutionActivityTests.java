// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.ExecutionActivity;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ExecutionActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ExecutionActivity model = BinaryData.fromString(
            "{\"type\":\"Execution\",\"linkedServiceName\":{\"referenceName\":\"rwxf\",\"parameters\":{\"ofegrzfsfuloo\":\"dataghwfiy\"}},\"policy\":{\"timeout\":\"datazotjbvhuidlod\",\"retry\":\"datasylkkqvm\",\"retryIntervalInSeconds\":669615621,\"secureInput\":true,\"secureOutput\":false,\"\":{\"mnjitxughlbi\":\"dataegymcmn\",\"hkioec\":\"datawodayipg\"}},\"name\":\"byoxpvbv\",\"description\":\"hfuxu\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"kzdshhhd\",\"dependencyConditions\":[\"Succeeded\",\"Failed\",\"Completed\"],\"\":{\"zvfywspajakj\":\"dataibmstvzz\",\"mzzpautsrvs\":\"datavpktbnmhx\",\"jjgvu\":\"dataknvouyts\"}},{\"activity\":\"nwichjkwctlsoh\",\"dependencyConditions\":[\"Succeeded\",\"Succeeded\",\"Failed\"],\"\":{\"meyaoy\":\"databtegiw\",\"nfzmthiec\":\"datajfgvxauimnabgr\",\"umamdorgl\":\"dataflazfotrp\",\"sfgjbeybdukbgl\":\"dataekh\"}},{\"activity\":\"iwvxmysc\",\"dependencyConditions\":[\"Completed\",\"Completed\"],\"\":{\"smvvxkcted\":\"dataxkonciacdloe\",\"niffajniwbyzyjuy\":\"dataaf\"}}],\"userProperties\":[{\"name\":\"bbugo\",\"value\":\"datadzc\"},{\"name\":\"uyosigkinykjxqs\",\"value\":\"datapeqgedpizjqp\"}],\"\":{\"diverkwmafyxo\":\"datau\",\"t\":\"dataakvuted\"}}")
            .toObject(ExecutionActivity.class);
        Assertions.assertEquals("byoxpvbv", model.name());
        Assertions.assertEquals("hfuxu", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("kzdshhhd", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("bbugo", model.userProperties().get(0).name());
        Assertions.assertEquals("rwxf", model.linkedServiceName().referenceName());
        Assertions.assertEquals(669615621, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ExecutionActivity model = new ExecutionActivity().withName("byoxpvbv")
            .withDescription("hfuxu")
            .withState(ActivityState.ACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
            .withDependsOn(Arrays.asList(
                new ActivityDependency().withActivity("kzdshhhd")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED, DependencyCondition.FAILED,
                        DependencyCondition.COMPLETED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("nwichjkwctlsoh")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED,
                        DependencyCondition.SUCCEEDED, DependencyCondition.FAILED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("iwvxmysc")
                    .withDependencyConditions(
                        Arrays.asList(DependencyCondition.COMPLETED, DependencyCondition.COMPLETED))
                    .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("bbugo").withValue("datadzc"),
                new UserProperty().withName("uyosigkinykjxqs").withValue("datapeqgedpizjqp")))
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("rwxf")
                .withParameters(mapOf("ofegrzfsfuloo", "dataghwfiy")))
            .withPolicy(new ActivityPolicy().withTimeout("datazotjbvhuidlod")
                .withRetry("datasylkkqvm")
                .withRetryIntervalInSeconds(669615621)
                .withSecureInput(true)
                .withSecureOutput(false)
                .withAdditionalProperties(mapOf()));
        model = BinaryData.fromObject(model).toObject(ExecutionActivity.class);
        Assertions.assertEquals("byoxpvbv", model.name());
        Assertions.assertEquals("hfuxu", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("kzdshhhd", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("bbugo", model.userProperties().get(0).name());
        Assertions.assertEquals("rwxf", model.linkedServiceName().referenceName());
        Assertions.assertEquals(669615621, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
