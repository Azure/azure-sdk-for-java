// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.ExecutionActivity;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ExecutionActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ExecutionActivity model = BinaryData.fromString(
            "{\"type\":\"Execution\",\"linkedServiceName\":{\"referenceName\":\"ouplamdgf\",\"parameters\":{\"cxl\":\"datanisoorwfdtjpsjwl\"}},\"policy\":{\"timeout\":\"datacdrgt\",\"retry\":\"dataoouocafaxvhjrpb\",\"retryIntervalInSeconds\":1593376991,\"secureInput\":true,\"secureOutput\":false,\"\":{\"lbyjahbzbtl\":\"datanenjtxuuwdmrqa\"}},\"name\":\"acbwmvphmjyzice\",\"description\":\"lazcgwnibnduqgj\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"ocrwuhumgwspugn\",\"dependencyConditions\":[\"Skipped\",\"Failed\",\"Completed\"],\"\":{\"koxqbozezx\":\"dataud\",\"qllt\":\"datawinrgukqobo\"}},{\"activity\":\"lqufkrnrbnjkcol\",\"dependencyConditions\":[\"Skipped\",\"Failed\",\"Completed\",\"Succeeded\"],\"\":{\"v\":\"dataawdmdikufz\"}}],\"userProperties\":[{\"name\":\"jzofyldxkzhvfo\",\"value\":\"datacvnhpebuiywkysgq\"},{\"name\":\"cbeauvld\",\"value\":\"datadnmguifqj\"},{\"name\":\"oxzxbljpzauug\",\"value\":\"dataarfumitjaiis\"}],\"\":{\"y\":\"datafdyb\",\"rwrylcttvxk\":\"databgmjrvrsqrjco\",\"jbl\":\"datagffpvvqwvvnxoqaa\",\"tsztxoswvfrym\":\"dataqwwtevfeugc\"}}")
            .toObject(ExecutionActivity.class);
        Assertions.assertEquals("acbwmvphmjyzice", model.name());
        Assertions.assertEquals("lazcgwnibnduqgj", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("ocrwuhumgwspugn", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("jzofyldxkzhvfo", model.userProperties().get(0).name());
        Assertions.assertEquals("ouplamdgf", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1593376991, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ExecutionActivity model = new ExecutionActivity().withName("acbwmvphmjyzice")
            .withDescription("lazcgwnibnduqgj")
            .withState(ActivityState.ACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
            .withDependsOn(Arrays.asList(
                new ActivityDependency().withActivity("ocrwuhumgwspugn")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.FAILED,
                        DependencyCondition.COMPLETED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("lqufkrnrbnjkcol")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.FAILED,
                        DependencyCondition.COMPLETED, DependencyCondition.SUCCEEDED))
                    .withAdditionalProperties(mapOf())))
            .withUserProperties(
                Arrays.asList(new UserProperty().withName("jzofyldxkzhvfo").withValue("datacvnhpebuiywkysgq"),
                    new UserProperty().withName("cbeauvld").withValue("datadnmguifqj"),
                    new UserProperty().withName("oxzxbljpzauug").withValue("dataarfumitjaiis")))
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("ouplamdgf")
                .withParameters(mapOf("cxl", "datanisoorwfdtjpsjwl")))
            .withPolicy(new ActivityPolicy().withTimeout("datacdrgt")
                .withRetry("dataoouocafaxvhjrpb")
                .withRetryIntervalInSeconds(1593376991)
                .withSecureInput(true)
                .withSecureOutput(false)
                .withAdditionalProperties(mapOf()));
        model = BinaryData.fromObject(model).toObject(ExecutionActivity.class);
        Assertions.assertEquals("acbwmvphmjyzice", model.name());
        Assertions.assertEquals("lazcgwnibnduqgj", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("ocrwuhumgwspugn", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("jzofyldxkzhvfo", model.userProperties().get(0).name());
        Assertions.assertEquals("ouplamdgf", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1593376991, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
