// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.ExecutionActivity;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ExecutionActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ExecutionActivity model = BinaryData.fromString(
            "{\"type\":\"Execution\",\"linkedServiceName\":{\"referenceName\":\"nvfcdsi\",\"parameters\":{\"x\":\"datanybnt\"}},\"policy\":{\"timeout\":\"dataxujzox\",\"retry\":\"datakqtkrjuc\",\"retryIntervalInSeconds\":2028416935,\"secureInput\":true,\"secureOutput\":true,\"\":{\"cem\":\"datalx\",\"mmgb\":\"dataoanudvqannenxgo\",\"wfxjiqpd\":\"dataqyfgzbfpqifsgzfg\"}},\"name\":\"ohwnnayo\",\"description\":\"hjxhpppnksqiwl\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"eohoygowdzizzu\",\"dependencyConditions\":[\"Skipped\"],\"\":{\"sepiplpexhh\":\"datappqvovsirt\",\"tl\":\"dataj\",\"biroxamnvrcq\":\"datap\",\"tzmmxdmppibv\":\"datapbainsihdzxeufjy\"}},{\"activity\":\"qjcphofyoqfvm\",\"dependencyConditions\":[\"Skipped\"],\"\":{\"tyxlsycckj\":\"datamuzltnneolghgte\",\"c\":\"dataqdtykcaocjuuxqnk\",\"ynjcvewl\":\"datamrwc\",\"pigla\":\"datajrnaktj\"}},{\"activity\":\"heqjc\",\"dependencyConditions\":[\"Completed\",\"Completed\"],\"\":{\"edvbrbdujpsh\":\"datacztrqnuahh\"}}],\"userProperties\":[{\"name\":\"ivrycyulwzjorv\",\"value\":\"datagmkkeles\"},{\"name\":\"jckyocyb\",\"value\":\"datalwdmpsdfsla\"},{\"name\":\"ktnhyylipvqpqu\",\"value\":\"dataexnpoaeruywfh\"},{\"name\":\"twlzlmpiprlcgq\",\"value\":\"datawmn\"}],\"\":{\"kpapepwpbnj\":\"dataqlybmkmxus\",\"tun\":\"datako\",\"vnddllbwnmv\":\"dataumy\"}}")
            .toObject(ExecutionActivity.class);
        Assertions.assertEquals("ohwnnayo", model.name());
        Assertions.assertEquals("hjxhpppnksqiwl", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("eohoygowdzizzu", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("ivrycyulwzjorv", model.userProperties().get(0).name());
        Assertions.assertEquals("nvfcdsi", model.linkedServiceName().referenceName());
        Assertions.assertEquals(2028416935, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ExecutionActivity model = new ExecutionActivity().withName("ohwnnayo")
            .withDescription("hjxhpppnksqiwl")
            .withState(ActivityState.ACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
            .withDependsOn(Arrays.asList(
                new ActivityDependency().withActivity("eohoygowdzizzu")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("qjcphofyoqfvm")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("heqjc")
                    .withDependencyConditions(
                        Arrays.asList(DependencyCondition.COMPLETED, DependencyCondition.COMPLETED))
                    .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("ivrycyulwzjorv").withValue("datagmkkeles"),
                new UserProperty().withName("jckyocyb").withValue("datalwdmpsdfsla"),
                new UserProperty().withName("ktnhyylipvqpqu").withValue("dataexnpoaeruywfh"),
                new UserProperty().withName("twlzlmpiprlcgq").withValue("datawmn")))
            .withLinkedServiceName(
                new LinkedServiceReference().withReferenceName("nvfcdsi").withParameters(mapOf("x", "datanybnt")))
            .withPolicy(new ActivityPolicy().withTimeout("dataxujzox")
                .withRetry("datakqtkrjuc")
                .withRetryIntervalInSeconds(2028416935)
                .withSecureInput(true)
                .withSecureOutput(true)
                .withAdditionalProperties(mapOf()));
        model = BinaryData.fromObject(model).toObject(ExecutionActivity.class);
        Assertions.assertEquals("ohwnnayo", model.name());
        Assertions.assertEquals("hjxhpppnksqiwl", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("eohoygowdzizzu", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("ivrycyulwzjorv", model.userProperties().get(0).name());
        Assertions.assertEquals("nvfcdsi", model.linkedServiceName().referenceName());
        Assertions.assertEquals(2028416935, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
