// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.ExecutionActivity;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ExecutionActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ExecutionActivity model =
            BinaryData
                .fromString(
                    "{\"type\":\"Execution\",\"linkedServiceName\":{\"referenceName\":\"qizvsihsmtx\",\"parameters\":{\"ubodgouxkianpgu\":\"datajhsjuqqtzr\"}},\"policy\":{\"timeout\":\"dataxxdlgorvu\",\"retry\":\"datanb\",\"retryIntervalInSeconds\":958282428,\"secureInput\":false,\"secureOutput\":true,\"\":{\"kd\":\"datakprxypxti\",\"omev\":\"dataebafiq\",\"butytoainig\":\"dataetamdvncxt\",\"lack\":\"dataxhzqgbaqvqe\"}},\"name\":\"bkr\",\"description\":\"yfnbxw\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"xothfyifju\",\"dependencyConditions\":[\"Failed\"],\"\":{\"uzyycqsxy\":\"datajsmtghm\"}},{\"activity\":\"ywdez\",\"dependencyConditions\":[\"Skipped\",\"Failed\"],\"\":{\"pwwykfytjkzt\":\"datajgyamoc\",\"wqvckhmoudmca\":\"datac\",\"yvibnoeb\":\"datacojfuvmjtxwa\",\"zrkhptyh\":\"datafkgfiydlrjmwaa\"}},{\"activity\":\"iqeoajnaotavwmr\",\"dependencyConditions\":[\"Skipped\",\"Succeeded\"],\"\":{\"yrwvo\":\"datafecjue\"}}],\"userProperties\":[{\"name\":\"cwxba\",\"value\":\"datazypslfqgfwo\"},{\"name\":\"btgpe\",\"value\":\"datazuzxoeouf\"}],\"\":{\"cwlcfcpzajgq\":\"datawgfhdfom\",\"ewfbllegezvwuwi\":\"databfgmeqhtngrxfqwo\"}}")
                .toObject(ExecutionActivity.class);
        Assertions.assertEquals("bkr", model.name());
        Assertions.assertEquals("yfnbxw", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("xothfyifju", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("cwxba", model.userProperties().get(0).name());
        Assertions.assertEquals("qizvsihsmtx", model.linkedServiceName().referenceName());
        Assertions.assertEquals(958282428, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ExecutionActivity model =
            new ExecutionActivity()
                .withName("bkr")
                .withDescription("yfnbxw")
                .withState(ActivityState.ACTIVE)
                .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
                .withDependsOn(
                    Arrays
                        .asList(
                            new ActivityDependency()
                                .withActivity("xothfyifju")
                                .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED))
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency()
                                .withActivity("ywdez")
                                .withDependencyConditions(
                                    Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.FAILED))
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency()
                                .withActivity("iqeoajnaotavwmr")
                                .withDependencyConditions(
                                    Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.SUCCEEDED))
                                .withAdditionalProperties(mapOf())))
                .withUserProperties(
                    Arrays
                        .asList(
                            new UserProperty().withName("cwxba").withValue("datazypslfqgfwo"),
                            new UserProperty().withName("btgpe").withValue("datazuzxoeouf")))
                .withLinkedServiceName(
                    new LinkedServiceReference()
                        .withReferenceName("qizvsihsmtx")
                        .withParameters(mapOf("ubodgouxkianpgu", "datajhsjuqqtzr")))
                .withPolicy(
                    new ActivityPolicy()
                        .withTimeout("dataxxdlgorvu")
                        .withRetry("datanb")
                        .withRetryIntervalInSeconds(958282428)
                        .withSecureInput(false)
                        .withSecureOutput(true)
                        .withAdditionalProperties(mapOf()));
        model = BinaryData.fromObject(model).toObject(ExecutionActivity.class);
        Assertions.assertEquals("bkr", model.name());
        Assertions.assertEquals("yfnbxw", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("xothfyifju", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("cwxba", model.userProperties().get(0).name());
        Assertions.assertEquals("qizvsihsmtx", model.linkedServiceName().referenceName());
        Assertions.assertEquals(958282428, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
