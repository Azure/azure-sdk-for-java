// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DataFlowReference;
import com.azure.resourcemanager.datafactory.models.DataFlowReferenceType;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.PowerQuerySink;
import com.azure.resourcemanager.datafactory.models.PowerQuerySinkMapping;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PowerQuerySinkMappingTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PowerQuerySinkMapping model = BinaryData.fromString(
            "{\"queryName\":\"rx\",\"dataflowSinks\":[{\"script\":\"ptvr\",\"schemaLinkedService\":{\"referenceName\":\"cpr\",\"parameters\":{\"hdnx\":\"dataswozpm\",\"n\":\"datakfesursbyfoavozq\",\"kzchcmuvskdvqyf\":\"datamxitvmrq\"}},\"rejectedDataLinkedService\":{\"referenceName\":\"wxcabfrvjpfojh\",\"parameters\":{\"dxfvjdfusuwght\":\"datadoqyohzhundfk\"}},\"name\":\"pgarhf\",\"description\":\"dedi\",\"dataset\":{\"referenceName\":\"dpc\",\"parameters\":{\"sdzfle\":\"datapmw\"}},\"linkedService\":{\"referenceName\":\"fsgrheak\",\"parameters\":{\"vpbjclih\":\"dataukmnu\",\"mjqjoamzdsa\":\"datazriigteqyp\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"tkqbvtdeouqixgtp\",\"datasetParameters\":\"databjevjjjuwdv\",\"parameters\":{\"ucobpkphxh\":\"datalbfrch\"},\"\":{\"umjysukezqohthsm\":\"dataekxbc\",\"yuwuypou\":\"datauaoyp\",\"dfreyrgrgft\":\"datapdclajujso\"}}}]}")
            .toObject(PowerQuerySinkMapping.class);
        Assertions.assertEquals("rx", model.queryName());
        Assertions.assertEquals("pgarhf", model.dataflowSinks().get(0).name());
        Assertions.assertEquals("dedi", model.dataflowSinks().get(0).description());
        Assertions.assertEquals("dpc", model.dataflowSinks().get(0).dataset().referenceName());
        Assertions.assertEquals("fsgrheak", model.dataflowSinks().get(0).linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE,
            model.dataflowSinks().get(0).flowlet().type());
        Assertions.assertEquals("tkqbvtdeouqixgtp", model.dataflowSinks().get(0).flowlet().referenceName());
        Assertions.assertEquals("cpr", model.dataflowSinks().get(0).schemaLinkedService().referenceName());
        Assertions.assertEquals("wxcabfrvjpfojh",
            model.dataflowSinks().get(0).rejectedDataLinkedService().referenceName());
        Assertions.assertEquals("ptvr", model.dataflowSinks().get(0).script());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PowerQuerySinkMapping model = new PowerQuerySinkMapping().withQueryName("rx")
            .withDataflowSinks(Arrays.asList(new PowerQuerySink().withName("pgarhf")
                .withDescription("dedi")
                .withDataset(new DatasetReference().withReferenceName("dpc").withParameters(mapOf("sdzfle", "datapmw")))
                .withLinkedService(new LinkedServiceReference().withReferenceName("fsgrheak")
                    .withParameters(mapOf("vpbjclih", "dataukmnu", "mjqjoamzdsa", "datazriigteqyp")))
                .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                    .withReferenceName("tkqbvtdeouqixgtp")
                    .withDatasetParameters("databjevjjjuwdv")
                    .withParameters(mapOf("ucobpkphxh", "datalbfrch"))
                    .withAdditionalProperties(mapOf()))
                .withSchemaLinkedService(
                    new LinkedServiceReference().withReferenceName("cpr")
                        .withParameters(mapOf("hdnx", "dataswozpm", "n", "datakfesursbyfoavozq", "kzchcmuvskdvqyf",
                            "datamxitvmrq")))
                .withRejectedDataLinkedService(new LinkedServiceReference().withReferenceName("wxcabfrvjpfojh")
                    .withParameters(mapOf("dxfvjdfusuwght", "datadoqyohzhundfk")))
                .withScript("ptvr")));
        model = BinaryData.fromObject(model).toObject(PowerQuerySinkMapping.class);
        Assertions.assertEquals("rx", model.queryName());
        Assertions.assertEquals("pgarhf", model.dataflowSinks().get(0).name());
        Assertions.assertEquals("dedi", model.dataflowSinks().get(0).description());
        Assertions.assertEquals("dpc", model.dataflowSinks().get(0).dataset().referenceName());
        Assertions.assertEquals("fsgrheak", model.dataflowSinks().get(0).linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE,
            model.dataflowSinks().get(0).flowlet().type());
        Assertions.assertEquals("tkqbvtdeouqixgtp", model.dataflowSinks().get(0).flowlet().referenceName());
        Assertions.assertEquals("cpr", model.dataflowSinks().get(0).schemaLinkedService().referenceName());
        Assertions.assertEquals("wxcabfrvjpfojh",
            model.dataflowSinks().get(0).rejectedDataLinkedService().referenceName());
        Assertions.assertEquals("ptvr", model.dataflowSinks().get(0).script());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
