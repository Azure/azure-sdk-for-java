// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DataFlowReference;
import com.azure.resourcemanager.datafactory.models.DataFlowReferenceType;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.PowerQuerySink;
import com.azure.resourcemanager.datafactory.models.PowerQuerySinkMapping;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class PowerQuerySinkMappingTests {
    @Test
    public void testDeserialize() {
        PowerQuerySinkMapping model =
            BinaryData
                .fromString(
                    "{\"queryName\":\"txdqcmy\",\"dataflowSinks\":[{\"script\":\"qzjval\",\"schemaLinkedService\":{\"referenceName\":\"xb\",\"parameters\":{}},\"rejectedDataLinkedService\":{\"referenceName\":\"wksdegyxsbfpzvo\",\"parameters\":{}},\"name\":\"vntw\",\"description\":\"fzwush\",\"dataset\":{\"referenceName\":\"xpblalh\",\"parameters\":{}},\"linkedService\":{\"referenceName\":\"p\",\"parameters\":{}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"said\",\"parameters\":{},\"\":{}}},{\"script\":\"oqdsg\",\"schemaLinkedService\":{\"referenceName\":\"otxjqfiafcnlrtbf\",\"parameters\":{}},\"rejectedDataLinkedService\":{\"referenceName\":\"z\",\"parameters\":{}},\"name\":\"o\",\"description\":\"olbuauktwieope\",\"dataset\":{\"referenceName\":\"lxqdwr\",\"parameters\":{}},\"linkedService\":{\"referenceName\":\"iljpibk\",\"parameters\":{}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"yauxr\",\"parameters\":{},\"\":{}}}]}")
                .toObject(PowerQuerySinkMapping.class);
        Assertions.assertEquals("txdqcmy", model.queryName());
        Assertions.assertEquals("vntw", model.dataflowSinks().get(0).name());
        Assertions.assertEquals("fzwush", model.dataflowSinks().get(0).description());
        Assertions.assertEquals("xpblalh", model.dataflowSinks().get(0).dataset().referenceName());
        Assertions.assertEquals("p", model.dataflowSinks().get(0).linkedService().referenceName());
        Assertions
            .assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.dataflowSinks().get(0).flowlet().type());
        Assertions.assertEquals("said", model.dataflowSinks().get(0).flowlet().referenceName());
        Assertions.assertEquals("xb", model.dataflowSinks().get(0).schemaLinkedService().referenceName());
        Assertions
            .assertEquals("wksdegyxsbfpzvo", model.dataflowSinks().get(0).rejectedDataLinkedService().referenceName());
        Assertions.assertEquals("qzjval", model.dataflowSinks().get(0).script());
    }

    @Test
    public void testSerialize() {
        PowerQuerySinkMapping model =
            new PowerQuerySinkMapping()
                .withQueryName("txdqcmy")
                .withDataflowSinks(
                    Arrays
                        .asList(
                            new PowerQuerySink()
                                .withName("vntw")
                                .withDescription("fzwush")
                                .withDataset(
                                    new DatasetReference().withReferenceName("xpblalh").withParameters(mapOf()))
                                .withLinkedService(
                                    new LinkedServiceReference().withReferenceName("p").withParameters(mapOf()))
                                .withFlowlet(
                                    new DataFlowReference()
                                        .withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                                        .withReferenceName("said")
                                        .withParameters(mapOf())
                                        .withAdditionalProperties(mapOf()))
                                .withSchemaLinkedService(
                                    new LinkedServiceReference().withReferenceName("xb").withParameters(mapOf()))
                                .withRejectedDataLinkedService(
                                    new LinkedServiceReference()
                                        .withReferenceName("wksdegyxsbfpzvo")
                                        .withParameters(mapOf()))
                                .withScript("qzjval"),
                            new PowerQuerySink()
                                .withName("o")
                                .withDescription("olbuauktwieope")
                                .withDataset(new DatasetReference().withReferenceName("lxqdwr").withParameters(mapOf()))
                                .withLinkedService(
                                    new LinkedServiceReference().withReferenceName("iljpibk").withParameters(mapOf()))
                                .withFlowlet(
                                    new DataFlowReference()
                                        .withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                                        .withReferenceName("yauxr")
                                        .withParameters(mapOf())
                                        .withAdditionalProperties(mapOf()))
                                .withSchemaLinkedService(
                                    new LinkedServiceReference()
                                        .withReferenceName("otxjqfiafcnlrtbf")
                                        .withParameters(mapOf()))
                                .withRejectedDataLinkedService(
                                    new LinkedServiceReference().withReferenceName("z").withParameters(mapOf()))
                                .withScript("oqdsg")));
        model = BinaryData.fromObject(model).toObject(PowerQuerySinkMapping.class);
        Assertions.assertEquals("txdqcmy", model.queryName());
        Assertions.assertEquals("vntw", model.dataflowSinks().get(0).name());
        Assertions.assertEquals("fzwush", model.dataflowSinks().get(0).description());
        Assertions.assertEquals("xpblalh", model.dataflowSinks().get(0).dataset().referenceName());
        Assertions.assertEquals("p", model.dataflowSinks().get(0).linkedService().referenceName());
        Assertions
            .assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.dataflowSinks().get(0).flowlet().type());
        Assertions.assertEquals("said", model.dataflowSinks().get(0).flowlet().referenceName());
        Assertions.assertEquals("xb", model.dataflowSinks().get(0).schemaLinkedService().referenceName());
        Assertions
            .assertEquals("wksdegyxsbfpzvo", model.dataflowSinks().get(0).rejectedDataLinkedService().referenceName());
        Assertions.assertEquals("qzjval", model.dataflowSinks().get(0).script());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
