// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DataFlowReference;
import com.azure.resourcemanager.datafactory.models.DataFlowReferenceType;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.PowerQuerySink;
import com.azure.resourcemanager.datafactory.models.PowerQuerySinkMapping;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PowerQuerySinkMappingTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PowerQuerySinkMapping model = BinaryData.fromString(
            "{\"queryName\":\"oo\",\"dataflowSinks\":[{\"script\":\"hhe\",\"schemaLinkedService\":{\"referenceName\":\"j\",\"parameters\":{\"tkkf\":\"datahdonyleisawvdwmu\",\"opot\":\"datatonyrfmozu\"}},\"rejectedDataLinkedService\":{\"referenceName\":\"kyzyi\",\"parameters\":{\"en\":\"datagdkbfqkeaipb\"}},\"name\":\"cvdrpwckivtknuc\",\"description\":\"bax\",\"dataset\":{\"referenceName\":\"erpoasyzze\",\"parameters\":{\"dbix\":\"dataqnn\",\"giydgee\":\"dataudmaniwkwtmqy\",\"llepppdfrgobr\":\"datapivsowcwehjqy\"}},\"linkedService\":{\"referenceName\":\"xcayyvriuvmme\",\"parameters\":{\"czxkxvrig\":\"dataimmwiri\",\"afpiejbpbdu\":\"datautxzascalwfefyg\",\"o\":\"dataaypsvedxphf\",\"mmitvviqs\":\"dataqqwxjnkbes\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"ujhmdpey\",\"datasetParameters\":\"dataqwjqevwtkrjqnciw\",\"parameters\":{\"kgllmpkuxbluc\":\"datawngrrpdtinhc\",\"mpgusroqkjw\":\"datayhtkyqfynvt\"},\"\":{\"gko\":\"datajrkfcjtjqhfkws\"}}}]}")
            .toObject(PowerQuerySinkMapping.class);
        Assertions.assertEquals("oo", model.queryName());
        Assertions.assertEquals("cvdrpwckivtknuc", model.dataflowSinks().get(0).name());
        Assertions.assertEquals("bax", model.dataflowSinks().get(0).description());
        Assertions.assertEquals("erpoasyzze", model.dataflowSinks().get(0).dataset().referenceName());
        Assertions.assertEquals("xcayyvriuvmme", model.dataflowSinks().get(0).linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE,
            model.dataflowSinks().get(0).flowlet().type());
        Assertions.assertEquals("ujhmdpey", model.dataflowSinks().get(0).flowlet().referenceName());
        Assertions.assertEquals("j", model.dataflowSinks().get(0).schemaLinkedService().referenceName());
        Assertions.assertEquals("kyzyi", model.dataflowSinks().get(0).rejectedDataLinkedService().referenceName());
        Assertions.assertEquals("hhe", model.dataflowSinks().get(0).script());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PowerQuerySinkMapping model
            = new PowerQuerySinkMapping().withQueryName("oo")
                .withDataflowSinks(Arrays.asList(new PowerQuerySink().withName("cvdrpwckivtknuc")
                    .withDescription("bax")
                    .withDataset(new DatasetReference().withReferenceName("erpoasyzze")
                        .withParameters(mapOf("dbix", "dataqnn", "giydgee", "dataudmaniwkwtmqy", "llepppdfrgobr",
                            "datapivsowcwehjqy")))
                    .withLinkedService(new LinkedServiceReference().withReferenceName("xcayyvriuvmme")
                        .withParameters(mapOf("czxkxvrig", "dataimmwiri", "afpiejbpbdu", "datautxzascalwfefyg", "o",
                            "dataaypsvedxphf", "mmitvviqs", "dataqqwxjnkbes")))
                    .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                        .withReferenceName("ujhmdpey")
                        .withDatasetParameters("dataqwjqevwtkrjqnciw")
                        .withParameters(mapOf("kgllmpkuxbluc", "datawngrrpdtinhc", "mpgusroqkjw", "datayhtkyqfynvt"))
                        .withAdditionalProperties(mapOf()))
                    .withSchemaLinkedService(new LinkedServiceReference().withReferenceName("j")
                        .withParameters(mapOf("tkkf", "datahdonyleisawvdwmu", "opot", "datatonyrfmozu")))
                    .withRejectedDataLinkedService(new LinkedServiceReference().withReferenceName("kyzyi")
                        .withParameters(mapOf("en", "datagdkbfqkeaipb")))
                    .withScript("hhe")));
        model = BinaryData.fromObject(model).toObject(PowerQuerySinkMapping.class);
        Assertions.assertEquals("oo", model.queryName());
        Assertions.assertEquals("cvdrpwckivtknuc", model.dataflowSinks().get(0).name());
        Assertions.assertEquals("bax", model.dataflowSinks().get(0).description());
        Assertions.assertEquals("erpoasyzze", model.dataflowSinks().get(0).dataset().referenceName());
        Assertions.assertEquals("xcayyvriuvmme", model.dataflowSinks().get(0).linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE,
            model.dataflowSinks().get(0).flowlet().type());
        Assertions.assertEquals("ujhmdpey", model.dataflowSinks().get(0).flowlet().referenceName());
        Assertions.assertEquals("j", model.dataflowSinks().get(0).schemaLinkedService().referenceName());
        Assertions.assertEquals("kyzyi", model.dataflowSinks().get(0).rejectedDataLinkedService().referenceName());
        Assertions.assertEquals("hhe", model.dataflowSinks().get(0).script());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
