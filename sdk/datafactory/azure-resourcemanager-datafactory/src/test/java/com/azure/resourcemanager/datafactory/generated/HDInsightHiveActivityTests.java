// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.HDInsightActivityDebugInfoOption;
import com.azure.resourcemanager.datafactory.models.HDInsightHiveActivity;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class HDInsightHiveActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HDInsightHiveActivity model =
            BinaryData
                .fromString(
                    "{\"type\":\"HDInsightHive\",\"typeProperties\":{\"storageLinkedServices\":[{\"referenceName\":\"hyoigzwed\",\"parameters\":{\"zdmhepfjdiwzgw\":\"dataratvpkgawrmuj\",\"chvqwhscvaqdxgel\":\"dataum\"}},{\"referenceName\":\"j\",\"parameters\":{\"aylkrastbks\":\"dataqkgavgoullx\",\"dxdtxbrdb\":\"datakziebmwyodfmpl\",\"pf\":\"datawqt\",\"kdoukqsc\":\"datafrfvhbbnoevkkr\"}},{\"referenceName\":\"dsjgows\",\"parameters\":{\"cexpopqy\":\"datauapeqlhhmbyf\"}},{\"referenceName\":\"icesqpvmoxilh\",\"parameters\":{\"nrbngc\":\"dataiqsriubemxmuygmr\",\"mowvcnvfgqxq\":\"datafmophtkyzsgayn\",\"roqxrvycjdni\":\"dataysuapdns\"}}],\"arguments\":[\"datagyxmpmsacbamtoqs\",\"dataamoyxdigk\",\"datagz\",\"dataylqhqeosxdsxil\"],\"getDebugInfo\":\"None\",\"scriptPath\":\"datattd\",\"scriptLinkedService\":{\"referenceName\":\"gkaohhttty\",\"parameters\":{\"i\":\"dataidzjjjfcyskpnkkx\",\"hvtpmvppvgrigje\":\"databxsmfvltboc\",\"tfmfkuvybemo\":\"datarlgkoqbzrclar\",\"kzvzq\":\"dataamshqvku\"}},\"defines\":{\"dbeanigozjrcx\":\"datajdsnv\"},\"variables\":{\"almzpfylqevwwvz\":\"datag\",\"gjl\":\"datapdxcizrop\",\"q\":\"dataecffb\"},\"queryTimeout\":214972411},\"linkedServiceName\":{\"referenceName\":\"nstqwnpeg\",\"parameters\":{\"beekzyebpatwbbf\":\"datadqeflvdfaqcqlex\",\"nwohlcahhfuydgd\":\"datadfl\",\"bpduzeebde\":\"dataitavgayuspzlcv\"}},\"policy\":{\"timeout\":\"datawkhruzz\",\"retry\":\"databbozivfoy\",\"retryIntervalInSeconds\":945668794,\"secureInput\":false,\"secureOutput\":false,\"\":{\"vvscbpkmo\":\"datasxsqq\"}},\"name\":\"dukp\",\"description\":\"yibwuzvmors\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"zuboigorwpbbjz\",\"dependencyConditions\":[\"Completed\",\"Failed\",\"Skipped\"],\"\":{\"nnzpvjwegov\":\"datagk\"}},{\"activity\":\"ceqyrajdvvs\",\"dependencyConditions\":[\"Completed\",\"Skipped\",\"Succeeded\",\"Completed\"],\"\":{\"chvwwcha\":\"datacaz\",\"hayfx\":\"dataztvotf\"}}],\"userProperties\":[{\"name\":\"xxefzliguwqos\",\"value\":\"datacmfm\"},{\"name\":\"nlj\",\"value\":\"datagjcn\"},{\"name\":\"a\",\"value\":\"datam\"}],\"\":{\"wpnpunr\":\"datavskn\"}}")
                .toObject(HDInsightHiveActivity.class);
        Assertions.assertEquals("dukp", model.name());
        Assertions.assertEquals("yibwuzvmors", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.onInactiveMarkAs());
        Assertions.assertEquals("zuboigorwpbbjz", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("xxefzliguwqos", model.userProperties().get(0).name());
        Assertions.assertEquals("nstqwnpeg", model.linkedServiceName().referenceName());
        Assertions.assertEquals(945668794, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals("hyoigzwed", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.NONE, model.getDebugInfo());
        Assertions.assertEquals("gkaohhttty", model.scriptLinkedService().referenceName());
        Assertions.assertEquals(214972411, model.queryTimeout());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HDInsightHiveActivity model =
            new HDInsightHiveActivity()
                .withName("dukp")
                .withDescription("yibwuzvmors")
                .withState(ActivityState.INACTIVE)
                .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SUCCEEDED)
                .withDependsOn(
                    Arrays
                        .asList(
                            new ActivityDependency()
                                .withActivity("zuboigorwpbbjz")
                                .withDependencyConditions(
                                    Arrays
                                        .asList(
                                            DependencyCondition.COMPLETED,
                                            DependencyCondition.FAILED,
                                            DependencyCondition.SKIPPED))
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency()
                                .withActivity("ceqyrajdvvs")
                                .withDependencyConditions(
                                    Arrays
                                        .asList(
                                            DependencyCondition.COMPLETED,
                                            DependencyCondition.SKIPPED,
                                            DependencyCondition.SUCCEEDED,
                                            DependencyCondition.COMPLETED))
                                .withAdditionalProperties(mapOf())))
                .withUserProperties(
                    Arrays
                        .asList(
                            new UserProperty().withName("xxefzliguwqos").withValue("datacmfm"),
                            new UserProperty().withName("nlj").withValue("datagjcn"),
                            new UserProperty().withName("a").withValue("datam")))
                .withLinkedServiceName(
                    new LinkedServiceReference()
                        .withReferenceName("nstqwnpeg")
                        .withParameters(
                            mapOf(
                                "beekzyebpatwbbf",
                                "datadqeflvdfaqcqlex",
                                "nwohlcahhfuydgd",
                                "datadfl",
                                "bpduzeebde",
                                "dataitavgayuspzlcv")))
                .withPolicy(
                    new ActivityPolicy()
                        .withTimeout("datawkhruzz")
                        .withRetry("databbozivfoy")
                        .withRetryIntervalInSeconds(945668794)
                        .withSecureInput(false)
                        .withSecureOutput(false)
                        .withAdditionalProperties(mapOf()))
                .withStorageLinkedServices(
                    Arrays
                        .asList(
                            new LinkedServiceReference()
                                .withReferenceName("hyoigzwed")
                                .withParameters(
                                    mapOf("zdmhepfjdiwzgw", "dataratvpkgawrmuj", "chvqwhscvaqdxgel", "dataum")),
                            new LinkedServiceReference()
                                .withReferenceName("j")
                                .withParameters(
                                    mapOf(
                                        "aylkrastbks",
                                        "dataqkgavgoullx",
                                        "dxdtxbrdb",
                                        "datakziebmwyodfmpl",
                                        "pf",
                                        "datawqt",
                                        "kdoukqsc",
                                        "datafrfvhbbnoevkkr")),
                            new LinkedServiceReference()
                                .withReferenceName("dsjgows")
                                .withParameters(mapOf("cexpopqy", "datauapeqlhhmbyf")),
                            new LinkedServiceReference()
                                .withReferenceName("icesqpvmoxilh")
                                .withParameters(
                                    mapOf(
                                        "nrbngc",
                                        "dataiqsriubemxmuygmr",
                                        "mowvcnvfgqxq",
                                        "datafmophtkyzsgayn",
                                        "roqxrvycjdni",
                                        "dataysuapdns"))))
                .withArguments(Arrays.asList("datagyxmpmsacbamtoqs", "dataamoyxdigk", "datagz", "dataylqhqeosxdsxil"))
                .withGetDebugInfo(HDInsightActivityDebugInfoOption.NONE)
                .withScriptPath("datattd")
                .withScriptLinkedService(
                    new LinkedServiceReference()
                        .withReferenceName("gkaohhttty")
                        .withParameters(
                            mapOf(
                                "i",
                                "dataidzjjjfcyskpnkkx",
                                "hvtpmvppvgrigje",
                                "databxsmfvltboc",
                                "tfmfkuvybemo",
                                "datarlgkoqbzrclar",
                                "kzvzq",
                                "dataamshqvku")))
                .withDefines(mapOf("dbeanigozjrcx", "datajdsnv"))
                .withVariables(mapOf("almzpfylqevwwvz", "datag", "gjl", "datapdxcizrop", "q", "dataecffb"))
                .withQueryTimeout(214972411);
        model = BinaryData.fromObject(model).toObject(HDInsightHiveActivity.class);
        Assertions.assertEquals("dukp", model.name());
        Assertions.assertEquals("yibwuzvmors", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.onInactiveMarkAs());
        Assertions.assertEquals("zuboigorwpbbjz", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("xxefzliguwqos", model.userProperties().get(0).name());
        Assertions.assertEquals("nstqwnpeg", model.linkedServiceName().referenceName());
        Assertions.assertEquals(945668794, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals("hyoigzwed", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.NONE, model.getDebugInfo());
        Assertions.assertEquals("gkaohhttty", model.scriptLinkedService().referenceName());
        Assertions.assertEquals(214972411, model.queryTimeout());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
