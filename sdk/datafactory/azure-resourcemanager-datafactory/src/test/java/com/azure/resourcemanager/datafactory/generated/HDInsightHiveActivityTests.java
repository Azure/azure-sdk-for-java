// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.HDInsightActivityDebugInfoOption;
import com.azure.resourcemanager.datafactory.models.HDInsightHiveActivity;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class HDInsightHiveActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HDInsightHiveActivity model = BinaryData.fromString(
            "{\"type\":\"HDInsightHive\",\"typeProperties\":{\"storageLinkedServices\":[{\"referenceName\":\"ebzoujhijlduuvxk\",\"parameters\":{\"nfjwfoj\":\"dataufjfordzwbskfex\",\"qpmowlsrx\":\"datali\",\"eht\":\"datatevzqxpmf\",\"hylzzu\":\"datapqlonz\"}},{\"referenceName\":\"qqrmck\",\"parameters\":{\"lzgkzhbnbnjpie\":\"datasueutby\"}}],\"arguments\":[\"dataivsiwws\",\"datahsuhkik\"],\"getDebugInfo\":\"None\",\"scriptPath\":\"datacjyh\",\"scriptLinkedService\":{\"referenceName\":\"nmjtan\",\"parameters\":{\"loomsywyqgaska\":\"datarn\",\"ipgvfchzcpv\":\"datagdvknqui\",\"vbrxlsbgl\":\"datajzborwzpfgks\"}},\"defines\":{\"xdbhcfswp\":\"datateiirneo\",\"c\":\"dataarvcabsmrfx\"},\"variables\":{\"eexdboat\":\"datagwvmhbiziijd\",\"fxacojcara\":\"datasfyxdfeqrnawnqya\",\"qjboyngxogq\":\"datao\",\"ptwmawypkpbmid\":\"datawchynrdtn\"},\"queryTimeout\":1697410165},\"linkedServiceName\":{\"referenceName\":\"j\",\"parameters\":{\"yycgzvqpnjqpwxfk\":\"datapmtsgvvizaygtbml\",\"bdleegwlhanyueiz\":\"dataijpayvlnzwicqopw\"}},\"policy\":{\"timeout\":\"dataj\",\"retry\":\"datax\",\"retryIntervalInSeconds\":369646148,\"secureInput\":true,\"secureOutput\":false,\"\":{\"sv\":\"datazb\",\"icoaysargqkgaus\":\"dataqkbs\",\"lkxvfejdgoj\":\"dataugdyfyjeex\"}},\"name\":\"vqezekkv\",\"description\":\"yyowjpsmnxccasu\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"qyfatddw\",\"dependencyConditions\":[\"Completed\",\"Succeeded\"],\"\":{\"lmwzkxaglwd\":\"datato\",\"hvioccszdaxafu\":\"datatjfnmxzu\"}},{\"activity\":\"ccnqfwobnblu\",\"dependencyConditions\":[\"Succeeded\",\"Skipped\"],\"\":{\"ljr\":\"datalozlfdxjirfye\"}},{\"activity\":\"cgeorm\",\"dependencyConditions\":[\"Succeeded\"],\"\":{\"uhasqielhtukheim\":\"dataqhaonmfnfatwio\"}}],\"userProperties\":[{\"name\":\"tjcgdpqkfxd\",\"value\":\"datamdvrgl\"}],\"\":{\"eyqotmj\":\"datamke\",\"kjuwkkvarffju\":\"dataqqahmzleta\",\"a\":\"datafjbmowqwodmdrdty\"}}")
            .toObject(HDInsightHiveActivity.class);
        Assertions.assertEquals("vqezekkv", model.name());
        Assertions.assertEquals("yyowjpsmnxccasu", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.onInactiveMarkAs());
        Assertions.assertEquals("qyfatddw", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("tjcgdpqkfxd", model.userProperties().get(0).name());
        Assertions.assertEquals("j", model.linkedServiceName().referenceName());
        Assertions.assertEquals(369646148, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals("ebzoujhijlduuvxk", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.NONE, model.getDebugInfo());
        Assertions.assertEquals("nmjtan", model.scriptLinkedService().referenceName());
        Assertions.assertEquals(1697410165, model.queryTimeout());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HDInsightHiveActivity model = new HDInsightHiveActivity().withName("vqezekkv")
            .withDescription("yyowjpsmnxccasu")
            .withState(ActivityState.INACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SUCCEEDED)
            .withDependsOn(Arrays.asList(
                new ActivityDependency().withActivity("qyfatddw")
                    .withDependencyConditions(
                        Arrays.asList(DependencyCondition.COMPLETED, DependencyCondition.SUCCEEDED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("ccnqfwobnblu")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED, DependencyCondition.SKIPPED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("cgeorm")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED))
                    .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("tjcgdpqkfxd").withValue("datamdvrgl")))
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("j")
                .withParameters(
                    mapOf("yycgzvqpnjqpwxfk", "datapmtsgvvizaygtbml", "bdleegwlhanyueiz", "dataijpayvlnzwicqopw")))
            .withPolicy(new ActivityPolicy().withTimeout("dataj")
                .withRetry("datax")
                .withRetryIntervalInSeconds(369646148)
                .withSecureInput(true)
                .withSecureOutput(false)
                .withAdditionalProperties(mapOf()))
            .withStorageLinkedServices(Arrays.asList(
                new LinkedServiceReference().withReferenceName("ebzoujhijlduuvxk")
                    .withParameters(mapOf("nfjwfoj", "dataufjfordzwbskfex", "qpmowlsrx", "datali", "eht",
                        "datatevzqxpmf", "hylzzu", "datapqlonz")),
                new LinkedServiceReference().withReferenceName("qqrmck")
                    .withParameters(mapOf("lzgkzhbnbnjpie", "datasueutby"))))
            .withArguments(Arrays.asList("dataivsiwws", "datahsuhkik"))
            .withGetDebugInfo(HDInsightActivityDebugInfoOption.NONE)
            .withScriptPath("datacjyh")
            .withScriptLinkedService(
                new LinkedServiceReference().withReferenceName("nmjtan")
                    .withParameters(mapOf("loomsywyqgaska", "datarn", "ipgvfchzcpv", "datagdvknqui", "vbrxlsbgl",
                        "datajzborwzpfgks")))
            .withDefines(mapOf("xdbhcfswp", "datateiirneo", "c", "dataarvcabsmrfx"))
            .withVariables(mapOf("eexdboat", "datagwvmhbiziijd", "fxacojcara", "datasfyxdfeqrnawnqya", "qjboyngxogq",
                "datao", "ptwmawypkpbmid", "datawchynrdtn"))
            .withQueryTimeout(1697410165);
        model = BinaryData.fromObject(model).toObject(HDInsightHiveActivity.class);
        Assertions.assertEquals("vqezekkv", model.name());
        Assertions.assertEquals("yyowjpsmnxccasu", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.onInactiveMarkAs());
        Assertions.assertEquals("qyfatddw", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("tjcgdpqkfxd", model.userProperties().get(0).name());
        Assertions.assertEquals("j", model.linkedServiceName().referenceName());
        Assertions.assertEquals(369646148, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals("ebzoujhijlduuvxk", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.NONE, model.getDebugInfo());
        Assertions.assertEquals("nmjtan", model.scriptLinkedService().referenceName());
        Assertions.assertEquals(1697410165, model.queryTimeout());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
