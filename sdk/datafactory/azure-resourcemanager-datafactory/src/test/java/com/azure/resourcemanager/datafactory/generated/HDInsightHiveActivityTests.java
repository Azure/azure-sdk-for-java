// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.HDInsightActivityDebugInfoOption;
import com.azure.resourcemanager.datafactory.models.HDInsightHiveActivity;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class HDInsightHiveActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HDInsightHiveActivity model = BinaryData.fromString(
            "{\"type\":\"HDInsightHive\",\"typeProperties\":{\"storageLinkedServices\":[{\"referenceName\":\"ykkhxawohsje\",\"parameters\":{\"rltlhcjgjuopvkr\":\"datahnlweyzvrixcves\",\"iqvhfyv\":\"dataspksfxdmbxfyxw\"}},{\"referenceName\":\"xgoxsveiu\",\"parameters\":{\"ttdcfjalpsycvcks\":\"datawnojvcrgqmbnfvy\",\"pytsxnu\":\"datanngguu\"}},{\"referenceName\":\"wffthbziieo\",\"parameters\":{\"uabde\":\"dataccccr\",\"ksvvyvoib\":\"datajrbgcdxqgsteeks\",\"rwvvhc\":\"datavuqwljmzpyu\",\"rtputmtjsklkw\":\"datatctnqdcgobkceb\"}}],\"arguments\":[\"dataqiqckmfxld\",\"datatmandejne\",\"datarfqjhcdpw\",\"dataezb\"],\"getDebugInfo\":\"Always\",\"scriptPath\":\"datalqpcijyxc\",\"scriptLinkedService\":{\"referenceName\":\"cg\",\"parameters\":{\"har\":\"datarorxej\",\"y\":\"datahltlftr\",\"wbkxdhavegy\":\"dataxzdujpuhbaog\",\"pdatvndvwwejvqpw\":\"dataqsmlbzi\"}},\"defines\":{\"e\":\"dataoqwmhcpujygntx\",\"socfxlrzjjffl\":\"databssqthcywyoqxp\",\"ljf\":\"datazm\",\"ygnepj\":\"dataulwlze\"},\"variables\":{\"zt\":\"dataqdrphiyxjqran\",\"iovvyhsorca\":\"dataachpfzsfutaapbrw\",\"oigzwedfteratv\":\"datakfh\"},\"queryTimeout\":585669884},\"linkedServiceName\":{\"referenceName\":\"wrmujizdmh\",\"parameters\":{\"whscvaqdxge\":\"datajdiwzgwmumuchv\",\"gavgoullxpaylkr\":\"datanjgftq\",\"fmplgdxd\":\"datastbkskkziebmwyo\",\"frfvhbbnoevkkr\":\"dataxbrdbwwqtxpf\"}},\"policy\":{\"timeout\":\"dataoukqscmdsj\",\"retry\":\"dataws\",\"retryIntervalInSeconds\":943176803,\"secureInput\":true,\"secureOutput\":false,\"\":{\"byfacexp\":\"datahh\",\"pkqiqs\":\"datapqykicesqpvmoxil\"}},\"name\":\"iubemxmuygmr\",\"description\":\"rbngcafmo\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"gayngmowvcnvfgqx\",\"dependencyConditions\":[\"Failed\",\"Failed\",\"Succeeded\"],\"\":{\"omggyxmpm\":\"datadnslroqxrvycjdn\",\"qseamoyxdi\":\"dataacbamt\",\"dsxilefi\":\"datakggzmylqhqeos\",\"wgkao\":\"datattd\"}},{\"activity\":\"h\",\"dependencyConditions\":[\"Failed\"],\"\":{\"skpnkkxoicb\":\"dataypidzjjjfc\",\"pmvppvgrigjegrl\":\"datasmfvltbocqhv\",\"arrtfmfkuv\":\"datakoqbzrc\",\"qkzvzqhvzjdsnvt\":\"databemoramshqvk\"}},{\"activity\":\"b\",\"dependencyConditions\":[\"Skipped\"],\"\":{\"aq\":\"dataozjrc\"}}],\"userProperties\":[{\"name\":\"almzpfylqevwwvz\",\"value\":\"datapdxcizrop\"},{\"name\":\"gjl\",\"value\":\"dataecffb\"},{\"name\":\"q\",\"value\":\"datavb\"},{\"name\":\"nstqwnpeg\",\"value\":\"datau\"}],\"\":{\"lexobeek\":\"dataeflvdfaqc\",\"nwohlcahhfuydgd\":\"datayebpatwbbfjdfl\",\"bpduzeebde\":\"dataitavgayuspzlcv\"}}")
            .toObject(HDInsightHiveActivity.class);
        Assertions.assertEquals("iubemxmuygmr", model.name());
        Assertions.assertEquals("rbngcafmo", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.onInactiveMarkAs());
        Assertions.assertEquals("gayngmowvcnvfgqx", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("almzpfylqevwwvz", model.userProperties().get(0).name());
        Assertions.assertEquals("wrmujizdmh", model.linkedServiceName().referenceName());
        Assertions.assertEquals(943176803, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals("ykkhxawohsje", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.ALWAYS, model.getDebugInfo());
        Assertions.assertEquals("cg", model.scriptLinkedService().referenceName());
        Assertions.assertEquals(585669884, model.queryTimeout());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HDInsightHiveActivity model = new HDInsightHiveActivity().withName("iubemxmuygmr").withDescription("rbngcafmo")
            .withState(ActivityState.INACTIVE).withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SUCCEEDED)
            .withDependsOn(Arrays.asList(
                new ActivityDependency().withActivity("gayngmowvcnvfgqx")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED, DependencyCondition.FAILED,
                        DependencyCondition.SUCCEEDED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("h")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("b")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED))
                    .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("almzpfylqevwwvz").withValue("datapdxcizrop"),
                new UserProperty().withName("gjl").withValue("dataecffb"),
                new UserProperty().withName("q").withValue("datavb"),
                new UserProperty().withName("nstqwnpeg").withValue("datau")))
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("wrmujizdmh")
                .withParameters(mapOf("whscvaqdxge", "datajdiwzgwmumuchv", "gavgoullxpaylkr", "datanjgftq", "fmplgdxd",
                    "datastbkskkziebmwyo", "frfvhbbnoevkkr", "dataxbrdbwwqtxpf")))
            .withPolicy(new ActivityPolicy().withTimeout("dataoukqscmdsj").withRetry("dataws")
                .withRetryIntervalInSeconds(943176803).withSecureInput(true).withSecureOutput(false)
                .withAdditionalProperties(mapOf()))
            .withStorageLinkedServices(Arrays.asList(
                new LinkedServiceReference().withReferenceName("ykkhxawohsje")
                    .withParameters(mapOf("rltlhcjgjuopvkr", "datahnlweyzvrixcves", "iqvhfyv", "dataspksfxdmbxfyxw")),
                new LinkedServiceReference().withReferenceName("xgoxsveiu")
                    .withParameters(mapOf("ttdcfjalpsycvcks", "datawnojvcrgqmbnfvy", "pytsxnu", "datanngguu")),
                new LinkedServiceReference().withReferenceName("wffthbziieo")
                    .withParameters(mapOf("uabde", "dataccccr", "ksvvyvoib", "datajrbgcdxqgsteeks", "rwvvhc",
                        "datavuqwljmzpyu", "rtputmtjsklkw", "datatctnqdcgobkceb"))))
            .withArguments(Arrays.asList("dataqiqckmfxld", "datatmandejne", "datarfqjhcdpw", "dataezb"))
            .withGetDebugInfo(HDInsightActivityDebugInfoOption.ALWAYS).withScriptPath("datalqpcijyxc")
            .withScriptLinkedService(new LinkedServiceReference().withReferenceName("cg")
                .withParameters(mapOf("har", "datarorxej", "y", "datahltlftr", "wbkxdhavegy", "dataxzdujpuhbaog",
                    "pdatvndvwwejvqpw", "dataqsmlbzi")))
            .withDefines(mapOf("e", "dataoqwmhcpujygntx", "socfxlrzjjffl", "databssqthcywyoqxp", "ljf", "datazm",
                "ygnepj", "dataulwlze"))
            .withVariables(
                mapOf("zt", "dataqdrphiyxjqran", "iovvyhsorca", "dataachpfzsfutaapbrw", "oigzwedfteratv", "datakfh"))
            .withQueryTimeout(585669884);
        model = BinaryData.fromObject(model).toObject(HDInsightHiveActivity.class);
        Assertions.assertEquals("iubemxmuygmr", model.name());
        Assertions.assertEquals("rbngcafmo", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.onInactiveMarkAs());
        Assertions.assertEquals("gayngmowvcnvfgqx", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("almzpfylqevwwvz", model.userProperties().get(0).name());
        Assertions.assertEquals("wrmujizdmh", model.linkedServiceName().referenceName());
        Assertions.assertEquals(943176803, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals("ykkhxawohsje", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.ALWAYS, model.getDebugInfo());
        Assertions.assertEquals("cg", model.scriptLinkedService().referenceName());
        Assertions.assertEquals(585669884, model.queryTimeout());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
