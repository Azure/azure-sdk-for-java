// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.HDInsightActivityDebugInfoOption;
import com.azure.resourcemanager.datafactory.models.HDInsightHiveActivity;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class HDInsightHiveActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HDInsightHiveActivity model = BinaryData.fromString(
            "{\"type\":\"HDInsightHive\",\"typeProperties\":{\"storageLinkedServices\":[{\"referenceName\":\"knhcvxflzhgrn\",\"parameters\":{\"lykc\":\"datasdmovbvnjyqqofdg\",\"dwrggytyvo\":\"dataol\",\"mu\":\"datanjbyjgobz\"}},{\"referenceName\":\"fwmhza\",\"parameters\":{\"v\":\"datattxhifrjgvhonev\"}}],\"arguments\":[\"datalmkfvsol\"],\"getDebugInfo\":\"Always\",\"scriptPath\":\"datavzyoehlj\",\"scriptLinkedService\":{\"referenceName\":\"yguothnucqktu\",\"parameters\":{\"bahmivtuphw\":\"datagjtpriicteyd\"}},\"defines\":{\"fxfteo\":\"dataxo\"},\"variables\":{\"jmyoufqapuaypc\":\"dataziwkcpx\",\"pohuv\":\"dataikkmyrsvtrtxgg\",\"h\":\"datasxjzklqkgjukntkn\",\"ehptl\":\"datawgziqcwnef\"},\"queryTimeout\":1286730296},\"linkedServiceName\":{\"referenceName\":\"a\",\"parameters\":{\"x\":\"datanes\",\"iwp\":\"datamgeuoihtik\",\"suwct\":\"dataxyavcb\",\"yr\":\"databhcjfgxtl\"}},\"policy\":{\"timeout\":\"datap\",\"retry\":\"datawzrzivhkkd\",\"retryIntervalInSeconds\":1823602919,\"secureInput\":false,\"secureOutput\":true,\"\":{\"iuexfbrsd\":\"datauyuxgeph\",\"yagaxruffkm\":\"dataxhy\"}},\"name\":\"iuxy\",\"description\":\"hvpuqlhzdbbitpg\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"gmxwfodvzpx\",\"dependencyConditions\":[\"Skipped\"],\"\":{\"eyev\":\"datavgi\",\"tbasvjodgplagwvg\":\"datan\"}},{\"activity\":\"nxmqudnqcbb\",\"dependencyConditions\":[\"Skipped\",\"Skipped\"],\"\":{\"shiyyz\":\"datayszlbfzkvrmd\",\"mkhxunq\":\"datadnrgnybpqwjj\"}}],\"userProperties\":[{\"name\":\"ticgsdcpm\",\"value\":\"datalkuydabh\"},{\"name\":\"dcqrssqwzndzuxlg\",\"value\":\"datay\"},{\"name\":\"ngyqlzozmbapj\",\"value\":\"databzablmpntj\"},{\"name\":\"zkymcgtbpbfbgfwj\",\"value\":\"datawlvsefvkxxd\"}],\"\":{\"zm\":\"datanqmhr\",\"lqrkstjdjdasomxw\":\"dataxwgrflqbugxudsmd\"}}")
            .toObject(HDInsightHiveActivity.class);
        Assertions.assertEquals("iuxy", model.name());
        Assertions.assertEquals("hvpuqlhzdbbitpg", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("gmxwfodvzpx", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("ticgsdcpm", model.userProperties().get(0).name());
        Assertions.assertEquals("a", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1823602919, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals("knhcvxflzhgrn", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.ALWAYS, model.getDebugInfo());
        Assertions.assertEquals("yguothnucqktu", model.scriptLinkedService().referenceName());
        Assertions.assertEquals(1286730296, model.queryTimeout());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HDInsightHiveActivity model = new HDInsightHiveActivity().withName("iuxy")
            .withDescription("hvpuqlhzdbbitpg")
            .withState(ActivityState.INACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
            .withDependsOn(Arrays.asList(
                new ActivityDependency().withActivity("gmxwfodvzpx")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("nxmqudnqcbb")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.SKIPPED))
                    .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("ticgsdcpm").withValue("datalkuydabh"),
                new UserProperty().withName("dcqrssqwzndzuxlg").withValue("datay"),
                new UserProperty().withName("ngyqlzozmbapj").withValue("databzablmpntj"),
                new UserProperty().withName("zkymcgtbpbfbgfwj").withValue("datawlvsefvkxxd")))
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("a")
                .withParameters(
                    mapOf("x", "datanes", "iwp", "datamgeuoihtik", "suwct", "dataxyavcb", "yr", "databhcjfgxtl")))
            .withPolicy(new ActivityPolicy().withTimeout("datap")
                .withRetry("datawzrzivhkkd")
                .withRetryIntervalInSeconds(1823602919)
                .withSecureInput(false)
                .withSecureOutput(true)
                .withAdditionalProperties(mapOf()))
            .withStorageLinkedServices(Arrays.asList(new LinkedServiceReference().withReferenceName("knhcvxflzhgrn")
                .withParameters(mapOf("lykc", "datasdmovbvnjyqqofdg", "dwrggytyvo", "dataol", "mu", "datanjbyjgobz")),
                new LinkedServiceReference().withReferenceName("fwmhza")
                    .withParameters(mapOf("v", "datattxhifrjgvhonev"))))
            .withArguments(Arrays.asList("datalmkfvsol"))
            .withGetDebugInfo(HDInsightActivityDebugInfoOption.ALWAYS)
            .withScriptPath("datavzyoehlj")
            .withScriptLinkedService(new LinkedServiceReference().withReferenceName("yguothnucqktu")
                .withParameters(mapOf("bahmivtuphw", "datagjtpriicteyd")))
            .withDefines(mapOf("fxfteo", "dataxo"))
            .withVariables(mapOf("jmyoufqapuaypc", "dataziwkcpx", "pohuv", "dataikkmyrsvtrtxgg", "h",
                "datasxjzklqkgjukntkn", "ehptl", "datawgziqcwnef"))
            .withQueryTimeout(1286730296);
        model = BinaryData.fromObject(model).toObject(HDInsightHiveActivity.class);
        Assertions.assertEquals("iuxy", model.name());
        Assertions.assertEquals("hvpuqlhzdbbitpg", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("gmxwfodvzpx", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("ticgsdcpm", model.userProperties().get(0).name());
        Assertions.assertEquals("a", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1823602919, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals("knhcvxflzhgrn", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.ALWAYS, model.getDebugInfo());
        Assertions.assertEquals("yguothnucqktu", model.scriptLinkedService().referenceName());
        Assertions.assertEquals(1286730296, model.queryTimeout());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
