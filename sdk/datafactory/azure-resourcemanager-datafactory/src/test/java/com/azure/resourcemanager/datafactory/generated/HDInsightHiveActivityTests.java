// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.HDInsightActivityDebugInfoOption;
import com.azure.resourcemanager.datafactory.models.HDInsightHiveActivity;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class HDInsightHiveActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HDInsightHiveActivity model = BinaryData.fromString(
            "{\"type\":\"HDInsightHive\",\"typeProperties\":{\"storageLinkedServices\":[{\"referenceName\":\"ghloemqapvn\",\"parameters\":{\"bqadtv\":\"dataqkrsnxuezw\"}},{\"referenceName\":\"gug\",\"parameters\":{\"xxe\":\"datagkriv\",\"odvzjkz\":\"dataplphkiyiqpi\"}},{\"referenceName\":\"lvxdpopubbwps\",\"parameters\":{\"w\":\"datab\",\"mmgf\":\"datahjqakacbcbrsnnv\",\"qmty\":\"datat\",\"jkbisjurilqc\":\"dataqut\"}}],\"arguments\":[\"datadorbufog\",\"datackbizqqajs\"],\"getDebugInfo\":\"Always\",\"scriptPath\":\"dataojgv\",\"scriptLinkedService\":{\"referenceName\":\"zvtgwlzqcyvrbg\",\"parameters\":{\"zzcbc\":\"datardekjbljfkqubnn\"}},\"defines\":{\"lwfd\":\"datan\",\"bwjtnfaumqkgccld\":\"dataxxaoyiskyoasxakb\"},\"variables\":{\"zwsnryfaprhfc\":\"dataeweeeg\"},\"queryTimeout\":124430894},\"linkedServiceName\":{\"referenceName\":\"r\",\"parameters\":{\"nfrhbkn\":\"datadszuxhaqlywty\",\"xhfg\":\"dataagpnmcqud\"}},\"policy\":{\"timeout\":\"dataegm\",\"retry\":\"dataebzoujhijlduuvxk\",\"retryIntervalInSeconds\":1813397068,\"secureInput\":false,\"secureOutput\":true,\"\":{\"exgnfjwfo\":\"datadzwbsk\",\"pmowlsrxytev\":\"datazlia\",\"nzzhyl\":\"dataqxpmfhehtrpql\",\"m\":\"datazuxqqrmck\"}},\"name\":\"sueutby\",\"description\":\"zg\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"jpiecnrivsiwws\",\"dependencyConditions\":[\"Failed\",\"Skipped\"],\"\":{\"mjtanrirrnqloom\":\"dataikouvpcjyhsz\",\"dvknqui\":\"dataywyqgaskap\"}},{\"activity\":\"ipgvfchzcpv\",\"dependencyConditions\":[\"Succeeded\",\"Skipped\",\"Skipped\"],\"\":{\"bfpte\":\"datazpfgkslvbrxlsbg\"}}],\"userProperties\":[{\"name\":\"neopxdbhcfswpdar\",\"value\":\"datacabsmrfx\"}],\"\":{\"seexdboatvsfyxdf\":\"datavzgwvmhbiziij\",\"gfxacojca\":\"dataqrnawnqy\",\"j\":\"dataaxor\",\"dtnaptwmawypk\":\"dataoyngxogqvwchyn\"}}")
            .toObject(HDInsightHiveActivity.class);
        Assertions.assertEquals("sueutby", model.name());
        Assertions.assertEquals("zg", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("jpiecnrivsiwws", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("neopxdbhcfswpdar", model.userProperties().get(0).name());
        Assertions.assertEquals("r", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1813397068, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals("ghloemqapvn", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.ALWAYS, model.getDebugInfo());
        Assertions.assertEquals("zvtgwlzqcyvrbg", model.scriptLinkedService().referenceName());
        Assertions.assertEquals(124430894, model.queryTimeout());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HDInsightHiveActivity model
            = new HDInsightHiveActivity().withName("sueutby")
                .withDescription("zg")
                .withState(ActivityState.ACTIVE)
                .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
                .withDependsOn(Arrays.asList(
                    new ActivityDependency().withActivity("jpiecnrivsiwws")
                        .withDependencyConditions(
                            Arrays.asList(DependencyCondition.FAILED, DependencyCondition.SKIPPED))
                        .withAdditionalProperties(mapOf()),
                    new ActivityDependency().withActivity("ipgvfchzcpv")
                        .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED,
                            DependencyCondition.SKIPPED, DependencyCondition.SKIPPED))
                        .withAdditionalProperties(mapOf())))
                .withUserProperties(
                    Arrays.asList(new UserProperty().withName("neopxdbhcfswpdar").withValue("datacabsmrfx")))
                .withLinkedServiceName(new LinkedServiceReference().withReferenceName("r")
                    .withParameters(mapOf("nfrhbkn", "datadszuxhaqlywty", "xhfg", "dataagpnmcqud")))
                .withPolicy(new ActivityPolicy().withTimeout("dataegm")
                    .withRetry("dataebzoujhijlduuvxk")
                    .withRetryIntervalInSeconds(1813397068)
                    .withSecureInput(false)
                    .withSecureOutput(true)
                    .withAdditionalProperties(mapOf()))
                .withStorageLinkedServices(Arrays.asList(
                    new LinkedServiceReference().withReferenceName("ghloemqapvn")
                        .withParameters(mapOf("bqadtv", "dataqkrsnxuezw")),
                    new LinkedServiceReference().withReferenceName("gug")
                        .withParameters(mapOf("xxe", "datagkriv", "odvzjkz", "dataplphkiyiqpi")),
                    new LinkedServiceReference().withReferenceName("lvxdpopubbwps")
                        .withParameters(mapOf("w", "datab", "mmgf", "datahjqakacbcbrsnnv", "qmty", "datat",
                            "jkbisjurilqc", "dataqut"))))
                .withArguments(Arrays.asList("datadorbufog", "datackbizqqajs"))
                .withGetDebugInfo(HDInsightActivityDebugInfoOption.ALWAYS)
                .withScriptPath("dataojgv")
                .withScriptLinkedService(new LinkedServiceReference().withReferenceName("zvtgwlzqcyvrbg")
                    .withParameters(mapOf("zzcbc", "datardekjbljfkqubnn")))
                .withDefines(mapOf("lwfd", "datan", "bwjtnfaumqkgccld", "dataxxaoyiskyoasxakb"))
                .withVariables(mapOf("zwsnryfaprhfc", "dataeweeeg"))
                .withQueryTimeout(124430894);
        model = BinaryData.fromObject(model).toObject(HDInsightHiveActivity.class);
        Assertions.assertEquals("sueutby", model.name());
        Assertions.assertEquals("zg", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("jpiecnrivsiwws", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("neopxdbhcfswpdar", model.userProperties().get(0).name());
        Assertions.assertEquals("r", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1813397068, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals("ghloemqapvn", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.ALWAYS, model.getDebugInfo());
        Assertions.assertEquals("zvtgwlzqcyvrbg", model.scriptLinkedService().referenceName());
        Assertions.assertEquals(124430894, model.queryTimeout());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
