// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.HDInsightActivityDebugInfoOption;
import com.azure.resourcemanager.datafactory.models.HDInsightHiveActivity;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class HDInsightHiveActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HDInsightHiveActivity model = BinaryData.fromString(
            "{\"type\":\"HDInsightHive\",\"typeProperties\":{\"storageLinkedServices\":[{\"referenceName\":\"cndbu\",\"parameters\":{\"tnbk\":\"datakoxwyxodpcgdv\"}}],\"arguments\":[\"dataafila\",\"datazcdugnzymljg\",\"dataykaqwnkxoqe\",\"datajznuqgl\"],\"getDebugInfo\":\"Always\",\"scriptPath\":\"dataewshhqgjvchl\",\"scriptLinkedService\":{\"referenceName\":\"zfbtczzjf\",\"parameters\":{\"u\":\"datavwizjraksahwq\",\"misnb\":\"dataltfknro\",\"fvqtvukcfesizkn\":\"datacz\"}},\"defines\":{\"hwysdmovbvn\":\"dataxflzhgr\",\"czoln\":\"datayqqofdgzly\",\"gg\":\"dataw\",\"zjmukfwmhzarrft\":\"datatyvoxnjbyjgo\"},\"variables\":{\"vvab\":\"dataifrjgvhone\"},\"queryTimeout\":1200530863},\"linkedServiceName\":{\"referenceName\":\"fvsolkjowvzyoe\",\"parameters\":{\"r\":\"datatlyguothnucqktua\"}},\"policy\":{\"timeout\":\"datapriict\",\"retry\":\"datadlbahmivtuphwwy\",\"retryIntervalInSeconds\":3434022,\"secureInput\":false,\"secureOutput\":false,\"\":{\"pxgjmyoufqa\":\"dataomnrziwk\",\"vtrtxggm\":\"datauaypcdikkmyr\",\"gjukntknjhywgzi\":\"dataohuvasxjzklq\"}},\"name\":\"cwnefdehptlnw\",\"description\":\"a\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"x\",\"dependencyConditions\":[\"Skipped\",\"Failed\",\"Failed\"],\"\":{\"cbdsuwctv\":\"datahtikfiwpgxya\"}}],\"userProperties\":[{\"name\":\"jfg\",\"value\":\"datatl\"}],\"\":{\"zrzi\":\"dataeyhpbt\",\"y\":\"datahkkdcjymdoldb\"}}")
            .toObject(HDInsightHiveActivity.class);
        Assertions.assertEquals("cwnefdehptlnw", model.name());
        Assertions.assertEquals("a", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.onInactiveMarkAs());
        Assertions.assertEquals("x", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("jfg", model.userProperties().get(0).name());
        Assertions.assertEquals("fvsolkjowvzyoe", model.linkedServiceName().referenceName());
        Assertions.assertEquals(3434022, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals("cndbu", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.ALWAYS, model.getDebugInfo());
        Assertions.assertEquals("zfbtczzjf", model.scriptLinkedService().referenceName());
        Assertions.assertEquals(1200530863, model.queryTimeout());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HDInsightHiveActivity model = new HDInsightHiveActivity().withName("cwnefdehptlnw")
            .withDescription("a")
            .withState(ActivityState.INACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SUCCEEDED)
            .withDependsOn(Arrays.asList(new ActivityDependency().withActivity("x")
                .withDependencyConditions(
                    Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.FAILED, DependencyCondition.FAILED))
                .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("jfg").withValue("datatl")))
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("fvsolkjowvzyoe")
                .withParameters(mapOf("r", "datatlyguothnucqktua")))
            .withPolicy(new ActivityPolicy().withTimeout("datapriict")
                .withRetry("datadlbahmivtuphwwy")
                .withRetryIntervalInSeconds(3434022)
                .withSecureInput(false)
                .withSecureOutput(false)
                .withAdditionalProperties(mapOf()))
            .withStorageLinkedServices(Arrays.asList(new LinkedServiceReference().withReferenceName("cndbu")
                .withParameters(mapOf("tnbk", "datakoxwyxodpcgdv"))))
            .withArguments(Arrays.asList("dataafila", "datazcdugnzymljg", "dataykaqwnkxoqe", "datajznuqgl"))
            .withGetDebugInfo(HDInsightActivityDebugInfoOption.ALWAYS)
            .withScriptPath("dataewshhqgjvchl")
            .withScriptLinkedService(new LinkedServiceReference().withReferenceName("zfbtczzjf")
                .withParameters(mapOf("u", "datavwizjraksahwq", "misnb", "dataltfknro", "fvqtvukcfesizkn", "datacz")))
            .withDefines(mapOf("hwysdmovbvn", "dataxflzhgr", "czoln", "datayqqofdgzly", "gg", "dataw",
                "zjmukfwmhzarrft", "datatyvoxnjbyjgo"))
            .withVariables(mapOf("vvab", "dataifrjgvhone"))
            .withQueryTimeout(1200530863);
        model = BinaryData.fromObject(model).toObject(HDInsightHiveActivity.class);
        Assertions.assertEquals("cwnefdehptlnw", model.name());
        Assertions.assertEquals("a", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.onInactiveMarkAs());
        Assertions.assertEquals("x", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("jfg", model.userProperties().get(0).name());
        Assertions.assertEquals("fvsolkjowvzyoe", model.linkedServiceName().referenceName());
        Assertions.assertEquals(3434022, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals("cndbu", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.ALWAYS, model.getDebugInfo());
        Assertions.assertEquals("zfbtczzjf", model.scriptLinkedService().referenceName());
        Assertions.assertEquals(1200530863, model.queryTimeout());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
