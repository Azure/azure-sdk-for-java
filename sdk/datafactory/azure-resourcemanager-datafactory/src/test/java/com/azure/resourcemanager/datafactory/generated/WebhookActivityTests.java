// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import com.azure.resourcemanager.datafactory.models.WebActivityAuthentication;
import com.azure.resourcemanager.datafactory.models.WebhookActivity;
import com.azure.resourcemanager.datafactory.models.WebhookActivityMethod;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class WebhookActivityTests {
    @Test
    public void testDeserialize() {
        WebhookActivity model =
            BinaryData
                .fromString(
                    "{\"type\":\"WebHook\",\"typeProperties\":{\"method\":\"POST\",\"timeout\":\"rr\",\"authentication\":{\"type\":\"vmi\"}},\"name\":\"zmhkdclacroczfmu\",\"description\":\"rkeluxzshxzezbzu\",\"dependsOn\":[{\"activity\":\"l\",\"dependencyConditions\":[\"Completed\",\"Skipped\"],\"\":{}},{\"activity\":\"jcgwfsgqk\",\"dependencyConditions\":[\"Failed\"],\"\":{}},{\"activity\":\"upyuijp\",\"dependencyConditions\":[\"Skipped\",\"Completed\",\"Succeeded\",\"Failed\"],\"\":{}}],\"userProperties\":[{\"name\":\"azpzdqwuz\"},{\"name\":\"cmcokxizekuv\"},{\"name\":\"rjwuca\"},{\"name\":\"nzvajbvbnkrdem\"}],\"\":{}}")
                .toObject(WebhookActivity.class);
        Assertions.assertEquals("zmhkdclacroczfmu", model.name());
        Assertions.assertEquals("rkeluxzshxzezbzu", model.description());
        Assertions.assertEquals("l", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("azpzdqwuz", model.userProperties().get(0).name());
        Assertions.assertEquals(WebhookActivityMethod.POST, model.method());
        Assertions.assertEquals("rr", model.timeout());
        Assertions.assertEquals("vmi", model.authentication().type());
    }

    @Test
    public void testSerialize() {
        WebhookActivity model =
            new WebhookActivity()
                .withName("zmhkdclacroczfmu")
                .withDescription("rkeluxzshxzezbzu")
                .withDependsOn(
                    Arrays
                        .asList(
                            new ActivityDependency()
                                .withActivity("l")
                                .withDependencyConditions(
                                    Arrays.asList(DependencyCondition.COMPLETED, DependencyCondition.SKIPPED))
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency()
                                .withActivity("jcgwfsgqk")
                                .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED))
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency()
                                .withActivity("upyuijp")
                                .withDependencyConditions(
                                    Arrays
                                        .asList(
                                            DependencyCondition.SKIPPED,
                                            DependencyCondition.COMPLETED,
                                            DependencyCondition.SUCCEEDED,
                                            DependencyCondition.FAILED))
                                .withAdditionalProperties(mapOf())))
                .withUserProperties(
                    Arrays
                        .asList(
                            new UserProperty().withName("azpzdqwuz"),
                            new UserProperty().withName("cmcokxizekuv"),
                            new UserProperty().withName("rjwuca"),
                            new UserProperty().withName("nzvajbvbnkrdem")))
                .withMethod(WebhookActivityMethod.POST)
                .withTimeout("rr")
                .withAuthentication(new WebActivityAuthentication().withType("vmi"));
        model = BinaryData.fromObject(model).toObject(WebhookActivity.class);
        Assertions.assertEquals("zmhkdclacroczfmu", model.name());
        Assertions.assertEquals("rkeluxzshxzezbzu", model.description());
        Assertions.assertEquals("l", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("azpzdqwuz", model.userProperties().get(0).name());
        Assertions.assertEquals(WebhookActivityMethod.POST, model.method());
        Assertions.assertEquals("rr", model.timeout());
        Assertions.assertEquals("vmi", model.authentication().type());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
