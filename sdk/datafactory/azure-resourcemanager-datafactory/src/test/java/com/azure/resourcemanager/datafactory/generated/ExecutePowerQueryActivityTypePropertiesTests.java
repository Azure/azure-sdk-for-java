// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.ExecutePowerQueryActivityTypeProperties;
import com.azure.resourcemanager.datafactory.models.DataFlowReference;
import com.azure.resourcemanager.datafactory.models.DataFlowReferenceType;
import com.azure.resourcemanager.datafactory.models.DataFlowStagingInfo;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.ExecuteDataFlowActivityTypePropertiesCompute;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeReference;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.PowerQuerySink;
import com.azure.resourcemanager.datafactory.models.PowerQuerySinkMapping;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ExecutePowerQueryActivityTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ExecutePowerQueryActivityTypeProperties model = BinaryData.fromString(
            "{\"sinks\":{\"xurdfzynfm\":{\"script\":\"rtcjimsge\",\"schemaLinkedService\":{\"referenceName\":\"kwwedbc\",\"parameters\":{\"vqjw\":\"datapjnyrtlinijc\"}},\"rejectedDataLinkedService\":{\"referenceName\":\"dpqln\",\"parameters\":{\"uzspkqxbt\":\"datanbkzqassnwvw\"}},\"name\":\"watwv\",\"description\":\"tudnns\",\"dataset\":{\"referenceName\":\"grqiq\",\"parameters\":{\"mwnrw\":\"databjxo\",\"lfrgv\":\"dataanvjhoshinljquqe\"}},\"linkedService\":{\"referenceName\":\"ulxhpvursmeumy\",\"parameters\":{\"kgsfmgy\":\"dataovypwvhjs\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"c\",\"datasetParameters\":\"datapqzmixw\",\"parameters\":{\"zjbuz\":\"datahjfseh\",\"bc\":\"datainzukzb\",\"gs\":\"datadhleuabsiqnyjjfj\",\"nxexafql\":\"dataup\"},\"\":{\"roltddifywxeua\":\"databzphlkrjsgb\",\"ackfupyivqpczx\":\"databijaqyiyefleju\",\"bperkeyhybc\":\"datazlxowgzt\"}}},\"eocvsrei\":{\"script\":\"qrnu\",\"schemaLinkedService\":{\"referenceName\":\"m\",\"parameters\":{\"zdobh\":\"dataeauifczcrutf\",\"ztfnjp\":\"datajjbx\"}},\"rejectedDataLinkedService\":{\"referenceName\":\"xannjrxvthqjvo\",\"parameters\":{\"ppnzaluafxwa\":\"dataggqwlbxnyp\"}},\"name\":\"frsmxgvfmb\",\"description\":\"rollntvfqrjfzfhs\",\"dataset\":{\"referenceName\":\"sr\",\"parameters\":{\"xzc\":\"datatainplxkzc\",\"cq\":\"dataewpqpwefzlreonsq\",\"di\":\"datan\",\"qvmghz\":\"datagrapmftziracztls\"}},\"linkedService\":{\"referenceName\":\"t\",\"parameters\":{\"wnjo\":\"datatjgeynj\",\"fgjmlp\":\"dataipjqwxsxswineyje\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"rftnfgsmgsf\",\"datasetParameters\":\"datalpbgkefbfn\",\"parameters\":{\"sinsnikm\":\"dataemsfpmoiyk\",\"ebjzo\":\"datanzcenkseqlvqkk\"},\"\":{\"gifmlkvaiolfr\":\"datayshoeqpvkk\"}}}},\"queries\":[{\"queryName\":\"iajksmwrbwejhoc\",\"dataflowSinks\":[{\"script\":\"yq\",\"schemaLinkedService\":{\"referenceName\":\"kpoufupa\",\"parameters\":{\"dzvnyzhbtnagk\":\"databbzje\"}},\"rejectedDataLinkedService\":{\"referenceName\":\"nenozs\",\"parameters\":{\"rtwrnuklshrqrh\":\"datamjschttl\",\"tbdx\":\"datach\",\"drfxqudyadxnrtk\":\"datatvp\"}},\"name\":\"t\",\"description\":\"un\",\"dataset\":{\"referenceName\":\"pv\",\"parameters\":{\"gbgvyz\":\"datajm\",\"dzwubuqxsnc\":\"datao\",\"jzwisxsasgfm\":\"datasrtqortxeuwb\"}},\"linkedService\":{\"referenceName\":\"xzbuhqmmadyi\",\"parameters\":{\"mf\":\"datahrdnlabo\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"wcgkikb\",\"datasetParameters\":\"dataqdopxbnrnn\",\"parameters\":{\"puywx\":\"datasoiiypvd\"},\"\":{\"qsjktqe\":\"datatlqszwcwa\",\"besgdlskwfiwvdq\":\"datamagoqfmks\"}}},{\"script\":\"qrzeotogo\",\"schemaLinkedService\":{\"referenceName\":\"tm\",\"parameters\":{\"mwrbruuwhhb\":\"datairoszxi\",\"ldmxm\":\"dataynfx\",\"vqgaamc\":\"datakh\"}},\"rejectedDataLinkedService\":{\"referenceName\":\"besyh\",\"parameters\":{\"smvlqnksovv\":\"dataosuawd\",\"kpdkwvwxr\":\"datatlpzfjbzosytturz\",\"ygwwxentudpvsnll\":\"datamublfsagp\"}},\"name\":\"jbb\",\"description\":\"mmtlwrwsgyqwf\",\"dataset\":{\"referenceName\":\"pfkyttxgtcovp\",\"parameters\":{\"qdgpnpdmk\":\"datagz\",\"ascxmnbenanhzx\":\"datajg\"}},\"linkedService\":{\"referenceName\":\"xfwcqcxyjurk\",\"parameters\":{\"dngh\":\"datakzizlaha\",\"iuzxphhwnvt\":\"dataezmp\",\"elbabmddgq\":\"datahnwcq\",\"gtdawst\":\"datak\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"ngfkrcshbdvqo\",\"datasetParameters\":\"databwenggxesxxpn\",\"parameters\":{\"so\":\"datahwkriv\",\"ypyfhezluhqcte\":\"dataexgykriwpxc\",\"cnqexl\":\"datamuxagcoygznmr\"},\"\":{\"aqjanpidvcogh\":\"datagobaqnhlktdzf\",\"rirxlvus\":\"datatjvsk\",\"zgrbub\":\"datahd\",\"dxxzoywk\":\"dataorkcplpuddn\"}}},{\"script\":\"zo\",\"schemaLinkedService\":{\"referenceName\":\"hqefza\",\"parameters\":{\"pfgrqmquzhr\":\"datacbstxunz\",\"xggspydmuldlz\":\"datanthceoujfazt\"}},\"rejectedDataLinkedService\":{\"referenceName\":\"cuvxygloxf\",\"parameters\":{\"x\":\"datapgneggtyifmfi\",\"unooouq\":\"datadbayxdr\"}},\"name\":\"nvrbhqxewdcdnqh\",\"description\":\"ehpu\",\"dataset\":{\"referenceName\":\"jmluzvtptpj\",\"parameters\":{\"oxbghpgscrp\":\"datazqczigdwgq\",\"njs\":\"databawovawmrmwrzm\",\"nst\":\"datax\",\"imunmgtkyzupjn\":\"datavragr\"}},\"linkedService\":{\"referenceName\":\"jmpxshyxiez\",\"parameters\":{\"lfxf\":\"datadaxgwgbpblsas\",\"taeobr\":\"datazfybpwzgwhntkmu\",\"alpig\":\"databqbftfscbgarfbx\",\"rlmpincatsh\":\"datanshlu\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"xg\",\"datasetParameters\":\"databm\",\"parameters\":{\"vmclnsahpswspyif\":\"datadpjnwgtxp\",\"hutabhmck\":\"datasakaihwdybjgyxb\"},\"\":{\"vpobcxnrwaz\":\"dataadoxlleohvcy\",\"ajhllnk\":\"dataoyh\",\"nbkcweeakgtrwos\":\"dataquwo\"}}},{\"script\":\"okdtdrv\",\"schemaLinkedService\":{\"referenceName\":\"ui\",\"parameters\":{\"vii\":\"datapydywwjsqdchb\",\"chsarf\":\"datauyvllppljcaqeor\",\"obw\":\"dataydetmehdzeyhcft\"}},\"rejectedDataLinkedService\":{\"referenceName\":\"fzlorinwtv\",\"parameters\":{\"eoutztlnhg\":\"datanywfyoimw\",\"locyiuiwkr\":\"datamtddkyyrpbnqi\"}},\"name\":\"pishcrxc\",\"description\":\"nvpiicnwtgyy\",\"dataset\":{\"referenceName\":\"k\",\"parameters\":{\"enzw\":\"datazxhotyhyj\"}},\"linkedService\":{\"referenceName\":\"hvslpythqg\",\"parameters\":{\"czzvfdhsmqygm\":\"datal\",\"bycrjeaxjgokvlix\":\"datafsnl\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"jykafii\",\"datasetParameters\":\"datakvtsmcncj\",\"parameters\":{\"ebioqxattthazqd\":\"datahcelwmlfetlmmd\"},\"\":{\"k\":\"datayz\",\"dolezbya\":\"dataww\",\"zikzt\":\"datazuoheuifshsbtpl\"}}}]},{\"queryName\":\"qkwg\",\"dataflowSinks\":[{\"script\":\"byapckfapzfqzvk\",\"schemaLinkedService\":{\"referenceName\":\"s\",\"parameters\":{\"tmmwbdkpuxda\":\"datarhekxmjkiqb\",\"wjmsogzc\":\"datahpfrexbg\",\"j\":\"dataz\",\"lrzvjvlnafpfou\":\"datawqiawjevdnpkdmq\"}},\"rejectedDataLinkedService\":{\"referenceName\":\"aqba\",\"parameters\":{\"urxwtfpeuftpjldl\":\"datajwcdjxqxfvk\",\"mmbxkbtberyql\":\"dataforvsypjytgz\",\"gm\":\"datazebmikojpggwuwa\"}},\"name\":\"gmg\",\"description\":\"llqfbeuugir\",\"dataset\":{\"referenceName\":\"ezpsydkgtdwlvsf\",\"parameters\":{\"bzhdonyleisaw\":\"dataxdyhoozdcthhecmj\",\"onyrfmozuoop\":\"datadwmuytkkfo\",\"yzyiyvh\":\"datatud\",\"pb\":\"datadkbfqkea\"}},\"linkedService\":{\"referenceName\":\"nqcvdrpwcki\",\"parameters\":{\"tlbaxiaerpoasy\":\"datanu\",\"xoudmaniwkw\":\"datazebbrqnnrdb\",\"edp\":\"datamqymgiydg\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"owcwehjqyullep\",\"datasetParameters\":\"datadfrgobrs\",\"parameters\":{\"ri\":\"dataayy\"},\"\":{\"kxvrig\":\"datameflpimmwirixcz\",\"afpiejbpbdu\":\"datautxzascalwfefyg\",\"o\":\"dataaypsvedxphf\"}}}]},{\"queryName\":\"q\",\"dataflowSinks\":[{\"script\":\"kbe\",\"schemaLinkedService\":{\"referenceName\":\"mmitvviqs\",\"parameters\":{\"sqwjqevwt\":\"dataujhmdpey\",\"ngrr\":\"datarjqnciwybj\",\"ctkgllmpku\":\"datadtin\",\"ynvtimpgusroqk\":\"datablucxyhtkyq\"}},\"rejectedDataLinkedService\":{\"referenceName\":\"kvojrkfcjtjq\",\"parameters\":{\"xbpxzducfz\":\"datawsmgkomqfvhkp\"}},\"name\":\"pgtbytibpgkidi\",\"description\":\"fputcihy\",\"dataset\":{\"referenceName\":\"pksjwaglhwnnfgy\",\"parameters\":{\"kmwvqtmfq\":\"dataou\",\"uugoujsvhezhe\":\"datazvfeljytshjjbo\",\"ayyshf\":\"datayhwo\"}},\"linkedService\":{\"referenceName\":\"nfyzjzey\",\"parameters\":{\"edxfc\":\"datadrnzeidbl\",\"u\":\"datakticwgdivqybvgce\",\"gsuhtlz\":\"datask\",\"elyfuliatbo\":\"datamsqebmfo\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"axeozgjtuhdgms\",\"datasetParameters\":\"datayqehbprrp\",\"parameters\":{\"zlzidu\":\"datantuveqmtlf\",\"ets\":\"datalxw\"},\"\":{\"qudx\":\"datat\",\"iwpaeumely\":\"datarbgqtjjiearyzzxk\",\"ukgmtrnwwwwlv\":\"datahphurzaz\",\"ize\":\"datarditghbaqumqlfno\"}}}]},{\"queryName\":\"yg\",\"dataflowSinks\":[{\"script\":\"yltqryaahlttomlp\",\"schemaLinkedService\":{\"referenceName\":\"jlk\",\"parameters\":{\"ptzefeovsgikvsn\":\"dataeuiw\"}},\"rejectedDataLinkedService\":{\"referenceName\":\"kfsfgabdumhpbci\",\"parameters\":{\"wyltau\":\"dataypbv\",\"rfdyawetkr\":\"datagbelxmulyalupijq\",\"rjdceimludqx\":\"dataqitmcxqahxtnl\"}},\"name\":\"xqqbk\",\"description\":\"nskivoxrjmgm\",\"dataset\":{\"referenceName\":\"i\",\"parameters\":{\"eebcxeecgfs\":\"dataufhx\",\"yltnfwlt\":\"datadjipayybwxqr\",\"amgijevfjnvu\":\"dataukmdeqrp\",\"xtkvpejtdlqorcyp\":\"datakwjmtehpfn\"}},\"linkedService\":{\"referenceName\":\"wfalgzsg\",\"parameters\":{\"ducvhhayqx\":\"dataclzmjhiqgi\",\"ujenobf\":\"datacrsho\",\"vtzrg\":\"dataiscauudxf\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"brfqiekw\",\"datasetParameters\":\"datam\",\"parameters\":{\"oypgqoqvc\":\"datadgv\",\"bkapbgmjodf\":\"datadbypzcqlau\",\"juvjmnsgv\":\"datauhlipxkxhjtgv\",\"lvglwxepiwpi\":\"datayhomd\"},\"\":{\"ofscibrt\":\"dataxmplxz\",\"yzxzkpum\":\"datayjqur\",\"boqeteavphup\":\"datada\"}}}]}],\"dataFlow\":{\"type\":\"DataFlowReference\",\"referenceName\":\"rp\",\"datasetParameters\":\"datavgihknnvjgccq\",\"parameters\":{\"bnrbtattzxvfs\":\"datawofhjonq\",\"bzjvzgyzenveiy\":\"dataufjfuvry\",\"fkbbchdypc\":\"datadngtylvdumpmx\",\"pteclfjauetzppc\":\"datakmrvgdjbl\"},\"\":{\"mmizhdxsybn\":\"datartgnvl\",\"vkcnplvrqkmpqsp\":\"datao\"}},\"staging\":{\"linkedService\":{\"referenceName\":\"nxwtxtet\",\"parameters\":{\"rh\":\"datalzauumzw\",\"ngszvugqwxs\":\"datavkneozp\"}},\"folderPath\":\"datasgfxwyfeqajtzqu\"},\"integrationRuntime\":{\"referenceName\":\"rjwllg\",\"parameters\":{\"zjwugrjio\":\"dataoxkpjzycq\",\"fftv\":\"dataecuxgi\",\"ecs\":\"datalf\",\"sbqdjawul\":\"datafq\"}},\"compute\":{\"computeType\":\"datam\",\"coreCount\":\"datazpldhbapfr\"},\"traceLevel\":\"datawrmdmrhsybvn\",\"continueOnError\":\"dataxmipkatjyxhvjjvs\",\"runConcurrently\":\"datamdlysfroyn\",\"sourceStagingConcurrency\":\"dataoamg\"}")
            .toObject(ExecutePowerQueryActivityTypeProperties.class);
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.dataFlow().type());
        Assertions.assertEquals("rp", model.dataFlow().referenceName());
        Assertions.assertEquals("nxwtxtet", model.staging().linkedService().referenceName());
        Assertions.assertEquals("rjwllg", model.integrationRuntime().referenceName());
        Assertions.assertEquals("watwv", model.sinks().get("xurdfzynfm").name());
        Assertions.assertEquals("tudnns", model.sinks().get("xurdfzynfm").description());
        Assertions.assertEquals("grqiq", model.sinks().get("xurdfzynfm").dataset().referenceName());
        Assertions.assertEquals("ulxhpvursmeumy", model.sinks().get("xurdfzynfm").linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE,
            model.sinks().get("xurdfzynfm").flowlet().type());
        Assertions.assertEquals("c", model.sinks().get("xurdfzynfm").flowlet().referenceName());
        Assertions.assertEquals("kwwedbc", model.sinks().get("xurdfzynfm").schemaLinkedService().referenceName());
        Assertions.assertEquals("dpqln", model.sinks().get("xurdfzynfm").rejectedDataLinkedService().referenceName());
        Assertions.assertEquals("rtcjimsge", model.sinks().get("xurdfzynfm").script());
        Assertions.assertEquals("iajksmwrbwejhoc", model.queries().get(0).queryName());
        Assertions.assertEquals("t", model.queries().get(0).dataflowSinks().get(0).name());
        Assertions.assertEquals("un", model.queries().get(0).dataflowSinks().get(0).description());
        Assertions.assertEquals("pv", model.queries().get(0).dataflowSinks().get(0).dataset().referenceName());
        Assertions.assertEquals("xzbuhqmmadyi",
            model.queries().get(0).dataflowSinks().get(0).linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE,
            model.queries().get(0).dataflowSinks().get(0).flowlet().type());
        Assertions.assertEquals("wcgkikb", model.queries().get(0).dataflowSinks().get(0).flowlet().referenceName());
        Assertions.assertEquals("kpoufupa",
            model.queries().get(0).dataflowSinks().get(0).schemaLinkedService().referenceName());
        Assertions.assertEquals("nenozs",
            model.queries().get(0).dataflowSinks().get(0).rejectedDataLinkedService().referenceName());
        Assertions.assertEquals("yq", model.queries().get(0).dataflowSinks().get(0).script());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ExecutePowerQueryActivityTypeProperties model = new ExecutePowerQueryActivityTypeProperties()
            .withDataFlow(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                .withReferenceName("rp").withDatasetParameters("datavgihknnvjgccq")
                .withParameters(mapOf("bnrbtattzxvfs", "datawofhjonq", "bzjvzgyzenveiy", "dataufjfuvry", "fkbbchdypc",
                    "datadngtylvdumpmx", "pteclfjauetzppc", "datakmrvgdjbl"))
                .withAdditionalProperties(mapOf()))
            .withStaging(new DataFlowStagingInfo()
                .withLinkedService(new LinkedServiceReference().withReferenceName("nxwtxtet")
                    .withParameters(mapOf("rh", "datalzauumzw", "ngszvugqwxs", "datavkneozp")))
                .withFolderPath("datasgfxwyfeqajtzqu"))
            .withIntegrationRuntime(new IntegrationRuntimeReference().withReferenceName("rjwllg").withParameters(
                mapOf("zjwugrjio", "dataoxkpjzycq", "fftv", "dataecuxgi", "ecs", "datalf", "sbqdjawul", "datafq")))
            .withCompute(new ExecuteDataFlowActivityTypePropertiesCompute().withComputeType("datam")
                .withCoreCount("datazpldhbapfr"))
            .withTraceLevel("datawrmdmrhsybvn").withContinueOnError("dataxmipkatjyxhvjjvs")
            .withRunConcurrently("datamdlysfroyn").withSourceStagingConcurrency("dataoamg")
            .withSinks(
                mapOf("xurdfzynfm",
                    new PowerQuerySink().withName("watwv").withDescription("tudnns")
                        .withDataset(new DatasetReference().withReferenceName("grqiq")
                            .withParameters(mapOf("mwnrw", "databjxo", "lfrgv", "dataanvjhoshinljquqe")))
                        .withLinkedService(new LinkedServiceReference().withReferenceName("ulxhpvursmeumy")
                            .withParameters(mapOf("kgsfmgy", "dataovypwvhjs")))
                        .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                            .withReferenceName("c").withDatasetParameters("datapqzmixw")
                            .withParameters(mapOf("zjbuz", "datahjfseh", "bc", "datainzukzb", "gs",
                                "datadhleuabsiqnyjjfj", "nxexafql", "dataup"))
                            .withAdditionalProperties(mapOf()))
                        .withSchemaLinkedService(new LinkedServiceReference().withReferenceName("kwwedbc")
                            .withParameters(mapOf("vqjw", "datapjnyrtlinijc")))
                        .withRejectedDataLinkedService(new LinkedServiceReference().withReferenceName("dpqln")
                            .withParameters(mapOf("uzspkqxbt", "datanbkzqassnwvw")))
                        .withScript("rtcjimsge"),
                    "eocvsrei",
                    new PowerQuerySink().withName("frsmxgvfmb").withDescription("rollntvfqrjfzfhs")
                        .withDataset(new DatasetReference().withReferenceName("sr")
                            .withParameters(mapOf("xzc", "datatainplxkzc", "cq", "dataewpqpwefzlreonsq", "di", "datan",
                                "qvmghz", "datagrapmftziracztls")))
                        .withLinkedService(new LinkedServiceReference().withReferenceName("t")
                            .withParameters(mapOf("wnjo", "datatjgeynj", "fgjmlp", "dataipjqwxsxswineyje")))
                        .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                            .withReferenceName("rftnfgsmgsf").withDatasetParameters("datalpbgkefbfn")
                            .withParameters(mapOf("sinsnikm", "dataemsfpmoiyk", "ebjzo", "datanzcenkseqlvqkk"))
                            .withAdditionalProperties(mapOf()))
                        .withSchemaLinkedService(new LinkedServiceReference().withReferenceName("m")
                            .withParameters(mapOf("zdobh", "dataeauifczcrutf", "ztfnjp", "datajjbx")))
                        .withRejectedDataLinkedService(
                            new LinkedServiceReference().withReferenceName("xannjrxvthqjvo")
                                .withParameters(mapOf("ppnzaluafxwa", "dataggqwlbxnyp")))
                        .withScript("qrnu")))
            .withQueries(
                Arrays.asList(
                    new PowerQuerySinkMapping().withQueryName("iajksmwrbwejhoc")
                        .withDataflowSinks(Arrays.asList(
                            new PowerQuerySink().withName("t").withDescription("un")
                                .withDataset(new DatasetReference().withReferenceName("pv")
                                    .withParameters(mapOf("gbgvyz", "datajm", "dzwubuqxsnc", "datao", "jzwisxsasgfm",
                                        "datasrtqortxeuwb")))
                                .withLinkedService(new LinkedServiceReference().withReferenceName("xzbuhqmmadyi")
                                    .withParameters(mapOf("mf", "datahrdnlabo")))
                                .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                                    .withReferenceName("wcgkikb").withDatasetParameters("dataqdopxbnrnn")
                                    .withParameters(mapOf("puywx", "datasoiiypvd")).withAdditionalProperties(mapOf()))
                                .withSchemaLinkedService(new LinkedServiceReference().withReferenceName("kpoufupa")
                                    .withParameters(mapOf("dzvnyzhbtnagk", "databbzje")))
                                .withRejectedDataLinkedService(new LinkedServiceReference()
                                    .withReferenceName("nenozs")
                                    .withParameters(mapOf("rtwrnuklshrqrh", "datamjschttl", "tbdx", "datach",
                                        "drfxqudyadxnrtk", "datatvp")))
                                .withScript("yq"),
                            new PowerQuerySink().withName("jbb").withDescription("mmtlwrwsgyqwf")
                                .withDataset(new DatasetReference().withReferenceName("pfkyttxgtcovp")
                                    .withParameters(mapOf("qdgpnpdmk", "datagz", "ascxmnbenanhzx", "datajg")))
                                .withLinkedService(new LinkedServiceReference().withReferenceName("xfwcqcxyjurk")
                                    .withParameters(mapOf("dngh", "datakzizlaha", "iuzxphhwnvt", "dataezmp",
                                        "elbabmddgq", "datahnwcq", "gtdawst", "datak")))
                                .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                                    .withReferenceName("ngfkrcshbdvqo").withDatasetParameters("databwenggxesxxpn")
                                    .withParameters(mapOf("so", "datahwkriv", "ypyfhezluhqcte", "dataexgykriwpxc",
                                        "cnqexl", "datamuxagcoygznmr"))
                                    .withAdditionalProperties(mapOf()))
                                .withSchemaLinkedService(
                                    new LinkedServiceReference().withReferenceName("tm").withParameters(
                                        mapOf("mwrbruuwhhb", "datairoszxi", "ldmxm", "dataynfx", "vqgaamc", "datakh")))
                                .withRejectedDataLinkedService(new LinkedServiceReference().withReferenceName("besyh")
                                    .withParameters(mapOf("smvlqnksovv", "dataosuawd", "kpdkwvwxr",
                                        "datatlpzfjbzosytturz", "ygwwxentudpvsnll", "datamublfsagp")))
                                .withScript("qrzeotogo"),
                            new PowerQuerySink().withName("nvrbhqxewdcdnqh").withDescription("ehpu")
                                .withDataset(new DatasetReference().withReferenceName("jmluzvtptpj")
                                    .withParameters(mapOf("oxbghpgscrp", "datazqczigdwgq", "njs", "databawovawmrmwrzm",
                                        "nst", "datax", "imunmgtkyzupjn", "datavragr")))
                                .withLinkedService(new LinkedServiceReference().withReferenceName("jmpxshyxiez")
                                    .withParameters(mapOf("lfxf", "datadaxgwgbpblsas", "taeobr", "datazfybpwzgwhntkmu",
                                        "alpig", "databqbftfscbgarfbx", "rlmpincatsh", "datanshlu")))
                                .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                                    .withReferenceName("xg").withDatasetParameters("databm")
                                    .withParameters(
                                        mapOf("vmclnsahpswspyif", "datadpjnwgtxp", "hutabhmck", "datasakaihwdybjgyxb"))
                                    .withAdditionalProperties(mapOf()))
                                .withSchemaLinkedService(
                                    new LinkedServiceReference().withReferenceName("hqefza").withParameters(
                                        mapOf("pfgrqmquzhr", "datacbstxunz", "xggspydmuldlz", "datanthceoujfazt")))
                                .withRejectedDataLinkedService(
                                    new LinkedServiceReference().withReferenceName("cuvxygloxf")
                                        .withParameters(mapOf("x", "datapgneggtyifmfi", "unooouq", "datadbayxdr")))
                                .withScript("zo"),
                            new PowerQuerySink().withName("pishcrxc").withDescription("nvpiicnwtgyy")
                                .withDataset(new DatasetReference().withReferenceName("k")
                                    .withParameters(mapOf("enzw", "datazxhotyhyj")))
                                .withLinkedService(new LinkedServiceReference().withReferenceName("hvslpythqg")
                                    .withParameters(mapOf("czzvfdhsmqygm", "datal", "bycrjeaxjgokvlix", "datafsnl")))
                                .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                                    .withReferenceName("jykafii").withDatasetParameters("datakvtsmcncj")
                                    .withParameters(mapOf("ebioqxattthazqd", "datahcelwmlfetlmmd"))
                                    .withAdditionalProperties(mapOf()))
                                .withSchemaLinkedService(new LinkedServiceReference().withReferenceName("ui")
                                    .withParameters(mapOf("vii", "datapydywwjsqdchb", "chsarf", "datauyvllppljcaqeor",
                                        "obw", "dataydetmehdzeyhcft")))
                                .withRejectedDataLinkedService(
                                    new LinkedServiceReference().withReferenceName("fzlorinwtv").withParameters(
                                        mapOf("eoutztlnhg", "datanywfyoimw", "locyiuiwkr", "datamtddkyyrpbnqi")))
                                .withScript("okdtdrv"))),
                    new PowerQuerySinkMapping().withQueryName("qkwg")
                        .withDataflowSinks(Arrays.asList(new PowerQuerySink().withName("gmg")
                            .withDescription("llqfbeuugir")
                            .withDataset(new DatasetReference().withReferenceName("ezpsydkgtdwlvsf")
                                .withParameters(mapOf("bzhdonyleisaw", "dataxdyhoozdcthhecmj", "onyrfmozuoop",
                                    "datadwmuytkkfo", "yzyiyvh", "datatud", "pb", "datadkbfqkea")))
                            .withLinkedService(new LinkedServiceReference().withReferenceName("nqcvdrpwcki")
                                .withParameters(mapOf("tlbaxiaerpoasy", "datanu", "xoudmaniwkw", "datazebbrqnnrdb",
                                    "edp", "datamqymgiydg")))
                            .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                                .withReferenceName("owcwehjqyullep").withDatasetParameters("datadfrgobrs")
                                .withParameters(mapOf("ri", "dataayy")).withAdditionalProperties(mapOf()))
                            .withSchemaLinkedService(new LinkedServiceReference().withReferenceName("s")
                                .withParameters(mapOf("tmmwbdkpuxda", "datarhekxmjkiqb", "wjmsogzc", "datahpfrexbg",
                                    "j", "dataz", "lrzvjvlnafpfou", "datawqiawjevdnpkdmq")))
                            .withRejectedDataLinkedService(new LinkedServiceReference().withReferenceName("aqba")
                                .withParameters(mapOf("urxwtfpeuftpjldl", "datajwcdjxqxfvk", "mmbxkbtberyql",
                                    "dataforvsypjytgz", "gm", "datazebmikojpggwuwa")))
                            .withScript("byapckfapzfqzvk"))),
                    new PowerQuerySinkMapping().withQueryName("q").withDataflowSinks(Arrays.asList(new PowerQuerySink()
                        .withName("pgtbytibpgkidi").withDescription("fputcihy")
                        .withDataset(new DatasetReference().withReferenceName("pksjwaglhwnnfgy").withParameters(
                            mapOf("kmwvqtmfq", "dataou", "uugoujsvhezhe", "datazvfeljytshjjbo", "ayyshf", "datayhwo")))
                        .withLinkedService(new LinkedServiceReference().withReferenceName("nfyzjzey")
                            .withParameters(mapOf("edxfc", "datadrnzeidbl", "u", "datakticwgdivqybvgce", "gsuhtlz",
                                "datask", "elyfuliatbo", "datamsqebmfo")))
                        .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                            .withReferenceName("axeozgjtuhdgms").withDatasetParameters("datayqehbprrp")
                            .withParameters(mapOf("zlzidu", "datantuveqmtlf", "ets", "datalxw"))
                            .withAdditionalProperties(mapOf()))
                        .withSchemaLinkedService(new LinkedServiceReference().withReferenceName("mmitvviqs")
                            .withParameters(mapOf("sqwjqevwt", "dataujhmdpey", "ngrr", "datarjqnciwybj", "ctkgllmpku",
                                "datadtin", "ynvtimpgusroqk", "datablucxyhtkyq")))
                        .withRejectedDataLinkedService(new LinkedServiceReference().withReferenceName("kvojrkfcjtjq")
                            .withParameters(mapOf("xbpxzducfz", "datawsmgkomqfvhkp")))
                        .withScript("kbe"))),
                    new PowerQuerySinkMapping().withQueryName("yg").withDataflowSinks(Arrays.asList(new PowerQuerySink()
                        .withName("xqqbk").withDescription("nskivoxrjmgm")
                        .withDataset(new DatasetReference().withReferenceName("i")
                            .withParameters(mapOf("eebcxeecgfs", "dataufhx", "yltnfwlt", "datadjipayybwxqr",
                                "amgijevfjnvu", "dataukmdeqrp", "xtkvpejtdlqorcyp", "datakwjmtehpfn")))
                        .withLinkedService(new LinkedServiceReference().withReferenceName("wfalgzsg").withParameters(
                            mapOf("ducvhhayqx", "dataclzmjhiqgi", "ujenobf", "datacrsho", "vtzrg", "dataiscauudxf")))
                        .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                            .withReferenceName("brfqiekw").withDatasetParameters("datam")
                            .withParameters(mapOf("oypgqoqvc", "datadgv", "bkapbgmjodf", "datadbypzcqlau", "juvjmnsgv",
                                "datauhlipxkxhjtgv", "lvglwxepiwpi", "datayhomd"))
                            .withAdditionalProperties(mapOf()))
                        .withSchemaLinkedService(
                            new LinkedServiceReference().withReferenceName("jlk")
                                .withParameters(mapOf("ptzefeovsgikvsn", "dataeuiw")))
                        .withRejectedDataLinkedService(new LinkedServiceReference().withReferenceName("kfsfgabdumhpbci")
                            .withParameters(mapOf("wyltau", "dataypbv", "rfdyawetkr", "datagbelxmulyalupijq",
                                "rjdceimludqx", "dataqitmcxqahxtnl")))
                        .withScript("yltqryaahlttomlp")))));
        model = BinaryData.fromObject(model).toObject(ExecutePowerQueryActivityTypeProperties.class);
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.dataFlow().type());
        Assertions.assertEquals("rp", model.dataFlow().referenceName());
        Assertions.assertEquals("nxwtxtet", model.staging().linkedService().referenceName());
        Assertions.assertEquals("rjwllg", model.integrationRuntime().referenceName());
        Assertions.assertEquals("watwv", model.sinks().get("xurdfzynfm").name());
        Assertions.assertEquals("tudnns", model.sinks().get("xurdfzynfm").description());
        Assertions.assertEquals("grqiq", model.sinks().get("xurdfzynfm").dataset().referenceName());
        Assertions.assertEquals("ulxhpvursmeumy", model.sinks().get("xurdfzynfm").linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE,
            model.sinks().get("xurdfzynfm").flowlet().type());
        Assertions.assertEquals("c", model.sinks().get("xurdfzynfm").flowlet().referenceName());
        Assertions.assertEquals("kwwedbc", model.sinks().get("xurdfzynfm").schemaLinkedService().referenceName());
        Assertions.assertEquals("dpqln", model.sinks().get("xurdfzynfm").rejectedDataLinkedService().referenceName());
        Assertions.assertEquals("rtcjimsge", model.sinks().get("xurdfzynfm").script());
        Assertions.assertEquals("iajksmwrbwejhoc", model.queries().get(0).queryName());
        Assertions.assertEquals("t", model.queries().get(0).dataflowSinks().get(0).name());
        Assertions.assertEquals("un", model.queries().get(0).dataflowSinks().get(0).description());
        Assertions.assertEquals("pv", model.queries().get(0).dataflowSinks().get(0).dataset().referenceName());
        Assertions.assertEquals("xzbuhqmmadyi",
            model.queries().get(0).dataflowSinks().get(0).linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE,
            model.queries().get(0).dataflowSinks().get(0).flowlet().type());
        Assertions.assertEquals("wcgkikb", model.queries().get(0).dataflowSinks().get(0).flowlet().referenceName());
        Assertions.assertEquals("kpoufupa",
            model.queries().get(0).dataflowSinks().get(0).schemaLinkedService().referenceName());
        Assertions.assertEquals("nenozs",
            model.queries().get(0).dataflowSinks().get(0).rejectedDataLinkedService().referenceName());
        Assertions.assertEquals("yq", model.queries().get(0).dataflowSinks().get(0).script());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
