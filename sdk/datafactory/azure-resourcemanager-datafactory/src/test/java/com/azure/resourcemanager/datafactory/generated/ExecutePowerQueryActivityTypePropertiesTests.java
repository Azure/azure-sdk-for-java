// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.ExecutePowerQueryActivityTypeProperties;
import com.azure.resourcemanager.datafactory.models.DataFlowReference;
import com.azure.resourcemanager.datafactory.models.DataFlowReferenceType;
import com.azure.resourcemanager.datafactory.models.DataFlowStagingInfo;
import com.azure.resourcemanager.datafactory.models.DatasetReference;
import com.azure.resourcemanager.datafactory.models.ExecuteDataFlowActivityTypePropertiesCompute;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeReference;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.PowerQuerySink;
import com.azure.resourcemanager.datafactory.models.PowerQuerySinkMapping;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ExecutePowerQueryActivityTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ExecutePowerQueryActivityTypeProperties model = BinaryData.fromString(
            "{\"sinks\":{\"aynofwyzpntapg\":{\"script\":\"po\",\"schemaLinkedService\":{\"referenceName\":\"n\",\"parameters\":{\"jhaquxquypcnn\":\"dataxikvjevjapso\",\"ilqtqrtkdeyuo\":\"datacusyq\"}},\"rejectedDataLinkedService\":{\"referenceName\":\"pnaohherlyr\",\"parameters\":{\"ureuhssrdugaxk\":\"datarpruoyjbzylsu\",\"biupjzkyghsjcqq\":\"datagel\"}},\"name\":\"l\",\"description\":\"yaec\",\"dataset\":{\"referenceName\":\"cb\",\"parameters\":{\"eeqywngcvqhvb\":\"dataqodesddj\",\"mvzfp\":\"datazcsspnfxwkjhz\",\"diqsuokyvrzlupy\":\"dataieofvzeihlubd\"}},\"linkedService\":{\"referenceName\":\"lfyddy\",\"parameters\":{\"gjzrd\":\"datadlhytckp\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"snmzlsgalavx\",\"datasetParameters\":\"datavwuhvpipaafvtk\",\"parameters\":{\"hox\":\"datardplhwip\",\"wcdczml\":\"dataeyixbrsjgrjt\"},\"\":{\"tcgybuuubtfxjpg\":\"dataikhcpdohvwy\"}}},\"wdaocwqkxwoq\":{\"script\":\"iyxyelzmu\",\"schemaLinkedService\":{\"referenceName\":\"arucpk\",\"parameters\":{\"tohkrqbgxh\":\"datajnnwobkf\",\"luy\":\"databapf\",\"ipobtbtlmp\":\"dataivls\",\"ogtwxgswu\":\"datarkgtlrmmmsaujx\"}},\"rejectedDataLinkedService\":{\"referenceName\":\"xmwfaehryordin\",\"parameters\":{\"bzekfbuftyxm\":\"datalifstxjufuddt\",\"beibgyquzofy\":\"datalzlsskphwwnnj\"}},\"name\":\"qruoanhjslkoawo\",\"description\":\"etkrtexj\",\"dataset\":{\"referenceName\":\"qsxecejlyhuyhqqq\",\"parameters\":{\"em\":\"datazmhydm\"}},\"linkedService\":{\"referenceName\":\"ijvvbenchtklz\",\"parameters\":{\"nbvpados\":\"datattvykzdlkt\",\"znzrsbs\":\"dataqcvikhbkcvpubvm\",\"fqibwesrgqctrv\":\"datancy\",\"klcgwba\":\"datapg\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"ovgthppoddnwhao\",\"datasetParameters\":\"datawphvimst\",\"parameters\":{\"imnfvbfj\":\"dataklfvcirqcgapkyof\"},\"\":{\"iryj\":\"datapxxbfqlfkwji\"}}},\"l\":{\"script\":\"fnojiqtpbfc\",\"schemaLinkedService\":{\"referenceName\":\"hrencxo\",\"parameters\":{\"lpqcctuxxyt\":\"datadgn\",\"afgbfkmqh\":\"dataxjpkuz\",\"nksleurj\":\"datajshvyjnrjr\"}},\"rejectedDataLinkedService\":{\"referenceName\":\"ezpewjxcdvwnptmr\",\"parameters\":{\"zgst\":\"dataaugid\",\"whjfuoips\":\"datasrtzg\"}},\"name\":\"vcqhzejbro\",\"description\":\"lopygrsvyjrqhp\",\"dataset\":{\"referenceName\":\"vmxibpcnmps\",\"parameters\":{\"ri\":\"dataaentip\",\"grcjoycqndgbxtz\":\"datawftrjdyi\",\"gubsidwgyaz\":\"datateszohntch\"}},\"linkedService\":{\"referenceName\":\"efsdoodcmj\",\"parameters\":{\"ckecumevgoaxt\":\"dataydtnpqtwohfh\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"kmuirskoaxstqq\",\"datasetParameters\":\"dataliyxzenii\",\"parameters\":{\"iaot\":\"datamojjmimym\",\"wltblmumbafcmso\":\"dataaxluovzmijir\"},\"\":{\"feelymavin\":\"datankrwwchyqeiguxi\",\"qyvzzrnikan\":\"datamdn\",\"zq\":\"databobagaigtpjj\"}}},\"vxucqxj\":{\"script\":\"ifxlibwd\",\"schemaLinkedService\":{\"referenceName\":\"qxqjvjubjqjxobm\",\"parameters\":{\"trtarneug\":\"datatz\",\"dkkf\":\"dataupkjyosqwcxedk\"}},\"rejectedDataLinkedService\":{\"referenceName\":\"srehgyfif\",\"parameters\":{\"boghj\":\"dataqeis\",\"ae\":\"dataihtcaddfvdkt\",\"dad\":\"databvyuarbycuux\",\"ugmfersbktrei\":\"datalilkmptvmtn\"}},\"name\":\"lszpusb\",\"description\":\"jrkueprpnzbfoldb\",\"dataset\":{\"referenceName\":\"iljgyrpvmaywpr\",\"parameters\":{\"kmanrowdqoj\":\"dataqbnzr\",\"ahskesea\":\"datayabvvbsi\",\"dyessiielbtg\":\"datag\"}},\"linkedService\":{\"referenceName\":\"iwcqeihuyrz\",\"parameters\":{\"ftotpvoehsfwra\":\"datayvquufplmpbvzbt\",\"yuillrrqw\":\"datalqrxewdgzfqsr\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"iqjegeafg\",\"datasetParameters\":\"dataglljcblppnqosnv\",\"parameters\":{\"zmwbxautspnyutf\":\"dataiwgakghvaqbk\"},\"\":{\"nptjmzbirjnddao\":\"dataghn\",\"wmz\":\"datagi\",\"nncvj\":\"datar\"}}}},\"queries\":[{\"queryName\":\"ibliegzjk\",\"dataflowSinks\":[{\"script\":\"i\",\"schemaLinkedService\":{\"referenceName\":\"clvaivsagrfjhcrq\",\"parameters\":{\"aqlcqjnw\":\"dataah\",\"fptvfsvrjd\":\"dataq\",\"vuyxsnm\":\"datazvhxssnqqivv\",\"xmvkcu\":\"datainnisuuakaadbwhs\"}},\"rejectedDataLinkedService\":{\"referenceName\":\"seoqkalekneah\",\"parameters\":{\"njzbv\":\"datajupxibupgt\",\"faxepuvwahfnlk\":\"datawabilyb\"}},\"name\":\"yqpkskbid\",\"description\":\"zjpbhcge\",\"dataset\":{\"referenceName\":\"teqfenhlitcydge\",\"parameters\":{\"ibguwrd\":\"datan\",\"irjkinofw\":\"dataxamjhpqfjpe\"}},\"linkedService\":{\"referenceName\":\"il\",\"parameters\":{\"sbjsekqqtsrupog\":\"dataesyifdrbkprbl\",\"nabfjeoq\":\"datarwku\",\"i\":\"datang\",\"govnrkyb\":\"datazzifuovgipqgt\"}},\"flowlet\":{\"type\":\"DataFlowReference\",\"referenceName\":\"rxcnuyfvr\",\"datasetParameters\":\"datazqoi\",\"parameters\":{\"gzlvqmy\":\"datanvayboub\",\"dqop\":\"datapojbifixdgkvlze\",\"bolczhyqdvxqo\":\"dataabrzrhdezlhsdcp\"},\"\":{\"demfatftzxtrjru\":\"dataos\",\"qpqqzf\":\"dataljfdc\",\"a\":\"dataydywbnerygsif\"}}}]}],\"dataFlow\":{\"type\":\"DataFlowReference\",\"referenceName\":\"ccsvajn\",\"datasetParameters\":\"datauxbyrvgu\",\"parameters\":{\"nk\":\"dataysolmzrfhl\",\"ysbjtsqfhnqxqte\":\"datausb\"},\"\":{\"tuiqcjylkdb\":\"dataxxuws\"}},\"staging\":{\"linkedService\":{\"referenceName\":\"xjk\",\"parameters\":{\"bjzhhjgvuvjsnb\":\"datapposgimtoucls\",\"g\":\"datanuujkjkqyewtlom\",\"izzhln\":\"dataaqvrazthduac\",\"e\":\"datagngqciiopoamg\"}},\"folderPath\":\"dataxidjdptr\"},\"integrationRuntime\":{\"referenceName\":\"egrauyphu\",\"parameters\":{\"mcjrfjxisypkifp\":\"datauipatodfyrfs\",\"lefltubwpeb\":\"dataynh\",\"rdxytkehfoeph\":\"datalndla\",\"mcuqjoukimvhqi\":\"dataphoy\"}},\"compute\":{\"computeType\":\"dataologfxbvllc\",\"coreCount\":\"datanajnc\"},\"traceLevel\":\"dataqnh\",\"continueOnError\":\"databmuimde\",\"runConcurrently\":\"datauohtnjtahdtdc\",\"sourceStagingConcurrency\":\"datahjxv\"}")
            .toObject(ExecutePowerQueryActivityTypeProperties.class);
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.dataFlow().type());
        Assertions.assertEquals("ccsvajn", model.dataFlow().referenceName());
        Assertions.assertEquals("xjk", model.staging().linkedService().referenceName());
        Assertions.assertEquals("egrauyphu", model.integrationRuntime().referenceName());
        Assertions.assertEquals("l", model.sinks().get("aynofwyzpntapg").name());
        Assertions.assertEquals("yaec", model.sinks().get("aynofwyzpntapg").description());
        Assertions.assertEquals("cb", model.sinks().get("aynofwyzpntapg").dataset().referenceName());
        Assertions.assertEquals("lfyddy", model.sinks().get("aynofwyzpntapg").linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE,
            model.sinks().get("aynofwyzpntapg").flowlet().type());
        Assertions.assertEquals("snmzlsgalavx", model.sinks().get("aynofwyzpntapg").flowlet().referenceName());
        Assertions.assertEquals("n", model.sinks().get("aynofwyzpntapg").schemaLinkedService().referenceName());
        Assertions.assertEquals("pnaohherlyr",
            model.sinks().get("aynofwyzpntapg").rejectedDataLinkedService().referenceName());
        Assertions.assertEquals("po", model.sinks().get("aynofwyzpntapg").script());
        Assertions.assertEquals("ibliegzjk", model.queries().get(0).queryName());
        Assertions.assertEquals("yqpkskbid", model.queries().get(0).dataflowSinks().get(0).name());
        Assertions.assertEquals("zjpbhcge", model.queries().get(0).dataflowSinks().get(0).description());
        Assertions.assertEquals("teqfenhlitcydge",
            model.queries().get(0).dataflowSinks().get(0).dataset().referenceName());
        Assertions.assertEquals("il", model.queries().get(0).dataflowSinks().get(0).linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE,
            model.queries().get(0).dataflowSinks().get(0).flowlet().type());
        Assertions.assertEquals("rxcnuyfvr", model.queries().get(0).dataflowSinks().get(0).flowlet().referenceName());
        Assertions.assertEquals("clvaivsagrfjhcrq",
            model.queries().get(0).dataflowSinks().get(0).schemaLinkedService().referenceName());
        Assertions.assertEquals("seoqkalekneah",
            model.queries().get(0).dataflowSinks().get(0).rejectedDataLinkedService().referenceName());
        Assertions.assertEquals("i", model.queries().get(0).dataflowSinks().get(0).script());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ExecutePowerQueryActivityTypeProperties model
            = new ExecutePowerQueryActivityTypeProperties()
                .withDataFlow(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                    .withReferenceName("ccsvajn")
                    .withDatasetParameters("datauxbyrvgu")
                    .withParameters(mapOf("nk", "dataysolmzrfhl", "ysbjtsqfhnqxqte", "datausb"))
                    .withAdditionalProperties(mapOf()))
                .withStaging(
                    new DataFlowStagingInfo()
                        .withLinkedService(new LinkedServiceReference().withReferenceName("xjk")
                            .withParameters(mapOf("bjzhhjgvuvjsnb", "datapposgimtoucls", "g", "datanuujkjkqyewtlom",
                                "izzhln", "dataaqvrazthduac", "e", "datagngqciiopoamg")))
                        .withFolderPath("dataxidjdptr"))
                .withIntegrationRuntime(new IntegrationRuntimeReference().withReferenceName("egrauyphu")
                    .withParameters(mapOf("mcjrfjxisypkifp", "datauipatodfyrfs", "lefltubwpeb", "dataynh",
                        "rdxytkehfoeph", "datalndla", "mcuqjoukimvhqi", "dataphoy")))
                .withCompute(new ExecuteDataFlowActivityTypePropertiesCompute().withComputeType("dataologfxbvllc")
                    .withCoreCount("datanajnc"))
                .withTraceLevel("dataqnh")
                .withContinueOnError("databmuimde")
                .withRunConcurrently("datauohtnjtahdtdc")
                .withSourceStagingConcurrency("datahjxv")
                .withSinks(
                    mapOf("aynofwyzpntapg", new PowerQuerySink().withName("l")
                        .withDescription("yaec")
                        .withDataset(new DatasetReference().withReferenceName("cb")
                            .withParameters(mapOf("eeqywngcvqhvb", "dataqodesddj", "mvzfp", "datazcsspnfxwkjhz",
                                "diqsuokyvrzlupy", "dataieofvzeihlubd")))
                        .withLinkedService(new LinkedServiceReference().withReferenceName("lfyddy")
                            .withParameters(mapOf("gjzrd", "datadlhytckp")))
                        .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                            .withReferenceName("snmzlsgalavx")
                            .withDatasetParameters("datavwuhvpipaafvtk")
                            .withParameters(mapOf("hox", "datardplhwip", "wcdczml", "dataeyixbrsjgrjt"))
                            .withAdditionalProperties(mapOf()))
                        .withSchemaLinkedService(new LinkedServiceReference().withReferenceName("n")
                            .withParameters(mapOf("jhaquxquypcnn", "dataxikvjevjapso", "ilqtqrtkdeyuo", "datacusyq")))
                        .withRejectedDataLinkedService(new LinkedServiceReference().withReferenceName("pnaohherlyr")
                            .withParameters(mapOf("ureuhssrdugaxk", "datarpruoyjbzylsu", "biupjzkyghsjcqq", "datagel")))
                        .withScript("po"), "wdaocwqkxwoq",
                        new PowerQuerySink().withName("qruoanhjslkoawo")
                            .withDescription("etkrtexj")
                            .withDataset(new DatasetReference().withReferenceName("qsxecejlyhuyhqqq")
                                .withParameters(mapOf("em", "datazmhydm")))
                            .withLinkedService(new LinkedServiceReference().withReferenceName("ijvvbenchtklz")
                                .withParameters(mapOf("nbvpados", "datattvykzdlkt", "znzrsbs", "dataqcvikhbkcvpubvm",
                                    "fqibwesrgqctrv", "datancy", "klcgwba", "datapg")))
                            .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                                .withReferenceName("ovgthppoddnwhao")
                                .withDatasetParameters("datawphvimst")
                                .withParameters(mapOf("imnfvbfj", "dataklfvcirqcgapkyof"))
                                .withAdditionalProperties(mapOf()))
                            .withSchemaLinkedService(new LinkedServiceReference().withReferenceName("arucpk")
                                .withParameters(mapOf("tohkrqbgxh", "datajnnwobkf", "luy", "databapf", "ipobtbtlmp",
                                    "dataivls", "ogtwxgswu", "datarkgtlrmmmsaujx")))
                            .withRejectedDataLinkedService(
                                new LinkedServiceReference().withReferenceName("xmwfaehryordin")
                                    .withParameters(mapOf("bzekfbuftyxm", "datalifstxjufuddt", "beibgyquzofy",
                                        "datalzlsskphwwnnj")))
                            .withScript("iyxyelzmu"),
                        "l",
                        new PowerQuerySink().withName("vcqhzejbro")
                            .withDescription("lopygrsvyjrqhp")
                            .withDataset(new DatasetReference().withReferenceName("vmxibpcnmps")
                                .withParameters(mapOf("ri", "dataaentip", "grcjoycqndgbxtz", "datawftrjdyi",
                                    "gubsidwgyaz", "datateszohntch")))
                            .withLinkedService(new LinkedServiceReference().withReferenceName("efsdoodcmj")
                                .withParameters(mapOf("ckecumevgoaxt", "dataydtnpqtwohfh")))
                            .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                                .withReferenceName("kmuirskoaxstqq")
                                .withDatasetParameters("dataliyxzenii")
                                .withParameters(mapOf("iaot", "datamojjmimym", "wltblmumbafcmso", "dataaxluovzmijir"))
                                .withAdditionalProperties(mapOf()))
                            .withSchemaLinkedService(new LinkedServiceReference().withReferenceName("hrencxo")
                                .withParameters(mapOf("lpqcctuxxyt", "datadgn", "afgbfkmqh", "dataxjpkuz", "nksleurj",
                                    "datajshvyjnrjr")))
                            .withRejectedDataLinkedService(
                                new LinkedServiceReference().withReferenceName("ezpewjxcdvwnptmr")
                                    .withParameters(mapOf("zgst", "dataaugid", "whjfuoips", "datasrtzg")))
                            .withScript("fnojiqtpbfc"),
                        "vxucqxj",
                        new PowerQuerySink().withName("lszpusb")
                            .withDescription("jrkueprpnzbfoldb")
                            .withDataset(new DatasetReference().withReferenceName("iljgyrpvmaywpr")
                                .withParameters(mapOf("kmanrowdqoj", "dataqbnzr", "ahskesea", "datayabvvbsi",
                                    "dyessiielbtg", "datag")))
                            .withLinkedService(
                                new LinkedServiceReference().withReferenceName("iwcqeihuyrz")
                                    .withParameters(mapOf("ftotpvoehsfwra", "datayvquufplmpbvzbt", "yuillrrqw",
                                        "datalqrxewdgzfqsr")))
                            .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                                .withReferenceName("iqjegeafg")
                                .withDatasetParameters("dataglljcblppnqosnv")
                                .withParameters(mapOf("zmwbxautspnyutf", "dataiwgakghvaqbk"))
                                .withAdditionalProperties(mapOf()))
                            .withSchemaLinkedService(new LinkedServiceReference().withReferenceName("qxqjvjubjqjxobm")
                                .withParameters(mapOf("trtarneug", "datatz", "dkkf", "dataupkjyosqwcxedk")))
                            .withRejectedDataLinkedService(new LinkedServiceReference().withReferenceName("srehgyfif")
                                .withParameters(mapOf("boghj", "dataqeis", "ae", "dataihtcaddfvdkt", "dad",
                                    "databvyuarbycuux", "ugmfersbktrei", "datalilkmptvmtn")))
                            .withScript("ifxlibwd")))
                .withQueries(Arrays.asList(new PowerQuerySinkMapping().withQueryName("ibliegzjk")
                    .withDataflowSinks(Arrays.asList(new PowerQuerySink().withName("yqpkskbid")
                        .withDescription("zjpbhcge")
                        .withDataset(new DatasetReference().withReferenceName("teqfenhlitcydge")
                            .withParameters(mapOf("ibguwrd", "datan", "irjkinofw", "dataxamjhpqfjpe")))
                        .withLinkedService(new LinkedServiceReference().withReferenceName("il")
                            .withParameters(mapOf("sbjsekqqtsrupog", "dataesyifdrbkprbl", "nabfjeoq", "datarwku", "i",
                                "datang", "govnrkyb", "datazzifuovgipqgt")))
                        .withFlowlet(new DataFlowReference().withType(DataFlowReferenceType.DATA_FLOW_REFERENCE)
                            .withReferenceName("rxcnuyfvr")
                            .withDatasetParameters("datazqoi")
                            .withParameters(mapOf("gzlvqmy", "datanvayboub", "dqop", "datapojbifixdgkvlze",
                                "bolczhyqdvxqo", "dataabrzrhdezlhsdcp"))
                            .withAdditionalProperties(mapOf()))
                        .withSchemaLinkedService(new LinkedServiceReference().withReferenceName("clvaivsagrfjhcrq")
                            .withParameters(mapOf("aqlcqjnw", "dataah", "fptvfsvrjd", "dataq", "vuyxsnm",
                                "datazvhxssnqqivv", "xmvkcu", "datainnisuuakaadbwhs")))
                        .withRejectedDataLinkedService(new LinkedServiceReference().withReferenceName("seoqkalekneah")
                            .withParameters(mapOf("njzbv", "datajupxibupgt", "faxepuvwahfnlk", "datawabilyb")))
                        .withScript("i")))));
        model = BinaryData.fromObject(model).toObject(ExecutePowerQueryActivityTypeProperties.class);
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE, model.dataFlow().type());
        Assertions.assertEquals("ccsvajn", model.dataFlow().referenceName());
        Assertions.assertEquals("xjk", model.staging().linkedService().referenceName());
        Assertions.assertEquals("egrauyphu", model.integrationRuntime().referenceName());
        Assertions.assertEquals("l", model.sinks().get("aynofwyzpntapg").name());
        Assertions.assertEquals("yaec", model.sinks().get("aynofwyzpntapg").description());
        Assertions.assertEquals("cb", model.sinks().get("aynofwyzpntapg").dataset().referenceName());
        Assertions.assertEquals("lfyddy", model.sinks().get("aynofwyzpntapg").linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE,
            model.sinks().get("aynofwyzpntapg").flowlet().type());
        Assertions.assertEquals("snmzlsgalavx", model.sinks().get("aynofwyzpntapg").flowlet().referenceName());
        Assertions.assertEquals("n", model.sinks().get("aynofwyzpntapg").schemaLinkedService().referenceName());
        Assertions.assertEquals("pnaohherlyr",
            model.sinks().get("aynofwyzpntapg").rejectedDataLinkedService().referenceName());
        Assertions.assertEquals("po", model.sinks().get("aynofwyzpntapg").script());
        Assertions.assertEquals("ibliegzjk", model.queries().get(0).queryName());
        Assertions.assertEquals("yqpkskbid", model.queries().get(0).dataflowSinks().get(0).name());
        Assertions.assertEquals("zjpbhcge", model.queries().get(0).dataflowSinks().get(0).description());
        Assertions.assertEquals("teqfenhlitcydge",
            model.queries().get(0).dataflowSinks().get(0).dataset().referenceName());
        Assertions.assertEquals("il", model.queries().get(0).dataflowSinks().get(0).linkedService().referenceName());
        Assertions.assertEquals(DataFlowReferenceType.DATA_FLOW_REFERENCE,
            model.queries().get(0).dataflowSinks().get(0).flowlet().type());
        Assertions.assertEquals("rxcnuyfvr", model.queries().get(0).dataflowSinks().get(0).flowlet().referenceName());
        Assertions.assertEquals("clvaivsagrfjhcrq",
            model.queries().get(0).dataflowSinks().get(0).schemaLinkedService().referenceName());
        Assertions.assertEquals("seoqkalekneah",
            model.queries().get(0).dataflowSinks().get(0).rejectedDataLinkedService().referenceName());
        Assertions.assertEquals("i", model.queries().get(0).dataflowSinks().get(0).script());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
