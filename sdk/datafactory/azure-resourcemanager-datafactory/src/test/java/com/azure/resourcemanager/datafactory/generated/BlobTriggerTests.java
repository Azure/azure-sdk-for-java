// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.BlobTrigger;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.PipelineReference;
import com.azure.resourcemanager.datafactory.models.TriggerPipelineReference;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class BlobTriggerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        BlobTrigger model =
            BinaryData
                .fromString(
                    "{\"type\":\"BlobTrigger\",\"typeProperties\":{\"folderPath\":\"bvgwylta\",\"maxConcurrency\":155779144,\"linkedService\":{\"referenceName\":\"gbelxmulyalupijq\",\"parameters\":{\"wetkrmqitmcxqahx\":\"datady\",\"dceimlu\":\"datanlor\",\"oxrj\":\"dataqxjxqqbkfdnski\"}}},\"pipelines\":[{\"pipelineReference\":{\"referenceName\":\"cicqaufhxe\",\"name\":\"bcxeecgf\"},\"parameters\":{\"ayybwxqryyltnfwl\":\"dataji\",\"mgijevfjnv\":\"datakukmdeqrpu\",\"f\":\"dataokwjmteh\"}},{\"pipelineReference\":{\"referenceName\":\"xtkvpejtdlqorcyp\",\"name\":\"wfalgzsg\"},\"parameters\":{\"ducvhhayqx\":\"dataclzmjhiqgi\",\"ujenobf\":\"datacrsho\",\"vtzrg\":\"dataiscauudxf\"}},{\"pipelineReference\":{\"referenceName\":\"xbrfqi\",\"name\":\"wfxmdotdgvsoyp\"},\"parameters\":{\"ypzcql\":\"dataqvczd\",\"hlipxkxhj\":\"datauhbkapbgmjodfs\"}}],\"description\":\"vsjuvjmnsgvf\",\"runtimeState\":\"Started\",\"annotations\":[\"dataplvglwx\",\"datapiwpi\",\"dataydxmplxzrofscib\",\"datatxyjq\"],\"\":{\"da\":\"datayzxzkpum\",\"rrpzcvg\":\"databoqeteavphup\"}}")
                .toObject(BlobTrigger.class);
        Assertions.assertEquals("vsjuvjmnsgvf", model.description());
        Assertions.assertEquals("cicqaufhxe", model.pipelines().get(0).pipelineReference().referenceName());
        Assertions.assertEquals("bcxeecgf", model.pipelines().get(0).pipelineReference().name());
        Assertions.assertEquals("bvgwylta", model.folderPath());
        Assertions.assertEquals(155779144, model.maxConcurrency());
        Assertions.assertEquals("gbelxmulyalupijq", model.linkedService().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        BlobTrigger model =
            new BlobTrigger()
                .withDescription("vsjuvjmnsgvf")
                .withAnnotations(Arrays.asList("dataplvglwx", "datapiwpi", "dataydxmplxzrofscib", "datatxyjq"))
                .withPipelines(
                    Arrays
                        .asList(
                            new TriggerPipelineReference()
                                .withPipelineReference(
                                    new PipelineReference().withReferenceName("cicqaufhxe").withName("bcxeecgf"))
                                .withParameters(
                                    mapOf(
                                        "ayybwxqryyltnfwl",
                                        "dataji",
                                        "mgijevfjnv",
                                        "datakukmdeqrpu",
                                        "f",
                                        "dataokwjmteh")),
                            new TriggerPipelineReference()
                                .withPipelineReference(
                                    new PipelineReference().withReferenceName("xtkvpejtdlqorcyp").withName("wfalgzsg"))
                                .withParameters(
                                    mapOf(
                                        "ducvhhayqx",
                                        "dataclzmjhiqgi",
                                        "ujenobf",
                                        "datacrsho",
                                        "vtzrg",
                                        "dataiscauudxf")),
                            new TriggerPipelineReference()
                                .withPipelineReference(
                                    new PipelineReference().withReferenceName("xbrfqi").withName("wfxmdotdgvsoyp"))
                                .withParameters(mapOf("ypzcql", "dataqvczd", "hlipxkxhj", "datauhbkapbgmjodfs"))))
                .withFolderPath("bvgwylta")
                .withMaxConcurrency(155779144)
                .withLinkedService(
                    new LinkedServiceReference()
                        .withReferenceName("gbelxmulyalupijq")
                        .withParameters(
                            mapOf("wetkrmqitmcxqahx", "datady", "dceimlu", "datanlor", "oxrj", "dataqxjxqqbkfdnski")));
        model = BinaryData.fromObject(model).toObject(BlobTrigger.class);
        Assertions.assertEquals("vsjuvjmnsgvf", model.description());
        Assertions.assertEquals("cicqaufhxe", model.pipelines().get(0).pipelineReference().referenceName());
        Assertions.assertEquals("bcxeecgf", model.pipelines().get(0).pipelineReference().name());
        Assertions.assertEquals("bvgwylta", model.folderPath());
        Assertions.assertEquals(155779144, model.maxConcurrency());
        Assertions.assertEquals("gbelxmulyalupijq", model.linkedService().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
