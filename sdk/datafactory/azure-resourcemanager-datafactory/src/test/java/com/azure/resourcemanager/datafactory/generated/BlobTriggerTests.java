// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.BlobTrigger;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.PipelineReference;
import com.azure.resourcemanager.datafactory.models.TriggerPipelineReference;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class BlobTriggerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        BlobTrigger model = BinaryData.fromString(
            "{\"type\":\"bsegcogy\",\"typeProperties\":{\"folderPath\":\"hxjwiggca\",\"maxConcurrency\":1782911484,\"linkedService\":{\"referenceName\":\"koxpaytzqgsaeg\",\"parameters\":{\"kvoskjixbrd\":\"datawgerdxhgrgiumwk\",\"nmzaih\":\"datamdnebkonfl\"}}},\"pipelines\":[{\"pipelineReference\":{\"referenceName\":\"hfohspv\",\"name\":\"jmt\"},\"parameters\":{\"jsakigrl\":\"datauecmdmcory\",\"qrmqefd\":\"dataigl\",\"ek\":\"datauwsfebhvkkpd\"}},{\"pipelineReference\":{\"referenceName\":\"io\",\"name\":\"vijrdyotejljdr\"},\"parameters\":{\"xyrr\":\"datajw\",\"bddcxfuizokzmeg\":\"databeuf\",\"iljsidvuptret\":\"datajsneybpqotfd\",\"tpbi\":\"dataauupwt\"}}],\"description\":\"ekaajuwkxbg\",\"runtimeState\":\"Disabled\",\"annotations\":[\"databjsyorsojvztqra\",\"dataqcmouxs\",\"datakxa\"],\"\":{\"gzqkkwz\":\"datay\",\"wwopssdws\":\"datag\",\"s\":\"datakrzcnl\",\"vhgkmx\":\"datamikbtzt\"}}")
            .toObject(BlobTrigger.class);
        Assertions.assertEquals("ekaajuwkxbg", model.description());
        Assertions.assertEquals("hfohspv", model.pipelines().get(0).pipelineReference().referenceName());
        Assertions.assertEquals("jmt", model.pipelines().get(0).pipelineReference().name());
        Assertions.assertEquals("hxjwiggca", model.folderPath());
        Assertions.assertEquals(1782911484, model.maxConcurrency());
        Assertions.assertEquals("koxpaytzqgsaeg", model.linkedService().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        BlobTrigger model = new BlobTrigger().withDescription("ekaajuwkxbg")
            .withAnnotations(Arrays.asList("databjsyorsojvztqra", "dataqcmouxs", "datakxa"))
            .withPipelines(Arrays.asList(new TriggerPipelineReference()
                .withPipelineReference(new PipelineReference().withReferenceName("hfohspv").withName("jmt"))
                .withParameters(mapOf("jsakigrl", "datauecmdmcory", "qrmqefd", "dataigl", "ek", "datauwsfebhvkkpd")),
                new TriggerPipelineReference()
                    .withPipelineReference(new PipelineReference().withReferenceName("io").withName("vijrdyotejljdr"))
                    .withParameters(mapOf("xyrr", "datajw", "bddcxfuizokzmeg", "databeuf", "iljsidvuptret",
                        "datajsneybpqotfd", "tpbi", "dataauupwt"))))
            .withFolderPath("hxjwiggca")
            .withMaxConcurrency(1782911484)
            .withLinkedService(new LinkedServiceReference().withReferenceName("koxpaytzqgsaeg")
                .withParameters(mapOf("kvoskjixbrd", "datawgerdxhgrgiumwk", "nmzaih", "datamdnebkonfl")));
        model = BinaryData.fromObject(model).toObject(BlobTrigger.class);
        Assertions.assertEquals("ekaajuwkxbg", model.description());
        Assertions.assertEquals("hfohspv", model.pipelines().get(0).pipelineReference().referenceName());
        Assertions.assertEquals("jmt", model.pipelines().get(0).pipelineReference().name());
        Assertions.assertEquals("hxjwiggca", model.folderPath());
        Assertions.assertEquals(1782911484, model.maxConcurrency());
        Assertions.assertEquals("koxpaytzqgsaeg", model.linkedService().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
