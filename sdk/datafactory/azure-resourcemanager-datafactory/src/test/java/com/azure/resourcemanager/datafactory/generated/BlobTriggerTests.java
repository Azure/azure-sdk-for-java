// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.BlobTrigger;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.PipelineReference;
import com.azure.resourcemanager.datafactory.models.TriggerPipelineReference;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class BlobTriggerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        BlobTrigger model = BinaryData.fromString(
            "{\"type\":\"BlobTrigger\",\"typeProperties\":{\"folderPath\":\"vbgwxpuwti\",\"maxConcurrency\":1919804309,\"linkedService\":{\"referenceName\":\"ekmzubd\",\"parameters\":{\"w\":\"dataf\",\"ffaqolnfeywbpenq\":\"datalzhujcx\",\"fjdghmnycxmctnjy\":\"datazpzwwsfrpbw\"}}},\"pipelines\":[{\"pipelineReference\":{\"referenceName\":\"pulwcxmxf\",\"name\":\"kmjeekbmw\"},\"parameters\":{\"wiybleaota\":\"datashtmxyrsn\"}},{\"pipelineReference\":{\"referenceName\":\"cy\",\"name\":\"xosnbwbcnf\"},\"parameters\":{\"ehdccgh\":\"datandbwwnlgaoub\"}}],\"description\":\"qvw\",\"runtimeState\":\"Stopped\",\"annotations\":[\"dataotqsp\",\"datanhlsf\"],\"\":{\"huvuadpdjovwbhei\":\"datawajsbqytfvjvm\",\"jvuwaqiomdlp\":\"datamw\",\"wowmwrn\":\"datakfslm\"}}")
            .toObject(BlobTrigger.class);
        Assertions.assertEquals("qvw", model.description());
        Assertions.assertEquals("pulwcxmxf", model.pipelines().get(0).pipelineReference().referenceName());
        Assertions.assertEquals("kmjeekbmw", model.pipelines().get(0).pipelineReference().name());
        Assertions.assertEquals("vbgwxpuwti", model.folderPath());
        Assertions.assertEquals(1919804309, model.maxConcurrency());
        Assertions.assertEquals("ekmzubd", model.linkedService().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        BlobTrigger model
            = new BlobTrigger()
                .withDescription(
                    "qvw")
                .withAnnotations(Arrays.asList("dataotqsp", "datanhlsf"))
                .withPipelines(Arrays.asList(
                    new TriggerPipelineReference()
                        .withPipelineReference(
                            new PipelineReference().withReferenceName("pulwcxmxf").withName("kmjeekbmw"))
                        .withParameters(mapOf("wiybleaota", "datashtmxyrsn")),
                    new TriggerPipelineReference()
                        .withPipelineReference(new PipelineReference().withReferenceName("cy").withName("xosnbwbcnf"))
                        .withParameters(mapOf("ehdccgh", "datandbwwnlgaoub"))))
                .withFolderPath("vbgwxpuwti").withMaxConcurrency(1919804309)
                .withLinkedService(new LinkedServiceReference().withReferenceName("ekmzubd").withParameters(
                    mapOf("w", "dataf", "ffaqolnfeywbpenq", "datalzhujcx", "fjdghmnycxmctnjy", "datazpzwwsfrpbw")));
        model = BinaryData.fromObject(model).toObject(BlobTrigger.class);
        Assertions.assertEquals("qvw", model.description());
        Assertions.assertEquals("pulwcxmxf", model.pipelines().get(0).pipelineReference().referenceName());
        Assertions.assertEquals("kmjeekbmw", model.pipelines().get(0).pipelineReference().name());
        Assertions.assertEquals("vbgwxpuwti", model.folderPath());
        Assertions.assertEquals(1919804309, model.maxConcurrency());
        Assertions.assertEquals("ekmzubd", model.linkedService().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
