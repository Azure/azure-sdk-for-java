// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.BlobTrigger;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.PipelineReference;
import com.azure.resourcemanager.datafactory.models.TriggerPipelineReference;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class BlobTriggerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        BlobTrigger model = BinaryData.fromString(
            "{\"type\":\"BlobTrigger\",\"typeProperties\":{\"folderPath\":\"jdefsqunernbd\",\"maxConcurrency\":255555015,\"linkedService\":{\"referenceName\":\"cabchdzxjoslshwa\",\"parameters\":{\"kkihxpofv\":\"datazwmnfavllbskls\",\"orppzb\":\"datakcea\",\"vq\":\"datavawbt\"}}},\"pipelines\":[{\"pipelineReference\":{\"referenceName\":\"naeclrjscdoqocdr\",\"name\":\"uhsjlroaedswhbse\"},\"parameters\":{\"lugzsvzi\":\"databoyrfqyjto\",\"dsvdbdl\":\"datakasbda\"}}],\"description\":\"utwm\",\"runtimeState\":\"Stopped\",\"annotations\":[\"datazlpgxsczrdmbebx\",\"datak\",\"dataokl\"],\"\":{\"hkbf\":\"dataenngutitjwvvvapd\",\"fytqnnbxgo\":\"dataeezzr\",\"zdphidhkigslczk\":\"dataiphlw\",\"ueaxcbfrnttlrum\":\"datalbztsgk\"}}")
            .toObject(BlobTrigger.class);
        Assertions.assertEquals("utwm", model.description());
        Assertions.assertEquals("naeclrjscdoqocdr", model.pipelines().get(0).pipelineReference().referenceName());
        Assertions.assertEquals("uhsjlroaedswhbse", model.pipelines().get(0).pipelineReference().name());
        Assertions.assertEquals("jdefsqunernbd", model.folderPath());
        Assertions.assertEquals(255555015, model.maxConcurrency());
        Assertions.assertEquals("cabchdzxjoslshwa", model.linkedService().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        BlobTrigger model = new BlobTrigger().withDescription("utwm")
            .withAnnotations(Arrays.asList("datazlpgxsczrdmbebx", "datak", "dataokl"))
            .withPipelines(Arrays.asList(new TriggerPipelineReference()
                .withPipelineReference(
                    new PipelineReference().withReferenceName("naeclrjscdoqocdr").withName("uhsjlroaedswhbse"))
                .withParameters(mapOf("lugzsvzi", "databoyrfqyjto", "dsvdbdl", "datakasbda"))))
            .withFolderPath("jdefsqunernbd").withMaxConcurrency(255555015)
            .withLinkedService(new LinkedServiceReference().withReferenceName("cabchdzxjoslshwa")
                .withParameters(mapOf("kkihxpofv", "datazwmnfavllbskls", "orppzb", "datakcea", "vq", "datavawbt")));
        model = BinaryData.fromObject(model).toObject(BlobTrigger.class);
        Assertions.assertEquals("utwm", model.description());
        Assertions.assertEquals("naeclrjscdoqocdr", model.pipelines().get(0).pipelineReference().referenceName());
        Assertions.assertEquals("uhsjlroaedswhbse", model.pipelines().get(0).pipelineReference().name());
        Assertions.assertEquals("jdefsqunernbd", model.folderPath());
        Assertions.assertEquals(255555015, model.maxConcurrency());
        Assertions.assertEquals("cabchdzxjoslshwa", model.linkedService().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
