// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.BlobTrigger;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.PipelineReference;
import com.azure.resourcemanager.datafactory.models.TriggerPipelineReference;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class BlobTriggerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        BlobTrigger model = BinaryData.fromString(
            "{\"type\":\"BlobTrigger\",\"typeProperties\":{\"folderPath\":\"awtdsnvxhxk\",\"maxConcurrency\":1755716093,\"linkedService\":{\"referenceName\":\"ec\",\"parameters\":{\"zxsdbfbkqi\":\"dataffglwmkmbxusnxlq\",\"ngrdu\":\"dataehxmztf\",\"zhpbjhhuimgdfoha\":\"dataozdzbhtfmgpio\"}}},\"pipelines\":[{\"pipelineReference\":{\"referenceName\":\"tfavmdp\",\"name\":\"l\"},\"parameters\":{\"jwlrits\":\"datawewognpuupaqjerq\",\"tjc\":\"datauxregfbffkzpfjmj\"}},{\"pipelineReference\":{\"referenceName\":\"gljrlrkv\",\"name\":\"n\"},\"parameters\":{\"svoimdgrfppek\":\"datammpu\",\"mwit\":\"dataeomiov\",\"tshcssliep\":\"dataihwlpzdqggghwxpg\",\"wx\":\"datapphfezzg\"}},{\"pipelineReference\":{\"referenceName\":\"kpo\",\"name\":\"zgvtjrobowhcvssm\"},\"parameters\":{\"mu\":\"datadstlxrg\",\"ulwvezthgwqqtb\":\"datahxoldmhypptfpp\"}}],\"description\":\"kyipzehitdq\",\"runtimeState\":\"Stopped\",\"annotations\":[\"dataua\"],\"\":{\"blkcvkmedrkol\":\"datatgpz\",\"afvks\":\"datanebn\",\"hivw\":\"datajdbdjxvcxepjfxcm\",\"lirbvqkbxgzepiny\":\"datamtret\"}}")
            .toObject(BlobTrigger.class);
        Assertions.assertEquals("kyipzehitdq", model.description());
        Assertions.assertEquals("tfavmdp", model.pipelines().get(0).pipelineReference().referenceName());
        Assertions.assertEquals("l", model.pipelines().get(0).pipelineReference().name());
        Assertions.assertEquals("awtdsnvxhxk", model.folderPath());
        Assertions.assertEquals(1755716093, model.maxConcurrency());
        Assertions.assertEquals("ec", model.linkedService().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        BlobTrigger model = new BlobTrigger().withDescription("kyipzehitdq")
            .withAnnotations(Arrays.asList("dataua"))
            .withPipelines(Arrays.asList(
                new TriggerPipelineReference()
                    .withPipelineReference(new PipelineReference().withReferenceName("tfavmdp").withName("l"))
                    .withParameters(mapOf("jwlrits", "datawewognpuupaqjerq", "tjc", "datauxregfbffkzpfjmj")),
                new TriggerPipelineReference()
                    .withPipelineReference(new PipelineReference().withReferenceName("gljrlrkv").withName("n"))
                    .withParameters(mapOf("svoimdgrfppek", "datammpu", "mwit", "dataeomiov", "tshcssliep",
                        "dataihwlpzdqggghwxpg", "wx", "datapphfezzg")),
                new TriggerPipelineReference()
                    .withPipelineReference(
                        new PipelineReference().withReferenceName("kpo").withName("zgvtjrobowhcvssm"))
                    .withParameters(mapOf("mu", "datadstlxrg", "ulwvezthgwqqtb", "datahxoldmhypptfpp"))))
            .withFolderPath("awtdsnvxhxk")
            .withMaxConcurrency(1755716093)
            .withLinkedService(new LinkedServiceReference().withReferenceName("ec")
                .withParameters(mapOf("zxsdbfbkqi", "dataffglwmkmbxusnxlq", "ngrdu", "dataehxmztf", "zhpbjhhuimgdfoha",
                    "dataozdzbhtfmgpio")));
        model = BinaryData.fromObject(model).toObject(BlobTrigger.class);
        Assertions.assertEquals("kyipzehitdq", model.description());
        Assertions.assertEquals("tfavmdp", model.pipelines().get(0).pipelineReference().referenceName());
        Assertions.assertEquals("l", model.pipelines().get(0).pipelineReference().name());
        Assertions.assertEquals("awtdsnvxhxk", model.folderPath());
        Assertions.assertEquals(1755716093, model.maxConcurrency());
        Assertions.assertEquals("ec", model.linkedService().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
