// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.BlobTrigger;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.PipelineReference;
import com.azure.resourcemanager.datafactory.models.TriggerPipelineReference;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class BlobTriggerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        BlobTrigger model = BinaryData.fromString(
            "{\"type\":\"BlobTrigger\",\"typeProperties\":{\"folderPath\":\"axcbfrnttlrumv\",\"maxConcurrency\":1631960216,\"linkedService\":{\"referenceName\":\"byedcavv\",\"parameters\":{\"mqxbauzvxe\":\"datannhafed\"}}},\"pipelines\":[{\"pipelineReference\":{\"referenceName\":\"mg\",\"name\":\"vmuqxsoc\"},\"parameters\":{\"jpu\":\"datartcifxle\",\"cvsjcdmnvtpb\":\"dataai\",\"wcbnm\":\"datahzcaaqvsdaqfvplf\",\"bbvqsqw\":\"datashmqn\"}}],\"description\":\"xtqdtvejilq\",\"runtimeState\":\"Stopped\",\"annotations\":[\"datarokfyddrsa\"],\"\":{\"vbc\":\"datanweiytkeqjviaws\",\"lmiuprfqyrwtdnr\":\"dataahe\"}}")
            .toObject(BlobTrigger.class);
        Assertions.assertEquals("xtqdtvejilq", model.description());
        Assertions.assertEquals("mg", model.pipelines().get(0).pipelineReference().referenceName());
        Assertions.assertEquals("vmuqxsoc", model.pipelines().get(0).pipelineReference().name());
        Assertions.assertEquals("axcbfrnttlrumv", model.folderPath());
        Assertions.assertEquals(1631960216, model.maxConcurrency());
        Assertions.assertEquals("byedcavv", model.linkedService().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        BlobTrigger model = new BlobTrigger().withDescription("xtqdtvejilq")
            .withAnnotations(Arrays.asList("datarokfyddrsa"))
            .withPipelines(Arrays.asList(new TriggerPipelineReference()
                .withPipelineReference(new PipelineReference().withReferenceName("mg").withName("vmuqxsoc"))
                .withParameters(mapOf("jpu", "datartcifxle", "cvsjcdmnvtpb", "dataai", "wcbnm", "datahzcaaqvsdaqfvplf",
                    "bbvqsqw", "datashmqn"))))
            .withFolderPath("axcbfrnttlrumv")
            .withMaxConcurrency(1631960216)
            .withLinkedService(new LinkedServiceReference().withReferenceName("byedcavv")
                .withParameters(mapOf("mqxbauzvxe", "datannhafed")));
        model = BinaryData.fromObject(model).toObject(BlobTrigger.class);
        Assertions.assertEquals("xtqdtvejilq", model.description());
        Assertions.assertEquals("mg", model.pipelines().get(0).pipelineReference().referenceName());
        Assertions.assertEquals("vmuqxsoc", model.pipelines().get(0).pipelineReference().name());
        Assertions.assertEquals("axcbfrnttlrumv", model.folderPath());
        Assertions.assertEquals(1631960216, model.maxConcurrency());
        Assertions.assertEquals("byedcavv", model.linkedService().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
