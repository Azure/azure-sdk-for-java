// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.ExecutePipelineActivity;
import com.azure.resourcemanager.datafactory.models.ExecutePipelineActivityPolicy;
import com.azure.resourcemanager.datafactory.models.PipelineReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ExecutePipelineActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ExecutePipelineActivity model = BinaryData.fromString(
            "{\"type\":\"ExecutePipeline\",\"policy\":{\"secureInput\":false,\"\":{\"knywxpmefbnccbvc\":\"datavjdxlbsnskcksfx\",\"kmifyx\":\"datao\"}},\"typeProperties\":{\"pipeline\":{\"referenceName\":\"nu\",\"name\":\"isfnbtqdrkwr\"},\"parameters\":{\"fqne\":\"dataoidhbulvkisyh\",\"dddeahfgdjahnsm\":\"datap\",\"qdxjdolobt\":\"datatkh\"},\"waitOnCompletion\":true},\"name\":\"xnlaurviyntc\",\"description\":\"pbzoqtf\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"elblb\",\"dependencyConditions\":[\"Completed\",\"Succeeded\",\"Succeeded\",\"Failed\"],\"\":{\"mmqzbznrjw\":\"dataaxttoenfohipijfy\",\"xdi\":\"dataecktcwgnkxjd\",\"wotpiaklefw\":\"datandz\"}},{\"activity\":\"iabfntrmkeawmfe\",\"dependencyConditions\":[\"Skipped\"],\"\":{\"ffnngiu\":\"dataljbnfw\",\"pzjtiktgmdlw\":\"databpgskgpwspxhhnv\"}},{\"activity\":\"fstizemakgzcmbg\",\"dependencyConditions\":[\"Skipped\",\"Completed\",\"Skipped\"],\"\":{\"wxabvxw\":\"dataflckumjjpx\",\"gy\":\"dataagoeillsz\",\"bzuilynbdvbuxlji\":\"dataozkm\"}},{\"activity\":\"yrwdmgrfhvew\",\"dependencyConditions\":[\"Skipped\",\"Completed\",\"Succeeded\"],\"\":{\"pf\":\"datak\",\"hpnwzpkisefygdau\":\"dataswbpjzoyzydlysz\"}}],\"userProperties\":[{\"name\":\"kgmgqynejqk\",\"value\":\"datasxiczvfxoihc\"},{\"name\":\"xexbksaf\",\"value\":\"dataecwyrtluujyespcg\"},{\"name\":\"szwvooxieyyww\",\"value\":\"dataiwiaqrc\"}],\"\":{\"zszcrwhr\":\"databktbviaqv\"}}")
            .toObject(ExecutePipelineActivity.class);
        Assertions.assertEquals("xnlaurviyntc", model.name());
        Assertions.assertEquals("pbzoqtf", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("elblb", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("kgmgqynejqk", model.userProperties().get(0).name());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals("nu", model.pipeline().referenceName());
        Assertions.assertEquals("isfnbtqdrkwr", model.pipeline().name());
        Assertions.assertEquals(true, model.waitOnCompletion());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ExecutePipelineActivity model
            = new ExecutePipelineActivity().withName("xnlaurviyntc").withDescription("pbzoqtf")
                .withState(ActivityState.ACTIVE).withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
                .withDependsOn(Arrays.asList(
                    new ActivityDependency().withActivity("elblb")
                        .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED,
                            DependencyCondition.SUCCEEDED, DependencyCondition.SUCCEEDED, DependencyCondition.FAILED))
                        .withAdditionalProperties(mapOf()),
                    new ActivityDependency().withActivity("iabfntrmkeawmfe")
                        .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED))
                        .withAdditionalProperties(mapOf()),
                    new ActivityDependency().withActivity("fstizemakgzcmbg")
                        .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED,
                            DependencyCondition.COMPLETED, DependencyCondition.SKIPPED))
                        .withAdditionalProperties(mapOf()),
                    new ActivityDependency().withActivity("yrwdmgrfhvew")
                        .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED,
                            DependencyCondition.COMPLETED, DependencyCondition.SUCCEEDED))
                        .withAdditionalProperties(mapOf())))
                .withUserProperties(
                    Arrays.asList(new UserProperty().withName("kgmgqynejqk").withValue("datasxiczvfxoihc"),
                        new UserProperty().withName("xexbksaf").withValue("dataecwyrtluujyespcg"),
                        new UserProperty().withName("szwvooxieyyww").withValue("dataiwiaqrc")))
                .withPolicy(
                    new ExecutePipelineActivityPolicy().withSecureInput(false).withAdditionalProperties(mapOf()))
                .withPipeline(new PipelineReference().withReferenceName("nu").withName("isfnbtqdrkwr"))
                .withParameters(mapOf("fqne", "dataoidhbulvkisyh", "dddeahfgdjahnsm", "datap", "qdxjdolobt", "datatkh"))
                .withWaitOnCompletion(true);
        model = BinaryData.fromObject(model).toObject(ExecutePipelineActivity.class);
        Assertions.assertEquals("xnlaurviyntc", model.name());
        Assertions.assertEquals("pbzoqtf", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("elblb", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("kgmgqynejqk", model.userProperties().get(0).name());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals("nu", model.pipeline().referenceName());
        Assertions.assertEquals("isfnbtqdrkwr", model.pipeline().name());
        Assertions.assertEquals(true, model.waitOnCompletion());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
