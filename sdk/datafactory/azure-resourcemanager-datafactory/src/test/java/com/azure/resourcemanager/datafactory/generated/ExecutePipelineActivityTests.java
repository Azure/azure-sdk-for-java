// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.ExecutePipelineActivity;
import com.azure.resourcemanager.datafactory.models.ExecutePipelineActivityPolicy;
import com.azure.resourcemanager.datafactory.models.PipelineReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ExecutePipelineActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ExecutePipelineActivity model = BinaryData.fromString(
            "{\"type\":\"ExecutePipeline\",\"policy\":{\"secureInput\":true,\"\":{\"arsbhjlcxvsmrxy\":\"datagc\",\"famnpbyxbglqyb\":\"databiwnyznaixjsfas\",\"xo\":\"datanxejxwcojjmp\",\"gkcxbenwiignrrqv\":\"dataqcnuoz\"}},\"typeProperties\":{\"pipeline\":{\"referenceName\":\"xouoqtestr\",\"name\":\"eskmvrcyyzaal\"},\"parameters\":{\"egsswijq\":\"datacw\",\"undlegdl\":\"datandqjbdtczxwq\",\"trhrygdpju\":\"datauedrmqkwkut\",\"m\":\"datamvoz\"},\"waitOnCompletion\":false},\"name\":\"ppj\",\"description\":\"ctsatnrywoue\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"twvyjprr\",\"dependencyConditions\":[\"Skipped\",\"Skipped\",\"Failed\"],\"\":{\"scswadvbwewwdf\":\"dataznm\"}},{\"activity\":\"iehwmaxl\",\"dependencyConditions\":[\"Succeeded\",\"Succeeded\",\"Failed\",\"Succeeded\"],\"\":{\"pllodowsjcvpvt\":\"dataeneq\",\"mnpblhalmh\":\"dataullivc\",\"ggiglpg\":\"dataatpwqoqnajmwpeao\"}}],\"userProperties\":[{\"name\":\"wulugrumoprnbozv\",\"value\":\"dataxamhitqrpbwykee\"},{\"name\":\"cpswqzpkodb\",\"value\":\"datauvftkaaozpcc\"},{\"name\":\"gwfqtqbn\",\"value\":\"datakmgydfmkz\"}],\"\":{\"rgzscrkka\":\"datadgeqzkp\",\"qbruymapjnfofxir\":\"datakjkszudxqwfvxv\",\"zstuhlw\":\"datafmvydja\",\"yfhkx\":\"datacnfvugbym\"}}")
            .toObject(ExecutePipelineActivity.class);
        Assertions.assertEquals("ppj", model.name());
        Assertions.assertEquals("ctsatnrywoue", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("twvyjprr", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("wulugrumoprnbozv", model.userProperties().get(0).name());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals("xouoqtestr", model.pipeline().referenceName());
        Assertions.assertEquals("eskmvrcyyzaal", model.pipeline().name());
        Assertions.assertEquals(false, model.waitOnCompletion());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ExecutePipelineActivity model = new ExecutePipelineActivity().withName("ppj")
            .withDescription("ctsatnrywoue")
            .withState(ActivityState.INACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
            .withDependsOn(Arrays.asList(
                new ActivityDependency().withActivity("twvyjprr")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.SKIPPED,
                        DependencyCondition.FAILED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("iehwmaxl")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED,
                        DependencyCondition.SUCCEEDED, DependencyCondition.FAILED, DependencyCondition.SUCCEEDED))
                    .withAdditionalProperties(mapOf())))
            .withUserProperties(
                Arrays.asList(new UserProperty().withName("wulugrumoprnbozv").withValue("dataxamhitqrpbwykee"),
                    new UserProperty().withName("cpswqzpkodb").withValue("datauvftkaaozpcc"),
                    new UserProperty().withName("gwfqtqbn").withValue("datakmgydfmkz")))
            .withPolicy(new ExecutePipelineActivityPolicy().withSecureInput(true).withAdditionalProperties(mapOf()))
            .withPipeline(new PipelineReference().withReferenceName("xouoqtestr").withName("eskmvrcyyzaal"))
            .withParameters(mapOf("egsswijq", "datacw", "undlegdl", "datandqjbdtczxwq", "trhrygdpju", "datauedrmqkwkut",
                "m", "datamvoz"))
            .withWaitOnCompletion(false);
        model = BinaryData.fromObject(model).toObject(ExecutePipelineActivity.class);
        Assertions.assertEquals("ppj", model.name());
        Assertions.assertEquals("ctsatnrywoue", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("twvyjprr", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("wulugrumoprnbozv", model.userProperties().get(0).name());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals("xouoqtestr", model.pipeline().referenceName());
        Assertions.assertEquals("eskmvrcyyzaal", model.pipeline().name());
        Assertions.assertEquals(false, model.waitOnCompletion());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
