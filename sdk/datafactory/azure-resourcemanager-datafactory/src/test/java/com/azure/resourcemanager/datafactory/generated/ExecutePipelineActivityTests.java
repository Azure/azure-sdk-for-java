// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.ExecutePipelineActivity;
import com.azure.resourcemanager.datafactory.models.ExecutePipelineActivityPolicy;
import com.azure.resourcemanager.datafactory.models.PipelineReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ExecutePipelineActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ExecutePipelineActivity model = BinaryData.fromString(
            "{\"type\":\"ExecutePipeline\",\"policy\":{\"secureInput\":false,\"\":{\"fxx\":\"datawf\"}},\"typeProperties\":{\"pipeline\":{\"referenceName\":\"oyisk\",\"name\":\"asxak\"},\"parameters\":{\"kgccldxuweweeeg\":\"datawjtnfaum\",\"hbcrib\":\"datazwsnryfaprhfc\",\"nfrhbkn\":\"datadszuxhaqlywty\",\"xhfg\":\"dataagpnmcqud\"},\"waitOnCompletion\":false},\"name\":\"egm\",\"description\":\"ebzoujhijlduuvxk\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"ordzwbskf\",\"dependencyConditions\":[\"Succeeded\",\"Failed\",\"Completed\",\"Succeeded\"],\"\":{\"pmowlsrxytev\":\"dataojzlia\",\"nzzhyl\":\"dataqxpmfhehtrpql\"}},{\"activity\":\"zuxqqrmck\",\"dependencyConditions\":[\"Succeeded\"],\"\":{\"zg\":\"dataeutbym\"}},{\"activity\":\"zhbnbnjpiecnriv\",\"dependencyConditions\":[\"Succeeded\",\"Succeeded\"],\"\":{\"uvpcjyh\":\"datahsuhkik\",\"anrirrnqloomsy\":\"dataznmj\",\"gdvknqui\":\"datayqgaska\",\"jzborwzpfgks\":\"dataipgvfchzcpv\"}},{\"activity\":\"vbrxlsbgl\",\"dependencyConditions\":[\"Failed\",\"Failed\",\"Completed\",\"Failed\"],\"\":{\"cabsmrfx\":\"dataneopxdbhcfswpdar\"}}],\"userProperties\":[{\"name\":\"vzgwvmhbiziij\",\"value\":\"dataseexdboatvsfyxdf\"},{\"name\":\"qrnawnqy\",\"value\":\"datagfxacojca\"},{\"name\":\"axor\",\"value\":\"dataj\"},{\"name\":\"oyngxogqvwchyn\",\"value\":\"datadtnaptwmawypk\"}],\"\":{\"gvvizaygtbmluyyc\":\"dataidoqvcjspjpmt\",\"uijpay\":\"datazvqpnjqpwxf\",\"i\":\"datalnz\",\"n\":\"dataqopwmbdleegwlh\"}}")
            .toObject(ExecutePipelineActivity.class);
        Assertions.assertEquals("egm", model.name());
        Assertions.assertEquals("ebzoujhijlduuvxk", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.onInactiveMarkAs());
        Assertions.assertEquals("ordzwbskf", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("vzgwvmhbiziij", model.userProperties().get(0).name());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals("oyisk", model.pipeline().referenceName());
        Assertions.assertEquals("asxak", model.pipeline().name());
        Assertions.assertEquals(false, model.waitOnCompletion());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ExecutePipelineActivity model = new ExecutePipelineActivity().withName("egm")
            .withDescription("ebzoujhijlduuvxk")
            .withState(ActivityState.INACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SUCCEEDED)
            .withDependsOn(Arrays.asList(
                new ActivityDependency().withActivity("ordzwbskf")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED, DependencyCondition.FAILED,
                        DependencyCondition.COMPLETED, DependencyCondition.SUCCEEDED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("zuxqqrmck")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("zhbnbnjpiecnriv")
                    .withDependencyConditions(
                        Arrays.asList(DependencyCondition.SUCCEEDED, DependencyCondition.SUCCEEDED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("vbrxlsbgl")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED, DependencyCondition.FAILED,
                        DependencyCondition.COMPLETED, DependencyCondition.FAILED))
                    .withAdditionalProperties(mapOf())))
            .withUserProperties(
                Arrays.asList(new UserProperty().withName("vzgwvmhbiziij").withValue("dataseexdboatvsfyxdf"),
                    new UserProperty().withName("qrnawnqy").withValue("datagfxacojca"),
                    new UserProperty().withName("axor").withValue("dataj"),
                    new UserProperty().withName("oyngxogqvwchyn").withValue("datadtnaptwmawypk")))
            .withPolicy(new ExecutePipelineActivityPolicy().withSecureInput(false).withAdditionalProperties(mapOf()))
            .withPipeline(new PipelineReference().withReferenceName("oyisk").withName("asxak"))
            .withParameters(mapOf("kgccldxuweweeeg", "datawjtnfaum", "hbcrib", "datazwsnryfaprhfc", "nfrhbkn",
                "datadszuxhaqlywty", "xhfg", "dataagpnmcqud"))
            .withWaitOnCompletion(false);
        model = BinaryData.fromObject(model).toObject(ExecutePipelineActivity.class);
        Assertions.assertEquals("egm", model.name());
        Assertions.assertEquals("ebzoujhijlduuvxk", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.onInactiveMarkAs());
        Assertions.assertEquals("ordzwbskf", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("vzgwvmhbiziij", model.userProperties().get(0).name());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals("oyisk", model.pipeline().referenceName());
        Assertions.assertEquals("asxak", model.pipeline().name());
        Assertions.assertEquals(false, model.waitOnCompletion());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
