// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.ExecutePipelineActivity;
import com.azure.resourcemanager.datafactory.models.ExecutePipelineActivityPolicy;
import com.azure.resourcemanager.datafactory.models.PipelineReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ExecutePipelineActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ExecutePipelineActivity model = BinaryData.fromString(
            "{\"type\":\"yeckb\",\"policy\":{\"secureInput\":true,\"\":{\"jurjc\":\"datafqwqmlisjqon\",\"kbhwwpaeceuvqa\":\"datadelqazbzixgq\",\"m\":\"dataaedvnloq\",\"qxldkhgngy\":\"datajgdbobr\"}},\"typeProperties\":{\"pipeline\":{\"referenceName\":\"fesjksmyeegbe\",\"name\":\"fwnc\"},\"parameters\":{\"v\":\"datazmyds\",\"gcmmvvbwrilc\":\"datakfzorddc\"},\"waitOnCompletion\":false},\"name\":\"depulbxgdf\",\"description\":\"ywmezoi\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"cfkkcpkvujwfyv\",\"dependencyConditions\":[\"Skipped\",\"Succeeded\"],\"\":{\"adfjxfi\":\"dataeysefsi\"}},{\"activity\":\"euqgpt\",\"dependencyConditions\":[\"Failed\",\"Skipped\"],\"\":{\"zl\":\"datavfbrgtoqk\",\"wiitxye\":\"datakjhu\",\"ehhkcutxmqvbh\":\"dataidk\",\"vkrskqgokhpzvph\":\"databwdu\"}},{\"activity\":\"k\",\"dependencyConditions\":[\"Completed\",\"Succeeded\",\"Succeeded\",\"Skipped\"],\"\":{\"geovjiezkwde\":\"datakdhopzymhrfwchi\",\"okiexmfeechltx\":\"dataldocqhlbsv\",\"ua\":\"datayqw\"}},{\"activity\":\"of\",\"dependencyConditions\":[\"Completed\",\"Failed\",\"Completed\"],\"\":{\"ogbmeksegd\":\"datai\"}}],\"userProperties\":[{\"name\":\"oc\",\"value\":\"datanmxbhgsimenjh\"},{\"name\":\"wknazcwja\",\"value\":\"datayvno\"}],\"\":{\"bss\":\"datazlm\"}}")
            .toObject(ExecutePipelineActivity.class);
        Assertions.assertEquals("depulbxgdf", model.name());
        Assertions.assertEquals("ywmezoi", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("cfkkcpkvujwfyv", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("oc", model.userProperties().get(0).name());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals("fesjksmyeegbe", model.pipeline().referenceName());
        Assertions.assertEquals("fwnc", model.pipeline().name());
        Assertions.assertEquals(false, model.waitOnCompletion());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ExecutePipelineActivity model
            = new ExecutePipelineActivity().withName("depulbxgdf")
                .withDescription("ywmezoi")
                .withState(ActivityState.ACTIVE)
                .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
                .withDependsOn(Arrays.asList(
                    new ActivityDependency().withActivity("cfkkcpkvujwfyv")
                        .withDependencyConditions(
                            Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.SUCCEEDED))
                        .withAdditionalProperties(mapOf()),
                    new ActivityDependency().withActivity("euqgpt")
                        .withDependencyConditions(
                            Arrays.asList(DependencyCondition.FAILED, DependencyCondition.SKIPPED))
                        .withAdditionalProperties(mapOf()),
                    new ActivityDependency().withActivity("k")
                        .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED,
                            DependencyCondition.SUCCEEDED, DependencyCondition.SUCCEEDED, DependencyCondition.SKIPPED))
                        .withAdditionalProperties(mapOf()),
                    new ActivityDependency().withActivity("of")
                        .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED,
                            DependencyCondition.FAILED, DependencyCondition.COMPLETED))
                        .withAdditionalProperties(mapOf())))
                .withUserProperties(Arrays.asList(new UserProperty().withName("oc").withValue("datanmxbhgsimenjh"),
                    new UserProperty().withName("wknazcwja").withValue("datayvno")))
                .withPolicy(new ExecutePipelineActivityPolicy().withSecureInput(true).withAdditionalProperties(mapOf()))
                .withPipeline(new PipelineReference().withReferenceName("fesjksmyeegbe").withName("fwnc"))
                .withParameters(mapOf("v", "datazmyds", "gcmmvvbwrilc", "datakfzorddc"))
                .withWaitOnCompletion(false);
        model = BinaryData.fromObject(model).toObject(ExecutePipelineActivity.class);
        Assertions.assertEquals("depulbxgdf", model.name());
        Assertions.assertEquals("ywmezoi", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("cfkkcpkvujwfyv", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("oc", model.userProperties().get(0).name());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals("fesjksmyeegbe", model.pipeline().referenceName());
        Assertions.assertEquals("fwnc", model.pipeline().name());
        Assertions.assertEquals(false, model.waitOnCompletion());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
