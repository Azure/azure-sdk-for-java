// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.ExecutePipelineActivity;
import com.azure.resourcemanager.datafactory.models.ExecutePipelineActivityPolicy;
import com.azure.resourcemanager.datafactory.models.PipelineReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class ExecutePipelineActivityTests {
    @Test
    public void testDeserialize() {
        ExecutePipelineActivity model =
            BinaryData
                .fromString(
                    "{\"type\":\"ExecutePipeline\",\"policy\":{\"secureInput\":true,\"\":{}},\"typeProperties\":{\"pipeline\":{\"referenceName\":\"ftedzuubjtvgjsx\",\"name\":\"yj\"},\"parameters\":{},\"waitOnCompletion\":false},\"name\":\"pwwobtdphti\",\"description\":\"ffofwan\",\"dependsOn\":[{\"activity\":\"scauwazcgwdfr\",\"dependencyConditions\":[\"Succeeded\",\"Skipped\"],\"\":{}}],\"userProperties\":[{\"name\":\"zokscvg\"},{\"name\":\"lix\"},{\"name\":\"gbyfgwe\"}],\"\":{}}")
                .toObject(ExecutePipelineActivity.class);
        Assertions.assertEquals("pwwobtdphti", model.name());
        Assertions.assertEquals("ffofwan", model.description());
        Assertions.assertEquals("scauwazcgwdfr", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("zokscvg", model.userProperties().get(0).name());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals("ftedzuubjtvgjsx", model.pipeline().referenceName());
        Assertions.assertEquals("yj", model.pipeline().name());
        Assertions.assertEquals(false, model.waitOnCompletion());
    }

    @Test
    public void testSerialize() {
        ExecutePipelineActivity model =
            new ExecutePipelineActivity()
                .withName("pwwobtdphti")
                .withDescription("ffofwan")
                .withDependsOn(
                    Arrays
                        .asList(
                            new ActivityDependency()
                                .withActivity("scauwazcgwdfr")
                                .withDependencyConditions(
                                    Arrays.asList(DependencyCondition.SUCCEEDED, DependencyCondition.SKIPPED))
                                .withAdditionalProperties(mapOf())))
                .withUserProperties(
                    Arrays
                        .asList(
                            new UserProperty().withName("zokscvg"),
                            new UserProperty().withName("lix"),
                            new UserProperty().withName("gbyfgwe")))
                .withPolicy(new ExecutePipelineActivityPolicy().withSecureInput(true).withAdditionalProperties(mapOf()))
                .withPipeline(new PipelineReference().withReferenceName("ftedzuubjtvgjsx").withName("yj"))
                .withParameters(mapOf())
                .withWaitOnCompletion(false);
        model = BinaryData.fromObject(model).toObject(ExecutePipelineActivity.class);
        Assertions.assertEquals("pwwobtdphti", model.name());
        Assertions.assertEquals("ffofwan", model.description());
        Assertions.assertEquals("scauwazcgwdfr", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("zokscvg", model.userProperties().get(0).name());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals("ftedzuubjtvgjsx", model.pipeline().referenceName());
        Assertions.assertEquals("yj", model.pipeline().name());
        Assertions.assertEquals(false, model.waitOnCompletion());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
