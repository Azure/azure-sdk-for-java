// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.ExecutePipelineActivity;
import com.azure.resourcemanager.datafactory.models.ExecutePipelineActivityPolicy;
import com.azure.resourcemanager.datafactory.models.PipelineReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ExecutePipelineActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ExecutePipelineActivity model = BinaryData.fromString(
            "{\"type\":\"ExecutePipeline\",\"policy\":{\"secureInput\":false,\"\":{\"bwpdvedm\":\"datascmfnk\",\"onkfb\":\"datackbgxgykxszet\",\"szn\":\"datawfkczldepz\"}},\"typeProperties\":{\"pipeline\":{\"referenceName\":\"wdcisceiauoy\",\"name\":\"dnxawf\"},\"parameters\":{\"xjiz\":\"datambvccuikpavi\",\"tltcrtmebrssrl\":\"datajsuiou\"},\"waitOnCompletion\":false},\"name\":\"qpth\",\"description\":\"j\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"nsogdvhqqxggncg\",\"dependencyConditions\":[\"Succeeded\",\"Skipped\"],\"\":{\"brhkdemax\":\"dataxcjqrvpgukscr\",\"gkcac\":\"dataaj\",\"jgageyxajk\":\"datas\",\"gfxwynzbeemlsrtg\":\"datazkzprjqb\"}},{\"activity\":\"gcmutuk\",\"dependencyConditions\":[\"Completed\",\"Failed\"],\"\":{\"fdrxy\":\"dataufuhbdm\",\"tpdxpoxogvpsmx\":\"datajjqctqvbahii\",\"aqpwxuyik\":\"datachnhj\"}},{\"activity\":\"mlplqgp\",\"dependencyConditions\":[\"Failed\",\"Skipped\",\"Skipped\",\"Succeeded\"],\"\":{\"zhi\":\"datakvnlvwtslzblgv\"}},{\"activity\":\"xiyqwlx\",\"dependencyConditions\":[\"Completed\",\"Completed\",\"Failed\"],\"\":{\"edz\":\"datatn\",\"nmcaprxhixmybl\":\"dataovt\"}}],\"userProperties\":[{\"name\":\"u\",\"value\":\"dataaggkrumpunw\"},{\"name\":\"fyvhcbo\",\"value\":\"datapxh\"},{\"name\":\"hi\",\"value\":\"datawvhjdrvjktv\"}],\"\":{\"isew\":\"datanooytils\",\"zgluqacebcnhz\":\"dataljmmoquic\",\"lvwkgcpfz\":\"datasaumjuruspflv\"}}")
            .toObject(ExecutePipelineActivity.class);
        Assertions.assertEquals("qpth", model.name());
        Assertions.assertEquals("j", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("nsogdvhqqxggncg", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("u", model.userProperties().get(0).name());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals("wdcisceiauoy", model.pipeline().referenceName());
        Assertions.assertEquals("dnxawf", model.pipeline().name());
        Assertions.assertEquals(false, model.waitOnCompletion());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ExecutePipelineActivity model
            = new ExecutePipelineActivity().withName("qpth")
                .withDescription("j")
                .withState(ActivityState.ACTIVE)
                .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
                .withDependsOn(Arrays.asList(
                    new ActivityDependency().withActivity("nsogdvhqqxggncg")
                        .withDependencyConditions(
                            Arrays.asList(DependencyCondition.SUCCEEDED, DependencyCondition.SKIPPED))
                        .withAdditionalProperties(mapOf()),
                    new ActivityDependency().withActivity("gcmutuk")
                        .withDependencyConditions(
                            Arrays.asList(DependencyCondition.COMPLETED, DependencyCondition.FAILED))
                        .withAdditionalProperties(mapOf()),
                    new ActivityDependency().withActivity("mlplqgp")
                        .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED, DependencyCondition.SKIPPED,
                            DependencyCondition.SKIPPED, DependencyCondition.SUCCEEDED))
                        .withAdditionalProperties(mapOf()),
                    new ActivityDependency().withActivity("xiyqwlx")
                        .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED,
                            DependencyCondition.COMPLETED, DependencyCondition.FAILED))
                        .withAdditionalProperties(mapOf())))
                .withUserProperties(Arrays.asList(new UserProperty().withName("u").withValue("dataaggkrumpunw"),
                    new UserProperty().withName("fyvhcbo").withValue("datapxh"),
                    new UserProperty().withName("hi").withValue("datawvhjdrvjktv")))
                .withPolicy(
                    new ExecutePipelineActivityPolicy().withSecureInput(false).withAdditionalProperties(mapOf()))
                .withPipeline(new PipelineReference().withReferenceName("wdcisceiauoy").withName("dnxawf"))
                .withParameters(mapOf("xjiz", "datambvccuikpavi", "tltcrtmebrssrl", "datajsuiou"))
                .withWaitOnCompletion(false);
        model = BinaryData.fromObject(model).toObject(ExecutePipelineActivity.class);
        Assertions.assertEquals("qpth", model.name());
        Assertions.assertEquals("j", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("nsogdvhqqxggncg", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("u", model.userProperties().get(0).name());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals("wdcisceiauoy", model.pipeline().referenceName());
        Assertions.assertEquals("dnxawf", model.pipeline().name());
        Assertions.assertEquals(false, model.waitOnCompletion());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
