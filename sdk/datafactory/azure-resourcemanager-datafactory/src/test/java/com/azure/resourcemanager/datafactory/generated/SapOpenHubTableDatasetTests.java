// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.SapOpenHubTableDataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SapOpenHubTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SapOpenHubTableDataset model = BinaryData.fromString(
            "{\"type\":\"SapOpenHubTable\",\"typeProperties\":{\"openHubDestinationName\":\"datamrzcqfevnkyakc\",\"excludeLastRequest\":\"dataehognsddjkkdede\",\"baseRequestId\":\"dataazogfc\"},\"description\":\"cx\",\"structure\":\"dataumtcqxmyvkxixypa\",\"schema\":\"datafjczgohvpsuwi\",\"linkedServiceName\":{\"referenceName\":\"hmxczbyfkocgmzd\",\"parameters\":{\"ngtwgxro\":\"datanlwsc\",\"ihavis\":\"datawvplksdksutacuc\",\"vpmqququxlph\":\"databvjh\"}},\"parameters\":{\"icgym\":{\"type\":\"SecureString\",\"defaultValue\":\"dataexoweorocr\"},\"vhtvijvwmrg\":{\"type\":\"String\",\"defaultValue\":\"dataqpfy\"},\"hbtqyzy\":{\"type\":\"Array\",\"defaultValue\":\"datahrplcxfmbzquuutq\"},\"vxjdqosxzmdz\":{\"type\":\"Int\",\"defaultValue\":\"datambky\"}},\"annotations\":[\"dataqfufkekzfkicxhs\",\"datavmnkgghvsryjok\"],\"folder\":{\"name\":\"vbjsarxsvmfp\"},\"\":{\"hgxg\":\"databpzgfgqpu\",\"ukgsn\":\"dataeabbfpxxavlo\",\"xj\":\"datahw\"}}")
            .toObject(SapOpenHubTableDataset.class);
        Assertions.assertEquals("cx", model.description());
        Assertions.assertEquals("hmxczbyfkocgmzd", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.SECURE_STRING, model.parameters().get("icgym").type());
        Assertions.assertEquals("vbjsarxsvmfp", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SapOpenHubTableDataset model = new SapOpenHubTableDataset().withDescription("cx")
            .withStructure("dataumtcqxmyvkxixypa")
            .withSchema("datafjczgohvpsuwi")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("hmxczbyfkocgmzd")
                .withParameters(
                    mapOf("ngtwgxro", "datanlwsc", "ihavis", "datawvplksdksutacuc", "vpmqququxlph", "databvjh")))
            .withParameters(mapOf("icgym",
                new ParameterSpecification().withType(ParameterType.SECURE_STRING).withDefaultValue("dataexoweorocr"),
                "vhtvijvwmrg", new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("dataqpfy"),
                "hbtqyzy",
                new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("datahrplcxfmbzquuutq"),
                "vxjdqosxzmdz", new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("datambky")))
            .withAnnotations(Arrays.asList("dataqfufkekzfkicxhs", "datavmnkgghvsryjok"))
            .withFolder(new DatasetFolder().withName("vbjsarxsvmfp"))
            .withOpenHubDestinationName("datamrzcqfevnkyakc")
            .withExcludeLastRequest("dataehognsddjkkdede")
            .withBaseRequestId("dataazogfc");
        model = BinaryData.fromObject(model).toObject(SapOpenHubTableDataset.class);
        Assertions.assertEquals("cx", model.description());
        Assertions.assertEquals("hmxczbyfkocgmzd", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.SECURE_STRING, model.parameters().get("icgym").type());
        Assertions.assertEquals("vbjsarxsvmfp", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
