// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.SapOpenHubTableDataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SapOpenHubTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SapOpenHubTableDataset model = BinaryData.fromString(
            "{\"type\":\"SapOpenHubTable\",\"typeProperties\":{\"openHubDestinationName\":\"datavqymcwtsi\",\"excludeLastRequest\":\"dataeplbrzgkuorwpqbs\",\"baseRequestId\":\"datae\"},\"description\":\"ptscru\",\"structure\":\"dataki\",\"schema\":\"dataayynoyj\",\"linkedServiceName\":{\"referenceName\":\"flsmsbnlyoifg\",\"parameters\":{\"zotkx\":\"datajqthykcvoevcw\",\"cgcvyp\":\"datalwwooxgbsd\",\"jcqgzwvxwi\":\"datahubdmgobxeh\"}},\"parameters\":{\"uky\":{\"type\":\"Int\",\"defaultValue\":\"datamjklqrljd\"}},\"annotations\":[\"datarjiqoqovqhgphgxu\",\"dataud\",\"datacy\"],\"folder\":{\"name\":\"vumryd\"},\"\":{\"iyoypoedkspwwibp\":\"dataivahfcqwnjzebpic\",\"znfffnhcgnaqsrm\":\"databqeigxuyxsxteuik\"}}")
            .toObject(SapOpenHubTableDataset.class);
        Assertions.assertEquals("ptscru", model.description());
        Assertions.assertEquals("flsmsbnlyoifg", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("uky").type());
        Assertions.assertEquals("vumryd", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SapOpenHubTableDataset model
            = new SapOpenHubTableDataset().withDescription("ptscru")
                .withStructure("dataki")
                .withSchema("dataayynoyj")
                .withLinkedServiceName(new LinkedServiceReference().withReferenceName("flsmsbnlyoifg")
                    .withParameters(mapOf("zotkx", "datajqthykcvoevcw", "cgcvyp", "datalwwooxgbsd", "jcqgzwvxwi",
                        "datahubdmgobxeh")))
                .withParameters(mapOf("uky",
                    new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("datamjklqrljd")))
                .withAnnotations(Arrays.asList("datarjiqoqovqhgphgxu", "dataud", "datacy"))
                .withFolder(new DatasetFolder().withName("vumryd"))
                .withOpenHubDestinationName("datavqymcwtsi")
                .withExcludeLastRequest("dataeplbrzgkuorwpqbs")
                .withBaseRequestId("datae");
        model = BinaryData.fromObject(model).toObject(SapOpenHubTableDataset.class);
        Assertions.assertEquals("ptscru", model.description());
        Assertions.assertEquals("flsmsbnlyoifg", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("uky").type());
        Assertions.assertEquals("vumryd", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
