// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.SapOpenHubTableDataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SapOpenHubTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SapOpenHubTableDataset model = BinaryData.fromString(
            "{\"type\":\"on\",\"typeProperties\":{\"openHubDestinationName\":\"datazcg\",\"excludeLastRequest\":\"dataozlibcbnunzuysaj\",\"baseRequestId\":\"dataqlho\"},\"description\":\"ivgtibtkqjqjc\",\"structure\":\"datago\",\"schema\":\"datatkhh\",\"linkedServiceName\":{\"referenceName\":\"emrvk\",\"parameters\":{\"qfxspxgogyp\":\"datajtdyulglhelwrukl\",\"kvctvuz\":\"dataztgaexjn\",\"ttmhlvr\":\"datamb\"}},\"parameters\":{\"jggkwdepem\":{\"type\":\"Float\",\"defaultValue\":\"datanwukfajnpdw\"},\"gtrttcuayiqylnk\":{\"type\":\"Float\",\"defaultValue\":\"datayfiqiidxcorjvudy\"},\"gqexowq\":{\"type\":\"Object\",\"defaultValue\":\"datazifb\"},\"kuobpw\":{\"type\":\"Array\",\"defaultValue\":\"datagqrqkkvfy\"}},\"annotations\":[\"datapgobothx\",\"dataewhpnyjt\",\"dataqgzyvextc\"],\"folder\":{\"name\":\"r\"},\"\":{\"rifiozttcbiichg\":\"dataowuwhd\",\"ryqycymzrlcfgdwz\":\"dataudsozodwjcfqoy\",\"adnyciwzki\":\"datauzfdh\"}}")
            .toObject(SapOpenHubTableDataset.class);
        Assertions.assertEquals("ivgtibtkqjqjc", model.description());
        Assertions.assertEquals("emrvk", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.FLOAT, model.parameters().get("jggkwdepem").type());
        Assertions.assertEquals("r", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SapOpenHubTableDataset model = new SapOpenHubTableDataset().withDescription("ivgtibtkqjqjc")
            .withStructure("datago")
            .withSchema("datatkhh")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("emrvk")
                .withParameters(
                    mapOf("qfxspxgogyp", "datajtdyulglhelwrukl", "kvctvuz", "dataztgaexjn", "ttmhlvr", "datamb")))
            .withParameters(mapOf("jggkwdepem",
                new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("datanwukfajnpdw"),
                "gtrttcuayiqylnk",
                new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("datayfiqiidxcorjvudy"),
                "gqexowq", new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("datazifb"),
                "kuobpw", new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("datagqrqkkvfy")))
            .withAnnotations(Arrays.asList("datapgobothx", "dataewhpnyjt", "dataqgzyvextc"))
            .withFolder(new DatasetFolder().withName("r"))
            .withOpenHubDestinationName("datazcg")
            .withExcludeLastRequest("dataozlibcbnunzuysaj")
            .withBaseRequestId("dataqlho");
        model = BinaryData.fromObject(model).toObject(SapOpenHubTableDataset.class);
        Assertions.assertEquals("ivgtibtkqjqjc", model.description());
        Assertions.assertEquals("emrvk", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.FLOAT, model.parameters().get("jggkwdepem").type());
        Assertions.assertEquals("r", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
