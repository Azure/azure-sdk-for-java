// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.datafactory.DataFactoryManager;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.PipelineResource;
import com.azure.resourcemanager.datafactory.models.VariableType;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class PipelinesListByFactoryMockTests {
    @Test
    public void testListByFactory() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"value\":[{\"properties\":{\"description\":\"jvrxyr\",\"activities\":[{\"type\":\"Activity\",\"name\":\"rsyckq\",\"description\":\"fmqhtr\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"hhl\",\"dependencyConditions\":[]}],\"userProperties\":[{\"name\":\"wffrzgeobzmxzrai\",\"value\":\"datalz\"},{\"name\":\"r\",\"value\":\"datajpnxz\"},{\"name\":\"rc\",\"value\":\"datayysycey\"}],\"\":{\"ghppy\":\"datalxhymc\",\"ygtetmpw\":\"dataro\",\"mnoecfjw\":\"datalbqdxvxdfkdwk\",\"r\":\"datakiupgmdsz\"}},{\"type\":\"Activity\",\"name\":\"djxltjsm\",\"description\":\"ecr\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"is\",\"dependencyConditions\":[]},{\"activity\":\"goapxdmxwetkj\",\"dependencyConditions\":[]},{\"activity\":\"xekql\",\"dependencyConditions\":[]},{\"activity\":\"ctdxargqff\",\"dependencyConditions\":[]}],\"userProperties\":[{\"name\":\"fbfqw\",\"value\":\"datalzbtqzjmi\"},{\"name\":\"dcsdfbkiwumrf\",\"value\":\"datajrptsjecqwdosbs\"}],\"\":{\"cpwrgry\":\"dataiacwdxvlku\"}},{\"type\":\"Activity\",\"name\":\"blrqeqcdikcqc\",\"description\":\"dtfthnjxid\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"xgxtccmq\",\"dependencyConditions\":[]},{\"activity\":\"kuqrrzuegin\",\"dependencyConditions\":[]},{\"activity\":\"lnteoapszxqnjxv\",\"dependencyConditions\":[]}],\"userProperties\":[{\"name\":\"cqm\",\"value\":\"datajihmcgzwoijtlhx\"},{\"name\":\"sxxra\",\"value\":\"datagaicgqgafkrtsa\"},{\"name\":\"agvq\",\"value\":\"datatcr\"},{\"name\":\"fxqhnw\",\"value\":\"dataujrnfdqlzggvo\"}],\"\":{\"a\":\"dataiumrdbqujyijqc\",\"lbfknxz\":\"datanpsvgupqwqshmn\"}},{\"type\":\"Activity\",\"name\":\"suvjbfryortbre\",\"description\":\"ccpbtvgiokz\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"wawomkzussgj\",\"dependencyConditions\":[]},{\"activity\":\"ubggjdluwbmwu\",\"dependencyConditions\":[]},{\"activity\":\"bekzcmfibboz\",\"dependencyConditions\":[]},{\"activity\":\"ptwvamymswfwc\",\"dependencyConditions\":[]}],\"userProperties\":[{\"name\":\"sopffhqxh\",\"value\":\"datacohrhwxvvom\"},{\"name\":\"jpjrxvsggaubrk\",\"value\":\"datafvlqwi\"},{\"name\":\"eoenpihtgigaeeq\",\"value\":\"datapvirozlfcc\"}],\"\":{\"p\":\"dataqixxxgltqldlhhqp\"}}],\"parameters\":{\"nogyvpfyjlfnjmwb\":{\"type\":\"String\",\"defaultValue\":\"datacajhnnbp\"},\"vzqbvdlhc\":{\"type\":\"Int\",\"defaultValue\":\"datahyprpw\"},\"jqz\":{\"type\":\"String\",\"defaultValue\":\"datakmpxtfcrugitjnw\"},\"nbkcqoy\":{\"type\":\"Float\",\"defaultValue\":\"datafea\"}},\"variables\":{\"tzlflqpanceow\":{\"type\":\"Bool\",\"defaultValue\":\"databfbzhczyhtj\"},\"qu\":{\"type\":\"Array\",\"defaultValue\":\"datazxluozmedaq\"}},\"concurrency\":1169190885,\"annotations\":[\"dataux\",\"databsl\",\"datausvbvtcti\",\"dataovfe\"],\"runDimensions\":{\"jjrhvdxfs\":\"datagbacmnj\",\"lsrx\":\"datambbj\"},\"folder\":{\"name\":\"kcvksv\"},\"policy\":{\"elapsedTimeMetric\":{\"duration\":\"datarfnlhlfv\"}}},\"name\":\"ohyecblvpwuqq\",\"type\":\"fuuhm\",\"etag\":\"s\",\"\":{\"zvvrfplkemvvlge\":\"datarcxamgvi\",\"sh\":\"datay\",\"hxkifjvilazopwud\":\"dataplhwplyvqofpemc\",\"xaufowhmd\":\"dataew\"},\"id\":\"gaktugephqdoctg\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        DataFactoryManager manager = DataFactoryManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<PipelineResource> response
            = manager.pipelines().listByFactory("tdvwmefjpoe", "lyvbvxlrltrztrlo", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("gaktugephqdoctg", response.iterator().next().id());
        Assertions.assertEquals("jvrxyr", response.iterator().next().description());
        Assertions.assertEquals("rsyckq", response.iterator().next().activities().get(0).name());
        Assertions.assertEquals("fmqhtr", response.iterator().next().activities().get(0).description());
        Assertions.assertEquals(ActivityState.ACTIVE, response.iterator().next().activities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED,
            response.iterator().next().activities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("hhl", response.iterator().next().activities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals("wffrzgeobzmxzrai",
            response.iterator().next().activities().get(0).userProperties().get(0).name());
        Assertions.assertEquals(ParameterType.STRING,
            response.iterator().next().parameters().get("nogyvpfyjlfnjmwb").type());
        Assertions.assertEquals(VariableType.BOOL, response.iterator().next().variables().get("tzlflqpanceow").type());
        Assertions.assertEquals(1169190885, response.iterator().next().concurrency());
        Assertions.assertEquals("kcvksv", response.iterator().next().folder().name());
    }
}
