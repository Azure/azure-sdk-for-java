// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.datafactory.DataFactoryManager;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.PipelineResource;
import com.azure.resourcemanager.datafactory.models.VariableType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PipelinesListByFactoryMockTests {
    @Test
    public void testListByFactory() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"description\":\"gxsfeslxwlmx\",\"activities\":[{\"type\":\"Activity\",\"name\":\"bi\",\"description\":\"tblomidvicdquf\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"bdt\",\"dependencyConditions\":[]},{\"activity\":\"klths\",\"dependencyConditions\":[]},{\"activity\":\"asnxdhlovktrfdip\",\"dependencyConditions\":[]}],\"userProperties\":[{\"name\":\"xxosbydryysv\",\"value\":\"dataxpzsx\"},{\"name\":\"fnkjjwtynp\",\"value\":\"datairltzyuahnl\"}],\"\":{\"zezfhfjjjzcxtz\":\"datapjssdtysnlxwq\",\"qhph\":\"dataoloosceukqi\",\"oqmxkxfmwbrvslfo\":\"dataqkkacw\"}}],\"parameters\":{\"uj\":{\"type\":\"Array\",\"defaultValue\":\"dataemzrpdnu\"},\"dqfynrdagmihxjpf\":{\"type\":\"SecureString\",\"defaultValue\":\"databgcloknh\"},\"frmqbmcmgezapu\":{\"type\":\"Int\",\"defaultValue\":\"datauibczlre\"},\"gjweelkviki\":{\"type\":\"Array\",\"defaultValue\":\"datayokftdlwezplnzvr\"}},\"variables\":{\"cxwthkljk\":{\"type\":\"Bool\",\"defaultValue\":\"datawgsqosr\"},\"qfryketwrzx\":{\"type\":\"Bool\",\"defaultValue\":\"datafcr\"},\"yqnjfjyppix\":{\"type\":\"Bool\",\"defaultValue\":\"datayifkg\"},\"sp\":{\"type\":\"Array\",\"defaultValue\":\"datakfjtvlwyetyrnh\"}},\"concurrency\":1297296760,\"annotations\":[\"datanlypspn\"],\"runDimensions\":{\"b\":\"datapoangrlmaixrb\",\"mkeiunxtbme\":\"datar\",\"hfcaiz\":\"datazfoxdtzzmcrm\",\"fljv\":\"datauiyuzufdmsbvyg\"},\"folder\":{\"name\":\"k\"},\"policy\":{\"elapsedTimeMetric\":{\"duration\":\"datazfauhnxxdyahlg\"}}},\"name\":\"cjpkzmhaxtwjimlf\",\"type\":\"mynmmmglbxoeghor\",\"etag\":\"cp\",\"\":{\"ca\":\"datazczlvql\"},\"id\":\"hsart\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DataFactoryManager manager = DataFactoryManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<PipelineResource> response
            = manager.pipelines().listByFactory("bvvuyoilnixwxw", "quuvb", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("hsart", response.iterator().next().id());
        Assertions.assertEquals("gxsfeslxwlmx", response.iterator().next().description());
        Assertions.assertEquals("bi", response.iterator().next().activities().get(0).name());
        Assertions.assertEquals("tblomidvicdquf", response.iterator().next().activities().get(0).description());
        Assertions.assertEquals(ActivityState.INACTIVE, response.iterator().next().activities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED,
            response.iterator().next().activities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("bdt", response.iterator().next().activities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals("xxosbydryysv",
            response.iterator().next().activities().get(0).userProperties().get(0).name());
        Assertions.assertEquals(ParameterType.ARRAY, response.iterator().next().parameters().get("uj").type());
        Assertions.assertEquals(VariableType.BOOL, response.iterator().next().variables().get("cxwthkljk").type());
        Assertions.assertEquals(1297296760, response.iterator().next().concurrency());
        Assertions.assertEquals("k", response.iterator().next().folder().name());
    }
}
