// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.datafactory.DataFactoryManager;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.PipelineResource;
import com.azure.resourcemanager.datafactory.models.VariableType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PipelinesListByFactoryMockTests {
    @Test
    public void testListByFactory() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"description\":\"nqiighpxxw\",\"activities\":[{\"type\":\"Activity\",\"name\":\"mqugovcddxlrb\",\"description\":\"qrgjejabqvg\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"pxlyabjrzgssjf\",\"dependencyConditions\":[]},{\"activity\":\"urhku\",\"dependencyConditions\":[]},{\"activity\":\"phbwmbgwgmyglnsn\",\"dependencyConditions\":[]}],\"userProperties\":[{\"name\":\"qdsygdzzufrj\",\"value\":\"datawqwdglmfsjplfd\"},{\"name\":\"zlt\",\"value\":\"dataywykfuovk\"}],\"\":{\"pgvxii\":\"datazghtjxtzywoq\"}}],\"parameters\":{\"lt\":{\"type\":\"Float\",\"defaultValue\":\"datakthxudowj\"},\"cohsqufsyihsnzsj\":{\"type\":\"SecureString\",\"defaultValue\":\"datazq\"},\"jzalhunbmngstvnk\":{\"type\":\"Array\",\"defaultValue\":\"dataogyake\"},\"yinxxgxncoai\":{\"type\":\"Object\",\"defaultValue\":\"dataulltvlylbo\"}},\"variables\":{\"taocxaku\":{\"type\":\"Array\",\"defaultValue\":\"datamdjz\"}},\"concurrency\":64653521,\"annotations\":[\"datahan\"],\"runDimensions\":{\"el\":\"dataojod\"},\"folder\":{\"name\":\"dxqlrwwm\"},\"policy\":{\"elapsedTimeMetric\":{\"duration\":\"datavgusfrkjfrtauf\"}}},\"name\":\"xvzqine\",\"type\":\"jodvkn\",\"etag\":\"tttkhm\",\"\":{\"vdqfkjg\":\"datacasfqodc\",\"plxbxfrl\":\"datalcfoaabltvltt\"},\"id\":\"ikcnlbehxo\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DataFactoryManager manager = DataFactoryManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<PipelineResource> response
            = manager.pipelines().listByFactory("ho", "cchynnm", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("ikcnlbehxo", response.iterator().next().id());
        Assertions.assertEquals("nqiighpxxw", response.iterator().next().description());
        Assertions.assertEquals("mqugovcddxlrb", response.iterator().next().activities().get(0).name());
        Assertions.assertEquals("qrgjejabqvg", response.iterator().next().activities().get(0).description());
        Assertions.assertEquals(ActivityState.INACTIVE, response.iterator().next().activities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED,
            response.iterator().next().activities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("pxlyabjrzgssjf",
            response.iterator().next().activities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals("qdsygdzzufrj",
            response.iterator().next().activities().get(0).userProperties().get(0).name());
        Assertions.assertEquals(ParameterType.FLOAT, response.iterator().next().parameters().get("lt").type());
        Assertions.assertEquals(VariableType.ARRAY, response.iterator().next().variables().get("taocxaku").type());
        Assertions.assertEquals(64653521, response.iterator().next().concurrency());
        Assertions.assertEquals("dxqlrwwm", response.iterator().next().folder().name());
    }
}
