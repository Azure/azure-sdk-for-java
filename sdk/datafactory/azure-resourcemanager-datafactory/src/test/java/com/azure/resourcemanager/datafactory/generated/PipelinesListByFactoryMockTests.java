// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.datafactory.DataFactoryManager;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.PipelineResource;
import com.azure.resourcemanager.datafactory.models.VariableType;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class PipelinesListByFactoryMockTests {
    @Test
    public void testListByFactory() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"value\":[{\"properties\":{\"description\":\"qjtoeaugwosrywp\",\"activities\":[{\"type\":\"Activity\",\"name\":\"l\",\"description\":\"iafsizdec\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"lwquxrrju\",\"dependencyConditions\":[]}],\"userProperties\":[{\"name\":\"phgsd\",\"value\":\"datatwfmvpsvwwtncvn\"},{\"name\":\"qwgn\",\"value\":\"datalicovvdcobfnb\"}],\"\":{\"xjfkpuszsjay\":\"dataoijxqgfmftrvv\",\"xwnircmodws\":\"datal\",\"wxwkjambfsxsr\":\"datahzlamdqgav\"}},{\"type\":\"Activity\",\"name\":\"jfapiodsn\",\"description\":\"ezwjq\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"uxo\",\"dependencyConditions\":[]},{\"activity\":\"mjxqintjhvcoro\",\"dependencyConditions\":[]},{\"activity\":\"mqudzi\",\"dependencyConditions\":[]}],\"userProperties\":[{\"name\":\"k\",\"value\":\"dataea\"},{\"name\":\"kcygyqgvofhpg\",\"value\":\"datajibkwwyfsqga\"},{\"name\":\"svcxazvrmu\",\"value\":\"datasjegohpwnrm\"}],\"\":{\"udmefsxmdml\":\"datatknbruszq\",\"g\":\"datawesixpwfvt\",\"bhcjhin\":\"datameqirxwkomjsfkd\",\"wkzuaxsrmadakj\":\"datanwpivfplbajqecn\"}},{\"type\":\"Activity\",\"name\":\"yp\",\"description\":\"yvobkkekld\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"hotwq\",\"dependencyConditions\":[]},{\"activity\":\"gvrzlimz\",\"dependencyConditions\":[]},{\"activity\":\"utmsmdibzvytem\",\"dependencyConditions\":[]}],\"userProperties\":[{\"name\":\"ykcxuvdcw\",\"value\":\"datanzf\"},{\"name\":\"eghn\",\"value\":\"dataqwjwwhs\"},{\"name\":\"jqxlbclvpgbuty\",\"value\":\"datasravsscblsxmsc\"}],\"\":{\"uzclfbvvuyoilni\":\"datad\",\"gxsfeslxwlmx\":\"datawxwaquuvbb\",\"bi\":\"datao\",\"dvicdqufjahuc\":\"dataktblom\"}}],\"parameters\":{\"trfdipss\":{\"type\":\"Object\",\"defaultValue\":\"datacklthsuasnxdhlov\"}},\"variables\":{\"zs\":{\"type\":\"Bool\",\"defaultValue\":\"databydryysvex\"},\"birltzyuahnl\":{\"type\":\"String\",\"defaultValue\":\"datankjjwtyn\"}},\"concurrency\":585093789,\"annotations\":[\"datassdtysnlx\",\"dataqmzezfhfjjj\",\"datacxtzk\"],\"runDimensions\":{\"h\":\"dataosceukqio\"},\"folder\":{\"name\":\"qkkacw\"},\"policy\":{\"elapsedTimeMetric\":{\"duration\":\"dataxk\"}}},\"name\":\"mwbrvslforlaudem\",\"type\":\"pdnusuj\",\"etag\":\"bbg\",\"\":{\"gmihxjpflzpuib\":\"dataknhadqfynrd\"},\"id\":\"lrewfrmqbmcmgeza\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        DataFactoryManager manager = DataFactoryManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<PipelineResource> response
            = manager.pipelines().listByFactory("udtiecnp", "af", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("lrewfrmqbmcmgeza", response.iterator().next().id());
        Assertions.assertEquals("qjtoeaugwosrywp", response.iterator().next().description());
        Assertions.assertEquals("l", response.iterator().next().activities().get(0).name());
        Assertions.assertEquals("iafsizdec", response.iterator().next().activities().get(0).description());
        Assertions.assertEquals(ActivityState.INACTIVE, response.iterator().next().activities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED,
            response.iterator().next().activities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("lwquxrrju",
            response.iterator().next().activities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals("phgsd", response.iterator().next().activities().get(0).userProperties().get(0).name());
        Assertions.assertEquals(ParameterType.OBJECT, response.iterator().next().parameters().get("trfdipss").type());
        Assertions.assertEquals(VariableType.BOOL, response.iterator().next().variables().get("zs").type());
        Assertions.assertEquals(585093789, response.iterator().next().concurrency());
        Assertions.assertEquals("qkkacw", response.iterator().next().folder().name());
    }
}
