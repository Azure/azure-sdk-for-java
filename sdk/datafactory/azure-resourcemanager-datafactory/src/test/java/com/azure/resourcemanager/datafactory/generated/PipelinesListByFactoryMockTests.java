// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.datafactory.DataFactoryManager;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.PipelineResource;
import com.azure.resourcemanager.datafactory.models.VariableType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PipelinesListByFactoryMockTests {
    @Test
    public void testListByFactory() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"description\":\"zhhmshonnmbaott\",\"activities\":[{\"type\":\"l\",\"name\":\"on\",\"description\":\"zwfukjwvmmya\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"afz\",\"dependencyConditions\":[]},{\"activity\":\"xzyrzqnxuab\",\"dependencyConditions\":[]},{\"activity\":\"uerncgvjm\",\"dependencyConditions\":[]}],\"userProperties\":[{\"name\":\"qruolmumz\",\"value\":\"datajhspy\"}],\"\":{\"ytbjfinhvl\":\"datajdmgzmpbfho\",\"nydehojqh\":\"datatdhsyarkzogovlth\",\"vapretiydlrj\":\"datas\"}},{\"type\":\"mp\",\"name\":\"vbrt\",\"description\":\"id\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"shv\",\"dependencyConditions\":[]}],\"userProperties\":[{\"name\":\"kje\",\"value\":\"datadfsgkrr\"},{\"name\":\"ltgbbxghxaqds\",\"value\":\"datatbgslllc\"},{\"name\":\"fhrbqq\",\"value\":\"datamttxmghsbcoguer\"}],\"\":{\"xrdszpoewfanfejk\":\"datajbtytdxhgpjewqgy\",\"jswhoh\":\"datautnaavtjhikcp\"}}],\"parameters\":{\"wx\":{\"type\":\"Object\",\"defaultValue\":\"dataqvximgjksbpudjh\"},\"edxwbhnsbejq\":{\"type\":\"String\",\"defaultValue\":\"datavceudxhnwg\"},\"exdfwr\":{\"type\":\"Object\",\"defaultValue\":\"datalchy\"},\"kbuiuspbeq\":{\"type\":\"Object\",\"defaultValue\":\"datazpokgrr\"}},\"variables\":{\"anqdbufde\":{\"type\":\"Bool\",\"defaultValue\":\"dataahrfhxrvarvtb\"},\"kuvqnop\":{\"type\":\"Bool\",\"defaultValue\":\"datahxngqpbbybhjozn\"},\"myboj\":{\"type\":\"String\",\"defaultValue\":\"databvi\"},\"bfz\":{\"type\":\"Bool\",\"defaultValue\":\"datat\"}},\"concurrency\":725820457,\"annotations\":[\"datawzsazfzyrleih\",\"datand\"],\"runDimensions\":{\"ypj\":\"datamjxpjnvkp\",\"ffiiecignemlahz\":\"datamj\"},\"folder\":{\"name\":\"izsacmtcevwzai\"},\"policy\":{\"elapsedTimeMetric\":{\"duration\":\"dataugilyykwwot\"}}},\"name\":\"hqahfzaihgmpyd\",\"type\":\"vkolbepqjji\",\"etag\":\"cuyiklmcrtcsc\",\"\":{\"xjhqtihuos\":\"datapcwhyk\"},\"id\":\"sgccxwhcyd\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DataFactoryManager manager = DataFactoryManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<PipelineResource> response
            = manager.pipelines().listByFactory("nwgchvgpunxnfo", "cc", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("sgccxwhcyd", response.iterator().next().id());
        Assertions.assertEquals("zhhmshonnmbaott", response.iterator().next().description());
        Assertions.assertEquals("on", response.iterator().next().activities().get(0).name());
        Assertions.assertEquals("zwfukjwvmmya", response.iterator().next().activities().get(0).description());
        Assertions.assertEquals(ActivityState.ACTIVE, response.iterator().next().activities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED,
            response.iterator().next().activities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("afz", response.iterator().next().activities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals("qruolmumz",
            response.iterator().next().activities().get(0).userProperties().get(0).name());
        Assertions.assertEquals(ParameterType.OBJECT, response.iterator().next().parameters().get("wx").type());
        Assertions.assertEquals(VariableType.BOOL, response.iterator().next().variables().get("anqdbufde").type());
        Assertions.assertEquals(725820457, response.iterator().next().concurrency());
        Assertions.assertEquals("izsacmtcevwzai", response.iterator().next().folder().name());
    }
}
