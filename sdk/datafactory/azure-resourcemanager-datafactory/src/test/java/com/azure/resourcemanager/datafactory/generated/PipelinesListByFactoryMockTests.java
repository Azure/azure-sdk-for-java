// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.datafactory.DataFactoryManager;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.PipelineResource;
import com.azure.resourcemanager.datafactory.models.VariableType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PipelinesListByFactoryMockTests {
    @Test
    public void testListByFactory() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"description\":\"ipato\",\"activities\":[{\"type\":\"Activity\",\"name\":\"r\",\"description\":\"pmcjrfj\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"fptynhulefltu\",\"dependencyConditions\":[]},{\"activity\":\"wpebbl\",\"dependencyConditions\":[]},{\"activity\":\"dlahrd\",\"dependencyConditions\":[]},{\"activity\":\"ytkehfoephiphoyg\",\"dependencyConditions\":[]}],\"userProperties\":[{\"name\":\"q\",\"value\":\"dataoukimvhqis\"},{\"name\":\"vologfxbvl\",\"value\":\"datacf\"}],\"\":{\"qnh\":\"datajnce\",\"i\":\"datagbm\",\"auohtn\":\"datade\"}},{\"type\":\"Activity\",\"name\":\"tahdtdceuhjxv\",\"description\":\"rx\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"rbgcprsd\",\"dependencyConditions\":[]},{\"activity\":\"swozpm\",\"dependencyConditions\":[]}],\"userProperties\":[{\"name\":\"nxwkfesursby\",\"value\":\"dataoavozqnnlmxitvmr\"},{\"name\":\"bkzchc\",\"value\":\"datauvskdvqyfubwxc\"}],\"\":{\"md\":\"datarvjpfojhv\"}}],\"parameters\":{\"suwghtgpgarh\":{\"type\":\"Int\",\"defaultValue\":\"datazhundfkpdxfvjdf\"},\"adp\":{\"type\":\"Int\",\"defaultValue\":\"datadedi\"}},\"variables\":{\"eakv\":{\"type\":\"String\",\"defaultValue\":\"datamwqsdzflexkfsgr\"},\"hfzriigte\":{\"type\":\"String\",\"defaultValue\":\"datakmnuivpbjcl\"}},\"concurrency\":203718836,\"annotations\":[\"datajqjoamzdsajn\",\"datatkqbvtdeouqixgtp\",\"datakbjev\"],\"runDimensions\":{\"chh\":\"datauwdvfaulbf\",\"phxhvbfekxbcbu\":\"datacobp\",\"md\":\"datajysukezqohth\",\"uypo\":\"dataaoypryu\"},\"folder\":{\"name\":\"dclajujs\"},\"policy\":{\"elapsedTimeMetric\":{\"duration\":\"datareyrgrgft\"}}},\"name\":\"hxddmaevcjtr\",\"type\":\"cnwqeixyjlfobj\",\"etag\":\"et\",\"\":{\"feolhs\":\"dataloduvcqowcg\",\"nsiynzdadku\":\"dataskivlzvxmqvlgcp\",\"xollcsdgmcj\":\"datawgtypnj\"},\"id\":\"te\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DataFactoryManager manager = DataFactoryManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<PipelineResource> response
            = manager.pipelines().listByFactory("mxidj", "ptruiegrauyphugw", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("te", response.iterator().next().id());
        Assertions.assertEquals("ipato", response.iterator().next().description());
        Assertions.assertEquals("r", response.iterator().next().activities().get(0).name());
        Assertions.assertEquals("pmcjrfj", response.iterator().next().activities().get(0).description());
        Assertions.assertEquals(ActivityState.INACTIVE, response.iterator().next().activities().get(0).state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED,
            response.iterator().next().activities().get(0).onInactiveMarkAs());
        Assertions.assertEquals("fptynhulefltu",
            response.iterator().next().activities().get(0).dependsOn().get(0).activity());
        Assertions.assertEquals("q", response.iterator().next().activities().get(0).userProperties().get(0).name());
        Assertions.assertEquals(ParameterType.INT, response.iterator().next().parameters().get("suwghtgpgarh").type());
        Assertions.assertEquals(VariableType.STRING, response.iterator().next().variables().get("eakv").type());
        Assertions.assertEquals(203718836, response.iterator().next().concurrency());
        Assertions.assertEquals("dclajujs", response.iterator().next().folder().name());
    }
}
