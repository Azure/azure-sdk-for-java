// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.datafactory.DataFactoryManager;
import com.azure.resourcemanager.datafactory.models.DataFlowDebugSessionInfo;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DataFlowDebugSessionsQueryByFactoryMockTests {
    @Test
    public void testQueryByFactory() throws Exception {
        String responseStr
            = "{\"value\":[{\"dataFlowName\":\"zqcymdj\",\"computeType\":\"ojykytpyirctdaoj\",\"coreCount\":733493660,\"nodeCount\":550438817,\"integrationRuntimeName\":\"ikqagmlhs\",\"sessionId\":\"pihenvhlpuobha\",\"startTime\":\"aowpm\",\"timeToLiveInMinutes\":701601830,\"lastActivityTime\":\"uziogboaimwxswfy\",\"\":{\"gtgc\":\"datacjhjrwn\",\"w\":\"datampjdrhxfg\"}}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DataFactoryManager manager = DataFactoryManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<DataFlowDebugSessionInfo> response = manager.dataFlowDebugSessions()
            .queryByFactory("lbjccjorovr", "dfgdvifo", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("zqcymdj", response.iterator().next().dataFlowName());
        Assertions.assertEquals("ojykytpyirctdaoj", response.iterator().next().computeType());
        Assertions.assertEquals(733493660, response.iterator().next().coreCount());
        Assertions.assertEquals(550438817, response.iterator().next().nodeCount());
        Assertions.assertEquals("ikqagmlhs", response.iterator().next().integrationRuntimeName());
        Assertions.assertEquals("pihenvhlpuobha", response.iterator().next().sessionId());
        Assertions.assertEquals("aowpm", response.iterator().next().startTime());
        Assertions.assertEquals(701601830, response.iterator().next().timeToLiveInMinutes());
        Assertions.assertEquals("uziogboaimwxswfy", response.iterator().next().lastActivityTime());
    }
}
