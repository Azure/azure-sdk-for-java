// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.CopyComputeScaleProperties;
import com.azure.resourcemanager.datafactory.models.DataFlowComputeType;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeComputeProperties;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeDataFlowProperties;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeDataFlowPropertiesCustomPropertiesItem;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeVNetProperties;
import com.azure.resourcemanager.datafactory.models.PipelineExternalComputeScaleProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class IntegrationRuntimeComputePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IntegrationRuntimeComputeProperties model = BinaryData.fromString(
            "{\"location\":\"vgcm\",\"nodeSize\":\"djlwwefevtwllq\",\"numberOfNodes\":2074211054,\"maxParallelExecutionsPerNode\":1209669623,\"dataFlowProperties\":{\"computeType\":\"MemoryOptimized\",\"coreCount\":1497350411,\"timeToLive\":1652665497,\"cleanup\":false,\"customProperties\":[{\"name\":\"hx\",\"value\":\"ckwbqwj\"},{\"name\":\"mmkwahrooy\",\"value\":\"obnvyue\"},{\"name\":\"coerohextigukfk\",\"value\":\"ycb\"}],\"\":{\"tqy\":\"databnpeenl\",\"jdsqephtoshqt\":\"datalfbsavqdv\",\"rcnxaeypyqoi\":\"dataarjwgu\"}},\"vNetProperties\":{\"vNetId\":\"asyddqbwscjwyy\",\"subnet\":\"miflrvfe\",\"publicIPs\":[\"tshwfrhhasabva\",\"znwwu\",\"kbpgci\",\"bwtpwbjlpfwuq\"],\"subnetId\":\"pdgitenyuksl\",\"\":{\"mmxlmxejwy\":\"datapnxghamrplanchqo\",\"psbeqieiux\":\"datajzbjwvtuekbbypqs\"}},\"copyComputeScaleProperties\":{\"dataIntegrationUnit\":105279113,\"timeToLive\":2051591206,\"\":{\"pcpihlzyxvta\":\"datanjjhrgkj\",\"oidneku\":\"datafja\",\"naqve\":\"datadgcpz\",\"xfbagegjtjltcki\":\"datagnpuelrnanbrpkoc\"}},\"pipelineExternalComputeScaleProperties\":{\"timeToLive\":605940544,\"numberOfPipelineNodes\":1567155782,\"numberOfExternalNodes\":2066455052,\"\":{\"invzsod\":\"datamdboefnhxhahuq\",\"sgkq\":\"dataokrqd\",\"pcjxh\":\"datajkot\"}},\"\":{\"p\":\"datalocjhz\",\"xbofpr\":\"databrbm\",\"wwsfvtgh\":\"datamivapesbfzllej\"}}")
            .toObject(IntegrationRuntimeComputeProperties.class);
        Assertions.assertEquals("vgcm", model.location());
        Assertions.assertEquals("djlwwefevtwllq", model.nodeSize());
        Assertions.assertEquals(2074211054, model.numberOfNodes());
        Assertions.assertEquals(1209669623, model.maxParallelExecutionsPerNode());
        Assertions.assertEquals(DataFlowComputeType.MEMORY_OPTIMIZED, model.dataFlowProperties().computeType());
        Assertions.assertEquals(1497350411, model.dataFlowProperties().coreCount());
        Assertions.assertEquals(1652665497, model.dataFlowProperties().timeToLive());
        Assertions.assertEquals(false, model.dataFlowProperties().cleanup());
        Assertions.assertEquals("hx", model.dataFlowProperties().customProperties().get(0).name());
        Assertions.assertEquals("ckwbqwj", model.dataFlowProperties().customProperties().get(0).value());
        Assertions.assertEquals("asyddqbwscjwyy", model.vNetProperties().vNetId());
        Assertions.assertEquals("miflrvfe", model.vNetProperties().subnet());
        Assertions.assertEquals("tshwfrhhasabva", model.vNetProperties().publicIPs().get(0));
        Assertions.assertEquals("pdgitenyuksl", model.vNetProperties().subnetId());
        Assertions.assertEquals(105279113, model.copyComputeScaleProperties().dataIntegrationUnit());
        Assertions.assertEquals(2051591206, model.copyComputeScaleProperties().timeToLive());
        Assertions.assertEquals(605940544, model.pipelineExternalComputeScaleProperties().timeToLive());
        Assertions.assertEquals(1567155782, model.pipelineExternalComputeScaleProperties().numberOfPipelineNodes());
        Assertions.assertEquals(2066455052, model.pipelineExternalComputeScaleProperties().numberOfExternalNodes());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IntegrationRuntimeComputeProperties model = new IntegrationRuntimeComputeProperties().withLocation("vgcm")
            .withNodeSize("djlwwefevtwllq")
            .withNumberOfNodes(2074211054)
            .withMaxParallelExecutionsPerNode(1209669623)
            .withDataFlowProperties(new IntegrationRuntimeDataFlowProperties()
                .withComputeType(DataFlowComputeType.MEMORY_OPTIMIZED)
                .withCoreCount(1497350411)
                .withTimeToLive(1652665497)
                .withCleanup(false)
                .withCustomProperties(Arrays.asList(
                    new IntegrationRuntimeDataFlowPropertiesCustomPropertiesItem().withName("hx").withValue("ckwbqwj"),
                    new IntegrationRuntimeDataFlowPropertiesCustomPropertiesItem().withName("mmkwahrooy")
                        .withValue("obnvyue"),
                    new IntegrationRuntimeDataFlowPropertiesCustomPropertiesItem().withName("coerohextigukfk")
                        .withValue("ycb")))
                .withAdditionalProperties(mapOf()))
            .withVNetProperties(new IntegrationRuntimeVNetProperties().withVNetId("asyddqbwscjwyy")
                .withSubnet("miflrvfe")
                .withPublicIPs(Arrays.asList("tshwfrhhasabva", "znwwu", "kbpgci", "bwtpwbjlpfwuq"))
                .withSubnetId("pdgitenyuksl")
                .withAdditionalProperties(mapOf()))
            .withCopyComputeScaleProperties(new CopyComputeScaleProperties().withDataIntegrationUnit(105279113)
                .withTimeToLive(2051591206)
                .withAdditionalProperties(mapOf()))
            .withPipelineExternalComputeScaleProperties(
                new PipelineExternalComputeScaleProperties().withTimeToLive(605940544)
                    .withNumberOfPipelineNodes(1567155782)
                    .withNumberOfExternalNodes(2066455052)
                    .withAdditionalProperties(mapOf()))
            .withAdditionalProperties(mapOf());
        model = BinaryData.fromObject(model).toObject(IntegrationRuntimeComputeProperties.class);
        Assertions.assertEquals("vgcm", model.location());
        Assertions.assertEquals("djlwwefevtwllq", model.nodeSize());
        Assertions.assertEquals(2074211054, model.numberOfNodes());
        Assertions.assertEquals(1209669623, model.maxParallelExecutionsPerNode());
        Assertions.assertEquals(DataFlowComputeType.MEMORY_OPTIMIZED, model.dataFlowProperties().computeType());
        Assertions.assertEquals(1497350411, model.dataFlowProperties().coreCount());
        Assertions.assertEquals(1652665497, model.dataFlowProperties().timeToLive());
        Assertions.assertEquals(false, model.dataFlowProperties().cleanup());
        Assertions.assertEquals("hx", model.dataFlowProperties().customProperties().get(0).name());
        Assertions.assertEquals("ckwbqwj", model.dataFlowProperties().customProperties().get(0).value());
        Assertions.assertEquals("asyddqbwscjwyy", model.vNetProperties().vNetId());
        Assertions.assertEquals("miflrvfe", model.vNetProperties().subnet());
        Assertions.assertEquals("tshwfrhhasabva", model.vNetProperties().publicIPs().get(0));
        Assertions.assertEquals("pdgitenyuksl", model.vNetProperties().subnetId());
        Assertions.assertEquals(105279113, model.copyComputeScaleProperties().dataIntegrationUnit());
        Assertions.assertEquals(2051591206, model.copyComputeScaleProperties().timeToLive());
        Assertions.assertEquals(605940544, model.pipelineExternalComputeScaleProperties().timeToLive());
        Assertions.assertEquals(1567155782, model.pipelineExternalComputeScaleProperties().numberOfPipelineNodes());
        Assertions.assertEquals(2066455052, model.pipelineExternalComputeScaleProperties().numberOfExternalNodes());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
