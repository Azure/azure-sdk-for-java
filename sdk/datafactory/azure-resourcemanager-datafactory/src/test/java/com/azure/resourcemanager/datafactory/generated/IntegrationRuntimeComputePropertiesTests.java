// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.CopyComputeScaleProperties;
import com.azure.resourcemanager.datafactory.models.DataFlowComputeType;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeComputeProperties;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeDataFlowProperties;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeDataFlowPropertiesCustomPropertiesItem;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeVNetProperties;
import com.azure.resourcemanager.datafactory.models.PipelineExternalComputeScaleProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class IntegrationRuntimeComputePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IntegrationRuntimeComputeProperties model = BinaryData.fromString(
            "{\"location\":\"kbxrgr\",\"nodeSize\":\"kyqguauuihkybg\",\"numberOfNodes\":736167404,\"maxParallelExecutionsPerNode\":887211941,\"dataFlowProperties\":{\"computeType\":\"General\",\"coreCount\":994306410,\"timeToLive\":1672483733,\"cleanup\":true,\"customProperties\":[{\"name\":\"pfivypmwdza\",\"value\":\"cr\"}],\"\":{\"xnpdggllyduyu\":\"datapoqimy\",\"xvzvwlxd\":\"datadmzu\",\"eurd\":\"datanst\",\"atsiznymwz\":\"dataxklr\"}},\"vNetProperties\":{\"vNetId\":\"kihqhnfubevwadx\",\"subnet\":\"zxevltfebq\",\"publicIPs\":[\"akl\",\"ak\"],\"subnetId\":\"tifmftwr\",\"\":{\"qneaqkgttbarg\":\"datariipzgfofuadc\",\"jjpfyxhsppvjs\":\"dataeynqlsnrgaxoyv\",\"omuogeqeapaseq\":\"datauouoqtenq\",\"vtoiqofzttqg\":\"datappypfreuwvzhnd\"}},\"copyComputeScaleProperties\":{\"dataIntegrationUnit\":84712339,\"timeToLive\":302519645,\"\":{\"tp\":\"datauhell\",\"sgqbmolxeomebzv\":\"datavpiv\",\"acgihnalpc\":\"datavxxfsfo\"}},\"pipelineExternalComputeScaleProperties\":{\"timeToLive\":709838487,\"numberOfPipelineNodes\":189627182,\"numberOfExternalNodes\":2106609679,\"\":{\"ivzikatywedbpi\":\"datab\"}},\"\":{\"dw\":\"datapauzbbhxncs\"}}")
            .toObject(IntegrationRuntimeComputeProperties.class);
        Assertions.assertEquals("kbxrgr", model.location());
        Assertions.assertEquals("kyqguauuihkybg", model.nodeSize());
        Assertions.assertEquals(736167404, model.numberOfNodes());
        Assertions.assertEquals(887211941, model.maxParallelExecutionsPerNode());
        Assertions.assertEquals(DataFlowComputeType.GENERAL, model.dataFlowProperties().computeType());
        Assertions.assertEquals(994306410, model.dataFlowProperties().coreCount());
        Assertions.assertEquals(1672483733, model.dataFlowProperties().timeToLive());
        Assertions.assertEquals(true, model.dataFlowProperties().cleanup());
        Assertions.assertEquals("pfivypmwdza", model.dataFlowProperties().customProperties().get(0).name());
        Assertions.assertEquals("cr", model.dataFlowProperties().customProperties().get(0).value());
        Assertions.assertEquals("kihqhnfubevwadx", model.vNetProperties().vNetId());
        Assertions.assertEquals("zxevltfebq", model.vNetProperties().subnet());
        Assertions.assertEquals("akl", model.vNetProperties().publicIPs().get(0));
        Assertions.assertEquals("tifmftwr", model.vNetProperties().subnetId());
        Assertions.assertEquals(84712339, model.copyComputeScaleProperties().dataIntegrationUnit());
        Assertions.assertEquals(302519645, model.copyComputeScaleProperties().timeToLive());
        Assertions.assertEquals(709838487, model.pipelineExternalComputeScaleProperties().timeToLive());
        Assertions.assertEquals(189627182, model.pipelineExternalComputeScaleProperties().numberOfPipelineNodes());
        Assertions.assertEquals(2106609679, model.pipelineExternalComputeScaleProperties().numberOfExternalNodes());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IntegrationRuntimeComputeProperties model = new IntegrationRuntimeComputeProperties().withLocation("kbxrgr")
            .withNodeSize("kyqguauuihkybg")
            .withNumberOfNodes(736167404)
            .withMaxParallelExecutionsPerNode(887211941)
            .withDataFlowProperties(new IntegrationRuntimeDataFlowProperties()
                .withComputeType(DataFlowComputeType.GENERAL)
                .withCoreCount(994306410)
                .withTimeToLive(1672483733)
                .withCleanup(true)
                .withCustomProperties(
                    Arrays.asList(new IntegrationRuntimeDataFlowPropertiesCustomPropertiesItem().withName("pfivypmwdza")
                        .withValue("cr")))
                .withAdditionalProperties(mapOf()))
            .withVNetProperties(new IntegrationRuntimeVNetProperties().withVNetId("kihqhnfubevwadx")
                .withSubnet("zxevltfebq")
                .withPublicIPs(Arrays.asList("akl", "ak"))
                .withSubnetId("tifmftwr")
                .withAdditionalProperties(mapOf()))
            .withCopyComputeScaleProperties(new CopyComputeScaleProperties().withDataIntegrationUnit(84712339)
                .withTimeToLive(302519645)
                .withAdditionalProperties(mapOf()))
            .withPipelineExternalComputeScaleProperties(
                new PipelineExternalComputeScaleProperties().withTimeToLive(709838487)
                    .withNumberOfPipelineNodes(189627182)
                    .withNumberOfExternalNodes(2106609679)
                    .withAdditionalProperties(mapOf()))
            .withAdditionalProperties(mapOf());
        model = BinaryData.fromObject(model).toObject(IntegrationRuntimeComputeProperties.class);
        Assertions.assertEquals("kbxrgr", model.location());
        Assertions.assertEquals("kyqguauuihkybg", model.nodeSize());
        Assertions.assertEquals(736167404, model.numberOfNodes());
        Assertions.assertEquals(887211941, model.maxParallelExecutionsPerNode());
        Assertions.assertEquals(DataFlowComputeType.GENERAL, model.dataFlowProperties().computeType());
        Assertions.assertEquals(994306410, model.dataFlowProperties().coreCount());
        Assertions.assertEquals(1672483733, model.dataFlowProperties().timeToLive());
        Assertions.assertEquals(true, model.dataFlowProperties().cleanup());
        Assertions.assertEquals("pfivypmwdza", model.dataFlowProperties().customProperties().get(0).name());
        Assertions.assertEquals("cr", model.dataFlowProperties().customProperties().get(0).value());
        Assertions.assertEquals("kihqhnfubevwadx", model.vNetProperties().vNetId());
        Assertions.assertEquals("zxevltfebq", model.vNetProperties().subnet());
        Assertions.assertEquals("akl", model.vNetProperties().publicIPs().get(0));
        Assertions.assertEquals("tifmftwr", model.vNetProperties().subnetId());
        Assertions.assertEquals(84712339, model.copyComputeScaleProperties().dataIntegrationUnit());
        Assertions.assertEquals(302519645, model.copyComputeScaleProperties().timeToLive());
        Assertions.assertEquals(709838487, model.pipelineExternalComputeScaleProperties().timeToLive());
        Assertions.assertEquals(189627182, model.pipelineExternalComputeScaleProperties().numberOfPipelineNodes());
        Assertions.assertEquals(2106609679, model.pipelineExternalComputeScaleProperties().numberOfExternalNodes());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
