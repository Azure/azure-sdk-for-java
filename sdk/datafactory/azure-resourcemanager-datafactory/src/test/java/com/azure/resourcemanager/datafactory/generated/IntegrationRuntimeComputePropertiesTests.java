// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.CopyComputeScaleProperties;
import com.azure.resourcemanager.datafactory.models.DataFlowComputeType;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeComputeProperties;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeDataFlowProperties;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeDataFlowPropertiesCustomPropertiesItem;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeVNetProperties;
import com.azure.resourcemanager.datafactory.models.PipelineExternalComputeScaleProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class IntegrationRuntimeComputePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IntegrationRuntimeComputeProperties model = BinaryData.fromString(
            "{\"location\":\"c\",\"nodeSize\":\"xevlt\",\"numberOfNodes\":1736990485,\"maxParallelExecutionsPerNode\":1753770104,\"dataFlowProperties\":{\"computeType\":\"General\",\"coreCount\":2045958196,\"timeToLive\":492843137,\"cleanup\":true,\"customProperties\":[{\"name\":\"fmftwr\",\"value\":\"mriipzgfofuad\"},{\"name\":\"qneaqkgttbarg\",\"value\":\"ynqlsnr\"}],\"\":{\"yxhsppv\":\"dataoyvgjjp\",\"geqeapaseq\":\"datasduouoqtenqsomu\"}},\"vNetProperties\":{\"vNetId\":\"ypfreuwvzhn\",\"subnet\":\"vtoiqofzttqg\",\"publicIPs\":[\"w\",\"oxzuhellit\",\"qv\",\"ivrsgqbmolxeom\"],\"subnetId\":\"zvtvxxfs\",\"\":{\"edybkbgdwbmi\":\"dataacgihnalpc\",\"i\":\"datazikatywedb\"}},\"copyComputeScaleProperties\":{\"dataIntegrationUnit\":785813210,\"timeToLive\":95344421,\"\":{\"pave\":\"databhxncszd\"}},\"pipelineExternalComputeScaleProperties\":{\"timeToLive\":862321993,\"numberOfPipelineNodes\":922478953,\"numberOfExternalNodes\":1537232280,\"\":{\"erffhgvcym\":\"datadltniuii\",\"eudbobmol\":\"datadoeilhggaj\",\"ua\":\"datairchhwlzihvcc\"}},\"\":{\"toiwfsz\":\"dataipdjxyotgvraxh\",\"etsluqfgk\":\"datarlkosjwr\",\"imioixviobuwbnge\":\"datad\",\"gqamhbmggnqxnex\":\"datawhdq\"}}")
            .toObject(IntegrationRuntimeComputeProperties.class);
        Assertions.assertEquals("c", model.location());
        Assertions.assertEquals("xevlt", model.nodeSize());
        Assertions.assertEquals(1736990485, model.numberOfNodes());
        Assertions.assertEquals(1753770104, model.maxParallelExecutionsPerNode());
        Assertions.assertEquals(DataFlowComputeType.GENERAL, model.dataFlowProperties().computeType());
        Assertions.assertEquals(2045958196, model.dataFlowProperties().coreCount());
        Assertions.assertEquals(492843137, model.dataFlowProperties().timeToLive());
        Assertions.assertEquals(true, model.dataFlowProperties().cleanup());
        Assertions.assertEquals("fmftwr", model.dataFlowProperties().customProperties().get(0).name());
        Assertions.assertEquals("mriipzgfofuad", model.dataFlowProperties().customProperties().get(0).value());
        Assertions.assertEquals("ypfreuwvzhn", model.vNetProperties().vNetId());
        Assertions.assertEquals("vtoiqofzttqg", model.vNetProperties().subnet());
        Assertions.assertEquals("w", model.vNetProperties().publicIPs().get(0));
        Assertions.assertEquals("zvtvxxfs", model.vNetProperties().subnetId());
        Assertions.assertEquals(785813210, model.copyComputeScaleProperties().dataIntegrationUnit());
        Assertions.assertEquals(95344421, model.copyComputeScaleProperties().timeToLive());
        Assertions.assertEquals(862321993, model.pipelineExternalComputeScaleProperties().timeToLive());
        Assertions.assertEquals(922478953, model.pipelineExternalComputeScaleProperties().numberOfPipelineNodes());
        Assertions.assertEquals(1537232280, model.pipelineExternalComputeScaleProperties().numberOfExternalNodes());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IntegrationRuntimeComputeProperties model = new IntegrationRuntimeComputeProperties().withLocation("c")
            .withNodeSize("xevlt")
            .withNumberOfNodes(1736990485)
            .withMaxParallelExecutionsPerNode(1753770104)
            .withDataFlowProperties(
                new IntegrationRuntimeDataFlowProperties().withComputeType(DataFlowComputeType.GENERAL)
                    .withCoreCount(2045958196)
                    .withTimeToLive(492843137)
                    .withCleanup(true)
                    .withCustomProperties(Arrays.asList(
                        new IntegrationRuntimeDataFlowPropertiesCustomPropertiesItem().withName("fmftwr")
                            .withValue("mriipzgfofuad"),
                        new IntegrationRuntimeDataFlowPropertiesCustomPropertiesItem().withName("qneaqkgttbarg")
                            .withValue("ynqlsnr")))
                    .withAdditionalProperties(mapOf()))
            .withVNetProperties(new IntegrationRuntimeVNetProperties().withVNetId("ypfreuwvzhn")
                .withSubnet("vtoiqofzttqg")
                .withPublicIPs(Arrays.asList("w", "oxzuhellit", "qv", "ivrsgqbmolxeom"))
                .withSubnetId("zvtvxxfs")
                .withAdditionalProperties(mapOf()))
            .withCopyComputeScaleProperties(new CopyComputeScaleProperties().withDataIntegrationUnit(785813210)
                .withTimeToLive(95344421)
                .withAdditionalProperties(mapOf()))
            .withPipelineExternalComputeScaleProperties(
                new PipelineExternalComputeScaleProperties().withTimeToLive(862321993)
                    .withNumberOfPipelineNodes(922478953)
                    .withNumberOfExternalNodes(1537232280)
                    .withAdditionalProperties(mapOf()))
            .withAdditionalProperties(mapOf());
        model = BinaryData.fromObject(model).toObject(IntegrationRuntimeComputeProperties.class);
        Assertions.assertEquals("c", model.location());
        Assertions.assertEquals("xevlt", model.nodeSize());
        Assertions.assertEquals(1736990485, model.numberOfNodes());
        Assertions.assertEquals(1753770104, model.maxParallelExecutionsPerNode());
        Assertions.assertEquals(DataFlowComputeType.GENERAL, model.dataFlowProperties().computeType());
        Assertions.assertEquals(2045958196, model.dataFlowProperties().coreCount());
        Assertions.assertEquals(492843137, model.dataFlowProperties().timeToLive());
        Assertions.assertEquals(true, model.dataFlowProperties().cleanup());
        Assertions.assertEquals("fmftwr", model.dataFlowProperties().customProperties().get(0).name());
        Assertions.assertEquals("mriipzgfofuad", model.dataFlowProperties().customProperties().get(0).value());
        Assertions.assertEquals("ypfreuwvzhn", model.vNetProperties().vNetId());
        Assertions.assertEquals("vtoiqofzttqg", model.vNetProperties().subnet());
        Assertions.assertEquals("w", model.vNetProperties().publicIPs().get(0));
        Assertions.assertEquals("zvtvxxfs", model.vNetProperties().subnetId());
        Assertions.assertEquals(785813210, model.copyComputeScaleProperties().dataIntegrationUnit());
        Assertions.assertEquals(95344421, model.copyComputeScaleProperties().timeToLive());
        Assertions.assertEquals(862321993, model.pipelineExternalComputeScaleProperties().timeToLive());
        Assertions.assertEquals(922478953, model.pipelineExternalComputeScaleProperties().numberOfPipelineNodes());
        Assertions.assertEquals(1537232280, model.pipelineExternalComputeScaleProperties().numberOfExternalNodes());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
