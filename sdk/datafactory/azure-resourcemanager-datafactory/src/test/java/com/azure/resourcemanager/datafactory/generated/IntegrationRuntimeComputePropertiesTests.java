// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.CopyComputeScaleProperties;
import com.azure.resourcemanager.datafactory.models.DataFlowComputeType;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeComputeProperties;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeDataFlowProperties;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeDataFlowPropertiesCustomPropertiesItem;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeVNetProperties;
import com.azure.resourcemanager.datafactory.models.PipelineExternalComputeScaleProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class IntegrationRuntimeComputePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IntegrationRuntimeComputeProperties model = BinaryData.fromString(
            "{\"location\":\"szk\",\"nodeSize\":\"bhhpvvaeghtmqonx\",\"numberOfNodes\":388235383,\"maxParallelExecutionsPerNode\":1765220864,\"dataFlowProperties\":{\"computeType\":\"ComputeOptimized\",\"coreCount\":526856500,\"timeToLive\":409228969,\"cleanup\":true,\"customProperties\":[{\"name\":\"brnbox\",\"value\":\"hkmqf\"},{\"name\":\"ksksmqmwo\",\"value\":\"mhmifhfutjyx\"}],\"\":{\"mdqr\":\"datagtguqaemoygcaxj\"}},\"vNetProperties\":{\"vNetId\":\"icxtcllq\",\"subnet\":\"sydksvjfg\",\"publicIPs\":[\"pivjkh\",\"oscoljjhcsgzooef\"],\"subnetId\":\"dttbqkaqdvwoj\",\"\":{\"hrqxrqghotingzi\":\"dataf\",\"elvyhvvpuqy\":\"datakgygawyhpwmdkyfg\",\"cfwoolkugzowg\":\"datapubbkhci\"}},\"copyComputeScaleProperties\":{\"dataIntegrationUnit\":480875321,\"timeToLive\":285819339,\"\":{\"pqscu\":\"datapgblnagjnpahz\",\"gmndwohoeashu\":\"dataileqjzrijebmuio\",\"mzwynsmmphvkyez\":\"datafvbj\"}},\"pipelineExternalComputeScaleProperties\":{\"timeToLive\":1245337089,\"numberOfPipelineNodes\":1528577821,\"numberOfExternalNodes\":1451105056,\"\":{\"lqreof\":\"datawqd\"}},\"\":{\"pyaymh\":\"datarz\",\"qm\":\"datalnmwaxsymnrt\",\"hhpkvyqpvzxxzndw\":\"datamavyotpcvp\",\"r\":\"dataomi\"}}")
            .toObject(IntegrationRuntimeComputeProperties.class);
        Assertions.assertEquals("szk", model.location());
        Assertions.assertEquals("bhhpvvaeghtmqonx", model.nodeSize());
        Assertions.assertEquals(388235383, model.numberOfNodes());
        Assertions.assertEquals(1765220864, model.maxParallelExecutionsPerNode());
        Assertions.assertEquals(DataFlowComputeType.COMPUTE_OPTIMIZED, model.dataFlowProperties().computeType());
        Assertions.assertEquals(526856500, model.dataFlowProperties().coreCount());
        Assertions.assertEquals(409228969, model.dataFlowProperties().timeToLive());
        Assertions.assertEquals(true, model.dataFlowProperties().cleanup());
        Assertions.assertEquals("brnbox", model.dataFlowProperties().customProperties().get(0).name());
        Assertions.assertEquals("hkmqf", model.dataFlowProperties().customProperties().get(0).value());
        Assertions.assertEquals("icxtcllq", model.vNetProperties().vNetId());
        Assertions.assertEquals("sydksvjfg", model.vNetProperties().subnet());
        Assertions.assertEquals("pivjkh", model.vNetProperties().publicIPs().get(0));
        Assertions.assertEquals("dttbqkaqdvwoj", model.vNetProperties().subnetId());
        Assertions.assertEquals(480875321, model.copyComputeScaleProperties().dataIntegrationUnit());
        Assertions.assertEquals(285819339, model.copyComputeScaleProperties().timeToLive());
        Assertions.assertEquals(1245337089, model.pipelineExternalComputeScaleProperties().timeToLive());
        Assertions.assertEquals(1528577821, model.pipelineExternalComputeScaleProperties().numberOfPipelineNodes());
        Assertions.assertEquals(1451105056, model.pipelineExternalComputeScaleProperties().numberOfExternalNodes());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IntegrationRuntimeComputeProperties model = new IntegrationRuntimeComputeProperties().withLocation("szk")
            .withNodeSize("bhhpvvaeghtmqonx").withNumberOfNodes(388235383).withMaxParallelExecutionsPerNode(1765220864)
            .withDataFlowProperties(
                new IntegrationRuntimeDataFlowProperties().withComputeType(DataFlowComputeType.COMPUTE_OPTIMIZED)
                    .withCoreCount(526856500).withTimeToLive(409228969).withCleanup(true)
                    .withCustomProperties(Arrays.asList(
                        new IntegrationRuntimeDataFlowPropertiesCustomPropertiesItem().withName("brnbox")
                            .withValue("hkmqf"),
                        new IntegrationRuntimeDataFlowPropertiesCustomPropertiesItem().withName("ksksmqmwo")
                            .withValue("mhmifhfutjyx")))
                    .withAdditionalProperties(mapOf()))
            .withVNetProperties(new IntegrationRuntimeVNetProperties().withVNetId("icxtcllq").withSubnet("sydksvjfg")
                .withPublicIPs(Arrays.asList("pivjkh", "oscoljjhcsgzooef")).withSubnetId("dttbqkaqdvwoj")
                .withAdditionalProperties(mapOf()))
            .withCopyComputeScaleProperties(new CopyComputeScaleProperties().withDataIntegrationUnit(480875321)
                .withTimeToLive(285819339).withAdditionalProperties(mapOf()))
            .withPipelineExternalComputeScaleProperties(new PipelineExternalComputeScaleProperties()
                .withTimeToLive(1245337089).withNumberOfPipelineNodes(1528577821).withNumberOfExternalNodes(1451105056)
                .withAdditionalProperties(mapOf()))
            .withAdditionalProperties(mapOf());
        model = BinaryData.fromObject(model).toObject(IntegrationRuntimeComputeProperties.class);
        Assertions.assertEquals("szk", model.location());
        Assertions.assertEquals("bhhpvvaeghtmqonx", model.nodeSize());
        Assertions.assertEquals(388235383, model.numberOfNodes());
        Assertions.assertEquals(1765220864, model.maxParallelExecutionsPerNode());
        Assertions.assertEquals(DataFlowComputeType.COMPUTE_OPTIMIZED, model.dataFlowProperties().computeType());
        Assertions.assertEquals(526856500, model.dataFlowProperties().coreCount());
        Assertions.assertEquals(409228969, model.dataFlowProperties().timeToLive());
        Assertions.assertEquals(true, model.dataFlowProperties().cleanup());
        Assertions.assertEquals("brnbox", model.dataFlowProperties().customProperties().get(0).name());
        Assertions.assertEquals("hkmqf", model.dataFlowProperties().customProperties().get(0).value());
        Assertions.assertEquals("icxtcllq", model.vNetProperties().vNetId());
        Assertions.assertEquals("sydksvjfg", model.vNetProperties().subnet());
        Assertions.assertEquals("pivjkh", model.vNetProperties().publicIPs().get(0));
        Assertions.assertEquals("dttbqkaqdvwoj", model.vNetProperties().subnetId());
        Assertions.assertEquals(480875321, model.copyComputeScaleProperties().dataIntegrationUnit());
        Assertions.assertEquals(285819339, model.copyComputeScaleProperties().timeToLive());
        Assertions.assertEquals(1245337089, model.pipelineExternalComputeScaleProperties().timeToLive());
        Assertions.assertEquals(1528577821, model.pipelineExternalComputeScaleProperties().numberOfPipelineNodes());
        Assertions.assertEquals(1451105056, model.pipelineExternalComputeScaleProperties().numberOfExternalNodes());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
