// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.CopyComputeScaleProperties;
import com.azure.resourcemanager.datafactory.models.DataFlowComputeType;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeComputeProperties;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeDataFlowProperties;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeDataFlowPropertiesCustomPropertiesItem;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeVNetProperties;
import com.azure.resourcemanager.datafactory.models.PipelineExternalComputeScaleProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class IntegrationRuntimeComputePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IntegrationRuntimeComputeProperties model = BinaryData.fromString(
            "{\"location\":\"wojvxv\",\"nodeSize\":\"hrqxrqghotingzi\",\"numberOfNodes\":896793765,\"maxParallelExecutionsPerNode\":117425644,\"dataFlowProperties\":{\"computeType\":\"MemoryOptimized\",\"coreCount\":199030014,\"timeToLive\":1937656001,\"cleanup\":false,\"customProperties\":[{\"name\":\"yelvy\",\"value\":\"vpuqyrp\"},{\"name\":\"bkhcidcfw\",\"value\":\"lkugzowgmmixfzau\"},{\"name\":\"blnagjnpahzhpqsc\",\"value\":\"ileqjzrijebmuio\"},{\"name\":\"mndwohoeashuxfvb\",\"value\":\"mzwynsmmphvkyez\"}],\"\":{\"jwq\":\"datayuoyj\",\"yaymhx\":\"dataslqreofzrkrzt\",\"vyotpcvpahhpk\":\"datanmwaxsymnrtvqmim\",\"dwtominru\":\"datayqpvzxxz\"}},\"vNetProperties\":{\"vNetId\":\"auygasfmhbxvew\",\"subnet\":\"natxvuzccaliry\",\"publicIPs\":[\"caq\",\"johlcbnrvxyyhh\"],\"subnetId\":\"sztqfrpan\",\"\":{\"imkjzcx\":\"dataiwduukaa\",\"f\":\"datasj\",\"xijovuyxuupzeadd\":\"datavksijrjgyind\",\"zy\":\"datatopdtphvjgv\"}},\"copyComputeScaleProperties\":{\"dataIntegrationUnit\":1732999100,\"timeToLive\":1693962581,\"\":{\"nyzpu\":\"dataxzxbth\",\"koabfcvefbw\":\"datanrmd\"}},\"pipelineExternalComputeScaleProperties\":{\"timeToLive\":1354669108,\"numberOfPipelineNodes\":1621925601,\"numberOfExternalNodes\":66962308,\"\":{\"grz\":\"datasmryuyutkbx\",\"yncyzjnd\":\"datakyqguauuihkybg\"}},\"\":{\"vypmwdz\":\"datamxiurpf\",\"qimyhxnpdggllyd\":\"datajpcroxpp\",\"jnstz\":\"datayufdmzucxvzvwlx\",\"oxklrzats\":\"dataur\"}}")
            .toObject(IntegrationRuntimeComputeProperties.class);
        Assertions.assertEquals("wojvxv", model.location());
        Assertions.assertEquals("hrqxrqghotingzi", model.nodeSize());
        Assertions.assertEquals(896793765, model.numberOfNodes());
        Assertions.assertEquals(117425644, model.maxParallelExecutionsPerNode());
        Assertions.assertEquals(DataFlowComputeType.MEMORY_OPTIMIZED, model.dataFlowProperties().computeType());
        Assertions.assertEquals(199030014, model.dataFlowProperties().coreCount());
        Assertions.assertEquals(1937656001, model.dataFlowProperties().timeToLive());
        Assertions.assertEquals(false, model.dataFlowProperties().cleanup());
        Assertions.assertEquals("yelvy", model.dataFlowProperties().customProperties().get(0).name());
        Assertions.assertEquals("vpuqyrp", model.dataFlowProperties().customProperties().get(0).value());
        Assertions.assertEquals("auygasfmhbxvew", model.vNetProperties().vNetId());
        Assertions.assertEquals("natxvuzccaliry", model.vNetProperties().subnet());
        Assertions.assertEquals("caq", model.vNetProperties().publicIPs().get(0));
        Assertions.assertEquals("sztqfrpan", model.vNetProperties().subnetId());
        Assertions.assertEquals(1732999100, model.copyComputeScaleProperties().dataIntegrationUnit());
        Assertions.assertEquals(1693962581, model.copyComputeScaleProperties().timeToLive());
        Assertions.assertEquals(1354669108, model.pipelineExternalComputeScaleProperties().timeToLive());
        Assertions.assertEquals(1621925601, model.pipelineExternalComputeScaleProperties().numberOfPipelineNodes());
        Assertions.assertEquals(66962308, model.pipelineExternalComputeScaleProperties().numberOfExternalNodes());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IntegrationRuntimeComputeProperties model = new IntegrationRuntimeComputeProperties().withLocation("wojvxv")
            .withNodeSize("hrqxrqghotingzi").withNumberOfNodes(896793765).withMaxParallelExecutionsPerNode(117425644)
            .withDataFlowProperties(
                new IntegrationRuntimeDataFlowProperties().withComputeType(DataFlowComputeType.MEMORY_OPTIMIZED)
                    .withCoreCount(199030014).withTimeToLive(1937656001).withCleanup(false)
                    .withCustomProperties(Arrays.asList(
                        new IntegrationRuntimeDataFlowPropertiesCustomPropertiesItem().withName("yelvy")
                            .withValue("vpuqyrp"),
                        new IntegrationRuntimeDataFlowPropertiesCustomPropertiesItem().withName("bkhcidcfw")
                            .withValue("lkugzowgmmixfzau"),
                        new IntegrationRuntimeDataFlowPropertiesCustomPropertiesItem().withName("blnagjnpahzhpqsc")
                            .withValue("ileqjzrijebmuio"),
                        new IntegrationRuntimeDataFlowPropertiesCustomPropertiesItem().withName("mndwohoeashuxfvb")
                            .withValue("mzwynsmmphvkyez")))
                    .withAdditionalProperties(mapOf()))
            .withVNetProperties(new IntegrationRuntimeVNetProperties().withVNetId("auygasfmhbxvew")
                .withSubnet("natxvuzccaliry").withPublicIPs(Arrays.asList("caq", "johlcbnrvxyyhh"))
                .withSubnetId("sztqfrpan").withAdditionalProperties(mapOf()))
            .withCopyComputeScaleProperties(new CopyComputeScaleProperties().withDataIntegrationUnit(1732999100)
                .withTimeToLive(1693962581).withAdditionalProperties(mapOf()))
            .withPipelineExternalComputeScaleProperties(new PipelineExternalComputeScaleProperties()
                .withTimeToLive(1354669108).withNumberOfPipelineNodes(1621925601).withNumberOfExternalNodes(66962308)
                .withAdditionalProperties(mapOf()))
            .withAdditionalProperties(mapOf());
        model = BinaryData.fromObject(model).toObject(IntegrationRuntimeComputeProperties.class);
        Assertions.assertEquals("wojvxv", model.location());
        Assertions.assertEquals("hrqxrqghotingzi", model.nodeSize());
        Assertions.assertEquals(896793765, model.numberOfNodes());
        Assertions.assertEquals(117425644, model.maxParallelExecutionsPerNode());
        Assertions.assertEquals(DataFlowComputeType.MEMORY_OPTIMIZED, model.dataFlowProperties().computeType());
        Assertions.assertEquals(199030014, model.dataFlowProperties().coreCount());
        Assertions.assertEquals(1937656001, model.dataFlowProperties().timeToLive());
        Assertions.assertEquals(false, model.dataFlowProperties().cleanup());
        Assertions.assertEquals("yelvy", model.dataFlowProperties().customProperties().get(0).name());
        Assertions.assertEquals("vpuqyrp", model.dataFlowProperties().customProperties().get(0).value());
        Assertions.assertEquals("auygasfmhbxvew", model.vNetProperties().vNetId());
        Assertions.assertEquals("natxvuzccaliry", model.vNetProperties().subnet());
        Assertions.assertEquals("caq", model.vNetProperties().publicIPs().get(0));
        Assertions.assertEquals("sztqfrpan", model.vNetProperties().subnetId());
        Assertions.assertEquals(1732999100, model.copyComputeScaleProperties().dataIntegrationUnit());
        Assertions.assertEquals(1693962581, model.copyComputeScaleProperties().timeToLive());
        Assertions.assertEquals(1354669108, model.pipelineExternalComputeScaleProperties().timeToLive());
        Assertions.assertEquals(1621925601, model.pipelineExternalComputeScaleProperties().numberOfPipelineNodes());
        Assertions.assertEquals(66962308, model.pipelineExternalComputeScaleProperties().numberOfExternalNodes());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
