// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.CopyComputeScaleProperties;
import com.azure.resourcemanager.datafactory.models.DataFlowComputeType;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeComputeProperties;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeDataFlowProperties;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeDataFlowPropertiesCustomPropertiesItem;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeVNetProperties;
import com.azure.resourcemanager.datafactory.models.PipelineExternalComputeScaleProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class IntegrationRuntimeComputePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IntegrationRuntimeComputeProperties model = BinaryData.fromString(
            "{\"location\":\"ii\",\"nodeSize\":\"sapqhipajsniv\",\"numberOfNodes\":870925821,\"maxParallelExecutionsPerNode\":1964377886,\"dataFlowProperties\":{\"computeType\":\"ComputeOptimized\",\"coreCount\":650247197,\"timeToLive\":907107043,\"cleanup\":false,\"customProperties\":[{\"name\":\"qwkseodvlmdzg\",\"value\":\"ykzzugctygbb\"}],\"\":{\"jmxwcvumnrutqnke\":\"dataljvvcrsmw\",\"pec\":\"datajftvltj\"}},\"vNetProperties\":{\"vNetId\":\"bzltn\",\"subnet\":\"pajfhxsmu\",\"publicIPs\":[\"adzglm\",\"uzpsuhs\",\"pxm\"],\"subnetId\":\"dhf\",\"\":{\"b\":\"datakqpyfjx\",\"uqfmxbdjkmnxsg\":\"dataws\",\"hbtyc\":\"datanowxhyvdbrdvsv\"}},\"copyComputeScaleProperties\":{\"dataIntegrationUnit\":1366549492,\"timeToLive\":2114794692,\"\":{\"mrdiscsdvkymkt\":\"datakhrcthypepxs\"}},\"pipelineExternalComputeScaleProperties\":{\"timeToLive\":1848448837,\"numberOfPipelineNodes\":682279146,\"numberOfExternalNodes\":1639638335,\"\":{\"fnfgazaghddcozwx\":\"datagngl\"}},\"\":{\"utuhvemg\":\"datar\"}}")
            .toObject(IntegrationRuntimeComputeProperties.class);
        Assertions.assertEquals("ii", model.location());
        Assertions.assertEquals("sapqhipajsniv", model.nodeSize());
        Assertions.assertEquals(870925821, model.numberOfNodes());
        Assertions.assertEquals(1964377886, model.maxParallelExecutionsPerNode());
        Assertions.assertEquals(DataFlowComputeType.COMPUTE_OPTIMIZED, model.dataFlowProperties().computeType());
        Assertions.assertEquals(650247197, model.dataFlowProperties().coreCount());
        Assertions.assertEquals(907107043, model.dataFlowProperties().timeToLive());
        Assertions.assertEquals(false, model.dataFlowProperties().cleanup());
        Assertions.assertEquals("qwkseodvlmdzg", model.dataFlowProperties().customProperties().get(0).name());
        Assertions.assertEquals("ykzzugctygbb", model.dataFlowProperties().customProperties().get(0).value());
        Assertions.assertEquals("bzltn", model.vNetProperties().vNetId());
        Assertions.assertEquals("pajfhxsmu", model.vNetProperties().subnet());
        Assertions.assertEquals("adzglm", model.vNetProperties().publicIPs().get(0));
        Assertions.assertEquals("dhf", model.vNetProperties().subnetId());
        Assertions.assertEquals(1366549492, model.copyComputeScaleProperties().dataIntegrationUnit());
        Assertions.assertEquals(2114794692, model.copyComputeScaleProperties().timeToLive());
        Assertions.assertEquals(1848448837, model.pipelineExternalComputeScaleProperties().timeToLive());
        Assertions.assertEquals(682279146, model.pipelineExternalComputeScaleProperties().numberOfPipelineNodes());
        Assertions.assertEquals(1639638335, model.pipelineExternalComputeScaleProperties().numberOfExternalNodes());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IntegrationRuntimeComputeProperties model
            = new IntegrationRuntimeComputeProperties().withLocation("ii").withNodeSize("sapqhipajsniv")
                .withNumberOfNodes(870925821).withMaxParallelExecutionsPerNode(1964377886)
                .withDataFlowProperties(new IntegrationRuntimeDataFlowProperties()
                    .withComputeType(DataFlowComputeType.COMPUTE_OPTIMIZED).withCoreCount(650247197)
                    .withTimeToLive(907107043).withCleanup(false)
                    .withCustomProperties(Arrays.asList(new IntegrationRuntimeDataFlowPropertiesCustomPropertiesItem()
                        .withName("qwkseodvlmdzg").withValue("ykzzugctygbb")))
                    .withAdditionalProperties(mapOf()))
                .withVNetProperties(new IntegrationRuntimeVNetProperties().withVNetId("bzltn").withSubnet("pajfhxsmu")
                    .withPublicIPs(Arrays.asList("adzglm", "uzpsuhs", "pxm")).withSubnetId("dhf")
                    .withAdditionalProperties(mapOf()))
                .withCopyComputeScaleProperties(new CopyComputeScaleProperties().withDataIntegrationUnit(1366549492)
                    .withTimeToLive(2114794692).withAdditionalProperties(mapOf()))
                .withPipelineExternalComputeScaleProperties(new PipelineExternalComputeScaleProperties()
                    .withTimeToLive(1848448837).withNumberOfPipelineNodes(682279146)
                    .withNumberOfExternalNodes(1639638335).withAdditionalProperties(mapOf()))
                .withAdditionalProperties(mapOf());
        model = BinaryData.fromObject(model).toObject(IntegrationRuntimeComputeProperties.class);
        Assertions.assertEquals("ii", model.location());
        Assertions.assertEquals("sapqhipajsniv", model.nodeSize());
        Assertions.assertEquals(870925821, model.numberOfNodes());
        Assertions.assertEquals(1964377886, model.maxParallelExecutionsPerNode());
        Assertions.assertEquals(DataFlowComputeType.COMPUTE_OPTIMIZED, model.dataFlowProperties().computeType());
        Assertions.assertEquals(650247197, model.dataFlowProperties().coreCount());
        Assertions.assertEquals(907107043, model.dataFlowProperties().timeToLive());
        Assertions.assertEquals(false, model.dataFlowProperties().cleanup());
        Assertions.assertEquals("qwkseodvlmdzg", model.dataFlowProperties().customProperties().get(0).name());
        Assertions.assertEquals("ykzzugctygbb", model.dataFlowProperties().customProperties().get(0).value());
        Assertions.assertEquals("bzltn", model.vNetProperties().vNetId());
        Assertions.assertEquals("pajfhxsmu", model.vNetProperties().subnet());
        Assertions.assertEquals("adzglm", model.vNetProperties().publicIPs().get(0));
        Assertions.assertEquals("dhf", model.vNetProperties().subnetId());
        Assertions.assertEquals(1366549492, model.copyComputeScaleProperties().dataIntegrationUnit());
        Assertions.assertEquals(2114794692, model.copyComputeScaleProperties().timeToLive());
        Assertions.assertEquals(1848448837, model.pipelineExternalComputeScaleProperties().timeToLive());
        Assertions.assertEquals(682279146, model.pipelineExternalComputeScaleProperties().numberOfPipelineNodes());
        Assertions.assertEquals(1639638335, model.pipelineExternalComputeScaleProperties().numberOfExternalNodes());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
