// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.CopyComputeScaleProperties;
import com.azure.resourcemanager.datafactory.models.DataFlowComputeType;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeComputeProperties;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeDataFlowProperties;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeDataFlowPropertiesCustomPropertiesItem;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeVNetProperties;
import com.azure.resourcemanager.datafactory.models.PipelineExternalComputeScaleProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class IntegrationRuntimeComputePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IntegrationRuntimeComputeProperties model =
            BinaryData
                .fromString(
                    "{\"location\":\"xipe\",\"nodeSize\":\"plfmfvmjjfzi\",\"numberOfNodes\":1133899046,\"maxParallelExecutionsPerNode\":852753567,\"dataFlowProperties\":{\"computeType\":\"ComputeOptimized\",\"coreCount\":792243326,\"timeToLive\":20315238,\"cleanup\":true,\"customProperties\":[{\"name\":\"symagbahdbtjmku\",\"value\":\"nrk\"},{\"name\":\"izrxhuqfvpanlo\",\"value\":\"vvcxgqtquirgopgz\"},{\"name\":\"ucujtjuzvyjxuxch\",\"value\":\"oqhqrc\"},{\"name\":\"sxqfhlrvu\",\"value\":\"agvyjcdpncvfyeqy\"}],\"\":{\"ivnmev\":\"dataijcsapqhipajs\"}},\"vNetProperties\":{\"vNetId\":\"cuwrfgpjfv\",\"subnet\":\"kseodvlmdzgvc\",\"publicIPs\":[\"z\",\"gctygbbmu\",\"ljvvcrsmw\",\"jmxwcvumnrutqnke\"],\"subnetId\":\"f\",\"\":{\"opecvpkb\":\"datat\",\"zadzglmuu\":\"dataltnowpajfhxsmub\"}},\"copyComputeScaleProperties\":{\"dataIntegrationUnit\":1559370317,\"timeToLive\":1848363675,\"\":{\"xkbyws\":\"dataxmuldhfrerkqpyf\"}},\"pipelineExternalComputeScaleProperties\":{\"timeToLive\":2130928365,\"numberOfPipelineNodes\":1017885673,\"numberOfExternalNodes\":979697242,\"\":{\"xsggnowxhyvdb\":\"datam\"}},\"\":{\"iikhrct\":\"datasvghbtycvlkus\"}}")
                .toObject(IntegrationRuntimeComputeProperties.class);
        Assertions.assertEquals("xipe", model.location());
        Assertions.assertEquals("plfmfvmjjfzi", model.nodeSize());
        Assertions.assertEquals(1133899046, model.numberOfNodes());
        Assertions.assertEquals(852753567, model.maxParallelExecutionsPerNode());
        Assertions.assertEquals(DataFlowComputeType.COMPUTE_OPTIMIZED, model.dataFlowProperties().computeType());
        Assertions.assertEquals(792243326, model.dataFlowProperties().coreCount());
        Assertions.assertEquals(20315238, model.dataFlowProperties().timeToLive());
        Assertions.assertEquals(true, model.dataFlowProperties().cleanup());
        Assertions.assertEquals("symagbahdbtjmku", model.dataFlowProperties().customProperties().get(0).name());
        Assertions.assertEquals("nrk", model.dataFlowProperties().customProperties().get(0).value());
        Assertions.assertEquals("cuwrfgpjfv", model.vNetProperties().vNetId());
        Assertions.assertEquals("kseodvlmdzgvc", model.vNetProperties().subnet());
        Assertions.assertEquals("z", model.vNetProperties().publicIPs().get(0));
        Assertions.assertEquals("f", model.vNetProperties().subnetId());
        Assertions.assertEquals(1559370317, model.copyComputeScaleProperties().dataIntegrationUnit());
        Assertions.assertEquals(1848363675, model.copyComputeScaleProperties().timeToLive());
        Assertions.assertEquals(2130928365, model.pipelineExternalComputeScaleProperties().timeToLive());
        Assertions.assertEquals(1017885673, model.pipelineExternalComputeScaleProperties().numberOfPipelineNodes());
        Assertions.assertEquals(979697242, model.pipelineExternalComputeScaleProperties().numberOfExternalNodes());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IntegrationRuntimeComputeProperties model =
            new IntegrationRuntimeComputeProperties()
                .withLocation("xipe")
                .withNodeSize("plfmfvmjjfzi")
                .withNumberOfNodes(1133899046)
                .withMaxParallelExecutionsPerNode(852753567)
                .withDataFlowProperties(
                    new IntegrationRuntimeDataFlowProperties()
                        .withComputeType(DataFlowComputeType.COMPUTE_OPTIMIZED)
                        .withCoreCount(792243326)
                        .withTimeToLive(20315238)
                        .withCleanup(true)
                        .withCustomProperties(
                            Arrays
                                .asList(
                                    new IntegrationRuntimeDataFlowPropertiesCustomPropertiesItem()
                                        .withName("symagbahdbtjmku")
                                        .withValue("nrk"),
                                    new IntegrationRuntimeDataFlowPropertiesCustomPropertiesItem()
                                        .withName("izrxhuqfvpanlo")
                                        .withValue("vvcxgqtquirgopgz"),
                                    new IntegrationRuntimeDataFlowPropertiesCustomPropertiesItem()
                                        .withName("ucujtjuzvyjxuxch")
                                        .withValue("oqhqrc"),
                                    new IntegrationRuntimeDataFlowPropertiesCustomPropertiesItem()
                                        .withName("sxqfhlrvu")
                                        .withValue("agvyjcdpncvfyeqy")))
                        .withAdditionalProperties(mapOf()))
                .withVNetProperties(
                    new IntegrationRuntimeVNetProperties()
                        .withVNetId("cuwrfgpjfv")
                        .withSubnet("kseodvlmdzgvc")
                        .withPublicIPs(Arrays.asList("z", "gctygbbmu", "ljvvcrsmw", "jmxwcvumnrutqnke"))
                        .withSubnetId("f")
                        .withAdditionalProperties(mapOf()))
                .withCopyComputeScaleProperties(
                    new CopyComputeScaleProperties()
                        .withDataIntegrationUnit(1559370317)
                        .withTimeToLive(1848363675)
                        .withAdditionalProperties(mapOf()))
                .withPipelineExternalComputeScaleProperties(
                    new PipelineExternalComputeScaleProperties()
                        .withTimeToLive(2130928365)
                        .withNumberOfPipelineNodes(1017885673)
                        .withNumberOfExternalNodes(979697242)
                        .withAdditionalProperties(mapOf()))
                .withAdditionalProperties(mapOf());
        model = BinaryData.fromObject(model).toObject(IntegrationRuntimeComputeProperties.class);
        Assertions.assertEquals("xipe", model.location());
        Assertions.assertEquals("plfmfvmjjfzi", model.nodeSize());
        Assertions.assertEquals(1133899046, model.numberOfNodes());
        Assertions.assertEquals(852753567, model.maxParallelExecutionsPerNode());
        Assertions.assertEquals(DataFlowComputeType.COMPUTE_OPTIMIZED, model.dataFlowProperties().computeType());
        Assertions.assertEquals(792243326, model.dataFlowProperties().coreCount());
        Assertions.assertEquals(20315238, model.dataFlowProperties().timeToLive());
        Assertions.assertEquals(true, model.dataFlowProperties().cleanup());
        Assertions.assertEquals("symagbahdbtjmku", model.dataFlowProperties().customProperties().get(0).name());
        Assertions.assertEquals("nrk", model.dataFlowProperties().customProperties().get(0).value());
        Assertions.assertEquals("cuwrfgpjfv", model.vNetProperties().vNetId());
        Assertions.assertEquals("kseodvlmdzgvc", model.vNetProperties().subnet());
        Assertions.assertEquals("z", model.vNetProperties().publicIPs().get(0));
        Assertions.assertEquals("f", model.vNetProperties().subnetId());
        Assertions.assertEquals(1559370317, model.copyComputeScaleProperties().dataIntegrationUnit());
        Assertions.assertEquals(1848363675, model.copyComputeScaleProperties().timeToLive());
        Assertions.assertEquals(2130928365, model.pipelineExternalComputeScaleProperties().timeToLive());
        Assertions.assertEquals(1017885673, model.pipelineExternalComputeScaleProperties().numberOfPipelineNodes());
        Assertions.assertEquals(979697242, model.pipelineExternalComputeScaleProperties().numberOfExternalNodes());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
