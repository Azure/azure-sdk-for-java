// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.CompressionReadSettings;
import com.azure.resourcemanager.datafactory.models.StoreReadSettings;
import com.azure.resourcemanager.datafactory.models.XmlReadSettings;
import com.azure.resourcemanager.datafactory.models.XmlSource;
import java.util.HashMap;
import java.util.Map;

public final class XmlSourceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        XmlSource model = BinaryData.fromString(
            "{\"type\":\"XmlSource\",\"storeSettings\":{\"type\":\"StoreReadSettings\",\"maxConcurrentConnections\":\"datavpktbnmhx\",\"disableMetricsCollection\":\"datazzpauts\",\"\":{\"nvouytsajjgvusn\":\"datab\"}},\"formatSettings\":{\"type\":\"XmlReadSettings\",\"compressionProperties\":{\"type\":\"CompressionReadSettings\",\"\":{\"cbtegiwcmeyaoy\":\"datakwctlsohrtgpv\"}},\"validationMode\":\"datafgvxau\",\"detectDataType\":\"datanabgrsnfzmth\",\"namespaces\":\"datacuf\",\"namespacePrefixes\":\"datazfot\",\"\":{\"ekh\":\"dataumamdorgl\",\"iwvxmysc\":\"datasfgjbeybdukbgl\"}},\"additionalColumns\":\"dataivoexkonciacdl\",\"sourceRetryCount\":\"datahs\",\"sourceRetryWait\":\"datavxkctedhaf\",\"maxConcurrentConnections\":\"dataiffaj\",\"disableMetricsCollection\":\"datawby\",\"\":{\"uyosigkinykjxqs\":\"datauyxylbbugojdzc\",\"zt\":\"datapeqgedpizjqp\",\"oqakvutedetxokqu\":\"datardiverkwmafy\",\"cdbkceh\":\"datajdwcwj\"}}")
            .toObject(XmlSource.class);
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        XmlSource model = new XmlSource().withSourceRetryCount("datahs")
            .withSourceRetryWait("datavxkctedhaf")
            .withMaxConcurrentConnections("dataiffaj")
            .withDisableMetricsCollection("datawby")
            .withStoreSettings(new StoreReadSettings().withMaxConcurrentConnections("datavpktbnmhx")
                .withDisableMetricsCollection("datazzpauts")
                .withAdditionalProperties(mapOf("type", "StoreReadSettings")))
            .withFormatSettings(new XmlReadSettings()
                .withCompressionProperties(
                    new CompressionReadSettings().withAdditionalProperties(mapOf("type", "CompressionReadSettings")))
                .withValidationMode("datafgvxau")
                .withDetectDataType("datanabgrsnfzmth")
                .withNamespaces("datacuf")
                .withNamespacePrefixes("datazfot"))
            .withAdditionalColumns("dataivoexkonciacdl");
        model = BinaryData.fromObject(model).toObject(XmlSource.class);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
