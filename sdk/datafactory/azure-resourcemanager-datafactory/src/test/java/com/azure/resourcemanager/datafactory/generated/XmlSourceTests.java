// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.CompressionReadSettings;
import com.azure.resourcemanager.datafactory.models.StoreReadSettings;
import com.azure.resourcemanager.datafactory.models.XmlReadSettings;
import com.azure.resourcemanager.datafactory.models.XmlSource;
import java.util.HashMap;
import java.util.Map;

public final class XmlSourceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        XmlSource model = BinaryData.fromString(
            "{\"type\":\"bijoehhqwwsgqzi\",\"storeSettings\":{\"type\":\"awectzjjgvcbtq\",\"maxConcurrentConnections\":\"datapnkyvujhejy\",\"disableMetricsCollection\":\"datavlguysbrn\",\"\":{\"jshtcfnb\":\"dataqhmuqyzxkormr\"}},\"formatSettings\":{\"type\":\"zuaxtbr\",\"compressionProperties\":{\"type\":\"hxpdqoehub\",\"\":{\"glynbqpeo\":\"datazxnuxamxikhrxi\",\"wtihtnywgtsodnx\":\"dataecbog\"}},\"validationMode\":\"datarjtwjimcfrhtz\",\"detectDataType\":\"datauvoaxqo\",\"namespaces\":\"datalp\",\"namespacePrefixes\":\"datapbzyqbggxcyra\",\"\":{\"wxslzqlgxxbnrur\":\"dataurxlp\",\"upckhfbmdemohlsh\":\"datanwbjjy\",\"mwaej\":\"dataaaoofltbsay\",\"gabsfjrjzdq\":\"datazkqcmddcftnxyrtq\"}},\"additionalColumns\":\"datagorvgdibepg\",\"sourceRetryCount\":\"dataoetwjssyazm\",\"sourceRetryWait\":\"dataux\",\"maxConcurrentConnections\":\"dataokckxfk\",\"disableMetricsCollection\":\"dataqkby\",\"\":{\"gxlyvebvxjguwts\":\"dataeawucmqfurbtb\",\"fzv\":\"dataijwiznb\",\"ljjawsaskullvt\":\"dataxtykjrdxlximvr\"}}")
            .toObject(XmlSource.class);
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        XmlSource model = new XmlSource().withSourceRetryCount("dataoetwjssyazm")
            .withSourceRetryWait("dataux")
            .withMaxConcurrentConnections("dataokckxfk")
            .withDisableMetricsCollection("dataqkby")
            .withStoreSettings(new StoreReadSettings().withMaxConcurrentConnections("datapnkyvujhejy")
                .withDisableMetricsCollection("datavlguysbrn")
                .withAdditionalProperties(mapOf("type", "awectzjjgvcbtq")))
            .withFormatSettings(new XmlReadSettings()
                .withCompressionProperties(
                    new CompressionReadSettings().withAdditionalProperties(mapOf("type", "hxpdqoehub")))
                .withValidationMode("datarjtwjimcfrhtz")
                .withDetectDataType("datauvoaxqo")
                .withNamespaces("datalp")
                .withNamespacePrefixes("datapbzyqbggxcyra"))
            .withAdditionalColumns("datagorvgdibepg");
        model = BinaryData.fromObject(model).toObject(XmlSource.class);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
