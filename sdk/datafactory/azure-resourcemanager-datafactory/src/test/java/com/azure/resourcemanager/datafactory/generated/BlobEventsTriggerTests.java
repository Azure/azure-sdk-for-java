// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.BlobEventTypes;
import com.azure.resourcemanager.datafactory.models.BlobEventsTrigger;
import com.azure.resourcemanager.datafactory.models.PipelineReference;
import com.azure.resourcemanager.datafactory.models.TriggerPipelineReference;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class BlobEventsTriggerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        BlobEventsTrigger model = BinaryData.fromString(
            "{\"type\":\"BlobEventsTrigger\",\"typeProperties\":{\"blobPathBeginsWith\":\"suqap\",\"blobPathEndsWith\":\"dgrbcltfkyq\",\"ignoreEmptyBlobs\":true,\"events\":[\"Microsoft.Storage.BlobDeleted\",\"Microsoft.Storage.BlobDeleted\"],\"scope\":\"kc\"},\"pipelines\":[{\"pipelineReference\":{\"referenceName\":\"txty\",\"name\":\"pmfpbodswgnglmll\"},\"parameters\":{\"efapouwsynsbdndi\":\"dataxslccuysc\",\"ggvhcoaoetitkt\":\"datadlehjzvpdwy\"}}],\"description\":\"irambfm\",\"runtimeState\":\"Started\",\"annotations\":[\"datalubqtfcupjmwtemi\",\"dataujiqmksafjhtl\"],\"\":{\"qnyvufvzr\":\"dataghtsfppjunkhxth\",\"qqetasijiaqqwomk\":\"dataaphepcehe\",\"mjmp\":\"datacmwqfdhgpmvlfmvq\"}}")
            .toObject(BlobEventsTrigger.class);
        Assertions.assertEquals("irambfm", model.description());
        Assertions.assertEquals("txty", model.pipelines().get(0).pipelineReference().referenceName());
        Assertions.assertEquals("pmfpbodswgnglmll", model.pipelines().get(0).pipelineReference().name());
        Assertions.assertEquals("suqap", model.blobPathBeginsWith());
        Assertions.assertEquals("dgrbcltfkyq", model.blobPathEndsWith());
        Assertions.assertEquals(true, model.ignoreEmptyBlobs());
        Assertions.assertEquals(BlobEventTypes.MICROSOFT_STORAGE_BLOB_DELETED, model.events().get(0));
        Assertions.assertEquals("kc", model.scope());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        BlobEventsTrigger model = new BlobEventsTrigger().withDescription("irambfm")
            .withAnnotations(Arrays.asList("datalubqtfcupjmwtemi", "dataujiqmksafjhtl"))
            .withPipelines(Arrays.asList(new TriggerPipelineReference()
                .withPipelineReference(new PipelineReference().withReferenceName("txty").withName("pmfpbodswgnglmll"))
                .withParameters(mapOf("efapouwsynsbdndi", "dataxslccuysc", "ggvhcoaoetitkt", "datadlehjzvpdwy"))))
            .withBlobPathBeginsWith("suqap")
            .withBlobPathEndsWith("dgrbcltfkyq")
            .withIgnoreEmptyBlobs(true)
            .withEvents(Arrays.asList(BlobEventTypes.MICROSOFT_STORAGE_BLOB_DELETED,
                BlobEventTypes.MICROSOFT_STORAGE_BLOB_DELETED))
            .withScope("kc");
        model = BinaryData.fromObject(model).toObject(BlobEventsTrigger.class);
        Assertions.assertEquals("irambfm", model.description());
        Assertions.assertEquals("txty", model.pipelines().get(0).pipelineReference().referenceName());
        Assertions.assertEquals("pmfpbodswgnglmll", model.pipelines().get(0).pipelineReference().name());
        Assertions.assertEquals("suqap", model.blobPathBeginsWith());
        Assertions.assertEquals("dgrbcltfkyq", model.blobPathEndsWith());
        Assertions.assertEquals(true, model.ignoreEmptyBlobs());
        Assertions.assertEquals(BlobEventTypes.MICROSOFT_STORAGE_BLOB_DELETED, model.events().get(0));
        Assertions.assertEquals("kc", model.scope());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
