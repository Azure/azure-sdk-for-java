// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.BlobEventTypes;
import com.azure.resourcemanager.datafactory.models.BlobEventsTrigger;
import com.azure.resourcemanager.datafactory.models.PipelineReference;
import com.azure.resourcemanager.datafactory.models.TriggerPipelineReference;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class BlobEventsTriggerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        BlobEventsTrigger model = BinaryData.fromString(
            "{\"type\":\"BlobEventsTrigger\",\"typeProperties\":{\"blobPathBeginsWith\":\"amijgq\",\"blobPathEndsWith\":\"zvvwyhszewh\",\"ignoreEmptyBlobs\":false,\"events\":[\"Microsoft.Storage.BlobCreated\",\"Microsoft.Storage.BlobCreated\",\"Microsoft.Storage.BlobCreated\",\"Microsoft.Storage.BlobDeleted\"],\"scope\":\"kiwytskp\"},\"pipelines\":[{\"pipelineReference\":{\"referenceName\":\"vwwbxnxlhdindc\",\"name\":\"iq\"},\"parameters\":{\"jli\":\"datay\",\"hcylvjzufznaed\":\"datagkxrevwvjwtf\"}},{\"pipelineReference\":{\"referenceName\":\"uxrufwdbi\",\"name\":\"udphy\"},\"parameters\":{\"wdesyttka\":\"datavopc\",\"cbntnjnkvsnsiphl\":\"datafabt\",\"xtzgxdxq\":\"datawcedzodvz\"}},{\"pipelineReference\":{\"referenceName\":\"uzubntuimi\",\"name\":\"cnubynrhencgfz\"},\"parameters\":{\"dqtchxtbcqjvy\":\"datazu\",\"ioatzmr\":\"dataotxkhyvjomq\"}},{\"pipelineReference\":{\"referenceName\":\"srjjajlr\",\"name\":\"mjrufwqpnmcwesfp\"},\"parameters\":{\"rztwwkvwpbd\":\"datadzkbky\",\"upnfrlygyjrlu\":\"datazdkrmpljzrzv\",\"l\":\"dataigzwhfeq\",\"yzzk\":\"datajl\"}}],\"description\":\"beydjagyksgntg\",\"runtimeState\":\"Disabled\",\"annotations\":[\"datafjbxhna\",\"datagbloeaewidumi\"],\"\":{\"majirnqcbhviqwfc\":\"datacgbyx\",\"bombncjn\":\"dataiyafafoornsktd\",\"qwnt\":\"datakc\",\"ijobcpruommtuca\":\"dataqvlcunnb\"}}")
            .toObject(BlobEventsTrigger.class);
        Assertions.assertEquals("beydjagyksgntg", model.description());
        Assertions.assertEquals("vwwbxnxlhdindc", model.pipelines().get(0).pipelineReference().referenceName());
        Assertions.assertEquals("iq", model.pipelines().get(0).pipelineReference().name());
        Assertions.assertEquals("amijgq", model.blobPathBeginsWith());
        Assertions.assertEquals("zvvwyhszewh", model.blobPathEndsWith());
        Assertions.assertEquals(false, model.ignoreEmptyBlobs());
        Assertions.assertEquals(BlobEventTypes.MICROSOFT_STORAGE_BLOB_CREATED, model.events().get(0));
        Assertions.assertEquals("kiwytskp", model.scope());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        BlobEventsTrigger model
            = new BlobEventsTrigger().withDescription("beydjagyksgntg")
                .withAnnotations(Arrays.asList("datafjbxhna", "datagbloeaewidumi"))
                .withPipelines(Arrays.asList(
                    new TriggerPipelineReference()
                        .withPipelineReference(
                            new PipelineReference().withReferenceName("vwwbxnxlhdindc").withName("iq"))
                        .withParameters(mapOf("jli", "datay", "hcylvjzufznaed", "datagkxrevwvjwtf")),
                    new TriggerPipelineReference()
                        .withPipelineReference(new PipelineReference().withReferenceName("uxrufwdbi").withName("udphy"))
                        .withParameters(mapOf("wdesyttka", "datavopc", "cbntnjnkvsnsiphl", "datafabt", "xtzgxdxq",
                            "datawcedzodvz")),
                    new TriggerPipelineReference()
                        .withPipelineReference(
                            new PipelineReference().withReferenceName("uzubntuimi").withName("cnubynrhencgfz"))
                        .withParameters(mapOf("dqtchxtbcqjvy", "datazu", "ioatzmr", "dataotxkhyvjomq")),
                    new TriggerPipelineReference()
                        .withPipelineReference(
                            new PipelineReference().withReferenceName("srjjajlr").withName("mjrufwqpnmcwesfp"))
                        .withParameters(mapOf("rztwwkvwpbd", "datadzkbky", "upnfrlygyjrlu", "datazdkrmpljzrzv", "l",
                            "dataigzwhfeq", "yzzk", "datajl"))))
                .withBlobPathBeginsWith("amijgq")
                .withBlobPathEndsWith("zvvwyhszewh")
                .withIgnoreEmptyBlobs(false)
                .withEvents(Arrays.asList(BlobEventTypes.MICROSOFT_STORAGE_BLOB_CREATED,
                    BlobEventTypes.MICROSOFT_STORAGE_BLOB_CREATED, BlobEventTypes.MICROSOFT_STORAGE_BLOB_CREATED,
                    BlobEventTypes.MICROSOFT_STORAGE_BLOB_DELETED))
                .withScope("kiwytskp");
        model = BinaryData.fromObject(model).toObject(BlobEventsTrigger.class);
        Assertions.assertEquals("beydjagyksgntg", model.description());
        Assertions.assertEquals("vwwbxnxlhdindc", model.pipelines().get(0).pipelineReference().referenceName());
        Assertions.assertEquals("iq", model.pipelines().get(0).pipelineReference().name());
        Assertions.assertEquals("amijgq", model.blobPathBeginsWith());
        Assertions.assertEquals("zvvwyhszewh", model.blobPathEndsWith());
        Assertions.assertEquals(false, model.ignoreEmptyBlobs());
        Assertions.assertEquals(BlobEventTypes.MICROSOFT_STORAGE_BLOB_CREATED, model.events().get(0));
        Assertions.assertEquals("kiwytskp", model.scope());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
