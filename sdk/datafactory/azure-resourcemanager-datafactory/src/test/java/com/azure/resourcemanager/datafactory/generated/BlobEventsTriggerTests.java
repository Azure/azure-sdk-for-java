// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.BlobEventsTrigger;
import com.azure.resourcemanager.datafactory.models.BlobEventTypes;
import com.azure.resourcemanager.datafactory.models.PipelineReference;
import com.azure.resourcemanager.datafactory.models.TriggerPipelineReference;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class BlobEventsTriggerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        BlobEventsTrigger model = BinaryData.fromString(
            "{\"type\":\"BlobEventsTrigger\",\"typeProperties\":{\"blobPathBeginsWith\":\"gghwxpgf\",\"blobPathEndsWith\":\"hc\",\"ignoreEmptyBlobs\":true,\"events\":[\"Microsoft.Storage.BlobDeleted\"],\"scope\":\"plpphfe\"},\"pipelines\":[{\"pipelineReference\":{\"referenceName\":\"wx\",\"name\":\"kpo\"},\"parameters\":{\"hcvssmlw\":\"datagvtjrobo\",\"mu\":\"datadstlxrg\",\"ulwvezthgwqqtb\":\"datahxoldmhypptfpp\",\"yipzehitdqmb\":\"datab\"}},{\"pipelineReference\":{\"referenceName\":\"wuaj\",\"name\":\"tgpz\"},\"parameters\":{\"drkolpnebn\":\"datakcvkm\",\"jdbdjxvcxepjfxcm\":\"dataafvks\"}},{\"pipelineReference\":{\"referenceName\":\"ivwcmtretflirbvq\",\"name\":\"xgzepinyursqfhrz\"},\"parameters\":{\"bwfxssxarxvftlls\":\"datamfipvgmlf\",\"kd\":\"dataqa\",\"cltfkyqyiiujukc\":\"datagr\",\"fpbodswg\":\"datalvptxtycup\"}}],\"description\":\"lmllrxpxsl\",\"runtimeState\":\"Started\",\"annotations\":[\"datacj\",\"datafapouws\",\"datansbdndirdlehjz\",\"datapdwyhggvhcoaoeti\"],\"\":{\"qtfcupjmw\":\"datakeirambfmsaedglu\",\"ujiqmksafjhtl\":\"dataemi\"}}")
            .toObject(BlobEventsTrigger.class);
        Assertions.assertEquals("lmllrxpxsl", model.description());
        Assertions.assertEquals("wx", model.pipelines().get(0).pipelineReference().referenceName());
        Assertions.assertEquals("kpo", model.pipelines().get(0).pipelineReference().name());
        Assertions.assertEquals("gghwxpgf", model.blobPathBeginsWith());
        Assertions.assertEquals("hc", model.blobPathEndsWith());
        Assertions.assertEquals(true, model.ignoreEmptyBlobs());
        Assertions.assertEquals(BlobEventTypes.MICROSOFT_STORAGE_BLOB_DELETED, model.events().get(0));
        Assertions.assertEquals("plpphfe", model.scope());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        BlobEventsTrigger model = new BlobEventsTrigger().withDescription("lmllrxpxsl")
            .withAnnotations(Arrays.asList("datacj", "datafapouws", "datansbdndirdlehjz", "datapdwyhggvhcoaoeti"))
            .withPipelines(Arrays.asList(
                new TriggerPipelineReference()
                    .withPipelineReference(new PipelineReference().withReferenceName("wx").withName("kpo"))
                    .withParameters(mapOf("hcvssmlw", "datagvtjrobo", "mu", "datadstlxrg", "ulwvezthgwqqtb",
                        "datahxoldmhypptfpp", "yipzehitdqmb", "datab")),
                new TriggerPipelineReference()
                    .withPipelineReference(new PipelineReference().withReferenceName("wuaj").withName("tgpz"))
                    .withParameters(mapOf("drkolpnebn", "datakcvkm", "jdbdjxvcxepjfxcm", "dataafvks")),
                new TriggerPipelineReference()
                    .withPipelineReference(
                        new PipelineReference().withReferenceName("ivwcmtretflirbvq").withName("xgzepinyursqfhrz"))
                    .withParameters(mapOf("bwfxssxarxvftlls", "datamfipvgmlf", "kd", "dataqa", "cltfkyqyiiujukc",
                        "datagr", "fpbodswg", "datalvptxtycup"))))
            .withBlobPathBeginsWith("gghwxpgf")
            .withBlobPathEndsWith("hc")
            .withIgnoreEmptyBlobs(true)
            .withEvents(Arrays.asList(BlobEventTypes.MICROSOFT_STORAGE_BLOB_DELETED))
            .withScope("plpphfe");
        model = BinaryData.fromObject(model).toObject(BlobEventsTrigger.class);
        Assertions.assertEquals("lmllrxpxsl", model.description());
        Assertions.assertEquals("wx", model.pipelines().get(0).pipelineReference().referenceName());
        Assertions.assertEquals("kpo", model.pipelines().get(0).pipelineReference().name());
        Assertions.assertEquals("gghwxpgf", model.blobPathBeginsWith());
        Assertions.assertEquals("hc", model.blobPathEndsWith());
        Assertions.assertEquals(true, model.ignoreEmptyBlobs());
        Assertions.assertEquals(BlobEventTypes.MICROSOFT_STORAGE_BLOB_DELETED, model.events().get(0));
        Assertions.assertEquals("plpphfe", model.scope());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
