// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.BlobEventTypes;
import com.azure.resourcemanager.datafactory.models.BlobEventsTrigger;
import com.azure.resourcemanager.datafactory.models.PipelineReference;
import com.azure.resourcemanager.datafactory.models.TriggerPipelineReference;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class BlobEventsTriggerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        BlobEventsTrigger model = BinaryData.fromString(
            "{\"type\":\"BlobEventsTrigger\",\"typeProperties\":{\"blobPathBeginsWith\":\"kjrtcifxl\",\"blobPathEndsWith\":\"jpu\",\"ignoreEmptyBlobs\":true,\"events\":[\"Microsoft.Storage.BlobDeleted\",\"Microsoft.Storage.BlobCreated\"],\"scope\":\"sjcdmnvtpboh\"},\"pipelines\":[{\"pipelineReference\":{\"referenceName\":\"qvsdaqfvplfywcbn\",\"name\":\"shmqn\"},\"parameters\":{\"lqs\":\"datavqsqwuwxtqdtvej\",\"fyddrsairxnw\":\"datajxpro\",\"ahe\":\"dataiytkeqjviawspvbc\",\"rmhewdfua\":\"datalmiuprfqyrwtdnr\"}},{\"pipelineReference\":{\"referenceName\":\"kfojn\",\"name\":\"dtuyimdoprkpd\"},\"parameters\":{\"b\":\"datasa\",\"jedyyengnh\":\"datab\"}},{\"pipelineReference\":{\"referenceName\":\"bpqzqaavxxvlss\",\"name\":\"txdr\"},\"parameters\":{\"x\":\"datahqwfrtbvqtog\"}},{\"pipelineReference\":{\"referenceName\":\"vkntygu\",\"name\":\"qobr\"},\"parameters\":{\"gq\":\"datajyami\",\"ibwkiwyt\":\"dataizvvwyhszewhzaiu\"}}],\"description\":\"pbrejvwwb\",\"runtimeState\":\"Disabled\",\"annotations\":[\"datadind\"],\"\":{\"cn\":\"dataiq\",\"gkxrevwvjwtf\":\"datacjli\"}}")
            .toObject(BlobEventsTrigger.class);
        Assertions.assertEquals("pbrejvwwb", model.description());
        Assertions.assertEquals("qvsdaqfvplfywcbn", model.pipelines().get(0).pipelineReference().referenceName());
        Assertions.assertEquals("shmqn", model.pipelines().get(0).pipelineReference().name());
        Assertions.assertEquals("kjrtcifxl", model.blobPathBeginsWith());
        Assertions.assertEquals("jpu", model.blobPathEndsWith());
        Assertions.assertEquals(true, model.ignoreEmptyBlobs());
        Assertions.assertEquals(BlobEventTypes.MICROSOFT_STORAGE_BLOB_DELETED, model.events().get(0));
        Assertions.assertEquals("sjcdmnvtpboh", model.scope());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        BlobEventsTrigger model = new BlobEventsTrigger().withDescription("pbrejvwwb")
            .withAnnotations(Arrays.asList("datadind"))
            .withPipelines(Arrays.asList(new TriggerPipelineReference()
                .withPipelineReference(new PipelineReference().withReferenceName("qvsdaqfvplfywcbn").withName("shmqn"))
                .withParameters(mapOf("lqs", "datavqsqwuwxtqdtvej", "fyddrsairxnw", "datajxpro", "ahe",
                    "dataiytkeqjviawspvbc", "rmhewdfua", "datalmiuprfqyrwtdnr")),
                new TriggerPipelineReference()
                    .withPipelineReference(new PipelineReference().withReferenceName("kfojn").withName("dtuyimdoprkpd"))
                    .withParameters(mapOf("b", "datasa", "jedyyengnh", "datab")),
                new TriggerPipelineReference()
                    .withPipelineReference(new PipelineReference().withReferenceName("bpqzqaavxxvlss").withName("txdr"))
                    .withParameters(mapOf("x", "datahqwfrtbvqtog")),
                new TriggerPipelineReference()
                    .withPipelineReference(new PipelineReference().withReferenceName("vkntygu").withName("qobr"))
                    .withParameters(mapOf("gq", "datajyami", "ibwkiwyt", "dataizvvwyhszewhzaiu"))))
            .withBlobPathBeginsWith("kjrtcifxl").withBlobPathEndsWith("jpu").withIgnoreEmptyBlobs(true)
            .withEvents(Arrays.asList(BlobEventTypes.MICROSOFT_STORAGE_BLOB_DELETED,
                BlobEventTypes.MICROSOFT_STORAGE_BLOB_CREATED))
            .withScope("sjcdmnvtpboh");
        model = BinaryData.fromObject(model).toObject(BlobEventsTrigger.class);
        Assertions.assertEquals("pbrejvwwb", model.description());
        Assertions.assertEquals("qvsdaqfvplfywcbn", model.pipelines().get(0).pipelineReference().referenceName());
        Assertions.assertEquals("shmqn", model.pipelines().get(0).pipelineReference().name());
        Assertions.assertEquals("kjrtcifxl", model.blobPathBeginsWith());
        Assertions.assertEquals("jpu", model.blobPathEndsWith());
        Assertions.assertEquals(true, model.ignoreEmptyBlobs());
        Assertions.assertEquals(BlobEventTypes.MICROSOFT_STORAGE_BLOB_DELETED, model.events().get(0));
        Assertions.assertEquals("sjcdmnvtpboh", model.scope());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
