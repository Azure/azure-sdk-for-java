// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.AzureMLUpdateResourceActivity;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureMLUpdateResourceActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureMLUpdateResourceActivity model = BinaryData.fromString(
            "{\"type\":\"frgvcoulxhpvursm\",\"typeProperties\":{\"trainedModelName\":\"datanangkcddwm\",\"trainedModelLinkedServiceName\":{\"referenceName\":\"sa\",\"parameters\":{\"rtgrz\":\"datalwpa\",\"yzoiqaijnahelf\":\"datatpqvhkjbgcqqeyt\",\"p\":\"dataha\",\"jcrqatx\":\"dataakqg\"}},\"trainedModelFilePath\":\"dataekidjbsfpaomlgyn\"},\"linkedServiceName\":{\"referenceName\":\"pypsjokjjrj\",\"parameters\":{\"tcjimsge\":\"datalcjtm\"}},\"policy\":{\"timeout\":\"datawwedbcrkepjnyrtl\",\"retry\":\"dataijcxvqjwlid\",\"retryIntervalInSeconds\":1580319500,\"secureInput\":true,\"secureOutput\":false,\"\":{\"wvwluzspkqxbtkwa\":\"datakzqass\",\"zjtudnnswwgrqiq\":\"dataw\",\"bjxo\":\"datao\",\"anvjhoshinljquqe\":\"datamwnrw\"}},\"name\":\"umyxps\",\"description\":\"ypwvhjskkgsf\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"alp\",\"dependencyConditions\":[\"Completed\"],\"\":{\"hjfseh\":\"datawtf\",\"inzukzb\":\"datazjbuz\",\"dhleuabsiqnyjjfj\":\"databc\",\"up\":\"datags\"}}],\"userProperties\":[{\"name\":\"exafql\",\"value\":\"datajmbzph\"},{\"name\":\"krjsgbcroltddify\",\"value\":\"dataxe\"}],\"\":{\"ackfupyivqpczx\":\"databijaqyiyefleju\",\"bperkeyhybc\":\"datazlxowgzt\"}}")
            .toObject(AzureMLUpdateResourceActivity.class);
        Assertions.assertEquals("umyxps", model.name());
        Assertions.assertEquals("ypwvhjskkgsf", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("alp", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("exafql", model.userProperties().get(0).name());
        Assertions.assertEquals("pypsjokjjrj", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1580319500, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals("sa", model.trainedModelLinkedServiceName().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureMLUpdateResourceActivity model = new AzureMLUpdateResourceActivity().withName("umyxps")
            .withDescription("ypwvhjskkgsf")
            .withState(ActivityState.INACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
            .withDependsOn(Arrays.asList(new ActivityDependency().withActivity("alp")
                .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED))
                .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("exafql").withValue("datajmbzph"),
                new UserProperty().withName("krjsgbcroltddify").withValue("dataxe")))
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("pypsjokjjrj")
                .withParameters(mapOf("tcjimsge", "datalcjtm")))
            .withPolicy(new ActivityPolicy().withTimeout("datawwedbcrkepjnyrtl")
                .withRetry("dataijcxvqjwlid")
                .withRetryIntervalInSeconds(1580319500)
                .withSecureInput(true)
                .withSecureOutput(false)
                .withAdditionalProperties(mapOf()))
            .withTrainedModelName("datanangkcddwm")
            .withTrainedModelLinkedServiceName(new LinkedServiceReference().withReferenceName("sa")
                .withParameters(mapOf("rtgrz", "datalwpa", "yzoiqaijnahelf", "datatpqvhkjbgcqqeyt", "p", "dataha",
                    "jcrqatx", "dataakqg")))
            .withTrainedModelFilePath("dataekidjbsfpaomlgyn");
        model = BinaryData.fromObject(model).toObject(AzureMLUpdateResourceActivity.class);
        Assertions.assertEquals("umyxps", model.name());
        Assertions.assertEquals("ypwvhjskkgsf", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("alp", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("exafql", model.userProperties().get(0).name());
        Assertions.assertEquals("pypsjokjjrj", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1580319500, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals("sa", model.trainedModelLinkedServiceName().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
