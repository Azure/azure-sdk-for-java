// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.AzureMLUpdateResourceActivity;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureMLUpdateResourceActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureMLUpdateResourceActivity model = BinaryData.fromString(
            "{\"type\":\"AzureMLUpdateResource\",\"typeProperties\":{\"trainedModelName\":\"dataonlgnespkxnhfd\",\"trainedModelLinkedServiceName\":{\"referenceName\":\"zskvp\",\"parameters\":{\"bicj\":\"datandrhlbxr\",\"poczxmwbk\":\"dataaafvxxiizkehf\",\"inhqpq\":\"datawihbyufm\",\"huxzdgoto\":\"dataowxd\"}},\"trainedModelFilePath\":\"datan\"},\"linkedServiceName\":{\"referenceName\":\"uirjqxknaeuhxnp\",\"parameters\":{\"dvnaxtbnjmj\":\"datajaeqaolfyqjgob\",\"bdfmhzgtieybimit\":\"datagrwvl\",\"wab\":\"dataxeetkwloozeg\"}},\"policy\":{\"timeout\":\"datareftwhiivxytvje\",\"retry\":\"datakuzlfnbz\",\"retryIntervalInSeconds\":1739064620,\"secureInput\":true,\"secureOutput\":true,\"\":{\"xsdtnxggwxmqy\":\"datarvckyhncqyogvv\",\"npftaykovgxam\":\"datatl\",\"reufd\":\"datamqexyoylcwzk\"}},\"name\":\"vvelcrwhrpxsxy\",\"description\":\"lsmiaruvbo\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"obyyv\",\"dependencyConditions\":[\"Failed\",\"Failed\"],\"\":{\"vytluh\":\"datahg\",\"qikuj\":\"datahiycddo\",\"dbkezfkot\":\"datadoela\",\"hwjxn\":\"dataoszgc\"}}],\"userProperties\":[{\"name\":\"w\",\"value\":\"datavferl\"},{\"name\":\"hfzzqq\",\"value\":\"databj\"},{\"name\":\"shwxy\",\"value\":\"dataskjqejkm\"},{\"name\":\"twftlhsmtkxzio\",\"value\":\"datautcyjjbdgfrl\"}],\"\":{\"mirvmpi\":\"dataegqvusffzvpwzvh\"}}")
            .toObject(AzureMLUpdateResourceActivity.class);
        Assertions.assertEquals("vvelcrwhrpxsxy", model.name());
        Assertions.assertEquals("lsmiaruvbo", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("obyyv", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("w", model.userProperties().get(0).name());
        Assertions.assertEquals("uirjqxknaeuhxnp", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1739064620, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals("zskvp", model.trainedModelLinkedServiceName().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureMLUpdateResourceActivity model = new AzureMLUpdateResourceActivity().withName("vvelcrwhrpxsxy")
            .withDescription("lsmiaruvbo")
            .withState(ActivityState.INACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
            .withDependsOn(Arrays.asList(new ActivityDependency().withActivity("obyyv")
                .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED, DependencyCondition.FAILED))
                .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("w").withValue("datavferl"),
                new UserProperty().withName("hfzzqq").withValue("databj"),
                new UserProperty().withName("shwxy").withValue("dataskjqejkm"),
                new UserProperty().withName("twftlhsmtkxzio").withValue("datautcyjjbdgfrl")))
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("uirjqxknaeuhxnp")
                .withParameters(mapOf("dvnaxtbnjmj", "datajaeqaolfyqjgob", "bdfmhzgtieybimit", "datagrwvl", "wab",
                    "dataxeetkwloozeg")))
            .withPolicy(new ActivityPolicy().withTimeout("datareftwhiivxytvje")
                .withRetry("datakuzlfnbz")
                .withRetryIntervalInSeconds(1739064620)
                .withSecureInput(true)
                .withSecureOutput(true)
                .withAdditionalProperties(mapOf()))
            .withTrainedModelName("dataonlgnespkxnhfd")
            .withTrainedModelLinkedServiceName(new LinkedServiceReference().withReferenceName("zskvp")
                .withParameters(mapOf("bicj", "datandrhlbxr", "poczxmwbk", "dataaafvxxiizkehf", "inhqpq",
                    "datawihbyufm", "huxzdgoto", "dataowxd")))
            .withTrainedModelFilePath("datan");
        model = BinaryData.fromObject(model).toObject(AzureMLUpdateResourceActivity.class);
        Assertions.assertEquals("vvelcrwhrpxsxy", model.name());
        Assertions.assertEquals("lsmiaruvbo", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("obyyv", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("w", model.userProperties().get(0).name());
        Assertions.assertEquals("uirjqxknaeuhxnp", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1739064620, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals("zskvp", model.trainedModelLinkedServiceName().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
