// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.AzureMLUpdateResourceActivity;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class AzureMLUpdateResourceActivityTests {
    @Test
    public void testDeserialize() {
        AzureMLUpdateResourceActivity model =
            BinaryData
                .fromString(
                    "{\"type\":\"AzureMLUpdateResource\",\"typeProperties\":{\"trainedModelLinkedServiceName\":{\"referenceName\":\"terdiuwkirkskwzt\",\"parameters\":{}}},\"linkedServiceName\":{\"referenceName\":\"jygowifcqpolz\",\"parameters\":{}},\"policy\":{\"retryIntervalInSeconds\":494048231,\"secureInput\":false,\"secureOutput\":true,\"\":{}},\"name\":\"v\",\"description\":\"ptvdxxheigm\",\"dependsOn\":[{\"activity\":\"wzghjhjv\",\"dependencyConditions\":[\"Failed\",\"Skipped\",\"Completed\",\"Failed\"],\"\":{}},{\"activity\":\"ybfmdafbgymqtna\",\"dependencyConditions\":[\"Failed\",\"Completed\",\"Failed\"],\"\":{}}],\"userProperties\":[{\"name\":\"bsconxavipn\"},{\"name\":\"yc\"}],\"\":{}}")
                .toObject(AzureMLUpdateResourceActivity.class);
        Assertions.assertEquals("v", model.name());
        Assertions.assertEquals("ptvdxxheigm", model.description());
        Assertions.assertEquals("wzghjhjv", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("bsconxavipn", model.userProperties().get(0).name());
        Assertions.assertEquals("jygowifcqpolz", model.linkedServiceName().referenceName());
        Assertions.assertEquals(494048231, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals("terdiuwkirkskwzt", model.trainedModelLinkedServiceName().referenceName());
    }

    @Test
    public void testSerialize() {
        AzureMLUpdateResourceActivity model =
            new AzureMLUpdateResourceActivity()
                .withName("v")
                .withDescription("ptvdxxheigm")
                .withDependsOn(
                    Arrays
                        .asList(
                            new ActivityDependency()
                                .withActivity("wzghjhjv")
                                .withDependencyConditions(
                                    Arrays
                                        .asList(
                                            DependencyCondition.FAILED,
                                            DependencyCondition.SKIPPED,
                                            DependencyCondition.COMPLETED,
                                            DependencyCondition.FAILED))
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency()
                                .withActivity("ybfmdafbgymqtna")
                                .withDependencyConditions(
                                    Arrays
                                        .asList(
                                            DependencyCondition.FAILED,
                                            DependencyCondition.COMPLETED,
                                            DependencyCondition.FAILED))
                                .withAdditionalProperties(mapOf())))
                .withUserProperties(
                    Arrays.asList(new UserProperty().withName("bsconxavipn"), new UserProperty().withName("yc")))
                .withLinkedServiceName(
                    new LinkedServiceReference().withReferenceName("jygowifcqpolz").withParameters(mapOf()))
                .withPolicy(
                    new ActivityPolicy()
                        .withRetryIntervalInSeconds(494048231)
                        .withSecureInput(false)
                        .withSecureOutput(true)
                        .withAdditionalProperties(mapOf()))
                .withTrainedModelLinkedServiceName(
                    new LinkedServiceReference().withReferenceName("terdiuwkirkskwzt").withParameters(mapOf()));
        model = BinaryData.fromObject(model).toObject(AzureMLUpdateResourceActivity.class);
        Assertions.assertEquals("v", model.name());
        Assertions.assertEquals("ptvdxxheigm", model.description());
        Assertions.assertEquals("wzghjhjv", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("bsconxavipn", model.userProperties().get(0).name());
        Assertions.assertEquals("jygowifcqpolz", model.linkedServiceName().referenceName());
        Assertions.assertEquals(494048231, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals("terdiuwkirkskwzt", model.trainedModelLinkedServiceName().referenceName());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
