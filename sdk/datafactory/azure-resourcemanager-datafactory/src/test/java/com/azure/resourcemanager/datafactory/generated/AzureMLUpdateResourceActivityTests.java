// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.AzureMLUpdateResourceActivity;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureMLUpdateResourceActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureMLUpdateResourceActivity model = BinaryData.fromString(
            "{\"type\":\"AzureMLUpdateResource\",\"typeProperties\":{\"trainedModelName\":\"datajimussvur\",\"trainedModelLinkedServiceName\":{\"referenceName\":\"lwdxnx\",\"parameters\":{\"lksoqr\":\"datalvkda\"}},\"trainedModelFilePath\":\"datawlanwh\"},\"linkedServiceName\":{\"referenceName\":\"sxliwpzucetziss\",\"parameters\":{\"zfgpzyqiv\":\"datarwswbmaubhrbtt\",\"qxjbq\":\"datasehy\"}},\"policy\":{\"timeout\":\"datai\",\"retry\":\"datacajtuoyxdl\",\"retryIntervalInSeconds\":296107626,\"secureInput\":false,\"secureOutput\":false,\"\":{\"bckfzbqvsg\":\"datakrxnr\",\"sfhtlvjaxdyxjic\":\"dataeijnvsjgnbdhh\",\"mvdddfjmi\":\"datak\"}},\"name\":\"b\",\"description\":\"cqlsisvpfsp\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"fpqyxlncwag\",\"dependencyConditions\":[\"Skipped\"],\"\":{\"ylpwymr\":\"dataotkowiruerh\",\"emsl\":\"datauioepi\"}},{\"activity\":\"z\",\"dependencyConditions\":[\"Succeeded\",\"Succeeded\",\"Skipped\"],\"\":{\"m\":\"datazv\",\"olbqcftrywd\":\"datanewmpwjcgr\"}},{\"activity\":\"rs\",\"dependencyConditions\":[\"Completed\",\"Completed\"],\"\":{\"i\":\"dataz\",\"djgcuew\":\"datanxvmcxljlpyhdx\"}},{\"activity\":\"nq\",\"dependencyConditions\":[\"Failed\",\"Skipped\",\"Skipped\"],\"\":{\"djmxvvtukyoubjn\":\"datamsxwe\"}}],\"userProperties\":[{\"name\":\"dinbfb\",\"value\":\"datawyvwv\"},{\"name\":\"gm\",\"value\":\"dataklqswwdbs\"}],\"\":{\"yjfquzxmtmsyiby\":\"dataysedqrbevobqrwng\"}}")
            .toObject(AzureMLUpdateResourceActivity.class);
        Assertions.assertEquals("b", model.name());
        Assertions.assertEquals("cqlsisvpfsp", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("fpqyxlncwag", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("dinbfb", model.userProperties().get(0).name());
        Assertions.assertEquals("sxliwpzucetziss", model.linkedServiceName().referenceName());
        Assertions.assertEquals(296107626, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals("lwdxnx", model.trainedModelLinkedServiceName().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureMLUpdateResourceActivity model = new AzureMLUpdateResourceActivity().withName("b")
            .withDescription("cqlsisvpfsp")
            .withState(ActivityState.INACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
            .withDependsOn(Arrays.asList(
                new ActivityDependency().withActivity("fpqyxlncwag")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("z")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED,
                        DependencyCondition.SUCCEEDED, DependencyCondition.SKIPPED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("rs")
                    .withDependencyConditions(
                        Arrays.asList(DependencyCondition.COMPLETED, DependencyCondition.COMPLETED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("nq")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED, DependencyCondition.SKIPPED,
                        DependencyCondition.SKIPPED))
                    .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("dinbfb").withValue("datawyvwv"),
                new UserProperty().withName("gm").withValue("dataklqswwdbs")))
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("sxliwpzucetziss")
                .withParameters(mapOf("zfgpzyqiv", "datarwswbmaubhrbtt", "qxjbq", "datasehy")))
            .withPolicy(new ActivityPolicy().withTimeout("datai")
                .withRetry("datacajtuoyxdl")
                .withRetryIntervalInSeconds(296107626)
                .withSecureInput(false)
                .withSecureOutput(false)
                .withAdditionalProperties(mapOf()))
            .withTrainedModelName("datajimussvur")
            .withTrainedModelLinkedServiceName(
                new LinkedServiceReference().withReferenceName("lwdxnx").withParameters(mapOf("lksoqr", "datalvkda")))
            .withTrainedModelFilePath("datawlanwh");
        model = BinaryData.fromObject(model).toObject(AzureMLUpdateResourceActivity.class);
        Assertions.assertEquals("b", model.name());
        Assertions.assertEquals("cqlsisvpfsp", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("fpqyxlncwag", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("dinbfb", model.userProperties().get(0).name());
        Assertions.assertEquals("sxliwpzucetziss", model.linkedServiceName().referenceName());
        Assertions.assertEquals(296107626, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals("lwdxnx", model.trainedModelLinkedServiceName().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
