// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.Expression;
import com.azure.resourcemanager.datafactory.models.FilterActivity;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class FilterActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        FilterActivity model = BinaryData.fromString(
            "{\"type\":\"Filter\",\"typeProperties\":{\"items\":{\"value\":\"ehtrgybfumoro\"},\"condition\":{\"value\":\"rutbfkynwwm\"}},\"name\":\"zpyrzazkal\",\"description\":\"vmknwlbz\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"ntgsju\",\"dependencyConditions\":[\"Completed\",\"Completed\"],\"\":{\"iuaaqgkvkoynjuc\":\"dataphwgixypgvwmvafh\"}},{\"activity\":\"yjblafvvndkvbcrq\",\"dependencyConditions\":[\"Skipped\",\"Skipped\"],\"\":{\"hgbf\":\"datagjneohxkisz\"}},{\"activity\":\"jodskqyjsdxgefk\",\"dependencyConditions\":[\"Failed\"],\"\":{\"agpjociu\":\"dataetorrchfuwfr\",\"djkwyzqnl\":\"datandgp\",\"kaciq\":\"datazymiv\"}}],\"userProperties\":[{\"name\":\"f\",\"value\":\"dataksywdtgz\"},{\"name\":\"gqfl\",\"value\":\"datauxyakof\"},{\"name\":\"soe\",\"value\":\"datahqtt\"},{\"name\":\"qcpcloo\",\"value\":\"datace\"}],\"\":{\"orn\":\"datasmnyfahidlscdow\",\"pirgdsqcbxkw\":\"datayjqzjtdkojbxkodc\"}}")
            .toObject(FilterActivity.class);
        Assertions.assertEquals("zpyrzazkal", model.name());
        Assertions.assertEquals("vmknwlbz", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.onInactiveMarkAs());
        Assertions.assertEquals("ntgsju", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("f", model.userProperties().get(0).name());
        Assertions.assertEquals("ehtrgybfumoro", model.items().value());
        Assertions.assertEquals("rutbfkynwwm", model.condition().value());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        FilterActivity model = new FilterActivity().withName("zpyrzazkal")
            .withDescription("vmknwlbz")
            .withState(ActivityState.ACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SUCCEEDED)
            .withDependsOn(Arrays.asList(
                new ActivityDependency().withActivity("ntgsju")
                    .withDependencyConditions(
                        Arrays.asList(DependencyCondition.COMPLETED, DependencyCondition.COMPLETED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("yjblafvvndkvbcrq")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.SKIPPED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("jodskqyjsdxgefk")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED))
                    .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("f").withValue("dataksywdtgz"),
                new UserProperty().withName("gqfl").withValue("datauxyakof"),
                new UserProperty().withName("soe").withValue("datahqtt"),
                new UserProperty().withName("qcpcloo").withValue("datace")))
            .withItems(new Expression().withValue("ehtrgybfumoro"))
            .withCondition(new Expression().withValue("rutbfkynwwm"));
        model = BinaryData.fromObject(model).toObject(FilterActivity.class);
        Assertions.assertEquals("zpyrzazkal", model.name());
        Assertions.assertEquals("vmknwlbz", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.onInactiveMarkAs());
        Assertions.assertEquals("ntgsju", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("f", model.userProperties().get(0).name());
        Assertions.assertEquals("ehtrgybfumoro", model.items().value());
        Assertions.assertEquals("rutbfkynwwm", model.condition().value());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
