// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.Expression;
import com.azure.resourcemanager.datafactory.models.FilterActivity;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class FilterActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        FilterActivity model = BinaryData.fromString(
            "{\"type\":\"Filter\",\"typeProperties\":{\"items\":{\"value\":\"esw\"},\"condition\":{\"value\":\"llqyvblfprskxhg\"}},\"name\":\"vgviycjulun\",\"description\":\"uficipibnjpiv\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"abmahjlahdpli\",\"dependencyConditions\":[\"Skipped\",\"Failed\",\"Skipped\"],\"\":{\"bmjheyntsdwxpa\":\"dataa\"}},{\"activity\":\"ubgrjkgkoxuedml\",\"dependencyConditions\":[\"Failed\"],\"\":{\"jywpkbvvjyenw\":\"datay\",\"hwlkfljooiiviwlf\":\"datagvhhouhlt\"}}],\"userProperties\":[{\"name\":\"ycyvxbrthwbit\",\"value\":\"datawwkofoqrvnhcu\"}],\"\":{\"pdhrqjjlsat\":\"datavkzmgvtempyfjahw\",\"q\":\"dataxsgarxtgexmxgq\",\"totubzasrwoxumn\":\"dataulyrtkvftl\"}}")
            .toObject(FilterActivity.class);
        Assertions.assertEquals("vgviycjulun", model.name());
        Assertions.assertEquals("uficipibnjpiv", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.onInactiveMarkAs());
        Assertions.assertEquals("abmahjlahdpli", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("ycyvxbrthwbit", model.userProperties().get(0).name());
        Assertions.assertEquals("esw", model.items().value());
        Assertions.assertEquals("llqyvblfprskxhg", model.condition().value());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        FilterActivity model = new FilterActivity().withName("vgviycjulun")
            .withDescription("uficipibnjpiv")
            .withState(ActivityState.INACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SUCCEEDED)
            .withDependsOn(Arrays.asList(
                new ActivityDependency().withActivity("abmahjlahdpli")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.FAILED,
                        DependencyCondition.SKIPPED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("ubgrjkgkoxuedml")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED))
                    .withAdditionalProperties(mapOf())))
            .withUserProperties(
                Arrays.asList(new UserProperty().withName("ycyvxbrthwbit").withValue("datawwkofoqrvnhcu")))
            .withItems(new Expression().withValue("esw"))
            .withCondition(new Expression().withValue("llqyvblfprskxhg"));
        model = BinaryData.fromObject(model).toObject(FilterActivity.class);
        Assertions.assertEquals("vgviycjulun", model.name());
        Assertions.assertEquals("uficipibnjpiv", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.onInactiveMarkAs());
        Assertions.assertEquals("abmahjlahdpli", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("ycyvxbrthwbit", model.userProperties().get(0).name());
        Assertions.assertEquals("esw", model.items().value());
        Assertions.assertEquals("llqyvblfprskxhg", model.condition().value());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
