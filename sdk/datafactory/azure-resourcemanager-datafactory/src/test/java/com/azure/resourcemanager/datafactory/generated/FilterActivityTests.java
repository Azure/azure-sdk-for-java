// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.Expression;
import com.azure.resourcemanager.datafactory.models.FilterActivity;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class FilterActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        FilterActivity model =
            BinaryData
                .fromString(
                    "{\"type\":\"Filter\",\"typeProperties\":{\"items\":{\"value\":\"rpxlfyytjm\"},\"condition\":{\"value\":\"roxvsclmt\"}},\"name\":\"kmlfcgk\",\"description\":\"itphzu\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"bbestyyml\",\"dependencyConditions\":[\"Succeeded\"],\"\":{\"grnyxri\":\"datapu\"}}],\"userProperties\":[{\"name\":\"kfudra\",\"value\":\"datamdcfwawzjhfa\"},{\"name\":\"ubcvnafxwhicac\",\"value\":\"datavi\"},{\"name\":\"lhommhaxt\",\"value\":\"datagrufbzgnrjfzba\"}],\"\":{\"wqstczpskzplbz\":\"datamkmqdfjeu\"}}")
                .toObject(FilterActivity.class);
        Assertions.assertEquals("kmlfcgk", model.name());
        Assertions.assertEquals("itphzu", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("bbestyyml", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("kfudra", model.userProperties().get(0).name());
        Assertions.assertEquals("rpxlfyytjm", model.items().value());
        Assertions.assertEquals("roxvsclmt", model.condition().value());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        FilterActivity model =
            new FilterActivity()
                .withName("kmlfcgk")
                .withDescription("itphzu")
                .withState(ActivityState.INACTIVE)
                .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
                .withDependsOn(
                    Arrays
                        .asList(
                            new ActivityDependency()
                                .withActivity("bbestyyml")
                                .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED))
                                .withAdditionalProperties(mapOf())))
                .withUserProperties(
                    Arrays
                        .asList(
                            new UserProperty().withName("kfudra").withValue("datamdcfwawzjhfa"),
                            new UserProperty().withName("ubcvnafxwhicac").withValue("datavi"),
                            new UserProperty().withName("lhommhaxt").withValue("datagrufbzgnrjfzba")))
                .withItems(new Expression().withValue("rpxlfyytjm"))
                .withCondition(new Expression().withValue("roxvsclmt"));
        model = BinaryData.fromObject(model).toObject(FilterActivity.class);
        Assertions.assertEquals("kmlfcgk", model.name());
        Assertions.assertEquals("itphzu", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("bbestyyml", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("kfudra", model.userProperties().get(0).name());
        Assertions.assertEquals("rpxlfyytjm", model.items().value());
        Assertions.assertEquals("roxvsclmt", model.condition().value());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
