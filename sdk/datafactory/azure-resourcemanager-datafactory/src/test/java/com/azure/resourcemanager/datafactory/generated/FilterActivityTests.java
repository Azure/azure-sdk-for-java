// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.Expression;
import com.azure.resourcemanager.datafactory.models.FilterActivity;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class FilterActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        FilterActivity model = BinaryData.fromString(
            "{\"type\":\"Filter\",\"typeProperties\":{\"items\":{\"value\":\"ckhqooqniqv\"},\"condition\":{\"value\":\"qsudtmkmgc\"}},\"name\":\"pv\",\"description\":\"ngvpsuk\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"gf\",\"dependencyConditions\":[\"Succeeded\",\"Skipped\",\"Succeeded\",\"Skipped\"],\"\":{\"tjtiidozfrgvqurr\":\"dataekoxylcbp\",\"vohjg\":\"datanijdr\",\"lzsgpoiccbzqko\":\"dataoiikr\"}},{\"activity\":\"ja\",\"dependencyConditions\":[\"Skipped\"],\"\":{\"ttpvtwgbf\":\"datakqnlzytazqsu\"}},{\"activity\":\"osdizpgcq\",\"dependencyConditions\":[\"Skipped\",\"Succeeded\",\"Skipped\"],\"\":{\"lhetgwv\":\"datap\",\"oqhamr\":\"dataenmue\",\"oixiduzrdvhgyj\":\"datatrny\"}},{\"activity\":\"mbj\",\"dependencyConditions\":[\"Skipped\",\"Completed\",\"Succeeded\"],\"\":{\"zzym\":\"datalrungsolxlxl\",\"iudelm\":\"datazz\",\"yxaj\":\"databx\"}}],\"userProperties\":[{\"name\":\"cgxwa\",\"value\":\"datauudnygtsjafvzd\"}],\"\":{\"vbnmzjwh\":\"datahuzybmsyzz\"}}")
            .toObject(FilterActivity.class);
        Assertions.assertEquals("pv", model.name());
        Assertions.assertEquals("ngvpsuk", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("gf", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("cgxwa", model.userProperties().get(0).name());
        Assertions.assertEquals("ckhqooqniqv", model.items().value());
        Assertions.assertEquals("qsudtmkmgc", model.condition().value());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        FilterActivity model = new FilterActivity().withName("pv")
            .withDescription("ngvpsuk")
            .withState(ActivityState.ACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
            .withDependsOn(Arrays.asList(
                new ActivityDependency().withActivity("gf")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED, DependencyCondition.SKIPPED,
                        DependencyCondition.SUCCEEDED, DependencyCondition.SKIPPED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("ja")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("osdizpgcq")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.SUCCEEDED,
                        DependencyCondition.SKIPPED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("mbj")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.COMPLETED,
                        DependencyCondition.SUCCEEDED))
                    .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("cgxwa").withValue("datauudnygtsjafvzd")))
            .withItems(new Expression().withValue("ckhqooqniqv"))
            .withCondition(new Expression().withValue("qsudtmkmgc"));
        model = BinaryData.fromObject(model).toObject(FilterActivity.class);
        Assertions.assertEquals("pv", model.name());
        Assertions.assertEquals("ngvpsuk", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("gf", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("cgxwa", model.userProperties().get(0).name());
        Assertions.assertEquals("ckhqooqniqv", model.items().value());
        Assertions.assertEquals("qsudtmkmgc", model.condition().value());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
