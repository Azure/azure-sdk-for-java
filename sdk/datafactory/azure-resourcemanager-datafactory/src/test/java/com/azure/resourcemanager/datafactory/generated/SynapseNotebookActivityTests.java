// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.BigDataPoolParametrizationReference;
import com.azure.resourcemanager.datafactory.models.BigDataPoolReferenceType;
import com.azure.resourcemanager.datafactory.models.ConfigurationType;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.NotebookParameter;
import com.azure.resourcemanager.datafactory.models.NotebookParameterType;
import com.azure.resourcemanager.datafactory.models.NotebookReferenceType;
import com.azure.resourcemanager.datafactory.models.SparkConfigurationParametrizationReference;
import com.azure.resourcemanager.datafactory.models.SparkConfigurationReferenceType;
import com.azure.resourcemanager.datafactory.models.SynapseNotebookActivity;
import com.azure.resourcemanager.datafactory.models.SynapseNotebookReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SynapseNotebookActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SynapseNotebookActivity model = BinaryData.fromString(
            "{\"type\":\"SynapseNotebook\",\"typeProperties\":{\"notebook\":{\"type\":\"NotebookReference\",\"referenceName\":\"datad\"},\"sparkPool\":{\"type\":\"BigDataPoolReference\",\"referenceName\":\"datadarnhpxzjkjbvzpc\"},\"parameters\":{\"igohafudt\":{\"value\":\"datanhtds\",\"type\":\"float\"},\"nfhcqgjvlnvfzlmu\":{\"value\":\"datawepueq\",\"type\":\"string\"},\"twgjlxdd\":{\"value\":\"datap\",\"type\":\"bool\"}},\"executorSize\":\"datafnqazv\",\"conf\":\"dataspjdxaytzkdqim\",\"driverSize\":\"dataaijc\",\"numExecutors\":\"datalkyrssyy\",\"configurationType\":\"Default\",\"targetSparkConfiguration\":{\"type\":\"SparkConfigurationReference\",\"referenceName\":\"datanyl\"},\"sparkConfig\":{\"jrrolwrv\":\"datarxykplvjsqazecdo\"}},\"linkedServiceName\":{\"referenceName\":\"aqxstykus\",\"parameters\":{\"oexwarqazfsrvzyy\":\"datagjexiqejvpdrc\",\"cspidcn\":\"dataevhazwewhobxlkd\",\"alk\":\"datajfgxynuxv\"}},\"policy\":{\"timeout\":\"datazwow\",\"retry\":\"dataulqgaeqnlxtqlbje\",\"retryIntervalInSeconds\":1914558705,\"secureInput\":false,\"secureOutput\":false,\"\":{\"dvxmkzgrrgrkovs\":\"datazuze\"}},\"name\":\"ebwdvuvq\",\"description\":\"plzdoamqkdwa\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"x\",\"dependencyConditions\":[\"Completed\"],\"\":{\"niv\":\"dataradfiwjounvfqy\"}},{\"activity\":\"mdfw\",\"dependencyConditions\":[\"Succeeded\"],\"\":{\"qzbvyrvfxcbatmv\":\"datadjwjmrbphtllkpk\"}},{\"activity\":\"rjidxiosy\",\"dependencyConditions\":[\"Completed\",\"Completed\",\"Skipped\"],\"\":{\"tg\":\"dataj\"}},{\"activity\":\"hgyl\",\"dependencyConditions\":[\"Failed\"],\"\":{\"nsknnnpyob\":\"datahbmowmh\",\"rijd\":\"datainyqsdsuewf\"}}],\"userProperties\":[{\"name\":\"crtmvtfeyopgeiw\",\"value\":\"databmcizmggv\"},{\"name\":\"xvgwrqywa\",\"value\":\"datagzaxq\"}],\"\":{\"m\":\"datarkyimc\",\"cyxcluvj\":\"datahwtlli\",\"jpld\":\"datap\",\"cntgqyqwmzzcgbg\":\"datahshcjgoobltoar\"}}")
            .toObject(SynapseNotebookActivity.class);
        Assertions.assertEquals("ebwdvuvq", model.name());
        Assertions.assertEquals("plzdoamqkdwa", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.onInactiveMarkAs());
        Assertions.assertEquals("x", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("crtmvtfeyopgeiw", model.userProperties().get(0).name());
        Assertions.assertEquals("aqxstykus", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1914558705, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals(NotebookReferenceType.NOTEBOOK_REFERENCE, model.notebook().type());
        Assertions.assertEquals(BigDataPoolReferenceType.BIG_DATA_POOL_REFERENCE, model.sparkPool().type());
        Assertions.assertEquals(NotebookParameterType.FLOAT, model.parameters().get("igohafudt").type());
        Assertions.assertEquals(ConfigurationType.DEFAULT, model.configurationType());
        Assertions.assertEquals(SparkConfigurationReferenceType.SPARK_CONFIGURATION_REFERENCE,
            model.targetSparkConfiguration().type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SynapseNotebookActivity model = new SynapseNotebookActivity().withName("ebwdvuvq")
            .withDescription("plzdoamqkdwa")
            .withState(ActivityState.INACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SUCCEEDED)
            .withDependsOn(Arrays.asList(
                new ActivityDependency().withActivity("x")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("mdfw")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("rjidxiosy")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED,
                        DependencyCondition.COMPLETED, DependencyCondition.SKIPPED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("hgyl")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED))
                    .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("crtmvtfeyopgeiw").withValue("databmcizmggv"),
                new UserProperty().withName("xvgwrqywa").withValue("datagzaxq")))
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("aqxstykus")
                .withParameters(mapOf("oexwarqazfsrvzyy", "datagjexiqejvpdrc", "cspidcn", "dataevhazwewhobxlkd", "alk",
                    "datajfgxynuxv")))
            .withPolicy(new ActivityPolicy().withTimeout("datazwow")
                .withRetry("dataulqgaeqnlxtqlbje")
                .withRetryIntervalInSeconds(1914558705)
                .withSecureInput(false)
                .withSecureOutput(false)
                .withAdditionalProperties(mapOf()))
            .withNotebook(new SynapseNotebookReference().withType(NotebookReferenceType.NOTEBOOK_REFERENCE)
                .withReferenceName("datad"))
            .withSparkPool(
                new BigDataPoolParametrizationReference().withType(BigDataPoolReferenceType.BIG_DATA_POOL_REFERENCE)
                    .withReferenceName("datadarnhpxzjkjbvzpc"))
            .withParameters(
                mapOf("igohafudt", new NotebookParameter().withValue("datanhtds").withType(NotebookParameterType.FLOAT),
                    "nfhcqgjvlnvfzlmu",
                    new NotebookParameter().withValue("datawepueq").withType(NotebookParameterType.STRING), "twgjlxdd",
                    new NotebookParameter().withValue("datap").withType(NotebookParameterType.BOOL)))
            .withExecutorSize("datafnqazv")
            .withConf("dataspjdxaytzkdqim")
            .withDriverSize("dataaijc")
            .withNumExecutors("datalkyrssyy")
            .withConfigurationType(ConfigurationType.DEFAULT)
            .withTargetSparkConfiguration(new SparkConfigurationParametrizationReference()
                .withType(SparkConfigurationReferenceType.SPARK_CONFIGURATION_REFERENCE)
                .withReferenceName("datanyl"))
            .withSparkConfig(mapOf("jrrolwrv", "datarxykplvjsqazecdo"));
        model = BinaryData.fromObject(model).toObject(SynapseNotebookActivity.class);
        Assertions.assertEquals("ebwdvuvq", model.name());
        Assertions.assertEquals("plzdoamqkdwa", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.onInactiveMarkAs());
        Assertions.assertEquals("x", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("crtmvtfeyopgeiw", model.userProperties().get(0).name());
        Assertions.assertEquals("aqxstykus", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1914558705, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals(NotebookReferenceType.NOTEBOOK_REFERENCE, model.notebook().type());
        Assertions.assertEquals(BigDataPoolReferenceType.BIG_DATA_POOL_REFERENCE, model.sparkPool().type());
        Assertions.assertEquals(NotebookParameterType.FLOAT, model.parameters().get("igohafudt").type());
        Assertions.assertEquals(ConfigurationType.DEFAULT, model.configurationType());
        Assertions.assertEquals(SparkConfigurationReferenceType.SPARK_CONFIGURATION_REFERENCE,
            model.targetSparkConfiguration().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
