// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.BigDataPoolParametrizationReference;
import com.azure.resourcemanager.datafactory.models.BigDataPoolReferenceType;
import com.azure.resourcemanager.datafactory.models.ConfigurationType;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.NotebookParameter;
import com.azure.resourcemanager.datafactory.models.NotebookParameterType;
import com.azure.resourcemanager.datafactory.models.NotebookReferenceType;
import com.azure.resourcemanager.datafactory.models.SparkConfigurationParametrizationReference;
import com.azure.resourcemanager.datafactory.models.SparkConfigurationReferenceType;
import com.azure.resourcemanager.datafactory.models.SynapseNotebookActivity;
import com.azure.resourcemanager.datafactory.models.SynapseNotebookReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SynapseNotebookActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SynapseNotebookActivity model = BinaryData.fromString(
            "{\"type\":\"SynapseNotebook\",\"typeProperties\":{\"notebook\":{\"type\":\"NotebookReference\",\"referenceName\":\"datalfetlmmdgeb\"},\"sparkPool\":{\"type\":\"BigDataPoolReference\",\"referenceName\":\"dataxattthazqdweryzg\"},\"parameters\":{\"ifshsbtpldzi\":{\"value\":\"datandolezbyaszuo\",\"type\":\"int\"}},\"executorSize\":\"datatcnqkwghdaebya\",\"conf\":\"datakfapzf\",\"driverSize\":\"datavkorsrpmrhekxm\",\"numExecutors\":\"dataiq\",\"configurationType\":\"Artifact\",\"targetSparkConfiguration\":{\"type\":\"SparkConfigurationReference\",\"referenceName\":\"datawbdk\"},\"sparkConfig\":{\"kwjmsogzc\":\"datadaehpfrexb\",\"j\":\"dataz\",\"lrzvjvlnafpfou\":\"datawqiawjevdnpkdmq\"}},\"linkedServiceName\":{\"referenceName\":\"aqba\",\"parameters\":{\"urxwtfpeuftpjldl\":\"datajwcdjxqxfvk\",\"mmbxkbtberyql\":\"dataforvsypjytgz\",\"gm\":\"datazebmikojpggwuwa\"}},\"policy\":{\"timeout\":\"datagcnllqfbeuugir\",\"retry\":\"dataezpsydkgtdwlvsf\",\"retryIntervalInSeconds\":1265498269,\"secureInput\":true,\"secureOutput\":true,\"\":{\"mjgbz\":\"datazdcthhe\",\"wvdwmuytkkfoton\":\"datadonyleis\"}},\"name\":\"r\",\"description\":\"ozu\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"kyzyi\",\"dependencyConditions\":[\"Succeeded\",\"Skipped\",\"Failed\"],\"\":{\"drpwck\":\"datafqkeaipbkenqc\",\"tlbaxiaerpoasy\":\"datavtknu\"}},{\"activity\":\"zebbrqnnrdb\",\"dependencyConditions\":[\"Skipped\",\"Completed\",\"Skipped\"],\"\":{\"tmqymgiy\":\"dataniwk\",\"pivsowcwehjqy\":\"datagee\",\"nxcayyvri\":\"datallepppdfrgobr\"}},{\"activity\":\"vmmef\",\"dependencyConditions\":[\"Failed\",\"Succeeded\",\"Succeeded\",\"Failed\"],\"\":{\"vriglutxzasc\":\"dataixczxk\"}},{\"activity\":\"lwfefygnafpi\",\"dependencyConditions\":[\"Succeeded\",\"Completed\"],\"\":{\"aypsvedxphf\":\"datau\",\"qqwxjnkbes\":\"datao\",\"qoujhmdpe\":\"datammitvviqs\"}}],\"userProperties\":[{\"name\":\"qwjqevwtkrjqnciw\",\"value\":\"databjwngrrpdt\"},{\"name\":\"nhctkgllmpku\",\"value\":\"datablucxyhtkyq\"},{\"name\":\"ynvtimpgusroqk\",\"value\":\"datawkvojr\"}],\"\":{\"hkplxbpxzdu\":\"datajtjqhfkwsmgkomqf\"}}")
            .toObject(SynapseNotebookActivity.class);
        Assertions.assertEquals("r", model.name());
        Assertions.assertEquals("ozu", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.onInactiveMarkAs());
        Assertions.assertEquals("kyzyi", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("qwjqevwtkrjqnciw", model.userProperties().get(0).name());
        Assertions.assertEquals("aqba", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1265498269, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals(NotebookReferenceType.NOTEBOOK_REFERENCE, model.notebook().type());
        Assertions.assertEquals(BigDataPoolReferenceType.BIG_DATA_POOL_REFERENCE, model.sparkPool().type());
        Assertions.assertEquals(NotebookParameterType.INT, model.parameters().get("ifshsbtpldzi").type());
        Assertions.assertEquals(ConfigurationType.ARTIFACT, model.configurationType());
        Assertions.assertEquals(SparkConfigurationReferenceType.SPARK_CONFIGURATION_REFERENCE,
            model.targetSparkConfiguration().type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SynapseNotebookActivity model = new SynapseNotebookActivity().withName("r")
            .withDescription("ozu")
            .withState(ActivityState.INACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SUCCEEDED)
            .withDependsOn(Arrays.asList(
                new ActivityDependency().withActivity("kyzyi")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED, DependencyCondition.SKIPPED,
                        DependencyCondition.FAILED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("zebbrqnnrdb")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.COMPLETED,
                        DependencyCondition.SKIPPED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("vmmef")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED, DependencyCondition.SUCCEEDED,
                        DependencyCondition.SUCCEEDED, DependencyCondition.FAILED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("lwfefygnafpi")
                    .withDependencyConditions(
                        Arrays.asList(DependencyCondition.SUCCEEDED, DependencyCondition.COMPLETED))
                    .withAdditionalProperties(mapOf())))
            .withUserProperties(
                Arrays.asList(new UserProperty().withName("qwjqevwtkrjqnciw").withValue("databjwngrrpdt"),
                    new UserProperty().withName("nhctkgllmpku").withValue("datablucxyhtkyq"),
                    new UserProperty().withName("ynvtimpgusroqk").withValue("datawkvojr")))
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("aqba")
                .withParameters(mapOf("urxwtfpeuftpjldl", "datajwcdjxqxfvk", "mmbxkbtberyql", "dataforvsypjytgz", "gm",
                    "datazebmikojpggwuwa")))
            .withPolicy(new ActivityPolicy().withTimeout("datagcnllqfbeuugir")
                .withRetry("dataezpsydkgtdwlvsf")
                .withRetryIntervalInSeconds(1265498269)
                .withSecureInput(true)
                .withSecureOutput(true)
                .withAdditionalProperties(mapOf()))
            .withNotebook(new SynapseNotebookReference().withType(NotebookReferenceType.NOTEBOOK_REFERENCE)
                .withReferenceName("datalfetlmmdgeb"))
            .withSparkPool(
                new BigDataPoolParametrizationReference().withType(BigDataPoolReferenceType.BIG_DATA_POOL_REFERENCE)
                    .withReferenceName("dataxattthazqdweryzg"))
            .withParameters(mapOf("ifshsbtpldzi",
                new NotebookParameter().withValue("datandolezbyaszuo").withType(NotebookParameterType.INT)))
            .withExecutorSize("datatcnqkwghdaebya")
            .withConf("datakfapzf")
            .withDriverSize("datavkorsrpmrhekxm")
            .withNumExecutors("dataiq")
            .withConfigurationType(ConfigurationType.ARTIFACT)
            .withTargetSparkConfiguration(new SparkConfigurationParametrizationReference()
                .withType(SparkConfigurationReferenceType.SPARK_CONFIGURATION_REFERENCE)
                .withReferenceName("datawbdk"))
            .withSparkConfig(
                mapOf("kwjmsogzc", "datadaehpfrexb", "j", "dataz", "lrzvjvlnafpfou", "datawqiawjevdnpkdmq"));
        model = BinaryData.fromObject(model).toObject(SynapseNotebookActivity.class);
        Assertions.assertEquals("r", model.name());
        Assertions.assertEquals("ozu", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.onInactiveMarkAs());
        Assertions.assertEquals("kyzyi", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("qwjqevwtkrjqnciw", model.userProperties().get(0).name());
        Assertions.assertEquals("aqba", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1265498269, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals(NotebookReferenceType.NOTEBOOK_REFERENCE, model.notebook().type());
        Assertions.assertEquals(BigDataPoolReferenceType.BIG_DATA_POOL_REFERENCE, model.sparkPool().type());
        Assertions.assertEquals(NotebookParameterType.INT, model.parameters().get("ifshsbtpldzi").type());
        Assertions.assertEquals(ConfigurationType.ARTIFACT, model.configurationType());
        Assertions.assertEquals(SparkConfigurationReferenceType.SPARK_CONFIGURATION_REFERENCE,
            model.targetSparkConfiguration().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
