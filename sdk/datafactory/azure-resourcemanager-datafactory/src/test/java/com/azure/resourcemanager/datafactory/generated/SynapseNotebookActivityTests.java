// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.BigDataPoolParametrizationReference;
import com.azure.resourcemanager.datafactory.models.BigDataPoolReferenceType;
import com.azure.resourcemanager.datafactory.models.ConfigurationType;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.NotebookParameter;
import com.azure.resourcemanager.datafactory.models.NotebookParameterType;
import com.azure.resourcemanager.datafactory.models.NotebookReferenceType;
import com.azure.resourcemanager.datafactory.models.SparkConfigurationParametrizationReference;
import com.azure.resourcemanager.datafactory.models.SparkConfigurationReferenceType;
import com.azure.resourcemanager.datafactory.models.SynapseNotebookActivity;
import com.azure.resourcemanager.datafactory.models.SynapseNotebookReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SynapseNotebookActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SynapseNotebookActivity model =
            BinaryData
                .fromString(
                    "{\"type\":\"SynapseNotebook\",\"typeProperties\":{\"notebook\":{\"type\":\"NotebookReference\",\"referenceName\":\"datalntvfqrjf\"},\"sparkPool\":{\"type\":\"BigDataPoolReference\",\"referenceName\":\"dataspdsrax\"},\"parameters\":{\"kzcfxzcpew\":{\"value\":\"datan\",\"type\":\"float\"},\"reonsqqcqgnfdimg\":{\"value\":\"datapwe\",\"type\":\"bool\"},\"lssqv\":{\"value\":\"datapmftzira\",\"type\":\"string\"}},\"executorSize\":\"datahznltjxstjgey\",\"conf\":\"dataswnjonipjqw\",\"driverSize\":\"dataxswineyjerf\",\"numExecutors\":\"datamlppnmrftnf\",\"configurationType\":\"Artifact\",\"targetSparkConfiguration\":{\"type\":\"SparkConfigurationReference\",\"referenceName\":\"dataftklpbgk\"},\"sparkConfig\":{\"iyktsi\":\"datafnszeemsfpm\",\"seqlvqkkcebj\":\"datasnikmwnzcen\"}},\"linkedServiceName\":{\"referenceName\":\"cuj\",\"parameters\":{\"lkvaiolfrceoc\":\"dataoeqpvkkpgif\",\"mwrb\":\"datasreicpsviajk\",\"ccr\":\"dataejh\",\"ufupadtpbbzjev\":\"dataayqskkp\"}},\"policy\":{\"timeout\":\"datanyzhbtnagkn\",\"retry\":\"dataeno\",\"retryIntervalInSeconds\":622563068,\"secureInput\":true,\"secureOutput\":true,\"\":{\"tlnrtwrnuklsh\":\"datah\",\"httbdxjtvpadr\":\"dataqrht\",\"adxnrtkdte\":\"dataxqud\"}},\"name\":\"un\",\"description\":\"pv\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"bgvyztoqdzw\",\"dependencyConditions\":[\"Skipped\",\"Skipped\",\"Skipped\"],\"\":{\"qortxeuwbf\":\"datacrsr\",\"zbuhqmmady\":\"datazwisxsasgfmrz\"}},{\"activity\":\"c\",\"dependencyConditions\":[\"Failed\"],\"\":{\"cgkikbuaqdopxbnr\":\"datanlabogmfetq\",\"dbpuy\":\"datangtssoiiyp\",\"s\":\"dataxygztlqszwcwan\"}}],\"userProperties\":[{\"name\":\"qeomagoqfmkslbes\",\"value\":\"datadlskwfiwvdqmqq\"}],\"\":{\"ptmpcpiros\":\"dataotogo\",\"h\":\"dataxiwmwrbruuw\",\"hdvqgaa\":\"datakynfxxldmxms\"}}")
                .toObject(SynapseNotebookActivity.class);
        Assertions.assertEquals("un", model.name());
        Assertions.assertEquals("pv", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("bgvyztoqdzw", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("qeomagoqfmkslbes", model.userProperties().get(0).name());
        Assertions.assertEquals("cuj", model.linkedServiceName().referenceName());
        Assertions.assertEquals(622563068, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals(NotebookReferenceType.NOTEBOOK_REFERENCE, model.notebook().type());
        Assertions.assertEquals(BigDataPoolReferenceType.BIG_DATA_POOL_REFERENCE, model.sparkPool().type());
        Assertions.assertEquals(NotebookParameterType.FLOAT, model.parameters().get("kzcfxzcpew").type());
        Assertions.assertEquals(ConfigurationType.ARTIFACT, model.configurationType());
        Assertions
            .assertEquals(
                SparkConfigurationReferenceType.SPARK_CONFIGURATION_REFERENCE, model.targetSparkConfiguration().type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SynapseNotebookActivity model =
            new SynapseNotebookActivity()
                .withName("un")
                .withDescription("pv")
                .withState(ActivityState.INACTIVE)
                .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
                .withDependsOn(
                    Arrays
                        .asList(
                            new ActivityDependency()
                                .withActivity("bgvyztoqdzw")
                                .withDependencyConditions(
                                    Arrays
                                        .asList(
                                            DependencyCondition.SKIPPED,
                                            DependencyCondition.SKIPPED,
                                            DependencyCondition.SKIPPED))
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency()
                                .withActivity("c")
                                .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED))
                                .withAdditionalProperties(mapOf())))
                .withUserProperties(
                    Arrays.asList(new UserProperty().withName("qeomagoqfmkslbes").withValue("datadlskwfiwvdqmqq")))
                .withLinkedServiceName(
                    new LinkedServiceReference()
                        .withReferenceName("cuj")
                        .withParameters(
                            mapOf(
                                "lkvaiolfrceoc",
                                "dataoeqpvkkpgif",
                                "mwrb",
                                "datasreicpsviajk",
                                "ccr",
                                "dataejh",
                                "ufupadtpbbzjev",
                                "dataayqskkp")))
                .withPolicy(
                    new ActivityPolicy()
                        .withTimeout("datanyzhbtnagkn")
                        .withRetry("dataeno")
                        .withRetryIntervalInSeconds(622563068)
                        .withSecureInput(true)
                        .withSecureOutput(true)
                        .withAdditionalProperties(mapOf()))
                .withNotebook(
                    new SynapseNotebookReference()
                        .withType(NotebookReferenceType.NOTEBOOK_REFERENCE)
                        .withReferenceName("datalntvfqrjf"))
                .withSparkPool(
                    new BigDataPoolParametrizationReference()
                        .withType(BigDataPoolReferenceType.BIG_DATA_POOL_REFERENCE)
                        .withReferenceName("dataspdsrax"))
                .withParameters(
                    mapOf(
                        "kzcfxzcpew",
                        new NotebookParameter().withValue("datan").withType(NotebookParameterType.FLOAT),
                        "reonsqqcqgnfdimg",
                        new NotebookParameter().withValue("datapwe").withType(NotebookParameterType.BOOL),
                        "lssqv",
                        new NotebookParameter().withValue("datapmftzira").withType(NotebookParameterType.STRING)))
                .withExecutorSize("datahznltjxstjgey")
                .withConf("dataswnjonipjqw")
                .withDriverSize("dataxswineyjerf")
                .withNumExecutors("datamlppnmrftnf")
                .withConfigurationType(ConfigurationType.ARTIFACT)
                .withTargetSparkConfiguration(
                    new SparkConfigurationParametrizationReference()
                        .withType(SparkConfigurationReferenceType.SPARK_CONFIGURATION_REFERENCE)
                        .withReferenceName("dataftklpbgk"))
                .withSparkConfig(mapOf("iyktsi", "datafnszeemsfpm", "seqlvqkkcebj", "datasnikmwnzcen"));
        model = BinaryData.fromObject(model).toObject(SynapseNotebookActivity.class);
        Assertions.assertEquals("un", model.name());
        Assertions.assertEquals("pv", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("bgvyztoqdzw", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("qeomagoqfmkslbes", model.userProperties().get(0).name());
        Assertions.assertEquals("cuj", model.linkedServiceName().referenceName());
        Assertions.assertEquals(622563068, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals(NotebookReferenceType.NOTEBOOK_REFERENCE, model.notebook().type());
        Assertions.assertEquals(BigDataPoolReferenceType.BIG_DATA_POOL_REFERENCE, model.sparkPool().type());
        Assertions.assertEquals(NotebookParameterType.FLOAT, model.parameters().get("kzcfxzcpew").type());
        Assertions.assertEquals(ConfigurationType.ARTIFACT, model.configurationType());
        Assertions
            .assertEquals(
                SparkConfigurationReferenceType.SPARK_CONFIGURATION_REFERENCE, model.targetSparkConfiguration().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
