// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.BigDataPoolParametrizationReference;
import com.azure.resourcemanager.datafactory.models.BigDataPoolReferenceType;
import com.azure.resourcemanager.datafactory.models.ConfigurationType;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.NotebookParameter;
import com.azure.resourcemanager.datafactory.models.NotebookParameterType;
import com.azure.resourcemanager.datafactory.models.NotebookReferenceType;
import com.azure.resourcemanager.datafactory.models.SparkConfigurationParametrizationReference;
import com.azure.resourcemanager.datafactory.models.SparkConfigurationReferenceType;
import com.azure.resourcemanager.datafactory.models.SynapseNotebookActivity;
import com.azure.resourcemanager.datafactory.models.SynapseNotebookReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SynapseNotebookActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SynapseNotebookActivity model = BinaryData.fromString(
            "{\"type\":\"SynapseNotebook\",\"typeProperties\":{\"notebook\":{\"type\":\"NotebookReference\",\"referenceName\":\"datapfdhfp\"},\"sparkPool\":{\"type\":\"BigDataPoolReference\",\"referenceName\":\"datahggaziaps\"},\"parameters\":{\"gmeiihabo\":{\"value\":\"datamieheqmtet\",\"type\":\"string\"}},\"executorSize\":\"datargetnc\",\"conf\":\"datajwjrpljkcqed\",\"driverSize\":\"dataeefzlwohobaaccg\",\"numExecutors\":\"datai\",\"configurationType\":\"Artifact\",\"targetSparkConfiguration\":{\"type\":\"SparkConfigurationReference\",\"referenceName\":\"dataoeiqhbrdcgmyjm\"},\"sparkConfig\":{\"bzvink\":\"datakpbrr\"}},\"linkedServiceName\":{\"referenceName\":\"eblrnu\",\"parameters\":{\"musudhjoshmmzotc\":\"datan\",\"difbeott\":\"dataffmik\"}},\"policy\":{\"timeout\":\"dataonejpjzqb\",\"retry\":\"datatv\",\"retryIntervalInSeconds\":148980075,\"secureInput\":false,\"secureOutput\":false,\"\":{\"bdqobngjbeihcaxk\":\"datalhnix\",\"vbcxnni\":\"datavr\"}},\"name\":\"nfuvesmepqrkjyp\",\"description\":\"vnotbenfshf\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"g\",\"dependencyConditions\":[\"Completed\",\"Failed\",\"Failed\"],\"\":{\"duodp\":\"datavm\",\"ggn\":\"datati\",\"pqwucprpw\":\"dataocqaejlebcy\"}},{\"activity\":\"g\",\"dependencyConditions\":[\"Succeeded\",\"Skipped\"],\"\":{\"aoc\":\"datakefwmqialebcto\",\"oyjdnzrcjokgthyd\":\"datapjsfhxhulrek\"}},{\"activity\":\"zrr\",\"dependencyConditions\":[\"Completed\"],\"\":{\"vyceks\":\"datasoivaoryefgw\"}}],\"userProperties\":[{\"name\":\"jtgmfjzqvi\",\"value\":\"datadhixd\"}],\"\":{\"yzjdrkcs\":\"datacsmcqskrjnqaa\",\"sfztlxqhyyxhzgx\":\"dataeox\"}}")
            .toObject(SynapseNotebookActivity.class);
        Assertions.assertEquals("nfuvesmepqrkjyp", model.name());
        Assertions.assertEquals("vnotbenfshf", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.onInactiveMarkAs());
        Assertions.assertEquals("g", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("jtgmfjzqvi", model.userProperties().get(0).name());
        Assertions.assertEquals("eblrnu", model.linkedServiceName().referenceName());
        Assertions.assertEquals(148980075, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals(NotebookReferenceType.NOTEBOOK_REFERENCE, model.notebook().type());
        Assertions.assertEquals(BigDataPoolReferenceType.BIG_DATA_POOL_REFERENCE, model.sparkPool().type());
        Assertions.assertEquals(NotebookParameterType.STRING, model.parameters().get("gmeiihabo").type());
        Assertions.assertEquals(ConfigurationType.ARTIFACT, model.configurationType());
        Assertions.assertEquals(SparkConfigurationReferenceType.SPARK_CONFIGURATION_REFERENCE,
            model.targetSparkConfiguration().type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SynapseNotebookActivity model = new SynapseNotebookActivity().withName("nfuvesmepqrkjyp")
            .withDescription("vnotbenfshf")
            .withState(ActivityState.ACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SUCCEEDED)
            .withDependsOn(Arrays.asList(
                new ActivityDependency().withActivity("g")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED, DependencyCondition.FAILED,
                        DependencyCondition.FAILED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("g")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED, DependencyCondition.SKIPPED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("zrr")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED))
                    .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("jtgmfjzqvi").withValue("datadhixd")))
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("eblrnu")
                .withParameters(mapOf("musudhjoshmmzotc", "datan", "difbeott", "dataffmik")))
            .withPolicy(new ActivityPolicy().withTimeout("dataonejpjzqb")
                .withRetry("datatv")
                .withRetryIntervalInSeconds(148980075)
                .withSecureInput(false)
                .withSecureOutput(false)
                .withAdditionalProperties(mapOf()))
            .withNotebook(new SynapseNotebookReference().withType(NotebookReferenceType.NOTEBOOK_REFERENCE)
                .withReferenceName("datapfdhfp"))
            .withSparkPool(
                new BigDataPoolParametrizationReference().withType(BigDataPoolReferenceType.BIG_DATA_POOL_REFERENCE)
                    .withReferenceName("datahggaziaps"))
            .withParameters(mapOf("gmeiihabo",
                new NotebookParameter().withValue("datamieheqmtet").withType(NotebookParameterType.STRING)))
            .withExecutorSize("datargetnc")
            .withConf("datajwjrpljkcqed")
            .withDriverSize("dataeefzlwohobaaccg")
            .withNumExecutors("datai")
            .withConfigurationType(ConfigurationType.ARTIFACT)
            .withTargetSparkConfiguration(new SparkConfigurationParametrizationReference()
                .withType(SparkConfigurationReferenceType.SPARK_CONFIGURATION_REFERENCE)
                .withReferenceName("dataoeiqhbrdcgmyjm"))
            .withSparkConfig(mapOf("bzvink", "datakpbrr"));
        model = BinaryData.fromObject(model).toObject(SynapseNotebookActivity.class);
        Assertions.assertEquals("nfuvesmepqrkjyp", model.name());
        Assertions.assertEquals("vnotbenfshf", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.onInactiveMarkAs());
        Assertions.assertEquals("g", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("jtgmfjzqvi", model.userProperties().get(0).name());
        Assertions.assertEquals("eblrnu", model.linkedServiceName().referenceName());
        Assertions.assertEquals(148980075, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals(NotebookReferenceType.NOTEBOOK_REFERENCE, model.notebook().type());
        Assertions.assertEquals(BigDataPoolReferenceType.BIG_DATA_POOL_REFERENCE, model.sparkPool().type());
        Assertions.assertEquals(NotebookParameterType.STRING, model.parameters().get("gmeiihabo").type());
        Assertions.assertEquals(ConfigurationType.ARTIFACT, model.configurationType());
        Assertions.assertEquals(SparkConfigurationReferenceType.SPARK_CONFIGURATION_REFERENCE,
            model.targetSparkConfiguration().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
