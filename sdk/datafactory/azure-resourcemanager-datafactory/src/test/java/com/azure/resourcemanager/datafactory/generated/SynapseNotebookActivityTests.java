// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.BigDataPoolParametrizationReference;
import com.azure.resourcemanager.datafactory.models.BigDataPoolReferenceType;
import com.azure.resourcemanager.datafactory.models.ConfigurationType;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.NotebookParameter;
import com.azure.resourcemanager.datafactory.models.NotebookParameterType;
import com.azure.resourcemanager.datafactory.models.NotebookReferenceType;
import com.azure.resourcemanager.datafactory.models.SparkConfigurationParametrizationReference;
import com.azure.resourcemanager.datafactory.models.SparkConfigurationReferenceType;
import com.azure.resourcemanager.datafactory.models.SynapseNotebookActivity;
import com.azure.resourcemanager.datafactory.models.SynapseNotebookReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SynapseNotebookActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SynapseNotebookActivity model = BinaryData.fromString(
            "{\"type\":\"SynapseNotebook\",\"typeProperties\":{\"notebook\":{\"type\":\"NotebookReference\",\"referenceName\":\"dataapsypgmmieheq\"},\"sparkPool\":{\"type\":\"BigDataPoolReference\",\"referenceName\":\"datatny\"},\"parameters\":{\"r\":{\"value\":\"dataiihabojargetncfl\",\"type\":\"float\"},\"acc\":{\"value\":\"datajkcqednaeefzlwoh\",\"type\":\"int\"},\"gmyjmcwnkpbrr\":{\"value\":\"datavixflcnoeiqhb\",\"type\":\"int\"},\"rsandmusud\":{\"value\":\"datazvinkktebl\",\"type\":\"int\"}},\"executorSize\":\"dataoshmmz\",\"conf\":\"datacpff\",\"driverSize\":\"datakfdi\",\"numExecutors\":\"dataeott\",\"configurationType\":\"Artifact\",\"targetSparkConfiguration\":{\"type\":\"SparkConfigurationReference\",\"referenceName\":\"dataejpjzqbdutvnlowv\"},\"sparkConfig\":{\"qobngjbeihcaxkiv\":\"dataalhnixob\",\"nfuvesmepqrkjyp\":\"datayvbcxnni\",\"fshfmw\":\"datasvnotbe\"}},\"linkedServiceName\":{\"referenceName\":\"exi\",\"parameters\":{\"isggn\":\"datadtjcyvmsduodpm\",\"pqwucprpw\":\"dataocqaejlebcy\",\"zdkcike\":\"datag\"}},\"policy\":{\"timeout\":\"dataqial\",\"retry\":\"datactoraocepjs\",\"retryIntervalInSeconds\":303046267,\"secureInput\":true,\"secureOutput\":true,\"\":{\"zrcjokgthydyzrr\":\"dataroyjd\",\"uesoivaoryefgw\":\"datal\"}},\"name\":\"vyceks\",\"description\":\"t\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"qvindhixddcocs\",\"dependencyConditions\":[\"Succeeded\",\"Succeeded\"],\"\":{\"qaaiyz\":\"dataj\"}}],\"userProperties\":[{\"name\":\"kcsheoxss\",\"value\":\"dataztlxqhyyxhzgxk\"},{\"name\":\"cqpvrrmlk\",\"value\":\"dataroqsdvxddsfyl\"},{\"name\":\"okbriykrxaevbura\",\"value\":\"dataswnnsb\"}],\"\":{\"ojyn\":\"datamxbcn\"}}")
            .toObject(SynapseNotebookActivity.class);
        Assertions.assertEquals("vyceks", model.name());
        Assertions.assertEquals("t", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.onInactiveMarkAs());
        Assertions.assertEquals("qvindhixddcocs", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("kcsheoxss", model.userProperties().get(0).name());
        Assertions.assertEquals("exi", model.linkedServiceName().referenceName());
        Assertions.assertEquals(303046267, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals(NotebookReferenceType.NOTEBOOK_REFERENCE, model.notebook().type());
        Assertions.assertEquals(BigDataPoolReferenceType.BIG_DATA_POOL_REFERENCE, model.sparkPool().type());
        Assertions.assertEquals(NotebookParameterType.FLOAT, model.parameters().get("r").type());
        Assertions.assertEquals(ConfigurationType.ARTIFACT, model.configurationType());
        Assertions.assertEquals(SparkConfigurationReferenceType.SPARK_CONFIGURATION_REFERENCE,
            model.targetSparkConfiguration().type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SynapseNotebookActivity model = new SynapseNotebookActivity().withName("vyceks")
            .withDescription("t")
            .withState(ActivityState.ACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SUCCEEDED)
            .withDependsOn(Arrays.asList(new ActivityDependency().withActivity("qvindhixddcocs")
                .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED, DependencyCondition.SUCCEEDED))
                .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("kcsheoxss").withValue("dataztlxqhyyxhzgxk"),
                new UserProperty().withName("cqpvrrmlk").withValue("dataroqsdvxddsfyl"),
                new UserProperty().withName("okbriykrxaevbura").withValue("dataswnnsb")))
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("exi")
                .withParameters(
                    mapOf("isggn", "datadtjcyvmsduodpm", "pqwucprpw", "dataocqaejlebcy", "zdkcike", "datag")))
            .withPolicy(new ActivityPolicy().withTimeout("dataqial")
                .withRetry("datactoraocepjs")
                .withRetryIntervalInSeconds(303046267)
                .withSecureInput(true)
                .withSecureOutput(true)
                .withAdditionalProperties(mapOf()))
            .withNotebook(new SynapseNotebookReference().withType(NotebookReferenceType.NOTEBOOK_REFERENCE)
                .withReferenceName("dataapsypgmmieheq"))
            .withSparkPool(
                new BigDataPoolParametrizationReference().withType(BigDataPoolReferenceType.BIG_DATA_POOL_REFERENCE)
                    .withReferenceName("datatny"))
            .withParameters(mapOf("r",
                new NotebookParameter().withValue("dataiihabojargetncfl").withType(NotebookParameterType.FLOAT), "acc",
                new NotebookParameter().withValue("datajkcqednaeefzlwoh").withType(NotebookParameterType.INT),
                "gmyjmcwnkpbrr",
                new NotebookParameter().withValue("datavixflcnoeiqhb").withType(NotebookParameterType.INT),
                "rsandmusud", new NotebookParameter().withValue("datazvinkktebl").withType(NotebookParameterType.INT)))
            .withExecutorSize("dataoshmmz")
            .withConf("datacpff")
            .withDriverSize("datakfdi")
            .withNumExecutors("dataeott")
            .withConfigurationType(ConfigurationType.ARTIFACT)
            .withTargetSparkConfiguration(new SparkConfigurationParametrizationReference()
                .withType(SparkConfigurationReferenceType.SPARK_CONFIGURATION_REFERENCE)
                .withReferenceName("dataejpjzqbdutvnlowv"))
            .withSparkConfig(
                mapOf("qobngjbeihcaxkiv", "dataalhnixob", "nfuvesmepqrkjyp", "datayvbcxnni", "fshfmw", "datasvnotbe"));
        model = BinaryData.fromObject(model).toObject(SynapseNotebookActivity.class);
        Assertions.assertEquals("vyceks", model.name());
        Assertions.assertEquals("t", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.onInactiveMarkAs());
        Assertions.assertEquals("qvindhixddcocs", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("kcsheoxss", model.userProperties().get(0).name());
        Assertions.assertEquals("exi", model.linkedServiceName().referenceName());
        Assertions.assertEquals(303046267, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals(NotebookReferenceType.NOTEBOOK_REFERENCE, model.notebook().type());
        Assertions.assertEquals(BigDataPoolReferenceType.BIG_DATA_POOL_REFERENCE, model.sparkPool().type());
        Assertions.assertEquals(NotebookParameterType.FLOAT, model.parameters().get("r").type());
        Assertions.assertEquals(ConfigurationType.ARTIFACT, model.configurationType());
        Assertions.assertEquals(SparkConfigurationReferenceType.SPARK_CONFIGURATION_REFERENCE,
            model.targetSparkConfiguration().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
