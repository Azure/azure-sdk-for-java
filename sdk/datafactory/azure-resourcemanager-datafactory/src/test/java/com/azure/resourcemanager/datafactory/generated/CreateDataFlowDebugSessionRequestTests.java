// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.CreateDataFlowDebugSessionRequest;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntime;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeDebugResource;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CreateDataFlowDebugSessionRequestTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CreateDataFlowDebugSessionRequest model = BinaryData.fromString(
            "{\"computeType\":\"qfrddgam\",\"coreCount\":534741289,\"timeToLive\":362279180,\"integrationRuntime\":{\"properties\":{\"type\":\"IntegrationRuntime\",\"description\":\"sjuivfcdisyir\",\"\":{\"xrxzbujrtr\":\"datahcz\",\"khgn\":\"dataqvwre\",\"piqywnc\":\"datanzonzl\",\"zehtdhgb\":\"datajtszcof\"}},\"name\":\"vreljea\"}}")
            .toObject(CreateDataFlowDebugSessionRequest.class);
        Assertions.assertEquals("qfrddgam", model.computeType());
        Assertions.assertEquals(534741289, model.coreCount());
        Assertions.assertEquals(362279180, model.timeToLive());
        Assertions.assertEquals("vreljea", model.integrationRuntime().name());
        Assertions.assertEquals("sjuivfcdisyir", model.integrationRuntime().properties().description());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CreateDataFlowDebugSessionRequest model = new CreateDataFlowDebugSessionRequest().withComputeType("qfrddgam")
            .withCoreCount(534741289)
            .withTimeToLive(362279180)
            .withIntegrationRuntime(new IntegrationRuntimeDebugResource().withName("vreljea")
                .withProperties(new IntegrationRuntime().withDescription("sjuivfcdisyir")
                    .withAdditionalProperties(mapOf("type", "IntegrationRuntime"))));
        model = BinaryData.fromObject(model).toObject(CreateDataFlowDebugSessionRequest.class);
        Assertions.assertEquals("qfrddgam", model.computeType());
        Assertions.assertEquals(534741289, model.coreCount());
        Assertions.assertEquals(362279180, model.timeToLive());
        Assertions.assertEquals("vreljea", model.integrationRuntime().name());
        Assertions.assertEquals("sjuivfcdisyir", model.integrationRuntime().properties().description());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
