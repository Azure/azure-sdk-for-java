// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.MongoDbV2CollectionDataset;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MongoDbV2CollectionDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MongoDbV2CollectionDataset model = BinaryData.fromString(
            "{\"type\":\"MongoDbV2Collection\",\"typeProperties\":{\"collection\":\"databav\"},\"description\":\"vxwve\",\"structure\":\"datanlrjcsmwevguyfln\",\"schema\":\"datalr\",\"linkedServiceName\":{\"referenceName\":\"kfzcdetowwezhy\",\"parameters\":{\"csfqbirtybce\":\"datailbwqlq\"}},\"parameters\":{\"el\":{\"type\":\"Array\",\"defaultValue\":\"dataodnjyhzfaxskdv\"},\"qxsorchaz\":{\"type\":\"SecureString\",\"defaultValue\":\"datadpe\"},\"hlbeqvhs\":{\"type\":\"String\",\"defaultValue\":\"dataxz\"},\"gf\":{\"type\":\"Array\",\"defaultValue\":\"datapwxslaj\"}},\"annotations\":[\"dataefhawkmibuyd\"],\"folder\":{\"name\":\"rnicupdyttqmi\"},\"\":{\"xynof\":\"dataplosebmhhtuqm\",\"hnkingiqcdol\":\"dataqobfixngxebihe\",\"jlbsmndafbncuyj\":\"datapgup\"}}")
            .toObject(MongoDbV2CollectionDataset.class);
        Assertions.assertEquals("vxwve", model.description());
        Assertions.assertEquals("kfzcdetowwezhy", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("el").type());
        Assertions.assertEquals("rnicupdyttqmi", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MongoDbV2CollectionDataset model = new MongoDbV2CollectionDataset().withDescription("vxwve")
            .withStructure("datanlrjcsmwevguyfln")
            .withSchema("datalr")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("kfzcdetowwezhy")
                .withParameters(mapOf("csfqbirtybce", "datailbwqlq")))
            .withParameters(mapOf("el",
                new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("dataodnjyhzfaxskdv"),
                "qxsorchaz",
                new ParameterSpecification().withType(ParameterType.SECURE_STRING).withDefaultValue("datadpe"),
                "hlbeqvhs", new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("dataxz"),
                "gf", new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("datapwxslaj")))
            .withAnnotations(Arrays.asList("dataefhawkmibuyd"))
            .withFolder(new DatasetFolder().withName("rnicupdyttqmi"))
            .withCollection("databav");
        model = BinaryData.fromObject(model).toObject(MongoDbV2CollectionDataset.class);
        Assertions.assertEquals("vxwve", model.description());
        Assertions.assertEquals("kfzcdetowwezhy", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("el").type());
        Assertions.assertEquals("rnicupdyttqmi", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
