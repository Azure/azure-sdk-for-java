// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.MongoDbV2CollectionDataset;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MongoDbV2CollectionDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MongoDbV2CollectionDataset model = BinaryData.fromString(
            "{\"type\":\"pwwvmbjecfw\",\"typeProperties\":{\"collection\":\"datacuex\"},\"description\":\"ghnkfrwxohlydsn\",\"structure\":\"datapchiypbfhmih\",\"schema\":\"datatqozewbrsrjzgkbr\",\"linkedServiceName\":{\"referenceName\":\"uxboufqnnqbjxgj\",\"parameters\":{\"ri\":\"dataerukbuu\",\"ssybzbe\":\"datawkwkjxlaacedikqe\",\"zyjj\":\"datagbnrommkiqhypwt\",\"omzq\":\"datau\"}},\"parameters\":{\"ialezaydpu\":{\"type\":\"Bool\",\"defaultValue\":\"datawiijcfqiywhxpsba\"},\"smhssfnwh\":{\"type\":\"Object\",\"defaultValue\":\"dataegefxlieggot\"},\"ckn\":{\"type\":\"Array\",\"defaultValue\":\"datahh\"},\"vhzfkdnwy\":{\"type\":\"Array\",\"defaultValue\":\"datacufthdgwuzrono\"}},\"annotations\":[\"datacikgxkk\",\"datazfzdjekeb\"],\"folder\":{\"name\":\"xz\"},\"\":{\"ixirgcjfaiw\":\"datay\",\"akrxi\":\"datalpj\"}}")
            .toObject(MongoDbV2CollectionDataset.class);
        Assertions.assertEquals("ghnkfrwxohlydsn", model.description());
        Assertions.assertEquals("uxboufqnnqbjxgj", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("ialezaydpu").type());
        Assertions.assertEquals("xz", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MongoDbV2CollectionDataset model = new MongoDbV2CollectionDataset().withDescription("ghnkfrwxohlydsn")
            .withStructure("datapchiypbfhmih")
            .withSchema("datatqozewbrsrjzgkbr")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("uxboufqnnqbjxgj")
                .withParameters(mapOf("ri", "dataerukbuu", "ssybzbe", "datawkwkjxlaacedikqe", "zyjj",
                    "datagbnrommkiqhypwt", "omzq", "datau")))
            .withParameters(mapOf("ialezaydpu",
                new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("datawiijcfqiywhxpsba"),
                "smhssfnwh",
                new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("dataegefxlieggot"), "ckn",
                new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("datahh"), "vhzfkdnwy",
                new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("datacufthdgwuzrono")))
            .withAnnotations(Arrays.asList("datacikgxkk", "datazfzdjekeb"))
            .withFolder(new DatasetFolder().withName("xz"))
            .withCollection("datacuex");
        model = BinaryData.fromObject(model).toObject(MongoDbV2CollectionDataset.class);
        Assertions.assertEquals("ghnkfrwxohlydsn", model.description());
        Assertions.assertEquals("uxboufqnnqbjxgj", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("ialezaydpu").type());
        Assertions.assertEquals("xz", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
