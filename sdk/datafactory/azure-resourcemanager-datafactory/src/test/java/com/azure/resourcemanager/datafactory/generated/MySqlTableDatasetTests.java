// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.MySqlTableDataset;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MySqlTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MySqlTableDataset model = BinaryData.fromString(
            "{\"type\":\"uubxcwojtupqdvnp\",\"typeProperties\":{\"tableName\":\"dataryibrb\"},\"description\":\"evffifu\",\"structure\":\"datatdowlxmwefcbyb\",\"schema\":\"datahrtczwjcujyz\",\"linkedServiceName\":{\"referenceName\":\"vyrjqdjlgk\",\"parameters\":{\"n\":\"dataxxeuwiiirc\"}},\"parameters\":{\"fujdbqjnyexbvx\":{\"type\":\"Float\",\"defaultValue\":\"dataiwxohktxa\"},\"asfeooq\":{\"type\":\"Float\",\"defaultValue\":\"dataq\"}},\"annotations\":[\"datavev\",\"dataarp\",\"dataklqlii\",\"dataeanuwg\"],\"folder\":{\"name\":\"fgijydgs\"},\"\":{\"mwywhrjkejva\":\"datauymtevaeb\",\"gcphivfhrmte\":\"datadogzougxbxxgj\",\"usrjzhdtrsyfezf\":\"datafdvdoeary\"}}")
            .toObject(MySqlTableDataset.class);
        Assertions.assertEquals("evffifu", model.description());
        Assertions.assertEquals("vyrjqdjlgk", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.FLOAT, model.parameters().get("fujdbqjnyexbvx").type());
        Assertions.assertEquals("fgijydgs", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MySqlTableDataset model = new MySqlTableDataset().withDescription("evffifu")
            .withStructure("datatdowlxmwefcbyb")
            .withSchema("datahrtczwjcujyz")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("vyrjqdjlgk")
                .withParameters(mapOf("n", "dataxxeuwiiirc")))
            .withParameters(mapOf("fujdbqjnyexbvx",
                new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("dataiwxohktxa"), "asfeooq",
                new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("dataq")))
            .withAnnotations(Arrays.asList("datavev", "dataarp", "dataklqlii", "dataeanuwg"))
            .withFolder(new DatasetFolder().withName("fgijydgs"))
            .withTableName("dataryibrb");
        model = BinaryData.fromObject(model).toObject(MySqlTableDataset.class);
        Assertions.assertEquals("evffifu", model.description());
        Assertions.assertEquals("vyrjqdjlgk", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.FLOAT, model.parameters().get("fujdbqjnyexbvx").type());
        Assertions.assertEquals("fgijydgs", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
