// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.MySqlTableDataset;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MySqlTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MySqlTableDataset model = BinaryData.fromString(
            "{\"type\":\"MySqlTable\",\"typeProperties\":{\"tableName\":\"datanqvxgvohd\"},\"description\":\"hhxmoevvud\",\"structure\":\"datapfhga\",\"schema\":\"datavwxqhpjhu\",\"linkedServiceName\":{\"referenceName\":\"ohxvzgaybvrhhoga\",\"parameters\":{\"uebpamq\":\"datanwfmzvzt\",\"eum\":\"datafcssanybzzghvd\",\"hookju\":\"datajsvcdhlyw\"}},\"parameters\":{\"apcqksaaapxjh\":{\"type\":\"Object\",\"defaultValue\":\"datariwgoe\"},\"hl\":{\"type\":\"Bool\",\"defaultValue\":\"dataibenwsdfpvda\"}},\"annotations\":[\"dataqklpmvzp\",\"datareszyaqgom\",\"databmfggeokfekcjjlw\"],\"folder\":{\"name\":\"ahhhutp\"},\"\":{\"nowrerjpx\":\"datarfcqufmcihp\",\"qqidqim\":\"datatchdw\"}}")
            .toObject(MySqlTableDataset.class);
        Assertions.assertEquals("hhxmoevvud", model.description());
        Assertions.assertEquals("ohxvzgaybvrhhoga", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.OBJECT, model.parameters().get("apcqksaaapxjh").type());
        Assertions.assertEquals("ahhhutp", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MySqlTableDataset model = new MySqlTableDataset().withDescription("hhxmoevvud")
            .withStructure("datapfhga")
            .withSchema("datavwxqhpjhu")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("ohxvzgaybvrhhoga")
                .withParameters(
                    mapOf("uebpamq", "datanwfmzvzt", "eum", "datafcssanybzzghvd", "hookju", "datajsvcdhlyw")))
            .withParameters(mapOf("apcqksaaapxjh",
                new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("datariwgoe"), "hl",
                new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("dataibenwsdfpvda")))
            .withAnnotations(Arrays.asList("dataqklpmvzp", "datareszyaqgom", "databmfggeokfekcjjlw"))
            .withFolder(new DatasetFolder().withName("ahhhutp"))
            .withTableName("datanqvxgvohd");
        model = BinaryData.fromObject(model).toObject(MySqlTableDataset.class);
        Assertions.assertEquals("hhxmoevvud", model.description());
        Assertions.assertEquals("ohxvzgaybvrhhoga", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.OBJECT, model.parameters().get("apcqksaaapxjh").type());
        Assertions.assertEquals("ahhhutp", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
