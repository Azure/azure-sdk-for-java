// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.MySqlTableDataset;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MySqlTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MySqlTableDataset model =
            BinaryData
                .fromString(
                    "{\"type\":\"MySqlTable\",\"typeProperties\":{\"tableName\":\"databtownoljdkx\"},\"description\":\"ewy\",\"structure\":\"datalclzxkrdpuy\",\"schema\":\"databpkrpk\",\"linkedServiceName\":{\"referenceName\":\"qetp\",\"parameters\":{\"fpc\":\"dataefno\",\"yrxowv\":\"datarx\"}},\"parameters\":{\"ozfrfawtnnsv\":{\"type\":\"Int\",\"defaultValue\":\"datauajwblxph\"},\"gzqzhluc\":{\"type\":\"Array\",\"defaultValue\":\"datajynihtibu\"},\"cgyo\":{\"type\":\"Float\",\"defaultValue\":\"datafehb\"},\"ebldxagmdfjwc\":{\"type\":\"String\",\"defaultValue\":\"datameqljxdumhycxo\"}},\"annotations\":[\"datawxjsjquv\"],\"folder\":{\"name\":\"fzdtsrpjuvgz\"},\"\":{\"huqczouanbfulv\":\"datazhnsbylgmg\"}}")
                .toObject(MySqlTableDataset.class);
        Assertions.assertEquals("ewy", model.description());
        Assertions.assertEquals("qetp", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("ozfrfawtnnsv").type());
        Assertions.assertEquals("fzdtsrpjuvgz", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MySqlTableDataset model =
            new MySqlTableDataset()
                .withDescription("ewy")
                .withStructure("datalclzxkrdpuy")
                .withSchema("databpkrpk")
                .withLinkedServiceName(
                    new LinkedServiceReference()
                        .withReferenceName("qetp")
                        .withParameters(mapOf("fpc", "dataefno", "yrxowv", "datarx")))
                .withParameters(
                    mapOf(
                        "ozfrfawtnnsv",
                        new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("datauajwblxph"),
                        "gzqzhluc",
                        new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("datajynihtibu"),
                        "cgyo",
                        new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("datafehb"),
                        "ebldxagmdfjwc",
                        new ParameterSpecification()
                            .withType(ParameterType.STRING)
                            .withDefaultValue("datameqljxdumhycxo")))
                .withAnnotations(Arrays.asList("datawxjsjquv"))
                .withFolder(new DatasetFolder().withName("fzdtsrpjuvgz"))
                .withTableName("databtownoljdkx");
        model = BinaryData.fromObject(model).toObject(MySqlTableDataset.class);
        Assertions.assertEquals("ewy", model.description());
        Assertions.assertEquals("qetp", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("ozfrfawtnnsv").type());
        Assertions.assertEquals("fzdtsrpjuvgz", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
