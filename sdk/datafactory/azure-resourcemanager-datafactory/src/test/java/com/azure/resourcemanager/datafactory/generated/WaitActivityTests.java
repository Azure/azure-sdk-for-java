// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import com.azure.resourcemanager.datafactory.models.WaitActivity;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class WaitActivityTests {
    @Test
    public void testDeserialize() {
        WaitActivity model =
            BinaryData
                .fromString(
                    "{\"type\":\"Wait\",\"typeProperties\":{},\"name\":\"xcqrrihufo\",\"description\":\"ppiybxv\",\"dependsOn\":[{\"activity\":\"uzpbgkzcscpi\",\"dependencyConditions\":[\"Failed\",\"Skipped\"],\"\":{}},{\"activity\":\"hdimjuktirzkau\",\"dependencyConditions\":[\"Succeeded\",\"Failed\"],\"\":{}},{\"activity\":\"cfqp\",\"dependencyConditions\":[\"Skipped\",\"Succeeded\"],\"\":{}}],\"userProperties\":[{\"name\":\"wrjlvzkl\"}],\"\":{}}")
                .toObject(WaitActivity.class);
        Assertions.assertEquals("xcqrrihufo", model.name());
        Assertions.assertEquals("ppiybxv", model.description());
        Assertions.assertEquals("uzpbgkzcscpi", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("wrjlvzkl", model.userProperties().get(0).name());
    }

    @Test
    public void testSerialize() {
        WaitActivity model =
            new WaitActivity()
                .withName("xcqrrihufo")
                .withDescription("ppiybxv")
                .withDependsOn(
                    Arrays
                        .asList(
                            new ActivityDependency()
                                .withActivity("uzpbgkzcscpi")
                                .withDependencyConditions(
                                    Arrays.asList(DependencyCondition.FAILED, DependencyCondition.SKIPPED))
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency()
                                .withActivity("hdimjuktirzkau")
                                .withDependencyConditions(
                                    Arrays.asList(DependencyCondition.SUCCEEDED, DependencyCondition.FAILED))
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency()
                                .withActivity("cfqp")
                                .withDependencyConditions(
                                    Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.SUCCEEDED))
                                .withAdditionalProperties(mapOf())))
                .withUserProperties(Arrays.asList(new UserProperty().withName("wrjlvzkl")));
        model = BinaryData.fromObject(model).toObject(WaitActivity.class);
        Assertions.assertEquals("xcqrrihufo", model.name());
        Assertions.assertEquals("ppiybxv", model.description());
        Assertions.assertEquals("uzpbgkzcscpi", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("wrjlvzkl", model.userProperties().get(0).name());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
