// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import com.azure.resourcemanager.datafactory.models.WaitActivity;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class WaitActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WaitActivity model = BinaryData.fromString(
            "{\"type\":\"Wait\",\"typeProperties\":{\"waitTimeInSeconds\":\"dataevitvbz\"},\"name\":\"hexlhlkp\",\"description\":\"dcrtvdcbzpyn\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"dmgwxowaawe\",\"dependencyConditions\":[\"Succeeded\",\"Failed\"],\"\":{\"cuvj\":\"datazfx\",\"oswgkbzrmeftg\":\"datapy\"}},{\"activity\":\"fuuu\",\"dependencyConditions\":[\"Succeeded\",\"Succeeded\",\"Completed\"],\"\":{\"eykvgfhu\":\"dataghnqe\",\"rytkmfhbpcr\":\"datahotzygqdcaims\",\"sn\":\"dataynunrajtbumaid\"}},{\"activity\":\"vyutcvumvgttjvc\",\"dependencyConditions\":[\"Skipped\"],\"\":{\"gx\":\"datanj\",\"kdqqombiao\":\"dataxkcen\"}},{\"activity\":\"qwwoi\",\"dependencyConditions\":[\"Failed\",\"Completed\",\"Succeeded\",\"Succeeded\"],\"\":{\"pnzqqtipkreanak\":\"datarsqtjhtqbhr\",\"gukf\":\"datagqfk\"}}],\"userProperties\":[{\"name\":\"winwaymrlvhlf\",\"value\":\"datariqendtyccn\"},{\"name\":\"hszgaub\",\"value\":\"databizjbwufjogswf\"},{\"name\":\"qeebpyp\",\"value\":\"datarvnveetaydh\"},{\"name\":\"gxy\",\"value\":\"dataobsxshjsra\"}],\"\":{\"rhoujkcpyerf\":\"datawfzyvxkrtgofp\",\"ijbolksehtyx\":\"datangt\"}}")
            .toObject(WaitActivity.class);
        Assertions.assertEquals("hexlhlkp", model.name());
        Assertions.assertEquals("dcrtvdcbzpyn", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("dmgwxowaawe", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("winwaymrlvhlf", model.userProperties().get(0).name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WaitActivity model = new WaitActivity().withName("hexlhlkp")
            .withDescription("dcrtvdcbzpyn")
            .withState(ActivityState.INACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
            .withDependsOn(Arrays.asList(
                new ActivityDependency().withActivity("dmgwxowaawe")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED, DependencyCondition.FAILED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("fuuu")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED,
                        DependencyCondition.SUCCEEDED, DependencyCondition.COMPLETED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("vyutcvumvgttjvc")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("qwwoi")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED, DependencyCondition.COMPLETED,
                        DependencyCondition.SUCCEEDED, DependencyCondition.SUCCEEDED))
                    .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("winwaymrlvhlf").withValue("datariqendtyccn"),
                new UserProperty().withName("hszgaub").withValue("databizjbwufjogswf"),
                new UserProperty().withName("qeebpyp").withValue("datarvnveetaydh"),
                new UserProperty().withName("gxy").withValue("dataobsxshjsra")))
            .withWaitTimeInSeconds("dataevitvbz");
        model = BinaryData.fromObject(model).toObject(WaitActivity.class);
        Assertions.assertEquals("hexlhlkp", model.name());
        Assertions.assertEquals("dcrtvdcbzpyn", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("dmgwxowaawe", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("winwaymrlvhlf", model.userProperties().get(0).name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
