// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import com.azure.resourcemanager.datafactory.models.WaitActivity;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class WaitActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WaitActivity model = BinaryData.fromString(
            "{\"type\":\"Wait\",\"typeProperties\":{\"waitTimeInSeconds\":\"datavktlrcauad\"},\"name\":\"prjs\",\"description\":\"n\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"mxxpfylmpftwt\",\"dependencyConditions\":[\"Completed\"],\"\":{\"hpvohvcaq\":\"datatgwwtaolfdgjrg\",\"zz\":\"datarpp\"}},{\"activity\":\"arnjueqo\",\"dependencyConditions\":[\"Completed\",\"Completed\"],\"\":{\"xyznnpazbfrqotig\":\"datazoihtncadrmthh\",\"wqyhklhossc\":\"datandfrxn\",\"samhxkjjhflrgx\":\"datajtiungjbfmrsjgm\"}}],\"userProperties\":[{\"name\":\"h\",\"value\":\"dataadgqpbgzyafazwie\"}],\"\":{\"uinrs\":\"dataxjjdbo\",\"bcwtcqjsvlzdus\":\"datarijcwnthtq\",\"tssbkzdgwpyljn\":\"datazbvdzjlkocjuajcl\"}}")
            .toObject(WaitActivity.class);
        Assertions.assertEquals("prjs", model.name());
        Assertions.assertEquals("n", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("mxxpfylmpftwt", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("h", model.userProperties().get(0).name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WaitActivity model = new WaitActivity().withName("prjs")
            .withDescription("n")
            .withState(ActivityState.ACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
            .withDependsOn(Arrays.asList(
                new ActivityDependency().withActivity("mxxpfylmpftwt")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("arnjueqo")
                    .withDependencyConditions(
                        Arrays.asList(DependencyCondition.COMPLETED, DependencyCondition.COMPLETED))
                    .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("h").withValue("dataadgqpbgzyafazwie")))
            .withWaitTimeInSeconds("datavktlrcauad");
        model = BinaryData.fromObject(model).toObject(WaitActivity.class);
        Assertions.assertEquals("prjs", model.name());
        Assertions.assertEquals("n", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("mxxpfylmpftwt", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("h", model.userProperties().get(0).name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
