// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import com.azure.resourcemanager.datafactory.models.WaitActivity;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class WaitActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WaitActivity model = BinaryData.fromString(
            "{\"type\":\"Wait\",\"typeProperties\":{\"waitTimeInSeconds\":\"dataqqsbjbshwxyfskj\"},\"name\":\"ejkmltwftlh\",\"description\":\"tkxziowutcyj\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"ohregqvus\",\"dependencyConditions\":[\"Failed\",\"Failed\",\"Failed\"],\"\":{\"wooorrn\":\"datavhmmirvmp\",\"cyltrxw\":\"datasthninzatdm\",\"b\":\"databw\"}},{\"activity\":\"lqgteoepdpx\",\"dependencyConditions\":[\"Succeeded\",\"Skipped\",\"Failed\"],\"\":{\"m\":\"dataqixomonqqqikeam\",\"g\":\"datalvoyd\",\"ccco\":\"datalcc\",\"vmzpoi\":\"datanljzqv\"}},{\"activity\":\"h\",\"dependencyConditions\":[\"Skipped\",\"Succeeded\"],\"\":{\"hydwkd\":\"datadkhvxtxu\",\"ydtllpwzayau\":\"dataycpzqjpyquy\",\"kfplhrenedsnu\":\"dataell\",\"skn\":\"datair\"}}],\"userProperties\":[{\"name\":\"vptoktrjwnqfdgc\",\"value\":\"datafngktmzooszv\"},{\"name\":\"ngkkf\",\"value\":\"dataebwqz\"}],\"\":{\"pidb\":\"datatyeqeasiadscjha\",\"lcowb\":\"dataqvi\",\"w\":\"datapvmndqmzcgqedono\",\"eaahnkntldddk\":\"datawhvqkeuiy\"}}")
            .toObject(WaitActivity.class);
        Assertions.assertEquals("ejkmltwftlh", model.name());
        Assertions.assertEquals("tkxziowutcyj", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("ohregqvus", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("vptoktrjwnqfdgc", model.userProperties().get(0).name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WaitActivity model = new WaitActivity().withName("ejkmltwftlh")
            .withDescription("tkxziowutcyj")
            .withState(ActivityState.ACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
            .withDependsOn(Arrays.asList(
                new ActivityDependency().withActivity("ohregqvus")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED, DependencyCondition.FAILED,
                        DependencyCondition.FAILED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("lqgteoepdpx")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED, DependencyCondition.SKIPPED,
                        DependencyCondition.FAILED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("h")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.SUCCEEDED))
                    .withAdditionalProperties(mapOf())))
            .withUserProperties(
                Arrays.asList(new UserProperty().withName("vptoktrjwnqfdgc").withValue("datafngktmzooszv"),
                    new UserProperty().withName("ngkkf").withValue("dataebwqz")))
            .withWaitTimeInSeconds("dataqqsbjbshwxyfskj");
        model = BinaryData.fromObject(model).toObject(WaitActivity.class);
        Assertions.assertEquals("ejkmltwftlh", model.name());
        Assertions.assertEquals("tkxziowutcyj", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("ohregqvus", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("vptoktrjwnqfdgc", model.userProperties().get(0).name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
