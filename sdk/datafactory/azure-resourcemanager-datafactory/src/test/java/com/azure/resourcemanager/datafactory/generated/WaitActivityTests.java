// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import com.azure.resourcemanager.datafactory.models.WaitActivity;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class WaitActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WaitActivity model = BinaryData.fromString(
            "{\"type\":\"Wait\",\"typeProperties\":{\"waitTimeInSeconds\":\"databckfzbqvsg\"},\"name\":\"eijnvsjgnbdhh\",\"description\":\"f\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"dyxjicikzm\",\"dependencyConditions\":[\"Failed\",\"Failed\",\"Succeeded\"],\"\":{\"isvpfspfdf\":\"datairbnfcql\",\"hzotko\":\"dataymrfpqyxlncwagia\",\"uerhzyl\":\"datai\"}},{\"activity\":\"wymrmuioepi\",\"dependencyConditions\":[\"Failed\"],\"\":{\"szqzvemwnewm\":\"datahztvr\",\"ywdgrskdlt\":\"datawjcgryolbqcft\",\"vmcxljlpyh\":\"datafzyijn\",\"wtnqbqgfqi\":\"dataxvdjgcu\"}},{\"activity\":\"msxwe\",\"dependencyConditions\":[\"Failed\",\"Failed\",\"Failed\",\"Skipped\"],\"\":{\"bjn\":\"dataukyo\"}},{\"activity\":\"o\",\"dependencyConditions\":[\"Skipped\",\"Skipped\"],\"\":{\"wdbsvghyse\":\"databkwyvwvcgmfklqs\",\"vo\":\"dataqrb\",\"yibycoupksa\":\"dataqrwngfyjfquzxmtm\",\"sw\":\"datadjkrosqxvffrn\"}}],\"userProperties\":[{\"name\":\"yjoklngjsglzoirw\",\"value\":\"dataqdnasjupbgakks\"},{\"name\":\"zbdtvrg\",\"value\":\"dataebvqslikeuqv\"},{\"name\":\"iotvfcbgffd\",\"value\":\"dataff\"},{\"name\":\"atyqawtfyzqo\",\"value\":\"dataglixhapvwacwrcte\"}],\"\":{\"ble\":\"datacnknzncoxeop\",\"vr\":\"dataaxrsyxeqwgaeice\",\"ztssqbclaeciwz\":\"datadcidcxkywy\",\"qyinfdmqjqjk\":\"datavttkha\"}}")
            .toObject(WaitActivity.class);
        Assertions.assertEquals("eijnvsjgnbdhh", model.name());
        Assertions.assertEquals("f", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("dyxjicikzm", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("yjoklngjsglzoirw", model.userProperties().get(0).name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WaitActivity model = new WaitActivity().withName("eijnvsjgnbdhh").withDescription("f")
            .withState(ActivityState.ACTIVE).withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
            .withDependsOn(Arrays.asList(
                new ActivityDependency().withActivity("dyxjicikzm")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED, DependencyCondition.FAILED,
                        DependencyCondition.SUCCEEDED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("wymrmuioepi")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("msxwe")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED, DependencyCondition.FAILED,
                        DependencyCondition.FAILED, DependencyCondition.SKIPPED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("o")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.SKIPPED))
                    .withAdditionalProperties(mapOf())))
            .withUserProperties(
                Arrays.asList(new UserProperty().withName("yjoklngjsglzoirw").withValue("dataqdnasjupbgakks"),
                    new UserProperty().withName("zbdtvrg").withValue("dataebvqslikeuqv"),
                    new UserProperty().withName("iotvfcbgffd").withValue("dataff"),
                    new UserProperty().withName("atyqawtfyzqo").withValue("dataglixhapvwacwrcte")))
            .withWaitTimeInSeconds("databckfzbqvsg");
        model = BinaryData.fromObject(model).toObject(WaitActivity.class);
        Assertions.assertEquals("eijnvsjgnbdhh", model.name());
        Assertions.assertEquals("f", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("dyxjicikzm", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("yjoklngjsglzoirw", model.userProperties().get(0).name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
