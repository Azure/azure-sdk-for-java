// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.AzureTableDataset;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class AzureTableDatasetTests {
    @Test
    public void testDeserialize() {
        AzureTableDataset model =
            BinaryData
                .fromString(
                    "{\"type\":\"AzureTable\",\"typeProperties\":{},\"description\":\"d\",\"linkedServiceName\":{\"referenceName\":\"mqpnoda\",\"parameters\":{}},\"parameters\":{\"jptmcgsbost\":{\"type\":\"Array\"},\"ndlatutmzlbi\":{\"type\":\"Object\"},\"vfhrbbpneqvc\":{\"type\":\"Bool\"},\"yurmochpprprs\":{\"type\":\"Bool\"}},\"annotations\":[],\"folder\":{\"name\":\"yzejnhlbk\"},\"\":{}}")
                .toObject(AzureTableDataset.class);
        Assertions.assertEquals("d", model.description());
        Assertions.assertEquals("mqpnoda", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("jptmcgsbost").type());
        Assertions.assertEquals("yzejnhlbk", model.folder().name());
    }

    @Test
    public void testSerialize() {
        AzureTableDataset model =
            new AzureTableDataset()
                .withDescription("d")
                .withLinkedServiceName(
                    new LinkedServiceReference().withReferenceName("mqpnoda").withParameters(mapOf()))
                .withParameters(
                    mapOf(
                        "jptmcgsbost",
                        new ParameterSpecification().withType(ParameterType.ARRAY),
                        "ndlatutmzlbi",
                        new ParameterSpecification().withType(ParameterType.OBJECT),
                        "vfhrbbpneqvc",
                        new ParameterSpecification().withType(ParameterType.BOOL),
                        "yurmochpprprs",
                        new ParameterSpecification().withType(ParameterType.BOOL)))
                .withAnnotations(Arrays.asList())
                .withFolder(new DatasetFolder().withName("yzejnhlbk"));
        model = BinaryData.fromObject(model).toObject(AzureTableDataset.class);
        Assertions.assertEquals("d", model.description());
        Assertions.assertEquals("mqpnoda", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("jptmcgsbost").type());
        Assertions.assertEquals("yzejnhlbk", model.folder().name());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
