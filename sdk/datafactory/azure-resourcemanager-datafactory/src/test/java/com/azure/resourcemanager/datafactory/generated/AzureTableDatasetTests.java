// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.AzureTableDataset;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureTableDataset model = BinaryData.fromString(
            "{\"type\":\"AzureTable\",\"typeProperties\":{\"tableName\":\"datahblivwehsudym\"},\"description\":\"bhdosmbngkql\",\"structure\":\"datazduvxdmx\",\"schema\":\"dataatmdmn\",\"linkedServiceName\":{\"referenceName\":\"senxoirxyd\",\"parameters\":{\"xznntwgkvyohp\":\"dataploisjkzs\",\"wytb\":\"dataapzupz\",\"mxpqkjnpyriwn\":\"datajzghximkg\",\"xmmqmt\":\"dataot\"}},\"parameters\":{\"onbexft\":{\"type\":\"Array\",\"defaultValue\":\"datarexw\"}},\"annotations\":[\"dataubheeggzgrnqtl\",\"dataozuumr\",\"datagjq\",\"dataacan\"],\"folder\":{\"name\":\"yxzxjmkanbclazof\"},\"\":{\"w\":\"datavtemaspmanydscdk\",\"haahntofelfhpfi\":\"datapwjc\",\"fivsujybsr\":\"dataoskkz\"}}")
            .toObject(AzureTableDataset.class);
        Assertions.assertEquals("bhdosmbngkql", model.description());
        Assertions.assertEquals("senxoirxyd", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("onbexft").type());
        Assertions.assertEquals("yxzxjmkanbclazof", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureTableDataset model = new AzureTableDataset().withDescription("bhdosmbngkql")
            .withStructure("datazduvxdmx")
            .withSchema("dataatmdmn")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("senxoirxyd")
                .withParameters(mapOf("xznntwgkvyohp", "dataploisjkzs", "wytb", "dataapzupz", "mxpqkjnpyriwn",
                    "datajzghximkg", "xmmqmt", "dataot")))
            .withParameters(mapOf("onbexft",
                new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("datarexw")))
            .withAnnotations(Arrays.asList("dataubheeggzgrnqtl", "dataozuumr", "datagjq", "dataacan"))
            .withFolder(new DatasetFolder().withName("yxzxjmkanbclazof"))
            .withTableName("datahblivwehsudym");
        model = BinaryData.fromObject(model).toObject(AzureTableDataset.class);
        Assertions.assertEquals("bhdosmbngkql", model.description());
        Assertions.assertEquals("senxoirxyd", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("onbexft").type());
        Assertions.assertEquals("yxzxjmkanbclazof", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
