// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.AzureTableDataset;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureTableDataset model = BinaryData.fromString(
            "{\"type\":\"AzureTable\",\"typeProperties\":{\"tableName\":\"datablxk\"},\"description\":\"qgvxrktjcjigcw\",\"structure\":\"datapanbqxasevc\",\"schema\":\"datafp\",\"linkedServiceName\":{\"referenceName\":\"eedyybruholaem\",\"parameters\":{\"aowcahdkm\":\"dataimmrimaabsqqlonb\",\"zglkvbgu\":\"datajsmihrijezbfsjwf\",\"gnbknhj\":\"databsvbwyot\",\"ffaspsdzkucsz\":\"dataclxaxw\"}},\"parameters\":{\"nxclfrsbzrnmuv\":{\"type\":\"String\",\"defaultValue\":\"dataqip\"},\"bf\":{\"type\":\"Array\",\"defaultValue\":\"datauofdd\"},\"oyqxfvgyxz\":{\"type\":\"Bool\",\"defaultValue\":\"datajcnginxdvm\"},\"dnzujsj\":{\"type\":\"Bool\",\"defaultValue\":\"datanofxlttxoqx\"}},\"annotations\":[\"datarpskcjhmmo\",\"databnivdqtkykp\",\"dataxnlsf\"],\"folder\":{\"name\":\"scaccptbz\"},\"\":{\"xxicee\":\"datay\"}}")
            .toObject(AzureTableDataset.class);
        Assertions.assertEquals("qgvxrktjcjigcw", model.description());
        Assertions.assertEquals("eedyybruholaem", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("nxclfrsbzrnmuv").type());
        Assertions.assertEquals("scaccptbz", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureTableDataset model = new AzureTableDataset().withDescription("qgvxrktjcjigcw")
            .withStructure("datapanbqxasevc")
            .withSchema("datafp")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("eedyybruholaem")
                .withParameters(mapOf("aowcahdkm", "dataimmrimaabsqqlonb", "zglkvbgu", "datajsmihrijezbfsjwf",
                    "gnbknhj", "databsvbwyot", "ffaspsdzkucsz", "dataclxaxw")))
            .withParameters(mapOf("nxclfrsbzrnmuv",
                new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("dataqip"), "bf",
                new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("datauofdd"), "oyqxfvgyxz",
                new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("datajcnginxdvm"), "dnzujsj",
                new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("datanofxlttxoqx")))
            .withAnnotations(Arrays.asList("datarpskcjhmmo", "databnivdqtkykp", "dataxnlsf"))
            .withFolder(new DatasetFolder().withName("scaccptbz"))
            .withTableName("datablxk");
        model = BinaryData.fromObject(model).toObject(AzureTableDataset.class);
        Assertions.assertEquals("qgvxrktjcjigcw", model.description());
        Assertions.assertEquals("eedyybruholaem", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("nxclfrsbzrnmuv").type());
        Assertions.assertEquals("scaccptbz", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
