// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.AzureTableDataset;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureTableDataset model = BinaryData.fromString(
            "{\"type\":\"v\",\"typeProperties\":{\"tableName\":\"datarbvgwxhlxr\"},\"description\":\"rwynb\",\"structure\":\"datavazoymdvh\",\"schema\":\"datalkhw\",\"linkedServiceName\":{\"referenceName\":\"dkatveqmgk\",\"parameters\":{\"buklvsmfasg\":\"datazeyxryearmhp\"}},\"parameters\":{\"s\":{\"type\":\"String\",\"defaultValue\":\"datapoil\"}},\"annotations\":[\"datamcezevftmhllpok\",\"datayghz\",\"datams\"],\"folder\":{\"name\":\"tpcflcezsw\"},\"\":{\"jtvbfp\":\"dataift\",\"jnqswxd\":\"datahruptsyq\",\"ohclqddnhfkneb\":\"datawumxqukrcd\",\"yzcwy\":\"dataeddp\"}}")
            .toObject(AzureTableDataset.class);
        Assertions.assertEquals("rwynb", model.description());
        Assertions.assertEquals("dkatveqmgk", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("s").type());
        Assertions.assertEquals("tpcflcezsw", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureTableDataset model = new AzureTableDataset().withDescription("rwynb")
            .withStructure("datavazoymdvh")
            .withSchema("datalkhw")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("dkatveqmgk")
                .withParameters(mapOf("buklvsmfasg", "datazeyxryearmhp")))
            .withParameters(
                mapOf("s", new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("datapoil")))
            .withAnnotations(Arrays.asList("datamcezevftmhllpok", "datayghz", "datams"))
            .withFolder(new DatasetFolder().withName("tpcflcezsw"))
            .withTableName("datarbvgwxhlxr");
        model = BinaryData.fromObject(model).toObject(AzureTableDataset.class);
        Assertions.assertEquals("rwynb", model.description());
        Assertions.assertEquals("dkatveqmgk", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("s").type());
        Assertions.assertEquals("tpcflcezsw", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
