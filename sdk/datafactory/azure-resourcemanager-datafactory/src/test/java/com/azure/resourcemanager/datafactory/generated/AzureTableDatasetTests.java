// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.AzureTableDataset;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureTableDataset model = BinaryData.fromString(
            "{\"type\":\"AzureTable\",\"typeProperties\":{\"tableName\":\"databtsertoxa\"},\"description\":\"xuvj\",\"structure\":\"datamnrqstjcmetwml\",\"schema\":\"datacvnpv\",\"linkedServiceName\":{\"referenceName\":\"dhgjnaqyqi\",\"parameters\":{\"svmwbi\":\"datazmvc\",\"qich\":\"dataekdtfobvfiyb\",\"cv\":\"dataybfzdqekivycp\"}},\"parameters\":{\"ryfmxmdu\":{\"type\":\"SecureString\",\"defaultValue\":\"datarqtbhtrezpzl\"},\"gdpri\":{\"type\":\"Object\",\"defaultValue\":\"datakgilnoudccgnd\"}},\"annotations\":[\"dataqyeqfcbuulpyuflq\",\"datafsh\"],\"folder\":{\"name\":\"cyohigimwdcs\"},\"\":{\"kixnmbzmecu\":\"dataqnq\",\"rietvfp\":\"datarzwimbzayspz\",\"gtpvdva\":\"datamdzxp\",\"kkzovlzdm\":\"datalzmgschnzrs\"}}")
            .toObject(AzureTableDataset.class);
        Assertions.assertEquals("xuvj", model.description());
        Assertions.assertEquals("dhgjnaqyqi", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.SECURE_STRING, model.parameters().get("ryfmxmdu").type());
        Assertions.assertEquals("cyohigimwdcs", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureTableDataset model
            = new AzureTableDataset().withDescription("xuvj")
                .withStructure("datamnrqstjcmetwml")
                .withSchema("datacvnpv")
                .withLinkedServiceName(new LinkedServiceReference().withReferenceName("dhgjnaqyqi")
                    .withParameters(mapOf("svmwbi", "datazmvc", "qich", "dataekdtfobvfiyb", "cv", "dataybfzdqekivycp")))
                .withParameters(mapOf("ryfmxmdu",
                    new ParameterSpecification().withType(ParameterType.SECURE_STRING)
                        .withDefaultValue("datarqtbhtrezpzl"),
                    "gdpri",
                    new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("datakgilnoudccgnd")))
                .withAnnotations(Arrays.asList("dataqyeqfcbuulpyuflq", "datafsh"))
                .withFolder(new DatasetFolder().withName("cyohigimwdcs"))
                .withTableName("databtsertoxa");
        model = BinaryData.fromObject(model).toObject(AzureTableDataset.class);
        Assertions.assertEquals("xuvj", model.description());
        Assertions.assertEquals("dhgjnaqyqi", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.SECURE_STRING, model.parameters().get("ryfmxmdu").type());
        Assertions.assertEquals("cyohigimwdcs", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
