// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.AzureTableDataset;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureTableDataset model =
            BinaryData
                .fromString(
                    "{\"type\":\"AzureTable\",\"typeProperties\":{\"tableName\":\"dataazofm\"},\"description\":\"vtemaspmanydscdk\",\"structure\":\"datadpwjcbhaahntof\",\"schema\":\"datafh\",\"linkedServiceName\":{\"referenceName\":\"fixoskk\",\"parameters\":{\"ujybsrwz\":\"dataiv\",\"t\":\"datamr\",\"ikesmkwtzgfr\":\"datadhmfppinm\"}},\"parameters\":{\"btqhvmmniiqyhol\":{\"type\":\"String\",\"defaultValue\":\"dataerxlobk\"},\"nq\":{\"type\":\"String\",\"defaultValue\":\"dataskbggi\"}},\"annotations\":[\"datatmwpblxk\"],\"folder\":{\"name\":\"gvxrktjcjigc\"},\"\":{\"efpgeedyyb\":\"datapanbqxasevc\"}}")
                .toObject(AzureTableDataset.class);
        Assertions.assertEquals("vtemaspmanydscdk", model.description());
        Assertions.assertEquals("fixoskk", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("btqhvmmniiqyhol").type());
        Assertions.assertEquals("gvxrktjcjigc", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureTableDataset model =
            new AzureTableDataset()
                .withDescription("vtemaspmanydscdk")
                .withStructure("datadpwjcbhaahntof")
                .withSchema("datafh")
                .withLinkedServiceName(
                    new LinkedServiceReference()
                        .withReferenceName("fixoskk")
                        .withParameters(mapOf("ujybsrwz", "dataiv", "t", "datamr", "ikesmkwtzgfr", "datadhmfppinm")))
                .withParameters(
                    mapOf(
                        "btqhvmmniiqyhol",
                        new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("dataerxlobk"),
                        "nq",
                        new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("dataskbggi")))
                .withAnnotations(Arrays.asList("datatmwpblxk"))
                .withFolder(new DatasetFolder().withName("gvxrktjcjigc"))
                .withTableName("dataazofm");
        model = BinaryData.fromObject(model).toObject(AzureTableDataset.class);
        Assertions.assertEquals("vtemaspmanydscdk", model.description());
        Assertions.assertEquals("fixoskk", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("btqhvmmniiqyhol").type());
        Assertions.assertEquals("gvxrktjcjigc", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
