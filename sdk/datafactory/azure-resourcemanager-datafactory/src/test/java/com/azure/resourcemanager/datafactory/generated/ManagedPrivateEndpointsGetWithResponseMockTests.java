// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.datafactory.DataFactoryManager;
import com.azure.resourcemanager.datafactory.models.ManagedPrivateEndpointResource;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ManagedPrivateEndpointsGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"connectionState\":{\"actionsRequired\":\"blomidvic\",\"description\":\"ufjahu\",\"status\":\"ebdtcklthsu\"},\"fqdns\":[\"xdhlovktrf\"],\"groupId\":\"p\",\"isReserved\":false,\"privateLinkResourceId\":\"xosbydr\",\"provisioningState\":\"svexpzsxb\",\"\":{\"uah\":\"datajjwtynpbirltz\",\"sdtysnlxw\":\"datalxcdpj\"}},\"name\":\"zezfhfjjjzcxtz\",\"type\":\"loosceuk\",\"etag\":\"oqhphjqkkacw\",\"id\":\"qmxkxfmwbrvsl\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        DataFactoryManager manager =
            DataFactoryManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        ManagedPrivateEndpointResource response =
            manager
                .managedPrivateEndpoints()
                .getWithResponse("il", "ixwx", "aquuvb", "hgxsfeslxwlmxzo", "bi", com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("qmxkxfmwbrvsl", response.id());
        Assertions.assertEquals("xdhlovktrf", response.properties().fqdns().get(0));
        Assertions.assertEquals("p", response.properties().groupId());
        Assertions.assertEquals("xosbydr", response.properties().privateLinkResourceId());
    }
}
