// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.datafactory.DataFactoryManager;
import com.azure.resourcemanager.datafactory.models.ManagedPrivateEndpointResource;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ManagedPrivateEndpointsGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"connectionState\":{\"actionsRequired\":\"flmalmx\",\"description\":\"rdpfanjkenrlcjms\",\"status\":\"gmebxwdahh\"},\"fqdns\":[\"uogakrpmjodbdcy\",\"jnoibclfqdtfj\"],\"groupId\":\"v\",\"isReserved\":true,\"privateLinkResourceId\":\"yvstv\",\"provisioningState\":\"slqyhabgocq\",\"\":{\"lwgr\":\"dataivofnhckl\"}},\"name\":\"lqqkpxvemj\",\"type\":\"vanefwsodnl\",\"etag\":\"npbgqemjdtc\",\"id\":\"kwkxlnl\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DataFactoryManager manager = DataFactoryManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        ManagedPrivateEndpointResource response = manager.managedPrivateEndpoints()
            .getWithResponse("xhfusjxnadiese", "zfh", "ihrxg", "ub", "xajrnqoujvzpv", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("kwkxlnl", response.id());
        Assertions.assertEquals("uogakrpmjodbdcy", response.properties().fqdns().get(0));
        Assertions.assertEquals("v", response.properties().groupId());
        Assertions.assertEquals("yvstv", response.properties().privateLinkResourceId());
    }
}
