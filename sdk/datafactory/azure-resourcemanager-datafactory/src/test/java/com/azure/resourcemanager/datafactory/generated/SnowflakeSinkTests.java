// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.SnowflakeImportCopyCommand;
import com.azure.resourcemanager.datafactory.models.SnowflakeSink;
import java.util.HashMap;
import java.util.Map;

public final class SnowflakeSinkTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SnowflakeSink model = BinaryData.fromString(
            "{\"type\":\"SnowflakeSink\",\"preCopyScript\":\"datamuj\",\"importSettings\":{\"type\":\"SnowflakeImportCopyCommand\",\"additionalCopyOptions\":{\"mumuc\":\"datahepfjdiwzg\",\"xgelnjgftqkgavgo\":\"datavqwhscvaq\",\"kskkziebm\":\"datallxpaylkrast\",\"gdxdtxbr\":\"datayodfmp\"},\"additionalFormatOptions\":{\"pf\":\"datawqt\",\"kdoukqsc\":\"datafrfvhbbnoevkkr\",\"lgu\":\"datadsjgows\"},\"\":{\"opqy\":\"dataqlhhmbyfacex\"}},\"writeBatchSize\":\"datacesqpvmoxil\",\"writeBatchTimeout\":\"datakqiqsriubem\",\"sinkRetryCount\":\"datauygmrenrbn\",\"sinkRetryWait\":\"dataafmophtky\",\"maxConcurrentConnections\":\"datagayngmowvcnvfgqx\",\"disableMetricsCollection\":\"dataysuapdns\",\"\":{\"ycjdnio\":\"dataqxr\"}}")
            .toObject(SnowflakeSink.class);
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SnowflakeSink model
            = new SnowflakeSink().withWriteBatchSize("datacesqpvmoxil").withWriteBatchTimeout("datakqiqsriubem")
                .withSinkRetryCount("datauygmrenrbn").withSinkRetryWait("dataafmophtky")
                .withMaxConcurrentConnections("datagayngmowvcnvfgqx").withDisableMetricsCollection("dataysuapdns")
                .withPreCopyScript(
                    "datamuj")
                .withImportSettings(new SnowflakeImportCopyCommand()
                    .withAdditionalCopyOptions(mapOf("mumuc", "datahepfjdiwzg", "xgelnjgftqkgavgo", "datavqwhscvaq",
                        "kskkziebm", "datallxpaylkrast", "gdxdtxbr", "datayodfmp"))
                    .withAdditionalFormatOptions(
                        mapOf("pf", "datawqt", "kdoukqsc", "datafrfvhbbnoevkkr", "lgu", "datadsjgows")));
        model = BinaryData.fromObject(model).toObject(SnowflakeSink.class);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
