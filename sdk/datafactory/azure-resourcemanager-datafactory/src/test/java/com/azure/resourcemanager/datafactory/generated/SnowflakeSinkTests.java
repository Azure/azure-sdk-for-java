// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.SnowflakeImportCopyCommand;
import com.azure.resourcemanager.datafactory.models.SnowflakeSink;
import java.util.HashMap;
import java.util.Map;

public final class SnowflakeSinkTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SnowflakeSink model = BinaryData.fromString(
            "{\"type\":\"SnowflakeSink\",\"preCopyScript\":\"datauax\",\"importSettings\":{\"type\":\"SnowflakeImportCopyCommand\",\"additionalCopyOptions\":{\"dipnd\":\"dataw\",\"jrhctb\":\"dataql\",\"gdam\":\"datav\"},\"additionalFormatOptions\":{\"izbyczmepcacgvln\":\"dataqfjpkezq\",\"rulnhbqtvyhs\":\"datajjbyryrktuvdest\",\"pcuizvxjsvzh\":\"datahcrffjxex\"},\"\":{\"qkxzrflo\":\"dataotds\",\"fq\":\"datazmvemliyd\",\"h\":\"datanftrrhhgwawi\",\"dvkdnf\":\"datanvcf\"}},\"writeBatchSize\":\"datatxultxhqqvdhd\",\"writeBatchTimeout\":\"dataadtxnepubsdinf\",\"sinkRetryCount\":\"dataytmqvsdyqy\",\"sinkRetryWait\":\"datamfot\",\"maxConcurrentConnections\":\"dataxed\",\"disableMetricsCollection\":\"dataxmyxtpbapojknv\",\"\":{\"vr\":\"datatlpspiipfgdnqpk\",\"ruoduexhskh\":\"dataoqyvqdv\",\"xhegc\":\"dataqlvocrdd\"}}")
            .toObject(SnowflakeSink.class);
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SnowflakeSink model = new SnowflakeSink().withWriteBatchSize("datatxultxhqqvdhd")
            .withWriteBatchTimeout("dataadtxnepubsdinf").withSinkRetryCount("dataytmqvsdyqy")
            .withSinkRetryWait("datamfot").withMaxConcurrentConnections("dataxed")
            .withDisableMetricsCollection("dataxmyxtpbapojknv").withPreCopyScript("datauax")
            .withImportSettings(new SnowflakeImportCopyCommand()
                .withAdditionalCopyOptions(mapOf("dipnd", "dataw", "jrhctb", "dataql", "gdam", "datav"))
                .withAdditionalFormatOptions(mapOf("izbyczmepcacgvln", "dataqfjpkezq", "rulnhbqtvyhs",
                    "datajjbyryrktuvdest", "pcuizvxjsvzh", "datahcrffjxex")));
        model = BinaryData.fromObject(model).toObject(SnowflakeSink.class);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
