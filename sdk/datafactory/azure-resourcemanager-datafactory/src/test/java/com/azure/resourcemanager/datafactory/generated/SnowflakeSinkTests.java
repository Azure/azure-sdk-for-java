// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.SnowflakeImportCopyCommand;
import com.azure.resourcemanager.datafactory.models.SnowflakeSink;
import java.util.HashMap;
import java.util.Map;

public final class SnowflakeSinkTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SnowflakeSink model = BinaryData.fromString(
            "{\"type\":\"SnowflakeSink\",\"preCopyScript\":\"datastofdedlmfwabf\",\"importSettings\":{\"type\":\"SnowflakeImportCopyCommand\",\"additionalCopyOptions\":{\"lwh\":\"databiwxmcsxidaz\",\"fperheiplzms\":\"datayikhdcilinbuok\",\"u\":\"datahqrdvqvalo\",\"fjgklmyomav\":\"datawoigofumbpmzed\"},\"additionalFormatOptions\":{\"tqvjn\":\"dataaoaixipcwyinfy\",\"yaeyyiwraowpdm\":\"dataemqwut\",\"dmwcxvcron\":\"dataxugd\",\"z\":\"dataidhwoyznjddsh\"},\"\":{\"puotniqzqmpgvyy\":\"datavxv\",\"w\":\"datajwwbrhjhcwcfftsz\"}},\"writeBatchSize\":\"dataighjgvhgyeoikxjp\",\"writeBatchTimeout\":\"dataggpsaqfn\",\"sinkRetryCount\":\"datauwawmbusleg\",\"sinkRetryWait\":\"dataqzkzworuhhvdeodc\",\"maxConcurrentConnections\":\"datahfxb\",\"disableMetricsCollection\":\"datapn\",\"\":{\"lhwutyuvuzqtrf\":\"dataylgpznb\"}}")
            .toObject(SnowflakeSink.class);
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SnowflakeSink model = new SnowflakeSink().withWriteBatchSize("dataighjgvhgyeoikxjp")
            .withWriteBatchTimeout("dataggpsaqfn").withSinkRetryCount("datauwawmbusleg")
            .withSinkRetryWait("dataqzkzworuhhvdeodc").withMaxConcurrentConnections("datahfxb")
            .withDisableMetricsCollection("datapn").withPreCopyScript("datastofdedlmfwabf")
            .withImportSettings(new SnowflakeImportCopyCommand()
                .withAdditionalCopyOptions(mapOf("lwh", "databiwxmcsxidaz", "fperheiplzms", "datayikhdcilinbuok", "u",
                    "datahqrdvqvalo", "fjgklmyomav", "datawoigofumbpmzed"))
                .withAdditionalFormatOptions(mapOf("tqvjn", "dataaoaixipcwyinfy", "yaeyyiwraowpdm", "dataemqwut",
                    "dmwcxvcron", "dataxugd", "z", "dataidhwoyznjddsh")));
        model = BinaryData.fromObject(model).toObject(SnowflakeSink.class);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
