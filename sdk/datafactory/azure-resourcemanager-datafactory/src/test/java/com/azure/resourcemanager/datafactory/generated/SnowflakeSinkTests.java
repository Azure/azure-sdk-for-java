// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.SnowflakeImportCopyCommand;
import com.azure.resourcemanager.datafactory.models.SnowflakeSink;
import java.util.HashMap;
import java.util.Map;

public final class SnowflakeSinkTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SnowflakeSink model = BinaryData.fromString(
            "{\"type\":\"SnowflakeSink\",\"preCopyScript\":\"dataer\",\"importSettings\":{\"type\":\"SnowflakeImportCopyCommand\",\"additionalCopyOptions\":{\"mswhqrdvqva\":\"datal\"},\"additionalFormatOptions\":{\"woigofumbpmzed\":\"datau\"},\"storageIntegration\":\"datajgklmyomavbota\",\"\":{\"fywtqv\":\"dataxipcwyi\"}},\"writeBatchSize\":\"dataoemqwutbya\",\"writeBatchTimeout\":\"datayiwraowp\",\"sinkRetryCount\":\"dataexugdjdmw\",\"sinkRetryWait\":\"datavcronridhwoyzn\",\"maxConcurrentConnections\":\"datadshazlomvxvi\",\"disableMetricsCollection\":\"dataotniqzqmpgvy\",\"\":{\"jhcwcffts\":\"datawwbr\",\"eoikxjpuwg\":\"dataswvyighjgvhg\",\"wawmbusle\":\"datapsaqfnbx\",\"cdjhfxbkgpnxu\":\"datatsqzkzworuhhvdeo\"}}")
            .toObject(SnowflakeSink.class);
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SnowflakeSink model = new SnowflakeSink().withWriteBatchSize("dataoemqwutbya")
            .withWriteBatchTimeout("datayiwraowp")
            .withSinkRetryCount("dataexugdjdmw")
            .withSinkRetryWait("datavcronridhwoyzn")
            .withMaxConcurrentConnections("datadshazlomvxvi")
            .withDisableMetricsCollection("dataotniqzqmpgvy")
            .withPreCopyScript("dataer")
            .withImportSettings(
                new SnowflakeImportCopyCommand().withAdditionalCopyOptions(mapOf("mswhqrdvqva", "datal"))
                    .withAdditionalFormatOptions(mapOf("woigofumbpmzed", "datau"))
                    .withStorageIntegration("datajgklmyomavbota"));
        model = BinaryData.fromObject(model).toObject(SnowflakeSink.class);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
