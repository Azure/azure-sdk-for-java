// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.SnowflakeImportCopyCommand;
import com.azure.resourcemanager.datafactory.models.SnowflakeSink;
import java.util.HashMap;
import java.util.Map;

public final class SnowflakeSinkTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SnowflakeSink model = BinaryData.fromString(
            "{\"type\":\"SnowflakeSink\",\"preCopyScript\":\"datagwohkromzsse\",\"importSettings\":{\"type\":\"SnowflakeImportCopyCommand\",\"additionalCopyOptions\":{\"lvhbg\":\"datajyovr\",\"gpsalynan\":\"datagjpiezthf\",\"rxizorqliblybx\":\"datawzpfbiqjrz\"},\"additionalFormatOptions\":{\"zdyoznidstofded\":\"dataknkf\",\"biwxmcsxidaz\":\"datamfwabfgfw\",\"yikhdcilinbuok\":\"datalwh\"},\"storageIntegration\":\"dataperhei\",\"\":{\"oauu\":\"datamswhqrdvqva\"}},\"writeBatchSize\":\"dataigofumbp\",\"writeBatchTimeout\":\"dataedmfjgklm\",\"sinkRetryCount\":\"datamavb\",\"sinkRetryWait\":\"dataaoaixipcwyinfy\",\"maxConcurrentConnections\":\"dataqvjnoem\",\"disableMetricsCollection\":\"datautbyaeyyiwr\",\"\":{\"onridhwoyznjdd\":\"datapdmexugdjdmwcxvc\",\"ipuot\":\"datahazlomvx\",\"rhjh\":\"dataiqzqmpgvyydjww\",\"h\":\"datawcfftszswvyi\"}}")
            .toObject(SnowflakeSink.class);
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SnowflakeSink model = new SnowflakeSink().withWriteBatchSize("dataigofumbp")
            .withWriteBatchTimeout("dataedmfjgklm")
            .withSinkRetryCount("datamavb")
            .withSinkRetryWait("dataaoaixipcwyinfy")
            .withMaxConcurrentConnections("dataqvjnoem")
            .withDisableMetricsCollection("datautbyaeyyiwr")
            .withPreCopyScript("datagwohkromzsse")
            .withImportSettings(new SnowflakeImportCopyCommand()
                .withAdditionalCopyOptions(
                    mapOf("lvhbg", "datajyovr", "gpsalynan", "datagjpiezthf", "rxizorqliblybx", "datawzpfbiqjrz"))
                .withAdditionalFormatOptions(
                    mapOf("zdyoznidstofded", "dataknkf", "biwxmcsxidaz", "datamfwabfgfw", "yikhdcilinbuok", "datalwh"))
                .withStorageIntegration("dataperhei"));
        model = BinaryData.fromObject(model).toObject(SnowflakeSink.class);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
