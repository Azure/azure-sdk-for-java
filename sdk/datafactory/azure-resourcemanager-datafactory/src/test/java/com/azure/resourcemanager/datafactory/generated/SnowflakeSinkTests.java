// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.SnowflakeImportCopyCommand;
import com.azure.resourcemanager.datafactory.models.SnowflakeSink;
import java.util.HashMap;
import java.util.Map;

public final class SnowflakeSinkTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SnowflakeSink model =
            BinaryData
                .fromString(
                    "{\"type\":\"SnowflakeSink\",\"preCopyScript\":\"datax\",\"importSettings\":{\"type\":\"SnowflakeImportCopyCommand\",\"additionalCopyOptions\":{\"chysnmyuvfml\":\"datanghtknr\",\"pxoelfobehr\":\"datanrapxwt\",\"lojjcz\":\"dataf\"},\"additionalFormatOptions\":{\"gnqa\":\"datafwkvirmbrd\",\"ybh\":\"datankms\",\"enazjvyiiezd\":\"datadzvuhw\"},\"\":{\"y\":\"dataxtqzdbrmyutzttr\",\"ztz\":\"dataivkkuzrvceg\",\"lro\":\"datacfuwmxezzum\"}},\"writeBatchSize\":\"dataflh\",\"writeBatchTimeout\":\"dataspxblyokjwsszye\",\"sinkRetryCount\":\"dataoukdhnf\",\"sinkRetryWait\":\"datadggjihnzvoehgw\",\"maxConcurrentConnections\":\"datagcnkghgczjx\",\"disableMetricsCollection\":\"dataxigdwpgmhqhvne\",\"\":{\"aqlymmhzvnetecfy\":\"dataxqwc\",\"zxqwvvfkqbgkss\":\"datasfkcwfpoaflgkz\"}}")
                .toObject(SnowflakeSink.class);
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SnowflakeSink model =
            new SnowflakeSink()
                .withWriteBatchSize("dataflh")
                .withWriteBatchTimeout("dataspxblyokjwsszye")
                .withSinkRetryCount("dataoukdhnf")
                .withSinkRetryWait("datadggjihnzvoehgw")
                .withMaxConcurrentConnections("datagcnkghgczjx")
                .withDisableMetricsCollection("dataxigdwpgmhqhvne")
                .withPreCopyScript("datax")
                .withImportSettings(
                    new SnowflakeImportCopyCommand()
                        .withAdditionalCopyOptions(
                            mapOf("chysnmyuvfml", "datanghtknr", "pxoelfobehr", "datanrapxwt", "lojjcz", "dataf"))
                        .withAdditionalFormatOptions(
                            mapOf("gnqa", "datafwkvirmbrd", "ybh", "datankms", "enazjvyiiezd", "datadzvuhw")));
        model = BinaryData.fromObject(model).toObject(SnowflakeSink.class);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
