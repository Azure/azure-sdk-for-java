// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.MicrosoftAccessTableDataset;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MicrosoftAccessTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MicrosoftAccessTableDataset model = BinaryData.fromString(
            "{\"type\":\"suivmrf\",\"typeProperties\":{\"tableName\":\"databmseesacuicnvq\"},\"description\":\"tnd\",\"structure\":\"datamnlhnkmx\",\"schema\":\"datakekc\",\"linkedServiceName\":{\"referenceName\":\"aviiebeqrfz\",\"parameters\":{\"r\":\"dataymcwtsiucepl\",\"e\":\"datagkuorwpqbst\"}},\"parameters\":{\"noyjyflsm\":{\"type\":\"Float\",\"defaultValue\":\"datacruykkielay\"},\"gdfz\":{\"type\":\"Array\",\"defaultValue\":\"datalyoi\"}},\"annotations\":[\"datahykcvoevcwf\",\"dataotkxxlwwooxg\",\"datasdz\",\"datagcvypjhu\"],\"folder\":{\"name\":\"gobxehujcqg\"},\"\":{\"klqrljdc\":\"dataxwiuaoibm\",\"hgxuwudgcyqruvum\":\"datakylaxrjiqoqovqhg\",\"cqwnjz\":\"datayddnqivah\"}}")
            .toObject(MicrosoftAccessTableDataset.class);
        Assertions.assertEquals("tnd", model.description());
        Assertions.assertEquals("aviiebeqrfz", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.FLOAT, model.parameters().get("noyjyflsm").type());
        Assertions.assertEquals("gobxehujcqg", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MicrosoftAccessTableDataset model = new MicrosoftAccessTableDataset().withDescription("tnd")
            .withStructure("datamnlhnkmx")
            .withSchema("datakekc")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("aviiebeqrfz")
                .withParameters(mapOf("r", "dataymcwtsiucepl", "e", "datagkuorwpqbst")))
            .withParameters(mapOf("noyjyflsm",
                new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("datacruykkielay"), "gdfz",
                new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("datalyoi")))
            .withAnnotations(Arrays.asList("datahykcvoevcwf", "dataotkxxlwwooxg", "datasdz", "datagcvypjhu"))
            .withFolder(new DatasetFolder().withName("gobxehujcqg"))
            .withTableName("databmseesacuicnvq");
        model = BinaryData.fromObject(model).toObject(MicrosoftAccessTableDataset.class);
        Assertions.assertEquals("tnd", model.description());
        Assertions.assertEquals("aviiebeqrfz", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.FLOAT, model.parameters().get("noyjyflsm").type());
        Assertions.assertEquals("gobxehujcqg", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
