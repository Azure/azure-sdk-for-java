// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.MicrosoftAccessTableDataset;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MicrosoftAccessTableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MicrosoftAccessTableDataset model = BinaryData.fromString(
            "{\"type\":\"MicrosoftAccessTable\",\"typeProperties\":{\"tableName\":\"databydlgfaphwu\"},\"description\":\"wtsaynrtvj\",\"structure\":\"datareeoxvq\",\"schema\":\"datarnbli\",\"linkedServiceName\":{\"referenceName\":\"sdbfbmdiv\",\"parameters\":{\"jg\":\"datah\",\"aub\":\"datazmiaoaweacf\"}},\"parameters\":{\"dckhsq\":{\"type\":\"Float\",\"defaultValue\":\"datatcnxriqz\"},\"okohlsfj\":{\"type\":\"Array\",\"defaultValue\":\"datajsurnowobwxrxm\"}},\"annotations\":[\"dataqjpzhe\",\"datahuv\"],\"folder\":{\"name\":\"qkvadmjhymud\"},\"\":{\"rmclyqwwu\":\"dataajzdebhs\",\"svkb\":\"datayqkaaptb\",\"bloccu\":\"databptw\",\"uybutcdzjfjt\":\"dataplxzbnsshvqnpszb\"}}")
            .toObject(MicrosoftAccessTableDataset.class);
        Assertions.assertEquals("wtsaynrtvj", model.description());
        Assertions.assertEquals("sdbfbmdiv", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.FLOAT, model.parameters().get("dckhsq").type());
        Assertions.assertEquals("qkvadmjhymud", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MicrosoftAccessTableDataset model = new MicrosoftAccessTableDataset().withDescription("wtsaynrtvj")
            .withStructure("datareeoxvq")
            .withSchema("datarnbli")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("sdbfbmdiv")
                .withParameters(mapOf("jg", "datah", "aub", "datazmiaoaweacf")))
            .withParameters(mapOf("dckhsq",
                new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("datatcnxriqz"), "okohlsfj",
                new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("datajsurnowobwxrxm")))
            .withAnnotations(Arrays.asList("dataqjpzhe", "datahuv"))
            .withFolder(new DatasetFolder().withName("qkvadmjhymud"))
            .withTableName("databydlgfaphwu");
        model = BinaryData.fromObject(model).toObject(MicrosoftAccessTableDataset.class);
        Assertions.assertEquals("wtsaynrtvj", model.description());
        Assertions.assertEquals("sdbfbmdiv", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.FLOAT, model.parameters().get("dckhsq").type());
        Assertions.assertEquals("qkvadmjhymud", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
