// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.HDInsightHiveActivityTypeProperties;
import com.azure.resourcemanager.datafactory.models.HDInsightActivityDebugInfoOption;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class HDInsightHiveActivityTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HDInsightHiveActivityTypeProperties model = BinaryData.fromString(
            "{\"storageLinkedServices\":[{\"referenceName\":\"wkhruzz\",\"parameters\":{\"yqvnlhs\":\"databozivf\",\"uvvscbpkmohd\":\"dataeasxsq\",\"rqyib\":\"datak\"}},{\"referenceName\":\"uzvmorsyirf\",\"parameters\":{\"vaqoilgkznn\":\"datazuboigorwpbbjz\",\"vvsaatyyp\":\"datapvjwegoviceqyraj\"}},{\"referenceName\":\"rcazcc\",\"parameters\":{\"azztvotf\":\"datawc\",\"fgxx\":\"datahayfx\"}}],\"arguments\":[\"dataliguwqoszcm\",\"datamynljigjc\"],\"getDebugInfo\":\"Always\",\"scriptPath\":\"datam\",\"scriptLinkedService\":{\"referenceName\":\"iv\",\"parameters\":{\"rvjbnhbxvvufq\":\"dataewpnpu\"}},\"defines\":{\"srcqdthmlqa\":\"datauosajq\",\"akc\":\"datadlcukdmrvr\",\"tqgabbx\":\"datalsnprda\",\"pkxbwobovexsnm\":\"dataxacgm\"},\"variables\":{\"kdl\":\"databmujlsztpygq\",\"mkc\":\"datasn\",\"n\":\"datamksfejzmyvlbz\"},\"queryTimeout\":1933901914}")
            .toObject(HDInsightHiveActivityTypeProperties.class);
        Assertions.assertEquals("wkhruzz", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.ALWAYS, model.getDebugInfo());
        Assertions.assertEquals("iv", model.scriptLinkedService().referenceName());
        Assertions.assertEquals(1933901914, model.queryTimeout());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HDInsightHiveActivityTypeProperties model = new HDInsightHiveActivityTypeProperties()
            .withStorageLinkedServices(Arrays.asList(
                new LinkedServiceReference().withReferenceName("wkhruzz")
                    .withParameters(mapOf("yqvnlhs", "databozivf", "uvvscbpkmohd", "dataeasxsq", "rqyib", "datak")),
                new LinkedServiceReference().withReferenceName("uzvmorsyirf")
                    .withParameters(mapOf("vaqoilgkznn", "datazuboigorwpbbjz", "vvsaatyyp", "datapvjwegoviceqyraj")),
                new LinkedServiceReference().withReferenceName("rcazcc")
                    .withParameters(mapOf("azztvotf", "datawc", "fgxx", "datahayfx"))))
            .withArguments(Arrays.asList("dataliguwqoszcm", "datamynljigjc"))
            .withGetDebugInfo(HDInsightActivityDebugInfoOption.ALWAYS).withScriptPath("datam")
            .withScriptLinkedService(new LinkedServiceReference().withReferenceName("iv")
                .withParameters(mapOf("rvjbnhbxvvufq", "dataewpnpu")))
            .withDefines(mapOf("srcqdthmlqa", "datauosajq", "akc", "datadlcukdmrvr", "tqgabbx", "datalsnprda",
                "pkxbwobovexsnm", "dataxacgm"))
            .withVariables(mapOf("kdl", "databmujlsztpygq", "mkc", "datasn", "n", "datamksfejzmyvlbz"))
            .withQueryTimeout(1933901914);
        model = BinaryData.fromObject(model).toObject(HDInsightHiveActivityTypeProperties.class);
        Assertions.assertEquals("wkhruzz", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.ALWAYS, model.getDebugInfo());
        Assertions.assertEquals("iv", model.scriptLinkedService().referenceName());
        Assertions.assertEquals(1933901914, model.queryTimeout());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
