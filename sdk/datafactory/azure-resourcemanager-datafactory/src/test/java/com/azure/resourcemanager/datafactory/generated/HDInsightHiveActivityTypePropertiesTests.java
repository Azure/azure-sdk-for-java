// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.HDInsightHiveActivityTypeProperties;
import com.azure.resourcemanager.datafactory.models.HDInsightActivityDebugInfoOption;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class HDInsightHiveActivityTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HDInsightHiveActivityTypeProperties model = BinaryData.fromString(
            "{\"storageLinkedServices\":[{\"referenceName\":\"yl\",\"parameters\":{\"eqdj\":\"datajficzwikglmcgyz\"}},{\"referenceName\":\"urbjxka\",\"parameters\":{\"wfbqxo\":\"dataguzv\",\"dcolnxwdp\":\"datanvij\",\"ezptngrpzvimxa\":\"dataiodnntol\",\"komrp\":\"dataxcaczc\"}},{\"referenceName\":\"c\",\"parameters\":{\"nxdyskyrhsijx\":\"dataxpdqwyw\",\"suwmbdtfetrgzy\":\"dataliuymfx\",\"qszqkrsnx\":\"dataprrapghloemqapv\"}}],\"arguments\":[\"datawrbqadtvpgu\"],\"getDebugInfo\":\"Failure\",\"scriptPath\":\"datagkriv\",\"scriptLinkedService\":{\"referenceName\":\"x\",\"parameters\":{\"zjkz\":\"datalphkiyiqpiiod\",\"cxbkwm\":\"datalvxdpopubbwps\",\"rsnnvlm\":\"datajqakacbc\"}},\"defines\":{\"kbisjurilqcsqzd\":\"datagtwqmtyfqutm\",\"ogockbizqqa\":\"datarbu\",\"pqzv\":\"datasuauwojg\",\"nbr\":\"datagwlzqcyvrbg\"},\"variables\":{\"jfkqubnnmz\":\"datajb\",\"dfxxaoyisky\":\"datacbcxbvnhlw\",\"qbwjtnfa\":\"dataasxak\"},\"queryTimeout\":1366062204}")
            .toObject(HDInsightHiveActivityTypeProperties.class);
        Assertions.assertEquals("yl", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.FAILURE, model.getDebugInfo());
        Assertions.assertEquals("x", model.scriptLinkedService().referenceName());
        Assertions.assertEquals(1366062204, model.queryTimeout());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HDInsightHiveActivityTypeProperties model = new HDInsightHiveActivityTypeProperties()
            .withStorageLinkedServices(Arrays.asList(
                new LinkedServiceReference().withReferenceName("yl")
                    .withParameters(mapOf("eqdj", "datajficzwikglmcgyz")),
                new LinkedServiceReference().withReferenceName("urbjxka")
                    .withParameters(mapOf("wfbqxo", "dataguzv", "dcolnxwdp", "datanvij", "ezptngrpzvimxa",
                        "dataiodnntol", "komrp", "dataxcaczc")),
                new LinkedServiceReference().withReferenceName("c")
                    .withParameters(mapOf("nxdyskyrhsijx", "dataxpdqwyw", "suwmbdtfetrgzy", "dataliuymfx", "qszqkrsnx",
                        "dataprrapghloemqapv"))))
            .withArguments(Arrays.asList("datawrbqadtvpgu"))
            .withGetDebugInfo(HDInsightActivityDebugInfoOption.FAILURE)
            .withScriptPath("datagkriv")
            .withScriptLinkedService(new LinkedServiceReference().withReferenceName("x")
                .withParameters(
                    mapOf("zjkz", "datalphkiyiqpiiod", "cxbkwm", "datalvxdpopubbwps", "rsnnvlm", "datajqakacbc")))
            .withDefines(mapOf("kbisjurilqcsqzd", "datagtwqmtyfqutm", "ogockbizqqa", "datarbu", "pqzv", "datasuauwojg",
                "nbr", "datagwlzqcyvrbg"))
            .withVariables(mapOf("jfkqubnnmz", "datajb", "dfxxaoyisky", "datacbcxbvnhlw", "qbwjtnfa", "dataasxak"))
            .withQueryTimeout(1366062204);
        model = BinaryData.fromObject(model).toObject(HDInsightHiveActivityTypeProperties.class);
        Assertions.assertEquals("yl", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.FAILURE, model.getDebugInfo());
        Assertions.assertEquals("x", model.scriptLinkedService().referenceName());
        Assertions.assertEquals(1366062204, model.queryTimeout());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
