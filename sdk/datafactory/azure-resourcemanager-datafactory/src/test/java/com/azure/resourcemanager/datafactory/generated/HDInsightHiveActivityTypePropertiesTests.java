// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.HDInsightHiveActivityTypeProperties;
import com.azure.resourcemanager.datafactory.models.HDInsightActivityDebugInfoOption;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class HDInsightHiveActivityTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HDInsightHiveActivityTypeProperties model = BinaryData.fromString(
            "{\"storageLinkedServices\":[{\"referenceName\":\"ahciapvcs\",\"parameters\":{\"ltftaqmrimlet\":\"datarpcpg\",\"ptf\":\"datav\",\"blhzfglpswg\":\"dataab\"}}],\"arguments\":[\"dataupwrizkqnbiia\"],\"getDebugInfo\":\"None\",\"scriptPath\":\"datajp\",\"scriptLinkedService\":{\"referenceName\":\"as\",\"parameters\":{\"uhvdrfh\":\"dataosltch\",\"nojfdiijch\":\"datarcx\",\"ruomwyoktzffp\":\"dataaaabtxrhemnkyk\"}},\"defines\":{\"qvkuvy\":\"datahjpze\",\"rfok\":\"datai\"},\"variables\":{\"apkbdhy\":\"dataoiks\",\"ktwayha\":\"datamugkugwtg\"},\"queryTimeout\":400323471}")
            .toObject(HDInsightHiveActivityTypeProperties.class);
        Assertions.assertEquals("ahciapvcs", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.NONE, model.getDebugInfo());
        Assertions.assertEquals("as", model.scriptLinkedService().referenceName());
        Assertions.assertEquals(400323471, model.queryTimeout());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HDInsightHiveActivityTypeProperties model = new HDInsightHiveActivityTypeProperties()
            .withStorageLinkedServices(Arrays.asList(new LinkedServiceReference().withReferenceName("ahciapvcs")
                .withParameters(mapOf("ltftaqmrimlet", "datarpcpg", "ptf", "datav", "blhzfglpswg", "dataab"))))
            .withArguments(Arrays.asList("dataupwrizkqnbiia"))
            .withGetDebugInfo(HDInsightActivityDebugInfoOption.NONE)
            .withScriptPath("datajp")
            .withScriptLinkedService(new LinkedServiceReference().withReferenceName("as")
                .withParameters(
                    mapOf("uhvdrfh", "dataosltch", "nojfdiijch", "datarcx", "ruomwyoktzffp", "dataaaabtxrhemnkyk")))
            .withDefines(mapOf("qvkuvy", "datahjpze", "rfok", "datai"))
            .withVariables(mapOf("apkbdhy", "dataoiks", "ktwayha", "datamugkugwtg"))
            .withQueryTimeout(400323471);
        model = BinaryData.fromObject(model).toObject(HDInsightHiveActivityTypeProperties.class);
        Assertions.assertEquals("ahciapvcs", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.NONE, model.getDebugInfo());
        Assertions.assertEquals("as", model.scriptLinkedService().referenceName());
        Assertions.assertEquals(400323471, model.queryTimeout());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
