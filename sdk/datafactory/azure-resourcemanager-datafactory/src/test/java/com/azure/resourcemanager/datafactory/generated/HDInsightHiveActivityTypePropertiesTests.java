// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.HDInsightHiveActivityTypeProperties;
import com.azure.resourcemanager.datafactory.models.HDInsightActivityDebugInfoOption;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class HDInsightHiveActivityTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HDInsightHiveActivityTypeProperties model = BinaryData.fromString(
            "{\"storageLinkedServices\":[{\"referenceName\":\"idoqvcjspjpmt\",\"parameters\":{\"cgzvqpnjqpwx\":\"datavizaygtbmluy\",\"pa\":\"datakui\",\"dleegwlhanyueizh\":\"datavlnzwicqopwm\"}},{\"referenceName\":\"djkmxbghxiotlfzb\",\"parameters\":{\"dicoaysar\":\"datauqkb\"}},{\"referenceName\":\"qkgausc\",\"parameters\":{\"fejdgojavqezek\":\"datayfyjeexmlkx\",\"s\":\"datavayyyowjpsmnxcc\"}},{\"referenceName\":\"hlokhmkqy\",\"parameters\":{\"lmwzkxaglwd\":\"dataddwfhfjfato\",\"hvioccszdaxafu\":\"datatjfnmxzu\"}}],\"arguments\":[\"datanqfwobnbluutm\",\"dataimlozlfdxjirfye\"],\"getDebugInfo\":\"None\",\"scriptPath\":\"datadc\",\"scriptLinkedService\":{\"referenceName\":\"ormxipwcqha\",\"parameters\":{\"wiocuhas\":\"datafnfa\",\"whotjcgdpqk\":\"dataielhtukhei\"}},\"defines\":{\"vrglqlvmkeseyqo\":\"dataqm\",\"hmzlet\":\"datamjuqq\",\"uefjbmowqwodm\":\"datackjuwkkvarff\",\"ciapvcsw\":\"datardtywajqwa\"},\"variables\":{\"tftaqmrimletjvz\":\"datapcpgc\",\"wgszxupwriz\":\"datatfgabiblhzfglp\"},\"queryTimeout\":948481905}")
            .toObject(HDInsightHiveActivityTypeProperties.class);
        Assertions.assertEquals("idoqvcjspjpmt", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.NONE, model.getDebugInfo());
        Assertions.assertEquals("ormxipwcqha", model.scriptLinkedService().referenceName());
        Assertions.assertEquals(948481905, model.queryTimeout());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HDInsightHiveActivityTypeProperties model = new HDInsightHiveActivityTypeProperties()
            .withStorageLinkedServices(Arrays.asList(
                new LinkedServiceReference().withReferenceName("idoqvcjspjpmt")
                    .withParameters(mapOf("cgzvqpnjqpwx", "datavizaygtbmluy", "pa", "datakui", "dleegwlhanyueizh",
                        "datavlnzwicqopwm")),
                new LinkedServiceReference().withReferenceName("djkmxbghxiotlfzb")
                    .withParameters(mapOf("dicoaysar", "datauqkb")),
                new LinkedServiceReference().withReferenceName("qkgausc")
                    .withParameters(mapOf("fejdgojavqezek", "datayfyjeexmlkx", "s", "datavayyyowjpsmnxcc")),
                new LinkedServiceReference().withReferenceName("hlokhmkqy")
                    .withParameters(mapOf("lmwzkxaglwd", "dataddwfhfjfato", "hvioccszdaxafu", "datatjfnmxzu"))))
            .withArguments(Arrays.asList("datanqfwobnbluutm", "dataimlozlfdxjirfye"))
            .withGetDebugInfo(HDInsightActivityDebugInfoOption.NONE)
            .withScriptPath("datadc")
            .withScriptLinkedService(new LinkedServiceReference().withReferenceName("ormxipwcqha")
                .withParameters(mapOf("wiocuhas", "datafnfa", "whotjcgdpqk", "dataielhtukhei")))
            .withDefines(mapOf("vrglqlvmkeseyqo", "dataqm", "hmzlet", "datamjuqq", "uefjbmowqwodm", "datackjuwkkvarff",
                "ciapvcsw", "datardtywajqwa"))
            .withVariables(mapOf("tftaqmrimletjvz", "datapcpgc", "wgszxupwriz", "datatfgabiblhzfglp"))
            .withQueryTimeout(948481905);
        model = BinaryData.fromObject(model).toObject(HDInsightHiveActivityTypeProperties.class);
        Assertions.assertEquals("idoqvcjspjpmt", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.NONE, model.getDebugInfo());
        Assertions.assertEquals("ormxipwcqha", model.scriptLinkedService().referenceName());
        Assertions.assertEquals(948481905, model.queryTimeout());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
