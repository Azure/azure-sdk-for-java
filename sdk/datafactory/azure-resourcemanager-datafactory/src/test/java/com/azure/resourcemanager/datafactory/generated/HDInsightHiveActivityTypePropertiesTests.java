// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.HDInsightHiveActivityTypeProperties;
import com.azure.resourcemanager.datafactory.models.HDInsightActivityDebugInfoOption;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class HDInsightHiveActivityTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HDInsightHiveActivityTypeProperties model = BinaryData.fromString(
            "{\"storageLinkedServices\":[{\"referenceName\":\"fuqqb\",\"parameters\":{\"kn\":\"databhrspzkv\",\"uwkcnhdecxbi\":\"dataerednoes\",\"dntp\":\"datanfepixfdojxbyxf\",\"asvahbqoojd\":\"datasbtigegwaidqzf\"}}],\"arguments\":[\"dataxjlumrzfdbotn\",\"dataadanlhq\",\"datar\",\"databgiaoxpfkozvc\"],\"getDebugInfo\":\"None\",\"scriptPath\":\"dataurhgu\",\"scriptLinkedService\":{\"referenceName\":\"sspble\",\"parameters\":{\"zkkmrlptdk\":\"datayftklbbribg\",\"rivedshuxlhecz\":\"dataib\",\"bviw\":\"datamwwm\"}},\"defines\":{\"udskcadkyoo\":\"dataeysjglponkrhpyed\"},\"variables\":{\"wtwzufm\":\"datapcjrbfayduzzyxly\"},\"queryTimeout\":1907026033}")
            .toObject(HDInsightHiveActivityTypeProperties.class);
        Assertions.assertEquals("fuqqb", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.NONE, model.getDebugInfo());
        Assertions.assertEquals("sspble", model.scriptLinkedService().referenceName());
        Assertions.assertEquals(1907026033, model.queryTimeout());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HDInsightHiveActivityTypeProperties model = new HDInsightHiveActivityTypeProperties()
            .withStorageLinkedServices(Arrays.asList(new LinkedServiceReference().withReferenceName("fuqqb")
                .withParameters(mapOf("kn", "databhrspzkv", "uwkcnhdecxbi", "dataerednoes", "dntp",
                    "datanfepixfdojxbyxf", "asvahbqoojd", "datasbtigegwaidqzf"))))
            .withArguments(Arrays.asList("dataxjlumrzfdbotn", "dataadanlhq", "datar", "databgiaoxpfkozvc"))
            .withGetDebugInfo(HDInsightActivityDebugInfoOption.NONE)
            .withScriptPath("dataurhgu")
            .withScriptLinkedService(new LinkedServiceReference().withReferenceName("sspble")
                .withParameters(mapOf("zkkmrlptdk", "datayftklbbribg", "rivedshuxlhecz", "dataib", "bviw", "datamwwm")))
            .withDefines(mapOf("udskcadkyoo", "dataeysjglponkrhpyed"))
            .withVariables(mapOf("wtwzufm", "datapcjrbfayduzzyxly"))
            .withQueryTimeout(1907026033);
        model = BinaryData.fromObject(model).toObject(HDInsightHiveActivityTypeProperties.class);
        Assertions.assertEquals("fuqqb", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.NONE, model.getDebugInfo());
        Assertions.assertEquals("sspble", model.scriptLinkedService().referenceName());
        Assertions.assertEquals(1907026033, model.queryTimeout());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
