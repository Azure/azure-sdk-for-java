// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.HDInsightHiveActivityTypeProperties;
import com.azure.resourcemanager.datafactory.models.HDInsightActivityDebugInfoOption;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class HDInsightHiveActivityTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HDInsightHiveActivityTypeProperties model =
            BinaryData
                .fromString(
                    "{\"storageLinkedServices\":[{\"referenceName\":\"nhbxvvufq\",\"parameters\":{\"srcqdthmlqa\":\"datauosajq\",\"akc\":\"datadlcukdmrvr\",\"tqgabbx\":\"datalsnprda\",\"pkxbwobovexsnm\":\"dataxacgm\"}}],\"arguments\":[\"databmujlsztpygq\",\"datakdl\",\"datasn\"],\"getDebugInfo\":\"None\",\"scriptPath\":\"dataimksfejzmyvl\",\"scriptLinkedService\":{\"referenceName\":\"mngxzpdnbjov\",\"parameters\":{\"imyizdglzzaufin\":\"datavtnbtvlgkjfkaoe\",\"ntjgpyvjgsjyjn\":\"datavyxyrykn\"}},\"defines\":{\"vpamfpini\":\"databhwrncxwzuer\",\"kmfb\":\"datapb\",\"yl\":\"datauu\",\"vnlbjfsol\":\"datage\"},\"variables\":{\"lnhxr\":\"datau\",\"l\":\"datajshicvrmwbgpc\",\"pboaevtxi\":\"databxppvpgsrfshkjg\"},\"queryTimeout\":1275464615}")
                .toObject(HDInsightHiveActivityTypeProperties.class);
        Assertions.assertEquals("nhbxvvufq", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.NONE, model.getDebugInfo());
        Assertions.assertEquals("mngxzpdnbjov", model.scriptLinkedService().referenceName());
        Assertions.assertEquals(1275464615, model.queryTimeout());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HDInsightHiveActivityTypeProperties model =
            new HDInsightHiveActivityTypeProperties()
                .withStorageLinkedServices(
                    Arrays
                        .asList(
                            new LinkedServiceReference()
                                .withReferenceName("nhbxvvufq")
                                .withParameters(
                                    mapOf(
                                        "srcqdthmlqa",
                                        "datauosajq",
                                        "akc",
                                        "datadlcukdmrvr",
                                        "tqgabbx",
                                        "datalsnprda",
                                        "pkxbwobovexsnm",
                                        "dataxacgm"))))
                .withArguments(Arrays.asList("databmujlsztpygq", "datakdl", "datasn"))
                .withGetDebugInfo(HDInsightActivityDebugInfoOption.NONE)
                .withScriptPath("dataimksfejzmyvl")
                .withScriptLinkedService(
                    new LinkedServiceReference()
                        .withReferenceName("mngxzpdnbjov")
                        .withParameters(
                            mapOf("imyizdglzzaufin", "datavtnbtvlgkjfkaoe", "ntjgpyvjgsjyjn", "datavyxyrykn")))
                .withDefines(
                    mapOf("vpamfpini", "databhwrncxwzuer", "kmfb", "datapb", "yl", "datauu", "vnlbjfsol", "datage"))
                .withVariables(mapOf("lnhxr", "datau", "l", "datajshicvrmwbgpc", "pboaevtxi", "databxppvpgsrfshkjg"))
                .withQueryTimeout(1275464615);
        model = BinaryData.fromObject(model).toObject(HDInsightHiveActivityTypeProperties.class);
        Assertions.assertEquals("nhbxvvufq", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.NONE, model.getDebugInfo());
        Assertions.assertEquals("mngxzpdnbjov", model.scriptLinkedService().referenceName());
        Assertions.assertEquals(1275464615, model.queryTimeout());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
