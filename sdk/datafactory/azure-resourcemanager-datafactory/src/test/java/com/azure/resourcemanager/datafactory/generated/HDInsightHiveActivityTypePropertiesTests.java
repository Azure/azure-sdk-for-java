// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.HDInsightHiveActivityTypeProperties;
import com.azure.resourcemanager.datafactory.models.HDInsightActivityDebugInfoOption;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class HDInsightHiveActivityTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HDInsightHiveActivityTypeProperties model = BinaryData.fromString(
            "{\"storageLinkedServices\":[{\"referenceName\":\"ephviuexf\",\"parameters\":{\"axru\":\"datadoxhyiya\",\"xynkh\":\"datafkmti\"}},{\"referenceName\":\"p\",\"parameters\":{\"rnhpmsdgmx\":\"datahzdbbitp\",\"yevhnqtb\":\"datafodvzpxmojxbvgie\",\"xmqudnqcbbbhin\":\"datasvjodgplagwvgb\"}}],\"arguments\":[\"datasz\",\"databfzkvrmdoshi\",\"datayzqdnrgnyb\"],\"getDebugInfo\":\"Always\",\"scriptPath\":\"datajbmkhxunqrvqt\",\"scriptLinkedService\":{\"referenceName\":\"g\",\"parameters\":{\"u\":\"datapmcl\",\"dcqrssqwzndzuxlg\":\"datadabh\"}},\"defines\":{\"bzablmpntj\":\"datangyqlzozmbapj\",\"wlvsefvkxxd\":\"datazkymcgtbpbfbgfwj\",\"zm\":\"datagbnqmhr\",\"lqrkstjdjdasomxw\":\"dataxwgrflqbugxudsmd\"},\"variables\":{\"lsjf\":\"datayl\",\"qdjxurbjx\":\"dataczwikglmcgyzz\",\"guzv\":\"dataarx\"},\"queryTimeout\":841829397}")
            .toObject(HDInsightHiveActivityTypeProperties.class);
        Assertions.assertEquals("ephviuexf", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.ALWAYS, model.getDebugInfo());
        Assertions.assertEquals("g", model.scriptLinkedService().referenceName());
        Assertions.assertEquals(841829397, model.queryTimeout());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HDInsightHiveActivityTypeProperties model = new HDInsightHiveActivityTypeProperties()
            .withStorageLinkedServices(Arrays.asList(
                new LinkedServiceReference().withReferenceName("ephviuexf")
                    .withParameters(mapOf("axru", "datadoxhyiya", "xynkh", "datafkmti")),
                new LinkedServiceReference().withReferenceName("p")
                    .withParameters(mapOf("rnhpmsdgmx", "datahzdbbitp", "yevhnqtb", "datafodvzpxmojxbvgie",
                        "xmqudnqcbbbhin", "datasvjodgplagwvgb"))))
            .withArguments(Arrays.asList("datasz", "databfzkvrmdoshi", "datayzqdnrgnyb"))
            .withGetDebugInfo(HDInsightActivityDebugInfoOption.ALWAYS)
            .withScriptPath("datajbmkhxunqrvqt")
            .withScriptLinkedService(new LinkedServiceReference().withReferenceName("g")
                .withParameters(mapOf("u", "datapmcl", "dcqrssqwzndzuxlg", "datadabh")))
            .withDefines(mapOf("bzablmpntj", "datangyqlzozmbapj", "wlvsefvkxxd", "datazkymcgtbpbfbgfwj", "zm",
                "datagbnqmhr", "lqrkstjdjdasomxw", "dataxwgrflqbugxudsmd"))
            .withVariables(mapOf("lsjf", "datayl", "qdjxurbjx", "dataczwikglmcgyzz", "guzv", "dataarx"))
            .withQueryTimeout(841829397);
        model = BinaryData.fromObject(model).toObject(HDInsightHiveActivityTypeProperties.class);
        Assertions.assertEquals("ephviuexf", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.ALWAYS, model.getDebugInfo());
        Assertions.assertEquals("g", model.scriptLinkedService().referenceName());
        Assertions.assertEquals(841829397, model.queryTimeout());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
