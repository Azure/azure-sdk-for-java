// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.HDInsightHiveActivityTypeProperties;
import com.azure.resourcemanager.datafactory.models.HDInsightActivityDebugInfoOption;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class HDInsightHiveActivityTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HDInsightHiveActivityTypeProperties model = BinaryData.fromString(
            "{\"storageLinkedServices\":[{\"referenceName\":\"lkdoukqscmds\",\"parameters\":{\"lgu\":\"dataws\",\"pqykicesqpvmoxil\":\"datapeqlhhmbyfacexp\",\"iubemxmuygmr\":\"datapkqiqs\",\"fmophtkyzsgayn\":\"datanrbngc\"}},{\"referenceName\":\"mowvcnvfgqxq\",\"parameters\":{\"slroqxrvycj\":\"datauapd\",\"mggy\":\"datani\"}},{\"referenceName\":\"mpm\",\"parameters\":{\"oyxdig\":\"databamtoqsea\",\"lefiott\":\"dataggzmylqhqeosxdsx\"}},{\"referenceName\":\"awgkaohhtttyhy\",\"parameters\":{\"kkx\":\"datazjjjfcyskp\",\"bxsmfvltboc\":\"datai\",\"rlgkoqbzrclar\":\"datahvtpmvppvgrigje\",\"amshqvku\":\"datatfmfkuvybemo\"}}],\"arguments\":[\"datavzqhv\",\"datajdsnv\",\"datadbeanigozjrcx\"],\"getDebugInfo\":\"Always\",\"scriptPath\":\"datajalmzpfylqevwwvz\",\"scriptLinkedService\":{\"referenceName\":\"dxcizropzgjle\",\"parameters\":{\"egoupdqeflvd\":\"datafbhqkvbinstqwn\",\"atwbbfjd\":\"dataaqcqlexobeekzyeb\",\"cahhfuydg\":\"datalhnwoh\",\"lcvibp\":\"datahitavgayusp\"}},\"defines\":{\"bdefepwkhruzzw\":\"datae\",\"vnlhsxeasxsqqu\":\"databbozivfoy\",\"dukp\":\"datavscbpkmo\",\"vmo\":\"dataqyibwu\"},\"variables\":{\"azuboig\":\"datairfk\",\"bbjzdv\":\"datarw\",\"zpvjwego\":\"dataqoilgkzn\"},\"queryTimeout\":660954053}")
            .toObject(HDInsightHiveActivityTypeProperties.class);
        Assertions.assertEquals("lkdoukqscmds", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.ALWAYS, model.getDebugInfo());
        Assertions.assertEquals("dxcizropzgjle", model.scriptLinkedService().referenceName());
        Assertions.assertEquals(660954053, model.queryTimeout());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HDInsightHiveActivityTypeProperties model = new HDInsightHiveActivityTypeProperties()
            .withStorageLinkedServices(Arrays.asList(
                new LinkedServiceReference().withReferenceName("lkdoukqscmds")
                    .withParameters(mapOf("lgu", "dataws", "pqykicesqpvmoxil", "datapeqlhhmbyfacexp", "iubemxmuygmr",
                        "datapkqiqs", "fmophtkyzsgayn", "datanrbngc")),
                new LinkedServiceReference().withReferenceName("mowvcnvfgqxq")
                    .withParameters(mapOf("slroqxrvycj", "datauapd", "mggy", "datani")),
                new LinkedServiceReference().withReferenceName("mpm")
                    .withParameters(mapOf("oyxdig", "databamtoqsea", "lefiott", "dataggzmylqhqeosxdsx")),
                new LinkedServiceReference().withReferenceName("awgkaohhtttyhy")
                    .withParameters(mapOf("kkx", "datazjjjfcyskp", "bxsmfvltboc", "datai", "rlgkoqbzrclar",
                        "datahvtpmvppvgrigje", "amshqvku", "datatfmfkuvybemo"))))
            .withArguments(Arrays.asList("datavzqhv", "datajdsnv", "datadbeanigozjrcx"))
            .withGetDebugInfo(HDInsightActivityDebugInfoOption.ALWAYS)
            .withScriptPath("datajalmzpfylqevwwvz")
            .withScriptLinkedService(new LinkedServiceReference().withReferenceName("dxcizropzgjle")
                .withParameters(mapOf("egoupdqeflvd", "datafbhqkvbinstqwn", "atwbbfjd", "dataaqcqlexobeekzyeb",
                    "cahhfuydg", "datalhnwoh", "lcvibp", "datahitavgayusp")))
            .withDefines(mapOf("bdefepwkhruzzw", "datae", "vnlhsxeasxsqqu", "databbozivfoy", "dukp", "datavscbpkmo",
                "vmo", "dataqyibwu"))
            .withVariables(mapOf("azuboig", "datairfk", "bbjzdv", "datarw", "zpvjwego", "dataqoilgkzn"))
            .withQueryTimeout(660954053);
        model = BinaryData.fromObject(model).toObject(HDInsightHiveActivityTypeProperties.class);
        Assertions.assertEquals("lkdoukqscmds", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.ALWAYS, model.getDebugInfo());
        Assertions.assertEquals("dxcizropzgjle", model.scriptLinkedService().referenceName());
        Assertions.assertEquals(660954053, model.queryTimeout());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
