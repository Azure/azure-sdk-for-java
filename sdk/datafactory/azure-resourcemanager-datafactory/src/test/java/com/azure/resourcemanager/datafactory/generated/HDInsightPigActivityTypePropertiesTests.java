// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.HDInsightPigActivityTypeProperties;
import com.azure.resourcemanager.datafactory.models.HDInsightActivityDebugInfoOption;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class HDInsightPigActivityTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HDInsightPigActivityTypeProperties model =
            BinaryData
                .fromString(
                    "{\"storageLinkedServices\":[{\"referenceName\":\"yeblkgupgnstqs\",\"parameters\":{\"vkhufkt\":\"datamhioar\"}},{\"referenceName\":\"gt\",\"parameters\":{\"nbtnn\":\"datactreotzgkokfztrv\",\"wsbznjngerw\":\"dataamkegyskmh\",\"qzafjycfbdbzbabo\":\"datatlpsswoslqmft\"}},{\"referenceName\":\"egalecqyzdy\",\"parameters\":{\"hiaqegjvhy\":\"dataocnkbt\",\"ovvna\":\"datanqbhclbbksoqzzy\"}},{\"referenceName\":\"xmjmhclhcqcjn\",\"parameters\":{\"dasovlrjggvy\":\"databwqgs\",\"apxxbkxwh\":\"datatjebbacscirzt\"}}],\"arguments\":\"datahecpstfekbslyqml\",\"getDebugInfo\":\"None\",\"scriptPath\":\"datacnybhvzltbg\",\"scriptLinkedService\":{\"referenceName\":\"aepjmkruzogsszo\",\"parameters\":{\"mqe\":\"datanfaxcd\",\"ltugobscpt\":\"datahsirotj\",\"ifoznfdboumpks\":\"datakgqyuvhlpmjpzgjn\",\"hdlwlehhqxy\":\"datakdjpfsmdg\"}},\"defines\":{\"zgryf\":\"datakwvrrptblsata\",\"skuimv\":\"datawwqbeyvwdnjmji\",\"ucnpaesrairefif\":\"dataiyicxnxcimalvz\"}}")
                .toObject(HDInsightPigActivityTypeProperties.class);
        Assertions.assertEquals("yeblkgupgnstqs", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.NONE, model.getDebugInfo());
        Assertions.assertEquals("aepjmkruzogsszo", model.scriptLinkedService().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HDInsightPigActivityTypeProperties model =
            new HDInsightPigActivityTypeProperties()
                .withStorageLinkedServices(
                    Arrays
                        .asList(
                            new LinkedServiceReference()
                                .withReferenceName("yeblkgupgnstqs")
                                .withParameters(mapOf("vkhufkt", "datamhioar")),
                            new LinkedServiceReference()
                                .withReferenceName("gt")
                                .withParameters(
                                    mapOf(
                                        "nbtnn",
                                        "datactreotzgkokfztrv",
                                        "wsbznjngerw",
                                        "dataamkegyskmh",
                                        "qzafjycfbdbzbabo",
                                        "datatlpsswoslqmft")),
                            new LinkedServiceReference()
                                .withReferenceName("egalecqyzdy")
                                .withParameters(mapOf("hiaqegjvhy", "dataocnkbt", "ovvna", "datanqbhclbbksoqzzy")),
                            new LinkedServiceReference()
                                .withReferenceName("xmjmhclhcqcjn")
                                .withParameters(mapOf("dasovlrjggvy", "databwqgs", "apxxbkxwh", "datatjebbacscirzt"))))
                .withArguments("datahecpstfekbslyqml")
                .withGetDebugInfo(HDInsightActivityDebugInfoOption.NONE)
                .withScriptPath("datacnybhvzltbg")
                .withScriptLinkedService(
                    new LinkedServiceReference()
                        .withReferenceName("aepjmkruzogsszo")
                        .withParameters(
                            mapOf(
                                "mqe",
                                "datanfaxcd",
                                "ltugobscpt",
                                "datahsirotj",
                                "ifoznfdboumpks",
                                "datakgqyuvhlpmjpzgjn",
                                "hdlwlehhqxy",
                                "datakdjpfsmdg")))
                .withDefines(
                    mapOf(
                        "zgryf",
                        "datakwvrrptblsata",
                        "skuimv",
                        "datawwqbeyvwdnjmji",
                        "ucnpaesrairefif",
                        "dataiyicxnxcimalvz"));
        model = BinaryData.fromObject(model).toObject(HDInsightPigActivityTypeProperties.class);
        Assertions.assertEquals("yeblkgupgnstqs", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.NONE, model.getDebugInfo());
        Assertions.assertEquals("aepjmkruzogsszo", model.scriptLinkedService().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
