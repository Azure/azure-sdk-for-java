// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.HDInsightPigActivityTypeProperties;
import com.azure.resourcemanager.datafactory.models.HDInsightActivityDebugInfoOption;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class HDInsightPigActivityTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HDInsightPigActivityTypeProperties model = BinaryData.fromString(
            "{\"storageLinkedServices\":[{\"referenceName\":\"ugcngdulvd\",\"parameters\":{\"snljduwkbozlmrh\":\"dataguvaimkoyrp\",\"tevvowiyp\":\"dataghvlvdjxbjqiab\",\"cfta\":\"dataljzkxkdfyv\",\"neykxewemtazmrej\":\"dataydcrjlh\"}}],\"arguments\":\"dataxoqege\",\"getDebugInfo\":\"Always\",\"scriptPath\":\"dataf\",\"scriptLinkedService\":{\"referenceName\":\"glmyrkrtdk\",\"parameters\":{\"itlmcaehjhwkl\":\"datazwgrs\"}},\"defines\":{\"nwe\":\"dataqqgyp\",\"ytk\":\"databngojnaks\"}}")
            .toObject(HDInsightPigActivityTypeProperties.class);
        Assertions.assertEquals("ugcngdulvd", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.ALWAYS, model.getDebugInfo());
        Assertions.assertEquals("glmyrkrtdk", model.scriptLinkedService().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HDInsightPigActivityTypeProperties model = new HDInsightPigActivityTypeProperties()
            .withStorageLinkedServices(Arrays.asList(new LinkedServiceReference().withReferenceName("ugcngdulvd")
                .withParameters(mapOf("snljduwkbozlmrh", "dataguvaimkoyrp", "tevvowiyp", "dataghvlvdjxbjqiab", "cfta",
                    "dataljzkxkdfyv", "neykxewemtazmrej", "dataydcrjlh"))))
            .withArguments("dataxoqege")
            .withGetDebugInfo(HDInsightActivityDebugInfoOption.ALWAYS)
            .withScriptPath("dataf")
            .withScriptLinkedService(new LinkedServiceReference().withReferenceName("glmyrkrtdk")
                .withParameters(mapOf("itlmcaehjhwkl", "datazwgrs")))
            .withDefines(mapOf("nwe", "dataqqgyp", "ytk", "databngojnaks"));
        model = BinaryData.fromObject(model).toObject(HDInsightPigActivityTypeProperties.class);
        Assertions.assertEquals("ugcngdulvd", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.ALWAYS, model.getDebugInfo());
        Assertions.assertEquals("glmyrkrtdk", model.scriptLinkedService().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
