// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.fluent.models.HDInsightPigActivityTypeProperties;
import com.azure.resourcemanager.datafactory.models.HDInsightActivityDebugInfoOption;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class HDInsightPigActivityTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HDInsightPigActivityTypeProperties model = BinaryData.fromString(
            "{\"storageLinkedServices\":[{\"referenceName\":\"pjmjigypbdfrtasa\",\"parameters\":{\"lxojijttsyr\":\"datato\",\"sknyc\":\"dataynn\",\"durf\":\"datasshcpxftyhfcduq\"}},{\"referenceName\":\"aawry\",\"parameters\":{\"rvcighlhddvnobes\":\"dataslfrztpnrysxxa\"}},{\"referenceName\":\"wbtnfqlwcaxjph\",\"parameters\":{\"uuajiotl\":\"dataoucme\",\"kqtiuve\":\"dataxofqjninrskq\",\"uxiqgslspihux\":\"datazuciwbiwygwpw\",\"izefbbrndaquxvuf\":\"datavviotvoolkm\"}},{\"referenceName\":\"fwaehs\",\"parameters\":{\"avpy\":\"datao\"}}],\"arguments\":\"dataeyeblkgupgnstq\",\"getDebugInfo\":\"None\",\"scriptPath\":\"datamhioar\",\"scriptLinkedService\":{\"referenceName\":\"khufktqgtj\",\"parameters\":{\"gkokfzt\":\"datatreot\",\"kegyskmh\":\"datavonbtnnwa\",\"tlpsswoslqmft\":\"datawsbznjngerw\",\"egalecqyzdy\":\"dataqzafjycfbdbzbabo\"}},\"defines\":{\"hiaqegjvhy\":\"dataocnkbt\",\"ovvna\":\"datanqbhclbbksoqzzy\"}}")
            .toObject(HDInsightPigActivityTypeProperties.class);
        Assertions.assertEquals("pjmjigypbdfrtasa", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.NONE, model.getDebugInfo());
        Assertions.assertEquals("khufktqgtj", model.scriptLinkedService().referenceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HDInsightPigActivityTypeProperties model = new HDInsightPigActivityTypeProperties()
            .withStorageLinkedServices(Arrays.asList(
                new LinkedServiceReference().withReferenceName("pjmjigypbdfrtasa")
                    .withParameters(mapOf("lxojijttsyr", "datato", "sknyc", "dataynn", "durf", "datasshcpxftyhfcduq")),
                new LinkedServiceReference().withReferenceName("aawry")
                    .withParameters(mapOf("rvcighlhddvnobes", "dataslfrztpnrysxxa")),
                new LinkedServiceReference().withReferenceName("wbtnfqlwcaxjph")
                    .withParameters(mapOf("uuajiotl", "dataoucme", "kqtiuve", "dataxofqjninrskq", "uxiqgslspihux",
                        "datazuciwbiwygwpw", "izefbbrndaquxvuf", "datavviotvoolkm")),
                new LinkedServiceReference().withReferenceName("fwaehs").withParameters(mapOf("avpy", "datao"))))
            .withArguments("dataeyeblkgupgnstq").withGetDebugInfo(HDInsightActivityDebugInfoOption.NONE)
            .withScriptPath("datamhioar")
            .withScriptLinkedService(new LinkedServiceReference().withReferenceName("khufktqgtj")
                .withParameters(mapOf("gkokfzt", "datatreot", "kegyskmh", "datavonbtnnwa", "tlpsswoslqmft",
                    "datawsbznjngerw", "egalecqyzdy", "dataqzafjycfbdbzbabo")))
            .withDefines(mapOf("hiaqegjvhy", "dataocnkbt", "ovvna", "datanqbhclbbksoqzzy"));
        model = BinaryData.fromObject(model).toObject(HDInsightPigActivityTypeProperties.class);
        Assertions.assertEquals("pjmjigypbdfrtasa", model.storageLinkedServices().get(0).referenceName());
        Assertions.assertEquals(HDInsightActivityDebugInfoOption.NONE, model.getDebugInfo());
        Assertions.assertEquals("khufktqgtj", model.scriptLinkedService().referenceName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
