// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.CustomDataSourceLinkedService;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CustomDataSourceLinkedServiceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CustomDataSourceLinkedService model = BinaryData.fromString(
            "{\"type\":\"CustomDataSource\",\"typeProperties\":\"datakrjucazwedma\",\"connectVia\":{\"referenceName\":\"lx\",\"parameters\":{\"nenxg\":\"datamxoanudvqa\",\"b\":\"datahmmgblqyfg\"}},\"description\":\"qifsgzfgxwfxji\",\"parameters\":{\"yooghjxhp\":{\"type\":\"Object\",\"defaultValue\":\"datahwnn\"},\"hoyg\":{\"type\":\"Object\",\"defaultValue\":\"dataksqiwlmegjtose\"},\"zzugdorc\":{\"type\":\"Float\",\"defaultValue\":\"dataz\"}},\"annotations\":[\"datavovsirtasepi\"],\"\":{\"amnvrcqjpbainsih\":\"dataexhhjjatlepzbiro\",\"eufj\":\"dataz\",\"zm\":\"datab\"}}")
            .toObject(CustomDataSourceLinkedService.class);
        Assertions.assertEquals("lx", model.connectVia().referenceName());
        Assertions.assertEquals("qifsgzfgxwfxji", model.description());
        Assertions.assertEquals(ParameterType.OBJECT, model.parameters().get("yooghjxhp").type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CustomDataSourceLinkedService model = new CustomDataSourceLinkedService()
            .withConnectVia(new IntegrationRuntimeReference().withReferenceName("lx")
                .withParameters(mapOf("nenxg", "datamxoanudvqa", "b", "datahmmgblqyfg")))
            .withDescription("qifsgzfgxwfxji")
            .withParameters(mapOf("yooghjxhp",
                new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("datahwnn"), "hoyg",
                new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("dataksqiwlmegjtose"),
                "zzugdorc", new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("dataz")))
            .withAnnotations(Arrays.asList("datavovsirtasepi")).withTypeProperties("datakrjucazwedma");
        model = BinaryData.fromObject(model).toObject(CustomDataSourceLinkedService.class);
        Assertions.assertEquals("lx", model.connectVia().referenceName());
        Assertions.assertEquals("qifsgzfgxwfxji", model.description());
        Assertions.assertEquals(ParameterType.OBJECT, model.parameters().get("yooghjxhp").type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
