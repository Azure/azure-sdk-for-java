// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.CustomDataSourceLinkedService;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CustomDataSourceLinkedServiceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CustomDataSourceLinkedService model = BinaryData.fromString(
            "{\"type\":\"CustomDataSource\",\"typeProperties\":\"datajhokhijghpvjq\",\"version\":\"kikdatbwyarqt\",\"connectVia\":{\"referenceName\":\"jblhefq\",\"parameters\":{\"klbjlnbxouc\":\"datanxtpzdgyilwu\",\"oke\":\"dataddplgjfhvia\",\"uosc\":\"datacmadyoctmd\"}},\"description\":\"wbestntoeteu\",\"parameters\":{\"efrfugthcdbzoxh\":{\"type\":\"SecureString\",\"defaultValue\":\"datazftsb\"},\"ijpkbr\":{\"type\":\"Bool\",\"defaultValue\":\"datagpbogpbwefoxlz\"}},\"annotations\":[\"dataup\"],\"\":{\"vgit\":\"dataqeqjtzawen\",\"ohnizvvekpq\":\"datadjixkepla\"}}")
            .toObject(CustomDataSourceLinkedService.class);
        Assertions.assertEquals("kikdatbwyarqt", model.version());
        Assertions.assertEquals("jblhefq", model.connectVia().referenceName());
        Assertions.assertEquals("wbestntoeteu", model.description());
        Assertions.assertEquals(ParameterType.SECURE_STRING, model.parameters().get("efrfugthcdbzoxh").type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CustomDataSourceLinkedService model = new CustomDataSourceLinkedService().withVersion("kikdatbwyarqt")
            .withConnectVia(new IntegrationRuntimeReference().withReferenceName("jblhefq")
                .withParameters(
                    mapOf("klbjlnbxouc", "datanxtpzdgyilwu", "oke", "dataddplgjfhvia", "uosc", "datacmadyoctmd")))
            .withDescription("wbestntoeteu")
            .withParameters(mapOf("efrfugthcdbzoxh",
                new ParameterSpecification().withType(ParameterType.SECURE_STRING).withDefaultValue("datazftsb"),
                "ijpkbr",
                new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("datagpbogpbwefoxlz")))
            .withAnnotations(Arrays.asList("dataup"))
            .withTypeProperties("datajhokhijghpvjq");
        model = BinaryData.fromObject(model).toObject(CustomDataSourceLinkedService.class);
        Assertions.assertEquals("kikdatbwyarqt", model.version());
        Assertions.assertEquals("jblhefq", model.connectVia().referenceName());
        Assertions.assertEquals("wbestntoeteu", model.description());
        Assertions.assertEquals(ParameterType.SECURE_STRING, model.parameters().get("efrfugthcdbzoxh").type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
