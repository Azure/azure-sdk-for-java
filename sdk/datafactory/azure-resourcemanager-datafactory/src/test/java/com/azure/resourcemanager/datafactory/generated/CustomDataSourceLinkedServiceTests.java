// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.CustomDataSourceLinkedService;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CustomDataSourceLinkedServiceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CustomDataSourceLinkedService model = BinaryData.fromString(
            "{\"type\":\"CustomDataSource\",\"typeProperties\":\"dataotwvkuhtdxdcodzd\",\"connectVia\":{\"referenceName\":\"knmcvmxiun\",\"parameters\":{\"kccru\":\"datauaht\",\"foqody\":\"datarz\",\"o\":\"datafayxnlvtip\"}},\"description\":\"slctilbxnnynjtu\",\"parameters\":{\"drchu\":{\"type\":\"Int\",\"defaultValue\":\"datalzavohvdbn\"},\"jcglvobctit\":{\"type\":\"String\",\"defaultValue\":\"dataliqcbonqjoek\"},\"dqilp\":{\"type\":\"Bool\",\"defaultValue\":\"databalvk\"}},\"annotations\":[\"dataxfqkqpdyrqlaz\"],\"\":{\"yf\":\"datatckbjvdx\",\"de\":\"dataq\"}}")
            .toObject(CustomDataSourceLinkedService.class);
        Assertions.assertEquals("knmcvmxiun", model.connectVia().referenceName());
        Assertions.assertEquals("slctilbxnnynjtu", model.description());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("drchu").type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CustomDataSourceLinkedService model = new CustomDataSourceLinkedService()
            .withConnectVia(new IntegrationRuntimeReference().withReferenceName("knmcvmxiun")
                .withParameters(mapOf("kccru", "datauaht", "foqody", "datarz", "o", "datafayxnlvtip")))
            .withDescription("slctilbxnnynjtu")
            .withParameters(mapOf("drchu",
                new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("datalzavohvdbn"),
                "jcglvobctit",
                new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("dataliqcbonqjoek"),
                "dqilp", new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("databalvk")))
            .withAnnotations(Arrays.asList("dataxfqkqpdyrqlaz")).withTypeProperties("dataotwvkuhtdxdcodzd");
        model = BinaryData.fromObject(model).toObject(CustomDataSourceLinkedService.class);
        Assertions.assertEquals("knmcvmxiun", model.connectVia().referenceName());
        Assertions.assertEquals("slctilbxnnynjtu", model.description());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("drchu").type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
