// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.CustomDataSourceLinkedService;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CustomDataSourceLinkedServiceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CustomDataSourceLinkedService model =
            BinaryData
                .fromString(
                    "{\"type\":\"CustomDataSource\",\"typeProperties\":\"datadzpx\",\"connectVia\":{\"referenceName\":\"kqlvbk\",\"parameters\":{\"iviniyoizuwwzc\":\"datayrnww\",\"xajsiueai\":\"dataigbjbelnqalbso\",\"zbwxuypcuri\":\"dataqjb\"}},\"description\":\"lxtclveqdqt\",\"parameters\":{\"iysgh\":{\"type\":\"Bool\",\"defaultValue\":\"datawjxry\"},\"kw\":{\"type\":\"Bool\",\"defaultValue\":\"dataqdl\"}},\"annotations\":[\"datakbv\"],\"\":{\"atpialrqhwcxxccf\":\"datamkaadnxbs\"}}")
                .toObject(CustomDataSourceLinkedService.class);
        Assertions.assertEquals("kqlvbk", model.connectVia().referenceName());
        Assertions.assertEquals("lxtclveqdqt", model.description());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("iysgh").type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CustomDataSourceLinkedService model =
            new CustomDataSourceLinkedService()
                .withConnectVia(
                    new IntegrationRuntimeReference()
                        .withReferenceName("kqlvbk")
                        .withParameters(
                            mapOf(
                                "iviniyoizuwwzc",
                                "datayrnww",
                                "xajsiueai",
                                "dataigbjbelnqalbso",
                                "zbwxuypcuri",
                                "dataqjb")))
                .withDescription("lxtclveqdqt")
                .withParameters(
                    mapOf(
                        "iysgh",
                        new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("datawjxry"),
                        "kw",
                        new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("dataqdl")))
                .withAnnotations(Arrays.asList("datakbv"))
                .withTypeProperties("datadzpx");
        model = BinaryData.fromObject(model).toObject(CustomDataSourceLinkedService.class);
        Assertions.assertEquals("kqlvbk", model.connectVia().referenceName());
        Assertions.assertEquals("lxtclveqdqt", model.description());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("iysgh").type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
