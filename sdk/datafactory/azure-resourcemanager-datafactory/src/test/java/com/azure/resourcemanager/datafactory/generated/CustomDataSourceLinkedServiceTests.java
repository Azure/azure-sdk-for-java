// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.CustomDataSourceLinkedService;
import com.azure.resourcemanager.datafactory.models.IntegrationRuntimeReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CustomDataSourceLinkedServiceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CustomDataSourceLinkedService model = BinaryData.fromString(
            "{\"type\":\"CustomDataSource\",\"typeProperties\":\"datacsp\",\"version\":\"rndqymloslqgs\",\"connectVia\":{\"referenceName\":\"nqqzqdvgn\",\"parameters\":{\"wphbuzmvjil\":\"datakgoynyaa\",\"hrjwyxduwimwnuvj\":\"datalbmfkctpai\"}},\"description\":\"wpfxi\",\"parameters\":{\"yjdbc\":{\"type\":\"Array\",\"defaultValue\":\"datanjtksw\"},\"gu\":{\"type\":\"Bool\",\"defaultValue\":\"dataojtmpdkcbpk\"}},\"annotations\":[\"dataitkce\",\"datadwgussctnppxxeys\",\"dataenfwugonysemun\"],\"\":{\"sxuuksvfsukpk\":\"datavnbckl\"}}")
            .toObject(CustomDataSourceLinkedService.class);
        Assertions.assertEquals("rndqymloslqgs", model.version());
        Assertions.assertEquals("nqqzqdvgn", model.connectVia().referenceName());
        Assertions.assertEquals("wpfxi", model.description());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("yjdbc").type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CustomDataSourceLinkedService model = new CustomDataSourceLinkedService().withVersion("rndqymloslqgs")
            .withConnectVia(new IntegrationRuntimeReference().withReferenceName("nqqzqdvgn")
                .withParameters(mapOf("wphbuzmvjil", "datakgoynyaa", "hrjwyxduwimwnuvj", "datalbmfkctpai")))
            .withDescription("wpfxi")
            .withParameters(mapOf("yjdbc",
                new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("datanjtksw"), "gu",
                new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("dataojtmpdkcbpk")))
            .withAnnotations(Arrays.asList("dataitkce", "datadwgussctnppxxeys", "dataenfwugonysemun"))
            .withTypeProperties("datacsp");
        model = BinaryData.fromObject(model).toObject(CustomDataSourceLinkedService.class);
        Assertions.assertEquals("rndqymloslqgs", model.version());
        Assertions.assertEquals("nqqzqdvgn", model.connectVia().referenceName());
        Assertions.assertEquals("wpfxi", model.description());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("yjdbc").type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
