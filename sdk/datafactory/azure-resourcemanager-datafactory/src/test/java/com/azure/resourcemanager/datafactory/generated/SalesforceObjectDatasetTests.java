// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.SalesforceObjectDataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SalesforceObjectDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SalesforceObjectDataset model = BinaryData.fromString(
            "{\"type\":\"SalesforceObject\",\"typeProperties\":{\"objectApiName\":\"datahgbgbhudh\"},\"description\":\"jimvrrq\",\"structure\":\"databpk\",\"schema\":\"dataamrlfizjuddnd\",\"linkedServiceName\":{\"referenceName\":\"hupngyhylqyafew\",\"parameters\":{\"xnxrqxrtzeargv\":\"datadxwuuy\"}},\"parameters\":{\"eignybffqc\":{\"type\":\"Int\",\"defaultValue\":\"datajhmvpjxsdh\"},\"tvmwgvconyse\":{\"type\":\"Bool\",\"defaultValue\":\"datanep\"}},\"annotations\":[\"datajfhpxnikouo\",\"datafalo\",\"databskkypor\",\"dataynieunbydlgfaphw\"],\"folder\":{\"name\":\"wtsaynrtvj\"},\"\":{\"hsdbfbm\":\"dataeeoxvqjmrnbl\",\"zmiaoaweacf\":\"dataivixzhpjg\"}}")
            .toObject(SalesforceObjectDataset.class);
        Assertions.assertEquals("jimvrrq", model.description());
        Assertions.assertEquals("hupngyhylqyafew", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("eignybffqc").type());
        Assertions.assertEquals("wtsaynrtvj", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SalesforceObjectDataset model = new SalesforceObjectDataset().withDescription("jimvrrq")
            .withStructure("databpk")
            .withSchema("dataamrlfizjuddnd")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("hupngyhylqyafew")
                .withParameters(mapOf("xnxrqxrtzeargv", "datadxwuuy")))
            .withParameters(mapOf("eignybffqc",
                new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("datajhmvpjxsdh"),
                "tvmwgvconyse", new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("datanep")))
            .withAnnotations(Arrays.asList("datajfhpxnikouo", "datafalo", "databskkypor", "dataynieunbydlgfaphw"))
            .withFolder(new DatasetFolder().withName("wtsaynrtvj"))
            .withObjectApiName("datahgbgbhudh");
        model = BinaryData.fromObject(model).toObject(SalesforceObjectDataset.class);
        Assertions.assertEquals("jimvrrq", model.description());
        Assertions.assertEquals("hupngyhylqyafew", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("eignybffqc").type());
        Assertions.assertEquals("wtsaynrtvj", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
