// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.SalesforceObjectDataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SalesforceObjectDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SalesforceObjectDataset model =
            BinaryData
                .fromString(
                    "{\"type\":\"SalesforceObject\",\"typeProperties\":{\"objectApiName\":\"dataryszfhdxyfh\"},\"description\":\"hzbzhhavz\",\"structure\":\"dataxnvkdslcofuvtfue\",\"schema\":\"datauisaklhjfddxqfu\",\"linkedServiceName\":{\"referenceName\":\"subzsspmj\",\"parameters\":{\"wbztrt\":\"datalfauyvxpqwlkqd\",\"ffjdhgslormhbt\":\"dataldwvog\",\"sdylmnq\":\"datafcvxkylhc\"}},\"parameters\":{\"bgbh\":{\"type\":\"Object\",\"defaultValue\":\"databptmsgkwedwlxtzh\"},\"pkwmamrlfizjud\":{\"type\":\"SecureString\",\"defaultValue\":\"datarpjimvrrqfi\"},\"pngyhylqyafe\":{\"type\":\"String\",\"defaultValue\":\"dataih\"},\"u\":{\"type\":\"Int\",\"defaultValue\":\"dataodx\"}},\"annotations\":[\"dataxnxrqxrtzeargv\"],\"folder\":{\"name\":\"hbjhmvpjxsd\"},\"\":{\"ynepkt\":\"dataignybffqcw\",\"conyse\":\"datamwg\",\"ouoxfalo\":\"datajijfhpxni\"}}")
                .toObject(SalesforceObjectDataset.class);
        Assertions.assertEquals("hzbzhhavz", model.description());
        Assertions.assertEquals("subzsspmj", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.OBJECT, model.parameters().get("bgbh").type());
        Assertions.assertEquals("hbjhmvpjxsd", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SalesforceObjectDataset model =
            new SalesforceObjectDataset()
                .withDescription("hzbzhhavz")
                .withStructure("dataxnvkdslcofuvtfue")
                .withSchema("datauisaklhjfddxqfu")
                .withLinkedServiceName(
                    new LinkedServiceReference()
                        .withReferenceName("subzsspmj")
                        .withParameters(
                            mapOf(
                                "wbztrt",
                                "datalfauyvxpqwlkqd",
                                "ffjdhgslormhbt",
                                "dataldwvog",
                                "sdylmnq",
                                "datafcvxkylhc")))
                .withParameters(
                    mapOf(
                        "bgbh",
                        new ParameterSpecification()
                            .withType(ParameterType.OBJECT)
                            .withDefaultValue("databptmsgkwedwlxtzh"),
                        "pkwmamrlfizjud",
                        new ParameterSpecification()
                            .withType(ParameterType.SECURE_STRING)
                            .withDefaultValue("datarpjimvrrqfi"),
                        "pngyhylqyafe",
                        new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("dataih"),
                        "u",
                        new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("dataodx")))
                .withAnnotations(Arrays.asList("dataxnxrqxrtzeargv"))
                .withFolder(new DatasetFolder().withName("hbjhmvpjxsd"))
                .withObjectApiName("dataryszfhdxyfh");
        model = BinaryData.fromObject(model).toObject(SalesforceObjectDataset.class);
        Assertions.assertEquals("hzbzhhavz", model.description());
        Assertions.assertEquals("subzsspmj", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.OBJECT, model.parameters().get("bgbh").type());
        Assertions.assertEquals("hbjhmvpjxsd", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
