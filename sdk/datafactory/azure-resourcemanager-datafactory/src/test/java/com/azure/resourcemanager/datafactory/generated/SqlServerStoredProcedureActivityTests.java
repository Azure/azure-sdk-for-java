// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.SqlServerStoredProcedureActivity;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SqlServerStoredProcedureActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SqlServerStoredProcedureActivity model = BinaryData.fromString(
            "{\"type\":\"SqlServerStoredProcedure\",\"typeProperties\":{\"storedProcedureName\":\"datalzk\",\"storedProcedureParameters\":\"datacgtbpbfbgfwjq\"},\"linkedServiceName\":{\"referenceName\":\"vse\",\"parameters\":{\"hrw\":\"dataxxdrgbnq\",\"flq\":\"datamexwg\",\"k\":\"dataugxudsmdglq\"}},\"policy\":{\"timeout\":\"datadjdasomxws\",\"retry\":\"datayl\",\"retryIntervalInSeconds\":45833654,\"secureInput\":false,\"secureOutput\":true,\"\":{\"yzzeqdjx\":\"dataikglmc\",\"zvtwfbqxoqnv\":\"datarbjxkarxvg\",\"pp\":\"datajhdcolnxw\",\"zvi\":\"dataodnntoloezptngr\"}},\"name\":\"xacxcac\",\"description\":\"dkomrpucytjxpdqw\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Failed\",\"dependsOn\":[{\"activity\":\"skyrhsijxm\",\"dependencyConditions\":[\"Failed\",\"Skipped\"],\"\":{\"zy\":\"dataxjsuwmbdtfetr\"}},{\"activity\":\"prrapghloemqapv\",\"dependencyConditions\":[\"Skipped\",\"Succeeded\",\"Skipped\"],\"\":{\"wrbqadtvpgu\":\"datasnxue\",\"iv\":\"datatmtgk\",\"plphkiyiqpi\":\"dataxxe\"}}],\"userProperties\":[{\"name\":\"vzjkzslvxdp\",\"value\":\"datapubbwps\"},{\"name\":\"cxbkwm\",\"value\":\"datajqakacbc\"},{\"name\":\"rsnnvlm\",\"value\":\"datagfgtwqmtyfqutmj\"}],\"\":{\"qzdor\":\"datasjurilqc\",\"auwojgvpqzvtgwlz\":\"dataufogockbizqqajs\",\"br\":\"datacyvrbgi\"}}")
            .toObject(SqlServerStoredProcedureActivity.class);
        Assertions.assertEquals("xacxcac", model.name());
        Assertions.assertEquals("dkomrpucytjxpdqw", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("skyrhsijxm", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("vzjkzslvxdp", model.userProperties().get(0).name());
        Assertions.assertEquals("vse", model.linkedServiceName().referenceName());
        Assertions.assertEquals(45833654, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SqlServerStoredProcedureActivity model
            = new SqlServerStoredProcedureActivity().withName("xacxcac")
                .withDescription("dkomrpucytjxpdqw")
                .withState(ActivityState.INACTIVE)
                .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.FAILED)
                .withDependsOn(Arrays.asList(
                    new ActivityDependency().withActivity("skyrhsijxm")
                        .withDependencyConditions(
                            Arrays.asList(DependencyCondition.FAILED, DependencyCondition.SKIPPED))
                        .withAdditionalProperties(mapOf()),
                    new ActivityDependency().withActivity("prrapghloemqapv")
                        .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED,
                            DependencyCondition.SUCCEEDED, DependencyCondition.SKIPPED))
                        .withAdditionalProperties(mapOf())))
                .withUserProperties(Arrays.asList(new UserProperty().withName("vzjkzslvxdp").withValue("datapubbwps"),
                    new UserProperty().withName("cxbkwm").withValue("datajqakacbc"),
                    new UserProperty().withName("rsnnvlm").withValue("datagfgtwqmtyfqutmj")))
                .withLinkedServiceName(new LinkedServiceReference().withReferenceName("vse")
                    .withParameters(mapOf("hrw", "dataxxdrgbnq", "flq", "datamexwg", "k", "dataugxudsmdglq")))
                .withPolicy(new ActivityPolicy().withTimeout("datadjdasomxws")
                    .withRetry("datayl")
                    .withRetryIntervalInSeconds(45833654)
                    .withSecureInput(false)
                    .withSecureOutput(true)
                    .withAdditionalProperties(mapOf()))
                .withStoredProcedureName("datalzk")
                .withStoredProcedureParameters("datacgtbpbfbgfwjq");
        model = BinaryData.fromObject(model).toObject(SqlServerStoredProcedureActivity.class);
        Assertions.assertEquals("xacxcac", model.name());
        Assertions.assertEquals("dkomrpucytjxpdqw", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.FAILED, model.onInactiveMarkAs());
        Assertions.assertEquals("skyrhsijxm", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("vzjkzslvxdp", model.userProperties().get(0).name());
        Assertions.assertEquals("vse", model.linkedServiceName().referenceName());
        Assertions.assertEquals(45833654, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
