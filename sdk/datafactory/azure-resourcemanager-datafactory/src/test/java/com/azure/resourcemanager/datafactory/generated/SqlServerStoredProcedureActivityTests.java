// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.SqlServerStoredProcedureActivity;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SqlServerStoredProcedureActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SqlServerStoredProcedureActivity model = BinaryData.fromString(
            "{\"type\":\"SqlServerStoredProcedure\",\"typeProperties\":{\"storedProcedureName\":\"datapaiat\",\"storedProcedureParameters\":\"dataxvbwsa\"},\"linkedServiceName\":{\"referenceName\":\"vtinro\",\"parameters\":{\"pyh\":\"datatylseu\",\"n\":\"datanngijnzlokxihf\",\"ssxid\":\"databljlrfwq\"}},\"policy\":{\"timeout\":\"datavbicdzvypfo\",\"retry\":\"dataxbfctqnq\",\"retryIntervalInSeconds\":1638131634,\"secureInput\":false,\"secureOutput\":true,\"\":{\"q\":\"datakmjqfachfm\",\"qeu\":\"datakgs\",\"f\":\"datajvs\"}},\"name\":\"wpqvgxpwmoefhbur\",\"description\":\"a\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"wpxvptqnqbd\",\"dependencyConditions\":[\"Skipped\"],\"\":{\"juuwmcugveiiegoo\":\"datazlfhn\",\"dfqthohfqbeai\":\"datablvcalb\",\"gdascmf\":\"datavnnhxgiydk\",\"xgy\":\"datakabwpdvedmxckb\"}},{\"activity\":\"xszetaonkfbgwf\",\"dependencyConditions\":[\"Succeeded\",\"Failed\",\"Skipped\"],\"\":{\"j\":\"datazrsz\",\"udnxaw\":\"datadcisceiauoy\",\"cc\":\"datagmbmb\"}},{\"activity\":\"ikp\",\"dependencyConditions\":[\"Succeeded\"],\"\":{\"o\":\"datajizbjsu\"}}],\"userProperties\":[{\"name\":\"ltcrtmebrssrlxen\",\"value\":\"datapthc\"},{\"name\":\"j\",\"value\":\"dataqmb\"},{\"name\":\"xensog\",\"value\":\"datavhqqxggncgyzvt\"},{\"name\":\"excjqrvpgukscrsb\",\"value\":\"datahkdemaxoaj\"}],\"\":{\"ajkkzkzprjqbmgf\":\"datacachsojgagey\",\"zbeemlsrtgbgcmut\":\"datawy\",\"lpuuf\":\"datakwd\"}}")
            .toObject(SqlServerStoredProcedureActivity.class);
        Assertions.assertEquals("wpqvgxpwmoefhbur", model.name());
        Assertions.assertEquals("a", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("wpxvptqnqbd", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("ltcrtmebrssrlxen", model.userProperties().get(0).name());
        Assertions.assertEquals("vtinro", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1638131634, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SqlServerStoredProcedureActivity model = new SqlServerStoredProcedureActivity().withName("wpqvgxpwmoefhbur")
            .withDescription("a")
            .withState(ActivityState.INACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
            .withDependsOn(Arrays.asList(
                new ActivityDependency().withActivity("wpxvptqnqbd")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("xszetaonkfbgwf")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED, DependencyCondition.FAILED,
                        DependencyCondition.SKIPPED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("ikp")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED))
                    .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("ltcrtmebrssrlxen").withValue("datapthc"),
                new UserProperty().withName("j").withValue("dataqmb"),
                new UserProperty().withName("xensog").withValue("datavhqqxggncgyzvt"),
                new UserProperty().withName("excjqrvpgukscrsb").withValue("datahkdemaxoaj")))
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("vtinro")
                .withParameters(mapOf("pyh", "datatylseu", "n", "datanngijnzlokxihf", "ssxid", "databljlrfwq")))
            .withPolicy(new ActivityPolicy().withTimeout("datavbicdzvypfo")
                .withRetry("dataxbfctqnq")
                .withRetryIntervalInSeconds(1638131634)
                .withSecureInput(false)
                .withSecureOutput(true)
                .withAdditionalProperties(mapOf()))
            .withStoredProcedureName("datapaiat")
            .withStoredProcedureParameters("dataxvbwsa");
        model = BinaryData.fromObject(model).toObject(SqlServerStoredProcedureActivity.class);
        Assertions.assertEquals("wpqvgxpwmoefhbur", model.name());
        Assertions.assertEquals("a", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("wpxvptqnqbd", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("ltcrtmebrssrlxen", model.userProperties().get(0).name());
        Assertions.assertEquals("vtinro", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1638131634, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
