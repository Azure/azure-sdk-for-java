// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.SqlServerStoredProcedureActivity;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SqlServerStoredProcedureActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SqlServerStoredProcedureActivity model = BinaryData.fromString(
            "{\"type\":\"SqlServerStoredProcedure\",\"typeProperties\":{\"storedProcedureName\":\"datajjupukhxpixuyy\",\"storedProcedureParameters\":\"dataonfxsfjedjnxic\"},\"linkedServiceName\":{\"referenceName\":\"xtcytedspkduhztv\",\"parameters\":{\"uind\":\"dataflttesqpjcuuyt\",\"ijncaqgtsbahtlop\":\"datam\",\"ul\":\"datansbjzrnjcagagm\",\"abbetzcd\":\"datanashnoxr\"}},\"policy\":{\"timeout\":\"datawutakbvaqgu\",\"retry\":\"databmcwpllo\",\"retryIntervalInSeconds\":740815511,\"secureInput\":false,\"secureOutput\":true,\"\":{\"igmmjveaj\":\"datad\",\"u\":\"datacrbkwcnvgx\"}},\"name\":\"hmjcemkcwcbvhqj\",\"description\":\"afzwhrgmzntr\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"ogfo\",\"dependencyConditions\":[\"Succeeded\",\"Skipped\",\"Failed\",\"Skipped\"],\"\":{\"oaxszuhuoj\":\"datak\"}},{\"activity\":\"b\",\"dependencyConditions\":[\"Completed\",\"Skipped\",\"Succeeded\",\"Failed\"],\"\":{\"betemam\":\"datahecq\",\"umxyqhctr\":\"datashnksupchzspgby\"}},{\"activity\":\"vuhgchtaea\",\"dependencyConditions\":[\"Succeeded\"],\"\":{\"awynslcfx\":\"datarzukajkihnlqf\",\"riedf\":\"dataovavi\",\"sumqdri\":\"datahtfugppiudhylxq\"}},{\"activity\":\"uxzcrfpkbchnhexm\",\"dependencyConditions\":[\"Completed\",\"Failed\",\"Failed\"],\"\":{\"yzvnsnaklobc\":\"datajuexpkqhgf\",\"mltdgxiqrgr\":\"datay\",\"qyjeeoytgny\":\"dataxjfxu\"}}],\"userProperties\":[{\"name\":\"lqipnzgnybu\",\"value\":\"datalala\"},{\"name\":\"zncn\",\"value\":\"datazq\"},{\"name\":\"hx\",\"value\":\"datascyykrzrjjernj\"}],\"\":{\"h\":\"datalodfsbh\",\"hctxarl\":\"datatygyia\"}}")
            .toObject(SqlServerStoredProcedureActivity.class);
        Assertions.assertEquals("hmjcemkcwcbvhqj", model.name());
        Assertions.assertEquals("afzwhrgmzntr", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("ogfo", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("lqipnzgnybu", model.userProperties().get(0).name());
        Assertions.assertEquals("xtcytedspkduhztv", model.linkedServiceName().referenceName());
        Assertions.assertEquals(740815511, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SqlServerStoredProcedureActivity model = new SqlServerStoredProcedureActivity().withName("hmjcemkcwcbvhqj")
            .withDescription("afzwhrgmzntr")
            .withState(ActivityState.ACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
            .withDependsOn(Arrays.asList(
                new ActivityDependency().withActivity("ogfo")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED, DependencyCondition.SKIPPED,
                        DependencyCondition.FAILED, DependencyCondition.SKIPPED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("b")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED, DependencyCondition.SKIPPED,
                        DependencyCondition.SUCCEEDED, DependencyCondition.FAILED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("vuhgchtaea")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("uxzcrfpkbchnhexm")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED, DependencyCondition.FAILED,
                        DependencyCondition.FAILED))
                    .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("lqipnzgnybu").withValue("datalala"),
                new UserProperty().withName("zncn").withValue("datazq"),
                new UserProperty().withName("hx").withValue("datascyykrzrjjernj")))
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("xtcytedspkduhztv")
                .withParameters(mapOf("uind", "dataflttesqpjcuuyt", "ijncaqgtsbahtlop", "datam", "ul",
                    "datansbjzrnjcagagm", "abbetzcd", "datanashnoxr")))
            .withPolicy(new ActivityPolicy().withTimeout("datawutakbvaqgu")
                .withRetry("databmcwpllo")
                .withRetryIntervalInSeconds(740815511)
                .withSecureInput(false)
                .withSecureOutput(true)
                .withAdditionalProperties(mapOf()))
            .withStoredProcedureName("datajjupukhxpixuyy")
            .withStoredProcedureParameters("dataonfxsfjedjnxic");
        model = BinaryData.fromObject(model).toObject(SqlServerStoredProcedureActivity.class);
        Assertions.assertEquals("hmjcemkcwcbvhqj", model.name());
        Assertions.assertEquals("afzwhrgmzntr", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("ogfo", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SUCCEEDED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("lqipnzgnybu", model.userProperties().get(0).name());
        Assertions.assertEquals("xtcytedspkduhztv", model.linkedServiceName().referenceName());
        Assertions.assertEquals(740815511, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
