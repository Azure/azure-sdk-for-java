// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.SqlServerStoredProcedureActivity;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SqlServerStoredProcedureActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SqlServerStoredProcedureActivity model = BinaryData.fromString(
            "{\"type\":\"SqlServerStoredProcedure\",\"typeProperties\":{\"storedProcedureName\":\"datamfbl\",\"storedProcedureParameters\":\"dataekoux\"},\"linkedServiceName\":{\"referenceName\":\"lif\",\"parameters\":{\"foibxj\":\"datad\",\"zlq\":\"datacuppwsgawqxren\"}},\"policy\":{\"timeout\":\"dataft\",\"retry\":\"datapzhox\",\"retryIntervalInSeconds\":1278696212,\"secureInput\":false,\"secureOutput\":true,\"\":{\"ypara\":\"datavtefevhedfzxs\",\"rlbsglqiuqsqzumx\":\"datargsfnjokrfpiqgqv\",\"muosoziqcuiekuya\":\"datax\",\"dxmdpfxlkwyqo\":\"datapukxtgeejxwbr\"}},\"name\":\"ejylqgenbeupaiat\",\"description\":\"xvbwsa\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"ortjtylseudpyhvn\",\"dependencyConditions\":[\"Failed\"],\"\":{\"n\":\"datazlokxihf\",\"ssxid\":\"databljlrfwq\"}}],\"userProperties\":[{\"name\":\"vbicdzvypfo\",\"value\":\"datazxbf\"},{\"name\":\"tqnq\",\"value\":\"datalmqeauizk\"},{\"name\":\"jqfachfmvqnkgst\",\"value\":\"datae\"},{\"name\":\"ujvsc\",\"value\":\"datapwpqvg\"}],\"\":{\"tv\":\"datamoefhburxnagvcs\",\"bdxwy\":\"datapxvptqn\",\"iiegoolblvcalbud\":\"datatzlfhnfjuuwmcugv\"}}")
            .toObject(SqlServerStoredProcedureActivity.class);
        Assertions.assertEquals("ejylqgenbeupaiat", model.name());
        Assertions.assertEquals("xvbwsa", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.onInactiveMarkAs());
        Assertions.assertEquals("ortjtylseudpyhvn", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("vbicdzvypfo", model.userProperties().get(0).name());
        Assertions.assertEquals("lif", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1278696212, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SqlServerStoredProcedureActivity model = new SqlServerStoredProcedureActivity().withName("ejylqgenbeupaiat")
            .withDescription("xvbwsa")
            .withState(ActivityState.ACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SUCCEEDED)
            .withDependsOn(Arrays.asList(new ActivityDependency().withActivity("ortjtylseudpyhvn")
                .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED))
                .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("vbicdzvypfo").withValue("datazxbf"),
                new UserProperty().withName("tqnq").withValue("datalmqeauizk"),
                new UserProperty().withName("jqfachfmvqnkgst").withValue("datae"),
                new UserProperty().withName("ujvsc").withValue("datapwpqvg")))
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("lif")
                .withParameters(mapOf("foibxj", "datad", "zlq", "datacuppwsgawqxren")))
            .withPolicy(new ActivityPolicy().withTimeout("dataft")
                .withRetry("datapzhox")
                .withRetryIntervalInSeconds(1278696212)
                .withSecureInput(false)
                .withSecureOutput(true)
                .withAdditionalProperties(mapOf()))
            .withStoredProcedureName("datamfbl")
            .withStoredProcedureParameters("dataekoux");
        model = BinaryData.fromObject(model).toObject(SqlServerStoredProcedureActivity.class);
        Assertions.assertEquals("ejylqgenbeupaiat", model.name());
        Assertions.assertEquals("xvbwsa", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.onInactiveMarkAs());
        Assertions.assertEquals("ortjtylseudpyhvn", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("vbicdzvypfo", model.userProperties().get(0).name());
        Assertions.assertEquals("lif", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1278696212, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
