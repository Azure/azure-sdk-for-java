// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.SqlServerStoredProcedureActivity;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class SqlServerStoredProcedureActivityTests {
    @Test
    public void testDeserialize() {
        SqlServerStoredProcedureActivity model =
            BinaryData
                .fromString(
                    "{\"type\":\"SqlServerStoredProcedure\",\"typeProperties\":{},\"linkedServiceName\":{\"referenceName\":\"cz\",\"parameters\":{}},\"policy\":{\"retryIntervalInSeconds\":9296318,\"secureInput\":true,\"secureOutput\":true,\"\":{}},\"name\":\"caxikhfjqebgl\",\"description\":\"kxgzzromvygysem\",\"dependsOn\":[{\"activity\":\"srfsvpinkzpatqt\",\"dependencyConditions\":[\"Skipped\",\"Skipped\"],\"\":{}},{\"activity\":\"pvckojazbbgs\",\"dependencyConditions\":[\"Skipped\"],\"\":{}},{\"activity\":\"ubz\",\"dependencyConditions\":[\"Succeeded\",\"Completed\",\"Skipped\",\"Completed\"],\"\":{}},{\"activity\":\"tcovqseusrfjb\",\"dependencyConditions\":[\"Skipped\",\"Failed\"],\"\":{}}],\"userProperties\":[{\"name\":\"lbmuos\"},{\"name\":\"kjmdihdcyy\"},{\"name\":\"zlwhbwzjnufzrfgm\"}],\"\":{}}")
                .toObject(SqlServerStoredProcedureActivity.class);
        Assertions.assertEquals("caxikhfjqebgl", model.name());
        Assertions.assertEquals("kxgzzromvygysem", model.description());
        Assertions.assertEquals("srfsvpinkzpatqt", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("lbmuos", model.userProperties().get(0).name());
        Assertions.assertEquals("cz", model.linkedServiceName().referenceName());
        Assertions.assertEquals(9296318, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
    }

    @Test
    public void testSerialize() {
        SqlServerStoredProcedureActivity model =
            new SqlServerStoredProcedureActivity()
                .withName("caxikhfjqebgl")
                .withDescription("kxgzzromvygysem")
                .withDependsOn(
                    Arrays
                        .asList(
                            new ActivityDependency()
                                .withActivity("srfsvpinkzpatqt")
                                .withDependencyConditions(
                                    Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.SKIPPED))
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency()
                                .withActivity("pvckojazbbgs")
                                .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED))
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency()
                                .withActivity("ubz")
                                .withDependencyConditions(
                                    Arrays
                                        .asList(
                                            DependencyCondition.SUCCEEDED,
                                            DependencyCondition.COMPLETED,
                                            DependencyCondition.SKIPPED,
                                            DependencyCondition.COMPLETED))
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency()
                                .withActivity("tcovqseusrfjb")
                                .withDependencyConditions(
                                    Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.FAILED))
                                .withAdditionalProperties(mapOf())))
                .withUserProperties(
                    Arrays
                        .asList(
                            new UserProperty().withName("lbmuos"),
                            new UserProperty().withName("kjmdihdcyy"),
                            new UserProperty().withName("zlwhbwzjnufzrfgm")))
                .withLinkedServiceName(new LinkedServiceReference().withReferenceName("cz").withParameters(mapOf()))
                .withPolicy(
                    new ActivityPolicy()
                        .withRetryIntervalInSeconds(9296318)
                        .withSecureInput(true)
                        .withSecureOutput(true)
                        .withAdditionalProperties(mapOf()));
        model = BinaryData.fromObject(model).toObject(SqlServerStoredProcedureActivity.class);
        Assertions.assertEquals("caxikhfjqebgl", model.name());
        Assertions.assertEquals("kxgzzromvygysem", model.description());
        Assertions.assertEquals("srfsvpinkzpatqt", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("lbmuos", model.userProperties().get(0).name());
        Assertions.assertEquals("cz", model.linkedServiceName().referenceName());
        Assertions.assertEquals(9296318, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
