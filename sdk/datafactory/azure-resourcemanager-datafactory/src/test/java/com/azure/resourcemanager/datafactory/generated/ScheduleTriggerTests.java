// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DayOfWeek;
import com.azure.resourcemanager.datafactory.models.DaysOfWeek;
import com.azure.resourcemanager.datafactory.models.PipelineReference;
import com.azure.resourcemanager.datafactory.models.RecurrenceFrequency;
import com.azure.resourcemanager.datafactory.models.RecurrenceSchedule;
import com.azure.resourcemanager.datafactory.models.RecurrenceScheduleOccurrence;
import com.azure.resourcemanager.datafactory.models.ScheduleTrigger;
import com.azure.resourcemanager.datafactory.models.ScheduleTriggerRecurrence;
import com.azure.resourcemanager.datafactory.models.TriggerPipelineReference;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ScheduleTriggerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScheduleTrigger model = BinaryData.fromString(
            "{\"type\":\"ScheduleTrigger\",\"typeProperties\":{\"recurrence\":{\"frequency\":\"Month\",\"interval\":651307046,\"startTime\":\"2021-03-30T07:03:18Z\",\"endTime\":\"2021-01-10T10:02:22Z\",\"timeZone\":\"kyvu\",\"schedule\":{\"minutes\":[283583616],\"hours\":[1458529863,199145977],\"weekDays\":[\"Tuesday\"],\"monthDays\":[496889567,1775005280],\"monthlyOccurrences\":[{\"day\":\"Friday\",\"occurrence\":663593930,\"\":{\"wmefpijwr\":\"datazcizuegyl\",\"acgrysjgz\":\"databuphbwaisw\",\"pfwfdcpeduxyddv\":\"datazojupdc\"}},{\"day\":\"Monday\",\"occurrence\":852699787,\"\":{\"ziapsypgmmie\":\"datankhgg\",\"ojargetncfl\":\"dataeqmtetnywgmeiiha\"}},{\"day\":\"Tuesday\",\"occurrence\":488432915,\"\":{\"naeefzlwohobaac\":\"datakcqe\",\"noeiqhbr\":\"dataglvixfl\",\"kpbrr\":\"datacgmyjmcw\",\"teblrnu\":\"databzvink\"}}],\"\":{\"musudhjoshmmzotc\":\"datan\",\"difbeott\":\"dataffmik\"}},\"\":{\"ut\":\"dataonejpjzqb\",\"atfalhnixo\":\"datanlow\"}}},\"pipelines\":[{\"pipelineReference\":{\"referenceName\":\"b\",\"name\":\"jbeihcaxk\"},\"parameters\":{\"nfuvesmepqrkjyp\":\"datayvbcxnni\",\"fshfmw\":\"datasvnotbe\",\"g\":\"datatex\",\"odpm\":\"datandtjcyvmsd\"}},{\"pipelineReference\":{\"referenceName\":\"sggneocqaejle\",\"name\":\"ydpqwucprpwsg\"},\"parameters\":{\"bcto\":\"datakcikefwmqial\"}},{\"pipelineReference\":{\"referenceName\":\"ocepjsfhxhulrekr\",\"name\":\"jdnzrcj\"},\"parameters\":{\"vaoryefgwo\":\"datathydyzrrwlgueso\",\"zqvi\":\"datayceksdatjtgmf\",\"cocsmcqskrjnqaa\":\"datadhixd\"}},{\"pipelineReference\":{\"referenceName\":\"zjdrkc\",\"name\":\"eox\"},\"parameters\":{\"cqpvrrmlk\":\"dataztlxqhyyxhzgxk\"}}],\"description\":\"oqsdvxddsfylbok\",\"runtimeState\":\"Stopped\",\"annotations\":[\"datarxae\"],\"\":{\"zkumxbcnkoj\":\"dataravswnns\",\"cfjw\":\"datankhbt\"}}")
            .toObject(ScheduleTrigger.class);
        Assertions.assertEquals("oqsdvxddsfylbok", model.description());
        Assertions.assertEquals("b", model.pipelines().get(0).pipelineReference().referenceName());
        Assertions.assertEquals("jbeihcaxk", model.pipelines().get(0).pipelineReference().name());
        Assertions.assertEquals(RecurrenceFrequency.MONTH, model.recurrence().frequency());
        Assertions.assertEquals(651307046, model.recurrence().interval());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-30T07:03:18Z"), model.recurrence().startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-10T10:02:22Z"), model.recurrence().endTime());
        Assertions.assertEquals("kyvu", model.recurrence().timeZone());
        Assertions.assertEquals(283583616, model.recurrence().schedule().minutes().get(0));
        Assertions.assertEquals(1458529863, model.recurrence().schedule().hours().get(0));
        Assertions.assertEquals(DaysOfWeek.TUESDAY, model.recurrence().schedule().weekDays().get(0));
        Assertions.assertEquals(496889567, model.recurrence().schedule().monthDays().get(0));
        Assertions.assertEquals(DayOfWeek.FRIDAY, model.recurrence().schedule().monthlyOccurrences().get(0).day());
        Assertions.assertEquals(663593930, model.recurrence().schedule().monthlyOccurrences().get(0).occurrence());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScheduleTrigger model = new ScheduleTrigger().withDescription("oqsdvxddsfylbok")
            .withAnnotations(Arrays.asList("datarxae"))
            .withPipelines(Arrays.asList(
                new TriggerPipelineReference()
                    .withPipelineReference(new PipelineReference().withReferenceName("b").withName("jbeihcaxk"))
                    .withParameters(mapOf("nfuvesmepqrkjyp", "datayvbcxnni", "fshfmw", "datasvnotbe", "g", "datatex",
                        "odpm", "datandtjcyvmsd")),
                new TriggerPipelineReference()
                    .withPipelineReference(
                        new PipelineReference().withReferenceName("sggneocqaejle").withName("ydpqwucprpwsg"))
                    .withParameters(mapOf("bcto", "datakcikefwmqial")),
                new TriggerPipelineReference()
                    .withPipelineReference(
                        new PipelineReference().withReferenceName("ocepjsfhxhulrekr").withName("jdnzrcj"))
                    .withParameters(mapOf("vaoryefgwo", "datathydyzrrwlgueso", "zqvi", "datayceksdatjtgmf",
                        "cocsmcqskrjnqaa", "datadhixd")),
                new TriggerPipelineReference()
                    .withPipelineReference(new PipelineReference().withReferenceName("zjdrkc").withName("eox"))
                    .withParameters(mapOf("cqpvrrmlk", "dataztlxqhyyxhzgxk"))))
            .withRecurrence(new ScheduleTriggerRecurrence().withFrequency(RecurrenceFrequency.MONTH)
                .withInterval(651307046)
                .withStartTime(OffsetDateTime.parse("2021-03-30T07:03:18Z"))
                .withEndTime(OffsetDateTime.parse("2021-01-10T10:02:22Z"))
                .withTimeZone("kyvu")
                .withSchedule(new RecurrenceSchedule().withMinutes(Arrays.asList(283583616))
                    .withHours(Arrays.asList(1458529863, 199145977))
                    .withWeekDays(Arrays.asList(DaysOfWeek.TUESDAY))
                    .withMonthDays(Arrays.asList(496889567, 1775005280))
                    .withMonthlyOccurrences(Arrays.asList(
                        new RecurrenceScheduleOccurrence().withDay(DayOfWeek.FRIDAY)
                            .withOccurrence(663593930)
                            .withAdditionalProperties(mapOf()),
                        new RecurrenceScheduleOccurrence().withDay(DayOfWeek.MONDAY)
                            .withOccurrence(852699787)
                            .withAdditionalProperties(mapOf()),
                        new RecurrenceScheduleOccurrence().withDay(DayOfWeek.TUESDAY)
                            .withOccurrence(488432915)
                            .withAdditionalProperties(mapOf())))
                    .withAdditionalProperties(mapOf()))
                .withAdditionalProperties(mapOf()));
        model = BinaryData.fromObject(model).toObject(ScheduleTrigger.class);
        Assertions.assertEquals("oqsdvxddsfylbok", model.description());
        Assertions.assertEquals("b", model.pipelines().get(0).pipelineReference().referenceName());
        Assertions.assertEquals("jbeihcaxk", model.pipelines().get(0).pipelineReference().name());
        Assertions.assertEquals(RecurrenceFrequency.MONTH, model.recurrence().frequency());
        Assertions.assertEquals(651307046, model.recurrence().interval());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-30T07:03:18Z"), model.recurrence().startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-10T10:02:22Z"), model.recurrence().endTime());
        Assertions.assertEquals("kyvu", model.recurrence().timeZone());
        Assertions.assertEquals(283583616, model.recurrence().schedule().minutes().get(0));
        Assertions.assertEquals(1458529863, model.recurrence().schedule().hours().get(0));
        Assertions.assertEquals(DaysOfWeek.TUESDAY, model.recurrence().schedule().weekDays().get(0));
        Assertions.assertEquals(496889567, model.recurrence().schedule().monthDays().get(0));
        Assertions.assertEquals(DayOfWeek.FRIDAY, model.recurrence().schedule().monthlyOccurrences().get(0).day());
        Assertions.assertEquals(663593930, model.recurrence().schedule().monthlyOccurrences().get(0).occurrence());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
