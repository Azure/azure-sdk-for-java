// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DayOfWeek;
import com.azure.resourcemanager.datafactory.models.DaysOfWeek;
import com.azure.resourcemanager.datafactory.models.PipelineReference;
import com.azure.resourcemanager.datafactory.models.RecurrenceFrequency;
import com.azure.resourcemanager.datafactory.models.RecurrenceSchedule;
import com.azure.resourcemanager.datafactory.models.RecurrenceScheduleOccurrence;
import com.azure.resourcemanager.datafactory.models.ScheduleTrigger;
import com.azure.resourcemanager.datafactory.models.ScheduleTriggerRecurrence;
import com.azure.resourcemanager.datafactory.models.TriggerPipelineReference;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ScheduleTriggerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScheduleTrigger model = BinaryData.fromString(
            "{\"type\":\"ScheduleTrigger\",\"typeProperties\":{\"recurrence\":{\"frequency\":\"Minute\",\"interval\":1693781649,\"startTime\":\"2021-12-09T23:42:31Z\",\"endTime\":\"2021-10-30T05:40:14Z\",\"timeZone\":\"umjmpsxz\",\"schedule\":{\"minutes\":[1441509354,1208352481,15982153],\"hours\":[1683368107,1234651783],\"weekDays\":[\"Wednesday\",\"Friday\"],\"monthDays\":[343405067,1725868714,1760240817],\"monthlyOccurrences\":[{\"day\":\"Saturday\",\"occurrence\":101046964,\"\":{\"g\":\"dataxqtcnyhs\",\"zfyzbnko\":\"dataoxnelhx\",\"e\":\"datacsvipwa\",\"prgpm\":\"datauc\"}}],\"\":{\"zcsklvtcea\":\"datavuhcwc\",\"paywwesaqsuqpskv\":\"dataiuurqlcdhebjf\",\"lra\":\"datab\",\"thhxqsbyyleyopgy\":\"dataidi\"}},\"\":{\"gkpcwffoso\":\"datanyfjwoaom\"}}},\"pipelines\":[{\"pipelineReference\":{\"referenceName\":\"gjuzgqkx\",\"name\":\"avbteaegyojy\"},\"parameters\":{\"hbztlvujbhw\":\"datapcdhqjc\",\"cihkjjjbit\":\"dataszrhf\",\"fwmasodsmjn\":\"datauriizyrgzxpr\"}},{\"pipelineReference\":{\"referenceName\":\"doomhrlgidqxbrdh\",\"name\":\"cq\"},\"parameters\":{\"hienkliyfgkzwkyq\":\"datapjd\"}}],\"description\":\"diybdoyykhi\",\"runtimeState\":\"Stopped\",\"annotations\":[\"dataktwijoxkkynppqt\"],\"\":{\"wjatyhkqqj\":\"dataf\"}}")
            .toObject(ScheduleTrigger.class);
        Assertions.assertEquals("diybdoyykhi", model.description());
        Assertions.assertEquals("gjuzgqkx", model.pipelines().get(0).pipelineReference().referenceName());
        Assertions.assertEquals("avbteaegyojy", model.pipelines().get(0).pipelineReference().name());
        Assertions.assertEquals(RecurrenceFrequency.MINUTE, model.recurrence().frequency());
        Assertions.assertEquals(1693781649, model.recurrence().interval());
        Assertions.assertEquals(OffsetDateTime.parse("2021-12-09T23:42:31Z"), model.recurrence().startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-30T05:40:14Z"), model.recurrence().endTime());
        Assertions.assertEquals("umjmpsxz", model.recurrence().timeZone());
        Assertions.assertEquals(1441509354, model.recurrence().schedule().minutes().get(0));
        Assertions.assertEquals(1683368107, model.recurrence().schedule().hours().get(0));
        Assertions.assertEquals(DaysOfWeek.WEDNESDAY, model.recurrence().schedule().weekDays().get(0));
        Assertions.assertEquals(343405067, model.recurrence().schedule().monthDays().get(0));
        Assertions.assertEquals(DayOfWeek.SATURDAY, model.recurrence().schedule().monthlyOccurrences().get(0).day());
        Assertions.assertEquals(101046964, model.recurrence().schedule().monthlyOccurrences().get(0).occurrence());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScheduleTrigger model = new ScheduleTrigger().withDescription("diybdoyykhi")
            .withAnnotations(Arrays.asList("dataktwijoxkkynppqt"))
            .withPipelines(Arrays.asList(
                new TriggerPipelineReference()
                    .withPipelineReference(
                        new PipelineReference().withReferenceName("gjuzgqkx").withName("avbteaegyojy"))
                    .withParameters(mapOf("hbztlvujbhw", "datapcdhqjc", "cihkjjjbit", "dataszrhf", "fwmasodsmjn",
                        "datauriizyrgzxpr")),
                new TriggerPipelineReference()
                    .withPipelineReference(new PipelineReference().withReferenceName("doomhrlgidqxbrdh").withName("cq"))
                    .withParameters(mapOf("hienkliyfgkzwkyq", "datapjd"))))
            .withRecurrence(new ScheduleTriggerRecurrence().withFrequency(RecurrenceFrequency.MINUTE)
                .withInterval(1693781649)
                .withStartTime(OffsetDateTime.parse("2021-12-09T23:42:31Z"))
                .withEndTime(OffsetDateTime.parse("2021-10-30T05:40:14Z"))
                .withTimeZone("umjmpsxz")
                .withSchedule(new RecurrenceSchedule().withMinutes(Arrays.asList(1441509354, 1208352481, 15982153))
                    .withHours(Arrays.asList(1683368107, 1234651783))
                    .withWeekDays(Arrays.asList(DaysOfWeek.WEDNESDAY, DaysOfWeek.FRIDAY))
                    .withMonthDays(Arrays.asList(343405067, 1725868714, 1760240817))
                    .withMonthlyOccurrences(Arrays.asList(new RecurrenceScheduleOccurrence().withDay(DayOfWeek.SATURDAY)
                        .withOccurrence(101046964)
                        .withAdditionalProperties(mapOf())))
                    .withAdditionalProperties(mapOf()))
                .withAdditionalProperties(mapOf()));
        model = BinaryData.fromObject(model).toObject(ScheduleTrigger.class);
        Assertions.assertEquals("diybdoyykhi", model.description());
        Assertions.assertEquals("gjuzgqkx", model.pipelines().get(0).pipelineReference().referenceName());
        Assertions.assertEquals("avbteaegyojy", model.pipelines().get(0).pipelineReference().name());
        Assertions.assertEquals(RecurrenceFrequency.MINUTE, model.recurrence().frequency());
        Assertions.assertEquals(1693781649, model.recurrence().interval());
        Assertions.assertEquals(OffsetDateTime.parse("2021-12-09T23:42:31Z"), model.recurrence().startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-30T05:40:14Z"), model.recurrence().endTime());
        Assertions.assertEquals("umjmpsxz", model.recurrence().timeZone());
        Assertions.assertEquals(1441509354, model.recurrence().schedule().minutes().get(0));
        Assertions.assertEquals(1683368107, model.recurrence().schedule().hours().get(0));
        Assertions.assertEquals(DaysOfWeek.WEDNESDAY, model.recurrence().schedule().weekDays().get(0));
        Assertions.assertEquals(343405067, model.recurrence().schedule().monthDays().get(0));
        Assertions.assertEquals(DayOfWeek.SATURDAY, model.recurrence().schedule().monthlyOccurrences().get(0).day());
        Assertions.assertEquals(101046964, model.recurrence().schedule().monthlyOccurrences().get(0).occurrence());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
