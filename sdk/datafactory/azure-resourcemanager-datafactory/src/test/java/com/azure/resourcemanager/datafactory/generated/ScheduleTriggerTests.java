// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.PipelineReference;
import com.azure.resourcemanager.datafactory.models.RecurrenceFrequency;
import com.azure.resourcemanager.datafactory.models.ScheduleTrigger;
import com.azure.resourcemanager.datafactory.models.ScheduleTriggerRecurrence;
import com.azure.resourcemanager.datafactory.models.TriggerPipelineReference;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class ScheduleTriggerTests {
    @Test
    public void testDeserialize() {
        ScheduleTrigger model =
            BinaryData
                .fromString(
                    "{\"type\":\"ScheduleTrigger\",\"typeProperties\":{\"recurrence\":{\"frequency\":\"Day\",\"interval\":1657613934,\"startTime\":\"2021-02-20T01:05:16Z\",\"endTime\":\"2021-12-09T15:11:31Z\",\"timeZone\":\"qlhfwaf\",\"\":{}}},\"pipelines\":[{\"pipelineReference\":{\"referenceName\":\"guyfazbkocbygvt\",\"name\":\"mxkbcjwwdxomra\"},\"parameters\":{}},{\"pipelineReference\":{\"referenceName\":\"eboozflyacagaed\",\"name\":\"i\"},\"parameters\":{}},{\"pipelineReference\":{\"referenceName\":\"gdtwgabd\",\"name\":\"kuz\"},\"parameters\":{}}],\"description\":\"cooyvhtuqb\",\"runtimeState\":\"Started\",\"annotations\":[],\"\":{}}")
                .toObject(ScheduleTrigger.class);
        Assertions.assertEquals("cooyvhtuqb", model.description());
        Assertions.assertEquals("guyfazbkocbygvt", model.pipelines().get(0).pipelineReference().referenceName());
        Assertions.assertEquals("mxkbcjwwdxomra", model.pipelines().get(0).pipelineReference().name());
        Assertions.assertEquals(RecurrenceFrequency.DAY, model.recurrence().frequency());
        Assertions.assertEquals(1657613934, model.recurrence().interval());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-20T01:05:16Z"), model.recurrence().startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-12-09T15:11:31Z"), model.recurrence().endTime());
        Assertions.assertEquals("qlhfwaf", model.recurrence().timeZone());
    }

    @Test
    public void testSerialize() {
        ScheduleTrigger model =
            new ScheduleTrigger()
                .withDescription("cooyvhtuqb")
                .withAnnotations(Arrays.asList())
                .withPipelines(
                    Arrays
                        .asList(
                            new TriggerPipelineReference()
                                .withPipelineReference(
                                    new PipelineReference()
                                        .withReferenceName("guyfazbkocbygvt")
                                        .withName("mxkbcjwwdxomra"))
                                .withParameters(mapOf()),
                            new TriggerPipelineReference()
                                .withPipelineReference(
                                    new PipelineReference().withReferenceName("eboozflyacagaed").withName("i"))
                                .withParameters(mapOf()),
                            new TriggerPipelineReference()
                                .withPipelineReference(
                                    new PipelineReference().withReferenceName("gdtwgabd").withName("kuz"))
                                .withParameters(mapOf())))
                .withRecurrence(
                    new ScheduleTriggerRecurrence()
                        .withFrequency(RecurrenceFrequency.DAY)
                        .withInterval(1657613934)
                        .withStartTime(OffsetDateTime.parse("2021-02-20T01:05:16Z"))
                        .withEndTime(OffsetDateTime.parse("2021-12-09T15:11:31Z"))
                        .withTimeZone("qlhfwaf")
                        .withAdditionalProperties(mapOf()));
        model = BinaryData.fromObject(model).toObject(ScheduleTrigger.class);
        Assertions.assertEquals("cooyvhtuqb", model.description());
        Assertions.assertEquals("guyfazbkocbygvt", model.pipelines().get(0).pipelineReference().referenceName());
        Assertions.assertEquals("mxkbcjwwdxomra", model.pipelines().get(0).pipelineReference().name());
        Assertions.assertEquals(RecurrenceFrequency.DAY, model.recurrence().frequency());
        Assertions.assertEquals(1657613934, model.recurrence().interval());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-20T01:05:16Z"), model.recurrence().startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-12-09T15:11:31Z"), model.recurrence().endTime());
        Assertions.assertEquals("qlhfwaf", model.recurrence().timeZone());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
