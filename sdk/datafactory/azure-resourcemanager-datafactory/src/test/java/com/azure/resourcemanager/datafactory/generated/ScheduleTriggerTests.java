// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DayOfWeek;
import com.azure.resourcemanager.datafactory.models.DaysOfWeek;
import com.azure.resourcemanager.datafactory.models.PipelineReference;
import com.azure.resourcemanager.datafactory.models.RecurrenceFrequency;
import com.azure.resourcemanager.datafactory.models.RecurrenceSchedule;
import com.azure.resourcemanager.datafactory.models.RecurrenceScheduleOccurrence;
import com.azure.resourcemanager.datafactory.models.ScheduleTrigger;
import com.azure.resourcemanager.datafactory.models.ScheduleTriggerRecurrence;
import com.azure.resourcemanager.datafactory.models.TriggerPipelineReference;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ScheduleTriggerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScheduleTrigger model = BinaryData.fromString(
            "{\"type\":\"ScheduleTrigger\",\"typeProperties\":{\"recurrence\":{\"frequency\":\"NotSpecified\",\"interval\":12509381,\"startTime\":\"2021-04-15T03:16:07Z\",\"endTime\":\"2021-02-16T00:41:52Z\",\"timeZone\":\"jzq\",\"schedule\":{\"minutes\":[1741544202,1918611282],\"hours\":[1229230791,1645758799,1777373889,1110822860],\"weekDays\":[\"Wednesday\",\"Wednesday\",\"Thursday\"],\"monthDays\":[89265471],\"monthlyOccurrences\":[{\"day\":\"Sunday\",\"occurrence\":1945961956,\"\":{\"oxssf\":\"datadrkcsh\",\"hzgxkwcqpvrrm\":\"datatlxqhyy\"}},{\"day\":\"Monday\",\"occurrence\":1860743831,\"\":{\"kbr\":\"datadvxddsfylb\",\"wnnsbzkumxbcn\":\"dataykrxaevburav\",\"hbtycfj\":\"dataojyn\"}}],\"\":{\"tsukdoy\":\"dataia\",\"zzcxqdrqs\":\"datapwzniekedxvwevip\"}},\"\":{\"zqazwyb\":\"datakzqybpoxqwcuslsp\",\"rnbmc\":\"dataewjvyrdownb\",\"hpdkrjlwrqh\":\"datalmzaruosmpcajxua\",\"voahektwgiumccom\":\"datahnazckgbpysgzg\"}}},\"pipelines\":[{\"pipelineReference\":{\"referenceName\":\"a\",\"name\":\"rbdhrkhf\"},\"parameters\":{\"qq\":\"dataiwcnzsimbgvrksj\",\"gzwwyubkppo\":\"dataarb\"}},{\"pipelineReference\":{\"referenceName\":\"yjqemgb\",\"name\":\"xuxmkkgbyj\"},\"parameters\":{\"ll\":\"datanbnwfekp\",\"zlvcjb\":\"datazvrvjwsff\",\"qugnqsclr\":\"datavkijynvgu\"}},{\"pipelineReference\":{\"referenceName\":\"uwhmncewcfins\",\"name\":\"mxxsyb\"},\"parameters\":{\"ckdxfl\":\"datagxzogclusic\",\"btce\":\"dataj\",\"sbgj\":\"datailcerrpalxm\"}}],\"description\":\"hzfjmnaby\",\"runtimeState\":\"Disabled\",\"annotations\":[\"datakwlmittpbivhkdxh\",\"datavybxplbdaz\"],\"\":{\"zu\":\"datagvd\"}}")
            .toObject(ScheduleTrigger.class);
        Assertions.assertEquals("hzfjmnaby", model.description());
        Assertions.assertEquals("a", model.pipelines().get(0).pipelineReference().referenceName());
        Assertions.assertEquals("rbdhrkhf", model.pipelines().get(0).pipelineReference().name());
        Assertions.assertEquals(RecurrenceFrequency.NOT_SPECIFIED, model.recurrence().frequency());
        Assertions.assertEquals(12509381, model.recurrence().interval());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-15T03:16:07Z"), model.recurrence().startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-16T00:41:52Z"), model.recurrence().endTime());
        Assertions.assertEquals("jzq", model.recurrence().timeZone());
        Assertions.assertEquals(1741544202, model.recurrence().schedule().minutes().get(0));
        Assertions.assertEquals(1229230791, model.recurrence().schedule().hours().get(0));
        Assertions.assertEquals(DaysOfWeek.WEDNESDAY, model.recurrence().schedule().weekDays().get(0));
        Assertions.assertEquals(89265471, model.recurrence().schedule().monthDays().get(0));
        Assertions.assertEquals(DayOfWeek.SUNDAY, model.recurrence().schedule().monthlyOccurrences().get(0).day());
        Assertions.assertEquals(1945961956, model.recurrence().schedule().monthlyOccurrences().get(0).occurrence());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScheduleTrigger model
            = new ScheduleTrigger().withDescription("hzfjmnaby")
                .withAnnotations(Arrays.asList("datakwlmittpbivhkdxh", "datavybxplbdaz"))
                .withPipelines(Arrays.asList(new TriggerPipelineReference()
                    .withPipelineReference(new PipelineReference().withReferenceName("a").withName("rbdhrkhf"))
                    .withParameters(mapOf("qq", "dataiwcnzsimbgvrksj", "gzwwyubkppo", "dataarb")),
                    new TriggerPipelineReference()
                        .withPipelineReference(
                            new PipelineReference().withReferenceName("yjqemgb").withName("xuxmkkgbyj"))
                        .withParameters(
                            mapOf("ll", "datanbnwfekp", "zlvcjb", "datazvrvjwsff", "qugnqsclr", "datavkijynvgu")),
                    new TriggerPipelineReference()
                        .withPipelineReference(
                            new PipelineReference().withReferenceName("uwhmncewcfins").withName("mxxsyb"))
                        .withParameters(
                            mapOf("ckdxfl", "datagxzogclusic", "btce", "dataj", "sbgj", "datailcerrpalxm"))))
                .withRecurrence(new ScheduleTriggerRecurrence().withFrequency(RecurrenceFrequency.NOT_SPECIFIED)
                    .withInterval(12509381)
                    .withStartTime(OffsetDateTime.parse("2021-04-15T03:16:07Z"))
                    .withEndTime(OffsetDateTime.parse("2021-02-16T00:41:52Z"))
                    .withTimeZone("jzq")
                    .withSchedule(new RecurrenceSchedule().withMinutes(Arrays.asList(1741544202, 1918611282))
                        .withHours(Arrays.asList(1229230791, 1645758799, 1777373889, 1110822860))
                        .withWeekDays(Arrays.asList(DaysOfWeek.WEDNESDAY, DaysOfWeek.WEDNESDAY, DaysOfWeek.THURSDAY))
                        .withMonthDays(Arrays.asList(89265471))
                        .withMonthlyOccurrences(Arrays.asList(
                            new RecurrenceScheduleOccurrence().withDay(DayOfWeek.SUNDAY)
                                .withOccurrence(1945961956)
                                .withAdditionalProperties(mapOf()),
                            new RecurrenceScheduleOccurrence().withDay(DayOfWeek.MONDAY)
                                .withOccurrence(1860743831)
                                .withAdditionalProperties(mapOf())))
                        .withAdditionalProperties(mapOf()))
                    .withAdditionalProperties(mapOf()));
        model = BinaryData.fromObject(model).toObject(ScheduleTrigger.class);
        Assertions.assertEquals("hzfjmnaby", model.description());
        Assertions.assertEquals("a", model.pipelines().get(0).pipelineReference().referenceName());
        Assertions.assertEquals("rbdhrkhf", model.pipelines().get(0).pipelineReference().name());
        Assertions.assertEquals(RecurrenceFrequency.NOT_SPECIFIED, model.recurrence().frequency());
        Assertions.assertEquals(12509381, model.recurrence().interval());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-15T03:16:07Z"), model.recurrence().startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-16T00:41:52Z"), model.recurrence().endTime());
        Assertions.assertEquals("jzq", model.recurrence().timeZone());
        Assertions.assertEquals(1741544202, model.recurrence().schedule().minutes().get(0));
        Assertions.assertEquals(1229230791, model.recurrence().schedule().hours().get(0));
        Assertions.assertEquals(DaysOfWeek.WEDNESDAY, model.recurrence().schedule().weekDays().get(0));
        Assertions.assertEquals(89265471, model.recurrence().schedule().monthDays().get(0));
        Assertions.assertEquals(DayOfWeek.SUNDAY, model.recurrence().schedule().monthlyOccurrences().get(0).day());
        Assertions.assertEquals(1945961956, model.recurrence().schedule().monthlyOccurrences().get(0).occurrence());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
