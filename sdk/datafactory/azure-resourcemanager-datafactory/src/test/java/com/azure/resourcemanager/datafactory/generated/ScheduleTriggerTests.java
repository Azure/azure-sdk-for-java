// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DayOfWeek;
import com.azure.resourcemanager.datafactory.models.DaysOfWeek;
import com.azure.resourcemanager.datafactory.models.PipelineReference;
import com.azure.resourcemanager.datafactory.models.RecurrenceFrequency;
import com.azure.resourcemanager.datafactory.models.RecurrenceSchedule;
import com.azure.resourcemanager.datafactory.models.RecurrenceScheduleOccurrence;
import com.azure.resourcemanager.datafactory.models.ScheduleTrigger;
import com.azure.resourcemanager.datafactory.models.ScheduleTriggerRecurrence;
import com.azure.resourcemanager.datafactory.models.TriggerPipelineReference;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ScheduleTriggerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScheduleTrigger model =
            BinaryData
                .fromString(
                    "{\"type\":\"ScheduleTrigger\",\"typeProperties\":{\"recurrence\":{\"frequency\":\"Year\",\"interval\":1236275141,\"startTime\":\"2021-02-06T22:43:21Z\",\"endTime\":\"2021-10-20T04:45:39Z\",\"timeZone\":\"jcaqeorv\",\"schedule\":{\"minutes\":[1266177512,189144055,1891096518],\"hours\":[415292522,770664216,334743435],\"weekDays\":[\"Monday\",\"Tuesday\",\"Saturday\",\"Saturday\"],\"monthDays\":[1728235865,1813263959,1579619430,694727070],\"monthlyOccurrences\":[{\"day\":\"Thursday\",\"occurrence\":364845375,\"\":{\"nywfyoimw\":\"datarinwtvsb\",\"mtddkyyrpbnqi\":\"dataeoutztlnhg\"}}],\"\":{\"xcepn\":\"datacyiuiwkrwpishc\",\"yy\":\"datapiicnwt\",\"yjbenzw\":\"dataskujnzxhoty\"}},\"\":{\"zv\":\"datavslpythqgziplac\",\"mqyg\":\"datadh\",\"c\":\"dataefsnlob\"}}},\"pipelines\":[{\"pipelineReference\":{\"referenceName\":\"xjgok\",\"name\":\"ixwebjykafii\"},\"parameters\":{\"j\":\"datavtsmcn\",\"lfetlmmdgeb\":\"dataovhcelw\",\"weryzgkcwwndole\":\"dataoqxattthazq\"}},{\"pipelineReference\":{\"referenceName\":\"yaszuoheuifshs\",\"name\":\"pl\"},\"parameters\":{\"qkwg\":\"datakztc\"}},{\"pipelineReference\":{\"referenceName\":\"aeby\",\"name\":\"ckfapzfq\"},\"parameters\":{\"rpm\":\"dataor\",\"iq\":\"datahekxmj\",\"wbdk\":\"dataqtm\"}}],\"description\":\"xdaehpfre\",\"runtimeState\":\"Started\",\"annotations\":[\"datajmsogzcuzdjtw\",\"dataiawjevdnpkdm\"],\"\":{\"bqaqbae\":\"datarzvjvlnafpfo\",\"klurxwtfpe\":\"datahjwcdjxqxf\",\"orvsypjytgzfmm\":\"dataftpjldlj\",\"ebmiko\":\"dataxkbtberyqlq\"}}")
                .toObject(ScheduleTrigger.class);
        Assertions.assertEquals("xdaehpfre", model.description());
        Assertions.assertEquals("xjgok", model.pipelines().get(0).pipelineReference().referenceName());
        Assertions.assertEquals("ixwebjykafii", model.pipelines().get(0).pipelineReference().name());
        Assertions.assertEquals(RecurrenceFrequency.YEAR, model.recurrence().frequency());
        Assertions.assertEquals(1236275141, model.recurrence().interval());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-06T22:43:21Z"), model.recurrence().startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-20T04:45:39Z"), model.recurrence().endTime());
        Assertions.assertEquals("jcaqeorv", model.recurrence().timeZone());
        Assertions.assertEquals(1266177512, model.recurrence().schedule().minutes().get(0));
        Assertions.assertEquals(415292522, model.recurrence().schedule().hours().get(0));
        Assertions.assertEquals(DaysOfWeek.MONDAY, model.recurrence().schedule().weekDays().get(0));
        Assertions.assertEquals(1728235865, model.recurrence().schedule().monthDays().get(0));
        Assertions.assertEquals(DayOfWeek.THURSDAY, model.recurrence().schedule().monthlyOccurrences().get(0).day());
        Assertions.assertEquals(364845375, model.recurrence().schedule().monthlyOccurrences().get(0).occurrence());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScheduleTrigger model =
            new ScheduleTrigger()
                .withDescription("xdaehpfre")
                .withAnnotations(Arrays.asList("datajmsogzcuzdjtw", "dataiawjevdnpkdm"))
                .withPipelines(
                    Arrays
                        .asList(
                            new TriggerPipelineReference()
                                .withPipelineReference(
                                    new PipelineReference().withReferenceName("xjgok").withName("ixwebjykafii"))
                                .withParameters(
                                    mapOf(
                                        "j",
                                        "datavtsmcn",
                                        "lfetlmmdgeb",
                                        "dataovhcelw",
                                        "weryzgkcwwndole",
                                        "dataoqxattthazq")),
                            new TriggerPipelineReference()
                                .withPipelineReference(
                                    new PipelineReference().withReferenceName("yaszuoheuifshs").withName("pl"))
                                .withParameters(mapOf("qkwg", "datakztc")),
                            new TriggerPipelineReference()
                                .withPipelineReference(
                                    new PipelineReference().withReferenceName("aeby").withName("ckfapzfq"))
                                .withParameters(mapOf("rpm", "dataor", "iq", "datahekxmj", "wbdk", "dataqtm"))))
                .withRecurrence(
                    new ScheduleTriggerRecurrence()
                        .withFrequency(RecurrenceFrequency.YEAR)
                        .withInterval(1236275141)
                        .withStartTime(OffsetDateTime.parse("2021-02-06T22:43:21Z"))
                        .withEndTime(OffsetDateTime.parse("2021-10-20T04:45:39Z"))
                        .withTimeZone("jcaqeorv")
                        .withSchedule(
                            new RecurrenceSchedule()
                                .withMinutes(Arrays.asList(1266177512, 189144055, 1891096518))
                                .withHours(Arrays.asList(415292522, 770664216, 334743435))
                                .withWeekDays(
                                    Arrays
                                        .asList(
                                            DaysOfWeek.MONDAY,
                                            DaysOfWeek.TUESDAY,
                                            DaysOfWeek.SATURDAY,
                                            DaysOfWeek.SATURDAY))
                                .withMonthDays(Arrays.asList(1728235865, 1813263959, 1579619430, 694727070))
                                .withMonthlyOccurrences(
                                    Arrays
                                        .asList(
                                            new RecurrenceScheduleOccurrence()
                                                .withDay(DayOfWeek.THURSDAY)
                                                .withOccurrence(364845375)
                                                .withAdditionalProperties(mapOf())))
                                .withAdditionalProperties(mapOf()))
                        .withAdditionalProperties(mapOf()));
        model = BinaryData.fromObject(model).toObject(ScheduleTrigger.class);
        Assertions.assertEquals("xdaehpfre", model.description());
        Assertions.assertEquals("xjgok", model.pipelines().get(0).pipelineReference().referenceName());
        Assertions.assertEquals("ixwebjykafii", model.pipelines().get(0).pipelineReference().name());
        Assertions.assertEquals(RecurrenceFrequency.YEAR, model.recurrence().frequency());
        Assertions.assertEquals(1236275141, model.recurrence().interval());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-06T22:43:21Z"), model.recurrence().startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-20T04:45:39Z"), model.recurrence().endTime());
        Assertions.assertEquals("jcaqeorv", model.recurrence().timeZone());
        Assertions.assertEquals(1266177512, model.recurrence().schedule().minutes().get(0));
        Assertions.assertEquals(415292522, model.recurrence().schedule().hours().get(0));
        Assertions.assertEquals(DaysOfWeek.MONDAY, model.recurrence().schedule().weekDays().get(0));
        Assertions.assertEquals(1728235865, model.recurrence().schedule().monthDays().get(0));
        Assertions.assertEquals(DayOfWeek.THURSDAY, model.recurrence().schedule().monthlyOccurrences().get(0).day());
        Assertions.assertEquals(364845375, model.recurrence().schedule().monthlyOccurrences().get(0).occurrence());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
