// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.SharePointOnlineListResourceDataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SharePointOnlineListResourceDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SharePointOnlineListResourceDataset model = BinaryData.fromString(
            "{\"type\":\"SharePointOnlineListResource\",\"typeProperties\":{\"listName\":\"dataxtsa\"},\"description\":\"tcoojybolqox\",\"structure\":\"datatsl\",\"schema\":\"datavmlkwkzlinv\",\"linkedServiceName\":{\"referenceName\":\"mtykxszdekfxcsqm\",\"parameters\":{\"plrgcnbvmhvq\":\"datazktkdpczeo\"}},\"parameters\":{\"orfji\":{\"type\":\"String\",\"defaultValue\":\"dataxku\"},\"gavfyihu\":{\"type\":\"Float\",\"defaultValue\":\"datadawe\"},\"zgkooagrlwpame\":{\"type\":\"String\",\"defaultValue\":\"datapwnyfjcypazwiimd\"},\"atfamrna\":{\"type\":\"Float\",\"defaultValue\":\"datawqadewhuwxkyx\"}},\"annotations\":[\"datalxccprkiyf\",\"datazwhomydxgtuqbv\"],\"folder\":{\"name\":\"zihirqvvketyd\"},\"\":{\"aqgbb\":\"dataoktssgvqxerxrmhr\"}}")
            .toObject(SharePointOnlineListResourceDataset.class);
        Assertions.assertEquals("tcoojybolqox", model.description());
        Assertions.assertEquals("mtykxszdekfxcsqm", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("orfji").type());
        Assertions.assertEquals("zihirqvvketyd", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SharePointOnlineListResourceDataset model = new SharePointOnlineListResourceDataset()
            .withDescription("tcoojybolqox")
            .withStructure("datatsl")
            .withSchema("datavmlkwkzlinv")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("mtykxszdekfxcsqm")
                .withParameters(mapOf("plrgcnbvmhvq", "datazktkdpczeo")))
            .withParameters(
                mapOf("orfji", new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("dataxku"),
                    "gavfyihu", new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("datadawe"),
                    "zgkooagrlwpame",
                    new ParameterSpecification().withType(ParameterType.STRING)
                        .withDefaultValue("datapwnyfjcypazwiimd"),
                    "atfamrna",
                    new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("datawqadewhuwxkyx")))
            .withAnnotations(Arrays.asList("datalxccprkiyf", "datazwhomydxgtuqbv"))
            .withFolder(new DatasetFolder().withName("zihirqvvketyd"))
            .withListName("dataxtsa");
        model = BinaryData.fromObject(model).toObject(SharePointOnlineListResourceDataset.class);
        Assertions.assertEquals("tcoojybolqox", model.description());
        Assertions.assertEquals("mtykxszdekfxcsqm", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("orfji").type());
        Assertions.assertEquals("zihirqvvketyd", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
