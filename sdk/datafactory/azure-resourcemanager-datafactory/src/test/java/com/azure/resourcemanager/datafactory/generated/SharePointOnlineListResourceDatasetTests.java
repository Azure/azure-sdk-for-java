// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.SharePointOnlineListResourceDataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SharePointOnlineListResourceDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SharePointOnlineListResourceDataset model =
            BinaryData
                .fromString(
                    "{\"type\":\"SharePointOnlineListResource\",\"typeProperties\":{\"listName\":\"datazgi\"},\"description\":\"kjkngzfsulaybhoz\",\"structure\":\"databuf\",\"schema\":\"databvcntpoeeytrsl\",\"linkedServiceName\":{\"referenceName\":\"zmzuicsggsxznbp\",\"parameters\":{\"njl\":\"dataqbylb\",\"nitvkyahfoyfzo\":\"dataicqomanefwl\"}},\"parameters\":{\"jukfalwceechcayv\":{\"type\":\"Float\",\"defaultValue\":\"dataprev\"},\"iybfbyd\":{\"type\":\"Float\",\"defaultValue\":\"dataqpucnusnylfhicrj\"},\"brhxgiknrlugs\":{\"type\":\"String\",\"defaultValue\":\"datallbofsnqoc\"}},\"annotations\":[\"databro\",\"datajf\",\"dataamzkuxdgpksgotbu\",\"datavnjql\"],\"folder\":{\"name\":\"qvcugusqlxlx\"},\"\":{\"nlmpuyypaggpaih\":\"datahfwlnvqacbyfisb\",\"ymipvlxty\":\"dataaeyzwloqrmgd\"}}")
                .toObject(SharePointOnlineListResourceDataset.class);
        Assertions.assertEquals("kjkngzfsulaybhoz", model.description());
        Assertions.assertEquals("zmzuicsggsxznbp", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.FLOAT, model.parameters().get("jukfalwceechcayv").type());
        Assertions.assertEquals("qvcugusqlxlx", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SharePointOnlineListResourceDataset model =
            new SharePointOnlineListResourceDataset()
                .withDescription("kjkngzfsulaybhoz")
                .withStructure("databuf")
                .withSchema("databvcntpoeeytrsl")
                .withLinkedServiceName(
                    new LinkedServiceReference()
                        .withReferenceName("zmzuicsggsxznbp")
                        .withParameters(mapOf("njl", "dataqbylb", "nitvkyahfoyfzo", "dataicqomanefwl")))
                .withParameters(
                    mapOf(
                        "jukfalwceechcayv",
                        new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("dataprev"),
                        "iybfbyd",
                        new ParameterSpecification()
                            .withType(ParameterType.FLOAT)
                            .withDefaultValue("dataqpucnusnylfhicrj"),
                        "brhxgiknrlugs",
                        new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("datallbofsnqoc")))
                .withAnnotations(Arrays.asList("databro", "datajf", "dataamzkuxdgpksgotbu", "datavnjql"))
                .withFolder(new DatasetFolder().withName("qvcugusqlxlx"))
                .withListName("datazgi");
        model = BinaryData.fromObject(model).toObject(SharePointOnlineListResourceDataset.class);
        Assertions.assertEquals("kjkngzfsulaybhoz", model.description());
        Assertions.assertEquals("zmzuicsggsxznbp", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.FLOAT, model.parameters().get("jukfalwceechcayv").type());
        Assertions.assertEquals("qvcugusqlxlx", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
