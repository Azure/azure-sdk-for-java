// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DayOfWeek;
import com.azure.resourcemanager.datafactory.models.DaysOfWeek;
import com.azure.resourcemanager.datafactory.models.RecurrenceFrequency;
import com.azure.resourcemanager.datafactory.models.RecurrenceSchedule;
import com.azure.resourcemanager.datafactory.models.RecurrenceScheduleOccurrence;
import com.azure.resourcemanager.datafactory.models.ScheduleTriggerRecurrence;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ScheduleTriggerRecurrenceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScheduleTriggerRecurrence model = BinaryData.fromString(
            "{\"frequency\":\"Hour\",\"interval\":1510832376,\"startTime\":\"2021-02-06T08:40:18Z\",\"endTime\":\"2021-06-26T17:02:55Z\",\"timeZone\":\"iuxdadcdrysanif\",\"schedule\":{\"minutes\":[1123798534,628663248,2143606471,1855573175],\"hours\":[1925731417,1127241689,2113680582],\"weekDays\":[\"Thursday\",\"Sunday\",\"Wednesday\"],\"monthDays\":[925862689,2036699891,520853376],\"monthlyOccurrences\":[{\"day\":\"Wednesday\",\"occurrence\":848484064,\"\":{\"azuned\":\"dataewjgjdq\"}},{\"day\":\"Monday\",\"occurrence\":1593708838,\"\":{\"wxcvwhutjjqzqi\":\"dataiti\",\"mihifrkyvut\":\"datasvoobjsrisfccfzu\",\"cricjmvsp\":\"datamc\",\"kzcizuegyl\":\"datadtladfc\"}}],\"\":{\"hbwaiswbacgrysjg\":\"dataefpijwrvbu\",\"fdcpeduxy\":\"datauzojupdcmpf\"}},\"\":{\"nkhgg\":\"datapfdhfp\"}}")
            .toObject(ScheduleTriggerRecurrence.class);
        Assertions.assertEquals(RecurrenceFrequency.HOUR, model.frequency());
        Assertions.assertEquals(1510832376, model.interval());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-06T08:40:18Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-26T17:02:55Z"), model.endTime());
        Assertions.assertEquals("iuxdadcdrysanif", model.timeZone());
        Assertions.assertEquals(1123798534, model.schedule().minutes().get(0));
        Assertions.assertEquals(1925731417, model.schedule().hours().get(0));
        Assertions.assertEquals(DaysOfWeek.THURSDAY, model.schedule().weekDays().get(0));
        Assertions.assertEquals(925862689, model.schedule().monthDays().get(0));
        Assertions.assertEquals(DayOfWeek.WEDNESDAY, model.schedule().monthlyOccurrences().get(0).day());
        Assertions.assertEquals(848484064, model.schedule().monthlyOccurrences().get(0).occurrence());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScheduleTriggerRecurrence model = new ScheduleTriggerRecurrence().withFrequency(RecurrenceFrequency.HOUR)
            .withInterval(1510832376)
            .withStartTime(OffsetDateTime.parse("2021-02-06T08:40:18Z"))
            .withEndTime(OffsetDateTime.parse("2021-06-26T17:02:55Z"))
            .withTimeZone("iuxdadcdrysanif")
            .withSchedule(
                new RecurrenceSchedule().withMinutes(Arrays.asList(1123798534, 628663248, 2143606471, 1855573175))
                    .withHours(Arrays.asList(1925731417, 1127241689, 2113680582))
                    .withWeekDays(Arrays.asList(DaysOfWeek.THURSDAY, DaysOfWeek.SUNDAY, DaysOfWeek.WEDNESDAY))
                    .withMonthDays(Arrays.asList(925862689, 2036699891, 520853376))
                    .withMonthlyOccurrences(Arrays.asList(
                        new RecurrenceScheduleOccurrence().withDay(DayOfWeek.WEDNESDAY)
                            .withOccurrence(848484064)
                            .withAdditionalProperties(mapOf()),
                        new RecurrenceScheduleOccurrence().withDay(DayOfWeek.MONDAY)
                            .withOccurrence(1593708838)
                            .withAdditionalProperties(mapOf())))
                    .withAdditionalProperties(mapOf()))
            .withAdditionalProperties(mapOf());
        model = BinaryData.fromObject(model).toObject(ScheduleTriggerRecurrence.class);
        Assertions.assertEquals(RecurrenceFrequency.HOUR, model.frequency());
        Assertions.assertEquals(1510832376, model.interval());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-06T08:40:18Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-26T17:02:55Z"), model.endTime());
        Assertions.assertEquals("iuxdadcdrysanif", model.timeZone());
        Assertions.assertEquals(1123798534, model.schedule().minutes().get(0));
        Assertions.assertEquals(1925731417, model.schedule().hours().get(0));
        Assertions.assertEquals(DaysOfWeek.THURSDAY, model.schedule().weekDays().get(0));
        Assertions.assertEquals(925862689, model.schedule().monthDays().get(0));
        Assertions.assertEquals(DayOfWeek.WEDNESDAY, model.schedule().monthlyOccurrences().get(0).day());
        Assertions.assertEquals(848484064, model.schedule().monthlyOccurrences().get(0).occurrence());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
