// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DayOfWeek;
import com.azure.resourcemanager.datafactory.models.DaysOfWeek;
import com.azure.resourcemanager.datafactory.models.RecurrenceFrequency;
import com.azure.resourcemanager.datafactory.models.RecurrenceSchedule;
import com.azure.resourcemanager.datafactory.models.RecurrenceScheduleOccurrence;
import com.azure.resourcemanager.datafactory.models.ScheduleTriggerRecurrence;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ScheduleTriggerRecurrenceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScheduleTriggerRecurrence model = BinaryData.fromString(
            "{\"frequency\":\"Month\",\"interval\":917730009,\"startTime\":\"2021-03-30T03:31:07Z\",\"endTime\":\"2021-04-02T08:19:10Z\",\"timeZone\":\"zmrwlsrjjaj\",\"schedule\":{\"minutes\":[2020562074],\"hours\":[35520275,1915462888],\"weekDays\":[\"Wednesday\"],\"monthDays\":[1497257373,182132397,79673613,1340181084],\"monthlyOccurrences\":[{\"day\":\"Saturday\",\"occurrence\":1604982715,\"\":{\"zdkrmpljzrzv\":\"databkytrztwwkvwpbd\"}},{\"day\":\"Tuesday\",\"occurrence\":1218396039,\"\":{\"jrlugigzwh\":\"datayg\"}},{\"day\":\"Wednesday\",\"occurrence\":31016802,\"\":{\"yzzk\":\"datal\"}}],\"\":{\"ntgi\":\"dataeydjagyks\",\"b\":\"dataaazfjbxhnah\",\"a\":\"datao\",\"gbyxpma\":\"datawidumilxi\"}},\"\":{\"viqwfctiyaf\":\"datanqcb\"}}")
            .toObject(ScheduleTriggerRecurrence.class);
        Assertions.assertEquals(RecurrenceFrequency.MONTH, model.frequency());
        Assertions.assertEquals(917730009, model.interval());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-30T03:31:07Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-02T08:19:10Z"), model.endTime());
        Assertions.assertEquals("zmrwlsrjjaj", model.timeZone());
        Assertions.assertEquals(2020562074, model.schedule().minutes().get(0));
        Assertions.assertEquals(35520275, model.schedule().hours().get(0));
        Assertions.assertEquals(DaysOfWeek.WEDNESDAY, model.schedule().weekDays().get(0));
        Assertions.assertEquals(1497257373, model.schedule().monthDays().get(0));
        Assertions.assertEquals(DayOfWeek.SATURDAY, model.schedule().monthlyOccurrences().get(0).day());
        Assertions.assertEquals(1604982715, model.schedule().monthlyOccurrences().get(0).occurrence());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScheduleTriggerRecurrence model = new ScheduleTriggerRecurrence().withFrequency(RecurrenceFrequency.MONTH)
            .withInterval(917730009).withStartTime(OffsetDateTime.parse("2021-03-30T03:31:07Z"))
            .withEndTime(OffsetDateTime.parse("2021-04-02T08:19:10Z")).withTimeZone("zmrwlsrjjaj")
            .withSchedule(new RecurrenceSchedule().withMinutes(Arrays.asList(2020562074))
                .withHours(Arrays.asList(35520275, 1915462888)).withWeekDays(Arrays.asList(DaysOfWeek.WEDNESDAY))
                .withMonthDays(Arrays.asList(1497257373, 182132397, 79673613, 1340181084))
                .withMonthlyOccurrences(Arrays.asList(
                    new RecurrenceScheduleOccurrence().withDay(DayOfWeek.SATURDAY).withOccurrence(1604982715)
                        .withAdditionalProperties(mapOf()),
                    new RecurrenceScheduleOccurrence().withDay(DayOfWeek.TUESDAY).withOccurrence(1218396039)
                        .withAdditionalProperties(mapOf()),
                    new RecurrenceScheduleOccurrence().withDay(DayOfWeek.WEDNESDAY).withOccurrence(31016802)
                        .withAdditionalProperties(mapOf())))
                .withAdditionalProperties(mapOf()))
            .withAdditionalProperties(mapOf());
        model = BinaryData.fromObject(model).toObject(ScheduleTriggerRecurrence.class);
        Assertions.assertEquals(RecurrenceFrequency.MONTH, model.frequency());
        Assertions.assertEquals(917730009, model.interval());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-30T03:31:07Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-02T08:19:10Z"), model.endTime());
        Assertions.assertEquals("zmrwlsrjjaj", model.timeZone());
        Assertions.assertEquals(2020562074, model.schedule().minutes().get(0));
        Assertions.assertEquals(35520275, model.schedule().hours().get(0));
        Assertions.assertEquals(DaysOfWeek.WEDNESDAY, model.schedule().weekDays().get(0));
        Assertions.assertEquals(1497257373, model.schedule().monthDays().get(0));
        Assertions.assertEquals(DayOfWeek.SATURDAY, model.schedule().monthlyOccurrences().get(0).day());
        Assertions.assertEquals(1604982715, model.schedule().monthlyOccurrences().get(0).occurrence());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
