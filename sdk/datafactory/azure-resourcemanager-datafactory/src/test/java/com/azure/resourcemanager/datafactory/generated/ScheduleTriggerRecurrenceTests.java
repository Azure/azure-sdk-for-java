// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DayOfWeek;
import com.azure.resourcemanager.datafactory.models.DaysOfWeek;
import com.azure.resourcemanager.datafactory.models.RecurrenceFrequency;
import com.azure.resourcemanager.datafactory.models.RecurrenceSchedule;
import com.azure.resourcemanager.datafactory.models.RecurrenceScheduleOccurrence;
import com.azure.resourcemanager.datafactory.models.ScheduleTriggerRecurrence;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ScheduleTriggerRecurrenceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScheduleTriggerRecurrence model = BinaryData.fromString(
            "{\"frequency\":\"Minute\",\"interval\":1468937933,\"startTime\":\"2021-08-02T13:39:35Z\",\"endTime\":\"2021-02-16T06:48:38Z\",\"timeZone\":\"dxuzoxmajpxb\",\"schedule\":{\"minutes\":[711985239],\"hours\":[1240812360,1065282334,987445485,1494770482],\"weekDays\":[\"Monday\",\"Monday\",\"Sunday\"],\"monthDays\":[1235095597],\"monthlyOccurrences\":[{\"day\":\"Wednesday\",\"occurrence\":727069286,\"\":{\"lri\":\"dataivqaqzttog\"}}],\"\":{\"ql\":\"dataiqucolpos\",\"jpalnzrjqlqh\":\"datalwkj\",\"xhawsnqktbgu\":\"datayneyoxj\",\"tcupo\":\"datafcr\"}},\"\":{\"qkufqjmylrtnzyos\":\"datargcl\",\"w\":\"datavkqezeeeuligu\",\"cvwzywxzxrohtqcw\":\"datafk\",\"aiskecmc\":\"datadspegxd\"}}")
            .toObject(ScheduleTriggerRecurrence.class);
        Assertions.assertEquals(RecurrenceFrequency.MINUTE, model.frequency());
        Assertions.assertEquals(1468937933, model.interval());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-02T13:39:35Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-16T06:48:38Z"), model.endTime());
        Assertions.assertEquals("dxuzoxmajpxb", model.timeZone());
        Assertions.assertEquals(711985239, model.schedule().minutes().get(0));
        Assertions.assertEquals(1240812360, model.schedule().hours().get(0));
        Assertions.assertEquals(DaysOfWeek.MONDAY, model.schedule().weekDays().get(0));
        Assertions.assertEquals(1235095597, model.schedule().monthDays().get(0));
        Assertions.assertEquals(DayOfWeek.WEDNESDAY, model.schedule().monthlyOccurrences().get(0).day());
        Assertions.assertEquals(727069286, model.schedule().monthlyOccurrences().get(0).occurrence());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScheduleTriggerRecurrence model = new ScheduleTriggerRecurrence().withFrequency(RecurrenceFrequency.MINUTE)
            .withInterval(1468937933)
            .withStartTime(OffsetDateTime.parse("2021-08-02T13:39:35Z"))
            .withEndTime(OffsetDateTime.parse("2021-02-16T06:48:38Z"))
            .withTimeZone("dxuzoxmajpxb")
            .withSchedule(new RecurrenceSchedule().withMinutes(Arrays.asList(711985239))
                .withHours(Arrays.asList(1240812360, 1065282334, 987445485, 1494770482))
                .withWeekDays(Arrays.asList(DaysOfWeek.MONDAY, DaysOfWeek.MONDAY, DaysOfWeek.SUNDAY))
                .withMonthDays(Arrays.asList(1235095597))
                .withMonthlyOccurrences(Arrays.asList(new RecurrenceScheduleOccurrence().withDay(DayOfWeek.WEDNESDAY)
                    .withOccurrence(727069286)
                    .withAdditionalProperties(mapOf())))
                .withAdditionalProperties(mapOf()))
            .withAdditionalProperties(mapOf());
        model = BinaryData.fromObject(model).toObject(ScheduleTriggerRecurrence.class);
        Assertions.assertEquals(RecurrenceFrequency.MINUTE, model.frequency());
        Assertions.assertEquals(1468937933, model.interval());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-02T13:39:35Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-16T06:48:38Z"), model.endTime());
        Assertions.assertEquals("dxuzoxmajpxb", model.timeZone());
        Assertions.assertEquals(711985239, model.schedule().minutes().get(0));
        Assertions.assertEquals(1240812360, model.schedule().hours().get(0));
        Assertions.assertEquals(DaysOfWeek.MONDAY, model.schedule().weekDays().get(0));
        Assertions.assertEquals(1235095597, model.schedule().monthDays().get(0));
        Assertions.assertEquals(DayOfWeek.WEDNESDAY, model.schedule().monthlyOccurrences().get(0).day());
        Assertions.assertEquals(727069286, model.schedule().monthlyOccurrences().get(0).occurrence());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
