// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DayOfWeek;
import com.azure.resourcemanager.datafactory.models.DaysOfWeek;
import com.azure.resourcemanager.datafactory.models.RecurrenceFrequency;
import com.azure.resourcemanager.datafactory.models.RecurrenceSchedule;
import com.azure.resourcemanager.datafactory.models.RecurrenceScheduleOccurrence;
import com.azure.resourcemanager.datafactory.models.ScheduleTriggerRecurrence;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ScheduleTriggerRecurrenceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScheduleTriggerRecurrence model = BinaryData.fromString(
            "{\"frequency\":\"Hour\",\"interval\":565444371,\"startTime\":\"2021-04-16T17:13:44Z\",\"endTime\":\"2021-07-11T08:54:52Z\",\"timeZone\":\"xnopdeqqf\",\"schedule\":{\"minutes\":[992003430,1672235517,1532557735,1318273783],\"hours\":[1522713628],\"weekDays\":[\"Tuesday\",\"Tuesday\"],\"monthDays\":[1460273823,164048462],\"monthlyOccurrences\":[{\"day\":\"Saturday\",\"occurrence\":2147336524,\"\":{\"jkwspn\":\"dataamx\",\"djeegllcyk\":\"databb\",\"ukfmkq\":\"datahymd\",\"jyxhwvnyupszchq\":\"datakzvxknygimohrll\"}}],\"\":{\"nxbl\":\"dataddlazvs\"}},\"\":{\"oxehynur\":\"databymgfwdxukm\"}}")
            .toObject(ScheduleTriggerRecurrence.class);
        Assertions.assertEquals(RecurrenceFrequency.HOUR, model.frequency());
        Assertions.assertEquals(565444371, model.interval());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-16T17:13:44Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-11T08:54:52Z"), model.endTime());
        Assertions.assertEquals("xnopdeqqf", model.timeZone());
        Assertions.assertEquals(992003430, model.schedule().minutes().get(0));
        Assertions.assertEquals(1522713628, model.schedule().hours().get(0));
        Assertions.assertEquals(DaysOfWeek.TUESDAY, model.schedule().weekDays().get(0));
        Assertions.assertEquals(1460273823, model.schedule().monthDays().get(0));
        Assertions.assertEquals(DayOfWeek.SATURDAY, model.schedule().monthlyOccurrences().get(0).day());
        Assertions.assertEquals(2147336524, model.schedule().monthlyOccurrences().get(0).occurrence());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScheduleTriggerRecurrence model
            = new ScheduleTriggerRecurrence().withFrequency(RecurrenceFrequency.HOUR)
                .withInterval(565444371)
                .withStartTime(OffsetDateTime.parse("2021-04-16T17:13:44Z"))
                .withEndTime(OffsetDateTime.parse("2021-07-11T08:54:52Z"))
                .withTimeZone("xnopdeqqf")
                .withSchedule(new RecurrenceSchedule()
                    .withMinutes(Arrays.asList(992003430, 1672235517, 1532557735, 1318273783))
                    .withHours(Arrays.asList(1522713628))
                    .withWeekDays(Arrays.asList(DaysOfWeek.TUESDAY, DaysOfWeek.TUESDAY))
                    .withMonthDays(Arrays.asList(1460273823, 164048462))
                    .withMonthlyOccurrences(Arrays.asList(new RecurrenceScheduleOccurrence().withDay(DayOfWeek.SATURDAY)
                        .withOccurrence(2147336524)
                        .withAdditionalProperties(mapOf())))
                    .withAdditionalProperties(mapOf()))
                .withAdditionalProperties(mapOf());
        model = BinaryData.fromObject(model).toObject(ScheduleTriggerRecurrence.class);
        Assertions.assertEquals(RecurrenceFrequency.HOUR, model.frequency());
        Assertions.assertEquals(565444371, model.interval());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-16T17:13:44Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-11T08:54:52Z"), model.endTime());
        Assertions.assertEquals("xnopdeqqf", model.timeZone());
        Assertions.assertEquals(992003430, model.schedule().minutes().get(0));
        Assertions.assertEquals(1522713628, model.schedule().hours().get(0));
        Assertions.assertEquals(DaysOfWeek.TUESDAY, model.schedule().weekDays().get(0));
        Assertions.assertEquals(1460273823, model.schedule().monthDays().get(0));
        Assertions.assertEquals(DayOfWeek.SATURDAY, model.schedule().monthlyOccurrences().get(0).day());
        Assertions.assertEquals(2147336524, model.schedule().monthlyOccurrences().get(0).occurrence());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
