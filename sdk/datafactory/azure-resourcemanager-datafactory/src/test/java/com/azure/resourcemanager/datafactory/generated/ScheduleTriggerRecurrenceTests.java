// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DayOfWeek;
import com.azure.resourcemanager.datafactory.models.DaysOfWeek;
import com.azure.resourcemanager.datafactory.models.RecurrenceFrequency;
import com.azure.resourcemanager.datafactory.models.RecurrenceSchedule;
import com.azure.resourcemanager.datafactory.models.RecurrenceScheduleOccurrence;
import com.azure.resourcemanager.datafactory.models.ScheduleTriggerRecurrence;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ScheduleTriggerRecurrenceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScheduleTriggerRecurrence model = BinaryData.fromString(
            "{\"frequency\":\"Day\",\"interval\":697389679,\"startTime\":\"2021-06-28T09:45:44Z\",\"endTime\":\"2021-03-10T03:08:50Z\",\"timeZone\":\"jvikpgzkfjqo\",\"schedule\":{\"minutes\":[1987241147,1286210350,71551699,1632306199],\"hours\":[154490101],\"weekDays\":[\"Wednesday\",\"Friday\"],\"monthDays\":[1440767604,2068484249],\"monthlyOccurrences\":[{\"day\":\"Friday\",\"occurrence\":1634393493,\"\":{\"rwqrfejznz\":\"datatwzgbuh\"}}],\"\":{\"vsjiojvetlcqaa\":\"dataufs\",\"cbdkqrywv\":\"datauwxehozazb\"}},\"\":{\"gnhwhvgowkakdj\":\"datayccd\"}}")
            .toObject(ScheduleTriggerRecurrence.class);
        Assertions.assertEquals(RecurrenceFrequency.DAY, model.frequency());
        Assertions.assertEquals(697389679, model.interval());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-28T09:45:44Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-10T03:08:50Z"), model.endTime());
        Assertions.assertEquals("jvikpgzkfjqo", model.timeZone());
        Assertions.assertEquals(1987241147, model.schedule().minutes().get(0));
        Assertions.assertEquals(154490101, model.schedule().hours().get(0));
        Assertions.assertEquals(DaysOfWeek.WEDNESDAY, model.schedule().weekDays().get(0));
        Assertions.assertEquals(1440767604, model.schedule().monthDays().get(0));
        Assertions.assertEquals(DayOfWeek.FRIDAY, model.schedule().monthlyOccurrences().get(0).day());
        Assertions.assertEquals(1634393493, model.schedule().monthlyOccurrences().get(0).occurrence());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScheduleTriggerRecurrence model
            = new ScheduleTriggerRecurrence().withFrequency(RecurrenceFrequency.DAY)
                .withInterval(697389679)
                .withStartTime(OffsetDateTime.parse("2021-06-28T09:45:44Z"))
                .withEndTime(OffsetDateTime.parse("2021-03-10T03:08:50Z"))
                .withTimeZone("jvikpgzkfjqo")
                .withSchedule(new RecurrenceSchedule()
                    .withMinutes(Arrays.asList(1987241147, 1286210350, 71551699, 1632306199))
                    .withHours(Arrays.asList(154490101))
                    .withWeekDays(Arrays.asList(DaysOfWeek.WEDNESDAY, DaysOfWeek.FRIDAY))
                    .withMonthDays(Arrays.asList(1440767604, 2068484249))
                    .withMonthlyOccurrences(Arrays.asList(new RecurrenceScheduleOccurrence().withDay(DayOfWeek.FRIDAY)
                        .withOccurrence(1634393493)
                        .withAdditionalProperties(mapOf())))
                    .withAdditionalProperties(mapOf()))
                .withAdditionalProperties(mapOf());
        model = BinaryData.fromObject(model).toObject(ScheduleTriggerRecurrence.class);
        Assertions.assertEquals(RecurrenceFrequency.DAY, model.frequency());
        Assertions.assertEquals(697389679, model.interval());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-28T09:45:44Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-10T03:08:50Z"), model.endTime());
        Assertions.assertEquals("jvikpgzkfjqo", model.timeZone());
        Assertions.assertEquals(1987241147, model.schedule().minutes().get(0));
        Assertions.assertEquals(154490101, model.schedule().hours().get(0));
        Assertions.assertEquals(DaysOfWeek.WEDNESDAY, model.schedule().weekDays().get(0));
        Assertions.assertEquals(1440767604, model.schedule().monthDays().get(0));
        Assertions.assertEquals(DayOfWeek.FRIDAY, model.schedule().monthlyOccurrences().get(0).day());
        Assertions.assertEquals(1634393493, model.schedule().monthlyOccurrences().get(0).occurrence());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
