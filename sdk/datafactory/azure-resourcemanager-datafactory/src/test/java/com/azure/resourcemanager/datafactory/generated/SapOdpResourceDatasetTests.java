// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.SapOdpResourceDataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SapOdpResourceDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SapOdpResourceDataset model = BinaryData.fromString(
            "{\"type\":\"SapOdpResource\",\"typeProperties\":{\"context\":\"datapuz\",\"objectName\":\"datadegefxlieggoto\"},\"description\":\"hssfnwh\",\"structure\":\"dataah\",\"schema\":\"datackn\",\"linkedServiceName\":{\"referenceName\":\"mkcu\",\"parameters\":{\"dvhzfkdn\":\"datadgwuzron\",\"k\":\"dataysodcikgx\",\"w\":\"datazfzdjekeb\"}},\"parameters\":{\"gcjf\":{\"type\":\"Bool\",\"defaultValue\":\"datawyfixi\"},\"kakrxifqnffo\":{\"type\":\"SecureString\",\"defaultValue\":\"dataulp\"},\"xcmmhipbvskcitly\":{\"type\":\"Object\",\"defaultValue\":\"dataqtzngxbsalewg\"},\"d\":{\"type\":\"String\",\"defaultValue\":\"datafsaangfgbmcvmh\"}},\"annotations\":[\"datauaj\",\"datalnac\",\"datadnxqeonm\"],\"folder\":{\"name\":\"jaojpzngdrzige\"},\"\":{\"ohheuy\":\"dataadsqyuddkhwqd\",\"gdeipnfizejwl\":\"dataunxmyevy\",\"jodapqok\":\"dataiacndjzwh\",\"pfapmqnmelyk\":\"datadyncradxsewbe\"}}")
            .toObject(SapOdpResourceDataset.class);
        Assertions.assertEquals("hssfnwh", model.description());
        Assertions.assertEquals("mkcu", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("gcjf").type());
        Assertions.assertEquals("jaojpzngdrzige", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SapOdpResourceDataset model = new SapOdpResourceDataset().withDescription("hssfnwh")
            .withStructure("dataah")
            .withSchema("datackn")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("mkcu")
                .withParameters(mapOf("dvhzfkdn", "datadgwuzron", "k", "dataysodcikgx", "w", "datazfzdjekeb")))
            .withParameters(mapOf("gcjf",
                new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("datawyfixi"),
                "kakrxifqnffo",
                new ParameterSpecification().withType(ParameterType.SECURE_STRING).withDefaultValue("dataulp"),
                "xcmmhipbvskcitly",
                new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("dataqtzngxbsalewg"), "d",
                new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("datafsaangfgbmcvmh")))
            .withAnnotations(Arrays.asList("datauaj", "datalnac", "datadnxqeonm"))
            .withFolder(new DatasetFolder().withName("jaojpzngdrzige"))
            .withContext("datapuz")
            .withObjectName("datadegefxlieggoto");
        model = BinaryData.fromObject(model).toObject(SapOdpResourceDataset.class);
        Assertions.assertEquals("hssfnwh", model.description());
        Assertions.assertEquals("mkcu", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("gcjf").type());
        Assertions.assertEquals("jaojpzngdrzige", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
