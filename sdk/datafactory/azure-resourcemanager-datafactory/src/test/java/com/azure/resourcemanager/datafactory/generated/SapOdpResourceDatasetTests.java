// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.SapOdpResourceDataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SapOdpResourceDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SapOdpResourceDataset model =
            BinaryData
                .fromString(
                    "{\"type\":\"SapOdpResource\",\"typeProperties\":{\"context\":\"datadwrgavtfyzse\",\"objectName\":\"dataf\"},\"description\":\"ukryxpi\",\"structure\":\"dataapeakfdmcedl\",\"schema\":\"datalxkyoddoq\",\"linkedServiceName\":{\"referenceName\":\"a\",\"parameters\":{\"whqy\":\"datarki\",\"fqeqf\":\"datagqmndkrwwmurhv\",\"lwgebylpzjeldaqw\":\"datarnacki\"}},\"parameters\":{\"potnpkbvzpkod\":{\"type\":\"Array\",\"defaultValue\":\"datanijhwcbrds\"},\"dxuczl\":{\"type\":\"Float\",\"defaultValue\":\"datanqdjgsbtwgn\"},\"iiuv\":{\"type\":\"Int\",\"defaultValue\":\"dataqycznrir\"}},\"annotations\":[\"dataqkqwucqsdgb\"],\"folder\":{\"name\":\"tvmijccpk\"},\"\":{\"ihtnnlbhxjppcbqe\":\"dataamyvwprjm\",\"zayjwdu\":\"datafzfppvo\",\"prklatwiuujxsuj\":\"datajh\",\"pc\":\"datarwgxeegxbnjnczep\"}}")
                .toObject(SapOdpResourceDataset.class);
        Assertions.assertEquals("ukryxpi", model.description());
        Assertions.assertEquals("a", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("potnpkbvzpkod").type());
        Assertions.assertEquals("tvmijccpk", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SapOdpResourceDataset model =
            new SapOdpResourceDataset()
                .withDescription("ukryxpi")
                .withStructure("dataapeakfdmcedl")
                .withSchema("datalxkyoddoq")
                .withLinkedServiceName(
                    new LinkedServiceReference()
                        .withReferenceName("a")
                        .withParameters(
                            mapOf("whqy", "datarki", "fqeqf", "datagqmndkrwwmurhv", "lwgebylpzjeldaqw", "datarnacki")))
                .withParameters(
                    mapOf(
                        "potnpkbvzpkod",
                        new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("datanijhwcbrds"),
                        "dxuczl",
                        new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("datanqdjgsbtwgn"),
                        "iiuv",
                        new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("dataqycznrir")))
                .withAnnotations(Arrays.asList("dataqkqwucqsdgb"))
                .withFolder(new DatasetFolder().withName("tvmijccpk"))
                .withContext("datadwrgavtfyzse")
                .withObjectName("dataf");
        model = BinaryData.fromObject(model).toObject(SapOdpResourceDataset.class);
        Assertions.assertEquals("ukryxpi", model.description());
        Assertions.assertEquals("a", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.ARRAY, model.parameters().get("potnpkbvzpkod").type());
        Assertions.assertEquals("tvmijccpk", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
