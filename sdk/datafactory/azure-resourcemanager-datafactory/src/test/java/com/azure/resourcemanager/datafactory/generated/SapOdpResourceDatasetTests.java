// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import com.azure.resourcemanager.datafactory.models.SapOdpResourceDataset;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SapOdpResourceDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SapOdpResourceDataset model = BinaryData.fromString(
            "{\"type\":\"SapOdpResource\",\"typeProperties\":{\"context\":\"datauzimbwttmhlvr\",\"objectName\":\"datacyxrn\"},\"description\":\"kfajnpdwzjggkw\",\"structure\":\"datap\",\"schema\":\"dataziayfiqiidxcor\",\"linkedServiceName\":{\"referenceName\":\"vudyhgtrttcuayi\",\"parameters\":{\"zifb\":\"datankmm\",\"rtgqrqkk\":\"datagqexowq\",\"kuobpw\":\"datafy\",\"pnyjtu\":\"datainpgobothxiew\"}},\"parameters\":{\"uwh\":{\"type\":\"Object\",\"defaultValue\":\"dataextchslroldo\"},\"gkudsozodwjc\":{\"type\":\"Bool\",\"defaultValue\":\"dataifiozttcbiic\"},\"mz\":{\"type\":\"Float\",\"defaultValue\":\"datayxryqyc\"}},\"annotations\":[\"datafgdwzauz\",\"datadheadnyciwz\",\"datailykqadfgesv\"],\"folder\":{\"name\":\"a\"},\"\":{\"ovqmxqsxofx\":\"dataizmadjrsbgailj\",\"kgltsxooiobhieb\":\"datankiu\",\"tlsrvqzgaqsosrn\":\"datau\",\"npesw\":\"datalvgrghnhuoxrqhjn\"}}")
            .toObject(SapOdpResourceDataset.class);
        Assertions.assertEquals("kfajnpdwzjggkw", model.description());
        Assertions.assertEquals("vudyhgtrttcuayi", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.OBJECT, model.parameters().get("uwh").type());
        Assertions.assertEquals("a", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SapOdpResourceDataset model = new SapOdpResourceDataset().withDescription("kfajnpdwzjggkw")
            .withStructure("datap")
            .withSchema("dataziayfiqiidxcor")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("vudyhgtrttcuayi")
                .withParameters(mapOf("zifb", "datankmm", "rtgqrqkk", "datagqexowq", "kuobpw", "datafy", "pnyjtu",
                    "datainpgobothxiew")))
            .withParameters(mapOf("uwh",
                new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("dataextchslroldo"),
                "gkudsozodwjc",
                new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("dataifiozttcbiic"), "mz",
                new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("datayxryqyc")))
            .withAnnotations(Arrays.asList("datafgdwzauz", "datadheadnyciwz", "datailykqadfgesv"))
            .withFolder(new DatasetFolder().withName("a"))
            .withContext("datauzimbwttmhlvr")
            .withObjectName("datacyxrn");
        model = BinaryData.fromObject(model).toObject(SapOdpResourceDataset.class);
        Assertions.assertEquals("kfajnpdwzjggkw", model.description());
        Assertions.assertEquals("vudyhgtrttcuayi", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.OBJECT, model.parameters().get("uwh").type());
        Assertions.assertEquals("a", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
