// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetCompression;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.DatasetLocation;
import com.azure.resourcemanager.datafactory.models.JsonDataset;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class JsonDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        JsonDataset model = BinaryData.fromString(
            "{\"type\":\"Json\",\"typeProperties\":{\"location\":{\"type\":\"DatasetLocation\",\"folderPath\":\"datafbwih\",\"fileName\":\"datanx\",\"\":{\"pfzsclefyrl\":\"dataynuqqkotauratnic\",\"ggnbbuypwovvvsfl\":\"datatndqlmf\",\"xrlzhpziha\":\"dataevnoqayrehjuqwva\",\"fonfdbgm\":\"dataenqqzlxnqzu\"}},\"encodingName\":\"datawmjcwtewfhxw\",\"compression\":{\"type\":\"datakbrehzlrynjp\",\"level\":\"dataamkaepl\",\"\":{\"ieikmwlaoklfnis\":\"dataubowuywevtj\"}}},\"description\":\"gucbmt\",\"structure\":\"datadscnns\",\"schema\":\"datacyyuvtzrxzhclec\",\"linkedServiceName\":{\"referenceName\":\"wtzqzcloyhy\",\"parameters\":{\"yresgzsdtmwbyorj\":\"dataidhz\"}},\"parameters\":{\"fbqvumkxqj\":{\"type\":\"String\",\"defaultValue\":\"dataychakvy\"},\"t\":{\"type\":\"SecureString\",\"defaultValue\":\"dataepmaxfnzlpqmp\"}},\"annotations\":[\"datavulb\",\"datamrtuxyp\"],\"folder\":{\"name\":\"caeo\"},\"\":{\"hqmomfeco\":\"dataqdywjflobh\"}}")
            .toObject(JsonDataset.class);
        Assertions.assertEquals("gucbmt", model.description());
        Assertions.assertEquals("wtzqzcloyhy", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("fbqvumkxqj").type());
        Assertions.assertEquals("caeo", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        JsonDataset model
            = new JsonDataset().withDescription("gucbmt").withStructure("datadscnns").withSchema("datacyyuvtzrxzhclec")
                .withLinkedServiceName(new LinkedServiceReference().withReferenceName("wtzqzcloyhy")
                    .withParameters(mapOf("yresgzsdtmwbyorj", "dataidhz")))
                .withParameters(mapOf("fbqvumkxqj",
                    new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("dataychakvy"), "t",
                    new ParameterSpecification().withType(ParameterType.SECURE_STRING)
                        .withDefaultValue("dataepmaxfnzlpqmp")))
                .withAnnotations(Arrays.asList("datavulb", "datamrtuxyp"))
                .withFolder(new DatasetFolder().withName("caeo"))
                .withLocation(new DatasetLocation().withFolderPath("datafbwih").withFileName("datanx")
                    .withAdditionalProperties(mapOf("type", "DatasetLocation")))
                .withEncodingName("datawmjcwtewfhxw").withCompression(new DatasetCompression()
                    .withType("datakbrehzlrynjp").withLevel("dataamkaepl").withAdditionalProperties(mapOf()));
        model = BinaryData.fromObject(model).toObject(JsonDataset.class);
        Assertions.assertEquals("gucbmt", model.description());
        Assertions.assertEquals("wtzqzcloyhy", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("fbqvumkxqj").type());
        Assertions.assertEquals("caeo", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
