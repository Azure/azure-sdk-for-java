// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetCompression;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.DatasetLocation;
import com.azure.resourcemanager.datafactory.models.JsonDataset;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class JsonDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        JsonDataset model = BinaryData.fromString(
            "{\"type\":\"xcn\",\"typeProperties\":{\"location\":{\"type\":\"bf\",\"folderPath\":\"datalo\",\"fileName\":\"dataekd\",\"\":{\"jmnsvujnjk\":\"datauftrs\",\"se\":\"datavolefcj\",\"otfbjampqoclann\":\"datakdb\",\"zstrktgvpatrg\":\"dataxynlsuqb\"}},\"encodingName\":\"dataktfinfhoksmmculw\",\"compression\":{\"type\":\"dataicruo\",\"level\":\"datarjflsga\",\"\":{\"mcdsgxcelujisw\":\"datatqpqsdoctpzpujzf\",\"nxhfwlfxzfwu\":\"datalu\",\"psjdmng\":\"dataeupcknecexkgrv\",\"pdz\":\"datayt\"}}},\"description\":\"woxcgzbejqfb\",\"structure\":\"dataopfjx\",\"schema\":\"datadrpazqjkrfmbw\",\"linkedServiceName\":{\"referenceName\":\"tfcuuugtj\",\"parameters\":{\"mecjjkmqenhaidzr\":\"datagayiawohfmhnn\",\"lo\":\"datavs\",\"pijpkhc\":\"dataovslvivqsuvwtenb\",\"xukuicjuftekio\":\"dataoa\"}},\"parameters\":{\"zubfjzabbwz\":{\"type\":\"Bool\",\"defaultValue\":\"dataewfhvpxjh\"}},\"annotations\":[\"datauaixcdckix\",\"dataps\",\"dataigavk\",\"datavyxzer\"],\"folder\":{\"name\":\"kpzjbyetjxryopt\"},\"\":{\"bpemnrrabovr\":\"datatwhlbecgih\",\"pskpeswyhhmif\":\"datawxywpjhspboxhif\",\"y\":\"datauajxwwvcmmpeg\"}}")
            .toObject(JsonDataset.class);
        Assertions.assertEquals("woxcgzbejqfb", model.description());
        Assertions.assertEquals("tfcuuugtj", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("zubfjzabbwz").type());
        Assertions.assertEquals("kpzjbyetjxryopt", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        JsonDataset model = new JsonDataset().withDescription("woxcgzbejqfb")
            .withStructure("dataopfjx")
            .withSchema("datadrpazqjkrfmbw")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("tfcuuugtj")
                .withParameters(mapOf("mecjjkmqenhaidzr", "datagayiawohfmhnn", "lo", "datavs", "pijpkhc",
                    "dataovslvivqsuvwtenb", "xukuicjuftekio", "dataoa")))
            .withParameters(mapOf("zubfjzabbwz",
                new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("dataewfhvpxjh")))
            .withAnnotations(Arrays.asList("datauaixcdckix", "dataps", "dataigavk", "datavyxzer"))
            .withFolder(new DatasetFolder().withName("kpzjbyetjxryopt"))
            .withLocation(new DatasetLocation().withFolderPath("datalo")
                .withFileName("dataekd")
                .withAdditionalProperties(mapOf("type", "bf")))
            .withEncodingName("dataktfinfhoksmmculw")
            .withCompression(new DatasetCompression().withType("dataicruo")
                .withLevel("datarjflsga")
                .withAdditionalProperties(mapOf()));
        model = BinaryData.fromObject(model).toObject(JsonDataset.class);
        Assertions.assertEquals("woxcgzbejqfb", model.description());
        Assertions.assertEquals("tfcuuugtj", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("zubfjzabbwz").type());
        Assertions.assertEquals("kpzjbyetjxryopt", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
