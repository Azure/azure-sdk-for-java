// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetCompression;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.DatasetLocation;
import com.azure.resourcemanager.datafactory.models.JsonDataset;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class JsonDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        JsonDataset model = BinaryData.fromString(
            "{\"type\":\"Json\",\"typeProperties\":{\"location\":{\"type\":\"DatasetLocation\",\"folderPath\":\"dataf\",\"fileName\":\"datavb\",\"\":{\"oorssatfy\":\"datawhgkgsoa\",\"as\":\"dataipufdmxuqbdq\",\"ixhg\":\"datatuxvzfqayopbt\"}},\"encodingName\":\"datahx\",\"compression\":{\"type\":\"datadztgsqja\",\"level\":\"datamar\",\"\":{\"motpuwnnoh\":\"dataibpgbrhbjdqknhq\",\"wyiulaynosu\":\"datamzngocfrjuy\",\"ucumlddauqml\":\"datakfhaxttpfsmwgsgh\",\"rigrjdljlkq\":\"datafeothxu\"}}},\"description\":\"krbzkuas\",\"structure\":\"dataxk\",\"schema\":\"datar\",\"linkedServiceName\":{\"referenceName\":\"ulhgltoiz\",\"parameters\":{\"gafxczvf\":\"datascksgfyyskye\",\"ety\":\"datackwrtw\",\"lhpdhwynctaczcnj\":\"dataeszr\"}},\"parameters\":{\"tiklsm\":{\"type\":\"SecureString\",\"defaultValue\":\"datanvjxitzovnk\"},\"bgbudav\":{\"type\":\"Object\",\"defaultValue\":\"dataqlcoqksyiibhyx\"},\"ojvlirknucosaw\":{\"type\":\"SecureString\",\"defaultValue\":\"datarbccqcdht\"},\"yaixihzqj\":{\"type\":\"Float\",\"defaultValue\":\"datanagzlg\"}},\"annotations\":[\"datamuydqfttk\",\"datacybdueurgm\",\"datadcpks\"],\"folder\":{\"name\":\"jermhzic\"},\"\":{\"hyaaknyukibxiglh\":\"datad\",\"ejp\":\"datahzwxq\",\"xkbylhyyxgffklv\":\"datailhvtozyagjj\",\"wtrdgs\":\"dataz\"}}")
            .toObject(JsonDataset.class);
        Assertions.assertEquals("krbzkuas", model.description());
        Assertions.assertEquals("ulhgltoiz", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.SECURE_STRING, model.parameters().get("tiklsm").type());
        Assertions.assertEquals("jermhzic", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        JsonDataset model
            = new JsonDataset().withDescription("krbzkuas")
                .withStructure("dataxk")
                .withSchema("datar")
                .withLinkedServiceName(new LinkedServiceReference().withReferenceName("ulhgltoiz")
                    .withParameters(
                        mapOf("gafxczvf", "datascksgfyyskye", "ety", "datackwrtw", "lhpdhwynctaczcnj", "dataeszr")))
                .withParameters(mapOf("tiklsm",
                    new ParameterSpecification().withType(ParameterType.SECURE_STRING)
                        .withDefaultValue("datanvjxitzovnk"),
                    "bgbudav",
                    new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("dataqlcoqksyiibhyx"),
                    "ojvlirknucosaw",
                    new ParameterSpecification().withType(ParameterType.SECURE_STRING)
                        .withDefaultValue("datarbccqcdht"),
                    "yaixihzqj",
                    new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("datanagzlg")))
                .withAnnotations(Arrays.asList("datamuydqfttk", "datacybdueurgm", "datadcpks"))
                .withFolder(new DatasetFolder().withName("jermhzic"))
                .withLocation(new DatasetLocation().withFolderPath("dataf")
                    .withFileName("datavb")
                    .withAdditionalProperties(mapOf("type", "DatasetLocation")))
                .withEncodingName("datahx")
                .withCompression(new DatasetCompression().withType("datadztgsqja")
                    .withLevel("datamar")
                    .withAdditionalProperties(mapOf()));
        model = BinaryData.fromObject(model).toObject(JsonDataset.class);
        Assertions.assertEquals("krbzkuas", model.description());
        Assertions.assertEquals("ulhgltoiz", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.SECURE_STRING, model.parameters().get("tiklsm").type());
        Assertions.assertEquals("jermhzic", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
