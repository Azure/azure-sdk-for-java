// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetCompression;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.DatasetLocation;
import com.azure.resourcemanager.datafactory.models.JsonDataset;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class JsonDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        JsonDataset model =
            BinaryData
                .fromString(
                    "{\"type\":\"Json\",\"typeProperties\":{\"location\":{\"type\":\"DatasetLocation\",\"folderPath\":\"datax\",\"fileName\":\"datavynuqqkotauratn\",\"\":{\"tndqlmf\":\"datapfzsclefyrl\",\"evnoqayrehjuqwva\":\"dataggnbbuypwovvvsfl\",\"enqqzlxnqzu\":\"dataxrlzhpziha\"}},\"encodingName\":\"dataonfdbgmkfwmjc\",\"compression\":{\"type\":\"dataewfhxwyrkbre\",\"level\":\"datalrynjpchamk\",\"\":{\"jub\":\"datalr\",\"vtjr\":\"datawuyw\"}}},\"description\":\"ikmwlaok\",\"structure\":\"datani\",\"schema\":\"dataxgucbmtredscnn\",\"linkedServiceName\":{\"referenceName\":\"tjcyyuv\",\"parameters\":{\"wtzqzcloyhy\":\"dataxzhclec\"}},\"parameters\":{\"mwb\":{\"type\":\"Int\",\"defaultValue\":\"datahzgyresgzsd\"}},\"annotations\":[\"datajplbchych\"],\"folder\":{\"name\":\"yrfbqvumkxq\"},\"\":{\"xfnzlpq\":\"datauepm\",\"xef\":\"datapf\",\"rtux\":\"dataulbl\",\"ifq\":\"dataprhfcaeo\"}}")
                .toObject(JsonDataset.class);
        Assertions.assertEquals("ikmwlaok", model.description());
        Assertions.assertEquals("tjcyyuv", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("mwb").type());
        Assertions.assertEquals("yrfbqvumkxq", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        JsonDataset model =
            new JsonDataset()
                .withDescription("ikmwlaok")
                .withStructure("datani")
                .withSchema("dataxgucbmtredscnn")
                .withLinkedServiceName(
                    new LinkedServiceReference()
                        .withReferenceName("tjcyyuv")
                        .withParameters(mapOf("wtzqzcloyhy", "dataxzhclec")))
                .withParameters(
                    mapOf(
                        "mwb",
                        new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("datahzgyresgzsd")))
                .withAnnotations(Arrays.asList("datajplbchych"))
                .withFolder(new DatasetFolder().withName("yrfbqvumkxq"))
                .withLocation(
                    new DatasetLocation()
                        .withFolderPath("datax")
                        .withFileName("datavynuqqkotauratn")
                        .withAdditionalProperties(mapOf("type", "DatasetLocation")))
                .withEncodingName("dataonfdbgmkfwmjc")
                .withCompression(
                    new DatasetCompression()
                        .withType("dataewfhxwyrkbre")
                        .withLevel("datalrynjpchamk")
                        .withAdditionalProperties(mapOf()));
        model = BinaryData.fromObject(model).toObject(JsonDataset.class);
        Assertions.assertEquals("ikmwlaok", model.description());
        Assertions.assertEquals("tjcyyuv", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("mwb").type());
        Assertions.assertEquals("yrfbqvumkxq", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
