// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.AzureFunctionActivity;
import com.azure.resourcemanager.datafactory.models.AzureFunctionActivityMethod;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureFunctionActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureFunctionActivity model = BinaryData.fromString(
            "{\"type\":\"AzureFunctionActivity\",\"typeProperties\":{\"method\":\"POST\",\"functionName\":\"datanyehh\",\"headers\":{\"ka\":\"datajrmxazkqiqzaea\",\"xivhozhr\":\"datapokf\"},\"body\":\"datavfljxljgtirnpazr\"},\"linkedServiceName\":{\"referenceName\":\"hyzufkzqtv\",\"parameters\":{\"ahdkeayu\":\"datayzihuupeflkwbvxn\"}},\"policy\":{\"timeout\":\"datavpnemydntupbrv\",\"retry\":\"datatblxa\",\"retryIntervalInSeconds\":1508140667,\"secureInput\":true,\"secureOutput\":true,\"\":{\"lsnkwullvukwy\":\"dataxuaidrbz\",\"andjjqhinsv\":\"dataosjz\",\"jrotqdi\":\"dataou\",\"jqkg\":\"dataxffiwrfocbetl\"}},\"name\":\"rvjawaxv\",\"description\":\"jlcj\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"e\",\"dependencyConditions\":[\"Completed\"],\"\":{\"zbjieeivdrqtlcx\":\"datac\"}},{\"activity\":\"ogykrmf\",\"dependencyConditions\":[\"Succeeded\",\"Succeeded\",\"Completed\"],\"\":{\"mgberxnlj\":\"datavgroewhsnpcwy\"}},{\"activity\":\"vujsnzuebyznkdb\",\"dependencyConditions\":[\"Completed\"],\"\":{\"gksfjqfeeqh\":\"datamnztzhqs\",\"rbdtlikba\":\"datacwrrne\"}},{\"activity\":\"mrqponu\",\"dependencyConditions\":[\"Completed\",\"Succeeded\",\"Failed\",\"Succeeded\"],\"\":{\"vvggvnqpar\":\"dataxps\"}}],\"userProperties\":[{\"name\":\"gdkovytjsrboqamq\",\"value\":\"dataqvukjtcdppdmm\"},{\"name\":\"dubccclt\",\"value\":\"datagx\"}],\"\":{\"kvydvdj\":\"dataiix\",\"yswlmxepygkfuwgk\":\"datagdharlrfay\"}}")
            .toObject(AzureFunctionActivity.class);
        Assertions.assertEquals("rvjawaxv", model.name());
        Assertions.assertEquals("jlcj", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("e", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("gdkovytjsrboqamq", model.userProperties().get(0).name());
        Assertions.assertEquals("hyzufkzqtv", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1508140667, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals(AzureFunctionActivityMethod.POST, model.method());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureFunctionActivity model = new AzureFunctionActivity().withName("rvjawaxv")
            .withDescription("jlcj")
            .withState(ActivityState.INACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
            .withDependsOn(Arrays.asList(
                new ActivityDependency().withActivity("e")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("ogykrmf")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SUCCEEDED,
                        DependencyCondition.SUCCEEDED, DependencyCondition.COMPLETED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("vujsnzuebyznkdb")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("mrqponu")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.COMPLETED,
                        DependencyCondition.SUCCEEDED, DependencyCondition.FAILED, DependencyCondition.SUCCEEDED))
                    .withAdditionalProperties(mapOf())))
            .withUserProperties(
                Arrays.asList(new UserProperty().withName("gdkovytjsrboqamq").withValue("dataqvukjtcdppdmm"),
                    new UserProperty().withName("dubccclt").withValue("datagx")))
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("hyzufkzqtv")
                .withParameters(mapOf("ahdkeayu", "datayzihuupeflkwbvxn")))
            .withPolicy(new ActivityPolicy().withTimeout("datavpnemydntupbrv")
                .withRetry("datatblxa")
                .withRetryIntervalInSeconds(1508140667)
                .withSecureInput(true)
                .withSecureOutput(true)
                .withAdditionalProperties(mapOf()))
            .withMethod(AzureFunctionActivityMethod.POST)
            .withFunctionName("datanyehh")
            .withHeaders(mapOf("ka", "datajrmxazkqiqzaea", "xivhozhr", "datapokf"))
            .withBody("datavfljxljgtirnpazr");
        model = BinaryData.fromObject(model).toObject(AzureFunctionActivity.class);
        Assertions.assertEquals("rvjawaxv", model.name());
        Assertions.assertEquals("jlcj", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("e", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("gdkovytjsrboqamq", model.userProperties().get(0).name());
        Assertions.assertEquals("hyzufkzqtv", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1508140667, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals(AzureFunctionActivityMethod.POST, model.method());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
