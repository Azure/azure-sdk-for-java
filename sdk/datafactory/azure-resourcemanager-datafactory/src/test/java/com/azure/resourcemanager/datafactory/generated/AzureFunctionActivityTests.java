// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.AzureFunctionActivity;
import com.azure.resourcemanager.datafactory.models.AzureFunctionActivityMethod;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureFunctionActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureFunctionActivity model = BinaryData.fromString(
            "{\"type\":\"AzureFunctionActivity\",\"typeProperties\":{\"method\":\"DELETE\",\"functionName\":\"datailbiwacxldho\",\"headers\":{\"shtlqhik\":\"datapwxhccvtbgznpxax\",\"tmxwmjaevwid\":\"datafzdlhpzobhnuzia\"},\"body\":\"datapfku\"},\"linkedServiceName\":{\"referenceName\":\"wdir\",\"parameters\":{\"h\":\"dataraqyavdykxgcfh\"}},\"policy\":{\"timeout\":\"datayhzys\",\"retry\":\"dataqfbycra\",\"retryIntervalInSeconds\":1509141916,\"secureInput\":true,\"secureOutput\":true,\"\":{\"pxhdefyditb\":\"datahjbfoemmjtstlgdv\",\"ihl\":\"datamvavjyqhcowou\",\"gjb\":\"datanyv\"}},\"name\":\"hjpsgprlmpz\",\"description\":\"iakyflryhvph\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"zbpfwlxx\",\"dependencyConditions\":[\"Skipped\",\"Succeeded\",\"Completed\"],\"\":{\"gcazyni\":\"datatmlhrzi\",\"hmxmjm\":\"datakkengowcut\",\"kqdqn\":\"dataouichoiimennxvqj\"}},{\"activity\":\"efszuu\",\"dependencyConditions\":[\"Skipped\",\"Completed\",\"Skipped\",\"Skipped\"],\"\":{\"yxqfkrvm\":\"dataheqllrpc\",\"tlsipedgtupkm\":\"datadqhagehohqe\"}},{\"activity\":\"xeubngwidgxypdo\",\"dependencyConditions\":[\"Failed\",\"Failed\",\"Completed\",\"Completed\"],\"\":{\"ybl\":\"datavyhmi\"}}],\"userProperties\":[{\"name\":\"k\",\"value\":\"datatvoprgcsjycorxib\"},{\"name\":\"sfxkudic\",\"value\":\"datafoxenmuevq\"},{\"name\":\"ssclgolbpw\",\"value\":\"datagzdionlgnes\"}],\"\":{\"zskvp\":\"datanhfd\",\"hlbxrqbi\":\"dataqxnd\",\"zkehfkpoczxm\":\"datajhaafvxxi\"}}")
            .toObject(AzureFunctionActivity.class);
        Assertions.assertEquals("hjpsgprlmpz", model.name());
        Assertions.assertEquals("iakyflryhvph", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.onInactiveMarkAs());
        Assertions.assertEquals("zbpfwlxx", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("k", model.userProperties().get(0).name());
        Assertions.assertEquals("wdir", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1509141916, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals(AzureFunctionActivityMethod.DELETE, model.method());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureFunctionActivity model = new AzureFunctionActivity().withName("hjpsgprlmpz")
            .withDescription("iakyflryhvph")
            .withState(ActivityState.ACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SUCCEEDED)
            .withDependsOn(Arrays.asList(
                new ActivityDependency().withActivity("zbpfwlxx")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.SUCCEEDED,
                        DependencyCondition.COMPLETED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("efszuu")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED, DependencyCondition.COMPLETED,
                        DependencyCondition.SKIPPED, DependencyCondition.SKIPPED))
                    .withAdditionalProperties(mapOf()),
                new ActivityDependency().withActivity("xeubngwidgxypdo")
                    .withDependencyConditions(Arrays.asList(DependencyCondition.FAILED, DependencyCondition.FAILED,
                        DependencyCondition.COMPLETED, DependencyCondition.COMPLETED))
                    .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("k").withValue("datatvoprgcsjycorxib"),
                new UserProperty().withName("sfxkudic").withValue("datafoxenmuevq"),
                new UserProperty().withName("ssclgolbpw").withValue("datagzdionlgnes")))
            .withLinkedServiceName(
                new LinkedServiceReference().withReferenceName("wdir").withParameters(mapOf("h", "dataraqyavdykxgcfh")))
            .withPolicy(new ActivityPolicy().withTimeout("datayhzys")
                .withRetry("dataqfbycra")
                .withRetryIntervalInSeconds(1509141916)
                .withSecureInput(true)
                .withSecureOutput(true)
                .withAdditionalProperties(mapOf()))
            .withMethod(AzureFunctionActivityMethod.DELETE)
            .withFunctionName("datailbiwacxldho")
            .withHeaders(mapOf("shtlqhik", "datapwxhccvtbgznpxax", "tmxwmjaevwid", "datafzdlhpzobhnuzia"))
            .withBody("datapfku");
        model = BinaryData.fromObject(model).toObject(AzureFunctionActivity.class);
        Assertions.assertEquals("hjpsgprlmpz", model.name());
        Assertions.assertEquals("iakyflryhvph", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.onInactiveMarkAs());
        Assertions.assertEquals("zbpfwlxx", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("k", model.userProperties().get(0).name());
        Assertions.assertEquals("wdir", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1509141916, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals(AzureFunctionActivityMethod.DELETE, model.method());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
