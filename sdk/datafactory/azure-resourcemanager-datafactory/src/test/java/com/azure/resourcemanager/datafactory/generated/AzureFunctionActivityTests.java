// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.AzureFunctionActivity;
import com.azure.resourcemanager.datafactory.models.AzureFunctionActivityMethod;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class AzureFunctionActivityTests {
    @Test
    public void testDeserialize() {
        AzureFunctionActivity model =
            BinaryData
                .fromString(
                    "{\"type\":\"AzureFunctionActivity\",\"typeProperties\":{\"method\":\"POST\"},\"linkedServiceName\":{\"referenceName\":\"supmlp\",\"parameters\":{}},\"policy\":{\"retryIntervalInSeconds\":1175663451,\"secureInput\":false,\"secureOutput\":false,\"\":{}},\"name\":\"rkptgongruats\",\"description\":\"y\",\"dependsOn\":[{\"activity\":\"henigbeqngubab\",\"dependencyConditions\":[\"Completed\",\"Failed\",\"Skipped\"],\"\":{}},{\"activity\":\"cseydz\",\"dependencyConditions\":[\"Failed\",\"Failed\",\"Succeeded\",\"Failed\"],\"\":{}}],\"userProperties\":[{\"name\":\"muwrx\"}],\"\":{}}")
                .toObject(AzureFunctionActivity.class);
        Assertions.assertEquals("rkptgongruats", model.name());
        Assertions.assertEquals("y", model.description());
        Assertions.assertEquals("henigbeqngubab", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("muwrx", model.userProperties().get(0).name());
        Assertions.assertEquals("supmlp", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1175663451, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals(AzureFunctionActivityMethod.POST, model.method());
    }

    @Test
    public void testSerialize() {
        AzureFunctionActivity model =
            new AzureFunctionActivity()
                .withName("rkptgongruats")
                .withDescription("y")
                .withDependsOn(
                    Arrays
                        .asList(
                            new ActivityDependency()
                                .withActivity("henigbeqngubab")
                                .withDependencyConditions(
                                    Arrays
                                        .asList(
                                            DependencyCondition.COMPLETED,
                                            DependencyCondition.FAILED,
                                            DependencyCondition.SKIPPED))
                                .withAdditionalProperties(mapOf()),
                            new ActivityDependency()
                                .withActivity("cseydz")
                                .withDependencyConditions(
                                    Arrays
                                        .asList(
                                            DependencyCondition.FAILED,
                                            DependencyCondition.FAILED,
                                            DependencyCondition.SUCCEEDED,
                                            DependencyCondition.FAILED))
                                .withAdditionalProperties(mapOf())))
                .withUserProperties(Arrays.asList(new UserProperty().withName("muwrx")))
                .withLinkedServiceName(new LinkedServiceReference().withReferenceName("supmlp").withParameters(mapOf()))
                .withPolicy(
                    new ActivityPolicy()
                        .withRetryIntervalInSeconds(1175663451)
                        .withSecureInput(false)
                        .withSecureOutput(false)
                        .withAdditionalProperties(mapOf()))
                .withMethod(AzureFunctionActivityMethod.POST);
        model = BinaryData.fromObject(model).toObject(AzureFunctionActivity.class);
        Assertions.assertEquals("rkptgongruats", model.name());
        Assertions.assertEquals("y", model.description());
        Assertions.assertEquals("henigbeqngubab", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.COMPLETED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("muwrx", model.userProperties().get(0).name());
        Assertions.assertEquals("supmlp", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1175663451, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals(AzureFunctionActivityMethod.POST, model.method());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
