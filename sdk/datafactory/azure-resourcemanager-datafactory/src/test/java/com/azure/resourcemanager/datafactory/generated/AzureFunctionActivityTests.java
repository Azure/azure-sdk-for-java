// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.AzureFunctionActivity;
import com.azure.resourcemanager.datafactory.models.AzureFunctionActivityMethod;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureFunctionActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureFunctionActivity model = BinaryData.fromString(
            "{\"type\":\"doomhrlgidqxbrdh\",\"typeProperties\":{\"method\":\"POST\",\"functionName\":\"datafhpaywwesaqsuqps\",\"headers\":{\"lra\":\"datab\"},\"body\":\"datadiathhxqs\"},\"linkedServiceName\":{\"referenceName\":\"rnyf\",\"parameters\":{\"wffos\":\"dataaomogkp\",\"zgqkxsoavbteaegy\":\"datamxmvgj\",\"bztlvujbhw\":\"datajytoepcdhqjcz\",\"cihkjjjbit\":\"dataszrhf\"}},\"policy\":{\"timeout\":\"dataii\",\"retry\":\"datargz\",\"retryIntervalInSeconds\":114099002,\"secureInput\":true,\"secureOutput\":true,\"\":{\"jn\":\"dataods\"}},\"name\":\"wcqnaspjdah\",\"description\":\"nkliyfgkzw\",\"state\":\"Active\",\"onInactiveMarkAs\":\"Succeeded\",\"dependsOn\":[{\"activity\":\"ybdoyykhidiand\",\"dependencyConditions\":[\"Skipped\"],\"\":{\"ynppqtxpj\":\"dataoxk\",\"jcimoi\":\"dataowjatyhkq\",\"gyhschamwofqntt\":\"dataqzvawfpu\",\"hguubpmvp\":\"datakjcgupxnuv\"}}],\"userProperties\":[{\"name\":\"iyo\",\"value\":\"datavafbdzokplolcal\"},{\"name\":\"vcxvcpxdeqntb\",\"value\":\"datatdqsqb\"},{\"name\":\"ubswzafqrmwdofg\",\"value\":\"dataspzwa\"}],\"\":{\"djvlwczwdkkscooq\":\"dataxwvj\",\"fckrmrbaoidt\":\"datavht\",\"cbvkoughjsxp\":\"datam\",\"tsbpvyvsc\":\"datatsvppfdnihxcij\"}}")
            .toObject(AzureFunctionActivity.class);
        Assertions.assertEquals("wcqnaspjdah", model.name());
        Assertions.assertEquals("nkliyfgkzw", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.onInactiveMarkAs());
        Assertions.assertEquals("ybdoyykhidiand", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("iyo", model.userProperties().get(0).name());
        Assertions.assertEquals("rnyf", model.linkedServiceName().referenceName());
        Assertions.assertEquals(114099002, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals(AzureFunctionActivityMethod.POST, model.method());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureFunctionActivity model = new AzureFunctionActivity().withName("wcqnaspjdah")
            .withDescription("nkliyfgkzw")
            .withState(ActivityState.ACTIVE)
            .withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SUCCEEDED)
            .withDependsOn(Arrays.asList(new ActivityDependency().withActivity("ybdoyykhidiand")
                .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED))
                .withAdditionalProperties(mapOf())))
            .withUserProperties(Arrays.asList(new UserProperty().withName("iyo").withValue("datavafbdzokplolcal"),
                new UserProperty().withName("vcxvcpxdeqntb").withValue("datatdqsqb"),
                new UserProperty().withName("ubswzafqrmwdofg").withValue("dataspzwa")))
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("rnyf")
                .withParameters(mapOf("wffos", "dataaomogkp", "zgqkxsoavbteaegy", "datamxmvgj", "bztlvujbhw",
                    "datajytoepcdhqjcz", "cihkjjjbit", "dataszrhf")))
            .withPolicy(new ActivityPolicy().withTimeout("dataii")
                .withRetry("datargz")
                .withRetryIntervalInSeconds(114099002)
                .withSecureInput(true)
                .withSecureOutput(true)
                .withAdditionalProperties(mapOf()))
            .withMethod(AzureFunctionActivityMethod.POST)
            .withFunctionName("datafhpaywwesaqsuqps")
            .withHeaders(mapOf("lra", "datab"))
            .withBody("datadiathhxqs");
        model = BinaryData.fromObject(model).toObject(AzureFunctionActivity.class);
        Assertions.assertEquals("wcqnaspjdah", model.name());
        Assertions.assertEquals("nkliyfgkzw", model.description());
        Assertions.assertEquals(ActivityState.ACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SUCCEEDED, model.onInactiveMarkAs());
        Assertions.assertEquals("ybdoyykhidiand", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.SKIPPED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("iyo", model.userProperties().get(0).name());
        Assertions.assertEquals("rnyf", model.linkedServiceName().referenceName());
        Assertions.assertEquals(114099002, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(true, model.policy().secureInput());
        Assertions.assertEquals(true, model.policy().secureOutput());
        Assertions.assertEquals(AzureFunctionActivityMethod.POST, model.method());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
