// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.ActivityDependency;
import com.azure.resourcemanager.datafactory.models.ActivityOnInactiveMarkAs;
import com.azure.resourcemanager.datafactory.models.ActivityPolicy;
import com.azure.resourcemanager.datafactory.models.ActivityState;
import com.azure.resourcemanager.datafactory.models.AzureFunctionActivity;
import com.azure.resourcemanager.datafactory.models.AzureFunctionActivityMethod;
import com.azure.resourcemanager.datafactory.models.DependencyCondition;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.UserProperty;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureFunctionActivityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureFunctionActivity model = BinaryData.fromString(
            "{\"type\":\"AzureFunctionActivity\",\"typeProperties\":{\"method\":\"PUT\",\"functionName\":\"dataiarfkfgrdri\",\"headers\":{\"rqpickn\":\"fx\"},\"body\":\"datazdrd\"},\"linkedServiceName\":{\"referenceName\":\"wmueavawywofgc\",\"parameters\":{\"mx\":\"datahjvvrrxclf\",\"igxwxxfkfthw\":\"datafqwyiuhhuftn\",\"lstgsmeijgjbev\":\"dataossokafy\",\"wvdklgwoyw\":\"datasrcsyjx\"}},\"policy\":{\"timeout\":\"datafmenbaj\",\"retry\":\"dataelbcsyaohizf\",\"retryIntervalInSeconds\":1921383033,\"secureInput\":false,\"secureOutput\":false,\"\":{\"y\":\"datatkddohxvcsoq\",\"danufiwtkhcmoc\":\"datacqpmywt\",\"khmbks\":\"datagtmfug\"}},\"name\":\"kkztexds\",\"description\":\"hndcrdvecc\",\"state\":\"Inactive\",\"onInactiveMarkAs\":\"Skipped\",\"dependsOn\":[{\"activity\":\"ahuu\",\"dependencyConditions\":[\"Failed\",\"Succeeded\"],\"\":{\"pfisyydoy\":\"datavkolfiigoxohjy\",\"hqvmilpgxeaqwogp\":\"dataccwvcfayllx\",\"mcoruti\":\"datatsmyfgted\"}},{\"activity\":\"dkypckhqooqni\",\"dependencyConditions\":[\"Skipped\",\"Skipped\",\"Skipped\"],\"\":{\"ngvpsuk\":\"datatmkmgcipvr\",\"gq\":\"datakmkghugfd\"}}],\"userProperties\":[{\"name\":\"uekoxylcbpb\",\"value\":\"datajtiidozf\"},{\"name\":\"gvq\",\"value\":\"datarrknijdrsvoh\"}],\"\":{\"lzsgpoiccbzqko\":\"dataoiikr\",\"dm\":\"dataja\",\"lz\":\"datazkq\"}}")
            .toObject(AzureFunctionActivity.class);
        Assertions.assertEquals("kkztexds", model.name());
        Assertions.assertEquals("hndcrdvecc", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("ahuu", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("uekoxylcbpb", model.userProperties().get(0).name());
        Assertions.assertEquals("wmueavawywofgc", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1921383033, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals(AzureFunctionActivityMethod.PUT, model.method());
        Assertions.assertEquals("fx", model.headers().get("rqpickn"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureFunctionActivity model
            = new AzureFunctionActivity().withName("kkztexds").withDescription("hndcrdvecc")
                .withState(ActivityState.INACTIVE).withOnInactiveMarkAs(ActivityOnInactiveMarkAs.SKIPPED)
                .withDependsOn(Arrays.asList(
                    new ActivityDependency().withActivity("ahuu")
                        .withDependencyConditions(
                            Arrays.asList(DependencyCondition.FAILED, DependencyCondition.SUCCEEDED))
                        .withAdditionalProperties(mapOf()),
                    new ActivityDependency().withActivity("dkypckhqooqni")
                        .withDependencyConditions(Arrays.asList(DependencyCondition.SKIPPED,
                            DependencyCondition.SKIPPED, DependencyCondition.SKIPPED))
                        .withAdditionalProperties(mapOf())))
                .withUserProperties(Arrays.asList(new UserProperty().withName("uekoxylcbpb").withValue("datajtiidozf"),
                    new UserProperty().withName("gvq").withValue("datarrknijdrsvoh")))
                .withLinkedServiceName(new LinkedServiceReference().withReferenceName("wmueavawywofgc")
                    .withParameters(mapOf("mx", "datahjvvrrxclf", "igxwxxfkfthw", "datafqwyiuhhuftn", "lstgsmeijgjbev",
                        "dataossokafy", "wvdklgwoyw", "datasrcsyjx")))
                .withPolicy(new ActivityPolicy().withTimeout("datafmenbaj").withRetry("dataelbcsyaohizf")
                    .withRetryIntervalInSeconds(1921383033).withSecureInput(false).withSecureOutput(false)
                    .withAdditionalProperties(mapOf()))
                .withMethod(AzureFunctionActivityMethod.PUT).withFunctionName("dataiarfkfgrdri")
                .withHeaders(mapOf("rqpickn", "fx")).withBody("datazdrd");
        model = BinaryData.fromObject(model).toObject(AzureFunctionActivity.class);
        Assertions.assertEquals("kkztexds", model.name());
        Assertions.assertEquals("hndcrdvecc", model.description());
        Assertions.assertEquals(ActivityState.INACTIVE, model.state());
        Assertions.assertEquals(ActivityOnInactiveMarkAs.SKIPPED, model.onInactiveMarkAs());
        Assertions.assertEquals("ahuu", model.dependsOn().get(0).activity());
        Assertions.assertEquals(DependencyCondition.FAILED, model.dependsOn().get(0).dependencyConditions().get(0));
        Assertions.assertEquals("uekoxylcbpb", model.userProperties().get(0).name());
        Assertions.assertEquals("wmueavawywofgc", model.linkedServiceName().referenceName());
        Assertions.assertEquals(1921383033, model.policy().retryIntervalInSeconds());
        Assertions.assertEquals(false, model.policy().secureInput());
        Assertions.assertEquals(false, model.policy().secureOutput());
        Assertions.assertEquals(AzureFunctionActivityMethod.PUT, model.method());
        Assertions.assertEquals("fx", model.headers().get("rqpickn"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
