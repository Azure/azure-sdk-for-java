// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.HiveObjectDataset;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class HiveObjectDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HiveObjectDataset model = BinaryData.fromString(
            "{\"type\":\"HiveObject\",\"typeProperties\":{\"tableName\":\"datak\",\"table\":\"datarqkekcdaviiebeqr\",\"schema\":\"dataavqymcwt\"},\"description\":\"uceplbrzgkuorwp\",\"structure\":\"datastwe\",\"schema\":\"dataptscru\",\"linkedServiceName\":{\"referenceName\":\"kkiela\",\"parameters\":{\"yoifgdfzjqthyk\":\"dataoyjyflsmsbn\",\"kxxlwwo\":\"datavoevcwfzo\",\"ubdmg\":\"dataxgbsdzcgcvypj\"}},\"parameters\":{\"oibm\":{\"type\":\"String\",\"defaultValue\":\"dataujcqgzwvxwiu\"},\"qoqovqhgphgx\":{\"type\":\"Array\",\"defaultValue\":\"dataqrljdcukylaxrj\"},\"cy\":{\"type\":\"Bool\",\"defaultValue\":\"datad\"}},\"annotations\":[\"datavumryd\"],\"folder\":{\"name\":\"ivahfcqwnjzebpic\"},\"\":{\"qeigxuyxsxteuik\":\"dataoypoedkspwwibpy\",\"fqderkr\":\"dataznfffnhcgnaqsrm\",\"znbbyzposzfut\":\"datasdcobpmgqlwy\",\"tzpvqew\":\"datapbygbnbcmoiq\"}}")
            .toObject(HiveObjectDataset.class);
        Assertions.assertEquals("uceplbrzgkuorwp", model.description());
        Assertions.assertEquals("kkiela", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("oibm").type());
        Assertions.assertEquals("ivahfcqwnjzebpic", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HiveObjectDataset model = new HiveObjectDataset().withDescription("uceplbrzgkuorwp")
            .withStructure("datastwe")
            .withSchema("dataptscru")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("kkiela")
                .withParameters(mapOf("yoifgdfzjqthyk", "dataoyjyflsmsbn", "kxxlwwo", "datavoevcwfzo", "ubdmg",
                    "dataxgbsdzcgcvypj")))
            .withParameters(mapOf("oibm",
                new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("dataujcqgzwvxwiu"),
                "qoqovqhgphgx",
                new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("dataqrljdcukylaxrj"), "cy",
                new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("datad")))
            .withAnnotations(Arrays.asList("datavumryd"))
            .withFolder(new DatasetFolder().withName("ivahfcqwnjzebpic"))
            .withTableName("datak")
            .withTable("datarqkekcdaviiebeqr")
            .withSchemaTypePropertiesSchema("dataavqymcwt");
        model = BinaryData.fromObject(model).toObject(HiveObjectDataset.class);
        Assertions.assertEquals("uceplbrzgkuorwp", model.description());
        Assertions.assertEquals("kkiela", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.STRING, model.parameters().get("oibm").type());
        Assertions.assertEquals("ivahfcqwnjzebpic", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
