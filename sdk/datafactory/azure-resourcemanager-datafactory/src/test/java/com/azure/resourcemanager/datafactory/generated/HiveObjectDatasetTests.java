// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.HiveObjectDataset;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class HiveObjectDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HiveObjectDataset model = BinaryData.fromString(
            "{\"type\":\"HiveObject\",\"typeProperties\":{\"tableName\":\"datagjndkvzmxl\",\"table\":\"dataqgdodn\",\"schema\":\"datayipgkmjt\"},\"description\":\"zmdzesimeft\",\"structure\":\"datarfzjlflzagvdavab\",\"schema\":\"dataefcor\",\"linkedServiceName\":{\"referenceName\":\"bidaeb\",\"parameters\":{\"fajw\":\"dataicew\",\"wwsr\":\"dataylciobb\"}},\"parameters\":{\"mnteevfg\":{\"type\":\"Object\",\"defaultValue\":\"dataecuuuex\"}},\"annotations\":[\"dataezraqsddkod\",\"datagxqfkyr\"],\"folder\":{\"name\":\"zzeglwdzfss\"},\"\":{\"ddkkraj\":\"datagaok\"}}")
            .toObject(HiveObjectDataset.class);
        Assertions.assertEquals("zmdzesimeft", model.description());
        Assertions.assertEquals("bidaeb", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.OBJECT, model.parameters().get("mnteevfg").type());
        Assertions.assertEquals("zzeglwdzfss", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HiveObjectDataset model = new HiveObjectDataset().withDescription("zmdzesimeft")
            .withStructure("datarfzjlflzagvdavab")
            .withSchema("dataefcor")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("bidaeb")
                .withParameters(mapOf("fajw", "dataicew", "wwsr", "dataylciobb")))
            .withParameters(mapOf("mnteevfg",
                new ParameterSpecification().withType(ParameterType.OBJECT).withDefaultValue("dataecuuuex")))
            .withAnnotations(Arrays.asList("dataezraqsddkod", "datagxqfkyr"))
            .withFolder(new DatasetFolder().withName("zzeglwdzfss"))
            .withTableName("datagjndkvzmxl")
            .withTable("dataqgdodn")
            .withSchemaTypePropertiesSchema("datayipgkmjt");
        model = BinaryData.fromObject(model).toObject(HiveObjectDataset.class);
        Assertions.assertEquals("zmdzesimeft", model.description());
        Assertions.assertEquals("bidaeb", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.OBJECT, model.parameters().get("mnteevfg").type());
        Assertions.assertEquals("zzeglwdzfss", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
