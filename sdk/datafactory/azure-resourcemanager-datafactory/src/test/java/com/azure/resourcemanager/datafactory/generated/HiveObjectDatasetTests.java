// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.HiveObjectDataset;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class HiveObjectDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HiveObjectDataset model = BinaryData.fromString(
            "{\"type\":\"ybivywotjnjuv\",\"typeProperties\":{\"tableName\":\"datays\",\"table\":\"dataqqjhdfhfaob\",\"schema\":\"datajcsbozvcdqwssydv\"},\"description\":\"ijrdl\",\"structure\":\"dataaeyocpkvlt\",\"schema\":\"datadzf\",\"linkedServiceName\":{\"referenceName\":\"npbdrcibjxnnnoz\",\"parameters\":{\"pshtisy\":\"datavdtuoamqobqeh\"}},\"parameters\":{\"vwdxgyypmxqzlm\":{\"type\":\"SecureString\",\"defaultValue\":\"datatrzjwnzwckzebm\"},\"ilyeshox\":{\"type\":\"String\",\"defaultValue\":\"datarcatkuhskegdkvv\"},\"busxyugozwp\":{\"type\":\"Int\",\"defaultValue\":\"datajdmu\"}},\"annotations\":[\"datagzumnotii\",\"datakkbyg\",\"datagiq\",\"datawyshybbnhtt\"],\"folder\":{\"name\":\"onzsurqcoj\"},\"\":{\"hjfvnhwsgn\":\"datazhzzcarciuoxyipd\",\"ssjgbfbb\":\"dataputfelfchnu\",\"zunf\":\"datachxxc\"}}")
            .toObject(HiveObjectDataset.class);
        Assertions.assertEquals("ijrdl", model.description());
        Assertions.assertEquals("npbdrcibjxnnnoz", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.SECURE_STRING, model.parameters().get("vwdxgyypmxqzlm").type());
        Assertions.assertEquals("onzsurqcoj", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HiveObjectDataset model = new HiveObjectDataset().withDescription("ijrdl")
            .withStructure("dataaeyocpkvlt")
            .withSchema("datadzf")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("npbdrcibjxnnnoz")
                .withParameters(mapOf("pshtisy", "datavdtuoamqobqeh")))
            .withParameters(mapOf("vwdxgyypmxqzlm",
                new ParameterSpecification().withType(ParameterType.SECURE_STRING)
                    .withDefaultValue("datatrzjwnzwckzebm"),
                "ilyeshox",
                new ParameterSpecification().withType(ParameterType.STRING).withDefaultValue("datarcatkuhskegdkvv"),
                "busxyugozwp", new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("datajdmu")))
            .withAnnotations(Arrays.asList("datagzumnotii", "datakkbyg", "datagiq", "datawyshybbnhtt"))
            .withFolder(new DatasetFolder().withName("onzsurqcoj"))
            .withTableName("datays")
            .withTable("dataqqjhdfhfaob")
            .withSchemaTypePropertiesSchema("datajcsbozvcdqwssydv");
        model = BinaryData.fromObject(model).toObject(HiveObjectDataset.class);
        Assertions.assertEquals("ijrdl", model.description());
        Assertions.assertEquals("npbdrcibjxnnnoz", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.SECURE_STRING, model.parameters().get("vwdxgyypmxqzlm").type());
        Assertions.assertEquals("onzsurqcoj", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
