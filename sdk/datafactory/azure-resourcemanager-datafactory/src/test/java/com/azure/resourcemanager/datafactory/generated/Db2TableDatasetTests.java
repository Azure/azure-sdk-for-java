// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.Db2TableDataset;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class Db2TableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        Db2TableDataset model = BinaryData.fromString(
            "{\"type\":\"alknuyapvibzic\",\"typeProperties\":{\"tableName\":\"datarlcck\",\"schema\":\"datafpjmspau\",\"table\":\"dataqom\"},\"description\":\"ichca\",\"structure\":\"datakhjxnrkbn\",\"schema\":\"dataccklzhzn\",\"linkedServiceName\":{\"referenceName\":\"gvlxyx\",\"parameters\":{\"dprtqjytdcfe\":\"datatigpksywicklktg\",\"gmlamoaxc\":\"datauhbdwbvjs\"}},\"parameters\":{\"cw\":{\"type\":\"Int\",\"defaultValue\":\"datakvbpbl\"},\"vlryszfh\":{\"type\":\"Array\",\"defaultValue\":\"dataheeocnqoubve\"},\"zhh\":{\"type\":\"Float\",\"defaultValue\":\"datafhxohz\"}},\"annotations\":[\"datafuxnvkdslcofuvtf\"],\"folder\":{\"name\":\"ouisakl\"},\"\":{\"ub\":\"dataddxqfus\",\"p\":\"datasspmjvailfauyv\",\"wvoglff\":\"datawlkqdgwbztrthl\"}}")
            .toObject(Db2TableDataset.class);
        Assertions.assertEquals("ichca", model.description());
        Assertions.assertEquals("gvlxyx", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("cw").type());
        Assertions.assertEquals("ouisakl", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        Db2TableDataset model = new Db2TableDataset().withDescription("ichca")
            .withStructure("datakhjxnrkbn")
            .withSchema("dataccklzhzn")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("gvlxyx")
                .withParameters(mapOf("dprtqjytdcfe", "datatigpksywicklktg", "gmlamoaxc", "datauhbdwbvjs")))
            .withParameters(mapOf("cw",
                new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("datakvbpbl"), "vlryszfh",
                new ParameterSpecification().withType(ParameterType.ARRAY).withDefaultValue("dataheeocnqoubve"), "zhh",
                new ParameterSpecification().withType(ParameterType.FLOAT).withDefaultValue("datafhxohz")))
            .withAnnotations(Arrays.asList("datafuxnvkdslcofuvtf"))
            .withFolder(new DatasetFolder().withName("ouisakl"))
            .withTableName("datarlcck")
            .withSchemaTypePropertiesSchema("datafpjmspau")
            .withTable("dataqom");
        model = BinaryData.fromObject(model).toObject(Db2TableDataset.class);
        Assertions.assertEquals("ichca", model.description());
        Assertions.assertEquals("gvlxyx", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("cw").type());
        Assertions.assertEquals("ouisakl", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
