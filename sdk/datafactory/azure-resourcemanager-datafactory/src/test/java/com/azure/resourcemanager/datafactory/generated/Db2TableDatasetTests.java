// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.Db2TableDataset;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class Db2TableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        Db2TableDataset model = BinaryData.fromString(
            "{\"type\":\"Db2Table\",\"typeProperties\":{\"tableName\":\"datak\",\"schema\":\"dataztirjvqxvwkiocxo\",\"table\":\"datajwbu\"},\"description\":\"qflm\",\"structure\":\"datarlqxbctatez\",\"schema\":\"datazdbcqqnlsjxcsc\",\"linkedServiceName\":{\"referenceName\":\"it\",\"parameters\":{\"t\":\"datarahjjidodnv\"}},\"parameters\":{\"hiclhyzhr\":{\"type\":\"Int\",\"defaultValue\":\"datapuwkupbb\"},\"nhlsforsimtfcqm\":{\"type\":\"SecureString\",\"defaultValue\":\"datafwbif\"}},\"annotations\":[\"databrpelpf\",\"datajt\",\"datazgxmpeszamadle\",\"dataz\"],\"folder\":{\"name\":\"ui\"},\"\":{\"lxswtdapsm\":\"datakt\"}}")
            .toObject(Db2TableDataset.class);
        Assertions.assertEquals("qflm", model.description());
        Assertions.assertEquals("it", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("hiclhyzhr").type());
        Assertions.assertEquals("ui", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        Db2TableDataset model = new Db2TableDataset().withDescription("qflm")
            .withStructure("datarlqxbctatez")
            .withSchema("datazdbcqqnlsjxcsc")
            .withLinkedServiceName(
                new LinkedServiceReference().withReferenceName("it").withParameters(mapOf("t", "datarahjjidodnv")))
            .withParameters(mapOf("hiclhyzhr",
                new ParameterSpecification().withType(ParameterType.INT).withDefaultValue("datapuwkupbb"),
                "nhlsforsimtfcqm",
                new ParameterSpecification().withType(ParameterType.SECURE_STRING).withDefaultValue("datafwbif")))
            .withAnnotations(Arrays.asList("databrpelpf", "datajt", "datazgxmpeszamadle", "dataz"))
            .withFolder(new DatasetFolder().withName("ui"))
            .withTableName("datak")
            .withSchemaTypePropertiesSchema("dataztirjvqxvwkiocxo")
            .withTable("datajwbu");
        model = BinaryData.fromObject(model).toObject(Db2TableDataset.class);
        Assertions.assertEquals("qflm", model.description());
        Assertions.assertEquals("it", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.INT, model.parameters().get("hiclhyzhr").type());
        Assertions.assertEquals("ui", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
