// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datafactory.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datafactory.models.DatasetFolder;
import com.azure.resourcemanager.datafactory.models.Db2TableDataset;
import com.azure.resourcemanager.datafactory.models.LinkedServiceReference;
import com.azure.resourcemanager.datafactory.models.ParameterSpecification;
import com.azure.resourcemanager.datafactory.models.ParameterType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class Db2TableDatasetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        Db2TableDataset model = BinaryData.fromString(
            "{\"type\":\"Db2Table\",\"typeProperties\":{\"tableName\":\"datamw\",\"schema\":\"datavxgwz\",\"table\":\"datawdtlcjgpvc\"},\"description\":\"vzrbvgwxhlx\",\"structure\":\"dataxvmdr\",\"schema\":\"datan\",\"linkedServiceName\":{\"referenceName\":\"g\",\"parameters\":{\"hhplkhww\":\"datazoymd\",\"yearmhpwb\":\"datakatveqmgkcswzeyx\",\"smfasgtlv\":\"datakl\"}},\"parameters\":{\"vftmh\":{\"type\":\"Bool\",\"defaultValue\":\"datalosjaemcez\"}},\"annotations\":[\"dataokjyghzt\",\"datasmiwtpcflc\",\"datazswwvwi\"],\"folder\":{\"name\":\"jtvbfp\"},\"\":{\"umxquk\":\"datauptsyqcjnqswxdo\",\"clqddnhfknebw\":\"datacdio\",\"mkaqldqabnwvpaq\":\"dataddpnyzcwyj\"}}")
            .toObject(Db2TableDataset.class);
        Assertions.assertEquals("vzrbvgwxhlx", model.description());
        Assertions.assertEquals("g", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("vftmh").type());
        Assertions.assertEquals("jtvbfp", model.folder().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        Db2TableDataset model = new Db2TableDataset().withDescription("vzrbvgwxhlx")
            .withStructure("dataxvmdr")
            .withSchema("datan")
            .withLinkedServiceName(new LinkedServiceReference().withReferenceName("g")
                .withParameters(
                    mapOf("hhplkhww", "datazoymd", "yearmhpwb", "datakatveqmgkcswzeyx", "smfasgtlv", "datakl")))
            .withParameters(mapOf("vftmh",
                new ParameterSpecification().withType(ParameterType.BOOL).withDefaultValue("datalosjaemcez")))
            .withAnnotations(Arrays.asList("dataokjyghzt", "datasmiwtpcflc", "datazswwvwi"))
            .withFolder(new DatasetFolder().withName("jtvbfp"))
            .withTableName("datamw")
            .withSchemaTypePropertiesSchema("datavxgwz")
            .withTable("datawdtlcjgpvc");
        model = BinaryData.fromObject(model).toObject(Db2TableDataset.class);
        Assertions.assertEquals("vzrbvgwxhlx", model.description());
        Assertions.assertEquals("g", model.linkedServiceName().referenceName());
        Assertions.assertEquals(ParameterType.BOOL, model.parameters().get("vftmh").type());
        Assertions.assertEquals("jtvbfp", model.folder().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
