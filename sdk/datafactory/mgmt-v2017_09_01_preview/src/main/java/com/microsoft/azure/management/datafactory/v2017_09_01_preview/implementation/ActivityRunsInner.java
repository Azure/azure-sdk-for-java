/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.datafactory.v2017_09_01_preview.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.datafactory.v2017_09_01_preview.ErrorResponseException;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import org.joda.time.DateTime;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in ActivityRuns.
 */
public class ActivityRunsInner {
    /** The Retrofit service to perform REST calls. */
    private ActivityRunsService service;
    /** The service client containing this operation class. */
    private DataFactoryManagementClientImpl client;

    /**
     * Initializes an instance of ActivityRunsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ActivityRunsInner(Retrofit retrofit, DataFactoryManagementClientImpl client) {
        this.service = retrofit.create(ActivityRunsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for ActivityRuns to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ActivityRunsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.datafactory.v2017_09_01_preview.ActivityRuns listByPipelineRun" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/pipelineruns/{runId}/activityruns")
        Observable<Response<ResponseBody>> listByPipelineRun(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("factoryName") String factoryName, @Path("runId") String runId, @Query("api-version") String apiVersion, @Query("startTime") DateTime startTime, @Query("endTime") DateTime endTime, @Query("status") String status, @Query("activityName") String activityName, @Query("linkedServiceName") String linkedServiceName, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.datafactory.v2017_09_01_preview.ActivityRuns listByPipelineRunNext" })
        @GET
        Observable<Response<ResponseBody>> listByPipelineRunNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * List activity runs based on input filter conditions.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param runId The pipeline run identifier.
     * @param startTime The start time of activity runs in ISO8601 format.
     * @param endTime The end time of activity runs in ISO8601 format.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ActivityRunInner&gt; object if successful.
     */
    public PagedList<ActivityRunInner> listByPipelineRun(final String resourceGroupName, final String factoryName, final String runId, final DateTime startTime, final DateTime endTime) {
        ServiceResponse<Page<ActivityRunInner>> response = listByPipelineRunSinglePageAsync(resourceGroupName, factoryName, runId, startTime, endTime).toBlocking().single();
        return new PagedList<ActivityRunInner>(response.body()) {
            @Override
            public Page<ActivityRunInner> nextPage(String nextPageLink) {
                return listByPipelineRunNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List activity runs based on input filter conditions.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param runId The pipeline run identifier.
     * @param startTime The start time of activity runs in ISO8601 format.
     * @param endTime The end time of activity runs in ISO8601 format.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ActivityRunInner>> listByPipelineRunAsync(final String resourceGroupName, final String factoryName, final String runId, final DateTime startTime, final DateTime endTime, final ListOperationCallback<ActivityRunInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByPipelineRunSinglePageAsync(resourceGroupName, factoryName, runId, startTime, endTime),
            new Func1<String, Observable<ServiceResponse<Page<ActivityRunInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ActivityRunInner>>> call(String nextPageLink) {
                    return listByPipelineRunNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List activity runs based on input filter conditions.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param runId The pipeline run identifier.
     * @param startTime The start time of activity runs in ISO8601 format.
     * @param endTime The end time of activity runs in ISO8601 format.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ActivityRunInner&gt; object
     */
    public Observable<Page<ActivityRunInner>> listByPipelineRunAsync(final String resourceGroupName, final String factoryName, final String runId, final DateTime startTime, final DateTime endTime) {
        return listByPipelineRunWithServiceResponseAsync(resourceGroupName, factoryName, runId, startTime, endTime)
            .map(new Func1<ServiceResponse<Page<ActivityRunInner>>, Page<ActivityRunInner>>() {
                @Override
                public Page<ActivityRunInner> call(ServiceResponse<Page<ActivityRunInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List activity runs based on input filter conditions.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param runId The pipeline run identifier.
     * @param startTime The start time of activity runs in ISO8601 format.
     * @param endTime The end time of activity runs in ISO8601 format.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ActivityRunInner&gt; object
     */
    public Observable<ServiceResponse<Page<ActivityRunInner>>> listByPipelineRunWithServiceResponseAsync(final String resourceGroupName, final String factoryName, final String runId, final DateTime startTime, final DateTime endTime) {
        return listByPipelineRunSinglePageAsync(resourceGroupName, factoryName, runId, startTime, endTime)
            .concatMap(new Func1<ServiceResponse<Page<ActivityRunInner>>, Observable<ServiceResponse<Page<ActivityRunInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ActivityRunInner>>> call(ServiceResponse<Page<ActivityRunInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByPipelineRunNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List activity runs based on input filter conditions.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param runId The pipeline run identifier.
     * @param startTime The start time of activity runs in ISO8601 format.
     * @param endTime The end time of activity runs in ISO8601 format.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ActivityRunInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ActivityRunInner>>> listByPipelineRunSinglePageAsync(final String resourceGroupName, final String factoryName, final String runId, final DateTime startTime, final DateTime endTime) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (factoryName == null) {
            throw new IllegalArgumentException("Parameter factoryName is required and cannot be null.");
        }
        if (runId == null) {
            throw new IllegalArgumentException("Parameter runId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (startTime == null) {
            throw new IllegalArgumentException("Parameter startTime is required and cannot be null.");
        }
        if (endTime == null) {
            throw new IllegalArgumentException("Parameter endTime is required and cannot be null.");
        }
        final String status = null;
        final String activityName = null;
        final String linkedServiceName = null;
        return service.listByPipelineRun(this.client.subscriptionId(), resourceGroupName, factoryName, runId, this.client.apiVersion(), startTime, endTime, status, activityName, linkedServiceName, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ActivityRunInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ActivityRunInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ActivityRunInner>> result = listByPipelineRunDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ActivityRunInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * List activity runs based on input filter conditions.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param runId The pipeline run identifier.
     * @param startTime The start time of activity runs in ISO8601 format.
     * @param endTime The end time of activity runs in ISO8601 format.
     * @param status The status of the pipeline run.
     * @param activityName The name of the activity.
     * @param linkedServiceName The linked service name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ActivityRunInner&gt; object if successful.
     */
    public PagedList<ActivityRunInner> listByPipelineRun(final String resourceGroupName, final String factoryName, final String runId, final DateTime startTime, final DateTime endTime, final String status, final String activityName, final String linkedServiceName) {
        ServiceResponse<Page<ActivityRunInner>> response = listByPipelineRunSinglePageAsync(resourceGroupName, factoryName, runId, startTime, endTime, status, activityName, linkedServiceName).toBlocking().single();
        return new PagedList<ActivityRunInner>(response.body()) {
            @Override
            public Page<ActivityRunInner> nextPage(String nextPageLink) {
                return listByPipelineRunNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List activity runs based on input filter conditions.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param runId The pipeline run identifier.
     * @param startTime The start time of activity runs in ISO8601 format.
     * @param endTime The end time of activity runs in ISO8601 format.
     * @param status The status of the pipeline run.
     * @param activityName The name of the activity.
     * @param linkedServiceName The linked service name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ActivityRunInner>> listByPipelineRunAsync(final String resourceGroupName, final String factoryName, final String runId, final DateTime startTime, final DateTime endTime, final String status, final String activityName, final String linkedServiceName, final ListOperationCallback<ActivityRunInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByPipelineRunSinglePageAsync(resourceGroupName, factoryName, runId, startTime, endTime, status, activityName, linkedServiceName),
            new Func1<String, Observable<ServiceResponse<Page<ActivityRunInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ActivityRunInner>>> call(String nextPageLink) {
                    return listByPipelineRunNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List activity runs based on input filter conditions.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param runId The pipeline run identifier.
     * @param startTime The start time of activity runs in ISO8601 format.
     * @param endTime The end time of activity runs in ISO8601 format.
     * @param status The status of the pipeline run.
     * @param activityName The name of the activity.
     * @param linkedServiceName The linked service name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ActivityRunInner&gt; object
     */
    public Observable<Page<ActivityRunInner>> listByPipelineRunAsync(final String resourceGroupName, final String factoryName, final String runId, final DateTime startTime, final DateTime endTime, final String status, final String activityName, final String linkedServiceName) {
        return listByPipelineRunWithServiceResponseAsync(resourceGroupName, factoryName, runId, startTime, endTime, status, activityName, linkedServiceName)
            .map(new Func1<ServiceResponse<Page<ActivityRunInner>>, Page<ActivityRunInner>>() {
                @Override
                public Page<ActivityRunInner> call(ServiceResponse<Page<ActivityRunInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List activity runs based on input filter conditions.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param runId The pipeline run identifier.
     * @param startTime The start time of activity runs in ISO8601 format.
     * @param endTime The end time of activity runs in ISO8601 format.
     * @param status The status of the pipeline run.
     * @param activityName The name of the activity.
     * @param linkedServiceName The linked service name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ActivityRunInner&gt; object
     */
    public Observable<ServiceResponse<Page<ActivityRunInner>>> listByPipelineRunWithServiceResponseAsync(final String resourceGroupName, final String factoryName, final String runId, final DateTime startTime, final DateTime endTime, final String status, final String activityName, final String linkedServiceName) {
        return listByPipelineRunSinglePageAsync(resourceGroupName, factoryName, runId, startTime, endTime, status, activityName, linkedServiceName)
            .concatMap(new Func1<ServiceResponse<Page<ActivityRunInner>>, Observable<ServiceResponse<Page<ActivityRunInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ActivityRunInner>>> call(ServiceResponse<Page<ActivityRunInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByPipelineRunNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List activity runs based on input filter conditions.
     *
    ServiceResponse<PageImpl<ActivityRunInner>> * @param resourceGroupName The resource group name.
    ServiceResponse<PageImpl<ActivityRunInner>> * @param factoryName The factory name.
    ServiceResponse<PageImpl<ActivityRunInner>> * @param runId The pipeline run identifier.
    ServiceResponse<PageImpl<ActivityRunInner>> * @param startTime The start time of activity runs in ISO8601 format.
    ServiceResponse<PageImpl<ActivityRunInner>> * @param endTime The end time of activity runs in ISO8601 format.
    ServiceResponse<PageImpl<ActivityRunInner>> * @param status The status of the pipeline run.
    ServiceResponse<PageImpl<ActivityRunInner>> * @param activityName The name of the activity.
    ServiceResponse<PageImpl<ActivityRunInner>> * @param linkedServiceName The linked service name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ActivityRunInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ActivityRunInner>>> listByPipelineRunSinglePageAsync(final String resourceGroupName, final String factoryName, final String runId, final DateTime startTime, final DateTime endTime, final String status, final String activityName, final String linkedServiceName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (factoryName == null) {
            throw new IllegalArgumentException("Parameter factoryName is required and cannot be null.");
        }
        if (runId == null) {
            throw new IllegalArgumentException("Parameter runId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (startTime == null) {
            throw new IllegalArgumentException("Parameter startTime is required and cannot be null.");
        }
        if (endTime == null) {
            throw new IllegalArgumentException("Parameter endTime is required and cannot be null.");
        }
        return service.listByPipelineRun(this.client.subscriptionId(), resourceGroupName, factoryName, runId, this.client.apiVersion(), startTime, endTime, status, activityName, linkedServiceName, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ActivityRunInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ActivityRunInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ActivityRunInner>> result = listByPipelineRunDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ActivityRunInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ActivityRunInner>> listByPipelineRunDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ActivityRunInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ActivityRunInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * List activity runs based on input filter conditions.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ActivityRunInner&gt; object if successful.
     */
    public PagedList<ActivityRunInner> listByPipelineRunNext(final String nextPageLink) {
        ServiceResponse<Page<ActivityRunInner>> response = listByPipelineRunNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<ActivityRunInner>(response.body()) {
            @Override
            public Page<ActivityRunInner> nextPage(String nextPageLink) {
                return listByPipelineRunNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List activity runs based on input filter conditions.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ActivityRunInner>> listByPipelineRunNextAsync(final String nextPageLink, final ServiceFuture<List<ActivityRunInner>> serviceFuture, final ListOperationCallback<ActivityRunInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByPipelineRunNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<ActivityRunInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ActivityRunInner>>> call(String nextPageLink) {
                    return listByPipelineRunNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List activity runs based on input filter conditions.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ActivityRunInner&gt; object
     */
    public Observable<Page<ActivityRunInner>> listByPipelineRunNextAsync(final String nextPageLink) {
        return listByPipelineRunNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<ActivityRunInner>>, Page<ActivityRunInner>>() {
                @Override
                public Page<ActivityRunInner> call(ServiceResponse<Page<ActivityRunInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List activity runs based on input filter conditions.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ActivityRunInner&gt; object
     */
    public Observable<ServiceResponse<Page<ActivityRunInner>>> listByPipelineRunNextWithServiceResponseAsync(final String nextPageLink) {
        return listByPipelineRunNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<ActivityRunInner>>, Observable<ServiceResponse<Page<ActivityRunInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ActivityRunInner>>> call(ServiceResponse<Page<ActivityRunInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByPipelineRunNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List activity runs based on input filter conditions.
     *
    ServiceResponse<PageImpl<ActivityRunInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ActivityRunInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ActivityRunInner>>> listByPipelineRunNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByPipelineRunNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ActivityRunInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ActivityRunInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ActivityRunInner>> result = listByPipelineRunNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ActivityRunInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ActivityRunInner>> listByPipelineRunNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ActivityRunInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ActivityRunInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
