/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.datafactory.v2017_09_01_preview;

import com.microsoft.azure.arm.collection.SupportsCreating;
import rx.Completable;
import rx.Observable;
import com.microsoft.azure.management.datafactory.v2017_09_01_preview.implementation.TriggersInner;
import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.management.datafactory.v2017_09_01_preview.TriggerRun;

/**
 * Type representing Triggers.
 */
public interface Triggers extends SupportsCreating<TriggerResource.DefinitionStages.Blank>, HasInner<TriggersInner> {
    /**
     * Starts a trigger.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param triggerName The trigger name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable startAsync(String resourceGroupName, String factoryName, String triggerName);

    /**
     * Stops a trigger.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param triggerName The trigger name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable stopAsync(String resourceGroupName, String factoryName, String triggerName);

    /**
     * Gets a trigger.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param triggerName The trigger name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<TriggerResource> getAsync(String resourceGroupName, String factoryName, String triggerName);

    /**
     * Lists triggers.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<TriggerResource> listByFactoryAsync(final String resourceGroupName, final String factoryName);

    /**
     * Deletes a trigger.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param triggerName The trigger name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable deleteAsync(String resourceGroupName, String factoryName, String triggerName);

    /**
     * List trigger runs.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param triggerName The trigger name.
     * @param startTime Start time for trigger runs.
     * @param endTime End time for trigger runs.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<TriggerRun> listRunsAsync(final String resourceGroupName, final String factoryName, final String triggerName, final DateTime startTime, final DateTime endTime);

}
