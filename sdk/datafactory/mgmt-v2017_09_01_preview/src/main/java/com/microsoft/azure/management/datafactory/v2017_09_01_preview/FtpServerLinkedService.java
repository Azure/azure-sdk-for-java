/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.datafactory.v2017_09_01_preview;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.microsoft.rest.serializer.JsonFlatten;
import com.microsoft.azure.management.datafactory.v2017_09_01_preview.implementation.LinkedServiceInner;

/**
 * A FTP server Linked Service.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type", defaultImpl = FtpServerLinkedService.class)
@JsonTypeName("FtpServer")
@JsonFlatten
public class FtpServerLinkedService extends LinkedServiceInner {
    /**
     * Host name of the FTP server. Type: string (or Expression with resultType
     * string).
     */
    @JsonProperty(value = "typeProperties.host", required = true)
    private Object host;

    /**
     * The TCP port number that the FTP server uses to listen for client
     * connections. Default value is 21. Type: integer (or Expression with
     * resultType integer), minimum: 0.
     */
    @JsonProperty(value = "typeProperties.port")
    private Object port;

    /**
     * The authentication type to be used to connect to the FTP server.
     * Possible values include: 'Basic', 'Anonymous'.
     */
    @JsonProperty(value = "typeProperties.authenticationType")
    private FtpAuthenticationType authenticationType;

    /**
     * Username to logon the FTP server. Type: string (or Expression with
     * resultType string).
     */
    @JsonProperty(value = "typeProperties.userName")
    private Object userName;

    /**
     * Password to logon the FTP server.
     */
    @JsonProperty(value = "typeProperties.password")
    private SecretBase password;

    /**
     * The encrypted credential used for authentication. Credentials are
     * encrypted using the integration runtime credential manager. Type: string
     * (or Expression with resultType string).
     */
    @JsonProperty(value = "typeProperties.encryptedCredential")
    private Object encryptedCredential;

    /**
     * If true, connect to the FTP server over SSL/TLS channel. Default value
     * is true. Type: boolean (or Expression with resultType boolean).
     */
    @JsonProperty(value = "typeProperties.enableSsl")
    private Object enableSsl;

    /**
     * If true, validate the FTP server SSL certificate when connect over
     * SSL/TLS channel. Default value is true. Type: boolean (or Expression
     * with resultType boolean).
     */
    @JsonProperty(value = "typeProperties.enableServerCertificateValidation")
    private Object enableServerCertificateValidation;

    /**
     * Get host name of the FTP server. Type: string (or Expression with resultType string).
     *
     * @return the host value
     */
    public Object host() {
        return this.host;
    }

    /**
     * Set host name of the FTP server. Type: string (or Expression with resultType string).
     *
     * @param host the host value to set
     * @return the FtpServerLinkedService object itself.
     */
    public FtpServerLinkedService withHost(Object host) {
        this.host = host;
        return this;
    }

    /**
     * Get the TCP port number that the FTP server uses to listen for client connections. Default value is 21. Type: integer (or Expression with resultType integer), minimum: 0.
     *
     * @return the port value
     */
    public Object port() {
        return this.port;
    }

    /**
     * Set the TCP port number that the FTP server uses to listen for client connections. Default value is 21. Type: integer (or Expression with resultType integer), minimum: 0.
     *
     * @param port the port value to set
     * @return the FtpServerLinkedService object itself.
     */
    public FtpServerLinkedService withPort(Object port) {
        this.port = port;
        return this;
    }

    /**
     * Get the authentication type to be used to connect to the FTP server. Possible values include: 'Basic', 'Anonymous'.
     *
     * @return the authenticationType value
     */
    public FtpAuthenticationType authenticationType() {
        return this.authenticationType;
    }

    /**
     * Set the authentication type to be used to connect to the FTP server. Possible values include: 'Basic', 'Anonymous'.
     *
     * @param authenticationType the authenticationType value to set
     * @return the FtpServerLinkedService object itself.
     */
    public FtpServerLinkedService withAuthenticationType(FtpAuthenticationType authenticationType) {
        this.authenticationType = authenticationType;
        return this;
    }

    /**
     * Get username to logon the FTP server. Type: string (or Expression with resultType string).
     *
     * @return the userName value
     */
    public Object userName() {
        return this.userName;
    }

    /**
     * Set username to logon the FTP server. Type: string (or Expression with resultType string).
     *
     * @param userName the userName value to set
     * @return the FtpServerLinkedService object itself.
     */
    public FtpServerLinkedService withUserName(Object userName) {
        this.userName = userName;
        return this;
    }

    /**
     * Get password to logon the FTP server.
     *
     * @return the password value
     */
    public SecretBase password() {
        return this.password;
    }

    /**
     * Set password to logon the FTP server.
     *
     * @param password the password value to set
     * @return the FtpServerLinkedService object itself.
     */
    public FtpServerLinkedService withPassword(SecretBase password) {
        this.password = password;
        return this;
    }

    /**
     * Get the encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     *
     * @return the encryptedCredential value
     */
    public Object encryptedCredential() {
        return this.encryptedCredential;
    }

    /**
     * Set the encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     *
     * @param encryptedCredential the encryptedCredential value to set
     * @return the FtpServerLinkedService object itself.
     */
    public FtpServerLinkedService withEncryptedCredential(Object encryptedCredential) {
        this.encryptedCredential = encryptedCredential;
        return this;
    }

    /**
     * Get if true, connect to the FTP server over SSL/TLS channel. Default value is true. Type: boolean (or Expression with resultType boolean).
     *
     * @return the enableSsl value
     */
    public Object enableSsl() {
        return this.enableSsl;
    }

    /**
     * Set if true, connect to the FTP server over SSL/TLS channel. Default value is true. Type: boolean (or Expression with resultType boolean).
     *
     * @param enableSsl the enableSsl value to set
     * @return the FtpServerLinkedService object itself.
     */
    public FtpServerLinkedService withEnableSsl(Object enableSsl) {
        this.enableSsl = enableSsl;
        return this;
    }

    /**
     * Get if true, validate the FTP server SSL certificate when connect over SSL/TLS channel. Default value is true. Type: boolean (or Expression with resultType boolean).
     *
     * @return the enableServerCertificateValidation value
     */
    public Object enableServerCertificateValidation() {
        return this.enableServerCertificateValidation;
    }

    /**
     * Set if true, validate the FTP server SSL certificate when connect over SSL/TLS channel. Default value is true. Type: boolean (or Expression with resultType boolean).
     *
     * @param enableServerCertificateValidation the enableServerCertificateValidation value to set
     * @return the FtpServerLinkedService object itself.
     */
    public FtpServerLinkedService withEnableServerCertificateValidation(Object enableServerCertificateValidation) {
        this.enableServerCertificateValidation = enableServerCertificateValidation;
        return this;
    }

}
