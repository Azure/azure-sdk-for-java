/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.datafactory.v2017_09_01_preview;

import java.util.List;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.microsoft.rest.serializer.JsonFlatten;

/**
 * This activity is used for iterating over a collection and execute given
 * activities.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type", defaultImpl = ForEachActivity.class)
@JsonTypeName("ForEach")
@JsonFlatten
public class ForEachActivity extends ControlActivity {
    /**
     * Should the loop be executed in sequence or in parallel (max 50).
     */
    @JsonProperty(value = "typeProperties.isSequential")
    private Boolean isSequential;

    /**
     * Batch count to be used for controlling the number of parallel execution
     * (when isSequential is set to false).
     */
    @JsonProperty(value = "typeProperties.batchCount")
    private Integer batchCount;

    /**
     * Collection to iterate.
     */
    @JsonProperty(value = "typeProperties.items", required = true)
    private Expression items;

    /**
     * List of activities to execute .
     */
    @JsonProperty(value = "typeProperties.activities", required = true)
    private List<Activity> activities;

    /**
     * Get should the loop be executed in sequence or in parallel (max 50).
     *
     * @return the isSequential value
     */
    public Boolean isSequential() {
        return this.isSequential;
    }

    /**
     * Set should the loop be executed in sequence or in parallel (max 50).
     *
     * @param isSequential the isSequential value to set
     * @return the ForEachActivity object itself.
     */
    public ForEachActivity withIsSequential(Boolean isSequential) {
        this.isSequential = isSequential;
        return this;
    }

    /**
     * Get batch count to be used for controlling the number of parallel execution (when isSequential is set to false).
     *
     * @return the batchCount value
     */
    public Integer batchCount() {
        return this.batchCount;
    }

    /**
     * Set batch count to be used for controlling the number of parallel execution (when isSequential is set to false).
     *
     * @param batchCount the batchCount value to set
     * @return the ForEachActivity object itself.
     */
    public ForEachActivity withBatchCount(Integer batchCount) {
        this.batchCount = batchCount;
        return this;
    }

    /**
     * Get collection to iterate.
     *
     * @return the items value
     */
    public Expression items() {
        return this.items;
    }

    /**
     * Set collection to iterate.
     *
     * @param items the items value to set
     * @return the ForEachActivity object itself.
     */
    public ForEachActivity withItems(Expression items) {
        this.items = items;
        return this;
    }

    /**
     * Get list of activities to execute .
     *
     * @return the activities value
     */
    public List<Activity> activities() {
        return this.activities;
    }

    /**
     * Set list of activities to execute .
     *
     * @param activities the activities value to set
     * @return the ForEachActivity object itself.
     */
    public ForEachActivity withActivities(List<Activity> activities) {
        this.activities = activities;
        return this;
    }

}
