/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.datafactory.v2018_06_01;

import java.util.List;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.microsoft.rest.serializer.JsonFlatten;
import com.microsoft.azure.management.datafactory.v2018_06_01.implementation.TriggerInner;

/**
 * Trigger that allows the referenced pipeline to depend on other pipeline runs
 * based on runDimension Name/Value pairs. Upstream pipelines should declare
 * the same runDimension Name and their runs should have the values for those
 * runDimensions. The referenced pipeline run would be triggered if the values
 * for the runDimension match for all upstream pipeline runs.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type", defaultImpl = ChainingTrigger.class)
@JsonTypeName("ChainingTrigger")
@JsonFlatten
public class ChainingTrigger extends TriggerInner {
    /**
     * Pipeline for which runs are created when all upstream pipelines complete
     * successfully.
     */
    @JsonProperty(value = "pipeline", required = true)
    private TriggerPipelineReference pipeline;

    /**
     * Upstream Pipelines.
     */
    @JsonProperty(value = "typeProperties.dependsOn", required = true)
    private List<PipelineReference> dependsOn;

    /**
     * Run Dimension property that needs to be emitted by upstream pipelines.
     */
    @JsonProperty(value = "typeProperties.runDimension", required = true)
    private String runDimension;

    /**
     * Get pipeline for which runs are created when all upstream pipelines complete successfully.
     *
     * @return the pipeline value
     */
    public TriggerPipelineReference pipeline() {
        return this.pipeline;
    }

    /**
     * Set pipeline for which runs are created when all upstream pipelines complete successfully.
     *
     * @param pipeline the pipeline value to set
     * @return the ChainingTrigger object itself.
     */
    public ChainingTrigger withPipeline(TriggerPipelineReference pipeline) {
        this.pipeline = pipeline;
        return this;
    }

    /**
     * Get upstream Pipelines.
     *
     * @return the dependsOn value
     */
    public List<PipelineReference> dependsOn() {
        return this.dependsOn;
    }

    /**
     * Set upstream Pipelines.
     *
     * @param dependsOn the dependsOn value to set
     * @return the ChainingTrigger object itself.
     */
    public ChainingTrigger withDependsOn(List<PipelineReference> dependsOn) {
        this.dependsOn = dependsOn;
        return this;
    }

    /**
     * Get run Dimension property that needs to be emitted by upstream pipelines.
     *
     * @return the runDimension value
     */
    public String runDimension() {
        return this.runDimension;
    }

    /**
     * Set run Dimension property that needs to be emitted by upstream pipelines.
     *
     * @param runDimension the runDimension value to set
     * @return the ChainingTrigger object itself.
     */
    public ChainingTrigger withRunDimension(String runDimension) {
        this.runDimension = runDimension;
        return this;
    }

}
