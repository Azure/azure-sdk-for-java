/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.datafactory.v2018_06_01.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.management.datafactory.v2018_06_01.RunFilterParameters;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in ActivityRuns.
 */
public class ActivityRunsInner {
    /** The Retrofit service to perform REST calls. */
    private ActivityRunsService service;
    /** The service client containing this operation class. */
    private DataFactoryManagementClientImpl client;

    /**
     * Initializes an instance of ActivityRunsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ActivityRunsInner(Retrofit retrofit, DataFactoryManagementClientImpl client) {
        this.service = retrofit.create(ActivityRunsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for ActivityRuns to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ActivityRunsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.datafactory.v2018_06_01.ActivityRuns queryByPipelineRun" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/pipelineruns/{runId}/queryActivityruns")
        Observable<Response<ResponseBody>> queryByPipelineRun(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("factoryName") String factoryName, @Path("runId") String runId, @Query("api-version") String apiVersion, @Body RunFilterParameters filterParameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Query activity runs based on input filter conditions.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param runId The pipeline run identifier.
     * @param filterParameters Parameters to filter the activity runs.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ActivityRunsQueryResponseInner object if successful.
     */
    public ActivityRunsQueryResponseInner queryByPipelineRun(String resourceGroupName, String factoryName, String runId, RunFilterParameters filterParameters) {
        return queryByPipelineRunWithServiceResponseAsync(resourceGroupName, factoryName, runId, filterParameters).toBlocking().single().body();
    }

    /**
     * Query activity runs based on input filter conditions.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param runId The pipeline run identifier.
     * @param filterParameters Parameters to filter the activity runs.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ActivityRunsQueryResponseInner> queryByPipelineRunAsync(String resourceGroupName, String factoryName, String runId, RunFilterParameters filterParameters, final ServiceCallback<ActivityRunsQueryResponseInner> serviceCallback) {
        return ServiceFuture.fromResponse(queryByPipelineRunWithServiceResponseAsync(resourceGroupName, factoryName, runId, filterParameters), serviceCallback);
    }

    /**
     * Query activity runs based on input filter conditions.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param runId The pipeline run identifier.
     * @param filterParameters Parameters to filter the activity runs.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActivityRunsQueryResponseInner object
     */
    public Observable<ActivityRunsQueryResponseInner> queryByPipelineRunAsync(String resourceGroupName, String factoryName, String runId, RunFilterParameters filterParameters) {
        return queryByPipelineRunWithServiceResponseAsync(resourceGroupName, factoryName, runId, filterParameters).map(new Func1<ServiceResponse<ActivityRunsQueryResponseInner>, ActivityRunsQueryResponseInner>() {
            @Override
            public ActivityRunsQueryResponseInner call(ServiceResponse<ActivityRunsQueryResponseInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Query activity runs based on input filter conditions.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param runId The pipeline run identifier.
     * @param filterParameters Parameters to filter the activity runs.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActivityRunsQueryResponseInner object
     */
    public Observable<ServiceResponse<ActivityRunsQueryResponseInner>> queryByPipelineRunWithServiceResponseAsync(String resourceGroupName, String factoryName, String runId, RunFilterParameters filterParameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (factoryName == null) {
            throw new IllegalArgumentException("Parameter factoryName is required and cannot be null.");
        }
        if (runId == null) {
            throw new IllegalArgumentException("Parameter runId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (filterParameters == null) {
            throw new IllegalArgumentException("Parameter filterParameters is required and cannot be null.");
        }
        Validator.validate(filterParameters);
        return service.queryByPipelineRun(this.client.subscriptionId(), resourceGroupName, factoryName, runId, this.client.apiVersion(), filterParameters, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ActivityRunsQueryResponseInner>>>() {
                @Override
                public Observable<ServiceResponse<ActivityRunsQueryResponseInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ActivityRunsQueryResponseInner> clientResponse = queryByPipelineRunDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ActivityRunsQueryResponseInner> queryByPipelineRunDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ActivityRunsQueryResponseInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ActivityRunsQueryResponseInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
