/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.datafactory.v2018_06_01;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Parquet write settings.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type", defaultImpl = ParquetWriteSettings.class)
@JsonTypeName("ParquetWriteSettings")
public class ParquetWriteSettings extends FormatWriteSettings {
    /**
     * Limit the written file's row count to be smaller than or equal to the
     * specified count. Type: integer (or Expression with resultType integer).
     */
    @JsonProperty(value = "maxRowsPerFile")
    private Object maxRowsPerFile;

    /**
     * Specifies the file name pattern
     * &lt;fileNamePrefix&gt;_&lt;fileIndex&gt;.&lt;fileExtension&gt; when copy
     * from non-file based store without partitionOptions. Type: string (or
     * Expression with resultType string).
     */
    @JsonProperty(value = "fileNamePrefix")
    private Object fileNamePrefix;

    /**
     * Get limit the written file's row count to be smaller than or equal to the specified count. Type: integer (or Expression with resultType integer).
     *
     * @return the maxRowsPerFile value
     */
    public Object maxRowsPerFile() {
        return this.maxRowsPerFile;
    }

    /**
     * Set limit the written file's row count to be smaller than or equal to the specified count. Type: integer (or Expression with resultType integer).
     *
     * @param maxRowsPerFile the maxRowsPerFile value to set
     * @return the ParquetWriteSettings object itself.
     */
    public ParquetWriteSettings withMaxRowsPerFile(Object maxRowsPerFile) {
        this.maxRowsPerFile = maxRowsPerFile;
        return this;
    }

    /**
     * Get specifies the file name pattern &lt;fileNamePrefix&gt;_&lt;fileIndex&gt;.&lt;fileExtension&gt; when copy from non-file based store without partitionOptions. Type: string (or Expression with resultType string).
     *
     * @return the fileNamePrefix value
     */
    public Object fileNamePrefix() {
        return this.fileNamePrefix;
    }

    /**
     * Set specifies the file name pattern &lt;fileNamePrefix&gt;_&lt;fileIndex&gt;.&lt;fileExtension&gt; when copy from non-file based store without partitionOptions. Type: string (or Expression with resultType string).
     *
     * @param fileNamePrefix the fileNamePrefix value to set
     * @return the ParquetWriteSettings object itself.
     */
    public ParquetWriteSettings withFileNamePrefix(Object fileNamePrefix) {
        this.fileNamePrefix = fileNamePrefix;
        return this;
    }

}
