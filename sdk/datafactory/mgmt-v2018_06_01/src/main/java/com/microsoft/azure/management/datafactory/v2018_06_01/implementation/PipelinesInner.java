/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.datafactory.v2018_06_01.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Pipelines.
 */
public class PipelinesInner {
    /** The Retrofit service to perform REST calls. */
    private PipelinesService service;
    /** The service client containing this operation class. */
    private DataFactoryManagementClientImpl client;

    /**
     * Initializes an instance of PipelinesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public PipelinesInner(Retrofit retrofit, DataFactoryManagementClientImpl client) {
        this.service = retrofit.create(PipelinesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Pipelines to be
     * used by Retrofit to perform actually REST calls.
     */
    interface PipelinesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.datafactory.v2018_06_01.Pipelines listByFactory" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/pipelines")
        Observable<Response<ResponseBody>> listByFactory(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("factoryName") String factoryName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.datafactory.v2018_06_01.Pipelines createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/pipelines/{pipelineName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("factoryName") String factoryName, @Path("pipelineName") String pipelineName, @Query("api-version") String apiVersion, @Header("If-Match") String ifMatch, @Body PipelineResourceInner pipeline, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.datafactory.v2018_06_01.Pipelines get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/pipelines/{pipelineName}")
        Observable<Response<ResponseBody>> get(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("factoryName") String factoryName, @Path("pipelineName") String pipelineName, @Query("api-version") String apiVersion, @Header("If-None-Match") String ifNoneMatch, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.datafactory.v2018_06_01.Pipelines delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/pipelines/{pipelineName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("factoryName") String factoryName, @Path("pipelineName") String pipelineName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.datafactory.v2018_06_01.Pipelines createRun" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/pipelines/{pipelineName}/createRun")
        Observable<Response<ResponseBody>> createRun(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("factoryName") String factoryName, @Path("pipelineName") String pipelineName, @Query("api-version") String apiVersion, @Query("referencePipelineRunId") String referencePipelineRunId, @Query("isRecovery") Boolean isRecovery, @Query("startActivityName") String startActivityName, @Query("startFromFailure") Boolean startFromFailure, @Body Map<String, Object> parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.datafactory.v2018_06_01.Pipelines listByFactoryNext" })
        @GET
        Observable<Response<ResponseBody>> listByFactoryNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Lists pipelines.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PipelineResourceInner&gt; object if successful.
     */
    public PagedList<PipelineResourceInner> listByFactory(final String resourceGroupName, final String factoryName) {
        ServiceResponse<Page<PipelineResourceInner>> response = listByFactorySinglePageAsync(resourceGroupName, factoryName).toBlocking().single();
        return new PagedList<PipelineResourceInner>(response.body()) {
            @Override
            public Page<PipelineResourceInner> nextPage(String nextPageLink) {
                return listByFactoryNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists pipelines.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PipelineResourceInner>> listByFactoryAsync(final String resourceGroupName, final String factoryName, final ListOperationCallback<PipelineResourceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByFactorySinglePageAsync(resourceGroupName, factoryName),
            new Func1<String, Observable<ServiceResponse<Page<PipelineResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PipelineResourceInner>>> call(String nextPageLink) {
                    return listByFactoryNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists pipelines.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PipelineResourceInner&gt; object
     */
    public Observable<Page<PipelineResourceInner>> listByFactoryAsync(final String resourceGroupName, final String factoryName) {
        return listByFactoryWithServiceResponseAsync(resourceGroupName, factoryName)
            .map(new Func1<ServiceResponse<Page<PipelineResourceInner>>, Page<PipelineResourceInner>>() {
                @Override
                public Page<PipelineResourceInner> call(ServiceResponse<Page<PipelineResourceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists pipelines.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PipelineResourceInner&gt; object
     */
    public Observable<ServiceResponse<Page<PipelineResourceInner>>> listByFactoryWithServiceResponseAsync(final String resourceGroupName, final String factoryName) {
        return listByFactorySinglePageAsync(resourceGroupName, factoryName)
            .concatMap(new Func1<ServiceResponse<Page<PipelineResourceInner>>, Observable<ServiceResponse<Page<PipelineResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PipelineResourceInner>>> call(ServiceResponse<Page<PipelineResourceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByFactoryNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists pipelines.
     *
    ServiceResponse<PageImpl<PipelineResourceInner>> * @param resourceGroupName The resource group name.
    ServiceResponse<PageImpl<PipelineResourceInner>> * @param factoryName The factory name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PipelineResourceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PipelineResourceInner>>> listByFactorySinglePageAsync(final String resourceGroupName, final String factoryName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (factoryName == null) {
            throw new IllegalArgumentException("Parameter factoryName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByFactory(this.client.subscriptionId(), resourceGroupName, factoryName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PipelineResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PipelineResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<PipelineResourceInner>> result = listByFactoryDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PipelineResourceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<PipelineResourceInner>> listByFactoryDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<PipelineResourceInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<PipelineResourceInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Creates or updates a pipeline.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param pipelineName The pipeline name.
     * @param pipeline Pipeline resource definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PipelineResourceInner object if successful.
     */
    public PipelineResourceInner createOrUpdate(String resourceGroupName, String factoryName, String pipelineName, PipelineResourceInner pipeline) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, factoryName, pipelineName, pipeline).toBlocking().single().body();
    }

    /**
     * Creates or updates a pipeline.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param pipelineName The pipeline name.
     * @param pipeline Pipeline resource definition.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PipelineResourceInner> createOrUpdateAsync(String resourceGroupName, String factoryName, String pipelineName, PipelineResourceInner pipeline, final ServiceCallback<PipelineResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, factoryName, pipelineName, pipeline), serviceCallback);
    }

    /**
     * Creates or updates a pipeline.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param pipelineName The pipeline name.
     * @param pipeline Pipeline resource definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PipelineResourceInner object
     */
    public Observable<PipelineResourceInner> createOrUpdateAsync(String resourceGroupName, String factoryName, String pipelineName, PipelineResourceInner pipeline) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, factoryName, pipelineName, pipeline).map(new Func1<ServiceResponse<PipelineResourceInner>, PipelineResourceInner>() {
            @Override
            public PipelineResourceInner call(ServiceResponse<PipelineResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates a pipeline.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param pipelineName The pipeline name.
     * @param pipeline Pipeline resource definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PipelineResourceInner object
     */
    public Observable<ServiceResponse<PipelineResourceInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String factoryName, String pipelineName, PipelineResourceInner pipeline) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (factoryName == null) {
            throw new IllegalArgumentException("Parameter factoryName is required and cannot be null.");
        }
        if (pipelineName == null) {
            throw new IllegalArgumentException("Parameter pipelineName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (pipeline == null) {
            throw new IllegalArgumentException("Parameter pipeline is required and cannot be null.");
        }
        Validator.validate(pipeline);
        final String ifMatch = null;
        return service.createOrUpdate(this.client.subscriptionId(), resourceGroupName, factoryName, pipelineName, this.client.apiVersion(), ifMatch, pipeline, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PipelineResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<PipelineResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PipelineResourceInner> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Creates or updates a pipeline.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param pipelineName The pipeline name.
     * @param pipeline Pipeline resource definition.
     * @param ifMatch ETag of the pipeline entity.  Should only be specified for update, for which it should match existing entity or can be * for unconditional update.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PipelineResourceInner object if successful.
     */
    public PipelineResourceInner createOrUpdate(String resourceGroupName, String factoryName, String pipelineName, PipelineResourceInner pipeline, String ifMatch) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, factoryName, pipelineName, pipeline, ifMatch).toBlocking().single().body();
    }

    /**
     * Creates or updates a pipeline.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param pipelineName The pipeline name.
     * @param pipeline Pipeline resource definition.
     * @param ifMatch ETag of the pipeline entity.  Should only be specified for update, for which it should match existing entity or can be * for unconditional update.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PipelineResourceInner> createOrUpdateAsync(String resourceGroupName, String factoryName, String pipelineName, PipelineResourceInner pipeline, String ifMatch, final ServiceCallback<PipelineResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, factoryName, pipelineName, pipeline, ifMatch), serviceCallback);
    }

    /**
     * Creates or updates a pipeline.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param pipelineName The pipeline name.
     * @param pipeline Pipeline resource definition.
     * @param ifMatch ETag of the pipeline entity.  Should only be specified for update, for which it should match existing entity or can be * for unconditional update.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PipelineResourceInner object
     */
    public Observable<PipelineResourceInner> createOrUpdateAsync(String resourceGroupName, String factoryName, String pipelineName, PipelineResourceInner pipeline, String ifMatch) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, factoryName, pipelineName, pipeline, ifMatch).map(new Func1<ServiceResponse<PipelineResourceInner>, PipelineResourceInner>() {
            @Override
            public PipelineResourceInner call(ServiceResponse<PipelineResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates a pipeline.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param pipelineName The pipeline name.
     * @param pipeline Pipeline resource definition.
     * @param ifMatch ETag of the pipeline entity.  Should only be specified for update, for which it should match existing entity or can be * for unconditional update.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PipelineResourceInner object
     */
    public Observable<ServiceResponse<PipelineResourceInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String factoryName, String pipelineName, PipelineResourceInner pipeline, String ifMatch) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (factoryName == null) {
            throw new IllegalArgumentException("Parameter factoryName is required and cannot be null.");
        }
        if (pipelineName == null) {
            throw new IllegalArgumentException("Parameter pipelineName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (pipeline == null) {
            throw new IllegalArgumentException("Parameter pipeline is required and cannot be null.");
        }
        Validator.validate(pipeline);
        return service.createOrUpdate(this.client.subscriptionId(), resourceGroupName, factoryName, pipelineName, this.client.apiVersion(), ifMatch, pipeline, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PipelineResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<PipelineResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PipelineResourceInner> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PipelineResourceInner> createOrUpdateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PipelineResourceInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PipelineResourceInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets a pipeline.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param pipelineName The pipeline name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PipelineResourceInner object if successful.
     */
    public PipelineResourceInner get(String resourceGroupName, String factoryName, String pipelineName) {
        return getWithServiceResponseAsync(resourceGroupName, factoryName, pipelineName).toBlocking().single().body();
    }

    /**
     * Gets a pipeline.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param pipelineName The pipeline name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PipelineResourceInner> getAsync(String resourceGroupName, String factoryName, String pipelineName, final ServiceCallback<PipelineResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroupName, factoryName, pipelineName), serviceCallback);
    }

    /**
     * Gets a pipeline.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param pipelineName The pipeline name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PipelineResourceInner object
     */
    public Observable<PipelineResourceInner> getAsync(String resourceGroupName, String factoryName, String pipelineName) {
        return getWithServiceResponseAsync(resourceGroupName, factoryName, pipelineName).map(new Func1<ServiceResponse<PipelineResourceInner>, PipelineResourceInner>() {
            @Override
            public PipelineResourceInner call(ServiceResponse<PipelineResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets a pipeline.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param pipelineName The pipeline name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PipelineResourceInner object
     */
    public Observable<ServiceResponse<PipelineResourceInner>> getWithServiceResponseAsync(String resourceGroupName, String factoryName, String pipelineName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (factoryName == null) {
            throw new IllegalArgumentException("Parameter factoryName is required and cannot be null.");
        }
        if (pipelineName == null) {
            throw new IllegalArgumentException("Parameter pipelineName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String ifNoneMatch = null;
        return service.get(this.client.subscriptionId(), resourceGroupName, factoryName, pipelineName, this.client.apiVersion(), ifNoneMatch, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PipelineResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<PipelineResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PipelineResourceInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Gets a pipeline.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param pipelineName The pipeline name.
     * @param ifNoneMatch ETag of the pipeline entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PipelineResourceInner object if successful.
     */
    public PipelineResourceInner get(String resourceGroupName, String factoryName, String pipelineName, String ifNoneMatch) {
        return getWithServiceResponseAsync(resourceGroupName, factoryName, pipelineName, ifNoneMatch).toBlocking().single().body();
    }

    /**
     * Gets a pipeline.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param pipelineName The pipeline name.
     * @param ifNoneMatch ETag of the pipeline entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PipelineResourceInner> getAsync(String resourceGroupName, String factoryName, String pipelineName, String ifNoneMatch, final ServiceCallback<PipelineResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroupName, factoryName, pipelineName, ifNoneMatch), serviceCallback);
    }

    /**
     * Gets a pipeline.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param pipelineName The pipeline name.
     * @param ifNoneMatch ETag of the pipeline entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PipelineResourceInner object
     */
    public Observable<PipelineResourceInner> getAsync(String resourceGroupName, String factoryName, String pipelineName, String ifNoneMatch) {
        return getWithServiceResponseAsync(resourceGroupName, factoryName, pipelineName, ifNoneMatch).map(new Func1<ServiceResponse<PipelineResourceInner>, PipelineResourceInner>() {
            @Override
            public PipelineResourceInner call(ServiceResponse<PipelineResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets a pipeline.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param pipelineName The pipeline name.
     * @param ifNoneMatch ETag of the pipeline entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PipelineResourceInner object
     */
    public Observable<ServiceResponse<PipelineResourceInner>> getWithServiceResponseAsync(String resourceGroupName, String factoryName, String pipelineName, String ifNoneMatch) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (factoryName == null) {
            throw new IllegalArgumentException("Parameter factoryName is required and cannot be null.");
        }
        if (pipelineName == null) {
            throw new IllegalArgumentException("Parameter pipelineName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(this.client.subscriptionId(), resourceGroupName, factoryName, pipelineName, this.client.apiVersion(), ifNoneMatch, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PipelineResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<PipelineResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PipelineResourceInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PipelineResourceInner> getDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PipelineResourceInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PipelineResourceInner>() { }.getType())
                .register(304, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Deletes a pipeline.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param pipelineName The pipeline name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String factoryName, String pipelineName) {
        deleteWithServiceResponseAsync(resourceGroupName, factoryName, pipelineName).toBlocking().single().body();
    }

    /**
     * Deletes a pipeline.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param pipelineName The pipeline name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String factoryName, String pipelineName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, factoryName, pipelineName), serviceCallback);
    }

    /**
     * Deletes a pipeline.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param pipelineName The pipeline name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String factoryName, String pipelineName) {
        return deleteWithServiceResponseAsync(resourceGroupName, factoryName, pipelineName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes a pipeline.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param pipelineName The pipeline name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String factoryName, String pipelineName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (factoryName == null) {
            throw new IllegalArgumentException("Parameter factoryName is required and cannot be null.");
        }
        if (pipelineName == null) {
            throw new IllegalArgumentException("Parameter pipelineName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.delete(this.client.subscriptionId(), resourceGroupName, factoryName, pipelineName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Creates a run of a pipeline.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param pipelineName The pipeline name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CreateRunResponseInner object if successful.
     */
    public CreateRunResponseInner createRun(String resourceGroupName, String factoryName, String pipelineName) {
        return createRunWithServiceResponseAsync(resourceGroupName, factoryName, pipelineName).toBlocking().single().body();
    }

    /**
     * Creates a run of a pipeline.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param pipelineName The pipeline name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CreateRunResponseInner> createRunAsync(String resourceGroupName, String factoryName, String pipelineName, final ServiceCallback<CreateRunResponseInner> serviceCallback) {
        return ServiceFuture.fromResponse(createRunWithServiceResponseAsync(resourceGroupName, factoryName, pipelineName), serviceCallback);
    }

    /**
     * Creates a run of a pipeline.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param pipelineName The pipeline name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CreateRunResponseInner object
     */
    public Observable<CreateRunResponseInner> createRunAsync(String resourceGroupName, String factoryName, String pipelineName) {
        return createRunWithServiceResponseAsync(resourceGroupName, factoryName, pipelineName).map(new Func1<ServiceResponse<CreateRunResponseInner>, CreateRunResponseInner>() {
            @Override
            public CreateRunResponseInner call(ServiceResponse<CreateRunResponseInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates a run of a pipeline.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param pipelineName The pipeline name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CreateRunResponseInner object
     */
    public Observable<ServiceResponse<CreateRunResponseInner>> createRunWithServiceResponseAsync(String resourceGroupName, String factoryName, String pipelineName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (factoryName == null) {
            throw new IllegalArgumentException("Parameter factoryName is required and cannot be null.");
        }
        if (pipelineName == null) {
            throw new IllegalArgumentException("Parameter pipelineName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String referencePipelineRunId = null;
        final Boolean isRecovery = null;
        final String startActivityName = null;
        final Boolean startFromFailure = null;
        final Map<String, Object> parameters = new HashMap<>();
        return service.createRun(this.client.subscriptionId(), resourceGroupName, factoryName, pipelineName, this.client.apiVersion(), referencePipelineRunId, isRecovery, startActivityName, startFromFailure, parameters, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CreateRunResponseInner>>>() {
                @Override
                public Observable<ServiceResponse<CreateRunResponseInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CreateRunResponseInner> clientResponse = createRunDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Creates a run of a pipeline.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param pipelineName The pipeline name.
     * @param referencePipelineRunId The pipeline run identifier. If run ID is specified the parameters of the specified run will be used to create a new run.
     * @param isRecovery Recovery mode flag. If recovery mode is set to true, the specified referenced pipeline run and the new run will be grouped under the same groupId.
     * @param startActivityName In recovery mode, the rerun will start from this activity. If not specified, all activities will run.
     * @param startFromFailure In recovery mode, if set to true, the rerun will start from failed activities. The property will be used only if startActivityName is not specified.
     * @param parameters Parameters of the pipeline run. These parameters will be used only if the runId is not specified.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CreateRunResponseInner object if successful.
     */
    public CreateRunResponseInner createRun(String resourceGroupName, String factoryName, String pipelineName, String referencePipelineRunId, Boolean isRecovery, String startActivityName, Boolean startFromFailure, Map<String, Object> parameters) {
        return createRunWithServiceResponseAsync(resourceGroupName, factoryName, pipelineName, referencePipelineRunId, isRecovery, startActivityName, startFromFailure, parameters).toBlocking().single().body();
    }

    /**
     * Creates a run of a pipeline.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param pipelineName The pipeline name.
     * @param referencePipelineRunId The pipeline run identifier. If run ID is specified the parameters of the specified run will be used to create a new run.
     * @param isRecovery Recovery mode flag. If recovery mode is set to true, the specified referenced pipeline run and the new run will be grouped under the same groupId.
     * @param startActivityName In recovery mode, the rerun will start from this activity. If not specified, all activities will run.
     * @param startFromFailure In recovery mode, if set to true, the rerun will start from failed activities. The property will be used only if startActivityName is not specified.
     * @param parameters Parameters of the pipeline run. These parameters will be used only if the runId is not specified.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CreateRunResponseInner> createRunAsync(String resourceGroupName, String factoryName, String pipelineName, String referencePipelineRunId, Boolean isRecovery, String startActivityName, Boolean startFromFailure, Map<String, Object> parameters, final ServiceCallback<CreateRunResponseInner> serviceCallback) {
        return ServiceFuture.fromResponse(createRunWithServiceResponseAsync(resourceGroupName, factoryName, pipelineName, referencePipelineRunId, isRecovery, startActivityName, startFromFailure, parameters), serviceCallback);
    }

    /**
     * Creates a run of a pipeline.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param pipelineName The pipeline name.
     * @param referencePipelineRunId The pipeline run identifier. If run ID is specified the parameters of the specified run will be used to create a new run.
     * @param isRecovery Recovery mode flag. If recovery mode is set to true, the specified referenced pipeline run and the new run will be grouped under the same groupId.
     * @param startActivityName In recovery mode, the rerun will start from this activity. If not specified, all activities will run.
     * @param startFromFailure In recovery mode, if set to true, the rerun will start from failed activities. The property will be used only if startActivityName is not specified.
     * @param parameters Parameters of the pipeline run. These parameters will be used only if the runId is not specified.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CreateRunResponseInner object
     */
    public Observable<CreateRunResponseInner> createRunAsync(String resourceGroupName, String factoryName, String pipelineName, String referencePipelineRunId, Boolean isRecovery, String startActivityName, Boolean startFromFailure, Map<String, Object> parameters) {
        return createRunWithServiceResponseAsync(resourceGroupName, factoryName, pipelineName, referencePipelineRunId, isRecovery, startActivityName, startFromFailure, parameters).map(new Func1<ServiceResponse<CreateRunResponseInner>, CreateRunResponseInner>() {
            @Override
            public CreateRunResponseInner call(ServiceResponse<CreateRunResponseInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates a run of a pipeline.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param pipelineName The pipeline name.
     * @param referencePipelineRunId The pipeline run identifier. If run ID is specified the parameters of the specified run will be used to create a new run.
     * @param isRecovery Recovery mode flag. If recovery mode is set to true, the specified referenced pipeline run and the new run will be grouped under the same groupId.
     * @param startActivityName In recovery mode, the rerun will start from this activity. If not specified, all activities will run.
     * @param startFromFailure In recovery mode, if set to true, the rerun will start from failed activities. The property will be used only if startActivityName is not specified.
     * @param parameters Parameters of the pipeline run. These parameters will be used only if the runId is not specified.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CreateRunResponseInner object
     */
    public Observable<ServiceResponse<CreateRunResponseInner>> createRunWithServiceResponseAsync(String resourceGroupName, String factoryName, String pipelineName, String referencePipelineRunId, Boolean isRecovery, String startActivityName, Boolean startFromFailure, Map<String, Object> parameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (factoryName == null) {
            throw new IllegalArgumentException("Parameter factoryName is required and cannot be null.");
        }
        if (pipelineName == null) {
            throw new IllegalArgumentException("Parameter pipelineName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.createRun(this.client.subscriptionId(), resourceGroupName, factoryName, pipelineName, this.client.apiVersion(), referencePipelineRunId, isRecovery, startActivityName, startFromFailure, parameters, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CreateRunResponseInner>>>() {
                @Override
                public Observable<ServiceResponse<CreateRunResponseInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CreateRunResponseInner> clientResponse = createRunDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<CreateRunResponseInner> createRunDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<CreateRunResponseInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<CreateRunResponseInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Lists pipelines.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PipelineResourceInner&gt; object if successful.
     */
    public PagedList<PipelineResourceInner> listByFactoryNext(final String nextPageLink) {
        ServiceResponse<Page<PipelineResourceInner>> response = listByFactoryNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<PipelineResourceInner>(response.body()) {
            @Override
            public Page<PipelineResourceInner> nextPage(String nextPageLink) {
                return listByFactoryNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists pipelines.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PipelineResourceInner>> listByFactoryNextAsync(final String nextPageLink, final ServiceFuture<List<PipelineResourceInner>> serviceFuture, final ListOperationCallback<PipelineResourceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByFactoryNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<PipelineResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PipelineResourceInner>>> call(String nextPageLink) {
                    return listByFactoryNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists pipelines.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PipelineResourceInner&gt; object
     */
    public Observable<Page<PipelineResourceInner>> listByFactoryNextAsync(final String nextPageLink) {
        return listByFactoryNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<PipelineResourceInner>>, Page<PipelineResourceInner>>() {
                @Override
                public Page<PipelineResourceInner> call(ServiceResponse<Page<PipelineResourceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists pipelines.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PipelineResourceInner&gt; object
     */
    public Observable<ServiceResponse<Page<PipelineResourceInner>>> listByFactoryNextWithServiceResponseAsync(final String nextPageLink) {
        return listByFactoryNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<PipelineResourceInner>>, Observable<ServiceResponse<Page<PipelineResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PipelineResourceInner>>> call(ServiceResponse<Page<PipelineResourceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByFactoryNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists pipelines.
     *
    ServiceResponse<PageImpl<PipelineResourceInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PipelineResourceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PipelineResourceInner>>> listByFactoryNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByFactoryNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PipelineResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PipelineResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<PipelineResourceInner>> result = listByFactoryNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PipelineResourceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<PipelineResourceInner>> listByFactoryNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<PipelineResourceInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<PipelineResourceInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
