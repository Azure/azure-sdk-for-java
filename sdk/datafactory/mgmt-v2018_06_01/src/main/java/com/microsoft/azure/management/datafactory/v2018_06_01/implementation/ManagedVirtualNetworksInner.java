/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.datafactory.v2018_06_01.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in ManagedVirtualNetworks.
 */
public class ManagedVirtualNetworksInner {
    /** The Retrofit service to perform REST calls. */
    private ManagedVirtualNetworksService service;
    /** The service client containing this operation class. */
    private DataFactoryManagementClientImpl client;

    /**
     * Initializes an instance of ManagedVirtualNetworksInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ManagedVirtualNetworksInner(Retrofit retrofit, DataFactoryManagementClientImpl client) {
        this.service = retrofit.create(ManagedVirtualNetworksService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for ManagedVirtualNetworks to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ManagedVirtualNetworksService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.datafactory.v2018_06_01.ManagedVirtualNetworks listByFactory" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/managedVirtualNetworks")
        Observable<Response<ResponseBody>> listByFactory(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("factoryName") String factoryName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.datafactory.v2018_06_01.ManagedVirtualNetworks createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/managedVirtualNetworks/{managedVirtualNetworkName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("factoryName") String factoryName, @Path("managedVirtualNetworkName") String managedVirtualNetworkName, @Query("api-version") String apiVersion, @Header("If-Match") String ifMatch, @Header("accept-language") String acceptLanguage, @Body ManagedVirtualNetworkResourceInner managedVirtualNetwork, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.datafactory.v2018_06_01.ManagedVirtualNetworks get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/managedVirtualNetworks/{managedVirtualNetworkName}")
        Observable<Response<ResponseBody>> get(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("factoryName") String factoryName, @Path("managedVirtualNetworkName") String managedVirtualNetworkName, @Query("api-version") String apiVersion, @Header("If-None-Match") String ifNoneMatch, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.datafactory.v2018_06_01.ManagedVirtualNetworks listByFactoryNext" })
        @GET
        Observable<Response<ResponseBody>> listByFactoryNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Lists managed Virtual Networks.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ManagedVirtualNetworkResourceInner&gt; object if successful.
     */
    public PagedList<ManagedVirtualNetworkResourceInner> listByFactory(final String resourceGroupName, final String factoryName) {
        ServiceResponse<Page<ManagedVirtualNetworkResourceInner>> response = listByFactorySinglePageAsync(resourceGroupName, factoryName).toBlocking().single();
        return new PagedList<ManagedVirtualNetworkResourceInner>(response.body()) {
            @Override
            public Page<ManagedVirtualNetworkResourceInner> nextPage(String nextPageLink) {
                return listByFactoryNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists managed Virtual Networks.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ManagedVirtualNetworkResourceInner>> listByFactoryAsync(final String resourceGroupName, final String factoryName, final ListOperationCallback<ManagedVirtualNetworkResourceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByFactorySinglePageAsync(resourceGroupName, factoryName),
            new Func1<String, Observable<ServiceResponse<Page<ManagedVirtualNetworkResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ManagedVirtualNetworkResourceInner>>> call(String nextPageLink) {
                    return listByFactoryNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists managed Virtual Networks.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ManagedVirtualNetworkResourceInner&gt; object
     */
    public Observable<Page<ManagedVirtualNetworkResourceInner>> listByFactoryAsync(final String resourceGroupName, final String factoryName) {
        return listByFactoryWithServiceResponseAsync(resourceGroupName, factoryName)
            .map(new Func1<ServiceResponse<Page<ManagedVirtualNetworkResourceInner>>, Page<ManagedVirtualNetworkResourceInner>>() {
                @Override
                public Page<ManagedVirtualNetworkResourceInner> call(ServiceResponse<Page<ManagedVirtualNetworkResourceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists managed Virtual Networks.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ManagedVirtualNetworkResourceInner&gt; object
     */
    public Observable<ServiceResponse<Page<ManagedVirtualNetworkResourceInner>>> listByFactoryWithServiceResponseAsync(final String resourceGroupName, final String factoryName) {
        return listByFactorySinglePageAsync(resourceGroupName, factoryName)
            .concatMap(new Func1<ServiceResponse<Page<ManagedVirtualNetworkResourceInner>>, Observable<ServiceResponse<Page<ManagedVirtualNetworkResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ManagedVirtualNetworkResourceInner>>> call(ServiceResponse<Page<ManagedVirtualNetworkResourceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByFactoryNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists managed Virtual Networks.
     *
    ServiceResponse<PageImpl<ManagedVirtualNetworkResourceInner>> * @param resourceGroupName The resource group name.
    ServiceResponse<PageImpl<ManagedVirtualNetworkResourceInner>> * @param factoryName The factory name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ManagedVirtualNetworkResourceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ManagedVirtualNetworkResourceInner>>> listByFactorySinglePageAsync(final String resourceGroupName, final String factoryName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (factoryName == null) {
            throw new IllegalArgumentException("Parameter factoryName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByFactory(this.client.subscriptionId(), resourceGroupName, factoryName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ManagedVirtualNetworkResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ManagedVirtualNetworkResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ManagedVirtualNetworkResourceInner>> result = listByFactoryDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ManagedVirtualNetworkResourceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ManagedVirtualNetworkResourceInner>> listByFactoryDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ManagedVirtualNetworkResourceInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ManagedVirtualNetworkResourceInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Creates or updates a managed Virtual Network.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param managedVirtualNetworkName Managed virtual network name
     * @param properties Managed Virtual Network properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ManagedVirtualNetworkResourceInner object if successful.
     */
    public ManagedVirtualNetworkResourceInner createOrUpdate(String resourceGroupName, String factoryName, String managedVirtualNetworkName, ManagedVirtualNetworkInner properties) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, factoryName, managedVirtualNetworkName, properties).toBlocking().single().body();
    }

    /**
     * Creates or updates a managed Virtual Network.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param managedVirtualNetworkName Managed virtual network name
     * @param properties Managed Virtual Network properties.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ManagedVirtualNetworkResourceInner> createOrUpdateAsync(String resourceGroupName, String factoryName, String managedVirtualNetworkName, ManagedVirtualNetworkInner properties, final ServiceCallback<ManagedVirtualNetworkResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, factoryName, managedVirtualNetworkName, properties), serviceCallback);
    }

    /**
     * Creates or updates a managed Virtual Network.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param managedVirtualNetworkName Managed virtual network name
     * @param properties Managed Virtual Network properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ManagedVirtualNetworkResourceInner object
     */
    public Observable<ManagedVirtualNetworkResourceInner> createOrUpdateAsync(String resourceGroupName, String factoryName, String managedVirtualNetworkName, ManagedVirtualNetworkInner properties) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, factoryName, managedVirtualNetworkName, properties).map(new Func1<ServiceResponse<ManagedVirtualNetworkResourceInner>, ManagedVirtualNetworkResourceInner>() {
            @Override
            public ManagedVirtualNetworkResourceInner call(ServiceResponse<ManagedVirtualNetworkResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates a managed Virtual Network.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param managedVirtualNetworkName Managed virtual network name
     * @param properties Managed Virtual Network properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ManagedVirtualNetworkResourceInner object
     */
    public Observable<ServiceResponse<ManagedVirtualNetworkResourceInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String factoryName, String managedVirtualNetworkName, ManagedVirtualNetworkInner properties) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (factoryName == null) {
            throw new IllegalArgumentException("Parameter factoryName is required and cannot be null.");
        }
        if (managedVirtualNetworkName == null) {
            throw new IllegalArgumentException("Parameter managedVirtualNetworkName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (properties == null) {
            throw new IllegalArgumentException("Parameter properties is required and cannot be null.");
        }
        Validator.validate(properties);
        final String ifMatch = null;
        ManagedVirtualNetworkResourceInner managedVirtualNetwork = new ManagedVirtualNetworkResourceInner();
        managedVirtualNetwork.withProperties(properties);
        return service.createOrUpdate(this.client.subscriptionId(), resourceGroupName, factoryName, managedVirtualNetworkName, this.client.apiVersion(), ifMatch, this.client.acceptLanguage(), managedVirtualNetwork, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ManagedVirtualNetworkResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<ManagedVirtualNetworkResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ManagedVirtualNetworkResourceInner> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Creates or updates a managed Virtual Network.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param managedVirtualNetworkName Managed virtual network name
     * @param properties Managed Virtual Network properties.
     * @param ifMatch ETag of the managed Virtual Network entity. Should only be specified for update, for which it should match existing entity or can be * for unconditional update.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ManagedVirtualNetworkResourceInner object if successful.
     */
    public ManagedVirtualNetworkResourceInner createOrUpdate(String resourceGroupName, String factoryName, String managedVirtualNetworkName, ManagedVirtualNetworkInner properties, String ifMatch) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, factoryName, managedVirtualNetworkName, properties, ifMatch).toBlocking().single().body();
    }

    /**
     * Creates or updates a managed Virtual Network.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param managedVirtualNetworkName Managed virtual network name
     * @param properties Managed Virtual Network properties.
     * @param ifMatch ETag of the managed Virtual Network entity. Should only be specified for update, for which it should match existing entity or can be * for unconditional update.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ManagedVirtualNetworkResourceInner> createOrUpdateAsync(String resourceGroupName, String factoryName, String managedVirtualNetworkName, ManagedVirtualNetworkInner properties, String ifMatch, final ServiceCallback<ManagedVirtualNetworkResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, factoryName, managedVirtualNetworkName, properties, ifMatch), serviceCallback);
    }

    /**
     * Creates or updates a managed Virtual Network.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param managedVirtualNetworkName Managed virtual network name
     * @param properties Managed Virtual Network properties.
     * @param ifMatch ETag of the managed Virtual Network entity. Should only be specified for update, for which it should match existing entity or can be * for unconditional update.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ManagedVirtualNetworkResourceInner object
     */
    public Observable<ManagedVirtualNetworkResourceInner> createOrUpdateAsync(String resourceGroupName, String factoryName, String managedVirtualNetworkName, ManagedVirtualNetworkInner properties, String ifMatch) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, factoryName, managedVirtualNetworkName, properties, ifMatch).map(new Func1<ServiceResponse<ManagedVirtualNetworkResourceInner>, ManagedVirtualNetworkResourceInner>() {
            @Override
            public ManagedVirtualNetworkResourceInner call(ServiceResponse<ManagedVirtualNetworkResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates a managed Virtual Network.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param managedVirtualNetworkName Managed virtual network name
     * @param properties Managed Virtual Network properties.
     * @param ifMatch ETag of the managed Virtual Network entity. Should only be specified for update, for which it should match existing entity or can be * for unconditional update.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ManagedVirtualNetworkResourceInner object
     */
    public Observable<ServiceResponse<ManagedVirtualNetworkResourceInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String factoryName, String managedVirtualNetworkName, ManagedVirtualNetworkInner properties, String ifMatch) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (factoryName == null) {
            throw new IllegalArgumentException("Parameter factoryName is required and cannot be null.");
        }
        if (managedVirtualNetworkName == null) {
            throw new IllegalArgumentException("Parameter managedVirtualNetworkName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (properties == null) {
            throw new IllegalArgumentException("Parameter properties is required and cannot be null.");
        }
        Validator.validate(properties);
        ManagedVirtualNetworkResourceInner managedVirtualNetwork = new ManagedVirtualNetworkResourceInner();
        managedVirtualNetwork.withProperties(properties);
        return service.createOrUpdate(this.client.subscriptionId(), resourceGroupName, factoryName, managedVirtualNetworkName, this.client.apiVersion(), ifMatch, this.client.acceptLanguage(), managedVirtualNetwork, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ManagedVirtualNetworkResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<ManagedVirtualNetworkResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ManagedVirtualNetworkResourceInner> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ManagedVirtualNetworkResourceInner> createOrUpdateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ManagedVirtualNetworkResourceInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ManagedVirtualNetworkResourceInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets a managed Virtual Network.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param managedVirtualNetworkName Managed virtual network name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ManagedVirtualNetworkResourceInner object if successful.
     */
    public ManagedVirtualNetworkResourceInner get(String resourceGroupName, String factoryName, String managedVirtualNetworkName) {
        return getWithServiceResponseAsync(resourceGroupName, factoryName, managedVirtualNetworkName).toBlocking().single().body();
    }

    /**
     * Gets a managed Virtual Network.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param managedVirtualNetworkName Managed virtual network name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ManagedVirtualNetworkResourceInner> getAsync(String resourceGroupName, String factoryName, String managedVirtualNetworkName, final ServiceCallback<ManagedVirtualNetworkResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroupName, factoryName, managedVirtualNetworkName), serviceCallback);
    }

    /**
     * Gets a managed Virtual Network.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param managedVirtualNetworkName Managed virtual network name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ManagedVirtualNetworkResourceInner object
     */
    public Observable<ManagedVirtualNetworkResourceInner> getAsync(String resourceGroupName, String factoryName, String managedVirtualNetworkName) {
        return getWithServiceResponseAsync(resourceGroupName, factoryName, managedVirtualNetworkName).map(new Func1<ServiceResponse<ManagedVirtualNetworkResourceInner>, ManagedVirtualNetworkResourceInner>() {
            @Override
            public ManagedVirtualNetworkResourceInner call(ServiceResponse<ManagedVirtualNetworkResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets a managed Virtual Network.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param managedVirtualNetworkName Managed virtual network name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ManagedVirtualNetworkResourceInner object
     */
    public Observable<ServiceResponse<ManagedVirtualNetworkResourceInner>> getWithServiceResponseAsync(String resourceGroupName, String factoryName, String managedVirtualNetworkName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (factoryName == null) {
            throw new IllegalArgumentException("Parameter factoryName is required and cannot be null.");
        }
        if (managedVirtualNetworkName == null) {
            throw new IllegalArgumentException("Parameter managedVirtualNetworkName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String ifNoneMatch = null;
        return service.get(this.client.subscriptionId(), resourceGroupName, factoryName, managedVirtualNetworkName, this.client.apiVersion(), ifNoneMatch, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ManagedVirtualNetworkResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<ManagedVirtualNetworkResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ManagedVirtualNetworkResourceInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Gets a managed Virtual Network.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param managedVirtualNetworkName Managed virtual network name
     * @param ifNoneMatch ETag of the managed Virtual Network entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ManagedVirtualNetworkResourceInner object if successful.
     */
    public ManagedVirtualNetworkResourceInner get(String resourceGroupName, String factoryName, String managedVirtualNetworkName, String ifNoneMatch) {
        return getWithServiceResponseAsync(resourceGroupName, factoryName, managedVirtualNetworkName, ifNoneMatch).toBlocking().single().body();
    }

    /**
     * Gets a managed Virtual Network.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param managedVirtualNetworkName Managed virtual network name
     * @param ifNoneMatch ETag of the managed Virtual Network entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ManagedVirtualNetworkResourceInner> getAsync(String resourceGroupName, String factoryName, String managedVirtualNetworkName, String ifNoneMatch, final ServiceCallback<ManagedVirtualNetworkResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroupName, factoryName, managedVirtualNetworkName, ifNoneMatch), serviceCallback);
    }

    /**
     * Gets a managed Virtual Network.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param managedVirtualNetworkName Managed virtual network name
     * @param ifNoneMatch ETag of the managed Virtual Network entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ManagedVirtualNetworkResourceInner object
     */
    public Observable<ManagedVirtualNetworkResourceInner> getAsync(String resourceGroupName, String factoryName, String managedVirtualNetworkName, String ifNoneMatch) {
        return getWithServiceResponseAsync(resourceGroupName, factoryName, managedVirtualNetworkName, ifNoneMatch).map(new Func1<ServiceResponse<ManagedVirtualNetworkResourceInner>, ManagedVirtualNetworkResourceInner>() {
            @Override
            public ManagedVirtualNetworkResourceInner call(ServiceResponse<ManagedVirtualNetworkResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets a managed Virtual Network.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param managedVirtualNetworkName Managed virtual network name
     * @param ifNoneMatch ETag of the managed Virtual Network entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ManagedVirtualNetworkResourceInner object
     */
    public Observable<ServiceResponse<ManagedVirtualNetworkResourceInner>> getWithServiceResponseAsync(String resourceGroupName, String factoryName, String managedVirtualNetworkName, String ifNoneMatch) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (factoryName == null) {
            throw new IllegalArgumentException("Parameter factoryName is required and cannot be null.");
        }
        if (managedVirtualNetworkName == null) {
            throw new IllegalArgumentException("Parameter managedVirtualNetworkName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(this.client.subscriptionId(), resourceGroupName, factoryName, managedVirtualNetworkName, this.client.apiVersion(), ifNoneMatch, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ManagedVirtualNetworkResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<ManagedVirtualNetworkResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ManagedVirtualNetworkResourceInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ManagedVirtualNetworkResourceInner> getDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ManagedVirtualNetworkResourceInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ManagedVirtualNetworkResourceInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Lists managed Virtual Networks.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ManagedVirtualNetworkResourceInner&gt; object if successful.
     */
    public PagedList<ManagedVirtualNetworkResourceInner> listByFactoryNext(final String nextPageLink) {
        ServiceResponse<Page<ManagedVirtualNetworkResourceInner>> response = listByFactoryNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<ManagedVirtualNetworkResourceInner>(response.body()) {
            @Override
            public Page<ManagedVirtualNetworkResourceInner> nextPage(String nextPageLink) {
                return listByFactoryNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists managed Virtual Networks.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ManagedVirtualNetworkResourceInner>> listByFactoryNextAsync(final String nextPageLink, final ServiceFuture<List<ManagedVirtualNetworkResourceInner>> serviceFuture, final ListOperationCallback<ManagedVirtualNetworkResourceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByFactoryNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<ManagedVirtualNetworkResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ManagedVirtualNetworkResourceInner>>> call(String nextPageLink) {
                    return listByFactoryNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists managed Virtual Networks.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ManagedVirtualNetworkResourceInner&gt; object
     */
    public Observable<Page<ManagedVirtualNetworkResourceInner>> listByFactoryNextAsync(final String nextPageLink) {
        return listByFactoryNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<ManagedVirtualNetworkResourceInner>>, Page<ManagedVirtualNetworkResourceInner>>() {
                @Override
                public Page<ManagedVirtualNetworkResourceInner> call(ServiceResponse<Page<ManagedVirtualNetworkResourceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists managed Virtual Networks.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ManagedVirtualNetworkResourceInner&gt; object
     */
    public Observable<ServiceResponse<Page<ManagedVirtualNetworkResourceInner>>> listByFactoryNextWithServiceResponseAsync(final String nextPageLink) {
        return listByFactoryNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<ManagedVirtualNetworkResourceInner>>, Observable<ServiceResponse<Page<ManagedVirtualNetworkResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ManagedVirtualNetworkResourceInner>>> call(ServiceResponse<Page<ManagedVirtualNetworkResourceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByFactoryNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists managed Virtual Networks.
     *
    ServiceResponse<PageImpl<ManagedVirtualNetworkResourceInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ManagedVirtualNetworkResourceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ManagedVirtualNetworkResourceInner>>> listByFactoryNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByFactoryNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ManagedVirtualNetworkResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ManagedVirtualNetworkResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ManagedVirtualNetworkResourceInner>> result = listByFactoryNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ManagedVirtualNetworkResourceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ManagedVirtualNetworkResourceInner>> listByFactoryNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ManagedVirtualNetworkResourceInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ManagedVirtualNetworkResourceInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
