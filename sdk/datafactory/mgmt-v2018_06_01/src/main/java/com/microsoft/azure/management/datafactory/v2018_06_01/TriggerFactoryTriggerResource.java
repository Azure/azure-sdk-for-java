/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.datafactory.v2018_06_01;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.management.datafactory.v2018_06_01.implementation.TriggerResourceInner;
import com.microsoft.azure.arm.model.Indexable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.datafactory.v2018_06_01.implementation.DataFactoryManager;
import org.joda.time.DateTime;

/**
 * Type representing TriggerFactoryTriggerResource.
 */
public interface TriggerFactoryTriggerResource extends HasInner<TriggerResourceInner>, Indexable, Updatable<TriggerFactoryTriggerResource.Update>, HasManager<DataFactoryManager> {
    /**
     * @return the etag value.
     */
    String etag();

    /**
     * @return the id value.
     */
    String id();

    /**
     * @return the name value.
     */
    String name();

    /**
     * @return the properties value.
     */
    TriggerInner properties();

    /**
     * @return the type value.
     */
    String type();

    /**
     * The entirety of the TriggerFactoryTriggerResource definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithTrigger, DefinitionStages.WithEndTime, DefinitionStages.WithMaxConcurrency, DefinitionStages.WithStartTime, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of TriggerFactoryTriggerResource definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a TriggerFactoryTriggerResource definition.
         */
        interface Blank extends WithTrigger {
        }

        /**
         * The stage of the triggerfactorytriggerresource definition allowing to specify Trigger.
         */
        interface WithTrigger {
           /**
            * Specifies resourceGroupName, factoryName, triggerName.
            * @param resourceGroupName The resource group name
            * @param factoryName The factory name
            * @param triggerName The trigger name
            * @return the next definition stage
            */
            WithEndTime withExistingTrigger(String resourceGroupName, String factoryName, String triggerName);
        }

        /**
         * The stage of the triggerfactorytriggerresource definition allowing to specify EndTime.
         */
        interface WithEndTime {
           /**
            * Specifies endTime.
            * @param endTime The end time for the time period for which restatement is initiated. Only UTC time is currently supported
            * @return the next definition stage
            */
            WithMaxConcurrency withEndTime(DateTime endTime);
        }

        /**
         * The stage of the triggerfactorytriggerresource definition allowing to specify MaxConcurrency.
         */
        interface WithMaxConcurrency {
           /**
            * Specifies maxConcurrency.
            * @param maxConcurrency The max number of parallel time windows (ready for execution) for which a rerun is triggered
            * @return the next definition stage
            */
            WithStartTime withMaxConcurrency(int maxConcurrency);
        }

        /**
         * The stage of the triggerfactorytriggerresource definition allowing to specify StartTime.
         */
        interface WithStartTime {
           /**
            * Specifies startTime.
            * @param startTime The start time for the time period for which restatement is initiated. Only UTC time is currently supported
            * @return the next definition stage
            */
            WithCreate withStartTime(DateTime startTime);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<TriggerFactoryTriggerResource> {
        }
    }
    /**
     * The template for a TriggerFactoryTriggerResource update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<TriggerFactoryTriggerResource> {
    }

    /**
     * Grouping of TriggerFactoryTriggerResource update stages.
     */
    interface UpdateStages {
    }
}
