/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.datafactory.v2018_06_01;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.microsoft.rest.serializer.JsonFlatten;

/**
 * Execute data flow activity.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type", defaultImpl = ExecuteDataFlowActivity.class)
@JsonTypeName("ExecuteDataFlow")
@JsonFlatten
public class ExecuteDataFlowActivity extends ExecutionActivity {
    /**
     * Data flow reference.
     */
    @JsonProperty(value = "typeProperties.dataFlow", required = true)
    private DataFlowReference dataFlow;

    /**
     * Staging info for execute data flow activity.
     */
    @JsonProperty(value = "typeProperties.staging")
    private DataFlowStagingInfo staging;

    /**
     * The integration runtime reference.
     */
    @JsonProperty(value = "typeProperties.integrationRuntime")
    private IntegrationRuntimeReference integrationRuntime;

    /**
     * Compute properties for data flow activity.
     */
    @JsonProperty(value = "typeProperties.compute")
    private ExecuteDataFlowActivityTypePropertiesCompute compute;

    /**
     * Trace level setting used for data flow monitoring output. Supported
     * values are: 'coarse', 'fine', and 'none'. Type: string (or Expression
     * with resultType string).
     */
    @JsonProperty(value = "typeProperties.traceLevel")
    private Object traceLevel;

    /**
     * Continue on error setting used for data flow execution. Enables
     * processing to continue if a sink fails. Type: boolean (or Expression
     * with resultType boolean).
     */
    @JsonProperty(value = "typeProperties.continueOnError")
    private Object continueOnError;

    /**
     * Concurrent run setting used for data flow execution. Allows sinks with
     * the same save order to be processed concurrently. Type: boolean (or
     * Expression with resultType boolean).
     */
    @JsonProperty(value = "typeProperties.runConcurrently")
    private Object runConcurrently;

    /**
     * Get data flow reference.
     *
     * @return the dataFlow value
     */
    public DataFlowReference dataFlow() {
        return this.dataFlow;
    }

    /**
     * Set data flow reference.
     *
     * @param dataFlow the dataFlow value to set
     * @return the ExecuteDataFlowActivity object itself.
     */
    public ExecuteDataFlowActivity withDataFlow(DataFlowReference dataFlow) {
        this.dataFlow = dataFlow;
        return this;
    }

    /**
     * Get staging info for execute data flow activity.
     *
     * @return the staging value
     */
    public DataFlowStagingInfo staging() {
        return this.staging;
    }

    /**
     * Set staging info for execute data flow activity.
     *
     * @param staging the staging value to set
     * @return the ExecuteDataFlowActivity object itself.
     */
    public ExecuteDataFlowActivity withStaging(DataFlowStagingInfo staging) {
        this.staging = staging;
        return this;
    }

    /**
     * Get the integration runtime reference.
     *
     * @return the integrationRuntime value
     */
    public IntegrationRuntimeReference integrationRuntime() {
        return this.integrationRuntime;
    }

    /**
     * Set the integration runtime reference.
     *
     * @param integrationRuntime the integrationRuntime value to set
     * @return the ExecuteDataFlowActivity object itself.
     */
    public ExecuteDataFlowActivity withIntegrationRuntime(IntegrationRuntimeReference integrationRuntime) {
        this.integrationRuntime = integrationRuntime;
        return this;
    }

    /**
     * Get compute properties for data flow activity.
     *
     * @return the compute value
     */
    public ExecuteDataFlowActivityTypePropertiesCompute compute() {
        return this.compute;
    }

    /**
     * Set compute properties for data flow activity.
     *
     * @param compute the compute value to set
     * @return the ExecuteDataFlowActivity object itself.
     */
    public ExecuteDataFlowActivity withCompute(ExecuteDataFlowActivityTypePropertiesCompute compute) {
        this.compute = compute;
        return this;
    }

    /**
     * Get trace level setting used for data flow monitoring output. Supported values are: 'coarse', 'fine', and 'none'. Type: string (or Expression with resultType string).
     *
     * @return the traceLevel value
     */
    public Object traceLevel() {
        return this.traceLevel;
    }

    /**
     * Set trace level setting used for data flow monitoring output. Supported values are: 'coarse', 'fine', and 'none'. Type: string (or Expression with resultType string).
     *
     * @param traceLevel the traceLevel value to set
     * @return the ExecuteDataFlowActivity object itself.
     */
    public ExecuteDataFlowActivity withTraceLevel(Object traceLevel) {
        this.traceLevel = traceLevel;
        return this;
    }

    /**
     * Get continue on error setting used for data flow execution. Enables processing to continue if a sink fails. Type: boolean (or Expression with resultType boolean).
     *
     * @return the continueOnError value
     */
    public Object continueOnError() {
        return this.continueOnError;
    }

    /**
     * Set continue on error setting used for data flow execution. Enables processing to continue if a sink fails. Type: boolean (or Expression with resultType boolean).
     *
     * @param continueOnError the continueOnError value to set
     * @return the ExecuteDataFlowActivity object itself.
     */
    public ExecuteDataFlowActivity withContinueOnError(Object continueOnError) {
        this.continueOnError = continueOnError;
        return this;
    }

    /**
     * Get concurrent run setting used for data flow execution. Allows sinks with the same save order to be processed concurrently. Type: boolean (or Expression with resultType boolean).
     *
     * @return the runConcurrently value
     */
    public Object runConcurrently() {
        return this.runConcurrently;
    }

    /**
     * Set concurrent run setting used for data flow execution. Allows sinks with the same save order to be processed concurrently. Type: boolean (or Expression with resultType boolean).
     *
     * @param runConcurrently the runConcurrently value to set
     * @return the ExecuteDataFlowActivity object itself.
     */
    public ExecuteDataFlowActivity withRunConcurrently(Object runConcurrently) {
        this.runConcurrently = runConcurrently;
        return this;
    }

}
