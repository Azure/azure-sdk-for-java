/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.datafactory.v2018_06_01.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in DataFlows.
 */
public class DataFlowsInner {
    /** The Retrofit service to perform REST calls. */
    private DataFlowsService service;
    /** The service client containing this operation class. */
    private DataFactoryManagementClientImpl client;

    /**
     * Initializes an instance of DataFlowsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public DataFlowsInner(Retrofit retrofit, DataFactoryManagementClientImpl client) {
        this.service = retrofit.create(DataFlowsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for DataFlows to be
     * used by Retrofit to perform actually REST calls.
     */
    interface DataFlowsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.datafactory.v2018_06_01.DataFlows createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/dataflows/{dataFlowName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("factoryName") String factoryName, @Path("dataFlowName") String dataFlowName, @Query("api-version") String apiVersion, @Header("If-Match") String ifMatch, @Header("accept-language") String acceptLanguage, @Body DataFlowResourceInner dataFlow, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.datafactory.v2018_06_01.DataFlows get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/dataflows/{dataFlowName}")
        Observable<Response<ResponseBody>> get(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("factoryName") String factoryName, @Path("dataFlowName") String dataFlowName, @Query("api-version") String apiVersion, @Header("If-None-Match") String ifNoneMatch, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.datafactory.v2018_06_01.DataFlows delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/dataflows/{dataFlowName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("factoryName") String factoryName, @Path("dataFlowName") String dataFlowName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.datafactory.v2018_06_01.DataFlows listByFactory" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/dataflows")
        Observable<Response<ResponseBody>> listByFactory(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("factoryName") String factoryName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.datafactory.v2018_06_01.DataFlows listByFactoryNext" })
        @GET
        Observable<Response<ResponseBody>> listByFactoryNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Creates or updates a data flow.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param dataFlowName The data flow name.
     * @param properties Data flow properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DataFlowResourceInner object if successful.
     */
    public DataFlowResourceInner createOrUpdate(String resourceGroupName, String factoryName, String dataFlowName, DataFlowInner properties) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, factoryName, dataFlowName, properties).toBlocking().single().body();
    }

    /**
     * Creates or updates a data flow.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param dataFlowName The data flow name.
     * @param properties Data flow properties.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DataFlowResourceInner> createOrUpdateAsync(String resourceGroupName, String factoryName, String dataFlowName, DataFlowInner properties, final ServiceCallback<DataFlowResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, factoryName, dataFlowName, properties), serviceCallback);
    }

    /**
     * Creates or updates a data flow.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param dataFlowName The data flow name.
     * @param properties Data flow properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DataFlowResourceInner object
     */
    public Observable<DataFlowResourceInner> createOrUpdateAsync(String resourceGroupName, String factoryName, String dataFlowName, DataFlowInner properties) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, factoryName, dataFlowName, properties).map(new Func1<ServiceResponse<DataFlowResourceInner>, DataFlowResourceInner>() {
            @Override
            public DataFlowResourceInner call(ServiceResponse<DataFlowResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates a data flow.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param dataFlowName The data flow name.
     * @param properties Data flow properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DataFlowResourceInner object
     */
    public Observable<ServiceResponse<DataFlowResourceInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String factoryName, String dataFlowName, DataFlowInner properties) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (factoryName == null) {
            throw new IllegalArgumentException("Parameter factoryName is required and cannot be null.");
        }
        if (dataFlowName == null) {
            throw new IllegalArgumentException("Parameter dataFlowName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (properties == null) {
            throw new IllegalArgumentException("Parameter properties is required and cannot be null.");
        }
        Validator.validate(properties);
        final String ifMatch = null;
        DataFlowResourceInner dataFlow = new DataFlowResourceInner();
        dataFlow.withProperties(properties);
        return service.createOrUpdate(this.client.subscriptionId(), resourceGroupName, factoryName, dataFlowName, this.client.apiVersion(), ifMatch, this.client.acceptLanguage(), dataFlow, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DataFlowResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<DataFlowResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DataFlowResourceInner> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Creates or updates a data flow.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param dataFlowName The data flow name.
     * @param properties Data flow properties.
     * @param ifMatch ETag of the data flow entity. Should only be specified for update, for which it should match existing entity or can be * for unconditional update.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DataFlowResourceInner object if successful.
     */
    public DataFlowResourceInner createOrUpdate(String resourceGroupName, String factoryName, String dataFlowName, DataFlowInner properties, String ifMatch) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, factoryName, dataFlowName, properties, ifMatch).toBlocking().single().body();
    }

    /**
     * Creates or updates a data flow.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param dataFlowName The data flow name.
     * @param properties Data flow properties.
     * @param ifMatch ETag of the data flow entity. Should only be specified for update, for which it should match existing entity or can be * for unconditional update.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DataFlowResourceInner> createOrUpdateAsync(String resourceGroupName, String factoryName, String dataFlowName, DataFlowInner properties, String ifMatch, final ServiceCallback<DataFlowResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, factoryName, dataFlowName, properties, ifMatch), serviceCallback);
    }

    /**
     * Creates or updates a data flow.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param dataFlowName The data flow name.
     * @param properties Data flow properties.
     * @param ifMatch ETag of the data flow entity. Should only be specified for update, for which it should match existing entity or can be * for unconditional update.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DataFlowResourceInner object
     */
    public Observable<DataFlowResourceInner> createOrUpdateAsync(String resourceGroupName, String factoryName, String dataFlowName, DataFlowInner properties, String ifMatch) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, factoryName, dataFlowName, properties, ifMatch).map(new Func1<ServiceResponse<DataFlowResourceInner>, DataFlowResourceInner>() {
            @Override
            public DataFlowResourceInner call(ServiceResponse<DataFlowResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates a data flow.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param dataFlowName The data flow name.
     * @param properties Data flow properties.
     * @param ifMatch ETag of the data flow entity. Should only be specified for update, for which it should match existing entity or can be * for unconditional update.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DataFlowResourceInner object
     */
    public Observable<ServiceResponse<DataFlowResourceInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String factoryName, String dataFlowName, DataFlowInner properties, String ifMatch) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (factoryName == null) {
            throw new IllegalArgumentException("Parameter factoryName is required and cannot be null.");
        }
        if (dataFlowName == null) {
            throw new IllegalArgumentException("Parameter dataFlowName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (properties == null) {
            throw new IllegalArgumentException("Parameter properties is required and cannot be null.");
        }
        Validator.validate(properties);
        DataFlowResourceInner dataFlow = new DataFlowResourceInner();
        dataFlow.withProperties(properties);
        return service.createOrUpdate(this.client.subscriptionId(), resourceGroupName, factoryName, dataFlowName, this.client.apiVersion(), ifMatch, this.client.acceptLanguage(), dataFlow, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DataFlowResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<DataFlowResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DataFlowResourceInner> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<DataFlowResourceInner> createOrUpdateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<DataFlowResourceInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<DataFlowResourceInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets a data flow.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param dataFlowName The data flow name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DataFlowResourceInner object if successful.
     */
    public DataFlowResourceInner get(String resourceGroupName, String factoryName, String dataFlowName) {
        return getWithServiceResponseAsync(resourceGroupName, factoryName, dataFlowName).toBlocking().single().body();
    }

    /**
     * Gets a data flow.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param dataFlowName The data flow name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DataFlowResourceInner> getAsync(String resourceGroupName, String factoryName, String dataFlowName, final ServiceCallback<DataFlowResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroupName, factoryName, dataFlowName), serviceCallback);
    }

    /**
     * Gets a data flow.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param dataFlowName The data flow name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DataFlowResourceInner object
     */
    public Observable<DataFlowResourceInner> getAsync(String resourceGroupName, String factoryName, String dataFlowName) {
        return getWithServiceResponseAsync(resourceGroupName, factoryName, dataFlowName).map(new Func1<ServiceResponse<DataFlowResourceInner>, DataFlowResourceInner>() {
            @Override
            public DataFlowResourceInner call(ServiceResponse<DataFlowResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets a data flow.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param dataFlowName The data flow name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DataFlowResourceInner object
     */
    public Observable<ServiceResponse<DataFlowResourceInner>> getWithServiceResponseAsync(String resourceGroupName, String factoryName, String dataFlowName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (factoryName == null) {
            throw new IllegalArgumentException("Parameter factoryName is required and cannot be null.");
        }
        if (dataFlowName == null) {
            throw new IllegalArgumentException("Parameter dataFlowName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String ifNoneMatch = null;
        return service.get(this.client.subscriptionId(), resourceGroupName, factoryName, dataFlowName, this.client.apiVersion(), ifNoneMatch, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DataFlowResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<DataFlowResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DataFlowResourceInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Gets a data flow.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param dataFlowName The data flow name.
     * @param ifNoneMatch ETag of the data flow entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DataFlowResourceInner object if successful.
     */
    public DataFlowResourceInner get(String resourceGroupName, String factoryName, String dataFlowName, String ifNoneMatch) {
        return getWithServiceResponseAsync(resourceGroupName, factoryName, dataFlowName, ifNoneMatch).toBlocking().single().body();
    }

    /**
     * Gets a data flow.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param dataFlowName The data flow name.
     * @param ifNoneMatch ETag of the data flow entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DataFlowResourceInner> getAsync(String resourceGroupName, String factoryName, String dataFlowName, String ifNoneMatch, final ServiceCallback<DataFlowResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroupName, factoryName, dataFlowName, ifNoneMatch), serviceCallback);
    }

    /**
     * Gets a data flow.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param dataFlowName The data flow name.
     * @param ifNoneMatch ETag of the data flow entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DataFlowResourceInner object
     */
    public Observable<DataFlowResourceInner> getAsync(String resourceGroupName, String factoryName, String dataFlowName, String ifNoneMatch) {
        return getWithServiceResponseAsync(resourceGroupName, factoryName, dataFlowName, ifNoneMatch).map(new Func1<ServiceResponse<DataFlowResourceInner>, DataFlowResourceInner>() {
            @Override
            public DataFlowResourceInner call(ServiceResponse<DataFlowResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets a data flow.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param dataFlowName The data flow name.
     * @param ifNoneMatch ETag of the data flow entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DataFlowResourceInner object
     */
    public Observable<ServiceResponse<DataFlowResourceInner>> getWithServiceResponseAsync(String resourceGroupName, String factoryName, String dataFlowName, String ifNoneMatch) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (factoryName == null) {
            throw new IllegalArgumentException("Parameter factoryName is required and cannot be null.");
        }
        if (dataFlowName == null) {
            throw new IllegalArgumentException("Parameter dataFlowName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(this.client.subscriptionId(), resourceGroupName, factoryName, dataFlowName, this.client.apiVersion(), ifNoneMatch, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DataFlowResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<DataFlowResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DataFlowResourceInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<DataFlowResourceInner> getDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<DataFlowResourceInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<DataFlowResourceInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Deletes a data flow.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param dataFlowName The data flow name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String factoryName, String dataFlowName) {
        deleteWithServiceResponseAsync(resourceGroupName, factoryName, dataFlowName).toBlocking().single().body();
    }

    /**
     * Deletes a data flow.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param dataFlowName The data flow name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String factoryName, String dataFlowName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, factoryName, dataFlowName), serviceCallback);
    }

    /**
     * Deletes a data flow.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param dataFlowName The data flow name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String factoryName, String dataFlowName) {
        return deleteWithServiceResponseAsync(resourceGroupName, factoryName, dataFlowName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes a data flow.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param dataFlowName The data flow name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String factoryName, String dataFlowName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (factoryName == null) {
            throw new IllegalArgumentException("Parameter factoryName is required and cannot be null.");
        }
        if (dataFlowName == null) {
            throw new IllegalArgumentException("Parameter dataFlowName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.delete(this.client.subscriptionId(), resourceGroupName, factoryName, dataFlowName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Lists data flows.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;DataFlowResourceInner&gt; object if successful.
     */
    public PagedList<DataFlowResourceInner> listByFactory(final String resourceGroupName, final String factoryName) {
        ServiceResponse<Page<DataFlowResourceInner>> response = listByFactorySinglePageAsync(resourceGroupName, factoryName).toBlocking().single();
        return new PagedList<DataFlowResourceInner>(response.body()) {
            @Override
            public Page<DataFlowResourceInner> nextPage(String nextPageLink) {
                return listByFactoryNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists data flows.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<DataFlowResourceInner>> listByFactoryAsync(final String resourceGroupName, final String factoryName, final ListOperationCallback<DataFlowResourceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByFactorySinglePageAsync(resourceGroupName, factoryName),
            new Func1<String, Observable<ServiceResponse<Page<DataFlowResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DataFlowResourceInner>>> call(String nextPageLink) {
                    return listByFactoryNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists data flows.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DataFlowResourceInner&gt; object
     */
    public Observable<Page<DataFlowResourceInner>> listByFactoryAsync(final String resourceGroupName, final String factoryName) {
        return listByFactoryWithServiceResponseAsync(resourceGroupName, factoryName)
            .map(new Func1<ServiceResponse<Page<DataFlowResourceInner>>, Page<DataFlowResourceInner>>() {
                @Override
                public Page<DataFlowResourceInner> call(ServiceResponse<Page<DataFlowResourceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists data flows.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DataFlowResourceInner&gt; object
     */
    public Observable<ServiceResponse<Page<DataFlowResourceInner>>> listByFactoryWithServiceResponseAsync(final String resourceGroupName, final String factoryName) {
        return listByFactorySinglePageAsync(resourceGroupName, factoryName)
            .concatMap(new Func1<ServiceResponse<Page<DataFlowResourceInner>>, Observable<ServiceResponse<Page<DataFlowResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DataFlowResourceInner>>> call(ServiceResponse<Page<DataFlowResourceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByFactoryNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists data flows.
     *
    ServiceResponse<PageImpl<DataFlowResourceInner>> * @param resourceGroupName The resource group name.
    ServiceResponse<PageImpl<DataFlowResourceInner>> * @param factoryName The factory name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;DataFlowResourceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<DataFlowResourceInner>>> listByFactorySinglePageAsync(final String resourceGroupName, final String factoryName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (factoryName == null) {
            throw new IllegalArgumentException("Parameter factoryName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByFactory(this.client.subscriptionId(), resourceGroupName, factoryName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<DataFlowResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DataFlowResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<DataFlowResourceInner>> result = listByFactoryDelegate(response);
                        return Observable.just(new ServiceResponse<Page<DataFlowResourceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<DataFlowResourceInner>> listByFactoryDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<DataFlowResourceInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<DataFlowResourceInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Lists data flows.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;DataFlowResourceInner&gt; object if successful.
     */
    public PagedList<DataFlowResourceInner> listByFactoryNext(final String nextPageLink) {
        ServiceResponse<Page<DataFlowResourceInner>> response = listByFactoryNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<DataFlowResourceInner>(response.body()) {
            @Override
            public Page<DataFlowResourceInner> nextPage(String nextPageLink) {
                return listByFactoryNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists data flows.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<DataFlowResourceInner>> listByFactoryNextAsync(final String nextPageLink, final ServiceFuture<List<DataFlowResourceInner>> serviceFuture, final ListOperationCallback<DataFlowResourceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByFactoryNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<DataFlowResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DataFlowResourceInner>>> call(String nextPageLink) {
                    return listByFactoryNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists data flows.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DataFlowResourceInner&gt; object
     */
    public Observable<Page<DataFlowResourceInner>> listByFactoryNextAsync(final String nextPageLink) {
        return listByFactoryNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<DataFlowResourceInner>>, Page<DataFlowResourceInner>>() {
                @Override
                public Page<DataFlowResourceInner> call(ServiceResponse<Page<DataFlowResourceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists data flows.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DataFlowResourceInner&gt; object
     */
    public Observable<ServiceResponse<Page<DataFlowResourceInner>>> listByFactoryNextWithServiceResponseAsync(final String nextPageLink) {
        return listByFactoryNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<DataFlowResourceInner>>, Observable<ServiceResponse<Page<DataFlowResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DataFlowResourceInner>>> call(ServiceResponse<Page<DataFlowResourceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByFactoryNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists data flows.
     *
    ServiceResponse<PageImpl<DataFlowResourceInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;DataFlowResourceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<DataFlowResourceInner>>> listByFactoryNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByFactoryNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<DataFlowResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DataFlowResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<DataFlowResourceInner>> result = listByFactoryNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<DataFlowResourceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<DataFlowResourceInner>> listByFactoryNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<DataFlowResourceInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<DataFlowResourceInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
