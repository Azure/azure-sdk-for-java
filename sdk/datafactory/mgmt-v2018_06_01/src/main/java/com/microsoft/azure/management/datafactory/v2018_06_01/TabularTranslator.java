/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.datafactory.v2018_06_01;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * A copy activity tabular translator.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type", defaultImpl = TabularTranslator.class)
@JsonTypeName("TabularTranslator")
public class TabularTranslator extends CopyTranslator {
    /**
     * Column mappings. Example: "UserId: MyUserId, Group: MyGroup, Name:
     * MyName" Type: string (or Expression with resultType string). This
     * property will be retired. Please use mappings property.
     */
    @JsonProperty(value = "columnMappings")
    private Object columnMappings;

    /**
     * The schema mapping to map between tabular data and hierarchical data.
     * Example: {"Column1": "$.Column1", "Column2": "$.Column2.Property1",
     * "Column3": "$.Column2.Property2"}. Type: object (or Expression with
     * resultType object). This property will be retired. Please use mappings
     * property.
     */
    @JsonProperty(value = "schemaMapping")
    private Object schemaMapping;

    /**
     * The JSON Path of the Nested Array that is going to do cross-apply. Type:
     * object (or Expression with resultType object).
     */
    @JsonProperty(value = "collectionReference")
    private Object collectionReference;

    /**
     * Whether to map complex (array and object) values to simple strings in
     * json format. Type: boolean (or Expression with resultType boolean).
     */
    @JsonProperty(value = "mapComplexValuesToString")
    private Object mapComplexValuesToString;

    /**
     * Column mappings with logical types. Tabular-&gt;tabular example:
     * [{"source":{"name":"CustomerName","type":"String"},"sink":{"name":"ClientName","type":"String"}},{"source":{"name":"CustomerAddress","type":"String"},"sink":{"name":"ClientAddress","type":"String"}}].
     * Hierarchical-&gt;tabular example:
     * [{"source":{"path":"$.CustomerName","type":"String"},"sink":{"name":"ClientName","type":"String"}},{"source":{"path":"$.CustomerAddress","type":"String"},"sink":{"name":"ClientAddress","type":"String"}}].
     * Type: object (or Expression with resultType object).
     */
    @JsonProperty(value = "mappings")
    private Object mappings;

    /**
     * Whether to enable the advanced type conversion feature in the Copy
     * activity. Type: boolean (or Expression with resultType boolean).
     */
    @JsonProperty(value = "typeConversion")
    private Object typeConversion;

    /**
     * Type conversion settings.
     */
    @JsonProperty(value = "typeConversionSettings")
    private TypeConversionSettings typeConversionSettings;

    /**
     * Get column mappings. Example: "UserId: MyUserId, Group: MyGroup, Name: MyName" Type: string (or Expression with resultType string). This property will be retired. Please use mappings property.
     *
     * @return the columnMappings value
     */
    public Object columnMappings() {
        return this.columnMappings;
    }

    /**
     * Set column mappings. Example: "UserId: MyUserId, Group: MyGroup, Name: MyName" Type: string (or Expression with resultType string). This property will be retired. Please use mappings property.
     *
     * @param columnMappings the columnMappings value to set
     * @return the TabularTranslator object itself.
     */
    public TabularTranslator withColumnMappings(Object columnMappings) {
        this.columnMappings = columnMappings;
        return this;
    }

    /**
     * Get the schema mapping to map between tabular data and hierarchical data. Example: {"Column1": "$.Column1", "Column2": "$.Column2.Property1", "Column3": "$.Column2.Property2"}. Type: object (or Expression with resultType object). This property will be retired. Please use mappings property.
     *
     * @return the schemaMapping value
     */
    public Object schemaMapping() {
        return this.schemaMapping;
    }

    /**
     * Set the schema mapping to map between tabular data and hierarchical data. Example: {"Column1": "$.Column1", "Column2": "$.Column2.Property1", "Column3": "$.Column2.Property2"}. Type: object (or Expression with resultType object). This property will be retired. Please use mappings property.
     *
     * @param schemaMapping the schemaMapping value to set
     * @return the TabularTranslator object itself.
     */
    public TabularTranslator withSchemaMapping(Object schemaMapping) {
        this.schemaMapping = schemaMapping;
        return this;
    }

    /**
     * Get the JSON Path of the Nested Array that is going to do cross-apply. Type: object (or Expression with resultType object).
     *
     * @return the collectionReference value
     */
    public Object collectionReference() {
        return this.collectionReference;
    }

    /**
     * Set the JSON Path of the Nested Array that is going to do cross-apply. Type: object (or Expression with resultType object).
     *
     * @param collectionReference the collectionReference value to set
     * @return the TabularTranslator object itself.
     */
    public TabularTranslator withCollectionReference(Object collectionReference) {
        this.collectionReference = collectionReference;
        return this;
    }

    /**
     * Get whether to map complex (array and object) values to simple strings in json format. Type: boolean (or Expression with resultType boolean).
     *
     * @return the mapComplexValuesToString value
     */
    public Object mapComplexValuesToString() {
        return this.mapComplexValuesToString;
    }

    /**
     * Set whether to map complex (array and object) values to simple strings in json format. Type: boolean (or Expression with resultType boolean).
     *
     * @param mapComplexValuesToString the mapComplexValuesToString value to set
     * @return the TabularTranslator object itself.
     */
    public TabularTranslator withMapComplexValuesToString(Object mapComplexValuesToString) {
        this.mapComplexValuesToString = mapComplexValuesToString;
        return this;
    }

    /**
     * Get column mappings with logical types. Tabular-&gt;tabular example: [{"source":{"name":"CustomerName","type":"String"},"sink":{"name":"ClientName","type":"String"}},{"source":{"name":"CustomerAddress","type":"String"},"sink":{"name":"ClientAddress","type":"String"}}].  Hierarchical-&gt;tabular example: [{"source":{"path":"$.CustomerName","type":"String"},"sink":{"name":"ClientName","type":"String"}},{"source":{"path":"$.CustomerAddress","type":"String"},"sink":{"name":"ClientAddress","type":"String"}}]. Type: object (or Expression with resultType object).
     *
     * @return the mappings value
     */
    public Object mappings() {
        return this.mappings;
    }

    /**
     * Set column mappings with logical types. Tabular-&gt;tabular example: [{"source":{"name":"CustomerName","type":"String"},"sink":{"name":"ClientName","type":"String"}},{"source":{"name":"CustomerAddress","type":"String"},"sink":{"name":"ClientAddress","type":"String"}}].  Hierarchical-&gt;tabular example: [{"source":{"path":"$.CustomerName","type":"String"},"sink":{"name":"ClientName","type":"String"}},{"source":{"path":"$.CustomerAddress","type":"String"},"sink":{"name":"ClientAddress","type":"String"}}]. Type: object (or Expression with resultType object).
     *
     * @param mappings the mappings value to set
     * @return the TabularTranslator object itself.
     */
    public TabularTranslator withMappings(Object mappings) {
        this.mappings = mappings;
        return this;
    }

    /**
     * Get whether to enable the advanced type conversion feature in the Copy activity. Type: boolean (or Expression with resultType boolean).
     *
     * @return the typeConversion value
     */
    public Object typeConversion() {
        return this.typeConversion;
    }

    /**
     * Set whether to enable the advanced type conversion feature in the Copy activity. Type: boolean (or Expression with resultType boolean).
     *
     * @param typeConversion the typeConversion value to set
     * @return the TabularTranslator object itself.
     */
    public TabularTranslator withTypeConversion(Object typeConversion) {
        this.typeConversion = typeConversion;
        return this;
    }

    /**
     * Get type conversion settings.
     *
     * @return the typeConversionSettings value
     */
    public TypeConversionSettings typeConversionSettings() {
        return this.typeConversionSettings;
    }

    /**
     * Set type conversion settings.
     *
     * @param typeConversionSettings the typeConversionSettings value to set
     * @return the TabularTranslator object itself.
     */
    public TabularTranslator withTypeConversionSettings(TypeConversionSettings typeConversionSettings) {
        this.typeConversionSettings = typeConversionSettings;
        return this;
    }

}
