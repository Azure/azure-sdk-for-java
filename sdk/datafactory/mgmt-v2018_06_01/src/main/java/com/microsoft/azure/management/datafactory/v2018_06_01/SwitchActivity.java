/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.datafactory.v2018_06_01;

import java.util.List;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.microsoft.rest.serializer.JsonFlatten;

/**
 * This activity evaluates an expression and executes activities under the
 * cases property that correspond to the expression evaluation expected in the
 * equals property.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type", defaultImpl = SwitchActivity.class)
@JsonTypeName("Switch")
@JsonFlatten
public class SwitchActivity extends ControlActivity {
    /**
     * An expression that would evaluate to a string or integer. This is used
     * to determine the block of activities in cases that will be executed.
     */
    @JsonProperty(value = "typeProperties.on", required = true)
    private Expression on;

    /**
     * List of cases that correspond to expected values of the 'on' property.
     * This is an optional property and if not provided, the activity will
     * execute activities provided in defaultActivities.
     */
    @JsonProperty(value = "typeProperties.cases")
    private List<SwitchCase> cases;

    /**
     * List of activities to execute if no case condition is satisfied. This is
     * an optional property and if not provided, the activity will exit without
     * any action.
     */
    @JsonProperty(value = "typeProperties.defaultActivities")
    private List<Activity> defaultActivities;

    /**
     * Get an expression that would evaluate to a string or integer. This is used to determine the block of activities in cases that will be executed.
     *
     * @return the on value
     */
    public Expression on() {
        return this.on;
    }

    /**
     * Set an expression that would evaluate to a string or integer. This is used to determine the block of activities in cases that will be executed.
     *
     * @param on the on value to set
     * @return the SwitchActivity object itself.
     */
    public SwitchActivity withOn(Expression on) {
        this.on = on;
        return this;
    }

    /**
     * Get list of cases that correspond to expected values of the 'on' property. This is an optional property and if not provided, the activity will execute activities provided in defaultActivities.
     *
     * @return the cases value
     */
    public List<SwitchCase> cases() {
        return this.cases;
    }

    /**
     * Set list of cases that correspond to expected values of the 'on' property. This is an optional property and if not provided, the activity will execute activities provided in defaultActivities.
     *
     * @param cases the cases value to set
     * @return the SwitchActivity object itself.
     */
    public SwitchActivity withCases(List<SwitchCase> cases) {
        this.cases = cases;
        return this;
    }

    /**
     * Get list of activities to execute if no case condition is satisfied. This is an optional property and if not provided, the activity will exit without any action.
     *
     * @return the defaultActivities value
     */
    public List<Activity> defaultActivities() {
        return this.defaultActivities;
    }

    /**
     * Set list of activities to execute if no case condition is satisfied. This is an optional property and if not provided, the activity will exit without any action.
     *
     * @param defaultActivities the defaultActivities value to set
     * @return the SwitchActivity object itself.
     */
    public SwitchActivity withDefaultActivities(List<Activity> defaultActivities) {
        this.defaultActivities = defaultActivities;
        return this;
    }

}
