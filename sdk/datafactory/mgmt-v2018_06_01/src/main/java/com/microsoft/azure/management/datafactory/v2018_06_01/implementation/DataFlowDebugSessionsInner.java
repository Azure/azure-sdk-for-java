/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.datafactory.v2018_06_01.implementation;

import com.microsoft.azure.arm.collection.InnerSupportsDelete;
import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.datafactory.v2018_06_01.CreateDataFlowDebugSessionRequest;
import com.microsoft.azure.management.datafactory.v2018_06_01.DataFlowDebugCommandRequest;
import com.microsoft.azure.management.datafactory.v2018_06_01.DataFlowDebugPackage;
import com.microsoft.azure.management.datafactory.v2018_06_01.DataFlowDebugSessionCreateHeaders;
import com.microsoft.azure.management.datafactory.v2018_06_01.DataFlowDebugSessionExecuteCommandHeaders;
import com.microsoft.azure.management.datafactory.v2018_06_01.DeleteDataFlowDebugSessionRequest;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.ServiceResponseWithHeaders;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in DataFlowDebugSessions.
 */
public class DataFlowDebugSessionsInner implements InnerSupportsDelete<Void> {
    /** The Retrofit service to perform REST calls. */
    private DataFlowDebugSessionsService service;
    /** The service client containing this operation class. */
    private DataFactoryManagementClientImpl client;

    /**
     * Initializes an instance of DataFlowDebugSessionsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public DataFlowDebugSessionsInner(Retrofit retrofit, DataFactoryManagementClientImpl client) {
        this.service = retrofit.create(DataFlowDebugSessionsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for DataFlowDebugSessions to be
     * used by Retrofit to perform actually REST calls.
     */
    interface DataFlowDebugSessionsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.datafactory.v2018_06_01.DataFlowDebugSessions create" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/createDataFlowDebugSession")
        Observable<Response<ResponseBody>> create(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("factoryName") String factoryName, @Query("api-version") String apiVersion, @Body CreateDataFlowDebugSessionRequest request, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.datafactory.v2018_06_01.DataFlowDebugSessions beginCreate" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/createDataFlowDebugSession")
        Observable<Response<ResponseBody>> beginCreate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("factoryName") String factoryName, @Query("api-version") String apiVersion, @Body CreateDataFlowDebugSessionRequest request, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.datafactory.v2018_06_01.DataFlowDebugSessions queryByFactory" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/queryDataFlowDebugSessions")
        Observable<Response<ResponseBody>> queryByFactory(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("factoryName") String factoryName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.datafactory.v2018_06_01.DataFlowDebugSessions addDataFlow" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/addDataFlowToDebugSession")
        Observable<Response<ResponseBody>> addDataFlow(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("factoryName") String factoryName, @Query("api-version") String apiVersion, @Body DataFlowDebugPackage request, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.datafactory.v2018_06_01.DataFlowDebugSessions delete" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/deleteDataFlowDebugSession")
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("factoryName") String factoryName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body DeleteDataFlowDebugSessionRequest request, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.datafactory.v2018_06_01.DataFlowDebugSessions executeCommand" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/executeDataFlowDebugCommand")
        Observable<Response<ResponseBody>> executeCommand(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("factoryName") String factoryName, @Query("api-version") String apiVersion, @Body DataFlowDebugCommandRequest request, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.datafactory.v2018_06_01.DataFlowDebugSessions beginExecuteCommand" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/executeDataFlowDebugCommand")
        Observable<Response<ResponseBody>> beginExecuteCommand(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("factoryName") String factoryName, @Query("api-version") String apiVersion, @Body DataFlowDebugCommandRequest request, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.datafactory.v2018_06_01.DataFlowDebugSessions queryByFactoryNext" })
        @GET
        Observable<Response<ResponseBody>> queryByFactoryNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Creates a data flow debug session.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param request Data flow debug session definition
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CreateDataFlowDebugSessionResponseInner object if successful.
     */
    public CreateDataFlowDebugSessionResponseInner create(String resourceGroupName, String factoryName, CreateDataFlowDebugSessionRequest request) {
        return createWithServiceResponseAsync(resourceGroupName, factoryName, request).toBlocking().last().body();
    }

    /**
     * Creates a data flow debug session.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param request Data flow debug session definition
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CreateDataFlowDebugSessionResponseInner> createAsync(String resourceGroupName, String factoryName, CreateDataFlowDebugSessionRequest request, final ServiceCallback<CreateDataFlowDebugSessionResponseInner> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(createWithServiceResponseAsync(resourceGroupName, factoryName, request), serviceCallback);
    }

    /**
     * Creates a data flow debug session.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param request Data flow debug session definition
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<CreateDataFlowDebugSessionResponseInner> createAsync(String resourceGroupName, String factoryName, CreateDataFlowDebugSessionRequest request) {
        return createWithServiceResponseAsync(resourceGroupName, factoryName, request).map(new Func1<ServiceResponseWithHeaders<CreateDataFlowDebugSessionResponseInner, DataFlowDebugSessionCreateHeaders>, CreateDataFlowDebugSessionResponseInner>() {
            @Override
            public CreateDataFlowDebugSessionResponseInner call(ServiceResponseWithHeaders<CreateDataFlowDebugSessionResponseInner, DataFlowDebugSessionCreateHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates a data flow debug session.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param request Data flow debug session definition
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponseWithHeaders<CreateDataFlowDebugSessionResponseInner, DataFlowDebugSessionCreateHeaders>> createWithServiceResponseAsync(String resourceGroupName, String factoryName, CreateDataFlowDebugSessionRequest request) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (factoryName == null) {
            throw new IllegalArgumentException("Parameter factoryName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (request == null) {
            throw new IllegalArgumentException("Parameter request is required and cannot be null.");
        }
        Validator.validate(request);
        Observable<Response<ResponseBody>> observable = service.create(this.client.subscriptionId(), resourceGroupName, factoryName, this.client.apiVersion(), request, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultWithHeadersAsync(observable, new TypeToken<CreateDataFlowDebugSessionResponseInner>() { }.getType(), DataFlowDebugSessionCreateHeaders.class);
    }

    /**
     * Creates a data flow debug session.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param request Data flow debug session definition
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CreateDataFlowDebugSessionResponseInner object if successful.
     */
    public CreateDataFlowDebugSessionResponseInner beginCreate(String resourceGroupName, String factoryName, CreateDataFlowDebugSessionRequest request) {
        return beginCreateWithServiceResponseAsync(resourceGroupName, factoryName, request).toBlocking().single().body();
    }

    /**
     * Creates a data flow debug session.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param request Data flow debug session definition
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CreateDataFlowDebugSessionResponseInner> beginCreateAsync(String resourceGroupName, String factoryName, CreateDataFlowDebugSessionRequest request, final ServiceCallback<CreateDataFlowDebugSessionResponseInner> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(beginCreateWithServiceResponseAsync(resourceGroupName, factoryName, request), serviceCallback);
    }

    /**
     * Creates a data flow debug session.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param request Data flow debug session definition
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CreateDataFlowDebugSessionResponseInner object
     */
    public Observable<CreateDataFlowDebugSessionResponseInner> beginCreateAsync(String resourceGroupName, String factoryName, CreateDataFlowDebugSessionRequest request) {
        return beginCreateWithServiceResponseAsync(resourceGroupName, factoryName, request).map(new Func1<ServiceResponseWithHeaders<CreateDataFlowDebugSessionResponseInner, DataFlowDebugSessionCreateHeaders>, CreateDataFlowDebugSessionResponseInner>() {
            @Override
            public CreateDataFlowDebugSessionResponseInner call(ServiceResponseWithHeaders<CreateDataFlowDebugSessionResponseInner, DataFlowDebugSessionCreateHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates a data flow debug session.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param request Data flow debug session definition
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CreateDataFlowDebugSessionResponseInner object
     */
    public Observable<ServiceResponseWithHeaders<CreateDataFlowDebugSessionResponseInner, DataFlowDebugSessionCreateHeaders>> beginCreateWithServiceResponseAsync(String resourceGroupName, String factoryName, CreateDataFlowDebugSessionRequest request) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (factoryName == null) {
            throw new IllegalArgumentException("Parameter factoryName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (request == null) {
            throw new IllegalArgumentException("Parameter request is required and cannot be null.");
        }
        Validator.validate(request);
        return service.beginCreate(this.client.subscriptionId(), resourceGroupName, factoryName, this.client.apiVersion(), request, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<CreateDataFlowDebugSessionResponseInner, DataFlowDebugSessionCreateHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<CreateDataFlowDebugSessionResponseInner, DataFlowDebugSessionCreateHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<CreateDataFlowDebugSessionResponseInner, DataFlowDebugSessionCreateHeaders> clientResponse = beginCreateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponseWithHeaders<CreateDataFlowDebugSessionResponseInner, DataFlowDebugSessionCreateHeaders> beginCreateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<CreateDataFlowDebugSessionResponseInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<CreateDataFlowDebugSessionResponseInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .buildWithHeaders(response, DataFlowDebugSessionCreateHeaders.class);
    }

    /**
     * Query all active data flow debug sessions.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;DataFlowDebugSessionInfoInner&gt; object if successful.
     */
    public PagedList<DataFlowDebugSessionInfoInner> queryByFactory(final String resourceGroupName, final String factoryName) {
        ServiceResponse<Page<DataFlowDebugSessionInfoInner>> response = queryByFactorySinglePageAsync(resourceGroupName, factoryName).toBlocking().single();
        return new PagedList<DataFlowDebugSessionInfoInner>(response.body()) {
            @Override
            public Page<DataFlowDebugSessionInfoInner> nextPage(String nextPageLink) {
                return queryByFactoryNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Query all active data flow debug sessions.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<DataFlowDebugSessionInfoInner>> queryByFactoryAsync(final String resourceGroupName, final String factoryName, final ListOperationCallback<DataFlowDebugSessionInfoInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            queryByFactorySinglePageAsync(resourceGroupName, factoryName),
            new Func1<String, Observable<ServiceResponse<Page<DataFlowDebugSessionInfoInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DataFlowDebugSessionInfoInner>>> call(String nextPageLink) {
                    return queryByFactoryNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Query all active data flow debug sessions.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DataFlowDebugSessionInfoInner&gt; object
     */
    public Observable<Page<DataFlowDebugSessionInfoInner>> queryByFactoryAsync(final String resourceGroupName, final String factoryName) {
        return queryByFactoryWithServiceResponseAsync(resourceGroupName, factoryName)
            .map(new Func1<ServiceResponse<Page<DataFlowDebugSessionInfoInner>>, Page<DataFlowDebugSessionInfoInner>>() {
                @Override
                public Page<DataFlowDebugSessionInfoInner> call(ServiceResponse<Page<DataFlowDebugSessionInfoInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Query all active data flow debug sessions.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DataFlowDebugSessionInfoInner&gt; object
     */
    public Observable<ServiceResponse<Page<DataFlowDebugSessionInfoInner>>> queryByFactoryWithServiceResponseAsync(final String resourceGroupName, final String factoryName) {
        return queryByFactorySinglePageAsync(resourceGroupName, factoryName)
            .concatMap(new Func1<ServiceResponse<Page<DataFlowDebugSessionInfoInner>>, Observable<ServiceResponse<Page<DataFlowDebugSessionInfoInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DataFlowDebugSessionInfoInner>>> call(ServiceResponse<Page<DataFlowDebugSessionInfoInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(queryByFactoryNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Query all active data flow debug sessions.
     *
    ServiceResponse<PageImpl<DataFlowDebugSessionInfoInner>> * @param resourceGroupName The resource group name.
    ServiceResponse<PageImpl<DataFlowDebugSessionInfoInner>> * @param factoryName The factory name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;DataFlowDebugSessionInfoInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<DataFlowDebugSessionInfoInner>>> queryByFactorySinglePageAsync(final String resourceGroupName, final String factoryName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (factoryName == null) {
            throw new IllegalArgumentException("Parameter factoryName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.queryByFactory(this.client.subscriptionId(), resourceGroupName, factoryName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<DataFlowDebugSessionInfoInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DataFlowDebugSessionInfoInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<DataFlowDebugSessionInfoInner>> result = queryByFactoryDelegate(response);
                        return Observable.just(new ServiceResponse<Page<DataFlowDebugSessionInfoInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<DataFlowDebugSessionInfoInner>> queryByFactoryDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<DataFlowDebugSessionInfoInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<DataFlowDebugSessionInfoInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Add a data flow into debug session.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param request Data flow debug session definition with debug content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the AddDataFlowToDebugSessionResponseInner object if successful.
     */
    public AddDataFlowToDebugSessionResponseInner addDataFlow(String resourceGroupName, String factoryName, DataFlowDebugPackage request) {
        return addDataFlowWithServiceResponseAsync(resourceGroupName, factoryName, request).toBlocking().single().body();
    }

    /**
     * Add a data flow into debug session.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param request Data flow debug session definition with debug content.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<AddDataFlowToDebugSessionResponseInner> addDataFlowAsync(String resourceGroupName, String factoryName, DataFlowDebugPackage request, final ServiceCallback<AddDataFlowToDebugSessionResponseInner> serviceCallback) {
        return ServiceFuture.fromResponse(addDataFlowWithServiceResponseAsync(resourceGroupName, factoryName, request), serviceCallback);
    }

    /**
     * Add a data flow into debug session.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param request Data flow debug session definition with debug content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AddDataFlowToDebugSessionResponseInner object
     */
    public Observable<AddDataFlowToDebugSessionResponseInner> addDataFlowAsync(String resourceGroupName, String factoryName, DataFlowDebugPackage request) {
        return addDataFlowWithServiceResponseAsync(resourceGroupName, factoryName, request).map(new Func1<ServiceResponse<AddDataFlowToDebugSessionResponseInner>, AddDataFlowToDebugSessionResponseInner>() {
            @Override
            public AddDataFlowToDebugSessionResponseInner call(ServiceResponse<AddDataFlowToDebugSessionResponseInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Add a data flow into debug session.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param request Data flow debug session definition with debug content.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AddDataFlowToDebugSessionResponseInner object
     */
    public Observable<ServiceResponse<AddDataFlowToDebugSessionResponseInner>> addDataFlowWithServiceResponseAsync(String resourceGroupName, String factoryName, DataFlowDebugPackage request) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (factoryName == null) {
            throw new IllegalArgumentException("Parameter factoryName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (request == null) {
            throw new IllegalArgumentException("Parameter request is required and cannot be null.");
        }
        Validator.validate(request);
        return service.addDataFlow(this.client.subscriptionId(), resourceGroupName, factoryName, this.client.apiVersion(), request, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<AddDataFlowToDebugSessionResponseInner>>>() {
                @Override
                public Observable<ServiceResponse<AddDataFlowToDebugSessionResponseInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<AddDataFlowToDebugSessionResponseInner> clientResponse = addDataFlowDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<AddDataFlowToDebugSessionResponseInner> addDataFlowDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<AddDataFlowToDebugSessionResponseInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<AddDataFlowToDebugSessionResponseInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Deletes a data flow debug session.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String factoryName) {
        deleteWithServiceResponseAsync(resourceGroupName, factoryName).toBlocking().single().body();
    }

    /**
     * Deletes a data flow debug session.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String factoryName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, factoryName), serviceCallback);
    }

    /**
     * Deletes a data flow debug session.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String factoryName) {
        return deleteWithServiceResponseAsync(resourceGroupName, factoryName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes a data flow debug session.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String factoryName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (factoryName == null) {
            throw new IllegalArgumentException("Parameter factoryName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String sessionId = null;
        DeleteDataFlowDebugSessionRequest request = new DeleteDataFlowDebugSessionRequest();
        request.withSessionId(null);
        return service.delete(this.client.subscriptionId(), resourceGroupName, factoryName, this.client.apiVersion(), this.client.acceptLanguage(), request, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Deletes a data flow debug session.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param sessionId The ID of data flow debug session.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String factoryName, String sessionId) {
        deleteWithServiceResponseAsync(resourceGroupName, factoryName, sessionId).toBlocking().single().body();
    }

    /**
     * Deletes a data flow debug session.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param sessionId The ID of data flow debug session.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String factoryName, String sessionId, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, factoryName, sessionId), serviceCallback);
    }

    /**
     * Deletes a data flow debug session.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param sessionId The ID of data flow debug session.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String factoryName, String sessionId) {
        return deleteWithServiceResponseAsync(resourceGroupName, factoryName, sessionId).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes a data flow debug session.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param sessionId The ID of data flow debug session.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String factoryName, String sessionId) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (factoryName == null) {
            throw new IllegalArgumentException("Parameter factoryName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        DeleteDataFlowDebugSessionRequest request = new DeleteDataFlowDebugSessionRequest();
        request.withSessionId(sessionId);
        return service.delete(this.client.subscriptionId(), resourceGroupName, factoryName, this.client.apiVersion(), this.client.acceptLanguage(), request, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Execute a data flow debug command.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param request Data flow debug command definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DataFlowDebugCommandResponseInner object if successful.
     */
    public DataFlowDebugCommandResponseInner executeCommand(String resourceGroupName, String factoryName, DataFlowDebugCommandRequest request) {
        return executeCommandWithServiceResponseAsync(resourceGroupName, factoryName, request).toBlocking().last().body();
    }

    /**
     * Execute a data flow debug command.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param request Data flow debug command definition.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DataFlowDebugCommandResponseInner> executeCommandAsync(String resourceGroupName, String factoryName, DataFlowDebugCommandRequest request, final ServiceCallback<DataFlowDebugCommandResponseInner> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(executeCommandWithServiceResponseAsync(resourceGroupName, factoryName, request), serviceCallback);
    }

    /**
     * Execute a data flow debug command.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param request Data flow debug command definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<DataFlowDebugCommandResponseInner> executeCommandAsync(String resourceGroupName, String factoryName, DataFlowDebugCommandRequest request) {
        return executeCommandWithServiceResponseAsync(resourceGroupName, factoryName, request).map(new Func1<ServiceResponseWithHeaders<DataFlowDebugCommandResponseInner, DataFlowDebugSessionExecuteCommandHeaders>, DataFlowDebugCommandResponseInner>() {
            @Override
            public DataFlowDebugCommandResponseInner call(ServiceResponseWithHeaders<DataFlowDebugCommandResponseInner, DataFlowDebugSessionExecuteCommandHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Execute a data flow debug command.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param request Data flow debug command definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponseWithHeaders<DataFlowDebugCommandResponseInner, DataFlowDebugSessionExecuteCommandHeaders>> executeCommandWithServiceResponseAsync(String resourceGroupName, String factoryName, DataFlowDebugCommandRequest request) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (factoryName == null) {
            throw new IllegalArgumentException("Parameter factoryName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (request == null) {
            throw new IllegalArgumentException("Parameter request is required and cannot be null.");
        }
        Validator.validate(request);
        Observable<Response<ResponseBody>> observable = service.executeCommand(this.client.subscriptionId(), resourceGroupName, factoryName, this.client.apiVersion(), request, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultWithHeadersAsync(observable, new TypeToken<DataFlowDebugCommandResponseInner>() { }.getType(), DataFlowDebugSessionExecuteCommandHeaders.class);
    }

    /**
     * Execute a data flow debug command.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param request Data flow debug command definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DataFlowDebugCommandResponseInner object if successful.
     */
    public DataFlowDebugCommandResponseInner beginExecuteCommand(String resourceGroupName, String factoryName, DataFlowDebugCommandRequest request) {
        return beginExecuteCommandWithServiceResponseAsync(resourceGroupName, factoryName, request).toBlocking().single().body();
    }

    /**
     * Execute a data flow debug command.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param request Data flow debug command definition.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DataFlowDebugCommandResponseInner> beginExecuteCommandAsync(String resourceGroupName, String factoryName, DataFlowDebugCommandRequest request, final ServiceCallback<DataFlowDebugCommandResponseInner> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(beginExecuteCommandWithServiceResponseAsync(resourceGroupName, factoryName, request), serviceCallback);
    }

    /**
     * Execute a data flow debug command.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param request Data flow debug command definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DataFlowDebugCommandResponseInner object
     */
    public Observable<DataFlowDebugCommandResponseInner> beginExecuteCommandAsync(String resourceGroupName, String factoryName, DataFlowDebugCommandRequest request) {
        return beginExecuteCommandWithServiceResponseAsync(resourceGroupName, factoryName, request).map(new Func1<ServiceResponseWithHeaders<DataFlowDebugCommandResponseInner, DataFlowDebugSessionExecuteCommandHeaders>, DataFlowDebugCommandResponseInner>() {
            @Override
            public DataFlowDebugCommandResponseInner call(ServiceResponseWithHeaders<DataFlowDebugCommandResponseInner, DataFlowDebugSessionExecuteCommandHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Execute a data flow debug command.
     *
     * @param resourceGroupName The resource group name.
     * @param factoryName The factory name.
     * @param request Data flow debug command definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DataFlowDebugCommandResponseInner object
     */
    public Observable<ServiceResponseWithHeaders<DataFlowDebugCommandResponseInner, DataFlowDebugSessionExecuteCommandHeaders>> beginExecuteCommandWithServiceResponseAsync(String resourceGroupName, String factoryName, DataFlowDebugCommandRequest request) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (factoryName == null) {
            throw new IllegalArgumentException("Parameter factoryName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (request == null) {
            throw new IllegalArgumentException("Parameter request is required and cannot be null.");
        }
        Validator.validate(request);
        return service.beginExecuteCommand(this.client.subscriptionId(), resourceGroupName, factoryName, this.client.apiVersion(), request, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<DataFlowDebugCommandResponseInner, DataFlowDebugSessionExecuteCommandHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<DataFlowDebugCommandResponseInner, DataFlowDebugSessionExecuteCommandHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<DataFlowDebugCommandResponseInner, DataFlowDebugSessionExecuteCommandHeaders> clientResponse = beginExecuteCommandDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponseWithHeaders<DataFlowDebugCommandResponseInner, DataFlowDebugSessionExecuteCommandHeaders> beginExecuteCommandDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<DataFlowDebugCommandResponseInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<DataFlowDebugCommandResponseInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .buildWithHeaders(response, DataFlowDebugSessionExecuteCommandHeaders.class);
    }

    /**
     * Query all active data flow debug sessions.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;DataFlowDebugSessionInfoInner&gt; object if successful.
     */
    public PagedList<DataFlowDebugSessionInfoInner> queryByFactoryNext(final String nextPageLink) {
        ServiceResponse<Page<DataFlowDebugSessionInfoInner>> response = queryByFactoryNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<DataFlowDebugSessionInfoInner>(response.body()) {
            @Override
            public Page<DataFlowDebugSessionInfoInner> nextPage(String nextPageLink) {
                return queryByFactoryNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Query all active data flow debug sessions.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<DataFlowDebugSessionInfoInner>> queryByFactoryNextAsync(final String nextPageLink, final ServiceFuture<List<DataFlowDebugSessionInfoInner>> serviceFuture, final ListOperationCallback<DataFlowDebugSessionInfoInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            queryByFactoryNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<DataFlowDebugSessionInfoInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DataFlowDebugSessionInfoInner>>> call(String nextPageLink) {
                    return queryByFactoryNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Query all active data flow debug sessions.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DataFlowDebugSessionInfoInner&gt; object
     */
    public Observable<Page<DataFlowDebugSessionInfoInner>> queryByFactoryNextAsync(final String nextPageLink) {
        return queryByFactoryNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<DataFlowDebugSessionInfoInner>>, Page<DataFlowDebugSessionInfoInner>>() {
                @Override
                public Page<DataFlowDebugSessionInfoInner> call(ServiceResponse<Page<DataFlowDebugSessionInfoInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Query all active data flow debug sessions.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DataFlowDebugSessionInfoInner&gt; object
     */
    public Observable<ServiceResponse<Page<DataFlowDebugSessionInfoInner>>> queryByFactoryNextWithServiceResponseAsync(final String nextPageLink) {
        return queryByFactoryNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<DataFlowDebugSessionInfoInner>>, Observable<ServiceResponse<Page<DataFlowDebugSessionInfoInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DataFlowDebugSessionInfoInner>>> call(ServiceResponse<Page<DataFlowDebugSessionInfoInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(queryByFactoryNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Query all active data flow debug sessions.
     *
    ServiceResponse<PageImpl<DataFlowDebugSessionInfoInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;DataFlowDebugSessionInfoInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<DataFlowDebugSessionInfoInner>>> queryByFactoryNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.queryByFactoryNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<DataFlowDebugSessionInfoInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DataFlowDebugSessionInfoInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<DataFlowDebugSessionInfoInner>> result = queryByFactoryNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<DataFlowDebugSessionInfoInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<DataFlowDebugSessionInfoInner>> queryByFactoryNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<DataFlowDebugSessionInfoInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<DataFlowDebugSessionInfoInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
