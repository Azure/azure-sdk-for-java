/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.datafactory.v2018_06_01;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.microsoft.rest.serializer.JsonFlatten;
import com.microsoft.azure.management.datafactory.v2018_06_01.implementation.LinkedServiceInner;

/**
 * Microsoft Azure Cosmos Database (CosmosDB) linked service.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type", defaultImpl = CosmosDbLinkedService.class)
@JsonTypeName("CosmosDb")
@JsonFlatten
public class CosmosDbLinkedService extends LinkedServiceInner {
    /**
     * The connection string. Type: string, SecureString or
     * AzureKeyVaultSecretReference.
     */
    @JsonProperty(value = "typeProperties.connectionString")
    private Object connectionString;

    /**
     * The endpoint of the Azure CosmosDB account. Type: string (or Expression
     * with resultType string).
     */
    @JsonProperty(value = "typeProperties.accountEndpoint")
    private Object accountEndpoint;

    /**
     * The name of the database. Type: string (or Expression with resultType
     * string).
     */
    @JsonProperty(value = "typeProperties.database")
    private Object database;

    /**
     * The account key of the Azure CosmosDB account. Type: SecureString or
     * AzureKeyVaultSecretReference.
     */
    @JsonProperty(value = "typeProperties.accountKey")
    private SecretBase accountKey;

    /**
     * The encrypted credential used for authentication. Credentials are
     * encrypted using the integration runtime credential manager. Type: string
     * (or Expression with resultType string).
     */
    @JsonProperty(value = "typeProperties.encryptedCredential")
    private Object encryptedCredential;

    /**
     * Get the connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
     *
     * @return the connectionString value
     */
    public Object connectionString() {
        return this.connectionString;
    }

    /**
     * Set the connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
     *
     * @param connectionString the connectionString value to set
     * @return the CosmosDbLinkedService object itself.
     */
    public CosmosDbLinkedService withConnectionString(Object connectionString) {
        this.connectionString = connectionString;
        return this;
    }

    /**
     * Get the endpoint of the Azure CosmosDB account. Type: string (or Expression with resultType string).
     *
     * @return the accountEndpoint value
     */
    public Object accountEndpoint() {
        return this.accountEndpoint;
    }

    /**
     * Set the endpoint of the Azure CosmosDB account. Type: string (or Expression with resultType string).
     *
     * @param accountEndpoint the accountEndpoint value to set
     * @return the CosmosDbLinkedService object itself.
     */
    public CosmosDbLinkedService withAccountEndpoint(Object accountEndpoint) {
        this.accountEndpoint = accountEndpoint;
        return this;
    }

    /**
     * Get the name of the database. Type: string (or Expression with resultType string).
     *
     * @return the database value
     */
    public Object database() {
        return this.database;
    }

    /**
     * Set the name of the database. Type: string (or Expression with resultType string).
     *
     * @param database the database value to set
     * @return the CosmosDbLinkedService object itself.
     */
    public CosmosDbLinkedService withDatabase(Object database) {
        this.database = database;
        return this;
    }

    /**
     * Get the account key of the Azure CosmosDB account. Type: SecureString or AzureKeyVaultSecretReference.
     *
     * @return the accountKey value
     */
    public SecretBase accountKey() {
        return this.accountKey;
    }

    /**
     * Set the account key of the Azure CosmosDB account. Type: SecureString or AzureKeyVaultSecretReference.
     *
     * @param accountKey the accountKey value to set
     * @return the CosmosDbLinkedService object itself.
     */
    public CosmosDbLinkedService withAccountKey(SecretBase accountKey) {
        this.accountKey = accountKey;
        return this;
    }

    /**
     * Get the encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     *
     * @return the encryptedCredential value
     */
    public Object encryptedCredential() {
        return this.encryptedCredential;
    }

    /**
     * Set the encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     *
     * @param encryptedCredential the encryptedCredential value to set
     * @return the CosmosDbLinkedService object itself.
     */
    public CosmosDbLinkedService withEncryptedCredential(Object encryptedCredential) {
        this.encryptedCredential = encryptedCredential;
        return this;
    }

}
