/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.datafactory.v2018_06_01;

import org.joda.time.DateTime;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.microsoft.rest.serializer.JsonFlatten;
import com.microsoft.azure.management.datafactory.v2018_06_01.implementation.TriggerInner;

/**
 * Trigger that schedules pipeline reruns for all fixed time interval windows
 * from a requested start time to requested end time.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type", defaultImpl = RerunTumblingWindowTrigger.class)
@JsonTypeName("RerunTumblingWindowTrigger")
@JsonFlatten
public class RerunTumblingWindowTrigger extends TriggerInner {
    /**
     * The parent trigger reference.
     */
    @JsonProperty(value = "typeProperties.parentTrigger", required = true)
    private Object parentTrigger;

    /**
     * The start time for the time period for which restatement is initiated.
     * Only UTC time is currently supported.
     */
    @JsonProperty(value = "typeProperties.requestedStartTime", required = true)
    private DateTime requestedStartTime;

    /**
     * The end time for the time period for which restatement is initiated.
     * Only UTC time is currently supported.
     */
    @JsonProperty(value = "typeProperties.requestedEndTime", required = true)
    private DateTime requestedEndTime;

    /**
     * The max number of parallel time windows (ready for execution) for which
     * a rerun is triggered.
     */
    @JsonProperty(value = "typeProperties.rerunConcurrency", required = true)
    private int rerunConcurrency;

    /**
     * Get the parent trigger reference.
     *
     * @return the parentTrigger value
     */
    public Object parentTrigger() {
        return this.parentTrigger;
    }

    /**
     * Set the parent trigger reference.
     *
     * @param parentTrigger the parentTrigger value to set
     * @return the RerunTumblingWindowTrigger object itself.
     */
    public RerunTumblingWindowTrigger withParentTrigger(Object parentTrigger) {
        this.parentTrigger = parentTrigger;
        return this;
    }

    /**
     * Get the start time for the time period for which restatement is initiated. Only UTC time is currently supported.
     *
     * @return the requestedStartTime value
     */
    public DateTime requestedStartTime() {
        return this.requestedStartTime;
    }

    /**
     * Set the start time for the time period for which restatement is initiated. Only UTC time is currently supported.
     *
     * @param requestedStartTime the requestedStartTime value to set
     * @return the RerunTumblingWindowTrigger object itself.
     */
    public RerunTumblingWindowTrigger withRequestedStartTime(DateTime requestedStartTime) {
        this.requestedStartTime = requestedStartTime;
        return this;
    }

    /**
     * Get the end time for the time period for which restatement is initiated. Only UTC time is currently supported.
     *
     * @return the requestedEndTime value
     */
    public DateTime requestedEndTime() {
        return this.requestedEndTime;
    }

    /**
     * Set the end time for the time period for which restatement is initiated. Only UTC time is currently supported.
     *
     * @param requestedEndTime the requestedEndTime value to set
     * @return the RerunTumblingWindowTrigger object itself.
     */
    public RerunTumblingWindowTrigger withRequestedEndTime(DateTime requestedEndTime) {
        this.requestedEndTime = requestedEndTime;
        return this;
    }

    /**
     * Get the max number of parallel time windows (ready for execution) for which a rerun is triggered.
     *
     * @return the rerunConcurrency value
     */
    public int rerunConcurrency() {
        return this.rerunConcurrency;
    }

    /**
     * Set the max number of parallel time windows (ready for execution) for which a rerun is triggered.
     *
     * @param rerunConcurrency the rerunConcurrency value to set
     * @return the RerunTumblingWindowTrigger object itself.
     */
    public RerunTumblingWindowTrigger withRerunConcurrency(int rerunConcurrency) {
        this.rerunConcurrency = rerunConcurrency;
        return this;
    }

}
