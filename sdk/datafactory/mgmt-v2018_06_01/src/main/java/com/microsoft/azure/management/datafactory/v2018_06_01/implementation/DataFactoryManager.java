/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.datafactory.v2018_06_01.implementation;

import com.microsoft.azure.AzureEnvironment;
import com.microsoft.azure.AzureResponseBuilder;
import com.microsoft.azure.credentials.AzureTokenCredentials;
import com.microsoft.azure.management.apigeneration.Beta;
import com.microsoft.azure.management.apigeneration.Beta.SinceVersion;
import com.microsoft.azure.arm.resources.AzureConfigurable;
import com.microsoft.azure.serializer.AzureJacksonAdapter;
import com.microsoft.rest.RestClient;
import com.microsoft.azure.management.datafactory.v2018_06_01.Operations;
import com.microsoft.azure.management.datafactory.v2018_06_01.Factories;
import com.microsoft.azure.management.datafactory.v2018_06_01.ExposureControls;
import com.microsoft.azure.management.datafactory.v2018_06_01.IntegrationRuntimes;
import com.microsoft.azure.management.datafactory.v2018_06_01.IntegrationRuntimeObjectMetadatas;
import com.microsoft.azure.management.datafactory.v2018_06_01.IntegrationRuntimeNodes;
import com.microsoft.azure.management.datafactory.v2018_06_01.LinkedServices;
import com.microsoft.azure.management.datafactory.v2018_06_01.Datasets;
import com.microsoft.azure.management.datafactory.v2018_06_01.Pipelines;
import com.microsoft.azure.management.datafactory.v2018_06_01.PipelineRuns;
import com.microsoft.azure.management.datafactory.v2018_06_01.ActivityRuns;
import com.microsoft.azure.management.datafactory.v2018_06_01.Triggers;
import com.microsoft.azure.management.datafactory.v2018_06_01.TriggerRuns;
import com.microsoft.azure.management.datafactory.v2018_06_01.DataFlows;
import com.microsoft.azure.management.datafactory.v2018_06_01.DataFlowDebugSessions;
import com.microsoft.azure.management.datafactory.v2018_06_01.ManagedVirtualNetworks;
import com.microsoft.azure.management.datafactory.v2018_06_01.ManagedPrivateEndpoints;
import com.microsoft.azure.arm.resources.implementation.AzureConfigurableCoreImpl;
import com.microsoft.azure.arm.resources.implementation.ManagerCore;

/**
 * Entry point to Azure DataFactory resource management.
 */
public final class DataFactoryManager extends ManagerCore<DataFactoryManager, DataFactoryManagementClientImpl> {
    private Operations operations;
    private Factories factories;
    private ExposureControls exposureControls;
    private IntegrationRuntimes integrationRuntimes;
    private IntegrationRuntimeObjectMetadatas integrationRuntimeObjectMetadatas;
    private IntegrationRuntimeNodes integrationRuntimeNodes;
    private LinkedServices linkedServices;
    private Datasets datasets;
    private Pipelines pipelines;
    private PipelineRuns pipelineRuns;
    private ActivityRuns activityRuns;
    private Triggers triggers;
    private TriggerRuns triggerRuns;
    private DataFlows dataFlows;
    private DataFlowDebugSessions dataFlowDebugSessions;
    private ManagedVirtualNetworks managedVirtualNetworks;
    private ManagedPrivateEndpoints managedPrivateEndpoints;
    /**
    * Get a Configurable instance that can be used to create DataFactoryManager with optional configuration.
    *
    * @return the instance allowing configurations
    */
    public static Configurable configure() {
        return new DataFactoryManager.ConfigurableImpl();
    }
    /**
    * Creates an instance of DataFactoryManager that exposes DataFactory resource management API entry points.
    *
    * @param credentials the credentials to use
    * @param subscriptionId the subscription UUID
    * @return the DataFactoryManager
    */
    public static DataFactoryManager authenticate(AzureTokenCredentials credentials, String subscriptionId) {
        return new DataFactoryManager(new RestClient.Builder()
            .withBaseUrl(credentials.environment(), AzureEnvironment.Endpoint.RESOURCE_MANAGER)
            .withCredentials(credentials)
            .withSerializerAdapter(new AzureJacksonAdapter())
            .withResponseBuilderFactory(new AzureResponseBuilder.Factory())
            .build(), subscriptionId);
    }
    /**
    * Creates an instance of DataFactoryManager that exposes DataFactory resource management API entry points.
    *
    * @param restClient the RestClient to be used for API calls.
    * @param subscriptionId the subscription UUID
    * @return the DataFactoryManager
    */
    public static DataFactoryManager authenticate(RestClient restClient, String subscriptionId) {
        return new DataFactoryManager(restClient, subscriptionId);
    }
    /**
    * The interface allowing configurations to be set.
    */
    public interface Configurable extends AzureConfigurable<Configurable> {
        /**
        * Creates an instance of DataFactoryManager that exposes DataFactory management API entry points.
        *
        * @param credentials the credentials to use
        * @param subscriptionId the subscription UUID
        * @return the interface exposing DataFactory management API entry points that work across subscriptions
        */
        DataFactoryManager authenticate(AzureTokenCredentials credentials, String subscriptionId);
    }

    /**
     * @return Entry point to manage Operations.
     */
    public Operations operations() {
        if (this.operations == null) {
            this.operations = new OperationsImpl(this);
        }
        return this.operations;
    }

    /**
     * @return Entry point to manage Factories.
     */
    public Factories factories() {
        if (this.factories == null) {
            this.factories = new FactoriesImpl(this);
        }
        return this.factories;
    }

    /**
     * @return Entry point to manage ExposureControls.
     */
    public ExposureControls exposureControls() {
        if (this.exposureControls == null) {
            this.exposureControls = new ExposureControlsImpl(this);
        }
        return this.exposureControls;
    }

    /**
     * @return Entry point to manage IntegrationRuntimes.
     */
    public IntegrationRuntimes integrationRuntimes() {
        if (this.integrationRuntimes == null) {
            this.integrationRuntimes = new IntegrationRuntimesImpl(this);
        }
        return this.integrationRuntimes;
    }

    /**
     * @return Entry point to manage IntegrationRuntimeObjectMetadatas.
     */
    public IntegrationRuntimeObjectMetadatas integrationRuntimeObjectMetadatas() {
        if (this.integrationRuntimeObjectMetadatas == null) {
            this.integrationRuntimeObjectMetadatas = new IntegrationRuntimeObjectMetadatasImpl(this);
        }
        return this.integrationRuntimeObjectMetadatas;
    }

    /**
     * @return Entry point to manage IntegrationRuntimeNodes.
     */
    public IntegrationRuntimeNodes integrationRuntimeNodes() {
        if (this.integrationRuntimeNodes == null) {
            this.integrationRuntimeNodes = new IntegrationRuntimeNodesImpl(this);
        }
        return this.integrationRuntimeNodes;
    }

    /**
     * @return Entry point to manage LinkedServices.
     */
    public LinkedServices linkedServices() {
        if (this.linkedServices == null) {
            this.linkedServices = new LinkedServicesImpl(this);
        }
        return this.linkedServices;
    }

    /**
     * @return Entry point to manage Datasets.
     */
    public Datasets datasets() {
        if (this.datasets == null) {
            this.datasets = new DatasetsImpl(this);
        }
        return this.datasets;
    }

    /**
     * @return Entry point to manage Pipelines.
     */
    public Pipelines pipelines() {
        if (this.pipelines == null) {
            this.pipelines = new PipelinesImpl(this);
        }
        return this.pipelines;
    }

    /**
     * @return Entry point to manage PipelineRuns.
     */
    public PipelineRuns pipelineRuns() {
        if (this.pipelineRuns == null) {
            this.pipelineRuns = new PipelineRunsImpl(this);
        }
        return this.pipelineRuns;
    }

    /**
     * @return Entry point to manage ActivityRuns.
     */
    public ActivityRuns activityRuns() {
        if (this.activityRuns == null) {
            this.activityRuns = new ActivityRunsImpl(this);
        }
        return this.activityRuns;
    }

    /**
     * @return Entry point to manage Triggers.
     */
    public Triggers triggers() {
        if (this.triggers == null) {
            this.triggers = new TriggersImpl(this);
        }
        return this.triggers;
    }

    /**
     * @return Entry point to manage TriggerRuns.
     */
    public TriggerRuns triggerRuns() {
        if (this.triggerRuns == null) {
            this.triggerRuns = new TriggerRunsImpl(this);
        }
        return this.triggerRuns;
    }

    /**
     * @return Entry point to manage DataFlows.
     */
    public DataFlows dataFlows() {
        if (this.dataFlows == null) {
            this.dataFlows = new DataFlowsImpl(this);
        }
        return this.dataFlows;
    }

    /**
     * @return Entry point to manage DataFlowDebugSessions.
     */
    public DataFlowDebugSessions dataFlowDebugSessions() {
        if (this.dataFlowDebugSessions == null) {
            this.dataFlowDebugSessions = new DataFlowDebugSessionsImpl(this);
        }
        return this.dataFlowDebugSessions;
    }

    /**
     * @return Entry point to manage ManagedVirtualNetworks.
     */
    public ManagedVirtualNetworks managedVirtualNetworks() {
        if (this.managedVirtualNetworks == null) {
            this.managedVirtualNetworks = new ManagedVirtualNetworksImpl(this);
        }
        return this.managedVirtualNetworks;
    }

    /**
     * @return Entry point to manage ManagedPrivateEndpoints.
     */
    public ManagedPrivateEndpoints managedPrivateEndpoints() {
        if (this.managedPrivateEndpoints == null) {
            this.managedPrivateEndpoints = new ManagedPrivateEndpointsImpl(this);
        }
        return this.managedPrivateEndpoints;
    }

    /**
    * The implementation for Configurable interface.
    */
    private static final class ConfigurableImpl extends AzureConfigurableCoreImpl<Configurable> implements Configurable {
        public DataFactoryManager authenticate(AzureTokenCredentials credentials, String subscriptionId) {
           return DataFactoryManager.authenticate(buildRestClient(credentials), subscriptionId);
        }
     }
    private DataFactoryManager(RestClient restClient, String subscriptionId) {
        super(
            restClient,
            subscriptionId,
            new DataFactoryManagementClientImpl(restClient).withSubscriptionId(subscriptionId));
    }
}
