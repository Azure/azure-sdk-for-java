/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.datafactory.v2018_06_01;

import java.util.List;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.microsoft.rest.serializer.JsonFlatten;

/**
 * SSIS package location.
 */
@JsonFlatten
public class SSISPackageLocation {
    /**
     * The SSIS package path. Type: string (or Expression with resultType
     * string).
     */
    @JsonProperty(value = "packagePath")
    private Object packagePath;

    /**
     * The type of SSIS package location. Possible values include: 'SSISDB',
     * 'File', 'InlinePackage', 'PackageStore'.
     */
    @JsonProperty(value = "type")
    private SsisPackageLocationType type;

    /**
     * Password of the package.
     */
    @JsonProperty(value = "typeProperties.packagePassword")
    private SecretBase packagePassword;

    /**
     * The package access credential.
     */
    @JsonProperty(value = "typeProperties.accessCredential")
    private SSISAccessCredential accessCredential;

    /**
     * The configuration file of the package execution. Type: string (or
     * Expression with resultType string).
     */
    @JsonProperty(value = "typeProperties.configurationPath")
    private Object configurationPath;

    /**
     * The configuration file access credential.
     */
    @JsonProperty(value = "typeProperties.configurationAccessCredential")
    private SSISAccessCredential configurationAccessCredential;

    /**
     * The package name.
     */
    @JsonProperty(value = "typeProperties.packageName")
    private String packageName;

    /**
     * The embedded package content. Type: string (or Expression with
     * resultType string).
     */
    @JsonProperty(value = "typeProperties.packageContent")
    private Object packageContent;

    /**
     * The embedded package last modified date.
     */
    @JsonProperty(value = "typeProperties.packageLastModifiedDate")
    private String packageLastModifiedDate;

    /**
     * The embedded child package list.
     */
    @JsonProperty(value = "typeProperties.childPackages")
    private List<SSISChildPackage> childPackages;

    /**
     * Get the SSIS package path. Type: string (or Expression with resultType string).
     *
     * @return the packagePath value
     */
    public Object packagePath() {
        return this.packagePath;
    }

    /**
     * Set the SSIS package path. Type: string (or Expression with resultType string).
     *
     * @param packagePath the packagePath value to set
     * @return the SSISPackageLocation object itself.
     */
    public SSISPackageLocation withPackagePath(Object packagePath) {
        this.packagePath = packagePath;
        return this;
    }

    /**
     * Get the type of SSIS package location. Possible values include: 'SSISDB', 'File', 'InlinePackage', 'PackageStore'.
     *
     * @return the type value
     */
    public SsisPackageLocationType type() {
        return this.type;
    }

    /**
     * Set the type of SSIS package location. Possible values include: 'SSISDB', 'File', 'InlinePackage', 'PackageStore'.
     *
     * @param type the type value to set
     * @return the SSISPackageLocation object itself.
     */
    public SSISPackageLocation withType(SsisPackageLocationType type) {
        this.type = type;
        return this;
    }

    /**
     * Get password of the package.
     *
     * @return the packagePassword value
     */
    public SecretBase packagePassword() {
        return this.packagePassword;
    }

    /**
     * Set password of the package.
     *
     * @param packagePassword the packagePassword value to set
     * @return the SSISPackageLocation object itself.
     */
    public SSISPackageLocation withPackagePassword(SecretBase packagePassword) {
        this.packagePassword = packagePassword;
        return this;
    }

    /**
     * Get the package access credential.
     *
     * @return the accessCredential value
     */
    public SSISAccessCredential accessCredential() {
        return this.accessCredential;
    }

    /**
     * Set the package access credential.
     *
     * @param accessCredential the accessCredential value to set
     * @return the SSISPackageLocation object itself.
     */
    public SSISPackageLocation withAccessCredential(SSISAccessCredential accessCredential) {
        this.accessCredential = accessCredential;
        return this;
    }

    /**
     * Get the configuration file of the package execution. Type: string (or Expression with resultType string).
     *
     * @return the configurationPath value
     */
    public Object configurationPath() {
        return this.configurationPath;
    }

    /**
     * Set the configuration file of the package execution. Type: string (or Expression with resultType string).
     *
     * @param configurationPath the configurationPath value to set
     * @return the SSISPackageLocation object itself.
     */
    public SSISPackageLocation withConfigurationPath(Object configurationPath) {
        this.configurationPath = configurationPath;
        return this;
    }

    /**
     * Get the configuration file access credential.
     *
     * @return the configurationAccessCredential value
     */
    public SSISAccessCredential configurationAccessCredential() {
        return this.configurationAccessCredential;
    }

    /**
     * Set the configuration file access credential.
     *
     * @param configurationAccessCredential the configurationAccessCredential value to set
     * @return the SSISPackageLocation object itself.
     */
    public SSISPackageLocation withConfigurationAccessCredential(SSISAccessCredential configurationAccessCredential) {
        this.configurationAccessCredential = configurationAccessCredential;
        return this;
    }

    /**
     * Get the package name.
     *
     * @return the packageName value
     */
    public String packageName() {
        return this.packageName;
    }

    /**
     * Set the package name.
     *
     * @param packageName the packageName value to set
     * @return the SSISPackageLocation object itself.
     */
    public SSISPackageLocation withPackageName(String packageName) {
        this.packageName = packageName;
        return this;
    }

    /**
     * Get the embedded package content. Type: string (or Expression with resultType string).
     *
     * @return the packageContent value
     */
    public Object packageContent() {
        return this.packageContent;
    }

    /**
     * Set the embedded package content. Type: string (or Expression with resultType string).
     *
     * @param packageContent the packageContent value to set
     * @return the SSISPackageLocation object itself.
     */
    public SSISPackageLocation withPackageContent(Object packageContent) {
        this.packageContent = packageContent;
        return this;
    }

    /**
     * Get the embedded package last modified date.
     *
     * @return the packageLastModifiedDate value
     */
    public String packageLastModifiedDate() {
        return this.packageLastModifiedDate;
    }

    /**
     * Set the embedded package last modified date.
     *
     * @param packageLastModifiedDate the packageLastModifiedDate value to set
     * @return the SSISPackageLocation object itself.
     */
    public SSISPackageLocation withPackageLastModifiedDate(String packageLastModifiedDate) {
        this.packageLastModifiedDate = packageLastModifiedDate;
        return this;
    }

    /**
     * Get the embedded child package list.
     *
     * @return the childPackages value
     */
    public List<SSISChildPackage> childPackages() {
        return this.childPackages;
    }

    /**
     * Set the embedded child package list.
     *
     * @param childPackages the childPackages value to set
     * @return the SSISPackageLocation object itself.
     */
    public SSISPackageLocation withChildPackages(List<SSISChildPackage> childPackages) {
        this.childPackages = childPackages;
        return this;
    }

}
