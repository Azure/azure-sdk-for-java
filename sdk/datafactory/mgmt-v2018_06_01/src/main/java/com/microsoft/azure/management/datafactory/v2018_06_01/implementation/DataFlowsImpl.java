/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.datafactory.v2018_06_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.datafactory.v2018_06_01.DataFlows;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.datafactory.v2018_06_01.DataFlowResource;

class DataFlowsImpl extends WrapperImpl<DataFlowsInner> implements DataFlows {
    private final DataFactoryManager manager;

    DataFlowsImpl(DataFactoryManager manager) {
        super(manager.inner().dataFlows());
        this.manager = manager;
    }

    public DataFactoryManager manager() {
        return this.manager;
    }

    @Override
    public DataFlowResourceImpl define(String name) {
        return wrapModel(name);
    }

    private DataFlowResourceImpl wrapModel(DataFlowResourceInner inner) {
        return  new DataFlowResourceImpl(inner, manager());
    }

    private DataFlowResourceImpl wrapModel(String name) {
        return new DataFlowResourceImpl(name, this.manager());
    }

    @Override
    public Observable<DataFlowResource> listByFactoryAsync(final String resourceGroupName, final String factoryName) {
        DataFlowsInner client = this.inner();
        return client.listByFactoryAsync(resourceGroupName, factoryName)
        .flatMapIterable(new Func1<Page<DataFlowResourceInner>, Iterable<DataFlowResourceInner>>() {
            @Override
            public Iterable<DataFlowResourceInner> call(Page<DataFlowResourceInner> page) {
                return page.items();
            }
        })
        .map(new Func1<DataFlowResourceInner, DataFlowResource>() {
            @Override
            public DataFlowResource call(DataFlowResourceInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<DataFlowResource> getAsync(String resourceGroupName, String factoryName, String dataFlowName) {
        DataFlowsInner client = this.inner();
        return client.getAsync(resourceGroupName, factoryName, dataFlowName)
        .flatMap(new Func1<DataFlowResourceInner, Observable<DataFlowResource>>() {
            @Override
            public Observable<DataFlowResource> call(DataFlowResourceInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((DataFlowResource)wrapModel(inner));
                }
            }
       });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String factoryName, String dataFlowName) {
        DataFlowsInner client = this.inner();
        return client.deleteAsync(resourceGroupName, factoryName, dataFlowName).toCompletable();
    }

}
