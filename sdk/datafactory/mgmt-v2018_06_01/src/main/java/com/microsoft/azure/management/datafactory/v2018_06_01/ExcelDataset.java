/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.datafactory.v2018_06_01;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.microsoft.rest.serializer.JsonFlatten;
import com.microsoft.azure.management.datafactory.v2018_06_01.implementation.DatasetInner;

/**
 * Excel dataset.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type", defaultImpl = ExcelDataset.class)
@JsonTypeName("Excel")
@JsonFlatten
public class ExcelDataset extends DatasetInner {
    /**
     * The location of the excel storage.
     */
    @JsonProperty(value = "typeProperties.location", required = true)
    private DatasetLocation location;

    /**
     * The sheet of excel file. Type: string (or Expression with resultType
     * string).
     */
    @JsonProperty(value = "typeProperties.sheetName", required = true)
    private Object sheetName;

    /**
     * The partial data of one sheet. Type: string (or Expression with
     * resultType string).
     */
    @JsonProperty(value = "typeProperties.range")
    private Object range;

    /**
     * When used as input, treat the first row of data as headers. When used as
     * output,write the headers into the output as the first row of data. The
     * default value is false. Type: boolean (or Expression with resultType
     * boolean).
     */
    @JsonProperty(value = "typeProperties.firstRowAsHeader")
    private Object firstRowAsHeader;

    /**
     * The data compression method used for the json dataset.
     */
    @JsonProperty(value = "typeProperties.compression")
    private DatasetCompression compression;

    /**
     * The null value string. Type: string (or Expression with resultType
     * string).
     */
    @JsonProperty(value = "typeProperties.nullValue")
    private Object nullValue;

    /**
     * Get the location of the excel storage.
     *
     * @return the location value
     */
    public DatasetLocation location() {
        return this.location;
    }

    /**
     * Set the location of the excel storage.
     *
     * @param location the location value to set
     * @return the ExcelDataset object itself.
     */
    public ExcelDataset withLocation(DatasetLocation location) {
        this.location = location;
        return this;
    }

    /**
     * Get the sheet of excel file. Type: string (or Expression with resultType string).
     *
     * @return the sheetName value
     */
    public Object sheetName() {
        return this.sheetName;
    }

    /**
     * Set the sheet of excel file. Type: string (or Expression with resultType string).
     *
     * @param sheetName the sheetName value to set
     * @return the ExcelDataset object itself.
     */
    public ExcelDataset withSheetName(Object sheetName) {
        this.sheetName = sheetName;
        return this;
    }

    /**
     * Get the partial data of one sheet. Type: string (or Expression with resultType string).
     *
     * @return the range value
     */
    public Object range() {
        return this.range;
    }

    /**
     * Set the partial data of one sheet. Type: string (or Expression with resultType string).
     *
     * @param range the range value to set
     * @return the ExcelDataset object itself.
     */
    public ExcelDataset withRange(Object range) {
        this.range = range;
        return this;
    }

    /**
     * Get when used as input, treat the first row of data as headers. When used as output,write the headers into the output as the first row of data. The default value is false. Type: boolean (or Expression with resultType boolean).
     *
     * @return the firstRowAsHeader value
     */
    public Object firstRowAsHeader() {
        return this.firstRowAsHeader;
    }

    /**
     * Set when used as input, treat the first row of data as headers. When used as output,write the headers into the output as the first row of data. The default value is false. Type: boolean (or Expression with resultType boolean).
     *
     * @param firstRowAsHeader the firstRowAsHeader value to set
     * @return the ExcelDataset object itself.
     */
    public ExcelDataset withFirstRowAsHeader(Object firstRowAsHeader) {
        this.firstRowAsHeader = firstRowAsHeader;
        return this;
    }

    /**
     * Get the data compression method used for the json dataset.
     *
     * @return the compression value
     */
    public DatasetCompression compression() {
        return this.compression;
    }

    /**
     * Set the data compression method used for the json dataset.
     *
     * @param compression the compression value to set
     * @return the ExcelDataset object itself.
     */
    public ExcelDataset withCompression(DatasetCompression compression) {
        this.compression = compression;
        return this;
    }

    /**
     * Get the null value string. Type: string (or Expression with resultType string).
     *
     * @return the nullValue value
     */
    public Object nullValue() {
        return this.nullValue;
    }

    /**
     * Set the null value string. Type: string (or Expression with resultType string).
     *
     * @param nullValue the nullValue value to set
     * @return the ExcelDataset object itself.
     */
    public ExcelDataset withNullValue(Object nullValue) {
        this.nullValue = nullValue;
        return this;
    }

}
