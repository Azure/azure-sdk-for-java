// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.communication.phonenumbersdemo.implementation;

import com.azure.communication.phonenumbersdemo.models.PhoneNumberOperation;
import com.azure.communication.phonenumbersdemo.models.PhoneNumberSearchResult;
import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.DefaultPollingStrategy;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.core.util.serializer.TypeReference;
import java.time.Duration;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in PhoneNumbers. */
public final class PhoneNumbersImpl {
    /** The proxy service used to perform REST calls. */
    private final PhoneNumbersService service;

    /** The service client containing this operation class. */
    private final PhoneNumbersClientImpl client;

    /**
     * Initializes an instance of PhoneNumbersImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    PhoneNumbersImpl(PhoneNumbersClientImpl client) {
        this.service =
                RestProxy.create(PhoneNumbersService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AzureCommunicationServicesPhoneNumbers to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "AzureCommunicationSe")
    private interface PhoneNumbersService {
        @Post("/availablePhoneNumbers/countries/{countryCode}/:search")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> searchAvailablePhoneNumbers(
                @HostParam("endpoint") String endpoint,
                @PathParam("countryCode") String countryCode,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") BinaryData body,
                RequestOptions requestOptions,
                Context context);

        @Get("/availablePhoneNumbers/searchResults/{searchId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getSearchResult(
                @HostParam("endpoint") String endpoint,
                @PathParam("searchId") String searchId,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Post("/availablePhoneNumbers/:purchase")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> purchasePhoneNumbers(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") BinaryData body,
                RequestOptions requestOptions,
                Context context);

        @Get("/phoneNumbers/operations/{operationId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getOperation(
                @HostParam("endpoint") String endpoint,
                @PathParam("operationId") String operationId,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Delete("/phoneNumbers/operations/{operationId}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> cancelOperation(
                @HostParam("endpoint") String endpoint,
                @PathParam("operationId") String operationId,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Patch("/phoneNumbers/{phoneNumber}/capabilities")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> updateCapabilities(
                @HostParam("endpoint") String endpoint,
                @PathParam("phoneNumber") String phoneNumber,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Get("/phoneNumbers/{phoneNumber}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getByNumber(
                @HostParam("endpoint") String endpoint,
                @PathParam("phoneNumber") String phoneNumber,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Delete("/phoneNumbers/{phoneNumber}")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> releasePhoneNumber(
                @HostParam("endpoint") String endpoint,
                @PathParam("phoneNumber") String phoneNumber,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Get("/phoneNumbers")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listPhoneNumbers(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listPhoneNumbersNext(
                @PathParam(value = "nextLink", encoded = true) String nextLink,
                @HostParam("endpoint") String endpoint,
                RequestOptions requestOptions,
                Context context);
    }

    /**
     * Search for available phone numbers to purchase.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     phoneNumberType: String(geographic/tollFree)
     *     assignmentType: String(person/application)
     *     capabilities: {
     *         calling: String(none/inbound/outbound/inbound+outbound)
     *         sms: String(none/inbound/outbound/inbound+outbound)
     *     }
     *     areaCode: String
     *     quantity: Integer
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     searchId: String
     *     phoneNumbers: [
     *         String
     *     ]
     *     phoneNumberType: String(geographic/tollFree)
     *     assignmentType: String(person/application)
     *     capabilities: {
     *         calling: String(none/inbound/outbound/inbound+outbound)
     *         sms: String(none/inbound/outbound/inbound+outbound)
     *     }
     *     cost: {
     *         amount: double
     *         currencyCode: String
     *         billingFrequency: String(monthly)
     *     }
     *     searchExpiresBy: String
     * }
     * }</pre>
     *
     * @param countryCode The ISO 3166-2 country code, e.g. US.
     * @param body The phone number search request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the result of a phone number search operation along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> searchAvailablePhoneNumbersWithResponseAsync(
            String countryCode, BinaryData body, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.searchAvailablePhoneNumbers(
                                this.client.getEndpoint(),
                                countryCode,
                                this.client.getServiceVersion().getVersion(),
                                body,
                                requestOptions,
                                context));
    }

    /**
     * Search for available phone numbers to purchase.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     phoneNumberType: String(geographic/tollFree)
     *     assignmentType: String(person/application)
     *     capabilities: {
     *         calling: String(none/inbound/outbound/inbound+outbound)
     *         sms: String(none/inbound/outbound/inbound+outbound)
     *     }
     *     areaCode: String
     *     quantity: Integer
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     searchId: String
     *     phoneNumbers: [
     *         String
     *     ]
     *     phoneNumberType: String(geographic/tollFree)
     *     assignmentType: String(person/application)
     *     capabilities: {
     *         calling: String(none/inbound/outbound/inbound+outbound)
     *         sms: String(none/inbound/outbound/inbound+outbound)
     *     }
     *     cost: {
     *         amount: double
     *         currencyCode: String
     *         billingFrequency: String(monthly)
     *     }
     *     searchExpiresBy: String
     * }
     * }</pre>
     *
     * @param countryCode The ISO 3166-2 country code, e.g. US.
     * @param body The phone number search request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the result of a phone number search operation along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> searchAvailablePhoneNumbersWithResponseAsync(
            String countryCode, BinaryData body, RequestOptions requestOptions, Context context) {
        return service.searchAvailablePhoneNumbers(
                this.client.getEndpoint(),
                countryCode,
                this.client.getServiceVersion().getVersion(),
                body,
                requestOptions,
                context);
    }

    /**
     * Search for available phone numbers to purchase.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     phoneNumberType: String(geographic/tollFree)
     *     assignmentType: String(person/application)
     *     capabilities: {
     *         calling: String(none/inbound/outbound/inbound+outbound)
     *         sms: String(none/inbound/outbound/inbound+outbound)
     *     }
     *     areaCode: String
     *     quantity: Integer
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     searchId: String
     *     phoneNumbers: [
     *         String
     *     ]
     *     phoneNumberType: String(geographic/tollFree)
     *     assignmentType: String(person/application)
     *     capabilities: {
     *         calling: String(none/inbound/outbound/inbound+outbound)
     *         sms: String(none/inbound/outbound/inbound+outbound)
     *     }
     *     cost: {
     *         amount: double
     *         currencyCode: String
     *         billingFrequency: String(monthly)
     *     }
     *     searchExpiresBy: String
     * }
     * }</pre>
     *
     * @param countryCode The ISO 3166-2 country code, e.g. US.
     * @param body The phone number search request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of the result of a phone number search operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginSearchAvailablePhoneNumbersAsync(
            String countryCode, BinaryData body, RequestOptions requestOptions) {
        return PollerFlux.create(
                Duration.ofSeconds(1),
                () -> this.searchAvailablePhoneNumbersWithResponseAsync(countryCode, body, requestOptions),
                new com.azure.communication.phonenumbersdemo.implementation.PhoneNumbersSearchPollingStrategy<>(
                        this,
                        this.client.getHttpPipeline(),
                        null,
                        requestOptions != null && requestOptions.getContext() != null
                                ? requestOptions.getContext()
                                : Context.NONE),
                new TypeReferenceBinaryData(),
                new TypeReferenceBinaryData());
    }

    /**
     * Search for available phone numbers to purchase.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     phoneNumberType: String(geographic/tollFree)
     *     assignmentType: String(person/application)
     *     capabilities: {
     *         calling: String(none/inbound/outbound/inbound+outbound)
     *         sms: String(none/inbound/outbound/inbound+outbound)
     *     }
     *     areaCode: String
     *     quantity: Integer
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     searchId: String
     *     phoneNumbers: [
     *         String
     *     ]
     *     phoneNumberType: String(geographic/tollFree)
     *     assignmentType: String(person/application)
     *     capabilities: {
     *         calling: String(none/inbound/outbound/inbound+outbound)
     *         sms: String(none/inbound/outbound/inbound+outbound)
     *     }
     *     cost: {
     *         amount: double
     *         currencyCode: String
     *         billingFrequency: String(monthly)
     *     }
     *     searchExpiresBy: String
     * }
     * }</pre>
     *
     * @param countryCode The ISO 3166-2 country code, e.g. US.
     * @param body The phone number search request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of the result of a phone number search operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginSearchAvailablePhoneNumbersAsync(
            String countryCode, BinaryData body, RequestOptions requestOptions, Context context) {
        return PollerFlux.create(
                Duration.ofSeconds(1),
                () -> this.searchAvailablePhoneNumbersWithResponseAsync(countryCode, body, requestOptions, context),
                new com.azure.communication.phonenumbersdemo.implementation.PhoneNumbersSearchPollingStrategy<>(
                        this,
                        this.client.getHttpPipeline(),
                        null,
                        requestOptions != null && requestOptions.getContext() != null
                                ? requestOptions.getContext()
                                : Context.NONE),
                new TypeReferenceBinaryData(),
                new TypeReferenceBinaryData());
    }

    /**
     * Search for available phone numbers to purchase.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     phoneNumberType: String(geographic/tollFree)
     *     assignmentType: String(person/application)
     *     capabilities: {
     *         calling: String(none/inbound/outbound/inbound+outbound)
     *         sms: String(none/inbound/outbound/inbound+outbound)
     *     }
     *     areaCode: String
     *     quantity: Integer
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     searchId: String
     *     phoneNumbers: [
     *         String
     *     ]
     *     phoneNumberType: String(geographic/tollFree)
     *     assignmentType: String(person/application)
     *     capabilities: {
     *         calling: String(none/inbound/outbound/inbound+outbound)
     *         sms: String(none/inbound/outbound/inbound+outbound)
     *     }
     *     cost: {
     *         amount: double
     *         currencyCode: String
     *         billingFrequency: String(monthly)
     *     }
     *     searchExpiresBy: String
     * }
     * }</pre>
     *
     * @param countryCode The ISO 3166-2 country code, e.g. US.
     * @param body The phone number search request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of the result of a phone number search operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginSearchAvailablePhoneNumbers(
            String countryCode, BinaryData body, RequestOptions requestOptions) {
        return this.beginSearchAvailablePhoneNumbersAsync(countryCode, body, requestOptions).getSyncPoller();
    }

    /**
     * Search for available phone numbers to purchase.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     phoneNumberType: String(geographic/tollFree)
     *     assignmentType: String(person/application)
     *     capabilities: {
     *         calling: String(none/inbound/outbound/inbound+outbound)
     *         sms: String(none/inbound/outbound/inbound+outbound)
     *     }
     *     areaCode: String
     *     quantity: Integer
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     searchId: String
     *     phoneNumbers: [
     *         String
     *     ]
     *     phoneNumberType: String(geographic/tollFree)
     *     assignmentType: String(person/application)
     *     capabilities: {
     *         calling: String(none/inbound/outbound/inbound+outbound)
     *         sms: String(none/inbound/outbound/inbound+outbound)
     *     }
     *     cost: {
     *         amount: double
     *         currencyCode: String
     *         billingFrequency: String(monthly)
     *     }
     *     searchExpiresBy: String
     * }
     * }</pre>
     *
     * @param countryCode The ISO 3166-2 country code, e.g. US.
     * @param body The phone number search request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of the result of a phone number search operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<PhoneNumberOperation, PhoneNumberSearchResult> beginSearchAvailablePhoneNumbersWithModelAsync(
            String countryCode, BinaryData body, RequestOptions requestOptions) {
        return PollerFlux.create(
                Duration.ofSeconds(1),
                () -> this.searchAvailablePhoneNumbersWithResponseAsync(countryCode, body, requestOptions),
                new com.azure.communication.phonenumbersdemo.implementation.PhoneNumbersSearchPollingStrategy<>(
                        this,
                        this.client.getHttpPipeline(),
                        null,
                        requestOptions != null && requestOptions.getContext() != null
                                ? requestOptions.getContext()
                                : Context.NONE),
                new TypeReferencePhoneNumberOperation(),
                new TypeReferencePhoneNumberSearchResult());
    }

    /**
     * Search for available phone numbers to purchase.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     phoneNumberType: String(geographic/tollFree)
     *     assignmentType: String(person/application)
     *     capabilities: {
     *         calling: String(none/inbound/outbound/inbound+outbound)
     *         sms: String(none/inbound/outbound/inbound+outbound)
     *     }
     *     areaCode: String
     *     quantity: Integer
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     searchId: String
     *     phoneNumbers: [
     *         String
     *     ]
     *     phoneNumberType: String(geographic/tollFree)
     *     assignmentType: String(person/application)
     *     capabilities: {
     *         calling: String(none/inbound/outbound/inbound+outbound)
     *         sms: String(none/inbound/outbound/inbound+outbound)
     *     }
     *     cost: {
     *         amount: double
     *         currencyCode: String
     *         billingFrequency: String(monthly)
     *     }
     *     searchExpiresBy: String
     * }
     * }</pre>
     *
     * @param countryCode The ISO 3166-2 country code, e.g. US.
     * @param body The phone number search request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of the result of a phone number search operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<PhoneNumberOperation, PhoneNumberSearchResult> beginSearchAvailablePhoneNumbersWithModelAsync(
            String countryCode, BinaryData body, RequestOptions requestOptions, Context context) {
        return PollerFlux.create(
                Duration.ofSeconds(1),
                () -> this.searchAvailablePhoneNumbersWithResponseAsync(countryCode, body, requestOptions, context),
                new com.azure.communication.phonenumbersdemo.implementation.PhoneNumbersSearchPollingStrategy<>(
                        this,
                        this.client.getHttpPipeline(),
                        null,
                        requestOptions != null && requestOptions.getContext() != null
                                ? requestOptions.getContext()
                                : Context.NONE),
                new TypeReferencePhoneNumberOperation(),
                new TypeReferencePhoneNumberSearchResult());
    }

    /**
     * Search for available phone numbers to purchase.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     phoneNumberType: String(geographic/tollFree)
     *     assignmentType: String(person/application)
     *     capabilities: {
     *         calling: String(none/inbound/outbound/inbound+outbound)
     *         sms: String(none/inbound/outbound/inbound+outbound)
     *     }
     *     areaCode: String
     *     quantity: Integer
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     searchId: String
     *     phoneNumbers: [
     *         String
     *     ]
     *     phoneNumberType: String(geographic/tollFree)
     *     assignmentType: String(person/application)
     *     capabilities: {
     *         calling: String(none/inbound/outbound/inbound+outbound)
     *         sms: String(none/inbound/outbound/inbound+outbound)
     *     }
     *     cost: {
     *         amount: double
     *         currencyCode: String
     *         billingFrequency: String(monthly)
     *     }
     *     searchExpiresBy: String
     * }
     * }</pre>
     *
     * @param countryCode The ISO 3166-2 country code, e.g. US.
     * @param body The phone number search request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of the result of a phone number search operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PhoneNumberOperation, PhoneNumberSearchResult> beginSearchAvailablePhoneNumbersWithModel(
            String countryCode, BinaryData body, RequestOptions requestOptions) {
        return this.beginSearchAvailablePhoneNumbersWithModelAsync(countryCode, body, requestOptions).getSyncPoller();
    }

    /**
     * Gets a phone number search result by search id.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     searchId: String
     *     phoneNumbers: [
     *         String
     *     ]
     *     phoneNumberType: String(geographic/tollFree)
     *     assignmentType: String(person/application)
     *     capabilities: {
     *         calling: String(none/inbound/outbound/inbound+outbound)
     *         sms: String(none/inbound/outbound/inbound+outbound)
     *     }
     *     cost: {
     *         amount: double
     *         currencyCode: String
     *         billingFrequency: String(monthly)
     *     }
     *     searchExpiresBy: String
     * }
     * }</pre>
     *
     * @param searchId The search Id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a phone number search result by search id along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getSearchResultWithResponseAsync(String searchId, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.getSearchResult(
                                this.client.getEndpoint(),
                                searchId,
                                this.client.getServiceVersion().getVersion(),
                                requestOptions,
                                context));
    }

    /**
     * Gets a phone number search result by search id.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     searchId: String
     *     phoneNumbers: [
     *         String
     *     ]
     *     phoneNumberType: String(geographic/tollFree)
     *     assignmentType: String(person/application)
     *     capabilities: {
     *         calling: String(none/inbound/outbound/inbound+outbound)
     *         sms: String(none/inbound/outbound/inbound+outbound)
     *     }
     *     cost: {
     *         amount: double
     *         currencyCode: String
     *         billingFrequency: String(monthly)
     *     }
     *     searchExpiresBy: String
     * }
     * }</pre>
     *
     * @param searchId The search Id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a phone number search result by search id along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getSearchResultWithResponseAsync(
            String searchId, RequestOptions requestOptions, Context context) {
        return service.getSearchResult(
                this.client.getEndpoint(),
                searchId,
                this.client.getServiceVersion().getVersion(),
                requestOptions,
                context);
    }

    /**
     * Gets a phone number search result by search id.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     searchId: String
     *     phoneNumbers: [
     *         String
     *     ]
     *     phoneNumberType: String(geographic/tollFree)
     *     assignmentType: String(person/application)
     *     capabilities: {
     *         calling: String(none/inbound/outbound/inbound+outbound)
     *         sms: String(none/inbound/outbound/inbound+outbound)
     *     }
     *     cost: {
     *         amount: double
     *         currencyCode: String
     *         billingFrequency: String(monthly)
     *     }
     *     searchExpiresBy: String
     * }
     * }</pre>
     *
     * @param searchId The search Id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a phone number search result by search id along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getSearchResultWithResponse(String searchId, RequestOptions requestOptions) {
        return getSearchResultWithResponseAsync(searchId, requestOptions).block();
    }

    /**
     * Purchases phone numbers.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     searchId: String
     * }
     * }</pre>
     *
     * @param body The phone number purchase request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> purchasePhoneNumbersWithResponseAsync(BinaryData body, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.purchasePhoneNumbers(
                                this.client.getEndpoint(),
                                this.client.getServiceVersion().getVersion(),
                                body,
                                requestOptions,
                                context));
    }

    /**
     * Purchases phone numbers.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     searchId: String
     * }
     * }</pre>
     *
     * @param body The phone number purchase request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> purchasePhoneNumbersWithResponseAsync(
            BinaryData body, RequestOptions requestOptions, Context context) {
        return service.purchasePhoneNumbers(
                this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), body, requestOptions, context);
    }

    /**
     * Purchases phone numbers.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     searchId: String
     * }
     * }</pre>
     *
     * @param body The phone number purchase request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginPurchasePhoneNumbersAsync(
            BinaryData body, RequestOptions requestOptions) {
        return PollerFlux.create(
                Duration.ofSeconds(1),
                () -> this.purchasePhoneNumbersWithResponseAsync(body, requestOptions),
                new DefaultPollingStrategy<>(
                        this.client.getHttpPipeline(),
                        null,
                        requestOptions != null && requestOptions.getContext() != null
                                ? requestOptions.getContext()
                                : Context.NONE),
                new TypeReferenceBinaryData(),
                new TypeReferenceBinaryData());
    }

    /**
     * Purchases phone numbers.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     searchId: String
     * }
     * }</pre>
     *
     * @param body The phone number purchase request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginPurchasePhoneNumbersAsync(
            BinaryData body, RequestOptions requestOptions, Context context) {
        return PollerFlux.create(
                Duration.ofSeconds(1),
                () -> this.purchasePhoneNumbersWithResponseAsync(body, requestOptions, context),
                new DefaultPollingStrategy<>(
                        this.client.getHttpPipeline(),
                        null,
                        requestOptions != null && requestOptions.getContext() != null
                                ? requestOptions.getContext()
                                : Context.NONE),
                new TypeReferenceBinaryData(),
                new TypeReferenceBinaryData());
    }

    /**
     * Purchases phone numbers.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     searchId: String
     * }
     * }</pre>
     *
     * @param body The phone number purchase request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginPurchasePhoneNumbers(
            BinaryData body, RequestOptions requestOptions) {
        return this.beginPurchasePhoneNumbersAsync(body, requestOptions).getSyncPoller();
    }

    /**
     * Gets an operation by its id.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     status: String(notStarted/running/succeeded/failed)
     *     resourceLocation: String
     *     createdDateTime: String
     *     error: {
     *         code: String
     *         message: String
     *         target: String
     *         details: [
     *             (recursive schema, see above)
     *         ]
     *         innerError: (recursive schema, see innerError above)
     *     }
     *     id: String
     *     operationType: String(purchase/releasePhoneNumber/search/updatePhoneNumberCapabilities)
     *     lastActionDateTime: String
     * }
     * }</pre>
     *
     * @param operationId The id of the operation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an operation by its id along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getOperationWithResponseAsync(String operationId, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.getOperation(
                                this.client.getEndpoint(),
                                operationId,
                                this.client.getServiceVersion().getVersion(),
                                requestOptions,
                                context));
    }

    /**
     * Gets an operation by its id.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     status: String(notStarted/running/succeeded/failed)
     *     resourceLocation: String
     *     createdDateTime: String
     *     error: {
     *         code: String
     *         message: String
     *         target: String
     *         details: [
     *             (recursive schema, see above)
     *         ]
     *         innerError: (recursive schema, see innerError above)
     *     }
     *     id: String
     *     operationType: String(purchase/releasePhoneNumber/search/updatePhoneNumberCapabilities)
     *     lastActionDateTime: String
     * }
     * }</pre>
     *
     * @param operationId The id of the operation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an operation by its id along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getOperationWithResponseAsync(
            String operationId, RequestOptions requestOptions, Context context) {
        return service.getOperation(
                this.client.getEndpoint(),
                operationId,
                this.client.getServiceVersion().getVersion(),
                requestOptions,
                context);
    }

    /**
     * Gets an operation by its id.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     status: String(notStarted/running/succeeded/failed)
     *     resourceLocation: String
     *     createdDateTime: String
     *     error: {
     *         code: String
     *         message: String
     *         target: String
     *         details: [
     *             (recursive schema, see above)
     *         ]
     *         innerError: (recursive schema, see innerError above)
     *     }
     *     id: String
     *     operationType: String(purchase/releasePhoneNumber/search/updatePhoneNumberCapabilities)
     *     lastActionDateTime: String
     * }
     * }</pre>
     *
     * @param operationId The id of the operation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an operation by its id along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getOperationWithResponse(String operationId, RequestOptions requestOptions) {
        return getOperationWithResponseAsync(operationId, requestOptions).block();
    }

    /**
     * Cancels an operation by its id.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * @param operationId The id of the operation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> cancelOperationWithResponseAsync(String operationId, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.cancelOperation(
                                this.client.getEndpoint(),
                                operationId,
                                this.client.getServiceVersion().getVersion(),
                                requestOptions,
                                context));
    }

    /**
     * Cancels an operation by its id.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * @param operationId The id of the operation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> cancelOperationWithResponseAsync(
            String operationId, RequestOptions requestOptions, Context context) {
        return service.cancelOperation(
                this.client.getEndpoint(),
                operationId,
                this.client.getServiceVersion().getVersion(),
                requestOptions,
                context);
    }

    /**
     * Cancels an operation by its id.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * @param operationId The id of the operation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> cancelOperationWithResponse(String operationId, RequestOptions requestOptions) {
        return cancelOperationWithResponseAsync(operationId, requestOptions).block();
    }

    /**
     * Updates the capabilities of a phone number.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     calling: String(none/inbound/outbound/inbound+outbound)
     *     sms: String(none/inbound/outbound/inbound+outbound)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String
     *     phoneNumber: String
     *     countryCode: String
     *     phoneNumberType: String(geographic/tollFree)
     *     capabilities: {
     *         calling: String(none/inbound/outbound/inbound+outbound)
     *         sms: String(none/inbound/outbound/inbound+outbound)
     *     }
     *     assignmentType: String(person/application)
     *     purchaseDate: String
     *     cost: {
     *         amount: double
     *         currencyCode: String
     *         billingFrequency: String(monthly)
     *     }
     * }
     * }</pre>
     *
     * @param phoneNumber The phone number id in E.164 format. The leading plus can be either + or encoded as %2B, e.g.
     *     +11234567890.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents a purchased phone number along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> updateCapabilitiesWithResponseAsync(
            String phoneNumber, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.updateCapabilities(
                                this.client.getEndpoint(),
                                phoneNumber,
                                this.client.getServiceVersion().getVersion(),
                                requestOptions,
                                context));
    }

    /**
     * Updates the capabilities of a phone number.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     calling: String(none/inbound/outbound/inbound+outbound)
     *     sms: String(none/inbound/outbound/inbound+outbound)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String
     *     phoneNumber: String
     *     countryCode: String
     *     phoneNumberType: String(geographic/tollFree)
     *     capabilities: {
     *         calling: String(none/inbound/outbound/inbound+outbound)
     *         sms: String(none/inbound/outbound/inbound+outbound)
     *     }
     *     assignmentType: String(person/application)
     *     purchaseDate: String
     *     cost: {
     *         amount: double
     *         currencyCode: String
     *         billingFrequency: String(monthly)
     *     }
     * }
     * }</pre>
     *
     * @param phoneNumber The phone number id in E.164 format. The leading plus can be either + or encoded as %2B, e.g.
     *     +11234567890.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents a purchased phone number along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> updateCapabilitiesWithResponseAsync(
            String phoneNumber, RequestOptions requestOptions, Context context) {
        return service.updateCapabilities(
                this.client.getEndpoint(),
                phoneNumber,
                this.client.getServiceVersion().getVersion(),
                requestOptions,
                context);
    }

    /**
     * Updates the capabilities of a phone number.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     calling: String(none/inbound/outbound/inbound+outbound)
     *     sms: String(none/inbound/outbound/inbound+outbound)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String
     *     phoneNumber: String
     *     countryCode: String
     *     phoneNumberType: String(geographic/tollFree)
     *     capabilities: {
     *         calling: String(none/inbound/outbound/inbound+outbound)
     *         sms: String(none/inbound/outbound/inbound+outbound)
     *     }
     *     assignmentType: String(person/application)
     *     purchaseDate: String
     *     cost: {
     *         amount: double
     *         currencyCode: String
     *         billingFrequency: String(monthly)
     *     }
     * }
     * }</pre>
     *
     * @param phoneNumber The phone number id in E.164 format. The leading plus can be either + or encoded as %2B, e.g.
     *     +11234567890.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of represents a purchased phone number.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginUpdateCapabilitiesAsync(
            String phoneNumber, RequestOptions requestOptions) {
        return PollerFlux.create(
                Duration.ofSeconds(1),
                () -> this.updateCapabilitiesWithResponseAsync(phoneNumber, requestOptions),
                new DefaultPollingStrategy<>(
                        this.client.getHttpPipeline(),
                        null,
                        requestOptions != null && requestOptions.getContext() != null
                                ? requestOptions.getContext()
                                : Context.NONE),
                new TypeReferenceBinaryData(),
                new TypeReferenceBinaryData());
    }

    /**
     * Updates the capabilities of a phone number.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     calling: String(none/inbound/outbound/inbound+outbound)
     *     sms: String(none/inbound/outbound/inbound+outbound)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String
     *     phoneNumber: String
     *     countryCode: String
     *     phoneNumberType: String(geographic/tollFree)
     *     capabilities: {
     *         calling: String(none/inbound/outbound/inbound+outbound)
     *         sms: String(none/inbound/outbound/inbound+outbound)
     *     }
     *     assignmentType: String(person/application)
     *     purchaseDate: String
     *     cost: {
     *         amount: double
     *         currencyCode: String
     *         billingFrequency: String(monthly)
     *     }
     * }
     * }</pre>
     *
     * @param phoneNumber The phone number id in E.164 format. The leading plus can be either + or encoded as %2B, e.g.
     *     +11234567890.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of represents a purchased phone number.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginUpdateCapabilitiesAsync(
            String phoneNumber, RequestOptions requestOptions, Context context) {
        return PollerFlux.create(
                Duration.ofSeconds(1),
                () -> this.updateCapabilitiesWithResponseAsync(phoneNumber, requestOptions, context),
                new DefaultPollingStrategy<>(
                        this.client.getHttpPipeline(),
                        null,
                        requestOptions != null && requestOptions.getContext() != null
                                ? requestOptions.getContext()
                                : Context.NONE),
                new TypeReferenceBinaryData(),
                new TypeReferenceBinaryData());
    }

    /**
     * Updates the capabilities of a phone number.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     calling: String(none/inbound/outbound/inbound+outbound)
     *     sms: String(none/inbound/outbound/inbound+outbound)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String
     *     phoneNumber: String
     *     countryCode: String
     *     phoneNumberType: String(geographic/tollFree)
     *     capabilities: {
     *         calling: String(none/inbound/outbound/inbound+outbound)
     *         sms: String(none/inbound/outbound/inbound+outbound)
     *     }
     *     assignmentType: String(person/application)
     *     purchaseDate: String
     *     cost: {
     *         amount: double
     *         currencyCode: String
     *         billingFrequency: String(monthly)
     *     }
     * }
     * }</pre>
     *
     * @param phoneNumber The phone number id in E.164 format. The leading plus can be either + or encoded as %2B, e.g.
     *     +11234567890.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of represents a purchased phone number.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginUpdateCapabilities(
            String phoneNumber, RequestOptions requestOptions) {
        return this.beginUpdateCapabilitiesAsync(phoneNumber, requestOptions).getSyncPoller();
    }

    /**
     * Gets the details of the given purchased phone number.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String
     *     phoneNumber: String
     *     countryCode: String
     *     phoneNumberType: String(geographic/tollFree)
     *     capabilities: {
     *         calling: String(none/inbound/outbound/inbound+outbound)
     *         sms: String(none/inbound/outbound/inbound+outbound)
     *     }
     *     assignmentType: String(person/application)
     *     purchaseDate: String
     *     cost: {
     *         amount: double
     *         currencyCode: String
     *         billingFrequency: String(monthly)
     *     }
     * }
     * }</pre>
     *
     * @param phoneNumber The purchased phone number whose details are to be fetched in E.164 format, e.g. +11234567890.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the details of the given purchased phone number along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getByNumberWithResponseAsync(String phoneNumber, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.getByNumber(
                                this.client.getEndpoint(),
                                phoneNumber,
                                this.client.getServiceVersion().getVersion(),
                                requestOptions,
                                context));
    }

    /**
     * Gets the details of the given purchased phone number.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String
     *     phoneNumber: String
     *     countryCode: String
     *     phoneNumberType: String(geographic/tollFree)
     *     capabilities: {
     *         calling: String(none/inbound/outbound/inbound+outbound)
     *         sms: String(none/inbound/outbound/inbound+outbound)
     *     }
     *     assignmentType: String(person/application)
     *     purchaseDate: String
     *     cost: {
     *         amount: double
     *         currencyCode: String
     *         billingFrequency: String(monthly)
     *     }
     * }
     * }</pre>
     *
     * @param phoneNumber The purchased phone number whose details are to be fetched in E.164 format, e.g. +11234567890.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the details of the given purchased phone number along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getByNumberWithResponseAsync(
            String phoneNumber, RequestOptions requestOptions, Context context) {
        return service.getByNumber(
                this.client.getEndpoint(),
                phoneNumber,
                this.client.getServiceVersion().getVersion(),
                requestOptions,
                context);
    }

    /**
     * Gets the details of the given purchased phone number.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String
     *     phoneNumber: String
     *     countryCode: String
     *     phoneNumberType: String(geographic/tollFree)
     *     capabilities: {
     *         calling: String(none/inbound/outbound/inbound+outbound)
     *         sms: String(none/inbound/outbound/inbound+outbound)
     *     }
     *     assignmentType: String(person/application)
     *     purchaseDate: String
     *     cost: {
     *         amount: double
     *         currencyCode: String
     *         billingFrequency: String(monthly)
     *     }
     * }
     * }</pre>
     *
     * @param phoneNumber The purchased phone number whose details are to be fetched in E.164 format, e.g. +11234567890.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the details of the given purchased phone number along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getByNumberWithResponse(String phoneNumber, RequestOptions requestOptions) {
        return getByNumberWithResponseAsync(phoneNumber, requestOptions).block();
    }

    /**
     * Releases a purchased phone number.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * @param phoneNumber Phone number to be released, e.g. +11234567890.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> releasePhoneNumberWithResponseAsync(String phoneNumber, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.releasePhoneNumber(
                                this.client.getEndpoint(),
                                phoneNumber,
                                this.client.getServiceVersion().getVersion(),
                                requestOptions,
                                context));
    }

    /**
     * Releases a purchased phone number.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * @param phoneNumber Phone number to be released, e.g. +11234567890.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> releasePhoneNumberWithResponseAsync(
            String phoneNumber, RequestOptions requestOptions, Context context) {
        return service.releasePhoneNumber(
                this.client.getEndpoint(),
                phoneNumber,
                this.client.getServiceVersion().getVersion(),
                requestOptions,
                context);
    }

    /**
     * Releases a purchased phone number.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * @param phoneNumber Phone number to be released, e.g. +11234567890.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginReleasePhoneNumberAsync(
            String phoneNumber, RequestOptions requestOptions) {
        return PollerFlux.create(
                Duration.ofSeconds(1),
                () -> this.releasePhoneNumberWithResponseAsync(phoneNumber, requestOptions),
                new DefaultPollingStrategy<>(
                        this.client.getHttpPipeline(),
                        null,
                        requestOptions != null && requestOptions.getContext() != null
                                ? requestOptions.getContext()
                                : Context.NONE),
                new TypeReferenceBinaryData(),
                new TypeReferenceBinaryData());
    }

    /**
     * Releases a purchased phone number.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * @param phoneNumber Phone number to be released, e.g. +11234567890.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginReleasePhoneNumberAsync(
            String phoneNumber, RequestOptions requestOptions, Context context) {
        return PollerFlux.create(
                Duration.ofSeconds(1),
                () -> this.releasePhoneNumberWithResponseAsync(phoneNumber, requestOptions, context),
                new DefaultPollingStrategy<>(
                        this.client.getHttpPipeline(),
                        null,
                        requestOptions != null && requestOptions.getContext() != null
                                ? requestOptions.getContext()
                                : Context.NONE),
                new TypeReferenceBinaryData(),
                new TypeReferenceBinaryData());
    }

    /**
     * Releases a purchased phone number.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * @param phoneNumber Phone number to be released, e.g. +11234567890.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginReleasePhoneNumber(
            String phoneNumber, RequestOptions requestOptions) {
        return this.beginReleasePhoneNumberAsync(phoneNumber, requestOptions).getSyncPoller();
    }

    /**
     * Gets the list of all purchased phone numbers.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>skip</td><td>String</td><td>No</td><td>An optional parameter for how many entries to skip, for pagination purposes. The default value is 0.</td></tr>
     *     <tr><td>top</td><td>String</td><td>No</td><td>An optional parameter for how many entries to return, for pagination purposes. The default value is 100.</td></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     phoneNumbers: [
     *         {
     *             id: String
     *             phoneNumber: String
     *             countryCode: String
     *             phoneNumberType: String(geographic/tollFree)
     *             capabilities: {
     *                 calling: String(none/inbound/outbound/inbound+outbound)
     *                 sms: String(none/inbound/outbound/inbound+outbound)
     *             }
     *             assignmentType: String(person/application)
     *             purchaseDate: String
     *             cost: {
     *                 amount: double
     *                 currencyCode: String
     *                 billingFrequency: String(monthly)
     *             }
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of all purchased phone numbers along with {@link PagedResponse} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listPhoneNumbersSinglePageAsync(RequestOptions requestOptions) {
        return FluxUtil.withContext(
                        context ->
                                service.listPhoneNumbers(
                                        this.client.getEndpoint(),
                                        this.client.getServiceVersion().getVersion(),
                                        requestOptions,
                                        context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "phoneNumbers"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Gets the list of all purchased phone numbers.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>skip</td><td>String</td><td>No</td><td>An optional parameter for how many entries to skip, for pagination purposes. The default value is 0.</td></tr>
     *     <tr><td>top</td><td>String</td><td>No</td><td>An optional parameter for how many entries to return, for pagination purposes. The default value is 100.</td></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     phoneNumbers: [
     *         {
     *             id: String
     *             phoneNumber: String
     *             countryCode: String
     *             phoneNumberType: String(geographic/tollFree)
     *             capabilities: {
     *                 calling: String(none/inbound/outbound/inbound+outbound)
     *                 sms: String(none/inbound/outbound/inbound+outbound)
     *             }
     *             assignmentType: String(person/application)
     *             purchaseDate: String
     *             cost: {
     *                 amount: double
     *                 currencyCode: String
     *                 billingFrequency: String(monthly)
     *             }
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of all purchased phone numbers along with {@link PagedResponse} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listPhoneNumbersSinglePageAsync(
            RequestOptions requestOptions, Context context) {
        return service.listPhoneNumbers(
                        this.client.getEndpoint(),
                        this.client.getServiceVersion().getVersion(),
                        requestOptions,
                        context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "phoneNumbers"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Gets the list of all purchased phone numbers.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>skip</td><td>String</td><td>No</td><td>An optional parameter for how many entries to skip, for pagination purposes. The default value is 0.</td></tr>
     *     <tr><td>top</td><td>String</td><td>No</td><td>An optional parameter for how many entries to return, for pagination purposes. The default value is 100.</td></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     phoneNumbers: [
     *         {
     *             id: String
     *             phoneNumber: String
     *             countryCode: String
     *             phoneNumberType: String(geographic/tollFree)
     *             capabilities: {
     *                 calling: String(none/inbound/outbound/inbound+outbound)
     *                 sms: String(none/inbound/outbound/inbound+outbound)
     *             }
     *             assignmentType: String(person/application)
     *             purchaseDate: String
     *             cost: {
     *                 amount: double
     *                 currencyCode: String
     *                 billingFrequency: String(monthly)
     *             }
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of all purchased phone numbers as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listPhoneNumbersAsync(RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
                requestOptions != null && requestOptions.getContext() != null
                        ? requestOptions.getContext()
                        : Context.NONE);
        return new PagedFlux<>(
                () -> listPhoneNumbersSinglePageAsync(requestOptions),
                nextLink -> listPhoneNumbersNextSinglePageAsync(nextLink, requestOptionsForNextPage));
    }

    /**
     * Gets the list of all purchased phone numbers.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>skip</td><td>String</td><td>No</td><td>An optional parameter for how many entries to skip, for pagination purposes. The default value is 0.</td></tr>
     *     <tr><td>top</td><td>String</td><td>No</td><td>An optional parameter for how many entries to return, for pagination purposes. The default value is 100.</td></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     phoneNumbers: [
     *         {
     *             id: String
     *             phoneNumber: String
     *             countryCode: String
     *             phoneNumberType: String(geographic/tollFree)
     *             capabilities: {
     *                 calling: String(none/inbound/outbound/inbound+outbound)
     *                 sms: String(none/inbound/outbound/inbound+outbound)
     *             }
     *             assignmentType: String(person/application)
     *             purchaseDate: String
     *             cost: {
     *                 amount: double
     *                 currencyCode: String
     *                 billingFrequency: String(monthly)
     *             }
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of all purchased phone numbers as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listPhoneNumbersAsync(RequestOptions requestOptions, Context context) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
                requestOptions != null && requestOptions.getContext() != null
                        ? requestOptions.getContext()
                        : Context.NONE);
        return new PagedFlux<>(
                () -> listPhoneNumbersSinglePageAsync(requestOptions, context),
                nextLink -> listPhoneNumbersNextSinglePageAsync(nextLink, requestOptionsForNextPage, context));
    }

    /**
     * Gets the list of all purchased phone numbers.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>skip</td><td>String</td><td>No</td><td>An optional parameter for how many entries to skip, for pagination purposes. The default value is 0.</td></tr>
     *     <tr><td>top</td><td>String</td><td>No</td><td>An optional parameter for how many entries to return, for pagination purposes. The default value is 100.</td></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     phoneNumbers: [
     *         {
     *             id: String
     *             phoneNumber: String
     *             countryCode: String
     *             phoneNumberType: String(geographic/tollFree)
     *             capabilities: {
     *                 calling: String(none/inbound/outbound/inbound+outbound)
     *                 sms: String(none/inbound/outbound/inbound+outbound)
     *             }
     *             assignmentType: String(person/application)
     *             purchaseDate: String
     *             cost: {
     *                 amount: double
     *                 currencyCode: String
     *                 billingFrequency: String(monthly)
     *             }
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of all purchased phone numbers as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listPhoneNumbers(RequestOptions requestOptions) {
        return new PagedIterable<>(listPhoneNumbersAsync(requestOptions));
    }

    /**
     * Get the next page of items.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     phoneNumbers: [
     *         {
     *             id: String
     *             phoneNumber: String
     *             countryCode: String
     *             phoneNumberType: String(geographic/tollFree)
     *             capabilities: {
     *                 calling: String(none/inbound/outbound/inbound+outbound)
     *                 sms: String(none/inbound/outbound/inbound+outbound)
     *             }
     *             assignmentType: String(person/application)
     *             purchaseDate: String
     *             cost: {
     *                 amount: double
     *                 currencyCode: String
     *                 billingFrequency: String(monthly)
     *             }
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param nextLink The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of purchased phone numbers along with {@link PagedResponse} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listPhoneNumbersNextSinglePageAsync(
            String nextLink, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                        context ->
                                service.listPhoneNumbersNext(
                                        nextLink, this.client.getEndpoint(), requestOptions, context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "phoneNumbers"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Get the next page of items.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     phoneNumbers: [
     *         {
     *             id: String
     *             phoneNumber: String
     *             countryCode: String
     *             phoneNumberType: String(geographic/tollFree)
     *             capabilities: {
     *                 calling: String(none/inbound/outbound/inbound+outbound)
     *                 sms: String(none/inbound/outbound/inbound+outbound)
     *             }
     *             assignmentType: String(person/application)
     *             purchaseDate: String
     *             cost: {
     *                 amount: double
     *                 currencyCode: String
     *                 billingFrequency: String(monthly)
     *             }
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param nextLink The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of purchased phone numbers along with {@link PagedResponse} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listPhoneNumbersNextSinglePageAsync(
            String nextLink, RequestOptions requestOptions, Context context) {
        return service.listPhoneNumbersNext(nextLink, this.client.getEndpoint(), requestOptions, context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "phoneNumbers"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    private static final class TypeReferencePhoneNumberOperation extends TypeReference<PhoneNumberOperation> {
        // empty
    }

    private static final class TypeReferenceBinaryData extends TypeReference<BinaryData> {
        // empty
    }

    private static final class TypeReferencePhoneNumberSearchResult extends TypeReference<PhoneNumberSearchResult> {
        // empty
    }

    private List<BinaryData> getValues(BinaryData binaryData, String path) {
        try {
            Map<?, ?> obj = binaryData.toObject(Map.class);
            List<?> values = (List<?>) obj.get(path);
            return values.stream().map(BinaryData::fromObject).collect(Collectors.toList());
        } catch (RuntimeException e) {
            return null;
        }
    }

    private String getNextLink(BinaryData binaryData, String path) {
        try {
            Map<?, ?> obj = binaryData.toObject(Map.class);
            return (String) obj.get(path);
        } catch (RuntimeException e) {
            return null;
        }
    }
}
