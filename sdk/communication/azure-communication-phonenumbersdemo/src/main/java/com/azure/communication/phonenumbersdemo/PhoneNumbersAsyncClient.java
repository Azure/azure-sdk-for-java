// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.communication.phonenumbersdemo;

import com.azure.communication.phonenumbersdemo.implementation.PhoneNumbersImpl;
import com.azure.communication.phonenumbersdemo.implementation.models.PhoneNumberSearchRequest;
import com.azure.communication.phonenumbersdemo.models.PhoneNumberAssignmentType;
import com.azure.communication.phonenumbersdemo.models.PhoneNumberCapabilities;
import com.azure.communication.phonenumbersdemo.models.PhoneNumberOperation;
import com.azure.communication.phonenumbersdemo.models.PhoneNumberSearchResult;
import com.azure.communication.phonenumbersdemo.models.PhoneNumberType;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.polling.PollerFlux;
import reactor.core.publisher.Mono;

import java.util.Objects;

/** Initializes a new instance of the asynchronous PhoneNumbersClient type. */
@ServiceClient(builder = PhoneNumbersClientBuilder.class, isAsync = true)
public final class PhoneNumbersAsyncClient {

    @Generated private final PhoneNumbersImpl serviceClient;

    /**
     * Initializes an instance of PhoneNumbersAsyncClient class.
     *
     * @param serviceClient the service client implementation.
     */
    @Generated
    PhoneNumbersAsyncClient(PhoneNumbersImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Search for available phone numbers to purchase.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     phoneNumberType: String(geographic/tollFree)
     *     assignmentType: String(person/application)
     *     capabilities: {
     *         calling: String(none/inbound/outbound/inbound+outbound)
     *         sms: String(none/inbound/outbound/inbound+outbound)
     *     }
     *     areaCode: String
     *     quantity: Integer
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     searchId: String
     *     phoneNumbers: [
     *         String
     *     ]
     *     phoneNumberType: String(geographic/tollFree)
     *     assignmentType: String(person/application)
     *     capabilities: {
     *         calling: String(none/inbound/outbound/inbound+outbound)
     *         sms: String(none/inbound/outbound/inbound+outbound)
     *     }
     *     cost: {
     *         amount: double
     *         currencyCode: String
     *         billingFrequency: String(monthly)
     *     }
     *     searchExpiresBy: String
     * }
     * }</pre>
     *
     * @param countryCode The ISO 3166-2 country code, e.g. US.
     * @param body The phone number search request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the result of a phone number search operation along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> searchAvailablePhoneNumbersWithResponse(
            String countryCode, BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.searchAvailablePhoneNumbersWithResponseAsync(countryCode, body, requestOptions);
    }

    /**
     * Search for available phone numbers to purchase.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     phoneNumberType: String(geographic/tollFree)
     *     assignmentType: String(person/application)
     *     capabilities: {
     *         calling: String(none/inbound/outbound/inbound+outbound)
     *         sms: String(none/inbound/outbound/inbound+outbound)
     *     }
     *     areaCode: String
     *     quantity: Integer
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     searchId: String
     *     phoneNumbers: [
     *         String
     *     ]
     *     phoneNumberType: String(geographic/tollFree)
     *     assignmentType: String(person/application)
     *     capabilities: {
     *         calling: String(none/inbound/outbound/inbound+outbound)
     *         sms: String(none/inbound/outbound/inbound+outbound)
     *     }
     *     cost: {
     *         amount: double
     *         currencyCode: String
     *         billingFrequency: String(monthly)
     *     }
     *     searchExpiresBy: String
     * }
     * }</pre>
     *
     * @param countryCode The ISO 3166-2 country code, e.g. US.
     * @param body The phone number search request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of the result of a phone number search operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginSearchAvailablePhoneNumbers(
            String countryCode, BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.beginSearchAvailablePhoneNumbersAsync(countryCode, body, requestOptions);
    }

    /**
     * Search for available phone numbers to purchase.
     *
     * @param countryCode The ISO 3166-2 country code, e.g. US.
     * @param phoneNumberType The type of the phone numbers.
     * @param assignmentType The assignment type of the phone numbers.
     * @param capabilities The capacity of the phone numbers.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of the result of a phone number search operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<PhoneNumberOperation, PhoneNumberSearchResult> beginSearchAvailablePhoneNumbers(
        String countryCode, PhoneNumberType phoneNumberType, PhoneNumberAssignmentType assignmentType,
        PhoneNumberCapabilities capabilities) {
        return beginSearchAvailablePhoneNumbers(countryCode, phoneNumberType, assignmentType, capabilities,
            Context.NONE);
    }

    PollerFlux<PhoneNumberOperation, PhoneNumberSearchResult> beginSearchAvailablePhoneNumbers(
        String countryCode, PhoneNumberType phoneNumberType, PhoneNumberAssignmentType assignmentType,
        PhoneNumberCapabilities capabilities, Context context) {
        PhoneNumberSearchRequest request = new PhoneNumberSearchRequest()
            .setPhoneNumberType(Objects.requireNonNull(phoneNumberType))
            .setAssignmentType(Objects.requireNonNull(assignmentType))
            .setCapabilities(Objects.requireNonNull(capabilities));
        return this.serviceClient.beginSearchAvailablePhoneNumbersWithModelAsync(
            countryCode, BinaryData.fromObject(request), context == null
                ? null : new RequestOptions().setContext(context));
    }

    /**
     * Gets a phone number search result by search id.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     searchId: String
     *     phoneNumbers: [
     *         String
     *     ]
     *     phoneNumberType: String(geographic/tollFree)
     *     assignmentType: String(person/application)
     *     capabilities: {
     *         calling: String(none/inbound/outbound/inbound+outbound)
     *         sms: String(none/inbound/outbound/inbound+outbound)
     *     }
     *     cost: {
     *         amount: double
     *         currencyCode: String
     *         billingFrequency: String(monthly)
     *     }
     *     searchExpiresBy: String
     * }
     * }</pre>
     *
     * @param searchId The search Id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a phone number search result by search id along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getSearchResultWithResponse(String searchId, RequestOptions requestOptions) {
        return this.serviceClient.getSearchResultWithResponseAsync(searchId, requestOptions);
    }

    /**
     * Purchases phone numbers.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     searchId: String
     * }
     * }</pre>
     *
     * @param body The phone number purchase request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> purchasePhoneNumbersWithResponse(BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.purchasePhoneNumbersWithResponseAsync(body, requestOptions);
    }

    /**
     * Purchases phone numbers.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     searchId: String
     * }
     * }</pre>
     *
     * @param body The phone number purchase request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginPurchasePhoneNumbers(
            BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.beginPurchasePhoneNumbersAsync(body, requestOptions);
    }

    /**
     * Gets an operation by its id.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     status: String(notStarted/running/succeeded/failed)
     *     resourceLocation: String
     *     createdDateTime: String
     *     error: {
     *         code: String
     *         message: String
     *         target: String
     *         details: [
     *             (recursive schema, see above)
     *         ]
     *         innerError: (recursive schema, see innerError above)
     *     }
     *     id: String
     *     operationType: String(purchase/releasePhoneNumber/search/updatePhoneNumberCapabilities)
     *     lastActionDateTime: String
     * }
     * }</pre>
     *
     * @param operationId The id of the operation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an operation by its id along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getOperationWithResponse(String operationId, RequestOptions requestOptions) {
        return this.serviceClient.getOperationWithResponseAsync(operationId, requestOptions);
    }

    /**
     * Cancels an operation by its id.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * @param operationId The id of the operation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> cancelOperationWithResponse(String operationId, RequestOptions requestOptions) {
        return this.serviceClient.cancelOperationWithResponseAsync(operationId, requestOptions);
    }

    /**
     * Updates the capabilities of a phone number.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     calling: String(none/inbound/outbound/inbound+outbound)
     *     sms: String(none/inbound/outbound/inbound+outbound)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String
     *     phoneNumber: String
     *     countryCode: String
     *     phoneNumberType: String(geographic/tollFree)
     *     capabilities: {
     *         calling: String(none/inbound/outbound/inbound+outbound)
     *         sms: String(none/inbound/outbound/inbound+outbound)
     *     }
     *     assignmentType: String(person/application)
     *     purchaseDate: String
     *     cost: {
     *         amount: double
     *         currencyCode: String
     *         billingFrequency: String(monthly)
     *     }
     * }
     * }</pre>
     *
     * @param phoneNumber The phone number id in E.164 format. The leading plus can be either + or encoded as %2B, e.g.
     *     +11234567890.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents a purchased phone number along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> updateCapabilitiesWithResponse(
            String phoneNumber, RequestOptions requestOptions) {
        return this.serviceClient.updateCapabilitiesWithResponseAsync(phoneNumber, requestOptions);
    }

    /**
     * Updates the capabilities of a phone number.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     calling: String(none/inbound/outbound/inbound+outbound)
     *     sms: String(none/inbound/outbound/inbound+outbound)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String
     *     phoneNumber: String
     *     countryCode: String
     *     phoneNumberType: String(geographic/tollFree)
     *     capabilities: {
     *         calling: String(none/inbound/outbound/inbound+outbound)
     *         sms: String(none/inbound/outbound/inbound+outbound)
     *     }
     *     assignmentType: String(person/application)
     *     purchaseDate: String
     *     cost: {
     *         amount: double
     *         currencyCode: String
     *         billingFrequency: String(monthly)
     *     }
     * }
     * }</pre>
     *
     * @param phoneNumber The phone number id in E.164 format. The leading plus can be either + or encoded as %2B, e.g.
     *     +11234567890.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of represents a purchased phone number.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginUpdateCapabilities(
            String phoneNumber, RequestOptions requestOptions) {
        return this.serviceClient.beginUpdateCapabilitiesAsync(phoneNumber, requestOptions);
    }

    /**
     * Gets the details of the given purchased phone number.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String
     *     phoneNumber: String
     *     countryCode: String
     *     phoneNumberType: String(geographic/tollFree)
     *     capabilities: {
     *         calling: String(none/inbound/outbound/inbound+outbound)
     *         sms: String(none/inbound/outbound/inbound+outbound)
     *     }
     *     assignmentType: String(person/application)
     *     purchaseDate: String
     *     cost: {
     *         amount: double
     *         currencyCode: String
     *         billingFrequency: String(monthly)
     *     }
     * }
     * }</pre>
     *
     * @param phoneNumber The purchased phone number whose details are to be fetched in E.164 format, e.g. +11234567890.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the details of the given purchased phone number along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getByNumberWithResponse(String phoneNumber, RequestOptions requestOptions) {
        return this.serviceClient.getByNumberWithResponseAsync(phoneNumber, requestOptions);
    }

    /**
     * Releases a purchased phone number.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * @param phoneNumber Phone number to be released, e.g. +11234567890.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> releasePhoneNumberWithResponse(String phoneNumber, RequestOptions requestOptions) {
        return this.serviceClient.releasePhoneNumberWithResponseAsync(phoneNumber, requestOptions);
    }

    /**
     * Releases a purchased phone number.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * @param phoneNumber Phone number to be released, e.g. +11234567890.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginReleasePhoneNumber(
            String phoneNumber, RequestOptions requestOptions) {
        return this.serviceClient.beginReleasePhoneNumberAsync(phoneNumber, requestOptions);
    }

    /**
     * Gets the list of all purchased phone numbers.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>skip</td><td>String</td><td>No</td><td>An optional parameter for how many entries to skip, for pagination purposes. The default value is 0.</td></tr>
     *     <tr><td>top</td><td>String</td><td>No</td><td>An optional parameter for how many entries to return, for pagination purposes. The default value is 100.</td></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     phoneNumbers: [
     *         {
     *             id: String
     *             phoneNumber: String
     *             countryCode: String
     *             phoneNumberType: String(geographic/tollFree)
     *             capabilities: {
     *                 calling: String(none/inbound/outbound/inbound+outbound)
     *                 sms: String(none/inbound/outbound/inbound+outbound)
     *             }
     *             assignmentType: String(person/application)
     *             purchaseDate: String
     *             cost: {
     *                 amount: double
     *                 currencyCode: String
     *                 billingFrequency: String(monthly)
     *             }
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of all purchased phone numbers as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listPhoneNumbers(RequestOptions requestOptions) {
        return this.serviceClient.listPhoneNumbersAsync(requestOptions);
    }
}
