// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.communication.phonenumbersdemo.generated;

import com.azure.communication.phonenumbersdemo.implementation.models.PurchasedPhoneNumber;
import com.azure.communication.phonenumbersdemo.models.BillingFrequency;
import com.azure.communication.phonenumbersdemo.models.PhoneNumberAssignmentType;
import com.azure.communication.phonenumbersdemo.models.PhoneNumberCapabilities;
import com.azure.communication.phonenumbersdemo.models.PhoneNumberCapabilityType;
import com.azure.communication.phonenumbersdemo.models.PhoneNumberCost;
import com.azure.communication.phonenumbersdemo.models.PhoneNumberType;
import com.azure.core.util.BinaryData;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class PurchasedPhoneNumberTests {
    @Test
    public void testDeserialize() {
        PurchasedPhoneNumber model =
                BinaryData.fromString(
                                "{\"id\":\"oupmfii\",\"phoneNumber\":\"fggjioolvr\",\"countryCode\":\"x\",\"phoneNumberType\":\"geographic\",\"capabilities\":{\"calling\":\"outbound\",\"sms\":\"inbound\"},\"assignmentType\":\"person\",\"purchaseDate\":\"gllqwjy\",\"cost\":{\"amount\":81.13887388161045,\"currencyCode\":\"ayvblmhvkzuhbx\",\"billingFrequency\":\"monthly\"}}")
                        .toObject(PurchasedPhoneNumber.class);
        Assertions.assertEquals("oupmfii", model.getId());
        Assertions.assertEquals("fggjioolvr", model.getPhoneNumber());
        Assertions.assertEquals("x", model.getCountryCode());
        Assertions.assertEquals(PhoneNumberType.GEOGRAPHIC, model.getPhoneNumberType());
        Assertions.assertEquals(PhoneNumberCapabilityType.OUTBOUND, model.getCapabilities().getCalling());
        Assertions.assertEquals(PhoneNumberCapabilityType.INBOUND, model.getCapabilities().getSms());
        Assertions.assertEquals(PhoneNumberAssignmentType.PERSON, model.getAssignmentType());
        Assertions.assertEquals("gllqwjy", model.getPurchaseDate());
        Assertions.assertEquals(81.13887388161045, model.getCost().getAmount());
        Assertions.assertEquals("ayvblmhvkzuhbx", model.getCost().getCurrencyCode());
        Assertions.assertEquals(BillingFrequency.MONTHLY, model.getCost().getBillingFrequency());
    }

    @Test
    public void testSerialize() {
        PurchasedPhoneNumber model =
                new PurchasedPhoneNumber()
                        .setId("oupmfii")
                        .setPhoneNumber("fggjioolvr")
                        .setCountryCode("x")
                        .setPhoneNumberType(PhoneNumberType.GEOGRAPHIC)
                        .setCapabilities(
                                new PhoneNumberCapabilities()
                                        .setCalling(PhoneNumberCapabilityType.OUTBOUND)
                                        .setSms(PhoneNumberCapabilityType.INBOUND))
                        .setAssignmentType(PhoneNumberAssignmentType.PERSON)
                        .setPurchaseDate("gllqwjy")
                        .setCost(
                                new PhoneNumberCost()
                                        .setAmount(81.13887388161045)
                                        .setCurrencyCode("ayvblmhvkzuhbx")
                                        .setBillingFrequency(BillingFrequency.MONTHLY));
        model = BinaryData.fromObject(model).toObject(PurchasedPhoneNumber.class);
        Assertions.assertEquals("oupmfii", model.getId());
        Assertions.assertEquals("fggjioolvr", model.getPhoneNumber());
        Assertions.assertEquals("x", model.getCountryCode());
        Assertions.assertEquals(PhoneNumberType.GEOGRAPHIC, model.getPhoneNumberType());
        Assertions.assertEquals(PhoneNumberCapabilityType.OUTBOUND, model.getCapabilities().getCalling());
        Assertions.assertEquals(PhoneNumberCapabilityType.INBOUND, model.getCapabilities().getSms());
        Assertions.assertEquals(PhoneNumberAssignmentType.PERSON, model.getAssignmentType());
        Assertions.assertEquals("gllqwjy", model.getPurchaseDate());
        Assertions.assertEquals(81.13887388161045, model.getCost().getAmount());
        Assertions.assertEquals("ayvblmhvkzuhbx", model.getCost().getCurrencyCode());
        Assertions.assertEquals(BillingFrequency.MONTHLY, model.getCost().getBillingFrequency());
    }
}
