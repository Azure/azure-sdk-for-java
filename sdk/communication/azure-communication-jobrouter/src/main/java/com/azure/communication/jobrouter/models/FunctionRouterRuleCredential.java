// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.communication.jobrouter.models;

import com.azure.communication.jobrouter.implementation.JsonMergePatchHelper;
import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.Set;

/**
 * Credentials used to access Azure function rule.
 */
@Fluent
public final class FunctionRouterRuleCredential implements JsonSerializable<FunctionRouterRuleCredential> {

    /*
     * Access key scoped to a particular function.
     */
    @Generated
    private String functionKey;

    /*
     * Access key scoped to a Azure Function app. This key grants access to all functions under the app.
     */
    @Generated
    private String appKey;

    /*
     * Client id, when AppKey is provided In context of Azure function, this is usually the name of the key.
     */
    @Generated
    private String clientId;

    /**
     * Creates an instance of FunctionRouterRuleCredential class.
     */
    @Generated
    public FunctionRouterRuleCredential() {
    }

    /**
     * Get the functionKey property: Access key scoped to a particular function.
     *
     * @return the functionKey value.
     */
    @Generated
    public String getFunctionKey() {
        return this.functionKey;
    }

    /**
     * Set the functionKey property: Access key scoped to a particular function.
     *
     * @param functionKey the functionKey value to set.
     * @return the FunctionRouterRuleCredential object itself.
     */
    @Generated
    public FunctionRouterRuleCredential setFunctionKey(String functionKey) {
        this.functionKey = functionKey;
        this.updatedProperties.add("functionKey");
        return this;
    }

    /**
     * Get the appKey property: Access key scoped to a Azure Function app. This key grants access to all functions under
     * the app.
     *
     * @return the appKey value.
     */
    @Generated
    public String getAppKey() {
        return this.appKey;
    }

    /**
     * Set the appKey property: Access key scoped to a Azure Function app. This key grants access to all functions under
     * the app.
     *
     * @param appKey the appKey value to set.
     * @return the FunctionRouterRuleCredential object itself.
     */
    @Generated
    public FunctionRouterRuleCredential setAppKey(String appKey) {
        this.appKey = appKey;
        this.updatedProperties.add("appKey");
        return this;
    }

    /**
     * Get the clientId property: Client id, when AppKey is provided In context of Azure function, this is usually the
     * name of the key.
     *
     * @return the clientId value.
     */
    @Generated
    public String getClientId() {
        return this.clientId;
    }

    /**
     * Set the clientId property: Client id, when AppKey is provided In context of Azure function, this is usually the
     * name of the key.
     *
     * @param clientId the clientId value to set.
     * @return the FunctionRouterRuleCredential object itself.
     */
    @Generated
    public FunctionRouterRuleCredential setClientId(String clientId) {
        this.clientId = clientId;
        this.updatedProperties.add("clientId");
        return this;
    }

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    @Generated
    private boolean jsonMergePatch;

    @Generated
    private void serializeAsJsonMergePatch(boolean jsonMergePatch) {
        this.jsonMergePatch = jsonMergePatch;
    }

    static {
        JsonMergePatchHelper
            .setFunctionRouterRuleCredentialAccessor(new JsonMergePatchHelper.FunctionRouterRuleCredentialAccessor() {

                @Override
                public FunctionRouterRuleCredential prepareModelForJsonMergePatch(FunctionRouterRuleCredential model,
                    boolean jsonMergePatchEnabled) {
                    model.serializeAsJsonMergePatch(jsonMergePatchEnabled);
                    return model;
                }

                @Override
                public boolean isJsonMergePatch(FunctionRouterRuleCredential model) {
                    return model.jsonMergePatch;
                }
            });
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (jsonMergePatch) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeStringField("functionKey", this.functionKey);
            jsonWriter.writeStringField("appKey", this.appKey);
            jsonWriter.writeStringField("clientId", this.clientId);
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (updatedProperties.contains("functionKey")) {
            if (this.functionKey == null) {
                jsonWriter.writeNullField("functionKey");
            } else {
                jsonWriter.writeStringField("functionKey", this.functionKey);
            }
        }
        if (updatedProperties.contains("appKey")) {
            if (this.appKey == null) {
                jsonWriter.writeNullField("appKey");
            } else {
                jsonWriter.writeStringField("appKey", this.appKey);
            }
        }
        if (updatedProperties.contains("clientId")) {
            if (this.clientId == null) {
                jsonWriter.writeNullField("clientId");
            } else {
                jsonWriter.writeStringField("clientId", this.clientId);
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FunctionRouterRuleCredential from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of FunctionRouterRuleCredential if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the FunctionRouterRuleCredential.
     */
    @Generated
    public static FunctionRouterRuleCredential fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FunctionRouterRuleCredential deserializedFunctionRouterRuleCredential = new FunctionRouterRuleCredential();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("functionKey".equals(fieldName)) {
                    deserializedFunctionRouterRuleCredential.functionKey = reader.getString();
                } else if ("appKey".equals(fieldName)) {
                    deserializedFunctionRouterRuleCredential.appKey = reader.getString();
                } else if ("clientId".equals(fieldName)) {
                    deserializedFunctionRouterRuleCredential.clientId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedFunctionRouterRuleCredential;
        });
    }
}
