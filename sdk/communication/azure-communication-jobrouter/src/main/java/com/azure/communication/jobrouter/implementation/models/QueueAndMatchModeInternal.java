// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.communication.jobrouter.implementation.models;

import com.azure.communication.jobrouter.implementation.JsonMergePatchHelper;
import com.azure.communication.jobrouter.models.JobMatchingModeKind;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.Set;

/**
 * Describes a matching mode where matching worker to a job is automatically started after job is queued successfully.
 */
@Immutable
public final class QueueAndMatchModeInternal extends JobMatchingModeInternal {

    /**
     * Creates an instance of QueueAndMatchModeInternal class.
     */
    @Generated
    public QueueAndMatchModeInternal() {
        this.updatedProperties.add("kind");
    }

    /*
     * The type discriminator describing a sub-type of JobMatchingMode.
     */
    @Generated
    private JobMatchingModeKind kind = JobMatchingModeKind.QUEUE_AND_MATCH;

    /**
     * Get the kind property: The type discriminator describing a sub-type of JobMatchingMode.
     *
     * @return the kind value.
     */
    @Generated
    @Override
    public JobMatchingModeKind getKind() {
        return this.kind;
    }

    @Generated
    private boolean jsonMergePatch;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    @Generated
    void serializeAsJsonMergePatch(boolean jsonMergePatch) {
        this.jsonMergePatch = jsonMergePatch;
    }

    static {
        JsonMergePatchHelper.setQueueAndMatchModeInternalAccessor((model, jsonMergePatchEnabled) -> {
            model.serializeAsJsonMergePatch(jsonMergePatchEnabled);
            return model;
        });
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (jsonMergePatch) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (updatedProperties.contains("kind")) {
            if (this.kind == null) {
                jsonWriter.writeNullField("kind");
            } else {
                jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of QueueAndMatchModeInternal from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of QueueAndMatchModeInternal if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the QueueAndMatchModeInternal.
     */
    @Generated
    public static QueueAndMatchModeInternal fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            QueueAndMatchModeInternal deserializedQueueAndMatchModeInternal = new QueueAndMatchModeInternal();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("kind".equals(fieldName)) {
                    deserializedQueueAndMatchModeInternal.kind = JobMatchingModeKind.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedQueueAndMatchModeInternal;
        });
    }
}
