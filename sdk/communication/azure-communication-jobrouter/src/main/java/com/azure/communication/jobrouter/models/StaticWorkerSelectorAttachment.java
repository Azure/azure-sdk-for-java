// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.communication.jobrouter.models;

import com.azure.communication.jobrouter.implementation.JsonMergePatchHelper;
import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.Set;

/**
 * Describes a worker selector that will be attached to a job.
 */
@Fluent
public final class StaticWorkerSelectorAttachment extends WorkerSelectorAttachment {

    /*
     * The type discriminator describing a sub-type of WorkerSelectorAttachment.
     */
    @Generated
    private WorkerSelectorAttachmentKind kind = WorkerSelectorAttachmentKind.STATIC;

    /*
     * The worker selector to attach.
     */
    @Generated
    private RouterWorkerSelector workerSelector;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    /**
     * Creates an instance of StaticWorkerSelectorAttachment class.
     */
    @Generated
    public StaticWorkerSelectorAttachment() {
    }

    /**
     * Get the kind property: The type discriminator describing a sub-type of WorkerSelectorAttachment.
     *
     * @return the kind value.
     */
    @Generated
    @Override
    public WorkerSelectorAttachmentKind getKind() {
        return this.kind;
    }

    /**
     * Get the workerSelector property: The worker selector to attach.
     *
     * @return the workerSelector value.
     */
    @Generated
    public RouterWorkerSelector getWorkerSelector() {
        return this.workerSelector;
    }

    /**
     * Set the workerSelector property: The worker selector to attach.
     * <p>Required when create the resource.</p>
     *
     * @param workerSelector the workerSelector value to set.
     * @return the StaticWorkerSelectorAttachment object itself.
     */
    @Generated
    public StaticWorkerSelectorAttachment setWorkerSelector(RouterWorkerSelector workerSelector) {
        this.workerSelector = workerSelector;
        this.updatedProperties.add("workerSelector");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (JsonMergePatchHelper.getWorkerSelectorAttachmentAccessor().isJsonMergePatch(this)) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
            jsonWriter.writeJsonField("workerSelector", this.workerSelector);
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("kind", this.kind.toString());
        if (updatedProperties.contains("workerSelector")) {
            if (this.workerSelector == null) {
                jsonWriter.writeNullField("workerSelector");
            } else {
                JsonMergePatchHelper.getRouterWorkerSelectorAccessor()
                    .prepareModelForJsonMergePatch(this.workerSelector, true);
                jsonWriter.writeJsonField("workerSelector", this.workerSelector);
                JsonMergePatchHelper.getRouterWorkerSelectorAccessor()
                    .prepareModelForJsonMergePatch(this.workerSelector, false);
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StaticWorkerSelectorAttachment from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of StaticWorkerSelectorAttachment if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the StaticWorkerSelectorAttachment.
     */
    @Generated
    public static StaticWorkerSelectorAttachment fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StaticWorkerSelectorAttachment deserializedStaticWorkerSelectorAttachment
                = new StaticWorkerSelectorAttachment();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("kind".equals(fieldName)) {
                    deserializedStaticWorkerSelectorAttachment.kind
                        = WorkerSelectorAttachmentKind.fromString(reader.getString());
                } else if ("workerSelector".equals(fieldName)) {
                    deserializedStaticWorkerSelectorAttachment.workerSelector = RouterWorkerSelector.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedStaticWorkerSelectorAttachment;
        });
    }

    /**
     * Creates an instance of StaticWorkerSelectorAttachment class.
     *
     * @param workerSelector the workerSelector value to set.
     */
    public StaticWorkerSelectorAttachment(RouterWorkerSelector workerSelector) {
        this.workerSelector = workerSelector;
        this.updatedProperties.add("workerSelector");
    }
}
