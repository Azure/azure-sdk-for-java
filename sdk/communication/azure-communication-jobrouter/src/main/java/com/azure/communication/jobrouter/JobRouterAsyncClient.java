// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.communication.jobrouter;

import com.azure.communication.jobrouter.implementation.JobRouterClientImpl;
import com.azure.communication.jobrouter.implementation.models.CancelJobOptionsInternal;
import com.azure.communication.jobrouter.implementation.models.CancelJobResultInternal;
import com.azure.communication.jobrouter.implementation.models.CloseJobOptionsInternal;
import com.azure.communication.jobrouter.implementation.models.CloseJobResultInternal;
import com.azure.communication.jobrouter.implementation.models.CompleteJobOptionsInternal;
import com.azure.communication.jobrouter.implementation.models.CompleteJobResultInternal;
import com.azure.communication.jobrouter.implementation.models.DeclineJobOfferOptionsInternal;
import com.azure.communication.jobrouter.implementation.models.DeclineJobOfferResultInternal;
import com.azure.communication.jobrouter.implementation.models.ReclassifyJobOptionsInternal;
import com.azure.communication.jobrouter.implementation.models.ReclassifyJobResultInternal;
import com.azure.communication.jobrouter.implementation.models.RouterJobInternal;
import com.azure.communication.jobrouter.implementation.models.RouterWorkerInternal;
import com.azure.communication.jobrouter.models.AcceptJobOfferResult;
import com.azure.communication.jobrouter.models.RouterJobPositionDetails;
import com.azure.communication.jobrouter.models.RouterJobStatusSelector;
import com.azure.communication.jobrouter.models.RouterWorkerStateSelector;
import com.azure.communication.jobrouter.models.UnassignJobOptions;
import com.azure.communication.jobrouter.models.UnassignJobResult;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.BinaryData;
import com.azure.core.util.FluxUtil;
import java.time.OffsetDateTime;
import java.util.stream.Collectors;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import com.azure.communication.jobrouter.implementation.converters.JobAdapter;
import com.azure.communication.jobrouter.implementation.converters.WorkerAdapter;
import com.azure.communication.jobrouter.models.CreateJobOptions;
import com.azure.communication.jobrouter.models.CreateJobWithClassificationPolicyOptions;
import com.azure.communication.jobrouter.models.CreateWorkerOptions;
import com.azure.communication.jobrouter.models.RouterJob;
import com.azure.communication.jobrouter.models.RouterQueueStatistics;
import com.azure.communication.jobrouter.models.RouterWorker;

/**
 * Initializes a new instance of the asynchronous JobRouterClient type.
 */
@ServiceClient(builder = JobRouterClientBuilder.class, isAsync = true)
public final class JobRouterAsyncClient {

    @Generated
    private final JobRouterClientImpl serviceClient;

    /**
     * Initializes an instance of JobRouterAsyncClient class.
     *
     * @param serviceClient the service client implementation.
     */
    @Generated
    JobRouterAsyncClient(JobRouterClientImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Creates or updates a router job.
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>The request should only proceed if an entity matches this
     * string.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the
     * entity was not modified after this time.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     etag: String (Required)
     *     id: String (Required)
     *     channelReference: String (Optional)
     *     status: String(pendingClassification/queued/assigned/completed/closed/cancelled/classificationFailed/created/pendingSchedule/scheduled/scheduleFailed/waitingForActivation) (Optional)
     *     enqueuedAt: OffsetDateTime (Optional)
     *     channelId: String (Optional)
     *     classificationPolicyId: String (Optional)
     *     queueId: String (Optional)
     *     priority: Integer (Optional)
     *     dispositionCode: String (Optional)
     *     requestedWorkerSelectors (Optional): [
     *          (Optional){
     *             key: String (Required)
     *             labelOperator: String(equal/notEqual/lessThan/lessThanOrEqual/greaterThan/greaterThanOrEqual) (Required)
     *             value: Object (Optional)
     *             expiresAfterSeconds: Double (Optional)
     *             expedite: Boolean (Optional)
     *             status: String(active/expired) (Optional)
     *             expiresAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     attachedWorkerSelectors (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     labels (Optional): {
     *         String: Object (Required)
     *     }
     *     assignments (Optional): {
     *         String (Required): {
     *             assignmentId: String (Required)
     *             workerId: String (Optional)
     *             assignedAt: OffsetDateTime (Required)
     *             completedAt: OffsetDateTime (Optional)
     *             closedAt: OffsetDateTime (Optional)
     *         }
     *     }
     *     tags (Optional): {
     *         String: Object (Required)
     *     }
     *     notes (Optional): [
     *          (Optional){
     *             message: String (Required)
     *             addedAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     scheduledAt: OffsetDateTime (Optional)
     *     matchingMode (Optional): {
     *         kind: String(queueAndMatch/scheduleAndSuspend/suspend) (Required)
     *     }
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     etag: String (Required)
     *     id: String (Required)
     *     channelReference: String (Optional)
     *     status: String(pendingClassification/queued/assigned/completed/closed/cancelled/classificationFailed/created/pendingSchedule/scheduled/scheduleFailed/waitingForActivation) (Optional)
     *     enqueuedAt: OffsetDateTime (Optional)
     *     channelId: String (Optional)
     *     classificationPolicyId: String (Optional)
     *     queueId: String (Optional)
     *     priority: Integer (Optional)
     *     dispositionCode: String (Optional)
     *     requestedWorkerSelectors (Optional): [
     *          (Optional){
     *             key: String (Required)
     *             labelOperator: String(equal/notEqual/lessThan/lessThanOrEqual/greaterThan/greaterThanOrEqual) (Required)
     *             value: Object (Optional)
     *             expiresAfterSeconds: Double (Optional)
     *             expedite: Boolean (Optional)
     *             status: String(active/expired) (Optional)
     *             expiresAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     attachedWorkerSelectors (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     labels (Optional): {
     *         String: Object (Required)
     *     }
     *     assignments (Optional): {
     *         String (Required): {
     *             assignmentId: String (Required)
     *             workerId: String (Optional)
     *             assignedAt: OffsetDateTime (Required)
     *             completedAt: OffsetDateTime (Optional)
     *             closedAt: OffsetDateTime (Optional)
     *         }
     *     }
     *     tags (Optional): {
     *         String: Object (Required)
     *     }
     *     notes (Optional): [
     *          (Optional){
     *             message: String (Required)
     *             addedAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     scheduledAt: OffsetDateTime (Optional)
     *     matchingMode (Optional): {
     *         kind: String(queueAndMatch/scheduleAndSuspend/suspend) (Required)
     *     }
     * }
     * }</pre>
     *
     * @param jobId Id of a job.
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a unit of work to be routed along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<BinaryData>> upsertJobWithResponse(String jobId, BinaryData resource, RequestOptions requestOptions) {
        // Convenience API is not generated, as operation 'upsertJob' is 'application/merge-patch+json' and
        // stream-style-serialization is not enabled
        return this.serviceClient.upsertJobWithResponseAsync(jobId, resource, requestOptions);
    }

    /**
     * Updates a router job.
     *
     * <p>
     * <strong>Header Parameters</strong>
     *
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>If-Match</td>
     * <td>String</td>
     * <td>No</td>
     * <td>The request should only proceed if an entity matches this string.</td>
     * </tr>
     * <tr>
     * <td>If-Unmodified-Since</td>
     * <td>OffsetDateTime</td>
     * <td>No</td>
     * <td>The request should only proceed if the entity was not modified after this time.</td>
     * </tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p>
     * <strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     jobId: String (Required)
     *     channelReference: String (Optional)
     *     status: String(pendingClassification/queued/assigned/completed/closed/cancelled/classificationFailed/created/pendingSchedule/scheduled/scheduleFailed/waitingForActivation) (Optional)
     *     enqueuedAt: OffsetDateTime (Optional)
     *     channelId: String (Optional)
     *     classificationPolicyId: String (Optional)
     *     queueId: String (Optional)
     *     priority: Integer (Optional)
     *     dispositionCode: String (Optional)
     *     requestedWorkerSelectors (Optional): [
     *          (Optional){
     *             key: String (Required)
     *             labelOperator: String(equal/notEqual/lessThan/lessThanEqual/greaterThan/greaterThanEqual) (Required)
     *             value: Object (Optional)
     *             expiresAfterSeconds: Double (Optional)
     *             expedite: Boolean (Optional)
     *             status: String(active/expired) (Optional)
     *             expiresAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     attachedWorkerSelectors (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     labels (Optional): {
     *         String: Object (Optional)
     *     }
     *     assignments (Optional): {
     *         String (Optional): {
     *             assignmentId: String (Required)
     *             workerId: String (Optional)
     *             assignedAt: OffsetDateTime (Required)
     *             completedAt: OffsetDateTime (Optional)
     *             closedAt: OffsetDateTime (Optional)
     *         }
     *     }
     *     tags (Optional): {
     *         String: Object (Optional)
     *     }
     *     notes (Optional): {
     *         String: String (Optional)
     *     }
     *     scheduledAt: OffsetDateTime (Optional)
     *     matchingMode (Optional): {
     *     }
     * }
     * }</pre>
     *
     * <p>
     * <strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     jobId: String (Required)
     *     channelReference: String (Optional)
     *     status: String(pendingClassification/queued/assigned/completed/closed/cancelled/classificationFailed/created/pendingSchedule/scheduled/scheduleFailed/waitingForActivation) (Optional)
     *     enqueuedAt: OffsetDateTime (Optional)
     *     channelId: String (Optional)
     *     classificationPolicyId: String (Optional)
     *     queueId: String (Optional)
     *     priority: Integer (Optional)
     *     dispositionCode: String (Optional)
     *     requestedWorkerSelectors (Optional): [
     *          (Optional){
     *             key: String (Required)
     *             labelOperator: String(equal/notEqual/lessThan/lessThanEqual/greaterThan/greaterThanEqual) (Required)
     *             value: Object (Optional)
     *             expiresAfterSeconds: Double (Optional)
     *             expedite: Boolean (Optional)
     *             status: String(active/expired) (Optional)
     *             expiresAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     attachedWorkerSelectors (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     labels (Optional): {
     *         String: Object (Optional)
     *     }
     *     assignments (Optional): {
     *         String (Optional): {
     *             assignmentId: String (Required)
     *             workerId: String (Optional)
     *             assignedAt: OffsetDateTime (Required)
     *             completedAt: OffsetDateTime (Optional)
     *             closedAt: OffsetDateTime (Optional)
     *         }
     *     }
     *     tags (Optional): {
     *         String: Object (Optional)
     *     }
     *     notes (Optional): {
     *         String: String (Optional)
     *     }
     *     scheduledAt: OffsetDateTime (Optional)
     *     matchingMode (Optional): {
     *     }
     * }
     * }</pre>
     *
     * @param jobId The jobId of the job.
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a unit of work to be routed along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> updateJobWithResponse(String jobId, BinaryData resource,
        RequestOptions requestOptions) {
        return this.serviceClient.upsertJobWithResponseAsync(jobId, resource, requestOptions);
    }

    /**
     * Updates a router job.
     *
     * <p>
     * <strong>Header Parameters</strong>
     *
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>If-Match</td>
     * <td>String</td>
     * <td>No</td>
     * <td>The request should only proceed if an entity matches this string.</td>
     * </tr>
     * <tr>
     * <td>If-Unmodified-Since</td>
     * <td>OffsetDateTime</td>
     * <td>No</td>
     * <td>The request should only proceed if the entity was not modified after this time.</td>
     * </tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p>
     * <strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     jobId: String (Required)
     *     channelReference: String (Optional)
     *     status: String(pendingClassification/queued/assigned/completed/closed/cancelled/classificationFailed/created/pendingSchedule/scheduled/scheduleFailed/waitingForActivation) (Optional)
     *     enqueuedAt: OffsetDateTime (Optional)
     *     channelId: String (Optional)
     *     classificationPolicyId: String (Optional)
     *     queueId: String (Optional)
     *     priority: Integer (Optional)
     *     dispositionCode: String (Optional)
     *     requestedWorkerSelectors (Optional): [
     *          (Optional){
     *             key: String (Required)
     *             labelOperator: String(equal/notEqual/lessThan/lessThanEqual/greaterThan/greaterThanEqual) (Required)
     *             value: Object (Optional)
     *             expiresAfterSeconds: Double (Optional)
     *             expedite: Boolean (Optional)
     *             status: String(active/expired) (Optional)
     *             expiresAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     attachedWorkerSelectors (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     labels (Optional): {
     *         String: Object (Optional)
     *     }
     *     assignments (Optional): {
     *         String (Optional): {
     *             assignmentId: String (Required)
     *             workerId: String (Optional)
     *             assignedAt: OffsetDateTime (Required)
     *             completedAt: OffsetDateTime (Optional)
     *             closedAt: OffsetDateTime (Optional)
     *         }
     *     }
     *     tags (Optional): {
     *         String: Object (Optional)
     *     }
     *     notes (Optional): {
     *         String: String (Optional)
     *     }
     *     scheduledAt: OffsetDateTime (Optional)
     *     matchingMode (Optional): {
     *     }
     * }
     * }</pre>
     *
     * <p>
     * <strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     jobId: String (Required)
     *     channelReference: String (Optional)
     *     status: String(pendingClassification/queued/assigned/completed/closed/cancelled/classificationFailed/created/pendingSchedule/scheduled/scheduleFailed/waitingForActivation) (Optional)
     *     enqueuedAt: OffsetDateTime (Optional)
     *     channelId: String (Optional)
     *     classificationPolicyId: String (Optional)
     *     queueId: String (Optional)
     *     priority: Integer (Optional)
     *     dispositionCode: String (Optional)
     *     requestedWorkerSelectors (Optional): [
     *          (Optional){
     *             key: String (Required)
     *             labelOperator: String(equal/notEqual/lessThan/lessThanEqual/greaterThan/greaterThanEqual) (Required)
     *             value: Object (Optional)
     *             expiresAfterSeconds: Double (Optional)
     *             expedite: Boolean (Optional)
     *             status: String(active/expired) (Optional)
     *             expiresAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     attachedWorkerSelectors (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     labels (Optional): {
     *         String: Object (Optional)
     *     }
     *     assignments (Optional): {
     *         String (Optional): {
     *             assignmentId: String (Required)
     *             workerId: String (Optional)
     *             assignedAt: OffsetDateTime (Required)
     *             completedAt: OffsetDateTime (Optional)
     *             closedAt: OffsetDateTime (Optional)
     *         }
     *     }
     *     tags (Optional): {
     *         String: Object (Optional)
     *     }
     *     notes (Optional): {
     *         String: String (Optional)
     *     }
     *     scheduledAt: OffsetDateTime (Optional)
     *     matchingMode (Optional): {
     *     }
     * }
     * }</pre>
     *
     * @param jobId The jobId of the job.
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a unit of work to be routed on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BinaryData> updateJob(String jobId, BinaryData resource, RequestOptions requestOptions) {
        return this.serviceClient.upsertJobWithResponseAsync(jobId, resource, requestOptions).map(Response::getValue);
    }

    /**
     * Updates a router job.
     *
     * @param jobId The jobId of the job.
     * @param job The job to update.
     * @return the updated job on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RouterJob> updateJob(String jobId, RouterJob job) {
        return updateJobWithResponse(jobId, BinaryData.fromObject(job), null)
            .map(response -> response.getValue().toObject(RouterJob.class));
    }

    /**
     * Create a job.
     *
     * @param createJobOptions Options to create RouterJob.
     * @return resource The resource instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<RouterJob>> createJobWithResponse(CreateJobOptions createJobOptions) {
        RequestOptions requestOptions = new RequestOptions();
        RouterJobInternal routerJob = JobAdapter.convertCreateJobOptionsToRouterJob(createJobOptions);
        return upsertJobWithResponse(createJobOptions.getJobId(), BinaryData.fromObject(routerJob), requestOptions)
            .map(response -> new SimpleResponse<RouterJob>(response.getRequest(), response.getStatusCode(),
                response.getHeaders(), response.getValue().toObject(RouterJob.class)));
    }

    /**
     * Convenience method to create a job.
     *
     * @param createJobOptions Options to create RouterJob.
     * @return resource The resource instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RouterJob> createJob(CreateJobOptions createJobOptions) {
        return this.createJobWithResponse(createJobOptions).map(response -> response.getValue());
    }

    /**
     * Create a job using a classification policy.
     *
     * @param createJobWithClassificationPolicyOptions Options to create a RouterJob using a classification policy.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @return a unit of work to be routed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<RouterJob>> createJobWithClassificationPolicyWithResponse(
        CreateJobWithClassificationPolicyOptions createJobWithClassificationPolicyOptions,
        RequestOptions requestOptions) {
        RouterJobInternal routerJob = JobAdapter
            .convertCreateJobWithClassificationPolicyOptionsToRouterJob(createJobWithClassificationPolicyOptions);
        return upsertJobWithResponse(createJobWithClassificationPolicyOptions.getJobId(),
            BinaryData.fromObject(routerJob), requestOptions)
            .map(response -> new SimpleResponse<RouterJob>(response.getRequest(), response.getStatusCode(),
                response.getHeaders(), response.getValue().toObject(RouterJob.class)));
    }

    /**
     * Convenience method to create a job using a classification policy.
     *
     * @param createJobWithClassificationPolicyOptions Options to create a RouterJob using a classification policy.
     * @return a unit of work to be routed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RouterJob> createJobWithClassificationPolicy(
        CreateJobWithClassificationPolicyOptions createJobWithClassificationPolicyOptions) {
        RequestOptions requestOptions = new RequestOptions();
        return this
            .createJobWithClassificationPolicyWithResponse(createJobWithClassificationPolicyOptions, requestOptions)
            .map(response -> response.getValue());
    }

    /**
     * Retrieves an existing job by Id.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     etag: String (Required)
     *     id: String (Required)
     *     channelReference: String (Optional)
     *     status: String(pendingClassification/queued/assigned/completed/closed/cancelled/classificationFailed/created/pendingSchedule/scheduled/scheduleFailed/waitingForActivation) (Optional)
     *     enqueuedAt: OffsetDateTime (Optional)
     *     channelId: String (Optional)
     *     classificationPolicyId: String (Optional)
     *     queueId: String (Optional)
     *     priority: Integer (Optional)
     *     dispositionCode: String (Optional)
     *     requestedWorkerSelectors (Optional): [
     *          (Optional){
     *             key: String (Required)
     *             labelOperator: String(equal/notEqual/lessThan/lessThanOrEqual/greaterThan/greaterThanOrEqual) (Required)
     *             value: Object (Optional)
     *             expiresAfterSeconds: Double (Optional)
     *             expedite: Boolean (Optional)
     *             status: String(active/expired) (Optional)
     *             expiresAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     attachedWorkerSelectors (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     labels (Optional): {
     *         String: Object (Required)
     *     }
     *     assignments (Optional): {
     *         String (Required): {
     *             assignmentId: String (Required)
     *             workerId: String (Optional)
     *             assignedAt: OffsetDateTime (Required)
     *             completedAt: OffsetDateTime (Optional)
     *             closedAt: OffsetDateTime (Optional)
     *         }
     *     }
     *     tags (Optional): {
     *         String: Object (Required)
     *     }
     *     notes (Optional): [
     *          (Optional){
     *             message: String (Required)
     *             addedAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     scheduledAt: OffsetDateTime (Optional)
     *     matchingMode (Optional): {
     *         kind: String(queueAndMatch/scheduleAndSuspend/suspend) (Required)
     *     }
     * }
     * }</pre>
     *
     * @param jobId Id of a job.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a unit of work to be routed along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getJobWithResponse(String jobId, RequestOptions requestOptions) {
        return this.serviceClient.getJobWithResponseAsync(jobId, requestOptions);
    }

    /**
     * Deletes a job and all of its traces.
     *
     * @param jobId Id of a job.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteJobWithResponse(String jobId, RequestOptions requestOptions) {
        return this.serviceClient.deleteJobWithResponseAsync(jobId, requestOptions);
    }

    /**
     * Reclassify a job.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * { }
     * }</pre>
     *
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * { }
     * }</pre>
     *
     * @param jobId Id of a job.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response payload from reclassifying a job along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> reclassifyJobWithResponse(String jobId, RequestOptions requestOptions) {
        return this.serviceClient.reclassifyJobWithResponseAsync(jobId, requestOptions);
    }

    /**
     * Reclassify a job.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * { }
     * }</pre>
     *
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * { }
     * }</pre>
     *
     * @param jobId Id of a job.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @return result object.
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BinaryData> reclassifyJob(String jobId, RequestOptions requestOptions) {
        return this.serviceClient.reclassifyJobWithResponseAsync(jobId, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Submits request to cancel an existing job by Id while supplying free-form cancellation reason.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * {
     *     note: String (Optional)
     *     dispositionCode: String (Optional)
     * }
     * }</pre>
     *
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * { }
     * }</pre>
     *
     * @param jobId Id of a job.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response payload from cancelling a job along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> cancelJobWithResponse(String jobId, RequestOptions requestOptions) {
        return this.serviceClient.cancelJobWithResponseAsync(jobId, requestOptions);
    }

    /**
     * Submits request to cancel an existing job by Id while supplying free-form cancellation reason.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * {
     *     note: String (Optional)
     *     dispositionCode: String (Optional)
     * }
     * }</pre>
     *
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * { }
     * }</pre>
     *
     * @param jobId Id of a job.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @return result object.
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BinaryData> cancelJob(String jobId, RequestOptions requestOptions) {
        return this.serviceClient.cancelJobWithResponseAsync(jobId, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Retrieves list of jobs based on filter parameters.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>Number of objects to return per page.</td></tr>
     * <tr><td>status</td><td>String</td><td>No</td><td>If specified, filter jobs by status. Allowed values: "all",
     * "pendingClassification", "queued", "assigned", "completed", "closed", "cancelled", "classificationFailed",
     * "created", "pendingSchedule", "scheduled", "scheduleFailed", "waitingForActivation", "active".</td></tr>
     * <tr><td>queueId</td><td>String</td><td>No</td><td>If specified, filter jobs by queue.</td></tr>
     * <tr><td>channelId</td><td>String</td><td>No</td><td>If specified, filter jobs by channel.</td></tr>
     * <tr><td>classificationPolicyId</td><td>String</td><td>No</td><td>If specified, filter jobs by
     * classificationPolicy.</td></tr>
     * <tr><td>scheduledBefore</td><td>OffsetDateTime</td><td>No</td><td>If specified, filter on jobs that was scheduled
     * before or at given timestamp. Range: (-Inf, scheduledBefore].</td></tr>
     * <tr><td>scheduledAfter</td><td>OffsetDateTime</td><td>No</td><td>If specified, filter on jobs that was scheduled
     * at or after given value. Range: [scheduledAfter, +Inf).</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     etag: String (Required)
     *     id: String (Required)
     *     channelReference: String (Optional)
     *     status: String(pendingClassification/queued/assigned/completed/closed/cancelled/classificationFailed/created/pendingSchedule/scheduled/scheduleFailed/waitingForActivation) (Optional)
     *     enqueuedAt: OffsetDateTime (Optional)
     *     channelId: String (Optional)
     *     classificationPolicyId: String (Optional)
     *     queueId: String (Optional)
     *     priority: Integer (Optional)
     *     dispositionCode: String (Optional)
     *     requestedWorkerSelectors (Optional): [
     *          (Optional){
     *             key: String (Required)
     *             labelOperator: String(equal/notEqual/lessThan/lessThanOrEqual/greaterThan/greaterThanOrEqual) (Required)
     *             value: Object (Optional)
     *             expiresAfterSeconds: Double (Optional)
     *             expedite: Boolean (Optional)
     *             status: String(active/expired) (Optional)
     *             expiresAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     attachedWorkerSelectors (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     labels (Optional): {
     *         String: Object (Required)
     *     }
     *     assignments (Optional): {
     *         String (Required): {
     *             assignmentId: String (Required)
     *             workerId: String (Optional)
     *             assignedAt: OffsetDateTime (Required)
     *             completedAt: OffsetDateTime (Optional)
     *             closedAt: OffsetDateTime (Optional)
     *         }
     *     }
     *     tags (Optional): {
     *         String: Object (Required)
     *     }
     *     notes (Optional): [
     *          (Optional){
     *             message: String (Required)
     *             addedAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     scheduledAt: OffsetDateTime (Optional)
     *     matchingMode (Optional): {
     *         kind: String(queueAndMatch/scheduleAndSuspend/suspend) (Required)
     *     }
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of RouterJob items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listJobs(RequestOptions requestOptions) {
        return this.serviceClient.listJobsAsync(requestOptions);
    }

    /**
     * Gets a job's position details.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     jobId: String (Required)
     *     position: int (Required)
     *     queueId: String (Required)
     *     queueLength: int (Required)
     *     estimatedWaitTimeMinutes: double (Required)
     * }
     * }</pre>
     *
     * @param jobId Id of the job.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a job's position details along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getQueuePositionWithResponse(String jobId, RequestOptions requestOptions) {
        return this.serviceClient.getQueuePositionWithResponseAsync(jobId, requestOptions);
    }

    /**
     * Unassign a job.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     suspendMatching: Boolean (Optional)
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     jobId: String (Required)
     *     unassignmentCount: int (Required)
     * }
     * }</pre>
     *
     * @param jobId Id of a job.
     * @param assignmentId Id of a job assignment.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response payload after a job has been successfully unassigned along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> unassignJobWithResponse(String jobId, String assignmentId,
        RequestOptions requestOptions) {
        return this.serviceClient.unassignJobWithResponseAsync(jobId, assignmentId, requestOptions);
    }

    /**
     * Accepts an offer to work on a job and returns a 409/Conflict if another agent accepted the job already.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     assignmentId: String (Required)
     *     jobId: String (Required)
     *     workerId: String (Required)
     * }
     * }</pre>
     *
     * @param workerId Id of a worker.
     * @param offerId Id of an offer.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response containing ids for the worker, job, and assignment from an accepted offer along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> acceptJobOfferWithResponse(String workerId, String offerId,
        RequestOptions requestOptions) {
        return this.serviceClient.acceptJobOfferWithResponseAsync(workerId, offerId, requestOptions);
    }

    /**
     * Declines an offer to work on a job.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * {
     *     retryOfferAt: OffsetDateTime (Optional)
     * }
     * }</pre>
     *
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * { }
     * }</pre>
     *
     * @param workerId Id of a worker.
     * @param offerId Id of an offer.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response payload from declining a job along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> declineJobOfferWithResponse(String workerId, String offerId,
        RequestOptions requestOptions) {
        return this.serviceClient.declineJobOfferWithResponseAsync(workerId, offerId, requestOptions);
    }

    /**
     * Declines an offer to work on a job.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * {
     *     retryOfferAt: OffsetDateTime (Optional)
     * }
     * }</pre>
     *
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * { }
     * }</pre>
     *
     * @param workerId Id of a worker.
     * @param offerId Id of an offer.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @return result object
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BinaryData> declineJobOffer(String workerId, String offerId, RequestOptions requestOptions) {
        return this.serviceClient.declineJobOfferWithResponseAsync(workerId, offerId, requestOptions)
            .flatMap(FluxUtil::toMono);
    }

    /**
     * Retrieves a queue's statistics.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     queueId: String (Required)
     *     length: int (Required)
     *     estimatedWaitTimeMinutes (Optional): {
     *         String: double (Required)
     *     }
     *     longestJobWaitTimeMinutes: Double (Optional)
     * }
     * }</pre>
     *
     * @param queueId Id of the queue to retrieve statistics.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return statistics for the queue along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getQueueStatisticsWithResponse(String queueId, RequestOptions requestOptions) {
        return this.serviceClient.getQueueStatisticsWithResponseAsync(queueId, requestOptions);
    }

    /**
     * Creates or updates a worker.
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>The request should only proceed if an entity matches this
     * string.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the
     * entity was not modified after this time.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     etag: String (Required)
     *     id: String (Required)
     *     state: String(active/draining/inactive) (Optional)
     *     queues (Optional): [
     *         String (Optional)
     *     ]
     *     capacity: Integer (Optional)
     *     labels (Optional): {
     *         String: Object (Required)
     *     }
     *     tags (Optional): {
     *         String: Object (Required)
     *     }
     *     channels (Optional): [
     *          (Optional){
     *             channelId: String (Required)
     *             capacityCostPerJob: int (Required)
     *             maxNumberOfJobs: Integer (Optional)
     *         }
     *     ]
     *     offers (Optional): [
     *          (Optional){
     *             offerId: String (Required)
     *             jobId: String (Required)
     *             capacityCost: int (Required)
     *             offeredAt: OffsetDateTime (Optional)
     *             expiresAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     assignedJobs (Optional): [
     *          (Optional){
     *             assignmentId: String (Required)
     *             jobId: String (Required)
     *             capacityCost: int (Required)
     *             assignedAt: OffsetDateTime (Required)
     *         }
     *     ]
     *     loadRatio: Double (Optional)
     *     availableForOffers: Boolean (Optional)
     *     maxConcurrentOffers: Integer (Optional)
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     etag: String (Required)
     *     id: String (Required)
     *     state: String(active/draining/inactive) (Optional)
     *     queues (Optional): [
     *         String (Optional)
     *     ]
     *     capacity: Integer (Optional)
     *     labels (Optional): {
     *         String: Object (Required)
     *     }
     *     tags (Optional): {
     *         String: Object (Required)
     *     }
     *     channels (Optional): [
     *          (Optional){
     *             channelId: String (Required)
     *             capacityCostPerJob: int (Required)
     *             maxNumberOfJobs: Integer (Optional)
     *         }
     *     ]
     *     offers (Optional): [
     *          (Optional){
     *             offerId: String (Required)
     *             jobId: String (Required)
     *             capacityCost: int (Required)
     *             offeredAt: OffsetDateTime (Optional)
     *             expiresAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     assignedJobs (Optional): [
     *          (Optional){
     *             assignmentId: String (Required)
     *             jobId: String (Required)
     *             capacityCost: int (Required)
     *             assignedAt: OffsetDateTime (Required)
     *         }
     *     ]
     *     loadRatio: Double (Optional)
     *     availableForOffers: Boolean (Optional)
     *     maxConcurrentOffers: Integer (Optional)
     * }
     * }</pre>
     *
     * @param workerId Id of a worker.
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an entity for jobs to be routed to along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<BinaryData>> upsertWorkerWithResponse(String workerId, BinaryData resource,
        RequestOptions requestOptions) {
        // Convenience API is not generated, as operation 'upsertWorker' is 'application/merge-patch+json' and
        // stream-style-serialization is not enabled
        return this.serviceClient.upsertWorkerWithResponseAsync(workerId, resource, requestOptions);
    }

    /**
     * Updates a worker.
     *
     * <p>
     * <strong>Header Parameters</strong>
     *
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>If-Match</td>
     * <td>String</td>
     * <td>No</td>
     * <td>The request should only proceed if an entity matches this string.</td>
     * </tr>
     * <tr>
     * <td>If-Unmodified-Since</td>
     * <td>OffsetDateTime</td>
     * <td>No</td>
     * <td>The request should only proceed if the entity was not modified after this time.</td>
     * </tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p>
     * <strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Required)
     *     state: String(active/draining/inactive) (Optional)
     *     queueAssignments (Optional): {
     *         String (Optional): {
     *         }
     *     }
     *     totalCapacity: Integer (Optional)
     *     labels (Optional): {
     *         String: Object (Optional)
     *     }
     *     tags (Optional): {
     *         String: Object (Optional)
     *     }
     *     channelConfigurations (Optional): {
     *         String (Optional): {
     *             capacityCostPerJob: int (Required)
     *             maxNumberOfJobs: Integer (Optional)
     *         }
     *     }
     *     offers (Optional): [
     *          (Optional){
     *             offerId: String (Required)
     *             jobId: String (Required)
     *             capacityCost: int (Required)
     *             offeredAt: OffsetDateTime (Optional)
     *             expiresAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     assignedJobs (Optional): [
     *          (Optional){
     *             assignmentId: String (Required)
     *             jobId: String (Required)
     *             capacityCost: int (Required)
     *             assignedAt: OffsetDateTime (Required)
     *         }
     *     ]
     *     loadRatio: Double (Optional)
     *     availableForOffers: Boolean (Optional)
     *     maxConcurrentOffers: Integer (Optional)
     * }
     * }</pre>
     *
     * <p>
     * <strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Required)
     *     state: String(active/draining/inactive) (Optional)
     *     queueAssignments (Optional): {
     *         String (Optional): {
     *         }
     *     }
     *     totalCapacity: Integer (Optional)
     *     labels (Optional): {
     *         String: Object (Optional)
     *     }
     *     tags (Optional): {
     *         String: Object (Optional)
     *     }
     *     channelConfigurations (Optional): {
     *         String (Optional): {
     *             capacityCostPerJob: int (Required)
     *             maxNumberOfJobs: Integer (Optional)
     *         }
     *     }
     *     offers (Optional): [
     *          (Optional){
     *             offerId: String (Required)
     *             jobId: String (Required)
     *             capacityCost: int (Required)
     *             offeredAt: OffsetDateTime (Optional)
     *             expiresAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     assignedJobs (Optional): [
     *          (Optional){
     *             assignmentId: String (Required)
     *             jobId: String (Required)
     *             capacityCost: int (Required)
     *             assignedAt: OffsetDateTime (Required)
     *         }
     *     ]
     *     loadRatio: Double (Optional)
     *     availableForOffers: Boolean (Optional)
     *     maxConcurrentOffers: Integer (Optional)
     * }
     * }</pre>
     *
     * @param workerId Id of the worker.
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an entity for jobs to be routed to along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> updateWorkerWithResponse(String workerId, BinaryData resource,
        RequestOptions requestOptions) {
        return this.serviceClient.upsertWorkerWithResponseAsync(workerId, resource, requestOptions);
    }

    /**
     * Updates a worker.
     *
     * <p>
     * <strong>Header Parameters</strong>
     *
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>If-Match</td>
     * <td>String</td>
     * <td>No</td>
     * <td>The request should only proceed if an entity matches this string.</td>
     * </tr>
     * <tr>
     * <td>If-Unmodified-Since</td>
     * <td>OffsetDateTime</td>
     * <td>No</td>
     * <td>The request should only proceed if the entity was not modified after this time.</td>
     * </tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p>
     * <strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Required)
     *     state: String(active/draining/inactive) (Optional)
     *     queueAssignments (Optional): {
     *         String (Optional): {
     *         }
     *     }
     *     totalCapacity: Integer (Optional)
     *     labels (Optional): {
     *         String: Object (Optional)
     *     }
     *     tags (Optional): {
     *         String: Object (Optional)
     *     }
     *     channelConfigurations (Optional): {
     *         String (Optional): {
     *             capacityCostPerJob: int (Required)
     *             maxNumberOfJobs: Integer (Optional)
     *         }
     *     }
     *     offers (Optional): [
     *          (Optional){
     *             offerId: String (Required)
     *             jobId: String (Required)
     *             capacityCost: int (Required)
     *             offeredAt: OffsetDateTime (Optional)
     *             expiresAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     assignedJobs (Optional): [
     *          (Optional){
     *             assignmentId: String (Required)
     *             jobId: String (Required)
     *             capacityCost: int (Required)
     *             assignedAt: OffsetDateTime (Required)
     *         }
     *     ]
     *     loadRatio: Double (Optional)
     *     availableForOffers: Boolean (Optional)
     *     maxConcurrentOffers: Integer (Optional)
     * }
     * }</pre>
     *
     * <p>
     * <strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Required)
     *     state: String(active/draining/inactive) (Optional)
     *     queueAssignments (Optional): {
     *         String (Optional): {
     *         }
     *     }
     *     totalCapacity: Integer (Optional)
     *     labels (Optional): {
     *         String: Object (Optional)
     *     }
     *     tags (Optional): {
     *         String: Object (Optional)
     *     }
     *     channelConfigurations (Optional): {
     *         String (Optional): {
     *             capacityCostPerJob: int (Required)
     *             maxNumberOfJobs: Integer (Optional)
     *         }
     *     }
     *     offers (Optional): [
     *          (Optional){
     *             offerId: String (Required)
     *             jobId: String (Required)
     *             capacityCost: int (Required)
     *             offeredAt: OffsetDateTime (Optional)
     *             expiresAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     assignedJobs (Optional): [
     *          (Optional){
     *             assignmentId: String (Required)
     *             jobId: String (Required)
     *             capacityCost: int (Required)
     *             assignedAt: OffsetDateTime (Required)
     *         }
     *     ]
     *     loadRatio: Double (Optional)
     *     availableForOffers: Boolean (Optional)
     *     maxConcurrentOffers: Integer (Optional)
     * }
     * }</pre>
     *
     * @param workerId Id of the worker.
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an entity for jobs to be routed to on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BinaryData> updateWorker(String workerId, BinaryData resource, RequestOptions requestOptions) {
        return this.serviceClient.upsertWorkerWithResponseAsync(workerId, resource, requestOptions)
            .map(worker -> worker.getValue());
    }

    /**
     * Updates a worker.
     *
     * <p>
     * <strong>Header Parameters</strong>
     *
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>If-Match</td>
     * <td>String</td>
     * <td>No</td>
     * <td>The request should only proceed if an entity matches this string.</td>
     * </tr>
     * <tr>
     * <td>If-Unmodified-Since</td>
     * <td>OffsetDateTime</td>
     * <td>No</td>
     * <td>The request should only proceed if the entity was not modified after this time.</td>
     * </tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * @param workerId Id of the worker.
     * @param worker The worker to update.
     * @return the updated worker on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RouterWorker> updateWorker(String workerId, RouterWorker worker) {
        return this.updateWorkerWithResponse(workerId, BinaryData.fromObject(worker), null)
            .map(routerWorkerResponse -> routerWorkerResponse.getValue().toObject(RouterWorker.class));
    }

    /**
     * Create a worker.
     *
     * @param createWorkerOptions Container for inputs to create a worker.
     * @return an entity for jobs to be routed to.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<RouterWorker>> createWorkerWithResponse(CreateWorkerOptions createWorkerOptions) {
        RequestOptions requestOptions = new RequestOptions();
        RouterWorkerInternal routerWorker = WorkerAdapter.convertCreateWorkerOptionsToRouterWorker(createWorkerOptions);
        return upsertWorkerWithResponse(createWorkerOptions.getWorkerId(), BinaryData.fromObject(routerWorker),
            requestOptions)
            .map(response -> new SimpleResponse<RouterWorker>(response.getRequest(), response.getStatusCode(),
                response.getHeaders(), response.getValue().toObject(RouterWorker.class)));
    }

    /**
     * Convenience method to create a worker.
     *
     * @param createWorkerOptions Container for inputs to create a worker.
     * @return an entity for jobs to be routed to.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RouterWorker> createWorker(CreateWorkerOptions createWorkerOptions) {
        return createWorkerWithResponse(createWorkerOptions)
            .map(routerWorkerResponse -> routerWorkerResponse.getValue());
    }

    /**
     * Retrieves an existing worker by Id.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     etag: String (Required)
     *     id: String (Required)
     *     state: String(active/draining/inactive) (Optional)
     *     queues (Optional): [
     *         String (Optional)
     *     ]
     *     capacity: Integer (Optional)
     *     labels (Optional): {
     *         String: Object (Required)
     *     }
     *     tags (Optional): {
     *         String: Object (Required)
     *     }
     *     channels (Optional): [
     *          (Optional){
     *             channelId: String (Required)
     *             capacityCostPerJob: int (Required)
     *             maxNumberOfJobs: Integer (Optional)
     *         }
     *     ]
     *     offers (Optional): [
     *          (Optional){
     *             offerId: String (Required)
     *             jobId: String (Required)
     *             capacityCost: int (Required)
     *             offeredAt: OffsetDateTime (Optional)
     *             expiresAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     assignedJobs (Optional): [
     *          (Optional){
     *             assignmentId: String (Required)
     *             jobId: String (Required)
     *             capacityCost: int (Required)
     *             assignedAt: OffsetDateTime (Required)
     *         }
     *     ]
     *     loadRatio: Double (Optional)
     *     availableForOffers: Boolean (Optional)
     *     maxConcurrentOffers: Integer (Optional)
     * }
     * }</pre>
     *
     * @param workerId Id of a worker.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an entity for jobs to be routed to along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getWorkerWithResponse(String workerId, RequestOptions requestOptions) {
        return this.serviceClient.getWorkerWithResponseAsync(workerId, requestOptions);
    }

    /**
     * Deletes a worker and all of its traces.
     *
     * @param workerId Id of a worker.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteWorkerWithResponse(String workerId, RequestOptions requestOptions) {
        return this.serviceClient.deleteWorkerWithResponseAsync(workerId, requestOptions);
    }

    /**
     * Retrieves existing workers.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>Number of objects to return per page.</td></tr>
     * <tr><td>state</td><td>String</td><td>No</td><td>If specified, select workers by worker state. Allowed values:
     * "active", "draining", "inactive", "all".</td></tr>
     * <tr><td>channelId</td><td>String</td><td>No</td><td>If specified, select workers who have a channel configuration
     * with this channel.</td></tr>
     * <tr><td>queueId</td><td>String</td><td>No</td><td>If specified, select workers who are assigned to this
     * queue.</td></tr>
     * <tr><td>hasCapacity</td><td>Boolean</td><td>No</td><td>If set to true, select only workers who have capacity for
     * the channel specified by `channelId` or for any channel if `channelId` not specified. If set to false, then will
     * return all workers including workers without any capacity for jobs. Defaults to false.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     etag: String (Required)
     *     id: String (Required)
     *     state: String(active/draining/inactive) (Optional)
     *     queues (Optional): [
     *         String (Optional)
     *     ]
     *     capacity: Integer (Optional)
     *     labels (Optional): {
     *         String: Object (Required)
     *     }
     *     tags (Optional): {
     *         String: Object (Required)
     *     }
     *     channels (Optional): [
     *          (Optional){
     *             channelId: String (Required)
     *             capacityCostPerJob: int (Required)
     *             maxNumberOfJobs: Integer (Optional)
     *         }
     *     ]
     *     offers (Optional): [
     *          (Optional){
     *             offerId: String (Required)
     *             jobId: String (Required)
     *             capacityCost: int (Required)
     *             offeredAt: OffsetDateTime (Optional)
     *             expiresAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     assignedJobs (Optional): [
     *          (Optional){
     *             assignmentId: String (Required)
     *             jobId: String (Required)
     *             capacityCost: int (Required)
     *             assignedAt: OffsetDateTime (Required)
     *         }
     *     ]
     *     loadRatio: Double (Optional)
     *     availableForOffers: Boolean (Optional)
     *     maxConcurrentOffers: Integer (Optional)
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of RouterWorker items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listWorkers(RequestOptions requestOptions) {
        return this.serviceClient.listWorkersAsync(requestOptions);
    }

    /**
     * Retrieves an existing job by Id.
     *
     * @param jobId The id of the job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a unit of work to be routed on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RouterJob> getJob(String jobId) {
        // Generated convenience method for getJobWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getJobWithResponse(jobId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(RouterJob.class));
    }

    /**
     * Deletes a job and all of its traces.
     *
     * @param jobId Id of a job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteJob(String jobId) {
        // Generated convenience method for deleteJobWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return deleteJobWithResponse(jobId, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Submits request to cancel an existing job by Id while supplying free-form cancellation reason.
     *
     * @param jobId Id of a job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response payload from cancelling a job on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<CancelJobResultInternal> cancelJob(String jobId) {
        // Generated convenience method for cancelJobWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return cancelJobWithResponse(jobId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(CancelJobResultInternal.class));
    }

    /**
     * Retrieves list of jobs based on filter parameters.
     *
     * @param status If specified, filter jobs by status.
     * @param queueId If specified, filter jobs by queue.
     * @param channelId If specified, filter jobs by channel.
     * @param classificationPolicyId If specified, filter jobs by classificationPolicy.
     * @param scheduledBefore If specified, filter on jobs that was scheduled before or at given timestamp. Range:
     * (-Inf, scheduledBefore].
     * @param scheduledAfter If specified, filter on jobs that was scheduled at or after given value. Range:
     * [scheduledAfter, +Inf).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a paged collection of jobs as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<RouterJob> listJobs(RouterJobStatusSelector status, String queueId, String channelId,
        String classificationPolicyId, OffsetDateTime scheduledBefore, OffsetDateTime scheduledAfter) {
        // Generated convenience method for listJobs
        RequestOptions requestOptions = new RequestOptions();
        if (status != null) {
            requestOptions.addQueryParam("status", status.toString(), false);
        }
        if (queueId != null) {
            requestOptions.addQueryParam("queueId", queueId, false);
        }
        if (channelId != null) {
            requestOptions.addQueryParam("channelId", channelId, false);
        }
        if (classificationPolicyId != null) {
            requestOptions.addQueryParam("classificationPolicyId", classificationPolicyId, false);
        }
        if (scheduledBefore != null) {
            requestOptions.addQueryParam("scheduledBefore", String.valueOf(scheduledBefore), false);
        }
        if (scheduledAfter != null) {
            requestOptions.addQueryParam("scheduledAfter", String.valueOf(scheduledAfter), false);
        }
        PagedFlux<BinaryData> pagedFluxResponse = listJobs(requestOptions);
        return PagedFlux.create(() -> (continuationToken, pageSize) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationToken == null)
                ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationToken).take(1);
            return flux.map(pagedResponse -> new PagedResponseBase<Void, RouterJob>(pagedResponse.getRequest(),
                pagedResponse.getStatusCode(), pagedResponse.getHeaders(),
                pagedResponse.getValue()
                    .stream()
                    .map(protocolMethodData -> protocolMethodData.toObject(RouterJob.class))
                    .collect(Collectors.toList()),
                pagedResponse.getContinuationToken(), null));
        });
    }

    /**
     * Retrieves list of jobs based on filter parameters.
     *
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a paged collection of jobs as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<RouterJob> listJobs() {
        // Generated convenience method for listJobs
        RequestOptions requestOptions = new RequestOptions();
        PagedFlux<BinaryData> pagedFluxResponse = listJobs(requestOptions);
        return PagedFlux.create(() -> (continuationToken, pageSize) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationToken == null)
                ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationToken).take(1);
            return flux.map(pagedResponse -> new PagedResponseBase<Void, RouterJob>(pagedResponse.getRequest(),
                pagedResponse.getStatusCode(), pagedResponse.getHeaders(),
                pagedResponse.getValue()
                    .stream()
                    .map(protocolMethodData -> protocolMethodData.toObject(RouterJob.class))
                    .collect(Collectors.toList()),
                pagedResponse.getContinuationToken(), null));
        });
    }

    /**
     * Gets a job's position details.
     *
     * @param jobId Id of the job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a job's position details on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RouterJobPositionDetails> getQueuePosition(String jobId) {
        // Generated convenience method for getQueuePositionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getQueuePositionWithResponse(jobId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(RouterJobPositionDetails.class));
    }

    /**
     * Unassign a job.
     *
     * @param jobId Id of a job.
     * @param assignmentId Id of a job assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response payload after a job has been successfully unassigned on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<UnassignJobResult> unassignJob(String jobId, String assignmentId) {
        // Generated convenience method for unassignJobWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return unassignJobWithResponse(jobId, assignmentId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(UnassignJobResult.class));
    }

    /**
     * Accepts an offer to work on a job and returns a 409/Conflict if another agent accepted the job already.
     *
     * @param workerId Id of a worker.
     * @param offerId Id of an offer.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response containing ids for the worker, job, and assignment from an accepted offer on successful
     * completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AcceptJobOfferResult> acceptJobOffer(String workerId, String offerId) {
        // Generated convenience method for acceptJobOfferWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return acceptJobOfferWithResponse(workerId, offerId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(AcceptJobOfferResult.class));
    }

    /**
     * Declines an offer to work on a job.
     *
     * @param workerId Id of a worker.
     * @param offerId Id of an offer.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response payload from declining a job on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<DeclineJobOfferResultInternal> declineJobOffer(String workerId, String offerId) {
        // Generated convenience method for declineJobOfferWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return declineJobOfferWithResponse(workerId, offerId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(DeclineJobOfferResultInternal.class));
    }

    /**
     * Retrieves a queue's statistics.
     *
     * @param queueId Id of the queue to retrieve statistics.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return statistics for the queue on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RouterQueueStatistics> getQueueStatistics(String queueId) {
        // Generated convenience method for getQueueStatisticsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getQueueStatisticsWithResponse(queueId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(RouterQueueStatistics.class));
    }

    /**
     * Retrieves an existing worker by Id.
     *
     * @param workerId Id of the worker.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an entity for jobs to be routed to on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RouterWorker> getWorker(String workerId) {
        // Generated convenience method for getWorkerWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getWorkerWithResponse(workerId, requestOptions)
            .map(response -> response.getValue().toObject(RouterWorker.class));
    }

    /**
     * Deletes a worker and all of its traces.
     *
     * @param workerId Id of a worker.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteWorker(String workerId) {
        // Generated convenience method for deleteWorkerWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return deleteWorkerWithResponse(workerId, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Retrieves existing workers.
     *
     * @param state If specified, select workers by worker state.
     * @param channelId If specified, select workers who have a channel configuration with this channel.
     * @param queueId If specified, select workers who are assigned to this queue.
     * @param hasCapacity If set to true, select only workers who have capacity for the channel specified by `channelId`
     * or for any channel if `channelId` not specified. If set to false, then will return all workers including
     * workers without any capacity for jobs. Defaults to false.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a paged collection of workers as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<RouterWorker> listWorkers(RouterWorkerStateSelector state, String channelId, String queueId,
        Boolean hasCapacity) {
        // Generated convenience method for listWorkers
        RequestOptions requestOptions = new RequestOptions();
        if (state != null) {
            requestOptions.addQueryParam("state", state.toString(), false);
        }
        if (channelId != null) {
            requestOptions.addQueryParam("channelId", channelId, false);
        }
        if (queueId != null) {
            requestOptions.addQueryParam("queueId", queueId, false);
        }
        if (hasCapacity != null) {
            requestOptions.addQueryParam("hasCapacity", String.valueOf(hasCapacity), false);
        }
        PagedFlux<BinaryData> pagedFluxResponse = listWorkers(requestOptions);
        return PagedFlux.create(() -> (continuationToken, pageSize) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationToken == null)
                ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationToken).take(1);
            return flux.map(pagedResponse -> new PagedResponseBase<Void, RouterWorker>(pagedResponse.getRequest(),
                pagedResponse.getStatusCode(), pagedResponse.getHeaders(),
                pagedResponse.getValue()
                    .stream()
                    .map(protocolMethodData -> protocolMethodData.toObject(RouterWorker.class))
                    .collect(Collectors.toList()),
                pagedResponse.getContinuationToken(), null));
        });
    }

    /**
     * Retrieves existing workers.
     *
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a paged collection of workers as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<RouterWorker> listWorkers() {
        // Generated convenience method for listWorkers
        RequestOptions requestOptions = new RequestOptions();
        PagedFlux<BinaryData> pagedFluxResponse = listWorkers(requestOptions);
        return PagedFlux.create(() -> (continuationToken, pageSize) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationToken == null)
                ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationToken).take(1);
            return flux.map(pagedResponse -> new PagedResponseBase<Void, RouterWorker>(pagedResponse.getRequest(),
                pagedResponse.getStatusCode(), pagedResponse.getHeaders(),
                pagedResponse.getValue()
                    .stream()
                    .map(protocolMethodData -> protocolMethodData.toObject(RouterWorker.class))
                    .collect(Collectors.toList()),
                pagedResponse.getContinuationToken(), null));
        });
    }

    /**
     * Unassign a job.
     *
     * @param jobId Id of a job.
     * @param assignmentId Id of a job assignment.
     * @param options Request body for unassign route.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response payload after a job has been successfully unassigned on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<UnassignJobResult> unassignJob(String jobId, String assignmentId, UnassignJobOptions options) {
        // Generated convenience method for unassignJobWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (options != null) {
            requestOptions.setBody(BinaryData.fromObject(options));
        }
        return unassignJobWithResponse(jobId, assignmentId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(UnassignJobResult.class));
    }

    /**
     * Completes an assigned job.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * {
     *     note: String (Optional)
     * }
     * }</pre>
     *
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * { }
     * }</pre>
     *
     * @param jobId Id of a job.
     * @param assignmentId Id of a job assignment.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response payload from completing a job along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> completeJobWithResponse(String jobId, String assignmentId,
        RequestOptions requestOptions) {
        return this.serviceClient.completeJobWithResponseAsync(jobId, assignmentId, requestOptions);
    }

    /**
     * Completes an assigned job.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * {
     *     note: String (Optional)
     * }
     * }</pre>
     *
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * { }
     * }</pre>
     *
     * @param jobId Id of a job.
     * @param assignmentId Id of a job assignment.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @return result object.
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BinaryData> completeJob(String jobId, String assignmentId, RequestOptions requestOptions) {
        return this.serviceClient.completeJobWithResponseAsync(jobId, assignmentId, requestOptions)
            .flatMap(FluxUtil::toMono);
    }

    /**
     * Closes a completed job.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * {
     *     dispositionCode: String (Optional)
     *     closeAt: OffsetDateTime (Optional)
     *     note: String (Optional)
     * }
     * }</pre>
     *
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * { }
     * }</pre>
     *
     * @param jobId Id of a job.
     * @param assignmentId Id of a job assignment.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response payload from closing a job along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> closeJobWithResponse(String jobId, String assignmentId,
        RequestOptions requestOptions) {
        return this.serviceClient.closeJobWithResponseAsync(jobId, assignmentId, requestOptions);
    }

    /**
     * Closes a completed job.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * {
     *     dispositionCode: String (Optional)
     *     closeAt: OffsetDateTime (Optional)
     *     note: String (Optional)
     * }
     * }</pre>
     *
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * { }
     * }</pre>
     *
     * @param jobId Id of a job.
     * @param assignmentId Id of a job assignment.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @return Result.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BinaryData> closeJob(String jobId, String assignmentId, RequestOptions requestOptions) {
        return this.serviceClient.closeJobWithResponseAsync(jobId, assignmentId, requestOptions)
            .flatMap(FluxUtil::toMono);
    }

    /**
     * Reclassify a job.
     *
     * @param jobId Id of a job.
     * @param options Request object for reclassifying a job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response payload from reclassifying a job on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<ReclassifyJobResultInternal> reclassifyJob(String jobId, ReclassifyJobOptionsInternal options) {
        // Generated convenience method for reclassifyJobWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (options != null) {
            requestOptions.setBody(BinaryData.fromObject(options));
        }
        return reclassifyJobWithResponse(jobId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(ReclassifyJobResultInternal.class));
    }

    /**
     * Reclassify a job.
     *
     * @param jobId Id of a job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response payload from reclassifying a job on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<ReclassifyJobResultInternal> reclassifyJob(String jobId) {
        // Generated convenience method for reclassifyJobWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return reclassifyJobWithResponse(jobId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(ReclassifyJobResultInternal.class));
    }

    /**
     * Submits request to cancel an existing job by Id while supplying free-form cancellation reason.
     *
     * @param jobId Id of a job.
     * @param options Request model for cancelling job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response payload from cancelling a job on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<CancelJobResultInternal> cancelJob(String jobId, CancelJobOptionsInternal options) {
        // Generated convenience method for cancelJobWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (options != null) {
            requestOptions.setBody(BinaryData.fromObject(options));
        }
        return cancelJobWithResponse(jobId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(CancelJobResultInternal.class));
    }

    /**
     * Completes an assigned job.
     *
     * @param jobId Id of a job.
     * @param assignmentId Id of a job assignment.
     * @param options Request model for completing job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response payload from completing a job on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<CompleteJobResultInternal> completeJob(String jobId, String assignmentId, CompleteJobOptionsInternal options) {
        // Generated convenience method for completeJobWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (options != null) {
            requestOptions.setBody(BinaryData.fromObject(options));
        }
        return completeJobWithResponse(jobId, assignmentId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(CompleteJobResultInternal.class));
    }

    /**
     * Completes an assigned job.
     *
     * @param jobId Id of a job.
     * @param assignmentId Id of a job assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response payload from completing a job on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<CompleteJobResultInternal> completeJob(String jobId, String assignmentId) {
        // Generated convenience method for completeJobWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return completeJobWithResponse(jobId, assignmentId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(CompleteJobResultInternal.class));
    }

    /**
     * Closes a completed job.
     *
     * @param jobId Id of a job.
     * @param assignmentId Id of a job assignment.
     * @param options Request model for closing job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response payload from closing a job on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<CloseJobResultInternal> closeJob(String jobId, String assignmentId, CloseJobOptionsInternal options) {
        // Generated convenience method for closeJobWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (options != null) {
            requestOptions.setBody(BinaryData.fromObject(options));
        }
        return closeJobWithResponse(jobId, assignmentId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(CloseJobResultInternal.class));
    }

    /**
     * Closes a completed job.
     *
     * @param jobId Id of a job.
     * @param assignmentId Id of a job assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response payload from closing a job on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<CloseJobResultInternal> closeJob(String jobId, String assignmentId) {
        // Generated convenience method for closeJobWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return closeJobWithResponse(jobId, assignmentId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(CloseJobResultInternal.class));
    }

    /**
     * Declines an offer to work on a job.
     *
     * @param workerId Id of a worker.
     * @param offerId Id of an offer.
     * @param options Request model for declining offer.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response payload from declining a job on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<DeclineJobOfferResultInternal> declineJobOffer(String workerId, String offerId,
        DeclineJobOfferOptionsInternal options) {
        // Generated convenience method for declineJobOfferWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (options != null) {
            requestOptions.setBody(BinaryData.fromObject(options));
        }
        return declineJobOfferWithResponse(workerId, offerId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(DeclineJobOfferResultInternal.class));
    }
}
