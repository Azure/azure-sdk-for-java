// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.communication.jobrouter.implementation.models;

import com.azure.communication.jobrouter.models.ExceptionActionKind;
import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeId;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.util.Map;

/**
 * An action that modifies labels on a job and then reclassifies it.
 */
@JsonTypeInfo(
    use = JsonTypeInfo.Id.NAME,
    property = "kind",
    defaultImpl = ReclassifyExceptionActionInternal.class,
    visible = true)
@JsonTypeName("reclassify")
@Fluent
public final class ReclassifyExceptionActionInternal extends ExceptionActionInternal {

    /*
     * The new classification policy that will determine queue, priority and worker selectors.
     */
    @Generated
    @JsonProperty(value = "classificationPolicyId")
    private String classificationPolicyId;

    /*
     * Dictionary containing the labels to update (or add if not existing) in key-value pairs. Values must be primitive
     * values - number, string, boolean.
     */
    @Generated
    @JsonProperty(value = "labelsToUpsert")
    private Map<String, Object> labelsToUpsert;

    /**
     * Creates an instance of ReclassifyExceptionActionInternal class.
     */
    @Generated
    public ReclassifyExceptionActionInternal() {
    }

    /**
     * Get the classificationPolicyId property: The new classification policy that will determine queue, priority and
     * worker selectors.
     *
     * @return the classificationPolicyId value.
     */
    @Generated
    public String getClassificationPolicyId() {
        return this.classificationPolicyId;
    }

    /**
     * Set the classificationPolicyId property: The new classification policy that will determine queue, priority and
     * worker selectors.
     *
     * @param classificationPolicyId the classificationPolicyId value to set.
     * @return the ReclassifyExceptionActionInternal object itself.
     */
    @Generated
    public ReclassifyExceptionActionInternal setClassificationPolicyId(String classificationPolicyId) {
        this.classificationPolicyId = classificationPolicyId;
        return this;
    }

    /**
     * Get the labelsToUpsert property: Dictionary containing the labels to update (or add if not existing) in key-value
     * pairs. Values must be primitive values - number, string, boolean.
     *
     * @return the labelsToUpsert value.
     */
    @Generated
    public Map<String, Object> getLabelsToUpsert() {
        return this.labelsToUpsert;
    }

    /**
     * Set the labelsToUpsert property: Dictionary containing the labels to update (or add if not existing) in key-value
     * pairs. Values must be primitive values - number, string, boolean.
     *
     * @param labelsToUpsert the labelsToUpsert value to set.
     * @return the ReclassifyExceptionActionInternal object itself.
     */
    @Generated
    public ReclassifyExceptionActionInternal setLabelsToUpsert(Map<String, Object> labelsToUpsert) {
        this.labelsToUpsert = labelsToUpsert;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public ReclassifyExceptionActionInternal setId(String id) {
        super.setId(id);
        return this;
    }

    /*
     * The type discriminator describing a sub-type of ExceptionAction.
     */
    @Generated
    @JsonTypeId
    @JsonProperty(value = "kind")
    private ExceptionActionKind kind = ExceptionActionKind.RECLASSIFY;

    /**
     * Get the kind property: The type discriminator describing a sub-type of ExceptionAction.
     *
     * @return the kind value.
     */
    @Generated
    @Override
    public ExceptionActionKind getKind() {
        return this.kind;
    }
}
