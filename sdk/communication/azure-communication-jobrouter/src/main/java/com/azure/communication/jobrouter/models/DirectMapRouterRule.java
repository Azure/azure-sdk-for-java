// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.communication.jobrouter.models;

import com.azure.communication.jobrouter.implementation.JsonMergePatchHelper;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.Set;

/**
 * A rule that return the same labels as the input labels.
 */
@Immutable
public final class DirectMapRouterRule extends RouterRule {

    /**
     * Creates an instance of DirectMapRouterRule class.
     */
    public DirectMapRouterRule() {
    }

    /**
     * Returns kind discriminator.
     *
     * @return kind.
     */
    public RouterRuleKind getKind() {
        return RouterRuleKind.DIRECT_MAP;
    }

    /*
     * The type discriminator describing a sub-type of RouterRule
     */
    @Generated
    private RouterRuleKind kind = RouterRuleKind.DIRECT_MAP;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (JsonMergePatchHelper.getRouterRuleAccessor().isJsonMergePatch(this)) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("kind", this.kind.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DirectMapRouterRule from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of DirectMapRouterRule if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the DirectMapRouterRule.
     */
    @Generated
    public static DirectMapRouterRule fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DirectMapRouterRule deserializedDirectMapRouterRule = new DirectMapRouterRule();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("kind".equals(fieldName)) {
                    deserializedDirectMapRouterRule.kind = RouterRuleKind.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedDirectMapRouterRule;
        });
    }
}
