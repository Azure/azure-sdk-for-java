// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.communication.jobrouter.implementation.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;

/** A unit of work to be routed. */
@Fluent
public final class RouterJobInternal {
    /*
     * The id of the job.
     */
    @JsonProperty(value = "id", access = JsonProperty.Access.WRITE_ONLY)
    private String id;

    /*
     * Reference to an external parent context, eg. call ID.
     */
    @JsonProperty(value = "channelReference")
    private String channelReference;

    /*
     * The state of the Job.
     */
    @JsonProperty(value = "jobStatus", access = JsonProperty.Access.WRITE_ONLY)
    private RouterJobStatus jobStatus;

    /*
     * The time a job was queued.
     */
    @JsonProperty(value = "enqueueTimeUtc", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime enqueueTimeUtc;

    /*
     * The channel identifier. eg. voice, chat, etc.
     */
    @JsonProperty(value = "channelId")
    private String channelId;

    /*
     * The Id of the Classification policy used for classifying a job.
     */
    @JsonProperty(value = "classificationPolicyId")
    private String classificationPolicyId;

    /*
     * The Id of the Queue that this job is queued to.
     */
    @JsonProperty(value = "queueId")
    private String queueId;

    /*
     * The priority of this job.
     */
    @JsonProperty(value = "priority")
    private Integer priority;

    /*
     * Reason code for cancelled or closed jobs.
     */
    @JsonProperty(value = "dispositionCode")
    private String dispositionCode;

    /*
     * A collection of manually specified label selectors, which a worker must satisfy in order to process this job.
     */
    @JsonProperty(value = "requestedWorkerSelectors")
    private List<WorkerSelector> requestedWorkerSelectors;

    /*
     * A collection of label selectors attached by a classification policy, which a worker must satisfy in order to
     * process this job.
     */
    @JsonProperty(value = "attachedWorkerSelectors", access = JsonProperty.Access.WRITE_ONLY)
    private List<WorkerSelector> attachedWorkerSelectors;

    /*
     * A set of key/value pairs that are identifying attributes used by the rules engines to make decisions.
     */
    @JsonProperty(value = "labels")
    private Map<String, Object> labels;

    /*
     * A collection of the assignments of the job.
     * Key is AssignmentId.
     */
    @JsonProperty(value = "assignments", access = JsonProperty.Access.WRITE_ONLY)
    private Map<String, JobAssignmentInternal> assignments;

    /*
     * A set of non-identifying attributes attached to this job
     */
    @JsonProperty(value = "tags")
    private Map<String, Object> tags;

    /*
     * Notes attached to a job, sorted by timestamp
     */
    @JsonProperty(value = "notes")
    private Map<String, String> notes;

    /*
     * A flag indicating this job is ready for being matched with workers.
     * When set to true, job matching will not be started. If set to false, job matching will start automatically
     */
    @JsonProperty(value = "unavailableForMatching")
    private Boolean unavailableForMatching;

    /*
     * If set, job will be scheduled to be enqueued at a given time
     */
    @JsonProperty(value = "scheduledTimeUtc")
    private OffsetDateTime scheduledTimeUtc;

    /** Creates an instance of RouterJobInternal class. */
    public RouterJobInternal() {}

    /**
     * Get the id property: The id of the job.
     *
     * @return the id value.
     */
    public String getId() {
        return this.id;
    }

    /**
     * Get the channelReference property: Reference to an external parent context, eg. call ID.
     *
     * @return the channelReference value.
     */
    public String getChannelReference() {
        return this.channelReference;
    }

    /**
     * Set the channelReference property: Reference to an external parent context, eg. call ID.
     *
     * @param channelReference the channelReference value to set.
     * @return the RouterJobInternal object itself.
     */
    public RouterJobInternal setChannelReference(String channelReference) {
        this.channelReference = channelReference;
        return this;
    }

    /**
     * Get the jobStatus property: The state of the Job.
     *
     * @return the jobStatus value.
     */
    public RouterJobStatus getJobStatus() {
        return this.jobStatus;
    }

    /**
     * Get the enqueueTimeUtc property: The time a job was queued.
     *
     * @return the enqueueTimeUtc value.
     */
    public OffsetDateTime getEnqueueTimeUtc() {
        return this.enqueueTimeUtc;
    }

    /**
     * Get the channelId property: The channel identifier. eg. voice, chat, etc.
     *
     * @return the channelId value.
     */
    public String getChannelId() {
        return this.channelId;
    }

    /**
     * Set the channelId property: The channel identifier. eg. voice, chat, etc.
     *
     * @param channelId the channelId value to set.
     * @return the RouterJobInternal object itself.
     */
    public RouterJobInternal setChannelId(String channelId) {
        this.channelId = channelId;
        return this;
    }

    /**
     * Get the classificationPolicyId property: The Id of the Classification policy used for classifying a job.
     *
     * @return the classificationPolicyId value.
     */
    public String getClassificationPolicyId() {
        return this.classificationPolicyId;
    }

    /**
     * Set the classificationPolicyId property: The Id of the Classification policy used for classifying a job.
     *
     * @param classificationPolicyId the classificationPolicyId value to set.
     * @return the RouterJobInternal object itself.
     */
    public RouterJobInternal setClassificationPolicyId(String classificationPolicyId) {
        this.classificationPolicyId = classificationPolicyId;
        return this;
    }

    /**
     * Get the queueId property: The Id of the Queue that this job is queued to.
     *
     * @return the queueId value.
     */
    public String getQueueId() {
        return this.queueId;
    }

    /**
     * Set the queueId property: The Id of the Queue that this job is queued to.
     *
     * @param queueId the queueId value to set.
     * @return the RouterJobInternal object itself.
     */
    public RouterJobInternal setQueueId(String queueId) {
        this.queueId = queueId;
        return this;
    }

    /**
     * Get the priority property: The priority of this job.
     *
     * @return the priority value.
     */
    public Integer getPriority() {
        return this.priority;
    }

    /**
     * Set the priority property: The priority of this job.
     *
     * @param priority the priority value to set.
     * @return the RouterJobInternal object itself.
     */
    public RouterJobInternal setPriority(Integer priority) {
        this.priority = priority;
        return this;
    }

    /**
     * Get the dispositionCode property: Reason code for cancelled or closed jobs.
     *
     * @return the dispositionCode value.
     */
    public String getDispositionCode() {
        return this.dispositionCode;
    }

    /**
     * Set the dispositionCode property: Reason code for cancelled or closed jobs.
     *
     * @param dispositionCode the dispositionCode value to set.
     * @return the RouterJobInternal object itself.
     */
    public RouterJobInternal setDispositionCode(String dispositionCode) {
        this.dispositionCode = dispositionCode;
        return this;
    }

    /**
     * Get the requestedWorkerSelectors property: A collection of manually specified label selectors, which a worker
     * must satisfy in order to process this job.
     *
     * @return the requestedWorkerSelectors value.
     */
    public List<WorkerSelector> getRequestedWorkerSelectors() {
        return this.requestedWorkerSelectors;
    }

    /**
     * Set the requestedWorkerSelectors property: A collection of manually specified label selectors, which a worker
     * must satisfy in order to process this job.
     *
     * @param requestedWorkerSelectors the requestedWorkerSelectors value to set.
     * @return the RouterJobInternal object itself.
     */
    public RouterJobInternal setRequestedWorkerSelectors(List<WorkerSelector> requestedWorkerSelectors) {
        this.requestedWorkerSelectors = requestedWorkerSelectors;
        return this;
    }

    /**
     * Get the attachedWorkerSelectors property: A collection of label selectors attached by a classification policy,
     * which a worker must satisfy in order to process this job.
     *
     * @return the attachedWorkerSelectors value.
     */
    public List<WorkerSelector> getAttachedWorkerSelectors() {
        return this.attachedWorkerSelectors;
    }

    /**
     * Get the labels property: A set of key/value pairs that are identifying attributes used by the rules engines to
     * make decisions.
     *
     * @return the labels value.
     */
    public Map<String, Object> getLabels() {
        return this.labels;
    }

    /**
     * Set the labels property: A set of key/value pairs that are identifying attributes used by the rules engines to
     * make decisions.
     *
     * @param labels the labels value to set.
     * @return the RouterJobInternal object itself.
     */
    public RouterJobInternal setLabels(Map<String, Object> labels) {
        this.labels = labels;
        return this;
    }

    /**
     * Get the assignments property: A collection of the assignments of the job. Key is AssignmentId.
     *
     * @return the assignments value.
     */
    public Map<String, JobAssignmentInternal> getAssignments() {
        return this.assignments;
    }

    /**
     * Get the tags property: A set of non-identifying attributes attached to this job.
     *
     * @return the tags value.
     */
    public Map<String, Object> getTags() {
        return this.tags;
    }

    /**
     * Set the tags property: A set of non-identifying attributes attached to this job.
     *
     * @param tags the tags value to set.
     * @return the RouterJobInternal object itself.
     */
    public RouterJobInternal setTags(Map<String, Object> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the notes property: Notes attached to a job, sorted by timestamp.
     *
     * @return the notes value.
     */
    public Map<String, String> getNotes() {
        return this.notes;
    }

    /**
     * Set the notes property: Notes attached to a job, sorted by timestamp.
     *
     * @param notes the notes value to set.
     * @return the RouterJobInternal object itself.
     */
    public RouterJobInternal setNotes(Map<String, String> notes) {
        this.notes = notes;
        return this;
    }

    /**
     * Get the unavailableForMatching property: A flag indicating this job is ready for being matched with workers. When
     * set to true, job matching will not be started. If set to false, job matching will start automatically.
     *
     * @return the unavailableForMatching value.
     */
    public Boolean isUnavailableForMatching() {
        return this.unavailableForMatching;
    }

    /**
     * Set the unavailableForMatching property: A flag indicating this job is ready for being matched with workers. When
     * set to true, job matching will not be started. If set to false, job matching will start automatically.
     *
     * @param unavailableForMatching the unavailableForMatching value to set.
     * @return the RouterJobInternal object itself.
     */
    public RouterJobInternal setUnavailableForMatching(Boolean unavailableForMatching) {
        this.unavailableForMatching = unavailableForMatching;
        return this;
    }

    /**
     * Get the scheduledTimeUtc property: If set, job will be scheduled to be enqueued at a given time.
     *
     * @return the scheduledTimeUtc value.
     */
    public OffsetDateTime getScheduledTimeUtc() {
        return this.scheduledTimeUtc;
    }

    /**
     * Set the scheduledTimeUtc property: If set, job will be scheduled to be enqueued at a given time.
     *
     * @param scheduledTimeUtc the scheduledTimeUtc value to set.
     * @return the RouterJobInternal object itself.
     */
    public RouterJobInternal setScheduledTimeUtc(OffsetDateTime scheduledTimeUtc) {
        this.scheduledTimeUtc = scheduledTimeUtc;
        return this;
    }
}
