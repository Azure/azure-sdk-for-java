// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.communication.jobrouter;

import com.azure.communication.jobrouter.implementation.JobRouterRestClientImpl;
import com.azure.communication.jobrouter.models.AcceptJobOfferResult;
import com.azure.communication.jobrouter.models.CancelJobRequest;
import com.azure.communication.jobrouter.models.CloseJobRequest;
import com.azure.communication.jobrouter.models.CompleteJobRequest;
import com.azure.communication.jobrouter.models.DeclineJobOfferRequest;
import com.azure.communication.jobrouter.models.RouterJob;
import com.azure.communication.jobrouter.models.RouterJobItem;
import com.azure.communication.jobrouter.models.RouterJobPositionDetails;
import com.azure.communication.jobrouter.models.RouterJobStatusSelector;
import com.azure.communication.jobrouter.models.RouterQueueStatistics;
import com.azure.communication.jobrouter.models.RouterWorker;
import com.azure.communication.jobrouter.models.RouterWorkerItem;
import com.azure.communication.jobrouter.models.RouterWorkerStateSelector;
import com.azure.communication.jobrouter.models.UnassignJobRequest;
import com.azure.communication.jobrouter.models.UnassignJobResult;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import java.time.OffsetDateTime;

/** Initializes a new instance of the synchronous JobRouterRestClient type. */
@ServiceClient(builder = JobRouterRestClientBuilder.class)
public final class JobRouterRestClient {
    @Generated private final JobRouterRestClientImpl serviceClient;

    /**
     * Initializes an instance of JobRouterRestClient class.
     *
     * @param serviceClient the service client implementation.
     */
    @Generated
    JobRouterRestClient(JobRouterRestClientImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Creates or updates a router job.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     channelReference: String (Optional)
     *     status: String(pendingClassification/queued/assigned/completed/closed/cancelled/classificationFailed/created/pendingSchedule/scheduled/scheduleFailed/waitingForActivation) (Optional)
     *     enqueuedAt: OffsetDateTime (Optional)
     *     channelId: String (Optional)
     *     classificationPolicyId: String (Optional)
     *     queueId: String (Optional)
     *     priority: Integer (Optional)
     *     dispositionCode: String (Optional)
     *     requestedWorkerSelectors (Optional): [
     *          (Optional){
     *             key: String (Required)
     *             labelOperator: String(equal/notEqual/lessThan/lessThanEqual/greaterThan/greaterThanEqual) (Required)
     *             value: Object (Optional)
     *             expiresAfterSeconds: Double (Optional)
     *             expedite: Boolean (Optional)
     *             status: String(active/expired) (Optional)
     *             expiresAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     attachedWorkerSelectors (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     labels (Optional): {
     *         String: Object (Optional)
     *     }
     *     assignments (Optional): {
     *         String (Optional): {
     *             assignmentId: String (Required)
     *             workerId: String (Optional)
     *             assignedAt: OffsetDateTime (Required)
     *             completedAt: OffsetDateTime (Optional)
     *             closedAt: OffsetDateTime (Optional)
     *         }
     *     }
     *     tags (Optional): {
     *         String: Object (Optional)
     *     }
     *     notes (Optional): {
     *         String: String (Optional)
     *     }
     *     scheduledAt: OffsetDateTime (Optional)
     *     matchingMode (Optional): {
     *         modeType: String(queueAndMatchMode/scheduleAndSuspendMode/suspendMode) (Optional)
     *         queueAndMatchMode: Object (Optional)
     *         scheduleAndSuspendMode (Optional): {
     *             scheduleAt: OffsetDateTime (Optional)
     *         }
     *         suspendMode: Object (Optional)
     *     }
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     channelReference: String (Optional)
     *     status: String(pendingClassification/queued/assigned/completed/closed/cancelled/classificationFailed/created/pendingSchedule/scheduled/scheduleFailed/waitingForActivation) (Optional)
     *     enqueuedAt: OffsetDateTime (Optional)
     *     channelId: String (Optional)
     *     classificationPolicyId: String (Optional)
     *     queueId: String (Optional)
     *     priority: Integer (Optional)
     *     dispositionCode: String (Optional)
     *     requestedWorkerSelectors (Optional): [
     *          (Optional){
     *             key: String (Required)
     *             labelOperator: String(equal/notEqual/lessThan/lessThanEqual/greaterThan/greaterThanEqual) (Required)
     *             value: Object (Optional)
     *             expiresAfterSeconds: Double (Optional)
     *             expedite: Boolean (Optional)
     *             status: String(active/expired) (Optional)
     *             expiresAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     attachedWorkerSelectors (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     labels (Optional): {
     *         String: Object (Optional)
     *     }
     *     assignments (Optional): {
     *         String (Optional): {
     *             assignmentId: String (Required)
     *             workerId: String (Optional)
     *             assignedAt: OffsetDateTime (Required)
     *             completedAt: OffsetDateTime (Optional)
     *             closedAt: OffsetDateTime (Optional)
     *         }
     *     }
     *     tags (Optional): {
     *         String: Object (Optional)
     *     }
     *     notes (Optional): {
     *         String: String (Optional)
     *     }
     *     scheduledAt: OffsetDateTime (Optional)
     *     matchingMode (Optional): {
     *         modeType: String(queueAndMatchMode/scheduleAndSuspendMode/suspendMode) (Optional)
     *         queueAndMatchMode: Object (Optional)
     *         scheduleAndSuspendMode (Optional): {
     *             scheduleAt: OffsetDateTime (Optional)
     *         }
     *         suspendMode: Object (Optional)
     *     }
     * }
     * }</pre>
     *
     * @param id Id of the job.
     * @param patch Model of job properties to be created or patched. See also:
     *     https://datatracker.ietf.org/doc/html/rfc7386.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a unit of work to be routed along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> upsertJobWithResponse(String id, BinaryData patch, RequestOptions requestOptions) {
        // Convenience API is not generated, as operation 'upsertJob' is 'application/merge-patch+json'
        return this.serviceClient.upsertJobWithResponse(id, patch, requestOptions);
    }

    /**
     * Retrieves an existing job by Id.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     channelReference: String (Optional)
     *     status: String(pendingClassification/queued/assigned/completed/closed/cancelled/classificationFailed/created/pendingSchedule/scheduled/scheduleFailed/waitingForActivation) (Optional)
     *     enqueuedAt: OffsetDateTime (Optional)
     *     channelId: String (Optional)
     *     classificationPolicyId: String (Optional)
     *     queueId: String (Optional)
     *     priority: Integer (Optional)
     *     dispositionCode: String (Optional)
     *     requestedWorkerSelectors (Optional): [
     *          (Optional){
     *             key: String (Required)
     *             labelOperator: String(equal/notEqual/lessThan/lessThanEqual/greaterThan/greaterThanEqual) (Required)
     *             value: Object (Optional)
     *             expiresAfterSeconds: Double (Optional)
     *             expedite: Boolean (Optional)
     *             status: String(active/expired) (Optional)
     *             expiresAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     attachedWorkerSelectors (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     labels (Optional): {
     *         String: Object (Optional)
     *     }
     *     assignments (Optional): {
     *         String (Optional): {
     *             assignmentId: String (Required)
     *             workerId: String (Optional)
     *             assignedAt: OffsetDateTime (Required)
     *             completedAt: OffsetDateTime (Optional)
     *             closedAt: OffsetDateTime (Optional)
     *         }
     *     }
     *     tags (Optional): {
     *         String: Object (Optional)
     *     }
     *     notes (Optional): {
     *         String: String (Optional)
     *     }
     *     scheduledAt: OffsetDateTime (Optional)
     *     matchingMode (Optional): {
     *         modeType: String(queueAndMatchMode/scheduleAndSuspendMode/suspendMode) (Optional)
     *         queueAndMatchMode: Object (Optional)
     *         scheduleAndSuspendMode (Optional): {
     *             scheduleAt: OffsetDateTime (Optional)
     *         }
     *         suspendMode: Object (Optional)
     *     }
     * }
     * }</pre>
     *
     * @param id Id of the job to retrieve.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a unit of work to be routed along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getJobWithResponse(String id, RequestOptions requestOptions) {
        return this.serviceClient.getJobWithResponse(id, requestOptions);
    }

    /**
     * Deletes a job and all of its traces.
     *
     * @param id Id of the job.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteJobWithResponse(String id, RequestOptions requestOptions) {
        return this.serviceClient.deleteJobWithResponse(id, requestOptions);
    }

    /**
     * Reclassify a job.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     * }
     * }</pre>
     *
     * @param id Id of the job.
     * @param reclassifyJobRequest Request object for reclassifying a job.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> reclassifyJobWithResponse(
            String id, BinaryData reclassifyJobRequest, RequestOptions requestOptions) {
        return this.serviceClient.reclassifyJobWithResponse(id, reclassifyJobRequest, requestOptions);
    }

    /**
     * Submits request to cancel an existing job by Id while supplying free-form cancellation reason.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     note: String (Optional)
     *     dispositionCode: String (Optional)
     * }
     * }</pre>
     *
     * @param id Id of the job.
     * @param cancelJobRequest Request model for cancelling job.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> cancelJobWithResponse(String id, BinaryData cancelJobRequest, RequestOptions requestOptions) {
        return this.serviceClient.cancelJobWithResponse(id, cancelJobRequest, requestOptions);
    }

    /**
     * Completes an assigned job.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     assignmentId: String (Required)
     *     note: String (Optional)
     * }
     * }</pre>
     *
     * @param id Id of the job.
     * @param completeJobRequest Request model for completing job.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> completeJobWithResponse(
            String id, BinaryData completeJobRequest, RequestOptions requestOptions) {
        return this.serviceClient.completeJobWithResponse(id, completeJobRequest, requestOptions);
    }

    /**
     * Closes a completed job.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     assignmentId: String (Required)
     *     dispositionCode: String (Optional)
     *     closeAt: OffsetDateTime (Optional)
     *     note: String (Optional)
     * }
     * }</pre>
     *
     * @param id Id of the job.
     * @param closeJobRequest Request model for closing job.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> closeJobWithResponse(String id, BinaryData closeJobRequest, RequestOptions requestOptions) {
        return this.serviceClient.closeJobWithResponse(id, closeJobRequest, requestOptions);
    }

    /**
     * Retrieves list of jobs based on filter parameters.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     job (Optional): {
     *         id: String (Optional)
     *         channelReference: String (Optional)
     *         status: String(pendingClassification/queued/assigned/completed/closed/cancelled/classificationFailed/created/pendingSchedule/scheduled/scheduleFailed/waitingForActivation) (Optional)
     *         enqueuedAt: OffsetDateTime (Optional)
     *         channelId: String (Optional)
     *         classificationPolicyId: String (Optional)
     *         queueId: String (Optional)
     *         priority: Integer (Optional)
     *         dispositionCode: String (Optional)
     *         requestedWorkerSelectors (Optional): [
     *              (Optional){
     *                 key: String (Required)
     *                 labelOperator: String(equal/notEqual/lessThan/lessThanEqual/greaterThan/greaterThanEqual) (Required)
     *                 value: Object (Optional)
     *                 expiresAfterSeconds: Double (Optional)
     *                 expedite: Boolean (Optional)
     *                 status: String(active/expired) (Optional)
     *                 expiresAt: OffsetDateTime (Optional)
     *             }
     *         ]
     *         attachedWorkerSelectors (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         labels (Optional): {
     *             String: Object (Optional)
     *         }
     *         assignments (Optional): {
     *             String (Optional): {
     *                 assignmentId: String (Required)
     *                 workerId: String (Optional)
     *                 assignedAt: OffsetDateTime (Required)
     *                 completedAt: OffsetDateTime (Optional)
     *                 closedAt: OffsetDateTime (Optional)
     *             }
     *         }
     *         tags (Optional): {
     *             String: Object (Optional)
     *         }
     *         notes (Optional): {
     *             String: String (Optional)
     *         }
     *         scheduledAt: OffsetDateTime (Optional)
     *         matchingMode (Optional): {
     *             modeType: String(queueAndMatchMode/scheduleAndSuspendMode/suspendMode) (Optional)
     *             queueAndMatchMode: Object (Optional)
     *             scheduleAndSuspendMode (Optional): {
     *                 scheduleAt: OffsetDateTime (Optional)
     *             }
     *             suspendMode: Object (Optional)
     *         }
     *     }
     *     etag: String (Optional)
     * }
     * }</pre>
     *
     * @param status If specified, filter jobs by status. Allowed values: "all", "pendingClassification", "queued",
     *     "assigned", "completed", "closed", "cancelled", "classificationFailed", "created", "pendingSchedule",
     *     "scheduled", "scheduleFailed", "waitingForActivation", "active".
     * @param queueId If specified, filter jobs by queue.
     * @param channelId If specified, filter jobs by channel.
     * @param classificationPolicyId If specified, filter jobs by classificationPolicy.
     * @param scheduledBefore If specified, filter on jobs that was scheduled before or at given timestamp. Range:
     *     (-Inf, scheduledBefore].
     * @param scheduledAfter If specified, filter on jobs that was scheduled at or after given value. Range:
     *     [scheduledAfter, +Inf).
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a paged collection of jobs as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listJobs(
            String status,
            String queueId,
            String channelId,
            String classificationPolicyId,
            OffsetDateTime scheduledBefore,
            OffsetDateTime scheduledAfter,
            RequestOptions requestOptions) {
        return this.serviceClient.listJobs(
                status, queueId, channelId, classificationPolicyId, scheduledBefore, scheduledAfter, requestOptions);
    }

    /**
     * Gets a job's position details.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     jobId: String (Required)
     *     position: int (Required)
     *     queueId: String (Required)
     *     queueLength: int (Required)
     *     estimatedWaitTimeMinutes: double (Required)
     * }
     * }</pre>
     *
     * @param id Id of the job.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a job's position details along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getQueuePositionWithResponse(String id, RequestOptions requestOptions) {
        return this.serviceClient.getQueuePositionWithResponse(id, requestOptions);
    }

    /**
     * Un-assign a job.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     suspendMatching: Boolean (Optional)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     jobId: String (Required)
     *     unassignmentCount: int (Required)
     * }
     * }</pre>
     *
     * @param id Id of the job to un-assign.
     * @param assignmentId Id of the assignment to un-assign.
     * @param unassignJobRequest Request body for unassign route.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response payload after a job has been successfully unassigned along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> unassignJobWithResponse(
            String id, String assignmentId, BinaryData unassignJobRequest, RequestOptions requestOptions) {
        return this.serviceClient.unassignJobWithResponse(id, assignmentId, unassignJobRequest, requestOptions);
    }

    /**
     * Accepts an offer to work on a job and returns a 409/Conflict if another agent accepted the job already.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     assignmentId: String (Required)
     *     jobId: String (Required)
     *     workerId: String (Required)
     * }
     * }</pre>
     *
     * @param workerId Id of the worker.
     * @param offerId Id of the offer.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response containing Id's for the worker, job, and assignment from an accepted offer along with {@link
     *     Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> acceptJobWithResponse(String workerId, String offerId, RequestOptions requestOptions) {
        return this.serviceClient.acceptJobWithResponse(workerId, offerId, requestOptions);
    }

    /**
     * Declines an offer to work on a job.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     retryOfferAt: OffsetDateTime (Optional)
     * }
     * }</pre>
     *
     * @param workerId Id of the worker.
     * @param offerId Id of the offer.
     * @param declineJobOfferRequest Request model for declining offer.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> declineJobWithResponse(
            String workerId, String offerId, BinaryData declineJobOfferRequest, RequestOptions requestOptions) {
        return this.serviceClient.declineJobWithResponse(workerId, offerId, declineJobOfferRequest, requestOptions);
    }

    /**
     * Retrieves a queue's statistics.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     queueId: String (Required)
     *     length: int (Required)
     *     estimatedWaitTimeMinutes (Optional): {
     *         String: double (Optional)
     *     }
     *     longestJobWaitTimeMinutes: Double (Optional)
     * }
     * }</pre>
     *
     * @param id Id of the queue to retrieve statistics.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return statistics for the queue along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getQueueStatisticsWithResponse(String id, RequestOptions requestOptions) {
        return this.serviceClient.getQueueStatisticsWithResponse(id, requestOptions);
    }

    /**
     * Creates or updates a worker.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     state: String(active/draining/inactive) (Optional)
     *     queueAssignments (Optional): {
     *         String: Object (Optional)
     *     }
     *     totalCapacity: Integer (Optional)
     *     labels (Optional): {
     *         String: Object (Optional)
     *     }
     *     tags (Optional): {
     *         String: Object (Optional)
     *     }
     *     channelConfigurations (Optional): {
     *         String (Optional): {
     *             capacityCostPerJob: int (Required)
     *             maxNumberOfJobs: Integer (Optional)
     *         }
     *     }
     *     offers (Optional): [
     *          (Optional){
     *             offerId: String (Required)
     *             jobId: String (Required)
     *             capacityCost: int (Required)
     *             offeredAt: OffsetDateTime (Optional)
     *             expiresAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     assignedJobs (Optional): [
     *          (Optional){
     *             assignmentId: String (Required)
     *             jobId: String (Required)
     *             capacityCost: int (Required)
     *             assignedAt: OffsetDateTime (Required)
     *         }
     *     ]
     *     loadRatio: Double (Optional)
     *     availableForOffers: Boolean (Optional)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     state: String(active/draining/inactive) (Optional)
     *     queueAssignments (Optional): {
     *         String: Object (Optional)
     *     }
     *     totalCapacity: Integer (Optional)
     *     labels (Optional): {
     *         String: Object (Optional)
     *     }
     *     tags (Optional): {
     *         String: Object (Optional)
     *     }
     *     channelConfigurations (Optional): {
     *         String (Optional): {
     *             capacityCostPerJob: int (Required)
     *             maxNumberOfJobs: Integer (Optional)
     *         }
     *     }
     *     offers (Optional): [
     *          (Optional){
     *             offerId: String (Required)
     *             jobId: String (Required)
     *             capacityCost: int (Required)
     *             offeredAt: OffsetDateTime (Optional)
     *             expiresAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     assignedJobs (Optional): [
     *          (Optional){
     *             assignmentId: String (Required)
     *             jobId: String (Required)
     *             capacityCost: int (Required)
     *             assignedAt: OffsetDateTime (Required)
     *         }
     *     ]
     *     loadRatio: Double (Optional)
     *     availableForOffers: Boolean (Optional)
     * }
     * }</pre>
     *
     * @param workerId Id of the worker.
     * @param patch Model of worker properties to be created or patched. See also:
     *     https://datatracker.ietf.org/doc/html/rfc7386.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an entity for jobs to be routed to along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> upsertWorkerWithResponse(
            String workerId, BinaryData patch, RequestOptions requestOptions) {
        // Convenience API is not generated, as operation 'upsertWorker' is 'application/merge-patch+json'
        return this.serviceClient.upsertWorkerWithResponse(workerId, patch, requestOptions);
    }

    /**
     * Retrieves an existing worker by Id.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     state: String(active/draining/inactive) (Optional)
     *     queueAssignments (Optional): {
     *         String: Object (Optional)
     *     }
     *     totalCapacity: Integer (Optional)
     *     labels (Optional): {
     *         String: Object (Optional)
     *     }
     *     tags (Optional): {
     *         String: Object (Optional)
     *     }
     *     channelConfigurations (Optional): {
     *         String (Optional): {
     *             capacityCostPerJob: int (Required)
     *             maxNumberOfJobs: Integer (Optional)
     *         }
     *     }
     *     offers (Optional): [
     *          (Optional){
     *             offerId: String (Required)
     *             jobId: String (Required)
     *             capacityCost: int (Required)
     *             offeredAt: OffsetDateTime (Optional)
     *             expiresAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     assignedJobs (Optional): [
     *          (Optional){
     *             assignmentId: String (Required)
     *             jobId: String (Required)
     *             capacityCost: int (Required)
     *             assignedAt: OffsetDateTime (Required)
     *         }
     *     ]
     *     loadRatio: Double (Optional)
     *     availableForOffers: Boolean (Optional)
     * }
     * }</pre>
     *
     * @param workerId Id of the worker to retrieve.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an entity for jobs to be routed to along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getWorkerWithResponse(String workerId, RequestOptions requestOptions) {
        return this.serviceClient.getWorkerWithResponse(workerId, requestOptions);
    }

    /**
     * Deletes a worker and all of its traces.
     *
     * @param workerId Id of the worker to delete.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWorkerWithResponse(String workerId, RequestOptions requestOptions) {
        return this.serviceClient.deleteWorkerWithResponse(workerId, requestOptions);
    }

    /**
     * Retrieves existing workers.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     worker (Optional): {
     *         id: String (Optional)
     *         state: String(active/draining/inactive) (Optional)
     *         queueAssignments (Optional): {
     *             String: Object (Optional)
     *         }
     *         totalCapacity: Integer (Optional)
     *         labels (Optional): {
     *             String: Object (Optional)
     *         }
     *         tags (Optional): {
     *             String: Object (Optional)
     *         }
     *         channelConfigurations (Optional): {
     *             String (Optional): {
     *                 capacityCostPerJob: int (Required)
     *                 maxNumberOfJobs: Integer (Optional)
     *             }
     *         }
     *         offers (Optional): [
     *              (Optional){
     *                 offerId: String (Required)
     *                 jobId: String (Required)
     *                 capacityCost: int (Required)
     *                 offeredAt: OffsetDateTime (Optional)
     *                 expiresAt: OffsetDateTime (Optional)
     *             }
     *         ]
     *         assignedJobs (Optional): [
     *              (Optional){
     *                 assignmentId: String (Required)
     *                 jobId: String (Required)
     *                 capacityCost: int (Required)
     *                 assignedAt: OffsetDateTime (Required)
     *             }
     *         ]
     *         loadRatio: Double (Optional)
     *         availableForOffers: Boolean (Optional)
     *     }
     *     etag: String (Optional)
     * }
     * }</pre>
     *
     * @param state If specified, select workers by worker state. Allowed values: "active", "draining", "inactive",
     *     "all".
     * @param channelId If specified, select workers who have a channel configuration with this channel.
     * @param queueId If specified, select workers who are assigned to this queue.
     * @param hasCapacity If set to true, select only workers who have capacity for the channel specified by `channelId`
     *     or for any channel if `channelId` not specified. If set to false, then will return all workers including
     *     workers without any capacity for jobs. Defaults to false.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a paged collection of workers as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listWorkers(
            String state, String channelId, String queueId, boolean hasCapacity, RequestOptions requestOptions) {
        return this.serviceClient.listWorkers(state, channelId, queueId, hasCapacity, requestOptions);
    }

    /**
     * Retrieves an existing job by Id.
     *
     * @param id Id of the job to retrieve.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a unit of work to be routed.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RouterJob getJob(String id) {
        // Generated convenience method for getJobWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getJobWithResponse(id, requestOptions).getValue().toObject(RouterJob.class);
    }

    /**
     * Deletes a job and all of its traces.
     *
     * @param id Id of the job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteJob(String id) {
        // Generated convenience method for deleteJobWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deleteJobWithResponse(id, requestOptions).getValue();
    }

    /**
     * Reclassify a job.
     *
     * @param id Id of the job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void reclassifyJob(String id) {
        // Generated convenience method for reclassifyJobWithResponse
        RequestOptions requestOptions = new RequestOptions();
        reclassifyJobWithResponse(id, reclassifyJobRequest, requestOptions).getValue();
    }

    /**
     * Submits request to cancel an existing job by Id while supplying free-form cancellation reason.
     *
     * @param id Id of the job.
     * @param cancelJobRequest Request model for cancelling job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void cancelJob(String id, CancelJobRequest cancelJobRequest) {
        // Generated convenience method for cancelJobWithResponse
        RequestOptions requestOptions = new RequestOptions();
        cancelJobWithResponse(id, BinaryData.fromObject(cancelJobRequest), requestOptions).getValue();
    }

    /**
     * Completes an assigned job.
     *
     * @param id Id of the job.
     * @param completeJobRequest Request model for completing job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void completeJob(String id, CompleteJobRequest completeJobRequest) {
        // Generated convenience method for completeJobWithResponse
        RequestOptions requestOptions = new RequestOptions();
        completeJobWithResponse(id, BinaryData.fromObject(completeJobRequest), requestOptions).getValue();
    }

    /**
     * Closes a completed job.
     *
     * @param id Id of the job.
     * @param closeJobRequest Request model for closing job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void closeJob(String id, CloseJobRequest closeJobRequest) {
        // Generated convenience method for closeJobWithResponse
        RequestOptions requestOptions = new RequestOptions();
        closeJobWithResponse(id, BinaryData.fromObject(closeJobRequest), requestOptions).getValue();
    }

    /**
     * Retrieves list of jobs based on filter parameters.
     *
     * @param status If specified, filter jobs by status.
     * @param queueId If specified, filter jobs by queue.
     * @param channelId If specified, filter jobs by channel.
     * @param classificationPolicyId If specified, filter jobs by classificationPolicy.
     * @param scheduledBefore If specified, filter on jobs that was scheduled before or at given timestamp. Range:
     *     (-Inf, scheduledBefore].
     * @param scheduledAfter If specified, filter on jobs that was scheduled at or after given value. Range:
     *     [scheduledAfter, +Inf).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a paged collection of jobs as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<RouterJobItem> listJobs(
            RouterJobStatusSelector status,
            String queueId,
            String channelId,
            String classificationPolicyId,
            OffsetDateTime scheduledBefore,
            OffsetDateTime scheduledAfter) {
        // Generated convenience method for listJobs
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient
                .listJobs(
                        status.toString(),
                        queueId,
                        channelId,
                        classificationPolicyId,
                        scheduledBefore,
                        scheduledAfter,
                        requestOptions)
                .mapPage(bodyItemValue -> bodyItemValue.toObject(RouterJobItem.class));
    }

    /**
     * Gets a job's position details.
     *
     * @param id Id of the job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a job's position details.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RouterJobPositionDetails getQueuePosition(String id) {
        // Generated convenience method for getQueuePositionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getQueuePositionWithResponse(id, requestOptions).getValue().toObject(RouterJobPositionDetails.class);
    }

    /**
     * Un-assign a job.
     *
     * @param id Id of the job to un-assign.
     * @param assignmentId Id of the assignment to un-assign.
     * @param unassignJobRequest Request body for unassign route.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response payload after a job has been successfully unassigned.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public UnassignJobResult unassignJob(String id, String assignmentId, UnassignJobRequest unassignJobRequest) {
        // Generated convenience method for unassignJobWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return unassignJobWithResponse(id, assignmentId, BinaryData.fromObject(unassignJobRequest), requestOptions)
                .getValue()
                .toObject(UnassignJobResult.class);
    }

    /**
     * Accepts an offer to work on a job and returns a 409/Conflict if another agent accepted the job already.
     *
     * @param workerId Id of the worker.
     * @param offerId Id of the offer.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response containing Id's for the worker, job, and assignment from an accepted offer.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AcceptJobOfferResult acceptJob(String workerId, String offerId) {
        // Generated convenience method for acceptJobWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return acceptJobWithResponse(workerId, offerId, requestOptions).getValue().toObject(AcceptJobOfferResult.class);
    }

    /**
     * Declines an offer to work on a job.
     *
     * @param workerId Id of the worker.
     * @param offerId Id of the offer.
     * @param declineJobOfferRequest Request model for declining offer.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void declineJob(String workerId, String offerId, DeclineJobOfferRequest declineJobOfferRequest) {
        // Generated convenience method for declineJobWithResponse
        RequestOptions requestOptions = new RequestOptions();
        declineJobWithResponse(workerId, offerId, BinaryData.fromObject(declineJobOfferRequest), requestOptions)
                .getValue();
    }

    /**
     * Retrieves a queue's statistics.
     *
     * @param id Id of the queue to retrieve statistics.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return statistics for the queue.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RouterQueueStatistics getQueueStatistics(String id) {
        // Generated convenience method for getQueueStatisticsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getQueueStatisticsWithResponse(id, requestOptions).getValue().toObject(RouterQueueStatistics.class);
    }

    /**
     * Retrieves an existing worker by Id.
     *
     * @param workerId Id of the worker to retrieve.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an entity for jobs to be routed to.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RouterWorker getWorker(String workerId) {
        // Generated convenience method for getWorkerWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getWorkerWithResponse(workerId, requestOptions).getValue().toObject(RouterWorker.class);
    }

    /**
     * Deletes a worker and all of its traces.
     *
     * @param workerId Id of the worker to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteWorker(String workerId) {
        // Generated convenience method for deleteWorkerWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deleteWorkerWithResponse(workerId, requestOptions).getValue();
    }

    /**
     * Retrieves existing workers.
     *
     * @param state If specified, select workers by worker state.
     * @param channelId If specified, select workers who have a channel configuration with this channel.
     * @param queueId If specified, select workers who are assigned to this queue.
     * @param hasCapacity If set to true, select only workers who have capacity for the channel specified by `channelId`
     *     or for any channel if `channelId` not specified. If set to false, then will return all workers including
     *     workers without any capacity for jobs. Defaults to false.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a paged collection of workers as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<RouterWorkerItem> listWorkers(
            RouterWorkerStateSelector state, String channelId, String queueId, boolean hasCapacity) {
        // Generated convenience method for listWorkers
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient
                .listWorkers(state.toString(), channelId, queueId, hasCapacity, requestOptions)
                .mapPage(bodyItemValue -> bodyItemValue.toObject(RouterWorkerItem.class));
    }
}
