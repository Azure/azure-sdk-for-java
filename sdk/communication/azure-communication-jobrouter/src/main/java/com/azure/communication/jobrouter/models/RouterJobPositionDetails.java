// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.communication.jobrouter.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Position and estimated wait time for a job.
 */
@Immutable
public final class RouterJobPositionDetails implements JsonSerializable<RouterJobPositionDetails> {

    /*
     * Id of the job these details are about.
     */
    @Generated
    private final String jobId;

    /*
     * Position of the job in question within that queue.
     */
    @Generated
    private final int position;

    /*
     * Id of the queue this job is enqueued in.
     */
    @Generated
    private final String queueId;

    /*
     * Length of the queue: total number of enqueued jobs.
     */
    @Generated
    private final int queueLength;

    /*
     * Estimated wait time of the job rounded up to the nearest minute.
     */
    @Generated
    private final double estimatedWaitTimeMinutes;

    /**
     * Creates an instance of RouterJobPositionDetails class.
     *
     * @param jobId the jobId value to set.
     * @param position the position value to set.
     * @param queueId the queueId value to set.
     * @param queueLength the queueLength value to set.
     * @param estimatedWaitTimeMinutes the estimatedWaitTimeMinutes value to set.
     */
    @Generated
    private RouterJobPositionDetails(String jobId, int position, String queueId, int queueLength,
        double estimatedWaitTimeMinutes) {
        this.jobId = jobId;
        this.position = position;
        this.queueId = queueId;
        this.queueLength = queueLength;
        this.estimatedWaitTimeMinutes = estimatedWaitTimeMinutes;
    }

    /**
     * Get the jobId property: Id of the job these details are about.
     *
     * @return the jobId value.
     */
    @Generated
    public String getJobId() {
        return this.jobId;
    }

    /**
     * Get the position property: Position of the job in question within that queue.
     *
     * @return the position value.
     */
    @Generated
    public int getPosition() {
        return this.position;
    }

    /**
     * Get the queueId property: Id of the queue this job is enqueued in.
     *
     * @return the queueId value.
     */
    @Generated
    public String getQueueId() {
        return this.queueId;
    }

    /**
     * Get the queueLength property: Length of the queue: total number of enqueued jobs.
     *
     * @return the queueLength value.
     */
    @Generated
    public int getQueueLength() {
        return this.queueLength;
    }

    /**
     * Get the estimatedWaitTimeMinutes property: Estimated wait time of the job rounded up to the nearest minute.
     *
     * @return the estimatedWaitTimeMinutes value.
     */
    @Generated
    public double getEstimatedWaitTimeMinutes() {
        return this.estimatedWaitTimeMinutes;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("jobId", this.jobId);
        jsonWriter.writeIntField("position", this.position);
        jsonWriter.writeStringField("queueId", this.queueId);
        jsonWriter.writeIntField("queueLength", this.queueLength);
        jsonWriter.writeDoubleField("estimatedWaitTimeMinutes", this.estimatedWaitTimeMinutes);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RouterJobPositionDetails from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of RouterJobPositionDetails if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RouterJobPositionDetails.
     */
    @Generated
    public static RouterJobPositionDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String jobId = null;
            int position = 0;
            String queueId = null;
            int queueLength = 0;
            double estimatedWaitTimeMinutes = 0.0;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("jobId".equals(fieldName)) {
                    jobId = reader.getString();
                } else if ("position".equals(fieldName)) {
                    position = reader.getInt();
                } else if ("queueId".equals(fieldName)) {
                    queueId = reader.getString();
                } else if ("queueLength".equals(fieldName)) {
                    queueLength = reader.getInt();
                } else if ("estimatedWaitTimeMinutes".equals(fieldName)) {
                    estimatedWaitTimeMinutes = reader.getDouble();
                } else {
                    reader.skipChildren();
                }
            }
            return new RouterJobPositionDetails(jobId, position, queueId, queueLength, estimatedWaitTimeMinutes);
        });
    }
}
