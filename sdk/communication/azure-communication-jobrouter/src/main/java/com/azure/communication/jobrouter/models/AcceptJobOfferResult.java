// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.communication.jobrouter.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Response containing ids for the worker, job, and assignment from an accepted offer.
 */
@Immutable
public final class AcceptJobOfferResult implements JsonSerializable<AcceptJobOfferResult> {

    /*
     * Id of job assignment that assigns a worker that has accepted an offer to a job.
     */
    @Generated
    private final String assignmentId;

    /*
     * Id of the job assigned.
     */
    @Generated
    private final String jobId;

    /*
     * Id of the worker that has been assigned this job.
     */
    @Generated
    private final String workerId;

    /**
     * Creates an instance of AcceptJobOfferResult class.
     *
     * @param assignmentId the assignmentId value to set.
     * @param jobId the jobId value to set.
     * @param workerId the workerId value to set.
     */
    @Generated
    private AcceptJobOfferResult(String assignmentId, String jobId, String workerId) {
        this.assignmentId = assignmentId;
        this.jobId = jobId;
        this.workerId = workerId;
    }

    /**
     * Get the assignmentId property: Id of job assignment that assigns a worker that has accepted an offer to a job.
     *
     * @return the assignmentId value.
     */
    @Generated
    public String getAssignmentId() {
        return this.assignmentId;
    }

    /**
     * Get the jobId property: Id of the job assigned.
     *
     * @return the jobId value.
     */
    @Generated
    public String getJobId() {
        return this.jobId;
    }

    /**
     * Get the workerId property: Id of the worker that has been assigned this job.
     *
     * @return the workerId value.
     */
    @Generated
    public String getWorkerId() {
        return this.workerId;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("assignmentId", this.assignmentId);
        jsonWriter.writeStringField("jobId", this.jobId);
        jsonWriter.writeStringField("workerId", this.workerId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AcceptJobOfferResult from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of AcceptJobOfferResult if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AcceptJobOfferResult.
     */
    @Generated
    public static AcceptJobOfferResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String assignmentId = null;
            String jobId = null;
            String workerId = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("assignmentId".equals(fieldName)) {
                    assignmentId = reader.getString();
                } else if ("jobId".equals(fieldName)) {
                    jobId = reader.getString();
                } else if ("workerId".equals(fieldName)) {
                    workerId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return new AcceptJobOfferResult(assignmentId, jobId, workerId);
        });
    }
}
