// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.communication.jobrouter.implementation.models;

import com.azure.communication.jobrouter.implementation.JsonMergePatchHelper;
import com.azure.communication.jobrouter.models.QueueSelectorAttachmentKind;
import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * Describes multiple sets of queue selectors, of which one will be selected and attached according to a weighting.
 */
@Fluent
public final class WeightedAllocationQueueSelectorAttachmentInternal extends QueueSelectorAttachmentInternal {

    /*
     * A collection of percentage based weighted allocations.
     */
    @Generated
    private List<QueueWeightedAllocationInternal> allocations;

    /**
     * Get the allocations property: A collection of percentage based weighted allocations.
     *
     * @return the allocations value.
     */
    @Generated
    public List<QueueWeightedAllocationInternal> getAllocations() {
        return this.allocations;
    }

    /*
     * The type discriminator describing a sub-type of QueueSelectorAttachment.
     */
    @Generated
    private QueueSelectorAttachmentKind kind = QueueSelectorAttachmentKind.WEIGHTED_ALLOCATION;

    /**
     * Get the kind property: The type discriminator describing a sub-type of QueueSelectorAttachment.
     *
     * @return the kind value.
     */
    @Generated
    @Override
    public QueueSelectorAttachmentKind getKind() {
        return this.kind;
    }

    @Generated
    private boolean jsonMergePatch;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    @Generated
    void serializeAsJsonMergePatch(boolean jsonMergePatch) {
        this.jsonMergePatch = jsonMergePatch;
    }

    static {
        JsonMergePatchHelper
            .setWeightedAllocationQueueSelectorAttachmentInternalAccessor((model, jsonMergePatchEnabled) -> {
                model.serializeAsJsonMergePatch(jsonMergePatchEnabled);
                return model;
            });
    }

    /**
     * Creates an instance of WeightedAllocationQueueSelectorAttachmentInternal class.
     */
    @Generated
    public WeightedAllocationQueueSelectorAttachmentInternal() {
        this.updatedProperties.add("kind");
    }

    /**
     * Set the allocations property: A collection of percentage based weighted allocations.
     * <p>Required when create the resource.</p>
     *
     * @param allocations the allocations value to set.
     * @return the WeightedAllocationQueueSelectorAttachmentInternal object itself.
     */
    @Generated
    public WeightedAllocationQueueSelectorAttachmentInternal
        setAllocations(List<QueueWeightedAllocationInternal> allocations) {
        this.allocations = allocations;
        this.updatedProperties.add("allocations");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (jsonMergePatch) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
            jsonWriter.writeArrayField("allocations", this.allocations, (writer, element) -> writer.writeJson(element));
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (updatedProperties.contains("kind")) {
            if (this.kind == null) {
                jsonWriter.writeNullField("kind");
            } else {
                jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
            }
        }
        if (updatedProperties.contains("allocations")) {
            if (this.allocations == null) {
                jsonWriter.writeNullField("allocations");
            } else {
                jsonWriter.writeArrayField("allocations", this.allocations,
                    (writer, element) -> writer.writeJson(element));
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WeightedAllocationQueueSelectorAttachmentInternal from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of WeightedAllocationQueueSelectorAttachmentInternal if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the WeightedAllocationQueueSelectorAttachmentInternal.
     */
    @Generated
    public static WeightedAllocationQueueSelectorAttachmentInternal fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WeightedAllocationQueueSelectorAttachmentInternal deserializedWeightedAllocationQueueSelectorAttachmentInternal
                = new WeightedAllocationQueueSelectorAttachmentInternal();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("kind".equals(fieldName)) {
                    deserializedWeightedAllocationQueueSelectorAttachmentInternal.kind
                        = QueueSelectorAttachmentKind.fromString(reader.getString());
                } else if ("allocations".equals(fieldName)) {
                    List<QueueWeightedAllocationInternal> allocations
                        = reader.readArray(reader1 -> QueueWeightedAllocationInternal.fromJson(reader1));
                    deserializedWeightedAllocationQueueSelectorAttachmentInternal.allocations = allocations;
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedWeightedAllocationQueueSelectorAttachmentInternal;
        });
    }
}
