// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.communication.jobrouter.implementation.models;

import com.azure.communication.jobrouter.implementation.JsonMergePatchHelper;
import com.azure.communication.jobrouter.models.WorkerSelectorAttachmentKind;
import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.Set;

/**
 * Describes a worker selector that will be attached to a job.
 */
@Fluent
public final class StaticWorkerSelectorAttachmentInternal extends WorkerSelectorAttachmentInternal {

    /*
     * The worker selector to attach.
     */
    @Generated
    private RouterWorkerSelectorInternal workerSelector;

    /**
     * Get the workerSelector property: The worker selector to attach.
     *
     * @return the workerSelector value.
     */
    @Generated
    public RouterWorkerSelectorInternal getWorkerSelector() {
        return this.workerSelector;
    }

    @Generated
    private boolean jsonMergePatch;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    @Generated
    void serializeAsJsonMergePatch(boolean jsonMergePatch) {
        this.jsonMergePatch = jsonMergePatch;
    }

    static {
        JsonMergePatchHelper.setStaticWorkerSelectorAttachmentInternalAccessor((model, jsonMergePatchEnabled) -> {
            model.serializeAsJsonMergePatch(jsonMergePatchEnabled);
            return model;
        });
    }

    /**
     * Creates an instance of StaticWorkerSelectorAttachmentInternal class.
     */
    @Generated
    public StaticWorkerSelectorAttachmentInternal() {
        setKind(WorkerSelectorAttachmentKind.STATIC);
    }

    /**
     * Set the workerSelector property: The worker selector to attach.
     * <p>Required when create the resource.</p>
     *
     * @param workerSelector the workerSelector value to set.
     * @return the StaticWorkerSelectorAttachmentInternal object itself.
     */
    @Generated
    public StaticWorkerSelectorAttachmentInternal setWorkerSelector(RouterWorkerSelectorInternal workerSelector) {
        this.workerSelector = workerSelector;
        this.updatedProperties.add("workerSelector");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (jsonMergePatch) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeStringField("kind", getKind() == null ? null : getKind().toString());
            jsonWriter.writeJsonField("workerSelector", this.workerSelector);
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (updatedProperties.contains("kind")) {
            if (getKind() == null) {
                jsonWriter.writeNullField("kind");
            } else {
                jsonWriter.writeStringField("kind", getKind() == null ? null : getKind().toString());
            }
        }
        if (updatedProperties.contains("workerSelector")) {
            if (this.workerSelector == null) {
                jsonWriter.writeNullField("workerSelector");
            } else {
                this.workerSelector.serializeAsJsonMergePatch(true);
                jsonWriter.writeJsonField("workerSelector", this.workerSelector);
                this.workerSelector.serializeAsJsonMergePatch(false);
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StaticWorkerSelectorAttachmentInternal from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of StaticWorkerSelectorAttachmentInternal if the JsonReader was pointing to an instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the StaticWorkerSelectorAttachmentInternal.
     */
    @Generated
    public static StaticWorkerSelectorAttachmentInternal fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StaticWorkerSelectorAttachmentInternal deserializedStaticWorkerSelectorAttachmentInternal
                = new StaticWorkerSelectorAttachmentInternal();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("kind".equals(fieldName)) {
                    deserializedStaticWorkerSelectorAttachmentInternal
                        .setKind(WorkerSelectorAttachmentKind.fromString(reader.getString()));
                } else if ("workerSelector".equals(fieldName)) {
                    deserializedStaticWorkerSelectorAttachmentInternal.workerSelector
                        = RouterWorkerSelectorInternal.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedStaticWorkerSelectorAttachmentInternal;
        });
    }
}
