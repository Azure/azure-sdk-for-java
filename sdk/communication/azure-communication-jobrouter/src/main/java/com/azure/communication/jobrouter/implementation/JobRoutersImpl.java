// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.communication.jobrouter.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in JobRouters. */
public final class JobRoutersImpl {
    /** The proxy service used to perform REST calls. */
    private final JobRoutersService service;

    /** The service client containing this operation class. */
    private final JobRouterClientImpl client;

    /**
     * Initializes an instance of JobRoutersImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    JobRoutersImpl(JobRouterClientImpl client) {
        this.service =
                RestProxy.create(JobRoutersService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AzureCommunicationJobRouterServiceJobRouters to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "AzureCommunicationJo")
    public interface JobRoutersService {
        @Patch("/routing/jobs/{id}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> upsertJob(
                @HostParam("endpoint") String endpoint,
                @PathParam("id") String id,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/merge-patch+json") BinaryData patch,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Patch("/routing/jobs/{id}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> upsertJobSync(
                @HostParam("endpoint") String endpoint,
                @PathParam("id") String id,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/merge-patch+json") BinaryData patch,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/routing/jobs/{id}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getJob(
                @HostParam("endpoint") String endpoint,
                @PathParam("id") String id,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/routing/jobs/{id}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getJobSync(
                @HostParam("endpoint") String endpoint,
                @PathParam("id") String id,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Delete("/routing/jobs/{id}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteJob(
                @HostParam("endpoint") String endpoint,
                @PathParam("id") String id,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Delete("/routing/jobs/{id}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> deleteJobSync(
                @HostParam("endpoint") String endpoint,
                @PathParam("id") String id,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Post("/routing/jobs/{id}:reclassify")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> reclassifyJobAction(
                @HostParam("endpoint") String endpoint,
                @PathParam("id") String id,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Post("/routing/jobs/{id}:reclassify")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> reclassifyJobActionSync(
                @HostParam("endpoint") String endpoint,
                @PathParam("id") String id,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Post("/routing/jobs/{id}:cancel")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> cancelJobAction(
                @HostParam("endpoint") String endpoint,
                @PathParam("id") String id,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Post("/routing/jobs/{id}:cancel")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> cancelJobActionSync(
                @HostParam("endpoint") String endpoint,
                @PathParam("id") String id,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Post("/routing/jobs/{id}:complete")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> completeJobAction(
                @HostParam("endpoint") String endpoint,
                @PathParam("id") String id,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") BinaryData completeJobRequest,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Post("/routing/jobs/{id}:complete")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> completeJobActionSync(
                @HostParam("endpoint") String endpoint,
                @PathParam("id") String id,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") BinaryData completeJobRequest,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Post("/routing/jobs/{id}:close")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> closeJobAction(
                @HostParam("endpoint") String endpoint,
                @PathParam("id") String id,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") BinaryData closeJobRequest,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Post("/routing/jobs/{id}:close")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> closeJobActionSync(
                @HostParam("endpoint") String endpoint,
                @PathParam("id") String id,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") BinaryData closeJobRequest,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/routing/jobs")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listJobs(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/routing/jobs")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listJobsSync(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/routing/jobs/{id}/position")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getInQueuePosition(
                @HostParam("endpoint") String endpoint,
                @PathParam("id") String id,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/routing/jobs/{id}/position")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getInQueuePositionSync(
                @HostParam("endpoint") String endpoint,
                @PathParam("id") String id,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Post("/routing/jobs/{id}/assignments/{assignmentId}:unassign")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> unassignJobAction(
                @HostParam("endpoint") String endpoint,
                @PathParam("id") String id,
                @PathParam("assignmentId") String assignmentId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Post("/routing/jobs/{id}/assignments/{assignmentId}:unassign")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> unassignJobActionSync(
                @HostParam("endpoint") String endpoint,
                @PathParam("id") String id,
                @PathParam("assignmentId") String assignmentId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Post("/routing/workers/{workerId}/offers/{offerId}:accept")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> acceptJobAction(
                @HostParam("endpoint") String endpoint,
                @PathParam("workerId") String workerId,
                @PathParam("offerId") String offerId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Post("/routing/workers/{workerId}/offers/{offerId}:accept")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> acceptJobActionSync(
                @HostParam("endpoint") String endpoint,
                @PathParam("workerId") String workerId,
                @PathParam("offerId") String offerId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Post("/routing/workers/{workerId}/offers/{offerId}:decline")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> declineJobAction(
                @HostParam("endpoint") String endpoint,
                @PathParam("workerId") String workerId,
                @PathParam("offerId") String offerId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Post("/routing/workers/{workerId}/offers/{offerId}:decline")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> declineJobActionSync(
                @HostParam("endpoint") String endpoint,
                @PathParam("workerId") String workerId,
                @PathParam("offerId") String offerId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/routing/queues/{id}/statistics")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getQueueStatistics(
                @HostParam("endpoint") String endpoint,
                @PathParam("id") String id,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/routing/queues/{id}/statistics")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getQueueStatisticsSync(
                @HostParam("endpoint") String endpoint,
                @PathParam("id") String id,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Patch("/routing/workers/{workerId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> upsertWorker(
                @HostParam("endpoint") String endpoint,
                @PathParam("workerId") String workerId,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/merge-patch+json") BinaryData patch,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Patch("/routing/workers/{workerId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> upsertWorkerSync(
                @HostParam("endpoint") String endpoint,
                @PathParam("workerId") String workerId,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/merge-patch+json") BinaryData patch,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/routing/workers/{workerId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getWorker(
                @HostParam("endpoint") String endpoint,
                @PathParam("workerId") String workerId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/routing/workers/{workerId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getWorkerSync(
                @HostParam("endpoint") String endpoint,
                @PathParam("workerId") String workerId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Delete("/routing/workers/{workerId}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteWorker(
                @HostParam("endpoint") String endpoint,
                @PathParam("workerId") String workerId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Delete("/routing/workers/{workerId}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> deleteWorkerSync(
                @HostParam("endpoint") String endpoint,
                @PathParam("workerId") String workerId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/routing/workers")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listWorkers(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/routing/workers")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listWorkersSync(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listJobsNext(
                @PathParam(value = "nextLink", encoded = true) String nextLink,
                @HostParam("endpoint") String endpoint,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listJobsNextSync(
                @PathParam(value = "nextLink", encoded = true) String nextLink,
                @HostParam("endpoint") String endpoint,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listWorkersNext(
                @PathParam(value = "nextLink", encoded = true) String nextLink,
                @HostParam("endpoint") String endpoint,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listWorkersNextSync(
                @PathParam(value = "nextLink", encoded = true) String nextLink,
                @HostParam("endpoint") String endpoint,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);
    }

    /**
     * Creates or updates a router job.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     channelReference: String (Optional)
     *     jobStatus: String(pendingClassification/queued/assigned/completed/closed/cancelled/classificationFailed/created/pendingSchedule/scheduled/scheduleFailed/waitingForActivation) (Optional)
     *     enqueueTimeUtc: OffsetDateTime (Optional)
     *     channelId: String (Optional)
     *     classificationPolicyId: String (Optional)
     *     queueId: String (Optional)
     *     priority: Integer (Optional)
     *     dispositionCode: String (Optional)
     *     requestedWorkerSelectors (Optional): [
     *          (Optional){
     *             key: String (Required)
     *             labelOperator: String(equal/notEqual/lessThan/lessThanEqual/greaterThan/greaterThanEqual) (Required)
     *             value: Object (Optional)
     *             ttlSeconds: Double (Optional)
     *             expedite: Boolean (Optional)
     *             state: String(active/expired) (Optional)
     *             expireTime: OffsetDateTime (Optional)
     *         }
     *     ]
     *     attachedWorkerSelectors (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     labels (Optional): {
     *         String: Object (Optional)
     *     }
     *     assignments (Optional): {
     *         String (Optional): {
     *             id: String (Required)
     *             workerId: String (Optional)
     *             assignTime: OffsetDateTime (Required)
     *             completeTime: OffsetDateTime (Optional)
     *             closeTime: OffsetDateTime (Optional)
     *         }
     *     }
     *     tags (Optional): {
     *         String: Object (Optional)
     *     }
     *     notes (Optional): {
     *         String: String (Optional)
     *     }
     *     unavailableForMatching: Boolean (Optional)
     *     scheduledTimeUtc: OffsetDateTime (Optional)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     channelReference: String (Optional)
     *     jobStatus: String(pendingClassification/queued/assigned/completed/closed/cancelled/classificationFailed/created/pendingSchedule/scheduled/scheduleFailed/waitingForActivation) (Optional)
     *     enqueueTimeUtc: OffsetDateTime (Optional)
     *     channelId: String (Optional)
     *     classificationPolicyId: String (Optional)
     *     queueId: String (Optional)
     *     priority: Integer (Optional)
     *     dispositionCode: String (Optional)
     *     requestedWorkerSelectors (Optional): [
     *          (Optional){
     *             key: String (Required)
     *             labelOperator: String(equal/notEqual/lessThan/lessThanEqual/greaterThan/greaterThanEqual) (Required)
     *             value: Object (Optional)
     *             ttlSeconds: Double (Optional)
     *             expedite: Boolean (Optional)
     *             state: String(active/expired) (Optional)
     *             expireTime: OffsetDateTime (Optional)
     *         }
     *     ]
     *     attachedWorkerSelectors (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     labels (Optional): {
     *         String: Object (Optional)
     *     }
     *     assignments (Optional): {
     *         String (Optional): {
     *             id: String (Required)
     *             workerId: String (Optional)
     *             assignTime: OffsetDateTime (Required)
     *             completeTime: OffsetDateTime (Optional)
     *             closeTime: OffsetDateTime (Optional)
     *         }
     *     }
     *     tags (Optional): {
     *         String: Object (Optional)
     *     }
     *     notes (Optional): {
     *         String: String (Optional)
     *     }
     *     unavailableForMatching: Boolean (Optional)
     *     scheduledTimeUtc: OffsetDateTime (Optional)
     * }
     * }</pre>
     *
     * @param id Id of the job.
     * @param patch Model of job properties to be created or patched. See also:
     *     https://datatracker.ietf.org/doc/html/rfc7386.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a unit of work to be routed along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> upsertJobWithResponseAsync(
            String id, BinaryData patch, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.upsertJob(
                                this.client.getEndpoint(),
                                id,
                                this.client.getServiceVersion().getVersion(),
                                patch,
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Creates or updates a router job.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     channelReference: String (Optional)
     *     jobStatus: String(pendingClassification/queued/assigned/completed/closed/cancelled/classificationFailed/created/pendingSchedule/scheduled/scheduleFailed/waitingForActivation) (Optional)
     *     enqueueTimeUtc: OffsetDateTime (Optional)
     *     channelId: String (Optional)
     *     classificationPolicyId: String (Optional)
     *     queueId: String (Optional)
     *     priority: Integer (Optional)
     *     dispositionCode: String (Optional)
     *     requestedWorkerSelectors (Optional): [
     *          (Optional){
     *             key: String (Required)
     *             labelOperator: String(equal/notEqual/lessThan/lessThanEqual/greaterThan/greaterThanEqual) (Required)
     *             value: Object (Optional)
     *             ttlSeconds: Double (Optional)
     *             expedite: Boolean (Optional)
     *             state: String(active/expired) (Optional)
     *             expireTime: OffsetDateTime (Optional)
     *         }
     *     ]
     *     attachedWorkerSelectors (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     labels (Optional): {
     *         String: Object (Optional)
     *     }
     *     assignments (Optional): {
     *         String (Optional): {
     *             id: String (Required)
     *             workerId: String (Optional)
     *             assignTime: OffsetDateTime (Required)
     *             completeTime: OffsetDateTime (Optional)
     *             closeTime: OffsetDateTime (Optional)
     *         }
     *     }
     *     tags (Optional): {
     *         String: Object (Optional)
     *     }
     *     notes (Optional): {
     *         String: String (Optional)
     *     }
     *     unavailableForMatching: Boolean (Optional)
     *     scheduledTimeUtc: OffsetDateTime (Optional)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     channelReference: String (Optional)
     *     jobStatus: String(pendingClassification/queued/assigned/completed/closed/cancelled/classificationFailed/created/pendingSchedule/scheduled/scheduleFailed/waitingForActivation) (Optional)
     *     enqueueTimeUtc: OffsetDateTime (Optional)
     *     channelId: String (Optional)
     *     classificationPolicyId: String (Optional)
     *     queueId: String (Optional)
     *     priority: Integer (Optional)
     *     dispositionCode: String (Optional)
     *     requestedWorkerSelectors (Optional): [
     *          (Optional){
     *             key: String (Required)
     *             labelOperator: String(equal/notEqual/lessThan/lessThanEqual/greaterThan/greaterThanEqual) (Required)
     *             value: Object (Optional)
     *             ttlSeconds: Double (Optional)
     *             expedite: Boolean (Optional)
     *             state: String(active/expired) (Optional)
     *             expireTime: OffsetDateTime (Optional)
     *         }
     *     ]
     *     attachedWorkerSelectors (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     labels (Optional): {
     *         String: Object (Optional)
     *     }
     *     assignments (Optional): {
     *         String (Optional): {
     *             id: String (Required)
     *             workerId: String (Optional)
     *             assignTime: OffsetDateTime (Required)
     *             completeTime: OffsetDateTime (Optional)
     *             closeTime: OffsetDateTime (Optional)
     *         }
     *     }
     *     tags (Optional): {
     *         String: Object (Optional)
     *     }
     *     notes (Optional): {
     *         String: String (Optional)
     *     }
     *     unavailableForMatching: Boolean (Optional)
     *     scheduledTimeUtc: OffsetDateTime (Optional)
     * }
     * }</pre>
     *
     * @param id Id of the job.
     * @param patch Model of job properties to be created or patched. See also:
     *     https://datatracker.ietf.org/doc/html/rfc7386.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a unit of work to be routed along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> upsertJobWithResponse(String id, BinaryData patch, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.upsertJobSync(
                this.client.getEndpoint(),
                id,
                this.client.getServiceVersion().getVersion(),
                patch,
                accept,
                requestOptions,
                Context.NONE);
    }

    /**
     * Retrieves an existing job by Id.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     channelReference: String (Optional)
     *     jobStatus: String(pendingClassification/queued/assigned/completed/closed/cancelled/classificationFailed/created/pendingSchedule/scheduled/scheduleFailed/waitingForActivation) (Optional)
     *     enqueueTimeUtc: OffsetDateTime (Optional)
     *     channelId: String (Optional)
     *     classificationPolicyId: String (Optional)
     *     queueId: String (Optional)
     *     priority: Integer (Optional)
     *     dispositionCode: String (Optional)
     *     requestedWorkerSelectors (Optional): [
     *          (Optional){
     *             key: String (Required)
     *             labelOperator: String(equal/notEqual/lessThan/lessThanEqual/greaterThan/greaterThanEqual) (Required)
     *             value: Object (Optional)
     *             ttlSeconds: Double (Optional)
     *             expedite: Boolean (Optional)
     *             state: String(active/expired) (Optional)
     *             expireTime: OffsetDateTime (Optional)
     *         }
     *     ]
     *     attachedWorkerSelectors (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     labels (Optional): {
     *         String: Object (Optional)
     *     }
     *     assignments (Optional): {
     *         String (Optional): {
     *             id: String (Required)
     *             workerId: String (Optional)
     *             assignTime: OffsetDateTime (Required)
     *             completeTime: OffsetDateTime (Optional)
     *             closeTime: OffsetDateTime (Optional)
     *         }
     *     }
     *     tags (Optional): {
     *         String: Object (Optional)
     *     }
     *     notes (Optional): {
     *         String: String (Optional)
     *     }
     *     unavailableForMatching: Boolean (Optional)
     *     scheduledTimeUtc: OffsetDateTime (Optional)
     * }
     * }</pre>
     *
     * @param id Id of the job to retrieve.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a unit of work to be routed along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getJobWithResponseAsync(String id, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.getJob(
                                this.client.getEndpoint(),
                                id,
                                this.client.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Retrieves an existing job by Id.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     channelReference: String (Optional)
     *     jobStatus: String(pendingClassification/queued/assigned/completed/closed/cancelled/classificationFailed/created/pendingSchedule/scheduled/scheduleFailed/waitingForActivation) (Optional)
     *     enqueueTimeUtc: OffsetDateTime (Optional)
     *     channelId: String (Optional)
     *     classificationPolicyId: String (Optional)
     *     queueId: String (Optional)
     *     priority: Integer (Optional)
     *     dispositionCode: String (Optional)
     *     requestedWorkerSelectors (Optional): [
     *          (Optional){
     *             key: String (Required)
     *             labelOperator: String(equal/notEqual/lessThan/lessThanEqual/greaterThan/greaterThanEqual) (Required)
     *             value: Object (Optional)
     *             ttlSeconds: Double (Optional)
     *             expedite: Boolean (Optional)
     *             state: String(active/expired) (Optional)
     *             expireTime: OffsetDateTime (Optional)
     *         }
     *     ]
     *     attachedWorkerSelectors (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     labels (Optional): {
     *         String: Object (Optional)
     *     }
     *     assignments (Optional): {
     *         String (Optional): {
     *             id: String (Required)
     *             workerId: String (Optional)
     *             assignTime: OffsetDateTime (Required)
     *             completeTime: OffsetDateTime (Optional)
     *             closeTime: OffsetDateTime (Optional)
     *         }
     *     }
     *     tags (Optional): {
     *         String: Object (Optional)
     *     }
     *     notes (Optional): {
     *         String: String (Optional)
     *     }
     *     unavailableForMatching: Boolean (Optional)
     *     scheduledTimeUtc: OffsetDateTime (Optional)
     * }
     * }</pre>
     *
     * @param id Id of the job to retrieve.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a unit of work to be routed along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getJobWithResponse(String id, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getJobSync(
                this.client.getEndpoint(),
                id,
                this.client.getServiceVersion().getVersion(),
                accept,
                requestOptions,
                Context.NONE);
    }

    /**
     * Deletes a job and all of its traces.
     *
     * @param id Id of the job.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteJobWithResponseAsync(String id, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.deleteJob(
                                this.client.getEndpoint(),
                                id,
                                this.client.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Deletes a job and all of its traces.
     *
     * @param id Id of the job.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteJobWithResponse(String id, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.deleteJobSync(
                this.client.getEndpoint(),
                id,
                this.client.getServiceVersion().getVersion(),
                accept,
                requestOptions,
                Context.NONE);
    }

    /**
     * Reclassify a job.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * Object
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * Object
     * }</pre>
     *
     * @param id Id of the job.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return any object along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> reclassifyJobActionWithResponseAsync(String id, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.reclassifyJobAction(
                                this.client.getEndpoint(),
                                id,
                                this.client.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Reclassify a job.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * Object
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * Object
     * }</pre>
     *
     * @param id Id of the job.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return any object along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> reclassifyJobActionWithResponse(String id, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.reclassifyJobActionSync(
                this.client.getEndpoint(),
                id,
                this.client.getServiceVersion().getVersion(),
                accept,
                requestOptions,
                Context.NONE);
    }

    /**
     * Submits request to cancel an existing job by Id while supplying free-form cancellation reason.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>Content-Type</td><td>String</td><td>No</td><td>The content type. Allowed values: "application/json".</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     note: String (Optional)
     *     dispositionCode: String (Optional)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * Object
     * }</pre>
     *
     * @param id Id of the job.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return any object along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> cancelJobActionWithResponseAsync(String id, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.cancelJobAction(
                                this.client.getEndpoint(),
                                id,
                                this.client.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Submits request to cancel an existing job by Id while supplying free-form cancellation reason.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>Content-Type</td><td>String</td><td>No</td><td>The content type. Allowed values: "application/json".</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     note: String (Optional)
     *     dispositionCode: String (Optional)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * Object
     * }</pre>
     *
     * @param id Id of the job.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return any object along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> cancelJobActionWithResponse(String id, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.cancelJobActionSync(
                this.client.getEndpoint(),
                id,
                this.client.getServiceVersion().getVersion(),
                accept,
                requestOptions,
                Context.NONE);
    }

    /**
     * Completes an assigned job.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     assignmentId: String (Required)
     *     note: String (Optional)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * Object
     * }</pre>
     *
     * @param id Id of the job.
     * @param completeJobRequest Request model for completing job.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return any object along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> completeJobActionWithResponseAsync(
            String id, BinaryData completeJobRequest, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.completeJobAction(
                                this.client.getEndpoint(),
                                id,
                                this.client.getServiceVersion().getVersion(),
                                completeJobRequest,
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Completes an assigned job.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     assignmentId: String (Required)
     *     note: String (Optional)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * Object
     * }</pre>
     *
     * @param id Id of the job.
     * @param completeJobRequest Request model for completing job.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return any object along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> completeJobActionWithResponse(
            String id, BinaryData completeJobRequest, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.completeJobActionSync(
                this.client.getEndpoint(),
                id,
                this.client.getServiceVersion().getVersion(),
                completeJobRequest,
                accept,
                requestOptions,
                Context.NONE);
    }

    /**
     * Closes a completed job.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     assignmentId: String (Required)
     *     dispositionCode: String (Optional)
     *     closeTime: OffsetDateTime (Optional)
     *     note: String (Optional)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * Object
     * }</pre>
     *
     * @param id Id of the job.
     * @param closeJobRequest Request model for closing job.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return any object along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> closeJobActionWithResponseAsync(
            String id, BinaryData closeJobRequest, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.closeJobAction(
                                this.client.getEndpoint(),
                                id,
                                this.client.getServiceVersion().getVersion(),
                                closeJobRequest,
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Closes a completed job.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     assignmentId: String (Required)
     *     dispositionCode: String (Optional)
     *     closeTime: OffsetDateTime (Optional)
     *     note: String (Optional)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * Object
     * }</pre>
     *
     * @param id Id of the job.
     * @param closeJobRequest Request model for closing job.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return any object along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> closeJobActionWithResponse(
            String id, BinaryData closeJobRequest, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.closeJobActionSync(
                this.client.getEndpoint(),
                id,
                this.client.getServiceVersion().getVersion(),
                closeJobRequest,
                accept,
                requestOptions,
                Context.NONE);
    }

    /**
     * Retrieves list of jobs based on filter parameters.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>status</td><td>String</td><td>No</td><td>(Optional) If specified, filter jobs by status. Allowed values: "all", "pendingClassification", "queued", "assigned", "completed", "closed", "cancelled", "classificationFailed", "created", "pendingSchedule", "scheduled", "scheduleFailed", "waitingForActivation", "active".</td></tr>
     *     <tr><td>queueId</td><td>String</td><td>No</td><td>(Optional) If specified, filter jobs by queue.</td></tr>
     *     <tr><td>channelId</td><td>String</td><td>No</td><td>(Optional) If specified, filter jobs by channel.</td></tr>
     *     <tr><td>classificationPolicyId</td><td>String</td><td>No</td><td>(Optional) If specified, filter jobs by classificationPolicy.</td></tr>
     *     <tr><td>scheduledBefore</td><td>OffsetDateTime</td><td>No</td><td>(Optional) If specified, filter on jobs that was scheduled before or at given timestamp. Range: (-Inf, scheduledBefore]</td></tr>
     *     <tr><td>scheduledAfter</td><td>OffsetDateTime</td><td>No</td><td>(Optional) If specified, filter on jobs that was scheduled at or after given value. Range: [scheduledAfter, +Inf).</td></tr>
     *     <tr><td>maxPageSize</td><td>Integer</td><td>No</td><td>Number of objects to return per page</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     routerJob (Optional): {
     *         id: String (Optional)
     *         channelReference: String (Optional)
     *         jobStatus: String(pendingClassification/queued/assigned/completed/closed/cancelled/classificationFailed/created/pendingSchedule/scheduled/scheduleFailed/waitingForActivation) (Optional)
     *         enqueueTimeUtc: OffsetDateTime (Optional)
     *         channelId: String (Optional)
     *         classificationPolicyId: String (Optional)
     *         queueId: String (Optional)
     *         priority: Integer (Optional)
     *         dispositionCode: String (Optional)
     *         requestedWorkerSelectors (Optional): [
     *              (Optional){
     *                 key: String (Required)
     *                 labelOperator: String(equal/notEqual/lessThan/lessThanEqual/greaterThan/greaterThanEqual) (Required)
     *                 value: Object (Optional)
     *                 ttlSeconds: Double (Optional)
     *                 expedite: Boolean (Optional)
     *                 state: String(active/expired) (Optional)
     *                 expireTime: OffsetDateTime (Optional)
     *             }
     *         ]
     *         attachedWorkerSelectors (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         labels (Optional): {
     *             String: Object (Optional)
     *         }
     *         assignments (Optional): {
     *             String (Optional): {
     *                 id: String (Required)
     *                 workerId: String (Optional)
     *                 assignTime: OffsetDateTime (Required)
     *                 completeTime: OffsetDateTime (Optional)
     *                 closeTime: OffsetDateTime (Optional)
     *             }
     *         }
     *         tags (Optional): {
     *             String: Object (Optional)
     *         }
     *         notes (Optional): {
     *             String: String (Optional)
     *         }
     *         unavailableForMatching: Boolean (Optional)
     *         scheduledTimeUtc: OffsetDateTime (Optional)
     *     }
     *     etag: String (Optional)
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a paged collection of jobs along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listJobsSinglePageAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                        context ->
                                service.listJobs(
                                        this.client.getEndpoint(),
                                        this.client.getServiceVersion().getVersion(),
                                        accept,
                                        requestOptions,
                                        context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Retrieves list of jobs based on filter parameters.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>status</td><td>String</td><td>No</td><td>(Optional) If specified, filter jobs by status. Allowed values: "all", "pendingClassification", "queued", "assigned", "completed", "closed", "cancelled", "classificationFailed", "created", "pendingSchedule", "scheduled", "scheduleFailed", "waitingForActivation", "active".</td></tr>
     *     <tr><td>queueId</td><td>String</td><td>No</td><td>(Optional) If specified, filter jobs by queue.</td></tr>
     *     <tr><td>channelId</td><td>String</td><td>No</td><td>(Optional) If specified, filter jobs by channel.</td></tr>
     *     <tr><td>classificationPolicyId</td><td>String</td><td>No</td><td>(Optional) If specified, filter jobs by classificationPolicy.</td></tr>
     *     <tr><td>scheduledBefore</td><td>OffsetDateTime</td><td>No</td><td>(Optional) If specified, filter on jobs that was scheduled before or at given timestamp. Range: (-Inf, scheduledBefore]</td></tr>
     *     <tr><td>scheduledAfter</td><td>OffsetDateTime</td><td>No</td><td>(Optional) If specified, filter on jobs that was scheduled at or after given value. Range: [scheduledAfter, +Inf).</td></tr>
     *     <tr><td>maxPageSize</td><td>Integer</td><td>No</td><td>Number of objects to return per page</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     routerJob (Optional): {
     *         id: String (Optional)
     *         channelReference: String (Optional)
     *         jobStatus: String(pendingClassification/queued/assigned/completed/closed/cancelled/classificationFailed/created/pendingSchedule/scheduled/scheduleFailed/waitingForActivation) (Optional)
     *         enqueueTimeUtc: OffsetDateTime (Optional)
     *         channelId: String (Optional)
     *         classificationPolicyId: String (Optional)
     *         queueId: String (Optional)
     *         priority: Integer (Optional)
     *         dispositionCode: String (Optional)
     *         requestedWorkerSelectors (Optional): [
     *              (Optional){
     *                 key: String (Required)
     *                 labelOperator: String(equal/notEqual/lessThan/lessThanEqual/greaterThan/greaterThanEqual) (Required)
     *                 value: Object (Optional)
     *                 ttlSeconds: Double (Optional)
     *                 expedite: Boolean (Optional)
     *                 state: String(active/expired) (Optional)
     *                 expireTime: OffsetDateTime (Optional)
     *             }
     *         ]
     *         attachedWorkerSelectors (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         labels (Optional): {
     *             String: Object (Optional)
     *         }
     *         assignments (Optional): {
     *             String (Optional): {
     *                 id: String (Required)
     *                 workerId: String (Optional)
     *                 assignTime: OffsetDateTime (Required)
     *                 completeTime: OffsetDateTime (Optional)
     *                 closeTime: OffsetDateTime (Optional)
     *             }
     *         }
     *         tags (Optional): {
     *             String: Object (Optional)
     *         }
     *         notes (Optional): {
     *             String: String (Optional)
     *         }
     *         unavailableForMatching: Boolean (Optional)
     *         scheduledTimeUtc: OffsetDateTime (Optional)
     *     }
     *     etag: String (Optional)
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a paged collection of jobs as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listJobsAsync(RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
                requestOptions != null && requestOptions.getContext() != null
                        ? requestOptions.getContext()
                        : Context.NONE);
        return new PagedFlux<>(
                () -> listJobsSinglePageAsync(requestOptions),
                nextLink -> listJobsNextSinglePageAsync(nextLink, requestOptionsForNextPage));
    }

    /**
     * Retrieves list of jobs based on filter parameters.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>status</td><td>String</td><td>No</td><td>(Optional) If specified, filter jobs by status. Allowed values: "all", "pendingClassification", "queued", "assigned", "completed", "closed", "cancelled", "classificationFailed", "created", "pendingSchedule", "scheduled", "scheduleFailed", "waitingForActivation", "active".</td></tr>
     *     <tr><td>queueId</td><td>String</td><td>No</td><td>(Optional) If specified, filter jobs by queue.</td></tr>
     *     <tr><td>channelId</td><td>String</td><td>No</td><td>(Optional) If specified, filter jobs by channel.</td></tr>
     *     <tr><td>classificationPolicyId</td><td>String</td><td>No</td><td>(Optional) If specified, filter jobs by classificationPolicy.</td></tr>
     *     <tr><td>scheduledBefore</td><td>OffsetDateTime</td><td>No</td><td>(Optional) If specified, filter on jobs that was scheduled before or at given timestamp. Range: (-Inf, scheduledBefore]</td></tr>
     *     <tr><td>scheduledAfter</td><td>OffsetDateTime</td><td>No</td><td>(Optional) If specified, filter on jobs that was scheduled at or after given value. Range: [scheduledAfter, +Inf).</td></tr>
     *     <tr><td>maxPageSize</td><td>Integer</td><td>No</td><td>Number of objects to return per page</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     routerJob (Optional): {
     *         id: String (Optional)
     *         channelReference: String (Optional)
     *         jobStatus: String(pendingClassification/queued/assigned/completed/closed/cancelled/classificationFailed/created/pendingSchedule/scheduled/scheduleFailed/waitingForActivation) (Optional)
     *         enqueueTimeUtc: OffsetDateTime (Optional)
     *         channelId: String (Optional)
     *         classificationPolicyId: String (Optional)
     *         queueId: String (Optional)
     *         priority: Integer (Optional)
     *         dispositionCode: String (Optional)
     *         requestedWorkerSelectors (Optional): [
     *              (Optional){
     *                 key: String (Required)
     *                 labelOperator: String(equal/notEqual/lessThan/lessThanEqual/greaterThan/greaterThanEqual) (Required)
     *                 value: Object (Optional)
     *                 ttlSeconds: Double (Optional)
     *                 expedite: Boolean (Optional)
     *                 state: String(active/expired) (Optional)
     *                 expireTime: OffsetDateTime (Optional)
     *             }
     *         ]
     *         attachedWorkerSelectors (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         labels (Optional): {
     *             String: Object (Optional)
     *         }
     *         assignments (Optional): {
     *             String (Optional): {
     *                 id: String (Required)
     *                 workerId: String (Optional)
     *                 assignTime: OffsetDateTime (Required)
     *                 completeTime: OffsetDateTime (Optional)
     *                 closeTime: OffsetDateTime (Optional)
     *             }
     *         }
     *         tags (Optional): {
     *             String: Object (Optional)
     *         }
     *         notes (Optional): {
     *             String: String (Optional)
     *         }
     *         unavailableForMatching: Boolean (Optional)
     *         scheduledTimeUtc: OffsetDateTime (Optional)
     *     }
     *     etag: String (Optional)
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a paged collection of jobs along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listJobsSinglePage(RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res =
                service.listJobsSync(
                        this.client.getEndpoint(),
                        this.client.getServiceVersion().getVersion(),
                        accept,
                        requestOptions,
                        Context.NONE);
        return new PagedResponseBase<>(
                res.getRequest(),
                res.getStatusCode(),
                res.getHeaders(),
                getValues(res.getValue(), "value"),
                getNextLink(res.getValue(), "nextLink"),
                null);
    }

    /**
     * Retrieves list of jobs based on filter parameters.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>status</td><td>String</td><td>No</td><td>(Optional) If specified, filter jobs by status. Allowed values: "all", "pendingClassification", "queued", "assigned", "completed", "closed", "cancelled", "classificationFailed", "created", "pendingSchedule", "scheduled", "scheduleFailed", "waitingForActivation", "active".</td></tr>
     *     <tr><td>queueId</td><td>String</td><td>No</td><td>(Optional) If specified, filter jobs by queue.</td></tr>
     *     <tr><td>channelId</td><td>String</td><td>No</td><td>(Optional) If specified, filter jobs by channel.</td></tr>
     *     <tr><td>classificationPolicyId</td><td>String</td><td>No</td><td>(Optional) If specified, filter jobs by classificationPolicy.</td></tr>
     *     <tr><td>scheduledBefore</td><td>OffsetDateTime</td><td>No</td><td>(Optional) If specified, filter on jobs that was scheduled before or at given timestamp. Range: (-Inf, scheduledBefore]</td></tr>
     *     <tr><td>scheduledAfter</td><td>OffsetDateTime</td><td>No</td><td>(Optional) If specified, filter on jobs that was scheduled at or after given value. Range: [scheduledAfter, +Inf).</td></tr>
     *     <tr><td>maxPageSize</td><td>Integer</td><td>No</td><td>Number of objects to return per page</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     routerJob (Optional): {
     *         id: String (Optional)
     *         channelReference: String (Optional)
     *         jobStatus: String(pendingClassification/queued/assigned/completed/closed/cancelled/classificationFailed/created/pendingSchedule/scheduled/scheduleFailed/waitingForActivation) (Optional)
     *         enqueueTimeUtc: OffsetDateTime (Optional)
     *         channelId: String (Optional)
     *         classificationPolicyId: String (Optional)
     *         queueId: String (Optional)
     *         priority: Integer (Optional)
     *         dispositionCode: String (Optional)
     *         requestedWorkerSelectors (Optional): [
     *              (Optional){
     *                 key: String (Required)
     *                 labelOperator: String(equal/notEqual/lessThan/lessThanEqual/greaterThan/greaterThanEqual) (Required)
     *                 value: Object (Optional)
     *                 ttlSeconds: Double (Optional)
     *                 expedite: Boolean (Optional)
     *                 state: String(active/expired) (Optional)
     *                 expireTime: OffsetDateTime (Optional)
     *             }
     *         ]
     *         attachedWorkerSelectors (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         labels (Optional): {
     *             String: Object (Optional)
     *         }
     *         assignments (Optional): {
     *             String (Optional): {
     *                 id: String (Required)
     *                 workerId: String (Optional)
     *                 assignTime: OffsetDateTime (Required)
     *                 completeTime: OffsetDateTime (Optional)
     *                 closeTime: OffsetDateTime (Optional)
     *             }
     *         }
     *         tags (Optional): {
     *             String: Object (Optional)
     *         }
     *         notes (Optional): {
     *             String: String (Optional)
     *         }
     *         unavailableForMatching: Boolean (Optional)
     *         scheduledTimeUtc: OffsetDateTime (Optional)
     *     }
     *     etag: String (Optional)
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a paged collection of jobs as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listJobs(RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
                requestOptions != null && requestOptions.getContext() != null
                        ? requestOptions.getContext()
                        : Context.NONE);
        return new PagedIterable<>(
                () -> listJobsSinglePage(requestOptions),
                nextLink -> listJobsNextSinglePage(nextLink, requestOptionsForNextPage));
    }

    /**
     * Gets a job's position details.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     jobId: String (Required)
     *     position: int (Required)
     *     queueId: String (Required)
     *     queueLength: int (Required)
     *     estimatedWaitTimeMinutes: double (Required)
     * }
     * }</pre>
     *
     * @param id Id of the job.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a job's position details along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getInQueuePositionWithResponseAsync(String id, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.getInQueuePosition(
                                this.client.getEndpoint(),
                                id,
                                this.client.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Gets a job's position details.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     jobId: String (Required)
     *     position: int (Required)
     *     queueId: String (Required)
     *     queueLength: int (Required)
     *     estimatedWaitTimeMinutes: double (Required)
     * }
     * }</pre>
     *
     * @param id Id of the job.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a job's position details along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getInQueuePositionWithResponse(String id, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getInQueuePositionSync(
                this.client.getEndpoint(),
                id,
                this.client.getServiceVersion().getVersion(),
                accept,
                requestOptions,
                Context.NONE);
    }

    /**
     * Un-assign a job.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     jobId: String (Required)
     *     unassignmentCount: int (Required)
     * }
     * }</pre>
     *
     * @param id Id of the job to un-assign.
     * @param assignmentId Id of the assignment to un-assign.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response payload after a job has been successfully unassigned along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> unassignJobActionWithResponseAsync(
            String id, String assignmentId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.unassignJobAction(
                                this.client.getEndpoint(),
                                id,
                                assignmentId,
                                this.client.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Un-assign a job.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     jobId: String (Required)
     *     unassignmentCount: int (Required)
     * }
     * }</pre>
     *
     * @param id Id of the job to un-assign.
     * @param assignmentId Id of the assignment to un-assign.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response payload after a job has been successfully unassigned along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> unassignJobActionWithResponse(
            String id, String assignmentId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.unassignJobActionSync(
                this.client.getEndpoint(),
                id,
                assignmentId,
                this.client.getServiceVersion().getVersion(),
                accept,
                requestOptions,
                Context.NONE);
    }

    /**
     * Accepts an offer to work on a job and returns a 409/Conflict if another agent accepted the job already.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     assignmentId: String (Required)
     *     jobId: String (Required)
     *     workerId: String (Required)
     * }
     * }</pre>
     *
     * @param workerId Id of the worker.
     * @param offerId Id of the offer.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response containing Id's for the worker, job, and assignment from an accepted offer along with {@link
     *     Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> acceptJobActionWithResponseAsync(
            String workerId, String offerId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.acceptJobAction(
                                this.client.getEndpoint(),
                                workerId,
                                offerId,
                                this.client.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Accepts an offer to work on a job and returns a 409/Conflict if another agent accepted the job already.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     assignmentId: String (Required)
     *     jobId: String (Required)
     *     workerId: String (Required)
     * }
     * }</pre>
     *
     * @param workerId Id of the worker.
     * @param offerId Id of the offer.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response containing Id's for the worker, job, and assignment from an accepted offer along with {@link
     *     Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> acceptJobActionWithResponse(
            String workerId, String offerId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.acceptJobActionSync(
                this.client.getEndpoint(),
                workerId,
                offerId,
                this.client.getServiceVersion().getVersion(),
                accept,
                requestOptions,
                Context.NONE);
    }

    /**
     * Declines an offer to work on a job.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     reofferTimeUtc: OffsetDateTime (Optional)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * Object
     * }</pre>
     *
     * @param workerId Id of the worker.
     * @param offerId Id of the offer.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return any object along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> declineJobActionWithResponseAsync(
            String workerId, String offerId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.declineJobAction(
                                this.client.getEndpoint(),
                                workerId,
                                offerId,
                                this.client.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Declines an offer to work on a job.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     reofferTimeUtc: OffsetDateTime (Optional)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * Object
     * }</pre>
     *
     * @param workerId Id of the worker.
     * @param offerId Id of the offer.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return any object along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> declineJobActionWithResponse(
            String workerId, String offerId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.declineJobActionSync(
                this.client.getEndpoint(),
                workerId,
                offerId,
                this.client.getServiceVersion().getVersion(),
                accept,
                requestOptions,
                Context.NONE);
    }

    /**
     * Retrieves a queue's statistics.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     queueId: String (Required)
     *     length: int (Required)
     *     estimatedWaitTimeMinutes (Optional): {
     *         String: double (Optional)
     *     }
     *     longestJobWaitTimeMinutes: Double (Optional)
     * }
     * }</pre>
     *
     * @param id Id of the queue to retrieve statistics.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return statistics for the queue along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getQueueStatisticsWithResponseAsync(String id, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.getQueueStatistics(
                                this.client.getEndpoint(),
                                id,
                                this.client.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Retrieves a queue's statistics.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     queueId: String (Required)
     *     length: int (Required)
     *     estimatedWaitTimeMinutes (Optional): {
     *         String: double (Optional)
     *     }
     *     longestJobWaitTimeMinutes: Double (Optional)
     * }
     * }</pre>
     *
     * @param id Id of the queue to retrieve statistics.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return statistics for the queue along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getQueueStatisticsWithResponse(String id, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getQueueStatisticsSync(
                this.client.getEndpoint(),
                id,
                this.client.getServiceVersion().getVersion(),
                accept,
                requestOptions,
                Context.NONE);
    }

    /**
     * Creates or updates a worker.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     state: String(active/draining/inactive) (Optional)
     *     queueAssignments (Optional): {
     *         String: Object (Optional)
     *     }
     *     totalCapacity: Integer (Optional)
     *     labels (Optional): {
     *         String: Object (Optional)
     *     }
     *     tags (Optional): {
     *         String: Object (Optional)
     *     }
     *     channelConfigurations (Optional): {
     *         String (Optional): {
     *             capacityCostPerJob: int (Required)
     *             maxNumberOfJobs: Integer (Optional)
     *         }
     *     }
     *     offers (Optional): [
     *          (Optional){
     *             id: String (Required)
     *             jobId: String (Required)
     *             capacityCost: int (Required)
     *             offerTimeUtc: OffsetDateTime (Optional)
     *             expiryTimeUtc: OffsetDateTime (Optional)
     *         }
     *     ]
     *     assignedJobs (Optional): [
     *          (Optional){
     *             id: String (Required)
     *             jobId: String (Required)
     *             capacityCost: int (Required)
     *             assignTime: OffsetDateTime (Required)
     *         }
     *     ]
     *     loadRatio: Double (Optional)
     *     availableForOffers: Boolean (Optional)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     state: String(active/draining/inactive) (Optional)
     *     queueAssignments (Optional): {
     *         String: Object (Optional)
     *     }
     *     totalCapacity: Integer (Optional)
     *     labels (Optional): {
     *         String: Object (Optional)
     *     }
     *     tags (Optional): {
     *         String: Object (Optional)
     *     }
     *     channelConfigurations (Optional): {
     *         String (Optional): {
     *             capacityCostPerJob: int (Required)
     *             maxNumberOfJobs: Integer (Optional)
     *         }
     *     }
     *     offers (Optional): [
     *          (Optional){
     *             id: String (Required)
     *             jobId: String (Required)
     *             capacityCost: int (Required)
     *             offerTimeUtc: OffsetDateTime (Optional)
     *             expiryTimeUtc: OffsetDateTime (Optional)
     *         }
     *     ]
     *     assignedJobs (Optional): [
     *          (Optional){
     *             id: String (Required)
     *             jobId: String (Required)
     *             capacityCost: int (Required)
     *             assignTime: OffsetDateTime (Required)
     *         }
     *     ]
     *     loadRatio: Double (Optional)
     *     availableForOffers: Boolean (Optional)
     * }
     * }</pre>
     *
     * @param workerId Id of the worker.
     * @param patch Model of worker properties to be created or patched. See also:
     *     https://datatracker.ietf.org/doc/html/rfc7386.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an entity for jobs to be routed to along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> upsertWorkerWithResponseAsync(
            String workerId, BinaryData patch, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.upsertWorker(
                                this.client.getEndpoint(),
                                workerId,
                                this.client.getServiceVersion().getVersion(),
                                patch,
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Creates or updates a worker.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     state: String(active/draining/inactive) (Optional)
     *     queueAssignments (Optional): {
     *         String: Object (Optional)
     *     }
     *     totalCapacity: Integer (Optional)
     *     labels (Optional): {
     *         String: Object (Optional)
     *     }
     *     tags (Optional): {
     *         String: Object (Optional)
     *     }
     *     channelConfigurations (Optional): {
     *         String (Optional): {
     *             capacityCostPerJob: int (Required)
     *             maxNumberOfJobs: Integer (Optional)
     *         }
     *     }
     *     offers (Optional): [
     *          (Optional){
     *             id: String (Required)
     *             jobId: String (Required)
     *             capacityCost: int (Required)
     *             offerTimeUtc: OffsetDateTime (Optional)
     *             expiryTimeUtc: OffsetDateTime (Optional)
     *         }
     *     ]
     *     assignedJobs (Optional): [
     *          (Optional){
     *             id: String (Required)
     *             jobId: String (Required)
     *             capacityCost: int (Required)
     *             assignTime: OffsetDateTime (Required)
     *         }
     *     ]
     *     loadRatio: Double (Optional)
     *     availableForOffers: Boolean (Optional)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     state: String(active/draining/inactive) (Optional)
     *     queueAssignments (Optional): {
     *         String: Object (Optional)
     *     }
     *     totalCapacity: Integer (Optional)
     *     labels (Optional): {
     *         String: Object (Optional)
     *     }
     *     tags (Optional): {
     *         String: Object (Optional)
     *     }
     *     channelConfigurations (Optional): {
     *         String (Optional): {
     *             capacityCostPerJob: int (Required)
     *             maxNumberOfJobs: Integer (Optional)
     *         }
     *     }
     *     offers (Optional): [
     *          (Optional){
     *             id: String (Required)
     *             jobId: String (Required)
     *             capacityCost: int (Required)
     *             offerTimeUtc: OffsetDateTime (Optional)
     *             expiryTimeUtc: OffsetDateTime (Optional)
     *         }
     *     ]
     *     assignedJobs (Optional): [
     *          (Optional){
     *             id: String (Required)
     *             jobId: String (Required)
     *             capacityCost: int (Required)
     *             assignTime: OffsetDateTime (Required)
     *         }
     *     ]
     *     loadRatio: Double (Optional)
     *     availableForOffers: Boolean (Optional)
     * }
     * }</pre>
     *
     * @param workerId Id of the worker.
     * @param patch Model of worker properties to be created or patched. See also:
     *     https://datatracker.ietf.org/doc/html/rfc7386.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an entity for jobs to be routed to along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> upsertWorkerWithResponse(
            String workerId, BinaryData patch, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.upsertWorkerSync(
                this.client.getEndpoint(),
                workerId,
                this.client.getServiceVersion().getVersion(),
                patch,
                accept,
                requestOptions,
                Context.NONE);
    }

    /**
     * Retrieves an existing worker by Id.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     state: String(active/draining/inactive) (Optional)
     *     queueAssignments (Optional): {
     *         String: Object (Optional)
     *     }
     *     totalCapacity: Integer (Optional)
     *     labels (Optional): {
     *         String: Object (Optional)
     *     }
     *     tags (Optional): {
     *         String: Object (Optional)
     *     }
     *     channelConfigurations (Optional): {
     *         String (Optional): {
     *             capacityCostPerJob: int (Required)
     *             maxNumberOfJobs: Integer (Optional)
     *         }
     *     }
     *     offers (Optional): [
     *          (Optional){
     *             id: String (Required)
     *             jobId: String (Required)
     *             capacityCost: int (Required)
     *             offerTimeUtc: OffsetDateTime (Optional)
     *             expiryTimeUtc: OffsetDateTime (Optional)
     *         }
     *     ]
     *     assignedJobs (Optional): [
     *          (Optional){
     *             id: String (Required)
     *             jobId: String (Required)
     *             capacityCost: int (Required)
     *             assignTime: OffsetDateTime (Required)
     *         }
     *     ]
     *     loadRatio: Double (Optional)
     *     availableForOffers: Boolean (Optional)
     * }
     * }</pre>
     *
     * @param workerId Id of the worker to retrieve.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an entity for jobs to be routed to along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getWorkerWithResponseAsync(String workerId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.getWorker(
                                this.client.getEndpoint(),
                                workerId,
                                this.client.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Retrieves an existing worker by Id.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     state: String(active/draining/inactive) (Optional)
     *     queueAssignments (Optional): {
     *         String: Object (Optional)
     *     }
     *     totalCapacity: Integer (Optional)
     *     labels (Optional): {
     *         String: Object (Optional)
     *     }
     *     tags (Optional): {
     *         String: Object (Optional)
     *     }
     *     channelConfigurations (Optional): {
     *         String (Optional): {
     *             capacityCostPerJob: int (Required)
     *             maxNumberOfJobs: Integer (Optional)
     *         }
     *     }
     *     offers (Optional): [
     *          (Optional){
     *             id: String (Required)
     *             jobId: String (Required)
     *             capacityCost: int (Required)
     *             offerTimeUtc: OffsetDateTime (Optional)
     *             expiryTimeUtc: OffsetDateTime (Optional)
     *         }
     *     ]
     *     assignedJobs (Optional): [
     *          (Optional){
     *             id: String (Required)
     *             jobId: String (Required)
     *             capacityCost: int (Required)
     *             assignTime: OffsetDateTime (Required)
     *         }
     *     ]
     *     loadRatio: Double (Optional)
     *     availableForOffers: Boolean (Optional)
     * }
     * }</pre>
     *
     * @param workerId Id of the worker to retrieve.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an entity for jobs to be routed to along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getWorkerWithResponse(String workerId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getWorkerSync(
                this.client.getEndpoint(),
                workerId,
                this.client.getServiceVersion().getVersion(),
                accept,
                requestOptions,
                Context.NONE);
    }

    /**
     * Deletes a worker and all of its traces.
     *
     * @param workerId Id of the worker to delete.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteWorkerWithResponseAsync(String workerId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.deleteWorker(
                                this.client.getEndpoint(),
                                workerId,
                                this.client.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Deletes a worker and all of its traces.
     *
     * @param workerId Id of the worker to delete.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWorkerWithResponse(String workerId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.deleteWorkerSync(
                this.client.getEndpoint(),
                workerId,
                this.client.getServiceVersion().getVersion(),
                accept,
                requestOptions,
                Context.NONE);
    }

    /**
     * Retrieves existing workers.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>status</td><td>String</td><td>No</td><td>(Optional) If specified, select workers by worker status. Allowed values: "active", "draining", "inactive", "all".</td></tr>
     *     <tr><td>channelId</td><td>String</td><td>No</td><td>(Optional) If specified, select workers who have a channel configuration with this channel</td></tr>
     *     <tr><td>queueId</td><td>String</td><td>No</td><td>(Optional) If specified, select workers who are assigned to this queue</td></tr>
     *     <tr><td>hasCapacity</td><td>Boolean</td><td>No</td><td>(Optional) If set to true, select only workers who have capacity for the channel specified by `channelId` or for any channel
     *             if `channelId` not specified. If set to false, then will return all workers including workers without any capacity for jobs. Defaults to false.</td></tr>
     *     <tr><td>maxPageSize</td><td>Integer</td><td>No</td><td>Number of objects to return per page</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     routerWorker (Optional): {
     *         id: String (Optional)
     *         state: String(active/draining/inactive) (Optional)
     *         queueAssignments (Optional): {
     *             String: Object (Optional)
     *         }
     *         totalCapacity: Integer (Optional)
     *         labels (Optional): {
     *             String: Object (Optional)
     *         }
     *         tags (Optional): {
     *             String: Object (Optional)
     *         }
     *         channelConfigurations (Optional): {
     *             String (Optional): {
     *                 capacityCostPerJob: int (Required)
     *                 maxNumberOfJobs: Integer (Optional)
     *             }
     *         }
     *         offers (Optional): [
     *              (Optional){
     *                 id: String (Required)
     *                 jobId: String (Required)
     *                 capacityCost: int (Required)
     *                 offerTimeUtc: OffsetDateTime (Optional)
     *                 expiryTimeUtc: OffsetDateTime (Optional)
     *             }
     *         ]
     *         assignedJobs (Optional): [
     *              (Optional){
     *                 id: String (Required)
     *                 jobId: String (Required)
     *                 capacityCost: int (Required)
     *                 assignTime: OffsetDateTime (Required)
     *             }
     *         ]
     *         loadRatio: Double (Optional)
     *         availableForOffers: Boolean (Optional)
     *     }
     *     etag: String (Optional)
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a paged collection of workers along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listWorkersSinglePageAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                        context ->
                                service.listWorkers(
                                        this.client.getEndpoint(),
                                        this.client.getServiceVersion().getVersion(),
                                        accept,
                                        requestOptions,
                                        context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Retrieves existing workers.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>status</td><td>String</td><td>No</td><td>(Optional) If specified, select workers by worker status. Allowed values: "active", "draining", "inactive", "all".</td></tr>
     *     <tr><td>channelId</td><td>String</td><td>No</td><td>(Optional) If specified, select workers who have a channel configuration with this channel</td></tr>
     *     <tr><td>queueId</td><td>String</td><td>No</td><td>(Optional) If specified, select workers who are assigned to this queue</td></tr>
     *     <tr><td>hasCapacity</td><td>Boolean</td><td>No</td><td>(Optional) If set to true, select only workers who have capacity for the channel specified by `channelId` or for any channel
     *             if `channelId` not specified. If set to false, then will return all workers including workers without any capacity for jobs. Defaults to false.</td></tr>
     *     <tr><td>maxPageSize</td><td>Integer</td><td>No</td><td>Number of objects to return per page</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     routerWorker (Optional): {
     *         id: String (Optional)
     *         state: String(active/draining/inactive) (Optional)
     *         queueAssignments (Optional): {
     *             String: Object (Optional)
     *         }
     *         totalCapacity: Integer (Optional)
     *         labels (Optional): {
     *             String: Object (Optional)
     *         }
     *         tags (Optional): {
     *             String: Object (Optional)
     *         }
     *         channelConfigurations (Optional): {
     *             String (Optional): {
     *                 capacityCostPerJob: int (Required)
     *                 maxNumberOfJobs: Integer (Optional)
     *             }
     *         }
     *         offers (Optional): [
     *              (Optional){
     *                 id: String (Required)
     *                 jobId: String (Required)
     *                 capacityCost: int (Required)
     *                 offerTimeUtc: OffsetDateTime (Optional)
     *                 expiryTimeUtc: OffsetDateTime (Optional)
     *             }
     *         ]
     *         assignedJobs (Optional): [
     *              (Optional){
     *                 id: String (Required)
     *                 jobId: String (Required)
     *                 capacityCost: int (Required)
     *                 assignTime: OffsetDateTime (Required)
     *             }
     *         ]
     *         loadRatio: Double (Optional)
     *         availableForOffers: Boolean (Optional)
     *     }
     *     etag: String (Optional)
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a paged collection of workers as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listWorkersAsync(RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
                requestOptions != null && requestOptions.getContext() != null
                        ? requestOptions.getContext()
                        : Context.NONE);
        return new PagedFlux<>(
                () -> listWorkersSinglePageAsync(requestOptions),
                nextLink -> listWorkersNextSinglePageAsync(nextLink, requestOptionsForNextPage));
    }

    /**
     * Retrieves existing workers.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>status</td><td>String</td><td>No</td><td>(Optional) If specified, select workers by worker status. Allowed values: "active", "draining", "inactive", "all".</td></tr>
     *     <tr><td>channelId</td><td>String</td><td>No</td><td>(Optional) If specified, select workers who have a channel configuration with this channel</td></tr>
     *     <tr><td>queueId</td><td>String</td><td>No</td><td>(Optional) If specified, select workers who are assigned to this queue</td></tr>
     *     <tr><td>hasCapacity</td><td>Boolean</td><td>No</td><td>(Optional) If set to true, select only workers who have capacity for the channel specified by `channelId` or for any channel
     *             if `channelId` not specified. If set to false, then will return all workers including workers without any capacity for jobs. Defaults to false.</td></tr>
     *     <tr><td>maxPageSize</td><td>Integer</td><td>No</td><td>Number of objects to return per page</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     routerWorker (Optional): {
     *         id: String (Optional)
     *         state: String(active/draining/inactive) (Optional)
     *         queueAssignments (Optional): {
     *             String: Object (Optional)
     *         }
     *         totalCapacity: Integer (Optional)
     *         labels (Optional): {
     *             String: Object (Optional)
     *         }
     *         tags (Optional): {
     *             String: Object (Optional)
     *         }
     *         channelConfigurations (Optional): {
     *             String (Optional): {
     *                 capacityCostPerJob: int (Required)
     *                 maxNumberOfJobs: Integer (Optional)
     *             }
     *         }
     *         offers (Optional): [
     *              (Optional){
     *                 id: String (Required)
     *                 jobId: String (Required)
     *                 capacityCost: int (Required)
     *                 offerTimeUtc: OffsetDateTime (Optional)
     *                 expiryTimeUtc: OffsetDateTime (Optional)
     *             }
     *         ]
     *         assignedJobs (Optional): [
     *              (Optional){
     *                 id: String (Required)
     *                 jobId: String (Required)
     *                 capacityCost: int (Required)
     *                 assignTime: OffsetDateTime (Required)
     *             }
     *         ]
     *         loadRatio: Double (Optional)
     *         availableForOffers: Boolean (Optional)
     *     }
     *     etag: String (Optional)
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a paged collection of workers along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listWorkersSinglePage(RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res =
                service.listWorkersSync(
                        this.client.getEndpoint(),
                        this.client.getServiceVersion().getVersion(),
                        accept,
                        requestOptions,
                        Context.NONE);
        return new PagedResponseBase<>(
                res.getRequest(),
                res.getStatusCode(),
                res.getHeaders(),
                getValues(res.getValue(), "value"),
                getNextLink(res.getValue(), "nextLink"),
                null);
    }

    /**
     * Retrieves existing workers.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>status</td><td>String</td><td>No</td><td>(Optional) If specified, select workers by worker status. Allowed values: "active", "draining", "inactive", "all".</td></tr>
     *     <tr><td>channelId</td><td>String</td><td>No</td><td>(Optional) If specified, select workers who have a channel configuration with this channel</td></tr>
     *     <tr><td>queueId</td><td>String</td><td>No</td><td>(Optional) If specified, select workers who are assigned to this queue</td></tr>
     *     <tr><td>hasCapacity</td><td>Boolean</td><td>No</td><td>(Optional) If set to true, select only workers who have capacity for the channel specified by `channelId` or for any channel
     *             if `channelId` not specified. If set to false, then will return all workers including workers without any capacity for jobs. Defaults to false.</td></tr>
     *     <tr><td>maxPageSize</td><td>Integer</td><td>No</td><td>Number of objects to return per page</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     routerWorker (Optional): {
     *         id: String (Optional)
     *         state: String(active/draining/inactive) (Optional)
     *         queueAssignments (Optional): {
     *             String: Object (Optional)
     *         }
     *         totalCapacity: Integer (Optional)
     *         labels (Optional): {
     *             String: Object (Optional)
     *         }
     *         tags (Optional): {
     *             String: Object (Optional)
     *         }
     *         channelConfigurations (Optional): {
     *             String (Optional): {
     *                 capacityCostPerJob: int (Required)
     *                 maxNumberOfJobs: Integer (Optional)
     *             }
     *         }
     *         offers (Optional): [
     *              (Optional){
     *                 id: String (Required)
     *                 jobId: String (Required)
     *                 capacityCost: int (Required)
     *                 offerTimeUtc: OffsetDateTime (Optional)
     *                 expiryTimeUtc: OffsetDateTime (Optional)
     *             }
     *         ]
     *         assignedJobs (Optional): [
     *              (Optional){
     *                 id: String (Required)
     *                 jobId: String (Required)
     *                 capacityCost: int (Required)
     *                 assignTime: OffsetDateTime (Required)
     *             }
     *         ]
     *         loadRatio: Double (Optional)
     *         availableForOffers: Boolean (Optional)
     *     }
     *     etag: String (Optional)
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a paged collection of workers as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listWorkers(RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
                requestOptions != null && requestOptions.getContext() != null
                        ? requestOptions.getContext()
                        : Context.NONE);
        return new PagedIterable<>(
                () -> listWorkersSinglePage(requestOptions),
                nextLink -> listWorkersNextSinglePage(nextLink, requestOptionsForNextPage));
    }

    /**
     * Get the next page of items.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     routerJob (Optional): {
     *         id: String (Optional)
     *         channelReference: String (Optional)
     *         jobStatus: String(pendingClassification/queued/assigned/completed/closed/cancelled/classificationFailed/created/pendingSchedule/scheduled/scheduleFailed/waitingForActivation) (Optional)
     *         enqueueTimeUtc: OffsetDateTime (Optional)
     *         channelId: String (Optional)
     *         classificationPolicyId: String (Optional)
     *         queueId: String (Optional)
     *         priority: Integer (Optional)
     *         dispositionCode: String (Optional)
     *         requestedWorkerSelectors (Optional): [
     *              (Optional){
     *                 key: String (Required)
     *                 labelOperator: String(equal/notEqual/lessThan/lessThanEqual/greaterThan/greaterThanEqual) (Required)
     *                 value: Object (Optional)
     *                 ttlSeconds: Double (Optional)
     *                 expedite: Boolean (Optional)
     *                 state: String(active/expired) (Optional)
     *                 expireTime: OffsetDateTime (Optional)
     *             }
     *         ]
     *         attachedWorkerSelectors (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         labels (Optional): {
     *             String: Object (Optional)
     *         }
     *         assignments (Optional): {
     *             String (Optional): {
     *                 id: String (Required)
     *                 workerId: String (Optional)
     *                 assignTime: OffsetDateTime (Required)
     *                 completeTime: OffsetDateTime (Optional)
     *                 closeTime: OffsetDateTime (Optional)
     *             }
     *         }
     *         tags (Optional): {
     *             String: Object (Optional)
     *         }
     *         notes (Optional): {
     *             String: String (Optional)
     *         }
     *         unavailableForMatching: Boolean (Optional)
     *         scheduledTimeUtc: OffsetDateTime (Optional)
     *     }
     *     etag: String (Optional)
     * }
     * }</pre>
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a paged collection of jobs along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listJobsNextSinglePageAsync(
            String nextLink, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                        context ->
                                service.listJobsNext(
                                        nextLink, this.client.getEndpoint(), accept, requestOptions, context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Get the next page of items.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     routerJob (Optional): {
     *         id: String (Optional)
     *         channelReference: String (Optional)
     *         jobStatus: String(pendingClassification/queued/assigned/completed/closed/cancelled/classificationFailed/created/pendingSchedule/scheduled/scheduleFailed/waitingForActivation) (Optional)
     *         enqueueTimeUtc: OffsetDateTime (Optional)
     *         channelId: String (Optional)
     *         classificationPolicyId: String (Optional)
     *         queueId: String (Optional)
     *         priority: Integer (Optional)
     *         dispositionCode: String (Optional)
     *         requestedWorkerSelectors (Optional): [
     *              (Optional){
     *                 key: String (Required)
     *                 labelOperator: String(equal/notEqual/lessThan/lessThanEqual/greaterThan/greaterThanEqual) (Required)
     *                 value: Object (Optional)
     *                 ttlSeconds: Double (Optional)
     *                 expedite: Boolean (Optional)
     *                 state: String(active/expired) (Optional)
     *                 expireTime: OffsetDateTime (Optional)
     *             }
     *         ]
     *         attachedWorkerSelectors (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         labels (Optional): {
     *             String: Object (Optional)
     *         }
     *         assignments (Optional): {
     *             String (Optional): {
     *                 id: String (Required)
     *                 workerId: String (Optional)
     *                 assignTime: OffsetDateTime (Required)
     *                 completeTime: OffsetDateTime (Optional)
     *                 closeTime: OffsetDateTime (Optional)
     *             }
     *         }
     *         tags (Optional): {
     *             String: Object (Optional)
     *         }
     *         notes (Optional): {
     *             String: String (Optional)
     *         }
     *         unavailableForMatching: Boolean (Optional)
     *         scheduledTimeUtc: OffsetDateTime (Optional)
     *     }
     *     etag: String (Optional)
     * }
     * }</pre>
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a paged collection of jobs along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listJobsNextSinglePage(String nextLink, RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res =
                service.listJobsNextSync(nextLink, this.client.getEndpoint(), accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(
                res.getRequest(),
                res.getStatusCode(),
                res.getHeaders(),
                getValues(res.getValue(), "value"),
                getNextLink(res.getValue(), "nextLink"),
                null);
    }

    /**
     * Get the next page of items.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     routerWorker (Optional): {
     *         id: String (Optional)
     *         state: String(active/draining/inactive) (Optional)
     *         queueAssignments (Optional): {
     *             String: Object (Optional)
     *         }
     *         totalCapacity: Integer (Optional)
     *         labels (Optional): {
     *             String: Object (Optional)
     *         }
     *         tags (Optional): {
     *             String: Object (Optional)
     *         }
     *         channelConfigurations (Optional): {
     *             String (Optional): {
     *                 capacityCostPerJob: int (Required)
     *                 maxNumberOfJobs: Integer (Optional)
     *             }
     *         }
     *         offers (Optional): [
     *              (Optional){
     *                 id: String (Required)
     *                 jobId: String (Required)
     *                 capacityCost: int (Required)
     *                 offerTimeUtc: OffsetDateTime (Optional)
     *                 expiryTimeUtc: OffsetDateTime (Optional)
     *             }
     *         ]
     *         assignedJobs (Optional): [
     *              (Optional){
     *                 id: String (Required)
     *                 jobId: String (Required)
     *                 capacityCost: int (Required)
     *                 assignTime: OffsetDateTime (Required)
     *             }
     *         ]
     *         loadRatio: Double (Optional)
     *         availableForOffers: Boolean (Optional)
     *     }
     *     etag: String (Optional)
     * }
     * }</pre>
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a paged collection of workers along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listWorkersNextSinglePageAsync(
            String nextLink, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                        context ->
                                service.listWorkersNext(
                                        nextLink, this.client.getEndpoint(), accept, requestOptions, context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Get the next page of items.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     routerWorker (Optional): {
     *         id: String (Optional)
     *         state: String(active/draining/inactive) (Optional)
     *         queueAssignments (Optional): {
     *             String: Object (Optional)
     *         }
     *         totalCapacity: Integer (Optional)
     *         labels (Optional): {
     *             String: Object (Optional)
     *         }
     *         tags (Optional): {
     *             String: Object (Optional)
     *         }
     *         channelConfigurations (Optional): {
     *             String (Optional): {
     *                 capacityCostPerJob: int (Required)
     *                 maxNumberOfJobs: Integer (Optional)
     *             }
     *         }
     *         offers (Optional): [
     *              (Optional){
     *                 id: String (Required)
     *                 jobId: String (Required)
     *                 capacityCost: int (Required)
     *                 offerTimeUtc: OffsetDateTime (Optional)
     *                 expiryTimeUtc: OffsetDateTime (Optional)
     *             }
     *         ]
     *         assignedJobs (Optional): [
     *              (Optional){
     *                 id: String (Required)
     *                 jobId: String (Required)
     *                 capacityCost: int (Required)
     *                 assignTime: OffsetDateTime (Required)
     *             }
     *         ]
     *         loadRatio: Double (Optional)
     *         availableForOffers: Boolean (Optional)
     *     }
     *     etag: String (Optional)
     * }
     * }</pre>
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a paged collection of workers along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listWorkersNextSinglePage(String nextLink, RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res =
                service.listWorkersNextSync(nextLink, this.client.getEndpoint(), accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(
                res.getRequest(),
                res.getStatusCode(),
                res.getHeaders(),
                getValues(res.getValue(), "value"),
                getNextLink(res.getValue(), "nextLink"),
                null);
    }

    private List<BinaryData> getValues(BinaryData binaryData, String path) {
        try {
            Map<?, ?> obj = binaryData.toObject(Map.class);
            List<?> values = (List<?>) obj.get(path);
            return values.stream().map(BinaryData::fromObject).collect(Collectors.toList());
        } catch (RuntimeException e) {
            return null;
        }
    }

    private String getNextLink(BinaryData binaryData, String path) {
        try {
            Map<?, ?> obj = binaryData.toObject(Map.class);
            return (String) obj.get(path);
        } catch (RuntimeException e) {
            return null;
        }
    }
}
