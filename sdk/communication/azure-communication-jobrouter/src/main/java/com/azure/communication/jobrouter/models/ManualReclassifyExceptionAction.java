// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.communication.jobrouter.models;

import com.azure.communication.jobrouter.implementation.JsonMergePatchHelper;
import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * An action that manually reclassifies a job by providing the queue, priority and worker selectors.
 */
@Fluent
public final class ManualReclassifyExceptionAction extends ExceptionAction {

    /*
     * The type discriminator describing a sub-type of ExceptionAction.
     */
    @Generated
    private ExceptionActionKind kind = ExceptionActionKind.MANUAL_RECLASSIFY;

    /*
     * Updated QueueId.
     */
    @Generated
    private String queueId;

    /*
     * Updated Priority.
     */
    @Generated
    private Integer priority;

    /*
     * Updated WorkerSelectors.
     */
    @Generated
    private List<RouterWorkerSelector> workerSelectors;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    /**
     * Creates an instance of ManualReclassifyExceptionAction class.
     */
    @Generated
    public ManualReclassifyExceptionAction() {
    }

    /**
     * Get the kind property: The type discriminator describing a sub-type of ExceptionAction.
     *
     * @return the kind value.
     */
    @Generated
    @Override
    public ExceptionActionKind getKind() {
        return this.kind;
    }

    /**
     * Get the queueId property: Updated QueueId.
     *
     * @return the queueId value.
     */
    @Generated
    public String getQueueId() {
        return this.queueId;
    }

    /**
     * Set the queueId property: Updated QueueId.
     *
     * @param queueId the queueId value to set.
     * @return the ManualReclassifyExceptionAction object itself.
     */
    @Generated
    public ManualReclassifyExceptionAction setQueueId(String queueId) {
        this.queueId = queueId;
        this.updatedProperties.add("queueId");
        return this;
    }

    /**
     * Get the priority property: Updated Priority.
     *
     * @return the priority value.
     */
    @Generated
    public Integer getPriority() {
        return this.priority;
    }

    /**
     * Set the priority property: Updated Priority.
     *
     * @param priority the priority value to set.
     * @return the ManualReclassifyExceptionAction object itself.
     */
    @Generated
    public ManualReclassifyExceptionAction setPriority(Integer priority) {
        this.priority = priority;
        this.updatedProperties.add("priority");
        return this;
    }

    /**
     * Get the workerSelectors property: Updated WorkerSelectors.
     *
     * @return the workerSelectors value.
     */
    @Generated
    public List<RouterWorkerSelector> getWorkerSelectors() {
        return this.workerSelectors;
    }

    /**
     * Set the workerSelectors property: Updated WorkerSelectors.
     *
     * @param workerSelectors the workerSelectors value to set.
     * @return the ManualReclassifyExceptionAction object itself.
     */
    @Generated
    public ManualReclassifyExceptionAction setWorkerSelectors(List<RouterWorkerSelector> workerSelectors) {
        this.workerSelectors = workerSelectors;
        this.updatedProperties.add("workerSelectors");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public ManualReclassifyExceptionAction setId(String id) {
        super.setId(id);
        this.updatedProperties.add("id");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (JsonMergePatchHelper.getExceptionActionAccessor().isJsonMergePatch(this)) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeStringField("id", getId());
            jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
            jsonWriter.writeStringField("queueId", this.queueId);
            jsonWriter.writeNumberField("priority", this.priority);
            jsonWriter.writeArrayField("workerSelectors", this.workerSelectors,
                (writer, element) -> writer.writeJson(element));
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (updatedProperties.contains("id")) {
            if (getId() == null) {
                jsonWriter.writeNullField("id");
            } else {
                jsonWriter.writeStringField("id", getId());
            }
        }
        jsonWriter.writeStringField("kind", this.kind.toString());
        if (updatedProperties.contains("queueId")) {
            if (this.queueId == null) {
                jsonWriter.writeNullField("queueId");
            } else {
                jsonWriter.writeStringField("queueId", this.queueId);
            }
        }
        if (updatedProperties.contains("priority")) {
            if (this.priority == null) {
                jsonWriter.writeNullField("priority");
            } else {
                jsonWriter.writeNumberField("priority", this.priority);
            }
        }
        if (updatedProperties.contains("workerSelectors")) {
            if (this.workerSelectors == null) {
                jsonWriter.writeNullField("workerSelectors");
            } else {
                jsonWriter.writeArrayField("workerSelectors", this.workerSelectors,
                    (writer, element) -> writer.writeJson(element));
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ManualReclassifyExceptionAction from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ManualReclassifyExceptionAction if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ManualReclassifyExceptionAction.
     */
    @Generated
    public static ManualReclassifyExceptionAction fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ManualReclassifyExceptionAction deserializedManualReclassifyExceptionAction
                = new ManualReclassifyExceptionAction();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("id".equals(fieldName)) {
                    JsonMergePatchHelper.getExceptionActionAccessor()
                        .setId(deserializedManualReclassifyExceptionAction, reader.getString());
                } else if ("kind".equals(fieldName)) {
                    deserializedManualReclassifyExceptionAction.kind
                        = ExceptionActionKind.fromString(reader.getString());
                } else if ("queueId".equals(fieldName)) {
                    deserializedManualReclassifyExceptionAction.queueId = reader.getString();
                } else if ("priority".equals(fieldName)) {
                    deserializedManualReclassifyExceptionAction.priority = reader.getNullable(JsonReader::getInt);
                } else if ("workerSelectors".equals(fieldName)) {
                    List<RouterWorkerSelector> workerSelectors
                        = reader.readArray(reader1 -> RouterWorkerSelector.fromJson(reader1));
                    deserializedManualReclassifyExceptionAction.workerSelectors = workerSelectors;
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedManualReclassifyExceptionAction;
        });
    }
}
