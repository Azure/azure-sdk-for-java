// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.communication.jobrouter.models;

import com.azure.communication.jobrouter.implementation.JsonMergePatchHelper;
import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * Describes multiple sets of worker selectors, of which one will be selected and attached according to a weighting.
 */
@Fluent
public final class WeightedAllocationWorkerSelectorAttachment extends WorkerSelectorAttachment {

    /*
     * The type discriminator describing a sub-type of WorkerSelectorAttachment.
     */
    @Generated
    private WorkerSelectorAttachmentKind kind = WorkerSelectorAttachmentKind.WEIGHTED_ALLOCATION;

    /*
     * A collection of percentage based weighted allocations.
     */
    @Generated
    private List<WorkerWeightedAllocation> allocations;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    /**
     * Creates an instance of WeightedAllocationWorkerSelectorAttachment class.
     */
    @Generated
    public WeightedAllocationWorkerSelectorAttachment() {
    }

    /**
     * Get the kind property: The type discriminator describing a sub-type of WorkerSelectorAttachment.
     *
     * @return the kind value.
     */
    @Generated
    @Override
    public WorkerSelectorAttachmentKind getKind() {
        return this.kind;
    }

    /**
     * Get the allocations property: A collection of percentage based weighted allocations.
     *
     * @return the allocations value.
     */
    @Generated
    public List<WorkerWeightedAllocation> getAllocations() {
        return this.allocations;
    }

    /**
     * Set the allocations property: A collection of percentage based weighted allocations.
     * <p>Required when create the resource.</p>
     *
     * @param allocations the allocations value to set.
     * @return the WeightedAllocationWorkerSelectorAttachment object itself.
     */
    @Generated
    public WeightedAllocationWorkerSelectorAttachment setAllocations(List<WorkerWeightedAllocation> allocations) {
        this.allocations = allocations;
        this.updatedProperties.add("allocations");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (JsonMergePatchHelper.getWorkerSelectorAttachmentAccessor().isJsonMergePatch(this)) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
            jsonWriter.writeArrayField("allocations", this.allocations, (writer, element) -> writer.writeJson(element));
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("kind", this.kind.toString());
        if (updatedProperties.contains("allocations")) {
            if (this.allocations == null) {
                jsonWriter.writeNullField("allocations");
            } else {
                jsonWriter.writeArrayField("allocations", this.allocations,
                    (writer, element) -> writer.writeJson(element));
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WeightedAllocationWorkerSelectorAttachment from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of WeightedAllocationWorkerSelectorAttachment if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the WeightedAllocationWorkerSelectorAttachment.
     */
    @Generated
    public static WeightedAllocationWorkerSelectorAttachment fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WeightedAllocationWorkerSelectorAttachment deserializedWeightedAllocationWorkerSelectorAttachment
                = new WeightedAllocationWorkerSelectorAttachment();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("kind".equals(fieldName)) {
                    deserializedWeightedAllocationWorkerSelectorAttachment.kind
                        = WorkerSelectorAttachmentKind.fromString(reader.getString());
                } else if ("allocations".equals(fieldName)) {
                    List<WorkerWeightedAllocation> allocations
                        = reader.readArray(reader1 -> WorkerWeightedAllocation.fromJson(reader1));
                    deserializedWeightedAllocationWorkerSelectorAttachment.allocations = allocations;
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedWeightedAllocationWorkerSelectorAttachment;
        });
    }

    /**
     * Creates an instance of WeightedAllocationWorkerSelectorAttachment class.
     *
     * @param allocations the allocations value to set.
     */
    public WeightedAllocationWorkerSelectorAttachment(List<WorkerWeightedAllocation> allocations) {
        this.allocations = allocations;
        this.updatedProperties.add("allocations");
    }
}
