// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.communication.jobrouter.models;

import com.azure.core.annotation.Generated;
import com.azure.core.util.ExpandableStringEnum;
import java.util.Collection;

/**
 * Enums used to filters workers by state.
 */
public final class RouterWorkerStateSelector extends ExpandableStringEnum<RouterWorkerStateSelector> {

    /**
     * Worker is active and available to take offers.
     */
    @Generated
    public static final RouterWorkerStateSelector ACTIVE = fromString("active");

    /**
     * Worker is not active, if there are existing offers they are being revoked. No new offers are sent.
     */
    @Generated
    public static final RouterWorkerStateSelector DRAINING = fromString("draining");

    /**
     * Worker is not active. No new offers are sent.
     */
    @Generated
    public static final RouterWorkerStateSelector INACTIVE = fromString("inactive");

    /**
     * Worker is active or draining or inactive.
     */
    @Generated
    public static final RouterWorkerStateSelector ALL = fromString("all");

    /**
     * Creates a new instance of RouterWorkerStateSelector value.
     *
     * @deprecated Use the {@link #fromString(String)} factory method.
     */
    @Generated
    @Deprecated
    public RouterWorkerStateSelector() {
    }

    /**
     * Creates or finds a RouterWorkerStateSelector from its string representation.
     *
     * @param name a name to look for.
     * @return the corresponding RouterWorkerStateSelector.
     */
    @Generated
    public static RouterWorkerStateSelector fromString(String name) {
        return fromString(name, RouterWorkerStateSelector.class);
    }

    /**
     * Gets known RouterWorkerStateSelector values.
     *
     * @return known RouterWorkerStateSelector values.
     */
    @Generated
    public static Collection<RouterWorkerStateSelector> values() {
        return values(RouterWorkerStateSelector.class);
    }
}
