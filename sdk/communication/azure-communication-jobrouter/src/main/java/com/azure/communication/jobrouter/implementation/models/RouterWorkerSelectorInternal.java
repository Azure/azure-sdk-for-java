// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.communication.jobrouter.implementation.models;

import com.azure.communication.jobrouter.implementation.JsonMergePatchHelper;
import com.azure.communication.jobrouter.models.LabelOperator;
import com.azure.communication.jobrouter.models.RouterWorkerSelectorStatus;
import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.HashSet;
import java.util.Set;

/**
 * Describes a condition that must be met against a set of labels for worker selection.
 */
@Fluent
public final class RouterWorkerSelectorInternal implements JsonSerializable<RouterWorkerSelectorInternal> {

    /*
     * The label key to query against.
     */
    @Generated
    private String key;

    /*
     * Describes how the value of the label is compared to the value defined on the worker selector.
     */
    @Generated
    private LabelOperator labelOperator;

    /*
     * The value to compare against the actual label value with the given operator. Values must be primitive values - number, string, boolean.
     */
    @Generated
    private Object value;

    /*
     * Describes how long this label selector is valid in seconds.
     */
    @Generated
    private Double expiresAfterSeconds;

    /*
     * Pushes a job to the front of the queue as long as this selector is active.
     */
    @Generated
    private Boolean expedite;

    /*
     * Status of the worker selector.
     */
    @Generated
    private RouterWorkerSelectorStatus status;

    /*
     * The time at which this worker selector expires in UTC.
     */
    @Generated
    private OffsetDateTime expiresAt;

    /**
     * Get the key property: The label key to query against.
     *
     * @return the key value.
     */
    @Generated
    public String getKey() {
        return this.key;
    }

    /**
     * Get the labelOperator property: Describes how the value of the label is compared to the value defined on the
     * worker selector.
     *
     * @return the labelOperator value.
     */
    @Generated
    public LabelOperator getLabelOperator() {
        return this.labelOperator;
    }

    /**
     * Get the value property: The value to compare against the actual label value with the given operator. Values must
     * be primitive values - number, string, boolean.
     *
     * @return the value value.
     */
    @Generated
    public Object getValue() {
        return this.value;
    }

    /**
     * Set the value property: The value to compare against the actual label value with the given operator. Values must
     * be primitive values - number, string, boolean.
     *
     * @param value the value value to set.
     * @return the RouterWorkerSelectorInternal object itself.
     */
    @Generated
    public RouterWorkerSelectorInternal setValue(Object value) {
        this.value = value;
        this.updatedProperties.add("value");
        return this;
    }

    /**
     * Get the expiresAfterSeconds property: Describes how long this label selector is valid in seconds.
     *
     * @return the expiresAfterSeconds value.
     */
    @Generated
    public Double getExpiresAfterSeconds() {
        return this.expiresAfterSeconds;
    }

    /**
     * Set the expiresAfterSeconds property: Describes how long this label selector is valid in seconds.
     *
     * @param expiresAfterSeconds the expiresAfterSeconds value to set.
     * @return the RouterWorkerSelectorInternal object itself.
     */
    @Generated
    public RouterWorkerSelectorInternal setExpiresAfterSeconds(Double expiresAfterSeconds) {
        this.expiresAfterSeconds = expiresAfterSeconds;
        this.updatedProperties.add("expiresAfterSeconds");
        return this;
    }

    /**
     * Get the expedite property: Pushes a job to the front of the queue as long as this selector is active.
     *
     * @return the expedite value.
     */
    @Generated
    public Boolean isExpedite() {
        return this.expedite;
    }

    /**
     * Set the expedite property: Pushes a job to the front of the queue as long as this selector is active.
     *
     * @param expedite the expedite value to set.
     * @return the RouterWorkerSelectorInternal object itself.
     */
    @Generated
    public RouterWorkerSelectorInternal setExpedite(Boolean expedite) {
        this.expedite = expedite;
        this.updatedProperties.add("expedite");
        return this;
    }

    /**
     * Get the status property: Status of the worker selector.
     *
     * @return the status value.
     */
    @Generated
    public RouterWorkerSelectorStatus getStatus() {
        return this.status;
    }

    /**
     * Set status.
     *
     * @param status status.
     * @return this.
     */
    public RouterWorkerSelectorInternal setStatus(RouterWorkerSelectorStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Get the expiresAt property: The time at which this worker selector expires in UTC.
     *
     * @return the expiresAt value.
     */
    @Generated
    public OffsetDateTime getExpiresAt() {
        return this.expiresAt;
    }

    /**
     * Set expirestAt.
     *
     * @param expiresAt expiresAt.
     * @return this.
     */
    public RouterWorkerSelectorInternal setExpiresAt(OffsetDateTime expiresAt) {
        this.expiresAt = expiresAt;
        return this;
    }

    @Generated
    private boolean jsonMergePatch;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    @Generated
    void serializeAsJsonMergePatch(boolean jsonMergePatch) {
        this.jsonMergePatch = jsonMergePatch;
    }

    static {
        JsonMergePatchHelper.setRouterWorkerSelectorInternalAccessor((model, jsonMergePatchEnabled) -> {
            model.serializeAsJsonMergePatch(jsonMergePatchEnabled);
            return model;
        });
    }

    /**
     * Creates an instance of RouterWorkerSelectorInternal class.
     */
    @Generated
    public RouterWorkerSelectorInternal() {
    }

    /**
     * Set the key property: The label key to query against.
     * <p>Required when create the resource.</p>
     *
     * @param key the key value to set.
     * @return the RouterWorkerSelectorInternal object itself.
     */
    @Generated
    public RouterWorkerSelectorInternal setKey(String key) {
        this.key = key;
        this.updatedProperties.add("key");
        return this;
    }

    /**
     * Set the labelOperator property: Describes how the value of the label is compared to the value defined on the
     * worker selector.
     * <p>Required when create the resource.</p>
     *
     * @param labelOperator the labelOperator value to set.
     * @return the RouterWorkerSelectorInternal object itself.
     */
    @Generated
    public RouterWorkerSelectorInternal setLabelOperator(LabelOperator labelOperator) {
        this.labelOperator = labelOperator;
        this.updatedProperties.add("labelOperator");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (jsonMergePatch) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeStringField("key", this.key);
            jsonWriter.writeStringField("labelOperator",
                this.labelOperator == null ? null : this.labelOperator.toString());
            jsonWriter.writeUntypedField("value", this.value);
            jsonWriter.writeNumberField("expiresAfterSeconds", this.expiresAfterSeconds);
            jsonWriter.writeBooleanField("expedite", this.expedite);
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (updatedProperties.contains("key")) {
            if (this.key == null) {
                jsonWriter.writeNullField("key");
            } else {
                jsonWriter.writeStringField("key", this.key);
            }
        }
        if (updatedProperties.contains("labelOperator")) {
            if (this.labelOperator == null) {
                jsonWriter.writeNullField("labelOperator");
            } else {
                jsonWriter.writeStringField("labelOperator",
                    this.labelOperator == null ? null : this.labelOperator.toString());
            }
        }
        if (updatedProperties.contains("value")) {
            if (this.value == null) {
                jsonWriter.writeNullField("value");
            } else {
                jsonWriter.writeUntypedField("value", this.value);
            }
        }
        if (updatedProperties.contains("expiresAfterSeconds")) {
            if (this.expiresAfterSeconds == null) {
                jsonWriter.writeNullField("expiresAfterSeconds");
            } else {
                jsonWriter.writeNumberField("expiresAfterSeconds", this.expiresAfterSeconds);
            }
        }
        if (updatedProperties.contains("expedite")) {
            if (this.expedite == null) {
                jsonWriter.writeNullField("expedite");
            } else {
                jsonWriter.writeBooleanField("expedite", this.expedite);
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RouterWorkerSelectorInternal from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of RouterWorkerSelectorInternal if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the RouterWorkerSelectorInternal.
     */
    @Generated
    public static RouterWorkerSelectorInternal fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RouterWorkerSelectorInternal deserializedRouterWorkerSelectorInternal = new RouterWorkerSelectorInternal();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("key".equals(fieldName)) {
                    deserializedRouterWorkerSelectorInternal.key = reader.getString();
                } else if ("labelOperator".equals(fieldName)) {
                    deserializedRouterWorkerSelectorInternal.labelOperator
                        = LabelOperator.fromString(reader.getString());
                } else if ("value".equals(fieldName)) {
                    deserializedRouterWorkerSelectorInternal.value = reader.readUntyped();
                } else if ("expiresAfterSeconds".equals(fieldName)) {
                    deserializedRouterWorkerSelectorInternal.expiresAfterSeconds
                        = reader.getNullable(JsonReader::getDouble);
                } else if ("expedite".equals(fieldName)) {
                    deserializedRouterWorkerSelectorInternal.expedite = reader.getNullable(JsonReader::getBoolean);
                } else if ("status".equals(fieldName)) {
                    deserializedRouterWorkerSelectorInternal.status
                        = RouterWorkerSelectorStatus.fromString(reader.getString());
                } else if ("expiresAt".equals(fieldName)) {
                    deserializedRouterWorkerSelectorInternal.expiresAt
                        = reader.getNullable(nonNullReader -> OffsetDateTime.parse(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedRouterWorkerSelectorInternal;
        });
    }
}
