// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.communication.jobrouter;

import com.azure.communication.jobrouter.implementation.JobRouterClientImpl;
import com.azure.communication.jobrouter.implementation.JsonMergePatchHelper;
import com.azure.communication.jobrouter.implementation.models.CancelJobResultInternal;
import com.azure.communication.jobrouter.implementation.models.CloseJobResultInternal;
import com.azure.communication.jobrouter.implementation.models.CompleteJobResultInternal;
import com.azure.communication.jobrouter.implementation.models.DeclineJobOfferResultInternal;
import com.azure.communication.jobrouter.implementation.models.ReclassifyJobOptionsInternal;
import com.azure.communication.jobrouter.implementation.models.ReclassifyJobResultInternal;
import com.azure.communication.jobrouter.models.AcceptJobOfferResult;
import com.azure.communication.jobrouter.models.CancelJobOptions;
import com.azure.communication.jobrouter.models.RouterJob;
import com.azure.communication.jobrouter.models.RouterJobPositionDetails;
import com.azure.communication.jobrouter.models.RouterJobStatusSelector;
import com.azure.communication.jobrouter.models.RouterQueueStatistics;
import com.azure.communication.jobrouter.models.RouterWorker;
import com.azure.communication.jobrouter.models.RouterWorkerStateSelector;
import com.azure.communication.jobrouter.models.UnassignJobOptions;
import com.azure.communication.jobrouter.models.UnassignJobResult;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.HttpHeaderName;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.BinaryData;
import com.azure.core.util.DateTimeRfc1123;
import java.time.OffsetDateTime;
import com.azure.communication.jobrouter.implementation.converters.OptionBagAdapters;
import com.azure.communication.jobrouter.models.CreateJobOptions;
import com.azure.communication.jobrouter.models.CreateJobWithClassificationPolicyOptions;
import com.azure.communication.jobrouter.models.CreateWorkerOptions;

/**
 * Initializes a new instance of the synchronous JobRouterClient type.
 */
@ServiceClient(builder = JobRouterClientBuilder.class)
public final class JobRouterClient {

    @Generated
    private final JobRouterClientImpl serviceClient;

    /**
     * Initializes an instance of JobRouterClient class.
     *
     * @param serviceClient the service client implementation.
     */
    @Generated
    JobRouterClient(JobRouterClientImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Creates or updates a router job.
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>The request should only proceed if an entity matches this
     * string.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the
     * entity was not modified after this time.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     etag: String (Required)
     *     id: String (Required)
     *     channelReference: String (Optional)
     *     status: String(pendingClassification/queued/assigned/completed/closed/cancelled/classificationFailed/created/pendingSchedule/scheduled/scheduleFailed/waitingForActivation) (Optional)
     *     enqueuedAt: OffsetDateTime (Optional)
     *     channelId: String (Optional)
     *     classificationPolicyId: String (Optional)
     *     queueId: String (Optional)
     *     priority: Integer (Optional)
     *     dispositionCode: String (Optional)
     *     requestedWorkerSelectors (Optional): [
     *          (Optional){
     *             key: String (Optional, Required on create)
     *             labelOperator: String(equal/notEqual/lessThan/lessThanOrEqual/greaterThan/greaterThanOrEqual) (Optional, Required on create)
     *             value: Object (Optional)
     *             expiresAfterSeconds: Double (Optional)
     *             expedite: Boolean (Optional)
     *             status: String(active/expired) (Optional)
     *             expiresAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     attachedWorkerSelectors (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     labels (Optional): {
     *         String: Object (Required)
     *     }
     *     assignments (Optional): {
     *         String (Required): {
     *             assignmentId: String (Required)
     *             workerId: String (Optional)
     *             assignedAt: OffsetDateTime (Required)
     *             completedAt: OffsetDateTime (Optional)
     *             closedAt: OffsetDateTime (Optional)
     *         }
     *     }
     *     tags (Optional): {
     *         String: Object (Required)
     *     }
     *     notes (Optional): [
     *          (Optional){
     *             message: String (Optional, Required on create)
     *             addedAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     scheduledAt: OffsetDateTime (Optional)
     *     matchingMode (Optional): {
     *         kind: String(queueAndMatch/scheduleAndSuspend/suspend) (Required)
     *     }
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     etag: String (Required)
     *     id: String (Required)
     *     channelReference: String (Optional)
     *     status: String(pendingClassification/queued/assigned/completed/closed/cancelled/classificationFailed/created/pendingSchedule/scheduled/scheduleFailed/waitingForActivation) (Optional)
     *     enqueuedAt: OffsetDateTime (Optional)
     *     channelId: String (Optional)
     *     classificationPolicyId: String (Optional)
     *     queueId: String (Optional)
     *     priority: Integer (Optional)
     *     dispositionCode: String (Optional)
     *     requestedWorkerSelectors (Optional): [
     *          (Optional){
     *             key: String (Optional, Required on create)
     *             labelOperator: String(equal/notEqual/lessThan/lessThanOrEqual/greaterThan/greaterThanOrEqual) (Optional, Required on create)
     *             value: Object (Optional)
     *             expiresAfterSeconds: Double (Optional)
     *             expedite: Boolean (Optional)
     *             status: String(active/expired) (Optional)
     *             expiresAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     attachedWorkerSelectors (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     labels (Optional): {
     *         String: Object (Required)
     *     }
     *     assignments (Optional): {
     *         String (Required): {
     *             assignmentId: String (Required)
     *             workerId: String (Optional)
     *             assignedAt: OffsetDateTime (Required)
     *             completedAt: OffsetDateTime (Optional)
     *             closedAt: OffsetDateTime (Optional)
     *         }
     *     }
     *     tags (Optional): {
     *         String: Object (Required)
     *     }
     *     notes (Optional): [
     *          (Optional){
     *             message: String (Optional, Required on create)
     *             addedAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     scheduledAt: OffsetDateTime (Optional)
     *     matchingMode (Optional): {
     *         kind: String(queueAndMatch/scheduleAndSuspend/suspend) (Required)
     *     }
     * }
     * }</pre>
     *
     * @param jobId Id of a job.
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a unit of work to be routed along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<BinaryData> upsertJobWithResponse(String jobId, BinaryData resource, RequestOptions requestOptions) {
        return this.serviceClient.upsertJobWithResponse(jobId, resource, requestOptions);
    }

    /**
     * Updates a router job.
     *
     * <p>
     * <strong>Header Parameters</strong>
     *
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>If-Match</td>
     * <td>String</td>
     * <td>No</td>
     * <td>The request should only proceed if an entity matches this string.</td>
     * </tr>
     * <tr>
     * <td>If-Unmodified-Since</td>
     * <td>OffsetDateTime</td>
     * <td>No</td>
     * <td>The request should only proceed if the entity was not modified after this time.</td>
     * </tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p>
     * <strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     jobId: String (Required)
     *     channelReference: String (Optional)
     *     status: String(pendingClassification/queued/assigned/completed/closed/cancelled/classificationFailed/created/pendingSchedule/scheduled/scheduleFailed/waitingForActivation) (Optional)
     *     enqueuedAt: OffsetDateTime (Optional)
     *     channelId: String (Optional)
     *     classificationPolicyId: String (Optional)
     *     queueId: String (Optional)
     *     priority: Integer (Optional)
     *     dispositionCode: String (Optional)
     *     requestedWorkerSelectors (Optional): [
     *          (Optional){
     *             key: String (Required)
     *             labelOperator: String(equal/notEqual/lessThan/lessThanEqual/greaterThan/greaterThanEqual) (Required)
     *             value: Object (Optional)
     *             expiresAfterSeconds: Double (Optional)
     *             expedite: Boolean (Optional)
     *             status: String(active/expired) (Optional)
     *             expiresAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     attachedWorkerSelectors (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     labels (Optional): {
     *         String: Object (Optional)
     *     }
     *     assignments (Optional): {
     *         String (Optional): {
     *             assignmentId: String (Required)
     *             workerId: String (Optional)
     *             assignedAt: OffsetDateTime (Required)
     *             completedAt: OffsetDateTime (Optional)
     *             closedAt: OffsetDateTime (Optional)
     *         }
     *     }
     *     tags (Optional): {
     *         String: Object (Optional)
     *     }
     *     notes (Optional): {
     *         String: String (Optional)
     *     }
     *     scheduledAt: OffsetDateTime (Optional)
     *     matchingMode (Optional): {
     *     }
     * }
     * }</pre>
     *
     * <p>
     * <strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     jobId: String (Required)
     *     channelReference: String (Optional)
     *     status: String(pendingClassification/queued/assigned/completed/closed/cancelled/classificationFailed/created/pendingSchedule/scheduled/scheduleFailed/waitingForActivation) (Optional)
     *     enqueuedAt: OffsetDateTime (Optional)
     *     channelId: String (Optional)
     *     classificationPolicyId: String (Optional)
     *     queueId: String (Optional)
     *     priority: Integer (Optional)
     *     dispositionCode: String (Optional)
     *     requestedWorkerSelectors (Optional): [
     *          (Optional){
     *             key: String (Required)
     *             labelOperator: String(equal/notEqual/lessThan/lessThanEqual/greaterThan/greaterThanEqual) (Required)
     *             value: Object (Optional)
     *             expiresAfterSeconds: Double (Optional)
     *             expedite: Boolean (Optional)
     *             status: String(active/expired) (Optional)
     *             expiresAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     attachedWorkerSelectors (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     labels (Optional): {
     *         String: Object (Optional)
     *     }
     *     assignments (Optional): {
     *         String (Optional): {
     *             assignmentId: String (Required)
     *             workerId: String (Optional)
     *             assignedAt: OffsetDateTime (Required)
     *             completedAt: OffsetDateTime (Optional)
     *             closedAt: OffsetDateTime (Optional)
     *         }
     *     }
     *     tags (Optional): {
     *         String: Object (Optional)
     *     }
     *     notes (Optional): {
     *         String: String (Optional)
     *     }
     *     scheduledAt: OffsetDateTime (Optional)
     *     matchingMode (Optional): {
     *     }
     * }
     * }</pre>
     *
     * @param jobId The jobId of the job.
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a unit of work to be routed along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> updateJobWithResponse(String jobId, BinaryData resource,
        RequestOptions requestOptions) {
        return this.serviceClient.upsertJobWithResponse(jobId, resource, requestOptions);
    }

    /**
     * Updates a router job.
     *
     * <p>
     * <strong>Header Parameters</strong>
     *
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>If-Match</td>
     * <td>String</td>
     * <td>No</td>
     * <td>The request should only proceed if an entity matches this string.</td>
     * </tr>
     * <tr>
     * <td>If-Unmodified-Since</td>
     * <td>OffsetDateTime</td>
     * <td>No</td>
     * <td>The request should only proceed if the entity was not modified after this time.</td>
     * </tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p>
     * <strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     jobId: String (Required)
     *     channelReference: String (Optional)
     *     status: String(pendingClassification/queued/assigned/completed/closed/cancelled/classificationFailed/created/pendingSchedule/scheduled/scheduleFailed/waitingForActivation) (Optional)
     *     enqueuedAt: OffsetDateTime (Optional)
     *     channelId: String (Optional)
     *     classificationPolicyId: String (Optional)
     *     queueId: String (Optional)
     *     priority: Integer (Optional)
     *     dispositionCode: String (Optional)
     *     requestedWorkerSelectors (Optional): [
     *          (Optional){
     *             key: String (Required)
     *             labelOperator: String(equal/notEqual/lessThan/lessThanEqual/greaterThan/greaterThanEqual) (Required)
     *             value: Object (Optional)
     *             expiresAfterSeconds: Double (Optional)
     *             expedite: Boolean (Optional)
     *             status: String(active/expired) (Optional)
     *             expiresAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     attachedWorkerSelectors (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     labels (Optional): {
     *         String: Object (Optional)
     *     }
     *     assignments (Optional): {
     *         String (Optional): {
     *             assignmentId: String (Required)
     *             workerId: String (Optional)
     *             assignedAt: OffsetDateTime (Required)
     *             completedAt: OffsetDateTime (Optional)
     *             closedAt: OffsetDateTime (Optional)
     *         }
     *     }
     *     tags (Optional): {
     *         String: Object (Optional)
     *     }
     *     notes (Optional): {
     *         String: String (Optional)
     *     }
     *     scheduledAt: OffsetDateTime (Optional)
     *     matchingMode (Optional): {
     *     }
     * }
     * }</pre>
     *
     * <p>
     * <strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     jobId: String (Required)
     *     channelReference: String (Optional)
     *     status: String(pendingClassification/queued/assigned/completed/closed/cancelled/classificationFailed/created/pendingSchedule/scheduled/scheduleFailed/waitingForActivation) (Optional)
     *     enqueuedAt: OffsetDateTime (Optional)
     *     channelId: String (Optional)
     *     classificationPolicyId: String (Optional)
     *     queueId: String (Optional)
     *     priority: Integer (Optional)
     *     dispositionCode: String (Optional)
     *     requestedWorkerSelectors (Optional): [
     *          (Optional){
     *             key: String (Required)
     *             labelOperator: String(equal/notEqual/lessThan/lessThanEqual/greaterThan/greaterThanEqual) (Required)
     *             value: Object (Optional)
     *             expiresAfterSeconds: Double (Optional)
     *             expedite: Boolean (Optional)
     *             status: String(active/expired) (Optional)
     *             expiresAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     attachedWorkerSelectors (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     labels (Optional): {
     *         String: Object (Optional)
     *     }
     *     assignments (Optional): {
     *         String (Optional): {
     *             assignmentId: String (Required)
     *             workerId: String (Optional)
     *             assignedAt: OffsetDateTime (Required)
     *             completedAt: OffsetDateTime (Optional)
     *             closedAt: OffsetDateTime (Optional)
     *         }
     *     }
     *     tags (Optional): {
     *         String: Object (Optional)
     *     }
     *     notes (Optional): {
     *         String: String (Optional)
     *     }
     *     scheduledAt: OffsetDateTime (Optional)
     *     matchingMode (Optional): {
     *     }
     * }
     * }</pre>
     *
     * @param jobId The jobId of the job.
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a unit of work to be routed.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BinaryData updateJob(String jobId, BinaryData resource, RequestOptions requestOptions) {
        return this.serviceClient.upsertJobWithResponse(jobId, resource, requestOptions).getValue();
    }

    /**
     * Creates or updates a router job.
     *
     * <p>
     * <strong>Header Parameters</strong>
     *
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>If-Match</td>
     * <td>String</td>
     * <td>No</td>
     * <td>The request should only proceed if an entity matches this string.</td>
     * </tr>
     * <tr>
     * <td>If-Unmodified-Since</td>
     * <td>OffsetDateTime</td>
     * <td>No</td>
     * <td>The request should only proceed if the entity was not modified after this time.</td>
     * </tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * @param jobId The jobId of the job.
     * @param job The job instance to update.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the updated job.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RouterJob updateJob(String jobId, RouterJob job) {
        return this.updateJobWithResponse(jobId, BinaryData.fromObject(job), null).getValue().toObject(RouterJob.class);
    }

    /**
     * Create a job.
     *
     * @param createJobOptions Options to create a RouterJob.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @return a unit of work to be routed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<RouterJob> createJobWithResponse(CreateJobOptions createJobOptions, RequestOptions requestOptions) {
        RouterJob routerJob = OptionBagAdapters.toRouterJob(createJobOptions);
        Response<BinaryData> response = this.serviceClient.upsertJobWithResponse(createJobOptions.getJobId(),
            BinaryData.fromObject(routerJob), requestOptions);
        return new SimpleResponse<RouterJob>(response.getRequest(), response.getStatusCode(), response.getHeaders(),
            response.getValue().toObject(RouterJob.class));
    }

    /**
     * Convenience method to create a job.
     *
     * @param createJobOptions Options to create a RouterJob.
     * @return a unit of work to be routed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RouterJob createJob(CreateJobOptions createJobOptions) {
        RequestOptions requestOptions = new RequestOptions();
        return this.createJobWithResponse(createJobOptions, requestOptions).getValue();
    }

    /**
     * Create a job using a classification policy.
     *
     * @param createJobWithClassificationPolicyOptions Options to create a RouterJob using a classification policy.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @return a unit of work to be routed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<RouterJob> createJobWithClassificationPolicyWithResponse(
        CreateJobWithClassificationPolicyOptions createJobWithClassificationPolicyOptions,
        RequestOptions requestOptions) {
        RouterJob routerJob = OptionBagAdapters.toRouterJob(createJobWithClassificationPolicyOptions);
        Response<BinaryData> response = this.serviceClient.upsertJobWithResponse(
            createJobWithClassificationPolicyOptions.getJobId(), BinaryData.fromObject(routerJob), requestOptions);
        return new SimpleResponse<RouterJob>(response.getRequest(), response.getStatusCode(), response.getHeaders(),
            response.getValue().toObject(RouterJob.class));
    }

    /**
     * Convenience method to create a job using a classification policy.
     *
     * @param createJobWithClassificationPolicyOptions Options to create a RouterJob using a classification policy.
     * @return a unit of work to be routed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RouterJob createJobWithClassificationPolicy(
        CreateJobWithClassificationPolicyOptions createJobWithClassificationPolicyOptions) {
        RequestOptions requestOptions = new RequestOptions();
        return this
            .createJobWithClassificationPolicyWithResponse(createJobWithClassificationPolicyOptions, requestOptions)
            .getValue();
    }

    /**
     * Retrieves an existing job by Id.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     etag: String (Required)
     *     id: String (Required)
     *     channelReference: String (Optional)
     *     status: String(pendingClassification/queued/assigned/completed/closed/cancelled/classificationFailed/created/pendingSchedule/scheduled/scheduleFailed/waitingForActivation) (Optional)
     *     enqueuedAt: OffsetDateTime (Optional)
     *     channelId: String (Optional)
     *     classificationPolicyId: String (Optional)
     *     queueId: String (Optional)
     *     priority: Integer (Optional)
     *     dispositionCode: String (Optional)
     *     requestedWorkerSelectors (Optional): [
     *          (Optional){
     *             key: String (Optional, Required on create)
     *             labelOperator: String(equal/notEqual/lessThan/lessThanOrEqual/greaterThan/greaterThanOrEqual) (Optional, Required on create)
     *             value: Object (Optional)
     *             expiresAfterSeconds: Double (Optional)
     *             expedite: Boolean (Optional)
     *             status: String(active/expired) (Optional)
     *             expiresAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     attachedWorkerSelectors (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     labels (Optional): {
     *         String: Object (Required)
     *     }
     *     assignments (Optional): {
     *         String (Required): {
     *             assignmentId: String (Required)
     *             workerId: String (Optional)
     *             assignedAt: OffsetDateTime (Required)
     *             completedAt: OffsetDateTime (Optional)
     *             closedAt: OffsetDateTime (Optional)
     *         }
     *     }
     *     tags (Optional): {
     *         String: Object (Required)
     *     }
     *     notes (Optional): [
     *          (Optional){
     *             message: String (Optional, Required on create)
     *             addedAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     scheduledAt: OffsetDateTime (Optional)
     *     matchingMode (Optional): {
     *         kind: String(queueAndMatch/scheduleAndSuspend/suspend) (Required)
     *     }
     * }
     * }</pre>
     *
     * @param jobId Id of a job.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a unit of work to be routed along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getJobWithResponse(String jobId, RequestOptions requestOptions) {
        return this.serviceClient.getJobWithResponse(jobId, requestOptions);
    }

    /**
     * Deletes a job and all of its traces.
     *
     * @param jobId Id of a job.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteJobWithResponse(String jobId, RequestOptions requestOptions) {
        return this.serviceClient.deleteJobWithResponse(jobId, requestOptions);
    }

    /**
     * Reclassify a job.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * { }
     * }</pre>
     *
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * { }
     * }</pre>
     *
     * @param jobId Id of a job.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response payload from reclassifying a job along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> reclassifyJobWithResponse(String jobId, RequestOptions requestOptions) {
        return this.serviceClient.reclassifyJobWithResponse(jobId, requestOptions);
    }

    /**
     * Reclassify a job.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * { }
     * }</pre>
     *
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * { }
     * }</pre>
     *
     * @param jobId Id of a job.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return BinaryData.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BinaryData reclassifyJob(String jobId, RequestOptions requestOptions) {
        return this.reclassifyJobWithResponse(jobId, requestOptions).getValue();
    }

    /**
     * Submits request to cancel an existing job by Id while supplying free-form cancellation reason.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * {
     *     note: String (Optional)
     *     dispositionCode: String (Optional)
     * }
     * }</pre>
     *
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * { }
     * }</pre>
     *
     * @param jobId Id of a job.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response payload from cancelling a job along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> cancelJobWithResponse(String jobId, RequestOptions requestOptions) {
        return this.serviceClient.cancelJobWithResponse(jobId, requestOptions);
    }

    /**
     * Submits request to cancel an existing job by Id while supplying free-form cancellation reason.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * {
     *     note: String (Optional)
     *     dispositionCode: String (Optional)
     * }
     * }</pre>
     *
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * { }
     * }</pre>
     *
     * @param jobId Id of a job.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BinaryData cancelJob(String jobId, RequestOptions requestOptions) {
        return this.serviceClient.cancelJobWithResponse(jobId, requestOptions).getValue();
    }

    /**
     * Retrieves list of jobs based on filter parameters.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>Number of objects to return per page.</td></tr>
     * <tr><td>status</td><td>String</td><td>No</td><td>If specified, filter jobs by status. Allowed values: "all",
     * "pendingClassification", "queued", "assigned", "completed", "closed", "cancelled", "classificationFailed",
     * "created", "pendingSchedule", "scheduled", "scheduleFailed", "waitingForActivation", "active".</td></tr>
     * <tr><td>queueId</td><td>String</td><td>No</td><td>If specified, filter jobs by queue.</td></tr>
     * <tr><td>channelId</td><td>String</td><td>No</td><td>If specified, filter jobs by channel.</td></tr>
     * <tr><td>classificationPolicyId</td><td>String</td><td>No</td><td>If specified, filter jobs by
     * classificationPolicy.</td></tr>
     * <tr><td>scheduledBefore</td><td>OffsetDateTime</td><td>No</td><td>If specified, filter on jobs that was scheduled
     * before or at given timestamp. Range: (-Inf, scheduledBefore].</td></tr>
     * <tr><td>scheduledAfter</td><td>OffsetDateTime</td><td>No</td><td>If specified, filter on jobs that was scheduled
     * at or after given value. Range: [scheduledAfter, +Inf).</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     etag: String (Required)
     *     id: String (Required)
     *     channelReference: String (Optional)
     *     status: String(pendingClassification/queued/assigned/completed/closed/cancelled/classificationFailed/created/pendingSchedule/scheduled/scheduleFailed/waitingForActivation) (Optional)
     *     enqueuedAt: OffsetDateTime (Optional)
     *     channelId: String (Optional)
     *     classificationPolicyId: String (Optional)
     *     queueId: String (Optional)
     *     priority: Integer (Optional)
     *     dispositionCode: String (Optional)
     *     requestedWorkerSelectors (Optional): [
     *          (Optional){
     *             key: String (Optional, Required on create)
     *             labelOperator: String(equal/notEqual/lessThan/lessThanOrEqual/greaterThan/greaterThanOrEqual) (Optional, Required on create)
     *             value: Object (Optional)
     *             expiresAfterSeconds: Double (Optional)
     *             expedite: Boolean (Optional)
     *             status: String(active/expired) (Optional)
     *             expiresAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     attachedWorkerSelectors (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     labels (Optional): {
     *         String: Object (Required)
     *     }
     *     assignments (Optional): {
     *         String (Required): {
     *             assignmentId: String (Required)
     *             workerId: String (Optional)
     *             assignedAt: OffsetDateTime (Required)
     *             completedAt: OffsetDateTime (Optional)
     *             closedAt: OffsetDateTime (Optional)
     *         }
     *     }
     *     tags (Optional): {
     *         String: Object (Required)
     *     }
     *     notes (Optional): [
     *          (Optional){
     *             message: String (Optional, Required on create)
     *             addedAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     scheduledAt: OffsetDateTime (Optional)
     *     matchingMode (Optional): {
     *         kind: String(queueAndMatch/scheduleAndSuspend/suspend) (Required)
     *     }
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of RouterJob items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listJobs(RequestOptions requestOptions) {
        return this.serviceClient.listJobs(requestOptions);
    }

    /**
     * Gets a job's position details.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     jobId: String (Required)
     *     position: int (Required)
     *     queueId: String (Required)
     *     queueLength: int (Required)
     *     estimatedWaitTimeMinutes: double (Required)
     * }
     * }</pre>
     *
     * @param jobId Id of the job.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a job's position details along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getQueuePositionWithResponse(String jobId, RequestOptions requestOptions) {
        return this.serviceClient.getQueuePositionWithResponse(jobId, requestOptions);
    }

    /**
     * Unassign a job.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     suspendMatching: Boolean (Optional)
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     jobId: String (Required)
     *     unassignmentCount: int (Required)
     * }
     * }</pre>
     *
     * @param jobId Id of a job.
     * @param assignmentId Id of a job assignment.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response payload after a job has been successfully unassigned along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> unassignJobWithResponse(String jobId, String assignmentId,
        RequestOptions requestOptions) {
        return this.serviceClient.unassignJobWithResponse(jobId, assignmentId, requestOptions);
    }

    /**
     * Accepts an offer to work on a job and returns a 409/Conflict if another agent accepted the job already.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     assignmentId: String (Required)
     *     jobId: String (Required)
     *     workerId: String (Required)
     * }
     * }</pre>
     *
     * @param workerId Id of a worker.
     * @param offerId Id of an offer.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response containing ids for the worker, job, and assignment from an accepted offer along with
     * {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> acceptJobOfferWithResponse(String workerId, String offerId,
        RequestOptions requestOptions) {
        return this.serviceClient.acceptJobOfferWithResponse(workerId, offerId, requestOptions);
    }

    /**
     * Declines an offer to work on a job.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * {
     *     retryOfferAt: OffsetDateTime (Optional)
     * }
     * }</pre>
     *
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * { }
     * }</pre>
     *
     * @param workerId Id of a worker.
     * @param offerId Id of an offer.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response payload from declining a job along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> declineJobOfferWithResponse(String workerId, String offerId,
        RequestOptions requestOptions) {
        return this.serviceClient.declineJobOfferWithResponse(workerId, offerId, requestOptions);
    }

    /**
     * Declines an offer to work on a job.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * {
     *     retryOfferAt: OffsetDateTime (Optional)
     * }
     * }</pre>
     *
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * { }
     * }</pre>
     *
     * @param workerId Id of a worker.
     * @param offerId Id of an offer.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return Result.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BinaryData declineJobOffer(String workerId, String offerId, RequestOptions requestOptions) {
        return this.serviceClient.declineJobOfferWithResponse(workerId, offerId, requestOptions).getValue();
    }

    /**
     * Retrieves a queue's statistics.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     queueId: String (Required)
     *     length: int (Required)
     *     estimatedWaitTimeMinutes (Optional): {
     *         String: double (Required)
     *     }
     *     longestJobWaitTimeMinutes: Double (Optional)
     * }
     * }</pre>
     *
     * @param queueId Id of the queue to retrieve statistics.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return statistics for the queue along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getQueueStatisticsWithResponse(String queueId, RequestOptions requestOptions) {
        return this.serviceClient.getQueueStatisticsWithResponse(queueId, requestOptions);
    }

    /**
     * Creates or updates a worker.
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>The request should only proceed if an entity matches this
     * string.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the
     * entity was not modified after this time.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     etag: String (Required)
     *     id: String (Required)
     *     state: String(active/draining/inactive) (Optional)
     *     queues (Optional): [
     *         String (Optional)
     *     ]
     *     capacity: Integer (Optional)
     *     labels (Optional): {
     *         String: Object (Required)
     *     }
     *     tags (Optional): {
     *         String: Object (Required)
     *     }
     *     channels (Optional): [
     *          (Optional){
     *             channelId: String (Optional, Required on create)
     *             capacityCostPerJob: int (Optional, Required on create)
     *             maxNumberOfJobs: Integer (Optional)
     *         }
     *     ]
     *     offers (Optional): [
     *          (Optional){
     *             offerId: String (Required)
     *             jobId: String (Required)
     *             capacityCost: int (Required)
     *             offeredAt: OffsetDateTime (Optional)
     *             expiresAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     assignedJobs (Optional): [
     *          (Optional){
     *             assignmentId: String (Required)
     *             jobId: String (Required)
     *             capacityCost: int (Required)
     *             assignedAt: OffsetDateTime (Required)
     *         }
     *     ]
     *     loadRatio: Double (Optional)
     *     availableForOffers: Boolean (Optional)
     *     maxConcurrentOffers: Integer (Optional)
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     etag: String (Required)
     *     id: String (Required)
     *     state: String(active/draining/inactive) (Optional)
     *     queues (Optional): [
     *         String (Optional)
     *     ]
     *     capacity: Integer (Optional)
     *     labels (Optional): {
     *         String: Object (Required)
     *     }
     *     tags (Optional): {
     *         String: Object (Required)
     *     }
     *     channels (Optional): [
     *          (Optional){
     *             channelId: String (Optional, Required on create)
     *             capacityCostPerJob: int (Optional, Required on create)
     *             maxNumberOfJobs: Integer (Optional)
     *         }
     *     ]
     *     offers (Optional): [
     *          (Optional){
     *             offerId: String (Required)
     *             jobId: String (Required)
     *             capacityCost: int (Required)
     *             offeredAt: OffsetDateTime (Optional)
     *             expiresAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     assignedJobs (Optional): [
     *          (Optional){
     *             assignmentId: String (Required)
     *             jobId: String (Required)
     *             capacityCost: int (Required)
     *             assignedAt: OffsetDateTime (Required)
     *         }
     *     ]
     *     loadRatio: Double (Optional)
     *     availableForOffers: Boolean (Optional)
     *     maxConcurrentOffers: Integer (Optional)
     * }
     * }</pre>
     *
     * @param workerId Id of a worker.
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an entity for jobs to be routed to along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<BinaryData> upsertWorkerWithResponse(String workerId, BinaryData resource, RequestOptions requestOptions) {
        return this.serviceClient.upsertWorkerWithResponse(workerId, resource, requestOptions);
    }

    /**
     * Updates a worker.
     *
     * <p>
     * <strong>Header Parameters</strong>
     *
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>If-Match</td>
     * <td>String</td>
     * <td>No</td>
     * <td>The request should only proceed if an entity matches this string.</td>
     * </tr>
     * <tr>
     * <td>If-Unmodified-Since</td>
     * <td>OffsetDateTime</td>
     * <td>No</td>
     * <td>The request should only proceed if the entity was not modified after this time.</td>
     * </tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p>
     * <strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Required)
     *     state: String(active/draining/inactive) (Optional)
     *     queueAssignments (Optional): {
     *         String (Optional): {
     *         }
     *     }
     *     totalCapacity: Integer (Optional)
     *     labels (Optional): {
     *         String: Object (Optional)
     *     }
     *     tags (Optional): {
     *         String: Object (Optional)
     *     }
     *     channelConfigurations (Optional): {
     *         String (Optional): {
     *             capacityCostPerJob: int (Required)
     *             maxNumberOfJobs: Integer (Optional)
     *         }
     *     }
     *     offers (Optional): [
     *          (Optional){
     *             offerId: String (Required)
     *             jobId: String (Required)
     *             capacityCost: int (Required)
     *             offeredAt: OffsetDateTime (Optional)
     *             expiresAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     assignedJobs (Optional): [
     *          (Optional){
     *             assignmentId: String (Required)
     *             jobId: String (Required)
     *             capacityCost: int (Required)
     *             assignedAt: OffsetDateTime (Required)
     *         }
     *     ]
     *     loadRatio: Double (Optional)
     *     availableForOffers: Boolean (Optional)
     *     maxConcurrentOffers: Integer (Optional)
     * }
     * }</pre>
     *
     * <p>
     * <strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Required)
     *     state: String(active/draining/inactive) (Optional)
     *     queueAssignments (Optional): {
     *         String (Optional): {
     *         }
     *     }
     *     totalCapacity: Integer (Optional)
     *     labels (Optional): {
     *         String: Object (Optional)
     *     }
     *     tags (Optional): {
     *         String: Object (Optional)
     *     }
     *     channelConfigurations (Optional): {
     *         String (Optional): {
     *             capacityCostPerJob: int (Required)
     *             maxNumberOfJobs: Integer (Optional)
     *         }
     *     }
     *     offers (Optional): [
     *          (Optional){
     *             offerId: String (Required)
     *             jobId: String (Required)
     *             capacityCost: int (Required)
     *             offeredAt: OffsetDateTime (Optional)
     *             expiresAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     assignedJobs (Optional): [
     *          (Optional){
     *             assignmentId: String (Required)
     *             jobId: String (Required)
     *             capacityCost: int (Required)
     *             assignedAt: OffsetDateTime (Required)
     *         }
     *     ]
     *     loadRatio: Double (Optional)
     *     availableForOffers: Boolean (Optional)
     *     maxConcurrentOffers: Integer (Optional)
     * }
     * }</pre>
     *
     * @param workerId Id of the worker.
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an entity for jobs to be routed to along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> updateWorkerWithResponse(String workerId, BinaryData resource,
        RequestOptions requestOptions) {
        return this.serviceClient.upsertWorkerWithResponse(workerId, resource, requestOptions);
    }

    /**
     * Updates a worker.
     *
     * <p>
     * <strong>Header Parameters</strong>
     *
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>If-Match</td>
     * <td>String</td>
     * <td>No</td>
     * <td>The request should only proceed if an entity matches this string.</td>
     * </tr>
     * <tr>
     * <td>If-Unmodified-Since</td>
     * <td>OffsetDateTime</td>
     * <td>No</td>
     * <td>The request should only proceed if the entity was not modified after this time.</td>
     * </tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p>
     * <strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Required)
     *     state: String(active/draining/inactive) (Optional)
     *     queueAssignments (Optional): {
     *         String (Optional): {
     *         }
     *     }
     *     totalCapacity: Integer (Optional)
     *     labels (Optional): {
     *         String: Object (Optional)
     *     }
     *     tags (Optional): {
     *         String: Object (Optional)
     *     }
     *     channelConfigurations (Optional): {
     *         String (Optional): {
     *             capacityCostPerJob: int (Required)
     *             maxNumberOfJobs: Integer (Optional)
     *         }
     *     }
     *     offers (Optional): [
     *          (Optional){
     *             offerId: String (Required)
     *             jobId: String (Required)
     *             capacityCost: int (Required)
     *             offeredAt: OffsetDateTime (Optional)
     *             expiresAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     assignedJobs (Optional): [
     *          (Optional){
     *             assignmentId: String (Required)
     *             jobId: String (Required)
     *             capacityCost: int (Required)
     *             assignedAt: OffsetDateTime (Required)
     *         }
     *     ]
     *     loadRatio: Double (Optional)
     *     availableForOffers: Boolean (Optional)
     *     maxConcurrentOffers: Integer (Optional)
     * }
     * }</pre>
     *
     * <p>
     * <strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Required)
     *     state: String(active/draining/inactive) (Optional)
     *     queueAssignments (Optional): {
     *         String (Optional): {
     *         }
     *     }
     *     totalCapacity: Integer (Optional)
     *     labels (Optional): {
     *         String: Object (Optional)
     *     }
     *     tags (Optional): {
     *         String: Object (Optional)
     *     }
     *     channelConfigurations (Optional): {
     *         String (Optional): {
     *             capacityCostPerJob: int (Required)
     *             maxNumberOfJobs: Integer (Optional)
     *         }
     *     }
     *     offers (Optional): [
     *          (Optional){
     *             offerId: String (Required)
     *             jobId: String (Required)
     *             capacityCost: int (Required)
     *             offeredAt: OffsetDateTime (Optional)
     *             expiresAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     assignedJobs (Optional): [
     *          (Optional){
     *             assignmentId: String (Required)
     *             jobId: String (Required)
     *             capacityCost: int (Required)
     *             assignedAt: OffsetDateTime (Required)
     *         }
     *     ]
     *     loadRatio: Double (Optional)
     *     availableForOffers: Boolean (Optional)
     *     maxConcurrentOffers: Integer (Optional)
     * }
     * }</pre>
     *
     * @param workerId Id of the worker.
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an entity for jobs to be routed.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BinaryData updateWorker(String workerId, BinaryData resource, RequestOptions requestOptions) {
        return this.serviceClient.upsertWorkerWithResponse(workerId, resource, requestOptions).getValue();
    }

    /**
     * Updates a worker.
     *
     * @param workerId Id of the worker.
     * @param worker The worker to update.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an entity for jobs to be routed to.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RouterWorker updateWorker(String workerId, RouterWorker worker) {
        return this.updateWorkerWithResponse(workerId, BinaryData.fromObject(worker), null)
            .getValue()
            .toObject(RouterWorker.class);
    }

    /**
     * Create a worker.
     *
     * @param createWorkerOptions Container for inputs to create a worker.
     * @param requestOptions RequestOptions.
     * @return an entity for jobs to be routed to.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<RouterWorker> createWorkerWithResponse(CreateWorkerOptions createWorkerOptions,
        RequestOptions requestOptions) {
        RouterWorker routerWorker = OptionBagAdapters.toRouterWorker(createWorkerOptions);
        Response<BinaryData> response = this.serviceClient.upsertWorkerWithResponse(createWorkerOptions.getWorkerId(),
            BinaryData.fromObject(routerWorker), requestOptions);
        return new SimpleResponse<RouterWorker>(response.getRequest(), response.getStatusCode(), response.getHeaders(),
            response.getValue().toObject(RouterWorker.class));
    }

    /**
     * Convenience method to create a worker.
     *
     * @param createWorkerOptions Container for inputs to create a worker.
     * @return an entity for jobs to be routed to.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RouterWorker createWorker(CreateWorkerOptions createWorkerOptions) {
        RequestOptions requestOptions = new RequestOptions();
        return this.createWorkerWithResponse(createWorkerOptions, requestOptions).getValue();
    }

    /**
     * Retrieves an existing worker by Id.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     etag: String (Required)
     *     id: String (Required)
     *     state: String(active/draining/inactive) (Optional)
     *     queues (Optional): [
     *         String (Optional)
     *     ]
     *     capacity: Integer (Optional)
     *     labels (Optional): {
     *         String: Object (Required)
     *     }
     *     tags (Optional): {
     *         String: Object (Required)
     *     }
     *     channels (Optional): [
     *          (Optional){
     *             channelId: String (Optional, Required on create)
     *             capacityCostPerJob: int (Optional, Required on create)
     *             maxNumberOfJobs: Integer (Optional)
     *         }
     *     ]
     *     offers (Optional): [
     *          (Optional){
     *             offerId: String (Required)
     *             jobId: String (Required)
     *             capacityCost: int (Required)
     *             offeredAt: OffsetDateTime (Optional)
     *             expiresAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     assignedJobs (Optional): [
     *          (Optional){
     *             assignmentId: String (Required)
     *             jobId: String (Required)
     *             capacityCost: int (Required)
     *             assignedAt: OffsetDateTime (Required)
     *         }
     *     ]
     *     loadRatio: Double (Optional)
     *     availableForOffers: Boolean (Optional)
     *     maxConcurrentOffers: Integer (Optional)
     * }
     * }</pre>
     *
     * @param workerId Id of a worker.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an entity for jobs to be routed to along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getWorkerWithResponse(String workerId, RequestOptions requestOptions) {
        return this.serviceClient.getWorkerWithResponse(workerId, requestOptions);
    }

    /**
     * Deletes a worker and all of its traces.
     *
     * @param workerId Id of a worker.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWorkerWithResponse(String workerId, RequestOptions requestOptions) {
        return this.serviceClient.deleteWorkerWithResponse(workerId, requestOptions);
    }

    /**
     * Retrieves existing workers.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>Number of objects to return per page.</td></tr>
     * <tr><td>state</td><td>String</td><td>No</td><td>If specified, select workers by worker state. Allowed values:
     * "active", "draining", "inactive", "all".</td></tr>
     * <tr><td>channelId</td><td>String</td><td>No</td><td>If specified, select workers who have a channel configuration
     * with this channel.</td></tr>
     * <tr><td>queueId</td><td>String</td><td>No</td><td>If specified, select workers who are assigned to this
     * queue.</td></tr>
     * <tr><td>hasCapacity</td><td>Boolean</td><td>No</td><td>If set to true, select only workers who have capacity for
     * the channel specified by `channelId` or for any channel if `channelId` not specified. If set to false, then will
     * return all workers including workers without any capacity for jobs. Defaults to false.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     etag: String (Required)
     *     id: String (Required)
     *     state: String(active/draining/inactive) (Optional)
     *     queues (Optional): [
     *         String (Optional)
     *     ]
     *     capacity: Integer (Optional)
     *     labels (Optional): {
     *         String: Object (Required)
     *     }
     *     tags (Optional): {
     *         String: Object (Required)
     *     }
     *     channels (Optional): [
     *          (Optional){
     *             channelId: String (Optional, Required on create)
     *             capacityCostPerJob: int (Optional, Required on create)
     *             maxNumberOfJobs: Integer (Optional)
     *         }
     *     ]
     *     offers (Optional): [
     *          (Optional){
     *             offerId: String (Required)
     *             jobId: String (Required)
     *             capacityCost: int (Required)
     *             offeredAt: OffsetDateTime (Optional)
     *             expiresAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     assignedJobs (Optional): [
     *          (Optional){
     *             assignmentId: String (Required)
     *             jobId: String (Required)
     *             capacityCost: int (Required)
     *             assignedAt: OffsetDateTime (Required)
     *         }
     *     ]
     *     loadRatio: Double (Optional)
     *     availableForOffers: Boolean (Optional)
     *     maxConcurrentOffers: Integer (Optional)
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of RouterWorker items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listWorkers(RequestOptions requestOptions) {
        return this.serviceClient.listWorkers(requestOptions);
    }

    /**
     * Retrieves an existing job by Id.
     *
     * @param jobId The id of the job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a unit of work to be routed.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RouterJob getJob(String jobId) {
        RequestOptions requestOptions = new RequestOptions();
        return getJobWithResponse(jobId, requestOptions).getValue().toObject(RouterJob.class);
    }

    /**
     * Deletes a job and all of its traces.
     *
     * @param jobId Id of a job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteJob(String jobId) {
        // Generated convenience method for deleteJobWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deleteJobWithResponse(jobId, requestOptions).getValue();
    }

    /**
     * Submits request to cancel an existing job by Id while supplying free-form cancellation reason.
     *
     * @param jobId The id of the job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response payload from cancelling a job.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CancelJobResultInternal cancelJob(String jobId) {
        // Generated convenience method for cancelJobWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return cancelJobWithResponse(jobId, requestOptions).getValue().toObject(CancelJobResultInternal.class);
    }

    /**
     * Retrieves list of jobs based on filter parameters.
     *
     * @param status If specified, filter jobs by status.
     * @param queueId If specified, filter jobs by queue.
     * @param channelId If specified, filter jobs by channel.
     * @param classificationPolicyId If specified, filter jobs by classificationPolicy.
     * @param scheduledBefore If specified, filter on jobs that was scheduled before or at given timestamp. Range:
     * (-Inf, scheduledBefore].
     * @param scheduledAfter If specified, filter on jobs that was scheduled at or after given value. Range:
     * [scheduledAfter, +Inf).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a paged collection of jobs as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<RouterJob> listJobs(RouterJobStatusSelector status, String queueId, String channelId,
        String classificationPolicyId, OffsetDateTime scheduledBefore, OffsetDateTime scheduledAfter) {
        RequestOptions requestOptions = new RequestOptions();
        if (status != null) {
            requestOptions.addQueryParam("status", status.toString(), false);
        }
        if (queueId != null) {
            requestOptions.addQueryParam("queueId", queueId, false);
        }
        if (channelId != null) {
            requestOptions.addQueryParam("channelId", channelId, false);
        }
        if (classificationPolicyId != null) {
            requestOptions.addQueryParam("classificationPolicyId", classificationPolicyId, false);
        }
        if (scheduledBefore != null) {
            requestOptions.addQueryParam("scheduledBefore", String.valueOf(scheduledBefore), false);
        }
        if (scheduledAfter != null) {
            requestOptions.addQueryParam("scheduledAfter", String.valueOf(scheduledAfter), false);
        }
        return serviceClient.listJobs(requestOptions).mapPage(bodyItemValue -> bodyItemValue.toObject(RouterJob.class));
    }

    /**
     * Retrieves list of jobs based on filter parameters.
     *
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a paged collection of jobs as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<RouterJob> listJobs() {
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.listJobs(requestOptions).mapPage(bodyItemValue -> bodyItemValue.toObject(RouterJob.class));
    }

    /**
     * Gets a job's position details.
     *
     * @param jobId Id of the job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a job's position details.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RouterJobPositionDetails getQueuePosition(String jobId) {
        // Generated convenience method for getQueuePositionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getQueuePositionWithResponse(jobId, requestOptions).getValue().toObject(RouterJobPositionDetails.class);
    }

    /**
     * Unassign a job.
     *
     * @param jobId Id of a job.
     * @param assignmentId Id of a job assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response payload after a job has been successfully unassigned.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public UnassignJobResult unassignJob(String jobId, String assignmentId) {
        // Generated convenience method for unassignJobWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return unassignJobWithResponse(jobId, assignmentId, requestOptions).getValue()
            .toObject(UnassignJobResult.class);
    }

    /**
     * Accepts an offer to work on a job and returns a 409/Conflict if another agent accepted the job already.
     *
     * @param workerId Id of a worker.
     * @param offerId Id of an offer.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response containing ids for the worker, job, and assignment from an accepted offer.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AcceptJobOfferResult acceptJobOffer(String workerId, String offerId) {
        // Generated convenience method for acceptJobOfferWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return acceptJobOfferWithResponse(workerId, offerId, requestOptions).getValue()
            .toObject(AcceptJobOfferResult.class);
    }

    /**
     * Declines an offer to work on a job.
     *
     * @param workerId Id of a worker.
     * @param offerId Id of an offer.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response payload from declining a job.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    DeclineJobOfferResultInternal declineJobOffer(String workerId, String offerId) {
        // Generated convenience method for declineJobOfferWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return declineJobOfferWithResponse(workerId, offerId, requestOptions).getValue()
            .toObject(DeclineJobOfferResultInternal.class);
    }

    /**
     * Retrieves a queue's statistics.
     *
     * @param queueId Id of the queue to retrieve statistics.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return statistics for the queue.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RouterQueueStatistics getQueueStatistics(String queueId) {
        // Generated convenience method for getQueueStatisticsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getQueueStatisticsWithResponse(queueId, requestOptions).getValue().toObject(RouterQueueStatistics.class);
    }

    /**
     * Retrieves an existing worker by Id.
     *
     * @param workerId Id of the worker.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an entity for jobs to be routed to.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RouterWorker getWorker(String workerId) {
        // Generated convenience method for getWorkerWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getWorkerWithResponse(workerId, requestOptions).getValue().toObject(RouterWorker.class);
    }

    /**
     * Deletes a worker and all of its traces.
     *
     * @param workerId Id of a worker.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteWorker(String workerId) {
        // Generated convenience method for deleteWorkerWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deleteWorkerWithResponse(workerId, requestOptions).getValue();
    }

    /**
     * Retrieves existing workers.
     *
     * @param state If specified, select workers by worker state.
     * @param channelId If specified, select workers who have a channel configuration with this channel.
     * @param queueId If specified, select workers who are assigned to this queue.
     * @param hasCapacity If set to true, select only workers who have capacity for the channel specified by `channelId`
     * or for any channel if `channelId` not specified. If set to false, then will return all workers including
     * workers without any capacity for jobs. Defaults to false.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a paged collection of workers as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<RouterWorker> listWorkers(RouterWorkerStateSelector state, String channelId, String queueId,
        Boolean hasCapacity) {
        // Generated convenience method for listWorkers
        RequestOptions requestOptions = new RequestOptions();
        if (state != null) {
            requestOptions.addQueryParam("state", state.toString(), false);
        }
        if (channelId != null) {
            requestOptions.addQueryParam("channelId", channelId, false);
        }
        if (queueId != null) {
            requestOptions.addQueryParam("queueId", queueId, false);
        }
        if (hasCapacity != null) {
            requestOptions.addQueryParam("hasCapacity", String.valueOf(hasCapacity), false);
        }
        return serviceClient.listWorkers(requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(RouterWorker.class));
    }

    /**
     * Retrieves existing workers.
     *
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a paged collection of workers as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<RouterWorker> listWorkers() {
        // Generated convenience method for listWorkers
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.listWorkers(requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(RouterWorker.class));
    }

    /**
     * Unassign a job.
     *
     * @param jobId Id of a job.
     * @param assignmentId Id of a job assignment.
     * @param options Request body for unassign route.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response payload after a job has been successfully unassigned.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public UnassignJobResult unassignJob(String jobId, String assignmentId, UnassignJobOptions options) {
        // Generated convenience method for unassignJobWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (options != null) {
            requestOptions.setBody(BinaryData.fromObject(options));
        }
        return unassignJobWithResponse(jobId, assignmentId, requestOptions).getValue()
            .toObject(UnassignJobResult.class);
    }

    /**
     * Completes an assigned job.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * {
     *     note: String (Optional)
     * }
     * }</pre>
     *
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * { }
     * }</pre>
     *
     * @param jobId Id of a job.
     * @param assignmentId Id of a job assignment.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response payload from completing a job along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> completeJobWithResponse(String jobId, String assignmentId,
        RequestOptions requestOptions) {
        return this.serviceClient.completeJobWithResponse(jobId, assignmentId, requestOptions);
    }

    /**
     * Completes an assigned job.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * {
     *     note: String (Optional)
     * }
     * }</pre>
     *
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * { }
     * }</pre>
     *
     * @param jobId Id of a job.
     * @param assignmentId Id of a job assignment.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return Result.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BinaryData completeJob(String jobId, String assignmentId, RequestOptions requestOptions) {
        return this.serviceClient.completeJobWithResponse(jobId, assignmentId, requestOptions).getValue();
    }

    /**
     * Closes a completed job.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * {
     *     dispositionCode: String (Optional)
     *     closeAt: OffsetDateTime (Optional)
     *     note: String (Optional)
     * }
     * }</pre>
     *
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * { }
     * }</pre>
     *
     * @param jobId Id of a job.
     * @param assignmentId Id of a job assignment.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response payload from closing a job along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> closeJobWithResponse(String jobId, String assignmentId, RequestOptions requestOptions) {
        return this.serviceClient.closeJobWithResponse(jobId, assignmentId, requestOptions);
    }

    /**
     * Closes a completed job.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * {
     *     dispositionCode: String (Optional)
     *     closeAt: OffsetDateTime (Optional)
     *     note: String (Optional)
     * }
     * }</pre>
     *
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     *
     * <pre>{@code
     * { }
     * }</pre>
     *
     * @param jobId Id of a job.
     * @param assignmentId Id of a job assignment.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return Result.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BinaryData closeJob(String jobId, String assignmentId, RequestOptions requestOptions) {
        return this.serviceClient.closeJobWithResponse(jobId, assignmentId, requestOptions).getValue();
    }

    /**
     * Reclassify a job.
     *
     * @param jobId Id of a job.
     * @param options Request object for reclassifying a job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response payload from reclassifying a job.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    ReclassifyJobResultInternal reclassifyJob(String jobId, ReclassifyJobOptionsInternal options) {
        // Generated convenience method for reclassifyJobWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (options != null) {
            requestOptions.setBody(BinaryData.fromObject(options));
        }
        return reclassifyJobWithResponse(jobId, requestOptions).getValue().toObject(ReclassifyJobResultInternal.class);
    }

    /**
     * Reclassify a job.
     *
     * @param jobId Id of a job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response payload from reclassifying a job.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    ReclassifyJobResultInternal reclassifyJob(String jobId) {
        // Generated convenience method for reclassifyJobWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return reclassifyJobWithResponse(jobId, requestOptions).getValue().toObject(ReclassifyJobResultInternal.class);
    }

    /**
     * Submits request to cancel an existing job by Id while supplying free-form cancellation reason.
     *
     * @param jobId The id of the job.
     * @param options Request model for cancelling job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response payload from cancelling a job.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CancelJobResultInternal cancelJob(String jobId, CancelJobOptions options) {
        // Generated convenience method for cancelJobWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (options != null) {
            requestOptions.setBody(BinaryData.fromObject(options));
        }
        return cancelJobWithResponse(jobId, requestOptions).getValue().toObject(CancelJobResultInternal.class);
    }

    /**
     * Completes an assigned job.
     *
     * @param jobId Id of a job.
     * @param assignmentId Id of a job assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response payload from completing a job.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    CompleteJobResultInternal completeJob(String jobId, String assignmentId) {
        // Generated convenience method for completeJobWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return completeJobWithResponse(jobId, assignmentId, requestOptions).getValue()
            .toObject(CompleteJobResultInternal.class);
    }

    /**
     * Closes a completed job.
     *
     * @param jobId Id of a job.
     * @param assignmentId Id of a job assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response payload from closing a job.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    CloseJobResultInternal closeJob(String jobId, String assignmentId) {
        // Generated convenience method for closeJobWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return closeJobWithResponse(jobId, assignmentId, requestOptions).getValue()
            .toObject(CloseJobResultInternal.class);
    }

    /**
     * Creates or updates a worker.
     *
     * @param workerId Id of a worker.
     * @param resource The resource instance.
     * @param ifMatch The request should only proceed if an entity matches this string.
     * @param ifUnmodifiedSince The request should only proceed if the entity was not modified after this time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an entity for jobs to be routed to.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    RouterWorker upsertWorker(String workerId, RouterWorker resource, String ifMatch,
        OffsetDateTime ifUnmodifiedSince) {
        // Generated convenience method for upsertWorkerWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        JsonMergePatchHelper.getRouterWorkerAccessor().prepareModelForJsonMergePatch(resource, true);
        BinaryData resourceInBinaryData = BinaryData.fromObject(resource);
        // BinaryData.fromObject() will not fire serialization, use getLength() to fire serialization.
        resourceInBinaryData.getLength();
        JsonMergePatchHelper.getRouterWorkerAccessor().prepareModelForJsonMergePatch(resource, false);
        return upsertWorkerWithResponse(workerId, resourceInBinaryData, requestOptions).getValue()
            .toObject(RouterWorker.class);
    }

    /**
     * Creates or updates a worker.
     *
     * @param workerId Id of a worker.
     * @param resource The resource instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an entity for jobs to be routed to.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    RouterWorker upsertWorker(String workerId, RouterWorker resource) {
        // Generated convenience method for upsertWorkerWithResponse
        RequestOptions requestOptions = new RequestOptions();
        JsonMergePatchHelper.getRouterWorkerAccessor().prepareModelForJsonMergePatch(resource, true);
        BinaryData resourceInBinaryData = BinaryData.fromObject(resource);
        // BinaryData.fromObject() will not fire serialization, use getLength() to fire serialization.
        resourceInBinaryData.getLength();
        JsonMergePatchHelper.getRouterWorkerAccessor().prepareModelForJsonMergePatch(resource, false);
        return upsertWorkerWithResponse(workerId, resourceInBinaryData, requestOptions).getValue()
            .toObject(RouterWorker.class);
    }

    /**
     * Creates or updates a router job.
     *
     * @param jobId Id of a job.
     * @param resource The resource instance.
     * @param ifMatch The request should only proceed if an entity matches this string.
     * @param ifUnmodifiedSince The request should only proceed if the entity was not modified after this time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a unit of work to be routed.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    RouterJob upsertJob(String jobId, RouterJob resource, String ifMatch, OffsetDateTime ifUnmodifiedSince) {
        // Generated convenience method for upsertJobWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        JsonMergePatchHelper.getRouterJobAccessor().prepareModelForJsonMergePatch(resource, true);
        BinaryData resourceInBinaryData = BinaryData.fromObject(resource);
        // BinaryData.fromObject() will not fire serialization, use getLength() to fire serialization.
        resourceInBinaryData.getLength();
        JsonMergePatchHelper.getRouterJobAccessor().prepareModelForJsonMergePatch(resource, false);
        return upsertJobWithResponse(jobId, resourceInBinaryData, requestOptions).getValue().toObject(RouterJob.class);
    }

    /**
     * Creates or updates a router job.
     *
     * @param jobId Id of a job.
     * @param resource The resource instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a unit of work to be routed.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    RouterJob upsertJob(String jobId, RouterJob resource) {
        // Generated convenience method for upsertJobWithResponse
        RequestOptions requestOptions = new RequestOptions();
        JsonMergePatchHelper.getRouterJobAccessor().prepareModelForJsonMergePatch(resource, true);
        BinaryData resourceInBinaryData = BinaryData.fromObject(resource);
        // BinaryData.fromObject() will not fire serialization, use getLength() to fire serialization.
        resourceInBinaryData.getLength();
        JsonMergePatchHelper.getRouterJobAccessor().prepareModelForJsonMergePatch(resource, false);
        return upsertJobWithResponse(jobId, resourceInBinaryData, requestOptions).getValue().toObject(RouterJob.class);
    }
}
