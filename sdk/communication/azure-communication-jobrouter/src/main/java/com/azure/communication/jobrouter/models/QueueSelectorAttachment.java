// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.communication.jobrouter.models;

import com.azure.communication.jobrouter.implementation.JsonMergePatchHelper;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.Set;

/**
 * An attachment of queue selectors to resolve a queue to a job from a classification policy.
 */
@Immutable
public class QueueSelectorAttachment implements JsonSerializable<QueueSelectorAttachment> {

    /*
     * The type discriminator describing a sub-type of QueueSelectorAttachment.
     */
    @Generated
    private QueueSelectorAttachmentKind kind = QueueSelectorAttachmentKind.fromString("QueueSelectorAttachment");

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    @Generated
    private boolean jsonMergePatch;

    @Generated
    private void serializeAsJsonMergePatch(boolean jsonMergePatch) {
        this.jsonMergePatch = jsonMergePatch;
    }

    static {
        JsonMergePatchHelper
            .setQueueSelectorAttachmentAccessor(new JsonMergePatchHelper.QueueSelectorAttachmentAccessor() {

                @Override
                public QueueSelectorAttachment prepareModelForJsonMergePatch(QueueSelectorAttachment model,
                    boolean jsonMergePatchEnabled) {
                    model.serializeAsJsonMergePatch(jsonMergePatchEnabled);
                    return model;
                }

                @Override
                public boolean isJsonMergePatch(QueueSelectorAttachment model) {
                    return model.jsonMergePatch;
                }
            });
    }

    /**
     * Creates an instance of QueueSelectorAttachment class.
     */
    @Generated
    public QueueSelectorAttachment() {
    }

    /**
     * Get the kind property: The type discriminator describing a sub-type of QueueSelectorAttachment.
     *
     * @return the kind value.
     */
    @Generated
    public QueueSelectorAttachmentKind getKind() {
        return this.kind;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (jsonMergePatch) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("kind", this.kind.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of QueueSelectorAttachment from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of QueueSelectorAttachment if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the QueueSelectorAttachment.
     */
    @Generated
    public static QueueSelectorAttachment fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                // Prepare for reading
                readerToUse.nextToken();
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("kind".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("conditional".equals(discriminatorValue)) {
                    return ConditionalQueueSelectorAttachment.fromJson(readerToUse.reset());
                } else if ("passThrough".equals(discriminatorValue)) {
                    return PassThroughQueueSelectorAttachment.fromJson(readerToUse.reset());
                } else if ("ruleEngine".equals(discriminatorValue)) {
                    return RuleEngineQueueSelectorAttachment.fromJson(readerToUse.reset());
                } else if ("static".equals(discriminatorValue)) {
                    return StaticQueueSelectorAttachment.fromJson(readerToUse.reset());
                } else if ("weightedAllocation".equals(discriminatorValue)) {
                    return WeightedAllocationQueueSelectorAttachment.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    @Generated
    static QueueSelectorAttachment fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            QueueSelectorAttachment deserializedQueueSelectorAttachment = new QueueSelectorAttachment();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("kind".equals(fieldName)) {
                    deserializedQueueSelectorAttachment.kind
                        = QueueSelectorAttachmentKind.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedQueueSelectorAttachment;
        });
    }
}
