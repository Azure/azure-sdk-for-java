// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.communication.jobrouter.models;

import com.azure.communication.jobrouter.implementation.JsonMergePatchHelper;
import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.HashSet;
import java.util.Objects;
import java.util.Set;

/**
 * A note attached to a job.
 */
@Fluent
public final class RouterJobNote implements JsonSerializable<RouterJobNote> {

    /**
     * Creates an instance of RouterJobNote class.
     *
     * @param message The message for the note.
     */
    public RouterJobNote(String message) {
        this.message = Objects.requireNonNull(message, "'message' cannot be null.");
    }

    /**
     * The time at which the note was added in UTC.
     */
    private OffsetDateTime addedAt;

    /**
     * Message for the note.
     */
    private final String message;

    /**
     * setter for time.
     *
     * @param addedAt time at which the note was added in UTC.
     * @return this
     */
    public RouterJobNote setAddedAt(OffsetDateTime addedAt) {
        this.addedAt = addedAt;
        return this;
    }

    /**
     * getter for addedAt.
     *
     * @return addedAt
     */
    public OffsetDateTime getAddedAt() {
        return addedAt;
    }

    /**
     * Getter for message.
     *
     * @return message.
     */
    public String getMessage() {
        return message;
    }

    @Generated
    private boolean jsonMergePatch;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    @Generated
    void serializeAsJsonMergePatch(boolean jsonMergePatch) {
        this.jsonMergePatch = jsonMergePatch;
    }

    static {
        JsonMergePatchHelper.setRouterJobNoteAccessor((model, jsonMergePatchEnabled) -> {
            model.serializeAsJsonMergePatch(jsonMergePatchEnabled);
            return model;
        });
    }

    /**
     * Set the message property: The message contained in the note.
     * <p>Required when create the resource.</p>
     *
     * @param message the message value to set.
     * @return the RouterJobNote object itself.
     */
    @Generated
    public RouterJobNote setMessage(String message) {
        this.message = message;
        this.updatedProperties.add("message");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (jsonMergePatch) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeStringField("message", this.message);
            jsonWriter.writeStringField("addedAt",
                this.addedAt == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.addedAt));
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (updatedProperties.contains("message")) {
            if (this.message == null) {
                jsonWriter.writeNullField("message");
            } else {
                jsonWriter.writeStringField("message", this.message);
            }
        }
        if (updatedProperties.contains("addedAt")) {
            if (this.addedAt == null) {
                jsonWriter.writeNullField("addedAt");
            } else {
                jsonWriter.writeStringField("addedAt",
                    this.addedAt == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.addedAt));
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RouterJobNote from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of RouterJobNote if the JsonReader was pointing to an instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the RouterJobNote.
     */
    @Generated
    public static RouterJobNote fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RouterJobNote deserializedRouterJobNote = new RouterJobNote();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("message".equals(fieldName)) {
                    deserializedRouterJobNote.message = reader.getString();
                } else if ("addedAt".equals(fieldName)) {
                    deserializedRouterJobNote.addedAt
                        = reader.getNullable(nonNullReader -> OffsetDateTime.parse(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedRouterJobNote;
        });
    }
}
