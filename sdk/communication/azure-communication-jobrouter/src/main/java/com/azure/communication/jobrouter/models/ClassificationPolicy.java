// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.communication.jobrouter.models;

import com.azure.communication.jobrouter.implementation.accesshelpers.ClassificationPolicyConstructorProxy;
import com.azure.communication.jobrouter.implementation.converters.LabelSelectorAdapter;
import com.azure.communication.jobrouter.implementation.converters.RouterRuleAdapter;
import com.azure.communication.jobrouter.implementation.models.ClassificationPolicyInternal;
import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

import java.util.List;
import java.util.stream.Collectors;

/**
 * A container for the rules that govern how jobs are classified.
 */
@Fluent
public final class ClassificationPolicy {

    /*
     * Id of a classification policy.
     */
    @JsonProperty(value = "id", access = JsonProperty.Access.WRITE_ONLY)
    private String id;

    /*
     * Friendly name of this policy.
     */
    @JsonProperty(value = "name")
    private String name;

    /*
     * Id of a fallback queue to select if queue selector attachments doesn't find a match.
     */
    @JsonProperty(value = "fallbackQueueId")
    private String fallbackQueueId;

    /*
     * A rule to determine a priority score for a job.
     */
    @JsonProperty(value = "prioritizationRule")
    private RouterRule prioritizationRule;

    /**
     * Creates an instance of ClassificationPolicy class.
     */
    public ClassificationPolicy() {
    }

    /**
     * Package-private constructor of the class, used internally.
     *
     * @param internal The internal ClassificationPolicy
     */
    ClassificationPolicy(ClassificationPolicyInternal internal) {
        id = internal.getId();
        setName(internal.getName());
        setPrioritizationRule(RouterRuleAdapter.convertRouterRuleToPublic(internal.getPrioritizationRule()));
        setFallbackQueueId(internal.getFallbackQueueId());
        setQueueSelectorAttachments(internal.getQueueSelectorAttachments().stream()
            .map(LabelSelectorAdapter::convertQueueSelectorAttachmentToPublic).collect(Collectors.toList()));
        setWorkerSelectorAttachments(internal.getWorkerSelectorAttachments().stream()
            .map(LabelSelectorAdapter::convertWorkerSelectorAttachmentToPublic).collect(Collectors.toList()));
    }

    static {
        ClassificationPolicyConstructorProxy.setAccessor(ClassificationPolicy::new);
    }

    /**
     * Get the id property: Id of a classification policy.
     *
     * @return the id value.
     */
    public String getId() {
        return this.id;
    }

    /**
     * Get the name property: Friendly name of this policy.
     *
     * @return the name value.
     */
    public String getName() {
        return this.name;
    }

    /**
     * Set the name property: Friendly name of this policy.
     *
     * @param name the name value to set.
     * @return the ClassificationPolicy object itself.
     */
    public ClassificationPolicy setName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the fallbackQueueId property: Id of a fallback queue to select if queue selector attachments doesn't find a
     * match.
     *
     * @return the fallbackQueueId value.
     */
    public String getFallbackQueueId() {
        return this.fallbackQueueId;
    }

    /**
     * Set the fallbackQueueId property: Id of a fallback queue to select if queue selector attachments doesn't find a
     * match.
     *
     * @param fallbackQueueId the fallbackQueueId value to set.
     * @return the ClassificationPolicy object itself.
     */
    public ClassificationPolicy setFallbackQueueId(String fallbackQueueId) {
        this.fallbackQueueId = fallbackQueueId;
        return this;
    }

    /**
     * Get the prioritizationRule property: A rule to determine a priority score for a job.
     *
     * @return the prioritizationRule value.
     */
    public RouterRule getPrioritizationRule() {
        return this.prioritizationRule;
    }

    /*
     * The entity tag for this resource.
     */
    @JsonProperty(value = "etag", access = JsonProperty.Access.WRITE_ONLY)
    private String etag;

    /*
     * The queue selector attachments used to resolve a queue for a given job.
     */
    @JsonProperty(value = "queueSelectorAttachments")
    private List<QueueSelectorAttachment> queueSelectorAttachments;

    /*
     * Worker selector attachments used to attach worker selectors to a job.
     */
    @JsonProperty(value = "workerSelectorAttachments")
    private List<WorkerSelectorAttachment> workerSelectorAttachments;

    /**
     * Get the etag property: The entity tag for this resource.
     *
     * @return the etag value.
     */
    public String getEtag() {
        return this.etag;
    }

    /**
     * Get the queueSelectorAttachments property: Queue selector attachments used to resolve a queue for a job.
     *
     * @return the queueSelectorAttachments value.
     */
    public List<QueueSelectorAttachment> getQueueSelectorAttachments() {
        return this.queueSelectorAttachments;
    }

    /**
     * Set the queueSelectorAttachments property: Queue selector attachments used to resolve a queue for a job.
     *
     * @param queueSelectorAttachments the queueSelectorAttachments value to set.
     * @return the ClassificationPolicy object itself.
     */
    public ClassificationPolicy
        setQueueSelectorAttachments(List<QueueSelectorAttachment> queueSelectorAttachments) {
        this.queueSelectorAttachments = queueSelectorAttachments;
        return this;
    }

    /**
     * Get the workerSelectorAttachments property: Worker selector attachments used to attach worker selectors to a
     * job.
     *
     * @return the workerSelectorAttachments value.
     */
    public List<WorkerSelectorAttachment> getWorkerSelectorAttachments() {
        return this.workerSelectorAttachments;
    }

    /**
     * Set the workerSelectorAttachments property: Worker selector attachments used to attach worker selectors to a
     * job.
     *
     * @param workerSelectorAttachments the workerSelectorAttachments value to set.
     * @return the ClassificationPolicy object itself.
     */
    public ClassificationPolicy
        setWorkerSelectorAttachments(List<WorkerSelectorAttachment> workerSelectorAttachments) {
        this.workerSelectorAttachments = workerSelectorAttachments;
        return this;
    }

    /**
     * Set the prioritizationRule property: A rule to determine a priority score for a job.
     *
     * @param prioritizationRule the prioritizationRule value to set.
     * @return the ClassificationPolicy object itself.
     */
    public ClassificationPolicy setPrioritizationRule(RouterRule prioritizationRule) {
        this.prioritizationRule = prioritizationRule;
        return this;
    }
}
