// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.communication.jobrouter.implementation;

import com.azure.communication.jobrouter.JobRouterServiceVersion;
import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.HttpHeaderName;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.UrlBuilder;
import com.azure.core.util.serializer.JacksonAdapter;
import com.azure.core.util.serializer.SerializerAdapter;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the JobRouterClient type.
 */
public final class JobRouterClientImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final JobRouterClientService service;

    /**
     * Uri of your Communication resource.
     */
    private final String endpoint;

    /**
     * Gets Uri of your Communication resource.
     * 
     * @return the endpoint value.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /**
     * Service version.
     */
    private final JobRouterServiceVersion serviceVersion;

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public JobRouterServiceVersion getServiceVersion() {
        return this.serviceVersion;
    }

    /**
     * The HTTP pipeline to send requests through.
     */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     * 
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /**
     * The serializer to serialize an object into a string.
     */
    private final SerializerAdapter serializerAdapter;

    /**
     * Gets The serializer to serialize an object into a string.
     * 
     * @return the serializerAdapter value.
     */
    public SerializerAdapter getSerializerAdapter() {
        return this.serializerAdapter;
    }

    /**
     * Initializes an instance of JobRouterClient client.
     * 
     * @param endpoint Uri of your Communication resource.
     * @param serviceVersion Service version.
     */
    public JobRouterClientImpl(String endpoint, JobRouterServiceVersion serviceVersion) {
        this(new HttpPipelineBuilder().policies(new UserAgentPolicy(), new RetryPolicy()).build(),
            JacksonAdapter.createDefaultSerializerAdapter(), endpoint, serviceVersion);
    }

    /**
     * Initializes an instance of JobRouterClient client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param endpoint Uri of your Communication resource.
     * @param serviceVersion Service version.
     */
    public JobRouterClientImpl(HttpPipeline httpPipeline, String endpoint, JobRouterServiceVersion serviceVersion) {
        this(httpPipeline, JacksonAdapter.createDefaultSerializerAdapter(), endpoint, serviceVersion);
    }

    /**
     * Initializes an instance of JobRouterClient client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param serializerAdapter The serializer to serialize an object into a string.
     * @param endpoint Uri of your Communication resource.
     * @param serviceVersion Service version.
     */
    public JobRouterClientImpl(HttpPipeline httpPipeline, SerializerAdapter serializerAdapter, String endpoint,
        JobRouterServiceVersion serviceVersion) {
        this.httpPipeline = httpPipeline;
        this.serializerAdapter = serializerAdapter;
        this.endpoint = endpoint;
        this.serviceVersion = serviceVersion;
        this.service = RestProxy.create(JobRouterClientService.class, this.httpPipeline, this.getSerializerAdapter());
    }

    /**
     * The interface defining all the services for JobRouterClient to be used by the proxy service to perform REST
     * calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "JobRouterClient")
    public interface JobRouterClientService {
        @Patch("/routing/jobs/{jobId}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> upsertJob(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("jobId") String jobId,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/merge-patch+json") BinaryData resource, RequestOptions requestOptions,
            Context context);

        @Patch("/routing/jobs/{jobId}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> upsertJobSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("jobId") String jobId,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/merge-patch+json") BinaryData resource, RequestOptions requestOptions,
            Context context);

        @Get("/routing/jobs/{jobId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getJob(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("jobId") String jobId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/routing/jobs/{jobId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getJobSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("jobId") String jobId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Delete("/routing/jobs/{jobId}")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteJob(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("jobId") String jobId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Delete("/routing/jobs/{jobId}")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> deleteJobSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("jobId") String jobId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Post("/routing/jobs/{jobId}:reclassify")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> reclassifyJob(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("jobId") String jobId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Post("/routing/jobs/{jobId}:reclassify")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> reclassifyJobSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("jobId") String jobId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Post("/routing/jobs/{jobId}:cancel")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> cancelJob(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("jobId") String jobId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Post("/routing/jobs/{jobId}:cancel")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> cancelJobSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("jobId") String jobId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Post("/routing/jobs/{jobId}/assignments/{assignmentId}:complete")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> completeJob(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("jobId") String jobId,
            @PathParam("assignmentId") String assignmentId, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Post("/routing/jobs/{jobId}/assignments/{assignmentId}:complete")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> completeJobSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("jobId") String jobId,
            @PathParam("assignmentId") String assignmentId, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Post("/routing/jobs/{jobId}/assignments/{assignmentId}:close")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> closeJob(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("jobId") String jobId,
            @PathParam("assignmentId") String assignmentId, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Post("/routing/jobs/{jobId}/assignments/{assignmentId}:close")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> closeJobSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("jobId") String jobId,
            @PathParam("assignmentId") String assignmentId, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/routing/jobs")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listJobs(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/routing/jobs")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listJobsSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/routing/jobs/{jobId}/position")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getQueuePosition(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("jobId") String jobId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/routing/jobs/{jobId}/position")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getQueuePositionSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("jobId") String jobId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Post("/routing/jobs/{jobId}/assignments/{assignmentId}:unassign")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> unassignJob(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("jobId") String jobId,
            @PathParam("assignmentId") String assignmentId, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Post("/routing/jobs/{jobId}/assignments/{assignmentId}:unassign")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> unassignJobSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("jobId") String jobId,
            @PathParam("assignmentId") String assignmentId, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Post("/routing/workers/{workerId}/offers/{offerId}:accept")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> acceptJobOffer(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("workerId") String workerId,
            @PathParam("offerId") String offerId, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);

        @Post("/routing/workers/{workerId}/offers/{offerId}:accept")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> acceptJobOfferSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("workerId") String workerId,
            @PathParam("offerId") String offerId, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);

        @Post("/routing/workers/{workerId}/offers/{offerId}:decline")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> declineJobOffer(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("workerId") String workerId,
            @PathParam("offerId") String offerId, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);

        @Post("/routing/workers/{workerId}/offers/{offerId}:decline")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> declineJobOfferSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("workerId") String workerId,
            @PathParam("offerId") String offerId, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);

        @Get("/routing/queues/{queueId}/statistics")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getQueueStatistics(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("queueId") String queueId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/routing/queues/{queueId}/statistics")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getQueueStatisticsSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("queueId") String queueId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Patch("/routing/workers/{workerId}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> upsertWorker(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("workerId") String workerId,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/merge-patch+json") BinaryData resource, RequestOptions requestOptions,
            Context context);

        @Patch("/routing/workers/{workerId}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> upsertWorkerSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("workerId") String workerId,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/merge-patch+json") BinaryData resource, RequestOptions requestOptions,
            Context context);

        @Get("/routing/workers/{workerId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getWorker(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("workerId") String workerId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/routing/workers/{workerId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getWorkerSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("workerId") String workerId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Delete("/routing/workers/{workerId}")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteWorker(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("workerId") String workerId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Delete("/routing/workers/{workerId}")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> deleteWorkerSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("workerId") String workerId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/routing/workers")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listWorkers(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/routing/workers")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listWorkersSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listJobsNext(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("endpoint") String endpoint, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listJobsNextSync(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("endpoint") String endpoint, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listWorkersNext(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("endpoint") String endpoint, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listWorkersNextSync(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("endpoint") String endpoint, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);
    }

    /**
     * Creates or updates a router job.
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>The request should only proceed if an entity matches this
     * string.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the
     * entity was not modified after this time.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     etag: String (Required)
     *     id: String (Required)
     *     channelReference: String (Optional)
     *     status: String(pendingClassification/queued/assigned/completed/closed/cancelled/classificationFailed/created/pendingSchedule/scheduled/scheduleFailed/waitingForActivation) (Optional)
     *     enqueuedAt: OffsetDateTime (Optional)
     *     channelId: String (Optional)
     *     classificationPolicyId: String (Optional)
     *     queueId: String (Optional)
     *     priority: Integer (Optional)
     *     dispositionCode: String (Optional)
     *     requestedWorkerSelectors (Optional): [
     *          (Optional){
     *             key: String (Optional, Required on create)
     *             labelOperator: String(equal/notEqual/lessThan/lessThanOrEqual/greaterThan/greaterThanOrEqual) (Optional, Required on create)
     *             value: Object (Optional)
     *             expiresAfterSeconds: Double (Optional)
     *             expedite: Boolean (Optional)
     *             status: String(active/expired) (Optional)
     *             expiresAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     attachedWorkerSelectors (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     labels (Optional): {
     *         String: Object (Required)
     *     }
     *     assignments (Optional): {
     *         String (Required): {
     *             assignmentId: String (Required)
     *             workerId: String (Optional)
     *             assignedAt: OffsetDateTime (Required)
     *             completedAt: OffsetDateTime (Optional)
     *             closedAt: OffsetDateTime (Optional)
     *         }
     *     }
     *     tags (Optional): {
     *         String: Object (Required)
     *     }
     *     notes (Optional): [
     *          (Optional){
     *             message: String (Optional, Required on create)
     *             addedAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     scheduledAt: OffsetDateTime (Optional)
     *     matchingMode (Optional): {
     *         kind: String(queueAndMatch/scheduleAndSuspend/suspend) (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     etag: String (Required)
     *     id: String (Required)
     *     channelReference: String (Optional)
     *     status: String(pendingClassification/queued/assigned/completed/closed/cancelled/classificationFailed/created/pendingSchedule/scheduled/scheduleFailed/waitingForActivation) (Optional)
     *     enqueuedAt: OffsetDateTime (Optional)
     *     channelId: String (Optional)
     *     classificationPolicyId: String (Optional)
     *     queueId: String (Optional)
     *     priority: Integer (Optional)
     *     dispositionCode: String (Optional)
     *     requestedWorkerSelectors (Optional): [
     *          (Optional){
     *             key: String (Optional, Required on create)
     *             labelOperator: String(equal/notEqual/lessThan/lessThanOrEqual/greaterThan/greaterThanOrEqual) (Optional, Required on create)
     *             value: Object (Optional)
     *             expiresAfterSeconds: Double (Optional)
     *             expedite: Boolean (Optional)
     *             status: String(active/expired) (Optional)
     *             expiresAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     attachedWorkerSelectors (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     labels (Optional): {
     *         String: Object (Required)
     *     }
     *     assignments (Optional): {
     *         String (Required): {
     *             assignmentId: String (Required)
     *             workerId: String (Optional)
     *             assignedAt: OffsetDateTime (Required)
     *             completedAt: OffsetDateTime (Optional)
     *             closedAt: OffsetDateTime (Optional)
     *         }
     *     }
     *     tags (Optional): {
     *         String: Object (Required)
     *     }
     *     notes (Optional): [
     *          (Optional){
     *             message: String (Optional, Required on create)
     *             addedAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     scheduledAt: OffsetDateTime (Optional)
     *     matchingMode (Optional): {
     *         kind: String(queueAndMatch/scheduleAndSuspend/suspend) (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param jobId Id of a job.
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a unit of work to be routed along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> upsertJobWithResponseAsync(String jobId, BinaryData resource,
        RequestOptions requestOptions) {
        final String contentType = "application/merge-patch+json";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.upsertJob(this.getEndpoint(),
            this.getServiceVersion().getVersion(), jobId, contentType, accept, resource, requestOptions, context));
    }

    /**
     * Creates or updates a router job.
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>The request should only proceed if an entity matches this
     * string.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the
     * entity was not modified after this time.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     etag: String (Required)
     *     id: String (Required)
     *     channelReference: String (Optional)
     *     status: String(pendingClassification/queued/assigned/completed/closed/cancelled/classificationFailed/created/pendingSchedule/scheduled/scheduleFailed/waitingForActivation) (Optional)
     *     enqueuedAt: OffsetDateTime (Optional)
     *     channelId: String (Optional)
     *     classificationPolicyId: String (Optional)
     *     queueId: String (Optional)
     *     priority: Integer (Optional)
     *     dispositionCode: String (Optional)
     *     requestedWorkerSelectors (Optional): [
     *          (Optional){
     *             key: String (Optional, Required on create)
     *             labelOperator: String(equal/notEqual/lessThan/lessThanOrEqual/greaterThan/greaterThanOrEqual) (Optional, Required on create)
     *             value: Object (Optional)
     *             expiresAfterSeconds: Double (Optional)
     *             expedite: Boolean (Optional)
     *             status: String(active/expired) (Optional)
     *             expiresAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     attachedWorkerSelectors (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     labels (Optional): {
     *         String: Object (Required)
     *     }
     *     assignments (Optional): {
     *         String (Required): {
     *             assignmentId: String (Required)
     *             workerId: String (Optional)
     *             assignedAt: OffsetDateTime (Required)
     *             completedAt: OffsetDateTime (Optional)
     *             closedAt: OffsetDateTime (Optional)
     *         }
     *     }
     *     tags (Optional): {
     *         String: Object (Required)
     *     }
     *     notes (Optional): [
     *          (Optional){
     *             message: String (Optional, Required on create)
     *             addedAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     scheduledAt: OffsetDateTime (Optional)
     *     matchingMode (Optional): {
     *         kind: String(queueAndMatch/scheduleAndSuspend/suspend) (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     etag: String (Required)
     *     id: String (Required)
     *     channelReference: String (Optional)
     *     status: String(pendingClassification/queued/assigned/completed/closed/cancelled/classificationFailed/created/pendingSchedule/scheduled/scheduleFailed/waitingForActivation) (Optional)
     *     enqueuedAt: OffsetDateTime (Optional)
     *     channelId: String (Optional)
     *     classificationPolicyId: String (Optional)
     *     queueId: String (Optional)
     *     priority: Integer (Optional)
     *     dispositionCode: String (Optional)
     *     requestedWorkerSelectors (Optional): [
     *          (Optional){
     *             key: String (Optional, Required on create)
     *             labelOperator: String(equal/notEqual/lessThan/lessThanOrEqual/greaterThan/greaterThanOrEqual) (Optional, Required on create)
     *             value: Object (Optional)
     *             expiresAfterSeconds: Double (Optional)
     *             expedite: Boolean (Optional)
     *             status: String(active/expired) (Optional)
     *             expiresAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     attachedWorkerSelectors (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     labels (Optional): {
     *         String: Object (Required)
     *     }
     *     assignments (Optional): {
     *         String (Required): {
     *             assignmentId: String (Required)
     *             workerId: String (Optional)
     *             assignedAt: OffsetDateTime (Required)
     *             completedAt: OffsetDateTime (Optional)
     *             closedAt: OffsetDateTime (Optional)
     *         }
     *     }
     *     tags (Optional): {
     *         String: Object (Required)
     *     }
     *     notes (Optional): [
     *          (Optional){
     *             message: String (Optional, Required on create)
     *             addedAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     scheduledAt: OffsetDateTime (Optional)
     *     matchingMode (Optional): {
     *         kind: String(queueAndMatch/scheduleAndSuspend/suspend) (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param jobId Id of a job.
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a unit of work to be routed along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> upsertJobWithResponse(String jobId, BinaryData resource,
        RequestOptions requestOptions) {
        final String contentType = "application/merge-patch+json";
        final String accept = "application/json";
        return service.upsertJobSync(this.getEndpoint(), this.getServiceVersion().getVersion(), jobId, contentType,
            accept, resource, requestOptions, Context.NONE);
    }

    /**
     * Retrieves an existing job by Id.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     etag: String (Required)
     *     id: String (Required)
     *     channelReference: String (Optional)
     *     status: String(pendingClassification/queued/assigned/completed/closed/cancelled/classificationFailed/created/pendingSchedule/scheduled/scheduleFailed/waitingForActivation) (Optional)
     *     enqueuedAt: OffsetDateTime (Optional)
     *     channelId: String (Optional)
     *     classificationPolicyId: String (Optional)
     *     queueId: String (Optional)
     *     priority: Integer (Optional)
     *     dispositionCode: String (Optional)
     *     requestedWorkerSelectors (Optional): [
     *          (Optional){
     *             key: String (Optional, Required on create)
     *             labelOperator: String(equal/notEqual/lessThan/lessThanOrEqual/greaterThan/greaterThanOrEqual) (Optional, Required on create)
     *             value: Object (Optional)
     *             expiresAfterSeconds: Double (Optional)
     *             expedite: Boolean (Optional)
     *             status: String(active/expired) (Optional)
     *             expiresAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     attachedWorkerSelectors (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     labels (Optional): {
     *         String: Object (Required)
     *     }
     *     assignments (Optional): {
     *         String (Required): {
     *             assignmentId: String (Required)
     *             workerId: String (Optional)
     *             assignedAt: OffsetDateTime (Required)
     *             completedAt: OffsetDateTime (Optional)
     *             closedAt: OffsetDateTime (Optional)
     *         }
     *     }
     *     tags (Optional): {
     *         String: Object (Required)
     *     }
     *     notes (Optional): [
     *          (Optional){
     *             message: String (Optional, Required on create)
     *             addedAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     scheduledAt: OffsetDateTime (Optional)
     *     matchingMode (Optional): {
     *         kind: String(queueAndMatch/scheduleAndSuspend/suspend) (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param jobId Id of a job.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a unit of work to be routed along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getJobWithResponseAsync(String jobId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getJob(this.getEndpoint(), this.getServiceVersion().getVersion(),
            jobId, accept, requestOptions, context));
    }

    /**
     * Retrieves an existing job by Id.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     etag: String (Required)
     *     id: String (Required)
     *     channelReference: String (Optional)
     *     status: String(pendingClassification/queued/assigned/completed/closed/cancelled/classificationFailed/created/pendingSchedule/scheduled/scheduleFailed/waitingForActivation) (Optional)
     *     enqueuedAt: OffsetDateTime (Optional)
     *     channelId: String (Optional)
     *     classificationPolicyId: String (Optional)
     *     queueId: String (Optional)
     *     priority: Integer (Optional)
     *     dispositionCode: String (Optional)
     *     requestedWorkerSelectors (Optional): [
     *          (Optional){
     *             key: String (Optional, Required on create)
     *             labelOperator: String(equal/notEqual/lessThan/lessThanOrEqual/greaterThan/greaterThanOrEqual) (Optional, Required on create)
     *             value: Object (Optional)
     *             expiresAfterSeconds: Double (Optional)
     *             expedite: Boolean (Optional)
     *             status: String(active/expired) (Optional)
     *             expiresAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     attachedWorkerSelectors (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     labels (Optional): {
     *         String: Object (Required)
     *     }
     *     assignments (Optional): {
     *         String (Required): {
     *             assignmentId: String (Required)
     *             workerId: String (Optional)
     *             assignedAt: OffsetDateTime (Required)
     *             completedAt: OffsetDateTime (Optional)
     *             closedAt: OffsetDateTime (Optional)
     *         }
     *     }
     *     tags (Optional): {
     *         String: Object (Required)
     *     }
     *     notes (Optional): [
     *          (Optional){
     *             message: String (Optional, Required on create)
     *             addedAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     scheduledAt: OffsetDateTime (Optional)
     *     matchingMode (Optional): {
     *         kind: String(queueAndMatch/scheduleAndSuspend/suspend) (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param jobId Id of a job.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a unit of work to be routed along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getJobWithResponse(String jobId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getJobSync(this.getEndpoint(), this.getServiceVersion().getVersion(), jobId, accept,
            requestOptions, Context.NONE);
    }

    /**
     * Deletes a job and all of its traces.
     * 
     * @param jobId Id of a job.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteJobWithResponseAsync(String jobId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.deleteJob(this.getEndpoint(),
            this.getServiceVersion().getVersion(), jobId, accept, requestOptions, context));
    }

    /**
     * Deletes a job and all of its traces.
     * 
     * @param jobId Id of a job.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteJobWithResponse(String jobId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.deleteJobSync(this.getEndpoint(), this.getServiceVersion().getVersion(), jobId, accept,
            requestOptions, Context.NONE);
    }

    /**
     * Reclassify a job.
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Content-Type</td><td>String</td><td>No</td><td>The content type. Allowed values:
     * "application/json".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     * }
     * }
     * </pre>
     * 
     * @param jobId Id of a job.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response payload from reclassifying a job along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> reclassifyJobWithResponseAsync(String jobId, RequestOptions requestOptions) {
        final String accept = "application/json";
        RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
        requestOptionsLocal.addRequestCallback(requestLocal -> {
            if (requestLocal.getBody() != null && requestLocal.getHeaders().get(HttpHeaderName.CONTENT_TYPE) == null) {
                requestLocal.getHeaders().set(HttpHeaderName.CONTENT_TYPE, "application/json");
            }
        });
        return FluxUtil.withContext(context -> service.reclassifyJob(this.getEndpoint(),
            this.getServiceVersion().getVersion(), jobId, accept, requestOptionsLocal, context));
    }

    /**
     * Reclassify a job.
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Content-Type</td><td>String</td><td>No</td><td>The content type. Allowed values:
     * "application/json".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     * }
     * }
     * </pre>
     * 
     * @param jobId Id of a job.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response payload from reclassifying a job along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> reclassifyJobWithResponse(String jobId, RequestOptions requestOptions) {
        final String accept = "application/json";
        RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
        requestOptionsLocal.addRequestCallback(requestLocal -> {
            if (requestLocal.getBody() != null && requestLocal.getHeaders().get(HttpHeaderName.CONTENT_TYPE) == null) {
                requestLocal.getHeaders().set(HttpHeaderName.CONTENT_TYPE, "application/json");
            }
        });
        return service.reclassifyJobSync(this.getEndpoint(), this.getServiceVersion().getVersion(), jobId, accept,
            requestOptionsLocal, Context.NONE);
    }

    /**
     * Submits request to cancel an existing job by Id while supplying free-form cancellation reason.
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Content-Type</td><td>String</td><td>No</td><td>The content type. Allowed values:
     * "application/json".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     note: String (Optional)
     *     dispositionCode: String (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     * }
     * }
     * </pre>
     * 
     * @param jobId Id of a job.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response payload from cancelling a job along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> cancelJobWithResponseAsync(String jobId, RequestOptions requestOptions) {
        final String accept = "application/json";
        RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
        requestOptionsLocal.addRequestCallback(requestLocal -> {
            if (requestLocal.getBody() != null && requestLocal.getHeaders().get(HttpHeaderName.CONTENT_TYPE) == null) {
                requestLocal.getHeaders().set(HttpHeaderName.CONTENT_TYPE, "application/json");
            }
        });
        return FluxUtil.withContext(context -> service.cancelJob(this.getEndpoint(),
            this.getServiceVersion().getVersion(), jobId, accept, requestOptionsLocal, context));
    }

    /**
     * Submits request to cancel an existing job by Id while supplying free-form cancellation reason.
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Content-Type</td><td>String</td><td>No</td><td>The content type. Allowed values:
     * "application/json".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     note: String (Optional)
     *     dispositionCode: String (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     * }
     * }
     * </pre>
     * 
     * @param jobId Id of a job.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response payload from cancelling a job along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> cancelJobWithResponse(String jobId, RequestOptions requestOptions) {
        final String accept = "application/json";
        RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
        requestOptionsLocal.addRequestCallback(requestLocal -> {
            if (requestLocal.getBody() != null && requestLocal.getHeaders().get(HttpHeaderName.CONTENT_TYPE) == null) {
                requestLocal.getHeaders().set(HttpHeaderName.CONTENT_TYPE, "application/json");
            }
        });
        return service.cancelJobSync(this.getEndpoint(), this.getServiceVersion().getVersion(), jobId, accept,
            requestOptionsLocal, Context.NONE);
    }

    /**
     * Completes an assigned job.
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Content-Type</td><td>String</td><td>No</td><td>The content type. Allowed values:
     * "application/json".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     note: String (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     * }
     * }
     * </pre>
     * 
     * @param jobId Id of a job.
     * @param assignmentId Id of a job assignment.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response payload from completing a job along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> completeJobWithResponseAsync(String jobId, String assignmentId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
        requestOptionsLocal.addRequestCallback(requestLocal -> {
            if (requestLocal.getBody() != null && requestLocal.getHeaders().get(HttpHeaderName.CONTENT_TYPE) == null) {
                requestLocal.getHeaders().set(HttpHeaderName.CONTENT_TYPE, "application/json");
            }
        });
        return FluxUtil.withContext(context -> service.completeJob(this.getEndpoint(),
            this.getServiceVersion().getVersion(), jobId, assignmentId, accept, requestOptionsLocal, context));
    }

    /**
     * Completes an assigned job.
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Content-Type</td><td>String</td><td>No</td><td>The content type. Allowed values:
     * "application/json".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     note: String (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     * }
     * }
     * </pre>
     * 
     * @param jobId Id of a job.
     * @param assignmentId Id of a job assignment.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response payload from completing a job along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> completeJobWithResponse(String jobId, String assignmentId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
        requestOptionsLocal.addRequestCallback(requestLocal -> {
            if (requestLocal.getBody() != null && requestLocal.getHeaders().get(HttpHeaderName.CONTENT_TYPE) == null) {
                requestLocal.getHeaders().set(HttpHeaderName.CONTENT_TYPE, "application/json");
            }
        });
        return service.completeJobSync(this.getEndpoint(), this.getServiceVersion().getVersion(), jobId, assignmentId,
            accept, requestOptionsLocal, Context.NONE);
    }

    /**
     * Closes a completed job.
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Content-Type</td><td>String</td><td>No</td><td>The content type. Allowed values:
     * "application/json".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     dispositionCode: String (Optional)
     *     closeAt: OffsetDateTime (Optional)
     *     note: String (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     * }
     * }
     * </pre>
     * 
     * @param jobId Id of a job.
     * @param assignmentId Id of a job assignment.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response payload from closing a job along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> closeJobWithResponseAsync(String jobId, String assignmentId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
        requestOptionsLocal.addRequestCallback(requestLocal -> {
            if (requestLocal.getBody() != null && requestLocal.getHeaders().get(HttpHeaderName.CONTENT_TYPE) == null) {
                requestLocal.getHeaders().set(HttpHeaderName.CONTENT_TYPE, "application/json");
            }
        });
        return FluxUtil.withContext(context -> service.closeJob(this.getEndpoint(),
            this.getServiceVersion().getVersion(), jobId, assignmentId, accept, requestOptionsLocal, context));
    }

    /**
     * Closes a completed job.
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Content-Type</td><td>String</td><td>No</td><td>The content type. Allowed values:
     * "application/json".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     dispositionCode: String (Optional)
     *     closeAt: OffsetDateTime (Optional)
     *     note: String (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     * }
     * }
     * </pre>
     * 
     * @param jobId Id of a job.
     * @param assignmentId Id of a job assignment.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response payload from closing a job along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> closeJobWithResponse(String jobId, String assignmentId, RequestOptions requestOptions) {
        final String accept = "application/json";
        RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
        requestOptionsLocal.addRequestCallback(requestLocal -> {
            if (requestLocal.getBody() != null && requestLocal.getHeaders().get(HttpHeaderName.CONTENT_TYPE) == null) {
                requestLocal.getHeaders().set(HttpHeaderName.CONTENT_TYPE, "application/json");
            }
        });
        return service.closeJobSync(this.getEndpoint(), this.getServiceVersion().getVersion(), jobId, assignmentId,
            accept, requestOptionsLocal, Context.NONE);
    }

    /**
     * Retrieves list of jobs based on filter parameters.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>Number of objects to return per page.</td></tr>
     * <tr><td>status</td><td>String</td><td>No</td><td>If specified, filter jobs by status. Allowed values: "all",
     * "pendingClassification", "queued", "assigned", "completed", "closed", "cancelled", "classificationFailed",
     * "created", "pendingSchedule", "scheduled", "scheduleFailed", "waitingForActivation", "active".</td></tr>
     * <tr><td>queueId</td><td>String</td><td>No</td><td>If specified, filter jobs by queue.</td></tr>
     * <tr><td>channelId</td><td>String</td><td>No</td><td>If specified, filter jobs by channel.</td></tr>
     * <tr><td>classificationPolicyId</td><td>String</td><td>No</td><td>If specified, filter jobs by
     * classificationPolicy.</td></tr>
     * <tr><td>scheduledBefore</td><td>OffsetDateTime</td><td>No</td><td>If specified, filter on jobs that was scheduled
     * before or at given timestamp. Range: (-Inf, scheduledBefore].</td></tr>
     * <tr><td>scheduledAfter</td><td>OffsetDateTime</td><td>No</td><td>If specified, filter on jobs that was scheduled
     * at or after given value. Range: [scheduledAfter, +Inf).</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     etag: String (Required)
     *     id: String (Required)
     *     channelReference: String (Optional)
     *     status: String(pendingClassification/queued/assigned/completed/closed/cancelled/classificationFailed/created/pendingSchedule/scheduled/scheduleFailed/waitingForActivation) (Optional)
     *     enqueuedAt: OffsetDateTime (Optional)
     *     channelId: String (Optional)
     *     classificationPolicyId: String (Optional)
     *     queueId: String (Optional)
     *     priority: Integer (Optional)
     *     dispositionCode: String (Optional)
     *     requestedWorkerSelectors (Optional): [
     *          (Optional){
     *             key: String (Optional, Required on create)
     *             labelOperator: String(equal/notEqual/lessThan/lessThanOrEqual/greaterThan/greaterThanOrEqual) (Optional, Required on create)
     *             value: Object (Optional)
     *             expiresAfterSeconds: Double (Optional)
     *             expedite: Boolean (Optional)
     *             status: String(active/expired) (Optional)
     *             expiresAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     attachedWorkerSelectors (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     labels (Optional): {
     *         String: Object (Required)
     *     }
     *     assignments (Optional): {
     *         String (Required): {
     *             assignmentId: String (Required)
     *             workerId: String (Optional)
     *             assignedAt: OffsetDateTime (Required)
     *             completedAt: OffsetDateTime (Optional)
     *             closedAt: OffsetDateTime (Optional)
     *         }
     *     }
     *     tags (Optional): {
     *         String: Object (Required)
     *     }
     *     notes (Optional): [
     *          (Optional){
     *             message: String (Optional, Required on create)
     *             addedAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     scheduledAt: OffsetDateTime (Optional)
     *     matchingMode (Optional): {
     *         kind: String(queueAndMatch/scheduleAndSuspend/suspend) (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of RouterJob items along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listJobsSinglePageAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listJobs(this.getEndpoint(), this.getServiceVersion().getVersion(), accept,
                requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * Retrieves list of jobs based on filter parameters.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>Number of objects to return per page.</td></tr>
     * <tr><td>status</td><td>String</td><td>No</td><td>If specified, filter jobs by status. Allowed values: "all",
     * "pendingClassification", "queued", "assigned", "completed", "closed", "cancelled", "classificationFailed",
     * "created", "pendingSchedule", "scheduled", "scheduleFailed", "waitingForActivation", "active".</td></tr>
     * <tr><td>queueId</td><td>String</td><td>No</td><td>If specified, filter jobs by queue.</td></tr>
     * <tr><td>channelId</td><td>String</td><td>No</td><td>If specified, filter jobs by channel.</td></tr>
     * <tr><td>classificationPolicyId</td><td>String</td><td>No</td><td>If specified, filter jobs by
     * classificationPolicy.</td></tr>
     * <tr><td>scheduledBefore</td><td>OffsetDateTime</td><td>No</td><td>If specified, filter on jobs that was scheduled
     * before or at given timestamp. Range: (-Inf, scheduledBefore].</td></tr>
     * <tr><td>scheduledAfter</td><td>OffsetDateTime</td><td>No</td><td>If specified, filter on jobs that was scheduled
     * at or after given value. Range: [scheduledAfter, +Inf).</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     etag: String (Required)
     *     id: String (Required)
     *     channelReference: String (Optional)
     *     status: String(pendingClassification/queued/assigned/completed/closed/cancelled/classificationFailed/created/pendingSchedule/scheduled/scheduleFailed/waitingForActivation) (Optional)
     *     enqueuedAt: OffsetDateTime (Optional)
     *     channelId: String (Optional)
     *     classificationPolicyId: String (Optional)
     *     queueId: String (Optional)
     *     priority: Integer (Optional)
     *     dispositionCode: String (Optional)
     *     requestedWorkerSelectors (Optional): [
     *          (Optional){
     *             key: String (Optional, Required on create)
     *             labelOperator: String(equal/notEqual/lessThan/lessThanOrEqual/greaterThan/greaterThanOrEqual) (Optional, Required on create)
     *             value: Object (Optional)
     *             expiresAfterSeconds: Double (Optional)
     *             expedite: Boolean (Optional)
     *             status: String(active/expired) (Optional)
     *             expiresAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     attachedWorkerSelectors (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     labels (Optional): {
     *         String: Object (Required)
     *     }
     *     assignments (Optional): {
     *         String (Required): {
     *             assignmentId: String (Required)
     *             workerId: String (Optional)
     *             assignedAt: OffsetDateTime (Required)
     *             completedAt: OffsetDateTime (Optional)
     *             closedAt: OffsetDateTime (Optional)
     *         }
     *     }
     *     tags (Optional): {
     *         String: Object (Required)
     *     }
     *     notes (Optional): [
     *          (Optional){
     *             message: String (Optional, Required on create)
     *             addedAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     scheduledAt: OffsetDateTime (Optional)
     *     matchingMode (Optional): {
     *         kind: String(queueAndMatch/scheduleAndSuspend/suspend) (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of RouterJob items as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listJobsAsync(RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedFlux<>((pageSize) -> {
            RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return listJobsSinglePageAsync(requestOptionsLocal);
        }, (nextLink, pageSize) -> {
            RequestOptions requestOptionsLocal = new RequestOptions();
            requestOptionsLocal.setContext(requestOptionsForNextPage.getContext());
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return listJobsNextSinglePageAsync(nextLink, requestOptionsLocal);
        });
    }

    /**
     * Retrieves list of jobs based on filter parameters.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>Number of objects to return per page.</td></tr>
     * <tr><td>status</td><td>String</td><td>No</td><td>If specified, filter jobs by status. Allowed values: "all",
     * "pendingClassification", "queued", "assigned", "completed", "closed", "cancelled", "classificationFailed",
     * "created", "pendingSchedule", "scheduled", "scheduleFailed", "waitingForActivation", "active".</td></tr>
     * <tr><td>queueId</td><td>String</td><td>No</td><td>If specified, filter jobs by queue.</td></tr>
     * <tr><td>channelId</td><td>String</td><td>No</td><td>If specified, filter jobs by channel.</td></tr>
     * <tr><td>classificationPolicyId</td><td>String</td><td>No</td><td>If specified, filter jobs by
     * classificationPolicy.</td></tr>
     * <tr><td>scheduledBefore</td><td>OffsetDateTime</td><td>No</td><td>If specified, filter on jobs that was scheduled
     * before or at given timestamp. Range: (-Inf, scheduledBefore].</td></tr>
     * <tr><td>scheduledAfter</td><td>OffsetDateTime</td><td>No</td><td>If specified, filter on jobs that was scheduled
     * at or after given value. Range: [scheduledAfter, +Inf).</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     etag: String (Required)
     *     id: String (Required)
     *     channelReference: String (Optional)
     *     status: String(pendingClassification/queued/assigned/completed/closed/cancelled/classificationFailed/created/pendingSchedule/scheduled/scheduleFailed/waitingForActivation) (Optional)
     *     enqueuedAt: OffsetDateTime (Optional)
     *     channelId: String (Optional)
     *     classificationPolicyId: String (Optional)
     *     queueId: String (Optional)
     *     priority: Integer (Optional)
     *     dispositionCode: String (Optional)
     *     requestedWorkerSelectors (Optional): [
     *          (Optional){
     *             key: String (Optional, Required on create)
     *             labelOperator: String(equal/notEqual/lessThan/lessThanOrEqual/greaterThan/greaterThanOrEqual) (Optional, Required on create)
     *             value: Object (Optional)
     *             expiresAfterSeconds: Double (Optional)
     *             expedite: Boolean (Optional)
     *             status: String(active/expired) (Optional)
     *             expiresAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     attachedWorkerSelectors (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     labels (Optional): {
     *         String: Object (Required)
     *     }
     *     assignments (Optional): {
     *         String (Required): {
     *             assignmentId: String (Required)
     *             workerId: String (Optional)
     *             assignedAt: OffsetDateTime (Required)
     *             completedAt: OffsetDateTime (Optional)
     *             closedAt: OffsetDateTime (Optional)
     *         }
     *     }
     *     tags (Optional): {
     *         String: Object (Required)
     *     }
     *     notes (Optional): [
     *          (Optional){
     *             message: String (Optional, Required on create)
     *             addedAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     scheduledAt: OffsetDateTime (Optional)
     *     matchingMode (Optional): {
     *         kind: String(queueAndMatch/scheduleAndSuspend/suspend) (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of RouterJob items along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listJobsSinglePage(RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res = service.listJobsSync(this.getEndpoint(), this.getServiceVersion().getVersion(),
            accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    /**
     * Retrieves list of jobs based on filter parameters.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>Number of objects to return per page.</td></tr>
     * <tr><td>status</td><td>String</td><td>No</td><td>If specified, filter jobs by status. Allowed values: "all",
     * "pendingClassification", "queued", "assigned", "completed", "closed", "cancelled", "classificationFailed",
     * "created", "pendingSchedule", "scheduled", "scheduleFailed", "waitingForActivation", "active".</td></tr>
     * <tr><td>queueId</td><td>String</td><td>No</td><td>If specified, filter jobs by queue.</td></tr>
     * <tr><td>channelId</td><td>String</td><td>No</td><td>If specified, filter jobs by channel.</td></tr>
     * <tr><td>classificationPolicyId</td><td>String</td><td>No</td><td>If specified, filter jobs by
     * classificationPolicy.</td></tr>
     * <tr><td>scheduledBefore</td><td>OffsetDateTime</td><td>No</td><td>If specified, filter on jobs that was scheduled
     * before or at given timestamp. Range: (-Inf, scheduledBefore].</td></tr>
     * <tr><td>scheduledAfter</td><td>OffsetDateTime</td><td>No</td><td>If specified, filter on jobs that was scheduled
     * at or after given value. Range: [scheduledAfter, +Inf).</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     etag: String (Required)
     *     id: String (Required)
     *     channelReference: String (Optional)
     *     status: String(pendingClassification/queued/assigned/completed/closed/cancelled/classificationFailed/created/pendingSchedule/scheduled/scheduleFailed/waitingForActivation) (Optional)
     *     enqueuedAt: OffsetDateTime (Optional)
     *     channelId: String (Optional)
     *     classificationPolicyId: String (Optional)
     *     queueId: String (Optional)
     *     priority: Integer (Optional)
     *     dispositionCode: String (Optional)
     *     requestedWorkerSelectors (Optional): [
     *          (Optional){
     *             key: String (Optional, Required on create)
     *             labelOperator: String(equal/notEqual/lessThan/lessThanOrEqual/greaterThan/greaterThanOrEqual) (Optional, Required on create)
     *             value: Object (Optional)
     *             expiresAfterSeconds: Double (Optional)
     *             expedite: Boolean (Optional)
     *             status: String(active/expired) (Optional)
     *             expiresAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     attachedWorkerSelectors (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     labels (Optional): {
     *         String: Object (Required)
     *     }
     *     assignments (Optional): {
     *         String (Required): {
     *             assignmentId: String (Required)
     *             workerId: String (Optional)
     *             assignedAt: OffsetDateTime (Required)
     *             completedAt: OffsetDateTime (Optional)
     *             closedAt: OffsetDateTime (Optional)
     *         }
     *     }
     *     tags (Optional): {
     *         String: Object (Required)
     *     }
     *     notes (Optional): [
     *          (Optional){
     *             message: String (Optional, Required on create)
     *             addedAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     scheduledAt: OffsetDateTime (Optional)
     *     matchingMode (Optional): {
     *         kind: String(queueAndMatch/scheduleAndSuspend/suspend) (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of RouterJob items as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listJobs(RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedIterable<>((pageSize) -> {
            RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return listJobsSinglePage(requestOptionsLocal);
        }, (nextLink, pageSize) -> {
            RequestOptions requestOptionsLocal = new RequestOptions();
            requestOptionsLocal.setContext(requestOptionsForNextPage.getContext());
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return listJobsNextSinglePage(nextLink, requestOptionsLocal);
        });
    }

    /**
     * Gets a job's position details.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     jobId: String (Required)
     *     position: int (Required)
     *     queueId: String (Required)
     *     queueLength: int (Required)
     *     estimatedWaitTimeMinutes: double (Required)
     * }
     * }
     * </pre>
     * 
     * @param jobId Id of the job.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a job's position details along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getQueuePositionWithResponseAsync(String jobId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getQueuePosition(this.getEndpoint(),
            this.getServiceVersion().getVersion(), jobId, accept, requestOptions, context));
    }

    /**
     * Gets a job's position details.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     jobId: String (Required)
     *     position: int (Required)
     *     queueId: String (Required)
     *     queueLength: int (Required)
     *     estimatedWaitTimeMinutes: double (Required)
     * }
     * }
     * </pre>
     * 
     * @param jobId Id of the job.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a job's position details along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getQueuePositionWithResponse(String jobId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getQueuePositionSync(this.getEndpoint(), this.getServiceVersion().getVersion(), jobId, accept,
            requestOptions, Context.NONE);
    }

    /**
     * Unassign a job.
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Content-Type</td><td>String</td><td>No</td><td>The content type. Allowed values:
     * "application/json".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     suspendMatching: Boolean (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     jobId: String (Required)
     *     unassignmentCount: int (Required)
     * }
     * }
     * </pre>
     * 
     * @param jobId Id of a job.
     * @param assignmentId Id of a job assignment.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response payload after a job has been successfully unassigned along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> unassignJobWithResponseAsync(String jobId, String assignmentId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
        requestOptionsLocal.addRequestCallback(requestLocal -> {
            if (requestLocal.getBody() != null && requestLocal.getHeaders().get(HttpHeaderName.CONTENT_TYPE) == null) {
                requestLocal.getHeaders().set(HttpHeaderName.CONTENT_TYPE, "application/json");
            }
        });
        return FluxUtil.withContext(context -> service.unassignJob(this.getEndpoint(),
            this.getServiceVersion().getVersion(), jobId, assignmentId, accept, requestOptionsLocal, context));
    }

    /**
     * Unassign a job.
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Content-Type</td><td>String</td><td>No</td><td>The content type. Allowed values:
     * "application/json".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     suspendMatching: Boolean (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     jobId: String (Required)
     *     unassignmentCount: int (Required)
     * }
     * }
     * </pre>
     * 
     * @param jobId Id of a job.
     * @param assignmentId Id of a job assignment.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response payload after a job has been successfully unassigned along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> unassignJobWithResponse(String jobId, String assignmentId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
        requestOptionsLocal.addRequestCallback(requestLocal -> {
            if (requestLocal.getBody() != null && requestLocal.getHeaders().get(HttpHeaderName.CONTENT_TYPE) == null) {
                requestLocal.getHeaders().set(HttpHeaderName.CONTENT_TYPE, "application/json");
            }
        });
        return service.unassignJobSync(this.getEndpoint(), this.getServiceVersion().getVersion(), jobId, assignmentId,
            accept, requestOptionsLocal, Context.NONE);
    }

    /**
     * Accepts an offer to work on a job and returns a 409/Conflict if another agent accepted the job already.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     assignmentId: String (Required)
     *     jobId: String (Required)
     *     workerId: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param workerId Id of a worker.
     * @param offerId Id of an offer.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response containing ids for the worker, job, and assignment from an accepted offer along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> acceptJobOfferWithResponseAsync(String workerId, String offerId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.acceptJobOffer(this.getEndpoint(),
            this.getServiceVersion().getVersion(), workerId, offerId, accept, requestOptions, context));
    }

    /**
     * Accepts an offer to work on a job and returns a 409/Conflict if another agent accepted the job already.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     assignmentId: String (Required)
     *     jobId: String (Required)
     *     workerId: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param workerId Id of a worker.
     * @param offerId Id of an offer.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response containing ids for the worker, job, and assignment from an accepted offer along with
     * {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> acceptJobOfferWithResponse(String workerId, String offerId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.acceptJobOfferSync(this.getEndpoint(), this.getServiceVersion().getVersion(), workerId, offerId,
            accept, requestOptions, Context.NONE);
    }

    /**
     * Declines an offer to work on a job.
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Content-Type</td><td>String</td><td>No</td><td>The content type. Allowed values:
     * "application/json".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     retryOfferAt: OffsetDateTime (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     * }
     * }
     * </pre>
     * 
     * @param workerId Id of a worker.
     * @param offerId Id of an offer.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response payload from declining a job along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> declineJobOfferWithResponseAsync(String workerId, String offerId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
        requestOptionsLocal.addRequestCallback(requestLocal -> {
            if (requestLocal.getBody() != null && requestLocal.getHeaders().get(HttpHeaderName.CONTENT_TYPE) == null) {
                requestLocal.getHeaders().set(HttpHeaderName.CONTENT_TYPE, "application/json");
            }
        });
        return FluxUtil.withContext(context -> service.declineJobOffer(this.getEndpoint(),
            this.getServiceVersion().getVersion(), workerId, offerId, accept, requestOptionsLocal, context));
    }

    /**
     * Declines an offer to work on a job.
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Content-Type</td><td>String</td><td>No</td><td>The content type. Allowed values:
     * "application/json".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     retryOfferAt: OffsetDateTime (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     * }
     * }
     * </pre>
     * 
     * @param workerId Id of a worker.
     * @param offerId Id of an offer.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response payload from declining a job along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> declineJobOfferWithResponse(String workerId, String offerId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
        requestOptionsLocal.addRequestCallback(requestLocal -> {
            if (requestLocal.getBody() != null && requestLocal.getHeaders().get(HttpHeaderName.CONTENT_TYPE) == null) {
                requestLocal.getHeaders().set(HttpHeaderName.CONTENT_TYPE, "application/json");
            }
        });
        return service.declineJobOfferSync(this.getEndpoint(), this.getServiceVersion().getVersion(), workerId, offerId,
            accept, requestOptionsLocal, Context.NONE);
    }

    /**
     * Retrieves a queue's statistics.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     queueId: String (Required)
     *     length: int (Required)
     *     estimatedWaitTimeMinutes (Optional): {
     *         String: double (Required)
     *     }
     *     longestJobWaitTimeMinutes: Double (Optional)
     * }
     * }
     * </pre>
     * 
     * @param queueId Id of the queue to retrieve statistics.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return statistics for the queue along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getQueueStatisticsWithResponseAsync(String queueId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getQueueStatistics(this.getEndpoint(),
            this.getServiceVersion().getVersion(), queueId, accept, requestOptions, context));
    }

    /**
     * Retrieves a queue's statistics.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     queueId: String (Required)
     *     length: int (Required)
     *     estimatedWaitTimeMinutes (Optional): {
     *         String: double (Required)
     *     }
     *     longestJobWaitTimeMinutes: Double (Optional)
     * }
     * }
     * </pre>
     * 
     * @param queueId Id of the queue to retrieve statistics.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return statistics for the queue along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getQueueStatisticsWithResponse(String queueId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getQueueStatisticsSync(this.getEndpoint(), this.getServiceVersion().getVersion(), queueId,
            accept, requestOptions, Context.NONE);
    }

    /**
     * Creates or updates a worker.
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>The request should only proceed if an entity matches this
     * string.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the
     * entity was not modified after this time.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     etag: String (Required)
     *     id: String (Required)
     *     state: String(active/draining/inactive) (Optional)
     *     queues (Optional): [
     *         String (Optional)
     *     ]
     *     capacity: Integer (Optional)
     *     labels (Optional): {
     *         String: Object (Required)
     *     }
     *     tags (Optional): {
     *         String: Object (Required)
     *     }
     *     channels (Optional): [
     *          (Optional){
     *             channelId: String (Optional, Required on create)
     *             capacityCostPerJob: int (Optional, Required on create)
     *             maxNumberOfJobs: Integer (Optional)
     *         }
     *     ]
     *     offers (Optional): [
     *          (Optional){
     *             offerId: String (Required)
     *             jobId: String (Required)
     *             capacityCost: int (Required)
     *             offeredAt: OffsetDateTime (Optional)
     *             expiresAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     assignedJobs (Optional): [
     *          (Optional){
     *             assignmentId: String (Required)
     *             jobId: String (Required)
     *             capacityCost: int (Required)
     *             assignedAt: OffsetDateTime (Required)
     *         }
     *     ]
     *     loadRatio: Double (Optional)
     *     availableForOffers: Boolean (Optional)
     *     maxConcurrentOffers: Integer (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     etag: String (Required)
     *     id: String (Required)
     *     state: String(active/draining/inactive) (Optional)
     *     queues (Optional): [
     *         String (Optional)
     *     ]
     *     capacity: Integer (Optional)
     *     labels (Optional): {
     *         String: Object (Required)
     *     }
     *     tags (Optional): {
     *         String: Object (Required)
     *     }
     *     channels (Optional): [
     *          (Optional){
     *             channelId: String (Optional, Required on create)
     *             capacityCostPerJob: int (Optional, Required on create)
     *             maxNumberOfJobs: Integer (Optional)
     *         }
     *     ]
     *     offers (Optional): [
     *          (Optional){
     *             offerId: String (Required)
     *             jobId: String (Required)
     *             capacityCost: int (Required)
     *             offeredAt: OffsetDateTime (Optional)
     *             expiresAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     assignedJobs (Optional): [
     *          (Optional){
     *             assignmentId: String (Required)
     *             jobId: String (Required)
     *             capacityCost: int (Required)
     *             assignedAt: OffsetDateTime (Required)
     *         }
     *     ]
     *     loadRatio: Double (Optional)
     *     availableForOffers: Boolean (Optional)
     *     maxConcurrentOffers: Integer (Optional)
     * }
     * }
     * </pre>
     * 
     * @param workerId Id of a worker.
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an entity for jobs to be routed to along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> upsertWorkerWithResponseAsync(String workerId, BinaryData resource,
        RequestOptions requestOptions) {
        final String contentType = "application/merge-patch+json";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.upsertWorker(this.getEndpoint(),
            this.getServiceVersion().getVersion(), workerId, contentType, accept, resource, requestOptions, context));
    }

    /**
     * Creates or updates a worker.
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>The request should only proceed if an entity matches this
     * string.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the
     * entity was not modified after this time.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     etag: String (Required)
     *     id: String (Required)
     *     state: String(active/draining/inactive) (Optional)
     *     queues (Optional): [
     *         String (Optional)
     *     ]
     *     capacity: Integer (Optional)
     *     labels (Optional): {
     *         String: Object (Required)
     *     }
     *     tags (Optional): {
     *         String: Object (Required)
     *     }
     *     channels (Optional): [
     *          (Optional){
     *             channelId: String (Optional, Required on create)
     *             capacityCostPerJob: int (Optional, Required on create)
     *             maxNumberOfJobs: Integer (Optional)
     *         }
     *     ]
     *     offers (Optional): [
     *          (Optional){
     *             offerId: String (Required)
     *             jobId: String (Required)
     *             capacityCost: int (Required)
     *             offeredAt: OffsetDateTime (Optional)
     *             expiresAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     assignedJobs (Optional): [
     *          (Optional){
     *             assignmentId: String (Required)
     *             jobId: String (Required)
     *             capacityCost: int (Required)
     *             assignedAt: OffsetDateTime (Required)
     *         }
     *     ]
     *     loadRatio: Double (Optional)
     *     availableForOffers: Boolean (Optional)
     *     maxConcurrentOffers: Integer (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     etag: String (Required)
     *     id: String (Required)
     *     state: String(active/draining/inactive) (Optional)
     *     queues (Optional): [
     *         String (Optional)
     *     ]
     *     capacity: Integer (Optional)
     *     labels (Optional): {
     *         String: Object (Required)
     *     }
     *     tags (Optional): {
     *         String: Object (Required)
     *     }
     *     channels (Optional): [
     *          (Optional){
     *             channelId: String (Optional, Required on create)
     *             capacityCostPerJob: int (Optional, Required on create)
     *             maxNumberOfJobs: Integer (Optional)
     *         }
     *     ]
     *     offers (Optional): [
     *          (Optional){
     *             offerId: String (Required)
     *             jobId: String (Required)
     *             capacityCost: int (Required)
     *             offeredAt: OffsetDateTime (Optional)
     *             expiresAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     assignedJobs (Optional): [
     *          (Optional){
     *             assignmentId: String (Required)
     *             jobId: String (Required)
     *             capacityCost: int (Required)
     *             assignedAt: OffsetDateTime (Required)
     *         }
     *     ]
     *     loadRatio: Double (Optional)
     *     availableForOffers: Boolean (Optional)
     *     maxConcurrentOffers: Integer (Optional)
     * }
     * }
     * </pre>
     * 
     * @param workerId Id of a worker.
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an entity for jobs to be routed to along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> upsertWorkerWithResponse(String workerId, BinaryData resource,
        RequestOptions requestOptions) {
        final String contentType = "application/merge-patch+json";
        final String accept = "application/json";
        return service.upsertWorkerSync(this.getEndpoint(), this.getServiceVersion().getVersion(), workerId,
            contentType, accept, resource, requestOptions, Context.NONE);
    }

    /**
     * Retrieves an existing worker by Id.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     etag: String (Required)
     *     id: String (Required)
     *     state: String(active/draining/inactive) (Optional)
     *     queues (Optional): [
     *         String (Optional)
     *     ]
     *     capacity: Integer (Optional)
     *     labels (Optional): {
     *         String: Object (Required)
     *     }
     *     tags (Optional): {
     *         String: Object (Required)
     *     }
     *     channels (Optional): [
     *          (Optional){
     *             channelId: String (Optional, Required on create)
     *             capacityCostPerJob: int (Optional, Required on create)
     *             maxNumberOfJobs: Integer (Optional)
     *         }
     *     ]
     *     offers (Optional): [
     *          (Optional){
     *             offerId: String (Required)
     *             jobId: String (Required)
     *             capacityCost: int (Required)
     *             offeredAt: OffsetDateTime (Optional)
     *             expiresAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     assignedJobs (Optional): [
     *          (Optional){
     *             assignmentId: String (Required)
     *             jobId: String (Required)
     *             capacityCost: int (Required)
     *             assignedAt: OffsetDateTime (Required)
     *         }
     *     ]
     *     loadRatio: Double (Optional)
     *     availableForOffers: Boolean (Optional)
     *     maxConcurrentOffers: Integer (Optional)
     * }
     * }
     * </pre>
     * 
     * @param workerId Id of a worker.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an entity for jobs to be routed to along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getWorkerWithResponseAsync(String workerId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getWorker(this.getEndpoint(),
            this.getServiceVersion().getVersion(), workerId, accept, requestOptions, context));
    }

    /**
     * Retrieves an existing worker by Id.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     etag: String (Required)
     *     id: String (Required)
     *     state: String(active/draining/inactive) (Optional)
     *     queues (Optional): [
     *         String (Optional)
     *     ]
     *     capacity: Integer (Optional)
     *     labels (Optional): {
     *         String: Object (Required)
     *     }
     *     tags (Optional): {
     *         String: Object (Required)
     *     }
     *     channels (Optional): [
     *          (Optional){
     *             channelId: String (Optional, Required on create)
     *             capacityCostPerJob: int (Optional, Required on create)
     *             maxNumberOfJobs: Integer (Optional)
     *         }
     *     ]
     *     offers (Optional): [
     *          (Optional){
     *             offerId: String (Required)
     *             jobId: String (Required)
     *             capacityCost: int (Required)
     *             offeredAt: OffsetDateTime (Optional)
     *             expiresAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     assignedJobs (Optional): [
     *          (Optional){
     *             assignmentId: String (Required)
     *             jobId: String (Required)
     *             capacityCost: int (Required)
     *             assignedAt: OffsetDateTime (Required)
     *         }
     *     ]
     *     loadRatio: Double (Optional)
     *     availableForOffers: Boolean (Optional)
     *     maxConcurrentOffers: Integer (Optional)
     * }
     * }
     * </pre>
     * 
     * @param workerId Id of a worker.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an entity for jobs to be routed to along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getWorkerWithResponse(String workerId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getWorkerSync(this.getEndpoint(), this.getServiceVersion().getVersion(), workerId, accept,
            requestOptions, Context.NONE);
    }

    /**
     * Deletes a worker and all of its traces.
     * 
     * @param workerId Id of a worker.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteWorkerWithResponseAsync(String workerId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.deleteWorker(this.getEndpoint(),
            this.getServiceVersion().getVersion(), workerId, accept, requestOptions, context));
    }

    /**
     * Deletes a worker and all of its traces.
     * 
     * @param workerId Id of a worker.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWorkerWithResponse(String workerId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.deleteWorkerSync(this.getEndpoint(), this.getServiceVersion().getVersion(), workerId, accept,
            requestOptions, Context.NONE);
    }

    /**
     * Retrieves existing workers.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>Number of objects to return per page.</td></tr>
     * <tr><td>state</td><td>String</td><td>No</td><td>If specified, select workers by worker state. Allowed values:
     * "active", "draining", "inactive", "all".</td></tr>
     * <tr><td>channelId</td><td>String</td><td>No</td><td>If specified, select workers who have a channel configuration
     * with this channel.</td></tr>
     * <tr><td>queueId</td><td>String</td><td>No</td><td>If specified, select workers who are assigned to this
     * queue.</td></tr>
     * <tr><td>hasCapacity</td><td>Boolean</td><td>No</td><td>If set to true, select only workers who have capacity for
     * the channel specified by `channelId` or for any channel if `channelId` not specified. If set to false, then will
     * return all workers including workers without any capacity for jobs. Defaults to false.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     etag: String (Required)
     *     id: String (Required)
     *     state: String(active/draining/inactive) (Optional)
     *     queues (Optional): [
     *         String (Optional)
     *     ]
     *     capacity: Integer (Optional)
     *     labels (Optional): {
     *         String: Object (Required)
     *     }
     *     tags (Optional): {
     *         String: Object (Required)
     *     }
     *     channels (Optional): [
     *          (Optional){
     *             channelId: String (Optional, Required on create)
     *             capacityCostPerJob: int (Optional, Required on create)
     *             maxNumberOfJobs: Integer (Optional)
     *         }
     *     ]
     *     offers (Optional): [
     *          (Optional){
     *             offerId: String (Required)
     *             jobId: String (Required)
     *             capacityCost: int (Required)
     *             offeredAt: OffsetDateTime (Optional)
     *             expiresAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     assignedJobs (Optional): [
     *          (Optional){
     *             assignmentId: String (Required)
     *             jobId: String (Required)
     *             capacityCost: int (Required)
     *             assignedAt: OffsetDateTime (Required)
     *         }
     *     ]
     *     loadRatio: Double (Optional)
     *     availableForOffers: Boolean (Optional)
     *     maxConcurrentOffers: Integer (Optional)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of RouterWorker items along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listWorkersSinglePageAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listWorkers(this.getEndpoint(), this.getServiceVersion().getVersion(),
                accept, requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * Retrieves existing workers.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>Number of objects to return per page.</td></tr>
     * <tr><td>state</td><td>String</td><td>No</td><td>If specified, select workers by worker state. Allowed values:
     * "active", "draining", "inactive", "all".</td></tr>
     * <tr><td>channelId</td><td>String</td><td>No</td><td>If specified, select workers who have a channel configuration
     * with this channel.</td></tr>
     * <tr><td>queueId</td><td>String</td><td>No</td><td>If specified, select workers who are assigned to this
     * queue.</td></tr>
     * <tr><td>hasCapacity</td><td>Boolean</td><td>No</td><td>If set to true, select only workers who have capacity for
     * the channel specified by `channelId` or for any channel if `channelId` not specified. If set to false, then will
     * return all workers including workers without any capacity for jobs. Defaults to false.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     etag: String (Required)
     *     id: String (Required)
     *     state: String(active/draining/inactive) (Optional)
     *     queues (Optional): [
     *         String (Optional)
     *     ]
     *     capacity: Integer (Optional)
     *     labels (Optional): {
     *         String: Object (Required)
     *     }
     *     tags (Optional): {
     *         String: Object (Required)
     *     }
     *     channels (Optional): [
     *          (Optional){
     *             channelId: String (Optional, Required on create)
     *             capacityCostPerJob: int (Optional, Required on create)
     *             maxNumberOfJobs: Integer (Optional)
     *         }
     *     ]
     *     offers (Optional): [
     *          (Optional){
     *             offerId: String (Required)
     *             jobId: String (Required)
     *             capacityCost: int (Required)
     *             offeredAt: OffsetDateTime (Optional)
     *             expiresAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     assignedJobs (Optional): [
     *          (Optional){
     *             assignmentId: String (Required)
     *             jobId: String (Required)
     *             capacityCost: int (Required)
     *             assignedAt: OffsetDateTime (Required)
     *         }
     *     ]
     *     loadRatio: Double (Optional)
     *     availableForOffers: Boolean (Optional)
     *     maxConcurrentOffers: Integer (Optional)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of RouterWorker items as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listWorkersAsync(RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedFlux<>((pageSize) -> {
            RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return listWorkersSinglePageAsync(requestOptionsLocal);
        }, (nextLink, pageSize) -> {
            RequestOptions requestOptionsLocal = new RequestOptions();
            requestOptionsLocal.setContext(requestOptionsForNextPage.getContext());
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return listWorkersNextSinglePageAsync(nextLink, requestOptionsLocal);
        });
    }

    /**
     * Retrieves existing workers.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>Number of objects to return per page.</td></tr>
     * <tr><td>state</td><td>String</td><td>No</td><td>If specified, select workers by worker state. Allowed values:
     * "active", "draining", "inactive", "all".</td></tr>
     * <tr><td>channelId</td><td>String</td><td>No</td><td>If specified, select workers who have a channel configuration
     * with this channel.</td></tr>
     * <tr><td>queueId</td><td>String</td><td>No</td><td>If specified, select workers who are assigned to this
     * queue.</td></tr>
     * <tr><td>hasCapacity</td><td>Boolean</td><td>No</td><td>If set to true, select only workers who have capacity for
     * the channel specified by `channelId` or for any channel if `channelId` not specified. If set to false, then will
     * return all workers including workers without any capacity for jobs. Defaults to false.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     etag: String (Required)
     *     id: String (Required)
     *     state: String(active/draining/inactive) (Optional)
     *     queues (Optional): [
     *         String (Optional)
     *     ]
     *     capacity: Integer (Optional)
     *     labels (Optional): {
     *         String: Object (Required)
     *     }
     *     tags (Optional): {
     *         String: Object (Required)
     *     }
     *     channels (Optional): [
     *          (Optional){
     *             channelId: String (Optional, Required on create)
     *             capacityCostPerJob: int (Optional, Required on create)
     *             maxNumberOfJobs: Integer (Optional)
     *         }
     *     ]
     *     offers (Optional): [
     *          (Optional){
     *             offerId: String (Required)
     *             jobId: String (Required)
     *             capacityCost: int (Required)
     *             offeredAt: OffsetDateTime (Optional)
     *             expiresAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     assignedJobs (Optional): [
     *          (Optional){
     *             assignmentId: String (Required)
     *             jobId: String (Required)
     *             capacityCost: int (Required)
     *             assignedAt: OffsetDateTime (Required)
     *         }
     *     ]
     *     loadRatio: Double (Optional)
     *     availableForOffers: Boolean (Optional)
     *     maxConcurrentOffers: Integer (Optional)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of RouterWorker items along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listWorkersSinglePage(RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res = service.listWorkersSync(this.getEndpoint(), this.getServiceVersion().getVersion(),
            accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    /**
     * Retrieves existing workers.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>Number of objects to return per page.</td></tr>
     * <tr><td>state</td><td>String</td><td>No</td><td>If specified, select workers by worker state. Allowed values:
     * "active", "draining", "inactive", "all".</td></tr>
     * <tr><td>channelId</td><td>String</td><td>No</td><td>If specified, select workers who have a channel configuration
     * with this channel.</td></tr>
     * <tr><td>queueId</td><td>String</td><td>No</td><td>If specified, select workers who are assigned to this
     * queue.</td></tr>
     * <tr><td>hasCapacity</td><td>Boolean</td><td>No</td><td>If set to true, select only workers who have capacity for
     * the channel specified by `channelId` or for any channel if `channelId` not specified. If set to false, then will
     * return all workers including workers without any capacity for jobs. Defaults to false.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     etag: String (Required)
     *     id: String (Required)
     *     state: String(active/draining/inactive) (Optional)
     *     queues (Optional): [
     *         String (Optional)
     *     ]
     *     capacity: Integer (Optional)
     *     labels (Optional): {
     *         String: Object (Required)
     *     }
     *     tags (Optional): {
     *         String: Object (Required)
     *     }
     *     channels (Optional): [
     *          (Optional){
     *             channelId: String (Optional, Required on create)
     *             capacityCostPerJob: int (Optional, Required on create)
     *             maxNumberOfJobs: Integer (Optional)
     *         }
     *     ]
     *     offers (Optional): [
     *          (Optional){
     *             offerId: String (Required)
     *             jobId: String (Required)
     *             capacityCost: int (Required)
     *             offeredAt: OffsetDateTime (Optional)
     *             expiresAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     assignedJobs (Optional): [
     *          (Optional){
     *             assignmentId: String (Required)
     *             jobId: String (Required)
     *             capacityCost: int (Required)
     *             assignedAt: OffsetDateTime (Required)
     *         }
     *     ]
     *     loadRatio: Double (Optional)
     *     availableForOffers: Boolean (Optional)
     *     maxConcurrentOffers: Integer (Optional)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of RouterWorker items as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listWorkers(RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedIterable<>((pageSize) -> {
            RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return listWorkersSinglePage(requestOptionsLocal);
        }, (nextLink, pageSize) -> {
            RequestOptions requestOptionsLocal = new RequestOptions();
            requestOptionsLocal.setContext(requestOptionsForNextPage.getContext());
            if (pageSize != null) {
                requestOptionsLocal.addRequestCallback(requestLocal -> {
                    UrlBuilder urlBuilder = UrlBuilder.parse(requestLocal.getUrl());
                    urlBuilder.setQueryParameter("maxpagesize", String.valueOf(pageSize));
                    requestLocal.setUrl(urlBuilder.toString());
                });
            }
            return listWorkersNextSinglePage(nextLink, requestOptionsLocal);
        });
    }

    /**
     * Retrieves list of jobs based on filter parameters.
     * 
     * Get the next page of items.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     etag: String (Required)
     *     id: String (Required)
     *     channelReference: String (Optional)
     *     status: String(pendingClassification/queued/assigned/completed/closed/cancelled/classificationFailed/created/pendingSchedule/scheduled/scheduleFailed/waitingForActivation) (Optional)
     *     enqueuedAt: OffsetDateTime (Optional)
     *     channelId: String (Optional)
     *     classificationPolicyId: String (Optional)
     *     queueId: String (Optional)
     *     priority: Integer (Optional)
     *     dispositionCode: String (Optional)
     *     requestedWorkerSelectors (Optional): [
     *          (Optional){
     *             key: String (Optional, Required on create)
     *             labelOperator: String(equal/notEqual/lessThan/lessThanOrEqual/greaterThan/greaterThanOrEqual) (Optional, Required on create)
     *             value: Object (Optional)
     *             expiresAfterSeconds: Double (Optional)
     *             expedite: Boolean (Optional)
     *             status: String(active/expired) (Optional)
     *             expiresAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     attachedWorkerSelectors (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     labels (Optional): {
     *         String: Object (Required)
     *     }
     *     assignments (Optional): {
     *         String (Required): {
     *             assignmentId: String (Required)
     *             workerId: String (Optional)
     *             assignedAt: OffsetDateTime (Required)
     *             completedAt: OffsetDateTime (Optional)
     *             closedAt: OffsetDateTime (Optional)
     *         }
     *     }
     *     tags (Optional): {
     *         String: Object (Required)
     *     }
     *     notes (Optional): [
     *          (Optional){
     *             message: String (Optional, Required on create)
     *             addedAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     scheduledAt: OffsetDateTime (Optional)
     *     matchingMode (Optional): {
     *         kind: String(queueAndMatch/scheduleAndSuspend/suspend) (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param nextLink The URL to get the next list of items.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of RouterJob items along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listJobsNextSinglePageAsync(String nextLink,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listJobsNext(nextLink, this.getEndpoint(), accept, requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * Retrieves list of jobs based on filter parameters.
     * 
     * Get the next page of items.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     etag: String (Required)
     *     id: String (Required)
     *     channelReference: String (Optional)
     *     status: String(pendingClassification/queued/assigned/completed/closed/cancelled/classificationFailed/created/pendingSchedule/scheduled/scheduleFailed/waitingForActivation) (Optional)
     *     enqueuedAt: OffsetDateTime (Optional)
     *     channelId: String (Optional)
     *     classificationPolicyId: String (Optional)
     *     queueId: String (Optional)
     *     priority: Integer (Optional)
     *     dispositionCode: String (Optional)
     *     requestedWorkerSelectors (Optional): [
     *          (Optional){
     *             key: String (Optional, Required on create)
     *             labelOperator: String(equal/notEqual/lessThan/lessThanOrEqual/greaterThan/greaterThanOrEqual) (Optional, Required on create)
     *             value: Object (Optional)
     *             expiresAfterSeconds: Double (Optional)
     *             expedite: Boolean (Optional)
     *             status: String(active/expired) (Optional)
     *             expiresAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     attachedWorkerSelectors (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     labels (Optional): {
     *         String: Object (Required)
     *     }
     *     assignments (Optional): {
     *         String (Required): {
     *             assignmentId: String (Required)
     *             workerId: String (Optional)
     *             assignedAt: OffsetDateTime (Required)
     *             completedAt: OffsetDateTime (Optional)
     *             closedAt: OffsetDateTime (Optional)
     *         }
     *     }
     *     tags (Optional): {
     *         String: Object (Required)
     *     }
     *     notes (Optional): [
     *          (Optional){
     *             message: String (Optional, Required on create)
     *             addedAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     scheduledAt: OffsetDateTime (Optional)
     *     matchingMode (Optional): {
     *         kind: String(queueAndMatch/scheduleAndSuspend/suspend) (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param nextLink The URL to get the next list of items.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of RouterJob items along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listJobsNextSinglePage(String nextLink, RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res
            = service.listJobsNextSync(nextLink, this.getEndpoint(), accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    /**
     * Retrieves existing workers.
     * 
     * Get the next page of items.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     etag: String (Required)
     *     id: String (Required)
     *     state: String(active/draining/inactive) (Optional)
     *     queues (Optional): [
     *         String (Optional)
     *     ]
     *     capacity: Integer (Optional)
     *     labels (Optional): {
     *         String: Object (Required)
     *     }
     *     tags (Optional): {
     *         String: Object (Required)
     *     }
     *     channels (Optional): [
     *          (Optional){
     *             channelId: String (Optional, Required on create)
     *             capacityCostPerJob: int (Optional, Required on create)
     *             maxNumberOfJobs: Integer (Optional)
     *         }
     *     ]
     *     offers (Optional): [
     *          (Optional){
     *             offerId: String (Required)
     *             jobId: String (Required)
     *             capacityCost: int (Required)
     *             offeredAt: OffsetDateTime (Optional)
     *             expiresAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     assignedJobs (Optional): [
     *          (Optional){
     *             assignmentId: String (Required)
     *             jobId: String (Required)
     *             capacityCost: int (Required)
     *             assignedAt: OffsetDateTime (Required)
     *         }
     *     ]
     *     loadRatio: Double (Optional)
     *     availableForOffers: Boolean (Optional)
     *     maxConcurrentOffers: Integer (Optional)
     * }
     * }
     * </pre>
     * 
     * @param nextLink The URL to get the next list of items.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of RouterWorker items along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listWorkersNextSinglePageAsync(String nextLink,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listWorkersNext(nextLink, this.getEndpoint(), accept, requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * Retrieves existing workers.
     * 
     * Get the next page of items.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     etag: String (Required)
     *     id: String (Required)
     *     state: String(active/draining/inactive) (Optional)
     *     queues (Optional): [
     *         String (Optional)
     *     ]
     *     capacity: Integer (Optional)
     *     labels (Optional): {
     *         String: Object (Required)
     *     }
     *     tags (Optional): {
     *         String: Object (Required)
     *     }
     *     channels (Optional): [
     *          (Optional){
     *             channelId: String (Optional, Required on create)
     *             capacityCostPerJob: int (Optional, Required on create)
     *             maxNumberOfJobs: Integer (Optional)
     *         }
     *     ]
     *     offers (Optional): [
     *          (Optional){
     *             offerId: String (Required)
     *             jobId: String (Required)
     *             capacityCost: int (Required)
     *             offeredAt: OffsetDateTime (Optional)
     *             expiresAt: OffsetDateTime (Optional)
     *         }
     *     ]
     *     assignedJobs (Optional): [
     *          (Optional){
     *             assignmentId: String (Required)
     *             jobId: String (Required)
     *             capacityCost: int (Required)
     *             assignedAt: OffsetDateTime (Required)
     *         }
     *     ]
     *     loadRatio: Double (Optional)
     *     availableForOffers: Boolean (Optional)
     *     maxConcurrentOffers: Integer (Optional)
     * }
     * }
     * </pre>
     * 
     * @param nextLink The URL to get the next list of items.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of RouterWorker items along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listWorkersNextSinglePage(String nextLink, RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res
            = service.listWorkersNextSync(nextLink, this.getEndpoint(), accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    private List<BinaryData> getValues(BinaryData binaryData, String path) {
        try {
            Map<?, ?> obj = binaryData.toObject(Map.class);
            List<?> values = (List<?>) obj.get(path);
            return values.stream().map(BinaryData::fromObject).collect(Collectors.toList());
        } catch (RuntimeException e) {
            return null;
        }
    }

    private String getNextLink(BinaryData binaryData, String path) {
        try {
            Map<?, ?> obj = binaryData.toObject(Map.class);
            return (String) obj.get(path);
        } catch (RuntimeException e) {
            return null;
        }
    }
}
