// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.communication.jobrouter.implementation.models;

import com.azure.communication.jobrouter.implementation.JsonMergePatchHelper;
import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

/**
 * A queue that can contain jobs to be routed.
 */
@Fluent
public final class RouterQueueInternal implements JsonSerializable<RouterQueueInternal> {

    /*
     * The entity tag for this resource.
     */
    @Generated
    private String etag;

    /*
     * Id of a queue.
     */
    @Generated
    private String id;

    /*
     * Friendly name of this queue.
     */
    @Generated
    private String name;

    /*
     * Id of a distribution policy that will determine how a job is distributed to workers.
     */
    @Generated
    private String distributionPolicyId;

    /*
     * A set of key/value pairs that are identifying attributes used by the rules engines to make decisions. Values must be primitive values - number, string, boolean.
     */
    @Generated
    private Map<String, Object> labels;

    /*
     * Id of an exception policy that determines various job escalation rules.
     */
    @Generated
    private String exceptionPolicyId;

    /**
     * Creates an instance of RouterQueueInternal class.
     */
    @Generated
    public RouterQueueInternal() {
    }

    /**
     * Get the etag property: The entity tag for this resource.
     *
     * @return the etag value.
     */
    @Generated
    public String getEtag() {
        return this.etag;
    }

    public RouterQueueInternal setEtag(String etag) {
        this.etag = etag;
        return this;
    }

    /**
     * Get the id property: Id of a queue.
     *
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Set id.
     *
     * @param id id.
     * @return this.
     */
    public RouterQueueInternal setId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the name property: Friendly name of this queue.
     *
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Set the name property: Friendly name of this queue.
     *
     * @param name the name value to set.
     * @return the RouterQueueInternal object itself.
     */
    @Generated
    public RouterQueueInternal setName(String name) {
        this.name = name;
        this.updatedProperties.add("name");
        return this;
    }

    /**
     * Get the distributionPolicyId property: Id of a distribution policy that will determine how a job is distributed
     * to workers.
     *
     * @return the distributionPolicyId value.
     */
    @Generated
    public String getDistributionPolicyId() {
        return this.distributionPolicyId;
    }

    /**
     * Set the distributionPolicyId property: Id of a distribution policy that will determine how a job is distributed
     * to workers.
     *
     * @param distributionPolicyId the distributionPolicyId value to set.
     * @return the RouterQueueInternal object itself.
     */
    @Generated
    public RouterQueueInternal setDistributionPolicyId(String distributionPolicyId) {
        this.distributionPolicyId = distributionPolicyId;
        this.updatedProperties.add("distributionPolicyId");
        return this;
    }

    /**
     * Get the labels property: A set of key/value pairs that are identifying attributes used by the rules engines to
     * make decisions. Values must be primitive values - number, string, boolean.
     *
     * @return the labels value.
     */
    @Generated
    public Map<String, Object> getLabels() {
        return this.labels;
    }

    /**
     * Set the labels property: A set of key/value pairs that are identifying attributes used by the rules engines to
     * make decisions. Values must be primitive values - number, string, boolean.
     *
     * @param labels the labels value to set.
     * @return the RouterQueueInternal object itself.
     */
    @Generated
    public RouterQueueInternal setLabels(Map<String, Object> labels) {
        this.labels = labels;
        this.updatedProperties.add("labels");
        return this;
    }

    /**
     * Get the exceptionPolicyId property: Id of an exception policy that determines various job escalation rules.
     *
     * @return the exceptionPolicyId value.
     */
    @Generated
    public String getExceptionPolicyId() {
        return this.exceptionPolicyId;
    }

    /**
     * Set the exceptionPolicyId property: Id of an exception policy that determines various job escalation rules.
     *
     * @param exceptionPolicyId the exceptionPolicyId value to set.
     * @return the RouterQueueInternal object itself.
     */
    @Generated
    public RouterQueueInternal setExceptionPolicyId(String exceptionPolicyId) {
        this.exceptionPolicyId = exceptionPolicyId;
        this.updatedProperties.add("exceptionPolicyId");
        return this;
    }

    @Generated
    private boolean jsonMergePatch;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    @Generated
    void serializeAsJsonMergePatch(boolean jsonMergePatch) {
        this.jsonMergePatch = jsonMergePatch;
    }

    static {
        JsonMergePatchHelper.setRouterQueueInternalAccessor((model, jsonMergePatchEnabled) -> {
            model.serializeAsJsonMergePatch(jsonMergePatchEnabled);
            return model;
        });
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (jsonMergePatch) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeStringField("name", this.name);
            jsonWriter.writeStringField("distributionPolicyId", this.distributionPolicyId);
            jsonWriter.writeMapField("labels", this.labels, (writer, element) -> writer.writeUntyped(element));
            jsonWriter.writeStringField("exceptionPolicyId", this.exceptionPolicyId);
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (updatedProperties.contains("name")) {
            if (this.name == null) {
                jsonWriter.writeNullField("name");
            } else {
                jsonWriter.writeStringField("name", this.name);
            }
        }
        if (updatedProperties.contains("distributionPolicyId")) {
            if (this.distributionPolicyId == null) {
                jsonWriter.writeNullField("distributionPolicyId");
            } else {
                jsonWriter.writeStringField("distributionPolicyId", this.distributionPolicyId);
            }
        }
        if (updatedProperties.contains("labels")) {
            if (this.labels == null) {
                jsonWriter.writeNullField("labels");
            } else {
                jsonWriter.writeMapField("labels", this.labels, (writer, element) -> writer.writeUntyped(element));
            }
        }
        if (updatedProperties.contains("exceptionPolicyId")) {
            if (this.exceptionPolicyId == null) {
                jsonWriter.writeNullField("exceptionPolicyId");
            } else {
                jsonWriter.writeStringField("exceptionPolicyId", this.exceptionPolicyId);
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RouterQueueInternal from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of RouterQueueInternal if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RouterQueueInternal.
     */
    @Generated
    public static RouterQueueInternal fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String etag = null;
            String id = null;
            String name = null;
            String distributionPolicyId = null;
            Map<String, Object> labels = null;
            String exceptionPolicyId = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("etag".equals(fieldName)) {
                    etag = reader.getString();
                } else if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("distributionPolicyId".equals(fieldName)) {
                    distributionPolicyId = reader.getString();
                } else if ("labels".equals(fieldName)) {
                    labels = reader.readMap(reader1 -> reader1.readUntyped());
                } else if ("exceptionPolicyId".equals(fieldName)) {
                    exceptionPolicyId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            RouterQueueInternal deserializedRouterQueueInternal = new RouterQueueInternal();
            deserializedRouterQueueInternal.etag = etag;
            deserializedRouterQueueInternal.id = id;
            deserializedRouterQueueInternal.name = name;
            deserializedRouterQueueInternal.distributionPolicyId = distributionPolicyId;
            deserializedRouterQueueInternal.labels = labels;
            deserializedRouterQueueInternal.exceptionPolicyId = exceptionPolicyId;
            return deserializedRouterQueueInternal;
        });
    }
}
