// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.communication.jobrouter.implementation.models;

import com.azure.communication.jobrouter.implementation.JsonMergePatchHelper;
import com.azure.communication.jobrouter.models.DistributionModeKind;
import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.Set;

/**
 * Jobs are directed to the worker who has been idle longest.
 */
@Fluent
public final class LongestIdleModeInternal extends DistributionModeInternal {

    /**
     * Creates an instance of LongestIdleModeInternal class.
     */
    @Generated
    public LongestIdleModeInternal() {
        this.updatedProperties.add("kind");
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public LongestIdleModeInternal setMinConcurrentOffers(Integer minConcurrentOffers) {
        super.setMinConcurrentOffers(minConcurrentOffers);
        this.updatedProperties.add("minConcurrentOffers");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public LongestIdleModeInternal setMaxConcurrentOffers(Integer maxConcurrentOffers) {
        super.setMaxConcurrentOffers(maxConcurrentOffers);
        this.updatedProperties.add("maxConcurrentOffers");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public LongestIdleModeInternal setBypassSelectors(Boolean bypassSelectors) {
        super.setBypassSelectors(bypassSelectors);
        this.updatedProperties.add("bypassSelectors");
        return this;
    }

    /*
     * The type discriminator describing a sub-type of DistributionMode.
     */
    @Generated
    private DistributionModeKind kind = DistributionModeKind.LONGEST_IDLE;

    /**
     * Get the kind property: The type discriminator describing a sub-type of DistributionMode.
     *
     * @return the kind value.
     */
    @Generated
    @Override
    public DistributionModeKind getKind() {
        return this.kind;
    }

    @Generated
    private boolean jsonMergePatch;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    @Generated
    void serializeAsJsonMergePatch(boolean jsonMergePatch) {
        this.jsonMergePatch = jsonMergePatch;
    }

    static {
        JsonMergePatchHelper.setLongestIdleModeInternalAccessor((model, jsonMergePatchEnabled) -> {
            model.serializeAsJsonMergePatch(jsonMergePatchEnabled);
            return model;
        });
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (jsonMergePatch) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeNumberField("minConcurrentOffers", getMinConcurrentOffers());
            jsonWriter.writeNumberField("maxConcurrentOffers", getMaxConcurrentOffers());
            jsonWriter.writeBooleanField("bypassSelectors", isBypassSelectors());
            jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (updatedProperties.contains("minConcurrentOffers")) {
            if (getMinConcurrentOffers() == null) {
                jsonWriter.writeNullField("minConcurrentOffers");
            } else {
                jsonWriter.writeNumberField("minConcurrentOffers", getMinConcurrentOffers());
            }
        }
        if (updatedProperties.contains("maxConcurrentOffers")) {
            if (getMaxConcurrentOffers() == null) {
                jsonWriter.writeNullField("maxConcurrentOffers");
            } else {
                jsonWriter.writeNumberField("maxConcurrentOffers", getMaxConcurrentOffers());
            }
        }
        if (updatedProperties.contains("bypassSelectors")) {
            if (isBypassSelectors() == null) {
                jsonWriter.writeNullField("bypassSelectors");
            } else {
                jsonWriter.writeBooleanField("bypassSelectors", isBypassSelectors());
            }
        }
        if (updatedProperties.contains("kind")) {
            if (this.kind == null) {
                jsonWriter.writeNullField("kind");
            } else {
                jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LongestIdleModeInternal from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of LongestIdleModeInternal if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the LongestIdleModeInternal.
     */
    @Generated
    public static LongestIdleModeInternal fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LongestIdleModeInternal deserializedLongestIdleModeInternal = new LongestIdleModeInternal();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("minConcurrentOffers".equals(fieldName)) {
                    deserializedLongestIdleModeInternal.setMinConcurrentOffers(reader.getNullable(JsonReader::getInt));
                } else if ("maxConcurrentOffers".equals(fieldName)) {
                    deserializedLongestIdleModeInternal.setMaxConcurrentOffers(reader.getNullable(JsonReader::getInt));
                } else if ("bypassSelectors".equals(fieldName)) {
                    deserializedLongestIdleModeInternal.setBypassSelectors(reader.getNullable(JsonReader::getBoolean));
                } else if ("kind".equals(fieldName)) {
                    deserializedLongestIdleModeInternal.kind = DistributionModeKind.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedLongestIdleModeInternal;
        });
    }
}
