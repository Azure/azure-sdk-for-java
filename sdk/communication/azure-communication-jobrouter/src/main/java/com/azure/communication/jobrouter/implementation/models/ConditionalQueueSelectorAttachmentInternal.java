// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.communication.jobrouter.implementation.models;

import com.azure.communication.jobrouter.implementation.JsonMergePatchHelper;
import com.azure.communication.jobrouter.models.QueueSelectorAttachmentKind;
import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * Describes a set of queue selectors that will be attached if the given condition resolves to true.
 */
@Fluent
public final class ConditionalQueueSelectorAttachmentInternal extends QueueSelectorAttachmentInternal {

    /*
     * The condition that must be true for the queue selectors to be attached.
     */
    @Generated
    private RouterRuleInternal condition;

    /*
     * The queue selectors to attach.
     */
    @Generated
    private List<RouterQueueSelectorInternal> queueSelectors;

    /**
     * Get the condition property: The condition that must be true for the queue selectors to be attached.
     *
     * @return the condition value.
     */
    @Generated
    public RouterRuleInternal getCondition() {
        return this.condition;
    }

    /**
     * Get the queueSelectors property: The queue selectors to attach.
     *
     * @return the queueSelectors value.
     */
    @Generated
    public List<RouterQueueSelectorInternal> getQueueSelectors() {
        return this.queueSelectors;
    }

    /*
     * The type discriminator describing a sub-type of QueueSelectorAttachment.
     */
    @Generated
    private QueueSelectorAttachmentKind kind = QueueSelectorAttachmentKind.CONDITIONAL;

    /**
     * Get the kind property: The type discriminator describing a sub-type of QueueSelectorAttachment.
     *
     * @return the kind value.
     */
    @Generated
    @Override
    public QueueSelectorAttachmentKind getKind() {
        return this.kind;
    }

    @Generated
    private boolean jsonMergePatch;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    @Generated
    void serializeAsJsonMergePatch(boolean jsonMergePatch) {
        this.jsonMergePatch = jsonMergePatch;
    }

    static {
        JsonMergePatchHelper.setConditionalQueueSelectorAttachmentInternalAccessor((model, jsonMergePatchEnabled) -> {
            model.serializeAsJsonMergePatch(jsonMergePatchEnabled);
            return model;
        });
    }

    /**
     * Creates an instance of ConditionalQueueSelectorAttachmentInternal class.
     */
    @Generated
    public ConditionalQueueSelectorAttachmentInternal() {
        this.updatedProperties.add("kind");
    }

    /**
     * Set the condition property: The condition that must be true for the queue selectors to be attached.
     * <p>Required when create the resource.</p>
     *
     * @param condition the condition value to set.
     * @return the ConditionalQueueSelectorAttachmentInternal object itself.
     */
    @Generated
    public ConditionalQueueSelectorAttachmentInternal setCondition(RouterRuleInternal condition) {
        this.condition = condition;
        this.updatedProperties.add("condition");
        return this;
    }

    /**
     * Set the queueSelectors property: The queue selectors to attach.
     * <p>Required when create the resource.</p>
     *
     * @param queueSelectors the queueSelectors value to set.
     * @return the ConditionalQueueSelectorAttachmentInternal object itself.
     */
    @Generated
    public ConditionalQueueSelectorAttachmentInternal
        setQueueSelectors(List<RouterQueueSelectorInternal> queueSelectors) {
        this.queueSelectors = queueSelectors;
        this.updatedProperties.add("queueSelectors");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (jsonMergePatch) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
            jsonWriter.writeJsonField("condition", this.condition);
            jsonWriter.writeArrayField("queueSelectors", this.queueSelectors,
                (writer, element) -> writer.writeJson(element));
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (updatedProperties.contains("kind")) {
            if (this.kind == null) {
                jsonWriter.writeNullField("kind");
            } else {
                jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
            }
        }
        if (updatedProperties.contains("condition")) {
            if (this.condition == null) {
                jsonWriter.writeNullField("condition");
            } else {
                JsonMergePatchHelper.getRouterRuleInternalAccessor()
                    .prepareModelForJsonMergePatch(this.condition, true);
                jsonWriter.writeJsonField("condition", this.condition);
                JsonMergePatchHelper.getRouterRuleInternalAccessor()
                    .prepareModelForJsonMergePatch(this.condition, false);
            }
        }
        if (updatedProperties.contains("queueSelectors")) {
            if (this.queueSelectors == null) {
                jsonWriter.writeNullField("queueSelectors");
            } else {
                jsonWriter.writeArrayField("queueSelectors", this.queueSelectors,
                    (writer, element) -> writer.writeJson(element));
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ConditionalQueueSelectorAttachmentInternal from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ConditionalQueueSelectorAttachmentInternal if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ConditionalQueueSelectorAttachmentInternal.
     */
    @Generated
    public static ConditionalQueueSelectorAttachmentInternal fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ConditionalQueueSelectorAttachmentInternal deserializedConditionalQueueSelectorAttachmentInternal
                = new ConditionalQueueSelectorAttachmentInternal();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("kind".equals(fieldName)) {
                    deserializedConditionalQueueSelectorAttachmentInternal.kind
                        = QueueSelectorAttachmentKind.fromString(reader.getString());
                } else if ("condition".equals(fieldName)) {
                    deserializedConditionalQueueSelectorAttachmentInternal.condition
                        = RouterRuleInternal.fromJson(reader);
                } else if ("queueSelectors".equals(fieldName)) {
                    List<RouterQueueSelectorInternal> queueSelectors
                        = reader.readArray(reader1 -> RouterQueueSelectorInternal.fromJson(reader1));
                    deserializedConditionalQueueSelectorAttachmentInternal.queueSelectors = queueSelectors;
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedConditionalQueueSelectorAttachmentInternal;
        });
    }
}
