// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.communication.jobrouter.implementation.models;

import com.azure.communication.jobrouter.models.DistributionModeKind;
import com.azure.communication.jobrouter.models.ScoringRuleOptions;
import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeId;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Jobs are distributed to the worker with the strongest abilities available.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = "kind", defaultImpl = BestWorkerModeInternal.class, visible = true)
@JsonTypeName("bestWorker")
@Fluent
public final class BestWorkerModeInternal extends DistributionModeInternal {

    /*
     * Define a scoring rule to use, when calculating a score to determine the best worker. If not set, will use a
     * default scoring formula that uses the number of job labels that the worker labels match, as well as the number of
     * label selectors the worker labels match and/or exceed using a logistic function
     * (https://en.wikipedia.org/wiki/Logistic_function).
     */
    @Generated
    @JsonProperty(value = "scoringRule")
    private RouterRuleInternal scoringRule;

    /*
     * Options to configure 'scoringRule'. If not set, default values are used.
     */
    @Generated
    @JsonProperty(value = "scoringRuleOptions")
    private ScoringRuleOptions scoringRuleOptions;

    /**
     * Creates an instance of BestWorkerModeInternal class.
     */
    @Generated
    public BestWorkerModeInternal() {
    }

    /**
     * Get the scoringRule property: Define a scoring rule to use, when calculating a score to determine the best
     * worker. If not set, will use a default scoring formula that uses the number of job labels that the worker labels
     * match, as well as the number of label selectors the worker labels match and/or exceed using a logistic function
     * (https://en.wikipedia.org/wiki/Logistic_function).
     *
     * @return the scoringRule value.
     */
    @Generated
    public RouterRuleInternal getScoringRule() {
        return this.scoringRule;
    }

    /**
     * Set the scoringRule property: Define a scoring rule to use, when calculating a score to determine the best
     * worker. If not set, will use a default scoring formula that uses the number of job labels that the worker labels
     * match, as well as the number of label selectors the worker labels match and/or exceed using a logistic function
     * (https://en.wikipedia.org/wiki/Logistic_function).
     *
     * @param scoringRule the scoringRule value to set.
     * @return the BestWorkerModeInternal object itself.
     */
    @Generated
    public BestWorkerModeInternal setScoringRule(RouterRuleInternal scoringRule) {
        this.scoringRule = scoringRule;
        return this;
    }

    /**
     * Get the scoringRuleOptions property: Options to configure 'scoringRule'. If not set, default values are used.
     *
     * @return the scoringRuleOptions value.
     */
    @Generated
    public ScoringRuleOptions getScoringRuleOptions() {
        return this.scoringRuleOptions;
    }

    /**
     * Set the scoringRuleOptions property: Options to configure 'scoringRule'. If not set, default values are used.
     *
     * @param scoringRuleOptions the scoringRuleOptions value to set.
     * @return the BestWorkerModeInternal object itself.
     */
    @Generated
    public BestWorkerModeInternal setScoringRuleOptions(ScoringRuleOptions scoringRuleOptions) {
        this.scoringRuleOptions = scoringRuleOptions;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public BestWorkerModeInternal setMinConcurrentOffers(Integer minConcurrentOffers) {
        super.setMinConcurrentOffers(minConcurrentOffers);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public BestWorkerModeInternal setMaxConcurrentOffers(Integer maxConcurrentOffers) {
        super.setMaxConcurrentOffers(maxConcurrentOffers);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public BestWorkerModeInternal setBypassSelectors(Boolean bypassSelectors) {
        super.setBypassSelectors(bypassSelectors);
        return this;
    }

    /*
     * The type discriminator describing a sub-type of DistributionMode.
     */
    @Generated
    @JsonTypeId
    @JsonProperty(value = "kind")
    private DistributionModeKind kind = DistributionModeKind.BEST_WORKER;

    /**
     * Get the kind property: The type discriminator describing a sub-type of DistributionMode.
     *
     * @return the kind value.
     */
    @Generated
    @Override
    public DistributionModeKind getKind() {
        return this.kind;
    }
}
