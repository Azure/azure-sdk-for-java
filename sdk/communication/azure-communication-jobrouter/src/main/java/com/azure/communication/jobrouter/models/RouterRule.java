// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.communication.jobrouter.models;

import com.azure.communication.jobrouter.implementation.JsonMergePatchHelper;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.Set;

/**
 * A rule of one of the following types:
 * StaticRule: A rule providing static rules that always return the same result, regardless of input.
 * DirectMapRule: A rule that return the same labels as the input labels.
 * ExpressionRule: A rule providing inline expression rules.
 * FunctionRule: A rule providing a binding to an HTTP Triggered Azure Function.
 * WebhookRule: A rule providing a binding to a webserver following OAuth2.0 authentication protocol.
 */
@Immutable
public class RouterRule implements JsonSerializable<RouterRule> {

    /*
     * The type discriminator describing a sub-type of RouterRule
     */
    @Generated
    private RouterRuleKind kind = RouterRuleKind.fromString("RouterRule");

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    @Generated
    private boolean jsonMergePatch;

    @Generated
    private void serializeAsJsonMergePatch(boolean jsonMergePatch) {
        this.jsonMergePatch = jsonMergePatch;
    }

    static {
        JsonMergePatchHelper.setRouterRuleAccessor(new JsonMergePatchHelper.RouterRuleAccessor() {

            @Override
            public RouterRule prepareModelForJsonMergePatch(RouterRule model, boolean jsonMergePatchEnabled) {
                model.serializeAsJsonMergePatch(jsonMergePatchEnabled);
                return model;
            }

            @Override
            public boolean isJsonMergePatch(RouterRule model) {
                return model.jsonMergePatch;
            }
        });
    }

    /**
     * Creates an instance of RouterRule class.
     */
    @Generated
    public RouterRule() {
    }

    /**
     * Get the kind property: The type discriminator describing a sub-type of RouterRule.
     *
     * @return the kind value.
     */
    @Generated
    public RouterRuleKind getKind() {
        return this.kind;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (jsonMergePatch) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("kind", this.kind.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RouterRule from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of RouterRule if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the RouterRule.
     */
    @Generated
    public static RouterRule fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                // Prepare for reading
                readerToUse.nextToken();
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("kind".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("directMap".equals(discriminatorValue)) {
                    return DirectMapRouterRule.fromJson(readerToUse.reset());
                } else if ("expression".equals(discriminatorValue)) {
                    return ExpressionRouterRule.fromJson(readerToUse.reset());
                } else if ("function".equals(discriminatorValue)) {
                    return FunctionRouterRule.fromJson(readerToUse.reset());
                } else if ("static".equals(discriminatorValue)) {
                    return StaticRouterRule.fromJson(readerToUse.reset());
                } else if ("webhook".equals(discriminatorValue)) {
                    return WebhookRouterRule.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    @Generated
    static RouterRule fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RouterRule deserializedRouterRule = new RouterRule();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("kind".equals(fieldName)) {
                    deserializedRouterRule.kind = RouterRuleKind.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedRouterRule;
        });
    }
}
