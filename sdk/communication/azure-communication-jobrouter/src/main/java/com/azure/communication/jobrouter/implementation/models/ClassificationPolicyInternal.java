// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.communication.jobrouter.implementation.models;

import com.azure.communication.jobrouter.implementation.JsonMergePatchHelper;
import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * A container for the rules that govern how jobs are classified.
 */
@Fluent
public final class ClassificationPolicyInternal implements JsonSerializable<ClassificationPolicyInternal> {

    /*
     * The entity tag for this resource.
     */
    @Generated
    private String etag;

    /*
     * Id of a classification policy.
     */
    @Generated
    private String id;

    /*
     * Friendly name of this policy.
     */
    @Generated
    private String name;

    /*
     * Id of a fallback queue to select if queue selector attachments doesn't find a match.
     */
    @Generated
    private String fallbackQueueId;

    /*
     * Queue selector attachments used to resolve a queue for a job.
     */
    @Generated
    private List<QueueSelectorAttachmentInternal> queueSelectorAttachments;

    /*
     * A rule to determine a priority score for a job.
     */
    @Generated
    private RouterRuleInternal prioritizationRule;

    /*
     * Worker selector attachments used to attach worker selectors to a job.
     */
    @Generated
    private List<WorkerSelectorAttachmentInternal> workerSelectorAttachments;

    /**
     * Creates an instance of ClassificationPolicyInternal class.
     */
    @Generated
    public ClassificationPolicyInternal() {
    }

    /**
     * Get the etag property: The entity tag for this resource.
     *
     * @return the etag value.
     */
    @Generated
    public String getEtag() {
        return this.etag;
    }

    /**
     * Set etag.
     *
     * @param etag etag.
     * @return this.
     */
    public ClassificationPolicyInternal setEtag(String etag) {
        this.etag = etag;
        return this;
    }

    /**
     * Get the id property: Id of a classification policy.
     *
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Sets id.
     *
     * @param id id.
     * @return this.
     */
    public ClassificationPolicyInternal setId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the name property: Friendly name of this policy.
     *
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Set the name property: Friendly name of this policy.
     *
     * @param name the name value to set.
     * @return the ClassificationPolicyInternal object itself.
     */
    @Generated
    public ClassificationPolicyInternal setName(String name) {
        this.name = name;
        this.updatedProperties.add("name");
        return this;
    }

    /**
     * Get the fallbackQueueId property: Id of a fallback queue to select if queue selector attachments doesn't find a
     * match.
     *
     * @return the fallbackQueueId value.
     */
    @Generated
    public String getFallbackQueueId() {
        return this.fallbackQueueId;
    }

    /**
     * Set the fallbackQueueId property: Id of a fallback queue to select if queue selector attachments doesn't find a
     * match.
     *
     * @param fallbackQueueId the fallbackQueueId value to set.
     * @return the ClassificationPolicyInternal object itself.
     */
    @Generated
    public ClassificationPolicyInternal setFallbackQueueId(String fallbackQueueId) {
        this.fallbackQueueId = fallbackQueueId;
        this.updatedProperties.add("fallbackQueueId");
        return this;
    }

    /**
     * Get the queueSelectorAttachments property: Queue selector attachments used to resolve a queue for a job.
     *
     * @return the queueSelectorAttachments value.
     */
    @Generated
    public List<QueueSelectorAttachmentInternal> getQueueSelectorAttachments() {
        return this.queueSelectorAttachments;
    }

    /**
     * Set the queueSelectorAttachments property: Queue selector attachments used to resolve a queue for a job.
     *
     * @param queueSelectorAttachments the queueSelectorAttachments value to set.
     * @return the ClassificationPolicyInternal object itself.
     */
    @Generated
    public ClassificationPolicyInternal
        setQueueSelectorAttachments(List<QueueSelectorAttachmentInternal> queueSelectorAttachments) {
        this.queueSelectorAttachments = queueSelectorAttachments;
        this.updatedProperties.add("queueSelectorAttachments");
        return this;
    }

    /**
     * Get the prioritizationRule property: A rule to determine a priority score for a job.
     *
     * @return the prioritizationRule value.
     */
    @Generated
    public RouterRuleInternal getPrioritizationRule() {
        return this.prioritizationRule;
    }

    /**
     * Set the prioritizationRule property: A rule to determine a priority score for a job.
     *
     * @param prioritizationRule the prioritizationRule value to set.
     * @return the ClassificationPolicyInternal object itself.
     */
    @Generated
    public ClassificationPolicyInternal setPrioritizationRule(RouterRuleInternal prioritizationRule) {
        this.prioritizationRule = prioritizationRule;
        this.updatedProperties.add("prioritizationRule");
        return this;
    }

    /**
     * Get the workerSelectorAttachments property: Worker selector attachments used to attach worker selectors to a job.
     *
     * @return the workerSelectorAttachments value.
     */
    @Generated
    public List<WorkerSelectorAttachmentInternal> getWorkerSelectorAttachments() {
        return this.workerSelectorAttachments;
    }

    /**
     * Set the workerSelectorAttachments property: Worker selector attachments used to attach worker selectors to a job.
     *
     * @param workerSelectorAttachments the workerSelectorAttachments value to set.
     * @return the ClassificationPolicyInternal object itself.
     */
    @Generated
    public ClassificationPolicyInternal
        setWorkerSelectorAttachments(List<WorkerSelectorAttachmentInternal> workerSelectorAttachments) {
        this.workerSelectorAttachments = workerSelectorAttachments;
        this.updatedProperties.add("workerSelectorAttachments");
        return this;
    }

    @Generated
    private boolean jsonMergePatch;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    @Generated
    void serializeAsJsonMergePatch(boolean jsonMergePatch) {
        this.jsonMergePatch = jsonMergePatch;
    }

    static {
        JsonMergePatchHelper.setClassificationPolicyInternalAccessor((model, jsonMergePatchEnabled) -> {
            model.serializeAsJsonMergePatch(jsonMergePatchEnabled);
            return model;
        });
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (jsonMergePatch) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeStringField("name", this.name);
            jsonWriter.writeStringField("fallbackQueueId", this.fallbackQueueId);
            jsonWriter.writeArrayField("queueSelectorAttachments", this.queueSelectorAttachments,
                (writer, element) -> writer.writeJson(element));
            jsonWriter.writeJsonField("prioritizationRule", this.prioritizationRule);
            jsonWriter.writeArrayField("workerSelectorAttachments", this.workerSelectorAttachments,
                (writer, element) -> writer.writeJson(element));
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (updatedProperties.contains("name")) {
            if (this.name == null) {
                jsonWriter.writeNullField("name");
            } else {
                jsonWriter.writeStringField("name", this.name);
            }
        }
        if (updatedProperties.contains("fallbackQueueId")) {
            if (this.fallbackQueueId == null) {
                jsonWriter.writeNullField("fallbackQueueId");
            } else {
                jsonWriter.writeStringField("fallbackQueueId", this.fallbackQueueId);
            }
        }
        if (updatedProperties.contains("queueSelectorAttachments")) {
            if (this.queueSelectorAttachments == null) {
                jsonWriter.writeNullField("queueSelectorAttachments");
            } else {
                jsonWriter.writeArrayField("queueSelectorAttachments", this.queueSelectorAttachments,
                    (writer, element) -> writer.writeJson(element));
            }
        }
        if (updatedProperties.contains("prioritizationRule")) {
            if (this.prioritizationRule == null) {
                jsonWriter.writeNullField("prioritizationRule");
            } else {
                JsonMergePatchHelper.getRouterRuleInternalAccessor()
                    .prepareModelForJsonMergePatch(this.prioritizationRule, true);
                jsonWriter.writeJsonField("prioritizationRule", this.prioritizationRule);
                JsonMergePatchHelper.getRouterRuleInternalAccessor()
                    .prepareModelForJsonMergePatch(this.prioritizationRule, false);
            }
        }
        if (updatedProperties.contains("workerSelectorAttachments")) {
            if (this.workerSelectorAttachments == null) {
                jsonWriter.writeNullField("workerSelectorAttachments");
            } else {
                jsonWriter.writeArrayField("workerSelectorAttachments", this.workerSelectorAttachments,
                    (writer, element) -> writer.writeJson(element));
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ClassificationPolicyInternal from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ClassificationPolicyInternal if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ClassificationPolicyInternal.
     */
    @Generated
    public static ClassificationPolicyInternal fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String etag = null;
            String id = null;
            String name = null;
            String fallbackQueueId = null;
            List<QueueSelectorAttachmentInternal> queueSelectorAttachments = null;
            RouterRuleInternal prioritizationRule = null;
            List<WorkerSelectorAttachmentInternal> workerSelectorAttachments = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("etag".equals(fieldName)) {
                    etag = reader.getString();
                } else if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("fallbackQueueId".equals(fieldName)) {
                    fallbackQueueId = reader.getString();
                } else if ("queueSelectorAttachments".equals(fieldName)) {
                    queueSelectorAttachments
                        = reader.readArray(reader1 -> QueueSelectorAttachmentInternal.fromJson(reader1));
                } else if ("prioritizationRule".equals(fieldName)) {
                    prioritizationRule = RouterRuleInternal.fromJson(reader);
                } else if ("workerSelectorAttachments".equals(fieldName)) {
                    workerSelectorAttachments
                        = reader.readArray(reader1 -> WorkerSelectorAttachmentInternal.fromJson(reader1));
                } else {
                    reader.skipChildren();
                }
            }
            ClassificationPolicyInternal deserializedClassificationPolicyInternal = new ClassificationPolicyInternal();
            deserializedClassificationPolicyInternal.etag = etag;
            deserializedClassificationPolicyInternal.id = id;
            deserializedClassificationPolicyInternal.name = name;
            deserializedClassificationPolicyInternal.fallbackQueueId = fallbackQueueId;
            deserializedClassificationPolicyInternal.queueSelectorAttachments = queueSelectorAttachments;
            deserializedClassificationPolicyInternal.prioritizationRule = prioritizationRule;
            deserializedClassificationPolicyInternal.workerSelectorAttachments = workerSelectorAttachments;
            return deserializedClassificationPolicyInternal;
        });
    }
}
