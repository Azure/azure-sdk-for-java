// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.communication.jobrouter.implementation.models;

import com.azure.communication.jobrouter.models.RouterRule;
import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** A container for the rules that govern how jobs are classified. */
@Fluent
public final class ClassificationPolicyInternal {

    /*
     * Unique identifier of this policy.
     */
    @Generated
    @JsonProperty(value = "id", access = JsonProperty.Access.WRITE_ONLY)
    private String id;

    /*
     * Friendly name of this policy.
     */
    @Generated
    @JsonProperty(value = "name")
    private String name;

    /*
     * The fallback queue to select if the queue selector doesn't find a match.
     */
    @Generated
    @JsonProperty(value = "fallbackQueueId")
    private String fallbackQueueId;

    /*
     * A rule of one of the following types:
     *
     * StaticRule:  A rule
     * providing static rules that always return the same result, regardless of
     * input.
     * DirectMapRule:  A rule that return the same labels as the input
     * labels.
     * ExpressionRule: A rule providing inline expression
     * rules.
     * FunctionRule: A rule providing a binding to an HTTP Triggered Azure
     * Function.
     * WebhookRule: A rule providing a binding to a webserver following
     * OAuth2.0 authentication protocol.
     */
    @Generated
    @JsonProperty(value = "prioritizationRule")
    private RouterRule prioritizationRule;

    /** Creates an instance of ClassificationPolicy class. */
    @Generated
    public ClassificationPolicyInternal() {}

    /**
     * Get the id property: Unique identifier of this policy.
     *
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Setter for id.
     * @param id id.
     * @return this.
     */
    public ClassificationPolicyInternal setId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the name property: Friendly name of this policy.
     *
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Set the name property: Friendly name of this policy.
     *
     * @param name the name value to set.
     * @return the ClassificationPolicy object itself.
     */
    @Generated
    public ClassificationPolicyInternal setName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the fallbackQueueId property: The fallback queue to select if the queue selector doesn't find a match.
     *
     * @return the fallbackQueueId value.
     */
    @Generated
    public String getFallbackQueueId() {
        return this.fallbackQueueId;
    }

    /**
     * Set the fallbackQueueId property: The fallback queue to select if the queue selector doesn't find a match.
     *
     * @param fallbackQueueId the fallbackQueueId value to set.
     * @return the ClassificationPolicy object itself.
     */
    @Generated
    public ClassificationPolicyInternal setFallbackQueueId(String fallbackQueueId) {
        this.fallbackQueueId = fallbackQueueId;
        return this;
    }

    /**
     * Get the prioritizationRule property: A rule of one of the following types:
     *
     * <p>StaticRule: A rule providing static rules that always return the same result, regardless of input.
     * DirectMapRule: A rule that return the same labels as the input labels. ExpressionRule: A rule providing inline
     * expression rules. FunctionRule: A rule providing a binding to an HTTP Triggered Azure Function. WebhookRule: A
     * rule providing a binding to a webserver following OAuth2.0 authentication protocol.
     *
     * @return the prioritizationRule value.
     */
    @Generated
    public RouterRule getPrioritizationRule() {
        return this.prioritizationRule;
    }

    /**
     * Set the prioritizationRule property: A rule of one of the following types:
     *
     * <p>StaticRule: A rule providing static rules that always return the same result, regardless of input.
     * DirectMapRule: A rule that return the same labels as the input labels. ExpressionRule: A rule providing inline
     * expression rules. FunctionRule: A rule providing a binding to an HTTP Triggered Azure Function. WebhookRule: A
     * rule providing a binding to a webserver following OAuth2.0 authentication protocol.
     *
     * @param prioritizationRule the prioritizationRule value to set.
     * @return the ClassificationPolicy object itself.
     */
    @Generated
    public ClassificationPolicyInternal setPrioritizationRule(RouterRule prioritizationRule) {
        this.prioritizationRule = prioritizationRule;
        return this;
    }

    /*
     * Concurrency Token.
     */
    @Generated
    @JsonProperty(value = "etag", access = JsonProperty.Access.WRITE_ONLY)
    private String etag;

    /*
     * The queue selector attachments used to resolve a queue for a given job.
     */
    @Generated
    @JsonProperty(value = "queueSelectorAttachments")
    private List<QueueSelectorAttachmentInternal> queueSelectorAttachments;

    /*
     * The worker selector attachments used to attach worker selectors to a given job.
     */
    @Generated
    @JsonProperty(value = "workerSelectorAttachments")
    private List<WorkerSelectorAttachmentInternal> workerSelectorAttachments;

    /**
     * Get the etag property: Concurrency Token.
     *
     * @return the etag value.
     */
    @Generated
    public String getEtag() {
        return this.etag;
    }

    /**
     * Setter  for eTag.
     * @param eTag eTag.
     * @return this.
     */
    public ClassificationPolicyInternal setEtag(String eTag) {
        this.etag = etag;
        return this;
    }

    /**
     * Get the queueSelectorAttachments property: The queue selector attachments used to resolve a queue for a given
     * job.
     *
     * @return the queueSelectorAttachments value.
     */
    @Generated
    public List<QueueSelectorAttachmentInternal> getQueueSelectorAttachments() {
        return this.queueSelectorAttachments;
    }

    /**
     * Set the queueSelectorAttachments property: The queue selector attachments used to resolve a queue for a given
     * job.
     *
     * @param queueSelectorAttachments the queueSelectorAttachments value to set.
     * @return the ClassificationPolicy object itself.
     */
    @Generated
    public ClassificationPolicyInternal setQueueSelectorAttachments(List<QueueSelectorAttachmentInternal> queueSelectorAttachments) {
        this.queueSelectorAttachments = queueSelectorAttachments;
        return this;
    }

    /**
     * Get the workerSelectorAttachments property: The worker selector attachments used to attach worker selectors to a
     * given job.
     *
     * @return the workerSelectorAttachments value.
     */
    @Generated
    public List<WorkerSelectorAttachmentInternal> getWorkerSelectorAttachments() {
        return this.workerSelectorAttachments;
    }

    /**
     * Set the workerSelectorAttachments property: The worker selector attachments used to attach worker selectors to a
     * given job.
     *
     * @param workerSelectorAttachments the workerSelectorAttachments value to set.
     * @return the ClassificationPolicy object itself.
     */
    @Generated
    public ClassificationPolicyInternal setWorkerSelectorAttachments(List<WorkerSelectorAttachmentInternal> workerSelectorAttachments) {
        this.workerSelectorAttachments = workerSelectorAttachments;
        return this;
    }
}

