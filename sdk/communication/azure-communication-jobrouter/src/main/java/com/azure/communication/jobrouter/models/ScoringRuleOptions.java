// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.communication.jobrouter.models;

import com.azure.communication.jobrouter.implementation.JsonMergePatchHelper;
import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * Encapsulates all options that can be passed as parameters for scoring rule with BestWorkerMode.
 */
@Fluent
public final class ScoringRuleOptions implements JsonSerializable<ScoringRuleOptions> {

    /*
     * Set batch size when 'isBatchScoringEnabled' is set to true. Defaults to 20 if not configured.
     */
    @Generated
    private Integer batchSize;

    /*
     * List of extra parameters from a job that will be sent as part of the payload to scoring rule. If not set, a job's
     * labels (sent in the payload as `job`) and a job's worker selectors (sent in the payload as `selectors`) are added
     * to the payload of the scoring rule by default. Note: Worker labels are always sent with scoring payload.
     */
    @Generated
    private List<ScoringRuleParameterSelector> scoringParameters;

    /*
     * If set to true, will score workers in batches, and the parameter name of the worker labels will be sent as
     * `workers`. By default, set to false and the parameter name for the worker labels will be sent as `worker`. Note:
     * If enabled, use 'batchSize' to set batch size.
     */
    @Generated
    private Boolean isBatchScoringEnabled;

    /*
     * If false, will sort scores by ascending order. By default, set to true.
     */
    @Generated
    private Boolean descendingOrder;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    @Generated
    private boolean jsonMergePatch;

    @Generated
    private void serializeAsJsonMergePatch(boolean jsonMergePatch) {
        this.jsonMergePatch = jsonMergePatch;
    }

    static {
        JsonMergePatchHelper.setScoringRuleOptionsAccessor(new JsonMergePatchHelper.ScoringRuleOptionsAccessor() {

            @Override
            public ScoringRuleOptions prepareModelForJsonMergePatch(ScoringRuleOptions model,
                boolean jsonMergePatchEnabled) {
                model.serializeAsJsonMergePatch(jsonMergePatchEnabled);
                return model;
            }

            @Override
            public boolean isJsonMergePatch(ScoringRuleOptions model) {
                return model.jsonMergePatch;
            }
        });
    }

    /**
     * Creates an instance of ScoringRuleOptions class.
     */
    @Generated
    public ScoringRuleOptions() {
    }

    /**
     * Get the batchSize property: Set batch size when 'isBatchScoringEnabled' is set to true. Defaults to 20 if not
     * configured.
     *
     * @return the batchSize value.
     */
    @Generated
    public Integer getBatchSize() {
        return this.batchSize;
    }

    /**
     * Set the batchSize property: Set batch size when 'isBatchScoringEnabled' is set to true. Defaults to 20 if not
     * configured.
     *
     * @param batchSize the batchSize value to set.
     * @return the ScoringRuleOptions object itself.
     */
    @Generated
    public ScoringRuleOptions setBatchSize(Integer batchSize) {
        this.batchSize = batchSize;
        this.updatedProperties.add("batchSize");
        return this;
    }

    /**
     * Get the scoringParameters property: List of extra parameters from a job that will be sent as part of the payload
     * to scoring rule. If not set, a job's labels (sent in the payload as `job`) and a job's worker selectors (sent in
     * the payload as `selectors`) are added to the payload of the scoring rule by default. Note: Worker labels are
     * always sent with scoring payload.
     *
     * @return the scoringParameters value.
     */
    @Generated
    public List<ScoringRuleParameterSelector> getScoringParameters() {
        return this.scoringParameters;
    }

    /**
     * Set the scoringParameters property: List of extra parameters from a job that will be sent as part of the payload
     * to scoring rule. If not set, a job's labels (sent in the payload as `job`) and a job's worker selectors (sent in
     * the payload as `selectors`) are added to the payload of the scoring rule by default. Note: Worker labels are
     * always sent with scoring payload.
     *
     * @param scoringParameters the scoringParameters value to set.
     * @return the ScoringRuleOptions object itself.
     */
    @Generated
    public ScoringRuleOptions setScoringParameters(List<ScoringRuleParameterSelector> scoringParameters) {
        this.scoringParameters = scoringParameters;
        this.updatedProperties.add("scoringParameters");
        return this;
    }

    /**
     * Get the isBatchScoringEnabled property: If set to true, will score workers in batches, and the parameter name of
     * the worker labels will be sent as `workers`. By default, set to false and the parameter name for the worker
     * labels will be sent as `worker`. Note: If enabled, use 'batchSize' to set batch size.
     *
     * @return the isBatchScoringEnabled value.
     */
    @Generated
    public Boolean isBatchScoringEnabled() {
        return this.isBatchScoringEnabled;
    }

    /**
     * Set the isBatchScoringEnabled property: If set to true, will score workers in batches, and the parameter name of
     * the worker labels will be sent as `workers`. By default, set to false and the parameter name for the worker
     * labels will be sent as `worker`. Note: If enabled, use 'batchSize' to set batch size.
     *
     * @param isBatchScoringEnabled the isBatchScoringEnabled value to set.
     * @return the ScoringRuleOptions object itself.
     */
    @Generated
    public ScoringRuleOptions setBatchScoringEnabled(Boolean isBatchScoringEnabled) {
        this.isBatchScoringEnabled = isBatchScoringEnabled;
        this.updatedProperties.add("isBatchScoringEnabled");
        return this;
    }

    /**
     * Get the descendingOrder property: If false, will sort scores by ascending order. By default, set to true.
     *
     * @return the descendingOrder value.
     */
    @Generated
    public Boolean isDescendingOrder() {
        return this.descendingOrder;
    }

    /**
     * Set the descendingOrder property: If false, will sort scores by ascending order. By default, set to true.
     *
     * @param descendingOrder the descendingOrder value to set.
     * @return the ScoringRuleOptions object itself.
     */
    @Generated
    public ScoringRuleOptions setDescendingOrder(Boolean descendingOrder) {
        this.descendingOrder = descendingOrder;
        this.updatedProperties.add("descendingOrder");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (jsonMergePatch) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeNumberField("batchSize", this.batchSize);
            jsonWriter.writeArrayField("scoringParameters", this.scoringParameters,
                (writer, element) -> writer.writeString(element == null ? null : element.toString()));
            jsonWriter.writeBooleanField("isBatchScoringEnabled", this.isBatchScoringEnabled);
            jsonWriter.writeBooleanField("descendingOrder", this.descendingOrder);
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (updatedProperties.contains("batchSize")) {
            if (this.batchSize == null) {
                jsonWriter.writeNullField("batchSize");
            } else {
                jsonWriter.writeNumberField("batchSize", this.batchSize);
            }
        }
        if (updatedProperties.contains("scoringParameters")) {
            if (this.scoringParameters == null) {
                jsonWriter.writeNullField("scoringParameters");
            } else {
                jsonWriter.writeArrayField("scoringParameters", this.scoringParameters,
                    (writer, element) -> writer.writeString(element.toString()));
            }
        }
        if (updatedProperties.contains("isBatchScoringEnabled")) {
            if (this.isBatchScoringEnabled == null) {
                jsonWriter.writeNullField("isBatchScoringEnabled");
            } else {
                jsonWriter.writeBooleanField("isBatchScoringEnabled", this.isBatchScoringEnabled);
            }
        }
        if (updatedProperties.contains("descendingOrder")) {
            if (this.descendingOrder == null) {
                jsonWriter.writeNullField("descendingOrder");
            } else {
                jsonWriter.writeBooleanField("descendingOrder", this.descendingOrder);
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ScoringRuleOptions from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ScoringRuleOptions if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ScoringRuleOptions.
     */
    @Generated
    public static ScoringRuleOptions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ScoringRuleOptions deserializedScoringRuleOptions = new ScoringRuleOptions();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("batchSize".equals(fieldName)) {
                    deserializedScoringRuleOptions.batchSize = reader.getNullable(JsonReader::getInt);
                } else if ("scoringParameters".equals(fieldName)) {
                    List<ScoringRuleParameterSelector> scoringParameters
                        = reader.readArray(reader1 -> ScoringRuleParameterSelector.fromString(reader1.getString()));
                    deserializedScoringRuleOptions.scoringParameters = scoringParameters;
                } else if ("isBatchScoringEnabled".equals(fieldName)) {
                    deserializedScoringRuleOptions.isBatchScoringEnabled = reader.getNullable(JsonReader::getBoolean);
                } else if ("descendingOrder".equals(fieldName)) {
                    deserializedScoringRuleOptions.descendingOrder = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedScoringRuleOptions;
        });
    }
}
