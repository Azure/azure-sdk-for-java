// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.communication.jobrouter.models;

import com.azure.communication.jobrouter.implementation.JsonMergePatchHelper;
import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.Set;

/**
 * A rule providing inline expression rules.
 */
@Fluent
public final class ExpressionRouterRule extends RouterRule {

    /*
     * The type discriminator describing a sub-type of RouterRule
     */
    @Generated
    private RouterRuleKind kind = RouterRuleKind.EXPRESSION;

    /*
     * The expression language to compile to and execute.
     */
    @Generated
    private ExpressionRouterRuleLanguage language;

    /*
     * An expression to evaluate. Should contain return statement with calculated values.
     */
    @Generated
    private String expression;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    /**
     * Creates an instance of ExpressionRouterRule class.
     */
    @Generated
    public ExpressionRouterRule() {
    }

    /**
     * Get the kind property: The type discriminator describing a sub-type of RouterRule.
     *
     * @return the kind value.
     */
    @Generated
    @Override
    public RouterRuleKind getKind() {
        return this.kind;
    }

    /**
     * Get the language property: The expression language to compile to and execute.
     *
     * @return the language value.
     */
    @Generated
    public ExpressionRouterRuleLanguage getLanguage() {
        return this.language;
    }

    /**
     * Set the language property: The expression language to compile to and execute.
     *
     * @param language the language value to set.
     * @return the ExpressionRouterRule object itself.
     */
    @Generated
    public ExpressionRouterRule setLanguage(ExpressionRouterRuleLanguage language) {
        this.language = language;
        this.updatedProperties.add("language");
        return this;
    }

    /**
     * Get the expression property: An expression to evaluate. Should contain return statement with calculated values.
     *
     * @return the expression value.
     */
    @Generated
    public String getExpression() {
        return this.expression;
    }

    /**
     * Set the expression property: An expression to evaluate. Should contain return statement with calculated values.
     * <p>Required when create the resource.</p>
     *
     * @param expression the expression value to set.
     * @return the ExpressionRouterRule object itself.
     */
    @Generated
    public ExpressionRouterRule setExpression(String expression) {
        this.expression = expression;
        this.updatedProperties.add("expression");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (JsonMergePatchHelper.getRouterRuleAccessor().isJsonMergePatch(this)) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
            jsonWriter.writeStringField("language", this.language == null ? null : this.language.toString());
            jsonWriter.writeStringField("expression", this.expression);
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("kind", this.kind.toString());
        if (updatedProperties.contains("language")) {
            if (this.language == null) {
                jsonWriter.writeNullField("language");
            } else {
                jsonWriter.writeStringField("language", this.language.toString());
            }
        }
        if (updatedProperties.contains("expression")) {
            if (this.expression == null) {
                jsonWriter.writeNullField("expression");
            } else {
                jsonWriter.writeStringField("expression", this.expression);
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ExpressionRouterRule from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ExpressionRouterRule if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ExpressionRouterRule.
     */
    @Generated
    public static ExpressionRouterRule fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ExpressionRouterRule deserializedExpressionRouterRule = new ExpressionRouterRule();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("kind".equals(fieldName)) {
                    deserializedExpressionRouterRule.kind = RouterRuleKind.fromString(reader.getString());
                } else if ("language".equals(fieldName)) {
                    deserializedExpressionRouterRule.language
                        = ExpressionRouterRuleLanguage.fromString(reader.getString());
                } else if ("expression".equals(fieldName)) {
                    deserializedExpressionRouterRule.expression = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedExpressionRouterRule;
        });
    }

    /**
     * Creates an instance of ExpressionRouterRule class.
     *
     * @param expression the expression value to set.
     */
    public ExpressionRouterRule(String expression) {
        this.expression = expression;
        this.updatedProperties.add("expression");
    }
}
