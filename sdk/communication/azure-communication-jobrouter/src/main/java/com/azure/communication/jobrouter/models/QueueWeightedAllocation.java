// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.communication.jobrouter.models;

import com.azure.communication.jobrouter.implementation.JsonMergePatchHelper;
import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * Contains the weight percentage and queue selectors to be applied if selected for weighted distributions.
 */
@Fluent
public final class QueueWeightedAllocation implements JsonSerializable<QueueWeightedAllocation> {

    /*
     * The percentage of this weight, expressed as a fraction of 1.
     */
    @Generated
    private double weight;

    /*
     * A collection of queue selectors that will be applied if this allocation is selected.
     */
    @Generated
    private List<RouterQueueSelector> queueSelectors;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    @Generated
    private boolean jsonMergePatch;

    @Generated
    private void serializeAsJsonMergePatch(boolean jsonMergePatch) {
        this.jsonMergePatch = jsonMergePatch;
    }

    static {
        JsonMergePatchHelper
            .setQueueWeightedAllocationAccessor(new JsonMergePatchHelper.QueueWeightedAllocationAccessor() {

                @Override
                public QueueWeightedAllocation prepareModelForJsonMergePatch(QueueWeightedAllocation model,
                    boolean jsonMergePatchEnabled) {
                    model.serializeAsJsonMergePatch(jsonMergePatchEnabled);
                    return model;
                }

                @Override
                public boolean isJsonMergePatch(QueueWeightedAllocation model) {
                    return model.jsonMergePatch;
                }
            });
    }

    /**
     * Creates an instance of QueueWeightedAllocation class.
     */
    @Generated
    public QueueWeightedAllocation() {
    }

    /**
     * Get the weight property: The percentage of this weight, expressed as a fraction of 1.
     *
     * @return the weight value.
     */
    @Generated
    public double getWeight() {
        return this.weight;
    }

    /**
     * Set the weight property: The percentage of this weight, expressed as a fraction of 1.
     * <p>Required when create the resource.</p>
     *
     * @param weight the weight value to set.
     * @return the QueueWeightedAllocation object itself.
     */
    @Generated
    public QueueWeightedAllocation setWeight(double weight) {
        this.weight = weight;
        this.updatedProperties.add("weight");
        return this;
    }

    /**
     * Get the queueSelectors property: A collection of queue selectors that will be applied if this allocation is
     * selected.
     *
     * @return the queueSelectors value.
     */
    @Generated
    public List<RouterQueueSelector> getQueueSelectors() {
        return this.queueSelectors;
    }

    /**
     * Set the queueSelectors property: A collection of queue selectors that will be applied if this allocation is
     * selected.
     * <p>Required when create the resource.</p>
     *
     * @param queueSelectors the queueSelectors value to set.
     * @return the QueueWeightedAllocation object itself.
     */
    @Generated
    public QueueWeightedAllocation setQueueSelectors(List<RouterQueueSelector> queueSelectors) {
        this.queueSelectors = queueSelectors;
        this.updatedProperties.add("queueSelectors");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (jsonMergePatch) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeDoubleField("weight", this.weight);
            jsonWriter.writeArrayField("queueSelectors", this.queueSelectors,
                (writer, element) -> writer.writeJson(element));
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (updatedProperties.contains("weight")) {
            jsonWriter.writeDoubleField("weight", this.weight);
        }
        if (updatedProperties.contains("queueSelectors")) {
            if (this.queueSelectors == null) {
                jsonWriter.writeNullField("queueSelectors");
            } else {
                jsonWriter.writeArrayField("queueSelectors", this.queueSelectors,
                    (writer, element) -> writer.writeJson(element));
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of QueueWeightedAllocation from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of QueueWeightedAllocation if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the QueueWeightedAllocation.
     */
    @Generated
    public static QueueWeightedAllocation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            QueueWeightedAllocation deserializedQueueWeightedAllocation = new QueueWeightedAllocation();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("weight".equals(fieldName)) {
                    deserializedQueueWeightedAllocation.weight = reader.getDouble();
                } else if ("queueSelectors".equals(fieldName)) {
                    List<RouterQueueSelector> queueSelectors
                        = reader.readArray(reader1 -> RouterQueueSelector.fromJson(reader1));
                    deserializedQueueWeightedAllocation.queueSelectors = queueSelectors;
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedQueueWeightedAllocation;
        });
    }

    /**
     * Creates an instance of QueueWeightedAllocation class.
     *
     * @param weight the weight value to set.
     * @param queueSelectors the queueSelectors value to set.
     */
    public QueueWeightedAllocation(double weight, List<RouterQueueSelector> queueSelectors) {
        this.weight = weight;
        this.updatedProperties.add("weight");
        this.queueSelectors = queueSelectors;
        this.updatedProperties.add("queueSelectors");
    }
}
