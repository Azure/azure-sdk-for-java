// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.communication.jobrouter.models;

import com.azure.communication.jobrouter.implementation.JsonMergePatchHelper;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.HashSet;
import java.util.Set;

/**
 * Assignment details of a job to a worker.
 */
@Immutable
public final class RouterJobAssignment implements JsonSerializable<RouterJobAssignment> {

    /*
     * Id of a job assignment.
     */
    @Generated
    private String assignmentId;

    /*
     * Id of the Worker assigned to the job.
     */
    @Generated
    private String workerId;

    /*
     * Timestamp when the job was assigned to a worker in UTC.
     */
    @Generated
    private OffsetDateTime assignedAt;

    /*
     * Timestamp when the job was marked as completed after being assigned in UTC.
     */
    @Generated
    private OffsetDateTime completedAt;

    /*
     * Timestamp when the job was marked as closed after being completed in UTC.
     */
    @Generated
    private OffsetDateTime closedAt;

    /**
     * Get the assignmentId property: Id of a job assignment.
     *
     * @return the assignmentId value.
     */
    @Generated
    public String getAssignmentId() {
        return this.assignmentId;
    }

    /**
     * Get the workerId property: Id of the Worker assigned to the job.
     *
     * @return the workerId value.
     */
    @Generated
    public String getWorkerId() {
        return this.workerId;
    }

    /**
     * Get the assignedAt property: Timestamp when the job was assigned to a worker in UTC.
     *
     * @return the assignedAt value.
     */
    @Generated
    public OffsetDateTime getAssignedAt() {
        return this.assignedAt;
    }

    /**
     * Get the completedAt property: Timestamp when the job was marked as completed after being assigned in UTC.
     *
     * @return the completedAt value.
     */
    @Generated
    public OffsetDateTime getCompletedAt() {
        return this.completedAt;
    }

    /**
     * Get the closedAt property: Timestamp when the job was marked as closed after being completed in UTC.
     *
     * @return the closedAt value.
     */
    @Generated
    public OffsetDateTime getClosedAt() {
        return this.closedAt;
    }

    @Generated
    private boolean jsonMergePatch;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    @Generated
    void serializeAsJsonMergePatch(boolean jsonMergePatch) {
        this.jsonMergePatch = jsonMergePatch;
    }

    static {
        JsonMergePatchHelper.setRouterJobAssignmentAccessor((model, jsonMergePatchEnabled) -> {
            model.serializeAsJsonMergePatch(jsonMergePatchEnabled);
            return model;
        });
    }

    /**
     * Creates an instance of RouterJobAssignment class.
     */
    @Generated
    private RouterJobAssignment() {
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (jsonMergePatch) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeStringField("workerId", this.workerId);
            jsonWriter.writeStringField("assignedAt",
                this.assignedAt == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.assignedAt));
            jsonWriter.writeStringField("completedAt",
                this.completedAt == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.completedAt));
            jsonWriter.writeStringField("closedAt",
                this.closedAt == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.closedAt));
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (updatedProperties.contains("workerId")) {
            if (this.workerId == null) {
                jsonWriter.writeNullField("workerId");
            } else {
                jsonWriter.writeStringField("workerId", this.workerId);
            }
        }
        if (updatedProperties.contains("assignedAt")) {
            if (this.assignedAt == null) {
                jsonWriter.writeNullField("assignedAt");
            } else {
                jsonWriter.writeStringField("assignedAt",
                    this.assignedAt == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.assignedAt));
            }
        }
        if (updatedProperties.contains("completedAt")) {
            if (this.completedAt == null) {
                jsonWriter.writeNullField("completedAt");
            } else {
                jsonWriter.writeStringField("completedAt",
                    this.completedAt == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.completedAt));
            }
        }
        if (updatedProperties.contains("closedAt")) {
            if (this.closedAt == null) {
                jsonWriter.writeNullField("closedAt");
            } else {
                jsonWriter.writeStringField("closedAt",
                    this.closedAt == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.closedAt));
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RouterJobAssignment from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of RouterJobAssignment if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RouterJobAssignment.
     */
    @Generated
    public static RouterJobAssignment fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String assignmentId = null;
            String workerId = null;
            OffsetDateTime assignedAt = null;
            OffsetDateTime completedAt = null;
            OffsetDateTime closedAt = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("assignmentId".equals(fieldName)) {
                    assignmentId = reader.getString();
                } else if ("workerId".equals(fieldName)) {
                    workerId = reader.getString();
                } else if ("assignedAt".equals(fieldName)) {
                    assignedAt = reader.getNullable(nonNullReader -> OffsetDateTime.parse(nonNullReader.getString()));
                } else if ("completedAt".equals(fieldName)) {
                    completedAt = reader.getNullable(nonNullReader -> OffsetDateTime.parse(nonNullReader.getString()));
                } else if ("closedAt".equals(fieldName)) {
                    closedAt = reader.getNullable(nonNullReader -> OffsetDateTime.parse(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }
            RouterJobAssignment deserializedRouterJobAssignment = new RouterJobAssignment();
            deserializedRouterJobAssignment.assignmentId = assignmentId;
            deserializedRouterJobAssignment.workerId = workerId;
            deserializedRouterJobAssignment.assignedAt = assignedAt;
            deserializedRouterJobAssignment.completedAt = completedAt;
            deserializedRouterJobAssignment.closedAt = closedAt;
            return deserializedRouterJobAssignment;
        });
    }
}
