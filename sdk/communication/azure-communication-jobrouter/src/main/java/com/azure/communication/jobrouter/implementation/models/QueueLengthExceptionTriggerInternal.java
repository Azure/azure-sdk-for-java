// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.communication.jobrouter.implementation.models;

import com.azure.communication.jobrouter.implementation.JsonMergePatchHelper;
import com.azure.communication.jobrouter.models.ExceptionTriggerKind;
import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.Set;

/**
 * Trigger for an exception action on exceeding queue length.
 */
@Fluent
public final class QueueLengthExceptionTriggerInternal extends ExceptionTriggerInternal {

    /*
     * Threshold of number of jobs ahead in the queue to for this trigger to fire.
     */
    @Generated
    private int threshold;

    /**
     * Get the threshold property: Threshold of number of jobs ahead in the queue to for this trigger to fire.
     *
     * @return the threshold value.
     */
    @Generated
    public int getThreshold() {
        return this.threshold;
    }

    /*
     * The type discriminator describing a sub-type of ExceptionTrigger.
     */
    @Generated
    private ExceptionTriggerKind kind = ExceptionTriggerKind.QUEUE_LENGTH;

    /**
     * Get the kind property: The type discriminator describing a sub-type of ExceptionTrigger.
     *
     * @return the kind value.
     */
    @Generated
    @Override
    public ExceptionTriggerKind getKind() {
        return this.kind;
    }

    @Generated
    private boolean jsonMergePatch;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    @Generated
    void serializeAsJsonMergePatch(boolean jsonMergePatch) {
        this.jsonMergePatch = jsonMergePatch;
    }

    static {
        JsonMergePatchHelper.setQueueLengthExceptionTriggerInternalAccessor((model, jsonMergePatchEnabled) -> {
            model.serializeAsJsonMergePatch(jsonMergePatchEnabled);
            return model;
        });
    }

    /**
     * Creates an instance of QueueLengthExceptionTriggerInternal class.
     */
    @Generated
    public QueueLengthExceptionTriggerInternal() {
        this.updatedProperties.add("kind");
    }

    /**
     * Set the threshold property: Threshold of number of jobs ahead in the queue to for this trigger to fire.
     * <p>Required when create the resource.</p>
     *
     * @param threshold the threshold value to set.
     * @return the QueueLengthExceptionTriggerInternal object itself.
     */
    @Generated
    public QueueLengthExceptionTriggerInternal setThreshold(int threshold) {
        this.threshold = threshold;
        this.updatedProperties.add("threshold");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (jsonMergePatch) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
            jsonWriter.writeIntField("threshold", this.threshold);
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (updatedProperties.contains("kind")) {
            if (this.kind == null) {
                jsonWriter.writeNullField("kind");
            } else {
                jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
            }
        }
        jsonWriter.writeIntField("threshold", this.threshold);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of QueueLengthExceptionTriggerInternal from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of QueueLengthExceptionTriggerInternal if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the QueueLengthExceptionTriggerInternal.
     */
    @Generated
    public static QueueLengthExceptionTriggerInternal fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            QueueLengthExceptionTriggerInternal deserializedQueueLengthExceptionTriggerInternal
                = new QueueLengthExceptionTriggerInternal();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("kind".equals(fieldName)) {
                    deserializedQueueLengthExceptionTriggerInternal.kind
                        = ExceptionTriggerKind.fromString(reader.getString());
                } else if ("threshold".equals(fieldName)) {
                    deserializedQueueLengthExceptionTriggerInternal.threshold = reader.getInt();
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedQueueLengthExceptionTriggerInternal;
        });
    }
}
