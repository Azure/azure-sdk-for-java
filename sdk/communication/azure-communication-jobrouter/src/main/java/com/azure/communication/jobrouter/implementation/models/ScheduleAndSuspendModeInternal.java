// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.communication.jobrouter.implementation.models;

import com.azure.communication.jobrouter.implementation.JsonMergePatchHelper;
import com.azure.communication.jobrouter.models.JobMatchingModeKind;
import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.HashSet;
import java.util.Set;

/**
 * Describes a matching mode used for scheduling jobs to be queued at a future time. At the specified time, matching
 * worker to a job will not start automatically.
 */
@Fluent
public final class ScheduleAndSuspendModeInternal extends JobMatchingModeInternal {

    /*
     * Requested schedule time.
     */
    @Generated
    private OffsetDateTime scheduleAt;

    /**
     * Get the scheduleAt property: Requested schedule time.
     *
     * @return the scheduleAt value.
     */
    @Generated
    public OffsetDateTime getScheduleAt() {
        return this.scheduleAt;
    }

    /*
     * The type discriminator describing a sub-type of JobMatchingMode.
     */
    @Generated
    private JobMatchingModeKind kind = JobMatchingModeKind.SCHEDULE_AND_SUSPEND;

    /**
     * Get the kind property: The type discriminator describing a sub-type of JobMatchingMode.
     *
     * @return the kind value.
     */
    @Generated
    @Override
    public JobMatchingModeKind getKind() {
        return this.kind;
    }

    @Generated
    private boolean jsonMergePatch;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    @Generated
    void serializeAsJsonMergePatch(boolean jsonMergePatch) {
        this.jsonMergePatch = jsonMergePatch;
    }

    static {
        JsonMergePatchHelper.setScheduleAndSuspendModeInternalAccessor((model, jsonMergePatchEnabled) -> {
            model.serializeAsJsonMergePatch(jsonMergePatchEnabled);
            return model;
        });
    }

    /**
     * Creates an instance of ScheduleAndSuspendModeInternal class.
     */
    @Generated
    public ScheduleAndSuspendModeInternal() {
        this.updatedProperties.add("kind");
    }

    /**
     * Set the scheduleAt property: Requested schedule time.
     * <p>Required when create the resource.</p>
     *
     * @param scheduleAt the scheduleAt value to set.
     * @return the ScheduleAndSuspendModeInternal object itself.
     */
    @Generated
    public ScheduleAndSuspendModeInternal setScheduleAt(OffsetDateTime scheduleAt) {
        this.scheduleAt = scheduleAt;
        this.updatedProperties.add("scheduleAt");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (jsonMergePatch) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
            jsonWriter.writeStringField("scheduleAt",
                this.scheduleAt == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.scheduleAt));
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (updatedProperties.contains("kind")) {
            if (this.kind == null) {
                jsonWriter.writeNullField("kind");
            } else {
                jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
            }
        }
        if (updatedProperties.contains("scheduleAt")) {
            if (this.scheduleAt == null) {
                jsonWriter.writeNullField("scheduleAt");
            } else {
                jsonWriter.writeStringField("scheduleAt",
                    this.scheduleAt == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.scheduleAt));
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ScheduleAndSuspendModeInternal from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ScheduleAndSuspendModeInternal if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ScheduleAndSuspendModeInternal.
     */
    @Generated
    public static ScheduleAndSuspendModeInternal fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ScheduleAndSuspendModeInternal deserializedScheduleAndSuspendModeInternal
                = new ScheduleAndSuspendModeInternal();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("kind".equals(fieldName)) {
                    deserializedScheduleAndSuspendModeInternal.kind
                        = JobMatchingModeKind.fromString(reader.getString());
                } else if ("scheduleAt".equals(fieldName)) {
                    deserializedScheduleAndSuspendModeInternal.scheduleAt
                        = reader.getNullable(nonNullReader -> OffsetDateTime.parse(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedScheduleAndSuspendModeInternal;
        });
    }
}
