// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.communication.jobrouter.models;

import com.azure.communication.jobrouter.implementation.JsonMergePatchHelper;
import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.Set;

/**
 * OAuth2.0 Credentials used to Contoso's Authorization server. Reference:
 * https://www.oauth.com/oauth2-servers/access-tokens/client-credentials/.
 */
@Fluent
public final class OAuth2WebhookClientCredential implements JsonSerializable<OAuth2WebhookClientCredential> {

    /*
     * ClientId for Contoso Authorization server.
     */
    @Generated
    private String clientId;

    /*
     * Client secret for Contoso Authorization server.
     */
    @Generated
    private String clientSecret;

    /**
     * Creates an instance of OAuth2WebhookClientCredential class.
     */
    @Generated
    public OAuth2WebhookClientCredential() {
    }

    /**
     * Get the clientId property: ClientId for Contoso Authorization server.
     *
     * @return the clientId value.
     */
    @Generated
    public String getClientId() {
        return this.clientId;
    }

    /**
     * Set the clientId property: ClientId for Contoso Authorization server.
     *
     * @param clientId the clientId value to set.
     * @return the OAuth2WebhookClientCredential object itself.
     */
    @Generated
    public OAuth2WebhookClientCredential setClientId(String clientId) {
        this.clientId = clientId;
        this.updatedProperties.add("clientId");
        return this;
    }

    /**
     * Get the clientSecret property: Client secret for Contoso Authorization server.
     *
     * @return the clientSecret value.
     */
    @Generated
    public String getClientSecret() {
        return this.clientSecret;
    }

    /**
     * Set the clientSecret property: Client secret for Contoso Authorization server.
     *
     * @param clientSecret the clientSecret value to set.
     * @return the OAuth2WebhookClientCredential object itself.
     */
    @Generated
    public OAuth2WebhookClientCredential setClientSecret(String clientSecret) {
        this.clientSecret = clientSecret;
        this.updatedProperties.add("clientSecret");
        return this;
    }

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    @Generated
    private boolean jsonMergePatch;

    @Generated
    private void serializeAsJsonMergePatch(boolean jsonMergePatch) {
        this.jsonMergePatch = jsonMergePatch;
    }

    static {
        JsonMergePatchHelper
            .setOAuth2WebhookClientCredentialAccessor(new JsonMergePatchHelper.OAuth2WebhookClientCredentialAccessor() {

                @Override
                public OAuth2WebhookClientCredential prepareModelForJsonMergePatch(OAuth2WebhookClientCredential model,
                    boolean jsonMergePatchEnabled) {
                    model.serializeAsJsonMergePatch(jsonMergePatchEnabled);
                    return model;
                }

                @Override
                public boolean isJsonMergePatch(OAuth2WebhookClientCredential model) {
                    return model.jsonMergePatch;
                }
            });
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (jsonMergePatch) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeStringField("clientId", this.clientId);
            jsonWriter.writeStringField("clientSecret", this.clientSecret);
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (updatedProperties.contains("clientId")) {
            if (this.clientId == null) {
                jsonWriter.writeNullField("clientId");
            } else {
                jsonWriter.writeStringField("clientId", this.clientId);
            }
        }
        if (updatedProperties.contains("clientSecret")) {
            if (this.clientSecret == null) {
                jsonWriter.writeNullField("clientSecret");
            } else {
                jsonWriter.writeStringField("clientSecret", this.clientSecret);
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OAuth2WebhookClientCredential from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of OAuth2WebhookClientCredential if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the OAuth2WebhookClientCredential.
     */
    @Generated
    public static OAuth2WebhookClientCredential fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OAuth2WebhookClientCredential deserializedOAuth2WebhookClientCredential
                = new OAuth2WebhookClientCredential();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("clientId".equals(fieldName)) {
                    deserializedOAuth2WebhookClientCredential.clientId = reader.getString();
                } else if ("clientSecret".equals(fieldName)) {
                    deserializedOAuth2WebhookClientCredential.clientSecret = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedOAuth2WebhookClientCredential;
        });
    }
}
