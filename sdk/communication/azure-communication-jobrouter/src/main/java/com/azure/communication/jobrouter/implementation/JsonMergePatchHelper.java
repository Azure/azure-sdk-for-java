// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.communication.jobrouter.implementation;

import com.azure.communication.jobrouter.models.ClassificationPolicy;
import com.azure.communication.jobrouter.models.DistributionMode;
import com.azure.communication.jobrouter.models.DistributionPolicy;
import com.azure.communication.jobrouter.models.ExceptionAction;
import com.azure.communication.jobrouter.models.ExceptionPolicy;
import com.azure.communication.jobrouter.models.ExceptionRule;
import com.azure.communication.jobrouter.models.ExceptionTrigger;
import com.azure.communication.jobrouter.models.FunctionRouterRuleCredential;
import com.azure.communication.jobrouter.models.JobMatchingMode;
import com.azure.communication.jobrouter.models.OAuth2WebhookClientCredential;
import com.azure.communication.jobrouter.models.QueueSelectorAttachment;
import com.azure.communication.jobrouter.models.QueueWeightedAllocation;
import com.azure.communication.jobrouter.models.RouterChannel;
import com.azure.communication.jobrouter.models.RouterJob;
import com.azure.communication.jobrouter.models.RouterJobNote;
import com.azure.communication.jobrouter.models.RouterQueue;
import com.azure.communication.jobrouter.models.RouterQueueSelector;
import com.azure.communication.jobrouter.models.RouterRule;
import com.azure.communication.jobrouter.models.RouterWorker;
import com.azure.communication.jobrouter.models.RouterWorkerSelector;
import com.azure.communication.jobrouter.models.ScoringRuleOptions;
import com.azure.communication.jobrouter.models.WorkerSelectorAttachment;
import com.azure.communication.jobrouter.models.WorkerWeightedAllocation;

/**
 * This is the Helper class to enable json merge patch serialization for a model.
 */
public class JsonMergePatchHelper {

    private static DistributionPolicyAccessor distributionPolicyAccessor;

    public interface DistributionPolicyAccessor {

        DistributionPolicy prepareModelForJsonMergePatch(DistributionPolicy distributionPolicy,
            boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(DistributionPolicy distributionPolicy);

        void setId(DistributionPolicy policy, String id);
    }

    public static void setDistributionPolicyAccessor(DistributionPolicyAccessor accessor) {
        distributionPolicyAccessor = accessor;
    }

    public static DistributionPolicyAccessor getDistributionPolicyAccessor() {
        return distributionPolicyAccessor;
    }

    private static DistributionModeAccessor distributionModeAccessor;

    public interface DistributionModeAccessor {

        DistributionMode prepareModelForJsonMergePatch(DistributionMode distributionMode,
            boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(DistributionMode distributionMode);

        void setMinConcurrentOffers(DistributionMode distributionMode, Integer minConcurrentOffers);

        void setMaxConcurrentOffers(DistributionMode distributionMode, Integer maxConcurrentOffers);

        void setBypassSelectors(DistributionMode distributionMode, Boolean bypassSelectors);
    }

    public static void setDistributionModeAccessor(DistributionModeAccessor accessor) {
        distributionModeAccessor = accessor;
    }

    public static DistributionModeAccessor getDistributionModeAccessor() {
        return distributionModeAccessor;
    }

    private static RouterRuleAccessor routerRuleAccessor;

    public interface RouterRuleAccessor {

        RouterRule prepareModelForJsonMergePatch(RouterRule routerRule, boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(RouterRule routerRule);
    }

    public static void setRouterRuleAccessor(RouterRuleAccessor accessor) {
        routerRuleAccessor = accessor;
    }

    public static RouterRuleAccessor getRouterRuleAccessor() {
        return routerRuleAccessor;
    }

    private static FunctionRouterRuleCredentialAccessor functionRouterRuleCredentialAccessor;

    public interface FunctionRouterRuleCredentialAccessor {

        FunctionRouterRuleCredential prepareModelForJsonMergePatch(
            FunctionRouterRuleCredential functionRouterRuleCredential, boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(FunctionRouterRuleCredential functionRouterRuleCredential);
    }

    public static void setFunctionRouterRuleCredentialAccessor(FunctionRouterRuleCredentialAccessor accessor) {
        functionRouterRuleCredentialAccessor = accessor;
    }

    public static FunctionRouterRuleCredentialAccessor getFunctionRouterRuleCredentialAccessor() {
        return functionRouterRuleCredentialAccessor;
    }

    private static OAuth2WebhookClientCredentialAccessor oAuth2WebhookClientCredentialAccessor;

    public interface OAuth2WebhookClientCredentialAccessor {

        OAuth2WebhookClientCredential prepareModelForJsonMergePatch(
            OAuth2WebhookClientCredential oAuth2WebhookClientCredential, boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(OAuth2WebhookClientCredential oAuth2WebhookClientCredential);
    }

    public static void setOAuth2WebhookClientCredentialAccessor(OAuth2WebhookClientCredentialAccessor accessor) {
        oAuth2WebhookClientCredentialAccessor = accessor;
    }

    public static OAuth2WebhookClientCredentialAccessor getOAuth2WebhookClientCredentialAccessor() {
        return oAuth2WebhookClientCredentialAccessor;
    }

    private static ScoringRuleOptionsAccessor scoringRuleOptionsAccessor;

    public interface ScoringRuleOptionsAccessor {

        ScoringRuleOptions prepareModelForJsonMergePatch(ScoringRuleOptions scoringRuleOptions,
            boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(ScoringRuleOptions scoringRuleOptions);
    }

    public static void setScoringRuleOptionsAccessor(ScoringRuleOptionsAccessor accessor) {
        scoringRuleOptionsAccessor = accessor;
    }

    public static ScoringRuleOptionsAccessor getScoringRuleOptionsAccessor() {
        return scoringRuleOptionsAccessor;
    }

    private static ClassificationPolicyAccessor classificationPolicyAccessor;

    public interface ClassificationPolicyAccessor {

        ClassificationPolicy prepareModelForJsonMergePatch(ClassificationPolicy classificationPolicy,
            boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(ClassificationPolicy classificationPolicy);
    }

    public static void setClassificationPolicyAccessor(ClassificationPolicyAccessor accessor) {
        classificationPolicyAccessor = accessor;
    }

    public static ClassificationPolicyAccessor getClassificationPolicyAccessor() {
        return classificationPolicyAccessor;
    }

    private static QueueSelectorAttachmentAccessor queueSelectorAttachmentAccessor;

    public interface QueueSelectorAttachmentAccessor {

        QueueSelectorAttachment prepareModelForJsonMergePatch(QueueSelectorAttachment queueSelectorAttachment,
            boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(QueueSelectorAttachment queueSelectorAttachment);
    }

    public static void setQueueSelectorAttachmentAccessor(QueueSelectorAttachmentAccessor accessor) {
        queueSelectorAttachmentAccessor = accessor;
    }

    public static QueueSelectorAttachmentAccessor getQueueSelectorAttachmentAccessor() {
        return queueSelectorAttachmentAccessor;
    }

    private static RouterQueueSelectorAccessor routerQueueSelectorAccessor;

    public interface RouterQueueSelectorAccessor {

        RouterQueueSelector prepareModelForJsonMergePatch(RouterQueueSelector routerQueueSelector,
            boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(RouterQueueSelector routerQueueSelector);
    }

    public static void setRouterQueueSelectorAccessor(RouterQueueSelectorAccessor accessor) {
        routerQueueSelectorAccessor = accessor;
    }

    public static RouterQueueSelectorAccessor getRouterQueueSelectorAccessor() {
        return routerQueueSelectorAccessor;
    }

    private static QueueWeightedAllocationAccessor queueWeightedAllocationAccessor;

    public interface QueueWeightedAllocationAccessor {

        QueueWeightedAllocation prepareModelForJsonMergePatch(QueueWeightedAllocation queueWeightedAllocation,
            boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(QueueWeightedAllocation queueWeightedAllocation);
    }

    public static void setQueueWeightedAllocationAccessor(QueueWeightedAllocationAccessor accessor) {
        queueWeightedAllocationAccessor = accessor;
    }

    public static QueueWeightedAllocationAccessor getQueueWeightedAllocationAccessor() {
        return queueWeightedAllocationAccessor;
    }

    private static WorkerSelectorAttachmentAccessor workerSelectorAttachmentAccessor;

    public interface WorkerSelectorAttachmentAccessor {

        WorkerSelectorAttachment prepareModelForJsonMergePatch(WorkerSelectorAttachment workerSelectorAttachment,
            boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(WorkerSelectorAttachment workerSelectorAttachment);
    }

    public static void setWorkerSelectorAttachmentAccessor(WorkerSelectorAttachmentAccessor accessor) {
        workerSelectorAttachmentAccessor = accessor;
    }

    public static WorkerSelectorAttachmentAccessor getWorkerSelectorAttachmentAccessor() {
        return workerSelectorAttachmentAccessor;
    }

    private static RouterWorkerSelectorAccessor routerWorkerSelectorAccessor;

    public interface RouterWorkerSelectorAccessor {

        RouterWorkerSelector prepareModelForJsonMergePatch(RouterWorkerSelector routerWorkerSelector,
            boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(RouterWorkerSelector routerWorkerSelector);
    }

    public static void setRouterWorkerSelectorAccessor(RouterWorkerSelectorAccessor accessor) {
        routerWorkerSelectorAccessor = accessor;
    }

    public static RouterWorkerSelectorAccessor getRouterWorkerSelectorAccessor() {
        return routerWorkerSelectorAccessor;
    }

    private static WorkerWeightedAllocationAccessor workerWeightedAllocationAccessor;

    public interface WorkerWeightedAllocationAccessor {

        WorkerWeightedAllocation prepareModelForJsonMergePatch(WorkerWeightedAllocation workerWeightedAllocation,
            boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(WorkerWeightedAllocation workerWeightedAllocation);
    }

    public static void setWorkerWeightedAllocationAccessor(WorkerWeightedAllocationAccessor accessor) {
        workerWeightedAllocationAccessor = accessor;
    }

    public static WorkerWeightedAllocationAccessor getWorkerWeightedAllocationAccessor() {
        return workerWeightedAllocationAccessor;
    }

    private static ExceptionPolicyAccessor exceptionPolicyAccessor;

    public interface ExceptionPolicyAccessor {

        ExceptionPolicy prepareModelForJsonMergePatch(ExceptionPolicy exceptionPolicy, boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(ExceptionPolicy exceptionPolicy);
    }

    public static void setExceptionPolicyAccessor(ExceptionPolicyAccessor accessor) {
        exceptionPolicyAccessor = accessor;
    }

    public static ExceptionPolicyAccessor getExceptionPolicyAccessor() {
        return exceptionPolicyAccessor;
    }

    private static ExceptionRuleAccessor exceptionRuleAccessor;

    public interface ExceptionRuleAccessor {

        ExceptionRule prepareModelForJsonMergePatch(ExceptionRule exceptionRule, boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(ExceptionRule exceptionRule);
    }

    public static void setExceptionRuleAccessor(ExceptionRuleAccessor accessor) {
        exceptionRuleAccessor = accessor;
    }

    public static ExceptionRuleAccessor getExceptionRuleAccessor() {
        return exceptionRuleAccessor;
    }

    private static ExceptionTriggerAccessor exceptionTriggerAccessor;

    public interface ExceptionTriggerAccessor {

        ExceptionTrigger prepareModelForJsonMergePatch(ExceptionTrigger exceptionTrigger,
            boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(ExceptionTrigger exceptionTrigger);
    }

    public static void setExceptionTriggerAccessor(ExceptionTriggerAccessor accessor) {
        exceptionTriggerAccessor = accessor;
    }

    public static ExceptionTriggerAccessor getExceptionTriggerAccessor() {
        return exceptionTriggerAccessor;
    }

    private static ExceptionActionAccessor exceptionActionAccessor;

    public interface ExceptionActionAccessor {

        ExceptionAction prepareModelForJsonMergePatch(ExceptionAction exceptionAction, boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(ExceptionAction exceptionAction);

        void setId(ExceptionAction exceptionAction, String id);
    }

    public static void setExceptionActionAccessor(ExceptionActionAccessor accessor) {
        exceptionActionAccessor = accessor;
    }

    public static ExceptionActionAccessor getExceptionActionAccessor() {
        return exceptionActionAccessor;
    }

    private static RouterQueueAccessor routerQueueAccessor;

    public interface RouterQueueAccessor {

        RouterQueue prepareModelForJsonMergePatch(RouterQueue routerQueue, boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(RouterQueue routerQueue);
    }

    public static void setRouterQueueAccessor(RouterQueueAccessor accessor) {
        routerQueueAccessor = accessor;
    }

    public static RouterQueueAccessor getRouterQueueAccessor() {
        return routerQueueAccessor;
    }

    private static RouterJobAccessor routerJobAccessor;

    public interface RouterJobAccessor {

        RouterJob prepareModelForJsonMergePatch(RouterJob routerJob, boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(RouterJob routerJob);
    }

    public static void setRouterJobAccessor(RouterJobAccessor accessor) {
        routerJobAccessor = accessor;
    }

    public static RouterJobAccessor getRouterJobAccessor() {
        return routerJobAccessor;
    }

    private static RouterJobNoteAccessor routerJobNoteAccessor;

    public interface RouterJobNoteAccessor {

        RouterJobNote prepareModelForJsonMergePatch(RouterJobNote routerJobNote, boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(RouterJobNote routerJobNote);
    }

    public static void setRouterJobNoteAccessor(RouterJobNoteAccessor accessor) {
        routerJobNoteAccessor = accessor;
    }

    public static RouterJobNoteAccessor getRouterJobNoteAccessor() {
        return routerJobNoteAccessor;
    }

    private static JobMatchingModeAccessor jobMatchingModeAccessor;

    public interface JobMatchingModeAccessor {

        JobMatchingMode prepareModelForJsonMergePatch(JobMatchingMode jobMatchingMode, boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(JobMatchingMode jobMatchingMode);
    }

    public static void setJobMatchingModeAccessor(JobMatchingModeAccessor accessor) {
        jobMatchingModeAccessor = accessor;
    }

    public static JobMatchingModeAccessor getJobMatchingModeAccessor() {
        return jobMatchingModeAccessor;
    }

    private static RouterWorkerAccessor routerWorkerAccessor;

    public interface RouterWorkerAccessor {

        RouterWorker prepareModelForJsonMergePatch(RouterWorker routerWorker, boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(RouterWorker routerWorker);
    }

    public static void setRouterWorkerAccessor(RouterWorkerAccessor accessor) {
        routerWorkerAccessor = accessor;
    }

    public static RouterWorkerAccessor getRouterWorkerAccessor() {
        return routerWorkerAccessor;
    }

    private static RouterChannelAccessor routerChannelAccessor;

    public interface RouterChannelAccessor {

        RouterChannel prepareModelForJsonMergePatch(RouterChannel routerChannel, boolean jsonMergePatchEnabled);

        boolean isJsonMergePatch(RouterChannel routerChannel);
    }

    public static void setRouterChannelAccessor(RouterChannelAccessor accessor) {
        routerChannelAccessor = accessor;
    }

    public static RouterChannelAccessor getRouterChannelAccessor() {
        return routerChannelAccessor;
    }
}
