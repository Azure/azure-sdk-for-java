// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.communication.jobrouter.implementation;

import com.azure.communication.jobrouter.implementation.models.BestWorkerModeInternal;
import com.azure.communication.jobrouter.implementation.models.CancelExceptionActionInternal;
import com.azure.communication.jobrouter.implementation.models.ClassificationPolicyInternal;
import com.azure.communication.jobrouter.implementation.models.ConditionalQueueSelectorAttachmentInternal;
import com.azure.communication.jobrouter.implementation.models.ConditionalWorkerSelectorAttachmentInternal;
import com.azure.communication.jobrouter.implementation.models.DirectMapRouterRuleInternal;
import com.azure.communication.jobrouter.implementation.models.DistributionModeInternal;
import com.azure.communication.jobrouter.implementation.models.DistributionPolicyInternal;
import com.azure.communication.jobrouter.implementation.models.ExceptionActionInternal;
import com.azure.communication.jobrouter.implementation.models.ExceptionPolicyInternal;
import com.azure.communication.jobrouter.implementation.models.ExceptionRuleInternal;
import com.azure.communication.jobrouter.implementation.models.ExceptionTriggerInternal;
import com.azure.communication.jobrouter.implementation.models.ExpressionRouterRuleInternal;
import com.azure.communication.jobrouter.implementation.models.FunctionRouterRuleInternal;
import com.azure.communication.jobrouter.implementation.models.JobMatchingModeInternal;
import com.azure.communication.jobrouter.implementation.models.LongestIdleModeInternal;
import com.azure.communication.jobrouter.implementation.models.ManualReclassifyExceptionActionInternal;
import com.azure.communication.jobrouter.implementation.models.PassThroughQueueSelectorAttachmentInternal;
import com.azure.communication.jobrouter.implementation.models.PassThroughWorkerSelectorAttachmentInternal;
import com.azure.communication.jobrouter.implementation.models.QueueAndMatchModeInternal;
import com.azure.communication.jobrouter.implementation.models.QueueLengthExceptionTriggerInternal;
import com.azure.communication.jobrouter.implementation.models.QueueSelectorAttachmentInternal;
import com.azure.communication.jobrouter.implementation.models.QueueWeightedAllocationInternal;
import com.azure.communication.jobrouter.implementation.models.ReclassifyExceptionActionInternal;
import com.azure.communication.jobrouter.implementation.models.RoundRobinModeInternal;
import com.azure.communication.jobrouter.implementation.models.RouterJobInternal;
import com.azure.communication.jobrouter.implementation.models.RouterQueueInternal;
import com.azure.communication.jobrouter.implementation.models.RouterQueueSelectorInternal;
import com.azure.communication.jobrouter.implementation.models.RouterRuleInternal;
import com.azure.communication.jobrouter.implementation.models.RouterWorkerInternal;
import com.azure.communication.jobrouter.implementation.models.RouterWorkerSelectorInternal;
import com.azure.communication.jobrouter.implementation.models.RuleEngineQueueSelectorAttachmentInternal;
import com.azure.communication.jobrouter.implementation.models.RuleEngineWorkerSelectorAttachmentInternal;
import com.azure.communication.jobrouter.implementation.models.ScheduleAndSuspendModeInternal;
import com.azure.communication.jobrouter.implementation.models.StaticQueueSelectorAttachmentInternal;
import com.azure.communication.jobrouter.implementation.models.StaticRouterRuleInternal;
import com.azure.communication.jobrouter.implementation.models.StaticWorkerSelectorAttachmentInternal;
import com.azure.communication.jobrouter.implementation.models.SuspendModeInternal;
import com.azure.communication.jobrouter.implementation.models.WaitTimeExceptionTriggerInternal;
import com.azure.communication.jobrouter.implementation.models.WebhookRouterRuleInternal;
import com.azure.communication.jobrouter.implementation.models.WeightedAllocationQueueSelectorAttachmentInternal;
import com.azure.communication.jobrouter.implementation.models.WeightedAllocationWorkerSelectorAttachmentInternal;
import com.azure.communication.jobrouter.implementation.models.WorkerSelectorAttachmentInternal;
import com.azure.communication.jobrouter.implementation.models.WorkerWeightedAllocationInternal;
import com.azure.communication.jobrouter.models.FunctionRouterRuleCredential;
import com.azure.communication.jobrouter.models.OAuth2WebhookClientCredential;
import com.azure.communication.jobrouter.models.RouterChannel;
import com.azure.communication.jobrouter.models.RouterJobAssignment;
import com.azure.communication.jobrouter.models.RouterJobNote;
import com.azure.communication.jobrouter.models.RouterJobOffer;
import com.azure.communication.jobrouter.models.RouterWorkerAssignment;
import com.azure.communication.jobrouter.models.ScoringRuleOptions;

/**
 * This is the Helper class to enable json merge patch serialization for a model.
 */
public class JsonMergePatchHelper {
    private static DistributionPolicyInternalAccessor distributionPolicyInternalAccessor;

    private static DistributionModeInternalAccessor distributionModeInternalAccessor;

    private static BestWorkerModeInternalAccessor bestWorkerModeInternalAccessor;

    private static RouterRuleInternalAccessor routerRuleInternalAccessor;

    private static DirectMapRouterRuleInternalAccessor directMapRouterRuleInternalAccessor;

    private static ExpressionRouterRuleInternalAccessor expressionRouterRuleInternalAccessor;

    private static FunctionRouterRuleInternalAccessor functionRouterRuleInternalAccessor;

    private static FunctionRouterRuleCredentialAccessor functionRouterRuleCredentialAccessor;

    private static StaticRouterRuleInternalAccessor staticRouterRuleInternalAccessor;

    private static WebhookRouterRuleInternalAccessor webhookRouterRuleInternalAccessor;

    private static OAuth2WebhookClientCredentialAccessor oAuth2WebhookClientCredentialAccessor;

    private static ScoringRuleOptionsAccessor scoringRuleOptionsAccessor;

    private static LongestIdleModeInternalAccessor longestIdleModeInternalAccessor;

    private static RoundRobinModeInternalAccessor roundRobinModeInternalAccessor;

    private static ClassificationPolicyInternalAccessor classificationPolicyInternalAccessor;

    private static QueueSelectorAttachmentInternalAccessor queueSelectorAttachmentInternalAccessor;

    private static ConditionalQueueSelectorAttachmentInternalAccessor conditionalQueueSelectorAttachmentInternalAccessor;

    private static RouterQueueSelectorInternalAccessor routerQueueSelectorInternalAccessor;

    private static PassThroughQueueSelectorAttachmentInternalAccessor passThroughQueueSelectorAttachmentInternalAccessor;

    private static RuleEngineQueueSelectorAttachmentInternalAccessor ruleEngineQueueSelectorAttachmentInternalAccessor;

    private static StaticQueueSelectorAttachmentInternalAccessor staticQueueSelectorAttachmentInternalAccessor;

    private static WeightedAllocationQueueSelectorAttachmentInternalAccessor weightedAllocationQueueSelectorAttachmentInternalAccessor;

    private static QueueWeightedAllocationInternalAccessor queueWeightedAllocationInternalAccessor;

    private static WorkerSelectorAttachmentInternalAccessor workerSelectorAttachmentInternalAccessor;

    private static ConditionalWorkerSelectorAttachmentInternalAccessor conditionalWorkerSelectorAttachmentInternalAccessor;

    private static RouterWorkerSelectorInternalAccessor routerWorkerSelectorInternalAccessor;

    private static PassThroughWorkerSelectorAttachmentInternalAccessor passThroughWorkerSelectorAttachmentInternalAccessor;

    private static RuleEngineWorkerSelectorAttachmentInternalAccessor ruleEngineWorkerSelectorAttachmentInternalAccessor;

    private static StaticWorkerSelectorAttachmentInternalAccessor staticWorkerSelectorAttachmentInternalAccessor;

    private static WeightedAllocationWorkerSelectorAttachmentInternalAccessor weightedAllocationWorkerSelectorAttachmentInternalAccessor;

    private static WorkerWeightedAllocationInternalAccessor workerWeightedAllocationInternalAccessor;

    private static ExceptionPolicyInternalAccessor exceptionPolicyInternalAccessor;

    private static ExceptionRuleInternalAccessor exceptionRuleInternalAccessor;

    private static ExceptionTriggerInternalAccessor exceptionTriggerInternalAccessor;

    private static QueueLengthExceptionTriggerInternalAccessor queueLengthExceptionTriggerInternalAccessor;

    private static WaitTimeExceptionTriggerInternalAccessor waitTimeExceptionTriggerInternalAccessor;

    private static ExceptionActionInternalAccessor exceptionActionInternalAccessor;

    private static CancelExceptionActionInternalAccessor cancelExceptionActionInternalAccessor;

    private static ManualReclassifyExceptionActionInternalAccessor manualReclassifyExceptionActionInternalAccessor;

    private static ReclassifyExceptionActionInternalAccessor reclassifyExceptionActionInternalAccessor;

    private static RouterQueueInternalAccessor routerQueueInternalAccessor;

    private static RouterJobInternalAccessor routerJobInternalAccessor;

    private static RouterJobAssignmentAccessor routerJobAssignmentAccessor;

    private static RouterJobNoteAccessor routerJobNoteAccessor;

    private static JobMatchingModeInternalAccessor jobMatchingModeInternalAccessor;

    private static ScheduleAndSuspendModeInternalAccessor scheduleAndSuspendModeInternalAccessor;

    private static QueueAndMatchModeInternalAccessor queueAndMatchModeInternalAccessor;

    private static SuspendModeInternalAccessor suspendModeInternalAccessor;

    private static RouterWorkerInternalAccessor routerWorkerInternalAccessor;

    private static RouterChannelAccessor routerChannelAccessor;

    private static RouterJobOfferAccessor routerJobOfferAccessor;

    private static RouterWorkerAssignmentAccessor routerWorkerAssignmentAccessor;

    public interface DistributionPolicyInternalAccessor {
        DistributionPolicyInternal prepareModelForJsonMergePatch(DistributionPolicyInternal distributionPolicyInternal,
            boolean jsonMergePatchEnabled);
    }

    public interface DistributionModeInternalAccessor {
        DistributionModeInternal prepareModelForJsonMergePatch(DistributionModeInternal distributionModeInternal,
            boolean jsonMergePatchEnabled);
    }

    public interface BestWorkerModeInternalAccessor {
        BestWorkerModeInternal prepareModelForJsonMergePatch(BestWorkerModeInternal bestWorkerModeInternal,
            boolean jsonMergePatchEnabled);
    }

    public interface RouterRuleInternalAccessor {
        RouterRuleInternal prepareModelForJsonMergePatch(RouterRuleInternal routerRuleInternal,
            boolean jsonMergePatchEnabled);
    }

    public interface DirectMapRouterRuleInternalAccessor {
        DirectMapRouterRuleInternal prepareModelForJsonMergePatch(
            DirectMapRouterRuleInternal directMapRouterRuleInternal, boolean jsonMergePatchEnabled);
    }

    public interface ExpressionRouterRuleInternalAccessor {
        ExpressionRouterRuleInternal prepareModelForJsonMergePatch(
            ExpressionRouterRuleInternal expressionRouterRuleInternal, boolean jsonMergePatchEnabled);
    }

    public interface FunctionRouterRuleInternalAccessor {
        FunctionRouterRuleInternal prepareModelForJsonMergePatch(FunctionRouterRuleInternal functionRouterRuleInternal,
            boolean jsonMergePatchEnabled);
    }

    public interface FunctionRouterRuleCredentialAccessor {
        FunctionRouterRuleCredential prepareModelForJsonMergePatch(
            FunctionRouterRuleCredential functionRouterRuleCredential, boolean jsonMergePatchEnabled);
    }

    public interface StaticRouterRuleInternalAccessor {
        StaticRouterRuleInternal prepareModelForJsonMergePatch(StaticRouterRuleInternal staticRouterRuleInternal,
            boolean jsonMergePatchEnabled);
    }

    public interface WebhookRouterRuleInternalAccessor {
        WebhookRouterRuleInternal prepareModelForJsonMergePatch(WebhookRouterRuleInternal webhookRouterRuleInternal,
            boolean jsonMergePatchEnabled);
    }

    public interface OAuth2WebhookClientCredentialAccessor {
        OAuth2WebhookClientCredential prepareModelForJsonMergePatch(
            OAuth2WebhookClientCredential oAuth2WebhookClientCredential, boolean jsonMergePatchEnabled);
    }

    public interface ScoringRuleOptionsAccessor {
        ScoringRuleOptions prepareModelForJsonMergePatch(ScoringRuleOptions scoringRuleOptions,
            boolean jsonMergePatchEnabled);
    }

    public interface LongestIdleModeInternalAccessor {
        LongestIdleModeInternal prepareModelForJsonMergePatch(LongestIdleModeInternal longestIdleModeInternal,
            boolean jsonMergePatchEnabled);
    }

    public interface RoundRobinModeInternalAccessor {
        RoundRobinModeInternal prepareModelForJsonMergePatch(RoundRobinModeInternal roundRobinModeInternal,
            boolean jsonMergePatchEnabled);
    }

    public interface ClassificationPolicyInternalAccessor {
        ClassificationPolicyInternal prepareModelForJsonMergePatch(
            ClassificationPolicyInternal classificationPolicyInternal, boolean jsonMergePatchEnabled);
    }

    public interface QueueSelectorAttachmentInternalAccessor {
        QueueSelectorAttachmentInternal prepareModelForJsonMergePatch(
            QueueSelectorAttachmentInternal queueSelectorAttachmentInternal, boolean jsonMergePatchEnabled);
    }

    public interface ConditionalQueueSelectorAttachmentInternalAccessor {
        ConditionalQueueSelectorAttachmentInternal prepareModelForJsonMergePatch(
            ConditionalQueueSelectorAttachmentInternal conditionalQueueSelectorAttachmentInternal,
            boolean jsonMergePatchEnabled);
    }

    public interface RouterQueueSelectorInternalAccessor {
        RouterQueueSelectorInternal prepareModelForJsonMergePatch(
            RouterQueueSelectorInternal routerQueueSelectorInternal, boolean jsonMergePatchEnabled);
    }

    public interface PassThroughQueueSelectorAttachmentInternalAccessor {
        PassThroughQueueSelectorAttachmentInternal prepareModelForJsonMergePatch(
            PassThroughQueueSelectorAttachmentInternal passThroughQueueSelectorAttachmentInternal,
            boolean jsonMergePatchEnabled);
    }

    public interface RuleEngineQueueSelectorAttachmentInternalAccessor {
        RuleEngineQueueSelectorAttachmentInternal prepareModelForJsonMergePatch(
            RuleEngineQueueSelectorAttachmentInternal ruleEngineQueueSelectorAttachmentInternal,
            boolean jsonMergePatchEnabled);
    }

    public interface StaticQueueSelectorAttachmentInternalAccessor {
        StaticQueueSelectorAttachmentInternal prepareModelForJsonMergePatch(
            StaticQueueSelectorAttachmentInternal staticQueueSelectorAttachmentInternal, boolean jsonMergePatchEnabled);
    }

    public interface WeightedAllocationQueueSelectorAttachmentInternalAccessor {
        WeightedAllocationQueueSelectorAttachmentInternal prepareModelForJsonMergePatch(
            WeightedAllocationQueueSelectorAttachmentInternal weightedAllocationQueueSelectorAttachmentInternal,
            boolean jsonMergePatchEnabled);
    }

    public interface QueueWeightedAllocationInternalAccessor {
        QueueWeightedAllocationInternal prepareModelForJsonMergePatch(
            QueueWeightedAllocationInternal queueWeightedAllocationInternal, boolean jsonMergePatchEnabled);
    }

    public interface WorkerSelectorAttachmentInternalAccessor {
        WorkerSelectorAttachmentInternal prepareModelForJsonMergePatch(
            WorkerSelectorAttachmentInternal workerSelectorAttachmentInternal, boolean jsonMergePatchEnabled);
    }

    public interface ConditionalWorkerSelectorAttachmentInternalAccessor {
        ConditionalWorkerSelectorAttachmentInternal prepareModelForJsonMergePatch(
            ConditionalWorkerSelectorAttachmentInternal conditionalWorkerSelectorAttachmentInternal,
            boolean jsonMergePatchEnabled);
    }

    public interface RouterWorkerSelectorInternalAccessor {
        RouterWorkerSelectorInternal prepareModelForJsonMergePatch(
            RouterWorkerSelectorInternal routerWorkerSelectorInternal, boolean jsonMergePatchEnabled);
    }

    public interface PassThroughWorkerSelectorAttachmentInternalAccessor {
        PassThroughWorkerSelectorAttachmentInternal prepareModelForJsonMergePatch(
            PassThroughWorkerSelectorAttachmentInternal passThroughWorkerSelectorAttachmentInternal,
            boolean jsonMergePatchEnabled);
    }

    public interface RuleEngineWorkerSelectorAttachmentInternalAccessor {
        RuleEngineWorkerSelectorAttachmentInternal prepareModelForJsonMergePatch(
            RuleEngineWorkerSelectorAttachmentInternal ruleEngineWorkerSelectorAttachmentInternal,
            boolean jsonMergePatchEnabled);
    }

    public interface StaticWorkerSelectorAttachmentInternalAccessor {
        StaticWorkerSelectorAttachmentInternal prepareModelForJsonMergePatch(
            StaticWorkerSelectorAttachmentInternal staticWorkerSelectorAttachmentInternal,
            boolean jsonMergePatchEnabled);
    }

    public interface WeightedAllocationWorkerSelectorAttachmentInternalAccessor {
        WeightedAllocationWorkerSelectorAttachmentInternal prepareModelForJsonMergePatch(
            WeightedAllocationWorkerSelectorAttachmentInternal weightedAllocationWorkerSelectorAttachmentInternal,
            boolean jsonMergePatchEnabled);
    }

    public interface WorkerWeightedAllocationInternalAccessor {
        WorkerWeightedAllocationInternal prepareModelForJsonMergePatch(
            WorkerWeightedAllocationInternal workerWeightedAllocationInternal, boolean jsonMergePatchEnabled);
    }

    public interface ExceptionPolicyInternalAccessor {
        ExceptionPolicyInternal prepareModelForJsonMergePatch(ExceptionPolicyInternal exceptionPolicyInternal,
            boolean jsonMergePatchEnabled);
    }

    public interface ExceptionRuleInternalAccessor {
        ExceptionRuleInternal prepareModelForJsonMergePatch(ExceptionRuleInternal exceptionRuleInternal,
            boolean jsonMergePatchEnabled);
    }

    public interface ExceptionTriggerInternalAccessor {
        ExceptionTriggerInternal prepareModelForJsonMergePatch(ExceptionTriggerInternal exceptionTriggerInternal,
            boolean jsonMergePatchEnabled);
    }

    public interface QueueLengthExceptionTriggerInternalAccessor {
        QueueLengthExceptionTriggerInternal prepareModelForJsonMergePatch(
            QueueLengthExceptionTriggerInternal queueLengthExceptionTriggerInternal, boolean jsonMergePatchEnabled);
    }

    public interface WaitTimeExceptionTriggerInternalAccessor {
        WaitTimeExceptionTriggerInternal prepareModelForJsonMergePatch(
            WaitTimeExceptionTriggerInternal waitTimeExceptionTriggerInternal, boolean jsonMergePatchEnabled);
    }

    public interface ExceptionActionInternalAccessor {
        ExceptionActionInternal prepareModelForJsonMergePatch(ExceptionActionInternal exceptionActionInternal,
            boolean jsonMergePatchEnabled);
    }

    public interface CancelExceptionActionInternalAccessor {
        CancelExceptionActionInternal prepareModelForJsonMergePatch(
            CancelExceptionActionInternal cancelExceptionActionInternal, boolean jsonMergePatchEnabled);
    }

    public interface ManualReclassifyExceptionActionInternalAccessor {
        ManualReclassifyExceptionActionInternal prepareModelForJsonMergePatch(
            ManualReclassifyExceptionActionInternal manualReclassifyExceptionActionInternal,
            boolean jsonMergePatchEnabled);
    }

    public interface ReclassifyExceptionActionInternalAccessor {
        ReclassifyExceptionActionInternal prepareModelForJsonMergePatch(
            ReclassifyExceptionActionInternal reclassifyExceptionActionInternal, boolean jsonMergePatchEnabled);
    }

    public interface RouterQueueInternalAccessor {
        RouterQueueInternal prepareModelForJsonMergePatch(RouterQueueInternal routerQueueInternal,
            boolean jsonMergePatchEnabled);
    }

    public interface RouterJobInternalAccessor {
        RouterJobInternal prepareModelForJsonMergePatch(RouterJobInternal routerJobInternal,
            boolean jsonMergePatchEnabled);
    }

    public interface RouterJobAssignmentAccessor {
        RouterJobAssignment prepareModelForJsonMergePatch(RouterJobAssignment routerJobAssignment,
            boolean jsonMergePatchEnabled);
    }

    public interface RouterJobNoteAccessor {
        RouterJobNote prepareModelForJsonMergePatch(RouterJobNote routerJobNote, boolean jsonMergePatchEnabled);
    }

    public interface JobMatchingModeInternalAccessor {
        JobMatchingModeInternal prepareModelForJsonMergePatch(JobMatchingModeInternal jobMatchingModeInternal,
            boolean jsonMergePatchEnabled);
    }

    public interface ScheduleAndSuspendModeInternalAccessor {
        ScheduleAndSuspendModeInternal prepareModelForJsonMergePatch(
            ScheduleAndSuspendModeInternal scheduleAndSuspendModeInternal, boolean jsonMergePatchEnabled);
    }

    public interface QueueAndMatchModeInternalAccessor {
        QueueAndMatchModeInternal prepareModelForJsonMergePatch(QueueAndMatchModeInternal queueAndMatchModeInternal,
            boolean jsonMergePatchEnabled);
    }

    public interface SuspendModeInternalAccessor {
        SuspendModeInternal prepareModelForJsonMergePatch(SuspendModeInternal suspendModeInternal,
            boolean jsonMergePatchEnabled);
    }

    public interface RouterWorkerInternalAccessor {
        RouterWorkerInternal prepareModelForJsonMergePatch(RouterWorkerInternal routerWorkerInternal,
            boolean jsonMergePatchEnabled);
    }

    public interface RouterChannelAccessor {
        RouterChannel prepareModelForJsonMergePatch(RouterChannel routerChannel, boolean jsonMergePatchEnabled);
    }

    public interface RouterJobOfferAccessor {
        RouterJobOffer prepareModelForJsonMergePatch(RouterJobOffer routerJobOffer, boolean jsonMergePatchEnabled);
    }

    public interface RouterWorkerAssignmentAccessor {
        RouterWorkerAssignment prepareModelForJsonMergePatch(RouterWorkerAssignment routerWorkerAssignment,
            boolean jsonMergePatchEnabled);
    }

    public static void setDistributionPolicyInternalAccessor(DistributionPolicyInternalAccessor accessor) {
        distributionPolicyInternalAccessor = accessor;
    }

    public static DistributionPolicyInternalAccessor getDistributionPolicyInternalAccessor() {
        return distributionPolicyInternalAccessor;
    }

    public static void setDistributionModeInternalAccessor(DistributionModeInternalAccessor accessor) {
        distributionModeInternalAccessor = accessor;
    }

    public static DistributionModeInternalAccessor getDistributionModeInternalAccessor() {
        return distributionModeInternalAccessor;
    }

    public static void setBestWorkerModeInternalAccessor(BestWorkerModeInternalAccessor accessor) {
        bestWorkerModeInternalAccessor = accessor;
    }

    public static BestWorkerModeInternalAccessor getBestWorkerModeInternalAccessor() {
        return bestWorkerModeInternalAccessor;
    }

    public static void setRouterRuleInternalAccessor(RouterRuleInternalAccessor accessor) {
        routerRuleInternalAccessor = accessor;
    }

    public static RouterRuleInternalAccessor getRouterRuleInternalAccessor() {
        return routerRuleInternalAccessor;
    }

    public static void setDirectMapRouterRuleInternalAccessor(DirectMapRouterRuleInternalAccessor accessor) {
        directMapRouterRuleInternalAccessor = accessor;
    }

    public static DirectMapRouterRuleInternalAccessor getDirectMapRouterRuleInternalAccessor() {
        return directMapRouterRuleInternalAccessor;
    }

    public static void setExpressionRouterRuleInternalAccessor(ExpressionRouterRuleInternalAccessor accessor) {
        expressionRouterRuleInternalAccessor = accessor;
    }

    public static ExpressionRouterRuleInternalAccessor getExpressionRouterRuleInternalAccessor() {
        return expressionRouterRuleInternalAccessor;
    }

    public static void setFunctionRouterRuleInternalAccessor(FunctionRouterRuleInternalAccessor accessor) {
        functionRouterRuleInternalAccessor = accessor;
    }

    public static FunctionRouterRuleInternalAccessor getFunctionRouterRuleInternalAccessor() {
        return functionRouterRuleInternalAccessor;
    }

    public static void setFunctionRouterRuleCredentialAccessor(FunctionRouterRuleCredentialAccessor accessor) {
        functionRouterRuleCredentialAccessor = accessor;
    }

    public static FunctionRouterRuleCredentialAccessor getFunctionRouterRuleCredentialAccessor() {
        return functionRouterRuleCredentialAccessor;
    }

    public static void setStaticRouterRuleInternalAccessor(StaticRouterRuleInternalAccessor accessor) {
        staticRouterRuleInternalAccessor = accessor;
    }

    public static StaticRouterRuleInternalAccessor getStaticRouterRuleInternalAccessor() {
        return staticRouterRuleInternalAccessor;
    }

    public static void setWebhookRouterRuleInternalAccessor(WebhookRouterRuleInternalAccessor accessor) {
        webhookRouterRuleInternalAccessor = accessor;
    }

    public static WebhookRouterRuleInternalAccessor getWebhookRouterRuleInternalAccessor() {
        return webhookRouterRuleInternalAccessor;
    }

    public static void setOAuth2WebhookClientCredentialAccessor(OAuth2WebhookClientCredentialAccessor accessor) {
        oAuth2WebhookClientCredentialAccessor = accessor;
    }

    public static OAuth2WebhookClientCredentialAccessor getOAuth2WebhookClientCredentialAccessor() {
        return oAuth2WebhookClientCredentialAccessor;
    }

    public static void setScoringRuleOptionsAccessor(ScoringRuleOptionsAccessor accessor) {
        scoringRuleOptionsAccessor = accessor;
    }

    public static ScoringRuleOptionsAccessor getScoringRuleOptionsAccessor() {
        return scoringRuleOptionsAccessor;
    }

    public static void setLongestIdleModeInternalAccessor(LongestIdleModeInternalAccessor accessor) {
        longestIdleModeInternalAccessor = accessor;
    }

    public static LongestIdleModeInternalAccessor getLongestIdleModeInternalAccessor() {
        return longestIdleModeInternalAccessor;
    }

    public static void setRoundRobinModeInternalAccessor(RoundRobinModeInternalAccessor accessor) {
        roundRobinModeInternalAccessor = accessor;
    }

    public static RoundRobinModeInternalAccessor getRoundRobinModeInternalAccessor() {
        return roundRobinModeInternalAccessor;
    }

    public static void setClassificationPolicyInternalAccessor(ClassificationPolicyInternalAccessor accessor) {
        classificationPolicyInternalAccessor = accessor;
    }

    public static ClassificationPolicyInternalAccessor getClassificationPolicyInternalAccessor() {
        return classificationPolicyInternalAccessor;
    }

    public static void setQueueSelectorAttachmentInternalAccessor(QueueSelectorAttachmentInternalAccessor accessor) {
        queueSelectorAttachmentInternalAccessor = accessor;
    }

    public static QueueSelectorAttachmentInternalAccessor getQueueSelectorAttachmentInternalAccessor() {
        return queueSelectorAttachmentInternalAccessor;
    }

    public static void setConditionalQueueSelectorAttachmentInternalAccessor(
        ConditionalQueueSelectorAttachmentInternalAccessor accessor) {
        conditionalQueueSelectorAttachmentInternalAccessor = accessor;
    }

    public static ConditionalQueueSelectorAttachmentInternalAccessor
        getConditionalQueueSelectorAttachmentInternalAccessor() {
        return conditionalQueueSelectorAttachmentInternalAccessor;
    }

    public static void setRouterQueueSelectorInternalAccessor(RouterQueueSelectorInternalAccessor accessor) {
        routerQueueSelectorInternalAccessor = accessor;
    }

    public static RouterQueueSelectorInternalAccessor getRouterQueueSelectorInternalAccessor() {
        return routerQueueSelectorInternalAccessor;
    }

    public static void setPassThroughQueueSelectorAttachmentInternalAccessor(
        PassThroughQueueSelectorAttachmentInternalAccessor accessor) {
        passThroughQueueSelectorAttachmentInternalAccessor = accessor;
    }

    public static PassThroughQueueSelectorAttachmentInternalAccessor
        getPassThroughQueueSelectorAttachmentInternalAccessor() {
        return passThroughQueueSelectorAttachmentInternalAccessor;
    }

    public static void setRuleEngineQueueSelectorAttachmentInternalAccessor(
        RuleEngineQueueSelectorAttachmentInternalAccessor accessor) {
        ruleEngineQueueSelectorAttachmentInternalAccessor = accessor;
    }

    public static RuleEngineQueueSelectorAttachmentInternalAccessor
        getRuleEngineQueueSelectorAttachmentInternalAccessor() {
        return ruleEngineQueueSelectorAttachmentInternalAccessor;
    }

    public static void
        setStaticQueueSelectorAttachmentInternalAccessor(StaticQueueSelectorAttachmentInternalAccessor accessor) {
        staticQueueSelectorAttachmentInternalAccessor = accessor;
    }

    public static StaticQueueSelectorAttachmentInternalAccessor getStaticQueueSelectorAttachmentInternalAccessor() {
        return staticQueueSelectorAttachmentInternalAccessor;
    }

    public static void setWeightedAllocationQueueSelectorAttachmentInternalAccessor(
        WeightedAllocationQueueSelectorAttachmentInternalAccessor accessor) {
        weightedAllocationQueueSelectorAttachmentInternalAccessor = accessor;
    }

    public static WeightedAllocationQueueSelectorAttachmentInternalAccessor
        getWeightedAllocationQueueSelectorAttachmentInternalAccessor() {
        return weightedAllocationQueueSelectorAttachmentInternalAccessor;
    }

    public static void setQueueWeightedAllocationInternalAccessor(QueueWeightedAllocationInternalAccessor accessor) {
        queueWeightedAllocationInternalAccessor = accessor;
    }

    public static QueueWeightedAllocationInternalAccessor getQueueWeightedAllocationInternalAccessor() {
        return queueWeightedAllocationInternalAccessor;
    }

    public static void setWorkerSelectorAttachmentInternalAccessor(WorkerSelectorAttachmentInternalAccessor accessor) {
        workerSelectorAttachmentInternalAccessor = accessor;
    }

    public static WorkerSelectorAttachmentInternalAccessor getWorkerSelectorAttachmentInternalAccessor() {
        return workerSelectorAttachmentInternalAccessor;
    }

    public static void setConditionalWorkerSelectorAttachmentInternalAccessor(
        ConditionalWorkerSelectorAttachmentInternalAccessor accessor) {
        conditionalWorkerSelectorAttachmentInternalAccessor = accessor;
    }

    public static ConditionalWorkerSelectorAttachmentInternalAccessor
        getConditionalWorkerSelectorAttachmentInternalAccessor() {
        return conditionalWorkerSelectorAttachmentInternalAccessor;
    }

    public static void setRouterWorkerSelectorInternalAccessor(RouterWorkerSelectorInternalAccessor accessor) {
        routerWorkerSelectorInternalAccessor = accessor;
    }

    public static RouterWorkerSelectorInternalAccessor getRouterWorkerSelectorInternalAccessor() {
        return routerWorkerSelectorInternalAccessor;
    }

    public static void setPassThroughWorkerSelectorAttachmentInternalAccessor(
        PassThroughWorkerSelectorAttachmentInternalAccessor accessor) {
        passThroughWorkerSelectorAttachmentInternalAccessor = accessor;
    }

    public static PassThroughWorkerSelectorAttachmentInternalAccessor
        getPassThroughWorkerSelectorAttachmentInternalAccessor() {
        return passThroughWorkerSelectorAttachmentInternalAccessor;
    }

    public static void setRuleEngineWorkerSelectorAttachmentInternalAccessor(
        RuleEngineWorkerSelectorAttachmentInternalAccessor accessor) {
        ruleEngineWorkerSelectorAttachmentInternalAccessor = accessor;
    }

    public static RuleEngineWorkerSelectorAttachmentInternalAccessor
        getRuleEngineWorkerSelectorAttachmentInternalAccessor() {
        return ruleEngineWorkerSelectorAttachmentInternalAccessor;
    }

    public static void
        setStaticWorkerSelectorAttachmentInternalAccessor(StaticWorkerSelectorAttachmentInternalAccessor accessor) {
        staticWorkerSelectorAttachmentInternalAccessor = accessor;
    }

    public static StaticWorkerSelectorAttachmentInternalAccessor getStaticWorkerSelectorAttachmentInternalAccessor() {
        return staticWorkerSelectorAttachmentInternalAccessor;
    }

    public static void setWeightedAllocationWorkerSelectorAttachmentInternalAccessor(
        WeightedAllocationWorkerSelectorAttachmentInternalAccessor accessor) {
        weightedAllocationWorkerSelectorAttachmentInternalAccessor = accessor;
    }

    public static WeightedAllocationWorkerSelectorAttachmentInternalAccessor
        getWeightedAllocationWorkerSelectorAttachmentInternalAccessor() {
        return weightedAllocationWorkerSelectorAttachmentInternalAccessor;
    }

    public static void setWorkerWeightedAllocationInternalAccessor(WorkerWeightedAllocationInternalAccessor accessor) {
        workerWeightedAllocationInternalAccessor = accessor;
    }

    public static WorkerWeightedAllocationInternalAccessor getWorkerWeightedAllocationInternalAccessor() {
        return workerWeightedAllocationInternalAccessor;
    }

    public static void setExceptionPolicyInternalAccessor(ExceptionPolicyInternalAccessor accessor) {
        exceptionPolicyInternalAccessor = accessor;
    }

    public static ExceptionPolicyInternalAccessor getExceptionPolicyInternalAccessor() {
        return exceptionPolicyInternalAccessor;
    }

    public static void setExceptionRuleInternalAccessor(ExceptionRuleInternalAccessor accessor) {
        exceptionRuleInternalAccessor = accessor;
    }

    public static ExceptionRuleInternalAccessor getExceptionRuleInternalAccessor() {
        return exceptionRuleInternalAccessor;
    }

    public static void setExceptionTriggerInternalAccessor(ExceptionTriggerInternalAccessor accessor) {
        exceptionTriggerInternalAccessor = accessor;
    }

    public static ExceptionTriggerInternalAccessor getExceptionTriggerInternalAccessor() {
        return exceptionTriggerInternalAccessor;
    }

    public static void
        setQueueLengthExceptionTriggerInternalAccessor(QueueLengthExceptionTriggerInternalAccessor accessor) {
        queueLengthExceptionTriggerInternalAccessor = accessor;
    }

    public static QueueLengthExceptionTriggerInternalAccessor getQueueLengthExceptionTriggerInternalAccessor() {
        return queueLengthExceptionTriggerInternalAccessor;
    }

    public static void setWaitTimeExceptionTriggerInternalAccessor(WaitTimeExceptionTriggerInternalAccessor accessor) {
        waitTimeExceptionTriggerInternalAccessor = accessor;
    }

    public static WaitTimeExceptionTriggerInternalAccessor getWaitTimeExceptionTriggerInternalAccessor() {
        return waitTimeExceptionTriggerInternalAccessor;
    }

    public static void setExceptionActionInternalAccessor(ExceptionActionInternalAccessor accessor) {
        exceptionActionInternalAccessor = accessor;
    }

    public static ExceptionActionInternalAccessor getExceptionActionInternalAccessor() {
        return exceptionActionInternalAccessor;
    }

    public static void setCancelExceptionActionInternalAccessor(CancelExceptionActionInternalAccessor accessor) {
        cancelExceptionActionInternalAccessor = accessor;
    }

    public static CancelExceptionActionInternalAccessor getCancelExceptionActionInternalAccessor() {
        return cancelExceptionActionInternalAccessor;
    }

    public static void
        setManualReclassifyExceptionActionInternalAccessor(ManualReclassifyExceptionActionInternalAccessor accessor) {
        manualReclassifyExceptionActionInternalAccessor = accessor;
    }

    public static ManualReclassifyExceptionActionInternalAccessor getManualReclassifyExceptionActionInternalAccessor() {
        return manualReclassifyExceptionActionInternalAccessor;
    }

    public static void
        setReclassifyExceptionActionInternalAccessor(ReclassifyExceptionActionInternalAccessor accessor) {
        reclassifyExceptionActionInternalAccessor = accessor;
    }

    public static ReclassifyExceptionActionInternalAccessor getReclassifyExceptionActionInternalAccessor() {
        return reclassifyExceptionActionInternalAccessor;
    }

    public static void setRouterQueueInternalAccessor(RouterQueueInternalAccessor accessor) {
        routerQueueInternalAccessor = accessor;
    }

    public static RouterQueueInternalAccessor getRouterQueueInternalAccessor() {
        return routerQueueInternalAccessor;
    }

    public static void setRouterJobInternalAccessor(RouterJobInternalAccessor accessor) {
        routerJobInternalAccessor = accessor;
    }

    public static RouterJobInternalAccessor getRouterJobInternalAccessor() {
        return routerJobInternalAccessor;
    }

    public static void setRouterJobAssignmentAccessor(RouterJobAssignmentAccessor accessor) {
        routerJobAssignmentAccessor = accessor;
    }

    public static RouterJobAssignmentAccessor getRouterJobAssignmentAccessor() {
        return routerJobAssignmentAccessor;
    }

    public static void setRouterJobNoteAccessor(RouterJobNoteAccessor accessor) {
        routerJobNoteAccessor = accessor;
    }

    public static RouterJobNoteAccessor getRouterJobNoteAccessor() {
        return routerJobNoteAccessor;
    }

    public static void setJobMatchingModeInternalAccessor(JobMatchingModeInternalAccessor accessor) {
        jobMatchingModeInternalAccessor = accessor;
    }

    public static JobMatchingModeInternalAccessor getJobMatchingModeInternalAccessor() {
        return jobMatchingModeInternalAccessor;
    }

    public static void setScheduleAndSuspendModeInternalAccessor(ScheduleAndSuspendModeInternalAccessor accessor) {
        scheduleAndSuspendModeInternalAccessor = accessor;
    }

    public static ScheduleAndSuspendModeInternalAccessor getScheduleAndSuspendModeInternalAccessor() {
        return scheduleAndSuspendModeInternalAccessor;
    }

    public static void setQueueAndMatchModeInternalAccessor(QueueAndMatchModeInternalAccessor accessor) {
        queueAndMatchModeInternalAccessor = accessor;
    }

    public static QueueAndMatchModeInternalAccessor getQueueAndMatchModeInternalAccessor() {
        return queueAndMatchModeInternalAccessor;
    }

    public static void setSuspendModeInternalAccessor(SuspendModeInternalAccessor accessor) {
        suspendModeInternalAccessor = accessor;
    }

    public static SuspendModeInternalAccessor getSuspendModeInternalAccessor() {
        return suspendModeInternalAccessor;
    }

    public static void setRouterWorkerInternalAccessor(RouterWorkerInternalAccessor accessor) {
        routerWorkerInternalAccessor = accessor;
    }

    public static RouterWorkerInternalAccessor getRouterWorkerInternalAccessor() {
        return routerWorkerInternalAccessor;
    }

    public static void setRouterChannelAccessor(RouterChannelAccessor accessor) {
        routerChannelAccessor = accessor;
    }

    public static RouterChannelAccessor getRouterChannelAccessor() {
        return routerChannelAccessor;
    }

    public static void setRouterJobOfferAccessor(RouterJobOfferAccessor accessor) {
        routerJobOfferAccessor = accessor;
    }

    public static RouterJobOfferAccessor getRouterJobOfferAccessor() {
        return routerJobOfferAccessor;
    }

    public static void setRouterWorkerAssignmentAccessor(RouterWorkerAssignmentAccessor accessor) {
        routerWorkerAssignmentAccessor = accessor;
    }

    public static RouterWorkerAssignmentAccessor getRouterWorkerAssignmentAccessor() {
        return routerWorkerAssignmentAccessor;
    }
}
