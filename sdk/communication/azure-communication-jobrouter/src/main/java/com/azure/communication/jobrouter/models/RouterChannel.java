// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.communication.jobrouter.models;

import com.azure.communication.jobrouter.implementation.JsonMergePatchHelper;
import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.Set;

/**
 * Represents the capacity a job in this channel will consume from a worker.
 */
@Fluent
public final class RouterChannel implements JsonSerializable<RouterChannel> {

    /*
     * Id of a channel.
     */
    @Generated
    private String channelId;

    /*
     * The amount of capacity that an instance of a job of this channel will consume of the total worker capacity.
     */
    @Generated
    private int capacityCostPerJob;

    /*
     * The maximum number of jobs that can be supported concurrently for this channel. Value must be greater than zero.
     */
    @Generated
    private Integer maxNumberOfJobs;

    /**
     * Get the channelId property: Id of a channel.
     *
     * @return the channelId value.
     */
    @Generated
    public String getChannelId() {
        return this.channelId;
    }

    /**
     * Get the capacityCostPerJob property: The amount of capacity that an instance of a job of this channel will
     * consume of the total worker capacity.
     *
     * @return the capacityCostPerJob value.
     */
    @Generated
    public int getCapacityCostPerJob() {
        return this.capacityCostPerJob;
    }

    /**
     * Get the maxNumberOfJobs property: The maximum number of jobs that can be supported concurrently for this channel.
     * Value must be greater than zero.
     *
     * @return the maxNumberOfJobs value.
     */
    @Generated
    public Integer getMaxNumberOfJobs() {
        return this.maxNumberOfJobs;
    }

    /**
     * Set the maxNumberOfJobs property: The maximum number of jobs that can be supported concurrently for this channel.
     * Value must be greater than zero.
     *
     * @param maxNumberOfJobs the maxNumberOfJobs value to set.
     * @return the RouterChannel object itself.
     */
    @Generated
    public RouterChannel setMaxNumberOfJobs(Integer maxNumberOfJobs) {
        this.maxNumberOfJobs = maxNumberOfJobs;
        this.updatedProperties.add("maxNumberOfJobs");
        return this;
    }

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    @Generated
    private boolean jsonMergePatch;

    @Generated
    private void serializeAsJsonMergePatch(boolean jsonMergePatch) {
        this.jsonMergePatch = jsonMergePatch;
    }

    static {
        JsonMergePatchHelper.setRouterChannelAccessor(new JsonMergePatchHelper.RouterChannelAccessor() {

            @Override
            public RouterChannel prepareModelForJsonMergePatch(RouterChannel model, boolean jsonMergePatchEnabled) {
                model.serializeAsJsonMergePatch(jsonMergePatchEnabled);
                return model;
            }

            @Override
            public boolean isJsonMergePatch(RouterChannel model) {
                return model.jsonMergePatch;
            }
        });
    }

    /**
     * Creates an instance of RouterChannel class.
     */
    @Generated
    public RouterChannel() {
    }

    /**
     * Set the channelId property: Id of a channel.
     * <p>Required when create the resource.</p>
     *
     * @param channelId the channelId value to set.
     * @return the RouterChannel object itself.
     */
    @Generated
    public RouterChannel setChannelId(String channelId) {
        this.channelId = channelId;
        this.updatedProperties.add("channelId");
        return this;
    }

    /**
     * Set the capacityCostPerJob property: The amount of capacity that an instance of a job of this channel will
     * consume of the total worker capacity.
     * <p>Required when create the resource.</p>
     *
     * @param capacityCostPerJob the capacityCostPerJob value to set.
     * @return the RouterChannel object itself.
     */
    @Generated
    public RouterChannel setCapacityCostPerJob(int capacityCostPerJob) {
        this.capacityCostPerJob = capacityCostPerJob;
        this.updatedProperties.add("capacityCostPerJob");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (jsonMergePatch) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeStringField("channelId", this.channelId);
            jsonWriter.writeIntField("capacityCostPerJob", this.capacityCostPerJob);
            jsonWriter.writeNumberField("maxNumberOfJobs", this.maxNumberOfJobs);
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (updatedProperties.contains("channelId")) {
            if (this.channelId == null) {
                jsonWriter.writeNullField("channelId");
            } else {
                jsonWriter.writeStringField("channelId", this.channelId);
            }
        }
        if (updatedProperties.contains("capacityCostPerJob")) {
            jsonWriter.writeIntField("capacityCostPerJob", this.capacityCostPerJob);
        }
        if (updatedProperties.contains("maxNumberOfJobs")) {
            if (this.maxNumberOfJobs == null) {
                jsonWriter.writeNullField("maxNumberOfJobs");
            } else {
                jsonWriter.writeNumberField("maxNumberOfJobs", this.maxNumberOfJobs);
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RouterChannel from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of RouterChannel if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the RouterChannel.
     */
    @Generated
    public static RouterChannel fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RouterChannel deserializedRouterChannel = new RouterChannel();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("channelId".equals(fieldName)) {
                    deserializedRouterChannel.channelId = reader.getString();
                } else if ("capacityCostPerJob".equals(fieldName)) {
                    deserializedRouterChannel.capacityCostPerJob = reader.getInt();
                } else if ("maxNumberOfJobs".equals(fieldName)) {
                    deserializedRouterChannel.maxNumberOfJobs = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedRouterChannel;
        });
    }

    /**
     * Creates an instance of RouterChannel class.
     *
     * @param channelId the channelId value to set.
     * @param capacityCostPerJob the capacityCostPerJob value to set.
     */
    public RouterChannel(String channelId, int capacityCostPerJob) {
        this.channelId = channelId;
        this.updatedProperties.add("channelId");
        this.capacityCostPerJob = capacityCostPerJob;
        this.updatedProperties.add("capacityCostPerJob");
    }
}
