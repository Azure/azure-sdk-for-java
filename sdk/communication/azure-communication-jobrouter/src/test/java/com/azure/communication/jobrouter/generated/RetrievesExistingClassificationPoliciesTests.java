// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.communication.jobrouter.generated;

import com.azure.communication.jobrouter.models.ClassificationPolicy;
import com.azure.communication.jobrouter.models.QueueSelectorAttachment;
import com.azure.communication.jobrouter.models.QueueSelectorAttachmentKind;
import com.azure.communication.jobrouter.models.RouterRule;
import com.azure.communication.jobrouter.models.RouterRuleKind;
import com.azure.communication.jobrouter.models.WorkerSelectorAttachment;
import com.azure.core.http.rest.PagedIterable;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class RetrievesExistingClassificationPoliciesTests extends JobRouterAdministrationClientTestBase {
    @Test
    @Disabled
    public void testRetrievesExistingClassificationPoliciesTests() {
        // method invocation
        PagedIterable<ClassificationPolicy> response = jobRouterAdministrationClient.listClassificationPolicies();

        // response assertion
        Assertions.assertEquals(200, response.iterableByPage().iterator().next().getStatusCode());
        ClassificationPolicy firstItem = response.iterator().next();
        Assertions.assertNotNull(firstItem);
        // verify property "etag"
        Assertions.assertEquals("etag", firstItem.getEtag());
        // verify property "id"
        Assertions.assertEquals("MainClassificationPolicy", firstItem.getId());
        // verify property "name"
        Assertions.assertEquals("Main", firstItem.getName());
        // verify property "fallbackQueueId"
        Assertions.assertEquals("MainQueue", firstItem.getFallbackQueueId());
        // verify property "queueSelectorAttachments"
        List<QueueSelectorAttachment> firstItemQueueSelectorAttachments = firstItem.getQueueSelectorAttachments();
        QueueSelectorAttachment firstItemQueueSelectorAttachmentsFirstItem
            = firstItemQueueSelectorAttachments.iterator().next();
        Assertions.assertNotNull(firstItemQueueSelectorAttachmentsFirstItem);
        Assertions.assertEquals(QueueSelectorAttachmentKind.RULE_ENGINE,
            firstItemQueueSelectorAttachmentsFirstItem.getKind());
        // verify property "prioritizationRule"
        RouterRule firstItemPrioritizationRule = firstItem.getPrioritizationRule();
        Assertions.assertNotNull(firstItemPrioritizationRule);
        Assertions.assertEquals(RouterRuleKind.STATIC, firstItemPrioritizationRule.getKind());
        // verify property "workerSelectorAttachments"
        List<WorkerSelectorAttachment> firstItemWorkerSelectorAttachments = firstItem.getWorkerSelectorAttachments();
        Assertions.assertEquals(0, firstItemWorkerSelectorAttachments.size());
    }
}
