// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.communication.administration.implementation;

import com.azure.communication.administration.implementation.models.AcquiredPhoneNumbers;
import com.azure.communication.administration.implementation.models.CommunicationErrorResponseException;
import com.azure.communication.administration.implementation.models.PhoneNumberOperation;
import com.azure.communication.administration.implementation.models.PhoneNumberPurchaseRequest;
import com.azure.communication.administration.implementation.models.PhoneNumbersPurchasePhoneNumbersResponse;
import com.azure.communication.administration.implementation.models.PhoneNumbersReleasePhoneNumberResponse;
import com.azure.communication.administration.implementation.models.PhoneNumbersSearchAvailablePhoneNumbersResponse;
import com.azure.communication.administration.implementation.models.PhoneNumbersUpdatePhoneNumberCapabilitiesResponse;
import com.azure.communication.administration.models.AcquiredPhoneNumber;
import com.azure.communication.administration.models.AcquiredPhoneNumberUpdate;
import com.azure.communication.administration.models.PhoneNumberAssignmentType;
import com.azure.communication.administration.models.PhoneNumberCapabilityValue;
import com.azure.communication.administration.models.PhoneNumberCapabilitiesRequest;
import com.azure.communication.administration.models.PhoneNumberSearchRequest;
import com.azure.communication.administration.models.PhoneNumberSearchResult;
import com.azure.communication.administration.models.PhoneNumberType;
import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in PhoneNumbers. */
public final class PhoneNumbersImpl {
    /** The proxy service used to perform REST calls. */
    private final PhoneNumbersService service;

    /** The service client containing this operation class. */
    private final PhoneNumberAdminClientImpl client;

    /**
     * Initializes an instance of PhoneNumbersImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    PhoneNumbersImpl(PhoneNumberAdminClientImpl client) {
        this.service = RestProxy.create(PhoneNumbersService.class, client.getHttpPipeline());
        this.client = client;
    }

    /**
     * The interface defining all the services for PhoneNumberAdminClientPhoneNumbers to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "PhoneNumberAdminClie")
    private interface PhoneNumbersService {
        @Post("/availablePhoneNumbers/countries/{countryCode}/~search")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<PhoneNumbersSearchAvailablePhoneNumbersResponse> searchAvailablePhoneNumbers(
                @HostParam("endpoint") String endpoint,
                @PathParam("countryCode") String countryCode,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") PhoneNumberSearchRequest search,
                Context context);

        @Get("/availablePhoneNumbers/searchResults/{searchId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<PhoneNumberSearchResult>> getSearchResult(
                @HostParam("endpoint") String endpoint,
                @PathParam("searchId") String searchId,
                @QueryParam("api-version") String apiVersion,
                Context context);

        @Post("/availablePhoneNumbers/~purchase")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<PhoneNumbersPurchasePhoneNumbersResponse> purchasePhoneNumbers(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") PhoneNumberPurchaseRequest purchase,
                Context context);

        @Get("/phoneNumbers/operations/{operationId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<PhoneNumberOperation>> getOperation(
                @HostParam("endpoint") String endpoint,
                @PathParam("operationId") String operationId,
                @QueryParam("api-version") String apiVersion,
                Context context);

        @Delete("/phoneNumbers/operations/{operationId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<Void>> cancelOperation(
                @HostParam("endpoint") String endpoint,
                @PathParam("operationId") String operationId,
                @QueryParam("api-version") String apiVersion,
                Context context);

        @Get("/phoneNumbers")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<AcquiredPhoneNumbers>> listPhoneNumbers(
                @HostParam("endpoint") String endpoint, @QueryParam("api-version") String apiVersion, Context context);

        @Get("/phoneNumbers/{phoneNumber}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<AcquiredPhoneNumber>> getPhoneNumber(
                @HostParam("endpoint") String endpoint,
                @PathParam("phoneNumber") String phoneNumber,
                @QueryParam("api-version") String apiVersion,
                Context context);

        @Patch("/phoneNumbers/{phoneNumber}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<AcquiredPhoneNumber>> updatePhoneNumber(
                @HostParam("endpoint") String endpoint,
                @PathParam("phoneNumber") String phoneNumber,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/merge-patch+json") AcquiredPhoneNumberUpdate update,
                Context context);

        @Delete("/phoneNumbers/{phoneNumber}")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<PhoneNumbersReleasePhoneNumberResponse> releasePhoneNumber(
                @HostParam("endpoint") String endpoint,
                @PathParam("phoneNumber") String phoneNumber,
                @QueryParam("api-version") String apiVersion,
                Context context);

        @Patch("/phoneNumbers/{phoneNumber}/capabilities")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<PhoneNumbersUpdatePhoneNumberCapabilitiesResponse> updatePhoneNumberCapabilities(
                @HostParam("endpoint") String endpoint,
                @PathParam("phoneNumber") String phoneNumber,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/merge-patch+json") PhoneNumberCapabilitiesRequest update,
                Context context);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<AcquiredPhoneNumbers>> listPhoneNumbersNext(
                @PathParam(value = "nextLink", encoded = true) String nextLink, Context context);
    }

    /**
     * Search for available phone numbers to purchase.
     *
     * @param countryCode The ISO 3166-2 country code.
     * @param phoneNumberType The type of a phone number.
     * @param assignmentType The type that the phone number can be assigned to.
     * @param capabilities The capabilities of a phone number.
     * @param areaCode The desired area code.
     * @param quantity The desired quantity of phone numbers.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PhoneNumbersSearchAvailablePhoneNumbersResponse> searchAvailablePhoneNumbersWithResponseAsync(
            String countryCode,
            PhoneNumberType phoneNumberType,
            PhoneNumberAssignmentType assignmentType,
            PhoneNumberCapabilitiesRequest capabilities,
            String areaCode,
            Integer quantity) {
        PhoneNumberSearchRequest search = new PhoneNumberSearchRequest();
        search.setPhoneNumberType(phoneNumberType);
        search.setAssignmentType(assignmentType);
        search.setCapabilities(capabilities);
        search.setAreaCode(areaCode);
        search.setQuantity(quantity);
        return FluxUtil.withContext(
                context ->
                        service.searchAvailablePhoneNumbers(
                                this.client.getEndpoint(), countryCode, this.client.getApiVersion(), search, context));
    }

    /**
     * Search for available phone numbers to purchase.
     *
     * @param countryCode The ISO 3166-2 country code.
     * @param phoneNumberType The type of a phone number.
     * @param assignmentType The type that the phone number can be assigned to.
     * @param capabilities The capabilities of a phone number.
     * @param areaCode The desired area code.
     * @param quantity The desired quantity of phone numbers.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PhoneNumbersSearchAvailablePhoneNumbersResponse> searchAvailablePhoneNumbersWithResponseAsync(
            String countryCode,
            PhoneNumberType phoneNumberType,
            PhoneNumberAssignmentType assignmentType,
            PhoneNumberCapabilitiesRequest capabilities,
            String areaCode,
            Integer quantity,
            Context context) {
        PhoneNumberSearchRequest search = new PhoneNumberSearchRequest();
        search.setPhoneNumberType(phoneNumberType);
        search.setAssignmentType(assignmentType);
        search.setCapabilities(capabilities);
        search.setAreaCode(areaCode);
        search.setQuantity(quantity);
        return service.searchAvailablePhoneNumbers(
                this.client.getEndpoint(), countryCode, this.client.getApiVersion(), search, context);
    }

    /**
     * Search for available phone numbers to purchase.
     *
     * @param countryCode The ISO 3166-2 country code.
     * @param phoneNumberType The type of a phone number.
     * @param assignmentType The type that the phone number can be assigned to.
     * @param capabilities The capabilities of a phone number.
     * @param areaCode The desired area code.
     * @param quantity The desired quantity of phone numbers.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> searchAvailablePhoneNumbersAsync(
            String countryCode,
            PhoneNumberType phoneNumberType,
            PhoneNumberAssignmentType assignmentType,
            PhoneNumberCapabilitiesRequest capabilities,
            String areaCode,
            Integer quantity) {
        return searchAvailablePhoneNumbersWithResponseAsync(
                        countryCode, phoneNumberType, assignmentType, capabilities, areaCode, quantity)
                .flatMap((PhoneNumbersSearchAvailablePhoneNumbersResponse res) -> Mono.empty());
    }

    /**
     * Search for available phone numbers to purchase.
     *
     * @param countryCode The ISO 3166-2 country code.
     * @param phoneNumberType The type of a phone number.
     * @param assignmentType The type that the phone number can be assigned to.
     * @param capabilities The capabilities of a phone number.
     * @param areaCode The desired area code.
     * @param quantity The desired quantity of phone numbers.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> searchAvailablePhoneNumbersAsync(
            String countryCode,
            PhoneNumberType phoneNumberType,
            PhoneNumberAssignmentType assignmentType,
            PhoneNumberCapabilitiesRequest capabilities,
            String areaCode,
            Integer quantity,
            Context context) {
        return searchAvailablePhoneNumbersWithResponseAsync(
                        countryCode, phoneNumberType, assignmentType, capabilities, areaCode, quantity, context)
                .flatMap((PhoneNumbersSearchAvailablePhoneNumbersResponse res) -> Mono.empty());
    }

    /**
     * Search for available phone numbers to purchase.
     *
     * @param countryCode The ISO 3166-2 country code.
     * @param phoneNumberType The type of a phone number.
     * @param assignmentType The type that the phone number can be assigned to.
     * @param capabilities The capabilities of a phone number.
     * @param areaCode The desired area code.
     * @param quantity The desired quantity of phone numbers.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void searchAvailablePhoneNumbers(
            String countryCode,
            PhoneNumberType phoneNumberType,
            PhoneNumberAssignmentType assignmentType,
            PhoneNumberCapabilitiesRequest capabilities,
            String areaCode,
            Integer quantity) {
        searchAvailablePhoneNumbersAsync(countryCode, phoneNumberType, assignmentType, capabilities, areaCode, quantity)
                .block();
    }

    /**
     * Search for available phone numbers to purchase.
     *
     * @param countryCode The ISO 3166-2 country code.
     * @param phoneNumberType The type of a phone number.
     * @param assignmentType The type that the phone number can be assigned to.
     * @param capabilities The capabilities of a phone number.
     * @param areaCode The desired area code.
     * @param quantity The desired quantity of phone numbers.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void searchAvailablePhoneNumbers(
            String countryCode,
            PhoneNumberType phoneNumberType,
            PhoneNumberAssignmentType assignmentType,
            PhoneNumberCapabilitiesRequest capabilities,
            String areaCode,
            Integer quantity,
            Context context) {
        searchAvailablePhoneNumbersAsync(
                        countryCode, phoneNumberType, assignmentType, capabilities, areaCode, quantity, context)
                .block();
    }

    /**
     * Get a search result by its id.
     *
     * @param searchId The search Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a search result by its id.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<PhoneNumberSearchResult>> getSearchResultWithResponseAsync(String searchId) {
        return FluxUtil.withContext(
                context ->
                        service.getSearchResult(
                                this.client.getEndpoint(), searchId, this.client.getApiVersion(), context));
    }

    /**
     * Get a search result by its id.
     *
     * @param searchId The search Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a search result by its id.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<PhoneNumberSearchResult>> getSearchResultWithResponseAsync(String searchId, Context context) {
        return service.getSearchResult(this.client.getEndpoint(), searchId, this.client.getApiVersion(), context);
    }

    /**
     * Get a search result by its id.
     *
     * @param searchId The search Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a search result by its id.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PhoneNumberSearchResult> getSearchResultAsync(String searchId) {
        return getSearchResultWithResponseAsync(searchId)
                .flatMap(
                        (Response<PhoneNumberSearchResult> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Get a search result by its id.
     *
     * @param searchId The search Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a search result by its id.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PhoneNumberSearchResult> getSearchResultAsync(String searchId, Context context) {
        return getSearchResultWithResponseAsync(searchId, context)
                .flatMap(
                        (Response<PhoneNumberSearchResult> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Get a search result by its id.
     *
     * @param searchId The search Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a search result by its id.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PhoneNumberSearchResult getSearchResult(String searchId) {
        return getSearchResultAsync(searchId).block();
    }

    /**
     * Get a search result by its id.
     *
     * @param searchId The search Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a search result by its id.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PhoneNumberSearchResult getSearchResult(String searchId, Context context) {
        return getSearchResultAsync(searchId, context).block();
    }

    /**
     * Purchase phone numbers.
     *
     * @param searchId The id of the search result to purchase.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PhoneNumbersPurchasePhoneNumbersResponse> purchasePhoneNumbersWithResponseAsync(String searchId) {
        PhoneNumberPurchaseRequest purchase = new PhoneNumberPurchaseRequest();
        purchase.setSearchId(searchId);
        return FluxUtil.withContext(
                context ->
                        service.purchasePhoneNumbers(
                                this.client.getEndpoint(), this.client.getApiVersion(), purchase, context));
    }

    /**
     * Purchase phone numbers.
     *
     * @param searchId The id of the search result to purchase.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PhoneNumbersPurchasePhoneNumbersResponse> purchasePhoneNumbersWithResponseAsync(
            String searchId, Context context) {
        PhoneNumberPurchaseRequest purchase = new PhoneNumberPurchaseRequest();
        purchase.setSearchId(searchId);
        return service.purchasePhoneNumbers(this.client.getEndpoint(), this.client.getApiVersion(), purchase, context);
    }

    /**
     * Purchase phone numbers.
     *
     * @param searchId The id of the search result to purchase.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> purchasePhoneNumbersAsync(String searchId) {
        return purchasePhoneNumbersWithResponseAsync(searchId)
                .flatMap((PhoneNumbersPurchasePhoneNumbersResponse res) -> Mono.empty());
    }

    /**
     * Purchase phone numbers.
     *
     * @param searchId The id of the search result to purchase.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> purchasePhoneNumbersAsync(String searchId, Context context) {
        return purchasePhoneNumbersWithResponseAsync(searchId, context)
                .flatMap((PhoneNumbersPurchasePhoneNumbersResponse res) -> Mono.empty());
    }

    /**
     * Purchase phone numbers.
     *
     * @param searchId The id of the search result to purchase.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void purchasePhoneNumbers(String searchId) {
        purchasePhoneNumbersAsync(searchId).block();
    }

    /**
     * Purchase phone numbers.
     *
     * @param searchId The id of the search result to purchase.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void purchasePhoneNumbers(String searchId, Context context) {
        purchasePhoneNumbersAsync(searchId, context).block();
    }

    /**
     * Get an operation by its id.
     *
     * @param operationId The operation Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an operation by its id.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<PhoneNumberOperation>> getOperationWithResponseAsync(String operationId) {
        return FluxUtil.withContext(
                context ->
                        service.getOperation(
                                this.client.getEndpoint(), operationId, this.client.getApiVersion(), context));
    }

    /**
     * Get an operation by its id.
     *
     * @param operationId The operation Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an operation by its id.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<PhoneNumberOperation>> getOperationWithResponseAsync(String operationId, Context context) {
        return service.getOperation(this.client.getEndpoint(), operationId, this.client.getApiVersion(), context);
    }

    /**
     * Get an operation by its id.
     *
     * @param operationId The operation Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an operation by its id.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PhoneNumberOperation> getOperationAsync(String operationId) {
        return getOperationWithResponseAsync(operationId)
                .flatMap(
                        (Response<PhoneNumberOperation> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Get an operation by its id.
     *
     * @param operationId The operation Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an operation by its id.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PhoneNumberOperation> getOperationAsync(String operationId, Context context) {
        return getOperationWithResponseAsync(operationId, context)
                .flatMap(
                        (Response<PhoneNumberOperation> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Get an operation by its id.
     *
     * @param operationId The operation Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an operation by its id.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PhoneNumberOperation getOperation(String operationId) {
        return getOperationAsync(operationId).block();
    }

    /**
     * Get an operation by its id.
     *
     * @param operationId The operation Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an operation by its id.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PhoneNumberOperation getOperation(String operationId, Context context) {
        return getOperationAsync(operationId, context).block();
    }

    /**
     * Cancels the operation if cancellation is supported for the operation type.
     *
     * @param operationId The operation Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> cancelOperationWithResponseAsync(String operationId) {
        return FluxUtil.withContext(
                context ->
                        service.cancelOperation(
                                this.client.getEndpoint(), operationId, this.client.getApiVersion(), context));
    }

    /**
     * Cancels the operation if cancellation is supported for the operation type.
     *
     * @param operationId The operation Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> cancelOperationWithResponseAsync(String operationId, Context context) {
        return service.cancelOperation(this.client.getEndpoint(), operationId, this.client.getApiVersion(), context);
    }

    /**
     * Cancels the operation if cancellation is supported for the operation type.
     *
     * @param operationId The operation Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> cancelOperationAsync(String operationId) {
        return cancelOperationWithResponseAsync(operationId).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Cancels the operation if cancellation is supported for the operation type.
     *
     * @param operationId The operation Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> cancelOperationAsync(String operationId, Context context) {
        return cancelOperationWithResponseAsync(operationId, context).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Cancels the operation if cancellation is supported for the operation type.
     *
     * @param operationId The operation Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void cancelOperation(String operationId) {
        cancelOperationAsync(operationId).block();
    }

    /**
     * Cancels the operation if cancellation is supported for the operation type.
     *
     * @param operationId The operation Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void cancelOperation(String operationId, Context context) {
        cancelOperationAsync(operationId, context).block();
    }

    /**
     * Lists acquired phone numbers.
     *
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of acquired phone numbers.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<AcquiredPhoneNumber>> listPhoneNumbersSinglePageAsync() {
        return FluxUtil.withContext(
                        context ->
                                service.listPhoneNumbers(
                                        this.client.getEndpoint(), this.client.getApiVersion(), context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getValue(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * Lists acquired phone numbers.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of acquired phone numbers.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<AcquiredPhoneNumber>> listPhoneNumbersSinglePageAsync(Context context) {
        return service.listPhoneNumbers(this.client.getEndpoint(), this.client.getApiVersion(), context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getValue(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * Lists acquired phone numbers.
     *
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of acquired phone numbers.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<AcquiredPhoneNumber> listPhoneNumbersAsync() {
        return new PagedFlux<>(
                () -> listPhoneNumbersSinglePageAsync(), nextLink -> listPhoneNumbersNextSinglePageAsync(nextLink));
    }

    /**
     * Lists acquired phone numbers.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of acquired phone numbers.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<AcquiredPhoneNumber> listPhoneNumbersAsync(Context context) {
        return new PagedFlux<>(
                () -> listPhoneNumbersSinglePageAsync(context),
                nextLink -> listPhoneNumbersNextSinglePageAsync(nextLink));
    }

    /**
     * Lists acquired phone numbers.
     *
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of acquired phone numbers.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<AcquiredPhoneNumber> listPhoneNumbers() {
        return new PagedIterable<>(listPhoneNumbersAsync());
    }

    /**
     * Lists acquired phone numbers.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of acquired phone numbers.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<AcquiredPhoneNumber> listPhoneNumbers(Context context) {
        return new PagedIterable<>(listPhoneNumbersAsync(context));
    }

    /**
     * Gets information about an acquired phone number.
     *
     * @param phoneNumber The phone number id in E.164 format. The leading plus can be either + or encoded as %2B.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about an acquired phone number.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<AcquiredPhoneNumber>> getPhoneNumberWithResponseAsync(String phoneNumber) {
        return FluxUtil.withContext(
                context ->
                        service.getPhoneNumber(
                                this.client.getEndpoint(), phoneNumber, this.client.getApiVersion(), context));
    }

    /**
     * Gets information about an acquired phone number.
     *
     * @param phoneNumber The phone number id in E.164 format. The leading plus can be either + or encoded as %2B.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about an acquired phone number.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<AcquiredPhoneNumber>> getPhoneNumberWithResponseAsync(String phoneNumber, Context context) {
        return service.getPhoneNumber(this.client.getEndpoint(), phoneNumber, this.client.getApiVersion(), context);
    }

    /**
     * Gets information about an acquired phone number.
     *
     * @param phoneNumber The phone number id in E.164 format. The leading plus can be either + or encoded as %2B.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about an acquired phone number.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AcquiredPhoneNumber> getPhoneNumberAsync(String phoneNumber) {
        return getPhoneNumberWithResponseAsync(phoneNumber)
                .flatMap(
                        (Response<AcquiredPhoneNumber> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Gets information about an acquired phone number.
     *
     * @param phoneNumber The phone number id in E.164 format. The leading plus can be either + or encoded as %2B.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about an acquired phone number.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AcquiredPhoneNumber> getPhoneNumberAsync(String phoneNumber, Context context) {
        return getPhoneNumberWithResponseAsync(phoneNumber, context)
                .flatMap(
                        (Response<AcquiredPhoneNumber> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Gets information about an acquired phone number.
     *
     * @param phoneNumber The phone number id in E.164 format. The leading plus can be either + or encoded as %2B.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about an acquired phone number.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AcquiredPhoneNumber getPhoneNumber(String phoneNumber) {
        return getPhoneNumberAsync(phoneNumber).block();
    }

    /**
     * Gets information about an acquired phone number.
     *
     * @param phoneNumber The phone number id in E.164 format. The leading plus can be either + or encoded as %2B.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about an acquired phone number.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AcquiredPhoneNumber getPhoneNumber(String phoneNumber, Context context) {
        return getPhoneNumberAsync(phoneNumber, context).block();
    }

    /**
     * Update an acquired phone number.
     *
     * @param phoneNumber The phone number id in E.164 format. The leading plus can be either + or encoded as %2B.
     * @param callbackUri The webhook for receiving incoming events.
     * @param applicationId The application id the number has been assigned to.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the acquired phone number and its metadata and configuration.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<AcquiredPhoneNumber>> updatePhoneNumberWithResponseAsync(
            String phoneNumber, String callbackUri, String applicationId) {
        AcquiredPhoneNumberUpdate update = new AcquiredPhoneNumberUpdate();
        update.setCallbackUri(callbackUri);
        update.setApplicationId(applicationId);
        return FluxUtil.withContext(
                context ->
                        service.updatePhoneNumber(
                                this.client.getEndpoint(), phoneNumber, this.client.getApiVersion(), update, context));
    }

    /**
     * Update an acquired phone number.
     *
     * @param phoneNumber The phone number id in E.164 format. The leading plus can be either + or encoded as %2B.
     * @param callbackUri The webhook for receiving incoming events.
     * @param applicationId The application id the number has been assigned to.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the acquired phone number and its metadata and configuration.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<AcquiredPhoneNumber>> updatePhoneNumberWithResponseAsync(
            String phoneNumber, String callbackUri, String applicationId, Context context) {
        AcquiredPhoneNumberUpdate update = new AcquiredPhoneNumberUpdate();
        update.setCallbackUri(callbackUri);
        update.setApplicationId(applicationId);
        return service.updatePhoneNumber(
                this.client.getEndpoint(), phoneNumber, this.client.getApiVersion(), update, context);
    }

    /**
     * Update an acquired phone number.
     *
     * @param phoneNumber The phone number id in E.164 format. The leading plus can be either + or encoded as %2B.
     * @param callbackUri The webhook for receiving incoming events.
     * @param applicationId The application id the number has been assigned to.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the acquired phone number and its metadata and configuration.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AcquiredPhoneNumber> updatePhoneNumberAsync(
            String phoneNumber, String callbackUri, String applicationId) {
        return updatePhoneNumberWithResponseAsync(phoneNumber, callbackUri, applicationId)
                .flatMap(
                        (Response<AcquiredPhoneNumber> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Update an acquired phone number.
     *
     * @param phoneNumber The phone number id in E.164 format. The leading plus can be either + or encoded as %2B.
     * @param callbackUri The webhook for receiving incoming events.
     * @param applicationId The application id the number has been assigned to.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the acquired phone number and its metadata and configuration.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AcquiredPhoneNumber> updatePhoneNumberAsync(
            String phoneNumber, String callbackUri, String applicationId, Context context) {
        return updatePhoneNumberWithResponseAsync(phoneNumber, callbackUri, applicationId, context)
                .flatMap(
                        (Response<AcquiredPhoneNumber> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Update an acquired phone number.
     *
     * @param phoneNumber The phone number id in E.164 format. The leading plus can be either + or encoded as %2B.
     * @param callbackUri The webhook for receiving incoming events.
     * @param applicationId The application id the number has been assigned to.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the acquired phone number and its metadata and configuration.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AcquiredPhoneNumber updatePhoneNumber(String phoneNumber, String callbackUri, String applicationId) {
        return updatePhoneNumberAsync(phoneNumber, callbackUri, applicationId).block();
    }

    /**
     * Update an acquired phone number.
     *
     * @param phoneNumber The phone number id in E.164 format. The leading plus can be either + or encoded as %2B.
     * @param callbackUri The webhook for receiving incoming events.
     * @param applicationId The application id the number has been assigned to.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the acquired phone number and its metadata and configuration.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AcquiredPhoneNumber updatePhoneNumber(
            String phoneNumber, String callbackUri, String applicationId, Context context) {
        return updatePhoneNumberAsync(phoneNumber, callbackUri, applicationId, context).block();
    }

    /**
     * Releases an acquired phone number.
     *
     * @param phoneNumber The phone number id in E.164 format. The leading plus can be either + or encoded as %2B.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PhoneNumbersReleasePhoneNumberResponse> releasePhoneNumberWithResponseAsync(String phoneNumber) {
        return FluxUtil.withContext(
                context ->
                        service.releasePhoneNumber(
                                this.client.getEndpoint(), phoneNumber, this.client.getApiVersion(), context));
    }

    /**
     * Releases an acquired phone number.
     *
     * @param phoneNumber The phone number id in E.164 format. The leading plus can be either + or encoded as %2B.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PhoneNumbersReleasePhoneNumberResponse> releasePhoneNumberWithResponseAsync(
            String phoneNumber, Context context) {
        return service.releasePhoneNumber(this.client.getEndpoint(), phoneNumber, this.client.getApiVersion(), context);
    }

    /**
     * Releases an acquired phone number.
     *
     * @param phoneNumber The phone number id in E.164 format. The leading plus can be either + or encoded as %2B.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> releasePhoneNumberAsync(String phoneNumber) {
        return releasePhoneNumberWithResponseAsync(phoneNumber)
                .flatMap((PhoneNumbersReleasePhoneNumberResponse res) -> Mono.empty());
    }

    /**
     * Releases an acquired phone number.
     *
     * @param phoneNumber The phone number id in E.164 format. The leading plus can be either + or encoded as %2B.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> releasePhoneNumberAsync(String phoneNumber, Context context) {
        return releasePhoneNumberWithResponseAsync(phoneNumber, context)
                .flatMap((PhoneNumbersReleasePhoneNumberResponse res) -> Mono.empty());
    }

    /**
     * Releases an acquired phone number.
     *
     * @param phoneNumber The phone number id in E.164 format. The leading plus can be either + or encoded as %2B.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void releasePhoneNumber(String phoneNumber) {
        releasePhoneNumberAsync(phoneNumber).block();
    }

    /**
     * Releases an acquired phone number.
     *
     * @param phoneNumber The phone number id in E.164 format. The leading plus can be either + or encoded as %2B.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void releasePhoneNumber(String phoneNumber, Context context) {
        releasePhoneNumberAsync(phoneNumber, context).block();
    }

    /**
     * Update capabilities of an acquired phone number.
     *
     * @param phoneNumber The phone number id in E.164 format. The leading plus can be either + or encoded as %2B.
     * @param sms The possible values for a phone number capability.
     * @param calling The possible values for a phone number capability.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the acquired phone number and its metadata and configuration.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PhoneNumbersUpdatePhoneNumberCapabilitiesResponse> updatePhoneNumberCapabilitiesWithResponseAsync(
            String phoneNumber, PhoneNumberCapabilityValue sms, PhoneNumberCapabilityValue calling) {
        PhoneNumberCapabilitiesRequest update = new PhoneNumberCapabilitiesRequest();
        update.setSms(sms);
        update.setCalling(calling);
        return FluxUtil.withContext(
                context ->
                        service.updatePhoneNumberCapabilities(
                                this.client.getEndpoint(), phoneNumber, this.client.getApiVersion(), update, context));
    }

    /**
     * Update capabilities of an acquired phone number.
     *
     * @param phoneNumber The phone number id in E.164 format. The leading plus can be either + or encoded as %2B.
     * @param sms The possible values for a phone number capability.
     * @param calling The possible values for a phone number capability.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the acquired phone number and its metadata and configuration.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PhoneNumbersUpdatePhoneNumberCapabilitiesResponse> updatePhoneNumberCapabilitiesWithResponseAsync(
            String phoneNumber, PhoneNumberCapabilityValue sms, PhoneNumberCapabilityValue calling, Context context) {
        PhoneNumberCapabilitiesRequest update = new PhoneNumberCapabilitiesRequest();
        update.setSms(sms);
        update.setCalling(calling);
        return service.updatePhoneNumberCapabilities(
                this.client.getEndpoint(), phoneNumber, this.client.getApiVersion(), update, context);
    }

    /**
     * Update capabilities of an acquired phone number.
     *
     * @param phoneNumber The phone number id in E.164 format. The leading plus can be either + or encoded as %2B.
     * @param sms The possible values for a phone number capability.
     * @param calling The possible values for a phone number capability.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the acquired phone number and its metadata and configuration.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AcquiredPhoneNumber> updatePhoneNumberCapabilitiesAsync(
            String phoneNumber, PhoneNumberCapabilityValue sms, PhoneNumberCapabilityValue calling) {
        return updatePhoneNumberCapabilitiesWithResponseAsync(phoneNumber, sms, calling)
                .flatMap(
                        (PhoneNumbersUpdatePhoneNumberCapabilitiesResponse res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Update capabilities of an acquired phone number.
     *
     * @param phoneNumber The phone number id in E.164 format. The leading plus can be either + or encoded as %2B.
     * @param sms The possible values for a phone number capability.
     * @param calling The possible values for a phone number capability.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the acquired phone number and its metadata and configuration.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AcquiredPhoneNumber> updatePhoneNumberCapabilitiesAsync(
            String phoneNumber, PhoneNumberCapabilityValue sms, PhoneNumberCapabilityValue calling, Context context) {
        return updatePhoneNumberCapabilitiesWithResponseAsync(phoneNumber, sms, calling, context)
                .flatMap(
                        (PhoneNumbersUpdatePhoneNumberCapabilitiesResponse res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Update capabilities of an acquired phone number.
     *
     * @param phoneNumber The phone number id in E.164 format. The leading plus can be either + or encoded as %2B.
     * @param sms The possible values for a phone number capability.
     * @param calling The possible values for a phone number capability.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the acquired phone number and its metadata and configuration.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AcquiredPhoneNumber updatePhoneNumberCapabilities(
            String phoneNumber, PhoneNumberCapabilityValue sms, PhoneNumberCapabilityValue calling) {
        return updatePhoneNumberCapabilitiesAsync(phoneNumber, sms, calling).block();
    }

    /**
     * Update capabilities of an acquired phone number.
     *
     * @param phoneNumber The phone number id in E.164 format. The leading plus can be either + or encoded as %2B.
     * @param sms The possible values for a phone number capability.
     * @param calling The possible values for a phone number capability.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the acquired phone number and its metadata and configuration.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AcquiredPhoneNumber updatePhoneNumberCapabilities(
            String phoneNumber, PhoneNumberCapabilityValue sms, PhoneNumberCapabilityValue calling, Context context) {
        return updatePhoneNumberCapabilitiesAsync(phoneNumber, sms, calling, context).block();
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of acquired phone numbers.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<AcquiredPhoneNumber>> listPhoneNumbersNextSinglePageAsync(String nextLink) {
        return FluxUtil.withContext(context -> service.listPhoneNumbersNext(nextLink, context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getValue(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of acquired phone numbers.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<AcquiredPhoneNumber>> listPhoneNumbersNextSinglePageAsync(
            String nextLink, Context context) {
        return service.listPhoneNumbersNext(nextLink, context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getValue(),
                                        res.getValue().getNextLink(),
                                        null));
    }
}
