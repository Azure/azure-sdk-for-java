// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.communication.administration.implementation;

import com.azure.communication.administration.models.AcquiredPhoneNumber;
import com.azure.communication.administration.models.AcquiredPhoneNumberUpdate;
import com.azure.communication.administration.models.AcquiredPhoneNumbers;
import com.azure.communication.administration.models.AssignmentType;
import com.azure.communication.administration.models.Capabilities;
import com.azure.communication.administration.models.CountriesResponse;
import com.azure.communication.administration.models.CountryOffering;
import com.azure.communication.administration.models.ErrorResponseException;
import com.azure.communication.administration.models.GeographicAreaCodes;
import com.azure.communication.administration.models.Operation;
import com.azure.communication.administration.models.PhoneNumberAdministrationsPurchasePhoneNumbersResponse;
import com.azure.communication.administration.models.PhoneNumberAdministrationsReleasePhoneNumberResponse;
import com.azure.communication.administration.models.PhoneNumberAdministrationsSearchAvailablePhoneNumbersResponse;
import com.azure.communication.administration.models.PhoneNumberAdministrationsUpdatePhoneNumberResponse;
import com.azure.communication.administration.models.PhoneNumberType;
import com.azure.communication.administration.models.PurchaseRequest;
import com.azure.communication.administration.models.SearchRequest;
import com.azure.communication.administration.models.SearchResult;
import com.azure.communication.administration.models.TollFreeAreaCodes;
import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import java.util.List;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in PhoneNumberAdministrations. */
public final class PhoneNumberAdministrationsImpl {
    /** The proxy service used to perform REST calls. */
    private final PhoneNumberAdministrationsService service;

    /** The service client containing this operation class. */
    private final PhoneNumberAdminClientImpl client;

    /**
     * Initializes an instance of PhoneNumberAdministrationsImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    PhoneNumberAdministrationsImpl(PhoneNumberAdminClientImpl client) {
        this.service = RestProxy.create(PhoneNumberAdministrationsService.class, client.getHttpPipeline());
        this.client = client;
    }

    /**
     * The interface defining all the services for PhoneNumberAdminClientPhoneNumberAdministrations to be used by the
     * proxy service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "PhoneNumberAdminClie")
    private interface PhoneNumberAdministrationsService {
        @Get("/availablePhoneNumbers/countries")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<CountriesResponse>> getCountries(
                @HostParam("endpoint") String endpoint,
                @QueryParam("locale") String locale,
                @QueryParam("api-version") String apiVersion,
                Context context);

        @Get("/availablePhoneNumbers/countries/{countryCode}/areaCodes/tollFree")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<TollFreeAreaCodes>> getTollFreeAreaCodes(
                @HostParam("endpoint") String endpoint,
                @PathParam("countryCode") String countryCode,
                @QueryParam("api-version") String apiVersion,
                Context context);

        @Get("/availablePhoneNumbers/countries/{countryCode}/areaCodes/geographic")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<GeographicAreaCodes>> getGeographicAreaCodes(
                @HostParam("endpoint") String endpoint,
                @PathParam("countryCode") String countryCode,
                @QueryParam("locale") String locale,
                @QueryParam("locationPath") String locationPath,
                @QueryParam("api-version") String apiVersion,
                Context context);

        @Get("/availablePhoneNumbers/countries/{countryCode}/offerings")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<List<CountryOffering>>> getOfferings(
                @HostParam("endpoint") String endpoint,
                @PathParam("countryCode") String countryCode,
                @QueryParam("numberType") PhoneNumberType numberType,
                @QueryParam("assignmentType") AssignmentType assignmentType,
                @QueryParam("api-version") String apiVersion,
                Context context);

        @Post("/availablePhoneNumbers/countries/{countryCode}/~search")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<PhoneNumberAdministrationsSearchAvailablePhoneNumbersResponse> searchAvailablePhoneNumbers(
                @HostParam("endpoint") String endpoint,
                @PathParam("countryCode") String countryCode,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") SearchRequest search,
                Context context);

        @Get("/availablePhoneNumbers/searchResults/{searchId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<SearchResult>> getSearchResult(
                @HostParam("endpoint") String endpoint,
                @PathParam("searchId") String searchId,
                @QueryParam("api-version") String apiVersion,
                Context context);

        @Post("/availablePhoneNumbers/~purchase")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<PhoneNumberAdministrationsPurchasePhoneNumbersResponse> purchasePhoneNumbers(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") PurchaseRequest purchase,
                Context context);

        @Get("/phoneNumbers/operations/{operationId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<Operation>> getOperation(
                @HostParam("endpoint") String endpoint,
                @PathParam("operationId") String operationId,
                @QueryParam("api-version") String apiVersion,
                Context context);

        @Delete("/phoneNumbers/operations/{operationId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<Void>> cancelOperation(
                @HostParam("endpoint") String endpoint,
                @PathParam("operationId") String operationId,
                @QueryParam("api-version") String apiVersion,
                Context context);

        @Get("/phoneNumbers")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<AcquiredPhoneNumbers>> getPhoneNumbers(
                @HostParam("endpoint") String endpoint, @QueryParam("api-version") String apiVersion, Context context);

        @Get("/phoneNumbers/{phoneNumber}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<AcquiredPhoneNumber>> getPhoneNumber(
                @HostParam("endpoint") String endpoint,
                @PathParam("phoneNumber") String phoneNumber,
                @QueryParam("api-version") String apiVersion,
                Context context);

        @Patch("/phoneNumbers/{phoneNumber}")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<PhoneNumberAdministrationsUpdatePhoneNumberResponse> updatePhoneNumber(
                @HostParam("endpoint") String endpoint,
                @PathParam("phoneNumber") String phoneNumber,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/merge-patch+json") AcquiredPhoneNumberUpdate update,
                Context context);

        @Delete("/phoneNumbers/{phoneNumber}")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<PhoneNumberAdministrationsReleasePhoneNumberResponse> releasePhoneNumber(
                @HostParam("endpoint") String endpoint,
                @PathParam("phoneNumber") String phoneNumber,
                @QueryParam("api-version") String apiVersion,
                Context context);
    }

    /**
     * Lists all countries with available phone numbers.
     *
     * @param locale Language locale for localizing location names.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a wrapper around a list of countries.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<CountriesResponse>> getCountriesWithResponseAsync(String locale) {
        return FluxUtil.withContext(
                context ->
                        service.getCountries(this.client.getEndpoint(), locale, this.client.getApiVersion(), context));
    }

    /**
     * Lists all countries with available phone numbers.
     *
     * @param locale Language locale for localizing location names.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a wrapper around a list of countries.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<CountriesResponse>> getCountriesWithResponseAsync(String locale, Context context) {
        return service.getCountries(this.client.getEndpoint(), locale, this.client.getApiVersion(), context);
    }

    /**
     * Lists all countries with available phone numbers.
     *
     * @param locale Language locale for localizing location names.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a wrapper around a list of countries.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CountriesResponse> getCountriesAsync(String locale) {
        return getCountriesWithResponseAsync(locale)
                .flatMap(
                        (Response<CountriesResponse> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Lists all countries with available phone numbers.
     *
     * @param locale Language locale for localizing location names.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a wrapper around a list of countries.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CountriesResponse> getCountriesAsync(String locale, Context context) {
        return getCountriesWithResponseAsync(locale, context)
                .flatMap(
                        (Response<CountriesResponse> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Lists all countries with available phone numbers.
     *
     * @param locale Language locale for localizing location names.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a wrapper around a list of countries.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CountriesResponse getCountries(String locale) {
        return getCountriesAsync(locale).block();
    }

    /**
     * Lists all countries with available phone numbers.
     *
     * @param locale Language locale for localizing location names.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a wrapper around a list of countries.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CountriesResponse getCountries(String locale, Context context) {
        return getCountriesAsync(locale, context).block();
    }

    /**
     * Lists available toll-free area codes for a country.
     *
     * @param countryCode The ISO 3166-2 country code.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a list of Toll-Free area codes.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<TollFreeAreaCodes>> getTollFreeAreaCodesWithResponseAsync(String countryCode) {
        return FluxUtil.withContext(
                context ->
                        service.getTollFreeAreaCodes(
                                this.client.getEndpoint(), countryCode, this.client.getApiVersion(), context));
    }

    /**
     * Lists available toll-free area codes for a country.
     *
     * @param countryCode The ISO 3166-2 country code.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a list of Toll-Free area codes.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<TollFreeAreaCodes>> getTollFreeAreaCodesWithResponseAsync(
            String countryCode, Context context) {
        return service.getTollFreeAreaCodes(
                this.client.getEndpoint(), countryCode, this.client.getApiVersion(), context);
    }

    /**
     * Lists available toll-free area codes for a country.
     *
     * @param countryCode The ISO 3166-2 country code.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a list of Toll-Free area codes.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TollFreeAreaCodes> getTollFreeAreaCodesAsync(String countryCode) {
        return getTollFreeAreaCodesWithResponseAsync(countryCode)
                .flatMap(
                        (Response<TollFreeAreaCodes> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Lists available toll-free area codes for a country.
     *
     * @param countryCode The ISO 3166-2 country code.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a list of Toll-Free area codes.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TollFreeAreaCodes> getTollFreeAreaCodesAsync(String countryCode, Context context) {
        return getTollFreeAreaCodesWithResponseAsync(countryCode, context)
                .flatMap(
                        (Response<TollFreeAreaCodes> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Lists available toll-free area codes for a country.
     *
     * @param countryCode The ISO 3166-2 country code.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a list of Toll-Free area codes.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TollFreeAreaCodes getTollFreeAreaCodes(String countryCode) {
        return getTollFreeAreaCodesAsync(countryCode).block();
    }

    /**
     * Lists available toll-free area codes for a country.
     *
     * @param countryCode The ISO 3166-2 country code.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a list of Toll-Free area codes.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TollFreeAreaCodes getTollFreeAreaCodes(String countryCode, Context context) {
        return getTollFreeAreaCodesAsync(countryCode, context).block();
    }

    /**
     * Pass a component-url-encoded location to narrow down to a region.
     *
     * @param countryCode The ISO 3166-2 country code.
     * @param locale Language locale for localizing location names.
     * @param locationPath A URL-encoded location path starting with the region/state/province and optionally narrowed
     *     down to municipality. Examples: Ontario, Washington%20State%2FRedmond.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a list of geographic area codes.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<GeographicAreaCodes>> getGeographicAreaCodesWithResponseAsync(
            String countryCode, String locale, String locationPath) {
        return FluxUtil.withContext(
                context ->
                        service.getGeographicAreaCodes(
                                this.client.getEndpoint(),
                                countryCode,
                                locale,
                                locationPath,
                                this.client.getApiVersion(),
                                context));
    }

    /**
     * Pass a component-url-encoded location to narrow down to a region.
     *
     * @param countryCode The ISO 3166-2 country code.
     * @param locale Language locale for localizing location names.
     * @param locationPath A URL-encoded location path starting with the region/state/province and optionally narrowed
     *     down to municipality. Examples: Ontario, Washington%20State%2FRedmond.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a list of geographic area codes.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<GeographicAreaCodes>> getGeographicAreaCodesWithResponseAsync(
            String countryCode, String locale, String locationPath, Context context) {
        return service.getGeographicAreaCodes(
                this.client.getEndpoint(), countryCode, locale, locationPath, this.client.getApiVersion(), context);
    }

    /**
     * Pass a component-url-encoded location to narrow down to a region.
     *
     * @param countryCode The ISO 3166-2 country code.
     * @param locale Language locale for localizing location names.
     * @param locationPath A URL-encoded location path starting with the region/state/province and optionally narrowed
     *     down to municipality. Examples: Ontario, Washington%20State%2FRedmond.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a list of geographic area codes.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<GeographicAreaCodes> getGeographicAreaCodesAsync(
            String countryCode, String locale, String locationPath) {
        return getGeographicAreaCodesWithResponseAsync(countryCode, locale, locationPath)
                .flatMap(
                        (Response<GeographicAreaCodes> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Pass a component-url-encoded location to narrow down to a region.
     *
     * @param countryCode The ISO 3166-2 country code.
     * @param locale Language locale for localizing location names.
     * @param locationPath A URL-encoded location path starting with the region/state/province and optionally narrowed
     *     down to municipality. Examples: Ontario, Washington%20State%2FRedmond.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a list of geographic area codes.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<GeographicAreaCodes> getGeographicAreaCodesAsync(
            String countryCode, String locale, String locationPath, Context context) {
        return getGeographicAreaCodesWithResponseAsync(countryCode, locale, locationPath, context)
                .flatMap(
                        (Response<GeographicAreaCodes> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Pass a component-url-encoded location to narrow down to a region.
     *
     * @param countryCode The ISO 3166-2 country code.
     * @param locale Language locale for localizing location names.
     * @param locationPath A URL-encoded location path starting with the region/state/province and optionally narrowed
     *     down to municipality. Examples: Ontario, Washington%20State%2FRedmond.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a list of geographic area codes.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GeographicAreaCodes getGeographicAreaCodes(String countryCode, String locale, String locationPath) {
        return getGeographicAreaCodesAsync(countryCode, locale, locationPath).block();
    }

    /**
     * Pass a component-url-encoded location to narrow down to a region.
     *
     * @param countryCode The ISO 3166-2 country code.
     * @param locale Language locale for localizing location names.
     * @param locationPath A URL-encoded location path starting with the region/state/province and optionally narrowed
     *     down to municipality. Examples: Ontario, Washington%20State%2FRedmond.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a list of geographic area codes.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GeographicAreaCodes getGeographicAreaCodes(
            String countryCode, String locale, String locationPath, Context context) {
        return getGeographicAreaCodesAsync(countryCode, locale, locationPath, context).block();
    }

    /**
     * List available offerings for the given country.
     *
     * @param countryCode The ISO 3166-2 country code.
     * @param numberType Filter by numberType.
     * @param assignmentType Filter by assignmentType.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of available offerings.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<List<CountryOffering>>> getOfferingsWithResponseAsync(
            String countryCode, PhoneNumberType numberType, AssignmentType assignmentType) {
        return FluxUtil.withContext(
                context ->
                        service.getOfferings(
                                this.client.getEndpoint(),
                                countryCode,
                                numberType,
                                assignmentType,
                                this.client.getApiVersion(),
                                context));
    }

    /**
     * List available offerings for the given country.
     *
     * @param countryCode The ISO 3166-2 country code.
     * @param numberType Filter by numberType.
     * @param assignmentType Filter by assignmentType.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of available offerings.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<List<CountryOffering>>> getOfferingsWithResponseAsync(
            String countryCode, PhoneNumberType numberType, AssignmentType assignmentType, Context context) {
        return service.getOfferings(
                this.client.getEndpoint(),
                countryCode,
                numberType,
                assignmentType,
                this.client.getApiVersion(),
                context);
    }

    /**
     * List available offerings for the given country.
     *
     * @param countryCode The ISO 3166-2 country code.
     * @param numberType Filter by numberType.
     * @param assignmentType Filter by assignmentType.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of available offerings.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<CountryOffering>> getOfferingsAsync(
            String countryCode, PhoneNumberType numberType, AssignmentType assignmentType) {
        return getOfferingsWithResponseAsync(countryCode, numberType, assignmentType)
                .flatMap(
                        (Response<List<CountryOffering>> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * List available offerings for the given country.
     *
     * @param countryCode The ISO 3166-2 country code.
     * @param numberType Filter by numberType.
     * @param assignmentType Filter by assignmentType.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of available offerings.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<CountryOffering>> getOfferingsAsync(
            String countryCode, PhoneNumberType numberType, AssignmentType assignmentType, Context context) {
        return getOfferingsWithResponseAsync(countryCode, numberType, assignmentType, context)
                .flatMap(
                        (Response<List<CountryOffering>> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * List available offerings for the given country.
     *
     * @param countryCode The ISO 3166-2 country code.
     * @param numberType Filter by numberType.
     * @param assignmentType Filter by assignmentType.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of available offerings.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<CountryOffering> getOfferings(
            String countryCode, PhoneNumberType numberType, AssignmentType assignmentType) {
        return getOfferingsAsync(countryCode, numberType, assignmentType).block();
    }

    /**
     * List available offerings for the given country.
     *
     * @param countryCode The ISO 3166-2 country code.
     * @param numberType Filter by numberType.
     * @param assignmentType Filter by assignmentType.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of available offerings.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<CountryOffering> getOfferings(
            String countryCode, PhoneNumberType numberType, AssignmentType assignmentType, Context context) {
        return getOfferingsAsync(countryCode, numberType, assignmentType, context).block();
    }

    /**
     * Search for available phone numbers to purchase.
     *
     * @param countryCode The ISO 3166-2 country code.
     * @param numberType The phone number type.
     * @param assignmentType The phone number's assignment type.
     * @param capabilities The capabilities of a phone number.
     * @param areaCode The desired area code.
     * @param quantity The desired quantity of phone numbers.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PhoneNumberAdministrationsSearchAvailablePhoneNumbersResponse>
            searchAvailablePhoneNumbersWithResponseAsync(
                    String countryCode,
                    PhoneNumberType numberType,
                    AssignmentType assignmentType,
                    Capabilities capabilities,
                    String areaCode,
                    Integer quantity) {
        SearchRequest search = new SearchRequest();
        search.setNumberType(numberType);
        search.setAssignmentType(assignmentType);
        search.setCapabilities(capabilities);
        search.setAreaCode(areaCode);
        search.setQuantity(quantity);
        return FluxUtil.withContext(
                context ->
                        service.searchAvailablePhoneNumbers(
                                this.client.getEndpoint(), countryCode, this.client.getApiVersion(), search, context));
    }

    /**
     * Search for available phone numbers to purchase.
     *
     * @param countryCode The ISO 3166-2 country code.
     * @param numberType The phone number type.
     * @param assignmentType The phone number's assignment type.
     * @param capabilities The capabilities of a phone number.
     * @param areaCode The desired area code.
     * @param quantity The desired quantity of phone numbers.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PhoneNumberAdministrationsSearchAvailablePhoneNumbersResponse>
            searchAvailablePhoneNumbersWithResponseAsync(
                    String countryCode,
                    PhoneNumberType numberType,
                    AssignmentType assignmentType,
                    Capabilities capabilities,
                    String areaCode,
                    Integer quantity,
                    Context context) {
        SearchRequest search = new SearchRequest();
        search.setNumberType(numberType);
        search.setAssignmentType(assignmentType);
        search.setCapabilities(capabilities);
        search.setAreaCode(areaCode);
        search.setQuantity(quantity);
        return service.searchAvailablePhoneNumbers(
                this.client.getEndpoint(), countryCode, this.client.getApiVersion(), search, context);
    }

    /**
     * Search for available phone numbers to purchase.
     *
     * @param countryCode The ISO 3166-2 country code.
     * @param numberType The phone number type.
     * @param assignmentType The phone number's assignment type.
     * @param capabilities The capabilities of a phone number.
     * @param areaCode The desired area code.
     * @param quantity The desired quantity of phone numbers.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> searchAvailablePhoneNumbersAsync(
            String countryCode,
            PhoneNumberType numberType,
            AssignmentType assignmentType,
            Capabilities capabilities,
            String areaCode,
            Integer quantity) {
        return searchAvailablePhoneNumbersWithResponseAsync(
                        countryCode, numberType, assignmentType, capabilities, areaCode, quantity)
                .flatMap((PhoneNumberAdministrationsSearchAvailablePhoneNumbersResponse res) -> Mono.empty());
    }

    /**
     * Search for available phone numbers to purchase.
     *
     * @param countryCode The ISO 3166-2 country code.
     * @param numberType The phone number type.
     * @param assignmentType The phone number's assignment type.
     * @param capabilities The capabilities of a phone number.
     * @param areaCode The desired area code.
     * @param quantity The desired quantity of phone numbers.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> searchAvailablePhoneNumbersAsync(
            String countryCode,
            PhoneNumberType numberType,
            AssignmentType assignmentType,
            Capabilities capabilities,
            String areaCode,
            Integer quantity,
            Context context) {
        return searchAvailablePhoneNumbersWithResponseAsync(
                        countryCode, numberType, assignmentType, capabilities, areaCode, quantity, context)
                .flatMap((PhoneNumberAdministrationsSearchAvailablePhoneNumbersResponse res) -> Mono.empty());
    }

    /**
     * Search for available phone numbers to purchase.
     *
     * @param countryCode The ISO 3166-2 country code.
     * @param numberType The phone number type.
     * @param assignmentType The phone number's assignment type.
     * @param capabilities The capabilities of a phone number.
     * @param areaCode The desired area code.
     * @param quantity The desired quantity of phone numbers.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void searchAvailablePhoneNumbers(
            String countryCode,
            PhoneNumberType numberType,
            AssignmentType assignmentType,
            Capabilities capabilities,
            String areaCode,
            Integer quantity) {
        searchAvailablePhoneNumbersAsync(countryCode, numberType, assignmentType, capabilities, areaCode, quantity)
                .block();
    }

    /**
     * Search for available phone numbers to purchase.
     *
     * @param countryCode The ISO 3166-2 country code.
     * @param numberType The phone number type.
     * @param assignmentType The phone number's assignment type.
     * @param capabilities The capabilities of a phone number.
     * @param areaCode The desired area code.
     * @param quantity The desired quantity of phone numbers.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void searchAvailablePhoneNumbers(
            String countryCode,
            PhoneNumberType numberType,
            AssignmentType assignmentType,
            Capabilities capabilities,
            String areaCode,
            Integer quantity,
            Context context) {
        searchAvailablePhoneNumbersAsync(
                        countryCode, numberType, assignmentType, capabilities, areaCode, quantity, context)
                .block();
    }

    /**
     * Get a search result by its id.
     *
     * @param searchId The search Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a search result by its id.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<SearchResult>> getSearchResultWithResponseAsync(String searchId) {
        return FluxUtil.withContext(
                context ->
                        service.getSearchResult(
                                this.client.getEndpoint(), searchId, this.client.getApiVersion(), context));
    }

    /**
     * Get a search result by its id.
     *
     * @param searchId The search Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a search result by its id.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<SearchResult>> getSearchResultWithResponseAsync(String searchId, Context context) {
        return service.getSearchResult(this.client.getEndpoint(), searchId, this.client.getApiVersion(), context);
    }

    /**
     * Get a search result by its id.
     *
     * @param searchId The search Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a search result by its id.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SearchResult> getSearchResultAsync(String searchId) {
        return getSearchResultWithResponseAsync(searchId)
                .flatMap(
                        (Response<SearchResult> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Get a search result by its id.
     *
     * @param searchId The search Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a search result by its id.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SearchResult> getSearchResultAsync(String searchId, Context context) {
        return getSearchResultWithResponseAsync(searchId, context)
                .flatMap(
                        (Response<SearchResult> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Get a search result by its id.
     *
     * @param searchId The search Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a search result by its id.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SearchResult getSearchResult(String searchId) {
        return getSearchResultAsync(searchId).block();
    }

    /**
     * Get a search result by its id.
     *
     * @param searchId The search Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a search result by its id.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SearchResult getSearchResult(String searchId, Context context) {
        return getSearchResultAsync(searchId, context).block();
    }

    /**
     * Purchase phone numbers.
     *
     * @param searchId The id of the search result to purchase.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PhoneNumberAdministrationsPurchasePhoneNumbersResponse> purchasePhoneNumbersWithResponseAsync(
            String searchId) {
        PurchaseRequest purchaseInternal = null;
        if (searchId != null) {
            purchaseInternal = new PurchaseRequest();
            purchaseInternal.setSearchId(searchId);
        }
        PurchaseRequest purchase = purchaseInternal;
        return FluxUtil.withContext(
                context ->
                        service.purchasePhoneNumbers(
                                this.client.getEndpoint(), this.client.getApiVersion(), purchase, context));
    }

    /**
     * Purchase phone numbers.
     *
     * @param searchId The id of the search result to purchase.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PhoneNumberAdministrationsPurchasePhoneNumbersResponse> purchasePhoneNumbersWithResponseAsync(
            String searchId, Context context) {
        PurchaseRequest purchaseInternal = null;
        if (searchId != null) {
            purchaseInternal = new PurchaseRequest();
            purchaseInternal.setSearchId(searchId);
        }
        PurchaseRequest purchase = purchaseInternal;
        return service.purchasePhoneNumbers(this.client.getEndpoint(), this.client.getApiVersion(), purchase, context);
    }

    /**
     * Purchase phone numbers.
     *
     * @param searchId The id of the search result to purchase.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> purchasePhoneNumbersAsync(String searchId) {
        return purchasePhoneNumbersWithResponseAsync(searchId)
                .flatMap((PhoneNumberAdministrationsPurchasePhoneNumbersResponse res) -> Mono.empty());
    }

    /**
     * Purchase phone numbers.
     *
     * @param searchId The id of the search result to purchase.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> purchasePhoneNumbersAsync(String searchId, Context context) {
        return purchasePhoneNumbersWithResponseAsync(searchId, context)
                .flatMap((PhoneNumberAdministrationsPurchasePhoneNumbersResponse res) -> Mono.empty());
    }

    /**
     * Purchase phone numbers.
     *
     * @param searchId The id of the search result to purchase.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void purchasePhoneNumbers(String searchId) {
        purchasePhoneNumbersAsync(searchId).block();
    }

    /**
     * Purchase phone numbers.
     *
     * @param searchId The id of the search result to purchase.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void purchasePhoneNumbers(String searchId, Context context) {
        purchasePhoneNumbersAsync(searchId, context).block();
    }

    /**
     * Get an operation by its id.
     *
     * @param operationId The operation Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an operation by its id.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Operation>> getOperationWithResponseAsync(String operationId) {
        return FluxUtil.withContext(
                context ->
                        service.getOperation(
                                this.client.getEndpoint(), operationId, this.client.getApiVersion(), context));
    }

    /**
     * Get an operation by its id.
     *
     * @param operationId The operation Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an operation by its id.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Operation>> getOperationWithResponseAsync(String operationId, Context context) {
        return service.getOperation(this.client.getEndpoint(), operationId, this.client.getApiVersion(), context);
    }

    /**
     * Get an operation by its id.
     *
     * @param operationId The operation Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an operation by its id.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Operation> getOperationAsync(String operationId) {
        return getOperationWithResponseAsync(operationId)
                .flatMap(
                        (Response<Operation> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Get an operation by its id.
     *
     * @param operationId The operation Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an operation by its id.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Operation> getOperationAsync(String operationId, Context context) {
        return getOperationWithResponseAsync(operationId, context)
                .flatMap(
                        (Response<Operation> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Get an operation by its id.
     *
     * @param operationId The operation Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an operation by its id.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Operation getOperation(String operationId) {
        return getOperationAsync(operationId).block();
    }

    /**
     * Get an operation by its id.
     *
     * @param operationId The operation Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an operation by its id.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Operation getOperation(String operationId, Context context) {
        return getOperationAsync(operationId, context).block();
    }

    /**
     * Cancels the operation if cancellation is supported for the operation type.
     *
     * @param operationId The operation Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> cancelOperationWithResponseAsync(String operationId) {
        return FluxUtil.withContext(
                context ->
                        service.cancelOperation(
                                this.client.getEndpoint(), operationId, this.client.getApiVersion(), context));
    }

    /**
     * Cancels the operation if cancellation is supported for the operation type.
     *
     * @param operationId The operation Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> cancelOperationWithResponseAsync(String operationId, Context context) {
        return service.cancelOperation(this.client.getEndpoint(), operationId, this.client.getApiVersion(), context);
    }

    /**
     * Cancels the operation if cancellation is supported for the operation type.
     *
     * @param operationId The operation Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> cancelOperationAsync(String operationId) {
        return cancelOperationWithResponseAsync(operationId).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Cancels the operation if cancellation is supported for the operation type.
     *
     * @param operationId The operation Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> cancelOperationAsync(String operationId, Context context) {
        return cancelOperationWithResponseAsync(operationId, context).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Cancels the operation if cancellation is supported for the operation type.
     *
     * @param operationId The operation Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void cancelOperation(String operationId) {
        cancelOperationAsync(operationId).block();
    }

    /**
     * Cancels the operation if cancellation is supported for the operation type.
     *
     * @param operationId The operation Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void cancelOperation(String operationId, Context context) {
        cancelOperationAsync(operationId, context).block();
    }

    /**
     * Lists acquired phone numbers.
     *
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of acquired phone numbers.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<AcquiredPhoneNumbers>> getPhoneNumbersWithResponseAsync() {
        return FluxUtil.withContext(
                context -> service.getPhoneNumbers(this.client.getEndpoint(), this.client.getApiVersion(), context));
    }

    /**
     * Lists acquired phone numbers.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of acquired phone numbers.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<AcquiredPhoneNumbers>> getPhoneNumbersWithResponseAsync(Context context) {
        return service.getPhoneNumbers(this.client.getEndpoint(), this.client.getApiVersion(), context);
    }

    /**
     * Lists acquired phone numbers.
     *
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of acquired phone numbers.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AcquiredPhoneNumbers> getPhoneNumbersAsync() {
        return getPhoneNumbersWithResponseAsync()
                .flatMap(
                        (Response<AcquiredPhoneNumbers> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Lists acquired phone numbers.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of acquired phone numbers.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AcquiredPhoneNumbers> getPhoneNumbersAsync(Context context) {
        return getPhoneNumbersWithResponseAsync(context)
                .flatMap(
                        (Response<AcquiredPhoneNumbers> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Lists acquired phone numbers.
     *
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of acquired phone numbers.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AcquiredPhoneNumbers getPhoneNumbers() {
        return getPhoneNumbersAsync().block();
    }

    /**
     * Lists acquired phone numbers.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of acquired phone numbers.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AcquiredPhoneNumbers getPhoneNumbers(Context context) {
        return getPhoneNumbersAsync(context).block();
    }

    /**
     * Gets information about an acquired phone number.
     *
     * @param phoneNumber The phone number id, this is the phone number in E.164 format without the leading +.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about an acquired phone number.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<AcquiredPhoneNumber>> getPhoneNumberWithResponseAsync(String phoneNumber) {
        return FluxUtil.withContext(
                context ->
                        service.getPhoneNumber(
                                this.client.getEndpoint(), phoneNumber, this.client.getApiVersion(), context));
    }

    /**
     * Gets information about an acquired phone number.
     *
     * @param phoneNumber The phone number id, this is the phone number in E.164 format without the leading +.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about an acquired phone number.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<AcquiredPhoneNumber>> getPhoneNumberWithResponseAsync(String phoneNumber, Context context) {
        return service.getPhoneNumber(this.client.getEndpoint(), phoneNumber, this.client.getApiVersion(), context);
    }

    /**
     * Gets information about an acquired phone number.
     *
     * @param phoneNumber The phone number id, this is the phone number in E.164 format without the leading +.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about an acquired phone number.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AcquiredPhoneNumber> getPhoneNumberAsync(String phoneNumber) {
        return getPhoneNumberWithResponseAsync(phoneNumber)
                .flatMap(
                        (Response<AcquiredPhoneNumber> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Gets information about an acquired phone number.
     *
     * @param phoneNumber The phone number id, this is the phone number in E.164 format without the leading +.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about an acquired phone number.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AcquiredPhoneNumber> getPhoneNumberAsync(String phoneNumber, Context context) {
        return getPhoneNumberWithResponseAsync(phoneNumber, context)
                .flatMap(
                        (Response<AcquiredPhoneNumber> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Gets information about an acquired phone number.
     *
     * @param phoneNumber The phone number id, this is the phone number in E.164 format without the leading +.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about an acquired phone number.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AcquiredPhoneNumber getPhoneNumber(String phoneNumber) {
        return getPhoneNumberAsync(phoneNumber).block();
    }

    /**
     * Gets information about an acquired phone number.
     *
     * @param phoneNumber The phone number id, this is the phone number in E.164 format without the leading +.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about an acquired phone number.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AcquiredPhoneNumber getPhoneNumber(String phoneNumber, Context context) {
        return getPhoneNumberAsync(phoneNumber, context).block();
    }

    /**
     * Update an acquired phone number.
     *
     * @param phoneNumber The phone number id, this is the phone number in E.164 format without the leading +.
     * @param callbackUrl The webhook URL for receiving incoming events.
     * @param applicationId The application id the number has been assigned to.
     * @param capabilities The capabilities of a phone number.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the acquired phone number and its metadata and configuration.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PhoneNumberAdministrationsUpdatePhoneNumberResponse> updatePhoneNumberWithResponseAsync(
            String phoneNumber, String callbackUrl, String applicationId, Capabilities capabilities) {
        AcquiredPhoneNumberUpdate update = new AcquiredPhoneNumberUpdate();
        update.setCallbackUrl(callbackUrl);
        update.setApplicationId(applicationId);
        update.setCapabilities(capabilities);
        return FluxUtil.withContext(
                context ->
                        service.updatePhoneNumber(
                                this.client.getEndpoint(), phoneNumber, this.client.getApiVersion(), update, context));
    }

    /**
     * Update an acquired phone number.
     *
     * @param phoneNumber The phone number id, this is the phone number in E.164 format without the leading +.
     * @param callbackUrl The webhook URL for receiving incoming events.
     * @param applicationId The application id the number has been assigned to.
     * @param capabilities The capabilities of a phone number.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the acquired phone number and its metadata and configuration.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PhoneNumberAdministrationsUpdatePhoneNumberResponse> updatePhoneNumberWithResponseAsync(
            String phoneNumber, String callbackUrl, String applicationId, Capabilities capabilities, Context context) {
        AcquiredPhoneNumberUpdate update = new AcquiredPhoneNumberUpdate();
        update.setCallbackUrl(callbackUrl);
        update.setApplicationId(applicationId);
        update.setCapabilities(capabilities);
        return service.updatePhoneNumber(
                this.client.getEndpoint(), phoneNumber, this.client.getApiVersion(), update, context);
    }

    /**
     * Update an acquired phone number.
     *
     * @param phoneNumber The phone number id, this is the phone number in E.164 format without the leading +.
     * @param callbackUrl The webhook URL for receiving incoming events.
     * @param applicationId The application id the number has been assigned to.
     * @param capabilities The capabilities of a phone number.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the acquired phone number and its metadata and configuration.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AcquiredPhoneNumber> updatePhoneNumberAsync(
            String phoneNumber, String callbackUrl, String applicationId, Capabilities capabilities) {
        return updatePhoneNumberWithResponseAsync(phoneNumber, callbackUrl, applicationId, capabilities)
                .flatMap(
                        (PhoneNumberAdministrationsUpdatePhoneNumberResponse res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Update an acquired phone number.
     *
     * @param phoneNumber The phone number id, this is the phone number in E.164 format without the leading +.
     * @param callbackUrl The webhook URL for receiving incoming events.
     * @param applicationId The application id the number has been assigned to.
     * @param capabilities The capabilities of a phone number.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the acquired phone number and its metadata and configuration.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AcquiredPhoneNumber> updatePhoneNumberAsync(
            String phoneNumber, String callbackUrl, String applicationId, Capabilities capabilities, Context context) {
        return updatePhoneNumberWithResponseAsync(phoneNumber, callbackUrl, applicationId, capabilities, context)
                .flatMap(
                        (PhoneNumberAdministrationsUpdatePhoneNumberResponse res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Update an acquired phone number.
     *
     * @param phoneNumber The phone number id, this is the phone number in E.164 format without the leading +.
     * @param callbackUrl The webhook URL for receiving incoming events.
     * @param applicationId The application id the number has been assigned to.
     * @param capabilities The capabilities of a phone number.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the acquired phone number and its metadata and configuration.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AcquiredPhoneNumber updatePhoneNumber(
            String phoneNumber, String callbackUrl, String applicationId, Capabilities capabilities) {
        return updatePhoneNumberAsync(phoneNumber, callbackUrl, applicationId, capabilities).block();
    }

    /**
     * Update an acquired phone number.
     *
     * @param phoneNumber The phone number id, this is the phone number in E.164 format without the leading +.
     * @param callbackUrl The webhook URL for receiving incoming events.
     * @param applicationId The application id the number has been assigned to.
     * @param capabilities The capabilities of a phone number.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the acquired phone number and its metadata and configuration.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AcquiredPhoneNumber updatePhoneNumber(
            String phoneNumber, String callbackUrl, String applicationId, Capabilities capabilities, Context context) {
        return updatePhoneNumberAsync(phoneNumber, callbackUrl, applicationId, capabilities, context).block();
    }

    /**
     * Releases an acquired phone number.
     *
     * @param phoneNumber The phone number id, this is the phone number in E.164 format without the leading +.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PhoneNumberAdministrationsReleasePhoneNumberResponse> releasePhoneNumberWithResponseAsync(
            String phoneNumber) {
        return FluxUtil.withContext(
                context ->
                        service.releasePhoneNumber(
                                this.client.getEndpoint(), phoneNumber, this.client.getApiVersion(), context));
    }

    /**
     * Releases an acquired phone number.
     *
     * @param phoneNumber The phone number id, this is the phone number in E.164 format without the leading +.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PhoneNumberAdministrationsReleasePhoneNumberResponse> releasePhoneNumberWithResponseAsync(
            String phoneNumber, Context context) {
        return service.releasePhoneNumber(this.client.getEndpoint(), phoneNumber, this.client.getApiVersion(), context);
    }

    /**
     * Releases an acquired phone number.
     *
     * @param phoneNumber The phone number id, this is the phone number in E.164 format without the leading +.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> releasePhoneNumberAsync(String phoneNumber) {
        return releasePhoneNumberWithResponseAsync(phoneNumber)
                .flatMap((PhoneNumberAdministrationsReleasePhoneNumberResponse res) -> Mono.empty());
    }

    /**
     * Releases an acquired phone number.
     *
     * @param phoneNumber The phone number id, this is the phone number in E.164 format without the leading +.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> releasePhoneNumberAsync(String phoneNumber, Context context) {
        return releasePhoneNumberWithResponseAsync(phoneNumber, context)
                .flatMap((PhoneNumberAdministrationsReleasePhoneNumberResponse res) -> Mono.empty());
    }

    /**
     * Releases an acquired phone number.
     *
     * @param phoneNumber The phone number id, this is the phone number in E.164 format without the leading +.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void releasePhoneNumber(String phoneNumber) {
        releasePhoneNumberAsync(phoneNumber).block();
    }

    /**
     * Releases an acquired phone number.
     *
     * @param phoneNumber The phone number id, this is the phone number in E.164 format without the leading +.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void releasePhoneNumber(String phoneNumber, Context context) {
        releasePhoneNumberAsync(phoneNumber, context).block();
    }
}
