// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.communication.administration.implementation;

import com.azure.communication.administration.models.AcquiredPhoneNumber;
import com.azure.communication.administration.models.AcquiredPhoneNumbers;
import com.azure.communication.administration.models.AreaCodes;
import com.azure.communication.administration.models.CreateReservationOptions;
import com.azure.communication.administration.models.CreateReservationResponse;
import com.azure.communication.administration.models.ErrorResponseException;
import com.azure.communication.administration.models.LocationOptionsQueries;
import com.azure.communication.administration.models.LocationOptionsResponse;
import com.azure.communication.administration.models.NumberConfiguration;
import com.azure.communication.administration.models.NumberConfigurationPhoneNumber;
import com.azure.communication.administration.models.NumberConfigurationResponse;
import com.azure.communication.administration.models.PhoneNumberCountries;
import com.azure.communication.administration.models.PhoneNumberCountry;
import com.azure.communication.administration.models.PhoneNumberEntities;
import com.azure.communication.administration.models.PhoneNumberEntity;
import com.azure.communication.administration.models.PhoneNumberRelease;
import com.azure.communication.administration.models.PhoneNumberReservation;
import com.azure.communication.administration.models.PhonePlan;
import com.azure.communication.administration.models.PhonePlanGroup;
import com.azure.communication.administration.models.PhonePlanGroups;
import com.azure.communication.administration.models.PhonePlansResponse;
import com.azure.communication.administration.models.ReleaseRequest;
import com.azure.communication.administration.models.ReleaseResponse;
import com.azure.communication.administration.models.UpdateNumberCapabilitiesRequest;
import com.azure.communication.administration.models.UpdateNumberCapabilitiesResponse;
import com.azure.communication.administration.models.UpdatePhoneNumberCapabilitiesResponse;
import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in PhoneNumberAdministrations. */
public final class PhoneNumberAdministrationsImpl {
    /** The proxy service used to perform REST calls. */
    private final PhoneNumberAdministrationsService service;

    /** The service client containing this operation class. */
    private final PhoneNumberAdminClientImpl client;

    /**
     * Initializes an instance of PhoneNumberAdministrationsImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    PhoneNumberAdministrationsImpl(PhoneNumberAdminClientImpl client) {
        this.service = RestProxy.create(PhoneNumberAdministrationsService.class, client.getHttpPipeline());
        this.client = client;
    }

    /**
     * The interface defining all the services for PhoneNumberAdminClientPhoneNumberAdministrations to be used by the
     * proxy service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "PhoneNumberAdminClie")
    private interface PhoneNumberAdministrationsService {
        @Get("/administration/phonenumbers/phonenumbers")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<AcquiredPhoneNumbers>> getAllPhoneNumbers(
                @HostParam("endpoint") String endpoint,
                @QueryParam("locale") String locale,
                @QueryParam("skip") Integer skip,
                @QueryParam("take") Integer take,
                @QueryParam("api-version") String apiVersion,
                Context context);

        @Post("/administration/phonenumbers/countries/{countryCode}/areacodes")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<AreaCodes>> getAllAreaCodes(
                @HostParam("endpoint") String endpoint,
                @QueryParam("locationType") String locationType,
                @PathParam("countryCode") String countryCode,
                @QueryParam("phonePlanId") String phonePlanId,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") LocationOptionsQueries body,
                Context context);

        @Get("/administration/phonenumbers/capabilities/{capabilitiesUpdateId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<UpdatePhoneNumberCapabilitiesResponse>> getCapabilitiesUpdate(
                @HostParam("endpoint") String endpoint,
                @PathParam("capabilitiesUpdateId") String capabilitiesUpdateId,
                @QueryParam("api-version") String apiVersion,
                Context context);

        @Post("/administration/phonenumbers/capabilities")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<UpdateNumberCapabilitiesResponse>> updateCapabilities(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") UpdateNumberCapabilitiesRequest body,
                Context context);

        @Get("/administration/phonenumbers/countries")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<PhoneNumberCountries>> getAllSupportedCountries(
                @HostParam("endpoint") String endpoint,
                @QueryParam("locale") String locale,
                @QueryParam("skip") Integer skip,
                @QueryParam("take") Integer take,
                @QueryParam("api-version") String apiVersion,
                Context context);

        @Post("/administration/phonenumbers/numberconfiguration")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<NumberConfigurationResponse>> getNumberConfiguration(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") NumberConfigurationPhoneNumber body,
                Context context);

        @Patch("/administration/phonenumbers/numberconfiguration/configure")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<Void>> configureNumber(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") NumberConfiguration body,
                Context context);

        @Patch("/administration/phonenumbers/numberconfiguration/unconfigure")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<Void>> unconfigureNumber(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") NumberConfigurationPhoneNumber body,
                Context context);

        @Get("/administration/phonenumbers/countries/{countryCode}/phoneplangroups")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<PhonePlanGroups>> getPhonePlanGroups(
                @HostParam("endpoint") String endpoint,
                @PathParam("countryCode") String countryCode,
                @QueryParam("locale") String locale,
                @QueryParam("includeRateInformation") Boolean includeRateInformation,
                @QueryParam("skip") Integer skip,
                @QueryParam("take") Integer take,
                @QueryParam("api-version") String apiVersion,
                Context context);

        @Get("/administration/phonenumbers/countries/{countryCode}/phoneplangroups/{phonePlanGroupId}/phoneplans")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<PhonePlansResponse>> getPhonePlans(
                @HostParam("endpoint") String endpoint,
                @PathParam("countryCode") String countryCode,
                @PathParam("phonePlanGroupId") String phonePlanGroupId,
                @QueryParam("locale") String locale,
                @QueryParam("skip") Integer skip,
                @QueryParam("take") Integer take,
                @QueryParam("api-version") String apiVersion,
                Context context);

        @Get(
                "/administration/phonenumbers/countries/{countryCode}/phoneplangroups/{phonePlanGroupId}/phoneplans/{phonePlanId}/locationoptions")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<LocationOptionsResponse>> getPhonePlanLocationOptions(
                @HostParam("endpoint") String endpoint,
                @PathParam("countryCode") String countryCode,
                @PathParam("phonePlanGroupId") String phonePlanGroupId,
                @PathParam("phonePlanId") String phonePlanId,
                @QueryParam("locale") String locale,
                @QueryParam("api-version") String apiVersion,
                Context context);

        @Get("/administration/phonenumbers/releases/{releaseId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<PhoneNumberRelease>> getReleaseById(
                @HostParam("endpoint") String endpoint,
                @PathParam("releaseId") String releaseId,
                @QueryParam("api-version") String apiVersion,
                Context context);

        @Post("/administration/phonenumbers/releases")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<ReleaseResponse>> releasePhoneNumbers(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") ReleaseRequest body,
                Context context);

        @Get("/administration/phonenumbers/releases")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<PhoneNumberEntities>> getAllReleases(
                @HostParam("endpoint") String endpoint,
                @QueryParam("skip") Integer skip,
                @QueryParam("take") Integer take,
                @QueryParam("api-version") String apiVersion,
                Context context);

        @Get("/administration/phonenumbers/searches/{searchId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<PhoneNumberReservation>> getSearchById(
                @HostParam("endpoint") String endpoint,
                @PathParam("searchId") String searchId,
                @QueryParam("api-version") String apiVersion,
                Context context);

        @Post("/administration/phonenumbers/searches")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<CreateReservationResponse>> createSearch(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") CreateReservationOptions body,
                Context context);

        @Get("/administration/phonenumbers/searches")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<PhoneNumberEntities>> getAllSearches(
                @HostParam("endpoint") String endpoint,
                @QueryParam("skip") Integer skip,
                @QueryParam("take") Integer take,
                @QueryParam("api-version") String apiVersion,
                Context context);

        @Post("/administration/phonenumbers/searches/{searchId}/cancel")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<Void>> cancelSearch(
                @HostParam("endpoint") String endpoint,
                @PathParam("searchId") String searchId,
                @QueryParam("api-version") String apiVersion,
                Context context);

        @Post("/administration/phonenumbers/searches/{searchId}/purchase")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<Void>> purchaseSearch(
                @HostParam("endpoint") String endpoint,
                @PathParam("searchId") String searchId,
                @QueryParam("api-version") String apiVersion,
                Context context);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<AcquiredPhoneNumbers>> getAllPhoneNumbersNext(
                @PathParam(value = "nextLink", encoded = true) String nextLink, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<PhoneNumberCountries>> getAllSupportedCountriesNext(
                @PathParam(value = "nextLink", encoded = true) String nextLink, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<PhonePlanGroups>> getPhonePlanGroupsNext(
                @PathParam(value = "nextLink", encoded = true) String nextLink, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<PhonePlansResponse>> getPhonePlansNext(
                @PathParam(value = "nextLink", encoded = true) String nextLink, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<PhoneNumberEntities>> getAllReleasesNext(
                @PathParam(value = "nextLink", encoded = true) String nextLink, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<PhoneNumberEntities>> getAllSearchesNext(
                @PathParam(value = "nextLink", encoded = true) String nextLink, Context context);
    }

    /**
     * Gets the list of the acquired phone numbers.
     *
     * @param locale A language-locale pairing which will be used to localize the names of countries.
     * @param skip An optional parameter for how many entries to skip, for pagination purposes.
     * @param take An optional parameter for how many entries to return, for pagination purposes.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of the acquired phone numbers.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<AcquiredPhoneNumber>> getAllPhoneNumbersSinglePageAsync(
            String locale, Integer skip, Integer take) {
        return FluxUtil.withContext(
                        context ->
                                service.getAllPhoneNumbers(
                                        this.client.getEndpoint(),
                                        locale,
                                        skip,
                                        take,
                                        this.client.getApiVersion(),
                                        context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getPhoneNumbers(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * Gets the list of the acquired phone numbers.
     *
     * @param locale A language-locale pairing which will be used to localize the names of countries.
     * @param skip An optional parameter for how many entries to skip, for pagination purposes.
     * @param take An optional parameter for how many entries to return, for pagination purposes.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of the acquired phone numbers.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<AcquiredPhoneNumber>> getAllPhoneNumbersSinglePageAsync(
            String locale, Integer skip, Integer take, Context context) {
        return service.getAllPhoneNumbers(
                        this.client.getEndpoint(), locale, skip, take, this.client.getApiVersion(), context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getPhoneNumbers(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * Gets the list of the acquired phone numbers.
     *
     * @param locale A language-locale pairing which will be used to localize the names of countries.
     * @param skip An optional parameter for how many entries to skip, for pagination purposes.
     * @param take An optional parameter for how many entries to return, for pagination purposes.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of the acquired phone numbers.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<AcquiredPhoneNumber> getAllPhoneNumbersAsync(String locale, Integer skip, Integer take) {
        return new PagedFlux<>(
                () -> getAllPhoneNumbersSinglePageAsync(locale, skip, take),
                nextLink -> getAllPhoneNumbersNextSinglePageAsync(nextLink));
    }

    /**
     * Gets the list of the acquired phone numbers.
     *
     * @param locale A language-locale pairing which will be used to localize the names of countries.
     * @param skip An optional parameter for how many entries to skip, for pagination purposes.
     * @param take An optional parameter for how many entries to return, for pagination purposes.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of the acquired phone numbers.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<AcquiredPhoneNumber> getAllPhoneNumbersAsync(
            String locale, Integer skip, Integer take, Context context) {
        return new PagedFlux<>(
                () -> getAllPhoneNumbersSinglePageAsync(locale, skip, take, context),
                nextLink -> getAllPhoneNumbersNextSinglePageAsync(nextLink));
    }

    /**
     * Gets the list of the acquired phone numbers.
     *
     * @param locale A language-locale pairing which will be used to localize the names of countries.
     * @param skip An optional parameter for how many entries to skip, for pagination purposes.
     * @param take An optional parameter for how many entries to return, for pagination purposes.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of the acquired phone numbers.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<AcquiredPhoneNumber> getAllPhoneNumbers(String locale, Integer skip, Integer take) {
        return new PagedIterable<>(getAllPhoneNumbersAsync(locale, skip, take));
    }

    /**
     * Gets the list of the acquired phone numbers.
     *
     * @param locale A language-locale pairing which will be used to localize the names of countries.
     * @param skip An optional parameter for how many entries to skip, for pagination purposes.
     * @param take An optional parameter for how many entries to return, for pagination purposes.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of the acquired phone numbers.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<AcquiredPhoneNumber> getAllPhoneNumbers(
            String locale, Integer skip, Integer take, Context context) {
        return new PagedIterable<>(getAllPhoneNumbersAsync(locale, skip, take, context));
    }

    /**
     * Gets a list of the supported area codes.
     *
     * @param locationType The type of location information required by the plan.
     * @param countryCode The ISO 3166-2 country code.
     * @param phonePlanId The plan id from which to search area codes.
     * @param body Represents a list of location option queries, used for fetching area codes.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of the supported area codes.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<AreaCodes>> getAllAreaCodesWithResponseAsync(
            String locationType, String countryCode, String phonePlanId, LocationOptionsQueries body) {
        return FluxUtil.withContext(
                context ->
                        service.getAllAreaCodes(
                                this.client.getEndpoint(),
                                locationType,
                                countryCode,
                                phonePlanId,
                                this.client.getApiVersion(),
                                body,
                                context));
    }

    /**
     * Gets a list of the supported area codes.
     *
     * @param locationType The type of location information required by the plan.
     * @param countryCode The ISO 3166-2 country code.
     * @param phonePlanId The plan id from which to search area codes.
     * @param body Represents a list of location option queries, used for fetching area codes.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of the supported area codes.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<AreaCodes>> getAllAreaCodesWithResponseAsync(
            String locationType, String countryCode, String phonePlanId, LocationOptionsQueries body, Context context) {
        return service.getAllAreaCodes(
                this.client.getEndpoint(),
                locationType,
                countryCode,
                phonePlanId,
                this.client.getApiVersion(),
                body,
                context);
    }

    /**
     * Gets a list of the supported area codes.
     *
     * @param locationType The type of location information required by the plan.
     * @param countryCode The ISO 3166-2 country code.
     * @param phonePlanId The plan id from which to search area codes.
     * @param body Represents a list of location option queries, used for fetching area codes.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of the supported area codes.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AreaCodes> getAllAreaCodesAsync(
            String locationType, String countryCode, String phonePlanId, LocationOptionsQueries body) {
        return getAllAreaCodesWithResponseAsync(locationType, countryCode, phonePlanId, body)
                .flatMap(
                        (Response<AreaCodes> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Gets a list of the supported area codes.
     *
     * @param locationType The type of location information required by the plan.
     * @param countryCode The ISO 3166-2 country code.
     * @param phonePlanId The plan id from which to search area codes.
     * @param body Represents a list of location option queries, used for fetching area codes.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of the supported area codes.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AreaCodes> getAllAreaCodesAsync(
            String locationType, String countryCode, String phonePlanId, LocationOptionsQueries body, Context context) {
        return getAllAreaCodesWithResponseAsync(locationType, countryCode, phonePlanId, body, context)
                .flatMap(
                        (Response<AreaCodes> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Gets a list of the supported area codes.
     *
     * @param locationType The type of location information required by the plan.
     * @param countryCode The ISO 3166-2 country code.
     * @param phonePlanId The plan id from which to search area codes.
     * @param body Represents a list of location option queries, used for fetching area codes.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of the supported area codes.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AreaCodes getAllAreaCodes(
            String locationType, String countryCode, String phonePlanId, LocationOptionsQueries body) {
        return getAllAreaCodesAsync(locationType, countryCode, phonePlanId, body).block();
    }

    /**
     * Gets a list of the supported area codes.
     *
     * @param locationType The type of location information required by the plan.
     * @param countryCode The ISO 3166-2 country code.
     * @param phonePlanId The plan id from which to search area codes.
     * @param body Represents a list of location option queries, used for fetching area codes.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of the supported area codes.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AreaCodes getAllAreaCodes(
            String locationType, String countryCode, String phonePlanId, LocationOptionsQueries body, Context context) {
        return getAllAreaCodesAsync(locationType, countryCode, phonePlanId, body, context).block();
    }

    /**
     * Get capabilities by capabilities update id.
     *
     * @param capabilitiesUpdateId The capabilitiesUpdateId parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return capabilities by capabilities update id.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<UpdatePhoneNumberCapabilitiesResponse>> getCapabilitiesUpdateWithResponseAsync(
            String capabilitiesUpdateId) {
        return FluxUtil.withContext(
                context ->
                        service.getCapabilitiesUpdate(
                                this.client.getEndpoint(), capabilitiesUpdateId, this.client.getApiVersion(), context));
    }

    /**
     * Get capabilities by capabilities update id.
     *
     * @param capabilitiesUpdateId The capabilitiesUpdateId parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return capabilities by capabilities update id.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<UpdatePhoneNumberCapabilitiesResponse>> getCapabilitiesUpdateWithResponseAsync(
            String capabilitiesUpdateId, Context context) {
        return service.getCapabilitiesUpdate(
                this.client.getEndpoint(), capabilitiesUpdateId, this.client.getApiVersion(), context);
    }

    /**
     * Get capabilities by capabilities update id.
     *
     * @param capabilitiesUpdateId The capabilitiesUpdateId parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return capabilities by capabilities update id.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<UpdatePhoneNumberCapabilitiesResponse> getCapabilitiesUpdateAsync(String capabilitiesUpdateId) {
        return getCapabilitiesUpdateWithResponseAsync(capabilitiesUpdateId)
                .flatMap(
                        (Response<UpdatePhoneNumberCapabilitiesResponse> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Get capabilities by capabilities update id.
     *
     * @param capabilitiesUpdateId The capabilitiesUpdateId parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return capabilities by capabilities update id.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<UpdatePhoneNumberCapabilitiesResponse> getCapabilitiesUpdateAsync(
            String capabilitiesUpdateId, Context context) {
        return getCapabilitiesUpdateWithResponseAsync(capabilitiesUpdateId, context)
                .flatMap(
                        (Response<UpdatePhoneNumberCapabilitiesResponse> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Get capabilities by capabilities update id.
     *
     * @param capabilitiesUpdateId The capabilitiesUpdateId parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return capabilities by capabilities update id.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public UpdatePhoneNumberCapabilitiesResponse getCapabilitiesUpdate(String capabilitiesUpdateId) {
        return getCapabilitiesUpdateAsync(capabilitiesUpdateId).block();
    }

    /**
     * Get capabilities by capabilities update id.
     *
     * @param capabilitiesUpdateId The capabilitiesUpdateId parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return capabilities by capabilities update id.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public UpdatePhoneNumberCapabilitiesResponse getCapabilitiesUpdate(String capabilitiesUpdateId, Context context) {
        return getCapabilitiesUpdateAsync(capabilitiesUpdateId, context).block();
    }

    /**
     * Adds or removes phone number capabilities.
     *
     * @param body Represents a numbers capabilities update request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a number capability update response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<UpdateNumberCapabilitiesResponse>> updateCapabilitiesWithResponseAsync(
            UpdateNumberCapabilitiesRequest body) {
        return FluxUtil.withContext(
                context ->
                        service.updateCapabilities(
                                this.client.getEndpoint(), this.client.getApiVersion(), body, context));
    }

    /**
     * Adds or removes phone number capabilities.
     *
     * @param body Represents a numbers capabilities update request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a number capability update response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<UpdateNumberCapabilitiesResponse>> updateCapabilitiesWithResponseAsync(
            UpdateNumberCapabilitiesRequest body, Context context) {
        return service.updateCapabilities(this.client.getEndpoint(), this.client.getApiVersion(), body, context);
    }

    /**
     * Adds or removes phone number capabilities.
     *
     * @param body Represents a numbers capabilities update request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a number capability update response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<UpdateNumberCapabilitiesResponse> updateCapabilitiesAsync(UpdateNumberCapabilitiesRequest body) {
        return updateCapabilitiesWithResponseAsync(body)
                .flatMap(
                        (Response<UpdateNumberCapabilitiesResponse> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Adds or removes phone number capabilities.
     *
     * @param body Represents a numbers capabilities update request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a number capability update response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<UpdateNumberCapabilitiesResponse> updateCapabilitiesAsync(
            UpdateNumberCapabilitiesRequest body, Context context) {
        return updateCapabilitiesWithResponseAsync(body, context)
                .flatMap(
                        (Response<UpdateNumberCapabilitiesResponse> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Adds or removes phone number capabilities.
     *
     * @param body Represents a numbers capabilities update request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a number capability update response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public UpdateNumberCapabilitiesResponse updateCapabilities(UpdateNumberCapabilitiesRequest body) {
        return updateCapabilitiesAsync(body).block();
    }

    /**
     * Adds or removes phone number capabilities.
     *
     * @param body Represents a numbers capabilities update request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a number capability update response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public UpdateNumberCapabilitiesResponse updateCapabilities(UpdateNumberCapabilitiesRequest body, Context context) {
        return updateCapabilitiesAsync(body, context).block();
    }

    /**
     * Gets a list of supported countries.
     *
     * @param locale A language-locale pairing which will be used to localize the names of countries.
     * @param skip An optional parameter for how many entries to skip, for pagination purposes.
     * @param take An optional parameter for how many entries to return, for pagination purposes.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of supported countries.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<PhoneNumberCountry>> getAllSupportedCountriesSinglePageAsync(
            String locale, Integer skip, Integer take) {
        return FluxUtil.withContext(
                        context ->
                                service.getAllSupportedCountries(
                                        this.client.getEndpoint(),
                                        locale,
                                        skip,
                                        take,
                                        this.client.getApiVersion(),
                                        context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getCountries(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * Gets a list of supported countries.
     *
     * @param locale A language-locale pairing which will be used to localize the names of countries.
     * @param skip An optional parameter for how many entries to skip, for pagination purposes.
     * @param take An optional parameter for how many entries to return, for pagination purposes.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of supported countries.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<PhoneNumberCountry>> getAllSupportedCountriesSinglePageAsync(
            String locale, Integer skip, Integer take, Context context) {
        return service.getAllSupportedCountries(
                        this.client.getEndpoint(), locale, skip, take, this.client.getApiVersion(), context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getCountries(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * Gets a list of supported countries.
     *
     * @param locale A language-locale pairing which will be used to localize the names of countries.
     * @param skip An optional parameter for how many entries to skip, for pagination purposes.
     * @param take An optional parameter for how many entries to return, for pagination purposes.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of supported countries.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<PhoneNumberCountry> getAllSupportedCountriesAsync(String locale, Integer skip, Integer take) {
        return new PagedFlux<>(
                () -> getAllSupportedCountriesSinglePageAsync(locale, skip, take),
                nextLink -> getAllSupportedCountriesNextSinglePageAsync(nextLink));
    }

    /**
     * Gets a list of supported countries.
     *
     * @param locale A language-locale pairing which will be used to localize the names of countries.
     * @param skip An optional parameter for how many entries to skip, for pagination purposes.
     * @param take An optional parameter for how many entries to return, for pagination purposes.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of supported countries.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<PhoneNumberCountry> getAllSupportedCountriesAsync(
            String locale, Integer skip, Integer take, Context context) {
        return new PagedFlux<>(
                () -> getAllSupportedCountriesSinglePageAsync(locale, skip, take, context),
                nextLink -> getAllSupportedCountriesNextSinglePageAsync(nextLink));
    }

    /**
     * Gets a list of supported countries.
     *
     * @param locale A language-locale pairing which will be used to localize the names of countries.
     * @param skip An optional parameter for how many entries to skip, for pagination purposes.
     * @param take An optional parameter for how many entries to return, for pagination purposes.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of supported countries.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<PhoneNumberCountry> getAllSupportedCountries(String locale, Integer skip, Integer take) {
        return new PagedIterable<>(getAllSupportedCountriesAsync(locale, skip, take));
    }

    /**
     * Gets a list of supported countries.
     *
     * @param locale A language-locale pairing which will be used to localize the names of countries.
     * @param skip An optional parameter for how many entries to skip, for pagination purposes.
     * @param take An optional parameter for how many entries to return, for pagination purposes.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of supported countries.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<PhoneNumberCountry> getAllSupportedCountries(
            String locale, Integer skip, Integer take, Context context) {
        return new PagedIterable<>(getAllSupportedCountriesAsync(locale, skip, take, context));
    }

    /**
     * Endpoint for getting number configurations.
     *
     * @param body The phone number wrapper representing a number configuration request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return definition for number configuration.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<NumberConfigurationResponse>> getNumberConfigurationWithResponseAsync(
            NumberConfigurationPhoneNumber body) {
        return FluxUtil.withContext(
                context ->
                        service.getNumberConfiguration(
                                this.client.getEndpoint(), this.client.getApiVersion(), body, context));
    }

    /**
     * Endpoint for getting number configurations.
     *
     * @param body The phone number wrapper representing a number configuration request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return definition for number configuration.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<NumberConfigurationResponse>> getNumberConfigurationWithResponseAsync(
            NumberConfigurationPhoneNumber body, Context context) {
        return service.getNumberConfiguration(this.client.getEndpoint(), this.client.getApiVersion(), body, context);
    }

    /**
     * Endpoint for getting number configurations.
     *
     * @param body The phone number wrapper representing a number configuration request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return definition for number configuration.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<NumberConfigurationResponse> getNumberConfigurationAsync(NumberConfigurationPhoneNumber body) {
        return getNumberConfigurationWithResponseAsync(body)
                .flatMap(
                        (Response<NumberConfigurationResponse> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Endpoint for getting number configurations.
     *
     * @param body The phone number wrapper representing a number configuration request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return definition for number configuration.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<NumberConfigurationResponse> getNumberConfigurationAsync(
            NumberConfigurationPhoneNumber body, Context context) {
        return getNumberConfigurationWithResponseAsync(body, context)
                .flatMap(
                        (Response<NumberConfigurationResponse> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Endpoint for getting number configurations.
     *
     * @param body The phone number wrapper representing a number configuration request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return definition for number configuration.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public NumberConfigurationResponse getNumberConfiguration(NumberConfigurationPhoneNumber body) {
        return getNumberConfigurationAsync(body).block();
    }

    /**
     * Endpoint for getting number configurations.
     *
     * @param body The phone number wrapper representing a number configuration request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return definition for number configuration.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public NumberConfigurationResponse getNumberConfiguration(NumberConfigurationPhoneNumber body, Context context) {
        return getNumberConfigurationAsync(body, context).block();
    }

    /**
     * Endpoint for configuring a pstn number.
     *
     * @param body Definition for number configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> configureNumberWithResponseAsync(NumberConfiguration body) {
        return FluxUtil.withContext(
                context ->
                        service.configureNumber(this.client.getEndpoint(), this.client.getApiVersion(), body, context));
    }

    /**
     * Endpoint for configuring a pstn number.
     *
     * @param body Definition for number configuration.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> configureNumberWithResponseAsync(NumberConfiguration body, Context context) {
        return service.configureNumber(this.client.getEndpoint(), this.client.getApiVersion(), body, context);
    }

    /**
     * Endpoint for configuring a pstn number.
     *
     * @param body Definition for number configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> configureNumberAsync(NumberConfiguration body) {
        return configureNumberWithResponseAsync(body).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Endpoint for configuring a pstn number.
     *
     * @param body Definition for number configuration.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> configureNumberAsync(NumberConfiguration body, Context context) {
        return configureNumberWithResponseAsync(body, context).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Endpoint for configuring a pstn number.
     *
     * @param body Definition for number configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void configureNumber(NumberConfiguration body) {
        configureNumberAsync(body).block();
    }

    /**
     * Endpoint for configuring a pstn number.
     *
     * @param body Definition for number configuration.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void configureNumber(NumberConfiguration body, Context context) {
        configureNumberAsync(body, context).block();
    }

    /**
     * Endpoint for unconfiguring a pstn number by removing the configuration.
     *
     * @param body The phone number wrapper representing a number configuration request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> unconfigureNumberWithResponseAsync(NumberConfigurationPhoneNumber body) {
        return FluxUtil.withContext(
                context ->
                        service.unconfigureNumber(
                                this.client.getEndpoint(), this.client.getApiVersion(), body, context));
    }

    /**
     * Endpoint for unconfiguring a pstn number by removing the configuration.
     *
     * @param body The phone number wrapper representing a number configuration request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> unconfigureNumberWithResponseAsync(
            NumberConfigurationPhoneNumber body, Context context) {
        return service.unconfigureNumber(this.client.getEndpoint(), this.client.getApiVersion(), body, context);
    }

    /**
     * Endpoint for unconfiguring a pstn number by removing the configuration.
     *
     * @param body The phone number wrapper representing a number configuration request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> unconfigureNumberAsync(NumberConfigurationPhoneNumber body) {
        return unconfigureNumberWithResponseAsync(body).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Endpoint for unconfiguring a pstn number by removing the configuration.
     *
     * @param body The phone number wrapper representing a number configuration request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> unconfigureNumberAsync(NumberConfigurationPhoneNumber body, Context context) {
        return unconfigureNumberWithResponseAsync(body, context).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Endpoint for unconfiguring a pstn number by removing the configuration.
     *
     * @param body The phone number wrapper representing a number configuration request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void unconfigureNumber(NumberConfigurationPhoneNumber body) {
        unconfigureNumberAsync(body).block();
    }

    /**
     * Endpoint for unconfiguring a pstn number by removing the configuration.
     *
     * @param body The phone number wrapper representing a number configuration request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void unconfigureNumber(NumberConfigurationPhoneNumber body, Context context) {
        unconfigureNumberAsync(body, context).block();
    }

    /**
     * Gets a list of phone plan groups for the given country.
     *
     * @param countryCode The ISO 3166-2 country code.
     * @param locale A language-locale pairing which will be used to localize the names of countries.
     * @param includeRateInformation The includeRateInformation parameter.
     * @param skip An optional parameter for how many entries to skip, for pagination purposes.
     * @param take An optional parameter for how many entries to return, for pagination purposes.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of phone plan groups for the given country.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<PhonePlanGroup>> getPhonePlanGroupsSinglePageAsync(
            String countryCode, String locale, Boolean includeRateInformation, Integer skip, Integer take) {
        return FluxUtil.withContext(
                        context ->
                                service.getPhonePlanGroups(
                                        this.client.getEndpoint(),
                                        countryCode,
                                        locale,
                                        includeRateInformation,
                                        skip,
                                        take,
                                        this.client.getApiVersion(),
                                        context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getPhonePlanGroups(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * Gets a list of phone plan groups for the given country.
     *
     * @param countryCode The ISO 3166-2 country code.
     * @param locale A language-locale pairing which will be used to localize the names of countries.
     * @param includeRateInformation The includeRateInformation parameter.
     * @param skip An optional parameter for how many entries to skip, for pagination purposes.
     * @param take An optional parameter for how many entries to return, for pagination purposes.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of phone plan groups for the given country.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<PhonePlanGroup>> getPhonePlanGroupsSinglePageAsync(
            String countryCode,
            String locale,
            Boolean includeRateInformation,
            Integer skip,
            Integer take,
            Context context) {
        return service.getPhonePlanGroups(
                        this.client.getEndpoint(),
                        countryCode,
                        locale,
                        includeRateInformation,
                        skip,
                        take,
                        this.client.getApiVersion(),
                        context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getPhonePlanGroups(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * Gets a list of phone plan groups for the given country.
     *
     * @param countryCode The ISO 3166-2 country code.
     * @param locale A language-locale pairing which will be used to localize the names of countries.
     * @param includeRateInformation The includeRateInformation parameter.
     * @param skip An optional parameter for how many entries to skip, for pagination purposes.
     * @param take An optional parameter for how many entries to return, for pagination purposes.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of phone plan groups for the given country.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<PhonePlanGroup> getPhonePlanGroupsAsync(
            String countryCode, String locale, Boolean includeRateInformation, Integer skip, Integer take) {
        return new PagedFlux<>(
                () -> getPhonePlanGroupsSinglePageAsync(countryCode, locale, includeRateInformation, skip, take),
                nextLink -> getPhonePlanGroupsNextSinglePageAsync(nextLink));
    }

    /**
     * Gets a list of phone plan groups for the given country.
     *
     * @param countryCode The ISO 3166-2 country code.
     * @param locale A language-locale pairing which will be used to localize the names of countries.
     * @param includeRateInformation The includeRateInformation parameter.
     * @param skip An optional parameter for how many entries to skip, for pagination purposes.
     * @param take An optional parameter for how many entries to return, for pagination purposes.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of phone plan groups for the given country.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<PhonePlanGroup> getPhonePlanGroupsAsync(
            String countryCode,
            String locale,
            Boolean includeRateInformation,
            Integer skip,
            Integer take,
            Context context) {
        return new PagedFlux<>(
                () ->
                        getPhonePlanGroupsSinglePageAsync(
                                countryCode, locale, includeRateInformation, skip, take, context),
                nextLink -> getPhonePlanGroupsNextSinglePageAsync(nextLink));
    }

    /**
     * Gets a list of phone plan groups for the given country.
     *
     * @param countryCode The ISO 3166-2 country code.
     * @param locale A language-locale pairing which will be used to localize the names of countries.
     * @param includeRateInformation The includeRateInformation parameter.
     * @param skip An optional parameter for how many entries to skip, for pagination purposes.
     * @param take An optional parameter for how many entries to return, for pagination purposes.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of phone plan groups for the given country.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<PhonePlanGroup> getPhonePlanGroups(
            String countryCode, String locale, Boolean includeRateInformation, Integer skip, Integer take) {
        return new PagedIterable<>(getPhonePlanGroupsAsync(countryCode, locale, includeRateInformation, skip, take));
    }

    /**
     * Gets a list of phone plan groups for the given country.
     *
     * @param countryCode The ISO 3166-2 country code.
     * @param locale A language-locale pairing which will be used to localize the names of countries.
     * @param includeRateInformation The includeRateInformation parameter.
     * @param skip An optional parameter for how many entries to skip, for pagination purposes.
     * @param take An optional parameter for how many entries to return, for pagination purposes.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of phone plan groups for the given country.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<PhonePlanGroup> getPhonePlanGroups(
            String countryCode,
            String locale,
            Boolean includeRateInformation,
            Integer skip,
            Integer take,
            Context context) {
        return new PagedIterable<>(
                getPhonePlanGroupsAsync(countryCode, locale, includeRateInformation, skip, take, context));
    }

    /**
     * Gets a list of phone plans for a phone plan group.
     *
     * @param countryCode The ISO 3166-2 country code.
     * @param phonePlanGroupId The phonePlanGroupId parameter.
     * @param locale A language-locale pairing which will be used to localize the names of countries.
     * @param skip An optional parameter for how many entries to skip, for pagination purposes.
     * @param take An optional parameter for how many entries to return, for pagination purposes.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of phone plans for a phone plan group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<PhonePlan>> getPhonePlansSinglePageAsync(
            String countryCode, String phonePlanGroupId, String locale, Integer skip, Integer take) {
        return FluxUtil.withContext(
                        context ->
                                service.getPhonePlans(
                                        this.client.getEndpoint(),
                                        countryCode,
                                        phonePlanGroupId,
                                        locale,
                                        skip,
                                        take,
                                        this.client.getApiVersion(),
                                        context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getPhonePlans(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * Gets a list of phone plans for a phone plan group.
     *
     * @param countryCode The ISO 3166-2 country code.
     * @param phonePlanGroupId The phonePlanGroupId parameter.
     * @param locale A language-locale pairing which will be used to localize the names of countries.
     * @param skip An optional parameter for how many entries to skip, for pagination purposes.
     * @param take An optional parameter for how many entries to return, for pagination purposes.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of phone plans for a phone plan group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<PhonePlan>> getPhonePlansSinglePageAsync(
            String countryCode, String phonePlanGroupId, String locale, Integer skip, Integer take, Context context) {
        return service.getPhonePlans(
                        this.client.getEndpoint(),
                        countryCode,
                        phonePlanGroupId,
                        locale,
                        skip,
                        take,
                        this.client.getApiVersion(),
                        context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getPhonePlans(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * Gets a list of phone plans for a phone plan group.
     *
     * @param countryCode The ISO 3166-2 country code.
     * @param phonePlanGroupId The phonePlanGroupId parameter.
     * @param locale A language-locale pairing which will be used to localize the names of countries.
     * @param skip An optional parameter for how many entries to skip, for pagination purposes.
     * @param take An optional parameter for how many entries to return, for pagination purposes.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of phone plans for a phone plan group.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<PhonePlan> getPhonePlansAsync(
            String countryCode, String phonePlanGroupId, String locale, Integer skip, Integer take) {
        return new PagedFlux<>(
                () -> getPhonePlansSinglePageAsync(countryCode, phonePlanGroupId, locale, skip, take),
                nextLink -> getPhonePlansNextSinglePageAsync(nextLink));
    }

    /**
     * Gets a list of phone plans for a phone plan group.
     *
     * @param countryCode The ISO 3166-2 country code.
     * @param phonePlanGroupId The phonePlanGroupId parameter.
     * @param locale A language-locale pairing which will be used to localize the names of countries.
     * @param skip An optional parameter for how many entries to skip, for pagination purposes.
     * @param take An optional parameter for how many entries to return, for pagination purposes.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of phone plans for a phone plan group.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<PhonePlan> getPhonePlansAsync(
            String countryCode, String phonePlanGroupId, String locale, Integer skip, Integer take, Context context) {
        return new PagedFlux<>(
                () -> getPhonePlansSinglePageAsync(countryCode, phonePlanGroupId, locale, skip, take, context),
                nextLink -> getPhonePlansNextSinglePageAsync(nextLink));
    }

    /**
     * Gets a list of phone plans for a phone plan group.
     *
     * @param countryCode The ISO 3166-2 country code.
     * @param phonePlanGroupId The phonePlanGroupId parameter.
     * @param locale A language-locale pairing which will be used to localize the names of countries.
     * @param skip An optional parameter for how many entries to skip, for pagination purposes.
     * @param take An optional parameter for how many entries to return, for pagination purposes.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of phone plans for a phone plan group.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<PhonePlan> getPhonePlans(
            String countryCode, String phonePlanGroupId, String locale, Integer skip, Integer take) {
        return new PagedIterable<>(getPhonePlansAsync(countryCode, phonePlanGroupId, locale, skip, take));
    }

    /**
     * Gets a list of phone plans for a phone plan group.
     *
     * @param countryCode The ISO 3166-2 country code.
     * @param phonePlanGroupId The phonePlanGroupId parameter.
     * @param locale A language-locale pairing which will be used to localize the names of countries.
     * @param skip An optional parameter for how many entries to skip, for pagination purposes.
     * @param take An optional parameter for how many entries to return, for pagination purposes.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of phone plans for a phone plan group.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<PhonePlan> getPhonePlans(
            String countryCode, String phonePlanGroupId, String locale, Integer skip, Integer take, Context context) {
        return new PagedIterable<>(getPhonePlansAsync(countryCode, phonePlanGroupId, locale, skip, take, context));
    }

    /**
     * Gets a list of location options for a phone plan.
     *
     * @param countryCode The ISO 3166-2 country code.
     * @param phonePlanGroupId The phonePlanGroupId parameter.
     * @param phonePlanId The phonePlanId parameter.
     * @param locale A language-locale pairing which will be used to localize the names of countries.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of location options for a phone plan.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<LocationOptionsResponse>> getPhonePlanLocationOptionsWithResponseAsync(
            String countryCode, String phonePlanGroupId, String phonePlanId, String locale) {
        return FluxUtil.withContext(
                context ->
                        service.getPhonePlanLocationOptions(
                                this.client.getEndpoint(),
                                countryCode,
                                phonePlanGroupId,
                                phonePlanId,
                                locale,
                                this.client.getApiVersion(),
                                context));
    }

    /**
     * Gets a list of location options for a phone plan.
     *
     * @param countryCode The ISO 3166-2 country code.
     * @param phonePlanGroupId The phonePlanGroupId parameter.
     * @param phonePlanId The phonePlanId parameter.
     * @param locale A language-locale pairing which will be used to localize the names of countries.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of location options for a phone plan.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<LocationOptionsResponse>> getPhonePlanLocationOptionsWithResponseAsync(
            String countryCode, String phonePlanGroupId, String phonePlanId, String locale, Context context) {
        return service.getPhonePlanLocationOptions(
                this.client.getEndpoint(),
                countryCode,
                phonePlanGroupId,
                phonePlanId,
                locale,
                this.client.getApiVersion(),
                context);
    }

    /**
     * Gets a list of location options for a phone plan.
     *
     * @param countryCode The ISO 3166-2 country code.
     * @param phonePlanGroupId The phonePlanGroupId parameter.
     * @param phonePlanId The phonePlanId parameter.
     * @param locale A language-locale pairing which will be used to localize the names of countries.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of location options for a phone plan.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LocationOptionsResponse> getPhonePlanLocationOptionsAsync(
            String countryCode, String phonePlanGroupId, String phonePlanId, String locale) {
        return getPhonePlanLocationOptionsWithResponseAsync(countryCode, phonePlanGroupId, phonePlanId, locale)
                .flatMap(
                        (Response<LocationOptionsResponse> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Gets a list of location options for a phone plan.
     *
     * @param countryCode The ISO 3166-2 country code.
     * @param phonePlanGroupId The phonePlanGroupId parameter.
     * @param phonePlanId The phonePlanId parameter.
     * @param locale A language-locale pairing which will be used to localize the names of countries.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of location options for a phone plan.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LocationOptionsResponse> getPhonePlanLocationOptionsAsync(
            String countryCode, String phonePlanGroupId, String phonePlanId, String locale, Context context) {
        return getPhonePlanLocationOptionsWithResponseAsync(countryCode, phonePlanGroupId, phonePlanId, locale, context)
                .flatMap(
                        (Response<LocationOptionsResponse> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Gets a list of location options for a phone plan.
     *
     * @param countryCode The ISO 3166-2 country code.
     * @param phonePlanGroupId The phonePlanGroupId parameter.
     * @param phonePlanId The phonePlanId parameter.
     * @param locale A language-locale pairing which will be used to localize the names of countries.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of location options for a phone plan.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public LocationOptionsResponse getPhonePlanLocationOptions(
            String countryCode, String phonePlanGroupId, String phonePlanId, String locale) {
        return getPhonePlanLocationOptionsAsync(countryCode, phonePlanGroupId, phonePlanId, locale).block();
    }

    /**
     * Gets a list of location options for a phone plan.
     *
     * @param countryCode The ISO 3166-2 country code.
     * @param phonePlanGroupId The phonePlanGroupId parameter.
     * @param phonePlanId The phonePlanId parameter.
     * @param locale A language-locale pairing which will be used to localize the names of countries.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of location options for a phone plan.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public LocationOptionsResponse getPhonePlanLocationOptions(
            String countryCode, String phonePlanGroupId, String phonePlanId, String locale, Context context) {
        return getPhonePlanLocationOptionsAsync(countryCode, phonePlanGroupId, phonePlanId, locale, context).block();
    }

    /**
     * Gets a release by a release id.
     *
     * @param releaseId Represents the release id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a release by a release id.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<PhoneNumberRelease>> getReleaseByIdWithResponseAsync(String releaseId) {
        return FluxUtil.withContext(
                context ->
                        service.getReleaseById(
                                this.client.getEndpoint(), releaseId, this.client.getApiVersion(), context));
    }

    /**
     * Gets a release by a release id.
     *
     * @param releaseId Represents the release id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a release by a release id.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<PhoneNumberRelease>> getReleaseByIdWithResponseAsync(String releaseId, Context context) {
        return service.getReleaseById(this.client.getEndpoint(), releaseId, this.client.getApiVersion(), context);
    }

    /**
     * Gets a release by a release id.
     *
     * @param releaseId Represents the release id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a release by a release id.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PhoneNumberRelease> getReleaseByIdAsync(String releaseId) {
        return getReleaseByIdWithResponseAsync(releaseId)
                .flatMap(
                        (Response<PhoneNumberRelease> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Gets a release by a release id.
     *
     * @param releaseId Represents the release id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a release by a release id.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PhoneNumberRelease> getReleaseByIdAsync(String releaseId, Context context) {
        return getReleaseByIdWithResponseAsync(releaseId, context)
                .flatMap(
                        (Response<PhoneNumberRelease> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Gets a release by a release id.
     *
     * @param releaseId Represents the release id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a release by a release id.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PhoneNumberRelease getReleaseById(String releaseId) {
        return getReleaseByIdAsync(releaseId).block();
    }

    /**
     * Gets a release by a release id.
     *
     * @param releaseId Represents the release id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a release by a release id.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PhoneNumberRelease getReleaseById(String releaseId, Context context) {
        return getReleaseByIdAsync(releaseId, context).block();
    }

    /**
     * Creates a release for the given phone numbers.
     *
     * @param body Represents a release request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a release response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ReleaseResponse>> releasePhoneNumbersWithResponseAsync(ReleaseRequest body) {
        return FluxUtil.withContext(
                context ->
                        service.releasePhoneNumbers(
                                this.client.getEndpoint(), this.client.getApiVersion(), body, context));
    }

    /**
     * Creates a release for the given phone numbers.
     *
     * @param body Represents a release request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a release response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ReleaseResponse>> releasePhoneNumbersWithResponseAsync(ReleaseRequest body, Context context) {
        return service.releasePhoneNumbers(this.client.getEndpoint(), this.client.getApiVersion(), body, context);
    }

    /**
     * Creates a release for the given phone numbers.
     *
     * @param body Represents a release request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a release response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ReleaseResponse> releasePhoneNumbersAsync(ReleaseRequest body) {
        return releasePhoneNumbersWithResponseAsync(body)
                .flatMap(
                        (Response<ReleaseResponse> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Creates a release for the given phone numbers.
     *
     * @param body Represents a release request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a release response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ReleaseResponse> releasePhoneNumbersAsync(ReleaseRequest body, Context context) {
        return releasePhoneNumbersWithResponseAsync(body, context)
                .flatMap(
                        (Response<ReleaseResponse> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Creates a release for the given phone numbers.
     *
     * @param body Represents a release request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a release response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ReleaseResponse releasePhoneNumbers(ReleaseRequest body) {
        return releasePhoneNumbersAsync(body).block();
    }

    /**
     * Creates a release for the given phone numbers.
     *
     * @param body Represents a release request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a release response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ReleaseResponse releasePhoneNumbers(ReleaseRequest body, Context context) {
        return releasePhoneNumbersAsync(body, context).block();
    }

    /**
     * Gets a list of all releases.
     *
     * @param skip An optional parameter for how many entries to skip, for pagination purposes.
     * @param take An optional parameter for how many entries to return, for pagination purposes.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all releases.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<PhoneNumberEntity>> getAllReleasesSinglePageAsync(Integer skip, Integer take) {
        return FluxUtil.withContext(
                        context ->
                                service.getAllReleases(
                                        this.client.getEndpoint(), skip, take, this.client.getApiVersion(), context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getEntities(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * Gets a list of all releases.
     *
     * @param skip An optional parameter for how many entries to skip, for pagination purposes.
     * @param take An optional parameter for how many entries to return, for pagination purposes.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all releases.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<PhoneNumberEntity>> getAllReleasesSinglePageAsync(
            Integer skip, Integer take, Context context) {
        return service.getAllReleases(this.client.getEndpoint(), skip, take, this.client.getApiVersion(), context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getEntities(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * Gets a list of all releases.
     *
     * @param skip An optional parameter for how many entries to skip, for pagination purposes.
     * @param take An optional parameter for how many entries to return, for pagination purposes.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all releases.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<PhoneNumberEntity> getAllReleasesAsync(Integer skip, Integer take) {
        return new PagedFlux<>(
                () -> getAllReleasesSinglePageAsync(skip, take),
                nextLink -> getAllReleasesNextSinglePageAsync(nextLink));
    }

    /**
     * Gets a list of all releases.
     *
     * @param skip An optional parameter for how many entries to skip, for pagination purposes.
     * @param take An optional parameter for how many entries to return, for pagination purposes.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all releases.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<PhoneNumberEntity> getAllReleasesAsync(Integer skip, Integer take, Context context) {
        return new PagedFlux<>(
                () -> getAllReleasesSinglePageAsync(skip, take, context),
                nextLink -> getAllReleasesNextSinglePageAsync(nextLink));
    }

    /**
     * Gets a list of all releases.
     *
     * @param skip An optional parameter for how many entries to skip, for pagination purposes.
     * @param take An optional parameter for how many entries to return, for pagination purposes.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all releases.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<PhoneNumberEntity> getAllReleases(Integer skip, Integer take) {
        return new PagedIterable<>(getAllReleasesAsync(skip, take));
    }

    /**
     * Gets a list of all releases.
     *
     * @param skip An optional parameter for how many entries to skip, for pagination purposes.
     * @param take An optional parameter for how many entries to return, for pagination purposes.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all releases.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<PhoneNumberEntity> getAllReleases(Integer skip, Integer take, Context context) {
        return new PagedIterable<>(getAllReleasesAsync(skip, take, context));
    }

    /**
     * Get search by search id.
     *
     * @param searchId The search id to be searched for.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return search by search id.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<PhoneNumberReservation>> getSearchByIdWithResponseAsync(String searchId) {
        return FluxUtil.withContext(
                context ->
                        service.getSearchById(
                                this.client.getEndpoint(), searchId, this.client.getApiVersion(), context));
    }

    /**
     * Get search by search id.
     *
     * @param searchId The search id to be searched for.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return search by search id.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<PhoneNumberReservation>> getSearchByIdWithResponseAsync(String searchId, Context context) {
        return service.getSearchById(this.client.getEndpoint(), searchId, this.client.getApiVersion(), context);
    }

    /**
     * Get search by search id.
     *
     * @param searchId The search id to be searched for.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return search by search id.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PhoneNumberReservation> getSearchByIdAsync(String searchId) {
        return getSearchByIdWithResponseAsync(searchId)
                .flatMap(
                        (Response<PhoneNumberReservation> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Get search by search id.
     *
     * @param searchId The search id to be searched for.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return search by search id.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PhoneNumberReservation> getSearchByIdAsync(String searchId, Context context) {
        return getSearchByIdWithResponseAsync(searchId, context)
                .flatMap(
                        (Response<PhoneNumberReservation> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Get search by search id.
     *
     * @param searchId The search id to be searched for.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return search by search id.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PhoneNumberReservation getSearchById(String searchId) {
        return getSearchByIdAsync(searchId).block();
    }

    /**
     * Get search by search id.
     *
     * @param searchId The search id to be searched for.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return search by search id.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PhoneNumberReservation getSearchById(String searchId, Context context) {
        return getSearchByIdAsync(searchId, context).block();
    }

    /**
     * Creates a phone number search.
     *
     * @param body Represents a search creation option.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a search creation response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<CreateReservationResponse>> createSearchWithResponseAsync(CreateReservationOptions body) {
        return FluxUtil.withContext(
                context -> service.createSearch(this.client.getEndpoint(), this.client.getApiVersion(), body, context));
    }

    /**
     * Creates a phone number search.
     *
     * @param body Represents a search creation option.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a search creation response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<CreateReservationResponse>> createSearchWithResponseAsync(
            CreateReservationOptions body, Context context) {
        return service.createSearch(this.client.getEndpoint(), this.client.getApiVersion(), body, context);
    }

    /**
     * Creates a phone number search.
     *
     * @param body Represents a search creation option.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a search creation response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CreateReservationResponse> createSearchAsync(CreateReservationOptions body) {
        return createSearchWithResponseAsync(body)
                .flatMap(
                        (Response<CreateReservationResponse> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Creates a phone number search.
     *
     * @param body Represents a search creation option.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a search creation response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CreateReservationResponse> createSearchAsync(CreateReservationOptions body, Context context) {
        return createSearchWithResponseAsync(body, context)
                .flatMap(
                        (Response<CreateReservationResponse> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Creates a phone number search.
     *
     * @param body Represents a search creation option.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a search creation response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CreateReservationResponse createSearch(CreateReservationOptions body) {
        return createSearchAsync(body).block();
    }

    /**
     * Creates a phone number search.
     *
     * @param body Represents a search creation option.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a search creation response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CreateReservationResponse createSearch(CreateReservationOptions body, Context context) {
        return createSearchAsync(body, context).block();
    }

    /**
     * Gets a list of all searches.
     *
     * @param skip An optional parameter for how many entries to skip, for pagination purposes.
     * @param take An optional parameter for how many entries to return, for pagination purposes.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all searches.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<PhoneNumberEntity>> getAllSearchesSinglePageAsync(Integer skip, Integer take) {
        return FluxUtil.withContext(
                        context ->
                                service.getAllSearches(
                                        this.client.getEndpoint(), skip, take, this.client.getApiVersion(), context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getEntities(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * Gets a list of all searches.
     *
     * @param skip An optional parameter for how many entries to skip, for pagination purposes.
     * @param take An optional parameter for how many entries to return, for pagination purposes.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all searches.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<PhoneNumberEntity>> getAllSearchesSinglePageAsync(
            Integer skip, Integer take, Context context) {
        return service.getAllSearches(this.client.getEndpoint(), skip, take, this.client.getApiVersion(), context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getEntities(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * Gets a list of all searches.
     *
     * @param skip An optional parameter for how many entries to skip, for pagination purposes.
     * @param take An optional parameter for how many entries to return, for pagination purposes.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all searches.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<PhoneNumberEntity> getAllSearchesAsync(Integer skip, Integer take) {
        return new PagedFlux<>(
                () -> getAllSearchesSinglePageAsync(skip, take),
                nextLink -> getAllSearchesNextSinglePageAsync(nextLink));
    }

    /**
     * Gets a list of all searches.
     *
     * @param skip An optional parameter for how many entries to skip, for pagination purposes.
     * @param take An optional parameter for how many entries to return, for pagination purposes.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all searches.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<PhoneNumberEntity> getAllSearchesAsync(Integer skip, Integer take, Context context) {
        return new PagedFlux<>(
                () -> getAllSearchesSinglePageAsync(skip, take, context),
                nextLink -> getAllSearchesNextSinglePageAsync(nextLink));
    }

    /**
     * Gets a list of all searches.
     *
     * @param skip An optional parameter for how many entries to skip, for pagination purposes.
     * @param take An optional parameter for how many entries to return, for pagination purposes.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all searches.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<PhoneNumberEntity> getAllSearches(Integer skip, Integer take) {
        return new PagedIterable<>(getAllSearchesAsync(skip, take));
    }

    /**
     * Gets a list of all searches.
     *
     * @param skip An optional parameter for how many entries to skip, for pagination purposes.
     * @param take An optional parameter for how many entries to return, for pagination purposes.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all searches.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<PhoneNumberEntity> getAllSearches(Integer skip, Integer take, Context context) {
        return new PagedIterable<>(getAllSearchesAsync(skip, take, context));
    }

    /**
     * Cancels the search. This means existing numbers in the search will be made available.
     *
     * @param searchId The search id to be canceled.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> cancelSearchWithResponseAsync(String searchId) {
        return FluxUtil.withContext(
                context ->
                        service.cancelSearch(
                                this.client.getEndpoint(), searchId, this.client.getApiVersion(), context));
    }

    /**
     * Cancels the search. This means existing numbers in the search will be made available.
     *
     * @param searchId The search id to be canceled.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> cancelSearchWithResponseAsync(String searchId, Context context) {
        return service.cancelSearch(this.client.getEndpoint(), searchId, this.client.getApiVersion(), context);
    }

    /**
     * Cancels the search. This means existing numbers in the search will be made available.
     *
     * @param searchId The search id to be canceled.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> cancelSearchAsync(String searchId) {
        return cancelSearchWithResponseAsync(searchId).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Cancels the search. This means existing numbers in the search will be made available.
     *
     * @param searchId The search id to be canceled.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> cancelSearchAsync(String searchId, Context context) {
        return cancelSearchWithResponseAsync(searchId, context).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Cancels the search. This means existing numbers in the search will be made available.
     *
     * @param searchId The search id to be canceled.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void cancelSearch(String searchId) {
        cancelSearchAsync(searchId).block();
    }

    /**
     * Cancels the search. This means existing numbers in the search will be made available.
     *
     * @param searchId The search id to be canceled.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void cancelSearch(String searchId, Context context) {
        cancelSearchAsync(searchId, context).block();
    }

    /**
     * Purchases the phone number search.
     *
     * @param searchId The search id to be purchased.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> purchaseSearchWithResponseAsync(String searchId) {
        return FluxUtil.withContext(
                context ->
                        service.purchaseSearch(
                                this.client.getEndpoint(), searchId, this.client.getApiVersion(), context));
    }

    /**
     * Purchases the phone number search.
     *
     * @param searchId The search id to be purchased.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> purchaseSearchWithResponseAsync(String searchId, Context context) {
        return service.purchaseSearch(this.client.getEndpoint(), searchId, this.client.getApiVersion(), context);
    }

    /**
     * Purchases the phone number search.
     *
     * @param searchId The search id to be purchased.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> purchaseSearchAsync(String searchId) {
        return purchaseSearchWithResponseAsync(searchId).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Purchases the phone number search.
     *
     * @param searchId The search id to be purchased.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> purchaseSearchAsync(String searchId, Context context) {
        return purchaseSearchWithResponseAsync(searchId, context).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Purchases the phone number search.
     *
     * @param searchId The search id to be purchased.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void purchaseSearch(String searchId) {
        purchaseSearchAsync(searchId).block();
    }

    /**
     * Purchases the phone number search.
     *
     * @param searchId The search id to be purchased.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void purchaseSearch(String searchId, Context context) {
        purchaseSearchAsync(searchId, context).block();
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a wrapper of list of phone numbers.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<AcquiredPhoneNumber>> getAllPhoneNumbersNextSinglePageAsync(String nextLink) {
        return FluxUtil.withContext(context -> service.getAllPhoneNumbersNext(nextLink, context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getPhoneNumbers(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a wrapper of list of phone numbers.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<AcquiredPhoneNumber>> getAllPhoneNumbersNextSinglePageAsync(
            String nextLink, Context context) {
        return service.getAllPhoneNumbersNext(nextLink, context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getPhoneNumbers(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a wrapper around a list of countries.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<PhoneNumberCountry>> getAllSupportedCountriesNextSinglePageAsync(String nextLink) {
        return FluxUtil.withContext(context -> service.getAllSupportedCountriesNext(nextLink, context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getCountries(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a wrapper around a list of countries.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<PhoneNumberCountry>> getAllSupportedCountriesNextSinglePageAsync(
            String nextLink, Context context) {
        return service.getAllSupportedCountriesNext(nextLink, context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getCountries(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a wrapper of list of plan groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<PhonePlanGroup>> getPhonePlanGroupsNextSinglePageAsync(String nextLink) {
        return FluxUtil.withContext(context -> service.getPhonePlanGroupsNext(nextLink, context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getPhonePlanGroups(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a wrapper of list of plan groups.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<PhonePlanGroup>> getPhonePlanGroupsNextSinglePageAsync(String nextLink, Context context) {
        return service.getPhonePlanGroupsNext(nextLink, context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getPhonePlanGroups(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a wrapper around a list of countries.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<PhonePlan>> getPhonePlansNextSinglePageAsync(String nextLink) {
        return FluxUtil.withContext(context -> service.getPhonePlansNext(nextLink, context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getPhonePlans(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a wrapper around a list of countries.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<PhonePlan>> getPhonePlansNextSinglePageAsync(String nextLink, Context context) {
        return service.getPhonePlansNext(nextLink, context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getPhonePlans(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a list of searches or releases, as part of the response when fetching all searches or
     *     releases.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<PhoneNumberEntity>> getAllReleasesNextSinglePageAsync(String nextLink) {
        return FluxUtil.withContext(context -> service.getAllReleasesNext(nextLink, context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getEntities(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a list of searches or releases, as part of the response when fetching all searches or
     *     releases.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<PhoneNumberEntity>> getAllReleasesNextSinglePageAsync(String nextLink, Context context) {
        return service.getAllReleasesNext(nextLink, context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getEntities(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a list of searches or releases, as part of the response when fetching all searches or
     *     releases.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<PhoneNumberEntity>> getAllSearchesNextSinglePageAsync(String nextLink) {
        return FluxUtil.withContext(context -> service.getAllSearchesNext(nextLink, context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getEntities(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a list of searches or releases, as part of the response when fetching all searches or
     *     releases.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<PhoneNumberEntity>> getAllSearchesNextSinglePageAsync(String nextLink, Context context) {
        return service.getAllSearchesNext(nextLink, context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getEntities(),
                                        res.getValue().getNextLink(),
                                        null));
    }
}
