// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.communication.administration.implementation;

import com.azure.communication.administration.models.CommunicationIdentityAccessToken;
import com.azure.communication.administration.models.CommunicationIdentityAccessTokenRequest;
import com.azure.communication.administration.models.CommunicationIdentityAccessTokenResult;
import com.azure.communication.administration.models.CommunicationIdentityCreateRequest;
import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in CommunicationIdentitys. */
public final class CommunicationIdentityImpl {
    /** The proxy service used to perform REST calls. */
    private final CommunicationIdentityService service;

    /** The service client containing this operation class. */
    private final CommunicationIdentityClientImpl client;

    /**
     * Initializes an instance of CommunicationIdentitysImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    CommunicationIdentityImpl(CommunicationIdentityClientImpl client) {
        this.service = RestProxy.create(CommunicationIdentityService.class, client.getHttpPipeline());
        this.client = client;
    }

    /**
     * The interface defining all the services for CommunicationIdentityClientCommunicationIdentity to be used by the
     * proxy service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "CommunicationIdentity")
    private interface CommunicationIdentityService {
        @Post("/identities")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<CommunicationIdentityAccessTokenResult>> createIdentity(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") CommunicationIdentityCreateRequest body,
                Context context);

        @Delete("/identities/{id}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteIdentity(
                @HostParam("endpoint") String endpoint,
                @PathParam("id") String id,
                @QueryParam("api-version") String apiVersion,
                Context context);

        @Post("/identities/{id}/:revokeAccessTokens")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> revokeAccessTokens(
                @HostParam("endpoint") String endpoint,
                @PathParam("id") String id,
                @QueryParam("api-version") String apiVersion,
                Context context);

        @Post("/identities/{id}/:issueAccessToken")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<CommunicationIdentityAccessToken>> issueAccessToken(
                @HostParam("endpoint") String endpoint,
                @PathParam("id") String id,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") CommunicationIdentityAccessTokenRequest body,
                Context context);
    }

    /**
     * Create a new identity.
     *
     * @param body The body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a communication identity with access token.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<CommunicationIdentityAccessTokenResult>> createIdentityWithResponseAsync(
            CommunicationIdentityCreateRequest body) {
        return FluxUtil.withContext(
                context ->
                        service.createIdentity(this.client.getEndpoint(), this.client.getApiVersion(), body, context));
    }

    /**
     * Create a new identity.
     *
     * @param body The body parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a communication identity with access token.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<CommunicationIdentityAccessTokenResult>> createIdentityWithResponseAsync(
            CommunicationIdentityCreateRequest body, Context context) {
        return service.createIdentity(this.client.getEndpoint(), this.client.getApiVersion(), body, context);
    }

    /**
     * Create a new identity.
     *
     * @param body The body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a communication identity with access token.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CommunicationIdentityAccessTokenResult> createIdentityAsync(CommunicationIdentityCreateRequest body) {
        return createIdentityWithResponseAsync(body)
                .flatMap(
                        (Response<CommunicationIdentityAccessTokenResult> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Create a new identity.
     *
     * @param body The body parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a communication identity with access token.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CommunicationIdentityAccessTokenResult> createIdentityAsync(
            CommunicationIdentityCreateRequest body, Context context) {
        return createIdentityWithResponseAsync(body, context)
                .flatMap(
                        (Response<CommunicationIdentityAccessTokenResult> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Create a new identity.
     *
     * @param body The body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a communication identity with access token.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CommunicationIdentityAccessTokenResult createIdentity(CommunicationIdentityCreateRequest body) {
        return createIdentityAsync(body).block();
    }

    /**
     * Create a new identity.
     *
     * @param body The body parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a communication identity with access token.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CommunicationIdentityAccessTokenResult createIdentity(
            CommunicationIdentityCreateRequest body, Context context) {
        return createIdentityAsync(body, context).block();
    }

    /**
     * Delete the identity, revoke all tokens for the identity and delete all associated data.
     *
     * @param id Identifier of the identity to be deleted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteIdentityWithResponseAsync(String id) {
        return FluxUtil.withContext(
                context -> service.deleteIdentity(this.client.getEndpoint(), id, this.client.getApiVersion(), context));
    }

    /**
     * Delete the identity, revoke all tokens for the identity and delete all associated data.
     *
     * @param id Identifier of the identity to be deleted.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteIdentityWithResponseAsync(String id, Context context) {
        return service.deleteIdentity(this.client.getEndpoint(), id, this.client.getApiVersion(), context);
    }

    /**
     * Delete the identity, revoke all tokens for the identity and delete all associated data.
     *
     * @param id Identifier of the identity to be deleted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteIdentityAsync(String id) {
        return deleteIdentityWithResponseAsync(id).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Delete the identity, revoke all tokens for the identity and delete all associated data.
     *
     * @param id Identifier of the identity to be deleted.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteIdentityAsync(String id, Context context) {
        return deleteIdentityWithResponseAsync(id, context).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Delete the identity, revoke all tokens for the identity and delete all associated data.
     *
     * @param id Identifier of the identity to be deleted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteIdentity(String id) {
        deleteIdentityAsync(id).block();
    }

    /**
     * Delete the identity, revoke all tokens for the identity and delete all associated data.
     *
     * @param id Identifier of the identity to be deleted.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteIdentity(String id, Context context) {
        deleteIdentityAsync(id, context).block();
    }

    /**
     * Revoke all access tokens for the specific identity.
     *
     * @param id Identifier of the identity.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> revokeAccessTokensWithResponseAsync(String id) {
        return FluxUtil.withContext(
                context ->
                        service.revokeAccessTokens(
                                this.client.getEndpoint(), id, this.client.getApiVersion(), context));
    }

    /**
     * Revoke all access tokens for the specific identity.
     *
     * @param id Identifier of the identity.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> revokeAccessTokensWithResponseAsync(String id, Context context) {
        return service.revokeAccessTokens(this.client.getEndpoint(), id, this.client.getApiVersion(), context);
    }

    /**
     * Revoke all access tokens for the specific identity.
     *
     * @param id Identifier of the identity.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> revokeAccessTokensAsync(String id) {
        return revokeAccessTokensWithResponseAsync(id).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Revoke all access tokens for the specific identity.
     *
     * @param id Identifier of the identity.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> revokeAccessTokensAsync(String id, Context context) {
        return revokeAccessTokensWithResponseAsync(id, context).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Revoke all access tokens for the specific identity.
     *
     * @param id Identifier of the identity.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void revokeAccessTokens(String id) {
        revokeAccessTokensAsync(id).block();
    }

    /**
     * Revoke all access tokens for the specific identity.
     *
     * @param id Identifier of the identity.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void revokeAccessTokens(String id, Context context) {
        revokeAccessTokensAsync(id, context).block();
    }

    /**
     * Issue a new token for an identity.
     *
     * @param id Identifier of the identity to issue token for.
     * @param body Requesting scopes for the new token.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an access token.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<CommunicationIdentityAccessToken>> issueAccessTokenWithResponseAsync(
            String id, CommunicationIdentityAccessTokenRequest body) {
        return FluxUtil.withContext(
                context ->
                        service.issueAccessToken(
                                this.client.getEndpoint(), id, this.client.getApiVersion(), body, context));
    }

    /**
     * Issue a new token for an identity.
     *
     * @param id Identifier of the identity to issue token for.
     * @param body Requesting scopes for the new token.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an access token.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<CommunicationIdentityAccessToken>> issueAccessTokenWithResponseAsync(
            String id, CommunicationIdentityAccessTokenRequest body, Context context) {
        return service.issueAccessToken(this.client.getEndpoint(), id, this.client.getApiVersion(), body, context);
    }

    /**
     * Issue a new token for an identity.
     *
     * @param id Identifier of the identity to issue token for.
     * @param body Requesting scopes for the new token.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an access token.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CommunicationIdentityAccessToken> issueAccessTokenAsync(
            String id, CommunicationIdentityAccessTokenRequest body) {
        return issueAccessTokenWithResponseAsync(id, body)
                .flatMap(
                        (Response<CommunicationIdentityAccessToken> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Issue a new token for an identity.
     *
     * @param id Identifier of the identity to issue token for.
     * @param body Requesting scopes for the new token.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an access token.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CommunicationIdentityAccessToken> issueAccessTokenAsync(
            String id, CommunicationIdentityAccessTokenRequest body, Context context) {
        return issueAccessTokenWithResponseAsync(id, body, context)
                .flatMap(
                        (Response<CommunicationIdentityAccessToken> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Issue a new token for an identity.
     *
     * @param id Identifier of the identity to issue token for.
     * @param body Requesting scopes for the new token.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an access token.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CommunicationIdentityAccessToken issueAccessToken(String id, CommunicationIdentityAccessTokenRequest body) {
        return issueAccessTokenAsync(id, body).block();
    }

    /**
     * Issue a new token for an identity.
     *
     * @param id Identifier of the identity to issue token for.
     * @param body Requesting scopes for the new token.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an access token.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CommunicationIdentityAccessToken issueAccessToken(
            String id, CommunicationIdentityAccessTokenRequest body, Context context) {
        return issueAccessTokenAsync(id, body, context).block();
    }
}
