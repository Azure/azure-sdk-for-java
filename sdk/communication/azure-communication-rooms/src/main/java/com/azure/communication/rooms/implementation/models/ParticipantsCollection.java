// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.communication.rooms.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A collection of participants in a room.
 */
@Fluent
public final class ParticipantsCollection implements JsonSerializable<ParticipantsCollection> {
    /*
     * A collection of participants.
     */
    private List<RoomParticipant> value;

    /*
     * If there are more participants that can be retrieved, the next link will be populated.
     */
    private String nextLink;

    /**
     * Creates an instance of ParticipantsCollection class.
     */
    public ParticipantsCollection() {
    }

    /**
     * Get the value property: A collection of participants.
     * 
     * @return the value value.
     */
    public List<RoomParticipant> getValue() {
        return this.value;
    }

    /**
     * Set the value property: A collection of participants.
     * 
     * @param value the value value to set.
     * @return the ParticipantsCollection object itself.
     */
    public ParticipantsCollection setValue(List<RoomParticipant> value) {
        this.value = value;
        return this;
    }

    /**
     * Get the nextLink property: If there are more participants that can be retrieved, the next link will be
     * populated.
     * 
     * @return the nextLink value.
     */
    public String getNextLink() {
        return this.nextLink;
    }

    /**
     * Set the nextLink property: If there are more participants that can be retrieved, the next link will be
     * populated.
     * 
     * @param nextLink the nextLink value to set.
     * @return the ParticipantsCollection object itself.
     */
    public ParticipantsCollection setNextLink(String nextLink) {
        this.nextLink = nextLink;
        return this;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("value", this.value, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("nextLink", this.nextLink);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ParticipantsCollection from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ParticipantsCollection if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ParticipantsCollection.
     */
    public static ParticipantsCollection fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ParticipantsCollection deserializedParticipantsCollection = new ParticipantsCollection();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("value".equals(fieldName)) {
                    List<RoomParticipant> value = reader.readArray(reader1 -> RoomParticipant.fromJson(reader1));
                    deserializedParticipantsCollection.value = value;
                } else if ("nextLink".equals(fieldName)) {
                    deserializedParticipantsCollection.nextLink = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedParticipantsCollection;
        });
    }
}
