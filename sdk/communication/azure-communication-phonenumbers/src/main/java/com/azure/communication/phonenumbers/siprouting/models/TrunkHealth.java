// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.communication.phonenumbers.siprouting.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Represents health state of a SIP trunk for routing calls.
 */
@Fluent
public final class TrunkHealth implements JsonSerializable<TrunkHealth> {
    /*
     * The status of the TLS connections of the Trunk.
     */
    private TlsHealth tlsHealth;

    /*
     * The status of SIP OPTIONS message sent by Trunk.
     */
    private PingHealth pingHealth;

    /*
     * The overall health status of Trunk.
     */
    private OverallHealth overallHealth;

    /**
     * Creates an instance of TrunkHealth class.
     */
    public TrunkHealth() {
    }

    /**
     * Get the tls property: The status of the TLS connections of the Trunk.
     * 
     * @return the tls value.
     */
    public TlsHealth getTlsHealth() {
        return this.tlsHealth;
    }

    /**
     * Set the tls property: The status of the TLS connections of the Trunk.
     * 
     * @param tls the tls value to set.
     * @return the TrunkHealth object itself.
     */
    public TrunkHealth setTlsHealth(TlsHealth tls) {
        this.tlsHealth = tls;
        return this;
    }

    /**
     * Get the ping property: The status of SIP OPTIONS message sent by Trunk.
     * 
     * @return the ping value.
     */
    public PingHealth getPingHealth() {
        return this.pingHealth;
    }

    /**
     * Set the ping property: The status of SIP OPTIONS message sent by Trunk.
     * 
     * @param ping the ping value to set.
     * @return the TrunkHealth object itself.
     */
    public TrunkHealth setPingHealth(PingHealth ping) {
        this.pingHealth = ping;
        return this;
    }

    /**
     * Get the overall property: The overall health status of Trunk.
     * 
     * @return the overall value.
     */
    public OverallHealth getOverallHealth() {
        return this.overallHealth;
    }

    /**
     * Set the overall property: The overall health status of Trunk.
     * 
     * @param overall the overall value to set.
     * @return the TrunkHealth object itself.
     */
    public TrunkHealth setOverallHealth(OverallHealth overall) {
        this.overallHealth = overall;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("tls", this.tlsHealth);
        jsonWriter.writeJsonField("ping", this.pingHealth);
        jsonWriter.writeJsonField("overall", this.overallHealth);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TrunkHealth from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TrunkHealth if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TrunkHealth.
     */
    public static TrunkHealth fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TrunkHealth deserializedTrunkHealth = new TrunkHealth();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("tls".equals(fieldName)) {
                    deserializedTrunkHealth.tlsHealth = TlsHealth.fromJson(reader);
                } else if ("ping".equals(fieldName)) {
                    deserializedTrunkHealth.pingHealth = PingHealth.fromJson(reader);
                } else if ("overall".equals(fieldName)) {
                    deserializedTrunkHealth.overallHealth = OverallHealth.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTrunkHealth;
        });
    }
}
