// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.communication.phonenumbers.siprouting.models;

import java.io.IOException;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;

/**
 * The overall health status of Trunk.
 */
@Fluent
public final class OverallHealth implements JsonSerializable<OverallHealth> {
    /*
     * The overall health status of Trunk.
     */
    private OverallHealthStatus status;

    /*
     * The reason overall status of Trunk is inactive.
     */
    private HealthStatusReason reason;

    /**
     * Creates an instance of OverallHealth class.
     */
    public OverallHealth() {
    }

    /**
     * Get the status property: The overall health status of Trunk.
     * 
     * @return the status value.
     */
    public OverallHealthStatus getStatus() {
        return this.status;
    }

    /**
     * Set the status property: The overall health status of Trunk.
     * 
     * @param status the status value to set.
     * @return the OverallHealth object itself.
     */
    public OverallHealth setStatus(OverallHealthStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Get the reason property: The reason overall status of Trunk is inactive.
     * 
     * @return the reason value.
     */
    public HealthStatusReason getReason() {
        return this.reason;
    }

    /**
     * Set the reason property: The reason overall status of Trunk is inactive.
     * 
     * @param reason the reason value to set.
     * @return the OverallHealth object itself.
     */
    public OverallHealth setReason(HealthStatusReason reason) {
        this.reason = reason;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeStringField("reason", this.reason == null ? null : this.reason.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OverallHealth from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OverallHealth if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the OverallHealth.
     */
    public static OverallHealth fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OverallHealth deserializedOverallHealth = new OverallHealth();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("status".equals(fieldName)) {
                    deserializedOverallHealth.status = OverallHealthStatus.fromString(reader.getString());
                } else if ("reason".equals(fieldName)) {
                    deserializedOverallHealth.reason = HealthStatusReason.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOverallHealth;
        });
    }
}
