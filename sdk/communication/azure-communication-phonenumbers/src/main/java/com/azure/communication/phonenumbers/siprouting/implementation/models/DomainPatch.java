// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.communication.phonenumbers.siprouting.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/** Represents Domain that will be used. Map key is domain. */
@Fluent
public final class DomainPatch implements JsonSerializable<DomainPatch> {
    /*
     * Enabled flag
     */
    private Boolean enabled;

    /** Creates an instance of DomainPatch class. */
    public DomainPatch() {
    }

    /**
     * Get the enabled property: Enabled flag.
     *
     * @return the enabled value.
     */
    public Boolean isEnabled() {
        return this.enabled;
    }

    /**
     * Set the enabled property: Enabled flag.
     *
     * @param enabled the enabled value to set.
     * @return the DomainPatch object itself.
     */
    public DomainPatch setEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("enabled", this.enabled);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DomainPatch from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of DomainPatch if the JsonReader was pointing to an instance of it, or null if it was
     *     pointing to JSON null.
     * @throws IOException If an error occurs while reading the DomainPatch.
     */
    public static DomainPatch fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DomainPatch deserializedDomainPatch = new DomainPatch();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("enabled".equals(fieldName)) {
                    deserializedDomainPatch.enabled = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDomainPatch;
        });
    }
}
