// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.communication.phonenumbers.siprouting.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Represents number routing validation details.
 */
@Fluent
public final class RoutesForNumber implements JsonSerializable<RoutesForNumber> {
    /*
     * The list of routes whose number patterns are matched by the target number. The routes are displayed and apply in the same order as in SipConfiguration.
     */
    private List<SipTrunkRoute> matchingRoutes;

    /**
     * Creates an instance of RoutesForNumber class.
     */
    public RoutesForNumber() {
    }

    /**
     * Get the matchingRoutes property: The list of routes whose number patterns are matched by the target number. The
     * routes are displayed and apply in the same order as in SipConfiguration.
     * 
     * @return the matchingRoutes value.
     */
    public List<SipTrunkRoute> getMatchingRoutes() {
        return this.matchingRoutes;
    }

    /**
     * Set the matchingRoutes property: The list of routes whose number patterns are matched by the target number. The
     * routes are displayed and apply in the same order as in SipConfiguration.
     * 
     * @param matchingRoutes the matchingRoutes value to set.
     * @return the RoutesForNumber object itself.
     */
    public RoutesForNumber setMatchingRoutes(List<SipTrunkRoute> matchingRoutes) {
        this.matchingRoutes = matchingRoutes;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("matchingRoutes", this.matchingRoutes,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RoutesForNumber from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RoutesForNumber if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the RoutesForNumber.
     */
    public static RoutesForNumber fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RoutesForNumber deserializedRoutesForNumber = new RoutesForNumber();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("matchingRoutes".equals(fieldName)) {
                    List<SipTrunkRoute> matchingRoutes = reader.readArray(reader1 -> SipTrunkRoute.fromJson(reader1));
                    deserializedRoutesForNumber.matchingRoutes = matchingRoutes;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRoutesForNumber;
        });
    }
}
