// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.communication.phonenumbers.implementation.models;

import com.azure.communication.phonenumbers.models.BillingFrequency;
import com.azure.communication.phonenumbers.models.PhoneNumberCost;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The incurred cost for this phone number.
 */
@Immutable
public final class AvailablePhoneNumberCost extends PhoneNumberCost {
    /**
     * Creates an instance of AvailablePhoneNumberCost class.
     */
    public AvailablePhoneNumberCost() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AvailablePhoneNumberCost from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AvailablePhoneNumberCost if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AvailablePhoneNumberCost.
     */
    public static AvailablePhoneNumberCost fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AvailablePhoneNumberCost deserializedAvailablePhoneNumberCost = new AvailablePhoneNumberCost();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("amount".equals(fieldName)) {
                    deserializedAvailablePhoneNumberCost.setAmount(reader.getDouble());
                } else if ("currencyCode".equals(fieldName)) {
                    deserializedAvailablePhoneNumberCost.setCurrencyCode(reader.getString());
                } else if ("billingFrequency".equals(fieldName)) {
                    deserializedAvailablePhoneNumberCost
                        .setBillingFrequency(BillingFrequency.fromString(reader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAvailablePhoneNumberCost;
        });
    }
}
