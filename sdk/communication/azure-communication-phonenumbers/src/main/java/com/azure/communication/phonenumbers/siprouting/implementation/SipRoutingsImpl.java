// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.communication.phonenumbers.siprouting.implementation;

import com.azure.communication.phonenumbers.siprouting.implementation.models.CommunicationErrorResponseException;
import com.azure.communication.phonenumbers.siprouting.implementation.models.ExpandEnum;
import com.azure.communication.phonenumbers.siprouting.implementation.models.RoutesForNumber;
import com.azure.communication.phonenumbers.siprouting.implementation.models.SipConfiguration;
import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in SipRoutings.
 */
public final class SipRoutingsImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final SipRoutingsService service;

    /**
     * The service client containing this operation class.
     */
    private final SipRoutingAdminClientImpl client;

    /**
     * Initializes an instance of SipRoutingsImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    SipRoutingsImpl(SipRoutingAdminClientImpl client) {
        this.service
            = RestProxy.create(SipRoutingsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for SipRoutingAdminClientSipRoutings to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "SipRoutingAdminClien")
    public interface SipRoutingsService {
        @Get("/sip")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<SipConfiguration>> get(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @QueryParam("expand") ExpandEnum expand,
            @HeaderParam("Accept") String accept, Context context);

        @Patch("/sip")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<SipConfiguration>> update(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/merge-patch+json") SipConfiguration body, @HeaderParam("Accept") String accept,
            Context context);

        @Post("/sip:testRoutesWithNumber")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<RoutesForNumber>> testRoutesWithNumber(@HostParam("endpoint") String endpoint,
            @QueryParam("targetPhoneNumber") String targetPhoneNumber, @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") SipConfiguration sipConfiguration, @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Gets SIP configuration for resource.
     * 
     * @param expand Sip configuration expand. Optional.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return sIP configuration for resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<SipConfiguration>> getWithResponseAsync(ExpandEnum expand) {
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.get(this.client.getEndpoint(), this.client.getApiVersion(), expand, accept, context));
    }

    /**
     * Gets SIP configuration for resource.
     * 
     * @param expand Sip configuration expand. Optional.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return sIP configuration for resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<SipConfiguration>> getWithResponseAsync(ExpandEnum expand, Context context) {
        final String accept = "application/json";
        return service.get(this.client.getEndpoint(), this.client.getApiVersion(), expand, accept, context);
    }

    /**
     * Gets SIP configuration for resource.
     * 
     * @param expand Sip configuration expand. Optional.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return sIP configuration for resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SipConfiguration> getAsync(ExpandEnum expand) {
        return getWithResponseAsync(expand).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets SIP configuration for resource.
     * 
     * @param expand Sip configuration expand. Optional.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return sIP configuration for resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SipConfiguration> getAsync(ExpandEnum expand, Context context) {
        return getWithResponseAsync(expand, context).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets SIP configuration for resource.
     * 
     * @param expand Sip configuration expand. Optional.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return sIP configuration for resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SipConfiguration> getWithResponse(ExpandEnum expand, Context context) {
        return getWithResponseAsync(expand, context).block();
    }

    /**
     * Gets SIP configuration for resource.
     * 
     * @param expand Sip configuration expand. Optional.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return sIP configuration for resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SipConfiguration get(ExpandEnum expand) {
        return getWithResponse(expand, Context.NONE).getValue();
    }

    /**
     * Updates SIP configuration for resource.
     * 
     * @param body Sip configuration update object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a SIP configuration.
     * When a call is being routed the routes are applied in the same order as in the routes list.
     * A route is matched by its number pattern.
     * Call is then directed into route's first available trunk, based on the order in the route's trunks list along
     * with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<SipConfiguration>> updateWithResponseAsync(SipConfiguration body) {
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.update(this.client.getEndpoint(), this.client.getApiVersion(), body, accept, context));
    }

    /**
     * Updates SIP configuration for resource.
     * 
     * @param body Sip configuration update object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a SIP configuration.
     * When a call is being routed the routes are applied in the same order as in the routes list.
     * A route is matched by its number pattern.
     * Call is then directed into route's first available trunk, based on the order in the route's trunks list along
     * with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<SipConfiguration>> updateWithResponseAsync(SipConfiguration body, Context context) {
        final String accept = "application/json";
        return service.update(this.client.getEndpoint(), this.client.getApiVersion(), body, accept, context);
    }

    /**
     * Updates SIP configuration for resource.
     * 
     * @param body Sip configuration update object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a SIP configuration.
     * When a call is being routed the routes are applied in the same order as in the routes list.
     * A route is matched by its number pattern.
     * Call is then directed into route's first available trunk, based on the order in the route's trunks list on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SipConfiguration> updateAsync(SipConfiguration body) {
        return updateWithResponseAsync(body).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Updates SIP configuration for resource.
     * 
     * @param body Sip configuration update object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a SIP configuration.
     * When a call is being routed the routes are applied in the same order as in the routes list.
     * A route is matched by its number pattern.
     * Call is then directed into route's first available trunk, based on the order in the route's trunks list on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SipConfiguration> updateAsync(SipConfiguration body, Context context) {
        return updateWithResponseAsync(body, context).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Updates SIP configuration for resource.
     * 
     * @param body Sip configuration update object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a SIP configuration.
     * When a call is being routed the routes are applied in the same order as in the routes list.
     * A route is matched by its number pattern.
     * Call is then directed into route's first available trunk, based on the order in the route's trunks list along
     * with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SipConfiguration> updateWithResponse(SipConfiguration body, Context context) {
        return updateWithResponseAsync(body, context).block();
    }

    /**
     * Updates SIP configuration for resource.
     * 
     * @param body Sip configuration update object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a SIP configuration.
     * When a call is being routed the routes are applied in the same order as in the routes list.
     * A route is matched by its number pattern.
     * Call is then directed into route's first available trunk, based on the order in the route's trunks list.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SipConfiguration update(SipConfiguration body) {
        return updateWithResponse(body, Context.NONE).getValue();
    }

    /**
     * Gets the list of routes matching the target phone number, ordered by priority.
     * 
     * @param targetPhoneNumber Phone number to test routing patterns against.
     * @param sipConfiguration Sip configuration object to test with targetPhoneNumber.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of routes matching the target phone number, ordered by priority along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<RoutesForNumber>> testRoutesWithNumberWithResponseAsync(String targetPhoneNumber,
        SipConfiguration sipConfiguration) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.testRoutesWithNumber(this.client.getEndpoint(),
            targetPhoneNumber, this.client.getApiVersion(), sipConfiguration, accept, context));
    }

    /**
     * Gets the list of routes matching the target phone number, ordered by priority.
     * 
     * @param targetPhoneNumber Phone number to test routing patterns against.
     * @param sipConfiguration Sip configuration object to test with targetPhoneNumber.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of routes matching the target phone number, ordered by priority along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<RoutesForNumber>> testRoutesWithNumberWithResponseAsync(String targetPhoneNumber,
        SipConfiguration sipConfiguration, Context context) {
        final String accept = "application/json";
        return service.testRoutesWithNumber(this.client.getEndpoint(), targetPhoneNumber, this.client.getApiVersion(),
            sipConfiguration, accept, context);
    }

    /**
     * Gets the list of routes matching the target phone number, ordered by priority.
     * 
     * @param targetPhoneNumber Phone number to test routing patterns against.
     * @param sipConfiguration Sip configuration object to test with targetPhoneNumber.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of routes matching the target phone number, ordered by priority on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RoutesForNumber> testRoutesWithNumberAsync(String targetPhoneNumber,
        SipConfiguration sipConfiguration) {
        return testRoutesWithNumberWithResponseAsync(targetPhoneNumber, sipConfiguration)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets the list of routes matching the target phone number, ordered by priority.
     * 
     * @param targetPhoneNumber Phone number to test routing patterns against.
     * @param sipConfiguration Sip configuration object to test with targetPhoneNumber.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of routes matching the target phone number, ordered by priority on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RoutesForNumber> testRoutesWithNumberAsync(String targetPhoneNumber, SipConfiguration sipConfiguration,
        Context context) {
        return testRoutesWithNumberWithResponseAsync(targetPhoneNumber, sipConfiguration, context)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets the list of routes matching the target phone number, ordered by priority.
     * 
     * @param targetPhoneNumber Phone number to test routing patterns against.
     * @param sipConfiguration Sip configuration object to test with targetPhoneNumber.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of routes matching the target phone number, ordered by priority along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<RoutesForNumber> testRoutesWithNumberWithResponse(String targetPhoneNumber,
        SipConfiguration sipConfiguration, Context context) {
        return testRoutesWithNumberWithResponseAsync(targetPhoneNumber, sipConfiguration, context).block();
    }

    /**
     * Gets the list of routes matching the target phone number, ordered by priority.
     * 
     * @param targetPhoneNumber Phone number to test routing patterns against.
     * @param sipConfiguration Sip configuration object to test with targetPhoneNumber.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of routes matching the target phone number, ordered by priority.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RoutesForNumber testRoutesWithNumber(String targetPhoneNumber, SipConfiguration sipConfiguration) {
        return testRoutesWithNumberWithResponse(targetPhoneNumber, sipConfiguration, Context.NONE).getValue();
    }
}
