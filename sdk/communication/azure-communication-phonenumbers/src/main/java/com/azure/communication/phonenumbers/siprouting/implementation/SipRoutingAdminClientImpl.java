// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.communication.phonenumbers.siprouting.implementation;

import com.azure.communication.phonenumbers.siprouting.implementation.models.CommunicationErrorResponseException;
import com.azure.communication.phonenumbers.siprouting.implementation.models.SipConfiguration;
import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.policy.CookiePolicy;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.serializer.JacksonAdapter;
import com.azure.core.util.serializer.SerializerAdapter;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the SipRoutingAdminClient type. */
public final class SipRoutingAdminClientImpl {
    /** The proxy service used to perform REST calls. */
    private final SipRoutingAdminClientService service;

    /** The communication resource, for example https://resourcename.communication.azure.com. */
    private final String endpoint;

    /**
     * Gets The communication resource, for example https://resourcename.communication.azure.com.
     *
     * @return the endpoint value.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /** Api Version. */
    private final String apiVersion;

    /**
     * Gets Api Version.
     *
     * @return the apiVersion value.
     */
    public String getApiVersion() {
        return this.apiVersion;
    }

    /** The HTTP pipeline to send requests through. */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     *
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /** The serializer to serialize an object into a string. */
    private final SerializerAdapter serializerAdapter;

    /**
     * Gets The serializer to serialize an object into a string.
     *
     * @return the serializerAdapter value.
     */
    public SerializerAdapter getSerializerAdapter() {
        return this.serializerAdapter;
    }

    /**
     * Initializes an instance of SipRoutingAdminClient client.
     *
     * @param endpoint The communication resource, for example https://resourcename.communication.azure.com.
     * @param apiVersion Api Version.
     */
    SipRoutingAdminClientImpl(String endpoint, String apiVersion) {
        this(
                new HttpPipelineBuilder()
                        .policies(new UserAgentPolicy(), new RetryPolicy(), new CookiePolicy())
                        .build(),
                JacksonAdapter.createDefaultSerializerAdapter(),
                endpoint,
                apiVersion);
    }

    /**
     * Initializes an instance of SipRoutingAdminClient client.
     *
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param endpoint The communication resource, for example https://resourcename.communication.azure.com.
     * @param apiVersion Api Version.
     */
    SipRoutingAdminClientImpl(HttpPipeline httpPipeline, String endpoint, String apiVersion) {
        this(httpPipeline, JacksonAdapter.createDefaultSerializerAdapter(), endpoint, apiVersion);
    }

    /**
     * Initializes an instance of SipRoutingAdminClient client.
     *
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param serializerAdapter The serializer to serialize an object into a string.
     * @param endpoint The communication resource, for example https://resourcename.communication.azure.com.
     * @param apiVersion Api Version.
     */
    SipRoutingAdminClientImpl(
            HttpPipeline httpPipeline, SerializerAdapter serializerAdapter, String endpoint, String apiVersion) {
        this.httpPipeline = httpPipeline;
        this.serializerAdapter = serializerAdapter;
        this.endpoint = endpoint;
        this.apiVersion = apiVersion;
        this.service =
                RestProxy.create(SipRoutingAdminClientService.class, this.httpPipeline, this.getSerializerAdapter());
    }

    /**
     * The interface defining all the services for SipRoutingAdminClient to be used by the proxy service to perform REST
     * calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "SipRoutingAdminClien")
    public interface SipRoutingAdminClientService {
        @Get("/sip")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<SipConfiguration>> getSipConfiguration(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                Context context);

        @Patch("/sip")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = CommunicationErrorResponseException.class,
                code = {500, 422, 415})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<SipConfiguration>> patchSipConfiguration(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/merge-patch+json") SipConfiguration body,
                @HeaderParam("Accept") String accept,
                Context context);
    }

    /**
     * Gets SIP configuration for resource.
     *
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return sIP configuration for resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<SipConfiguration>> getSipConfigurationWithResponseAsync() {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context -> service.getSipConfiguration(this.getEndpoint(), this.getApiVersion(), accept, context));
    }

    /**
     * Gets SIP configuration for resource.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return sIP configuration for resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<SipConfiguration>> getSipConfigurationWithResponseAsync(Context context) {
        final String accept = "application/json";
        return service.getSipConfiguration(this.getEndpoint(), this.getApiVersion(), accept, context);
    }

    /**
     * Gets SIP configuration for resource.
     *
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return sIP configuration for resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SipConfiguration> getSipConfigurationAsync() {
        return getSipConfigurationWithResponseAsync().flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets SIP configuration for resource.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return sIP configuration for resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SipConfiguration> getSipConfigurationAsync(Context context) {
        return getSipConfigurationWithResponseAsync(context).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets SIP configuration for resource.
     *
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return sIP configuration for resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SipConfiguration getSipConfiguration() {
        return getSipConfigurationAsync().block();
    }

    /**
     * Gets SIP configuration for resource.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return sIP configuration for resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SipConfiguration> getSipConfigurationWithResponse(Context context) {
        return getSipConfigurationWithResponseAsync(context).block();
    }

    /**
     * Patches SIP configuration for resource.
     *
     * @param body Configuration patch.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 500, 422,
     *     415.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a SIP configuration. When a call is being routed the routes are applied in the same order as
     *     in the routes list. A route is matched by its number pattern. Call is then directed into route's first
     *     available trunk, based on the order in the route's trunks list along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<SipConfiguration>> patchSipConfigurationWithResponseAsync(SipConfiguration body) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.patchSipConfiguration(this.getEndpoint(), this.getApiVersion(), body, accept, context));
    }

    /**
     * Patches SIP configuration for resource.
     *
     * @param body Configuration patch.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 500, 422,
     *     415.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a SIP configuration. When a call is being routed the routes are applied in the same order as
     *     in the routes list. A route is matched by its number pattern. Call is then directed into route's first
     *     available trunk, based on the order in the route's trunks list along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<SipConfiguration>> patchSipConfigurationWithResponseAsync(
            SipConfiguration body, Context context) {
        final String accept = "application/json";
        return service.patchSipConfiguration(this.getEndpoint(), this.getApiVersion(), body, accept, context);
    }

    /**
     * Patches SIP configuration for resource.
     *
     * @param body Configuration patch.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 500, 422,
     *     415.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a SIP configuration. When a call is being routed the routes are applied in the same order as
     *     in the routes list. A route is matched by its number pattern. Call is then directed into route's first
     *     available trunk, based on the order in the route's trunks list on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SipConfiguration> patchSipConfigurationAsync(SipConfiguration body) {
        return patchSipConfigurationWithResponseAsync(body).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Patches SIP configuration for resource.
     *
     * @param body Configuration patch.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 500, 422,
     *     415.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a SIP configuration. When a call is being routed the routes are applied in the same order as
     *     in the routes list. A route is matched by its number pattern. Call is then directed into route's first
     *     available trunk, based on the order in the route's trunks list on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SipConfiguration> patchSipConfigurationAsync(SipConfiguration body, Context context) {
        return patchSipConfigurationWithResponseAsync(body, context).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Patches SIP configuration for resource.
     *
     * @param body Configuration patch.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 500, 422,
     *     415.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a SIP configuration. When a call is being routed the routes are applied in the same order as
     *     in the routes list. A route is matched by its number pattern. Call is then directed into route's first
     *     available trunk, based on the order in the route's trunks list.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SipConfiguration patchSipConfiguration(SipConfiguration body) {
        return patchSipConfigurationAsync(body).block();
    }

    /**
     * Patches SIP configuration for resource.
     *
     * @param body Configuration patch.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 500, 422,
     *     415.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a SIP configuration. When a call is being routed the routes are applied in the same order as
     *     in the routes list. A route is matched by its number pattern. Call is then directed into route's first
     *     available trunk, based on the order in the route's trunks list along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SipConfiguration> patchSipConfigurationWithResponse(SipConfiguration body, Context context) {
        return patchSipConfigurationWithResponseAsync(body, context).block();
    }
}
