// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.communication.phonenumbers.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;

import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Map;
import java.util.UUID;

/**
 * Represents a reservation for phone numbers. A reservation is a temporary hold
 * on phone numbers that can later be
 * purchased. The reservation has a limited lifetime after which the phone
 * numbers are released if not purchased.
 * Reservations older than 1 month are automatically deleted.
 */
@Fluent
public final class PhoneNumbersReservation implements JsonSerializable<PhoneNumbersReservation> {

    /*
     * The id of the reservation.
     */
    private UUID id;

    /*
     * The time at which the reservation will expire. If a reservation is not
     * purchased before this time, all of the reserved phone numbers will be
     * released and made available for others to purchase.
     */
    private OffsetDateTime expiresAt;

    /*
     * A dictionary containing the reservation phone numbers. The key is the ID of
     * the phone number (digits only) and values are AvailablePhoneNumber objects.
     * Not populated when retrieving PhoneNumbersReservation collections.
     */
    private Map<String, AvailablePhoneNumber> phoneNumbers;

    /*
     * Represents the status of the reservation. Possible values include: 'active',
     * 'submitted', 'completed', 'expired'.
     */
    private PhoneNumbersReservationStatus status;

    /**
     * Creates an instance of PhoneNumbersReservation class.
     */
    public PhoneNumbersReservation() {
        this.id = UUID.randomUUID();
        phoneNumbers = new java.util.HashMap<>();
    }

    /**
     * Creates an instance of PhoneNumbersReservation class with given
     * reservationId.
     * 
     * @param reservationId the reservationId that will be assigned to the
     *                      reservation.
     */
    public PhoneNumbersReservation(UUID reservationId) {
        this.id = reservationId;
        this.setPhoneNumbers(new java.util.HashMap<>());
    }

    /**
     * Creates an instance of PhoneNumbersReservation class with given reservationId
     * and expiration time.
     * 
     * @param reservationId the reservationId that will be assigned to the reservation.
     * @param expiresAt the expiration time of the reservation.
     * @param phoneNumbers the phone numbers that are reserved.
     * @param status the status of the reservation.
     */
    public PhoneNumbersReservation(UUID reservationId, OffsetDateTime expiresAt,
        Map<String, AvailablePhoneNumber> phoneNumbers, PhoneNumbersReservationStatus status) {
        this.id = reservationId;
        this.expiresAt = expiresAt;
        this.phoneNumbers = phoneNumbers;
        this.status = status;
    }

    /**
     * Adds a phone number to the reservation.
     * 
     * @param phoneNumber the phoneNumbers to be added.
     */
    public void addPhoneNumber(AvailablePhoneNumber phoneNumber) {
        this.phoneNumbers.put(phoneNumber.getId(), phoneNumber);
    }

    /**
     * Removes a phone number from the reservation.
     * 
     * @param phoneNumberId the phoneNumber to be removed.
     */
    public void removePhoneNumber(String phoneNumberId) {
        this.phoneNumbers.replace(phoneNumberId, null);
        this.setPhoneNumbers(phoneNumbers);
    }

    /**
     * Get the id property: The id of the reservation.
     * 
     * @return the id value.
     */
    public UUID getId() {
        return this.id;
    }

    /**
     * Get the expiresAt property: The time at which the reservation will expire. If
     * a reservation is not purchased
     * before this time, all of the reserved phone numbers will be released and made
     * available for others to purchase.
     * 
     * @return the expiresAt value.
     */
    public OffsetDateTime getExpiresAt() {
        return this.expiresAt;
    }

    /**
     * Get the phoneNumbers property: A dictionary containing the reservation phone
     * numbers. The key is the ID of the
     * phone number (digits only) and values are AvailablePhoneNumber objects. Not
     * populated when retrieving
     * PhoneNumbersReservation collections.
     * 
     * @return the phoneNumbers value.
     */
    public Map<String, AvailablePhoneNumber> getPhoneNumbers() {
        return this.phoneNumbers;
    }

    /**
     * Set the phoneNumbers property: A dictionary containing the reservation phone
     * numbers. The key is the ID of the
     * phone number (digits only) and values are AvailablePhoneNumber objects. Not
     * populated when retrieving
     * PhoneNumbersReservation collections.
     * 
     * @param phoneNumbers the phoneNumbers value to set.
     * @return the PhoneNumbersReservation object itself.
     */
    public PhoneNumbersReservation setPhoneNumbers(Map<String, AvailablePhoneNumber> phoneNumbers) {
        this.phoneNumbers = phoneNumbers;
        return this;
    }

    /**
     * Get the status property: Represents the status of the reservation. Possible
     * values include: 'active',
     * 'submitted', 'completed', 'expired'.
     * 
     * @return the status value.
     */
    public PhoneNumbersReservationStatus getStatus() {
        return this.status;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeMapField("phoneNumbers", this.phoneNumbers, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PhoneNumbersReservation from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PhoneNumbersReservation if the JsonReader was pointing
     *         to an instance of it, or
     *         null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the
     *                     PhoneNumbersReservation.
     */
    public static PhoneNumbersReservation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PhoneNumbersReservation deserializedPhoneNumbersReservation = new PhoneNumbersReservation();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedPhoneNumbersReservation.id
                        = reader.getNullable(nonNullReader -> UUID.fromString(nonNullReader.getString()));
                } else if ("expiresAt".equals(fieldName)) {
                    deserializedPhoneNumbersReservation.expiresAt
                        = reader.getNullable(nonNullReader -> OffsetDateTime.parse(nonNullReader.getString()));
                } else if ("phoneNumbers".equals(fieldName)) {
                    Map<String, AvailablePhoneNumber> phoneNumbers
                        = reader.readMap(reader1 -> AvailablePhoneNumber.fromJson(reader1));
                    deserializedPhoneNumbersReservation.phoneNumbers = phoneNumbers;
                } else if ("status".equals(fieldName)) {
                    deserializedPhoneNumbersReservation.status
                        = PhoneNumbersReservationStatus.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPhoneNumbersReservation;
        });
    }
}
