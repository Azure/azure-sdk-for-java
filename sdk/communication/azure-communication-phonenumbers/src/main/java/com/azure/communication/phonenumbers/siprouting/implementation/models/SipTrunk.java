// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.communication.phonenumbers.siprouting.implementation.models;

import com.azure.communication.phonenumbers.siprouting.models.IpAddressVersion;
import com.azure.communication.phonenumbers.siprouting.models.PrivacyHeader;
import com.azure.communication.phonenumbers.siprouting.models.TrunkHealth;
import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Objects;

/** Represents a SIP trunk for routing calls. See RFC 4904. Can be expanded with additional data. */
@Fluent
public final class SipTrunk implements JsonSerializable<SipTrunk> {
    /*
     * Gets or sets SIP signaling port of the trunk.
     */
    private int sipSignalingPort;

    /*
     * Enabled flag
     */
    private Boolean enabled;

    /*
     * Represents health state of a SIP trunk for routing calls.
     */
    private TrunkHealth health;

    /*
     * When enabled, removes Azure Communication Services from the signaling path on call transfer and sets the SIP
     * Refer-To header to the trunk's FQDN. By default false.
     */
    private Boolean directTransfer;

    /*
     * SIP Privacy header. Default value is id.
     */
    private PrivacyHeader privacyHeader;

    /*
     * IP address version used by the trunk. Default value is ipv4.
     */
    private IpAddressVersion ipAddressVersion;

    /** Creates an instance of SipTrunk class. */
    public SipTrunk() {
    }

    /**
     * Get the sipSignalingPort property: Gets or sets SIP signaling port of the trunk.
     *
     * @return the sipSignalingPort value.
     */
    public int getSipSignalingPort() {
        return this.sipSignalingPort;
    }

    /**
     * Set the sipSignalingPort property: Gets or sets SIP signaling port of the trunk.
     *
     * @param sipSignalingPort the sipSignalingPort value to set.
     * @return the SipTrunk object itself.
     */
    public SipTrunk setSipSignalingPort(int sipSignalingPort) {
        this.sipSignalingPort = sipSignalingPort;
        return this;
    }

    /**
     * Get the enabled property: Enabled flag.
     *
     * @return the enabled value.
     */
    public Boolean isEnabled() {
        return this.enabled;
    }

    /**
     * Set the enabled property: Enabled flag.
     *
     * @param enabled the enabled value to set.
     * @return the SipTrunk object itself.
     */
    public SipTrunk setEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
    }

    /**
     * Get the health property: Represents health state of a SIP trunk for routing calls.
     *
     * @return the health value.
     */
    public TrunkHealth getHealth() {
        return this.health;
    }

    /**
     * Get the directTransfer property: When enabled, removes Azure Communication Services from the signaling path on
     * call transfer and sets the SIP Refer-To header to the trunk's FQDN. By default false.
     *
     * @return the directTransfer value.
     */
    public Boolean isDirectTransfer() {
        return this.directTransfer;
    }

    /**
     * Set the directTransfer property: When enabled, removes Azure Communication Services from the signaling path on
     * call transfer and sets the SIP Refer-To header to the trunk's FQDN. By default false.
     *
     * @param directTransfer the directTransfer value to set.
     * @return the SipTrunk object itself.
     */
    public SipTrunk setDirectTransfer(Boolean directTransfer) {
        this.directTransfer = directTransfer;
        return this;
    }

    /**
     * Get the privacyHeader property: SIP Privacy header. Default value is id.
     *
     * @return the privacyHeader value.
     */
    public PrivacyHeader getPrivacyHeader() {
        return this.privacyHeader;
    }

    /**
     * Set the privacyHeader property: SIP Privacy header. Default value is id.
     *
     * @param privacyHeader the privacyHeader value to set.
     * @return the SipTrunk object itself.
     */
    public SipTrunk setPrivacyHeader(PrivacyHeader privacyHeader) {
        this.privacyHeader = privacyHeader;
        return this;
    }

    /**
     * Get the ipAddressVersion property: IP address version used by the trunk. Default value is ipv4.
     *
     * @return the ipAddressVersion value.
     */
    public IpAddressVersion getIpAddressVersion() {
        return this.ipAddressVersion;
    }

    /**
     * Set the ipAddressVersion property: IP address version used by the trunk. Default value is ipv4.
     *
     * @param ipAddressVersion the ipAddressVersion value to set.
     * @return the SipTrunk object itself.
     */
    public SipTrunk setIpAddressVersion(IpAddressVersion ipAddressVersion) {
        this.ipAddressVersion = ipAddressVersion;
        return this;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("sipSignalingPort", this.sipSignalingPort);
        jsonWriter.writeBooleanField("enabled", this.enabled);
        jsonWriter.writeJsonField("health", this.health);
        jsonWriter.writeBooleanField("directTransfer", this.directTransfer);
        jsonWriter.writeStringField("privacyHeader", Objects.toString(this.privacyHeader, null));
        jsonWriter.writeStringField("ipAddressVersion", Objects.toString(this.ipAddressVersion, null));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SipTrunk from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of SipTrunk if the JsonReader was pointing to an instance of it, or null if it was pointing
     *     to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SipTrunk.
     */
    public static SipTrunk fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SipTrunk deserializedSipTrunk = new SipTrunk();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sipSignalingPort".equals(fieldName)) {
                    deserializedSipTrunk.sipSignalingPort = reader.getInt();
                } else if ("enabled".equals(fieldName)) {
                    deserializedSipTrunk.enabled = reader.getNullable(JsonReader::getBoolean);
                } else if ("health".equals(fieldName)) {
                    deserializedSipTrunk.health = TrunkHealth.fromJson(reader);
                } else if ("directTransfer".equals(fieldName)) {
                    deserializedSipTrunk.directTransfer = reader.getNullable(JsonReader::getBoolean);
                } else if ("privacyHeader".equals(fieldName)) {
                    deserializedSipTrunk.privacyHeader = PrivacyHeader.fromString(reader.getString());
                } else if ("ipAddressVersion".equals(fieldName)) {
                    deserializedSipTrunk.ipAddressVersion = IpAddressVersion.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSipTrunk;
        });
    }
}
