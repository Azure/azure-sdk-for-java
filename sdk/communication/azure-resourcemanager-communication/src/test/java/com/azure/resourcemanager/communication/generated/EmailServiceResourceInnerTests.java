// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.communication.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.communication.fluent.models.EmailServiceResourceInner;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class EmailServiceResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        EmailServiceResourceInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"provisioningState\":\"Updating\",\"dataLocation\":\"igdtopbob\"},\"location\":\"ghmewuam\",\"tags\":{\"t\":\"rzayv\",\"ln\":\"gvdfgiotkftutq\",\"qmi\":\"xlefgugnxkrx\",\"abhjybi\":\"tthzrvqd\"},\"id\":\"ehoqfbowskan\",\"name\":\"ktzlcuiywg\",\"type\":\"ywgndrv\"}")
                .toObject(EmailServiceResourceInner.class);
        Assertions.assertEquals("ghmewuam", model.location());
        Assertions.assertEquals("rzayv", model.tags().get("t"));
        Assertions.assertEquals("igdtopbob", model.dataLocation());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        EmailServiceResourceInner model =
            new EmailServiceResourceInner()
                .withLocation("ghmewuam")
                .withTags(mapOf("t", "rzayv", "ln", "gvdfgiotkftutq", "qmi", "xlefgugnxkrx", "abhjybi", "tthzrvqd"))
                .withDataLocation("igdtopbob");
        model = BinaryData.fromObject(model).toObject(EmailServiceResourceInner.class);
        Assertions.assertEquals("ghmewuam", model.location());
        Assertions.assertEquals("rzayv", model.tags().get("t"));
        Assertions.assertEquals("igdtopbob", model.dataLocation());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
