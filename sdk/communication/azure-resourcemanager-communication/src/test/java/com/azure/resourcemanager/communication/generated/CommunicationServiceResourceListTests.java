// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.communication.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.communication.fluent.models.CommunicationServiceResourceInner;
import com.azure.resourcemanager.communication.models.CommunicationServiceResourceList;
import com.azure.resourcemanager.communication.models.ManagedServiceIdentity;
import com.azure.resourcemanager.communication.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.communication.models.UserAssignedIdentity;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CommunicationServiceResourceListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CommunicationServiceResourceList model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"provisioningState\":\"Running\",\"hostName\":\"mkkvnip\",\"dataLocation\":\"oxzjnchgejspod\",\"notificationHubId\":\"ilzyd\",\"version\":\"o\",\"immutableResourceId\":\"yahux\",\"linkedDomains\":[\"mqnjaqw\",\"xj\"]},\"identity\":{\"principalId\":\"ef9eb9da-900a-4144-ad27-a9b0a76e515d\",\"tenantId\":\"ee78ee04-5488-49a6-b105-eaa8a59fd4b0\",\"type\":\"SystemAssigned,UserAssigned\",\"userAssignedIdentities\":{\"tegjvwmf\":{\"principalId\":\"86be38b7-b6b7-4b42-bd48-8be5806672da\",\"clientId\":\"b7b48f5e-f095-4c96-96a6-554206c17dd1\"},\"scmdvpjhulsuu\":{\"principalId\":\"b9807eea-7284-4e49-9b53-ca66d768d5cb\",\"clientId\":\"bdce0daa-ecdc-4e3a-8ffe-97c4b145c93a\"},\"jozkrwfndiod\":{\"principalId\":\"fd1ce9f2-ee54-4212-abbc-317e0597ecaf\",\"clientId\":\"82f841a7-6458-4ad9-9b7f-5ca541098843\"},\"lwejdpv\":{\"principalId\":\"09c23d8b-6df2-4ef9-a643-2e400db91f86\",\"clientId\":\"09585243-6cce-4b77-a7c8-021c95eb8e16\"}}},\"location\":\"yoqpsoaccta\",\"tags\":{\"dfdosygexp\":\"ljlahbcryf\",\"dphlxaolt\":\"ojakhmsbzjhcrze\"},\"id\":\"qtrgqjbpfzfsinzg\",\"name\":\"f\",\"type\":\"jrwzox\"},{\"properties\":{\"provisioningState\":\"Running\",\"hostName\":\"lluwfzitonpeq\",\"dataLocation\":\"pjkjlxofpdv\",\"notificationHubId\":\"fxxypininmayhuy\",\"version\":\"kpode\",\"immutableResourceId\":\"oginuvamiheognar\",\"linkedDomains\":[\"theotusiv\"]},\"identity\":{\"principalId\":\"b384ea4b-2bc3-4f19-9d4a-c97ac5dfcda2\",\"tenantId\":\"3d8dba7a-3e4b-44cd-9473-650ba5b0d1cb\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"nhungbw\":{\"principalId\":\"ecf55d34-1c17-4213-8a5b-b05dcccdc962\",\"clientId\":\"b6ed71ad-2d97-4eec-b344-85f512a698be\"}}},\"location\":\"rnfygxgispem\",\"tags\":{\"fxqeof\":\"fkufublj\",\"jqul\":\"aeqjhqjbasvms\",\"clxxwrljdo\":\"gsntnbybkzgcwr\"},\"id\":\"skcqvkocrcjd\",\"name\":\"wtnhxbnjbiksqr\",\"type\":\"lssai\"}],\"nextLink\":\"p\"}")
            .toObject(CommunicationServiceResourceList.class);
        Assertions.assertEquals("yoqpsoaccta", model.value().get(0).location());
        Assertions.assertEquals("ljlahbcryf", model.value().get(0).tags().get("dfdosygexp"));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED,
            model.value().get(0).identity().type());
        Assertions.assertEquals("oxzjnchgejspod", model.value().get(0).dataLocation());
        Assertions.assertEquals("mqnjaqw", model.value().get(0).linkedDomains().get(0));
        Assertions.assertEquals("p", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CommunicationServiceResourceList model
            = new CommunicationServiceResourceList()
                .withValue(Arrays.asList(
                    new CommunicationServiceResourceInner().withLocation("yoqpsoaccta")
                        .withTags(mapOf("dfdosygexp", "ljlahbcryf", "dphlxaolt", "ojakhmsbzjhcrze"))
                        .withIdentity(new ManagedServiceIdentity()
                            .withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED)
                            .withUserAssignedIdentities(mapOf("tegjvwmf", new UserAssignedIdentity(), "scmdvpjhulsuu",
                                new UserAssignedIdentity(), "jozkrwfndiod", new UserAssignedIdentity(), "lwejdpv",
                                new UserAssignedIdentity())))
                        .withDataLocation("oxzjnchgejspod").withLinkedDomains(Arrays.asList("mqnjaqw", "xj")),
                    new CommunicationServiceResourceInner().withLocation("rnfygxgispem")
                        .withTags(mapOf("fxqeof", "fkufublj", "jqul", "aeqjhqjbasvms", "clxxwrljdo", "gsntnbybkzgcwr"))
                        .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.USER_ASSIGNED)
                            .withUserAssignedIdentities(mapOf("nhungbw", new UserAssignedIdentity())))
                        .withDataLocation("pjkjlxofpdv").withLinkedDomains(Arrays.asList("theotusiv"))))
                .withNextLink("p");
        model = BinaryData.fromObject(model).toObject(CommunicationServiceResourceList.class);
        Assertions.assertEquals("yoqpsoaccta", model.value().get(0).location());
        Assertions.assertEquals("ljlahbcryf", model.value().get(0).tags().get("dfdosygexp"));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED,
            model.value().get(0).identity().type());
        Assertions.assertEquals("oxzjnchgejspod", model.value().get(0).dataLocation());
        Assertions.assertEquals("mqnjaqw", model.value().get(0).linkedDomains().get(0));
        Assertions.assertEquals("p", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
