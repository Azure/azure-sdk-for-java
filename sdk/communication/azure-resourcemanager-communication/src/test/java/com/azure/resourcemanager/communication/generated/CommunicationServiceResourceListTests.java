// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.communication.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.communication.fluent.models.CommunicationServiceResourceInner;
import com.azure.resourcemanager.communication.models.CommunicationServiceResourceList;
import com.azure.resourcemanager.communication.models.ManagedServiceIdentity;
import com.azure.resourcemanager.communication.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.communication.models.UserAssignedIdentity;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CommunicationServiceResourceListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CommunicationServiceResourceList model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"provisioningState\":\"Running\",\"hostName\":\"mkkvnip\",\"dataLocation\":\"oxzjnchgejspod\",\"notificationHubId\":\"ilzyd\",\"version\":\"o\",\"immutableResourceId\":\"yahux\",\"linkedDomains\":[\"mqnjaqw\",\"xj\"]},\"identity\":{\"principalId\":\"a48a4236-5bf9-4497-a6db-8984afd5da4f\",\"tenantId\":\"06b33ecb-7f5f-43be-9aa9-1d937cef642f\",\"type\":\"SystemAssigned,UserAssigned\",\"userAssignedIdentities\":{\"tegjvwmf\":{\"principalId\":\"d26ff5bf-8e56-44f4-937d-c76beede9c4a\",\"clientId\":\"081e3926-3f3e-49f6-bde8-a54e4572e5ce\"},\"scmdvpjhulsuu\":{\"principalId\":\"8ccd6c16-28da-4202-b247-e417226c45b5\",\"clientId\":\"be59347b-67fd-47e3-8d43-54e70e187218\"},\"jozkrwfndiod\":{\"principalId\":\"1e8b161d-e3d3-4cc8-ba9b-ce1bdef52317\",\"clientId\":\"851e90bc-8565-44ae-a534-a073f0f75c60\"},\"lwejdpv\":{\"principalId\":\"7f3c9a13-78f0-490e-8f3a-e84aa947d196\",\"clientId\":\"2738c0e6-30c2-4391-8c41-78b33aeb9e75\"}}},\"location\":\"yoqpsoaccta\",\"tags\":{\"dfdosygexp\":\"ljlahbcryf\",\"dphlxaolt\":\"ojakhmsbzjhcrze\"},\"id\":\"qtrgqjbpfzfsinzg\",\"name\":\"f\",\"type\":\"jrwzox\"},{\"properties\":{\"provisioningState\":\"Running\",\"hostName\":\"lluwfzitonpeq\",\"dataLocation\":\"pjkjlxofpdv\",\"notificationHubId\":\"fxxypininmayhuy\",\"version\":\"kpode\",\"immutableResourceId\":\"oginuvamiheognar\",\"linkedDomains\":[\"theotusiv\"]},\"identity\":{\"principalId\":\"2bff9112-f8cb-42f0-8ba7-1f3fc6dadb8d\",\"tenantId\":\"c96242e7-f75b-4663-a8b5-7b5b450c865f\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"nhungbw\":{\"principalId\":\"3539c26a-45b3-4284-a606-028e879987a4\",\"clientId\":\"9b26a710-5bf1-4672-8d6e-9b9598c823ea\"}}},\"location\":\"rnfygxgispem\",\"tags\":{\"fxqeof\":\"fkufublj\",\"jqul\":\"aeqjhqjbasvms\",\"clxxwrljdo\":\"gsntnbybkzgcwr\"},\"id\":\"skcqvkocrcjd\",\"name\":\"wtnhxbnjbiksqr\",\"type\":\"lssai\"}],\"nextLink\":\"p\"}")
            .toObject(CommunicationServiceResourceList.class);
        Assertions.assertEquals("yoqpsoaccta", model.value().get(0).location());
        Assertions.assertEquals("ljlahbcryf", model.value().get(0).tags().get("dfdosygexp"));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED,
            model.value().get(0).identity().type());
        Assertions.assertEquals("oxzjnchgejspod", model.value().get(0).dataLocation());
        Assertions.assertEquals("mqnjaqw", model.value().get(0).linkedDomains().get(0));
        Assertions.assertEquals("p", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CommunicationServiceResourceList model
            = new CommunicationServiceResourceList()
                .withValue(Arrays.asList(
                    new CommunicationServiceResourceInner().withLocation("yoqpsoaccta")
                        .withTags(mapOf("dfdosygexp", "ljlahbcryf", "dphlxaolt", "ojakhmsbzjhcrze"))
                        .withIdentity(new ManagedServiceIdentity()
                            .withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED)
                            .withUserAssignedIdentities(mapOf("tegjvwmf", new UserAssignedIdentity(), "scmdvpjhulsuu",
                                new UserAssignedIdentity(), "jozkrwfndiod", new UserAssignedIdentity(), "lwejdpv",
                                new UserAssignedIdentity())))
                        .withDataLocation("oxzjnchgejspod")
                        .withLinkedDomains(Arrays.asList("mqnjaqw", "xj")),
                    new CommunicationServiceResourceInner().withLocation("rnfygxgispem")
                        .withTags(mapOf("fxqeof", "fkufublj", "jqul", "aeqjhqjbasvms", "clxxwrljdo", "gsntnbybkzgcwr"))
                        .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.USER_ASSIGNED)
                            .withUserAssignedIdentities(mapOf("nhungbw", new UserAssignedIdentity())))
                        .withDataLocation("pjkjlxofpdv")
                        .withLinkedDomains(Arrays.asList("theotusiv"))))
                .withNextLink("p");
        model = BinaryData.fromObject(model).toObject(CommunicationServiceResourceList.class);
        Assertions.assertEquals("yoqpsoaccta", model.value().get(0).location());
        Assertions.assertEquals("ljlahbcryf", model.value().get(0).tags().get("dfdosygexp"));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED,
            model.value().get(0).identity().type());
        Assertions.assertEquals("oxzjnchgejspod", model.value().get(0).dataLocation());
        Assertions.assertEquals("mqnjaqw", model.value().get(0).linkedDomains().get(0));
        Assertions.assertEquals("p", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
