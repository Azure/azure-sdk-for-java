// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.communication.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.communication.fluent.models.CommunicationServiceUpdateProperties;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * A class representing update parameters for CommunicationService resource.
 */
@Fluent
public final class CommunicationServiceResourceUpdate extends TaggedResource {
    /*
     * The properties of the service.
     */
    private CommunicationServiceUpdateProperties innerProperties;

    /*
     * Managed service identity (system assigned and/or user assigned identities)
     */
    private ManagedServiceIdentity identity;

    /**
     * Creates an instance of CommunicationServiceResourceUpdate class.
     */
    public CommunicationServiceResourceUpdate() {
    }

    /**
     * Get the innerProperties property: The properties of the service.
     * 
     * @return the innerProperties value.
     */
    private CommunicationServiceUpdateProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the identity property: Managed service identity (system assigned and/or user assigned identities).
     * 
     * @return the identity value.
     */
    public ManagedServiceIdentity identity() {
        return this.identity;
    }

    /**
     * Set the identity property: Managed service identity (system assigned and/or user assigned identities).
     * 
     * @param identity the identity value to set.
     * @return the CommunicationServiceResourceUpdate object itself.
     */
    public CommunicationServiceResourceUpdate withIdentity(ManagedServiceIdentity identity) {
        this.identity = identity;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CommunicationServiceResourceUpdate withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the linkedDomains property: List of email Domain resource Ids.
     * 
     * @return the linkedDomains value.
     */
    public List<String> linkedDomains() {
        return this.innerProperties() == null ? null : this.innerProperties().linkedDomains();
    }

    /**
     * Set the linkedDomains property: List of email Domain resource Ids.
     * 
     * @param linkedDomains the linkedDomains value to set.
     * @return the CommunicationServiceResourceUpdate object itself.
     */
    public CommunicationServiceResourceUpdate withLinkedDomains(List<String> linkedDomains) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CommunicationServiceUpdateProperties();
        }
        this.innerProperties().withLinkedDomains(linkedDomains);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
        if (identity() != null) {
            identity().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeMapField("tags", tags(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("properties", this.innerProperties);
        jsonWriter.writeJsonField("identity", this.identity);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CommunicationServiceResourceUpdate from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CommunicationServiceResourceUpdate if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CommunicationServiceResourceUpdate.
     */
    public static CommunicationServiceResourceUpdate fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CommunicationServiceResourceUpdate deserializedCommunicationServiceResourceUpdate
                = new CommunicationServiceResourceUpdate();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedCommunicationServiceResourceUpdate.withTags(tags);
                } else if ("properties".equals(fieldName)) {
                    deserializedCommunicationServiceResourceUpdate.innerProperties
                        = CommunicationServiceUpdateProperties.fromJson(reader);
                } else if ("identity".equals(fieldName)) {
                    deserializedCommunicationServiceResourceUpdate.identity = ManagedServiceIdentity.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCommunicationServiceResourceUpdate;
        });
    }
}
