// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.communication.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.communication.models.CommunicationServicesProvisioningState;
import java.io.IOException;
import java.util.List;

/**
 * A class that describes the properties of the CommunicationService.
 */
@Fluent
public final class CommunicationServiceProperties implements JsonSerializable<CommunicationServiceProperties> {
    /*
     * Provisioning state of the resource.
     */
    private CommunicationServicesProvisioningState provisioningState;

    /*
     * FQDN of the CommunicationService instance.
     */
    private String hostname;

    /*
     * The location where the communication service stores its data at rest.
     */
    private String dataLocation;

    /*
     * Resource ID of an Azure Notification Hub linked to this resource.
     */
    private String notificationHubId;

    /*
     * Version of the CommunicationService resource. Probably you need the same or higher version of client SDKs.
     */
    private String version;

    /*
     * The immutable resource Id of the communication service.
     */
    private String immutableResourceId;

    /*
     * List of email Domain resource Ids.
     */
    private List<String> linkedDomains;

    /**
     * Creates an instance of CommunicationServiceProperties class.
     */
    public CommunicationServiceProperties() {
    }

    /**
     * Get the provisioningState property: Provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    public CommunicationServicesProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the hostname property: FQDN of the CommunicationService instance.
     * 
     * @return the hostname value.
     */
    public String hostname() {
        return this.hostname;
    }

    /**
     * Get the dataLocation property: The location where the communication service stores its data at rest.
     * 
     * @return the dataLocation value.
     */
    public String dataLocation() {
        return this.dataLocation;
    }

    /**
     * Set the dataLocation property: The location where the communication service stores its data at rest.
     * 
     * @param dataLocation the dataLocation value to set.
     * @return the CommunicationServiceProperties object itself.
     */
    public CommunicationServiceProperties withDataLocation(String dataLocation) {
        this.dataLocation = dataLocation;
        return this;
    }

    /**
     * Get the notificationHubId property: Resource ID of an Azure Notification Hub linked to this resource.
     * 
     * @return the notificationHubId value.
     */
    public String notificationHubId() {
        return this.notificationHubId;
    }

    /**
     * Get the version property: Version of the CommunicationService resource. Probably you need the same or higher
     * version of client SDKs.
     * 
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Get the immutableResourceId property: The immutable resource Id of the communication service.
     * 
     * @return the immutableResourceId value.
     */
    public String immutableResourceId() {
        return this.immutableResourceId;
    }

    /**
     * Get the linkedDomains property: List of email Domain resource Ids.
     * 
     * @return the linkedDomains value.
     */
    public List<String> linkedDomains() {
        return this.linkedDomains;
    }

    /**
     * Set the linkedDomains property: List of email Domain resource Ids.
     * 
     * @param linkedDomains the linkedDomains value to set.
     * @return the CommunicationServiceProperties object itself.
     */
    public CommunicationServiceProperties withLinkedDomains(List<String> linkedDomains) {
        this.linkedDomains = linkedDomains;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (dataLocation() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property dataLocation in model CommunicationServiceProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(CommunicationServiceProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("dataLocation", this.dataLocation);
        jsonWriter.writeArrayField("linkedDomains", this.linkedDomains,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CommunicationServiceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CommunicationServiceProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CommunicationServiceProperties.
     */
    public static CommunicationServiceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CommunicationServiceProperties deserializedCommunicationServiceProperties
                = new CommunicationServiceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("dataLocation".equals(fieldName)) {
                    deserializedCommunicationServiceProperties.dataLocation = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedCommunicationServiceProperties.provisioningState
                        = CommunicationServicesProvisioningState.fromString(reader.getString());
                } else if ("hostName".equals(fieldName)) {
                    deserializedCommunicationServiceProperties.hostname = reader.getString();
                } else if ("notificationHubId".equals(fieldName)) {
                    deserializedCommunicationServiceProperties.notificationHubId = reader.getString();
                } else if ("version".equals(fieldName)) {
                    deserializedCommunicationServiceProperties.version = reader.getString();
                } else if ("immutableResourceId".equals(fieldName)) {
                    deserializedCommunicationServiceProperties.immutableResourceId = reader.getString();
                } else if ("linkedDomains".equals(fieldName)) {
                    List<String> linkedDomains = reader.readArray(reader1 -> reader1.getString());
                    deserializedCommunicationServiceProperties.linkedDomains = linkedDomains;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCommunicationServiceProperties;
        });
    }
}
