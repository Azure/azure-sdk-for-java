// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.communication.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.communication.models.ProvisioningState;
import java.io.IOException;

/**
 * A class that describes the properties of a SenderUsername resource.
 */
@Fluent
public final class SenderUsernameProperties implements JsonSerializable<SenderUsernameProperties> {
    /*
     * The location where the SenderUsername resource data is stored at rest.
     */
    private String dataLocation;

    /*
     * A sender senderUsername to be used when sending emails.
     */
    private String username;

    /*
     * The display name for the senderUsername.
     */
    private String displayName;

    /*
     * Provisioning state of the resource. Unknown is the default state for Communication Services.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of SenderUsernameProperties class.
     */
    public SenderUsernameProperties() {
    }

    /**
     * Get the dataLocation property: The location where the SenderUsername resource data is stored at rest.
     * 
     * @return the dataLocation value.
     */
    public String dataLocation() {
        return this.dataLocation;
    }

    /**
     * Get the username property: A sender senderUsername to be used when sending emails.
     * 
     * @return the username value.
     */
    public String username() {
        return this.username;
    }

    /**
     * Set the username property: A sender senderUsername to be used when sending emails.
     * 
     * @param username the username value to set.
     * @return the SenderUsernameProperties object itself.
     */
    public SenderUsernameProperties withUsername(String username) {
        this.username = username;
        return this;
    }

    /**
     * Get the displayName property: The display name for the senderUsername.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: The display name for the senderUsername.
     * 
     * @param displayName the displayName value to set.
     * @return the SenderUsernameProperties object itself.
     */
    public SenderUsernameProperties withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of the resource. Unknown is the default state for
     * Communication Services.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (username() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property username in model SenderUsernameProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SenderUsernameProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("username", this.username);
        jsonWriter.writeStringField("displayName", this.displayName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SenderUsernameProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SenderUsernameProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SenderUsernameProperties.
     */
    public static SenderUsernameProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SenderUsernameProperties deserializedSenderUsernameProperties = new SenderUsernameProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("username".equals(fieldName)) {
                    deserializedSenderUsernameProperties.username = reader.getString();
                } else if ("dataLocation".equals(fieldName)) {
                    deserializedSenderUsernameProperties.dataLocation = reader.getString();
                } else if ("displayName".equals(fieldName)) {
                    deserializedSenderUsernameProperties.displayName = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedSenderUsernameProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSenderUsernameProperties;
        });
    }
}
