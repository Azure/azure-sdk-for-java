// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.communication.models;

import com.azure.core.http.rest.Response;
import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.communication.fluent.models.CommunicationServiceResourceInner;
import java.util.Map;

/** An immutable client-side representation of CommunicationServiceResource. */
public interface CommunicationServiceResource {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the systemData property: Metadata pertaining to creation and last modification of the resource.
     *
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the location property: The Azure location where the CommunicationService is running.
     *
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Tags of the service which is a list of key value pairs that describe the resource.
     *
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the provisioningState property: Provisioning state of the resource.
     *
     * @return the provisioningState value.
     */
    ProvisioningState provisioningState();

    /**
     * Gets the hostname property: FQDN of the CommunicationService instance.
     *
     * @return the hostname value.
     */
    String hostname();

    /**
     * Gets the dataLocation property: The location where the communication service stores its data at rest.
     *
     * @return the dataLocation value.
     */
    String dataLocation();

    /**
     * Gets the notificationHubId property: Resource ID of an Azure Notification Hub linked to this resource.
     *
     * @return the notificationHubId value.
     */
    String notificationHubId();

    /**
     * Gets the version property: Version of the CommunicationService resource. Probably you need the same or higher
     * version of client SDKs.
     *
     * @return the version value.
     */
    String version();

    /**
     * Gets the immutableResourceId property: The immutable resource Id of the communication service.
     *
     * @return the immutableResourceId value.
     */
    String immutableResourceId();

    /**
     * Gets the region of the resource.
     *
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     *
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the inner com.azure.resourcemanager.communication.fluent.models.CommunicationServiceResourceInner object.
     *
     * @return the inner object.
     */
    CommunicationServiceResourceInner innerModel();

    /** The entirety of the CommunicationServiceResource definition. */
    interface Definition
        extends DefinitionStages.Blank, DefinitionStages.WithResourceGroup, DefinitionStages.WithCreate {
    }
    /** The CommunicationServiceResource definition stages. */
    interface DefinitionStages {
        /** The first stage of the CommunicationServiceResource definition. */
        interface Blank extends WithResourceGroup {
        }
        /** The stage of the CommunicationServiceResource definition allowing to specify parent resource. */
        interface WithResourceGroup {
            /**
             * Specifies resourceGroupName.
             *
             * @param resourceGroupName The name of the resource group. The name is case insensitive.
             * @return the next definition stage.
             */
            WithCreate withExistingResourceGroup(String resourceGroupName);
        }
        /**
         * The stage of the CommunicationServiceResource definition which contains all the minimum required properties
         * for the resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithLocation, DefinitionStages.WithTags, DefinitionStages.WithDataLocation {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            CommunicationServiceResource create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            CommunicationServiceResource create(Context context);
        }
        /** The stage of the CommunicationServiceResource definition allowing to specify location. */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             *
             * @param location The Azure location where the CommunicationService is running.
             * @return the next definition stage.
             */
            WithCreate withRegion(Region location);

            /**
             * Specifies the region for the resource.
             *
             * @param location The Azure location where the CommunicationService is running.
             * @return the next definition stage.
             */
            WithCreate withRegion(String location);
        }
        /** The stage of the CommunicationServiceResource definition allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Tags of the service which is a list of key value pairs that describe the
             * resource..
             *
             * @param tags Tags of the service which is a list of key value pairs that describe the resource.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }
        /** The stage of the CommunicationServiceResource definition allowing to specify dataLocation. */
        interface WithDataLocation {
            /**
             * Specifies the dataLocation property: The location where the communication service stores its data at
             * rest..
             *
             * @param dataLocation The location where the communication service stores its data at rest.
             * @return the next definition stage.
             */
            WithCreate withDataLocation(String dataLocation);
        }
    }
    /**
     * Begins update for the CommunicationServiceResource resource.
     *
     * @return the stage of resource update.
     */
    CommunicationServiceResource.Update update();

    /** The template for CommunicationServiceResource update. */
    interface Update extends UpdateStages.WithTags {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        CommunicationServiceResource apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        CommunicationServiceResource apply(Context context);
    }
    /** The CommunicationServiceResource update stages. */
    interface UpdateStages {
        /** The stage of the CommunicationServiceResource update allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Tags of the service which is a list of key value pairs that describe the
             * resource..
             *
             * @param tags Tags of the service which is a list of key value pairs that describe the resource.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    CommunicationServiceResource refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    CommunicationServiceResource refresh(Context context);

    /**
     * Links an Azure Notification Hub to this communication service.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a notification hub that has been linked to the communication service.
     */
    LinkedNotificationHub linkNotificationHub();

    /**
     * Links an Azure Notification Hub to this communication service.
     *
     * @param linkNotificationHubParameters Parameters supplied to the operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a notification hub that has been linked to the communication service along with {@link Response}.
     */
    Response<LinkedNotificationHub> linkNotificationHubWithResponse(
        LinkNotificationHubParameters linkNotificationHubParameters, Context context);

    /**
     * Get the access keys of the CommunicationService resource.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the access keys of the CommunicationService resource.
     */
    CommunicationServiceKeys listKeys();

    /**
     * Get the access keys of the CommunicationService resource.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the access keys of the CommunicationService resource along with {@link Response}.
     */
    Response<CommunicationServiceKeys> listKeysWithResponse(Context context);

    /**
     * Regenerate CommunicationService access key. PrimaryKey and SecondaryKey cannot be regenerated at the same time.
     *
     * @param parameters Parameter that describes the Regenerate Key Operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a class representing the access keys of a CommunicationService.
     */
    CommunicationServiceKeys regenerateKey(RegenerateKeyParameters parameters);

    /**
     * Regenerate CommunicationService access key. PrimaryKey and SecondaryKey cannot be regenerated at the same time.
     *
     * @param parameters Parameter that describes the Regenerate Key Operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a class representing the access keys of a CommunicationService along with {@link Response}.
     */
    Response<CommunicationServiceKeys> regenerateKeyWithResponse(RegenerateKeyParameters parameters, Context context);
}
