// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.communication.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.communication.models.DomainManagement;
import com.azure.resourcemanager.communication.models.DomainPropertiesVerificationRecords;
import com.azure.resourcemanager.communication.models.DomainPropertiesVerificationStates;
import com.azure.resourcemanager.communication.models.DomainsProvisioningState;
import com.azure.resourcemanager.communication.models.UserEngagementTracking;
import java.io.IOException;
import java.util.Map;

/**
 * A class representing a Domains resource.
 */
@Fluent
public final class DomainResourceInner extends Resource {
    /*
     * The properties of a Domains resource.
     */
    private DomainProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of DomainResourceInner class.
     */
    public DomainResourceInner() {
    }

    /**
     * Get the innerProperties property: The properties of a Domains resource.
     * 
     * @return the innerProperties value.
     */
    private DomainProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DomainResourceInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DomainResourceInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    public DomainsProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the dataLocation property: The location where the Domains resource data is stored at rest.
     * 
     * @return the dataLocation value.
     */
    public String dataLocation() {
        return this.innerProperties() == null ? null : this.innerProperties().dataLocation();
    }

    /**
     * Get the fromSenderDomain property: P2 sender domain that is displayed to the email recipients [RFC 5322].
     * 
     * @return the fromSenderDomain value.
     */
    public String fromSenderDomain() {
        return this.innerProperties() == null ? null : this.innerProperties().fromSenderDomain();
    }

    /**
     * Get the mailFromSenderDomain property: P1 sender domain that is present on the email envelope [RFC 5321].
     * 
     * @return the mailFromSenderDomain value.
     */
    public String mailFromSenderDomain() {
        return this.innerProperties() == null ? null : this.innerProperties().mailFromSenderDomain();
    }

    /**
     * Get the domainManagement property: Describes how a Domains resource is being managed.
     * 
     * @return the domainManagement value.
     */
    public DomainManagement domainManagement() {
        return this.innerProperties() == null ? null : this.innerProperties().domainManagement();
    }

    /**
     * Set the domainManagement property: Describes how a Domains resource is being managed.
     * 
     * @param domainManagement the domainManagement value to set.
     * @return the DomainResourceInner object itself.
     */
    public DomainResourceInner withDomainManagement(DomainManagement domainManagement) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DomainProperties();
        }
        this.innerProperties().withDomainManagement(domainManagement);
        return this;
    }

    /**
     * Get the verificationStates property: List of VerificationStatusRecord.
     * 
     * @return the verificationStates value.
     */
    public DomainPropertiesVerificationStates verificationStates() {
        return this.innerProperties() == null ? null : this.innerProperties().verificationStates();
    }

    /**
     * Get the verificationRecords property: List of DnsRecord.
     * 
     * @return the verificationRecords value.
     */
    public DomainPropertiesVerificationRecords verificationRecords() {
        return this.innerProperties() == null ? null : this.innerProperties().verificationRecords();
    }

    /**
     * Get the userEngagementTracking property: Describes whether user engagement tracking is enabled or disabled.
     * 
     * @return the userEngagementTracking value.
     */
    public UserEngagementTracking userEngagementTracking() {
        return this.innerProperties() == null ? null : this.innerProperties().userEngagementTracking();
    }

    /**
     * Set the userEngagementTracking property: Describes whether user engagement tracking is enabled or disabled.
     * 
     * @param userEngagementTracking the userEngagementTracking value to set.
     * @return the DomainResourceInner object itself.
     */
    public DomainResourceInner withUserEngagementTracking(UserEngagementTracking userEngagementTracking) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DomainProperties();
        }
        this.innerProperties().withUserEngagementTracking(userEngagementTracking);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("location", location());
        jsonWriter.writeMapField("tags", tags(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DomainResourceInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DomainResourceInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DomainResourceInner.
     */
    public static DomainResourceInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DomainResourceInner deserializedDomainResourceInner = new DomainResourceInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedDomainResourceInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedDomainResourceInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedDomainResourceInner.type = reader.getString();
                } else if ("location".equals(fieldName)) {
                    deserializedDomainResourceInner.withLocation(reader.getString());
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedDomainResourceInner.withTags(tags);
                } else if ("properties".equals(fieldName)) {
                    deserializedDomainResourceInner.innerProperties = DomainProperties.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedDomainResourceInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDomainResourceInner;
        });
    }
}
