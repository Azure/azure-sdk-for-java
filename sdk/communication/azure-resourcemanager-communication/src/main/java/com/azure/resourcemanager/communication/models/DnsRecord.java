// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.communication.models;

import com.azure.core.annotation.Immutable;
import com.fasterxml.jackson.annotation.JsonProperty;

/** A class that represents a VerificationStatus record. */
@Immutable
public final class DnsRecord {
    /*
     * Type of the DNS record. Example: TXT
     */
    @JsonProperty(value = "type", access = JsonProperty.Access.WRITE_ONLY)
    private String type;

    /*
     * Name of the DNS record.
     */
    @JsonProperty(value = "name", access = JsonProperty.Access.WRITE_ONLY)
    private String name;

    /*
     * Value of the DNS record.
     */
    @JsonProperty(value = "value", access = JsonProperty.Access.WRITE_ONLY)
    private String value;

    /*
     * Represents an expiry time in seconds to represent how long this entry can be cached by the resolver, default =
     * 3600sec.
     */
    @JsonProperty(value = "ttl", access = JsonProperty.Access.WRITE_ONLY)
    private Integer ttl;

    /** Creates an instance of DnsRecord class. */
    public DnsRecord() {
    }

    /**
     * Get the type property: Type of the DNS record. Example: TXT.
     *
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: Name of the DNS record.
     *
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Get the value property: Value of the DNS record.
     *
     * @return the value value.
     */
    public String value() {
        return this.value;
    }

    /**
     * Get the ttl property: Represents an expiry time in seconds to represent how long this entry can be cached by the
     * resolver, default = 3600sec.
     *
     * @return the ttl value.
     */
    public Integer ttl() {
        return this.ttl;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
