// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.communication.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A class that represents a VerificationStatus record.
 */
@Immutable
public final class DnsRecord implements JsonSerializable<DnsRecord> {
    /*
     * Type of the DNS record. Example: TXT
     */
    private String type;

    /*
     * Name of the DNS record.
     */
    private String name;

    /*
     * Value of the DNS record.
     */
    private String value;

    /*
     * Represents an expiry time in seconds to represent how long this entry can be cached by the resolver, default =
     * 3600sec.
     */
    private Integer ttl;

    /**
     * Creates an instance of DnsRecord class.
     */
    public DnsRecord() {
    }

    /**
     * Get the type property: Type of the DNS record. Example: TXT.
     * 
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: Name of the DNS record.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Get the value property: Value of the DNS record.
     * 
     * @return the value value.
     */
    public String value() {
        return this.value;
    }

    /**
     * Get the ttl property: Represents an expiry time in seconds to represent how long this entry can be cached by the
     * resolver, default = 3600sec.
     * 
     * @return the ttl value.
     */
    public Integer ttl() {
        return this.ttl;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DnsRecord from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DnsRecord if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the DnsRecord.
     */
    public static DnsRecord fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DnsRecord deserializedDnsRecord = new DnsRecord();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedDnsRecord.type = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedDnsRecord.name = reader.getString();
                } else if ("value".equals(fieldName)) {
                    deserializedDnsRecord.value = reader.getString();
                } else if ("ttl".equals(fieldName)) {
                    deserializedDnsRecord.ttl = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDnsRecord;
        });
    }
}
