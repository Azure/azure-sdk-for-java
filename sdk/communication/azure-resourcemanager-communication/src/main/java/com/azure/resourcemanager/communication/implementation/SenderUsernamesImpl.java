// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.communication.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.communication.fluent.SenderUsernamesClient;
import com.azure.resourcemanager.communication.fluent.models.SenderUsernameResourceInner;
import com.azure.resourcemanager.communication.models.SenderUsernameResource;
import com.azure.resourcemanager.communication.models.SenderUsernames;

public final class SenderUsernamesImpl implements SenderUsernames {
    private static final ClientLogger LOGGER = new ClientLogger(SenderUsernamesImpl.class);

    private final SenderUsernamesClient innerClient;

    private final com.azure.resourcemanager.communication.CommunicationManager serviceManager;

    public SenderUsernamesImpl(
        SenderUsernamesClient innerClient,
        com.azure.resourcemanager.communication.CommunicationManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<SenderUsernameResource> listByDomains(
        String resourceGroupName, String emailServiceName, String domainName) {
        PagedIterable<SenderUsernameResourceInner> inner =
            this.serviceClient().listByDomains(resourceGroupName, emailServiceName, domainName);
        return Utils.mapPage(inner, inner1 -> new SenderUsernameResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<SenderUsernameResource> listByDomains(
        String resourceGroupName, String emailServiceName, String domainName, Context context) {
        PagedIterable<SenderUsernameResourceInner> inner =
            this.serviceClient().listByDomains(resourceGroupName, emailServiceName, domainName, context);
        return Utils.mapPage(inner, inner1 -> new SenderUsernameResourceImpl(inner1, this.manager()));
    }

    public Response<SenderUsernameResource> getWithResponse(
        String resourceGroupName, String emailServiceName, String domainName, String senderUsername, Context context) {
        Response<SenderUsernameResourceInner> inner =
            this
                .serviceClient()
                .getWithResponse(resourceGroupName, emailServiceName, domainName, senderUsername, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SenderUsernameResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SenderUsernameResource get(
        String resourceGroupName, String emailServiceName, String domainName, String senderUsername) {
        SenderUsernameResourceInner inner =
            this.serviceClient().get(resourceGroupName, emailServiceName, domainName, senderUsername);
        if (inner != null) {
            return new SenderUsernameResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteWithResponse(
        String resourceGroupName, String emailServiceName, String domainName, String senderUsername, Context context) {
        return this
            .serviceClient()
            .deleteWithResponse(resourceGroupName, emailServiceName, domainName, senderUsername, context);
    }

    public void delete(String resourceGroupName, String emailServiceName, String domainName, String senderUsername) {
        this.serviceClient().delete(resourceGroupName, emailServiceName, domainName, senderUsername);
    }

    public SenderUsernameResource getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String emailServiceName = Utils.getValueFromIdByName(id, "emailServices");
        if (emailServiceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'emailServices'.", id)));
        }
        String domainName = Utils.getValueFromIdByName(id, "domains");
        if (domainName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'domains'.", id)));
        }
        String senderUsername = Utils.getValueFromIdByName(id, "senderUsernames");
        if (senderUsername == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'senderUsernames'.", id)));
        }
        return this
            .getWithResponse(resourceGroupName, emailServiceName, domainName, senderUsername, Context.NONE)
            .getValue();
    }

    public Response<SenderUsernameResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String emailServiceName = Utils.getValueFromIdByName(id, "emailServices");
        if (emailServiceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'emailServices'.", id)));
        }
        String domainName = Utils.getValueFromIdByName(id, "domains");
        if (domainName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'domains'.", id)));
        }
        String senderUsername = Utils.getValueFromIdByName(id, "senderUsernames");
        if (senderUsername == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'senderUsernames'.", id)));
        }
        return this.getWithResponse(resourceGroupName, emailServiceName, domainName, senderUsername, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String emailServiceName = Utils.getValueFromIdByName(id, "emailServices");
        if (emailServiceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'emailServices'.", id)));
        }
        String domainName = Utils.getValueFromIdByName(id, "domains");
        if (domainName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'domains'.", id)));
        }
        String senderUsername = Utils.getValueFromIdByName(id, "senderUsernames");
        if (senderUsername == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'senderUsernames'.", id)));
        }
        this.deleteWithResponse(resourceGroupName, emailServiceName, domainName, senderUsername, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String emailServiceName = Utils.getValueFromIdByName(id, "emailServices");
        if (emailServiceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'emailServices'.", id)));
        }
        String domainName = Utils.getValueFromIdByName(id, "domains");
        if (domainName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'domains'.", id)));
        }
        String senderUsername = Utils.getValueFromIdByName(id, "senderUsernames");
        if (senderUsername == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'senderUsernames'.", id)));
        }
        return this.deleteWithResponse(resourceGroupName, emailServiceName, domainName, senderUsername, context);
    }

    private SenderUsernamesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.communication.CommunicationManager manager() {
        return this.serviceManager;
    }

    public SenderUsernameResourceImpl define(String name) {
        return new SenderUsernameResourceImpl(name, this.manager());
    }
}
