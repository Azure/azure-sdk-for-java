// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.communication.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.communication.fluent.SuppressionListAddressesClient;
import com.azure.resourcemanager.communication.fluent.models.SuppressionListAddressResourceInner;
import com.azure.resourcemanager.communication.models.SuppressionListAddressResourceCollection;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in SuppressionListAddressesClient.
 */
public final class SuppressionListAddressesClientImpl implements SuppressionListAddressesClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final SuppressionListAddressesService service;

    /**
     * The service client containing this operation class.
     */
    private final CommunicationServiceManagementClientImpl client;

    /**
     * Initializes an instance of SuppressionListAddressesClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    SuppressionListAddressesClientImpl(CommunicationServiceManagementClientImpl client) {
        this.service = RestProxy.create(SuppressionListAddressesService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for CommunicationServiceManagementClientSuppressionListAddresses to be
     * used by the proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "CommunicationService")
    public interface SuppressionListAddressesService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/emailServices/{emailServiceName}/domains/{domainName}/suppressionLists/{suppressionListName}/suppressionListAddresses")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SuppressionListAddressResourceCollection>> list(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("emailServiceName") String emailServiceName, @PathParam("domainName") String domainName,
            @PathParam("suppressionListName") String suppressionListName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/emailServices/{emailServiceName}/domains/{domainName}/suppressionLists/{suppressionListName}/suppressionListAddresses/{addressId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SuppressionListAddressResourceInner>> get(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("emailServiceName") String emailServiceName, @PathParam("domainName") String domainName,
            @PathParam("suppressionListName") String suppressionListName, @PathParam("addressId") String addressId,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/emailServices/{emailServiceName}/domains/{domainName}/suppressionLists/{suppressionListName}/suppressionListAddresses/{addressId}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SuppressionListAddressResourceInner>> createOrUpdate(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("emailServiceName") String emailServiceName, @PathParam("domainName") String domainName,
            @PathParam("suppressionListName") String suppressionListName, @PathParam("addressId") String addressId,
            @BodyParam("application/json") SuppressionListAddressResourceInner parameters,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/emailServices/{emailServiceName}/domains/{domainName}/suppressionLists/{suppressionListName}/suppressionListAddresses/{addressId}")
        @ExpectedResponses({ 200, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> delete(@HostParam("$host") String endpoint, @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("emailServiceName") String emailServiceName, @PathParam("domainName") String domainName,
            @PathParam("suppressionListName") String suppressionListName, @PathParam("addressId") String addressId,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SuppressionListAddressResourceCollection>> listNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Get
     * 
     * Get all the addresses in a suppression list.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param emailServiceName The name of the EmailService resource.
     * @param domainName The name of the Domains resource.
     * @param suppressionListName The name of the suppression list.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the addresses in a suppression list along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SuppressionListAddressResourceInner>> listSinglePageAsync(String resourceGroupName,
        String emailServiceName, String domainName, String suppressionListName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (emailServiceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter emailServiceName is required and cannot be null."));
        }
        if (domainName == null) {
            return Mono.error(new IllegalArgumentException("Parameter domainName is required and cannot be null."));
        }
        if (suppressionListName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter suppressionListName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.list(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, emailServiceName, domainName, suppressionListName,
                accept, context))
            .<PagedResponse<SuppressionListAddressResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get
     * 
     * Get all the addresses in a suppression list.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param emailServiceName The name of the EmailService resource.
     * @param domainName The name of the Domains resource.
     * @param suppressionListName The name of the suppression list.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the addresses in a suppression list along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SuppressionListAddressResourceInner>> listSinglePageAsync(String resourceGroupName,
        String emailServiceName, String domainName, String suppressionListName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (emailServiceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter emailServiceName is required and cannot be null."));
        }
        if (domainName == null) {
            return Mono.error(new IllegalArgumentException("Parameter domainName is required and cannot be null."));
        }
        if (suppressionListName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter suppressionListName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
                resourceGroupName, emailServiceName, domainName, suppressionListName, accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * Get
     * 
     * Get all the addresses in a suppression list.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param emailServiceName The name of the EmailService resource.
     * @param domainName The name of the Domains resource.
     * @param suppressionListName The name of the suppression list.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the addresses in a suppression list as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SuppressionListAddressResourceInner> listAsync(String resourceGroupName, String emailServiceName,
        String domainName, String suppressionListName) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(resourceGroupName, emailServiceName, domainName, suppressionListName),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Get
     * 
     * Get all the addresses in a suppression list.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param emailServiceName The name of the EmailService resource.
     * @param domainName The name of the Domains resource.
     * @param suppressionListName The name of the suppression list.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the addresses in a suppression list as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SuppressionListAddressResourceInner> listAsync(String resourceGroupName, String emailServiceName,
        String domainName, String suppressionListName, Context context) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(resourceGroupName, emailServiceName, domainName, suppressionListName, context),
            nextLink -> listNextSinglePageAsync(nextLink, context));
    }

    /**
     * Get
     * 
     * Get all the addresses in a suppression list.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param emailServiceName The name of the EmailService resource.
     * @param domainName The name of the Domains resource.
     * @param suppressionListName The name of the suppression list.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the addresses in a suppression list as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SuppressionListAddressResourceInner> list(String resourceGroupName, String emailServiceName,
        String domainName, String suppressionListName) {
        return new PagedIterable<>(listAsync(resourceGroupName, emailServiceName, domainName, suppressionListName));
    }

    /**
     * Get
     * 
     * Get all the addresses in a suppression list.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param emailServiceName The name of the EmailService resource.
     * @param domainName The name of the Domains resource.
     * @param suppressionListName The name of the suppression list.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the addresses in a suppression list as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SuppressionListAddressResourceInner> list(String resourceGroupName, String emailServiceName,
        String domainName, String suppressionListName, Context context) {
        return new PagedIterable<>(
            listAsync(resourceGroupName, emailServiceName, domainName, suppressionListName, context));
    }

    /**
     * Get
     * 
     * Get a SuppressionListAddress.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param emailServiceName The name of the EmailService resource.
     * @param domainName The name of the Domains resource.
     * @param suppressionListName The name of the suppression list.
     * @param addressId The id of the address in a suppression list.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SuppressionListAddress along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SuppressionListAddressResourceInner>> getWithResponseAsync(String resourceGroupName,
        String emailServiceName, String domainName, String suppressionListName, String addressId) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (emailServiceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter emailServiceName is required and cannot be null."));
        }
        if (domainName == null) {
            return Mono.error(new IllegalArgumentException("Parameter domainName is required and cannot be null."));
        }
        if (suppressionListName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter suppressionListName is required and cannot be null."));
        }
        if (addressId == null) {
            return Mono.error(new IllegalArgumentException("Parameter addressId is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, emailServiceName, domainName, suppressionListName,
                addressId, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get
     * 
     * Get a SuppressionListAddress.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param emailServiceName The name of the EmailService resource.
     * @param domainName The name of the Domains resource.
     * @param suppressionListName The name of the suppression list.
     * @param addressId The id of the address in a suppression list.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SuppressionListAddress along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SuppressionListAddressResourceInner>> getWithResponseAsync(String resourceGroupName,
        String emailServiceName, String domainName, String suppressionListName, String addressId, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (emailServiceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter emailServiceName is required and cannot be null."));
        }
        if (domainName == null) {
            return Mono.error(new IllegalArgumentException("Parameter domainName is required and cannot be null."));
        }
        if (suppressionListName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter suppressionListName is required and cannot be null."));
        }
        if (addressId == null) {
            return Mono.error(new IllegalArgumentException("Parameter addressId is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, emailServiceName, domainName, suppressionListName, addressId, accept, context);
    }

    /**
     * Get
     * 
     * Get a SuppressionListAddress.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param emailServiceName The name of the EmailService resource.
     * @param domainName The name of the Domains resource.
     * @param suppressionListName The name of the suppression list.
     * @param addressId The id of the address in a suppression list.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SuppressionListAddress on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SuppressionListAddressResourceInner> getAsync(String resourceGroupName, String emailServiceName,
        String domainName, String suppressionListName, String addressId) {
        return getWithResponseAsync(resourceGroupName, emailServiceName, domainName, suppressionListName, addressId)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get
     * 
     * Get a SuppressionListAddress.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param emailServiceName The name of the EmailService resource.
     * @param domainName The name of the Domains resource.
     * @param suppressionListName The name of the suppression list.
     * @param addressId The id of the address in a suppression list.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SuppressionListAddress along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SuppressionListAddressResourceInner> getWithResponse(String resourceGroupName,
        String emailServiceName, String domainName, String suppressionListName, String addressId, Context context) {
        return getWithResponseAsync(resourceGroupName, emailServiceName, domainName, suppressionListName, addressId,
            context).block();
    }

    /**
     * Get
     * 
     * Get a SuppressionListAddress.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param emailServiceName The name of the EmailService resource.
     * @param domainName The name of the Domains resource.
     * @param suppressionListName The name of the suppression list.
     * @param addressId The id of the address in a suppression list.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SuppressionListAddress.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SuppressionListAddressResourceInner get(String resourceGroupName, String emailServiceName, String domainName,
        String suppressionListName, String addressId) {
        return getWithResponse(resourceGroupName, emailServiceName, domainName, suppressionListName, addressId,
            Context.NONE).getValue();
    }

    /**
     * Create Or Update
     * 
     * Create or update a SuppressionListAddress.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param emailServiceName The name of the EmailService resource.
     * @param domainName The name of the Domains resource.
     * @param suppressionListName The name of the suppression list.
     * @param addressId The id of the address in a suppression list.
     * @param parameters Parameters for the create or update operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a object that represents a SuppressionList record along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SuppressionListAddressResourceInner>> createOrUpdateWithResponseAsync(
        String resourceGroupName, String emailServiceName, String domainName, String suppressionListName,
        String addressId, SuppressionListAddressResourceInner parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (emailServiceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter emailServiceName is required and cannot be null."));
        }
        if (domainName == null) {
            return Mono.error(new IllegalArgumentException("Parameter domainName is required and cannot be null."));
        }
        if (suppressionListName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter suppressionListName is required and cannot be null."));
        }
        if (addressId == null) {
            return Mono.error(new IllegalArgumentException("Parameter addressId is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createOrUpdate(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, emailServiceName, domainName, suppressionListName,
                addressId, parameters, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create Or Update
     * 
     * Create or update a SuppressionListAddress.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param emailServiceName The name of the EmailService resource.
     * @param domainName The name of the Domains resource.
     * @param suppressionListName The name of the suppression list.
     * @param addressId The id of the address in a suppression list.
     * @param parameters Parameters for the create or update operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a object that represents a SuppressionList record along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SuppressionListAddressResourceInner>> createOrUpdateWithResponseAsync(
        String resourceGroupName, String emailServiceName, String domainName, String suppressionListName,
        String addressId, SuppressionListAddressResourceInner parameters, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (emailServiceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter emailServiceName is required and cannot be null."));
        }
        if (domainName == null) {
            return Mono.error(new IllegalArgumentException("Parameter domainName is required and cannot be null."));
        }
        if (suppressionListName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter suppressionListName is required and cannot be null."));
        }
        if (addressId == null) {
            return Mono.error(new IllegalArgumentException("Parameter addressId is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.createOrUpdate(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, emailServiceName, domainName, suppressionListName,
            addressId, parameters, accept, context);
    }

    /**
     * Create Or Update
     * 
     * Create or update a SuppressionListAddress.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param emailServiceName The name of the EmailService resource.
     * @param domainName The name of the Domains resource.
     * @param suppressionListName The name of the suppression list.
     * @param addressId The id of the address in a suppression list.
     * @param parameters Parameters for the create or update operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a object that represents a SuppressionList record on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SuppressionListAddressResourceInner> createOrUpdateAsync(String resourceGroupName,
        String emailServiceName, String domainName, String suppressionListName, String addressId,
        SuppressionListAddressResourceInner parameters) {
        return createOrUpdateWithResponseAsync(resourceGroupName, emailServiceName, domainName, suppressionListName,
            addressId, parameters).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Create Or Update
     * 
     * Create or update a SuppressionListAddress.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param emailServiceName The name of the EmailService resource.
     * @param domainName The name of the Domains resource.
     * @param suppressionListName The name of the suppression list.
     * @param addressId The id of the address in a suppression list.
     * @param parameters Parameters for the create or update operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a object that represents a SuppressionList record along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SuppressionListAddressResourceInner> createOrUpdateWithResponse(String resourceGroupName,
        String emailServiceName, String domainName, String suppressionListName, String addressId,
        SuppressionListAddressResourceInner parameters, Context context) {
        return createOrUpdateWithResponseAsync(resourceGroupName, emailServiceName, domainName, suppressionListName,
            addressId, parameters, context).block();
    }

    /**
     * Create Or Update
     * 
     * Create or update a SuppressionListAddress.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param emailServiceName The name of the EmailService resource.
     * @param domainName The name of the Domains resource.
     * @param suppressionListName The name of the suppression list.
     * @param addressId The id of the address in a suppression list.
     * @param parameters Parameters for the create or update operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a object that represents a SuppressionList record.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SuppressionListAddressResourceInner createOrUpdate(String resourceGroupName, String emailServiceName,
        String domainName, String suppressionListName, String addressId,
        SuppressionListAddressResourceInner parameters) {
        return createOrUpdateWithResponse(resourceGroupName, emailServiceName, domainName, suppressionListName,
            addressId, parameters, Context.NONE).getValue();
    }

    /**
     * Delete
     * 
     * Operation to delete a single address from a suppression list.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param emailServiceName The name of the EmailService resource.
     * @param domainName The name of the Domains resource.
     * @param suppressionListName The name of the suppression list.
     * @param addressId The id of the address in a suppression list.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(String resourceGroupName, String emailServiceName,
        String domainName, String suppressionListName, String addressId) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (emailServiceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter emailServiceName is required and cannot be null."));
        }
        if (domainName == null) {
            return Mono.error(new IllegalArgumentException("Parameter domainName is required and cannot be null."));
        }
        if (suppressionListName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter suppressionListName is required and cannot be null."));
        }
        if (addressId == null) {
            return Mono.error(new IllegalArgumentException("Parameter addressId is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, emailServiceName, domainName, suppressionListName,
                addressId, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete
     * 
     * Operation to delete a single address from a suppression list.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param emailServiceName The name of the EmailService resource.
     * @param domainName The name of the Domains resource.
     * @param suppressionListName The name of the suppression list.
     * @param addressId The id of the address in a suppression list.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(String resourceGroupName, String emailServiceName,
        String domainName, String suppressionListName, String addressId, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (emailServiceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter emailServiceName is required and cannot be null."));
        }
        if (domainName == null) {
            return Mono.error(new IllegalArgumentException("Parameter domainName is required and cannot be null."));
        }
        if (suppressionListName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter suppressionListName is required and cannot be null."));
        }
        if (addressId == null) {
            return Mono.error(new IllegalArgumentException("Parameter addressId is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.delete(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, emailServiceName, domainName, suppressionListName, addressId, accept, context);
    }

    /**
     * Delete
     * 
     * Operation to delete a single address from a suppression list.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param emailServiceName The name of the EmailService resource.
     * @param domainName The name of the Domains resource.
     * @param suppressionListName The name of the suppression list.
     * @param addressId The id of the address in a suppression list.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String emailServiceName, String domainName,
        String suppressionListName, String addressId) {
        return deleteWithResponseAsync(resourceGroupName, emailServiceName, domainName, suppressionListName, addressId)
            .flatMap(ignored -> Mono.empty());
    }

    /**
     * Delete
     * 
     * Operation to delete a single address from a suppression list.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param emailServiceName The name of the EmailService resource.
     * @param domainName The name of the Domains resource.
     * @param suppressionListName The name of the suppression list.
     * @param addressId The id of the address in a suppression list.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(String resourceGroupName, String emailServiceName, String domainName,
        String suppressionListName, String addressId, Context context) {
        return deleteWithResponseAsync(resourceGroupName, emailServiceName, domainName, suppressionListName, addressId,
            context).block();
    }

    /**
     * Delete
     * 
     * Operation to delete a single address from a suppression list.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param emailServiceName The name of the EmailService resource.
     * @param domainName The name of the Domains resource.
     * @param suppressionListName The name of the suppression list.
     * @param addressId The id of the address in a suppression list.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String emailServiceName, String domainName, String suppressionListName,
        String addressId) {
        deleteWithResponse(resourceGroupName, emailServiceName, domainName, suppressionListName, addressId,
            Context.NONE);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of addresses in a suppression list along with {@link PagedResponse} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SuppressionListAddressResourceInner>> listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<SuppressionListAddressResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of addresses in a suppression list along with {@link PagedResponse} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SuppressionListAddressResourceInner>> listNextSinglePageAsync(String nextLink,
        Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }
}
