// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.communication.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.communication.fluent.SuppressionListsClient;
import com.azure.resourcemanager.communication.fluent.models.SuppressionListResourceInner;
import com.azure.resourcemanager.communication.models.SuppressionListResource;
import com.azure.resourcemanager.communication.models.SuppressionLists;

public final class SuppressionListsImpl implements SuppressionLists {
    private static final ClientLogger LOGGER = new ClientLogger(SuppressionListsImpl.class);

    private final SuppressionListsClient innerClient;

    private final com.azure.resourcemanager.communication.CommunicationManager serviceManager;

    public SuppressionListsImpl(SuppressionListsClient innerClient,
        com.azure.resourcemanager.communication.CommunicationManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<SuppressionListResource> listByDomain(String resourceGroupName, String emailServiceName,
        String domainName) {
        PagedIterable<SuppressionListResourceInner> inner
            = this.serviceClient().listByDomain(resourceGroupName, emailServiceName, domainName);
        return Utils.mapPage(inner, inner1 -> new SuppressionListResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<SuppressionListResource> listByDomain(String resourceGroupName, String emailServiceName,
        String domainName, Context context) {
        PagedIterable<SuppressionListResourceInner> inner
            = this.serviceClient().listByDomain(resourceGroupName, emailServiceName, domainName, context);
        return Utils.mapPage(inner, inner1 -> new SuppressionListResourceImpl(inner1, this.manager()));
    }

    public Response<SuppressionListResource> getWithResponse(String resourceGroupName, String emailServiceName,
        String domainName, String suppressionListName, Context context) {
        Response<SuppressionListResourceInner> inner = this.serviceClient().getWithResponse(resourceGroupName,
            emailServiceName, domainName, suppressionListName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new SuppressionListResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SuppressionListResource get(String resourceGroupName, String emailServiceName, String domainName,
        String suppressionListName) {
        SuppressionListResourceInner inner
            = this.serviceClient().get(resourceGroupName, emailServiceName, domainName, suppressionListName);
        if (inner != null) {
            return new SuppressionListResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteWithResponse(String resourceGroupName, String emailServiceName, String domainName,
        String suppressionListName, Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, emailServiceName, domainName,
            suppressionListName, context);
    }

    public void delete(String resourceGroupName, String emailServiceName, String domainName,
        String suppressionListName) {
        this.serviceClient().delete(resourceGroupName, emailServiceName, domainName, suppressionListName);
    }

    public SuppressionListResource getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String emailServiceName = Utils.getValueFromIdByName(id, "emailServices");
        if (emailServiceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'emailServices'.", id)));
        }
        String domainName = Utils.getValueFromIdByName(id, "domains");
        if (domainName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'domains'.", id)));
        }
        String suppressionListName = Utils.getValueFromIdByName(id, "suppressionLists");
        if (suppressionListName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'suppressionLists'.", id)));
        }
        return this.getWithResponse(resourceGroupName, emailServiceName, domainName, suppressionListName, Context.NONE)
            .getValue();
    }

    public Response<SuppressionListResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String emailServiceName = Utils.getValueFromIdByName(id, "emailServices");
        if (emailServiceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'emailServices'.", id)));
        }
        String domainName = Utils.getValueFromIdByName(id, "domains");
        if (domainName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'domains'.", id)));
        }
        String suppressionListName = Utils.getValueFromIdByName(id, "suppressionLists");
        if (suppressionListName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'suppressionLists'.", id)));
        }
        return this.getWithResponse(resourceGroupName, emailServiceName, domainName, suppressionListName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String emailServiceName = Utils.getValueFromIdByName(id, "emailServices");
        if (emailServiceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'emailServices'.", id)));
        }
        String domainName = Utils.getValueFromIdByName(id, "domains");
        if (domainName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'domains'.", id)));
        }
        String suppressionListName = Utils.getValueFromIdByName(id, "suppressionLists");
        if (suppressionListName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'suppressionLists'.", id)));
        }
        this.deleteWithResponse(resourceGroupName, emailServiceName, domainName, suppressionListName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String emailServiceName = Utils.getValueFromIdByName(id, "emailServices");
        if (emailServiceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'emailServices'.", id)));
        }
        String domainName = Utils.getValueFromIdByName(id, "domains");
        if (domainName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'domains'.", id)));
        }
        String suppressionListName = Utils.getValueFromIdByName(id, "suppressionLists");
        if (suppressionListName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'suppressionLists'.", id)));
        }
        return this.deleteWithResponse(resourceGroupName, emailServiceName, domainName, suppressionListName, context);
    }

    private SuppressionListsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.communication.CommunicationManager manager() {
        return this.serviceManager;
    }

    public SuppressionListResourceImpl define(String name) {
        return new SuppressionListResourceImpl(name, this.manager());
    }
}
