// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.communication.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Description of an Azure Notification Hub to link to the communication service.
 */
@Fluent
public final class LinkNotificationHubParameters implements JsonSerializable<LinkNotificationHubParameters> {
    /*
     * The resource ID of the notification hub
     */
    private String resourceId;

    /*
     * Connection string for the notification hub
     */
    private String connectionString;

    /**
     * Creates an instance of LinkNotificationHubParameters class.
     */
    public LinkNotificationHubParameters() {
    }

    /**
     * Get the resourceId property: The resource ID of the notification hub.
     * 
     * @return the resourceId value.
     */
    public String resourceId() {
        return this.resourceId;
    }

    /**
     * Set the resourceId property: The resource ID of the notification hub.
     * 
     * @param resourceId the resourceId value to set.
     * @return the LinkNotificationHubParameters object itself.
     */
    public LinkNotificationHubParameters withResourceId(String resourceId) {
        this.resourceId = resourceId;
        return this;
    }

    /**
     * Get the connectionString property: Connection string for the notification hub.
     * 
     * @return the connectionString value.
     */
    public String connectionString() {
        return this.connectionString;
    }

    /**
     * Set the connectionString property: Connection string for the notification hub.
     * 
     * @param connectionString the connectionString value to set.
     * @return the LinkNotificationHubParameters object itself.
     */
    public LinkNotificationHubParameters withConnectionString(String connectionString) {
        this.connectionString = connectionString;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (resourceId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property resourceId in model LinkNotificationHubParameters"));
        }
        if (connectionString() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property connectionString in model LinkNotificationHubParameters"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(LinkNotificationHubParameters.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("resourceId", this.resourceId);
        jsonWriter.writeStringField("connectionString", this.connectionString);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LinkNotificationHubParameters from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LinkNotificationHubParameters if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the LinkNotificationHubParameters.
     */
    public static LinkNotificationHubParameters fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LinkNotificationHubParameters deserializedLinkNotificationHubParameters
                = new LinkNotificationHubParameters();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("resourceId".equals(fieldName)) {
                    deserializedLinkNotificationHubParameters.resourceId = reader.getString();
                } else if ("connectionString".equals(fieldName)) {
                    deserializedLinkNotificationHubParameters.connectionString = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLinkNotificationHubParameters;
        });
    }
}
