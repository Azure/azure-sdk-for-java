// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.communication.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.communication.fluent.SuppressionListAddressesClient;
import com.azure.resourcemanager.communication.fluent.models.SuppressionListAddressResourceInner;
import com.azure.resourcemanager.communication.models.SuppressionListAddressResource;
import com.azure.resourcemanager.communication.models.SuppressionListAddresses;

public final class SuppressionListAddressesImpl implements SuppressionListAddresses {
    private static final ClientLogger LOGGER = new ClientLogger(SuppressionListAddressesImpl.class);

    private final SuppressionListAddressesClient innerClient;

    private final com.azure.resourcemanager.communication.CommunicationManager serviceManager;

    public SuppressionListAddressesImpl(SuppressionListAddressesClient innerClient,
        com.azure.resourcemanager.communication.CommunicationManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<SuppressionListAddressResource> list(String resourceGroupName, String emailServiceName,
        String domainName, String suppressionListName) {
        PagedIterable<SuppressionListAddressResourceInner> inner
            = this.serviceClient().list(resourceGroupName, emailServiceName, domainName, suppressionListName);
        return Utils.mapPage(inner, inner1 -> new SuppressionListAddressResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<SuppressionListAddressResource> list(String resourceGroupName, String emailServiceName,
        String domainName, String suppressionListName, Context context) {
        PagedIterable<SuppressionListAddressResourceInner> inner
            = this.serviceClient().list(resourceGroupName, emailServiceName, domainName, suppressionListName, context);
        return Utils.mapPage(inner, inner1 -> new SuppressionListAddressResourceImpl(inner1, this.manager()));
    }

    public Response<SuppressionListAddressResource> getWithResponse(String resourceGroupName, String emailServiceName,
        String domainName, String suppressionListName, String addressId, Context context) {
        Response<SuppressionListAddressResourceInner> inner = this.serviceClient().getWithResponse(resourceGroupName,
            emailServiceName, domainName, suppressionListName, addressId, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new SuppressionListAddressResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SuppressionListAddressResource get(String resourceGroupName, String emailServiceName, String domainName,
        String suppressionListName, String addressId) {
        SuppressionListAddressResourceInner inner
            = this.serviceClient().get(resourceGroupName, emailServiceName, domainName, suppressionListName, addressId);
        if (inner != null) {
            return new SuppressionListAddressResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteWithResponse(String resourceGroupName, String emailServiceName, String domainName,
        String suppressionListName, String addressId, Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, emailServiceName, domainName,
            suppressionListName, addressId, context);
    }

    public void delete(String resourceGroupName, String emailServiceName, String domainName, String suppressionListName,
        String addressId) {
        this.serviceClient().delete(resourceGroupName, emailServiceName, domainName, suppressionListName, addressId);
    }

    public SuppressionListAddressResource getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String emailServiceName = Utils.getValueFromIdByName(id, "emailServices");
        if (emailServiceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'emailServices'.", id)));
        }
        String domainName = Utils.getValueFromIdByName(id, "domains");
        if (domainName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'domains'.", id)));
        }
        String suppressionListName = Utils.getValueFromIdByName(id, "suppressionLists");
        if (suppressionListName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'suppressionLists'.", id)));
        }
        String addressId = Utils.getValueFromIdByName(id, "suppressionListAddresses");
        if (addressId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'suppressionListAddresses'.", id)));
        }
        return this.getWithResponse(resourceGroupName, emailServiceName, domainName, suppressionListName, addressId,
            Context.NONE).getValue();
    }

    public Response<SuppressionListAddressResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String emailServiceName = Utils.getValueFromIdByName(id, "emailServices");
        if (emailServiceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'emailServices'.", id)));
        }
        String domainName = Utils.getValueFromIdByName(id, "domains");
        if (domainName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'domains'.", id)));
        }
        String suppressionListName = Utils.getValueFromIdByName(id, "suppressionLists");
        if (suppressionListName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'suppressionLists'.", id)));
        }
        String addressId = Utils.getValueFromIdByName(id, "suppressionListAddresses");
        if (addressId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'suppressionListAddresses'.", id)));
        }
        return this.getWithResponse(resourceGroupName, emailServiceName, domainName, suppressionListName, addressId,
            context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String emailServiceName = Utils.getValueFromIdByName(id, "emailServices");
        if (emailServiceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'emailServices'.", id)));
        }
        String domainName = Utils.getValueFromIdByName(id, "domains");
        if (domainName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'domains'.", id)));
        }
        String suppressionListName = Utils.getValueFromIdByName(id, "suppressionLists");
        if (suppressionListName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'suppressionLists'.", id)));
        }
        String addressId = Utils.getValueFromIdByName(id, "suppressionListAddresses");
        if (addressId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'suppressionListAddresses'.", id)));
        }
        this.deleteWithResponse(resourceGroupName, emailServiceName, domainName, suppressionListName, addressId,
            Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String emailServiceName = Utils.getValueFromIdByName(id, "emailServices");
        if (emailServiceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'emailServices'.", id)));
        }
        String domainName = Utils.getValueFromIdByName(id, "domains");
        if (domainName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'domains'.", id)));
        }
        String suppressionListName = Utils.getValueFromIdByName(id, "suppressionLists");
        if (suppressionListName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'suppressionLists'.", id)));
        }
        String addressId = Utils.getValueFromIdByName(id, "suppressionListAddresses");
        if (addressId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'suppressionListAddresses'.", id)));
        }
        return this.deleteWithResponse(resourceGroupName, emailServiceName, domainName, suppressionListName, addressId,
            context);
    }

    private SuppressionListAddressesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.communication.CommunicationManager manager() {
        return this.serviceManager;
    }

    public SuppressionListAddressResourceImpl define(String name) {
        return new SuppressionListAddressResourceImpl(name, this.manager());
    }
}
