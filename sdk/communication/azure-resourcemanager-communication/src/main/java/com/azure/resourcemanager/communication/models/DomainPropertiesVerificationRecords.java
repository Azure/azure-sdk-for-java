// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.communication.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * List of DnsRecord.
 */
@Fluent
public final class DomainPropertiesVerificationRecords
    implements JsonSerializable<DomainPropertiesVerificationRecords> {
    /*
     * A class that represents a VerificationStatus record.
     */
    private DnsRecord domain;

    /*
     * A class that represents a VerificationStatus record.
     */
    private DnsRecord spf;

    /*
     * A class that represents a VerificationStatus record.
     */
    private DnsRecord dkim;

    /*
     * A class that represents a VerificationStatus record.
     */
    private DnsRecord dkim2;

    /*
     * A class that represents a VerificationStatus record.
     */
    private DnsRecord dmarc;

    /**
     * Creates an instance of DomainPropertiesVerificationRecords class.
     */
    public DomainPropertiesVerificationRecords() {
    }

    /**
     * Get the domain property: A class that represents a VerificationStatus record.
     * 
     * @return the domain value.
     */
    public DnsRecord domain() {
        return this.domain;
    }

    /**
     * Set the domain property: A class that represents a VerificationStatus record.
     * 
     * @param domain the domain value to set.
     * @return the DomainPropertiesVerificationRecords object itself.
     */
    public DomainPropertiesVerificationRecords withDomain(DnsRecord domain) {
        this.domain = domain;
        return this;
    }

    /**
     * Get the spf property: A class that represents a VerificationStatus record.
     * 
     * @return the spf value.
     */
    public DnsRecord spf() {
        return this.spf;
    }

    /**
     * Set the spf property: A class that represents a VerificationStatus record.
     * 
     * @param spf the spf value to set.
     * @return the DomainPropertiesVerificationRecords object itself.
     */
    public DomainPropertiesVerificationRecords withSpf(DnsRecord spf) {
        this.spf = spf;
        return this;
    }

    /**
     * Get the dkim property: A class that represents a VerificationStatus record.
     * 
     * @return the dkim value.
     */
    public DnsRecord dkim() {
        return this.dkim;
    }

    /**
     * Set the dkim property: A class that represents a VerificationStatus record.
     * 
     * @param dkim the dkim value to set.
     * @return the DomainPropertiesVerificationRecords object itself.
     */
    public DomainPropertiesVerificationRecords withDkim(DnsRecord dkim) {
        this.dkim = dkim;
        return this;
    }

    /**
     * Get the dkim2 property: A class that represents a VerificationStatus record.
     * 
     * @return the dkim2 value.
     */
    public DnsRecord dkim2() {
        return this.dkim2;
    }

    /**
     * Set the dkim2 property: A class that represents a VerificationStatus record.
     * 
     * @param dkim2 the dkim2 value to set.
     * @return the DomainPropertiesVerificationRecords object itself.
     */
    public DomainPropertiesVerificationRecords withDkim2(DnsRecord dkim2) {
        this.dkim2 = dkim2;
        return this;
    }

    /**
     * Get the dmarc property: A class that represents a VerificationStatus record.
     * 
     * @return the dmarc value.
     */
    public DnsRecord dmarc() {
        return this.dmarc;
    }

    /**
     * Set the dmarc property: A class that represents a VerificationStatus record.
     * 
     * @param dmarc the dmarc value to set.
     * @return the DomainPropertiesVerificationRecords object itself.
     */
    public DomainPropertiesVerificationRecords withDmarc(DnsRecord dmarc) {
        this.dmarc = dmarc;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (domain() != null) {
            domain().validate();
        }
        if (spf() != null) {
            spf().validate();
        }
        if (dkim() != null) {
            dkim().validate();
        }
        if (dkim2() != null) {
            dkim2().validate();
        }
        if (dmarc() != null) {
            dmarc().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("Domain", this.domain);
        jsonWriter.writeJsonField("SPF", this.spf);
        jsonWriter.writeJsonField("DKIM", this.dkim);
        jsonWriter.writeJsonField("DKIM2", this.dkim2);
        jsonWriter.writeJsonField("DMARC", this.dmarc);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DomainPropertiesVerificationRecords from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DomainPropertiesVerificationRecords if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DomainPropertiesVerificationRecords.
     */
    public static DomainPropertiesVerificationRecords fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DomainPropertiesVerificationRecords deserializedDomainPropertiesVerificationRecords
                = new DomainPropertiesVerificationRecords();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("Domain".equals(fieldName)) {
                    deserializedDomainPropertiesVerificationRecords.domain = DnsRecord.fromJson(reader);
                } else if ("SPF".equals(fieldName)) {
                    deserializedDomainPropertiesVerificationRecords.spf = DnsRecord.fromJson(reader);
                } else if ("DKIM".equals(fieldName)) {
                    deserializedDomainPropertiesVerificationRecords.dkim = DnsRecord.fromJson(reader);
                } else if ("DKIM2".equals(fieldName)) {
                    deserializedDomainPropertiesVerificationRecords.dkim2 = DnsRecord.fromJson(reader);
                } else if ("DMARC".equals(fieldName)) {
                    deserializedDomainPropertiesVerificationRecords.dmarc = DnsRecord.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDomainPropertiesVerificationRecords;
        });
    }
}
