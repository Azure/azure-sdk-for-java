// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.


package com.azure.communication.callautomation.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;

import java.util.Map;

/**
 *  Custom context details.
 */
@Fluent
public final class CustomContext {
    private final Map<String, String> sipHeaders;
    private final Map<String, String> voipHeaders;
    private final ClientLogger logger;

    /**
     * Create a CustomContext object with SIP and VOIP headers
     * @param sipHeaders custom context SIP headers
     * @param voipHeaders custom context VOIP headers
     */
    CustomContext(Map<String, String> sipHeaders, Map<String, String> voipHeaders) {
        this.sipHeaders = sipHeaders;
        this.voipHeaders = voipHeaders;
        this.logger = new ClientLogger(CustomContext.class);
    }

    /**
     * Get list of custom context SIP headers
     * @return list of custom context SIP headers
     */
    public Map<String, String> getSipHeaders() {
        return sipHeaders;
    }

    /**
     * Get list of custom context VOIP headers
     * @return list of custom context VOIP headers
     */
    public Map<String, String> getVoipHeaders() {
        return voipHeaders;
    }

    /**
     * Add or update a custom context header
     * @param header the custom context SIP UUI, SIP custom or VOIP header
     * @throws IllegalStateException If sipHeaders or voipHeaders is null
     */
    public void addOrUpdate(CustomContextHeader header) {
        if (header instanceof SIPUUIHeader) {
            if (sipHeaders == null) {
                throw logger.logExceptionAsError(new IllegalStateException(
                    "Cannot add sip header, SipHeaders is null."));
            }
            SIPUUIHeader sipUUIHeader = (SIPUUIHeader) header;
            sipHeaders.put(sipUUIHeader.getKey(), sipUUIHeader.getValue());
        } else if (header instanceof SIPCustomHeader) {
            if (sipHeaders == null) {
                throw logger.logExceptionAsError(new IllegalStateException(
                    "Cannot add sip header, SipHeaders is null."));
            }
            SIPCustomHeader sipCustomHeader = (SIPCustomHeader) header;
            sipHeaders.put(sipCustomHeader.getKey(), sipCustomHeader.getValue());
        } else if (header instanceof VoipHeader) {
            if (voipHeaders == null) {
                throw logger.logExceptionAsError(new IllegalStateException(
                    "Cannot add voip header, VoipHeaders is null."));
            }
            VoipHeader voipHeader = (VoipHeader) header;
            voipHeaders.put(voipHeader.getKey(), voipHeader.getValue());
        } else {
            throw logger.logExceptionAsError(new IllegalStateException(
                "Unknown custom context header type."));
        }
    }
}
