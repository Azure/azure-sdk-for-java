// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.communication.callautomation.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Container for details relating to the original caller of the call.
 */
@Fluent
public final class TeamsPhoneCallerDetails implements JsonSerializable<TeamsPhoneCallerDetails> {
    /*
     * Caller's ID
     */
    @Generated
    private CommunicationIdentifierModel caller;

    /*
     * Caller's name
     */
    @Generated
    private String name;

    /*
     * Caller's phone number
     */
    @Generated
    private String phoneNumber;

    /*
     * Caller's record ID (ex in CRM)
     */
    @Generated
    private String recordId;

    /*
     * Caller's screen pop URL
     */
    @Generated
    private String screenPopUrl;

    /*
     * Flag indicating whether the caller was authenticated
     */
    @Generated
    private Boolean isAuthenticated;

    /*
     * A set of key value pairs (max 10, any additional entries would be ignored) which a bot author wants to pass to
     * the Teams Client for display to the agent
     */
    @Generated
    private Map<String, String> additionalCallerInformation;

    /**
     * Creates an instance of TeamsPhoneCallerDetails class.
     */
    @Generated
    public TeamsPhoneCallerDetails() {
    }

    /**
     * Get the caller property: Caller's ID.
     * 
     * @return the caller value.
     */
    @Generated
    public CommunicationIdentifierModel getCaller() {
        return this.caller;
    }

    /**
     * Set the caller property: Caller's ID.
     * 
     * @param caller the caller value to set.
     * @return the TeamsPhoneCallerDetails object itself.
     */
    @Generated
    public TeamsPhoneCallerDetails setCaller(CommunicationIdentifierModel caller) {
        this.caller = caller;
        return this;
    }

    /**
     * Get the name property: Caller's name.
     * 
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Set the name property: Caller's name.
     * 
     * @param name the name value to set.
     * @return the TeamsPhoneCallerDetails object itself.
     */
    @Generated
    public TeamsPhoneCallerDetails setName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the phoneNumber property: Caller's phone number.
     * 
     * @return the phoneNumber value.
     */
    @Generated
    public String getPhoneNumber() {
        return this.phoneNumber;
    }

    /**
     * Set the phoneNumber property: Caller's phone number.
     * 
     * @param phoneNumber the phoneNumber value to set.
     * @return the TeamsPhoneCallerDetails object itself.
     */
    @Generated
    public TeamsPhoneCallerDetails setPhoneNumber(String phoneNumber) {
        this.phoneNumber = phoneNumber;
        return this;
    }

    /**
     * Get the recordId property: Caller's record ID (ex in CRM).
     * 
     * @return the recordId value.
     */
    @Generated
    public String getRecordId() {
        return this.recordId;
    }

    /**
     * Set the recordId property: Caller's record ID (ex in CRM).
     * 
     * @param recordId the recordId value to set.
     * @return the TeamsPhoneCallerDetails object itself.
     */
    @Generated
    public TeamsPhoneCallerDetails setRecordId(String recordId) {
        this.recordId = recordId;
        return this;
    }

    /**
     * Get the screenPopUrl property: Caller's screen pop URL.
     * 
     * @return the screenPopUrl value.
     */
    @Generated
    public String getScreenPopUrl() {
        return this.screenPopUrl;
    }

    /**
     * Set the screenPopUrl property: Caller's screen pop URL.
     * 
     * @param screenPopUrl the screenPopUrl value to set.
     * @return the TeamsPhoneCallerDetails object itself.
     */
    @Generated
    public TeamsPhoneCallerDetails setScreenPopUrl(String screenPopUrl) {
        this.screenPopUrl = screenPopUrl;
        return this;
    }

    /**
     * Get the isAuthenticated property: Flag indicating whether the caller was authenticated.
     * 
     * @return the isAuthenticated value.
     */
    @Generated
    public Boolean isAuthenticated() {
        return this.isAuthenticated;
    }

    /**
     * Set the isAuthenticated property: Flag indicating whether the caller was authenticated.
     * 
     * @param isAuthenticated the isAuthenticated value to set.
     * @return the TeamsPhoneCallerDetails object itself.
     */
    @Generated
    public TeamsPhoneCallerDetails setIsAuthenticated(Boolean isAuthenticated) {
        this.isAuthenticated = isAuthenticated;
        return this;
    }

    /**
     * Get the additionalCallerInformation property: A set of key value pairs (max 10, any additional entries would be
     * ignored) which a bot author wants to pass to the Teams Client for display to the agent.
     * 
     * @return the additionalCallerInformation value.
     */
    @Generated
    public Map<String, String> getAdditionalCallerInformation() {
        return this.additionalCallerInformation;
    }

    /**
     * Set the additionalCallerInformation property: A set of key value pairs (max 10, any additional entries would be
     * ignored) which a bot author wants to pass to the Teams Client for display to the agent.
     * 
     * @param additionalCallerInformation the additionalCallerInformation value to set.
     * @return the TeamsPhoneCallerDetails object itself.
     */
    @Generated
    public TeamsPhoneCallerDetails setAdditionalCallerInformation(Map<String, String> additionalCallerInformation) {
        this.additionalCallerInformation = additionalCallerInformation;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("caller", this.caller);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("phoneNumber", this.phoneNumber);
        jsonWriter.writeStringField("recordId", this.recordId);
        jsonWriter.writeStringField("screenPopUrl", this.screenPopUrl);
        jsonWriter.writeBooleanField("isAuthenticated", this.isAuthenticated);
        jsonWriter.writeMapField("additionalCallerInformation", this.additionalCallerInformation,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TeamsPhoneCallerDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TeamsPhoneCallerDetails if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TeamsPhoneCallerDetails.
     */
    @Generated
    public static TeamsPhoneCallerDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TeamsPhoneCallerDetails deserializedTeamsPhoneCallerDetails = new TeamsPhoneCallerDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("caller".equals(fieldName)) {
                    deserializedTeamsPhoneCallerDetails.caller = CommunicationIdentifierModel.fromJson(reader);
                } else if ("name".equals(fieldName)) {
                    deserializedTeamsPhoneCallerDetails.name = reader.getString();
                } else if ("phoneNumber".equals(fieldName)) {
                    deserializedTeamsPhoneCallerDetails.phoneNumber = reader.getString();
                } else if ("recordId".equals(fieldName)) {
                    deserializedTeamsPhoneCallerDetails.recordId = reader.getString();
                } else if ("screenPopUrl".equals(fieldName)) {
                    deserializedTeamsPhoneCallerDetails.screenPopUrl = reader.getString();
                } else if ("isAuthenticated".equals(fieldName)) {
                    deserializedTeamsPhoneCallerDetails.isAuthenticated = reader.getNullable(JsonReader::getBoolean);
                } else if ("additionalCallerInformation".equals(fieldName)) {
                    Map<String, String> additionalCallerInformation = reader.readMap(reader1 -> reader1.getString());
                    deserializedTeamsPhoneCallerDetails.additionalCallerInformation = additionalCallerInformation;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTeamsPhoneCallerDetails;
        });
    }
}
