// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.communication.callautomation.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The UpdateTranscriptionRequestInternal model.
 */
@Fluent
public final class UpdateTranscriptionRequestInternal implements JsonSerializable<UpdateTranscriptionRequestInternal> {
    /*
     * Defines new locale for transcription.
     */
    @Generated
    private String locale;

    /*
     * Sets Endpoint id where the custom model was deployed.
     */
    @Generated
    private String speechModelEndpointId;

    /*
     * The value to identify context of the operation.
     */
    @Generated
    private String operationContext;

    /*
     * Set a callback URI that overrides the default callback URI set by CreateCall/AnswerCall for this operation.
     * This setup is per-action. If this is not set, the default callback URI set by CreateCall/AnswerCall will be used.
     */
    @Generated
    private String operationCallbackUri;

    /*
     * PII redaction configuration options.
     */
    @Generated
    private PiiRedactionOptionsInternal piiRedactionOptions;

    /*
     * Indicating if sentiment analysis should be used.
     */
    @Generated
    private Boolean enableSentimentAnalysis;

    /*
     * Summarization configuration options.
     */
    @Generated
    private SummarizationOptionsInternal summarizationOptions;

    /**
     * Creates an instance of UpdateTranscriptionRequestInternal class.
     */
    @Generated
    public UpdateTranscriptionRequestInternal() {
    }

    /**
     * Get the locale property: Defines new locale for transcription.
     * 
     * @return the locale value.
     */
    @Generated
    public String getLocale() {
        return this.locale;
    }

    /**
     * Set the locale property: Defines new locale for transcription.
     * 
     * @param locale the locale value to set.
     * @return the UpdateTranscriptionRequestInternal object itself.
     */
    @Generated
    public UpdateTranscriptionRequestInternal setLocale(String locale) {
        this.locale = locale;
        return this;
    }

    /**
     * Get the speechModelEndpointId property: Sets Endpoint id where the custom model was deployed.
     * 
     * @return the speechModelEndpointId value.
     */
    @Generated
    public String getSpeechModelEndpointId() {
        return this.speechModelEndpointId;
    }

    /**
     * Set the speechModelEndpointId property: Sets Endpoint id where the custom model was deployed.
     * 
     * @param speechModelEndpointId the speechModelEndpointId value to set.
     * @return the UpdateTranscriptionRequestInternal object itself.
     */
    @Generated
    public UpdateTranscriptionRequestInternal setSpeechModelEndpointId(String speechModelEndpointId) {
        this.speechModelEndpointId = speechModelEndpointId;
        return this;
    }

    /**
     * Get the operationContext property: The value to identify context of the operation.
     * 
     * @return the operationContext value.
     */
    @Generated
    public String getOperationContext() {
        return this.operationContext;
    }

    /**
     * Set the operationContext property: The value to identify context of the operation.
     * 
     * @param operationContext the operationContext value to set.
     * @return the UpdateTranscriptionRequestInternal object itself.
     */
    @Generated
    public UpdateTranscriptionRequestInternal setOperationContext(String operationContext) {
        this.operationContext = operationContext;
        return this;
    }

    /**
     * Get the operationCallbackUri property: Set a callback URI that overrides the default callback URI set by
     * CreateCall/AnswerCall for this operation.
     * This setup is per-action. If this is not set, the default callback URI set by CreateCall/AnswerCall will be used.
     * 
     * @return the operationCallbackUri value.
     */
    @Generated
    public String getOperationCallbackUri() {
        return this.operationCallbackUri;
    }

    /**
     * Set the operationCallbackUri property: Set a callback URI that overrides the default callback URI set by
     * CreateCall/AnswerCall for this operation.
     * This setup is per-action. If this is not set, the default callback URI set by CreateCall/AnswerCall will be used.
     * 
     * @param operationCallbackUri the operationCallbackUri value to set.
     * @return the UpdateTranscriptionRequestInternal object itself.
     */
    @Generated
    public UpdateTranscriptionRequestInternal setOperationCallbackUri(String operationCallbackUri) {
        this.operationCallbackUri = operationCallbackUri;
        return this;
    }

    /**
     * Get the piiRedactionOptions property: PII redaction configuration options.
     * 
     * @return the piiRedactionOptions value.
     */
    @Generated
    public PiiRedactionOptionsInternal getPiiRedactionOptions() {
        return this.piiRedactionOptions;
    }

    /**
     * Set the piiRedactionOptions property: PII redaction configuration options.
     * 
     * @param piiRedactionOptions the piiRedactionOptions value to set.
     * @return the UpdateTranscriptionRequestInternal object itself.
     */
    @Generated
    public UpdateTranscriptionRequestInternal setPiiRedactionOptions(PiiRedactionOptionsInternal piiRedactionOptions) {
        this.piiRedactionOptions = piiRedactionOptions;
        return this;
    }

    /**
     * Get the enableSentimentAnalysis property: Indicating if sentiment analysis should be used.
     * 
     * @return the enableSentimentAnalysis value.
     */
    @Generated
    public Boolean isEnableSentimentAnalysis() {
        return this.enableSentimentAnalysis;
    }

    /**
     * Set the enableSentimentAnalysis property: Indicating if sentiment analysis should be used.
     * 
     * @param enableSentimentAnalysis the enableSentimentAnalysis value to set.
     * @return the UpdateTranscriptionRequestInternal object itself.
     */
    @Generated
    public UpdateTranscriptionRequestInternal setEnableSentimentAnalysis(Boolean enableSentimentAnalysis) {
        this.enableSentimentAnalysis = enableSentimentAnalysis;
        return this;
    }

    /**
     * Get the summarizationOptions property: Summarization configuration options.
     * 
     * @return the summarizationOptions value.
     */
    @Generated
    public SummarizationOptionsInternal getSummarizationOptions() {
        return this.summarizationOptions;
    }

    /**
     * Set the summarizationOptions property: Summarization configuration options.
     * 
     * @param summarizationOptions the summarizationOptions value to set.
     * @return the UpdateTranscriptionRequestInternal object itself.
     */
    @Generated
    public UpdateTranscriptionRequestInternal
        setSummarizationOptions(SummarizationOptionsInternal summarizationOptions) {
        this.summarizationOptions = summarizationOptions;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("locale", this.locale);
        jsonWriter.writeStringField("speechModelEndpointId", this.speechModelEndpointId);
        jsonWriter.writeStringField("operationContext", this.operationContext);
        jsonWriter.writeStringField("operationCallbackUri", this.operationCallbackUri);
        jsonWriter.writeJsonField("piiRedactionOptions", this.piiRedactionOptions);
        jsonWriter.writeBooleanField("enableSentimentAnalysis", this.enableSentimentAnalysis);
        jsonWriter.writeJsonField("summarizationOptions", this.summarizationOptions);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UpdateTranscriptionRequestInternal from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UpdateTranscriptionRequestInternal if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the UpdateTranscriptionRequestInternal.
     */
    @Generated
    public static UpdateTranscriptionRequestInternal fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UpdateTranscriptionRequestInternal deserializedUpdateTranscriptionRequestInternal
                = new UpdateTranscriptionRequestInternal();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("locale".equals(fieldName)) {
                    deserializedUpdateTranscriptionRequestInternal.locale = reader.getString();
                } else if ("speechModelEndpointId".equals(fieldName)) {
                    deserializedUpdateTranscriptionRequestInternal.speechModelEndpointId = reader.getString();
                } else if ("operationContext".equals(fieldName)) {
                    deserializedUpdateTranscriptionRequestInternal.operationContext = reader.getString();
                } else if ("operationCallbackUri".equals(fieldName)) {
                    deserializedUpdateTranscriptionRequestInternal.operationCallbackUri = reader.getString();
                } else if ("piiRedactionOptions".equals(fieldName)) {
                    deserializedUpdateTranscriptionRequestInternal.piiRedactionOptions
                        = PiiRedactionOptionsInternal.fromJson(reader);
                } else if ("enableSentimentAnalysis".equals(fieldName)) {
                    deserializedUpdateTranscriptionRequestInternal.enableSentimentAnalysis
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("summarizationOptions".equals(fieldName)) {
                    deserializedUpdateTranscriptionRequestInternal.summarizationOptions
                        = SummarizationOptionsInternal.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUpdateTranscriptionRequestInternal;
        });
    }
}
