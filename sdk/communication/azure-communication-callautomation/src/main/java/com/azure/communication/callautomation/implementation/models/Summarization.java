// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.communication.callautomation.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The Summarization model.
 */
@Fluent
public final class Summarization implements JsonSerializable<Summarization> {
    /*
     * Determine if the summarization should be enabled for the post recording processing.
     */
    @Generated
    private boolean enableSummarization;

    /**
     * Creates an instance of Summarization class.
     */
    @Generated
    public Summarization() {
    }

    /**
     * Get the enableSummarization property: Determine if the summarization should be enabled for the post recording
     * processing.
     * 
     * @return the enableSummarization value.
     */
    @Generated
    public boolean isEnableSummarization() {
        return this.enableSummarization;
    }

    /**
     * Set the enableSummarization property: Determine if the summarization should be enabled for the post recording
     * processing.
     * 
     * @param enableSummarization the enableSummarization value to set.
     * @return the Summarization object itself.
     */
    @Generated
    public Summarization setEnableSummarization(boolean enableSummarization) {
        this.enableSummarization = enableSummarization;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("enableSummarization", this.enableSummarization);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Summarization from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Summarization if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Summarization.
     */
    @Generated
    public static Summarization fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Summarization deserializedSummarization = new Summarization();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("enableSummarization".equals(fieldName)) {
                    deserializedSummarization.enableSummarization = reader.getBoolean();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSummarization;
        });
    }
}
