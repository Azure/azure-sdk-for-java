// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.communication.callautomation.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Configuration of live transcription.
 */
@Fluent
public final class TranscriptionOptionsInternal implements JsonSerializable<TranscriptionOptionsInternal> {
    /*
     * Transport URL for live transcription
     */
    @Generated
    private String transportUrl;

    /*
     * The type of transport to be used for live transcription, eg. Websocket
     */
    @Generated
    private TranscriptionTransportTypeInternal transportType;

    /*
     * Defines the locale for the data e.g en-CA, en-AU
     */
    @Generated
    private String locale;

    /*
     * Endpoint where the custom model was deployed.
     */
    @Generated
    private String speechModelEndpointId;

    /*
     * Determines if the transcription should be started immediately after call is answered or not.
     */
    @Generated
    private boolean startTranscription;

    /*
     * Enables intermediate results for the transcribed speech.
     */
    @Generated
    private Boolean enableIntermediateResults;

    /*
     * PII redaction configuration options.
     */
    @Generated
    private PiiRedactionOptionsInternal piiRedactionOptions;

    /*
     * Indicating if sentiment analysis should be used.
     */
    @Generated
    private Boolean enableSentimentAnalysis;

    /*
     * List of languages for Language Identification.
     */
    @Generated
    private List<String> locales;

    /*
     * Summarization configuration options.
     */
    @Generated
    private SummarizationOptionsInternal summarizationOptions;

    /**
     * Creates an instance of TranscriptionOptionsInternal class.
     */
    @Generated
    public TranscriptionOptionsInternal() {
    }

    /**
     * Get the transportUrl property: Transport URL for live transcription.
     * 
     * @return the transportUrl value.
     */
    @Generated
    public String getTransportUrl() {
        return this.transportUrl;
    }

    /**
     * Set the transportUrl property: Transport URL for live transcription.
     * 
     * @param transportUrl the transportUrl value to set.
     * @return the TranscriptionOptionsInternal object itself.
     */
    @Generated
    public TranscriptionOptionsInternal setTransportUrl(String transportUrl) {
        this.transportUrl = transportUrl;
        return this;
    }

    /**
     * Get the transportType property: The type of transport to be used for live transcription, eg. Websocket.
     * 
     * @return the transportType value.
     */
    @Generated
    public TranscriptionTransportTypeInternal getTransportType() {
        return this.transportType;
    }

    /**
     * Set the transportType property: The type of transport to be used for live transcription, eg. Websocket.
     * 
     * @param transportType the transportType value to set.
     * @return the TranscriptionOptionsInternal object itself.
     */
    @Generated
    public TranscriptionOptionsInternal setTransportType(TranscriptionTransportTypeInternal transportType) {
        this.transportType = transportType;
        return this;
    }

    /**
     * Get the locale property: Defines the locale for the data e.g en-CA, en-AU.
     * 
     * @return the locale value.
     */
    @Generated
    public String getLocale() {
        return this.locale;
    }

    /**
     * Set the locale property: Defines the locale for the data e.g en-CA, en-AU.
     * 
     * @param locale the locale value to set.
     * @return the TranscriptionOptionsInternal object itself.
     */
    @Generated
    public TranscriptionOptionsInternal setLocale(String locale) {
        this.locale = locale;
        return this;
    }

    /**
     * Get the speechModelEndpointId property: Endpoint where the custom model was deployed.
     * 
     * @return the speechModelEndpointId value.
     */
    @Generated
    public String getSpeechModelEndpointId() {
        return this.speechModelEndpointId;
    }

    /**
     * Set the speechModelEndpointId property: Endpoint where the custom model was deployed.
     * 
     * @param speechModelEndpointId the speechModelEndpointId value to set.
     * @return the TranscriptionOptionsInternal object itself.
     */
    @Generated
    public TranscriptionOptionsInternal setSpeechModelEndpointId(String speechModelEndpointId) {
        this.speechModelEndpointId = speechModelEndpointId;
        return this;
    }

    /**
     * Get the startTranscription property: Determines if the transcription should be started immediately after call is
     * answered or not.
     * 
     * @return the startTranscription value.
     */
    @Generated
    public boolean isStartTranscription() {
        return this.startTranscription;
    }

    /**
     * Set the startTranscription property: Determines if the transcription should be started immediately after call is
     * answered or not.
     * 
     * @param startTranscription the startTranscription value to set.
     * @return the TranscriptionOptionsInternal object itself.
     */
    @Generated
    public TranscriptionOptionsInternal setStartTranscription(boolean startTranscription) {
        this.startTranscription = startTranscription;
        return this;
    }

    /**
     * Get the enableIntermediateResults property: Enables intermediate results for the transcribed speech.
     * 
     * @return the enableIntermediateResults value.
     */
    @Generated
    public Boolean isEnableIntermediateResults() {
        return this.enableIntermediateResults;
    }

    /**
     * Set the enableIntermediateResults property: Enables intermediate results for the transcribed speech.
     * 
     * @param enableIntermediateResults the enableIntermediateResults value to set.
     * @return the TranscriptionOptionsInternal object itself.
     */
    @Generated
    public TranscriptionOptionsInternal setEnableIntermediateResults(Boolean enableIntermediateResults) {
        this.enableIntermediateResults = enableIntermediateResults;
        return this;
    }

    /**
     * Get the piiRedactionOptions property: PII redaction configuration options.
     * 
     * @return the piiRedactionOptions value.
     */
    @Generated
    public PiiRedactionOptionsInternal getPiiRedactionOptions() {
        return this.piiRedactionOptions;
    }

    /**
     * Set the piiRedactionOptions property: PII redaction configuration options.
     * 
     * @param piiRedactionOptions the piiRedactionOptions value to set.
     * @return the TranscriptionOptionsInternal object itself.
     */
    @Generated
    public TranscriptionOptionsInternal setPiiRedactionOptions(PiiRedactionOptionsInternal piiRedactionOptions) {
        this.piiRedactionOptions = piiRedactionOptions;
        return this;
    }

    /**
     * Get the enableSentimentAnalysis property: Indicating if sentiment analysis should be used.
     * 
     * @return the enableSentimentAnalysis value.
     */
    @Generated
    public Boolean isEnableSentimentAnalysis() {
        return this.enableSentimentAnalysis;
    }

    /**
     * Set the enableSentimentAnalysis property: Indicating if sentiment analysis should be used.
     * 
     * @param enableSentimentAnalysis the enableSentimentAnalysis value to set.
     * @return the TranscriptionOptionsInternal object itself.
     */
    @Generated
    public TranscriptionOptionsInternal setEnableSentimentAnalysis(Boolean enableSentimentAnalysis) {
        this.enableSentimentAnalysis = enableSentimentAnalysis;
        return this;
    }

    /**
     * Get the locales property: List of languages for Language Identification.
     * 
     * @return the locales value.
     */
    @Generated
    public List<String> getLocales() {
        return this.locales;
    }

    /**
     * Set the locales property: List of languages for Language Identification.
     * 
     * @param locales the locales value to set.
     * @return the TranscriptionOptionsInternal object itself.
     */
    @Generated
    public TranscriptionOptionsInternal setLocales(List<String> locales) {
        this.locales = locales;
        return this;
    }

    /**
     * Get the summarizationOptions property: Summarization configuration options.
     * 
     * @return the summarizationOptions value.
     */
    @Generated
    public SummarizationOptionsInternal getSummarizationOptions() {
        return this.summarizationOptions;
    }

    /**
     * Set the summarizationOptions property: Summarization configuration options.
     * 
     * @param summarizationOptions the summarizationOptions value to set.
     * @return the TranscriptionOptionsInternal object itself.
     */
    @Generated
    public TranscriptionOptionsInternal setSummarizationOptions(SummarizationOptionsInternal summarizationOptions) {
        this.summarizationOptions = summarizationOptions;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("transportUrl", this.transportUrl);
        jsonWriter.writeStringField("transportType", this.transportType == null ? null : this.transportType.toString());
        jsonWriter.writeBooleanField("startTranscription", this.startTranscription);
        jsonWriter.writeStringField("locale", this.locale);
        jsonWriter.writeStringField("speechModelEndpointId", this.speechModelEndpointId);
        jsonWriter.writeBooleanField("enableIntermediateResults", this.enableIntermediateResults);
        jsonWriter.writeJsonField("piiRedactionOptions", this.piiRedactionOptions);
        jsonWriter.writeBooleanField("enableSentimentAnalysis", this.enableSentimentAnalysis);
        jsonWriter.writeArrayField("locales", this.locales, (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("summarizationOptions", this.summarizationOptions);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TranscriptionOptionsInternal from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TranscriptionOptionsInternal if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TranscriptionOptionsInternal.
     */
    @Generated
    public static TranscriptionOptionsInternal fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TranscriptionOptionsInternal deserializedTranscriptionOptionsInternal = new TranscriptionOptionsInternal();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("transportUrl".equals(fieldName)) {
                    deserializedTranscriptionOptionsInternal.transportUrl = reader.getString();
                } else if ("transportType".equals(fieldName)) {
                    deserializedTranscriptionOptionsInternal.transportType
                        = TranscriptionTransportTypeInternal.fromString(reader.getString());
                } else if ("startTranscription".equals(fieldName)) {
                    deserializedTranscriptionOptionsInternal.startTranscription = reader.getBoolean();
                } else if ("locale".equals(fieldName)) {
                    deserializedTranscriptionOptionsInternal.locale = reader.getString();
                } else if ("speechModelEndpointId".equals(fieldName)) {
                    deserializedTranscriptionOptionsInternal.speechModelEndpointId = reader.getString();
                } else if ("enableIntermediateResults".equals(fieldName)) {
                    deserializedTranscriptionOptionsInternal.enableIntermediateResults
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("piiRedactionOptions".equals(fieldName)) {
                    deserializedTranscriptionOptionsInternal.piiRedactionOptions
                        = PiiRedactionOptionsInternal.fromJson(reader);
                } else if ("enableSentimentAnalysis".equals(fieldName)) {
                    deserializedTranscriptionOptionsInternal.enableSentimentAnalysis
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("locales".equals(fieldName)) {
                    List<String> locales = reader.readArray(reader1 -> reader1.getString());
                    deserializedTranscriptionOptionsInternal.locales = locales;
                } else if ("summarizationOptions".equals(fieldName)) {
                    deserializedTranscriptionOptionsInternal.summarizationOptions
                        = SummarizationOptionsInternal.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTranscriptionOptionsInternal;
        });
    }
}
