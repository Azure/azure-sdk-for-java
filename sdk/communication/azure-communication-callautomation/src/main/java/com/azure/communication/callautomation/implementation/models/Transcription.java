// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.communication.callautomation.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The Transcription model.
 */
@Fluent
public final class Transcription implements JsonSerializable<Transcription> {
    /*
     * Determine if the Transcription should be enabled for the post recording processing.
     */
    @Generated
    private boolean enableTranscription;

    /**
     * Creates an instance of Transcription class.
     */
    @Generated
    public Transcription() {
    }

    /**
     * Get the enableTranscription property: Determine if the Transcription should be enabled for the post recording
     * processing.
     * 
     * @return the enableTranscription value.
     */
    @Generated
    public boolean isEnableTranscription() {
        return this.enableTranscription;
    }

    /**
     * Set the enableTranscription property: Determine if the Transcription should be enabled for the post recording
     * processing.
     * 
     * @param enableTranscription the enableTranscription value to set.
     * @return the Transcription object itself.
     */
    @Generated
    public Transcription setEnableTranscription(boolean enableTranscription) {
        this.enableTranscription = enableTranscription;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("enableTranscription", this.enableTranscription);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Transcription from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Transcription if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Transcription.
     */
    @Generated
    public static Transcription fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Transcription deserializedTranscription = new Transcription();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("enableTranscription".equals(fieldName)) {
                    deserializedTranscription.enableTranscription = reader.getBoolean();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTranscription;
        });
    }
}
