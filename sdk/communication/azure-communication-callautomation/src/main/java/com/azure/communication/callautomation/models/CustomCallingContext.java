// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.communication.callautomation.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;

import java.io.IOException;
import java.util.Map;

/**
 * Custom calling context details.
 */
@Fluent
public final class CustomCallingContext implements JsonSerializable<CustomCallingContext> {
    private Map<String, String> sipHeaders;
    private Map<String, String> voipHeaders;
    private final ClientLogger logger;

    /**
     * Creates an instance of CustomCallingContext class.
     */
    public CustomCallingContext() {
        this.logger = new ClientLogger(CustomCallingContext.class);
    }

    /**
     * Create a CustomCallingContext object with SIP and VOIP headers
     *
     * @param sipHeaders custom context SIP headers
     * @param voipHeaders custom context VOIP headers
     */
    CustomCallingContext(Map<String, String> sipHeaders, Map<String, String> voipHeaders) {
        this.sipHeaders = sipHeaders;
        this.voipHeaders = voipHeaders;
        this.logger = new ClientLogger(CustomCallingContext.class);
    }

    /**
     * Get list of custom context SIP headers
     *
     * @return list of custom context SIP headers
     */
    public Map<String, String> getSipHeaders() {
        return sipHeaders;
    }

    /**
     * Get list of custom context VOIP headers
     *
     * @return list of custom context VOIP headers
     */
    public Map<String, String> getVoipHeaders() {
        return voipHeaders;
    }

    /**
     * Add a custom context sip UUI header. The Key always remains 'User-To-User'
     *
     * @param value custom context sip UUI header's value.
     * @throws IllegalStateException If sipHeaders is null
     */
    public void addSipUui(String value) {
        if (sipHeaders == null) {
            throw logger.logExceptionAsError(new IllegalStateException("Cannot add sip header, SipHeaders is null."));
        }
        sipHeaders.put("User-To-User", value);
    }

    /**
     * Add a custom context sip X header. The provided key is appended to 'X-MS-Custom-' in last.
     *
     * @param key custom context sip x header's key.
     * @param value custom context sip x header's value.
     * @throws IllegalStateException If sipHeaders is null
     */
    public void addSipX(String key, String value) {
        if (sipHeaders == null) {
            throw logger.logExceptionAsError(new IllegalStateException("Cannot add sip header, SipHeaders is null."));
        }
        sipHeaders.put("X-MS-Custom-" + key, value);
    }

    /**
     * Add a custom context voip header.
     *
     * @param key custom context voip header's key.
     * @param value custom context voip header's value.
     * @throws IllegalStateException If voipHeaders is null
     */
    public void addVoip(String key, String value) {
        if (sipHeaders == null) {
            throw logger.logExceptionAsError(new IllegalStateException("Cannot add sip header, VoipHeaders is null."));
        }
        voipHeaders.put(key, value);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeMapField("voipHeaders", this.voipHeaders, (writer, element) -> writer.writeString(element));
        jsonWriter.writeMapField("sipHeaders", this.sipHeaders, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CustomCallingContext from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of CustomCallingContext if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CustomCallingContext.
     */
    public static CustomCallingContext fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CustomCallingContext deserializedCustomCallingContext = new CustomCallingContext();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("voipHeaders".equals(fieldName)) {
                    Map<String, String> voipHeaders = reader.readMap(reader1 -> reader1.getString());
                    deserializedCustomCallingContext.voipHeaders = voipHeaders;
                } else if ("sipHeaders".equals(fieldName)) {
                    Map<String, String> sipHeaders = reader.readMap(reader1 -> reader1.getString());
                    deserializedCustomCallingContext.sipHeaders = sipHeaders;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCustomCallingContext;
        });
    }
}
