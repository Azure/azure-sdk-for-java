// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.communication.sms.implementation;

import com.azure.communication.sms.implementation.models.OptOutRequest;
import com.azure.communication.sms.implementation.models.OptOutResponse;
import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in OptOuts.
 */
public final class OptOutsImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final OptOutsService service;

    /**
     * The service client containing this operation class.
     */
    private final AzureCommunicationSMSServiceImpl client;

    /**
     * Initializes an instance of OptOutsImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    OptOutsImpl(AzureCommunicationSMSServiceImpl client) {
        this.service = RestProxy.create(OptOutsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AzureCommunicationSMSServiceOptOuts to be used by the proxy service
     * to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "AzureCommunicationSMSServiceOptOuts")
    public interface OptOutsService {
        @Post("/sms/optouts:add")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<OptOutResponse>> add(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @BodyParam("application/json") OptOutRequest body,
            @HeaderParam("Accept") String accept, Context context);

        @Post("/sms/optouts:remove")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<OptOutResponse>> remove(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @BodyParam("application/json") OptOutRequest body,
            @HeaderParam("Accept") String accept, Context context);

        @Post("/sms/optouts:check")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<OptOutResponse>> check(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @BodyParam("application/json") OptOutRequest body,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Add phone numbers to the optouts list which shall stop receiving messages from a sender number.
     * 
     * @param body The body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for an opt out request along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<OptOutResponse>> addWithResponseAsync(OptOutRequest body) {
        return FluxUtil.withContext(context -> addWithResponseAsync(body, context));
    }

    /**
     * Add phone numbers to the optouts list which shall stop receiving messages from a sender number.
     * 
     * @param body The body parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for an opt out request along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<OptOutResponse>> addWithResponseAsync(OptOutRequest body, Context context) {
        final String accept = "application/json";
        return service.add(this.client.getEndpoint(), this.client.getApiVersion(), body, accept, context);
    }

    /**
     * Add phone numbers to the optouts list which shall stop receiving messages from a sender number.
     * 
     * @param body The body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for an opt out request on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<OptOutResponse> addAsync(OptOutRequest body) {
        return addWithResponseAsync(body).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Add phone numbers to the optouts list which shall stop receiving messages from a sender number.
     * 
     * @param body The body parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for an opt out request on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<OptOutResponse> addAsync(OptOutRequest body, Context context) {
        return addWithResponseAsync(body, context).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Add phone numbers to the optouts list which shall stop receiving messages from a sender number.
     * 
     * @param body The body parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for an opt out request along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<OptOutResponse> addWithResponse(OptOutRequest body, Context context) {
        return addWithResponseAsync(body, context).block();
    }

    /**
     * Add phone numbers to the optouts list which shall stop receiving messages from a sender number.
     * 
     * @param body The body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for an opt out request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OptOutResponse add(OptOutRequest body) {
        return addWithResponse(body, Context.NONE).getValue();
    }

    /**
     * Remove phone numbers from the optouts list.
     * 
     * @param body The body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for an opt out request along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<OptOutResponse>> removeWithResponseAsync(OptOutRequest body) {
        return FluxUtil.withContext(context -> removeWithResponseAsync(body, context));
    }

    /**
     * Remove phone numbers from the optouts list.
     * 
     * @param body The body parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for an opt out request along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<OptOutResponse>> removeWithResponseAsync(OptOutRequest body, Context context) {
        final String accept = "application/json";
        return service.remove(this.client.getEndpoint(), this.client.getApiVersion(), body, accept, context);
    }

    /**
     * Remove phone numbers from the optouts list.
     * 
     * @param body The body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for an opt out request on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<OptOutResponse> removeAsync(OptOutRequest body) {
        return removeWithResponseAsync(body).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Remove phone numbers from the optouts list.
     * 
     * @param body The body parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for an opt out request on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<OptOutResponse> removeAsync(OptOutRequest body, Context context) {
        return removeWithResponseAsync(body, context).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Remove phone numbers from the optouts list.
     * 
     * @param body The body parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for an opt out request along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<OptOutResponse> removeWithResponse(OptOutRequest body, Context context) {
        return removeWithResponseAsync(body, context).block();
    }

    /**
     * Remove phone numbers from the optouts list.
     * 
     * @param body The body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for an opt out request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OptOutResponse remove(OptOutRequest body) {
        return removeWithResponse(body, Context.NONE).getValue();
    }

    /**
     * Check the opt out status for a recipient phone number with a sender phone number.
     * 
     * @param body The body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for an opt out request along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<OptOutResponse>> checkWithResponseAsync(OptOutRequest body) {
        return FluxUtil.withContext(context -> checkWithResponseAsync(body, context));
    }

    /**
     * Check the opt out status for a recipient phone number with a sender phone number.
     * 
     * @param body The body parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for an opt out request along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<OptOutResponse>> checkWithResponseAsync(OptOutRequest body, Context context) {
        final String accept = "application/json";
        return service.check(this.client.getEndpoint(), this.client.getApiVersion(), body, accept, context);
    }

    /**
     * Check the opt out status for a recipient phone number with a sender phone number.
     * 
     * @param body The body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for an opt out request on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<OptOutResponse> checkAsync(OptOutRequest body) {
        return checkWithResponseAsync(body).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Check the opt out status for a recipient phone number with a sender phone number.
     * 
     * @param body The body parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for an opt out request on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<OptOutResponse> checkAsync(OptOutRequest body, Context context) {
        return checkWithResponseAsync(body, context).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Check the opt out status for a recipient phone number with a sender phone number.
     * 
     * @param body The body parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for an opt out request along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<OptOutResponse> checkWithResponse(OptOutRequest body, Context context) {
        return checkWithResponseAsync(body, context).block();
    }

    /**
     * Check the opt out status for a recipient phone number with a sender phone number.
     * 
     * @param body The body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for an opt out request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OptOutResponse check(OptOutRequest body) {
        return checkWithResponse(body, Context.NONE).getValue();
    }
}
