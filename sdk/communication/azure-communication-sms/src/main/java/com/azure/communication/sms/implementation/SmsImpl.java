// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.communication.sms.implementation;

import com.azure.communication.sms.implementation.models.SendMessageRequest;
import com.azure.communication.sms.implementation.models.SmsSendNextResponse;
import com.azure.communication.sms.implementation.models.SmsSendResponse;
import com.azure.communication.sms.models.SendSmsResult;
import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.Context;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in Sms. */
public final class SmsImpl {
    /** The proxy service used to perform REST calls. */
    private final SmsService service;

    /** The service client containing this operation class. */
    private final AzureCommunicationSMSServiceImpl client;

    /**
     * Initializes an instance of SmsImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    SmsImpl(AzureCommunicationSMSServiceImpl client) {
        this.service = RestProxy.create(SmsService.class, client.getHttpPipeline());
        this.client = client;
    }

    /**
     * The interface defining all the services for AzureCommunicationSMSServiceSms to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "AzureCommunicationSM")
    private interface SmsService {
        @Post("/sms")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<SmsSendResponse> send(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("repeatability-request-id") String repeatabilityRequestId,
                @HeaderParam("repeatability-first-sent") String repeatabilityFirstSent,
                @BodyParam("application/json") SendMessageRequest sendMessageRequest,
                Context context);

        @Get("{nextLink}")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<SmsSendNextResponse> sendNext(
                @PathParam(value = "nextLink", encoded = true) String nextLink, Context context);
    }

    /**
     * Sends a SMS message from a phone number that belongs to the authenticated account.
     *
     * @param sendMessageRequest Represents the properties of a send message request.
     * @param repeatabilityRequestId If specified, the client directs that the request is repeatable; that is, the
     *     client can make the request multiple times with the same Repeatability-Request-ID and get back an appropriate
     *     response without the server executing the request multiple times. The value of the Repeatability-Request-ID
     *     is an opaque string representing a client-generated, 36-character hexadecimal case-insensitive encoding of a
     *     UUID (GUID), identifier for the request.
     * @param repeatabilityFirstSent MUST be sent by clients to specify that a request is repeatable.
     *     Repeatability-First-Sent is used to specify the date and time at which the request was first created.eg- Tue,
     *     26 Mar 2019 16:06:51 GMT.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for a successful or multi status send Sms request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<SendSmsResult>> sendSinglePageAsync(
            SendMessageRequest sendMessageRequest,
            String repeatabilityRequestId,
            String repeatabilityFirstSent,
            Context context) {
        return service.send(
                        this.client.getEndpoint(),
                        this.client.getApiVersion(),
                        repeatabilityRequestId,
                        repeatabilityFirstSent,
                        sendMessageRequest,
                        context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getValue(),
                                        res.getValue().getNextLink(),
                                        res.getDeserializedHeaders()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for a successful or multi status send Sms request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<SendSmsResult>> sendNextSinglePageAsync(String nextLink, Context context) {
        return service.sendNext(nextLink, context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getValue(),
                                        res.getValue().getNextLink(),
                                        res.getDeserializedHeaders()));
    }
}
