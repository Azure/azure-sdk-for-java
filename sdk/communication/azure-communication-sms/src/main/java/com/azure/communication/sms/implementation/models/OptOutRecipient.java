// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.communication.sms.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A single opt out recipient number.
 */
@Fluent
public final class OptOutRecipient implements JsonSerializable<OptOutRecipient> {
    /*
     * The recipient's phone number (in E.164 format).
     */
    @Generated
    private String to;

    /**
     * Creates an instance of OptOutRecipient class.
     */
    @Generated
    public OptOutRecipient() {
    }

    /**
     * Get the to property: The recipient's phone number (in E.164 format).
     * 
     * @return the to value.
     */
    @Generated
    public String getTo() {
        return this.to;
    }

    /**
     * Set the to property: The recipient's phone number (in E.164 format).
     * 
     * @param to the to value to set.
     * @return the OptOutRecipient object itself.
     */
    @Generated
    public OptOutRecipient setTo(String to) {
        this.to = to;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("to", this.to);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OptOutRecipient from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OptOutRecipient if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the OptOutRecipient.
     */
    @Generated
    public static OptOutRecipient fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OptOutRecipient deserializedOptOutRecipient = new OptOutRecipient();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("to".equals(fieldName)) {
                    deserializedOptOutRecipient.to = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOptOutRecipient;
        });
    }
}
