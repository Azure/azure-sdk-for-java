// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.communication.sms.implementation;

import com.azure.communication.sms.implementation.models.MmsSendMessageRequest;
import com.azure.communication.sms.implementation.models.MmsSendResponse;
import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in Mms. */
public final class MmsImpl {
    /** The proxy service used to perform REST calls. */
    private final MmsService service;

    /** The service client containing this operation class. */
    private final AzureCommunicationSMSServiceImpl client;

    /**
     * Initializes an instance of MmsImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    MmsImpl(AzureCommunicationSMSServiceImpl client) {
        this.service = RestProxy.create(MmsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AzureCommunicationSMSServiceMms to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "AzureCommunicationSM")
    public interface MmsService {
        @Post("/mms")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<MmsSendResponse>> send(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") MmsSendMessageRequest body,
                Context context);
    }

    /**
     * Sends MMS message from a phone number that belongs to the authenticated account.
     *
     * @param body Represents the properties of a send MMS message request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for a successful or multi status MMS send request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<MmsSendResponse>> sendWithResponseAsync(MmsSendMessageRequest body) {
        return FluxUtil.withContext(
                context -> service.send(this.client.getEndpoint(), this.client.getApiVersion(), body, context));
    }

    /**
     * Sends MMS message from a phone number that belongs to the authenticated account.
     *
     * @param body Represents the properties of a send MMS message request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for a successful or multi status MMS send request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<MmsSendResponse>> sendWithResponseAsync(MmsSendMessageRequest body, Context context) {
        return service.send(this.client.getEndpoint(), this.client.getApiVersion(), body, context);
    }

    /**
     * Sends MMS message from a phone number that belongs to the authenticated account.
     *
     * @param body Represents the properties of a send MMS message request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for a successful or multi status MMS send request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<MmsSendResponse> sendAsync(MmsSendMessageRequest body) {
        return sendWithResponseAsync(body)
                .flatMap(
                        (Response<MmsSendResponse> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Sends MMS message from a phone number that belongs to the authenticated account.
     *
     * @param body Represents the properties of a send MMS message request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for a successful or multi status MMS send request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<MmsSendResponse> sendAsync(MmsSendMessageRequest body, Context context) {
        return sendWithResponseAsync(body, context)
                .flatMap(
                        (Response<MmsSendResponse> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Sends MMS message from a phone number that belongs to the authenticated account.
     *
     * @param body Represents the properties of a send MMS message request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for a successful or multi status MMS send request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MmsSendResponse send(MmsSendMessageRequest body) {
        return sendAsync(body).block();
    }

    /**
     * Sends MMS message from a phone number that belongs to the authenticated account.
     *
     * @param body Represents the properties of a send MMS message request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for a successful or multi status MMS send request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MmsSendResponse send(MmsSendMessageRequest body, Context context) {
        return sendAsync(body, context).block();
    }
}
