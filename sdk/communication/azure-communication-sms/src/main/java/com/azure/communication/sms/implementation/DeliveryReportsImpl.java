// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.communication.sms.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in DeliveryReports.
 */
public final class DeliveryReportsImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final DeliveryReportsService service;

    /**
     * The service client containing this operation class.
     */
    private final AzureCommunicationSMSServiceImpl client;

    /**
     * Initializes an instance of DeliveryReportsImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    DeliveryReportsImpl(AzureCommunicationSMSServiceImpl client) {
        this.service
            = RestProxy.create(DeliveryReportsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AzureCommunicationSMSServiceDeliveryReports to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "AzureCommunicationSMSServiceDeliveryReports")
    public interface DeliveryReportsService {
        @Get("/deliveryReports/{outgoingMessageId}")
        @ExpectedResponses({ 200, 404 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Object>> get(@HostParam("endpoint") String endpoint,
            @PathParam("outgoingMessageId") String outgoingMessageId, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Gets delivery report for a specific outgoing message.
     * 
     * @param outgoingMessageId The identifier of the outgoing message.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return delivery report for a specific outgoing message along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Object>> getWithResponseAsync(String outgoingMessageId) {
        return FluxUtil.withContext(context -> getWithResponseAsync(outgoingMessageId, context));
    }

    /**
     * Gets delivery report for a specific outgoing message.
     * 
     * @param outgoingMessageId The identifier of the outgoing message.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return delivery report for a specific outgoing message along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Object>> getWithResponseAsync(String outgoingMessageId, Context context) {
        final String accept = "application/json";
        return service.get(this.client.getEndpoint(), outgoingMessageId, this.client.getApiVersion(), accept, context);
    }

    /**
     * Gets delivery report for a specific outgoing message.
     * 
     * @param outgoingMessageId The identifier of the outgoing message.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return delivery report for a specific outgoing message on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Object> getAsync(String outgoingMessageId) {
        return getWithResponseAsync(outgoingMessageId).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets delivery report for a specific outgoing message.
     * 
     * @param outgoingMessageId The identifier of the outgoing message.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return delivery report for a specific outgoing message on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Object> getAsync(String outgoingMessageId, Context context) {
        return getWithResponseAsync(outgoingMessageId, context).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets delivery report for a specific outgoing message.
     * 
     * @param outgoingMessageId The identifier of the outgoing message.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return delivery report for a specific outgoing message along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Object> getWithResponse(String outgoingMessageId, Context context) {
        return getWithResponseAsync(outgoingMessageId, context).block();
    }

    /**
     * Gets delivery report for a specific outgoing message.
     * 
     * @param outgoingMessageId The identifier of the outgoing message.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return delivery report for a specific outgoing message.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Object get(String outgoingMessageId) {
        return getWithResponse(outgoingMessageId, Context.NONE).getValue();
    }
}
