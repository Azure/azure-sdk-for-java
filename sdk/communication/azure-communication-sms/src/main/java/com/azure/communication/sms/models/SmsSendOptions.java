// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.communication.sms.models;

import com.azure.communication.sms.implementation.models.MessagingConnectOptions;
import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Optional configuration for sending SMS messages.
 */
@Fluent
public final class SmsSendOptions implements JsonSerializable<SmsSendOptions> {
    /*
     * Enable this flag to receive a delivery report for this message on the Azure Resource EventGrid.
     */
    @Generated
    private boolean deliveryReportEnabled;

    /*
     * Use this field to provide metadata that will then be sent back in the corresponding Delivery Report.
     */
    @Generated
    private String tag;

    /*
     * Time to wait for a delivery report. After this time a delivery report with timeout error code is generated.
     */
    @Generated
    private Integer deliveryReportTimeoutInSeconds;

    /*
     * Defines optional parameters for connecting with the Messaging Connect Partner to deliver SMS.
     */
    @Generated
    private MessagingConnectOptions messagingConnect;

    /**
     * Creates an instance of SmsSendOptions class.
     */
    @Generated
    public SmsSendOptions() {
    }

    /**
     * Get the deliveryReportEnabled property: Enable this flag to receive a delivery report for this message on the
     * Azure Resource EventGrid.
     * 
     * @return the deliveryReportEnabled value.
     */
    @Generated
    public boolean isDeliveryReportEnabled() {
        return this.deliveryReportEnabled;
    }

    /**
     * Set the deliveryReportEnabled property: Enable this flag to receive a delivery report for this message on the
     * Azure Resource EventGrid.
     * 
     * @param deliveryReportEnabled the deliveryReportEnabled value to set.
     * @return the SmsSendOptions object itself.
     */
    @Generated
    public SmsSendOptions setDeliveryReportEnabled(boolean deliveryReportEnabled) {
        this.deliveryReportEnabled = deliveryReportEnabled;
        return this;
    }

    /**
     * Get the tag property: Use this field to provide metadata that will then be sent back in the corresponding
     * Delivery Report.
     * 
     * @return the tag value.
     */
    @Generated
    public String getTag() {
        return this.tag;
    }

    /**
     * Set the tag property: Use this field to provide metadata that will then be sent back in the corresponding
     * Delivery Report.
     * 
     * @param tag the tag value to set.
     * @return the SmsSendOptions object itself.
     */
    @Generated
    public SmsSendOptions setTag(String tag) {
        this.tag = tag;
        return this;
    }

    /**
     * Get the deliveryReportTimeoutInSeconds property: Time to wait for a delivery report. After this time a delivery
     * report with timeout error code is generated.
     * 
     * @return the deliveryReportTimeoutInSeconds value.
     */
    @Generated
    public Integer getDeliveryReportTimeoutInSeconds() {
        return this.deliveryReportTimeoutInSeconds;
    }

    /**
     * Set the deliveryReportTimeoutInSeconds property: Time to wait for a delivery report. After this time a delivery
     * report with timeout error code is generated.
     * 
     * @param deliveryReportTimeoutInSeconds the deliveryReportTimeoutInSeconds value to set.
     * @return the SmsSendOptions object itself.
     */
    @Generated
    public SmsSendOptions setDeliveryReportTimeoutInSeconds(Integer deliveryReportTimeoutInSeconds) {
        this.deliveryReportTimeoutInSeconds = deliveryReportTimeoutInSeconds;
        return this;
    }

    /**
     * Get the messagingConnect property: Defines optional parameters for connecting with the Messaging Connect Partner
     * to deliver SMS.
     * 
     * @return the messagingConnect value.
     */
    @Generated
    public MessagingConnectOptions getMessagingConnect() {
        return this.messagingConnect;
    }

    /**
     * Set the messagingConnect property: Defines optional parameters for connecting with the Messaging Connect Partner
     * to deliver SMS.
     * 
     * @param messagingConnect the messagingConnect value to set.
     * @return the SmsSendOptions object itself.
     */
    @Generated
    public SmsSendOptions setMessagingConnect(MessagingConnectOptions messagingConnect) {
        this.messagingConnect = messagingConnect;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("enableDeliveryReport", this.deliveryReportEnabled);
        jsonWriter.writeStringField("tag", this.tag);
        jsonWriter.writeNumberField("deliveryReportTimeoutInSeconds", this.deliveryReportTimeoutInSeconds);
        jsonWriter.writeJsonField("messagingConnect", this.messagingConnect);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SmsSendOptions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SmsSendOptions if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SmsSendOptions.
     */
    @Generated
    public static SmsSendOptions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SmsSendOptions deserializedSmsSendOptions = new SmsSendOptions();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("enableDeliveryReport".equals(fieldName)) {
                    deserializedSmsSendOptions.deliveryReportEnabled = reader.getBoolean();
                } else if ("tag".equals(fieldName)) {
                    deserializedSmsSendOptions.tag = reader.getString();
                } else if ("deliveryReportTimeoutInSeconds".equals(fieldName)) {
                    deserializedSmsSendOptions.deliveryReportTimeoutInSeconds = reader.getNullable(JsonReader::getInt);
                } else if ("messagingConnect".equals(fieldName)) {
                    deserializedSmsSendOptions.messagingConnect = MessagingConnectOptions.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSmsSendOptions;
        });
    }
}
