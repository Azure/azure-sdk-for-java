// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.communication.sms.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * Delivery report for an outgoing SMS message.
 */
@Fluent
public final class DeliveryReport implements JsonSerializable<DeliveryReport> {
    /*
     * The delivery status of the message.
     */
    @Generated
    private DeliveryReportDeliveryStatus deliveryStatus;

    /*
     * Detailed information about the delivery status.
     */
    @Generated
    private String deliveryStatusDetails;

    /*
     * Array of delivery attempts made for this message.
     */
    @Generated
    private List<DeliveryAttempt> deliveryAttempts;

    /*
     * The timestamp when the delivery report was received.
     */
    @Generated
    private OffsetDateTime receivedTimestamp;

    /*
     * Custom tag provided when sending the message.
     */
    @Generated
    private String tag;

    /*
     * The identifier of the outgoing message.
     */
    @Generated
    private String messageId;

    /*
     * The sender's phone number in E.164 format.
     */
    @Generated
    private String from;

    /*
     * The recipient's phone number in E.164 format.
     */
    @Generated
    private String to;

    /**
     * Creates an instance of DeliveryReport class.
     */
    @Generated
    public DeliveryReport() {
    }

    /**
     * Get the deliveryStatus property: The delivery status of the message.
     * 
     * @return the deliveryStatus value.
     */
    @Generated
    public DeliveryReportDeliveryStatus getDeliveryStatus() {
        return this.deliveryStatus;
    }

    /**
     * Set the deliveryStatus property: The delivery status of the message.
     * 
     * @param deliveryStatus the deliveryStatus value to set.
     * @return the DeliveryReport object itself.
     */
    @Generated
    public DeliveryReport setDeliveryStatus(DeliveryReportDeliveryStatus deliveryStatus) {
        this.deliveryStatus = deliveryStatus;
        return this;
    }

    /**
     * Get the deliveryStatusDetails property: Detailed information about the delivery status.
     * 
     * @return the deliveryStatusDetails value.
     */
    @Generated
    public String getDeliveryStatusDetails() {
        return this.deliveryStatusDetails;
    }

    /**
     * Set the deliveryStatusDetails property: Detailed information about the delivery status.
     * 
     * @param deliveryStatusDetails the deliveryStatusDetails value to set.
     * @return the DeliveryReport object itself.
     */
    @Generated
    public DeliveryReport setDeliveryStatusDetails(String deliveryStatusDetails) {
        this.deliveryStatusDetails = deliveryStatusDetails;
        return this;
    }

    /**
     * Get the deliveryAttempts property: Array of delivery attempts made for this message.
     * 
     * @return the deliveryAttempts value.
     */
    @Generated
    public List<DeliveryAttempt> getDeliveryAttempts() {
        return this.deliveryAttempts;
    }

    /**
     * Set the deliveryAttempts property: Array of delivery attempts made for this message.
     * 
     * @param deliveryAttempts the deliveryAttempts value to set.
     * @return the DeliveryReport object itself.
     */
    @Generated
    public DeliveryReport setDeliveryAttempts(List<DeliveryAttempt> deliveryAttempts) {
        this.deliveryAttempts = deliveryAttempts;
        return this;
    }

    /**
     * Get the receivedTimestamp property: The timestamp when the delivery report was received.
     * 
     * @return the receivedTimestamp value.
     */
    @Generated
    public OffsetDateTime getReceivedTimestamp() {
        return this.receivedTimestamp;
    }

    /**
     * Set the receivedTimestamp property: The timestamp when the delivery report was received.
     * 
     * @param receivedTimestamp the receivedTimestamp value to set.
     * @return the DeliveryReport object itself.
     */
    @Generated
    public DeliveryReport setReceivedTimestamp(OffsetDateTime receivedTimestamp) {
        this.receivedTimestamp = receivedTimestamp;
        return this;
    }

    /**
     * Get the tag property: Custom tag provided when sending the message.
     * 
     * @return the tag value.
     */
    @Generated
    public String getTag() {
        return this.tag;
    }

    /**
     * Set the tag property: Custom tag provided when sending the message.
     * 
     * @param tag the tag value to set.
     * @return the DeliveryReport object itself.
     */
    @Generated
    public DeliveryReport setTag(String tag) {
        this.tag = tag;
        return this;
    }

    /**
     * Get the messageId property: The identifier of the outgoing message.
     * 
     * @return the messageId value.
     */
    @Generated
    public String getMessageId() {
        return this.messageId;
    }

    /**
     * Set the messageId property: The identifier of the outgoing message.
     * 
     * @param messageId the messageId value to set.
     * @return the DeliveryReport object itself.
     */
    @Generated
    public DeliveryReport setMessageId(String messageId) {
        this.messageId = messageId;
        return this;
    }

    /**
     * Get the from property: The sender's phone number in E.164 format.
     * 
     * @return the from value.
     */
    @Generated
    public String getFrom() {
        return this.from;
    }

    /**
     * Set the from property: The sender's phone number in E.164 format.
     * 
     * @param from the from value to set.
     * @return the DeliveryReport object itself.
     */
    @Generated
    public DeliveryReport setFrom(String from) {
        this.from = from;
        return this;
    }

    /**
     * Get the to property: The recipient's phone number in E.164 format.
     * 
     * @return the to value.
     */
    @Generated
    public String getTo() {
        return this.to;
    }

    /**
     * Set the to property: The recipient's phone number in E.164 format.
     * 
     * @param to the to value to set.
     * @return the DeliveryReport object itself.
     */
    @Generated
    public DeliveryReport setTo(String to) {
        this.to = to;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("deliveryStatus",
            this.deliveryStatus == null ? null : this.deliveryStatus.toString());
        jsonWriter.writeStringField("messageId", this.messageId);
        jsonWriter.writeStringField("from", this.from);
        jsonWriter.writeStringField("to", this.to);
        jsonWriter.writeStringField("deliveryStatusDetails", this.deliveryStatusDetails);
        jsonWriter.writeArrayField("deliveryAttempts", this.deliveryAttempts,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("receivedTimestamp",
            this.receivedTimestamp == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.receivedTimestamp));
        jsonWriter.writeStringField("tag", this.tag);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DeliveryReport from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DeliveryReport if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DeliveryReport.
     */
    @Generated
    public static DeliveryReport fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DeliveryReport deserializedDeliveryReport = new DeliveryReport();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("deliveryStatus".equals(fieldName)) {
                    deserializedDeliveryReport.deliveryStatus
                        = DeliveryReportDeliveryStatus.fromString(reader.getString());
                } else if ("messageId".equals(fieldName)) {
                    deserializedDeliveryReport.messageId = reader.getString();
                } else if ("from".equals(fieldName)) {
                    deserializedDeliveryReport.from = reader.getString();
                } else if ("to".equals(fieldName)) {
                    deserializedDeliveryReport.to = reader.getString();
                } else if ("deliveryStatusDetails".equals(fieldName)) {
                    deserializedDeliveryReport.deliveryStatusDetails = reader.getString();
                } else if ("deliveryAttempts".equals(fieldName)) {
                    List<DeliveryAttempt> deliveryAttempts
                        = reader.readArray(reader1 -> DeliveryAttempt.fromJson(reader1));
                    deserializedDeliveryReport.deliveryAttempts = deliveryAttempts;
                } else if ("receivedTimestamp".equals(fieldName)) {
                    deserializedDeliveryReport.receivedTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("tag".equals(fieldName)) {
                    deserializedDeliveryReport.tag = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDeliveryReport;
        });
    }
}
