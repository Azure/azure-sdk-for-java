// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.communication.sms.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Error response for failed requests.
 */
@Fluent
public final class ErrorResponse implements JsonSerializable<ErrorResponse> {
    /*
     * A URI reference that identifies the problem type.
     */
    @Generated
    private String type;

    /*
     * A short, human-readable summary of the problem type.
     */
    @Generated
    private String title;

    /*
     * The HTTP status code.
     */
    @Generated
    private int status;

    /*
     * The trace identifier for the request.
     */
    @Generated
    private String traceId;

    /**
     * Creates an instance of ErrorResponse class.
     */
    @Generated
    public ErrorResponse() {
    }

    /**
     * Get the type property: A URI reference that identifies the problem type.
     * 
     * @return the type value.
     */
    @Generated
    public String getType() {
        return this.type;
    }

    /**
     * Set the type property: A URI reference that identifies the problem type.
     * 
     * @param type the type value to set.
     * @return the ErrorResponse object itself.
     */
    @Generated
    public ErrorResponse setType(String type) {
        this.type = type;
        return this;
    }

    /**
     * Get the title property: A short, human-readable summary of the problem type.
     * 
     * @return the title value.
     */
    @Generated
    public String getTitle() {
        return this.title;
    }

    /**
     * Set the title property: A short, human-readable summary of the problem type.
     * 
     * @param title the title value to set.
     * @return the ErrorResponse object itself.
     */
    @Generated
    public ErrorResponse setTitle(String title) {
        this.title = title;
        return this;
    }

    /**
     * Get the status property: The HTTP status code.
     * 
     * @return the status value.
     */
    @Generated
    public int getStatus() {
        return this.status;
    }

    /**
     * Set the status property: The HTTP status code.
     * 
     * @param status the status value to set.
     * @return the ErrorResponse object itself.
     */
    @Generated
    public ErrorResponse setStatus(int status) {
        this.status = status;
        return this;
    }

    /**
     * Get the traceId property: The trace identifier for the request.
     * 
     * @return the traceId value.
     */
    @Generated
    public String getTraceId() {
        return this.traceId;
    }

    /**
     * Set the traceId property: The trace identifier for the request.
     * 
     * @param traceId the traceId value to set.
     * @return the ErrorResponse object itself.
     */
    @Generated
    public ErrorResponse setTraceId(String traceId) {
        this.traceId = traceId;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeStringField("title", this.title);
        jsonWriter.writeIntField("status", this.status);
        jsonWriter.writeStringField("traceId", this.traceId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ErrorResponse from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ErrorResponse if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ErrorResponse.
     */
    @Generated
    public static ErrorResponse fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ErrorResponse deserializedErrorResponse = new ErrorResponse();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedErrorResponse.type = reader.getString();
                } else if ("title".equals(fieldName)) {
                    deserializedErrorResponse.title = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedErrorResponse.status = reader.getInt();
                } else if ("traceId".equals(fieldName)) {
                    deserializedErrorResponse.traceId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedErrorResponse;
        });
    }
}
