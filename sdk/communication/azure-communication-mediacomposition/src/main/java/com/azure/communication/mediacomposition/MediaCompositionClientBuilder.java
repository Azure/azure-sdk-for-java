// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.communication.mediacomposition;

import com.azure.communication.common.implementation.CommunicationConnectionString;
import com.azure.communication.common.implementation.HmacAuthenticationPolicy;
import com.azure.communication.mediacomposition.implementation.AzureCommunicationMediaCompositionServiceImpl;
import com.azure.communication.mediacomposition.implementation.AzureCommunicationMediaCompositionServiceImplBuilder;
import com.azure.core.annotation.ServiceClientBuilder;
import com.azure.core.credential.AzureKeyCredential;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.policy.CookiePolicy;
import com.azure.core.http.policy.HttpLogDetailLevel;
import com.azure.core.http.policy.HttpLogOptions;
import com.azure.core.http.policy.HttpLoggingPolicy;
import com.azure.core.http.policy.HttpPipelinePolicy;
import com.azure.core.http.policy.RequestIdPolicy;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.util.ClientOptions;
import com.azure.core.util.Configuration;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * Builder for creating clients of Communication Service media composition configuration
 */
@ServiceClientBuilder(serviceClients = {MediaCompositionClient.class})
public final class MediaCompositionClientBuilder {
    private final ClientLogger logger = new ClientLogger(MediaCompositionClientBuilder.class);
    private String endpoint;
    private HttpPipeline pipeline;
    private HttpClient httpClient;
    private HttpLogOptions httpLogOptions;
    private AzureKeyCredential azureKeyCredential;
    private Configuration configuration;
    private ClientOptions clientOptions;
    private RetryPolicy retryPolicy;
    private final List<HttpPipelinePolicy> additionalPolicies = new ArrayList<>();

    /**
     * Set endpoint of the service
     *
     * @param endpoint url of the service
     * @return The updated {@link MediaCompositionClientBuilder} object.
     * @throws NullPointerException If {@code endpoint} is {@code null}.
     */
    public MediaCompositionClientBuilder endpoint(String endpoint) {
        this.endpoint = Objects.requireNonNull(endpoint, "'endpoint' cannot be null.");
        return this;
    }

    /**
     * Sets the HTTP pipeline to use for the service client
     * <p>
     * If {@code pipeline} is set, all other settings aside from
     * {@link MediaCompositionClientBuilder#endpoint(String) endpoint} are ignored.
     *
     * @param pipeline HttpPipeline to use
     * @return The updated {@link MediaCompositionClientBuilder} object.
     */
    public MediaCompositionClientBuilder pipeline(HttpPipeline pipeline) {
        this.pipeline = pipeline;
        return this;
    }

    /**
     * Set HttpClient to use
     *
     * @param httpClient HttpClient to use
     * @return The updated {@link MediaCompositionClientBuilder} object.
     * @throws NullPointerException If {@code httpClient} is {@code null}.
     */
    public MediaCompositionClientBuilder httpClient(HttpClient httpClient) {
        this.httpClient = httpClient;
        return this;
    }

    /**
     * Sets the logging configuration for HTTP requests and responses.
     *
     * <p> If logLevel is not provided, default value of {@link HttpLogDetailLevel#NONE} is set.</p>
     *
     * @param httpLogOptions The logging configuration to use when sending and receiving HTTP requests/responses.
     * @return the updated {@link MediaCompositionClientBuilder} object.
     */
    public MediaCompositionClientBuilder httpLogOptions(HttpLogOptions httpLogOptions) {
        this.httpLogOptions = httpLogOptions;
        return this;
    }

    /**
     * Sets the {@link AzureKeyCredential} used to authenticate HTTP requests.
     *
     * @param keyCredential The {@link AzureKeyCredential} used to authenticate HTTP requests.
     * @return The updated {@link MediaCompositionClientBuilder} object.
     * @throws NullPointerException If {@code keyCredential} is null.
     */
    public MediaCompositionClientBuilder credential(AzureKeyCredential keyCredential)  {
        this.azureKeyCredential = Objects.requireNonNull(keyCredential, "'keyCredential' cannot be null.");
        return this;
    }
    
    /**
     * Set the endpoint and AzureKeyCredential for authorization
     *
     * @param connectionString connection string for setting endpoint and initalizing AzureKeyCredential
     * @return The updated {@link MediaCompositionClientBuilder} object.
     * @throws NullPointerException If {@code connectionString} is {@code null}.
     */
    public MediaCompositionClientBuilder connectionString(String connectionString) {
        Objects.requireNonNull(connectionString, "'connectionString' cannot be null.");
        CommunicationConnectionString connectionStringObject = new CommunicationConnectionString(connectionString);
        String endpoint = connectionStringObject.getEndpoint();
        String accessKey = connectionStringObject.getAccessKey();
        this
            .endpoint(endpoint)
            .credential(new AzureKeyCredential(accessKey));
        return this;
    }

    /**
     * Sets the configuration object used to retrieve environment configuration values during building of the client.
     *
     * @param configuration Configuration store used to retrieve environment configurations.
     * @return The updated {@link MediaCompositionClientBuilder} object.
     */
    public MediaCompositionClientBuilder configuration(Configuration configuration) {
        this.configuration = configuration;
        return this;
    }

    /**
     * Adds a policy to the set of existing policies that are executed after required policies.
     *
     * @param policy The retry policy for service requests.
     * @return The updated {@link MediaCompositionClientBuilder} object.
     * @throws NullPointerException If {@code policy} is {@code null}.
     */
    public MediaCompositionClientBuilder addPolicy(HttpPipelinePolicy policy) {
        this.additionalPolicies.add(Objects.requireNonNull(policy, "'policy' cannot be null."));
        return this;
    }

    /**
     * Sets the client options for all the requests made through the client.
     *
     * @param clientOptions {@link ClientOptions}.
     * @return The updated {@link MediaCompositionClientBuilder} object.
     * @throws NullPointerException If {@code clientOptions} is {@code null}.
     */
    public MediaCompositionClientBuilder clientOptions(ClientOptions clientOptions) {
        this.clientOptions = Objects.requireNonNull(clientOptions, "'clientOptions' cannot be null.");
        return this;
    }

    /**
     * Sets the {@link RetryPolicy} that is used when each request is sent.
     *
     * @param retryPolicy User's retry policy applied to each request.
     * @return The updated {@link MediaCompositionClientBuilder} object.
     * @throws NullPointerException If the specified {@code retryPolicy} is null.
     */
    public MediaCompositionClientBuilder retryPolicy(RetryPolicy retryPolicy) {
        this.retryPolicy = Objects.requireNonNull(retryPolicy, "The retry policy cannot be null");
        return this;
    }

    /**
     * Create synchronous client applying CommunicationClientCredentialPolicy,
     * UserAgentPolicy, RetryPolicy, and CookiePolicy.
     * Additional HttpPolicies specified by additionalPolicies will be applied after them
     *
     * @return {@link MediaCompositionClient} instance
     */
    public MediaCompositionClient buildClient() {
        this.validateRequiredFields();

        AzureCommunicationMediaCompositionServiceImpl implClient = this.createMediaCompositionClientImpl();
        return new MediaCompositionClient(implClient.getMediaCompositions());
    }

    private AzureCommunicationMediaCompositionServiceImpl createMediaCompositionClientImpl() {
        AzureCommunicationMediaCompositionServiceImplBuilder clientBuilder = new AzureCommunicationMediaCompositionServiceImplBuilder();
        return clientBuilder
            .host(this.endpoint)
            .pipeline(this.createHttpPipeline())
            .buildClient();
    }

    HttpPipelinePolicy createAuthenticationPolicy() {
        if (this.azureKeyCredential != null) {
            return new HmacAuthenticationPolicy(this.azureKeyCredential);
        }

        throw logger.logExceptionAsError(
            new NullPointerException("Missing credential information while building a client."));
    }

    UserAgentPolicy createUserAgentPolicy(
        String applicationId, String sdkName, String sdkVersion, Configuration configuration) {
        return new UserAgentPolicy(applicationId, sdkName, sdkVersion, configuration);
    }

    HttpPipelinePolicy createRequestIdPolicy() {
        return new RequestIdPolicy();
    }

    CookiePolicy createCookiePolicy() {
        return new CookiePolicy();
    }

    HttpLoggingPolicy createHttpLoggingPolicy(HttpLogOptions httpLogOptions) {
        return new HttpLoggingPolicy(httpLogOptions);
    }

    HttpLogOptions createDefaultHttpLogOptions() {
        return new HttpLogOptions();
    }

    private void validateRequiredFields() {
        Objects.requireNonNull(this.endpoint);

    }

    private HttpPipeline createHttpPipeline() {
        if (this.pipeline != null) {
            return this.pipeline;
        }

        List<HttpPipelinePolicy> policyList = new ArrayList<>();

        ClientOptions buildClientOptions = (clientOptions == null) ? new ClientOptions() : clientOptions;
        HttpLogOptions buildLogOptions = (httpLogOptions == null) ? new HttpLogOptions() : httpLogOptions;

        String applicationId = null;
        if (!CoreUtils.isNullOrEmpty(buildClientOptions.getApplicationId())) {
            applicationId = buildClientOptions.getApplicationId();
        } else if (!CoreUtils.isNullOrEmpty(buildLogOptions.getApplicationId())) {
            applicationId = buildLogOptions.getApplicationId();
        }

        // Add required policies
        policyList.add(this.createUserAgentPolicy(
            applicationId,
            "MediaComposition SDK",
            "1.0.0-beta.1",
            this.configuration
        ));
        policyList.add(this.createRequestIdPolicy());
        policyList.add(this.retryPolicy == null ? new RetryPolicy() : this.retryPolicy);
        // auth policy is per request, should be after retry
        policyList.add(this.createAuthenticationPolicy());
        policyList.add(this.createCookiePolicy());

        // Add additional policies
        if (this.additionalPolicies.size() > 0) {
            policyList.addAll(this.additionalPolicies);
        }

        // Add logging policy
        policyList.add(this.createHttpLoggingPolicy(this.getHttpLogOptions()));

        return new HttpPipelineBuilder()
            .policies(policyList.toArray(new HttpPipelinePolicy[0]))
            .httpClient(this.httpClient)
            .clientOptions(clientOptions)
            .build();
    }

    private HttpLogOptions getHttpLogOptions() {
        if (this.httpLogOptions == null) {
            this.httpLogOptions = this.createDefaultHttpLogOptions();
        }

        return this.httpLogOptions;
    }

}