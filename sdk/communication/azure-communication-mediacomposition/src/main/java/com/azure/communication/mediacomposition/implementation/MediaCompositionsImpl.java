// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.communication.mediacomposition.implementation;

import com.azure.communication.mediacomposition.implementation.models.CommunicationErrorResponseException;
import com.azure.communication.mediacomposition.implementation.models.CompositionStreamState;
import com.azure.communication.mediacomposition.implementation.models.MediaCompositionBody;
import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in MediaCompositions. */
public final class MediaCompositionsImpl {
    /** The proxy service used to perform REST calls. */
    private final MediaCompositionsService service;

    /** The service client containing this operation class. */
    private final AzureCommunicationMediaCompositionServiceImpl client;

    /**
     * Initializes an instance of MediaCompositionsImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    MediaCompositionsImpl(AzureCommunicationMediaCompositionServiceImpl client) {
        this.service =
                RestProxy.create(
                        MediaCompositionsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AzureCommunicationMediaCompositionServiceMediaCompositions to be used
     * by the proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "AzureCommunicationMe")
    private interface MediaCompositionsService {
        @Get("/mediaCompositions/{mediaCompositionId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<MediaCompositionBody>> get(
                @HostParam("$host") String host,
                @PathParam("mediaCompositionId") String mediaCompositionId,
                @HeaderParam("Accept") String accept,
                Context context);

        @Put("/mediaCompositions/{mediaCompositionId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<MediaCompositionBody>> create(
                @HostParam("$host") String host,
                @PathParam("mediaCompositionId") String mediaCompositionId,
                @BodyParam("application/json") MediaCompositionBody body,
                @HeaderParam("Accept") String accept,
                Context context);

        @Patch("/mediaCompositions/{mediaCompositionId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<MediaCompositionBody>> update(
                @HostParam("$host") String host,
                @PathParam("mediaCompositionId") String mediaCompositionId,
                @BodyParam("application/json") MediaCompositionBody body,
                @HeaderParam("Accept") String accept,
                Context context);

        @Delete("/mediaCompositions/{mediaCompositionId}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<Void>> delete(
                @HostParam("$host") String host,
                @PathParam("mediaCompositionId") String mediaCompositionId,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/mediaCompositions/{mediaCompositionId}/start")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<CompositionStreamState>> start(
                @HostParam("$host") String host,
                @PathParam("mediaCompositionId") String mediaCompositionId,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/mediaCompositions/{mediaCompositionId}/stop")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<CompositionStreamState>> stop(
                @HostParam("$host") String host,
                @PathParam("mediaCompositionId") String mediaCompositionId,
                @HeaderParam("Accept") String accept,
                Context context);
    }

    /**
     * @param mediaCompositionId The mediaCompositionId parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<MediaCompositionBody>> getWithResponseAsync(String mediaCompositionId) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.get(this.client.getHost(), mediaCompositionId, accept, context));
    }

    /**
     * @param mediaCompositionId The mediaCompositionId parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<MediaCompositionBody>> getWithResponseAsync(String mediaCompositionId, Context context) {
        final String accept = "application/json";
        return service.get(this.client.getHost(), mediaCompositionId, accept, context);
    }

    /**
     * @param mediaCompositionId The mediaCompositionId parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<MediaCompositionBody> getAsync(String mediaCompositionId) {
        return getWithResponseAsync(mediaCompositionId)
                .flatMap(
                        (Response<MediaCompositionBody> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * @param mediaCompositionId The mediaCompositionId parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<MediaCompositionBody> getAsync(String mediaCompositionId, Context context) {
        return getWithResponseAsync(mediaCompositionId, context)
                .flatMap(
                        (Response<MediaCompositionBody> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * @param mediaCompositionId The mediaCompositionId parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MediaCompositionBody get(String mediaCompositionId) {
        return getAsync(mediaCompositionId).block();
    }

    /**
     * @param mediaCompositionId The mediaCompositionId parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<MediaCompositionBody> getWithResponse(String mediaCompositionId, Context context) {
        return getWithResponseAsync(mediaCompositionId, context).block();
    }

    /**
     * @param mediaCompositionId The mediaCompositionId parameter.
     * @param body The body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<MediaCompositionBody>> createWithResponseAsync(
            String mediaCompositionId, MediaCompositionBody body) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context -> service.create(this.client.getHost(), mediaCompositionId, body, accept, context));
    }

    /**
     * @param mediaCompositionId The mediaCompositionId parameter.
     * @param body The body parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<MediaCompositionBody>> createWithResponseAsync(
            String mediaCompositionId, MediaCompositionBody body, Context context) {
        final String accept = "application/json";
        return service.create(this.client.getHost(), mediaCompositionId, body, accept, context);
    }

    /**
     * @param mediaCompositionId The mediaCompositionId parameter.
     * @param body The body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<MediaCompositionBody> createAsync(String mediaCompositionId, MediaCompositionBody body) {
        return createWithResponseAsync(mediaCompositionId, body)
                .flatMap(
                        (Response<MediaCompositionBody> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * @param mediaCompositionId The mediaCompositionId parameter.
     * @param body The body parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<MediaCompositionBody> createAsync(
            String mediaCompositionId, MediaCompositionBody body, Context context) {
        return createWithResponseAsync(mediaCompositionId, body, context)
                .flatMap(
                        (Response<MediaCompositionBody> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * @param mediaCompositionId The mediaCompositionId parameter.
     * @param body The body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MediaCompositionBody create(String mediaCompositionId, MediaCompositionBody body) {
        return createAsync(mediaCompositionId, body).block();
    }

    /**
     * @param mediaCompositionId The mediaCompositionId parameter.
     * @param body The body parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<MediaCompositionBody> createWithResponse(
            String mediaCompositionId, MediaCompositionBody body, Context context) {
        return createWithResponseAsync(mediaCompositionId, body, context).block();
    }

    /**
     * @param mediaCompositionId The mediaCompositionId parameter.
     * @param body The body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<MediaCompositionBody>> updateWithResponseAsync(
            String mediaCompositionId, MediaCompositionBody body) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context -> service.update(this.client.getHost(), mediaCompositionId, body, accept, context));
    }

    /**
     * @param mediaCompositionId The mediaCompositionId parameter.
     * @param body The body parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<MediaCompositionBody>> updateWithResponseAsync(
            String mediaCompositionId, MediaCompositionBody body, Context context) {
        final String accept = "application/json";
        return service.update(this.client.getHost(), mediaCompositionId, body, accept, context);
    }

    /**
     * @param mediaCompositionId The mediaCompositionId parameter.
     * @param body The body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<MediaCompositionBody> updateAsync(String mediaCompositionId, MediaCompositionBody body) {
        return updateWithResponseAsync(mediaCompositionId, body)
                .flatMap(
                        (Response<MediaCompositionBody> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * @param mediaCompositionId The mediaCompositionId parameter.
     * @param body The body parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<MediaCompositionBody> updateAsync(
            String mediaCompositionId, MediaCompositionBody body, Context context) {
        return updateWithResponseAsync(mediaCompositionId, body, context)
                .flatMap(
                        (Response<MediaCompositionBody> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * @param mediaCompositionId The mediaCompositionId parameter.
     * @param body The body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MediaCompositionBody update(String mediaCompositionId, MediaCompositionBody body) {
        return updateAsync(mediaCompositionId, body).block();
    }

    /**
     * @param mediaCompositionId The mediaCompositionId parameter.
     * @param body The body parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<MediaCompositionBody> updateWithResponse(
            String mediaCompositionId, MediaCompositionBody body, Context context) {
        return updateWithResponseAsync(mediaCompositionId, body, context).block();
    }

    /**
     * @param mediaCompositionId The mediaCompositionId parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteWithResponseAsync(String mediaCompositionId) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context -> service.delete(this.client.getHost(), mediaCompositionId, accept, context));
    }

    /**
     * @param mediaCompositionId The mediaCompositionId parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteWithResponseAsync(String mediaCompositionId, Context context) {
        final String accept = "application/json";
        return service.delete(this.client.getHost(), mediaCompositionId, accept, context);
    }

    /**
     * @param mediaCompositionId The mediaCompositionId parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteAsync(String mediaCompositionId) {
        return deleteWithResponseAsync(mediaCompositionId).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * @param mediaCompositionId The mediaCompositionId parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteAsync(String mediaCompositionId, Context context) {
        return deleteWithResponseAsync(mediaCompositionId, context).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * @param mediaCompositionId The mediaCompositionId parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String mediaCompositionId) {
        deleteAsync(mediaCompositionId).block();
    }

    /**
     * @param mediaCompositionId The mediaCompositionId parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(String mediaCompositionId, Context context) {
        return deleteWithResponseAsync(mediaCompositionId, context).block();
    }

    /**
     * @param mediaCompositionId The mediaCompositionId parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<CompositionStreamState>> startWithResponseAsync(String mediaCompositionId) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context -> service.start(this.client.getHost(), mediaCompositionId, accept, context));
    }

    /**
     * @param mediaCompositionId The mediaCompositionId parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<CompositionStreamState>> startWithResponseAsync(String mediaCompositionId, Context context) {
        final String accept = "application/json";
        return service.start(this.client.getHost(), mediaCompositionId, accept, context);
    }

    /**
     * @param mediaCompositionId The mediaCompositionId parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CompositionStreamState> startAsync(String mediaCompositionId) {
        return startWithResponseAsync(mediaCompositionId)
                .flatMap(
                        (Response<CompositionStreamState> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * @param mediaCompositionId The mediaCompositionId parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CompositionStreamState> startAsync(String mediaCompositionId, Context context) {
        return startWithResponseAsync(mediaCompositionId, context)
                .flatMap(
                        (Response<CompositionStreamState> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * @param mediaCompositionId The mediaCompositionId parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CompositionStreamState start(String mediaCompositionId) {
        return startAsync(mediaCompositionId).block();
    }

    /**
     * @param mediaCompositionId The mediaCompositionId parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<CompositionStreamState> startWithResponse(String mediaCompositionId, Context context) {
        return startWithResponseAsync(mediaCompositionId, context).block();
    }

    /**
     * @param mediaCompositionId The mediaCompositionId parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<CompositionStreamState>> stopWithResponseAsync(String mediaCompositionId) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context -> service.stop(this.client.getHost(), mediaCompositionId, accept, context));
    }

    /**
     * @param mediaCompositionId The mediaCompositionId parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<CompositionStreamState>> stopWithResponseAsync(String mediaCompositionId, Context context) {
        final String accept = "application/json";
        return service.stop(this.client.getHost(), mediaCompositionId, accept, context);
    }

    /**
     * @param mediaCompositionId The mediaCompositionId parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CompositionStreamState> stopAsync(String mediaCompositionId) {
        return stopWithResponseAsync(mediaCompositionId)
                .flatMap(
                        (Response<CompositionStreamState> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * @param mediaCompositionId The mediaCompositionId parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CompositionStreamState> stopAsync(String mediaCompositionId, Context context) {
        return stopWithResponseAsync(mediaCompositionId, context)
                .flatMap(
                        (Response<CompositionStreamState> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * @param mediaCompositionId The mediaCompositionId parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CompositionStreamState stop(String mediaCompositionId) {
        return stopAsync(mediaCompositionId).block();
    }

    /**
     * @param mediaCompositionId The mediaCompositionId parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<CompositionStreamState> stopWithResponse(String mediaCompositionId, Context context) {
        return stopWithResponseAsync(mediaCompositionId, context).block();
    }
}
