// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.communication.mediacomposition;

import com.azure.communication.mediacomposition.implementation.MediaCompositionsImpl;
import com.azure.communication.mediacomposition.implementation.models.CompositionStreamState;
import com.azure.communication.mediacomposition.implementation.models.MediaCompositionBody;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

import java.util.Objects;

/**
 * Synchronous client for Communication service media composition operations
 */
@ServiceClient(builder = MediaCompositionClientBuilder.class, isAsync = false)
public final class MediaCompositionClient {

    private final MediaCompositionsImpl svcImpl;

    MediaCompositionClient(MediaCompositionsImpl svcImpl) {
        this.svcImpl = svcImpl;
    }

    /**
     * Get MediaComposition by Id
     * @param mediaCompositionId The mediaCompositionId parameter.
     * @return {@link MediaCompositionBody}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MediaCompositionBody getMediaComposition(String mediaCompositionId) {
        Objects.requireNonNull(mediaCompositionId, "'mediaCompositionId' cannot be null.");
        return svcImpl.get(mediaCompositionId);
    }

    /**
     * Get MediaComposition by Id
     * @param mediaCompositionId The mediaCompositionId parameter.
     * @param context The context to associate with this operation.
     * @return {@link Response} of {@link MediaCompositionBody}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<MediaCompositionBody> getMediaCompositionWithResponse(String mediaCompositionId, Context context) {
        Objects.requireNonNull(mediaCompositionId, "'mediaCompositionId' cannot be null.");
        context = context == null ? Context.NONE : context;
        return svcImpl.getWithResponseAsync(mediaCompositionId, context).block();
    }

    /**
     * Create a MediaComposition with data
     * @param mediaCompositionBody The MediaCompositionBody parameter.
     * @return {@link MediaCompositionBody}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MediaCompositionBody createMediaComposition(MediaCompositionBody mediaCompositionBody) {
        Objects.requireNonNull(mediaCompositionBody, "'mediaCompositionBody' cannot be null");
        Objects.requireNonNull(mediaCompositionBody.getId(), "'mediaCompositionBody' must contain a valid Id");
        return svcImpl.create(mediaCompositionBody.getId(), mediaCompositionBody);
    }

    /**
     * Create a MediaComposition with data
     * @param mediaCompositionBody The MediaCompositionBody parameter.
     * @param context The context to associate with this operation.
     * @return {@link Response} of {@link MediaCompositionBody}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<MediaCompositionBody> createMediaCompositionWithResponse(MediaCompositionBody mediaCompositionBody, Context context) {
        Objects.requireNonNull(mediaCompositionBody, "'mediaCompositionBody' cannot be null");
        Objects.requireNonNull(mediaCompositionBody.getId(), "'mediaCompositionBody' must contain a valid Id");
        context = context == null ? Context.NONE : context;

        return svcImpl.createWithResponseAsync(mediaCompositionBody.getId(), mediaCompositionBody, context).block();
    }

    /**
     * Update a MediaComposition with Id and data
     * @param mediaCompositionId The mediaCompositionId parameter.
     * @param mediaCompositionBody The MediaCompositionBody parameter.
     * @return {@link MediaCompositionBody}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MediaCompositionBody update(String mediaCompositionId, MediaCompositionBody mediaCompositionBody) {
        Objects.requireNonNull(mediaCompositionId, "'mediaCompositionId' cannot be null.");
        Objects.requireNonNull(mediaCompositionBody, "'mediaCompositionBody' cannot be null");
        return svcImpl.update(mediaCompositionId, mediaCompositionBody);
    }

    /**
     * Update a MediaComposition with Id and data
     * @param mediaCompositionId The mediaCompositionId parameter.
     * @param mediaCompositionBody The MediaCompositionBody parameter.
     * @param context The context to associate with this operation.
     * @return {@link MediaCompositionBody}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<MediaCompositionBody> updateWithResponse(String mediaCompositionId, MediaCompositionBody mediaCompositionBody, Context context) {
        Objects.requireNonNull(mediaCompositionId, "'mediaCompositionId' cannot be null.");
        Objects.requireNonNull(mediaCompositionBody, "'mediaCompositionBody' cannot be null");
        context = context == null ? Context.NONE : context;

        return svcImpl.updateWithResponseAsync(mediaCompositionId, mediaCompositionBody, context).block();
    }

    /**
     * Delete a MediaComposition with Id
     * @param mediaCompositionId The mediaCompositionId parameter.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String mediaCompositionId) {
        Objects.requireNonNull(mediaCompositionId, "'mediaCompositionId' cannot be null.");

        svcImpl.deleteAsync(mediaCompositionId);
    }

    /**
     * Delete a MediaComposition with Id
     * @param mediaCompositionId The mediaCompositionId parameter.
     * @param context The context to associate with this operation.
     * @return {@link Response} of Void
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(String mediaCompositionId, Context context) {
        Objects.requireNonNull(mediaCompositionId, "'mediaCompositionId' cannot be null.");

        return svcImpl.deleteWithResponseAsync(mediaCompositionId, context).block();
    }

    /**
     * Start media composition session
     * @param mediaCompositionId The mediaCompositionId parameter.
     * @return {@link CompositionStreamState}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CompositionStreamState start(String mediaCompositionId) {
        Objects.requireNonNull(mediaCompositionId, "'mediaCompositionId' cannot be null.");
        return svcImpl.start(mediaCompositionId);
    }

    /**
     * Start media composition session
     * @param mediaCompositionId The mediaCompositionId parameter.
     * @param context The context to associate with this operation.
     * @return {@link Response} of {@link CompositionStreamState}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<CompositionStreamState> startWithResponse(String mediaCompositionId, Context context) {
        Objects.requireNonNull(mediaCompositionId, "'mediaCompositionId' cannot be null.");
        context = context == null ? Context.NONE : context;

        return svcImpl.startWithResponseAsync(mediaCompositionId, context).block();
    }

    /**
     * Stop media composition session
     * @param mediaCompositionId The mediaCompositionId parameter.
     * @return {@link CompositionStreamState}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CompositionStreamState stop(String mediaCompositionId) {
        Objects.requireNonNull(mediaCompositionId, "'mediaCompositionId' cannot be null.");
        return svcImpl.stop(mediaCompositionId);
    }

    /**
     * Stop media composition session
     * @param mediaCompositionId The mediaCompositionId parameter.
     * @param context The context to associate with this operation.
     * @return {@link Response} of {@link CompositionStreamState}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<CompositionStreamState> stopWithResponse(String mediaCompositionId, Context context) {
        Objects.requireNonNull(mediaCompositionId, "'mediaCompositionId' cannot be null.");
        context = context == null ? Context.NONE : context;

        return svcImpl.stopWithResponseAsync(mediaCompositionId, context).block();
    }
}