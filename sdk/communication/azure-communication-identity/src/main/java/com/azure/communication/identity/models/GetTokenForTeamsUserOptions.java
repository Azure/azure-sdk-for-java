// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.communication.identity.models;

import com.azure.communication.identity.CommunicationIdentityAsyncClient;
import com.azure.communication.identity.CommunicationIdentityClient;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Options class for configuring the
 * {@link CommunicationIdentityAsyncClient#getTokenForTeamsUser(GetTokenForTeamsUserOptions)} and
 * {@link CommunicationIdentityClient#getTokenForTeamsUser(GetTokenForTeamsUserOptions)} methods.
 */
@Immutable
public final class GetTokenForTeamsUserOptions implements JsonSerializable<GetTokenForTeamsUserOptions> {

    /*
     * Azure AD access token of a Teams User to acquire a new Communication Identity access token.
     */
    private String teamsUserAadToken;

    /*
     * Client ID of an Azure AD application to be verified against the appid claim in the Azure AD access token.
     */
    private String clientId;

    /*
     * Object ID of an Azure AD user (Teams User) to be verified against the oid claim in the Azure AD access token.
     */
    private String userObjectId;

    /**
     * Constructor of {@link GetTokenForTeamsUserOptions}.
     *
     * @param teamsUserAadToken Azure AD access token of a Teams User.
     * @param clientId Client ID of an Azure AD application to be verified against the appId claim in the Azure AD
     * access token.
     * @param userObjectId Object ID of an Azure AD user (Teams User) to be verified against the OID claim in the Azure
     * AD access token.
     */
    public GetTokenForTeamsUserOptions(String teamsUserAadToken, String clientId, String userObjectId) {
        this.teamsUserAadToken = teamsUserAadToken;
        this.clientId = clientId;
        this.userObjectId = userObjectId;
    }

    /**
     * Get the teamsUserAadToken property: Azure AD access token of a Teams User to acquire a new Communication Identity
     * access token.
     *
     * @return the teamsUserAadToken value.
     */
    public String getTeamsUserAadToken() {
        return this.teamsUserAadToken;
    }

    /**
     * Get the clientId property: Client ID of an Azure AD application to be verified against the appid claim in the
     * Azure AD access token.
     *
     * @return the clientId value.
     */
    public String getClientId() {
        return this.clientId;
    }

    /**
     * Get the userObjectId property: Object ID of an Azure AD user (Teams User) to be verified against the oid claim in
     * the Azure AD access token.
     *
     * @return the userObjectId value.
     */
    public String getUserObjectId() {
        return this.userObjectId;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("token", this.teamsUserAadToken);
        jsonWriter.writeStringField("appId", this.clientId);
        jsonWriter.writeStringField("userId", this.userObjectId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GetTokenForTeamsUserOptions from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of GetTokenForTeamsUserOptions if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the GetTokenForTeamsUserOptions.
     */
    public static GetTokenForTeamsUserOptions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GetTokenForTeamsUserOptions deserializedGetTokenForTeamsUserOptions = new GetTokenForTeamsUserOptions();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("token".equals(fieldName)) {
                    deserializedGetTokenForTeamsUserOptions.teamsUserAadToken = reader.getString();
                } else if ("appId".equals(fieldName)) {
                    deserializedGetTokenForTeamsUserOptions.clientId = reader.getString();
                } else if ("userId".equals(fieldName)) {
                    deserializedGetTokenForTeamsUserOptions.userObjectId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedGetTokenForTeamsUserOptions;
        });
    }

    private GetTokenForTeamsUserOptions() {
    }
}
