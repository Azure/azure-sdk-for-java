// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.communication.identity.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * An access token.
 */
@Fluent
public final class CommunicationIdentityAccessToken implements JsonSerializable<CommunicationIdentityAccessToken> {
    /*
     * The access token issued for the identity.
     */
    private String token;

    /*
     * The expiry time of the token.
     */
    private OffsetDateTime expiresOn;

    /**
     * Creates an instance of CommunicationIdentityAccessToken class.
     */
    public CommunicationIdentityAccessToken() {
    }

    /**
     * Get the token property: The access token issued for the identity.
     * 
     * @return the token value.
     */
    public String getToken() {
        return this.token;
    }

    /**
     * Set the token property: The access token issued for the identity.
     * 
     * @param token the token value to set.
     * @return the CommunicationIdentityAccessToken object itself.
     */
    public CommunicationIdentityAccessToken setToken(String token) {
        this.token = token;
        return this;
    }

    /**
     * Get the expiresOn property: The expiry time of the token.
     * 
     * @return the expiresOn value.
     */
    public OffsetDateTime getExpiresOn() {
        return this.expiresOn;
    }

    /**
     * Set the expiresOn property: The expiry time of the token.
     * 
     * @param expiresOn the expiresOn value to set.
     * @return the CommunicationIdentityAccessToken object itself.
     */
    public CommunicationIdentityAccessToken setExpiresOn(OffsetDateTime expiresOn) {
        this.expiresOn = expiresOn;
        return this;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("token", this.token);
        jsonWriter.writeStringField("expiresOn",
            this.expiresOn == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.expiresOn));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CommunicationIdentityAccessToken from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CommunicationIdentityAccessToken if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CommunicationIdentityAccessToken.
     */
    public static CommunicationIdentityAccessToken fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CommunicationIdentityAccessToken deserializedCommunicationIdentityAccessToken
                = new CommunicationIdentityAccessToken();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("token".equals(fieldName)) {
                    deserializedCommunicationIdentityAccessToken.token = reader.getString();
                } else if ("expiresOn".equals(fieldName)) {
                    deserializedCommunicationIdentityAccessToken.expiresOn
                        = reader.getNullable(nonNullReader -> OffsetDateTime.parse(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCommunicationIdentityAccessToken;
        });
    }
}
