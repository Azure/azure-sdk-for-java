/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * def
 */

package com.microsoft.azure.management.communication.v2020_08_20_preview.implementation;

import com.microsoft.azure.arm.resources.collection.implementation.GroupableResourcesCoreImpl;
import com.microsoft.azure.management.communication.v2020_08_20_preview.CommunicationServices;
import com.microsoft.azure.management.communication.v2020_08_20_preview.CommunicationServiceResource;
import rx.Observable;
import rx.Completable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import com.microsoft.azure.arm.resources.ResourceUtilsCore;
import com.microsoft.azure.arm.utils.RXMapper;
import rx.functions.Func1;
import com.microsoft.azure.PagedList;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.communication.v2020_08_20_preview.LinkedNotificationHub;
import com.microsoft.azure.management.communication.v2020_08_20_preview.CommunicationServiceKeys;
import com.microsoft.azure.management.communication.v2020_08_20_preview.NameAvailability;

class CommunicationServicesImpl extends GroupableResourcesCoreImpl<CommunicationServiceResource, CommunicationServiceResourceImpl, CommunicationServiceResourceInner, CommunicationServicesInner, CommunicationManager>  implements CommunicationServices {
    protected CommunicationServicesImpl(CommunicationManager manager) {
        super(manager.inner().communicationServices(), manager);
    }

    @Override
    protected Observable<CommunicationServiceResourceInner> getInnerAsync(String resourceGroupName, String name) {
        CommunicationServicesInner client = this.inner();
        return client.getByResourceGroupAsync(resourceGroupName, name);
    }

    @Override
    protected Completable deleteInnerAsync(String resourceGroupName, String name) {
        CommunicationServicesInner client = this.inner();
        return client.deleteAsync(resourceGroupName, name).toCompletable();
    }

    @Override
    public Observable<String> deleteByIdsAsync(Collection<String> ids) {
        if (ids == null || ids.isEmpty()) {
            return Observable.empty();
        }
        Collection<Observable<String>> observables = new ArrayList<>();
        for (String id : ids) {
            final String resourceGroupName = ResourceUtilsCore.groupFromResourceId(id);
            final String name = ResourceUtilsCore.nameFromResourceId(id);
            Observable<String> o = RXMapper.map(this.inner().deleteAsync(resourceGroupName, name), id);
            observables.add(o);
        }
        return Observable.mergeDelayError(observables);
    }

    @Override
    public Observable<String> deleteByIdsAsync(String...ids) {
        return this.deleteByIdsAsync(new ArrayList<String>(Arrays.asList(ids)));
    }

    @Override
    public void deleteByIds(Collection<String> ids) {
        if (ids != null && !ids.isEmpty()) {
            this.deleteByIdsAsync(ids).toBlocking().last();
        }
    }

    @Override
    public void deleteByIds(String...ids) {
        this.deleteByIds(new ArrayList<String>(Arrays.asList(ids)));
    }

    @Override
    public PagedList<CommunicationServiceResource> listByResourceGroup(String resourceGroupName) {
        CommunicationServicesInner client = this.inner();
        return this.wrapList(client.listByResourceGroup(resourceGroupName));
    }

    @Override
    public Observable<CommunicationServiceResource> listByResourceGroupAsync(String resourceGroupName) {
        CommunicationServicesInner client = this.inner();
        return client.listByResourceGroupAsync(resourceGroupName)
        .flatMapIterable(new Func1<Page<CommunicationServiceResourceInner>, Iterable<CommunicationServiceResourceInner>>() {
            @Override
            public Iterable<CommunicationServiceResourceInner> call(Page<CommunicationServiceResourceInner> page) {
                return page.items();
            }
        })
        .map(new Func1<CommunicationServiceResourceInner, CommunicationServiceResource>() {
            @Override
            public CommunicationServiceResource call(CommunicationServiceResourceInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public PagedList<CommunicationServiceResource> list() {
        CommunicationServicesInner client = this.inner();
        return this.wrapList(client.list());
    }

    @Override
    public Observable<CommunicationServiceResource> listAsync() {
        CommunicationServicesInner client = this.inner();
        return client.listAsync()
        .flatMapIterable(new Func1<Page<CommunicationServiceResourceInner>, Iterable<CommunicationServiceResourceInner>>() {
            @Override
            public Iterable<CommunicationServiceResourceInner> call(Page<CommunicationServiceResourceInner> page) {
                return page.items();
            }
        })
        .map(new Func1<CommunicationServiceResourceInner, CommunicationServiceResource>() {
            @Override
            public CommunicationServiceResource call(CommunicationServiceResourceInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public CommunicationServiceResourceImpl define(String name) {
        return wrapModel(name);
    }

    @Override
    public Observable<LinkedNotificationHub> linkNotificationHubAsync(String resourceGroupName, String communicationServiceName) {
        CommunicationServicesInner client = this.inner();
        return client.linkNotificationHubAsync(resourceGroupName, communicationServiceName)
        .map(new Func1<LinkedNotificationHubInner, LinkedNotificationHub>() {
            @Override
            public LinkedNotificationHub call(LinkedNotificationHubInner inner) {
                return new LinkedNotificationHubImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<CommunicationServiceKeys> listKeysAsync(String resourceGroupName, String communicationServiceName) {
        CommunicationServicesInner client = this.inner();
        return client.listKeysAsync(resourceGroupName, communicationServiceName)
        .map(new Func1<CommunicationServiceKeysInner, CommunicationServiceKeys>() {
            @Override
            public CommunicationServiceKeys call(CommunicationServiceKeysInner inner) {
                return new CommunicationServiceKeysImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<CommunicationServiceKeys> regenerateKeyAsync(String resourceGroupName, String communicationServiceName) {
        CommunicationServicesInner client = this.inner();
        return client.regenerateKeyAsync(resourceGroupName, communicationServiceName)
        .map(new Func1<CommunicationServiceKeysInner, CommunicationServiceKeys>() {
            @Override
            public CommunicationServiceKeys call(CommunicationServiceKeysInner inner) {
                return new CommunicationServiceKeysImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<NameAvailability> checkNameAvailabilityAsync() {
        CommunicationServicesInner client = this.inner();
        return client.checkNameAvailabilityAsync()
        .map(new Func1<NameAvailabilityInner, NameAvailability>() {
            @Override
            public NameAvailability call(NameAvailabilityInner inner) {
                return new NameAvailabilityImpl(inner, manager());
            }
        });
    }

    @Override
    protected CommunicationServiceResourceImpl wrapModel(CommunicationServiceResourceInner inner) {
        return  new CommunicationServiceResourceImpl(inner.name(), inner, manager());
    }

    @Override
    protected CommunicationServiceResourceImpl wrapModel(String name) {
        return new CommunicationServiceResourceImpl(name, new CommunicationServiceResourceInner(), this.manager());
    }

}
