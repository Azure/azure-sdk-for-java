/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.communication.v2020_08_20_preview.implementation;

import java.util.Map;

import com.microsoft.azure.Resource;
import com.microsoft.azure.management.communication.v2020_08_20_preview.ProvisioningState;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.microsoft.rest.serializer.JsonFlatten;

/**
 * A class representing a CommunicationService resource.
 */
@JsonFlatten
public class CommunicationServiceResourceInner extends Resource {
    /**
     * Provisioning state of the resource. Possible values include: 'Unknown',
     * 'Succeeded', 'Failed', 'Canceled', 'Running', 'Creating', 'Updating',
     * 'Deleting', 'Moving'.
     */
    @JsonProperty(value = "properties.provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /**
     * FQDN of the CommunicationService instance.
     */
    @JsonProperty(value = "properties.hostName", access = JsonProperty.Access.WRITE_ONLY)
    private String hostName;

    /**
     * The location where the communication service stores its data at rest.
     */
    @JsonProperty(value = "properties.dataLocation", required = true)
    private String dataLocation;

    /**
     * Resource ID of an Azure Notification Hub linked to this resource.
     */
    @JsonProperty(value = "properties.notificationHubId", access = JsonProperty.Access.WRITE_ONLY)
    private String notificationHubId;

    /**
     * Version of the CommunicationService resource. Probably you need the same
     * or higher version of client SDKs.
     */
    @JsonProperty(value = "properties.version", access = JsonProperty.Access.WRITE_ONLY)
    private String version;

    /**
     * The immutable resource Id of the communication service.
     */
    @JsonProperty(value = "properties.immutableResourceId", access = JsonProperty.Access.WRITE_ONLY)
    private String immutableResourceId;

    /**
     * Get provisioning state of the resource. Possible values include: 'Unknown', 'Succeeded', 'Failed', 'Canceled', 'Running', 'Creating', 'Updating', 'Deleting', 'Moving'.
     *
     * @return the provisioningState value
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get fQDN of the CommunicationService instance.
     *
     * @return the hostName value
     */
    public String hostName() {
        return this.hostName;
    }

    /**
     * Get the location where the communication service stores its data at rest.
     *
     * @return the dataLocation value
     */
    public String dataLocation() {
        return this.dataLocation;
    }

    /**
     * Set the location where the communication service stores its data at rest.
     *
     * @param dataLocation the dataLocation value to set
     * @return the CommunicationServiceResourceInner object itself.
     */
    public CommunicationServiceResourceInner withDataLocation(String dataLocation) {
        this.dataLocation = dataLocation;
        return this;
    }

    /**
     * Get resource ID of an Azure Notification Hub linked to this resource.
     *
     * @return the notificationHubId value
     */
    public String notificationHubId() {
        return this.notificationHubId;
    }

    /**
     * Get version of the CommunicationService resource. Probably you need the same or higher version of client SDKs.
     *
     * @return the version value
     */
    public String version() {
        return this.version;
    }

    /**
     * Get the immutable resource Id of the communication service.
     *
     * @return the immutableResourceId value
     */
    public String immutableResourceId() {
        return this.immutableResourceId;
    }

}
