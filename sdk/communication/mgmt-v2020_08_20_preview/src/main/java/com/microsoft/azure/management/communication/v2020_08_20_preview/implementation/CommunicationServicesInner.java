/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.communication.v2020_08_20_preview.implementation;

import com.microsoft.azure.arm.collection.InnerSupportsGet;
import com.microsoft.azure.arm.collection.InnerSupportsDelete;
import com.microsoft.azure.arm.collection.InnerSupportsListing;
import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.communication.v2020_08_20_preview.CommunicationServiceCreateOrUpdateHeaders;
import com.microsoft.azure.management.communication.v2020_08_20_preview.CommunicationServiceDeleteHeaders;
import com.microsoft.azure.management.communication.v2020_08_20_preview.ErrorResponseException;
import com.microsoft.azure.management.communication.v2020_08_20_preview.KeyType;
import com.microsoft.azure.management.communication.v2020_08_20_preview.LinkNotificationHubParameters;
import com.microsoft.azure.management.communication.v2020_08_20_preview.NameAvailabilityParameters;
import com.microsoft.azure.management.communication.v2020_08_20_preview.RegenerateKeyParameters;
import com.microsoft.azure.management.communication.v2020_08_20_preview.TaggedResource;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.ServiceResponseWithHeaders;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in CommunicationServices.
 */
public class CommunicationServicesInner implements InnerSupportsGet<CommunicationServiceResourceInner>, InnerSupportsDelete<Void>, InnerSupportsListing<CommunicationServiceResourceInner> {
    /** The Retrofit service to perform REST calls. */
    private CommunicationServicesService service;
    /** The service client containing this operation class. */
    private CommunicationServiceManagementClientImpl client;

    /**
     * Initializes an instance of CommunicationServicesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public CommunicationServicesInner(Retrofit retrofit, CommunicationServiceManagementClientImpl client) {
        this.service = retrofit.create(CommunicationServicesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for CommunicationServices to be
     * used by Retrofit to perform actually REST calls.
     */
    interface CommunicationServicesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.communication.v2020_08_20_preview.CommunicationServices checkNameAvailability" })
        @POST("subscriptions/{subscriptionId}/providers/Microsoft.Communication/checkNameAvailability")
        Observable<Response<ResponseBody>> checkNameAvailability(@Path("subscriptionId") String subscriptionId, @Body NameAvailabilityParameters nameAvailabilityParameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.communication.v2020_08_20_preview.CommunicationServices linkNotificationHub" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/communicationServices/{communicationServiceName}/linkNotificationHub")
        Observable<Response<ResponseBody>> linkNotificationHub(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("communicationServiceName") String communicationServiceName, @Body LinkNotificationHubParameters linkNotificationHubParameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.communication.v2020_08_20_preview.CommunicationServices list" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.Communication/communicationServices")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.communication.v2020_08_20_preview.CommunicationServices listByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/communicationServices")
        Observable<Response<ResponseBody>> listByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.communication.v2020_08_20_preview.CommunicationServices update" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/communicationServices/{communicationServiceName}")
        Observable<Response<ResponseBody>> update(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("communicationServiceName") String communicationServiceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body TaggedResource parameters, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.communication.v2020_08_20_preview.CommunicationServices getByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/communicationServices/{communicationServiceName}")
        Observable<Response<ResponseBody>> getByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("communicationServiceName") String communicationServiceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.communication.v2020_08_20_preview.CommunicationServices createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/communicationServices/{communicationServiceName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("communicationServiceName") String communicationServiceName, @Body CommunicationServiceResourceInner parameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.communication.v2020_08_20_preview.CommunicationServices beginCreateOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/communicationServices/{communicationServiceName}")
        Observable<Response<ResponseBody>> beginCreateOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("communicationServiceName") String communicationServiceName, @Body CommunicationServiceResourceInner parameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.communication.v2020_08_20_preview.CommunicationServices delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/communicationServices/{communicationServiceName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("communicationServiceName") String communicationServiceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.communication.v2020_08_20_preview.CommunicationServices beginDelete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/communicationServices/{communicationServiceName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginDelete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("communicationServiceName") String communicationServiceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.communication.v2020_08_20_preview.CommunicationServices listKeys" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/communicationServices/{communicationServiceName}/listKeys")
        Observable<Response<ResponseBody>> listKeys(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("communicationServiceName") String communicationServiceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.communication.v2020_08_20_preview.CommunicationServices regenerateKey" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/communicationServices/{communicationServiceName}/regenerateKey")
        Observable<Response<ResponseBody>> regenerateKey(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("communicationServiceName") String communicationServiceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body RegenerateKeyParameters parameters, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.communication.v2020_08_20_preview.CommunicationServices listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.communication.v2020_08_20_preview.CommunicationServices listByResourceGroupNext" })
        @GET
        Observable<Response<ResponseBody>> listByResourceGroupNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Check Name Availability.
     * Checks that the CommunicationService name is valid and is not already in use.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the NameAvailabilityInner object if successful.
     */
    public NameAvailabilityInner checkNameAvailability() {
        return checkNameAvailabilityWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Check Name Availability.
     * Checks that the CommunicationService name is valid and is not already in use.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<NameAvailabilityInner> checkNameAvailabilityAsync(final ServiceCallback<NameAvailabilityInner> serviceCallback) {
        return ServiceFuture.fromResponse(checkNameAvailabilityWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Check Name Availability.
     * Checks that the CommunicationService name is valid and is not already in use.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the NameAvailabilityInner object
     */
    public Observable<NameAvailabilityInner> checkNameAvailabilityAsync() {
        return checkNameAvailabilityWithServiceResponseAsync().map(new Func1<ServiceResponse<NameAvailabilityInner>, NameAvailabilityInner>() {
            @Override
            public NameAvailabilityInner call(ServiceResponse<NameAvailabilityInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Check Name Availability.
     * Checks that the CommunicationService name is valid and is not already in use.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the NameAvailabilityInner object
     */
    public Observable<ServiceResponse<NameAvailabilityInner>> checkNameAvailabilityWithServiceResponseAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final NameAvailabilityParameters nameAvailabilityParameters = null;
        return service.checkNameAvailability(this.client.subscriptionId(), nameAvailabilityParameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<NameAvailabilityInner>>>() {
                @Override
                public Observable<ServiceResponse<NameAvailabilityInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<NameAvailabilityInner> clientResponse = checkNameAvailabilityDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Check Name Availability.
     * Checks that the CommunicationService name is valid and is not already in use.
     *
     * @param nameAvailabilityParameters Parameters supplied to the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the NameAvailabilityInner object if successful.
     */
    public NameAvailabilityInner checkNameAvailability(NameAvailabilityParameters nameAvailabilityParameters) {
        return checkNameAvailabilityWithServiceResponseAsync(nameAvailabilityParameters).toBlocking().single().body();
    }

    /**
     * Check Name Availability.
     * Checks that the CommunicationService name is valid and is not already in use.
     *
     * @param nameAvailabilityParameters Parameters supplied to the operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<NameAvailabilityInner> checkNameAvailabilityAsync(NameAvailabilityParameters nameAvailabilityParameters, final ServiceCallback<NameAvailabilityInner> serviceCallback) {
        return ServiceFuture.fromResponse(checkNameAvailabilityWithServiceResponseAsync(nameAvailabilityParameters), serviceCallback);
    }

    /**
     * Check Name Availability.
     * Checks that the CommunicationService name is valid and is not already in use.
     *
     * @param nameAvailabilityParameters Parameters supplied to the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the NameAvailabilityInner object
     */
    public Observable<NameAvailabilityInner> checkNameAvailabilityAsync(NameAvailabilityParameters nameAvailabilityParameters) {
        return checkNameAvailabilityWithServiceResponseAsync(nameAvailabilityParameters).map(new Func1<ServiceResponse<NameAvailabilityInner>, NameAvailabilityInner>() {
            @Override
            public NameAvailabilityInner call(ServiceResponse<NameAvailabilityInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Check Name Availability.
     * Checks that the CommunicationService name is valid and is not already in use.
     *
     * @param nameAvailabilityParameters Parameters supplied to the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the NameAvailabilityInner object
     */
    public Observable<ServiceResponse<NameAvailabilityInner>> checkNameAvailabilityWithServiceResponseAsync(NameAvailabilityParameters nameAvailabilityParameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        Validator.validate(nameAvailabilityParameters);
        return service.checkNameAvailability(this.client.subscriptionId(), nameAvailabilityParameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<NameAvailabilityInner>>>() {
                @Override
                public Observable<ServiceResponse<NameAvailabilityInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<NameAvailabilityInner> clientResponse = checkNameAvailabilityDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<NameAvailabilityInner> checkNameAvailabilityDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<NameAvailabilityInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<NameAvailabilityInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Link Notification Hub.
     * Links an Azure Notification Hub to this communication service.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the LinkedNotificationHubInner object if successful.
     */
    public LinkedNotificationHubInner linkNotificationHub(String resourceGroupName, String communicationServiceName) {
        return linkNotificationHubWithServiceResponseAsync(resourceGroupName, communicationServiceName).toBlocking().single().body();
    }

    /**
     * Link Notification Hub.
     * Links an Azure Notification Hub to this communication service.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<LinkedNotificationHubInner> linkNotificationHubAsync(String resourceGroupName, String communicationServiceName, final ServiceCallback<LinkedNotificationHubInner> serviceCallback) {
        return ServiceFuture.fromResponse(linkNotificationHubWithServiceResponseAsync(resourceGroupName, communicationServiceName), serviceCallback);
    }

    /**
     * Link Notification Hub.
     * Links an Azure Notification Hub to this communication service.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the LinkedNotificationHubInner object
     */
    public Observable<LinkedNotificationHubInner> linkNotificationHubAsync(String resourceGroupName, String communicationServiceName) {
        return linkNotificationHubWithServiceResponseAsync(resourceGroupName, communicationServiceName).map(new Func1<ServiceResponse<LinkedNotificationHubInner>, LinkedNotificationHubInner>() {
            @Override
            public LinkedNotificationHubInner call(ServiceResponse<LinkedNotificationHubInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Link Notification Hub.
     * Links an Azure Notification Hub to this communication service.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the LinkedNotificationHubInner object
     */
    public Observable<ServiceResponse<LinkedNotificationHubInner>> linkNotificationHubWithServiceResponseAsync(String resourceGroupName, String communicationServiceName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (communicationServiceName == null) {
            throw new IllegalArgumentException("Parameter communicationServiceName is required and cannot be null.");
        }
        final LinkNotificationHubParameters linkNotificationHubParameters = null;
        return service.linkNotificationHub(this.client.subscriptionId(), resourceGroupName, communicationServiceName, linkNotificationHubParameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<LinkedNotificationHubInner>>>() {
                @Override
                public Observable<ServiceResponse<LinkedNotificationHubInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<LinkedNotificationHubInner> clientResponse = linkNotificationHubDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Link Notification Hub.
     * Links an Azure Notification Hub to this communication service.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @param linkNotificationHubParameters Parameters supplied to the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the LinkedNotificationHubInner object if successful.
     */
    public LinkedNotificationHubInner linkNotificationHub(String resourceGroupName, String communicationServiceName, LinkNotificationHubParameters linkNotificationHubParameters) {
        return linkNotificationHubWithServiceResponseAsync(resourceGroupName, communicationServiceName, linkNotificationHubParameters).toBlocking().single().body();
    }

    /**
     * Link Notification Hub.
     * Links an Azure Notification Hub to this communication service.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @param linkNotificationHubParameters Parameters supplied to the operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<LinkedNotificationHubInner> linkNotificationHubAsync(String resourceGroupName, String communicationServiceName, LinkNotificationHubParameters linkNotificationHubParameters, final ServiceCallback<LinkedNotificationHubInner> serviceCallback) {
        return ServiceFuture.fromResponse(linkNotificationHubWithServiceResponseAsync(resourceGroupName, communicationServiceName, linkNotificationHubParameters), serviceCallback);
    }

    /**
     * Link Notification Hub.
     * Links an Azure Notification Hub to this communication service.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @param linkNotificationHubParameters Parameters supplied to the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the LinkedNotificationHubInner object
     */
    public Observable<LinkedNotificationHubInner> linkNotificationHubAsync(String resourceGroupName, String communicationServiceName, LinkNotificationHubParameters linkNotificationHubParameters) {
        return linkNotificationHubWithServiceResponseAsync(resourceGroupName, communicationServiceName, linkNotificationHubParameters).map(new Func1<ServiceResponse<LinkedNotificationHubInner>, LinkedNotificationHubInner>() {
            @Override
            public LinkedNotificationHubInner call(ServiceResponse<LinkedNotificationHubInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Link Notification Hub.
     * Links an Azure Notification Hub to this communication service.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @param linkNotificationHubParameters Parameters supplied to the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the LinkedNotificationHubInner object
     */
    public Observable<ServiceResponse<LinkedNotificationHubInner>> linkNotificationHubWithServiceResponseAsync(String resourceGroupName, String communicationServiceName, LinkNotificationHubParameters linkNotificationHubParameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (communicationServiceName == null) {
            throw new IllegalArgumentException("Parameter communicationServiceName is required and cannot be null.");
        }
        Validator.validate(linkNotificationHubParameters);
        return service.linkNotificationHub(this.client.subscriptionId(), resourceGroupName, communicationServiceName, linkNotificationHubParameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<LinkedNotificationHubInner>>>() {
                @Override
                public Observable<ServiceResponse<LinkedNotificationHubInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<LinkedNotificationHubInner> clientResponse = linkNotificationHubDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<LinkedNotificationHubInner> linkNotificationHubDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<LinkedNotificationHubInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<LinkedNotificationHubInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * List By Subscription.
     * Handles requests to list all resources in a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;CommunicationServiceResourceInner&gt; object if successful.
     */
    public PagedList<CommunicationServiceResourceInner> list() {
        ServiceResponse<Page<CommunicationServiceResourceInner>> response = listSinglePageAsync().toBlocking().single();
        return new PagedList<CommunicationServiceResourceInner>(response.body()) {
            @Override
            public Page<CommunicationServiceResourceInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List By Subscription.
     * Handles requests to list all resources in a subscription.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<CommunicationServiceResourceInner>> listAsync(final ListOperationCallback<CommunicationServiceResourceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(),
            new Func1<String, Observable<ServiceResponse<Page<CommunicationServiceResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CommunicationServiceResourceInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List By Subscription.
     * Handles requests to list all resources in a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;CommunicationServiceResourceInner&gt; object
     */
    public Observable<Page<CommunicationServiceResourceInner>> listAsync() {
        return listWithServiceResponseAsync()
            .map(new Func1<ServiceResponse<Page<CommunicationServiceResourceInner>>, Page<CommunicationServiceResourceInner>>() {
                @Override
                public Page<CommunicationServiceResourceInner> call(ServiceResponse<Page<CommunicationServiceResourceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List By Subscription.
     * Handles requests to list all resources in a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;CommunicationServiceResourceInner&gt; object
     */
    public Observable<ServiceResponse<Page<CommunicationServiceResourceInner>>> listWithServiceResponseAsync() {
        return listSinglePageAsync()
            .concatMap(new Func1<ServiceResponse<Page<CommunicationServiceResourceInner>>, Observable<ServiceResponse<Page<CommunicationServiceResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CommunicationServiceResourceInner>>> call(ServiceResponse<Page<CommunicationServiceResourceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List By Subscription.
     * Handles requests to list all resources in a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;CommunicationServiceResourceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<CommunicationServiceResourceInner>>> listSinglePageAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        return service.list(this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<CommunicationServiceResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CommunicationServiceResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<CommunicationServiceResourceInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<CommunicationServiceResourceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<CommunicationServiceResourceInner>> listDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<CommunicationServiceResourceInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<CommunicationServiceResourceInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * List By Resource Group.
     * Handles requests to list all resources in a resource group.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;CommunicationServiceResourceInner&gt; object if successful.
     */
    public PagedList<CommunicationServiceResourceInner> listByResourceGroup(final String resourceGroupName) {
        ServiceResponse<Page<CommunicationServiceResourceInner>> response = listByResourceGroupSinglePageAsync(resourceGroupName).toBlocking().single();
        return new PagedList<CommunicationServiceResourceInner>(response.body()) {
            @Override
            public Page<CommunicationServiceResourceInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List By Resource Group.
     * Handles requests to list all resources in a resource group.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<CommunicationServiceResourceInner>> listByResourceGroupAsync(final String resourceGroupName, final ListOperationCallback<CommunicationServiceResourceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupSinglePageAsync(resourceGroupName),
            new Func1<String, Observable<ServiceResponse<Page<CommunicationServiceResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CommunicationServiceResourceInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List By Resource Group.
     * Handles requests to list all resources in a resource group.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;CommunicationServiceResourceInner&gt; object
     */
    public Observable<Page<CommunicationServiceResourceInner>> listByResourceGroupAsync(final String resourceGroupName) {
        return listByResourceGroupWithServiceResponseAsync(resourceGroupName)
            .map(new Func1<ServiceResponse<Page<CommunicationServiceResourceInner>>, Page<CommunicationServiceResourceInner>>() {
                @Override
                public Page<CommunicationServiceResourceInner> call(ServiceResponse<Page<CommunicationServiceResourceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List By Resource Group.
     * Handles requests to list all resources in a resource group.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;CommunicationServiceResourceInner&gt; object
     */
    public Observable<ServiceResponse<Page<CommunicationServiceResourceInner>>> listByResourceGroupWithServiceResponseAsync(final String resourceGroupName) {
        return listByResourceGroupSinglePageAsync(resourceGroupName)
            .concatMap(new Func1<ServiceResponse<Page<CommunicationServiceResourceInner>>, Observable<ServiceResponse<Page<CommunicationServiceResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CommunicationServiceResourceInner>>> call(ServiceResponse<Page<CommunicationServiceResourceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List By Resource Group.
     * Handles requests to list all resources in a resource group.
     *
    ServiceResponse<PageImpl<CommunicationServiceResourceInner>> * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;CommunicationServiceResourceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<CommunicationServiceResourceInner>>> listByResourceGroupSinglePageAsync(final String resourceGroupName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        return service.listByResourceGroup(this.client.subscriptionId(), resourceGroupName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<CommunicationServiceResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CommunicationServiceResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<CommunicationServiceResourceInner>> result = listByResourceGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<CommunicationServiceResourceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<CommunicationServiceResourceInner>> listByResourceGroupDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<CommunicationServiceResourceInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<CommunicationServiceResourceInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Update.
     * Operation to update an existing CommunicationService.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CommunicationServiceResourceInner object if successful.
     */
    public CommunicationServiceResourceInner update(String resourceGroupName, String communicationServiceName) {
        return updateWithServiceResponseAsync(resourceGroupName, communicationServiceName).toBlocking().single().body();
    }

    /**
     * Update.
     * Operation to update an existing CommunicationService.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CommunicationServiceResourceInner> updateAsync(String resourceGroupName, String communicationServiceName, final ServiceCallback<CommunicationServiceResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, communicationServiceName), serviceCallback);
    }

    /**
     * Update.
     * Operation to update an existing CommunicationService.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CommunicationServiceResourceInner object
     */
    public Observable<CommunicationServiceResourceInner> updateAsync(String resourceGroupName, String communicationServiceName) {
        return updateWithServiceResponseAsync(resourceGroupName, communicationServiceName).map(new Func1<ServiceResponse<CommunicationServiceResourceInner>, CommunicationServiceResourceInner>() {
            @Override
            public CommunicationServiceResourceInner call(ServiceResponse<CommunicationServiceResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Update.
     * Operation to update an existing CommunicationService.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CommunicationServiceResourceInner object
     */
    public Observable<ServiceResponse<CommunicationServiceResourceInner>> updateWithServiceResponseAsync(String resourceGroupName, String communicationServiceName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (communicationServiceName == null) {
            throw new IllegalArgumentException("Parameter communicationServiceName is required and cannot be null.");
        }
        final Map<String, String> tags = null;
        TaggedResource parameters = new TaggedResource();
        parameters.withTags(null);
        return service.update(this.client.subscriptionId(), resourceGroupName, communicationServiceName, this.client.apiVersion(), this.client.acceptLanguage(), parameters, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CommunicationServiceResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<CommunicationServiceResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CommunicationServiceResourceInner> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Update.
     * Operation to update an existing CommunicationService.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @param tags Tags of the service which is a list of key value pairs that describe the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CommunicationServiceResourceInner object if successful.
     */
    public CommunicationServiceResourceInner update(String resourceGroupName, String communicationServiceName, Map<String, String> tags) {
        return updateWithServiceResponseAsync(resourceGroupName, communicationServiceName, tags).toBlocking().single().body();
    }

    /**
     * Update.
     * Operation to update an existing CommunicationService.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @param tags Tags of the service which is a list of key value pairs that describe the resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CommunicationServiceResourceInner> updateAsync(String resourceGroupName, String communicationServiceName, Map<String, String> tags, final ServiceCallback<CommunicationServiceResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, communicationServiceName, tags), serviceCallback);
    }

    /**
     * Update.
     * Operation to update an existing CommunicationService.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @param tags Tags of the service which is a list of key value pairs that describe the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CommunicationServiceResourceInner object
     */
    public Observable<CommunicationServiceResourceInner> updateAsync(String resourceGroupName, String communicationServiceName, Map<String, String> tags) {
        return updateWithServiceResponseAsync(resourceGroupName, communicationServiceName, tags).map(new Func1<ServiceResponse<CommunicationServiceResourceInner>, CommunicationServiceResourceInner>() {
            @Override
            public CommunicationServiceResourceInner call(ServiceResponse<CommunicationServiceResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Update.
     * Operation to update an existing CommunicationService.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @param tags Tags of the service which is a list of key value pairs that describe the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CommunicationServiceResourceInner object
     */
    public Observable<ServiceResponse<CommunicationServiceResourceInner>> updateWithServiceResponseAsync(String resourceGroupName, String communicationServiceName, Map<String, String> tags) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (communicationServiceName == null) {
            throw new IllegalArgumentException("Parameter communicationServiceName is required and cannot be null.");
        }
        Validator.validate(tags);
        TaggedResource parameters = null;
        if (tags != null) {
            parameters = new TaggedResource();
            parameters.withTags(tags);
        }
        return service.update(this.client.subscriptionId(), resourceGroupName, communicationServiceName, this.client.apiVersion(), this.client.acceptLanguage(), parameters, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CommunicationServiceResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<CommunicationServiceResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CommunicationServiceResourceInner> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<CommunicationServiceResourceInner> updateDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<CommunicationServiceResourceInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<CommunicationServiceResourceInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Get.
     * Get the CommunicationService and its properties.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CommunicationServiceResourceInner object if successful.
     */
    public CommunicationServiceResourceInner getByResourceGroup(String resourceGroupName, String communicationServiceName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, communicationServiceName).toBlocking().single().body();
    }

    /**
     * Get.
     * Get the CommunicationService and its properties.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CommunicationServiceResourceInner> getByResourceGroupAsync(String resourceGroupName, String communicationServiceName, final ServiceCallback<CommunicationServiceResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(getByResourceGroupWithServiceResponseAsync(resourceGroupName, communicationServiceName), serviceCallback);
    }

    /**
     * Get.
     * Get the CommunicationService and its properties.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CommunicationServiceResourceInner object
     */
    public Observable<CommunicationServiceResourceInner> getByResourceGroupAsync(String resourceGroupName, String communicationServiceName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, communicationServiceName).map(new Func1<ServiceResponse<CommunicationServiceResourceInner>, CommunicationServiceResourceInner>() {
            @Override
            public CommunicationServiceResourceInner call(ServiceResponse<CommunicationServiceResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get.
     * Get the CommunicationService and its properties.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CommunicationServiceResourceInner object
     */
    public Observable<ServiceResponse<CommunicationServiceResourceInner>> getByResourceGroupWithServiceResponseAsync(String resourceGroupName, String communicationServiceName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (communicationServiceName == null) {
            throw new IllegalArgumentException("Parameter communicationServiceName is required and cannot be null.");
        }
        return service.getByResourceGroup(this.client.subscriptionId(), resourceGroupName, communicationServiceName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CommunicationServiceResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<CommunicationServiceResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CommunicationServiceResourceInner> clientResponse = getByResourceGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<CommunicationServiceResourceInner> getByResourceGroupDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<CommunicationServiceResourceInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<CommunicationServiceResourceInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Create Or Update.
     * Create a new CommunicationService or update an existing CommunicationService.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CommunicationServiceResourceInner object if successful.
     */
    public CommunicationServiceResourceInner createOrUpdate(String resourceGroupName, String communicationServiceName) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, communicationServiceName).toBlocking().last().body();
    }

    /**
     * Create Or Update.
     * Create a new CommunicationService or update an existing CommunicationService.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CommunicationServiceResourceInner> createOrUpdateAsync(String resourceGroupName, String communicationServiceName, final ServiceCallback<CommunicationServiceResourceInner> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, communicationServiceName), serviceCallback);
    }

    /**
     * Create Or Update.
     * Create a new CommunicationService or update an existing CommunicationService.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<CommunicationServiceResourceInner> createOrUpdateAsync(String resourceGroupName, String communicationServiceName) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, communicationServiceName).map(new Func1<ServiceResponseWithHeaders<CommunicationServiceResourceInner, CommunicationServiceCreateOrUpdateHeaders>, CommunicationServiceResourceInner>() {
            @Override
            public CommunicationServiceResourceInner call(ServiceResponseWithHeaders<CommunicationServiceResourceInner, CommunicationServiceCreateOrUpdateHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Create Or Update.
     * Create a new CommunicationService or update an existing CommunicationService.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponseWithHeaders<CommunicationServiceResourceInner, CommunicationServiceCreateOrUpdateHeaders>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String communicationServiceName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (communicationServiceName == null) {
            throw new IllegalArgumentException("Parameter communicationServiceName is required and cannot be null.");
        }
        final CommunicationServiceResourceInner parameters = null;
        Observable<Response<ResponseBody>> observable = service.createOrUpdate(this.client.subscriptionId(), resourceGroupName, communicationServiceName, parameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultWithHeadersAsync(observable, new TypeToken<CommunicationServiceResourceInner>() { }.getType(), CommunicationServiceCreateOrUpdateHeaders.class);
    }
    /**
     * Create Or Update.
     * Create a new CommunicationService or update an existing CommunicationService.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @param parameters Parameters for the create or update operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CommunicationServiceResourceInner object if successful.
     */
    public CommunicationServiceResourceInner createOrUpdate(String resourceGroupName, String communicationServiceName, CommunicationServiceResourceInner parameters) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, communicationServiceName, parameters).toBlocking().last().body();
    }

    /**
     * Create Or Update.
     * Create a new CommunicationService or update an existing CommunicationService.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @param parameters Parameters for the create or update operation
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CommunicationServiceResourceInner> createOrUpdateAsync(String resourceGroupName, String communicationServiceName, CommunicationServiceResourceInner parameters, final ServiceCallback<CommunicationServiceResourceInner> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, communicationServiceName, parameters), serviceCallback);
    }

    /**
     * Create Or Update.
     * Create a new CommunicationService or update an existing CommunicationService.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @param parameters Parameters for the create or update operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<CommunicationServiceResourceInner> createOrUpdateAsync(String resourceGroupName, String communicationServiceName, CommunicationServiceResourceInner parameters) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, communicationServiceName, parameters).map(new Func1<ServiceResponseWithHeaders<CommunicationServiceResourceInner, CommunicationServiceCreateOrUpdateHeaders>, CommunicationServiceResourceInner>() {
            @Override
            public CommunicationServiceResourceInner call(ServiceResponseWithHeaders<CommunicationServiceResourceInner, CommunicationServiceCreateOrUpdateHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Create Or Update.
     * Create a new CommunicationService or update an existing CommunicationService.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @param parameters Parameters for the create or update operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponseWithHeaders<CommunicationServiceResourceInner, CommunicationServiceCreateOrUpdateHeaders>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String communicationServiceName, CommunicationServiceResourceInner parameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (communicationServiceName == null) {
            throw new IllegalArgumentException("Parameter communicationServiceName is required and cannot be null.");
        }
        Validator.validate(parameters);
        Observable<Response<ResponseBody>> observable = service.createOrUpdate(this.client.subscriptionId(), resourceGroupName, communicationServiceName, parameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultWithHeadersAsync(observable, new TypeToken<CommunicationServiceResourceInner>() { }.getType(), CommunicationServiceCreateOrUpdateHeaders.class);
    }

    /**
     * Create Or Update.
     * Create a new CommunicationService or update an existing CommunicationService.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CommunicationServiceResourceInner object if successful.
     */
    public CommunicationServiceResourceInner beginCreateOrUpdate(String resourceGroupName, String communicationServiceName) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, communicationServiceName).toBlocking().single().body();
    }

    /**
     * Create Or Update.
     * Create a new CommunicationService or update an existing CommunicationService.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CommunicationServiceResourceInner> beginCreateOrUpdateAsync(String resourceGroupName, String communicationServiceName, final ServiceCallback<CommunicationServiceResourceInner> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, communicationServiceName), serviceCallback);
    }

    /**
     * Create Or Update.
     * Create a new CommunicationService or update an existing CommunicationService.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CommunicationServiceResourceInner object
     */
    public Observable<CommunicationServiceResourceInner> beginCreateOrUpdateAsync(String resourceGroupName, String communicationServiceName) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, communicationServiceName).map(new Func1<ServiceResponseWithHeaders<CommunicationServiceResourceInner, CommunicationServiceCreateOrUpdateHeaders>, CommunicationServiceResourceInner>() {
            @Override
            public CommunicationServiceResourceInner call(ServiceResponseWithHeaders<CommunicationServiceResourceInner, CommunicationServiceCreateOrUpdateHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Create Or Update.
     * Create a new CommunicationService or update an existing CommunicationService.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CommunicationServiceResourceInner object
     */
    public Observable<ServiceResponseWithHeaders<CommunicationServiceResourceInner, CommunicationServiceCreateOrUpdateHeaders>> beginCreateOrUpdateWithServiceResponseAsync(String resourceGroupName, String communicationServiceName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (communicationServiceName == null) {
            throw new IllegalArgumentException("Parameter communicationServiceName is required and cannot be null.");
        }
        final CommunicationServiceResourceInner parameters = null;
        return service.beginCreateOrUpdate(this.client.subscriptionId(), resourceGroupName, communicationServiceName, parameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<CommunicationServiceResourceInner, CommunicationServiceCreateOrUpdateHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<CommunicationServiceResourceInner, CommunicationServiceCreateOrUpdateHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<CommunicationServiceResourceInner, CommunicationServiceCreateOrUpdateHeaders> clientResponse = beginCreateOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Create Or Update.
     * Create a new CommunicationService or update an existing CommunicationService.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @param parameters Parameters for the create or update operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CommunicationServiceResourceInner object if successful.
     */
    public CommunicationServiceResourceInner beginCreateOrUpdate(String resourceGroupName, String communicationServiceName, CommunicationServiceResourceInner parameters) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, communicationServiceName, parameters).toBlocking().single().body();
    }

    /**
     * Create Or Update.
     * Create a new CommunicationService or update an existing CommunicationService.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @param parameters Parameters for the create or update operation
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CommunicationServiceResourceInner> beginCreateOrUpdateAsync(String resourceGroupName, String communicationServiceName, CommunicationServiceResourceInner parameters, final ServiceCallback<CommunicationServiceResourceInner> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, communicationServiceName, parameters), serviceCallback);
    }

    /**
     * Create Or Update.
     * Create a new CommunicationService or update an existing CommunicationService.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @param parameters Parameters for the create or update operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CommunicationServiceResourceInner object
     */
    public Observable<CommunicationServiceResourceInner> beginCreateOrUpdateAsync(String resourceGroupName, String communicationServiceName, CommunicationServiceResourceInner parameters) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, communicationServiceName, parameters).map(new Func1<ServiceResponseWithHeaders<CommunicationServiceResourceInner, CommunicationServiceCreateOrUpdateHeaders>, CommunicationServiceResourceInner>() {
            @Override
            public CommunicationServiceResourceInner call(ServiceResponseWithHeaders<CommunicationServiceResourceInner, CommunicationServiceCreateOrUpdateHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Create Or Update.
     * Create a new CommunicationService or update an existing CommunicationService.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @param parameters Parameters for the create or update operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CommunicationServiceResourceInner object
     */
    public Observable<ServiceResponseWithHeaders<CommunicationServiceResourceInner, CommunicationServiceCreateOrUpdateHeaders>> beginCreateOrUpdateWithServiceResponseAsync(String resourceGroupName, String communicationServiceName, CommunicationServiceResourceInner parameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (communicationServiceName == null) {
            throw new IllegalArgumentException("Parameter communicationServiceName is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.beginCreateOrUpdate(this.client.subscriptionId(), resourceGroupName, communicationServiceName, parameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<CommunicationServiceResourceInner, CommunicationServiceCreateOrUpdateHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<CommunicationServiceResourceInner, CommunicationServiceCreateOrUpdateHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<CommunicationServiceResourceInner, CommunicationServiceCreateOrUpdateHeaders> clientResponse = beginCreateOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponseWithHeaders<CommunicationServiceResourceInner, CommunicationServiceCreateOrUpdateHeaders> beginCreateOrUpdateDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<CommunicationServiceResourceInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<CommunicationServiceResourceInner>() { }.getType())
                .register(201, new TypeToken<CommunicationServiceResourceInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .buildWithHeaders(response, CommunicationServiceCreateOrUpdateHeaders.class);
    }

    /**
     * Delete.
     * Operation to delete a CommunicationService.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String communicationServiceName) {
        deleteWithServiceResponseAsync(resourceGroupName, communicationServiceName).toBlocking().last().body();
    }

    /**
     * Delete.
     * Operation to delete a CommunicationService.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String communicationServiceName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(deleteWithServiceResponseAsync(resourceGroupName, communicationServiceName), serviceCallback);
    }

    /**
     * Delete.
     * Operation to delete a CommunicationService.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String communicationServiceName) {
        return deleteWithServiceResponseAsync(resourceGroupName, communicationServiceName).map(new Func1<ServiceResponseWithHeaders<Void, CommunicationServiceDeleteHeaders>, Void>() {
            @Override
            public Void call(ServiceResponseWithHeaders<Void, CommunicationServiceDeleteHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete.
     * Operation to delete a CommunicationService.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponseWithHeaders<Void, CommunicationServiceDeleteHeaders>> deleteWithServiceResponseAsync(String resourceGroupName, String communicationServiceName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (communicationServiceName == null) {
            throw new IllegalArgumentException("Parameter communicationServiceName is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.delete(this.client.subscriptionId(), resourceGroupName, communicationServiceName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultWithHeadersAsync(observable, new TypeToken<Void>() { }.getType(), CommunicationServiceDeleteHeaders.class);
    }

    /**
     * Delete.
     * Operation to delete a CommunicationService.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDelete(String resourceGroupName, String communicationServiceName) {
        beginDeleteWithServiceResponseAsync(resourceGroupName, communicationServiceName).toBlocking().single().body();
    }

    /**
     * Delete.
     * Operation to delete a CommunicationService.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDeleteAsync(String resourceGroupName, String communicationServiceName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(beginDeleteWithServiceResponseAsync(resourceGroupName, communicationServiceName), serviceCallback);
    }

    /**
     * Delete.
     * Operation to delete a CommunicationService.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    public Observable<Void> beginDeleteAsync(String resourceGroupName, String communicationServiceName) {
        return beginDeleteWithServiceResponseAsync(resourceGroupName, communicationServiceName).map(new Func1<ServiceResponseWithHeaders<Void, CommunicationServiceDeleteHeaders>, Void>() {
            @Override
            public Void call(ServiceResponseWithHeaders<Void, CommunicationServiceDeleteHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete.
     * Operation to delete a CommunicationService.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    public Observable<ServiceResponseWithHeaders<Void, CommunicationServiceDeleteHeaders>> beginDeleteWithServiceResponseAsync(String resourceGroupName, String communicationServiceName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (communicationServiceName == null) {
            throw new IllegalArgumentException("Parameter communicationServiceName is required and cannot be null.");
        }
        return service.beginDelete(this.client.subscriptionId(), resourceGroupName, communicationServiceName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<Void, CommunicationServiceDeleteHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<Void, CommunicationServiceDeleteHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<Void, CommunicationServiceDeleteHeaders> clientResponse = beginDeleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponseWithHeaders<Void, CommunicationServiceDeleteHeaders> beginDeleteDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .buildWithHeaders(response, CommunicationServiceDeleteHeaders.class);
    }

    /**
     * List Keys.
     * Get the access keys of the CommunicationService resource.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CommunicationServiceKeysInner object if successful.
     */
    public CommunicationServiceKeysInner listKeys(String resourceGroupName, String communicationServiceName) {
        return listKeysWithServiceResponseAsync(resourceGroupName, communicationServiceName).toBlocking().single().body();
    }

    /**
     * List Keys.
     * Get the access keys of the CommunicationService resource.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CommunicationServiceKeysInner> listKeysAsync(String resourceGroupName, String communicationServiceName, final ServiceCallback<CommunicationServiceKeysInner> serviceCallback) {
        return ServiceFuture.fromResponse(listKeysWithServiceResponseAsync(resourceGroupName, communicationServiceName), serviceCallback);
    }

    /**
     * List Keys.
     * Get the access keys of the CommunicationService resource.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CommunicationServiceKeysInner object
     */
    public Observable<CommunicationServiceKeysInner> listKeysAsync(String resourceGroupName, String communicationServiceName) {
        return listKeysWithServiceResponseAsync(resourceGroupName, communicationServiceName).map(new Func1<ServiceResponse<CommunicationServiceKeysInner>, CommunicationServiceKeysInner>() {
            @Override
            public CommunicationServiceKeysInner call(ServiceResponse<CommunicationServiceKeysInner> response) {
                return response.body();
            }
        });
    }

    /**
     * List Keys.
     * Get the access keys of the CommunicationService resource.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CommunicationServiceKeysInner object
     */
    public Observable<ServiceResponse<CommunicationServiceKeysInner>> listKeysWithServiceResponseAsync(String resourceGroupName, String communicationServiceName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (communicationServiceName == null) {
            throw new IllegalArgumentException("Parameter communicationServiceName is required and cannot be null.");
        }
        return service.listKeys(this.client.subscriptionId(), resourceGroupName, communicationServiceName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CommunicationServiceKeysInner>>>() {
                @Override
                public Observable<ServiceResponse<CommunicationServiceKeysInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CommunicationServiceKeysInner> clientResponse = listKeysDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<CommunicationServiceKeysInner> listKeysDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<CommunicationServiceKeysInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<CommunicationServiceKeysInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Regenerate Key.
     * Regenerate CommunicationService access key. PrimaryKey and SecondaryKey cannot be regenerated at the same time.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CommunicationServiceKeysInner object if successful.
     */
    public CommunicationServiceKeysInner regenerateKey(String resourceGroupName, String communicationServiceName) {
        return regenerateKeyWithServiceResponseAsync(resourceGroupName, communicationServiceName).toBlocking().single().body();
    }

    /**
     * Regenerate Key.
     * Regenerate CommunicationService access key. PrimaryKey and SecondaryKey cannot be regenerated at the same time.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CommunicationServiceKeysInner> regenerateKeyAsync(String resourceGroupName, String communicationServiceName, final ServiceCallback<CommunicationServiceKeysInner> serviceCallback) {
        return ServiceFuture.fromResponse(regenerateKeyWithServiceResponseAsync(resourceGroupName, communicationServiceName), serviceCallback);
    }

    /**
     * Regenerate Key.
     * Regenerate CommunicationService access key. PrimaryKey and SecondaryKey cannot be regenerated at the same time.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CommunicationServiceKeysInner object
     */
    public Observable<CommunicationServiceKeysInner> regenerateKeyAsync(String resourceGroupName, String communicationServiceName) {
        return regenerateKeyWithServiceResponseAsync(resourceGroupName, communicationServiceName).map(new Func1<ServiceResponse<CommunicationServiceKeysInner>, CommunicationServiceKeysInner>() {
            @Override
            public CommunicationServiceKeysInner call(ServiceResponse<CommunicationServiceKeysInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Regenerate Key.
     * Regenerate CommunicationService access key. PrimaryKey and SecondaryKey cannot be regenerated at the same time.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CommunicationServiceKeysInner object
     */
    public Observable<ServiceResponse<CommunicationServiceKeysInner>> regenerateKeyWithServiceResponseAsync(String resourceGroupName, String communicationServiceName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (communicationServiceName == null) {
            throw new IllegalArgumentException("Parameter communicationServiceName is required and cannot be null.");
        }
        final KeyType keyType = null;
        RegenerateKeyParameters parameters = new RegenerateKeyParameters();
        parameters.withKeyType(null);
        return service.regenerateKey(this.client.subscriptionId(), resourceGroupName, communicationServiceName, this.client.apiVersion(), this.client.acceptLanguage(), parameters, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CommunicationServiceKeysInner>>>() {
                @Override
                public Observable<ServiceResponse<CommunicationServiceKeysInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CommunicationServiceKeysInner> clientResponse = regenerateKeyDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Regenerate Key.
     * Regenerate CommunicationService access key. PrimaryKey and SecondaryKey cannot be regenerated at the same time.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @param keyType The keyType to regenerate. Must be either 'primary' or 'secondary'(case-insensitive). Possible values include: 'Primary', 'Secondary'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CommunicationServiceKeysInner object if successful.
     */
    public CommunicationServiceKeysInner regenerateKey(String resourceGroupName, String communicationServiceName, KeyType keyType) {
        return regenerateKeyWithServiceResponseAsync(resourceGroupName, communicationServiceName, keyType).toBlocking().single().body();
    }

    /**
     * Regenerate Key.
     * Regenerate CommunicationService access key. PrimaryKey and SecondaryKey cannot be regenerated at the same time.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @param keyType The keyType to regenerate. Must be either 'primary' or 'secondary'(case-insensitive). Possible values include: 'Primary', 'Secondary'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CommunicationServiceKeysInner> regenerateKeyAsync(String resourceGroupName, String communicationServiceName, KeyType keyType, final ServiceCallback<CommunicationServiceKeysInner> serviceCallback) {
        return ServiceFuture.fromResponse(regenerateKeyWithServiceResponseAsync(resourceGroupName, communicationServiceName, keyType), serviceCallback);
    }

    /**
     * Regenerate Key.
     * Regenerate CommunicationService access key. PrimaryKey and SecondaryKey cannot be regenerated at the same time.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @param keyType The keyType to regenerate. Must be either 'primary' or 'secondary'(case-insensitive). Possible values include: 'Primary', 'Secondary'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CommunicationServiceKeysInner object
     */
    public Observable<CommunicationServiceKeysInner> regenerateKeyAsync(String resourceGroupName, String communicationServiceName, KeyType keyType) {
        return regenerateKeyWithServiceResponseAsync(resourceGroupName, communicationServiceName, keyType).map(new Func1<ServiceResponse<CommunicationServiceKeysInner>, CommunicationServiceKeysInner>() {
            @Override
            public CommunicationServiceKeysInner call(ServiceResponse<CommunicationServiceKeysInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Regenerate Key.
     * Regenerate CommunicationService access key. PrimaryKey and SecondaryKey cannot be regenerated at the same time.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param communicationServiceName The name of the CommunicationService resource.
     * @param keyType The keyType to regenerate. Must be either 'primary' or 'secondary'(case-insensitive). Possible values include: 'Primary', 'Secondary'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CommunicationServiceKeysInner object
     */
    public Observable<ServiceResponse<CommunicationServiceKeysInner>> regenerateKeyWithServiceResponseAsync(String resourceGroupName, String communicationServiceName, KeyType keyType) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (communicationServiceName == null) {
            throw new IllegalArgumentException("Parameter communicationServiceName is required and cannot be null.");
        }
        RegenerateKeyParameters parameters = null;
        if (keyType != null) {
            parameters = new RegenerateKeyParameters();
            parameters.withKeyType(keyType);
        }
        return service.regenerateKey(this.client.subscriptionId(), resourceGroupName, communicationServiceName, this.client.apiVersion(), this.client.acceptLanguage(), parameters, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CommunicationServiceKeysInner>>>() {
                @Override
                public Observable<ServiceResponse<CommunicationServiceKeysInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CommunicationServiceKeysInner> clientResponse = regenerateKeyDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<CommunicationServiceKeysInner> regenerateKeyDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<CommunicationServiceKeysInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<CommunicationServiceKeysInner>() { }.getType())
                .register(201, new TypeToken<CommunicationServiceKeysInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * List By Subscription.
     * Handles requests to list all resources in a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;CommunicationServiceResourceInner&gt; object if successful.
     */
    public PagedList<CommunicationServiceResourceInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<CommunicationServiceResourceInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<CommunicationServiceResourceInner>(response.body()) {
            @Override
            public Page<CommunicationServiceResourceInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List By Subscription.
     * Handles requests to list all resources in a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<CommunicationServiceResourceInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<CommunicationServiceResourceInner>> serviceFuture, final ListOperationCallback<CommunicationServiceResourceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<CommunicationServiceResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CommunicationServiceResourceInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List By Subscription.
     * Handles requests to list all resources in a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;CommunicationServiceResourceInner&gt; object
     */
    public Observable<Page<CommunicationServiceResourceInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<CommunicationServiceResourceInner>>, Page<CommunicationServiceResourceInner>>() {
                @Override
                public Page<CommunicationServiceResourceInner> call(ServiceResponse<Page<CommunicationServiceResourceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List By Subscription.
     * Handles requests to list all resources in a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;CommunicationServiceResourceInner&gt; object
     */
    public Observable<ServiceResponse<Page<CommunicationServiceResourceInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<CommunicationServiceResourceInner>>, Observable<ServiceResponse<Page<CommunicationServiceResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CommunicationServiceResourceInner>>> call(ServiceResponse<Page<CommunicationServiceResourceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List By Subscription.
     * Handles requests to list all resources in a subscription.
     *
    ServiceResponse<PageImpl<CommunicationServiceResourceInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;CommunicationServiceResourceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<CommunicationServiceResourceInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<CommunicationServiceResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CommunicationServiceResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<CommunicationServiceResourceInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<CommunicationServiceResourceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<CommunicationServiceResourceInner>> listNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<CommunicationServiceResourceInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<CommunicationServiceResourceInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * List By Resource Group.
     * Handles requests to list all resources in a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;CommunicationServiceResourceInner&gt; object if successful.
     */
    public PagedList<CommunicationServiceResourceInner> listByResourceGroupNext(final String nextPageLink) {
        ServiceResponse<Page<CommunicationServiceResourceInner>> response = listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<CommunicationServiceResourceInner>(response.body()) {
            @Override
            public Page<CommunicationServiceResourceInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List By Resource Group.
     * Handles requests to list all resources in a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<CommunicationServiceResourceInner>> listByResourceGroupNextAsync(final String nextPageLink, final ServiceFuture<List<CommunicationServiceResourceInner>> serviceFuture, final ListOperationCallback<CommunicationServiceResourceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<CommunicationServiceResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CommunicationServiceResourceInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List By Resource Group.
     * Handles requests to list all resources in a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;CommunicationServiceResourceInner&gt; object
     */
    public Observable<Page<CommunicationServiceResourceInner>> listByResourceGroupNextAsync(final String nextPageLink) {
        return listByResourceGroupNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<CommunicationServiceResourceInner>>, Page<CommunicationServiceResourceInner>>() {
                @Override
                public Page<CommunicationServiceResourceInner> call(ServiceResponse<Page<CommunicationServiceResourceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List By Resource Group.
     * Handles requests to list all resources in a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;CommunicationServiceResourceInner&gt; object
     */
    public Observable<ServiceResponse<Page<CommunicationServiceResourceInner>>> listByResourceGroupNextWithServiceResponseAsync(final String nextPageLink) {
        return listByResourceGroupNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<CommunicationServiceResourceInner>>, Observable<ServiceResponse<Page<CommunicationServiceResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CommunicationServiceResourceInner>>> call(ServiceResponse<Page<CommunicationServiceResourceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List By Resource Group.
     * Handles requests to list all resources in a resource group.
     *
    ServiceResponse<PageImpl<CommunicationServiceResourceInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;CommunicationServiceResourceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<CommunicationServiceResourceInner>>> listByResourceGroupNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByResourceGroupNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<CommunicationServiceResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CommunicationServiceResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<CommunicationServiceResourceInner>> result = listByResourceGroupNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<CommunicationServiceResourceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<CommunicationServiceResourceInner>> listByResourceGroupNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<CommunicationServiceResourceInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<CommunicationServiceResourceInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
