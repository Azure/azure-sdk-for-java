// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.communication.callingserver.implementation;

import com.azure.communication.callingserver.implementation.models.CommunicationErrorException;
import com.azure.communication.callingserver.implementation.models.GetCallRecordingStateResponse;
import com.azure.communication.callingserver.implementation.models.InviteParticipantsRequest;
import com.azure.communication.callingserver.implementation.models.JoinCallRequest;
import com.azure.communication.callingserver.implementation.models.PlayAudioRequest;
import com.azure.communication.callingserver.implementation.models.StartCallRecordingRequest;
import com.azure.communication.callingserver.implementation.models.StartCallRecordingResponse;
import com.azure.communication.callingserver.models.JoinCallResponse;
import com.azure.communication.callingserver.models.PlayAudioResponse;
import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in Conversations. */
public final class ConversationsImpl {
    /** The proxy service used to perform REST calls. */
    private final ConversationsService service;

    /** The service client containing this operation class. */
    private final AzureCommunicationCallingServerServiceImpl client;

    /**
     * Initializes an instance of ConversationsImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    ConversationsImpl(AzureCommunicationCallingServerServiceImpl client) {
        this.service =
                RestProxy.create(ConversationsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AzureCommunicationCallingServerServiceConversations to be used by the
     * proxy service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "AzureCommunicationCa")
    private interface ConversationsService {
        @Post("/calling/conversations/{conversationId}/Join")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(
                value = CommunicationErrorException.class,
                code = {400, 401, 500})
        @UnexpectedResponseExceptionType(CommunicationErrorException.class)
        Mono<Response<JoinCallResponse>> joinCall(
                @HostParam("endpoint") String endpoint,
                @PathParam("conversationId") String conversationId,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") JoinCallRequest callRequest,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/calling/conversations/{conversationId}/PlayAudio")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(
                value = CommunicationErrorException.class,
                code = {400, 401, 500})
        @UnexpectedResponseExceptionType(CommunicationErrorException.class)
        Mono<Response<PlayAudioResponse>> playAudio(
                @HostParam("endpoint") String endpoint,
                @PathParam("conversationId") String conversationId,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") PlayAudioRequest request,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/calling/conversations/{conversationId}/participants")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(
                value = CommunicationErrorException.class,
                code = {400, 401, 500})
        @UnexpectedResponseExceptionType(CommunicationErrorException.class)
        Mono<Response<Void>> inviteParticipants(
                @HostParam("endpoint") String endpoint,
                @PathParam("conversationId") String conversationId,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") InviteParticipantsRequest inviteParticipantsRequest,
                @HeaderParam("Accept") String accept,
                Context context);

        @Delete("/calling/conversations/{conversationId}/participants/{participantId}")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(
                value = CommunicationErrorException.class,
                code = {400, 401, 500})
        @UnexpectedResponseExceptionType(CommunicationErrorException.class)
        Mono<Response<Void>> removeParticipant(
                @HostParam("endpoint") String endpoint,
                @PathParam("conversationId") String conversationId,
                @PathParam("participantId") String participantId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/calling/conversations/{conversationId}/recordings")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = CommunicationErrorException.class,
                code = {400, 404, 500})
        @UnexpectedResponseExceptionType(CommunicationErrorException.class)
        Mono<Response<StartCallRecordingResponse>> startRecording(
                @HostParam("endpoint") String endpoint,
                @PathParam("conversationId") String conversationId,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") StartCallRecordingRequest request,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/calling/conversations/{conversationId}/recordings/{recordingId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = CommunicationErrorException.class,
                code = {400, 404, 500})
        @UnexpectedResponseExceptionType(CommunicationErrorException.class)
        Mono<Response<GetCallRecordingStateResponse>> recordingState(
                @HostParam("endpoint") String endpoint,
                @PathParam("conversationId") String conversationId,
                @PathParam("recordingId") String recordingId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                Context context);

        @Delete("/calling/conversations/{conversationId}/recordings/{recordingId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = CommunicationErrorException.class,
                code = {400, 500})
        @UnexpectedResponseExceptionType(CommunicationErrorException.class)
        Mono<Response<Void>> stopRecording(
                @HostParam("endpoint") String endpoint,
                @PathParam("conversationId") String conversationId,
                @PathParam("recordingId") String recordingId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/calling/conversations/{conversationId}/recordings/{recordingId}/Pause")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = CommunicationErrorException.class,
                code = {400, 500})
        @UnexpectedResponseExceptionType(CommunicationErrorException.class)
        Mono<Response<Void>> pauseRecording(
                @HostParam("endpoint") String endpoint,
                @PathParam("conversationId") String conversationId,
                @PathParam("recordingId") String recordingId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/calling/conversations/{conversationId}/recordings/{recordingId}/Resume")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = CommunicationErrorException.class,
                code = {400, 500})
        @UnexpectedResponseExceptionType(CommunicationErrorException.class)
        Mono<Response<Void>> resumeRecording(
                @HostParam("endpoint") String endpoint,
                @PathParam("conversationId") String conversationId,
                @PathParam("recordingId") String recordingId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                Context context);
    }

    /**
     * Join a call.
     *
     * @param conversationId The conversation id which can be guid or encoded cs url.
     * @param callRequest The join call request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 401, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload of the join call operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<JoinCallResponse>> joinCallWithResponseAsync(
            String conversationId, JoinCallRequest callRequest) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.joinCall(
                                this.client.getEndpoint(),
                                conversationId,
                                this.client.getApiVersion(),
                                callRequest,
                                accept,
                                context));
    }

    /**
     * Join a call.
     *
     * @param conversationId The conversation id which can be guid or encoded cs url.
     * @param callRequest The join call request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 401, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload of the join call operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<JoinCallResponse>> joinCallWithResponseAsync(
            String conversationId, JoinCallRequest callRequest, Context context) {
        final String accept = "application/json";
        return service.joinCall(
                this.client.getEndpoint(), conversationId, this.client.getApiVersion(), callRequest, accept, context);
    }

    /**
     * Join a call.
     *
     * @param conversationId The conversation id which can be guid or encoded cs url.
     * @param callRequest The join call request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 401, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload of the join call operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<JoinCallResponse> joinCallAsync(String conversationId, JoinCallRequest callRequest) {
        return joinCallWithResponseAsync(conversationId, callRequest)
                .flatMap(
                        (Response<JoinCallResponse> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Join a call.
     *
     * @param conversationId The conversation id which can be guid or encoded cs url.
     * @param callRequest The join call request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 401, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload of the join call operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<JoinCallResponse> joinCallAsync(String conversationId, JoinCallRequest callRequest, Context context) {
        return joinCallWithResponseAsync(conversationId, callRequest, context)
                .flatMap(
                        (Response<JoinCallResponse> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Join a call.
     *
     * @param conversationId The conversation id which can be guid or encoded cs url.
     * @param callRequest The join call request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 401, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload of the join call operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public JoinCallResponse joinCall(String conversationId, JoinCallRequest callRequest) {
        return joinCallAsync(conversationId, callRequest).block();
    }

    /**
     * Join a call.
     *
     * @param conversationId The conversation id which can be guid or encoded cs url.
     * @param callRequest The join call request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 401, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload of the join call operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<JoinCallResponse> joinCallWithResponse(
            String conversationId, JoinCallRequest callRequest, Context context) {
        return joinCallWithResponseAsync(conversationId, callRequest, context).block();
    }

    /**
     * Play audio in a call.
     *
     * @param conversationId The conversation id which can be guid or encoded cs url.
     * @param request Play audio request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 401, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload for play audio operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<PlayAudioResponse>> playAudioWithResponseAsync(
            String conversationId, PlayAudioRequest request) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.playAudio(
                                this.client.getEndpoint(),
                                conversationId,
                                this.client.getApiVersion(),
                                request,
                                accept,
                                context));
    }

    /**
     * Play audio in a call.
     *
     * @param conversationId The conversation id which can be guid or encoded cs url.
     * @param request Play audio request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 401, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload for play audio operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<PlayAudioResponse>> playAudioWithResponseAsync(
            String conversationId, PlayAudioRequest request, Context context) {
        final String accept = "application/json";
        return service.playAudio(
                this.client.getEndpoint(), conversationId, this.client.getApiVersion(), request, accept, context);
    }

    /**
     * Play audio in a call.
     *
     * @param conversationId The conversation id which can be guid or encoded cs url.
     * @param request Play audio request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 401, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload for play audio operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PlayAudioResponse> playAudioAsync(String conversationId, PlayAudioRequest request) {
        return playAudioWithResponseAsync(conversationId, request)
                .flatMap(
                        (Response<PlayAudioResponse> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Play audio in a call.
     *
     * @param conversationId The conversation id which can be guid or encoded cs url.
     * @param request Play audio request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 401, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload for play audio operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PlayAudioResponse> playAudioAsync(String conversationId, PlayAudioRequest request, Context context) {
        return playAudioWithResponseAsync(conversationId, request, context)
                .flatMap(
                        (Response<PlayAudioResponse> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Play audio in a call.
     *
     * @param conversationId The conversation id which can be guid or encoded cs url.
     * @param request Play audio request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 401, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload for play audio operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PlayAudioResponse playAudio(String conversationId, PlayAudioRequest request) {
        return playAudioAsync(conversationId, request).block();
    }

    /**
     * Play audio in a call.
     *
     * @param conversationId The conversation id which can be guid or encoded cs url.
     * @param request Play audio request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 401, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload for play audio operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<PlayAudioResponse> playAudioWithResponse(
            String conversationId, PlayAudioRequest request, Context context) {
        return playAudioWithResponseAsync(conversationId, request, context).block();
    }

    /**
     * Invite participants to the call.
     *
     * @param conversationId Conversation id.
     * @param inviteParticipantsRequest Invite participant request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 401, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> inviteParticipantsWithResponseAsync(
            String conversationId, InviteParticipantsRequest inviteParticipantsRequest) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.inviteParticipants(
                                this.client.getEndpoint(),
                                conversationId,
                                this.client.getApiVersion(),
                                inviteParticipantsRequest,
                                accept,
                                context));
    }

    /**
     * Invite participants to the call.
     *
     * @param conversationId Conversation id.
     * @param inviteParticipantsRequest Invite participant request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 401, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> inviteParticipantsWithResponseAsync(
            String conversationId, InviteParticipantsRequest inviteParticipantsRequest, Context context) {
        final String accept = "application/json";
        return service.inviteParticipants(
                this.client.getEndpoint(),
                conversationId,
                this.client.getApiVersion(),
                inviteParticipantsRequest,
                accept,
                context);
    }

    /**
     * Invite participants to the call.
     *
     * @param conversationId Conversation id.
     * @param inviteParticipantsRequest Invite participant request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 401, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> inviteParticipantsAsync(
            String conversationId, InviteParticipantsRequest inviteParticipantsRequest) {
        return inviteParticipantsWithResponseAsync(conversationId, inviteParticipantsRequest)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Invite participants to the call.
     *
     * @param conversationId Conversation id.
     * @param inviteParticipantsRequest Invite participant request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 401, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> inviteParticipantsAsync(
            String conversationId, InviteParticipantsRequest inviteParticipantsRequest, Context context) {
        return inviteParticipantsWithResponseAsync(conversationId, inviteParticipantsRequest, context)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Invite participants to the call.
     *
     * @param conversationId Conversation id.
     * @param inviteParticipantsRequest Invite participant request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 401, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void inviteParticipants(String conversationId, InviteParticipantsRequest inviteParticipantsRequest) {
        inviteParticipantsAsync(conversationId, inviteParticipantsRequest).block();
    }

    /**
     * Invite participants to the call.
     *
     * @param conversationId Conversation id.
     * @param inviteParticipantsRequest Invite participant request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 401, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> inviteParticipantsWithResponse(
            String conversationId, InviteParticipantsRequest inviteParticipantsRequest, Context context) {
        return inviteParticipantsWithResponseAsync(conversationId, inviteParticipantsRequest, context).block();
    }

    /**
     * Remove participant from the call.
     *
     * @param conversationId Conversation id.
     * @param participantId Participant id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 401, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> removeParticipantWithResponseAsync(String conversationId, String participantId) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.removeParticipant(
                                this.client.getEndpoint(),
                                conversationId,
                                participantId,
                                this.client.getApiVersion(),
                                accept,
                                context));
    }

    /**
     * Remove participant from the call.
     *
     * @param conversationId Conversation id.
     * @param participantId Participant id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 401, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> removeParticipantWithResponseAsync(
            String conversationId, String participantId, Context context) {
        final String accept = "application/json";
        return service.removeParticipant(
                this.client.getEndpoint(), conversationId, participantId, this.client.getApiVersion(), accept, context);
    }

    /**
     * Remove participant from the call.
     *
     * @param conversationId Conversation id.
     * @param participantId Participant id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 401, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> removeParticipantAsync(String conversationId, String participantId) {
        return removeParticipantWithResponseAsync(conversationId, participantId)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Remove participant from the call.
     *
     * @param conversationId Conversation id.
     * @param participantId Participant id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 401, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> removeParticipantAsync(String conversationId, String participantId, Context context) {
        return removeParticipantWithResponseAsync(conversationId, participantId, context)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Remove participant from the call.
     *
     * @param conversationId Conversation id.
     * @param participantId Participant id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 401, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void removeParticipant(String conversationId, String participantId) {
        removeParticipantAsync(conversationId, participantId).block();
    }

    /**
     * Remove participant from the call.
     *
     * @param conversationId Conversation id.
     * @param participantId Participant id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 401, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> removeParticipantWithResponse(String conversationId, String participantId, Context context) {
        return removeParticipantWithResponseAsync(conversationId, participantId, context).block();
    }

    /**
     * Start call recording request.
     *
     * @param conversationId Encoded conversation url.
     * @param request Request body of start call recording request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 404, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload of start call recording operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<StartCallRecordingResponse>> startRecordingWithResponseAsync(
            String conversationId, StartCallRecordingRequest request) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.startRecording(
                                this.client.getEndpoint(),
                                conversationId,
                                this.client.getApiVersion(),
                                request,
                                accept,
                                context));
    }

    /**
     * Start call recording request.
     *
     * @param conversationId Encoded conversation url.
     * @param request Request body of start call recording request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 404, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload of start call recording operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<StartCallRecordingResponse>> startRecordingWithResponseAsync(
            String conversationId, StartCallRecordingRequest request, Context context) {
        final String accept = "application/json";
        return service.startRecording(
                this.client.getEndpoint(), conversationId, this.client.getApiVersion(), request, accept, context);
    }

    /**
     * Start call recording request.
     *
     * @param conversationId Encoded conversation url.
     * @param request Request body of start call recording request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 404, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload of start call recording operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<StartCallRecordingResponse> startRecordingAsync(
            String conversationId, StartCallRecordingRequest request) {
        return startRecordingWithResponseAsync(conversationId, request)
                .flatMap(
                        (Response<StartCallRecordingResponse> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Start call recording request.
     *
     * @param conversationId Encoded conversation url.
     * @param request Request body of start call recording request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 404, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload of start call recording operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<StartCallRecordingResponse> startRecordingAsync(
            String conversationId, StartCallRecordingRequest request, Context context) {
        return startRecordingWithResponseAsync(conversationId, request, context)
                .flatMap(
                        (Response<StartCallRecordingResponse> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Start call recording request.
     *
     * @param conversationId Encoded conversation url.
     * @param request Request body of start call recording request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 404, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload of start call recording operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public StartCallRecordingResponse startRecording(String conversationId, StartCallRecordingRequest request) {
        return startRecordingAsync(conversationId, request).block();
    }

    /**
     * Start call recording request.
     *
     * @param conversationId Encoded conversation url.
     * @param request Request body of start call recording request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 404, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload of start call recording operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<StartCallRecordingResponse> startRecordingWithResponse(
            String conversationId, StartCallRecordingRequest request, Context context) {
        return startRecordingWithResponseAsync(conversationId, request, context).block();
    }

    /**
     * Get call recording state.
     *
     * @param conversationId Encoded conversation url.
     * @param recordingId Recording id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 404, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return call recording state.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<GetCallRecordingStateResponse>> recordingStateWithResponseAsync(
            String conversationId, String recordingId) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.recordingState(
                                this.client.getEndpoint(),
                                conversationId,
                                recordingId,
                                this.client.getApiVersion(),
                                accept,
                                context));
    }

    /**
     * Get call recording state.
     *
     * @param conversationId Encoded conversation url.
     * @param recordingId Recording id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 404, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return call recording state.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<GetCallRecordingStateResponse>> recordingStateWithResponseAsync(
            String conversationId, String recordingId, Context context) {
        final String accept = "application/json";
        return service.recordingState(
                this.client.getEndpoint(), conversationId, recordingId, this.client.getApiVersion(), accept, context);
    }

    /**
     * Get call recording state.
     *
     * @param conversationId Encoded conversation url.
     * @param recordingId Recording id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 404, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return call recording state.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<GetCallRecordingStateResponse> recordingStateAsync(String conversationId, String recordingId) {
        return recordingStateWithResponseAsync(conversationId, recordingId)
                .flatMap(
                        (Response<GetCallRecordingStateResponse> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Get call recording state.
     *
     * @param conversationId Encoded conversation url.
     * @param recordingId Recording id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 404, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return call recording state.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<GetCallRecordingStateResponse> recordingStateAsync(
            String conversationId, String recordingId, Context context) {
        return recordingStateWithResponseAsync(conversationId, recordingId, context)
                .flatMap(
                        (Response<GetCallRecordingStateResponse> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Get call recording state.
     *
     * @param conversationId Encoded conversation url.
     * @param recordingId Recording id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 404, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return call recording state.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GetCallRecordingStateResponse recordingState(String conversationId, String recordingId) {
        return recordingStateAsync(conversationId, recordingId).block();
    }

    /**
     * Get call recording state.
     *
     * @param conversationId Encoded conversation url.
     * @param recordingId Recording id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 404, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return call recording state.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<GetCallRecordingStateResponse> recordingStateWithResponse(
            String conversationId, String recordingId, Context context) {
        return recordingStateWithResponseAsync(conversationId, recordingId, context).block();
    }

    /**
     * Stop recording a call.
     *
     * @param conversationId Encoded conversation url.
     * @param recordingId Recording id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> stopRecordingWithResponseAsync(String conversationId, String recordingId) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.stopRecording(
                                this.client.getEndpoint(),
                                conversationId,
                                recordingId,
                                this.client.getApiVersion(),
                                accept,
                                context));
    }

    /**
     * Stop recording a call.
     *
     * @param conversationId Encoded conversation url.
     * @param recordingId Recording id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> stopRecordingWithResponseAsync(
            String conversationId, String recordingId, Context context) {
        final String accept = "application/json";
        return service.stopRecording(
                this.client.getEndpoint(), conversationId, recordingId, this.client.getApiVersion(), accept, context);
    }

    /**
     * Stop recording a call.
     *
     * @param conversationId Encoded conversation url.
     * @param recordingId Recording id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> stopRecordingAsync(String conversationId, String recordingId) {
        return stopRecordingWithResponseAsync(conversationId, recordingId)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Stop recording a call.
     *
     * @param conversationId Encoded conversation url.
     * @param recordingId Recording id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> stopRecordingAsync(String conversationId, String recordingId, Context context) {
        return stopRecordingWithResponseAsync(conversationId, recordingId, context)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Stop recording a call.
     *
     * @param conversationId Encoded conversation url.
     * @param recordingId Recording id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void stopRecording(String conversationId, String recordingId) {
        stopRecordingAsync(conversationId, recordingId).block();
    }

    /**
     * Stop recording a call.
     *
     * @param conversationId Encoded conversation url.
     * @param recordingId Recording id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> stopRecordingWithResponse(String conversationId, String recordingId, Context context) {
        return stopRecordingWithResponseAsync(conversationId, recordingId, context).block();
    }

    /**
     * Pause recording a call.
     *
     * @param conversationId Encoded conversation url.
     * @param recordingId Recording id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> pauseRecordingWithResponseAsync(String conversationId, String recordingId) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.pauseRecording(
                                this.client.getEndpoint(),
                                conversationId,
                                recordingId,
                                this.client.getApiVersion(),
                                accept,
                                context));
    }

    /**
     * Pause recording a call.
     *
     * @param conversationId Encoded conversation url.
     * @param recordingId Recording id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> pauseRecordingWithResponseAsync(
            String conversationId, String recordingId, Context context) {
        final String accept = "application/json";
        return service.pauseRecording(
                this.client.getEndpoint(), conversationId, recordingId, this.client.getApiVersion(), accept, context);
    }

    /**
     * Pause recording a call.
     *
     * @param conversationId Encoded conversation url.
     * @param recordingId Recording id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> pauseRecordingAsync(String conversationId, String recordingId) {
        return pauseRecordingWithResponseAsync(conversationId, recordingId)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Pause recording a call.
     *
     * @param conversationId Encoded conversation url.
     * @param recordingId Recording id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> pauseRecordingAsync(String conversationId, String recordingId, Context context) {
        return pauseRecordingWithResponseAsync(conversationId, recordingId, context)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Pause recording a call.
     *
     * @param conversationId Encoded conversation url.
     * @param recordingId Recording id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void pauseRecording(String conversationId, String recordingId) {
        pauseRecordingAsync(conversationId, recordingId).block();
    }

    /**
     * Pause recording a call.
     *
     * @param conversationId Encoded conversation url.
     * @param recordingId Recording id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> pauseRecordingWithResponse(String conversationId, String recordingId, Context context) {
        return pauseRecordingWithResponseAsync(conversationId, recordingId, context).block();
    }

    /**
     * Resume recording a call.
     *
     * @param conversationId Encoded conversation url.
     * @param recordingId Recording id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> resumeRecordingWithResponseAsync(String conversationId, String recordingId) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.resumeRecording(
                                this.client.getEndpoint(),
                                conversationId,
                                recordingId,
                                this.client.getApiVersion(),
                                accept,
                                context));
    }

    /**
     * Resume recording a call.
     *
     * @param conversationId Encoded conversation url.
     * @param recordingId Recording id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> resumeRecordingWithResponseAsync(
            String conversationId, String recordingId, Context context) {
        final String accept = "application/json";
        return service.resumeRecording(
                this.client.getEndpoint(), conversationId, recordingId, this.client.getApiVersion(), accept, context);
    }

    /**
     * Resume recording a call.
     *
     * @param conversationId Encoded conversation url.
     * @param recordingId Recording id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> resumeRecordingAsync(String conversationId, String recordingId) {
        return resumeRecordingWithResponseAsync(conversationId, recordingId)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Resume recording a call.
     *
     * @param conversationId Encoded conversation url.
     * @param recordingId Recording id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> resumeRecordingAsync(String conversationId, String recordingId, Context context) {
        return resumeRecordingWithResponseAsync(conversationId, recordingId, context)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Resume recording a call.
     *
     * @param conversationId Encoded conversation url.
     * @param recordingId Recording id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void resumeRecording(String conversationId, String recordingId) {
        resumeRecordingAsync(conversationId, recordingId).block();
    }

    /**
     * Resume recording a call.
     *
     * @param conversationId Encoded conversation url.
     * @param recordingId Recording id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> resumeRecordingWithResponse(String conversationId, String recordingId, Context context) {
        return resumeRecordingWithResponseAsync(conversationId, recordingId, context).block();
    }
}
