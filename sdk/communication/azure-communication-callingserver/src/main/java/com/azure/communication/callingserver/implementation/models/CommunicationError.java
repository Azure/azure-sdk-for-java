// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.communication.callingserver.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The CommunicationError model.
 */
@Fluent
public final class CommunicationError implements JsonSerializable<CommunicationError> {
    /*
     * The code property.
     */
    private String code;

    /*
     * The message property.
     */
    private String message;

    /*
     * The target property.
     */
    private String target;

    /*
     * The details property.
     */
    private List<CommunicationError> details;

    /*
     * The innererror property.
     */
    private CommunicationError innererror;

    /**
     * Creates an instance of CommunicationError class.
     */
    public CommunicationError() {
    }

    /**
     * Get the code property: The code property.
     * 
     * @return the code value.
     */
    public String getCode() {
        return this.code;
    }

    /**
     * Set the code property: The code property.
     * 
     * @param code the code value to set.
     * @return the CommunicationError object itself.
     */
    public CommunicationError setCode(String code) {
        this.code = code;
        return this;
    }

    /**
     * Get the message property: The message property.
     * 
     * @return the message value.
     */
    public String getMessage() {
        return this.message;
    }

    /**
     * Set the message property: The message property.
     * 
     * @param message the message value to set.
     * @return the CommunicationError object itself.
     */
    public CommunicationError setMessage(String message) {
        this.message = message;
        return this;
    }

    /**
     * Get the target property: The target property.
     * 
     * @return the target value.
     */
    public String getTarget() {
        return this.target;
    }

    /**
     * Set the target property: The target property.
     * 
     * @param target the target value to set.
     * @return the CommunicationError object itself.
     */
    public CommunicationError setTarget(String target) {
        this.target = target;
        return this;
    }

    /**
     * Get the details property: The details property.
     * 
     * @return the details value.
     */
    public List<CommunicationError> getDetails() {
        return this.details;
    }

    /**
     * Set the details property: The details property.
     * 
     * @param details the details value to set.
     * @return the CommunicationError object itself.
     */
    public CommunicationError setDetails(List<CommunicationError> details) {
        this.details = details;
        return this;
    }

    /**
     * Get the innererror property: The innererror property.
     * 
     * @return the innererror value.
     */
    public CommunicationError getInnererror() {
        return this.innererror;
    }

    /**
     * Set the innererror property: The innererror property.
     * 
     * @param innererror the innererror value to set.
     * @return the CommunicationError object itself.
     */
    public CommunicationError setInnererror(CommunicationError innererror) {
        this.innererror = innererror;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("code", this.code);
        jsonWriter.writeStringField("message", this.message);
        jsonWriter.writeStringField("target", this.target);
        jsonWriter.writeArrayField("details", this.details, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("innererror", this.innererror);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CommunicationError from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CommunicationError if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the CommunicationError.
     */
    public static CommunicationError fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CommunicationError deserializedCommunicationError = new CommunicationError();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("code".equals(fieldName)) {
                    deserializedCommunicationError.code = reader.getString();
                } else if ("message".equals(fieldName)) {
                    deserializedCommunicationError.message = reader.getString();
                } else if ("target".equals(fieldName)) {
                    deserializedCommunicationError.target = reader.getString();
                } else if ("details".equals(fieldName)) {
                    List<CommunicationError> details
                        = reader.readArray(reader1 -> CommunicationError.fromJson(reader1));
                    deserializedCommunicationError.details = details;
                } else if ("innererror".equals(fieldName)) {
                    deserializedCommunicationError.innererror = CommunicationError.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCommunicationError;
        });
    }
}
