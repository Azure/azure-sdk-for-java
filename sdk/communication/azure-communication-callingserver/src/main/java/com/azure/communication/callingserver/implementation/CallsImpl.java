// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.communication.callingserver.implementation;

import com.azure.communication.callingserver.implementation.models.CancelAllMediaOperationsRequest;
import com.azure.communication.callingserver.implementation.models.CancelAllMediaOperationsResponse;
import com.azure.communication.callingserver.implementation.models.CommunicationErrorException;
import com.azure.communication.callingserver.implementation.models.CreateCallRequestInternal;
import com.azure.communication.callingserver.implementation.models.CreateCallResponse;
import com.azure.communication.callingserver.implementation.models.InviteParticipantsRequestInternal;
import com.azure.communication.callingserver.implementation.models.PlayAudioRequestInternal;
import com.azure.communication.callingserver.implementation.models.PlayAudioResponse;
import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in Calls. */
public final class CallsImpl {
    /** The proxy service used to perform REST calls. */
    private final CallsService service;

    /** The service client containing this operation class. */
    private final AzureCommunicationCallingServerServiceImpl client;

    /**
     * Initializes an instance of CallsImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    CallsImpl(AzureCommunicationCallingServerServiceImpl client) {
        this.service = RestProxy.create(CallsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AzureCommunicationCallingServerServiceCalls to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "AzureCommunicationCa")
    private interface CallsService {
        @Post("/calling/calls")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(
                value = CommunicationErrorException.class,
                code = {400, 401, 500})
        @UnexpectedResponseExceptionType(CommunicationErrorException.class)
        Mono<Response<CreateCallResponse>> createCall(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") CreateCallRequestInternal callRequest,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/calling/calls/{callId}/Hangup")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(
                value = CommunicationErrorException.class,
                code = {400, 401, 500})
        @UnexpectedResponseExceptionType(CommunicationErrorException.class)
        Mono<Response<Void>> hangupCall(
                @HostParam("endpoint") String endpoint,
                @PathParam("callId") String callId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                Context context);

        @Delete("/calling/calls/{callId}")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(
                value = CommunicationErrorException.class,
                code = {400, 401, 500})
        @UnexpectedResponseExceptionType(CommunicationErrorException.class)
        Mono<Response<Void>> deleteCall(
                @HostParam("endpoint") String endpoint,
                @PathParam("callId") String callId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/calling/calls/{callId}/PlayAudio")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(
                value = CommunicationErrorException.class,
                code = {400, 401, 500})
        @UnexpectedResponseExceptionType(CommunicationErrorException.class)
        Mono<Response<PlayAudioResponse>> playAudio(
                @HostParam("endpoint") String endpoint,
                @PathParam("callId") String callId,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") PlayAudioRequestInternal request,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/calling/calls/{callId}/CancelMediaProcessing")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = CommunicationErrorException.class,
                code = {400, 401, 500})
        @UnexpectedResponseExceptionType(CommunicationErrorException.class)
        Mono<Response<CancelAllMediaOperationsResponse>> cancelAllMediaOperations(
                @HostParam("endpoint") String endpoint,
                @PathParam("callId") String callId,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") CancelAllMediaOperationsRequest request,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/calling/calls/{callId}/participants")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(
                value = CommunicationErrorException.class,
                code = {400, 401, 500})
        @UnexpectedResponseExceptionType(CommunicationErrorException.class)
        Mono<Response<Void>> inviteParticipants(
                @HostParam("endpoint") String endpoint,
                @PathParam("callId") String callId,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") InviteParticipantsRequestInternal inviteParticipantsRequest,
                @HeaderParam("Accept") String accept,
                Context context);

        @Delete("/calling/calls/{callId}/participants/{participantId}")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(
                value = CommunicationErrorException.class,
                code = {400, 401, 500})
        @UnexpectedResponseExceptionType(CommunicationErrorException.class)
        Mono<Response<Void>> removeParticipant(
                @HostParam("endpoint") String endpoint,
                @PathParam("callId") String callId,
                @PathParam("participantId") String participantId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                Context context);
    }

    /**
     * Create a new call.
     *
     * @param callRequest Create call request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 401, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload of the create call operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<CreateCallResponse>> createCallWithResponseAsync(CreateCallRequestInternal callRequest) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.createCall(
                                this.client.getEndpoint(), this.client.getApiVersion(), callRequest, accept, context));
    }

    /**
     * Create a new call.
     *
     * @param callRequest Create call request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 401, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload of the create call operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<CreateCallResponse>> createCallWithResponseAsync(
            CreateCallRequestInternal callRequest, Context context) {
        final String accept = "application/json";
        return service.createCall(this.client.getEndpoint(), this.client.getApiVersion(), callRequest, accept, context);
    }

    /**
     * Create a new call.
     *
     * @param callRequest Create call request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 401, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload of the create call operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CreateCallResponse> createCallAsync(CreateCallRequestInternal callRequest) {
        return createCallWithResponseAsync(callRequest)
                .flatMap(
                        (Response<CreateCallResponse> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Create a new call.
     *
     * @param callRequest Create call request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 401, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload of the create call operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CreateCallResponse> createCallAsync(CreateCallRequestInternal callRequest, Context context) {
        return createCallWithResponseAsync(callRequest, context)
                .flatMap(
                        (Response<CreateCallResponse> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Create a new call.
     *
     * @param callRequest Create call request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 401, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload of the create call operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CreateCallResponse createCall(CreateCallRequestInternal callRequest) {
        return createCallAsync(callRequest).block();
    }

    /**
     * Create a new call.
     *
     * @param callRequest Create call request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 401, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload of the create call operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<CreateCallResponse> createCallWithResponse(CreateCallRequestInternal callRequest, Context context) {
        return createCallWithResponseAsync(callRequest, context).block();
    }

    /**
     * Hangup a call.
     *
     * @param callId Call id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 401, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> hangupCallWithResponseAsync(String callId) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.hangupCall(
                                this.client.getEndpoint(), callId, this.client.getApiVersion(), accept, context));
    }

    /**
     * Hangup a call.
     *
     * @param callId Call id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 401, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> hangupCallWithResponseAsync(String callId, Context context) {
        final String accept = "application/json";
        return service.hangupCall(this.client.getEndpoint(), callId, this.client.getApiVersion(), accept, context);
    }

    /**
     * Hangup a call.
     *
     * @param callId Call id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 401, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> hangupCallAsync(String callId) {
        return hangupCallWithResponseAsync(callId).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Hangup a call.
     *
     * @param callId Call id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 401, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> hangupCallAsync(String callId, Context context) {
        return hangupCallWithResponseAsync(callId, context).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Hangup a call.
     *
     * @param callId Call id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 401, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void hangupCall(String callId) {
        hangupCallAsync(callId).block();
    }

    /**
     * Hangup a call.
     *
     * @param callId Call id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 401, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> hangupCallWithResponse(String callId, Context context) {
        return hangupCallWithResponseAsync(callId, context).block();
    }

    /**
     * Delete a call.
     *
     * @param callId Call id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 401, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteCallWithResponseAsync(String callId) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.deleteCall(
                                this.client.getEndpoint(), callId, this.client.getApiVersion(), accept, context));
    }

    /**
     * Delete a call.
     *
     * @param callId Call id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 401, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteCallWithResponseAsync(String callId, Context context) {
        final String accept = "application/json";
        return service.deleteCall(this.client.getEndpoint(), callId, this.client.getApiVersion(), accept, context);
    }

    /**
     * Delete a call.
     *
     * @param callId Call id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 401, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteCallAsync(String callId) {
        return deleteCallWithResponseAsync(callId).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Delete a call.
     *
     * @param callId Call id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 401, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteCallAsync(String callId, Context context) {
        return deleteCallWithResponseAsync(callId, context).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Delete a call.
     *
     * @param callId Call id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 401, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteCall(String callId) {
        deleteCallAsync(callId).block();
    }

    /**
     * Delete a call.
     *
     * @param callId Call id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 401, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteCallWithResponse(String callId, Context context) {
        return deleteCallWithResponseAsync(callId, context).block();
    }

    /**
     * Play audio in a call.
     *
     * @param callId The call id.
     * @param request Play audio request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 401, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload for play audio operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<PlayAudioResponse>> playAudioWithResponseAsync(
            String callId, PlayAudioRequestInternal request) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.playAudio(
                                this.client.getEndpoint(),
                                callId,
                                this.client.getApiVersion(),
                                request,
                                accept,
                                context));
    }

    /**
     * Play audio in a call.
     *
     * @param callId The call id.
     * @param request Play audio request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 401, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload for play audio operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<PlayAudioResponse>> playAudioWithResponseAsync(
            String callId, PlayAudioRequestInternal request, Context context) {
        final String accept = "application/json";
        return service.playAudio(
                this.client.getEndpoint(), callId, this.client.getApiVersion(), request, accept, context);
    }

    /**
     * Play audio in a call.
     *
     * @param callId The call id.
     * @param request Play audio request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 401, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload for play audio operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PlayAudioResponse> playAudioAsync(String callId, PlayAudioRequestInternal request) {
        return playAudioWithResponseAsync(callId, request)
                .flatMap(
                        (Response<PlayAudioResponse> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Play audio in a call.
     *
     * @param callId The call id.
     * @param request Play audio request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 401, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload for play audio operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PlayAudioResponse> playAudioAsync(String callId, PlayAudioRequestInternal request, Context context) {
        return playAudioWithResponseAsync(callId, request, context)
                .flatMap(
                        (Response<PlayAudioResponse> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Play audio in a call.
     *
     * @param callId The call id.
     * @param request Play audio request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 401, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload for play audio operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PlayAudioResponse playAudio(String callId, PlayAudioRequestInternal request) {
        return playAudioAsync(callId, request).block();
    }

    /**
     * Play audio in a call.
     *
     * @param callId The call id.
     * @param request Play audio request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 401, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload for play audio operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<PlayAudioResponse> playAudioWithResponse(
            String callId, PlayAudioRequestInternal request, Context context) {
        return playAudioWithResponseAsync(callId, request, context).block();
    }

    /**
     * Cancel Media Processing.
     *
     * @param callId The call id.
     * @param request The cancel media processing request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 401, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload of the cancel media processing operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<CancelAllMediaOperationsResponse>> cancelAllMediaOperationsWithResponseAsync(
            String callId, CancelAllMediaOperationsRequest request) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.cancelAllMediaOperations(
                                this.client.getEndpoint(),
                                callId,
                                this.client.getApiVersion(),
                                request,
                                accept,
                                context));
    }

    /**
     * Cancel Media Processing.
     *
     * @param callId The call id.
     * @param request The cancel media processing request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 401, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload of the cancel media processing operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<CancelAllMediaOperationsResponse>> cancelAllMediaOperationsWithResponseAsync(
            String callId, CancelAllMediaOperationsRequest request, Context context) {
        final String accept = "application/json";
        return service.cancelAllMediaOperations(
                this.client.getEndpoint(), callId, this.client.getApiVersion(), request, accept, context);
    }

    /**
     * Cancel Media Processing.
     *
     * @param callId The call id.
     * @param request The cancel media processing request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 401, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload of the cancel media processing operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CancelAllMediaOperationsResponse> cancelAllMediaOperationsAsync(
            String callId, CancelAllMediaOperationsRequest request) {
        return cancelAllMediaOperationsWithResponseAsync(callId, request)
                .flatMap(
                        (Response<CancelAllMediaOperationsResponse> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Cancel Media Processing.
     *
     * @param callId The call id.
     * @param request The cancel media processing request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 401, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload of the cancel media processing operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CancelAllMediaOperationsResponse> cancelAllMediaOperationsAsync(
            String callId, CancelAllMediaOperationsRequest request, Context context) {
        return cancelAllMediaOperationsWithResponseAsync(callId, request, context)
                .flatMap(
                        (Response<CancelAllMediaOperationsResponse> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Cancel Media Processing.
     *
     * @param callId The call id.
     * @param request The cancel media processing request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 401, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload of the cancel media processing operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CancelAllMediaOperationsResponse cancelAllMediaOperations(
            String callId, CancelAllMediaOperationsRequest request) {
        return cancelAllMediaOperationsAsync(callId, request).block();
    }

    /**
     * Cancel Media Processing.
     *
     * @param callId The call id.
     * @param request The cancel media processing request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 401, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload of the cancel media processing operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<CancelAllMediaOperationsResponse> cancelAllMediaOperationsWithResponse(
            String callId, CancelAllMediaOperationsRequest request, Context context) {
        return cancelAllMediaOperationsWithResponseAsync(callId, request, context).block();
    }

    /**
     * Invite participants to the call.
     *
     * @param callId Call id.
     * @param inviteParticipantsRequest Invite participant request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 401, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> inviteParticipantsWithResponseAsync(
            String callId, InviteParticipantsRequestInternal inviteParticipantsRequest) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.inviteParticipants(
                                this.client.getEndpoint(),
                                callId,
                                this.client.getApiVersion(),
                                inviteParticipantsRequest,
                                accept,
                                context));
    }

    /**
     * Invite participants to the call.
     *
     * @param callId Call id.
     * @param inviteParticipantsRequest Invite participant request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 401, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> inviteParticipantsWithResponseAsync(
            String callId, InviteParticipantsRequestInternal inviteParticipantsRequest, Context context) {
        final String accept = "application/json";
        return service.inviteParticipants(
                this.client.getEndpoint(),
                callId,
                this.client.getApiVersion(),
                inviteParticipantsRequest,
                accept,
                context);
    }

    /**
     * Invite participants to the call.
     *
     * @param callId Call id.
     * @param inviteParticipantsRequest Invite participant request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 401, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> inviteParticipantsAsync(
            String callId, InviteParticipantsRequestInternal inviteParticipantsRequest) {
        return inviteParticipantsWithResponseAsync(callId, inviteParticipantsRequest)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Invite participants to the call.
     *
     * @param callId Call id.
     * @param inviteParticipantsRequest Invite participant request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 401, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> inviteParticipantsAsync(
            String callId, InviteParticipantsRequestInternal inviteParticipantsRequest, Context context) {
        return inviteParticipantsWithResponseAsync(callId, inviteParticipantsRequest, context)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Invite participants to the call.
     *
     * @param callId Call id.
     * @param inviteParticipantsRequest Invite participant request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 401, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void inviteParticipants(String callId, InviteParticipantsRequestInternal inviteParticipantsRequest) {
        inviteParticipantsAsync(callId, inviteParticipantsRequest).block();
    }

    /**
     * Invite participants to the call.
     *
     * @param callId Call id.
     * @param inviteParticipantsRequest Invite participant request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 401, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> inviteParticipantsWithResponse(
            String callId, InviteParticipantsRequestInternal inviteParticipantsRequest, Context context) {
        return inviteParticipantsWithResponseAsync(callId, inviteParticipantsRequest, context).block();
    }

    /**
     * Remove participant from the call.
     *
     * @param callId Call id.
     * @param participantId Participant id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 401, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> removeParticipantWithResponseAsync(String callId, String participantId) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.removeParticipant(
                                this.client.getEndpoint(),
                                callId,
                                participantId,
                                this.client.getApiVersion(),
                                accept,
                                context));
    }

    /**
     * Remove participant from the call.
     *
     * @param callId Call id.
     * @param participantId Participant id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 401, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> removeParticipantWithResponseAsync(
            String callId, String participantId, Context context) {
        final String accept = "application/json";
        return service.removeParticipant(
                this.client.getEndpoint(), callId, participantId, this.client.getApiVersion(), accept, context);
    }

    /**
     * Remove participant from the call.
     *
     * @param callId Call id.
     * @param participantId Participant id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 401, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> removeParticipantAsync(String callId, String participantId) {
        return removeParticipantWithResponseAsync(callId, participantId).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Remove participant from the call.
     *
     * @param callId Call id.
     * @param participantId Participant id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 401, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> removeParticipantAsync(String callId, String participantId, Context context) {
        return removeParticipantWithResponseAsync(callId, participantId, context)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Remove participant from the call.
     *
     * @param callId Call id.
     * @param participantId Participant id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 401, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void removeParticipant(String callId, String participantId) {
        removeParticipantAsync(callId, participantId).block();
    }

    /**
     * Remove participant from the call.
     *
     * @param callId Call id.
     * @param participantId Participant id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorException thrown if the request is rejected by server.
     * @throws CommunicationErrorException thrown if the request is rejected by server on status code 400, 401, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> removeParticipantWithResponse(String callId, String participantId, Context context) {
        return removeParticipantWithResponseAsync(callId, participantId, context).block();
    }
}
