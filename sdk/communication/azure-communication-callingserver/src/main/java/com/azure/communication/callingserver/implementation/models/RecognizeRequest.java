// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.communication.callingserver.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;

import java.io.IOException;
import java.util.Objects;

/** The RecognizeRequest model. */
@Fluent
public final class RecognizeRequest implements JsonSerializable<RecognizeRequest> {
    /*
     * Determines the type of the recognition.
     */
    private RecognizeInputTypeInternal recognizeInputType;

    /*
     * The source of the audio to be played for recognition.
     */
    private PlaySourceInternal playPrompt;

    /*
     * If set recognize can barge into other existing queued-up/currently-processing requests.
     */
    private Boolean stopCurrentOperations;

    /*
     * Defines options for recognition.
     */
    private RecognizeConfigurationsInternal recognizeConfiguration;

    /*
     * The value to identify context of the operation.
     */
    private String operationContext;

    /**
     * Get the recognizeInputType property: Determines the type of the recognition.
     *
     * @return the recognizeInputType value.
     */
    public RecognizeInputTypeInternal getRecognizeInputType() {
        return this.recognizeInputType;
    }

    /**
     * Set the recognizeInputType property: Determines the type of the recognition.
     *
     * @param recognizeInputType the recognizeInputType value to set.
     * @return the RecognizeRequest object itself.
     */
    public RecognizeRequest setRecognizeInputType(RecognizeInputTypeInternal recognizeInputType) {
        this.recognizeInputType = recognizeInputType;
        return this;
    }

    /**
     * Get the playPrompt property: The source of the audio to be played for recognition.
     *
     * @return the playPrompt value.
     */
    public PlaySourceInternal getPlayPrompt() {
        return this.playPrompt;
    }

    /**
     * Set the playPrompt property: The source of the audio to be played for recognition.
     *
     * @param playPrompt the playPrompt value to set.
     * @return the RecognizeRequest object itself.
     */
    public RecognizeRequest setPlayPrompt(PlaySourceInternal playPrompt) {
        this.playPrompt = playPrompt;
        return this;
    }

    /**
     * Get the stopCurrentOperations property: If set recognize can barge into other existing
     * queued-up/currently-processing requests.
     *
     * @return the stopCurrentOperations value.
     */
    public Boolean isStopCurrentOperations() {
        return this.stopCurrentOperations;
    }

    /**
     * Set the stopCurrentOperations property: If set recognize can barge into other existing
     * queued-up/currently-processing requests.
     *
     * @param stopCurrentOperations the stopCurrentOperations value to set.
     * @return the RecognizeRequest object itself.
     */
    public RecognizeRequest setStopCurrentOperations(Boolean stopCurrentOperations) {
        this.stopCurrentOperations = stopCurrentOperations;
        return this;
    }

    /**
     * Get the recognizeConfiguration property: Defines options for recognition.
     *
     * @return the recognizeConfiguration value.
     */
    public RecognizeConfigurationsInternal getRecognizeConfiguration() {
        return this.recognizeConfiguration;
    }

    /**
     * Set the recognizeConfiguration property: Defines options for recognition.
     *
     * @param recognizeConfiguration the recognizeConfiguration value to set.
     * @return the RecognizeRequest object itself.
     */
    public RecognizeRequest setRecognizeConfiguration(RecognizeConfigurationsInternal recognizeConfiguration) {
        this.recognizeConfiguration = recognizeConfiguration;
        return this;
    }

    /**
     * Get the operationContext property: The value to identify context of the operation.
     *
     * @return the operationContext value.
     */
    public String getOperationContext() {
        return this.operationContext;
    }

    /**
     * Set the operationContext property: The value to identify context of the operation.
     *
     * @param operationContext the operationContext value to set.
     * @return the RecognizeRequest object itself.
     */
    public RecognizeRequest setOperationContext(String operationContext) {
        this.operationContext = operationContext;
        return this;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        return jsonWriter.writeStartObject()
            .writeStringField("recognizeInputType", Objects.toString(recognizeInputType, null))
            .writeJsonField("playPrompt", playPrompt)
            .writeBooleanField("stopCurrentOperations", stopCurrentOperations)
            .writeJsonField("recognizeConfiguration", recognizeConfiguration)
            .writeStringField("operationContext", operationContext)
            .writeEndObject();
    }

    /**
     * Reads an instance of {@link RecognizeRequest} from the {@link JsonReader}.
     *
     * @param jsonReader The {@link JsonReader} to read.
     * @return An instance of {@link RecognizeRequest}, or null if the {@link JsonReader} was pointing to
     * {@link JsonToken#NULL}.
     * @throws IOException If an error occurs while reading the {@link JsonReader}.
     */
    public static RecognizeRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RecognizeRequest request = new RecognizeRequest();

            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("recognizeInputType".equals(fieldName)) {
                    request.recognizeInputType = RecognizeInputTypeInternal.fromString(reader.getString());
                } else if ("playPrompt".equals(fieldName)) {
                    request.playPrompt = PlaySourceInternal.fromJson(reader);
                } else if ("stopCurrentOperations".equals(fieldName)) {
                    request.stopCurrentOperations = reader.getNullable(JsonReader::getBoolean);
                } else if ("recognizeConfiguration".equals(fieldName)) {
                    request.recognizeConfiguration = RecognizeConfigurationsInternal.fromJson(reader);
                } else if ("operationContext".equals(fieldName)) {
                    request.operationContext = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return request;
        });
    }
}
