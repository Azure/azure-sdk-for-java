// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.communication.callingserver.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The RecognizeRequest model.
 */
@Fluent
public final class RecognizeRequest implements JsonSerializable<RecognizeRequest> {
    /*
     * Determines the type of the recognition.
     */
    private RecognizeInputTypeInternal recognizeInputType;

    /*
     * The source of the audio to be played for recognition.
     */
    private PlaySourceInternal playPrompt;

    /*
     * If set recognize can barge into other existing queued-up/currently-processing requests.
     */
    private Boolean interruptCallMediaOperation;

    /*
     * Defines options for recognition.
     */
    private RecognizeOptions recognizeOptions;

    /*
     * The value to identify context of the operation.
     */
    private String operationContext;

    /**
     * Creates an instance of RecognizeRequest class.
     */
    public RecognizeRequest() {
    }

    /**
     * Get the recognizeInputType property: Determines the type of the recognition.
     * 
     * @return the recognizeInputType value.
     */
    public RecognizeInputTypeInternal getRecognizeInputType() {
        return this.recognizeInputType;
    }

    /**
     * Set the recognizeInputType property: Determines the type of the recognition.
     * 
     * @param recognizeInputType the recognizeInputType value to set.
     * @return the RecognizeRequest object itself.
     */
    public RecognizeRequest setRecognizeInputType(RecognizeInputTypeInternal recognizeInputType) {
        this.recognizeInputType = recognizeInputType;
        return this;
    }

    /**
     * Get the playPrompt property: The source of the audio to be played for recognition.
     * 
     * @return the playPrompt value.
     */
    public PlaySourceInternal getPlayPrompt() {
        return this.playPrompt;
    }

    /**
     * Set the playPrompt property: The source of the audio to be played for recognition.
     * 
     * @param playPrompt the playPrompt value to set.
     * @return the RecognizeRequest object itself.
     */
    public RecognizeRequest setPlayPrompt(PlaySourceInternal playPrompt) {
        this.playPrompt = playPrompt;
        return this;
    }

    /**
     * Get the interruptCallMediaOperation property: If set recognize can barge into other existing
     * queued-up/currently-processing requests.
     * 
     * @return the interruptCallMediaOperation value.
     */
    public Boolean isInterruptCallMediaOperation() {
        return this.interruptCallMediaOperation;
    }

    /**
     * Set the interruptCallMediaOperation property: If set recognize can barge into other existing
     * queued-up/currently-processing requests.
     * 
     * @param interruptCallMediaOperation the interruptCallMediaOperation value to set.
     * @return the RecognizeRequest object itself.
     */
    public RecognizeRequest setInterruptCallMediaOperation(Boolean interruptCallMediaOperation) {
        this.interruptCallMediaOperation = interruptCallMediaOperation;
        return this;
    }

    /**
     * Get the recognizeOptions property: Defines options for recognition.
     * 
     * @return the recognizeOptions value.
     */
    public RecognizeOptions getRecognizeOptions() {
        return this.recognizeOptions;
    }

    /**
     * Set the recognizeOptions property: Defines options for recognition.
     * 
     * @param recognizeOptions the recognizeOptions value to set.
     * @return the RecognizeRequest object itself.
     */
    public RecognizeRequest setRecognizeOptions(RecognizeOptions recognizeOptions) {
        this.recognizeOptions = recognizeOptions;
        return this;
    }

    /**
     * Get the operationContext property: The value to identify context of the operation.
     * 
     * @return the operationContext value.
     */
    public String getOperationContext() {
        return this.operationContext;
    }

    /**
     * Set the operationContext property: The value to identify context of the operation.
     * 
     * @param operationContext the operationContext value to set.
     * @return the RecognizeRequest object itself.
     */
    public RecognizeRequest setOperationContext(String operationContext) {
        this.operationContext = operationContext;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("recognizeInputType",
            this.recognizeInputType == null ? null : this.recognizeInputType.toString());
        jsonWriter.writeJsonField("recognizeOptions", this.recognizeOptions);
        jsonWriter.writeJsonField("playPrompt", this.playPrompt);
        jsonWriter.writeBooleanField("interruptCallMediaOperation", this.interruptCallMediaOperation);
        jsonWriter.writeStringField("operationContext", this.operationContext);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RecognizeRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RecognizeRequest if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RecognizeRequest.
     */
    public static RecognizeRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RecognizeRequest deserializedRecognizeRequest = new RecognizeRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("recognizeInputType".equals(fieldName)) {
                    deserializedRecognizeRequest.recognizeInputType
                        = RecognizeInputTypeInternal.fromString(reader.getString());
                } else if ("recognizeOptions".equals(fieldName)) {
                    deserializedRecognizeRequest.recognizeOptions = RecognizeOptions.fromJson(reader);
                } else if ("playPrompt".equals(fieldName)) {
                    deserializedRecognizeRequest.playPrompt = PlaySourceInternal.fromJson(reader);
                } else if ("interruptCallMediaOperation".equals(fieldName)) {
                    deserializedRecognizeRequest.interruptCallMediaOperation
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("operationContext".equals(fieldName)) {
                    deserializedRecognizeRequest.operationContext = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRecognizeRequest;
        });
    }
}
