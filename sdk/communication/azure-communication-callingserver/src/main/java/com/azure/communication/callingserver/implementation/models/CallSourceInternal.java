// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.communication.callingserver.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The CallSourceInternal model.
 */
@Fluent
public final class CallSourceInternal implements JsonSerializable<CallSourceInternal> {
    /*
     * The alternate identity of the source of the call if dialing out to a pstn number
     */
    private PhoneNumberIdentifierModel callerId;

    /*
     * Display name of the call if dialing out to a pstn number
     */
    private String displayName;

    /*
     * The identifier of the source of the call
     */
    private CommunicationIdentifierModel identifier;

    /**
     * Creates an instance of CallSourceInternal class.
     */
    public CallSourceInternal() {
    }

    /**
     * Get the callerId property: The alternate identity of the source of the call if dialing out to a pstn number.
     * 
     * @return the callerId value.
     */
    public PhoneNumberIdentifierModel getCallerId() {
        return this.callerId;
    }

    /**
     * Set the callerId property: The alternate identity of the source of the call if dialing out to a pstn number.
     * 
     * @param callerId the callerId value to set.
     * @return the CallSourceInternal object itself.
     */
    public CallSourceInternal setCallerId(PhoneNumberIdentifierModel callerId) {
        this.callerId = callerId;
        return this;
    }

    /**
     * Get the displayName property: Display name of the call if dialing out to a pstn number.
     * 
     * @return the displayName value.
     */
    public String getDisplayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: Display name of the call if dialing out to a pstn number.
     * 
     * @param displayName the displayName value to set.
     * @return the CallSourceInternal object itself.
     */
    public CallSourceInternal setDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the identifier property: The identifier of the source of the call.
     * 
     * @return the identifier value.
     */
    public CommunicationIdentifierModel getIdentifier() {
        return this.identifier;
    }

    /**
     * Set the identifier property: The identifier of the source of the call.
     * 
     * @param identifier the identifier value to set.
     * @return the CallSourceInternal object itself.
     */
    public CallSourceInternal setIdentifier(CommunicationIdentifierModel identifier) {
        this.identifier = identifier;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("identifier", this.identifier);
        jsonWriter.writeJsonField("callerId", this.callerId);
        jsonWriter.writeStringField("displayName", this.displayName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CallSourceInternal from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CallSourceInternal if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CallSourceInternal.
     */
    public static CallSourceInternal fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CallSourceInternal deserializedCallSourceInternal = new CallSourceInternal();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("identifier".equals(fieldName)) {
                    deserializedCallSourceInternal.identifier = CommunicationIdentifierModel.fromJson(reader);
                } else if ("callerId".equals(fieldName)) {
                    deserializedCallSourceInternal.callerId = PhoneNumberIdentifierModel.fromJson(reader);
                } else if ("displayName".equals(fieldName)) {
                    deserializedCallSourceInternal.displayName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCallSourceInternal;
        });
    }
}
