// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.communication.callingserver.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;

import java.io.IOException;

/** The transfer call to participant request. */
@Fluent
public final class TransferToParticipantRequestInternal
    implements JsonSerializable<TransferToParticipantRequestInternal> {
    /*
     * The identity of the target where call should be transferred to.
     */
    private CommunicationIdentifierModel targetParticipant;

    /*
     * The caller ID of the transferee when transferring to PSTN.
     */
    private PhoneNumberIdentifierModel transfereeCallerId;

    /*
     * The user to user information.
     */
    private String userToUserInformation;

    /*
     * The operation context.
     */
    private String operationContext;

    /**
     * Get the targetParticipant property: The identity of the target where call should be transferred to.
     *
     * @return the targetParticipant value.
     */
    public CommunicationIdentifierModel getTargetParticipant() {
        return this.targetParticipant;
    }

    /**
     * Set the targetParticipant property: The identity of the target where call should be transferred to.
     *
     * @param targetParticipant the targetParticipant value to set.
     * @return the TransferToParticipantRequestInternal object itself.
     */
    public TransferToParticipantRequestInternal setTargetParticipant(CommunicationIdentifierModel targetParticipant) {
        this.targetParticipant = targetParticipant;
        return this;
    }

    /**
     * Get the transfereeCallerId property: The caller ID of the transferee when transferring to PSTN.
     *
     * @return the transfereeCallerId value.
     */
    public PhoneNumberIdentifierModel getTransfereeCallerId() {
        return this.transfereeCallerId;
    }

    /**
     * Set the transfereeCallerId property: The caller ID of the transferee when transferring to PSTN.
     *
     * @param transfereeCallerId the transfereeCallerId value to set.
     * @return the TransferToParticipantRequestInternal object itself.
     */
    public TransferToParticipantRequestInternal setTransfereeCallerId(PhoneNumberIdentifierModel transfereeCallerId) {
        this.transfereeCallerId = transfereeCallerId;
        return this;
    }

    /**
     * Get the userToUserInformation property: The user to user information.
     *
     * @return the userToUserInformation value.
     */
    public String getUserToUserInformation() {
        return this.userToUserInformation;
    }

    /**
     * Set the userToUserInformation property: The user to user information.
     *
     * @param userToUserInformation the userToUserInformation value to set.
     * @return the TransferToParticipantRequestInternal object itself.
     */
    public TransferToParticipantRequestInternal setUserToUserInformation(String userToUserInformation) {
        this.userToUserInformation = userToUserInformation;
        return this;
    }

    /**
     * Get the operationContext property: The operation context.
     *
     * @return the operationContext value.
     */
    public String getOperationContext() {
        return this.operationContext;
    }

    /**
     * Set the operationContext property: The operation context.
     *
     * @param operationContext the operationContext value to set.
     * @return the TransferToParticipantRequestInternal object itself.
     */
    public TransferToParticipantRequestInternal setOperationContext(String operationContext) {
        this.operationContext = operationContext;
        return this;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        return jsonWriter.writeStartObject()
            .writeJsonField("targetParticipant", targetParticipant)
            .writeJsonField("transfereeCallerId", transfereeCallerId)
            .writeStringField("userToUserInformation", userToUserInformation)
            .writeStringField("operationContext", operationContext)
            .writeEndObject();
    }

    /**
     * Reads an instance of {@link TransferToParticipantRequestInternal} from the {@link JsonReader}.
     *
     * @param jsonReader The {@link JsonReader} to read.
     * @return An instance of {@link TransferToParticipantRequestInternal}, or null if the {@link JsonReader} was
     * pointing to {@link JsonToken#NULL}.
     * @throws IOException If an error occurs while reading the {@link JsonReader}.
     */
    public static TransferToParticipantRequestInternal fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TransferToParticipantRequestInternal request = new TransferToParticipantRequestInternal();

            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("targetParticipant".equals(fieldName)) {
                    request.targetParticipant = CommunicationIdentifierModel.fromJson(reader);
                } else if ("transfereeCallerId".equals(fieldName)) {
                    request.transfereeCallerId = PhoneNumberIdentifierModel.fromJson(reader);
                } else if ("userToUserInformation".equals(fieldName)) {
                    request.userToUserInformation = reader.getString();
                } else if ("operationContext".equals(fieldName)) {
                    request.operationContext = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return request;
        });
    }
}
