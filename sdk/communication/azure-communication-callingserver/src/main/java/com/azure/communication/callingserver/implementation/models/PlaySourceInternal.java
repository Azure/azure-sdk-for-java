// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.communication.callingserver.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;

import java.io.IOException;
import java.util.Objects;

/** The PlaySourceInternal model. */
@Fluent
public final class PlaySourceInternal implements JsonSerializable<PlaySourceInternal> {
    /*
     * Defines the type of the play source
     */
    private PlaySourceTypeInternal sourceType;

    /*
     * Defines the identifier to be used for caching related media
     */
    private String playSourceId;

    /*
     * Defines the file source info to be used for play
     */
    private FileSourceInternal fileSource;

    /**
     * Get the sourceType property: Defines the type of the play source.
     *
     * @return the sourceType value.
     */
    public PlaySourceTypeInternal getSourceType() {
        return this.sourceType;
    }

    /**
     * Set the sourceType property: Defines the type of the play source.
     *
     * @param sourceType the sourceType value to set.
     * @return the PlaySourceInternal object itself.
     */
    public PlaySourceInternal setSourceType(PlaySourceTypeInternal sourceType) {
        this.sourceType = sourceType;
        return this;
    }

    /**
     * Get the playSourceId property: Defines the identifier to be used for caching related media.
     *
     * @return the playSourceId value.
     */
    public String getPlaySourceId() {
        return this.playSourceId;
    }

    /**
     * Set the playSourceId property: Defines the identifier to be used for caching related media.
     *
     * @param playSourceId the playSourceId value to set.
     * @return the PlaySourceInternal object itself.
     */
    public PlaySourceInternal setPlaySourceId(String playSourceId) {
        this.playSourceId = playSourceId;
        return this;
    }

    /**
     * Get the fileSource property: Defines the file source info to be used for play.
     *
     * @return the fileSource value.
     */
    public FileSourceInternal getFileSource() {
        return this.fileSource;
    }

    /**
     * Set the fileSource property: Defines the file source info to be used for play.
     *
     * @param fileSource the fileSource value to set.
     * @return the PlaySourceInternal object itself.
     */
    public PlaySourceInternal setFileSource(FileSourceInternal fileSource) {
        this.fileSource = fileSource;
        return this;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        return jsonWriter.writeStartObject()
            .writeStringField("sourceType", Objects.toString(sourceType, null))
            .writeStringField("playSourceId", playSourceId)
            .writeJsonField("fileSource", fileSource)
            .writeEndObject();
    }

    /**
     * Reads an instance of {@link PlaySourceInternal} from the {@link JsonReader}.
     *
     * @param jsonReader The {@link JsonReader} to read.
     * @return An instance of {@link PlaySourceInternal}, or null if the {@link JsonReader} was pointing to
     * {@link JsonToken#NULL}.
     * @throws IOException If an error occurs while reading the {@link JsonReader}.
     */
    public static PlaySourceInternal fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PlaySourceInternal playSource = new PlaySourceInternal();

            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sourceType".equals(fieldName)) {
                    playSource.sourceType = PlaySourceTypeInternal.fromString(reader.getString());
                } else if ("playSourceId".equals(fieldName)) {
                    playSource.playSourceId = reader.getString();
                } else if ("fileSource".equals(fieldName)) {
                    playSource.fileSource = FileSourceInternal.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return playSource;
        });
    }
}
