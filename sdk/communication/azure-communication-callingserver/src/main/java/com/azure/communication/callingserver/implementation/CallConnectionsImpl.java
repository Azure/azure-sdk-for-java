// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.communication.callingserver.implementation;

import com.azure.communication.callingserver.implementation.models.AddParticipantRequest;
import com.azure.communication.callingserver.implementation.models.AddParticipantResultInternal;
import com.azure.communication.callingserver.implementation.models.AddToDefaultAudioGroupRequest;
import com.azure.communication.callingserver.implementation.models.AudioGroupRequest;
import com.azure.communication.callingserver.implementation.models.AudioGroupResultInternal;
import com.azure.communication.callingserver.implementation.models.CallConnectionPropertiesInternal;
import com.azure.communication.callingserver.implementation.models.CallParticipantInternal;
import com.azure.communication.callingserver.implementation.models.CancelParticipantMediaOperationRequest;
import com.azure.communication.callingserver.implementation.models.CommunicationErrorResponseException;
import com.azure.communication.callingserver.implementation.models.CreateAudioGroupResultInternal;
import com.azure.communication.callingserver.implementation.models.CreateCallRequest;
import com.azure.communication.callingserver.implementation.models.CreateCallResultInternal;
import com.azure.communication.callingserver.implementation.models.GetParticipantRequest;
import com.azure.communication.callingserver.implementation.models.MuteParticipantRequest;
import com.azure.communication.callingserver.implementation.models.PlayAudioRequest;
import com.azure.communication.callingserver.implementation.models.PlayAudioResultInternal;
import com.azure.communication.callingserver.implementation.models.PlayAudioToParticipantRequest;
import com.azure.communication.callingserver.implementation.models.RemoveFromDefaultAudioGroupRequest;
import com.azure.communication.callingserver.implementation.models.RemoveParticipantRequest;
import com.azure.communication.callingserver.implementation.models.TransferCallResultInternal;
import com.azure.communication.callingserver.implementation.models.TransferToCallRequest;
import com.azure.communication.callingserver.implementation.models.TransferToParticipantRequest;
import com.azure.communication.callingserver.implementation.models.UnmuteParticipantRequest;
import com.azure.communication.callingserver.implementation.models.UpdateAudioGroupRequest;
import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import java.util.List;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in CallConnections. */
public final class CallConnectionsImpl {
    /** The proxy service used to perform REST calls. */
    private final CallConnectionsService service;

    /** The service client containing this operation class. */
    private final AzureCommunicationCallingServerServiceImpl client;

    /**
     * Initializes an instance of CallConnectionsImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    CallConnectionsImpl(AzureCommunicationCallingServerServiceImpl client) {
        this.service =
                RestProxy.create(CallConnectionsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AzureCommunicationCallingServerServiceCallConnections to be used by
     * the proxy service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "AzureCommunicationCa")
    private interface CallConnectionsService {
        @Get("/calling/callConnections/{callConnectionId}/audioGroups/{audioGroupId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<AudioGroupResultInternal>> getAudioGroups(
                @HostParam("endpoint") String endpoint,
                @PathParam("callConnectionId") String callConnectionId,
                @PathParam("audioGroupId") String audioGroupId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                Context context);

        @Delete("/calling/callConnections/{callConnectionId}/audioGroups/{audioGroupId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<Void>> deleteAudioGroup(
                @HostParam("endpoint") String endpoint,
                @PathParam("callConnectionId") String callConnectionId,
                @PathParam("audioGroupId") String audioGroupId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                Context context);

        @Patch("/calling/callConnections/{callConnectionId}/audioGroups/{audioGroupId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<Void>> updateAudioGroup(
                @HostParam("endpoint") String endpoint,
                @PathParam("callConnectionId") String callConnectionId,
                @PathParam("audioGroupId") String audioGroupId,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") UpdateAudioGroupRequest updateAudioGroupRequest,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/calling/callConnections")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<CreateCallResultInternal>> createCall(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") CreateCallRequest callRequest,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/calling/callConnections/{callConnectionId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<CallConnectionPropertiesInternal>> getCall(
                @HostParam("endpoint") String endpoint,
                @PathParam("callConnectionId") String callConnectionId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                Context context);

        @Delete("/calling/callConnections/{callConnectionId}")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<Void>> deleteCall(
                @HostParam("endpoint") String endpoint,
                @PathParam("callConnectionId") String callConnectionId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/calling/callConnections/{callConnectionId}/:hangup")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<Void>> hangupCall(
                @HostParam("endpoint") String endpoint,
                @PathParam("callConnectionId") String callConnectionId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/calling/callConnections/{callConnectionId}/:playAudio")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<PlayAudioResultInternal>> playAudio(
                @HostParam("endpoint") String endpoint,
                @PathParam("callConnectionId") String callConnectionId,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") PlayAudioRequest playAudioRequest,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/calling/callConnections/{callConnectionId}/:cancelAllMediaOperations")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<Void>> cancelAllMediaOperations(
                @HostParam("endpoint") String endpoint,
                @PathParam("callConnectionId") String callConnectionId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/calling/callConnections/{callConnectionId}/:keepAlive")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<Void>> keepAlive(
                @HostParam("endpoint") String endpoint,
                @PathParam("callConnectionId") String callConnectionId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/calling/callConnections/{callConnectionId}/:transferToParticipant")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<TransferCallResultInternal>> transferToParticipant(
                @HostParam("endpoint") String endpoint,
                @PathParam("callConnectionId") String callConnectionId,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") TransferToParticipantRequest transferToParticipantRequest,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/calling/callConnections/{callConnectionId}/:transferToCall")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<TransferCallResultInternal>> transferToCall(
                @HostParam("endpoint") String endpoint,
                @PathParam("callConnectionId") String callConnectionId,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") TransferToCallRequest transferToCallRequest,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/calling/callConnections/{callConnectionId}/:createAudioGroup")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<CreateAudioGroupResultInternal>> createAudioGroup(
                @HostParam("endpoint") String endpoint,
                @PathParam("callConnectionId") String callConnectionId,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") AudioGroupRequest audioGroupRequest,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/calling/callConnections/{callConnectionId}/participants")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<List<CallParticipantInternal>>> getParticipants(
                @HostParam("endpoint") String endpoint,
                @PathParam("callConnectionId") String callConnectionId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/calling/callConnections/{callConnectionId}/participants")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<AddParticipantResultInternal>> addParticipant(
                @HostParam("endpoint") String endpoint,
                @PathParam("callConnectionId") String callConnectionId,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") AddParticipantRequest addParticipantRequest,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/calling/callConnections/{callConnectionId}/participants:remove")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<Void>> removeParticipant(
                @HostParam("endpoint") String endpoint,
                @PathParam("callConnectionId") String callConnectionId,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") RemoveParticipantRequest removeParticipantRequest,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/calling/callConnections/{callConnectionId}/participants:get")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<CallParticipantInternal>> getParticipant(
                @HostParam("endpoint") String endpoint,
                @PathParam("callConnectionId") String callConnectionId,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") GetParticipantRequest getParticipantRequest,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/calling/callConnections/{callConnectionId}/participants:playAudio")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<PlayAudioResultInternal>> participantPlayAudio(
                @HostParam("endpoint") String endpoint,
                @PathParam("callConnectionId") String callConnectionId,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") PlayAudioToParticipantRequest playAudioToParticipantRequest,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/calling/callConnections/{callConnectionId}/participants:cancelMediaOperation")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<Void>> cancelParticipantMediaOperation(
                @HostParam("endpoint") String endpoint,
                @PathParam("callConnectionId") String callConnectionId,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") CancelParticipantMediaOperationRequest cancelMediaOperationRequest,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/calling/callConnections/{callConnectionId}/participants:mute")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<Void>> muteParticipant(
                @HostParam("endpoint") String endpoint,
                @PathParam("callConnectionId") String callConnectionId,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") MuteParticipantRequest muteParticipantRequest,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/calling/callConnections/{callConnectionId}/participants:unmute")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<Void>> unmuteParticipant(
                @HostParam("endpoint") String endpoint,
                @PathParam("callConnectionId") String callConnectionId,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") UnmuteParticipantRequest unmuteParticipantRequest,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/calling/callConnections/{callConnectionId}/participants:removeFromDefaultAudioGroup")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<Void>> removeParticipantFromDefaultAudioGroup(
                @HostParam("endpoint") String endpoint,
                @PathParam("callConnectionId") String callConnectionId,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") RemoveFromDefaultAudioGroupRequest removeFromDefaultAudioGroupRequest,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/calling/callConnections/{callConnectionId}/participants:addToDefaultAudioGroup")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<Void>> addParticipantToDefaultAudioGroup(
                @HostParam("endpoint") String endpoint,
                @PathParam("callConnectionId") String callConnectionId,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") AddToDefaultAudioGroupRequest addToDefaultAudioGroupRequest,
                @HeaderParam("Accept") String accept,
                Context context);
    }

    /**
     * Get audio groups from a call.
     *
     * @param callConnectionId The call connection id.
     * @param audioGroupId The audio group id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return audio groups from a call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<AudioGroupResultInternal>> getAudioGroupsWithResponseAsync(
            String callConnectionId, String audioGroupId) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.getAudioGroups(
                                this.client.getEndpoint(),
                                callConnectionId,
                                audioGroupId,
                                this.client.getApiVersion(),
                                accept,
                                context));
    }

    /**
     * Get audio groups from a call.
     *
     * @param callConnectionId The call connection id.
     * @param audioGroupId The audio group id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return audio groups from a call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<AudioGroupResultInternal>> getAudioGroupsWithResponseAsync(
            String callConnectionId, String audioGroupId, Context context) {
        final String accept = "application/json";
        return service.getAudioGroups(
                this.client.getEndpoint(),
                callConnectionId,
                audioGroupId,
                this.client.getApiVersion(),
                accept,
                context);
    }

    /**
     * Get audio groups from a call.
     *
     * @param callConnectionId The call connection id.
     * @param audioGroupId The audio group id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return audio groups from a call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AudioGroupResultInternal> getAudioGroupsAsync(String callConnectionId, String audioGroupId) {
        return getAudioGroupsWithResponseAsync(callConnectionId, audioGroupId)
                .flatMap(
                        (Response<AudioGroupResultInternal> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Get audio groups from a call.
     *
     * @param callConnectionId The call connection id.
     * @param audioGroupId The audio group id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return audio groups from a call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AudioGroupResultInternal> getAudioGroupsAsync(
            String callConnectionId, String audioGroupId, Context context) {
        return getAudioGroupsWithResponseAsync(callConnectionId, audioGroupId, context)
                .flatMap(
                        (Response<AudioGroupResultInternal> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Get audio groups from a call.
     *
     * @param callConnectionId The call connection id.
     * @param audioGroupId The audio group id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return audio groups from a call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AudioGroupResultInternal getAudioGroups(String callConnectionId, String audioGroupId) {
        return getAudioGroupsAsync(callConnectionId, audioGroupId).block();
    }

    /**
     * Get audio groups from a call.
     *
     * @param callConnectionId The call connection id.
     * @param audioGroupId The audio group id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return audio groups from a call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<AudioGroupResultInternal> getAudioGroupsWithResponse(
            String callConnectionId, String audioGroupId, Context context) {
        return getAudioGroupsWithResponseAsync(callConnectionId, audioGroupId, context).block();
    }

    /**
     * Delete audio group from a call.
     *
     * @param callConnectionId The call connection id.
     * @param audioGroupId The audio group id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteAudioGroupWithResponseAsync(String callConnectionId, String audioGroupId) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.deleteAudioGroup(
                                this.client.getEndpoint(),
                                callConnectionId,
                                audioGroupId,
                                this.client.getApiVersion(),
                                accept,
                                context));
    }

    /**
     * Delete audio group from a call.
     *
     * @param callConnectionId The call connection id.
     * @param audioGroupId The audio group id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteAudioGroupWithResponseAsync(
            String callConnectionId, String audioGroupId, Context context) {
        final String accept = "application/json";
        return service.deleteAudioGroup(
                this.client.getEndpoint(),
                callConnectionId,
                audioGroupId,
                this.client.getApiVersion(),
                accept,
                context);
    }

    /**
     * Delete audio group from a call.
     *
     * @param callConnectionId The call connection id.
     * @param audioGroupId The audio group id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteAudioGroupAsync(String callConnectionId, String audioGroupId) {
        return deleteAudioGroupWithResponseAsync(callConnectionId, audioGroupId)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Delete audio group from a call.
     *
     * @param callConnectionId The call connection id.
     * @param audioGroupId The audio group id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteAudioGroupAsync(String callConnectionId, String audioGroupId, Context context) {
        return deleteAudioGroupWithResponseAsync(callConnectionId, audioGroupId, context)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Delete audio group from a call.
     *
     * @param callConnectionId The call connection id.
     * @param audioGroupId The audio group id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteAudioGroup(String callConnectionId, String audioGroupId) {
        deleteAudioGroupAsync(callConnectionId, audioGroupId).block();
    }

    /**
     * Delete audio group from a call.
     *
     * @param callConnectionId The call connection id.
     * @param audioGroupId The audio group id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteAudioGroupWithResponse(String callConnectionId, String audioGroupId, Context context) {
        return deleteAudioGroupWithResponseAsync(callConnectionId, audioGroupId, context).block();
    }

    /**
     * Update audio group.
     *
     * @param callConnectionId The call connection id.
     * @param audioGroupId The audio group id.
     * @param updateAudioGroupRequest The update audio group request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updateAudioGroupWithResponseAsync(
            String callConnectionId, String audioGroupId, UpdateAudioGroupRequest updateAudioGroupRequest) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.updateAudioGroup(
                                this.client.getEndpoint(),
                                callConnectionId,
                                audioGroupId,
                                this.client.getApiVersion(),
                                updateAudioGroupRequest,
                                accept,
                                context));
    }

    /**
     * Update audio group.
     *
     * @param callConnectionId The call connection id.
     * @param audioGroupId The audio group id.
     * @param updateAudioGroupRequest The update audio group request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updateAudioGroupWithResponseAsync(
            String callConnectionId,
            String audioGroupId,
            UpdateAudioGroupRequest updateAudioGroupRequest,
            Context context) {
        final String accept = "application/json";
        return service.updateAudioGroup(
                this.client.getEndpoint(),
                callConnectionId,
                audioGroupId,
                this.client.getApiVersion(),
                updateAudioGroupRequest,
                accept,
                context);
    }

    /**
     * Update audio group.
     *
     * @param callConnectionId The call connection id.
     * @param audioGroupId The audio group id.
     * @param updateAudioGroupRequest The update audio group request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> updateAudioGroupAsync(
            String callConnectionId, String audioGroupId, UpdateAudioGroupRequest updateAudioGroupRequest) {
        return updateAudioGroupWithResponseAsync(callConnectionId, audioGroupId, updateAudioGroupRequest)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Update audio group.
     *
     * @param callConnectionId The call connection id.
     * @param audioGroupId The audio group id.
     * @param updateAudioGroupRequest The update audio group request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> updateAudioGroupAsync(
            String callConnectionId,
            String audioGroupId,
            UpdateAudioGroupRequest updateAudioGroupRequest,
            Context context) {
        return updateAudioGroupWithResponseAsync(callConnectionId, audioGroupId, updateAudioGroupRequest, context)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Update audio group.
     *
     * @param callConnectionId The call connection id.
     * @param audioGroupId The audio group id.
     * @param updateAudioGroupRequest The update audio group request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void updateAudioGroup(
            String callConnectionId, String audioGroupId, UpdateAudioGroupRequest updateAudioGroupRequest) {
        updateAudioGroupAsync(callConnectionId, audioGroupId, updateAudioGroupRequest).block();
    }

    /**
     * Update audio group.
     *
     * @param callConnectionId The call connection id.
     * @param audioGroupId The audio group id.
     * @param updateAudioGroupRequest The update audio group request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> updateAudioGroupWithResponse(
            String callConnectionId,
            String audioGroupId,
            UpdateAudioGroupRequest updateAudioGroupRequest,
            Context context) {
        return updateAudioGroupWithResponseAsync(callConnectionId, audioGroupId, updateAudioGroupRequest, context)
                .block();
    }

    /**
     * Create a new call.
     *
     * @param callRequest Create call request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload of the create call operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<CreateCallResultInternal>> createCallWithResponseAsync(CreateCallRequest callRequest) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.createCall(
                                this.client.getEndpoint(), this.client.getApiVersion(), callRequest, accept, context));
    }

    /**
     * Create a new call.
     *
     * @param callRequest Create call request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload of the create call operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<CreateCallResultInternal>> createCallWithResponseAsync(
            CreateCallRequest callRequest, Context context) {
        final String accept = "application/json";
        return service.createCall(this.client.getEndpoint(), this.client.getApiVersion(), callRequest, accept, context);
    }

    /**
     * Create a new call.
     *
     * @param callRequest Create call request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload of the create call operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CreateCallResultInternal> createCallAsync(CreateCallRequest callRequest) {
        return createCallWithResponseAsync(callRequest)
                .flatMap(
                        (Response<CreateCallResultInternal> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Create a new call.
     *
     * @param callRequest Create call request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload of the create call operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CreateCallResultInternal> createCallAsync(CreateCallRequest callRequest, Context context) {
        return createCallWithResponseAsync(callRequest, context)
                .flatMap(
                        (Response<CreateCallResultInternal> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Create a new call.
     *
     * @param callRequest Create call request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload of the create call operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CreateCallResultInternal createCall(CreateCallRequest callRequest) {
        return createCallAsync(callRequest).block();
    }

    /**
     * Create a new call.
     *
     * @param callRequest Create call request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload of the create call operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<CreateCallResultInternal> createCallWithResponse(CreateCallRequest callRequest, Context context) {
        return createCallWithResponseAsync(callRequest, context).block();
    }

    /**
     * Get call connection.
     *
     * @param callConnectionId The call connection id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return call connection.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<CallConnectionPropertiesInternal>> getCallWithResponseAsync(String callConnectionId) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.getCall(
                                this.client.getEndpoint(),
                                callConnectionId,
                                this.client.getApiVersion(),
                                accept,
                                context));
    }

    /**
     * Get call connection.
     *
     * @param callConnectionId The call connection id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return call connection.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<CallConnectionPropertiesInternal>> getCallWithResponseAsync(
            String callConnectionId, Context context) {
        final String accept = "application/json";
        return service.getCall(
                this.client.getEndpoint(), callConnectionId, this.client.getApiVersion(), accept, context);
    }

    /**
     * Get call connection.
     *
     * @param callConnectionId The call connection id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return call connection.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CallConnectionPropertiesInternal> getCallAsync(String callConnectionId) {
        return getCallWithResponseAsync(callConnectionId)
                .flatMap(
                        (Response<CallConnectionPropertiesInternal> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Get call connection.
     *
     * @param callConnectionId The call connection id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return call connection.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CallConnectionPropertiesInternal> getCallAsync(String callConnectionId, Context context) {
        return getCallWithResponseAsync(callConnectionId, context)
                .flatMap(
                        (Response<CallConnectionPropertiesInternal> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Get call connection.
     *
     * @param callConnectionId The call connection id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return call connection.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CallConnectionPropertiesInternal getCall(String callConnectionId) {
        return getCallAsync(callConnectionId).block();
    }

    /**
     * Get call connection.
     *
     * @param callConnectionId The call connection id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return call connection.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<CallConnectionPropertiesInternal> getCallWithResponse(String callConnectionId, Context context) {
        return getCallWithResponseAsync(callConnectionId, context).block();
    }

    /**
     * Delete the call.
     *
     * @param callConnectionId The call connection id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteCallWithResponseAsync(String callConnectionId) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.deleteCall(
                                this.client.getEndpoint(),
                                callConnectionId,
                                this.client.getApiVersion(),
                                accept,
                                context));
    }

    /**
     * Delete the call.
     *
     * @param callConnectionId The call connection id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteCallWithResponseAsync(String callConnectionId, Context context) {
        final String accept = "application/json";
        return service.deleteCall(
                this.client.getEndpoint(), callConnectionId, this.client.getApiVersion(), accept, context);
    }

    /**
     * Delete the call.
     *
     * @param callConnectionId The call connection id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteCallAsync(String callConnectionId) {
        return deleteCallWithResponseAsync(callConnectionId).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Delete the call.
     *
     * @param callConnectionId The call connection id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteCallAsync(String callConnectionId, Context context) {
        return deleteCallWithResponseAsync(callConnectionId, context).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Delete the call.
     *
     * @param callConnectionId The call connection id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteCall(String callConnectionId) {
        deleteCallAsync(callConnectionId).block();
    }

    /**
     * Delete the call.
     *
     * @param callConnectionId The call connection id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteCallWithResponse(String callConnectionId, Context context) {
        return deleteCallWithResponseAsync(callConnectionId, context).block();
    }

    /**
     * Hangup the call.
     *
     * @param callConnectionId The call connection id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> hangupCallWithResponseAsync(String callConnectionId) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.hangupCall(
                                this.client.getEndpoint(),
                                callConnectionId,
                                this.client.getApiVersion(),
                                accept,
                                context));
    }

    /**
     * Hangup the call.
     *
     * @param callConnectionId The call connection id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> hangupCallWithResponseAsync(String callConnectionId, Context context) {
        final String accept = "application/json";
        return service.hangupCall(
                this.client.getEndpoint(), callConnectionId, this.client.getApiVersion(), accept, context);
    }

    /**
     * Hangup the call.
     *
     * @param callConnectionId The call connection id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> hangupCallAsync(String callConnectionId) {
        return hangupCallWithResponseAsync(callConnectionId).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Hangup the call.
     *
     * @param callConnectionId The call connection id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> hangupCallAsync(String callConnectionId, Context context) {
        return hangupCallWithResponseAsync(callConnectionId, context).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Hangup the call.
     *
     * @param callConnectionId The call connection id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void hangupCall(String callConnectionId) {
        hangupCallAsync(callConnectionId).block();
    }

    /**
     * Hangup the call.
     *
     * @param callConnectionId The call connection id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> hangupCallWithResponse(String callConnectionId, Context context) {
        return hangupCallWithResponseAsync(callConnectionId, context).block();
    }

    /**
     * Play audio in the call.
     *
     * @param callConnectionId The call connection id.
     * @param playAudioRequest The play audio request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload for play audio operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<PlayAudioResultInternal>> playAudioWithResponseAsync(
            String callConnectionId, PlayAudioRequest playAudioRequest) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.playAudio(
                                this.client.getEndpoint(),
                                callConnectionId,
                                this.client.getApiVersion(),
                                playAudioRequest,
                                accept,
                                context));
    }

    /**
     * Play audio in the call.
     *
     * @param callConnectionId The call connection id.
     * @param playAudioRequest The play audio request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload for play audio operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<PlayAudioResultInternal>> playAudioWithResponseAsync(
            String callConnectionId, PlayAudioRequest playAudioRequest, Context context) {
        final String accept = "application/json";
        return service.playAudio(
                this.client.getEndpoint(),
                callConnectionId,
                this.client.getApiVersion(),
                playAudioRequest,
                accept,
                context);
    }

    /**
     * Play audio in the call.
     *
     * @param callConnectionId The call connection id.
     * @param playAudioRequest The play audio request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload for play audio operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PlayAudioResultInternal> playAudioAsync(String callConnectionId, PlayAudioRequest playAudioRequest) {
        return playAudioWithResponseAsync(callConnectionId, playAudioRequest)
                .flatMap(
                        (Response<PlayAudioResultInternal> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Play audio in the call.
     *
     * @param callConnectionId The call connection id.
     * @param playAudioRequest The play audio request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload for play audio operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PlayAudioResultInternal> playAudioAsync(
            String callConnectionId, PlayAudioRequest playAudioRequest, Context context) {
        return playAudioWithResponseAsync(callConnectionId, playAudioRequest, context)
                .flatMap(
                        (Response<PlayAudioResultInternal> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Play audio in the call.
     *
     * @param callConnectionId The call connection id.
     * @param playAudioRequest The play audio request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload for play audio operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PlayAudioResultInternal playAudio(String callConnectionId, PlayAudioRequest playAudioRequest) {
        return playAudioAsync(callConnectionId, playAudioRequest).block();
    }

    /**
     * Play audio in the call.
     *
     * @param callConnectionId The call connection id.
     * @param playAudioRequest The play audio request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload for play audio operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<PlayAudioResultInternal> playAudioWithResponse(
            String callConnectionId, PlayAudioRequest playAudioRequest, Context context) {
        return playAudioWithResponseAsync(callConnectionId, playAudioRequest, context).block();
    }

    /**
     * Cancel all media operations.
     *
     * @param callConnectionId The call connection id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> cancelAllMediaOperationsWithResponseAsync(String callConnectionId) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.cancelAllMediaOperations(
                                this.client.getEndpoint(),
                                callConnectionId,
                                this.client.getApiVersion(),
                                accept,
                                context));
    }

    /**
     * Cancel all media operations.
     *
     * @param callConnectionId The call connection id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> cancelAllMediaOperationsWithResponseAsync(String callConnectionId, Context context) {
        final String accept = "application/json";
        return service.cancelAllMediaOperations(
                this.client.getEndpoint(), callConnectionId, this.client.getApiVersion(), accept, context);
    }

    /**
     * Cancel all media operations.
     *
     * @param callConnectionId The call connection id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> cancelAllMediaOperationsAsync(String callConnectionId) {
        return cancelAllMediaOperationsWithResponseAsync(callConnectionId)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Cancel all media operations.
     *
     * @param callConnectionId The call connection id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> cancelAllMediaOperationsAsync(String callConnectionId, Context context) {
        return cancelAllMediaOperationsWithResponseAsync(callConnectionId, context)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Cancel all media operations.
     *
     * @param callConnectionId The call connection id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void cancelAllMediaOperations(String callConnectionId) {
        cancelAllMediaOperationsAsync(callConnectionId).block();
    }

    /**
     * Cancel all media operations.
     *
     * @param callConnectionId The call connection id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> cancelAllMediaOperationsWithResponse(String callConnectionId, Context context) {
        return cancelAllMediaOperationsWithResponseAsync(callConnectionId, context).block();
    }

    /**
     * Keep the call alive.
     *
     * @param callConnectionId The call connection id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> keepAliveWithResponseAsync(String callConnectionId) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.keepAlive(
                                this.client.getEndpoint(),
                                callConnectionId,
                                this.client.getApiVersion(),
                                accept,
                                context));
    }

    /**
     * Keep the call alive.
     *
     * @param callConnectionId The call connection id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> keepAliveWithResponseAsync(String callConnectionId, Context context) {
        final String accept = "application/json";
        return service.keepAlive(
                this.client.getEndpoint(), callConnectionId, this.client.getApiVersion(), accept, context);
    }

    /**
     * Keep the call alive.
     *
     * @param callConnectionId The call connection id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> keepAliveAsync(String callConnectionId) {
        return keepAliveWithResponseAsync(callConnectionId).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Keep the call alive.
     *
     * @param callConnectionId The call connection id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> keepAliveAsync(String callConnectionId, Context context) {
        return keepAliveWithResponseAsync(callConnectionId, context).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Keep the call alive.
     *
     * @param callConnectionId The call connection id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void keepAlive(String callConnectionId) {
        keepAliveAsync(callConnectionId).block();
    }

    /**
     * Keep the call alive.
     *
     * @param callConnectionId The call connection id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> keepAliveWithResponse(String callConnectionId, Context context) {
        return keepAliveWithResponseAsync(callConnectionId, context).block();
    }

    /**
     * Transfer the call to a participant.
     *
     * @param callConnectionId The call connection id.
     * @param transferToParticipantRequest The transfer to participant request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload for transfer call operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<TransferCallResultInternal>> transferToParticipantWithResponseAsync(
            String callConnectionId, TransferToParticipantRequest transferToParticipantRequest) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.transferToParticipant(
                                this.client.getEndpoint(),
                                callConnectionId,
                                this.client.getApiVersion(),
                                transferToParticipantRequest,
                                accept,
                                context));
    }

    /**
     * Transfer the call to a participant.
     *
     * @param callConnectionId The call connection id.
     * @param transferToParticipantRequest The transfer to participant request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload for transfer call operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<TransferCallResultInternal>> transferToParticipantWithResponseAsync(
            String callConnectionId, TransferToParticipantRequest transferToParticipantRequest, Context context) {
        final String accept = "application/json";
        return service.transferToParticipant(
                this.client.getEndpoint(),
                callConnectionId,
                this.client.getApiVersion(),
                transferToParticipantRequest,
                accept,
                context);
    }

    /**
     * Transfer the call to a participant.
     *
     * @param callConnectionId The call connection id.
     * @param transferToParticipantRequest The transfer to participant request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload for transfer call operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TransferCallResultInternal> transferToParticipantAsync(
            String callConnectionId, TransferToParticipantRequest transferToParticipantRequest) {
        return transferToParticipantWithResponseAsync(callConnectionId, transferToParticipantRequest)
                .flatMap(
                        (Response<TransferCallResultInternal> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Transfer the call to a participant.
     *
     * @param callConnectionId The call connection id.
     * @param transferToParticipantRequest The transfer to participant request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload for transfer call operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TransferCallResultInternal> transferToParticipantAsync(
            String callConnectionId, TransferToParticipantRequest transferToParticipantRequest, Context context) {
        return transferToParticipantWithResponseAsync(callConnectionId, transferToParticipantRequest, context)
                .flatMap(
                        (Response<TransferCallResultInternal> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Transfer the call to a participant.
     *
     * @param callConnectionId The call connection id.
     * @param transferToParticipantRequest The transfer to participant request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload for transfer call operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TransferCallResultInternal transferToParticipant(
            String callConnectionId, TransferToParticipantRequest transferToParticipantRequest) {
        return transferToParticipantAsync(callConnectionId, transferToParticipantRequest).block();
    }

    /**
     * Transfer the call to a participant.
     *
     * @param callConnectionId The call connection id.
     * @param transferToParticipantRequest The transfer to participant request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload for transfer call operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<TransferCallResultInternal> transferToParticipantWithResponse(
            String callConnectionId, TransferToParticipantRequest transferToParticipantRequest, Context context) {
        return transferToParticipantWithResponseAsync(callConnectionId, transferToParticipantRequest, context).block();
    }

    /**
     * Transfer the current call to another call.
     *
     * @param callConnectionId The call connection id.
     * @param transferToCallRequest The transfer to call request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload for transfer call operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<TransferCallResultInternal>> transferToCallWithResponseAsync(
            String callConnectionId, TransferToCallRequest transferToCallRequest) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.transferToCall(
                                this.client.getEndpoint(),
                                callConnectionId,
                                this.client.getApiVersion(),
                                transferToCallRequest,
                                accept,
                                context));
    }

    /**
     * Transfer the current call to another call.
     *
     * @param callConnectionId The call connection id.
     * @param transferToCallRequest The transfer to call request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload for transfer call operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<TransferCallResultInternal>> transferToCallWithResponseAsync(
            String callConnectionId, TransferToCallRequest transferToCallRequest, Context context) {
        final String accept = "application/json";
        return service.transferToCall(
                this.client.getEndpoint(),
                callConnectionId,
                this.client.getApiVersion(),
                transferToCallRequest,
                accept,
                context);
    }

    /**
     * Transfer the current call to another call.
     *
     * @param callConnectionId The call connection id.
     * @param transferToCallRequest The transfer to call request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload for transfer call operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TransferCallResultInternal> transferToCallAsync(
            String callConnectionId, TransferToCallRequest transferToCallRequest) {
        return transferToCallWithResponseAsync(callConnectionId, transferToCallRequest)
                .flatMap(
                        (Response<TransferCallResultInternal> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Transfer the current call to another call.
     *
     * @param callConnectionId The call connection id.
     * @param transferToCallRequest The transfer to call request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload for transfer call operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TransferCallResultInternal> transferToCallAsync(
            String callConnectionId, TransferToCallRequest transferToCallRequest, Context context) {
        return transferToCallWithResponseAsync(callConnectionId, transferToCallRequest, context)
                .flatMap(
                        (Response<TransferCallResultInternal> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Transfer the current call to another call.
     *
     * @param callConnectionId The call connection id.
     * @param transferToCallRequest The transfer to call request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload for transfer call operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TransferCallResultInternal transferToCall(
            String callConnectionId, TransferToCallRequest transferToCallRequest) {
        return transferToCallAsync(callConnectionId, transferToCallRequest).block();
    }

    /**
     * Transfer the current call to another call.
     *
     * @param callConnectionId The call connection id.
     * @param transferToCallRequest The transfer to call request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload for transfer call operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<TransferCallResultInternal> transferToCallWithResponse(
            String callConnectionId, TransferToCallRequest transferToCallRequest, Context context) {
        return transferToCallWithResponseAsync(callConnectionId, transferToCallRequest, context).block();
    }

    /**
     * Create audio group in a call.
     *
     * @param callConnectionId The call connection id.
     * @param audioGroupRequest The audio group request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload of the create audio group operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<CreateAudioGroupResultInternal>> createAudioGroupWithResponseAsync(
            String callConnectionId, AudioGroupRequest audioGroupRequest) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.createAudioGroup(
                                this.client.getEndpoint(),
                                callConnectionId,
                                this.client.getApiVersion(),
                                audioGroupRequest,
                                accept,
                                context));
    }

    /**
     * Create audio group in a call.
     *
     * @param callConnectionId The call connection id.
     * @param audioGroupRequest The audio group request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload of the create audio group operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<CreateAudioGroupResultInternal>> createAudioGroupWithResponseAsync(
            String callConnectionId, AudioGroupRequest audioGroupRequest, Context context) {
        final String accept = "application/json";
        return service.createAudioGroup(
                this.client.getEndpoint(),
                callConnectionId,
                this.client.getApiVersion(),
                audioGroupRequest,
                accept,
                context);
    }

    /**
     * Create audio group in a call.
     *
     * @param callConnectionId The call connection id.
     * @param audioGroupRequest The audio group request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload of the create audio group operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CreateAudioGroupResultInternal> createAudioGroupAsync(
            String callConnectionId, AudioGroupRequest audioGroupRequest) {
        return createAudioGroupWithResponseAsync(callConnectionId, audioGroupRequest)
                .flatMap(
                        (Response<CreateAudioGroupResultInternal> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Create audio group in a call.
     *
     * @param callConnectionId The call connection id.
     * @param audioGroupRequest The audio group request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload of the create audio group operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CreateAudioGroupResultInternal> createAudioGroupAsync(
            String callConnectionId, AudioGroupRequest audioGroupRequest, Context context) {
        return createAudioGroupWithResponseAsync(callConnectionId, audioGroupRequest, context)
                .flatMap(
                        (Response<CreateAudioGroupResultInternal> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Create audio group in a call.
     *
     * @param callConnectionId The call connection id.
     * @param audioGroupRequest The audio group request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload of the create audio group operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CreateAudioGroupResultInternal createAudioGroup(
            String callConnectionId, AudioGroupRequest audioGroupRequest) {
        return createAudioGroupAsync(callConnectionId, audioGroupRequest).block();
    }

    /**
     * Create audio group in a call.
     *
     * @param callConnectionId The call connection id.
     * @param audioGroupRequest The audio group request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload of the create audio group operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<CreateAudioGroupResultInternal> createAudioGroupWithResponse(
            String callConnectionId, AudioGroupRequest audioGroupRequest, Context context) {
        return createAudioGroupWithResponseAsync(callConnectionId, audioGroupRequest, context).block();
    }

    /**
     * Get participants from a call.
     *
     * @param callConnectionId The call connection id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return participants from a call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<List<CallParticipantInternal>>> getParticipantsWithResponseAsync(String callConnectionId) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.getParticipants(
                                this.client.getEndpoint(),
                                callConnectionId,
                                this.client.getApiVersion(),
                                accept,
                                context));
    }

    /**
     * Get participants from a call.
     *
     * @param callConnectionId The call connection id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return participants from a call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<List<CallParticipantInternal>>> getParticipantsWithResponseAsync(
            String callConnectionId, Context context) {
        final String accept = "application/json";
        return service.getParticipants(
                this.client.getEndpoint(), callConnectionId, this.client.getApiVersion(), accept, context);
    }

    /**
     * Get participants from a call.
     *
     * @param callConnectionId The call connection id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return participants from a call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<CallParticipantInternal>> getParticipantsAsync(String callConnectionId) {
        return getParticipantsWithResponseAsync(callConnectionId)
                .flatMap(
                        (Response<List<CallParticipantInternal>> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Get participants from a call.
     *
     * @param callConnectionId The call connection id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return participants from a call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<CallParticipantInternal>> getParticipantsAsync(String callConnectionId, Context context) {
        return getParticipantsWithResponseAsync(callConnectionId, context)
                .flatMap(
                        (Response<List<CallParticipantInternal>> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Get participants from a call.
     *
     * @param callConnectionId The call connection id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return participants from a call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<CallParticipantInternal> getParticipants(String callConnectionId) {
        return getParticipantsAsync(callConnectionId).block();
    }

    /**
     * Get participants from a call.
     *
     * @param callConnectionId The call connection id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return participants from a call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<List<CallParticipantInternal>> getParticipantsWithResponse(
            String callConnectionId, Context context) {
        return getParticipantsWithResponseAsync(callConnectionId, context).block();
    }

    /**
     * Add a participant to the call.
     *
     * @param callConnectionId The call connection id.
     * @param addParticipantRequest Add participant request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the add participant result.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<AddParticipantResultInternal>> addParticipantWithResponseAsync(
            String callConnectionId, AddParticipantRequest addParticipantRequest) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.addParticipant(
                                this.client.getEndpoint(),
                                callConnectionId,
                                this.client.getApiVersion(),
                                addParticipantRequest,
                                accept,
                                context));
    }

    /**
     * Add a participant to the call.
     *
     * @param callConnectionId The call connection id.
     * @param addParticipantRequest Add participant request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the add participant result.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<AddParticipantResultInternal>> addParticipantWithResponseAsync(
            String callConnectionId, AddParticipantRequest addParticipantRequest, Context context) {
        final String accept = "application/json";
        return service.addParticipant(
                this.client.getEndpoint(),
                callConnectionId,
                this.client.getApiVersion(),
                addParticipantRequest,
                accept,
                context);
    }

    /**
     * Add a participant to the call.
     *
     * @param callConnectionId The call connection id.
     * @param addParticipantRequest Add participant request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the add participant result.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AddParticipantResultInternal> addParticipantAsync(
            String callConnectionId, AddParticipantRequest addParticipantRequest) {
        return addParticipantWithResponseAsync(callConnectionId, addParticipantRequest)
                .flatMap(
                        (Response<AddParticipantResultInternal> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Add a participant to the call.
     *
     * @param callConnectionId The call connection id.
     * @param addParticipantRequest Add participant request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the add participant result.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AddParticipantResultInternal> addParticipantAsync(
            String callConnectionId, AddParticipantRequest addParticipantRequest, Context context) {
        return addParticipantWithResponseAsync(callConnectionId, addParticipantRequest, context)
                .flatMap(
                        (Response<AddParticipantResultInternal> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Add a participant to the call.
     *
     * @param callConnectionId The call connection id.
     * @param addParticipantRequest Add participant request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the add participant result.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AddParticipantResultInternal addParticipant(
            String callConnectionId, AddParticipantRequest addParticipantRequest) {
        return addParticipantAsync(callConnectionId, addParticipantRequest).block();
    }

    /**
     * Add a participant to the call.
     *
     * @param callConnectionId The call connection id.
     * @param addParticipantRequest Add participant request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the add participant result.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<AddParticipantResultInternal> addParticipantWithResponse(
            String callConnectionId, AddParticipantRequest addParticipantRequest, Context context) {
        return addParticipantWithResponseAsync(callConnectionId, addParticipantRequest, context).block();
    }

    /**
     * Remove participant from the call using identifier.
     *
     * @param callConnectionId The call connection id.
     * @param removeParticipantRequest The identifier of the participant to be removed from the call.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> removeParticipantWithResponseAsync(
            String callConnectionId, RemoveParticipantRequest removeParticipantRequest) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.removeParticipant(
                                this.client.getEndpoint(),
                                callConnectionId,
                                this.client.getApiVersion(),
                                removeParticipantRequest,
                                accept,
                                context));
    }

    /**
     * Remove participant from the call using identifier.
     *
     * @param callConnectionId The call connection id.
     * @param removeParticipantRequest The identifier of the participant to be removed from the call.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> removeParticipantWithResponseAsync(
            String callConnectionId, RemoveParticipantRequest removeParticipantRequest, Context context) {
        final String accept = "application/json";
        return service.removeParticipant(
                this.client.getEndpoint(),
                callConnectionId,
                this.client.getApiVersion(),
                removeParticipantRequest,
                accept,
                context);
    }

    /**
     * Remove participant from the call using identifier.
     *
     * @param callConnectionId The call connection id.
     * @param removeParticipantRequest The identifier of the participant to be removed from the call.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> removeParticipantAsync(
            String callConnectionId, RemoveParticipantRequest removeParticipantRequest) {
        return removeParticipantWithResponseAsync(callConnectionId, removeParticipantRequest)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Remove participant from the call using identifier.
     *
     * @param callConnectionId The call connection id.
     * @param removeParticipantRequest The identifier of the participant to be removed from the call.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> removeParticipantAsync(
            String callConnectionId, RemoveParticipantRequest removeParticipantRequest, Context context) {
        return removeParticipantWithResponseAsync(callConnectionId, removeParticipantRequest, context)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Remove participant from the call using identifier.
     *
     * @param callConnectionId The call connection id.
     * @param removeParticipantRequest The identifier of the participant to be removed from the call.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void removeParticipant(String callConnectionId, RemoveParticipantRequest removeParticipantRequest) {
        removeParticipantAsync(callConnectionId, removeParticipantRequest).block();
    }

    /**
     * Remove participant from the call using identifier.
     *
     * @param callConnectionId The call connection id.
     * @param removeParticipantRequest The identifier of the participant to be removed from the call.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> removeParticipantWithResponse(
            String callConnectionId, RemoveParticipantRequest removeParticipantRequest, Context context) {
        return removeParticipantWithResponseAsync(callConnectionId, removeParticipantRequest, context).block();
    }

    /**
     * Get participant from the call using identifier.
     *
     * @param callConnectionId The call connection id.
     * @param getParticipantRequest The identifier of the participant to get from the call.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return participant from the call using identifier.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<CallParticipantInternal>> getParticipantWithResponseAsync(
            String callConnectionId, GetParticipantRequest getParticipantRequest) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.getParticipant(
                                this.client.getEndpoint(),
                                callConnectionId,
                                this.client.getApiVersion(),
                                getParticipantRequest,
                                accept,
                                context));
    }

    /**
     * Get participant from the call using identifier.
     *
     * @param callConnectionId The call connection id.
     * @param getParticipantRequest The identifier of the participant to get from the call.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return participant from the call using identifier.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<CallParticipantInternal>> getParticipantWithResponseAsync(
            String callConnectionId, GetParticipantRequest getParticipantRequest, Context context) {
        final String accept = "application/json";
        return service.getParticipant(
                this.client.getEndpoint(),
                callConnectionId,
                this.client.getApiVersion(),
                getParticipantRequest,
                accept,
                context);
    }

    /**
     * Get participant from the call using identifier.
     *
     * @param callConnectionId The call connection id.
     * @param getParticipantRequest The identifier of the participant to get from the call.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return participant from the call using identifier.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CallParticipantInternal> getParticipantAsync(
            String callConnectionId, GetParticipantRequest getParticipantRequest) {
        return getParticipantWithResponseAsync(callConnectionId, getParticipantRequest)
                .flatMap(
                        (Response<CallParticipantInternal> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Get participant from the call using identifier.
     *
     * @param callConnectionId The call connection id.
     * @param getParticipantRequest The identifier of the participant to get from the call.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return participant from the call using identifier.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CallParticipantInternal> getParticipantAsync(
            String callConnectionId, GetParticipantRequest getParticipantRequest, Context context) {
        return getParticipantWithResponseAsync(callConnectionId, getParticipantRequest, context)
                .flatMap(
                        (Response<CallParticipantInternal> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Get participant from the call using identifier.
     *
     * @param callConnectionId The call connection id.
     * @param getParticipantRequest The identifier of the participant to get from the call.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return participant from the call using identifier.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CallParticipantInternal getParticipant(
            String callConnectionId, GetParticipantRequest getParticipantRequest) {
        return getParticipantAsync(callConnectionId, getParticipantRequest).block();
    }

    /**
     * Get participant from the call using identifier.
     *
     * @param callConnectionId The call connection id.
     * @param getParticipantRequest The identifier of the participant to get from the call.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return participant from the call using identifier.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<CallParticipantInternal> getParticipantWithResponse(
            String callConnectionId, GetParticipantRequest getParticipantRequest, Context context) {
        return getParticipantWithResponseAsync(callConnectionId, getParticipantRequest, context).block();
    }

    /**
     * Play audio to a participant.
     *
     * @param callConnectionId The callConnectionId.
     * @param playAudioToParticipantRequest The play audio to participant request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload for play audio operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<PlayAudioResultInternal>> participantPlayAudioWithResponseAsync(
            String callConnectionId, PlayAudioToParticipantRequest playAudioToParticipantRequest) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.participantPlayAudio(
                                this.client.getEndpoint(),
                                callConnectionId,
                                this.client.getApiVersion(),
                                playAudioToParticipantRequest,
                                accept,
                                context));
    }

    /**
     * Play audio to a participant.
     *
     * @param callConnectionId The callConnectionId.
     * @param playAudioToParticipantRequest The play audio to participant request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload for play audio operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<PlayAudioResultInternal>> participantPlayAudioWithResponseAsync(
            String callConnectionId, PlayAudioToParticipantRequest playAudioToParticipantRequest, Context context) {
        final String accept = "application/json";
        return service.participantPlayAudio(
                this.client.getEndpoint(),
                callConnectionId,
                this.client.getApiVersion(),
                playAudioToParticipantRequest,
                accept,
                context);
    }

    /**
     * Play audio to a participant.
     *
     * @param callConnectionId The callConnectionId.
     * @param playAudioToParticipantRequest The play audio to participant request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload for play audio operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PlayAudioResultInternal> participantPlayAudioAsync(
            String callConnectionId, PlayAudioToParticipantRequest playAudioToParticipantRequest) {
        return participantPlayAudioWithResponseAsync(callConnectionId, playAudioToParticipantRequest)
                .flatMap(
                        (Response<PlayAudioResultInternal> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Play audio to a participant.
     *
     * @param callConnectionId The callConnectionId.
     * @param playAudioToParticipantRequest The play audio to participant request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload for play audio operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PlayAudioResultInternal> participantPlayAudioAsync(
            String callConnectionId, PlayAudioToParticipantRequest playAudioToParticipantRequest, Context context) {
        return participantPlayAudioWithResponseAsync(callConnectionId, playAudioToParticipantRequest, context)
                .flatMap(
                        (Response<PlayAudioResultInternal> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Play audio to a participant.
     *
     * @param callConnectionId The callConnectionId.
     * @param playAudioToParticipantRequest The play audio to participant request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload for play audio operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PlayAudioResultInternal participantPlayAudio(
            String callConnectionId, PlayAudioToParticipantRequest playAudioToParticipantRequest) {
        return participantPlayAudioAsync(callConnectionId, playAudioToParticipantRequest).block();
    }

    /**
     * Play audio to a participant.
     *
     * @param callConnectionId The callConnectionId.
     * @param playAudioToParticipantRequest The play audio to participant request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload for play audio operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<PlayAudioResultInternal> participantPlayAudioWithResponse(
            String callConnectionId, PlayAudioToParticipantRequest playAudioToParticipantRequest, Context context) {
        return participantPlayAudioWithResponseAsync(callConnectionId, playAudioToParticipantRequest, context).block();
    }

    /**
     * Cancel media operation for a participant.
     *
     * @param callConnectionId The callConnectionId.
     * @param cancelMediaOperationRequest The cancel media operation for participant request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> cancelParticipantMediaOperationWithResponseAsync(
            String callConnectionId, CancelParticipantMediaOperationRequest cancelMediaOperationRequest) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.cancelParticipantMediaOperation(
                                this.client.getEndpoint(),
                                callConnectionId,
                                this.client.getApiVersion(),
                                cancelMediaOperationRequest,
                                accept,
                                context));
    }

    /**
     * Cancel media operation for a participant.
     *
     * @param callConnectionId The callConnectionId.
     * @param cancelMediaOperationRequest The cancel media operation for participant request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> cancelParticipantMediaOperationWithResponseAsync(
            String callConnectionId,
            CancelParticipantMediaOperationRequest cancelMediaOperationRequest,
            Context context) {
        final String accept = "application/json";
        return service.cancelParticipantMediaOperation(
                this.client.getEndpoint(),
                callConnectionId,
                this.client.getApiVersion(),
                cancelMediaOperationRequest,
                accept,
                context);
    }

    /**
     * Cancel media operation for a participant.
     *
     * @param callConnectionId The callConnectionId.
     * @param cancelMediaOperationRequest The cancel media operation for participant request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> cancelParticipantMediaOperationAsync(
            String callConnectionId, CancelParticipantMediaOperationRequest cancelMediaOperationRequest) {
        return cancelParticipantMediaOperationWithResponseAsync(callConnectionId, cancelMediaOperationRequest)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Cancel media operation for a participant.
     *
     * @param callConnectionId The callConnectionId.
     * @param cancelMediaOperationRequest The cancel media operation for participant request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> cancelParticipantMediaOperationAsync(
            String callConnectionId,
            CancelParticipantMediaOperationRequest cancelMediaOperationRequest,
            Context context) {
        return cancelParticipantMediaOperationWithResponseAsync(callConnectionId, cancelMediaOperationRequest, context)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Cancel media operation for a participant.
     *
     * @param callConnectionId The callConnectionId.
     * @param cancelMediaOperationRequest The cancel media operation for participant request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void cancelParticipantMediaOperation(
            String callConnectionId, CancelParticipantMediaOperationRequest cancelMediaOperationRequest) {
        cancelParticipantMediaOperationAsync(callConnectionId, cancelMediaOperationRequest).block();
    }

    /**
     * Cancel media operation for a participant.
     *
     * @param callConnectionId The callConnectionId.
     * @param cancelMediaOperationRequest The cancel media operation for participant request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> cancelParticipantMediaOperationWithResponse(
            String callConnectionId,
            CancelParticipantMediaOperationRequest cancelMediaOperationRequest,
            Context context) {
        return cancelParticipantMediaOperationWithResponseAsync(callConnectionId, cancelMediaOperationRequest, context)
                .block();
    }

    /**
     * Mute participant in the call.
     *
     * @param callConnectionId The call connection id.
     * @param muteParticipantRequest The identifier of the participant to mute in the call.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> muteParticipantWithResponseAsync(
            String callConnectionId, MuteParticipantRequest muteParticipantRequest) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.muteParticipant(
                                this.client.getEndpoint(),
                                callConnectionId,
                                this.client.getApiVersion(),
                                muteParticipantRequest,
                                accept,
                                context));
    }

    /**
     * Mute participant in the call.
     *
     * @param callConnectionId The call connection id.
     * @param muteParticipantRequest The identifier of the participant to mute in the call.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> muteParticipantWithResponseAsync(
            String callConnectionId, MuteParticipantRequest muteParticipantRequest, Context context) {
        final String accept = "application/json";
        return service.muteParticipant(
                this.client.getEndpoint(),
                callConnectionId,
                this.client.getApiVersion(),
                muteParticipantRequest,
                accept,
                context);
    }

    /**
     * Mute participant in the call.
     *
     * @param callConnectionId The call connection id.
     * @param muteParticipantRequest The identifier of the participant to mute in the call.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> muteParticipantAsync(String callConnectionId, MuteParticipantRequest muteParticipantRequest) {
        return muteParticipantWithResponseAsync(callConnectionId, muteParticipantRequest)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Mute participant in the call.
     *
     * @param callConnectionId The call connection id.
     * @param muteParticipantRequest The identifier of the participant to mute in the call.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> muteParticipantAsync(
            String callConnectionId, MuteParticipantRequest muteParticipantRequest, Context context) {
        return muteParticipantWithResponseAsync(callConnectionId, muteParticipantRequest, context)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Mute participant in the call.
     *
     * @param callConnectionId The call connection id.
     * @param muteParticipantRequest The identifier of the participant to mute in the call.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void muteParticipant(String callConnectionId, MuteParticipantRequest muteParticipantRequest) {
        muteParticipantAsync(callConnectionId, muteParticipantRequest).block();
    }

    /**
     * Mute participant in the call.
     *
     * @param callConnectionId The call connection id.
     * @param muteParticipantRequest The identifier of the participant to mute in the call.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> muteParticipantWithResponse(
            String callConnectionId, MuteParticipantRequest muteParticipantRequest, Context context) {
        return muteParticipantWithResponseAsync(callConnectionId, muteParticipantRequest, context).block();
    }

    /**
     * Unmute participant in the call.
     *
     * @param callConnectionId The call connection id.
     * @param unmuteParticipantRequest The identifier of the participant to unmute in the call.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> unmuteParticipantWithResponseAsync(
            String callConnectionId, UnmuteParticipantRequest unmuteParticipantRequest) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.unmuteParticipant(
                                this.client.getEndpoint(),
                                callConnectionId,
                                this.client.getApiVersion(),
                                unmuteParticipantRequest,
                                accept,
                                context));
    }

    /**
     * Unmute participant in the call.
     *
     * @param callConnectionId The call connection id.
     * @param unmuteParticipantRequest The identifier of the participant to unmute in the call.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> unmuteParticipantWithResponseAsync(
            String callConnectionId, UnmuteParticipantRequest unmuteParticipantRequest, Context context) {
        final String accept = "application/json";
        return service.unmuteParticipant(
                this.client.getEndpoint(),
                callConnectionId,
                this.client.getApiVersion(),
                unmuteParticipantRequest,
                accept,
                context);
    }

    /**
     * Unmute participant in the call.
     *
     * @param callConnectionId The call connection id.
     * @param unmuteParticipantRequest The identifier of the participant to unmute in the call.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> unmuteParticipantAsync(
            String callConnectionId, UnmuteParticipantRequest unmuteParticipantRequest) {
        return unmuteParticipantWithResponseAsync(callConnectionId, unmuteParticipantRequest)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Unmute participant in the call.
     *
     * @param callConnectionId The call connection id.
     * @param unmuteParticipantRequest The identifier of the participant to unmute in the call.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> unmuteParticipantAsync(
            String callConnectionId, UnmuteParticipantRequest unmuteParticipantRequest, Context context) {
        return unmuteParticipantWithResponseAsync(callConnectionId, unmuteParticipantRequest, context)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Unmute participant in the call.
     *
     * @param callConnectionId The call connection id.
     * @param unmuteParticipantRequest The identifier of the participant to unmute in the call.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void unmuteParticipant(String callConnectionId, UnmuteParticipantRequest unmuteParticipantRequest) {
        unmuteParticipantAsync(callConnectionId, unmuteParticipantRequest).block();
    }

    /**
     * Unmute participant in the call.
     *
     * @param callConnectionId The call connection id.
     * @param unmuteParticipantRequest The identifier of the participant to unmute in the call.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> unmuteParticipantWithResponse(
            String callConnectionId, UnmuteParticipantRequest unmuteParticipantRequest, Context context) {
        return unmuteParticipantWithResponseAsync(callConnectionId, unmuteParticipantRequest, context).block();
    }

    /**
     * Remove a participant from default audio group.
     *
     * @param callConnectionId The call connection id.
     * @param removeFromDefaultAudioGroupRequest The request payload for removing a participant from default audio
     *     group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> removeParticipantFromDefaultAudioGroupWithResponseAsync(
            String callConnectionId, RemoveFromDefaultAudioGroupRequest removeFromDefaultAudioGroupRequest) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.removeParticipantFromDefaultAudioGroup(
                                this.client.getEndpoint(),
                                callConnectionId,
                                this.client.getApiVersion(),
                                removeFromDefaultAudioGroupRequest,
                                accept,
                                context));
    }

    /**
     * Remove a participant from default audio group.
     *
     * @param callConnectionId The call connection id.
     * @param removeFromDefaultAudioGroupRequest The request payload for removing a participant from default audio
     *     group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> removeParticipantFromDefaultAudioGroupWithResponseAsync(
            String callConnectionId,
            RemoveFromDefaultAudioGroupRequest removeFromDefaultAudioGroupRequest,
            Context context) {
        final String accept = "application/json";
        return service.removeParticipantFromDefaultAudioGroup(
                this.client.getEndpoint(),
                callConnectionId,
                this.client.getApiVersion(),
                removeFromDefaultAudioGroupRequest,
                accept,
                context);
    }

    /**
     * Remove a participant from default audio group.
     *
     * @param callConnectionId The call connection id.
     * @param removeFromDefaultAudioGroupRequest The request payload for removing a participant from default audio
     *     group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> removeParticipantFromDefaultAudioGroupAsync(
            String callConnectionId, RemoveFromDefaultAudioGroupRequest removeFromDefaultAudioGroupRequest) {
        return removeParticipantFromDefaultAudioGroupWithResponseAsync(
                        callConnectionId, removeFromDefaultAudioGroupRequest)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Remove a participant from default audio group.
     *
     * @param callConnectionId The call connection id.
     * @param removeFromDefaultAudioGroupRequest The request payload for removing a participant from default audio
     *     group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> removeParticipantFromDefaultAudioGroupAsync(
            String callConnectionId,
            RemoveFromDefaultAudioGroupRequest removeFromDefaultAudioGroupRequest,
            Context context) {
        return removeParticipantFromDefaultAudioGroupWithResponseAsync(
                        callConnectionId, removeFromDefaultAudioGroupRequest, context)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Remove a participant from default audio group.
     *
     * @param callConnectionId The call connection id.
     * @param removeFromDefaultAudioGroupRequest The request payload for removing a participant from default audio
     *     group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void removeParticipantFromDefaultAudioGroup(
            String callConnectionId, RemoveFromDefaultAudioGroupRequest removeFromDefaultAudioGroupRequest) {
        removeParticipantFromDefaultAudioGroupAsync(callConnectionId, removeFromDefaultAudioGroupRequest).block();
    }

    /**
     * Remove a participant from default audio group.
     *
     * @param callConnectionId The call connection id.
     * @param removeFromDefaultAudioGroupRequest The request payload for removing a participant from default audio
     *     group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> removeParticipantFromDefaultAudioGroupWithResponse(
            String callConnectionId,
            RemoveFromDefaultAudioGroupRequest removeFromDefaultAudioGroupRequest,
            Context context) {
        return removeParticipantFromDefaultAudioGroupWithResponseAsync(
                        callConnectionId, removeFromDefaultAudioGroupRequest, context)
                .block();
    }

    /**
     * Add a participant to default audio group.
     *
     * @param callConnectionId The call connection id.
     * @param addToDefaultAudioGroupRequest The request payload for adding a participant to default audio group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> addParticipantToDefaultAudioGroupWithResponseAsync(
            String callConnectionId, AddToDefaultAudioGroupRequest addToDefaultAudioGroupRequest) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.addParticipantToDefaultAudioGroup(
                                this.client.getEndpoint(),
                                callConnectionId,
                                this.client.getApiVersion(),
                                addToDefaultAudioGroupRequest,
                                accept,
                                context));
    }

    /**
     * Add a participant to default audio group.
     *
     * @param callConnectionId The call connection id.
     * @param addToDefaultAudioGroupRequest The request payload for adding a participant to default audio group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> addParticipantToDefaultAudioGroupWithResponseAsync(
            String callConnectionId, AddToDefaultAudioGroupRequest addToDefaultAudioGroupRequest, Context context) {
        final String accept = "application/json";
        return service.addParticipantToDefaultAudioGroup(
                this.client.getEndpoint(),
                callConnectionId,
                this.client.getApiVersion(),
                addToDefaultAudioGroupRequest,
                accept,
                context);
    }

    /**
     * Add a participant to default audio group.
     *
     * @param callConnectionId The call connection id.
     * @param addToDefaultAudioGroupRequest The request payload for adding a participant to default audio group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> addParticipantToDefaultAudioGroupAsync(
            String callConnectionId, AddToDefaultAudioGroupRequest addToDefaultAudioGroupRequest) {
        return addParticipantToDefaultAudioGroupWithResponseAsync(callConnectionId, addToDefaultAudioGroupRequest)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Add a participant to default audio group.
     *
     * @param callConnectionId The call connection id.
     * @param addToDefaultAudioGroupRequest The request payload for adding a participant to default audio group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> addParticipantToDefaultAudioGroupAsync(
            String callConnectionId, AddToDefaultAudioGroupRequest addToDefaultAudioGroupRequest, Context context) {
        return addParticipantToDefaultAudioGroupWithResponseAsync(
                        callConnectionId, addToDefaultAudioGroupRequest, context)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Add a participant to default audio group.
     *
     * @param callConnectionId The call connection id.
     * @param addToDefaultAudioGroupRequest The request payload for adding a participant to default audio group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void addParticipantToDefaultAudioGroup(
            String callConnectionId, AddToDefaultAudioGroupRequest addToDefaultAudioGroupRequest) {
        addParticipantToDefaultAudioGroupAsync(callConnectionId, addToDefaultAudioGroupRequest).block();
    }

    /**
     * Add a participant to default audio group.
     *
     * @param callConnectionId The call connection id.
     * @param addToDefaultAudioGroupRequest The request payload for adding a participant to default audio group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> addParticipantToDefaultAudioGroupWithResponse(
            String callConnectionId, AddToDefaultAudioGroupRequest addToDefaultAudioGroupRequest, Context context) {
        return addParticipantToDefaultAudioGroupWithResponseAsync(
                        callConnectionId, addToDefaultAudioGroupRequest, context)
                .block();
    }
}
