// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.communication.callingserver.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The CallConnectionPropertiesInternal model.
 */
@Fluent
public final class CallConnectionPropertiesInternal implements JsonSerializable<CallConnectionPropertiesInternal> {
    /*
     * The call connection id.
     */
    private String callConnectionId;

    /*
     * The server call id.
     */
    private String serverCallId;

    /*
     * The source of the call.
     */
    private CallSourceInternal source;

    /*
     * The targets of the call.
     */
    private List<CommunicationIdentifierModel> targets;

    /*
     * The state of the call connection.
     */
    private CallConnectionStateModelInternal callConnectionState;

    /*
     * The subject.
     */
    private String subject;

    /*
     * The callback URI.
     */
    private String callbackUri;

    /*
     * SubscriptionId for media streaming
     */
    private String mediaSubscriptionId;

    /**
     * Creates an instance of CallConnectionPropertiesInternal class.
     */
    public CallConnectionPropertiesInternal() {
    }

    /**
     * Get the callConnectionId property: The call connection id.
     * 
     * @return the callConnectionId value.
     */
    public String getCallConnectionId() {
        return this.callConnectionId;
    }

    /**
     * Set the callConnectionId property: The call connection id.
     * 
     * @param callConnectionId the callConnectionId value to set.
     * @return the CallConnectionPropertiesInternal object itself.
     */
    public CallConnectionPropertiesInternal setCallConnectionId(String callConnectionId) {
        this.callConnectionId = callConnectionId;
        return this;
    }

    /**
     * Get the serverCallId property: The server call id.
     * 
     * @return the serverCallId value.
     */
    public String getServerCallId() {
        return this.serverCallId;
    }

    /**
     * Set the serverCallId property: The server call id.
     * 
     * @param serverCallId the serverCallId value to set.
     * @return the CallConnectionPropertiesInternal object itself.
     */
    public CallConnectionPropertiesInternal setServerCallId(String serverCallId) {
        this.serverCallId = serverCallId;
        return this;
    }

    /**
     * Get the source property: The source of the call.
     * 
     * @return the source value.
     */
    public CallSourceInternal getSource() {
        return this.source;
    }

    /**
     * Set the source property: The source of the call.
     * 
     * @param source the source value to set.
     * @return the CallConnectionPropertiesInternal object itself.
     */
    public CallConnectionPropertiesInternal setSource(CallSourceInternal source) {
        this.source = source;
        return this;
    }

    /**
     * Get the targets property: The targets of the call.
     * 
     * @return the targets value.
     */
    public List<CommunicationIdentifierModel> getTargets() {
        return this.targets;
    }

    /**
     * Set the targets property: The targets of the call.
     * 
     * @param targets the targets value to set.
     * @return the CallConnectionPropertiesInternal object itself.
     */
    public CallConnectionPropertiesInternal setTargets(List<CommunicationIdentifierModel> targets) {
        this.targets = targets;
        return this;
    }

    /**
     * Get the callConnectionState property: The state of the call connection.
     * 
     * @return the callConnectionState value.
     */
    public CallConnectionStateModelInternal getCallConnectionState() {
        return this.callConnectionState;
    }

    /**
     * Set the callConnectionState property: The state of the call connection.
     * 
     * @param callConnectionState the callConnectionState value to set.
     * @return the CallConnectionPropertiesInternal object itself.
     */
    public CallConnectionPropertiesInternal
        setCallConnectionState(CallConnectionStateModelInternal callConnectionState) {
        this.callConnectionState = callConnectionState;
        return this;
    }

    /**
     * Get the subject property: The subject.
     * 
     * @return the subject value.
     */
    public String getSubject() {
        return this.subject;
    }

    /**
     * Set the subject property: The subject.
     * 
     * @param subject the subject value to set.
     * @return the CallConnectionPropertiesInternal object itself.
     */
    public CallConnectionPropertiesInternal setSubject(String subject) {
        this.subject = subject;
        return this;
    }

    /**
     * Get the callbackUri property: The callback URI.
     * 
     * @return the callbackUri value.
     */
    public String getCallbackUri() {
        return this.callbackUri;
    }

    /**
     * Set the callbackUri property: The callback URI.
     * 
     * @param callbackUri the callbackUri value to set.
     * @return the CallConnectionPropertiesInternal object itself.
     */
    public CallConnectionPropertiesInternal setCallbackUri(String callbackUri) {
        this.callbackUri = callbackUri;
        return this;
    }

    /**
     * Get the mediaSubscriptionId property: SubscriptionId for media streaming.
     * 
     * @return the mediaSubscriptionId value.
     */
    public String getMediaSubscriptionId() {
        return this.mediaSubscriptionId;
    }

    /**
     * Set the mediaSubscriptionId property: SubscriptionId for media streaming.
     * 
     * @param mediaSubscriptionId the mediaSubscriptionId value to set.
     * @return the CallConnectionPropertiesInternal object itself.
     */
    public CallConnectionPropertiesInternal setMediaSubscriptionId(String mediaSubscriptionId) {
        this.mediaSubscriptionId = mediaSubscriptionId;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("callConnectionId", this.callConnectionId);
        jsonWriter.writeStringField("serverCallId", this.serverCallId);
        jsonWriter.writeJsonField("source", this.source);
        jsonWriter.writeArrayField("targets", this.targets, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("callConnectionState",
            this.callConnectionState == null ? null : this.callConnectionState.toString());
        jsonWriter.writeStringField("subject", this.subject);
        jsonWriter.writeStringField("callbackUri", this.callbackUri);
        jsonWriter.writeStringField("mediaSubscriptionId", this.mediaSubscriptionId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CallConnectionPropertiesInternal from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CallConnectionPropertiesInternal if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CallConnectionPropertiesInternal.
     */
    public static CallConnectionPropertiesInternal fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CallConnectionPropertiesInternal deserializedCallConnectionPropertiesInternal
                = new CallConnectionPropertiesInternal();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("callConnectionId".equals(fieldName)) {
                    deserializedCallConnectionPropertiesInternal.callConnectionId = reader.getString();
                } else if ("serverCallId".equals(fieldName)) {
                    deserializedCallConnectionPropertiesInternal.serverCallId = reader.getString();
                } else if ("source".equals(fieldName)) {
                    deserializedCallConnectionPropertiesInternal.source = CallSourceInternal.fromJson(reader);
                } else if ("targets".equals(fieldName)) {
                    List<CommunicationIdentifierModel> targets
                        = reader.readArray(reader1 -> CommunicationIdentifierModel.fromJson(reader1));
                    deserializedCallConnectionPropertiesInternal.targets = targets;
                } else if ("callConnectionState".equals(fieldName)) {
                    deserializedCallConnectionPropertiesInternal.callConnectionState
                        = CallConnectionStateModelInternal.fromString(reader.getString());
                } else if ("subject".equals(fieldName)) {
                    deserializedCallConnectionPropertiesInternal.subject = reader.getString();
                } else if ("callbackUri".equals(fieldName)) {
                    deserializedCallConnectionPropertiesInternal.callbackUri = reader.getString();
                } else if ("mediaSubscriptionId".equals(fieldName)) {
                    deserializedCallConnectionPropertiesInternal.mediaSubscriptionId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCallConnectionPropertiesInternal;
        });
    }
}
