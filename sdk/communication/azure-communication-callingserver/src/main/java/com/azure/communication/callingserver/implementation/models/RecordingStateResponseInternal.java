// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.communication.callingserver.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.fasterxml.jackson.annotation.JsonProperty;

import java.io.IOException;

/** The RecordingStateResponseInternal model. */
@Fluent
public final class RecordingStateResponseInternal {
    /*
     * The recordingId property.
     */
    @JsonProperty(value = "recordingId")
    private String recordingId;

    /*
     * The recordingState property.
     */
    @JsonProperty(value = "recordingState")
    private RecordingStateInternal recordingState;

    /**
     * Get the recordingId property: The recordingId property.
     *
     * @return the recordingId value.
     */
    public String getRecordingId() {
        return this.recordingId;
    }

    /**
     * Set the recordingId property: The recordingId property.
     *
     * @param recordingId the recordingId value to set.
     * @return the RecordingStateResponseInternal object itself.
     */
    public RecordingStateResponseInternal setRecordingId(String recordingId) {
        this.recordingId = recordingId;
        return this;
    }

    /**
     * Get the recordingState property: The recordingState property.
     *
     * @return the recordingState value.
     */
    public RecordingStateInternal getRecordingState() {
        return this.recordingState;
    }

    /**
     * Set the recordingState property: The recordingState property.
     *
     * @param recordingState the recordingState value to set.
     * @return the RecordingStateResponseInternal object itself.
     */
    public RecordingStateResponseInternal setRecordingState(RecordingStateInternal recordingState) {
        this.recordingState = recordingState;
        return this;
    }

    /**
     * Reads an instance of {@link AddParticipantsRequestInternal} from the {@link JsonReader}.
     *
     * @param jsonReader The {@link JsonReader} to read.
     * @return An instance of {@link AddParticipantsRequestInternal}, or null if the {@link JsonReader} was pointing to
     * {@link JsonToken#NULL}.
     * @throws IOException If an error occurs while reading the {@link JsonReader}.
     */
    public static AddParticipantsRequestInternal fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AddParticipantsRequestInternal request = new AddParticipantsRequestInternal();

            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sourceCallerId".equals(fieldName)) {
                    request.sourceCallerId = PhoneNumberIdentifierModel.fromJson(reader);
                } else if ("participantsToAdd".equals(fieldName)) {
                    request.participantsToAdd = reader.readArray(CommunicationIdentifierModel::fromJson);
                } else if ("invitationTimeoutInSeconds".equals(fieldName)) {
                    request.invitationTimeoutInSeconds = reader.getNullable(JsonReader::getInt);
                } else if ("operationContext".equals(fieldName)) {
                    request.operationContext = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return request;
        });
    }
}
