// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.communication.callingserver.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;

import java.io.IOException;
import java.util.Objects;

/** The RecordingStateResponseInternal model. */
@Fluent
public final class RecordingStateResponseInternal implements JsonSerializable<RecordingStateResponseInternal> {
    /*
     * The recordingId property.
     */
    private String recordingId;

    /*
     * The recordingState property.
     */
    private RecordingStateInternal recordingState;

    /**
     * Get the recordingId property: The recordingId property.
     *
     * @return the recordingId value.
     */
    public String getRecordingId() {
        return this.recordingId;
    }

    /**
     * Set the recordingId property: The recordingId property.
     *
     * @param recordingId the recordingId value to set.
     * @return the RecordingStateResponseInternal object itself.
     */
    public RecordingStateResponseInternal setRecordingId(String recordingId) {
        this.recordingId = recordingId;
        return this;
    }

    /**
     * Get the recordingState property: The recordingState property.
     *
     * @return the recordingState value.
     */
    public RecordingStateInternal getRecordingState() {
        return this.recordingState;
    }

    /**
     * Set the recordingState property: The recordingState property.
     *
     * @param recordingState the recordingState value to set.
     * @return the RecordingStateResponseInternal object itself.
     */
    public RecordingStateResponseInternal setRecordingState(RecordingStateInternal recordingState) {
        this.recordingState = recordingState;
        return this;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        return jsonWriter.writeStartObject()
            .writeStringField("recordingId", recordingId)
            .writeStringField("recordingState", Objects.toString(recordingState, null))
            .writeEndObject();
    }

    /**
     * Reads an instance of {@link RecordingStateResponseInternal} from the {@link JsonReader}.
     *
     * @param jsonReader The {@link JsonReader} to read.
     * @return An instance of {@link RecordingStateResponseInternal}, or null if the {@link JsonReader} was pointing to
     * {@link JsonToken#NULL}.
     * @throws IOException If an error occurs while reading the {@link JsonReader}.
     */
    public static RecordingStateResponseInternal fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RecordingStateResponseInternal response = new RecordingStateResponseInternal();

            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("recordingId".equals(fieldName)) {
                    response.recordingId = reader.getString();
                } else if ("recordingState".equals(fieldName)) {
                    response.recordingState = RecordingStateInternal.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return response;
        });
    }
}
