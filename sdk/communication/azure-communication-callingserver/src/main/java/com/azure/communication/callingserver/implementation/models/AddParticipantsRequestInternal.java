// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.communication.callingserver.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The AddParticipantsRequestInternal model.
 */
@Fluent
public final class AddParticipantsRequestInternal implements JsonSerializable<AddParticipantsRequestInternal> {
    /*
     * The source caller Id that's shown to the PSTN participant being invited. Required only when inviting a PSTN
     * participant.
     */
    private PhoneNumberIdentifierModel sourceCallerId;

    /*
     * The participants to invite.
     */
    private List<CommunicationIdentifierModel> participantsToAdd;

    /*
     * Gets or sets the timeout to wait for the invited participant to pickup.
     * The maximum value of this is 180 seconds
     */
    private Integer invitationTimeoutInSeconds;

    /*
     * The operation context.
     */
    private String operationContext;

    /**
     * Creates an instance of AddParticipantsRequestInternal class.
     */
    public AddParticipantsRequestInternal() {
    }

    /**
     * Get the sourceCallerId property: The source caller Id that's shown to the PSTN participant being invited.
     * Required only when inviting a PSTN participant.
     * 
     * @return the sourceCallerId value.
     */
    public PhoneNumberIdentifierModel getSourceCallerId() {
        return this.sourceCallerId;
    }

    /**
     * Set the sourceCallerId property: The source caller Id that's shown to the PSTN participant being invited.
     * Required only when inviting a PSTN participant.
     * 
     * @param sourceCallerId the sourceCallerId value to set.
     * @return the AddParticipantsRequestInternal object itself.
     */
    public AddParticipantsRequestInternal setSourceCallerId(PhoneNumberIdentifierModel sourceCallerId) {
        this.sourceCallerId = sourceCallerId;
        return this;
    }

    /**
     * Get the participantsToAdd property: The participants to invite.
     * 
     * @return the participantsToAdd value.
     */
    public List<CommunicationIdentifierModel> getParticipantsToAdd() {
        return this.participantsToAdd;
    }

    /**
     * Set the participantsToAdd property: The participants to invite.
     * 
     * @param participantsToAdd the participantsToAdd value to set.
     * @return the AddParticipantsRequestInternal object itself.
     */
    public AddParticipantsRequestInternal setParticipantsToAdd(List<CommunicationIdentifierModel> participantsToAdd) {
        this.participantsToAdd = participantsToAdd;
        return this;
    }

    /**
     * Get the invitationTimeoutInSeconds property: Gets or sets the timeout to wait for the invited participant to
     * pickup.
     * The maximum value of this is 180 seconds.
     * 
     * @return the invitationTimeoutInSeconds value.
     */
    public Integer getInvitationTimeoutInSeconds() {
        return this.invitationTimeoutInSeconds;
    }

    /**
     * Set the invitationTimeoutInSeconds property: Gets or sets the timeout to wait for the invited participant to
     * pickup.
     * The maximum value of this is 180 seconds.
     * 
     * @param invitationTimeoutInSeconds the invitationTimeoutInSeconds value to set.
     * @return the AddParticipantsRequestInternal object itself.
     */
    public AddParticipantsRequestInternal setInvitationTimeoutInSeconds(Integer invitationTimeoutInSeconds) {
        this.invitationTimeoutInSeconds = invitationTimeoutInSeconds;
        return this;
    }

    /**
     * Get the operationContext property: The operation context.
     * 
     * @return the operationContext value.
     */
    public String getOperationContext() {
        return this.operationContext;
    }

    /**
     * Set the operationContext property: The operation context.
     * 
     * @param operationContext the operationContext value to set.
     * @return the AddParticipantsRequestInternal object itself.
     */
    public AddParticipantsRequestInternal setOperationContext(String operationContext) {
        this.operationContext = operationContext;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("participantsToAdd", this.participantsToAdd,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("sourceCallerId", this.sourceCallerId);
        jsonWriter.writeNumberField("invitationTimeoutInSeconds", this.invitationTimeoutInSeconds);
        jsonWriter.writeStringField("operationContext", this.operationContext);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AddParticipantsRequestInternal from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AddParticipantsRequestInternal if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AddParticipantsRequestInternal.
     */
    public static AddParticipantsRequestInternal fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AddParticipantsRequestInternal deserializedAddParticipantsRequestInternal
                = new AddParticipantsRequestInternal();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("participantsToAdd".equals(fieldName)) {
                    List<CommunicationIdentifierModel> participantsToAdd
                        = reader.readArray(reader1 -> CommunicationIdentifierModel.fromJson(reader1));
                    deserializedAddParticipantsRequestInternal.participantsToAdd = participantsToAdd;
                } else if ("sourceCallerId".equals(fieldName)) {
                    deserializedAddParticipantsRequestInternal.sourceCallerId
                        = PhoneNumberIdentifierModel.fromJson(reader);
                } else if ("invitationTimeoutInSeconds".equals(fieldName)) {
                    deserializedAddParticipantsRequestInternal.invitationTimeoutInSeconds
                        = reader.getNullable(JsonReader::getInt);
                } else if ("operationContext".equals(fieldName)) {
                    deserializedAddParticipantsRequestInternal.operationContext = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAddParticipantsRequestInternal;
        });
    }
}
