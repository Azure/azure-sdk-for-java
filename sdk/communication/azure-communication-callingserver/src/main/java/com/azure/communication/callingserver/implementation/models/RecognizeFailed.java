// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.communication.callingserver.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;

import java.io.IOException;
import java.util.Objects;

/** The RecognizeFailed model. */
@Fluent
public final class RecognizeFailed implements JsonSerializable<RecognizeFailed> {
    /*
     * Operation context
     */
    private String operationContext;

    /*
     * Defines the code, sub-code and message for the operation
     */
    private ResultInformation resultInfo;

    /*
     * The type property.
     */
    private AcsEventTypeInternal type;

    /*
     * Call connection ID.
     */
    private String callConnectionId;

    /*
     * Server call ID.
     */
    private String serverCallId;

    /*
     * Correlation ID for event to call correlation. Also called ChainId for skype chain ID.
     */
    private String correlationId;

    /**
     * Get the operationContext property: Operation context.
     *
     * @return the operationContext value.
     */
    public String getOperationContext() {
        return this.operationContext;
    }

    /**
     * Set the operationContext property: Operation context.
     *
     * @param operationContext the operationContext value to set.
     * @return the RecognizeFailed object itself.
     */
    public RecognizeFailed setOperationContext(String operationContext) {
        this.operationContext = operationContext;
        return this;
    }

    /**
     * Get the resultInfo property: Defines the code, sub-code and message for the operation.
     *
     * @return the resultInfo value.
     */
    public ResultInformation getResultInfo() {
        return this.resultInfo;
    }

    /**
     * Set the resultInfo property: Defines the code, sub-code and message for the operation.
     *
     * @param resultInfo the resultInfo value to set.
     * @return the RecognizeFailed object itself.
     */
    public RecognizeFailed setResultInfo(ResultInformation resultInfo) {
        this.resultInfo = resultInfo;
        return this;
    }

    /**
     * Get the type property: The type property.
     *
     * @return the type value.
     */
    public AcsEventTypeInternal getType() {
        return this.type;
    }

    /**
     * Set the type property: The type property.
     *
     * @param type the type value to set.
     * @return the RecognizeFailed object itself.
     */
    public RecognizeFailed setType(AcsEventTypeInternal type) {
        this.type = type;
        return this;
    }

    /**
     * Get the callConnectionId property: Call connection ID.
     *
     * @return the callConnectionId value.
     */
    public String getCallConnectionId() {
        return this.callConnectionId;
    }

    /**
     * Set the callConnectionId property: Call connection ID.
     *
     * @param callConnectionId the callConnectionId value to set.
     * @return the RecognizeFailed object itself.
     */
    public RecognizeFailed setCallConnectionId(String callConnectionId) {
        this.callConnectionId = callConnectionId;
        return this;
    }

    /**
     * Get the serverCallId property: Server call ID.
     *
     * @return the serverCallId value.
     */
    public String getServerCallId() {
        return this.serverCallId;
    }

    /**
     * Set the serverCallId property: Server call ID.
     *
     * @param serverCallId the serverCallId value to set.
     * @return the RecognizeFailed object itself.
     */
    public RecognizeFailed setServerCallId(String serverCallId) {
        this.serverCallId = serverCallId;
        return this;
    }

    /**
     * Get the correlationId property: Correlation ID for event to call correlation. Also called ChainId for skype chain
     * ID.
     *
     * @return the correlationId value.
     */
    public String getCorrelationId() {
        return this.correlationId;
    }

    /**
     * Set the correlationId property: Correlation ID for event to call correlation. Also called ChainId for skype chain
     * ID.
     *
     * @param correlationId the correlationId value to set.
     * @return the RecognizeFailed object itself.
     */
    public RecognizeFailed setCorrelationId(String correlationId) {
        this.correlationId = correlationId;
        return this;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        return jsonWriter.writeStartObject()
            .writeStringField("operationContext", operationContext)
            .writeJsonField("resultInfo", resultInfo)
            .writeStringField("type", Objects.toString(type, null))
            .writeStringField("callConnectionId", callConnectionId)
            .writeStringField("serverCallId", serverCallId)
            .writeStringField("correlationId", correlationId)
            .writeEndObject();
    }

    /**
     * Reads an instance of {@link RecognizeFailed} from the {@link JsonReader}.
     *
     * @param jsonReader The {@link JsonReader} to read.
     * @return An instance of {@link RecognizeFailed}, or null if the {@link JsonReader} was pointing to
     * {@link JsonToken#NULL}.
     * @throws IOException If an error occurs while reading the {@link JsonReader}.
     */
    public static RecognizeFailed fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RecognizeFailed recognizeFailed = new RecognizeFailed();

            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("operationContext".equals(fieldName)) {
                    recognizeFailed.operationContext = reader.getString();
                } else if ("resultInfo".equals(fieldName)) {
                    recognizeFailed.resultInfo = ResultInformation.fromJson(reader);
                } else if ("type".equals(fieldName)) {
                    recognizeFailed.type = AcsEventTypeInternal.fromString(reader.getString());
                } else if ("callConnectionId".equals(fieldName)) {
                    recognizeFailed.callConnectionId = reader.getString();
                } else if ("serverCallId".equals(fieldName)) {
                    recognizeFailed.serverCallId = reader.getString();
                } else if ("correlationId".equals(fieldName)) {
                    recognizeFailed.correlationId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return recognizeFailed;
        });
    }
}
