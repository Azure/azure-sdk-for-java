// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.communication.callingserver.implementation;

import com.azure.communication.callingserver.implementation.models.AddParticipantResultInternal;
import com.azure.communication.callingserver.implementation.models.AddParticipantWithCallLocatorRequest;
import com.azure.communication.callingserver.implementation.models.AnswerCallRequest;
import com.azure.communication.callingserver.implementation.models.AnswerCallResultInternal;
import com.azure.communication.callingserver.implementation.models.CallParticipantInternal;
import com.azure.communication.callingserver.implementation.models.CallRecordingPropertiesInternal;
import com.azure.communication.callingserver.implementation.models.CancelMediaOperationWithCallLocatorRequest;
import com.azure.communication.callingserver.implementation.models.CancelParticipantMediaOperationWithCallLocatorRequest;
import com.azure.communication.callingserver.implementation.models.CommunicationErrorResponseException;
import com.azure.communication.callingserver.implementation.models.GetAllParticipantsWithCallLocatorRequest;
import com.azure.communication.callingserver.implementation.models.GetParticipantWithCallLocatorRequest;
import com.azure.communication.callingserver.implementation.models.HoldMeetingAudioWithCallLocatorRequest;
import com.azure.communication.callingserver.implementation.models.JoinCallRequest;
import com.azure.communication.callingserver.implementation.models.JoinCallResultInternal;
import com.azure.communication.callingserver.implementation.models.MuteParticipantWithCallLocatorRequest;
import com.azure.communication.callingserver.implementation.models.PlayAudioResultInternal;
import com.azure.communication.callingserver.implementation.models.PlayAudioToParticipantWithCallLocatorRequest;
import com.azure.communication.callingserver.implementation.models.PlayAudioWithCallLocatorRequest;
import com.azure.communication.callingserver.implementation.models.RedirectCallRequest;
import com.azure.communication.callingserver.implementation.models.RejectCallRequest;
import com.azure.communication.callingserver.implementation.models.RemoveParticipantWithCallLocatorRequest;
import com.azure.communication.callingserver.implementation.models.ResumeMeetingAudioWithCallLocatorRequest;
import com.azure.communication.callingserver.implementation.models.StartCallRecordingResultInternal;
import com.azure.communication.callingserver.implementation.models.StartCallRecordingWithCallLocatorRequest;
import com.azure.communication.callingserver.implementation.models.UnmuteParticipantWithCallLocatorRequest;
import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import java.util.List;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in ServerCalls. */
public final class ServerCallsImpl {
    /** The proxy service used to perform REST calls. */
    private final ServerCallsService service;

    /** The service client containing this operation class. */
    private final AzureCommunicationCallingServerServiceImpl client;

    /**
     * Initializes an instance of ServerCallsImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    ServerCallsImpl(AzureCommunicationCallingServerServiceImpl client) {
        this.service =
                RestProxy.create(ServerCallsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AzureCommunicationCallingServerServiceServerCalls to be used by the
     * proxy service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "AzureCommunicationCa")
    private interface ServerCallsService {
        @Post("/calling/participants:getAll")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<List<CallParticipantInternal>>> getParticipants(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json")
                        GetAllParticipantsWithCallLocatorRequest getAllParticipantsWithCallLocatorRequest,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/calling/participants")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<AddParticipantResultInternal>> addParticipant(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json")
                        AddParticipantWithCallLocatorRequest addParticipantWithCallLocatorRequest,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/calling/participants:remove")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<Void>> removeParticipant(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json")
                        RemoveParticipantWithCallLocatorRequest removeParticipantWithCallLocatorRequest,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/calling/participants:get")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<List<CallParticipantInternal>>> getParticipant(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json")
                        GetParticipantWithCallLocatorRequest getParticipantWithCallLocatorRequest,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/calling/participants:playAudio")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<PlayAudioResultInternal>> participantPlayAudio(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json")
                        PlayAudioToParticipantWithCallLocatorRequest playAudioToParticipantRequest,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/calling/participants:cancelMediaOperation")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<Void>> cancelParticipantMediaOperation(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json")
                        CancelParticipantMediaOperationWithCallLocatorRequest cancelParticipantMediaOperationRequest,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/calling/participants:mute")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<Void>> muteParticipant(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json")
                        MuteParticipantWithCallLocatorRequest muteParticipantWithCallLocatorRequest,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/calling/participants:unmute")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<Void>> unmuteParticipant(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json")
                        UnmuteParticipantWithCallLocatorRequest unmuteParticipantWithCallLocatorRequest,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/calling/participants:holdMeetingAudio")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<Void>> holdParticipantMeetingAudio(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json")
                        HoldMeetingAudioWithCallLocatorRequest holdMeetingAudioWithCallLocatorRequest,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/calling/participants:resumeMeetingAudio")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<Void>> resumeParticipantMeetingAudio(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json")
                        ResumeMeetingAudioWithCallLocatorRequest resumeMeetingAudioWithCallLocatorRequest,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/calling/recordings")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<StartCallRecordingResultInternal>> startRecording(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json")
                        StartCallRecordingWithCallLocatorRequest startCallRecordingWithCallLocatorRequest,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/calling/recordings/{recordingId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<CallRecordingPropertiesInternal>> getRecordingProperties(
                @HostParam("endpoint") String endpoint,
                @PathParam("recordingId") String recordingId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                Context context);

        @Delete("/calling/recordings/{recordingId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<Void>> stopRecording(
                @HostParam("endpoint") String endpoint,
                @PathParam("recordingId") String recordingId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/calling/recordings/{recordingId}/:pause")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<Void>> pauseRecording(
                @HostParam("endpoint") String endpoint,
                @PathParam("recordingId") String recordingId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/calling/recordings/{recordingId}/:resume")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<Void>> resumeRecording(
                @HostParam("endpoint") String endpoint,
                @PathParam("recordingId") String recordingId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/calling:join")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<JoinCallResultInternal>> joinCall(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") JoinCallRequest callRequest,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/calling:playAudio")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<PlayAudioResultInternal>> playAudio(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") PlayAudioWithCallLocatorRequest playAudioRequest,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/calling:cancelMediaOperation")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<Void>> cancelMediaOperation(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") CancelMediaOperationWithCallLocatorRequest cancelMediaOperationRequest,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/calling:answer")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<AnswerCallResultInternal>> answerCall(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") AnswerCallRequest answerCallRequest,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/calling:reject")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<Void>> rejectCall(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") RejectCallRequest rejectCallRequest,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/calling:redirect")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<Void>> redirectCall(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") RedirectCallRequest redirectCallRequest,
                @HeaderParam("Accept") String accept,
                Context context);
    }

    /**
     * Get participants from a server call.
     *
     * @param getAllParticipantsWithCallLocatorRequest The request payload for getting all the participants.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return participants from a server call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<List<CallParticipantInternal>>> getParticipantsWithResponseAsync(
            GetAllParticipantsWithCallLocatorRequest getAllParticipantsWithCallLocatorRequest) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.getParticipants(
                                this.client.getEndpoint(),
                                this.client.getApiVersion(),
                                getAllParticipantsWithCallLocatorRequest,
                                accept,
                                context));
    }

    /**
     * Get participants from a server call.
     *
     * @param getAllParticipantsWithCallLocatorRequest The request payload for getting all the participants.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return participants from a server call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<List<CallParticipantInternal>>> getParticipantsWithResponseAsync(
            GetAllParticipantsWithCallLocatorRequest getAllParticipantsWithCallLocatorRequest, Context context) {
        final String accept = "application/json";
        return service.getParticipants(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                getAllParticipantsWithCallLocatorRequest,
                accept,
                context);
    }

    /**
     * Get participants from a server call.
     *
     * @param getAllParticipantsWithCallLocatorRequest The request payload for getting all the participants.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return participants from a server call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<CallParticipantInternal>> getParticipantsAsync(
            GetAllParticipantsWithCallLocatorRequest getAllParticipantsWithCallLocatorRequest) {
        return getParticipantsWithResponseAsync(getAllParticipantsWithCallLocatorRequest)
                .flatMap(
                        (Response<List<CallParticipantInternal>> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Get participants from a server call.
     *
     * @param getAllParticipantsWithCallLocatorRequest The request payload for getting all the participants.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return participants from a server call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<CallParticipantInternal>> getParticipantsAsync(
            GetAllParticipantsWithCallLocatorRequest getAllParticipantsWithCallLocatorRequest, Context context) {
        return getParticipantsWithResponseAsync(getAllParticipantsWithCallLocatorRequest, context)
                .flatMap(
                        (Response<List<CallParticipantInternal>> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Get participants from a server call.
     *
     * @param getAllParticipantsWithCallLocatorRequest The request payload for getting all the participants.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return participants from a server call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<CallParticipantInternal> getParticipants(
            GetAllParticipantsWithCallLocatorRequest getAllParticipantsWithCallLocatorRequest) {
        return getParticipantsAsync(getAllParticipantsWithCallLocatorRequest).block();
    }

    /**
     * Get participants from a server call.
     *
     * @param getAllParticipantsWithCallLocatorRequest The request payload for getting all the participants.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return participants from a server call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<List<CallParticipantInternal>> getParticipantsWithResponse(
            GetAllParticipantsWithCallLocatorRequest getAllParticipantsWithCallLocatorRequest, Context context) {
        return getParticipantsWithResponseAsync(getAllParticipantsWithCallLocatorRequest, context).block();
    }

    /**
     * Add a participant to the call.
     *
     * @param addParticipantWithCallLocatorRequest The add participant request using call locator.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the add participant result.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<AddParticipantResultInternal>> addParticipantWithResponseAsync(
            AddParticipantWithCallLocatorRequest addParticipantWithCallLocatorRequest) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.addParticipant(
                                this.client.getEndpoint(),
                                this.client.getApiVersion(),
                                addParticipantWithCallLocatorRequest,
                                accept,
                                context));
    }

    /**
     * Add a participant to the call.
     *
     * @param addParticipantWithCallLocatorRequest The add participant request using call locator.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the add participant result.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<AddParticipantResultInternal>> addParticipantWithResponseAsync(
            AddParticipantWithCallLocatorRequest addParticipantWithCallLocatorRequest, Context context) {
        final String accept = "application/json";
        return service.addParticipant(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                addParticipantWithCallLocatorRequest,
                accept,
                context);
    }

    /**
     * Add a participant to the call.
     *
     * @param addParticipantWithCallLocatorRequest The add participant request using call locator.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the add participant result.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AddParticipantResultInternal> addParticipantAsync(
            AddParticipantWithCallLocatorRequest addParticipantWithCallLocatorRequest) {
        return addParticipantWithResponseAsync(addParticipantWithCallLocatorRequest)
                .flatMap(
                        (Response<AddParticipantResultInternal> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Add a participant to the call.
     *
     * @param addParticipantWithCallLocatorRequest The add participant request using call locator.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the add participant result.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AddParticipantResultInternal> addParticipantAsync(
            AddParticipantWithCallLocatorRequest addParticipantWithCallLocatorRequest, Context context) {
        return addParticipantWithResponseAsync(addParticipantWithCallLocatorRequest, context)
                .flatMap(
                        (Response<AddParticipantResultInternal> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Add a participant to the call.
     *
     * @param addParticipantWithCallLocatorRequest The add participant request using call locator.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the add participant result.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AddParticipantResultInternal addParticipant(
            AddParticipantWithCallLocatorRequest addParticipantWithCallLocatorRequest) {
        return addParticipantAsync(addParticipantWithCallLocatorRequest).block();
    }

    /**
     * Add a participant to the call.
     *
     * @param addParticipantWithCallLocatorRequest The add participant request using call locator.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the add participant result.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<AddParticipantResultInternal> addParticipantWithResponse(
            AddParticipantWithCallLocatorRequest addParticipantWithCallLocatorRequest, Context context) {
        return addParticipantWithResponseAsync(addParticipantWithCallLocatorRequest, context).block();
    }

    /**
     * Remove participant from the call using identifier.
     *
     * @param removeParticipantWithCallLocatorRequest The identifier of the participant to be removed from the call.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> removeParticipantWithResponseAsync(
            RemoveParticipantWithCallLocatorRequest removeParticipantWithCallLocatorRequest) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.removeParticipant(
                                this.client.getEndpoint(),
                                this.client.getApiVersion(),
                                removeParticipantWithCallLocatorRequest,
                                accept,
                                context));
    }

    /**
     * Remove participant from the call using identifier.
     *
     * @param removeParticipantWithCallLocatorRequest The identifier of the participant to be removed from the call.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> removeParticipantWithResponseAsync(
            RemoveParticipantWithCallLocatorRequest removeParticipantWithCallLocatorRequest, Context context) {
        final String accept = "application/json";
        return service.removeParticipant(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                removeParticipantWithCallLocatorRequest,
                accept,
                context);
    }

    /**
     * Remove participant from the call using identifier.
     *
     * @param removeParticipantWithCallLocatorRequest The identifier of the participant to be removed from the call.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> removeParticipantAsync(
            RemoveParticipantWithCallLocatorRequest removeParticipantWithCallLocatorRequest) {
        return removeParticipantWithResponseAsync(removeParticipantWithCallLocatorRequest)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Remove participant from the call using identifier.
     *
     * @param removeParticipantWithCallLocatorRequest The identifier of the participant to be removed from the call.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> removeParticipantAsync(
            RemoveParticipantWithCallLocatorRequest removeParticipantWithCallLocatorRequest, Context context) {
        return removeParticipantWithResponseAsync(removeParticipantWithCallLocatorRequest, context)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Remove participant from the call using identifier.
     *
     * @param removeParticipantWithCallLocatorRequest The identifier of the participant to be removed from the call.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void removeParticipant(RemoveParticipantWithCallLocatorRequest removeParticipantWithCallLocatorRequest) {
        removeParticipantAsync(removeParticipantWithCallLocatorRequest).block();
    }

    /**
     * Remove participant from the call using identifier.
     *
     * @param removeParticipantWithCallLocatorRequest The identifier of the participant to be removed from the call.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> removeParticipantWithResponse(
            RemoveParticipantWithCallLocatorRequest removeParticipantWithCallLocatorRequest, Context context) {
        return removeParticipantWithResponseAsync(removeParticipantWithCallLocatorRequest, context).block();
    }

    /**
     * Get participant from the call using identifier.
     *
     * @param getParticipantWithCallLocatorRequest The get participant request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return participant from the call using identifier.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<List<CallParticipantInternal>>> getParticipantWithResponseAsync(
            GetParticipantWithCallLocatorRequest getParticipantWithCallLocatorRequest) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.getParticipant(
                                this.client.getEndpoint(),
                                this.client.getApiVersion(),
                                getParticipantWithCallLocatorRequest,
                                accept,
                                context));
    }

    /**
     * Get participant from the call using identifier.
     *
     * @param getParticipantWithCallLocatorRequest The get participant request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return participant from the call using identifier.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<List<CallParticipantInternal>>> getParticipantWithResponseAsync(
            GetParticipantWithCallLocatorRequest getParticipantWithCallLocatorRequest, Context context) {
        final String accept = "application/json";
        return service.getParticipant(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                getParticipantWithCallLocatorRequest,
                accept,
                context);
    }

    /**
     * Get participant from the call using identifier.
     *
     * @param getParticipantWithCallLocatorRequest The get participant request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return participant from the call using identifier.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<CallParticipantInternal>> getParticipantAsync(
            GetParticipantWithCallLocatorRequest getParticipantWithCallLocatorRequest) {
        return getParticipantWithResponseAsync(getParticipantWithCallLocatorRequest)
                .flatMap(
                        (Response<List<CallParticipantInternal>> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Get participant from the call using identifier.
     *
     * @param getParticipantWithCallLocatorRequest The get participant request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return participant from the call using identifier.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<CallParticipantInternal>> getParticipantAsync(
            GetParticipantWithCallLocatorRequest getParticipantWithCallLocatorRequest, Context context) {
        return getParticipantWithResponseAsync(getParticipantWithCallLocatorRequest, context)
                .flatMap(
                        (Response<List<CallParticipantInternal>> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Get participant from the call using identifier.
     *
     * @param getParticipantWithCallLocatorRequest The get participant request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return participant from the call using identifier.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<CallParticipantInternal> getParticipant(
            GetParticipantWithCallLocatorRequest getParticipantWithCallLocatorRequest) {
        return getParticipantAsync(getParticipantWithCallLocatorRequest).block();
    }

    /**
     * Get participant from the call using identifier.
     *
     * @param getParticipantWithCallLocatorRequest The get participant request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return participant from the call using identifier.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<List<CallParticipantInternal>> getParticipantWithResponse(
            GetParticipantWithCallLocatorRequest getParticipantWithCallLocatorRequest, Context context) {
        return getParticipantWithResponseAsync(getParticipantWithCallLocatorRequest, context).block();
    }

    /**
     * Play audio to a participant.
     *
     * @param playAudioToParticipantRequest The play audio to participant request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload for play audio operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<PlayAudioResultInternal>> participantPlayAudioWithResponseAsync(
            PlayAudioToParticipantWithCallLocatorRequest playAudioToParticipantRequest) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.participantPlayAudio(
                                this.client.getEndpoint(),
                                this.client.getApiVersion(),
                                playAudioToParticipantRequest,
                                accept,
                                context));
    }

    /**
     * Play audio to a participant.
     *
     * @param playAudioToParticipantRequest The play audio to participant request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload for play audio operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<PlayAudioResultInternal>> participantPlayAudioWithResponseAsync(
            PlayAudioToParticipantWithCallLocatorRequest playAudioToParticipantRequest, Context context) {
        final String accept = "application/json";
        return service.participantPlayAudio(
                this.client.getEndpoint(), this.client.getApiVersion(), playAudioToParticipantRequest, accept, context);
    }

    /**
     * Play audio to a participant.
     *
     * @param playAudioToParticipantRequest The play audio to participant request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload for play audio operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PlayAudioResultInternal> participantPlayAudioAsync(
            PlayAudioToParticipantWithCallLocatorRequest playAudioToParticipantRequest) {
        return participantPlayAudioWithResponseAsync(playAudioToParticipantRequest)
                .flatMap(
                        (Response<PlayAudioResultInternal> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Play audio to a participant.
     *
     * @param playAudioToParticipantRequest The play audio to participant request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload for play audio operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PlayAudioResultInternal> participantPlayAudioAsync(
            PlayAudioToParticipantWithCallLocatorRequest playAudioToParticipantRequest, Context context) {
        return participantPlayAudioWithResponseAsync(playAudioToParticipantRequest, context)
                .flatMap(
                        (Response<PlayAudioResultInternal> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Play audio to a participant.
     *
     * @param playAudioToParticipantRequest The play audio to participant request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload for play audio operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PlayAudioResultInternal participantPlayAudio(
            PlayAudioToParticipantWithCallLocatorRequest playAudioToParticipantRequest) {
        return participantPlayAudioAsync(playAudioToParticipantRequest).block();
    }

    /**
     * Play audio to a participant.
     *
     * @param playAudioToParticipantRequest The play audio to participant request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload for play audio operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<PlayAudioResultInternal> participantPlayAudioWithResponse(
            PlayAudioToParticipantWithCallLocatorRequest playAudioToParticipantRequest, Context context) {
        return participantPlayAudioWithResponseAsync(playAudioToParticipantRequest, context).block();
    }

    /**
     * cancel media operation for a participant.
     *
     * @param cancelParticipantMediaOperationRequest The cancel participant media operation request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> cancelParticipantMediaOperationWithResponseAsync(
            CancelParticipantMediaOperationWithCallLocatorRequest cancelParticipantMediaOperationRequest) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.cancelParticipantMediaOperation(
                                this.client.getEndpoint(),
                                this.client.getApiVersion(),
                                cancelParticipantMediaOperationRequest,
                                accept,
                                context));
    }

    /**
     * cancel media operation for a participant.
     *
     * @param cancelParticipantMediaOperationRequest The cancel participant media operation request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> cancelParticipantMediaOperationWithResponseAsync(
            CancelParticipantMediaOperationWithCallLocatorRequest cancelParticipantMediaOperationRequest,
            Context context) {
        final String accept = "application/json";
        return service.cancelParticipantMediaOperation(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                cancelParticipantMediaOperationRequest,
                accept,
                context);
    }

    /**
     * cancel media operation for a participant.
     *
     * @param cancelParticipantMediaOperationRequest The cancel participant media operation request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> cancelParticipantMediaOperationAsync(
            CancelParticipantMediaOperationWithCallLocatorRequest cancelParticipantMediaOperationRequest) {
        return cancelParticipantMediaOperationWithResponseAsync(cancelParticipantMediaOperationRequest)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * cancel media operation for a participant.
     *
     * @param cancelParticipantMediaOperationRequest The cancel participant media operation request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> cancelParticipantMediaOperationAsync(
            CancelParticipantMediaOperationWithCallLocatorRequest cancelParticipantMediaOperationRequest,
            Context context) {
        return cancelParticipantMediaOperationWithResponseAsync(cancelParticipantMediaOperationRequest, context)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * cancel media operation for a participant.
     *
     * @param cancelParticipantMediaOperationRequest The cancel participant media operation request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void cancelParticipantMediaOperation(
            CancelParticipantMediaOperationWithCallLocatorRequest cancelParticipantMediaOperationRequest) {
        cancelParticipantMediaOperationAsync(cancelParticipantMediaOperationRequest).block();
    }

    /**
     * cancel media operation for a participant.
     *
     * @param cancelParticipantMediaOperationRequest The cancel participant media operation request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> cancelParticipantMediaOperationWithResponse(
            CancelParticipantMediaOperationWithCallLocatorRequest cancelParticipantMediaOperationRequest,
            Context context) {
        return cancelParticipantMediaOperationWithResponseAsync(cancelParticipantMediaOperationRequest, context)
                .block();
    }

    /**
     * Mute participant in the call.
     *
     * @param muteParticipantWithCallLocatorRequest The identifier of the participant to mute in the call.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> muteParticipantWithResponseAsync(
            MuteParticipantWithCallLocatorRequest muteParticipantWithCallLocatorRequest) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.muteParticipant(
                                this.client.getEndpoint(),
                                this.client.getApiVersion(),
                                muteParticipantWithCallLocatorRequest,
                                accept,
                                context));
    }

    /**
     * Mute participant in the call.
     *
     * @param muteParticipantWithCallLocatorRequest The identifier of the participant to mute in the call.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> muteParticipantWithResponseAsync(
            MuteParticipantWithCallLocatorRequest muteParticipantWithCallLocatorRequest, Context context) {
        final String accept = "application/json";
        return service.muteParticipant(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                muteParticipantWithCallLocatorRequest,
                accept,
                context);
    }

    /**
     * Mute participant in the call.
     *
     * @param muteParticipantWithCallLocatorRequest The identifier of the participant to mute in the call.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> muteParticipantAsync(
            MuteParticipantWithCallLocatorRequest muteParticipantWithCallLocatorRequest) {
        return muteParticipantWithResponseAsync(muteParticipantWithCallLocatorRequest)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Mute participant in the call.
     *
     * @param muteParticipantWithCallLocatorRequest The identifier of the participant to mute in the call.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> muteParticipantAsync(
            MuteParticipantWithCallLocatorRequest muteParticipantWithCallLocatorRequest, Context context) {
        return muteParticipantWithResponseAsync(muteParticipantWithCallLocatorRequest, context)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Mute participant in the call.
     *
     * @param muteParticipantWithCallLocatorRequest The identifier of the participant to mute in the call.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void muteParticipant(MuteParticipantWithCallLocatorRequest muteParticipantWithCallLocatorRequest) {
        muteParticipantAsync(muteParticipantWithCallLocatorRequest).block();
    }

    /**
     * Mute participant in the call.
     *
     * @param muteParticipantWithCallLocatorRequest The identifier of the participant to mute in the call.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> muteParticipantWithResponse(
            MuteParticipantWithCallLocatorRequest muteParticipantWithCallLocatorRequest, Context context) {
        return muteParticipantWithResponseAsync(muteParticipantWithCallLocatorRequest, context).block();
    }

    /**
     * Unmute participant in the call.
     *
     * @param unmuteParticipantWithCallLocatorRequest The identifier of the participant to unmute in the call.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> unmuteParticipantWithResponseAsync(
            UnmuteParticipantWithCallLocatorRequest unmuteParticipantWithCallLocatorRequest) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.unmuteParticipant(
                                this.client.getEndpoint(),
                                this.client.getApiVersion(),
                                unmuteParticipantWithCallLocatorRequest,
                                accept,
                                context));
    }

    /**
     * Unmute participant in the call.
     *
     * @param unmuteParticipantWithCallLocatorRequest The identifier of the participant to unmute in the call.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> unmuteParticipantWithResponseAsync(
            UnmuteParticipantWithCallLocatorRequest unmuteParticipantWithCallLocatorRequest, Context context) {
        final String accept = "application/json";
        return service.unmuteParticipant(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                unmuteParticipantWithCallLocatorRequest,
                accept,
                context);
    }

    /**
     * Unmute participant in the call.
     *
     * @param unmuteParticipantWithCallLocatorRequest The identifier of the participant to unmute in the call.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> unmuteParticipantAsync(
            UnmuteParticipantWithCallLocatorRequest unmuteParticipantWithCallLocatorRequest) {
        return unmuteParticipantWithResponseAsync(unmuteParticipantWithCallLocatorRequest)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Unmute participant in the call.
     *
     * @param unmuteParticipantWithCallLocatorRequest The identifier of the participant to unmute in the call.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> unmuteParticipantAsync(
            UnmuteParticipantWithCallLocatorRequest unmuteParticipantWithCallLocatorRequest, Context context) {
        return unmuteParticipantWithResponseAsync(unmuteParticipantWithCallLocatorRequest, context)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Unmute participant in the call.
     *
     * @param unmuteParticipantWithCallLocatorRequest The identifier of the participant to unmute in the call.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void unmuteParticipant(UnmuteParticipantWithCallLocatorRequest unmuteParticipantWithCallLocatorRequest) {
        unmuteParticipantAsync(unmuteParticipantWithCallLocatorRequest).block();
    }

    /**
     * Unmute participant in the call.
     *
     * @param unmuteParticipantWithCallLocatorRequest The identifier of the participant to unmute in the call.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> unmuteParticipantWithResponse(
            UnmuteParticipantWithCallLocatorRequest unmuteParticipantWithCallLocatorRequest, Context context) {
        return unmuteParticipantWithResponseAsync(unmuteParticipantWithCallLocatorRequest, context).block();
    }

    /**
     * Hold meeting audio of a participant in the call.
     *
     * @param holdMeetingAudioWithCallLocatorRequest The request payload for holding meeting audio for a participant.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> holdParticipantMeetingAudioWithResponseAsync(
            HoldMeetingAudioWithCallLocatorRequest holdMeetingAudioWithCallLocatorRequest) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.holdParticipantMeetingAudio(
                                this.client.getEndpoint(),
                                this.client.getApiVersion(),
                                holdMeetingAudioWithCallLocatorRequest,
                                accept,
                                context));
    }

    /**
     * Hold meeting audio of a participant in the call.
     *
     * @param holdMeetingAudioWithCallLocatorRequest The request payload for holding meeting audio for a participant.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> holdParticipantMeetingAudioWithResponseAsync(
            HoldMeetingAudioWithCallLocatorRequest holdMeetingAudioWithCallLocatorRequest, Context context) {
        final String accept = "application/json";
        return service.holdParticipantMeetingAudio(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                holdMeetingAudioWithCallLocatorRequest,
                accept,
                context);
    }

    /**
     * Hold meeting audio of a participant in the call.
     *
     * @param holdMeetingAudioWithCallLocatorRequest The request payload for holding meeting audio for a participant.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> holdParticipantMeetingAudioAsync(
            HoldMeetingAudioWithCallLocatorRequest holdMeetingAudioWithCallLocatorRequest) {
        return holdParticipantMeetingAudioWithResponseAsync(holdMeetingAudioWithCallLocatorRequest)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Hold meeting audio of a participant in the call.
     *
     * @param holdMeetingAudioWithCallLocatorRequest The request payload for holding meeting audio for a participant.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> holdParticipantMeetingAudioAsync(
            HoldMeetingAudioWithCallLocatorRequest holdMeetingAudioWithCallLocatorRequest, Context context) {
        return holdParticipantMeetingAudioWithResponseAsync(holdMeetingAudioWithCallLocatorRequest, context)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Hold meeting audio of a participant in the call.
     *
     * @param holdMeetingAudioWithCallLocatorRequest The request payload for holding meeting audio for a participant.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void holdParticipantMeetingAudio(
            HoldMeetingAudioWithCallLocatorRequest holdMeetingAudioWithCallLocatorRequest) {
        holdParticipantMeetingAudioAsync(holdMeetingAudioWithCallLocatorRequest).block();
    }

    /**
     * Hold meeting audio of a participant in the call.
     *
     * @param holdMeetingAudioWithCallLocatorRequest The request payload for holding meeting audio for a participant.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> holdParticipantMeetingAudioWithResponse(
            HoldMeetingAudioWithCallLocatorRequest holdMeetingAudioWithCallLocatorRequest, Context context) {
        return holdParticipantMeetingAudioWithResponseAsync(holdMeetingAudioWithCallLocatorRequest, context).block();
    }

    /**
     * Resume meeting audio of a participant in the call.
     *
     * @param resumeMeetingAudioWithCallLocatorRequest The request payload for resuming meeting audio for a participant.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> resumeParticipantMeetingAudioWithResponseAsync(
            ResumeMeetingAudioWithCallLocatorRequest resumeMeetingAudioWithCallLocatorRequest) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.resumeParticipantMeetingAudio(
                                this.client.getEndpoint(),
                                this.client.getApiVersion(),
                                resumeMeetingAudioWithCallLocatorRequest,
                                accept,
                                context));
    }

    /**
     * Resume meeting audio of a participant in the call.
     *
     * @param resumeMeetingAudioWithCallLocatorRequest The request payload for resuming meeting audio for a participant.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> resumeParticipantMeetingAudioWithResponseAsync(
            ResumeMeetingAudioWithCallLocatorRequest resumeMeetingAudioWithCallLocatorRequest, Context context) {
        final String accept = "application/json";
        return service.resumeParticipantMeetingAudio(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                resumeMeetingAudioWithCallLocatorRequest,
                accept,
                context);
    }

    /**
     * Resume meeting audio of a participant in the call.
     *
     * @param resumeMeetingAudioWithCallLocatorRequest The request payload for resuming meeting audio for a participant.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> resumeParticipantMeetingAudioAsync(
            ResumeMeetingAudioWithCallLocatorRequest resumeMeetingAudioWithCallLocatorRequest) {
        return resumeParticipantMeetingAudioWithResponseAsync(resumeMeetingAudioWithCallLocatorRequest)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Resume meeting audio of a participant in the call.
     *
     * @param resumeMeetingAudioWithCallLocatorRequest The request payload for resuming meeting audio for a participant.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> resumeParticipantMeetingAudioAsync(
            ResumeMeetingAudioWithCallLocatorRequest resumeMeetingAudioWithCallLocatorRequest, Context context) {
        return resumeParticipantMeetingAudioWithResponseAsync(resumeMeetingAudioWithCallLocatorRequest, context)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Resume meeting audio of a participant in the call.
     *
     * @param resumeMeetingAudioWithCallLocatorRequest The request payload for resuming meeting audio for a participant.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void resumeParticipantMeetingAudio(
            ResumeMeetingAudioWithCallLocatorRequest resumeMeetingAudioWithCallLocatorRequest) {
        resumeParticipantMeetingAudioAsync(resumeMeetingAudioWithCallLocatorRequest).block();
    }

    /**
     * Resume meeting audio of a participant in the call.
     *
     * @param resumeMeetingAudioWithCallLocatorRequest The request payload for resuming meeting audio for a participant.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> resumeParticipantMeetingAudioWithResponse(
            ResumeMeetingAudioWithCallLocatorRequest resumeMeetingAudioWithCallLocatorRequest, Context context) {
        return resumeParticipantMeetingAudioWithResponseAsync(resumeMeetingAudioWithCallLocatorRequest, context)
                .block();
    }

    /**
     * Start recording the call.
     *
     * @param startCallRecordingWithCallLocatorRequest The request body of start call recording request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload of start call recording operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<StartCallRecordingResultInternal>> startRecordingWithResponseAsync(
            StartCallRecordingWithCallLocatorRequest startCallRecordingWithCallLocatorRequest) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.startRecording(
                                this.client.getEndpoint(),
                                this.client.getApiVersion(),
                                startCallRecordingWithCallLocatorRequest,
                                accept,
                                context));
    }

    /**
     * Start recording the call.
     *
     * @param startCallRecordingWithCallLocatorRequest The request body of start call recording request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload of start call recording operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<StartCallRecordingResultInternal>> startRecordingWithResponseAsync(
            StartCallRecordingWithCallLocatorRequest startCallRecordingWithCallLocatorRequest, Context context) {
        final String accept = "application/json";
        return service.startRecording(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                startCallRecordingWithCallLocatorRequest,
                accept,
                context);
    }

    /**
     * Start recording the call.
     *
     * @param startCallRecordingWithCallLocatorRequest The request body of start call recording request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload of start call recording operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<StartCallRecordingResultInternal> startRecordingAsync(
            StartCallRecordingWithCallLocatorRequest startCallRecordingWithCallLocatorRequest) {
        return startRecordingWithResponseAsync(startCallRecordingWithCallLocatorRequest)
                .flatMap(
                        (Response<StartCallRecordingResultInternal> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Start recording the call.
     *
     * @param startCallRecordingWithCallLocatorRequest The request body of start call recording request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload of start call recording operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<StartCallRecordingResultInternal> startRecordingAsync(
            StartCallRecordingWithCallLocatorRequest startCallRecordingWithCallLocatorRequest, Context context) {
        return startRecordingWithResponseAsync(startCallRecordingWithCallLocatorRequest, context)
                .flatMap(
                        (Response<StartCallRecordingResultInternal> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Start recording the call.
     *
     * @param startCallRecordingWithCallLocatorRequest The request body of start call recording request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload of start call recording operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public StartCallRecordingResultInternal startRecording(
            StartCallRecordingWithCallLocatorRequest startCallRecordingWithCallLocatorRequest) {
        return startRecordingAsync(startCallRecordingWithCallLocatorRequest).block();
    }

    /**
     * Start recording the call.
     *
     * @param startCallRecordingWithCallLocatorRequest The request body of start call recording request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload of start call recording operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<StartCallRecordingResultInternal> startRecordingWithResponse(
            StartCallRecordingWithCallLocatorRequest startCallRecordingWithCallLocatorRequest, Context context) {
        return startRecordingWithResponseAsync(startCallRecordingWithCallLocatorRequest, context).block();
    }

    /**
     * Get call recording properties.
     *
     * @param recordingId The recording id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return call recording properties.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<CallRecordingPropertiesInternal>> getRecordingPropertiesWithResponseAsync(String recordingId) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.getRecordingProperties(
                                this.client.getEndpoint(), recordingId, this.client.getApiVersion(), accept, context));
    }

    /**
     * Get call recording properties.
     *
     * @param recordingId The recording id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return call recording properties.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<CallRecordingPropertiesInternal>> getRecordingPropertiesWithResponseAsync(
            String recordingId, Context context) {
        final String accept = "application/json";
        return service.getRecordingProperties(
                this.client.getEndpoint(), recordingId, this.client.getApiVersion(), accept, context);
    }

    /**
     * Get call recording properties.
     *
     * @param recordingId The recording id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return call recording properties.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CallRecordingPropertiesInternal> getRecordingPropertiesAsync(String recordingId) {
        return getRecordingPropertiesWithResponseAsync(recordingId)
                .flatMap(
                        (Response<CallRecordingPropertiesInternal> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Get call recording properties.
     *
     * @param recordingId The recording id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return call recording properties.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CallRecordingPropertiesInternal> getRecordingPropertiesAsync(String recordingId, Context context) {
        return getRecordingPropertiesWithResponseAsync(recordingId, context)
                .flatMap(
                        (Response<CallRecordingPropertiesInternal> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Get call recording properties.
     *
     * @param recordingId The recording id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return call recording properties.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CallRecordingPropertiesInternal getRecordingProperties(String recordingId) {
        return getRecordingPropertiesAsync(recordingId).block();
    }

    /**
     * Get call recording properties.
     *
     * @param recordingId The recording id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return call recording properties.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<CallRecordingPropertiesInternal> getRecordingPropertiesWithResponse(
            String recordingId, Context context) {
        return getRecordingPropertiesWithResponseAsync(recordingId, context).block();
    }

    /**
     * Stop recording the call.
     *
     * @param recordingId The recording id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> stopRecordingWithResponseAsync(String recordingId) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.stopRecording(
                                this.client.getEndpoint(), recordingId, this.client.getApiVersion(), accept, context));
    }

    /**
     * Stop recording the call.
     *
     * @param recordingId The recording id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> stopRecordingWithResponseAsync(String recordingId, Context context) {
        final String accept = "application/json";
        return service.stopRecording(
                this.client.getEndpoint(), recordingId, this.client.getApiVersion(), accept, context);
    }

    /**
     * Stop recording the call.
     *
     * @param recordingId The recording id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> stopRecordingAsync(String recordingId) {
        return stopRecordingWithResponseAsync(recordingId).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Stop recording the call.
     *
     * @param recordingId The recording id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> stopRecordingAsync(String recordingId, Context context) {
        return stopRecordingWithResponseAsync(recordingId, context).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Stop recording the call.
     *
     * @param recordingId The recording id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void stopRecording(String recordingId) {
        stopRecordingAsync(recordingId).block();
    }

    /**
     * Stop recording the call.
     *
     * @param recordingId The recording id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> stopRecordingWithResponse(String recordingId, Context context) {
        return stopRecordingWithResponseAsync(recordingId, context).block();
    }

    /**
     * Pause recording the call.
     *
     * @param recordingId The recording id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> pauseRecordingWithResponseAsync(String recordingId) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.pauseRecording(
                                this.client.getEndpoint(), recordingId, this.client.getApiVersion(), accept, context));
    }

    /**
     * Pause recording the call.
     *
     * @param recordingId The recording id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> pauseRecordingWithResponseAsync(String recordingId, Context context) {
        final String accept = "application/json";
        return service.pauseRecording(
                this.client.getEndpoint(), recordingId, this.client.getApiVersion(), accept, context);
    }

    /**
     * Pause recording the call.
     *
     * @param recordingId The recording id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> pauseRecordingAsync(String recordingId) {
        return pauseRecordingWithResponseAsync(recordingId).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Pause recording the call.
     *
     * @param recordingId The recording id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> pauseRecordingAsync(String recordingId, Context context) {
        return pauseRecordingWithResponseAsync(recordingId, context).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Pause recording the call.
     *
     * @param recordingId The recording id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void pauseRecording(String recordingId) {
        pauseRecordingAsync(recordingId).block();
    }

    /**
     * Pause recording the call.
     *
     * @param recordingId The recording id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> pauseRecordingWithResponse(String recordingId, Context context) {
        return pauseRecordingWithResponseAsync(recordingId, context).block();
    }

    /**
     * Resume recording the call.
     *
     * @param recordingId The recording id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> resumeRecordingWithResponseAsync(String recordingId) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.resumeRecording(
                                this.client.getEndpoint(), recordingId, this.client.getApiVersion(), accept, context));
    }

    /**
     * Resume recording the call.
     *
     * @param recordingId The recording id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> resumeRecordingWithResponseAsync(String recordingId, Context context) {
        final String accept = "application/json";
        return service.resumeRecording(
                this.client.getEndpoint(), recordingId, this.client.getApiVersion(), accept, context);
    }

    /**
     * Resume recording the call.
     *
     * @param recordingId The recording id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> resumeRecordingAsync(String recordingId) {
        return resumeRecordingWithResponseAsync(recordingId).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Resume recording the call.
     *
     * @param recordingId The recording id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> resumeRecordingAsync(String recordingId, Context context) {
        return resumeRecordingWithResponseAsync(recordingId, context).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Resume recording the call.
     *
     * @param recordingId The recording id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void resumeRecording(String recordingId) {
        resumeRecordingAsync(recordingId).block();
    }

    /**
     * Resume recording the call.
     *
     * @param recordingId The recording id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> resumeRecordingWithResponse(String recordingId, Context context) {
        return resumeRecordingWithResponseAsync(recordingId, context).block();
    }

    /**
     * Join a call.
     *
     * @param callRequest The join call request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload of the join call operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<JoinCallResultInternal>> joinCallWithResponseAsync(JoinCallRequest callRequest) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.joinCall(
                                this.client.getEndpoint(), this.client.getApiVersion(), callRequest, accept, context));
    }

    /**
     * Join a call.
     *
     * @param callRequest The join call request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload of the join call operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<JoinCallResultInternal>> joinCallWithResponseAsync(
            JoinCallRequest callRequest, Context context) {
        final String accept = "application/json";
        return service.joinCall(this.client.getEndpoint(), this.client.getApiVersion(), callRequest, accept, context);
    }

    /**
     * Join a call.
     *
     * @param callRequest The join call request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload of the join call operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<JoinCallResultInternal> joinCallAsync(JoinCallRequest callRequest) {
        return joinCallWithResponseAsync(callRequest)
                .flatMap(
                        (Response<JoinCallResultInternal> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Join a call.
     *
     * @param callRequest The join call request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload of the join call operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<JoinCallResultInternal> joinCallAsync(JoinCallRequest callRequest, Context context) {
        return joinCallWithResponseAsync(callRequest, context)
                .flatMap(
                        (Response<JoinCallResultInternal> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Join a call.
     *
     * @param callRequest The join call request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload of the join call operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public JoinCallResultInternal joinCall(JoinCallRequest callRequest) {
        return joinCallAsync(callRequest).block();
    }

    /**
     * Join a call.
     *
     * @param callRequest The join call request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload of the join call operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<JoinCallResultInternal> joinCallWithResponse(JoinCallRequest callRequest, Context context) {
        return joinCallWithResponseAsync(callRequest, context).block();
    }

    /**
     * Play audio in the call.
     *
     * @param playAudioRequest Play audio request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload for play audio operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<PlayAudioResultInternal>> playAudioWithResponseAsync(
            PlayAudioWithCallLocatorRequest playAudioRequest) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.playAudio(
                                this.client.getEndpoint(),
                                this.client.getApiVersion(),
                                playAudioRequest,
                                accept,
                                context));
    }

    /**
     * Play audio in the call.
     *
     * @param playAudioRequest Play audio request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload for play audio operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<PlayAudioResultInternal>> playAudioWithResponseAsync(
            PlayAudioWithCallLocatorRequest playAudioRequest, Context context) {
        final String accept = "application/json";
        return service.playAudio(
                this.client.getEndpoint(), this.client.getApiVersion(), playAudioRequest, accept, context);
    }

    /**
     * Play audio in the call.
     *
     * @param playAudioRequest Play audio request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload for play audio operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PlayAudioResultInternal> playAudioAsync(PlayAudioWithCallLocatorRequest playAudioRequest) {
        return playAudioWithResponseAsync(playAudioRequest)
                .flatMap(
                        (Response<PlayAudioResultInternal> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Play audio in the call.
     *
     * @param playAudioRequest Play audio request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload for play audio operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PlayAudioResultInternal> playAudioAsync(
            PlayAudioWithCallLocatorRequest playAudioRequest, Context context) {
        return playAudioWithResponseAsync(playAudioRequest, context)
                .flatMap(
                        (Response<PlayAudioResultInternal> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Play audio in the call.
     *
     * @param playAudioRequest Play audio request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload for play audio operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PlayAudioResultInternal playAudio(PlayAudioWithCallLocatorRequest playAudioRequest) {
        return playAudioAsync(playAudioRequest).block();
    }

    /**
     * Play audio in the call.
     *
     * @param playAudioRequest Play audio request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload for play audio operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<PlayAudioResultInternal> playAudioWithResponse(
            PlayAudioWithCallLocatorRequest playAudioRequest, Context context) {
        return playAudioWithResponseAsync(playAudioRequest, context).block();
    }

    /**
     * cancel media operation.
     *
     * @param cancelMediaOperationRequest The cancel media operation request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> cancelMediaOperationWithResponseAsync(
            CancelMediaOperationWithCallLocatorRequest cancelMediaOperationRequest) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.cancelMediaOperation(
                                this.client.getEndpoint(),
                                this.client.getApiVersion(),
                                cancelMediaOperationRequest,
                                accept,
                                context));
    }

    /**
     * cancel media operation.
     *
     * @param cancelMediaOperationRequest The cancel media operation request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> cancelMediaOperationWithResponseAsync(
            CancelMediaOperationWithCallLocatorRequest cancelMediaOperationRequest, Context context) {
        final String accept = "application/json";
        return service.cancelMediaOperation(
                this.client.getEndpoint(), this.client.getApiVersion(), cancelMediaOperationRequest, accept, context);
    }

    /**
     * cancel media operation.
     *
     * @param cancelMediaOperationRequest The cancel media operation request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> cancelMediaOperationAsync(
            CancelMediaOperationWithCallLocatorRequest cancelMediaOperationRequest) {
        return cancelMediaOperationWithResponseAsync(cancelMediaOperationRequest)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * cancel media operation.
     *
     * @param cancelMediaOperationRequest The cancel media operation request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> cancelMediaOperationAsync(
            CancelMediaOperationWithCallLocatorRequest cancelMediaOperationRequest, Context context) {
        return cancelMediaOperationWithResponseAsync(cancelMediaOperationRequest, context)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * cancel media operation.
     *
     * @param cancelMediaOperationRequest The cancel media operation request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void cancelMediaOperation(CancelMediaOperationWithCallLocatorRequest cancelMediaOperationRequest) {
        cancelMediaOperationAsync(cancelMediaOperationRequest).block();
    }

    /**
     * cancel media operation.
     *
     * @param cancelMediaOperationRequest The cancel media operation request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> cancelMediaOperationWithResponse(
            CancelMediaOperationWithCallLocatorRequest cancelMediaOperationRequest, Context context) {
        return cancelMediaOperationWithResponseAsync(cancelMediaOperationRequest, context).block();
    }

    /**
     * Answer the call.
     *
     * @param answerCallRequest The answer call request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload of the answer call operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<AnswerCallResultInternal>> answerCallWithResponseAsync(AnswerCallRequest answerCallRequest) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.answerCall(
                                this.client.getEndpoint(),
                                this.client.getApiVersion(),
                                answerCallRequest,
                                accept,
                                context));
    }

    /**
     * Answer the call.
     *
     * @param answerCallRequest The answer call request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload of the answer call operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<AnswerCallResultInternal>> answerCallWithResponseAsync(
            AnswerCallRequest answerCallRequest, Context context) {
        final String accept = "application/json";
        return service.answerCall(
                this.client.getEndpoint(), this.client.getApiVersion(), answerCallRequest, accept, context);
    }

    /**
     * Answer the call.
     *
     * @param answerCallRequest The answer call request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload of the answer call operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AnswerCallResultInternal> answerCallAsync(AnswerCallRequest answerCallRequest) {
        return answerCallWithResponseAsync(answerCallRequest)
                .flatMap(
                        (Response<AnswerCallResultInternal> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Answer the call.
     *
     * @param answerCallRequest The answer call request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload of the answer call operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AnswerCallResultInternal> answerCallAsync(AnswerCallRequest answerCallRequest, Context context) {
        return answerCallWithResponseAsync(answerCallRequest, context)
                .flatMap(
                        (Response<AnswerCallResultInternal> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Answer the call.
     *
     * @param answerCallRequest The answer call request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload of the answer call operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AnswerCallResultInternal answerCall(AnswerCallRequest answerCallRequest) {
        return answerCallAsync(answerCallRequest).block();
    }

    /**
     * Answer the call.
     *
     * @param answerCallRequest The answer call request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload of the answer call operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<AnswerCallResultInternal> answerCallWithResponse(
            AnswerCallRequest answerCallRequest, Context context) {
        return answerCallWithResponseAsync(answerCallRequest, context).block();
    }

    /**
     * Reject the call.
     *
     * @param rejectCallRequest The reject call request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> rejectCallWithResponseAsync(RejectCallRequest rejectCallRequest) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.rejectCall(
                                this.client.getEndpoint(),
                                this.client.getApiVersion(),
                                rejectCallRequest,
                                accept,
                                context));
    }

    /**
     * Reject the call.
     *
     * @param rejectCallRequest The reject call request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> rejectCallWithResponseAsync(RejectCallRequest rejectCallRequest, Context context) {
        final String accept = "application/json";
        return service.rejectCall(
                this.client.getEndpoint(), this.client.getApiVersion(), rejectCallRequest, accept, context);
    }

    /**
     * Reject the call.
     *
     * @param rejectCallRequest The reject call request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> rejectCallAsync(RejectCallRequest rejectCallRequest) {
        return rejectCallWithResponseAsync(rejectCallRequest).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Reject the call.
     *
     * @param rejectCallRequest The reject call request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> rejectCallAsync(RejectCallRequest rejectCallRequest, Context context) {
        return rejectCallWithResponseAsync(rejectCallRequest, context).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Reject the call.
     *
     * @param rejectCallRequest The reject call request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void rejectCall(RejectCallRequest rejectCallRequest) {
        rejectCallAsync(rejectCallRequest).block();
    }

    /**
     * Reject the call.
     *
     * @param rejectCallRequest The reject call request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> rejectCallWithResponse(RejectCallRequest rejectCallRequest, Context context) {
        return rejectCallWithResponseAsync(rejectCallRequest, context).block();
    }

    /**
     * Redirect the call.
     *
     * @param redirectCallRequest The redirect call request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> redirectCallWithResponseAsync(RedirectCallRequest redirectCallRequest) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.redirectCall(
                                this.client.getEndpoint(),
                                this.client.getApiVersion(),
                                redirectCallRequest,
                                accept,
                                context));
    }

    /**
     * Redirect the call.
     *
     * @param redirectCallRequest The redirect call request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> redirectCallWithResponseAsync(
            RedirectCallRequest redirectCallRequest, Context context) {
        final String accept = "application/json";
        return service.redirectCall(
                this.client.getEndpoint(), this.client.getApiVersion(), redirectCallRequest, accept, context);
    }

    /**
     * Redirect the call.
     *
     * @param redirectCallRequest The redirect call request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> redirectCallAsync(RedirectCallRequest redirectCallRequest) {
        return redirectCallWithResponseAsync(redirectCallRequest).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Redirect the call.
     *
     * @param redirectCallRequest The redirect call request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> redirectCallAsync(RedirectCallRequest redirectCallRequest, Context context) {
        return redirectCallWithResponseAsync(redirectCallRequest, context)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Redirect the call.
     *
     * @param redirectCallRequest The redirect call request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void redirectCall(RedirectCallRequest redirectCallRequest) {
        redirectCallAsync(redirectCallRequest).block();
    }

    /**
     * Redirect the call.
     *
     * @param redirectCallRequest The redirect call request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> redirectCallWithResponse(RedirectCallRequest redirectCallRequest, Context context) {
        return redirectCallWithResponseAsync(redirectCallRequest, context).block();
    }
}
