// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.communication.callingserver.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;

import java.io.IOException;

/** The RecognizeConfigurationsInternal model. */
@Fluent
public final class RecognizeConfigurationsInternal implements JsonSerializable<RecognizeConfigurationsInternal> {
    /*
     * Determines if we interrupt the prompt and start recognizing.
     */
    private Boolean interruptPromptAndStartRecognition;

    /*
     * Time to wait for first input after prompt (if any).
     */
    private Integer initialSilenceTimeoutInSeconds;

    /*
     * Target participant of DTFM tone recognition.
     */
    private CommunicationIdentifierModel targetParticipant;

    /*
     * Defines configurations for DTMF.
     */
    private DtmfConfigurationsInternal dtmfConfigurations;

    /**
     * Get the interruptPromptAndStartRecognition property: Determines if we interrupt the prompt and start recognizing.
     *
     * @return the interruptPromptAndStartRecognition value.
     */
    public Boolean isInterruptPromptAndStartRecognition() {
        return this.interruptPromptAndStartRecognition;
    }

    /**
     * Set the interruptPromptAndStartRecognition property: Determines if we interrupt the prompt and start recognizing.
     *
     * @param interruptPromptAndStartRecognition the interruptPromptAndStartRecognition value to set.
     * @return the RecognizeConfigurationsInternal object itself.
     */
    public RecognizeConfigurationsInternal setInterruptPromptAndStartRecognition(
            Boolean interruptPromptAndStartRecognition) {
        this.interruptPromptAndStartRecognition = interruptPromptAndStartRecognition;
        return this;
    }

    /**
     * Get the initialSilenceTimeoutInSeconds property: Time to wait for first input after prompt (if any).
     *
     * @return the initialSilenceTimeoutInSeconds value.
     */
    public Integer getInitialSilenceTimeoutInSeconds() {
        return this.initialSilenceTimeoutInSeconds;
    }

    /**
     * Set the initialSilenceTimeoutInSeconds property: Time to wait for first input after prompt (if any).
     *
     * @param initialSilenceTimeoutInSeconds the initialSilenceTimeoutInSeconds value to set.
     * @return the RecognizeConfigurationsInternal object itself.
     */
    public RecognizeConfigurationsInternal setInitialSilenceTimeoutInSeconds(Integer initialSilenceTimeoutInSeconds) {
        this.initialSilenceTimeoutInSeconds = initialSilenceTimeoutInSeconds;
        return this;
    }

    /**
     * Get the targetParticipant property: Target participant of DTFM tone recognition.
     *
     * @return the targetParticipant value.
     */
    public CommunicationIdentifierModel getTargetParticipant() {
        return this.targetParticipant;
    }

    /**
     * Set the targetParticipant property: Target participant of DTFM tone recognition.
     *
     * @param targetParticipant the targetParticipant value to set.
     * @return the RecognizeConfigurationsInternal object itself.
     */
    public RecognizeConfigurationsInternal setTargetParticipant(CommunicationIdentifierModel targetParticipant) {
        this.targetParticipant = targetParticipant;
        return this;
    }

    /**
     * Get the dtmfConfigurations property: Defines configurations for DTMF.
     *
     * @return the dtmfConfigurations value.
     */
    public DtmfConfigurationsInternal getDtmfConfigurations() {
        return this.dtmfConfigurations;
    }

    /**
     * Set the dtmfConfigurations property: Defines configurations for DTMF.
     *
     * @param dtmfConfigurations the dtmfConfigurations value to set.
     * @return the RecognizeConfigurationsInternal object itself.
     */
    public RecognizeConfigurationsInternal setDtmfConfigurations(DtmfConfigurationsInternal dtmfConfigurations) {
        this.dtmfConfigurations = dtmfConfigurations;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("targetParticipant", this.targetParticipant);
        jsonWriter.writeBooleanField("interruptPromptAndStartRecognition", this.interruptPromptAndStartRecognition);
        jsonWriter.writeNumberField("initialSilenceTimeoutInSeconds", this.initialSilenceTimeoutInSeconds);
        jsonWriter.writeJsonField("dtmfConfigurations", this.dtmfConfigurations);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RecognizeConfigurationsInternal from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of RecognizeConfigurationsInternal if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RecognizeConfigurationsInternal.
     */
    public static RecognizeConfigurationsInternal fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RecognizeConfigurationsInternal deserializedRecognizeOptions = new RecognizeConfigurationsInternal();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("targetParticipant".equals(fieldName)) {
                    deserializedRecognizeOptions.targetParticipant = CommunicationIdentifierModel.fromJson(reader);
                } else if ("interruptPromptAndStartRecognition".equals(fieldName)) {
                    deserializedRecognizeOptions.interruptPromptAndStartRecognition = reader.getNullable(JsonReader::getBoolean);
                } else if ("initialSilenceTimeoutInSeconds".equals(fieldName)) {
                    deserializedRecognizeOptions.initialSilenceTimeoutInSeconds
                        = reader.getNullable(JsonReader::getInt);
                } else if ("dtmfConfigurations".equals(fieldName)) {
                    deserializedRecognizeOptions.dtmfConfigurations = DtmfConfigurationsInternal.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRecognizeOptions;
        });
    }
}
