// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.communication.callingserver.implementation.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The CollectTonesResult model.
 */
@Immutable
public final class CollectTonesResult implements JsonSerializable<CollectTonesResult> {
    /*
     * The tones property.
     */
    private List<Tone> tones;

    /**
     * Creates an instance of CollectTonesResult class.
     */
    public CollectTonesResult() {
    }

    /**
     * Get the tones property: The tones property.
     * 
     * @return the tones value.
     */
    public List<Tone> getTones() {
        return this.tones;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CollectTonesResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CollectTonesResult if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the CollectTonesResult.
     */
    public static CollectTonesResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CollectTonesResult deserializedCollectTonesResult = new CollectTonesResult();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("tones".equals(fieldName)) {
                    List<Tone> tones = reader.readArray(reader1 -> Tone.fromString(reader1.getString()));
                    deserializedCollectTonesResult.tones = tones;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCollectTonesResult;
        });
    }
}
