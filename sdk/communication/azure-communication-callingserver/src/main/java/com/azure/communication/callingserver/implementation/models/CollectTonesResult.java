// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.communication.callingserver.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;

import java.io.IOException;
import java.util.List;

/** The CollectTonesResult model. */
@Fluent
public final class CollectTonesResult implements JsonSerializable<CollectTonesResult> {
    /*
     * The tones property.
     */
    private List<String> tones;

    /**
     * Get the tones property: The tones property.
     *
     * @return the tones value.
     */
    public List<String> getTones() {
        return this.tones;
    }

    /**
     * Set the tones property: The tones property.
     *
     * @param tones the tones value to set.
     * @return the CollectTonesResult object itself.
     */
    public CollectTonesResult setTones(List<String> tones) {
        this.tones = tones;
        return this;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        return jsonWriter.writeStartObject()
            .writeArrayField("tones", tones, JsonWriter::writeString)
            .writeEndObject();
    }

    /**
     * Reads an instance of {@link CollectTonesResult} from the {@link JsonReader}.
     *
     * @param jsonReader The {@link JsonReader} to read.
     * @return An instance of {@link CollectTonesResult}, or null if the {@link JsonReader} was pointing to
     * {@link JsonToken#NULL}.
     * @throws IOException If an error occurs while reading the {@link JsonReader}.
     */
    public static CollectTonesResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CollectTonesResult result = new CollectTonesResult();

            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("tones".equals(fieldName)) {
                    result.tones = reader.readArray(JsonReader::getString);
                } else {
                    reader.skipChildren();
                }
            }

            return result;
        });
    }
}
