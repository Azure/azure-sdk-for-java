// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.communication.callingserver.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;

import java.io.IOException;
import java.util.List;

/** The AddParticipantsResponseInternal model. */
@Fluent
public final class AddParticipantsResponseInternal implements JsonSerializable<AddParticipantsResponseInternal> {
    /*
     * The participants property.
     */
    private List<AcsCallParticipantInternal> participants;

    /*
     * The operation context provided by client.
     */
    private String operationContext;

    /**
     * Get the participants property: The participants property.
     *
     * @return the participants value.
     */
    public List<AcsCallParticipantInternal> getParticipants() {
        return this.participants;
    }

    /**
     * Set the participants property: The participants property.
     *
     * @param participants the participants value to set.
     * @return the AddParticipantsResponseInternal object itself.
     */
    public AddParticipantsResponseInternal setParticipants(List<AcsCallParticipantInternal> participants) {
        this.participants = participants;
        return this;
    }

    /**
     * Get the operationContext property: The operation context provided by client.
     *
     * @return the operationContext value.
     */
    public String getOperationContext() {
        return this.operationContext;
    }

    /**
     * Set the operationContext property: The operation context provided by client.
     *
     * @param operationContext the operationContext value to set.
     * @return the AddParticipantsResponseInternal object itself.
     */
    public AddParticipantsResponseInternal setOperationContext(String operationContext) {
        this.operationContext = operationContext;
        return this;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        return jsonWriter.writeStartObject()
            .writeArrayField("participants", participants, JsonWriter::writeJson)
            .writeStringField("operationContext", operationContext)
            .writeEndObject();
    }

    /**
     * Reads an instance of {@link AddParticipantsResponseInternal} from the {@link JsonReader}.
     *
     * @param jsonReader The {@link JsonReader} to read.
     * @return An instance of {@link AddParticipantsResponseInternal}, or null if the {@link JsonReader} was pointing to
     * {@link JsonToken#NULL}.
     * @throws IOException If an error occurs while reading the {@link JsonReader}.
     */
    public static AddParticipantsResponseInternal fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AddParticipantsResponseInternal response = new AddParticipantsResponseInternal();

            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("participants".equals(fieldName)) {
                    response.participants = reader.readArray(AcsCallParticipantInternal::fromJson);
                } else if ("operationContext".equals(fieldName)) {
                    response.operationContext = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return response;
        });
    }
}
