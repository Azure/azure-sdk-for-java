// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.communication.callingserver.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;

import java.io.IOException;
import java.util.List;

/** The CreateCallRequestInternal model. */
@Fluent
public final class CreateCallRequestInternal implements JsonSerializable<CreateCallRequestInternal> {
    /*
     * The targets of the call.
     */
    private List<CommunicationIdentifierModel> targets;

    /*
     * The source of the call.
     */
    private CallSourceInternal source;

    /*
     * The subject.
     */
    private String subject;

    /*
     * The callback URI.
     */
    private String callbackUri;

    /*
     * Media Streaming Configuration.
     */
    private MediaStreamingConfigurationInternal mediaStreamingConfiguration;

    /**
     * Get the targets property: The targets of the call.
     *
     * @return the targets value.
     */
    public List<CommunicationIdentifierModel> getTargets() {
        return this.targets;
    }

    /**
     * Set the targets property: The targets of the call.
     *
     * @param targets the targets value to set.
     * @return the CreateCallRequestInternal object itself.
     */
    public CreateCallRequestInternal setTargets(List<CommunicationIdentifierModel> targets) {
        this.targets = targets;
        return this;
    }

    /**
     * Get the source property: The source of the call.
     *
     * @return the source value.
     */
    public CallSourceInternal getSource() {
        return this.source;
    }

    /**
     * Set the source property: The source of the call.
     *
     * @param source the source value to set.
     * @return the CreateCallRequestInternal object itself.
     */
    public CreateCallRequestInternal setSource(CallSourceInternal source) {
        this.source = source;
        return this;
    }

    /**
     * Get the subject property: The subject.
     *
     * @return the subject value.
     */
    public String getSubject() {
        return this.subject;
    }

    /**
     * Set the subject property: The subject.
     *
     * @param subject the subject value to set.
     * @return the CreateCallRequestInternal object itself.
     */
    public CreateCallRequestInternal setSubject(String subject) {
        this.subject = subject;
        return this;
    }

    /**
     * Get the callbackUri property: The callback URI.
     *
     * @return the callbackUri value.
     */
    public String getCallbackUri() {
        return this.callbackUri;
    }

    /**
     * Set the callbackUri property: The callback URI.
     *
     * @param callbackUri the callbackUri value to set.
     * @return the CreateCallRequestInternal object itself.
     */
    public CreateCallRequestInternal setCallbackUri(String callbackUri) {
        this.callbackUri = callbackUri;
        return this;
    }

    /**
     * Get the mediaStreamingConfiguration property: Media Streaming Configuration.
     *
     * @return the mediaStreamingConfiguration value.
     */
    public MediaStreamingConfigurationInternal getMediaStreamingConfiguration() {
        return this.mediaStreamingConfiguration;
    }

    /**
     * Set the mediaStreamingConfiguration property: Media Streaming Configuration.
     *
     * @param mediaStreamingConfiguration the mediaStreamingConfiguration value to set.
     * @return the CreateCallRequestInternal object itself.
     */
    public CreateCallRequestInternal setMediaStreamingConfiguration(
            MediaStreamingConfigurationInternal mediaStreamingConfiguration) {
        this.mediaStreamingConfiguration = mediaStreamingConfiguration;
        return this;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        return jsonWriter.writeStartObject()
            .writeArrayField("targets", targets, JsonWriter::writeJson)
            .writeJsonField("source", source)
            .writeStringField("subject", subject)
            .writeStringField("callbackUri", callbackUri)
            .writeJsonField("mediaStreamingConfiguration", mediaStreamingConfiguration)
            .writeEndObject();
    }

    /**
     * Reads an instance of {@link CreateCallRequestInternal} from the {@link JsonReader}.
     *
     * @param jsonReader The {@link JsonReader} to read.
     * @return An instance of {@link CreateCallRequestInternal}, or null if the {@link JsonReader} was pointing to
     * {@link JsonToken#NULL}.
     * @throws IOException If an error occurs while reading the {@link JsonReader}.
     */
    public static CreateCallRequestInternal fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CreateCallRequestInternal request = new CreateCallRequestInternal();

            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("targets".equals(fieldName)) {
                    request.targets = reader.readArray(CommunicationIdentifierModel::fromJson);
                } else if ("source".equals(fieldName)) {
                    request.source = CallSourceInternal.fromJson(reader);
                } else if ("subject".equals(fieldName)) {
                    request.subject = reader.getString();
                } else if ("callbackUri".equals(fieldName)) {
                    request.callbackUri = reader.getString();
                } else if ("mediaStreamingConfiguration".equals(fieldName)) {
                    request.mediaStreamingConfiguration = MediaStreamingConfigurationInternal.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return request;
        });
    }
}
