// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.communication.chat.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Map;

/**
 * A participant of the chat thread.
 */
@Fluent
public final class ChatParticipant implements JsonSerializable<ChatParticipant> {
    /*
     * Identifies a participant in Azure Communication services. A participant is, for example, a phone number or an
     * Azure communication user. This model is polymorphic: Apart from kind and rawId, at most one further property may
     * be set which must match the kind enum value.
     */
    private CommunicationIdentifierModel communicationIdentifier;

    /*
     * Display name for the chat participant.
     */
    private String displayName;

    /*
     * Time from which the chat history is shared with the participant. The timestamp is in RFC3339 format:
     * `yyyy-MM-ddTHH:mm:ssZ`.
     */
    private OffsetDateTime shareHistoryTime;

    /*
     * Contextual metadata for the chat participant. The metadata consists of name/value pairs. The total size of all
     * metadata pairs can be up to 1KB in size.
     */
    private Map<String, String> metadata;

    /**
     * Creates an instance of ChatParticipant class.
     */
    public ChatParticipant() {
    }

    /**
     * Get the communicationIdentifier property: Identifies a participant in Azure Communication services. A participant
     * is, for example, a phone number or an Azure communication user. This model is polymorphic: Apart from kind and
     * rawId, at most one further property may be set which must match the kind enum value.
     * 
     * @return the communicationIdentifier value.
     */
    public CommunicationIdentifierModel getCommunicationIdentifier() {
        return this.communicationIdentifier;
    }

    /**
     * Set the communicationIdentifier property: Identifies a participant in Azure Communication services. A participant
     * is, for example, a phone number or an Azure communication user. This model is polymorphic: Apart from kind and
     * rawId, at most one further property may be set which must match the kind enum value.
     * 
     * @param communicationIdentifier the communicationIdentifier value to set.
     * @return the ChatParticipant object itself.
     */
    public ChatParticipant setCommunicationIdentifier(CommunicationIdentifierModel communicationIdentifier) {
        this.communicationIdentifier = communicationIdentifier;
        return this;
    }

    /**
     * Get the displayName property: Display name for the chat participant.
     * 
     * @return the displayName value.
     */
    public String getDisplayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: Display name for the chat participant.
     * 
     * @param displayName the displayName value to set.
     * @return the ChatParticipant object itself.
     */
    public ChatParticipant setDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the shareHistoryTime property: Time from which the chat history is shared with the participant. The timestamp
     * is in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`.
     * 
     * @return the shareHistoryTime value.
     */
    public OffsetDateTime getShareHistoryTime() {
        return this.shareHistoryTime;
    }

    /**
     * Set the shareHistoryTime property: Time from which the chat history is shared with the participant. The timestamp
     * is in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`.
     * 
     * @param shareHistoryTime the shareHistoryTime value to set.
     * @return the ChatParticipant object itself.
     */
    public ChatParticipant setShareHistoryTime(OffsetDateTime shareHistoryTime) {
        this.shareHistoryTime = shareHistoryTime;
        return this;
    }

    /**
     * Get the metadata property: Contextual metadata for the chat participant. The metadata consists of name/value
     * pairs. The total size of all metadata pairs can be up to 1KB in size.
     * 
     * @return the metadata value.
     */
    public Map<String, String> getMetadata() {
        return this.metadata;
    }

    /**
     * Set the metadata property: Contextual metadata for the chat participant. The metadata consists of name/value
     * pairs. The total size of all metadata pairs can be up to 1KB in size.
     * 
     * @param metadata the metadata value to set.
     * @return the ChatParticipant object itself.
     */
    public ChatParticipant setMetadata(Map<String, String> metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("communicationIdentifier", this.communicationIdentifier);
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeStringField("shareHistoryTime",
            this.shareHistoryTime == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.shareHistoryTime));
        jsonWriter.writeMapField("metadata", this.metadata, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ChatParticipant from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ChatParticipant if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ChatParticipant.
     */
    public static ChatParticipant fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ChatParticipant deserializedChatParticipant = new ChatParticipant();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("communicationIdentifier".equals(fieldName)) {
                    deserializedChatParticipant.communicationIdentifier = CommunicationIdentifierModel.fromJson(reader);
                } else if ("displayName".equals(fieldName)) {
                    deserializedChatParticipant.displayName = reader.getString();
                } else if ("shareHistoryTime".equals(fieldName)) {
                    deserializedChatParticipant.shareHistoryTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("metadata".equals(fieldName)) {
                    Map<String, String> metadata = reader.readMap(reader1 -> reader1.getString());
                    deserializedChatParticipant.metadata = metadata;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedChatParticipant;
        });
    }
}
