// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

package com.azure.communication.chat.models;

import com.azure.communication.chat.implementation.converters.CommunicationIdentifierConverter;
import com.azure.communication.chat.implementation.models.CommunicationIdentifierModel;
import com.azure.communication.common.CommunicationIdentifier;
import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;

import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * The ChatMessageReadReceipt model.
 */
@Fluent
public final class ChatMessageReadReceipt implements JsonSerializable<ChatMessageReadReceipt> {
    /**
     * Identifies a participant in Azure Communication services. A participant
     * is, for example, a phone number or an Azure communication user. This
     * model must be interpreted as a union: Apart from rawId, at most one
     * further property may be set.
     */
    private CommunicationIdentifier sender;

    /**
     * Id for the chat message that has been read. This id is generated by the
     * server.
     */
    private String chatMessageId;

    /**
     * Read receipt timestamp. The timestamp is in RFC3339 format:
     * `yyyy-MM-ddTHH:mm:ssZ`.
     */
    private OffsetDateTime readOn;

    /**
     * Get the sender property: Identifies a participant in Azure Communication services. A
     * participant is, for example, a phone number or an Azure communication user. This model must be interpreted as a
     * union: Apart from rawId, at most one further property may be set.
     *
     * @return the sender value.
     */
    public CommunicationIdentifier getSender() {
        return this.sender;
    }

    /**
     * Set the sender property: Identifies a participant in Azure Communication services. A
     * participant is, for example, a phone number or an Azure communication user. This model must be interpreted as a
     * union: Apart from rawId, at most one further property may be set.
     *
     * @param sender the sender value to set.
     * @return the ChatMessageReadReceipt object itself.
     */
    public ChatMessageReadReceipt setSender(CommunicationIdentifier sender) {
        this.sender = sender;
        return this;
    }

    /**
     * Get the chatMessageId property: Id for the chat message that has been read. This id is generated by the server.
     *
     * @return the chatMessageId value.
     */
    public String getChatMessageId() {
        return this.chatMessageId;
    }

    /**
     * Set the chatMessageId property: Id for the chat message that has been read. This id is generated by the server.
     *
     * @param chatMessageId the chatMessageId value to set.
     * @return the ChatMessageReadReceipt object itself.
     */
    public ChatMessageReadReceipt setChatMessageId(String chatMessageId) {
        this.chatMessageId = chatMessageId;
        return this;
    }

    /**
     * Get the readOn property: Read receipt timestamp. The timestamp is in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`.
     *
     * @return the readOn value.
     */
    public OffsetDateTime getReadOn() {
        return this.readOn;
    }

    /**
     * Set the readOn property: Read receipt timestamp. The timestamp is in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`.
     *
     * @param readOn the readOn value to set.
     * @return the ChatMessageReadReceipt object itself.
     */
    public ChatMessageReadReceipt setReadOn(OffsetDateTime readOn) {
        this.readOn = readOn;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        // Not serializing any properties, all are json read only.
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AddChatParticipantsResult from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of AddChatParticipantsResult if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AddChatParticipantsResult.
     */
    public static ChatMessageReadReceipt fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            final ChatMessageReadReceipt receipt = new ChatMessageReadReceipt();
            while (jsonReader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("senderCommunicationIdentifier".equals(fieldName)) {
                    final CommunicationIdentifierModel identifier = reader.readObject(CommunicationIdentifierModel::fromJson);
                    receipt.setSender(CommunicationIdentifierConverter.convert(identifier));
                } else if ("chatMessageId".equals(fieldName)) {
                    receipt.setChatMessageId(reader.getString());
                } else if ("readOn".equals(fieldName)) {
                    final String value = reader.getString();
                    if (!CoreUtils.isNullOrEmpty(value)) {
                        receipt.setReadOn(OffsetDateTime.parse(value));
                    }
                } else {
                    reader.skipChildren();
                }
            }
            return receipt;
        });
    }
}
