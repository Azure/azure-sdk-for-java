// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.communication.chat.implementation;

import com.azure.communication.chat.implementation.models.AddChatParticipantsOptions;
import com.azure.communication.chat.implementation.models.ChatMessage;
import com.azure.communication.chat.implementation.models.ChatMessageReadReceipt;
import com.azure.communication.chat.implementation.models.ChatMessageReadReceiptsCollection;
import com.azure.communication.chat.implementation.models.ChatMessagesCollection;
import com.azure.communication.chat.implementation.models.ChatParticipant;
import com.azure.communication.chat.implementation.models.ChatParticipantsCollection;
import com.azure.communication.chat.implementation.models.SendChatMessageResult;
import com.azure.communication.chat.implementation.models.SendReadReceiptRequest;
import com.azure.communication.chat.models.ErrorException;
import com.azure.communication.chat.models.SendChatMessageOptions;
import com.azure.communication.chat.models.UpdateChatMessageOptions;
import com.azure.communication.chat.models.UpdateChatThreadOptions;
import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;

import java.time.OffsetDateTime;

import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in ChatThreads.
 */
public final class ChatThreadImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final ChatThreadsService service;

    /**
     * The service client containing this operation class.
     */
    private final AzureCommunicationChatServiceImpl client;

    /**
     * Initializes an instance of ChatThreadsImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    ChatThreadImpl(AzureCommunicationChatServiceImpl client) {
        this.service =
            RestProxy.create(ChatThreadsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AzureCommunicationChatServiceChatThreads to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "AzureCommunicationCh")
    private interface ChatThreadsService {
        @Get("/chat/threads/{chatThreadId}/readreceipts")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<ChatMessageReadReceiptsCollection>> listChatReadReceipts(
            @HostParam("endpoint") String endpoint,
            @PathParam("chatThreadId") String chatThreadId,
            @QueryParam("maxPageSize") Integer maxPageSize,
            @QueryParam("skip") Integer skip,
            @QueryParam("api-version") String apiVersion,
            Context context);

        @Post("/chat/threads/{chatThreadId}/readreceipts")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Void>> sendChatReadReceipt(
            @HostParam("endpoint") String endpoint,
            @PathParam("chatThreadId") String chatThreadId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") SendReadReceiptRequest sendReadReceiptRequest,
            Context context);

        @Post("/chat/threads/{chatThreadId}/messages")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<SendChatMessageResult>> sendChatMessage(
            @HostParam("endpoint") String endpoint,
            @PathParam("chatThreadId") String chatThreadId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") SendChatMessageOptions sendChatMessageRequest,
            Context context);

        @Get("/chat/threads/{chatThreadId}/messages")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<ChatMessagesCollection>> listChatMessages(
            @HostParam("endpoint") String endpoint,
            @PathParam("chatThreadId") String chatThreadId,
            @QueryParam("maxPageSize") Integer maxPageSize,
            @QueryParam("startTime") OffsetDateTime startTime,
            @QueryParam("api-version") String apiVersion,
            Context context);

        @Get("/chat/threads/{chatThreadId}/messages/{chatMessageId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<ChatMessage>> getChatMessage(
            @HostParam("endpoint") String endpoint,
            @PathParam("chatThreadId") String chatThreadId,
            @PathParam("chatMessageId") String chatMessageId,
            @QueryParam("api-version") String apiVersion,
            Context context);

        @Patch("/chat/threads/{chatThreadId}/messages/{chatMessageId}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Void>> updateChatMessage(
            @HostParam("endpoint") String endpoint,
            @PathParam("chatThreadId") String chatThreadId,
            @PathParam("chatMessageId") String chatMessageId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/merge-patch+json") UpdateChatMessageOptions updateChatMessageRequest,
            Context context);

        @Delete("/chat/threads/{chatThreadId}/messages/{chatMessageId}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Void>> deleteChatMessage(
            @HostParam("endpoint") String endpoint,
            @PathParam("chatThreadId") String chatThreadId,
            @PathParam("chatMessageId") String chatMessageId,
            @QueryParam("api-version") String apiVersion,
            Context context);

        @Post("/chat/threads/{chatThreadId}/typing")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Void>> sendTypingNotification(
            @HostParam("endpoint") String endpoint,
            @PathParam("chatThreadId") String chatThreadId,
            @QueryParam("api-version") String apiVersion,
            Context context);

        @Get("/chat/threads/{chatThreadId}/participants")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<ChatParticipantsCollection>> listChatParticipants(
            @HostParam("endpoint") String endpoint,
            @PathParam("chatThreadId") String chatThreadId,
            @QueryParam("maxPageSize") Integer maxPageSize,
            @QueryParam("skip") Integer skip,
            @QueryParam("api-version") String apiVersion,
            Context context);

        @Post("/chat/threads/{chatThreadId}/participants")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Void>> addChatParticipants(
            @HostParam("endpoint") String endpoint,
            @PathParam("chatThreadId") String chatThreadId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") AddChatParticipantsOptions addChatParticipantsRequest,
            Context context);

        @Delete("/chat/threads/{chatThreadId}/participants/{chatParticipantId}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Void>> removeChatParticipant(
            @HostParam("endpoint") String endpoint,
            @PathParam("chatThreadId") String chatThreadId,
            @PathParam("chatParticipantId") String chatParticipantId,
            @QueryParam("api-version") String apiVersion,
            Context context);

        @Patch("/chat/threads/{chatThreadId}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Void>> updateChatThread(
            @HostParam("endpoint") String endpoint,
            @PathParam("chatThreadId") String chatThreadId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/merge-patch+json") UpdateChatThreadOptions updateChatThreadRequest,
            Context context);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<ChatMessageReadReceiptsCollection>> listChatReadReceiptsNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<ChatMessagesCollection>> listChatMessagesNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<ChatParticipantsCollection>> listChatParticipantsNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, Context context);
    }

    /**
     * Gets chat message read receipts for a thread.
     *
     * @param chatThreadId Thread id to get the chat message read receipts for.
     * @param maxPageSize  The maximum number of chat message read receipts to be returned per page.
     * @param skip         Skips chat message read receipts up to a specified position in response.
     * @return chat message read receipts for a thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ChatMessageReadReceipt>> listChatReadReceiptsSinglePageAsync(
        String chatThreadId, Integer maxPageSize, Integer skip) {
        return FluxUtil.withContext(
            context ->
                service.listChatReadReceipts(
                    this.client.getEndpoint(),
                    chatThreadId,
                    maxPageSize,
                    skip,
                    this.client.getApiVersion(),
                    context))
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().getValue(),
                        res.getValue().getNextLink(),
                        null));
    }

    /**
     * Gets chat message read receipts for a thread.
     *
     * @param chatThreadId Thread id to get the chat message read receipts for.
     * @param maxPageSize  The maximum number of chat message read receipts to be returned per page.
     * @param skip         Skips chat message read receipts up to a specified position in response.
     * @param context      The context to associate with this operation.
     * @return chat message read receipts for a thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ChatMessageReadReceipt>> listChatReadReceiptsSinglePageAsync(
        String chatThreadId, Integer maxPageSize, Integer skip, Context context) {
        return service.listChatReadReceipts(
            this.client.getEndpoint(),
            chatThreadId,
            maxPageSize,
            skip,
            this.client.getApiVersion(),
            context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().getValue(),
                        res.getValue().getNextLink(),
                        null));
    }

    /**
     * Gets chat message read receipts for a thread.
     *
     * @param chatThreadId Thread id to get the chat message read receipts for.
     * @param maxPageSize  The maximum number of chat message read receipts to be returned per page.
     * @param skip         Skips chat message read receipts up to a specified position in response.
     * @return chat message read receipts for a thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<ChatMessageReadReceipt> listChatReadReceiptsAsync(
        String chatThreadId, Integer maxPageSize, Integer skip) {
        return new PagedFlux<>(
            () -> listChatReadReceiptsSinglePageAsync(chatThreadId, maxPageSize, skip),
            nextLink -> listChatReadReceiptsNextSinglePageAsync(nextLink));
    }

    /**
     * Gets chat message read receipts for a thread.
     *
     * @param chatThreadId Thread id to get the chat message read receipts for.
     * @param maxPageSize  The maximum number of chat message read receipts to be returned per page.
     * @param skip         Skips chat message read receipts up to a specified position in response.
     * @param context      The context to associate with this operation.
     * @return chat message read receipts for a thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<ChatMessageReadReceipt> listChatReadReceiptsAsync(
        String chatThreadId, Integer maxPageSize, Integer skip, Context context) {
        return new PagedFlux<>(
            () -> listChatReadReceiptsSinglePageAsync(chatThreadId, maxPageSize, skip, context),
            nextLink -> listChatReadReceiptsNextSinglePageAsync(nextLink, context));
    }

    /**
     * Gets chat message read receipts for a thread.
     *
     * @param chatThreadId Thread id to get the chat message read receipts for.
     * @return chat message read receipts for a thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<ChatMessageReadReceipt> listChatReadReceiptsAsync(String chatThreadId) {
        final Integer maxPageSize = null;
        final Integer skip = null;
        final Context context = null;
        return new PagedFlux<>(
            () -> listChatReadReceiptsSinglePageAsync(chatThreadId, maxPageSize, skip),
            nextLink -> listChatReadReceiptsNextSinglePageAsync(nextLink, context));
    }

    /**
     * Gets chat message read receipts for a thread.
     *
     * @param chatThreadId Thread id to get the chat message read receipts for.
     * @param maxPageSize  The maximum number of chat message read receipts to be returned per page.
     * @param skip         Skips chat message read receipts up to a specified position in response.
     * @return chat message read receipts for a thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ChatMessageReadReceipt> listChatReadReceipts(
        String chatThreadId, Integer maxPageSize, Integer skip) {
        return new PagedIterable<>(listChatReadReceiptsAsync(chatThreadId, maxPageSize, skip));
    }

    /**
     * Gets chat message read receipts for a thread.
     *
     * @param chatThreadId Thread id to get the chat message read receipts for.
     * @param maxPageSize  The maximum number of chat message read receipts to be returned per page.
     * @param skip         Skips chat message read receipts up to a specified position in response.
     * @param context      The context to associate with this operation.
     * @return chat message read receipts for a thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ChatMessageReadReceipt> listChatReadReceipts(
        String chatThreadId, Integer maxPageSize, Integer skip, Context context) {
        return new PagedIterable<>(listChatReadReceiptsAsync(chatThreadId, maxPageSize, skip, context));
    }

    /**
     * Gets chat message read receipts for a thread.
     *
     * @param chatThreadId Thread id to get the chat message read receipts for.
     * @return chat message read receipts for a thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ChatMessageReadReceipt> listChatReadReceipts(String chatThreadId) {
        final Integer maxPageSize = null;
        final Integer skip = null;
        final Context context = null;
        return new PagedIterable<>(listChatReadReceiptsAsync(chatThreadId, maxPageSize, skip));
    }

    /**
     * Sends a read receipt event to a thread, on behalf of a user.
     *
     * @param chatThreadId           Thread id to send the read receipt event to.
     * @param sendReadReceiptRequest Request payload for sending a read receipt.
     * @return the completion.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> sendChatReadReceiptWithResponseAsync(
        String chatThreadId, SendReadReceiptRequest sendReadReceiptRequest) {
        return FluxUtil.withContext(
            context ->
                service.sendChatReadReceipt(
                    this.client.getEndpoint(),
                    chatThreadId,
                    this.client.getApiVersion(),
                    sendReadReceiptRequest,
                    context));
    }

    /**
     * Sends a read receipt event to a thread, on behalf of a user.
     *
     * @param chatThreadId           Thread id to send the read receipt event to.
     * @param sendReadReceiptRequest Request payload for sending a read receipt.
     * @param context                The context to associate with this operation.
     * @return the completion.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> sendChatReadReceiptWithResponseAsync(
        String chatThreadId, SendReadReceiptRequest sendReadReceiptRequest, Context context) {
        return service.sendChatReadReceipt(
            this.client.getEndpoint(), chatThreadId, this.client.getApiVersion(), sendReadReceiptRequest, context);
    }

    /**
     * Sends a read receipt event to a thread, on behalf of a user.
     *
     * @param chatThreadId           Thread id to send the read receipt event to.
     * @param sendReadReceiptRequest Request payload for sending a read receipt.
     * @return the completion.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> sendChatReadReceiptAsync(String chatThreadId, SendReadReceiptRequest sendReadReceiptRequest) {
        return sendChatReadReceiptWithResponseAsync(chatThreadId, sendReadReceiptRequest)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Sends a read receipt event to a thread, on behalf of a user.
     *
     * @param chatThreadId           Thread id to send the read receipt event to.
     * @param sendReadReceiptRequest Request payload for sending a read receipt.
     * @param context                The context to associate with this operation.
     * @return the completion.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> sendChatReadReceiptAsync(
        String chatThreadId, SendReadReceiptRequest sendReadReceiptRequest, Context context) {
        return sendChatReadReceiptWithResponseAsync(chatThreadId, sendReadReceiptRequest, context)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Sends a read receipt event to a thread, on behalf of a user.
     *
     * @param chatThreadId           Thread id to send the read receipt event to.
     * @param sendReadReceiptRequest Request payload for sending a read receipt.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void sendChatReadReceipt(String chatThreadId, SendReadReceiptRequest sendReadReceiptRequest) {
        sendChatReadReceiptAsync(chatThreadId, sendReadReceiptRequest).block();
    }

    /**
     * Sends a read receipt event to a thread, on behalf of a user.
     *
     * @param chatThreadId           Thread id to send the read receipt event to.
     * @param sendReadReceiptRequest Request payload for sending a read receipt.
     * @param context                The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void sendChatReadReceipt(
        String chatThreadId, SendReadReceiptRequest sendReadReceiptRequest, Context context) {
        sendChatReadReceiptAsync(chatThreadId, sendReadReceiptRequest, context).block();
    }

    /**
     * Sends a message to a thread.
     *
     * @param chatThreadId           The thread id to send the message to.
     * @param sendChatMessageRequest Details of the message to send.
     * @return result of the send message operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<SendChatMessageResult>> sendChatMessageWithResponseAsync(
        String chatThreadId, SendChatMessageOptions sendChatMessageRequest) {
        return FluxUtil.withContext(
            context ->
                service.sendChatMessage(
                    this.client.getEndpoint(),
                    chatThreadId,
                    this.client.getApiVersion(),
                    sendChatMessageRequest,
                    context));
    }

    /**
     * Sends a message to a thread.
     *
     * @param chatThreadId           The thread id to send the message to.
     * @param sendChatMessageRequest Details of the message to send.
     * @param context                The context to associate with this operation.
     * @return result of the send message operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<SendChatMessageResult>> sendChatMessageWithResponseAsync(
        String chatThreadId, SendChatMessageOptions sendChatMessageRequest, Context context) {
        return service.sendChatMessage(
            this.client.getEndpoint(), chatThreadId, this.client.getApiVersion(), sendChatMessageRequest, context);
    }

    /**
     * Sends a message to a thread.
     *
     * @param chatThreadId           The thread id to send the message to.
     * @param sendChatMessageRequest Details of the message to send.
     * @return result of the send message operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SendChatMessageResult> sendChatMessageAsync(
        String chatThreadId, SendChatMessageOptions sendChatMessageRequest) {
        return sendChatMessageWithResponseAsync(chatThreadId, sendChatMessageRequest)
            .flatMap(
                (Response<SendChatMessageResult> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Sends a message to a thread.
     *
     * @param chatThreadId           The thread id to send the message to.
     * @param sendChatMessageRequest Details of the message to send.
     * @param context                The context to associate with this operation.
     * @return result of the send message operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SendChatMessageResult> sendChatMessageAsync(
        String chatThreadId, SendChatMessageOptions sendChatMessageRequest, Context context) {
        return sendChatMessageWithResponseAsync(chatThreadId, sendChatMessageRequest, context)
            .flatMap(
                (Response<SendChatMessageResult> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Sends a message to a thread.
     *
     * @param chatThreadId           The thread id to send the message to.
     * @param sendChatMessageRequest Details of the message to send.
     * @return result of the send message operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SendChatMessageResult sendChatMessage(String chatThreadId, SendChatMessageOptions sendChatMessageRequest) {
        return sendChatMessageAsync(chatThreadId, sendChatMessageRequest).block();
    }

    /**
     * Sends a message to a thread.
     *
     * @param chatThreadId           The thread id to send the message to.
     * @param sendChatMessageRequest Details of the message to send.
     * @param context                The context to associate with this operation.
     * @return result of the send message operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SendChatMessageResult sendChatMessage(
        String chatThreadId, SendChatMessageOptions sendChatMessageRequest, Context context) {
        return sendChatMessageAsync(chatThreadId, sendChatMessageRequest, context).block();
    }

    /**
     * Gets a list of messages from a thread.
     *
     * @param chatThreadId The thread id of the message.
     * @param maxPageSize  The maximum number of messages to be returned per page.
     * @param startTime    The earliest point in time to get messages up to. The timestamp should be in ISO8601 format:
     *                     `yyyy-MM-ddTHH:mm:ssZ`.
     * @return a list of messages from a thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ChatMessage>> listChatMessagesSinglePageAsync(
        String chatThreadId, Integer maxPageSize, OffsetDateTime startTime) {
        return FluxUtil.withContext(
            context ->
                service.listChatMessages(
                    this.client.getEndpoint(),
                    chatThreadId,
                    maxPageSize,
                    startTime,
                    this.client.getApiVersion(),
                    context))
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().getValue(),
                        res.getValue().getNextLink(),
                        null));
    }

    /**
     * Gets a list of messages from a thread.
     *
     * @param chatThreadId The thread id of the message.
     * @param maxPageSize  The maximum number of messages to be returned per page.
     * @param startTime    The earliest point in time to get messages up to. The timestamp should be in ISO8601 format:
     *                     `yyyy-MM-ddTHH:mm:ssZ`.
     * @param context      The context to associate with this operation.
     * @return a list of messages from a thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ChatMessage>> listChatMessagesSinglePageAsync(
        String chatThreadId, Integer maxPageSize, OffsetDateTime startTime, Context context) {
        return service.listChatMessages(
            this.client.getEndpoint(),
            chatThreadId,
            maxPageSize,
            startTime,
            this.client.getApiVersion(),
            context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().getValue(),
                        res.getValue().getNextLink(),
                        null));
    }

    /**
     * Gets a list of messages from a thread.
     *
     * @param chatThreadId The thread id of the message.
     * @param maxPageSize  The maximum number of messages to be returned per page.
     * @param startTime    The earliest point in time to get messages up to. The timestamp should be in ISO8601 format:
     *                     `yyyy-MM-ddTHH:mm:ssZ`.
     * @return a list of messages from a thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<ChatMessage> listChatMessagesAsync(
        String chatThreadId, Integer maxPageSize, OffsetDateTime startTime) {
        return new PagedFlux<>(
            () -> listChatMessagesSinglePageAsync(chatThreadId, maxPageSize, startTime),
            nextLink -> listChatMessagesNextSinglePageAsync(nextLink));
    }

    /**
     * Gets a list of messages from a thread.
     *
     * @param chatThreadId The thread id of the message.
     * @param maxPageSize  The maximum number of messages to be returned per page.
     * @param startTime    The earliest point in time to get messages up to. The timestamp should be in ISO8601 format:
     *                     `yyyy-MM-ddTHH:mm:ssZ`.
     * @param context      The context to associate with this operation.
     * @return a list of messages from a thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<ChatMessage> listChatMessagesAsync(
        String chatThreadId, Integer maxPageSize, OffsetDateTime startTime, Context context) {
        return new PagedFlux<>(
            () -> listChatMessagesSinglePageAsync(chatThreadId, maxPageSize, startTime, context),
            nextLink -> listChatMessagesNextSinglePageAsync(nextLink, context));
    }

    /**
     * Gets a list of messages from a thread.
     *
     * @param chatThreadId The thread id of the message.
     * @return a list of messages from a thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<ChatMessage> listChatMessagesAsync(String chatThreadId) {
        final Integer maxPageSize = null;
        final OffsetDateTime startTime = null;
        final Context context = null;
        return new PagedFlux<>(
            () -> listChatMessagesSinglePageAsync(chatThreadId, maxPageSize, startTime),
            nextLink -> listChatMessagesNextSinglePageAsync(nextLink, context));
    }

    /**
     * Gets a list of messages from a thread.
     *
     * @param chatThreadId The thread id of the message.
     * @param maxPageSize  The maximum number of messages to be returned per page.
     * @param startTime    The earliest point in time to get messages up to. The timestamp should be in ISO8601 format:
     *                     `yyyy-MM-ddTHH:mm:ssZ`.
     * @return a list of messages from a thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ChatMessage> listChatMessages(
        String chatThreadId, Integer maxPageSize, OffsetDateTime startTime) {
        return new PagedIterable<>(listChatMessagesAsync(chatThreadId, maxPageSize, startTime));
    }

    /**
     * Gets a list of messages from a thread.
     *
     * @param chatThreadId The thread id of the message.
     * @param maxPageSize  The maximum number of messages to be returned per page.
     * @param startTime    The earliest point in time to get messages up to. The timestamp should be in ISO8601 format:
     *                     `yyyy-MM-ddTHH:mm:ssZ`.
     * @param context      The context to associate with this operation.
     * @return a list of messages from a thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ChatMessage> listChatMessages(
        String chatThreadId, Integer maxPageSize, OffsetDateTime startTime, Context context) {
        return new PagedIterable<>(listChatMessagesAsync(chatThreadId, maxPageSize, startTime, context));
    }

    /**
     * Gets a list of messages from a thread.
     *
     * @param chatThreadId The thread id of the message.
     * @return a list of messages from a thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ChatMessage> listChatMessages(String chatThreadId) {
        final Integer maxPageSize = null;
        final OffsetDateTime startTime = null;
        final Context context = null;
        return new PagedIterable<>(listChatMessagesAsync(chatThreadId, maxPageSize, startTime));
    }

    /**
     * Gets a message by id.
     *
     * @param chatThreadId  The thread id to which the message was sent.
     * @param chatMessageId The message id.
     * @return a message by id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ChatMessage>> getChatMessageWithResponseAsync(String chatThreadId, String chatMessageId) {
        return FluxUtil.withContext(
            context ->
                service.getChatMessage(
                    this.client.getEndpoint(),
                    chatThreadId,
                    chatMessageId,
                    this.client.getApiVersion(),
                    context));
    }

    /**
     * Gets a message by id.
     *
     * @param chatThreadId  The thread id to which the message was sent.
     * @param chatMessageId The message id.
     * @param context       The context to associate with this operation.
     * @return a message by id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ChatMessage>> getChatMessageWithResponseAsync(
        String chatThreadId, String chatMessageId, Context context) {
        return service.getChatMessage(
            this.client.getEndpoint(), chatThreadId, chatMessageId, this.client.getApiVersion(), context);
    }

    /**
     * Gets a message by id.
     *
     * @param chatThreadId  The thread id to which the message was sent.
     * @param chatMessageId The message id.
     * @return a message by id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ChatMessage> getChatMessageAsync(String chatThreadId, String chatMessageId) {
        return getChatMessageWithResponseAsync(chatThreadId, chatMessageId)
            .flatMap(
                (Response<ChatMessage> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Gets a message by id.
     *
     * @param chatThreadId  The thread id to which the message was sent.
     * @param chatMessageId The message id.
     * @param context       The context to associate with this operation.
     * @return a message by id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ChatMessage> getChatMessageAsync(String chatThreadId, String chatMessageId, Context context) {
        return getChatMessageWithResponseAsync(chatThreadId, chatMessageId, context)
            .flatMap(
                (Response<ChatMessage> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Gets a message by id.
     *
     * @param chatThreadId  The thread id to which the message was sent.
     * @param chatMessageId The message id.
     * @return a message by id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ChatMessage getChatMessage(String chatThreadId, String chatMessageId) {
        return getChatMessageAsync(chatThreadId, chatMessageId).block();
    }

    /**
     * Gets a message by id.
     *
     * @param chatThreadId  The thread id to which the message was sent.
     * @param chatMessageId The message id.
     * @param context       The context to associate with this operation.
     * @return a message by id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ChatMessage getChatMessage(String chatThreadId, String chatMessageId, Context context) {
        return getChatMessageAsync(chatThreadId, chatMessageId, context).block();
    }

    /**
     * Updates a message.
     *
     * @param chatThreadId             The thread id to which the message was sent.
     * @param chatMessageId            The message id.
     * @param updateChatMessageRequest Details of the request to update the message.
     * @return the completion.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updateChatMessageWithResponseAsync(
        String chatThreadId, String chatMessageId, UpdateChatMessageOptions updateChatMessageRequest) {
        return FluxUtil.withContext(
            context ->
                service.updateChatMessage(
                    this.client.getEndpoint(),
                    chatThreadId,
                    chatMessageId,
                    this.client.getApiVersion(),
                    updateChatMessageRequest,
                    context));
    }

    /**
     * Updates a message.
     *
     * @param chatThreadId             The thread id to which the message was sent.
     * @param chatMessageId            The message id.
     * @param updateChatMessageRequest Details of the request to update the message.
     * @param context                  The context to associate with this operation.
     * @return the completion.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updateChatMessageWithResponseAsync(
        String chatThreadId,
        String chatMessageId,
        UpdateChatMessageOptions updateChatMessageRequest,
        Context context) {
        return service.updateChatMessage(
            this.client.getEndpoint(),
            chatThreadId,
            chatMessageId,
            this.client.getApiVersion(),
            updateChatMessageRequest,
            context);
    }

    /**
     * Updates a message.
     *
     * @param chatThreadId             The thread id to which the message was sent.
     * @param chatMessageId            The message id.
     * @param updateChatMessageRequest Details of the request to update the message.
     * @return the completion.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> updateChatMessageAsync(
        String chatThreadId, String chatMessageId, UpdateChatMessageOptions updateChatMessageRequest) {
        return updateChatMessageWithResponseAsync(chatThreadId, chatMessageId, updateChatMessageRequest)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Updates a message.
     *
     * @param chatThreadId             The thread id to which the message was sent.
     * @param chatMessageId            The message id.
     * @param updateChatMessageRequest Details of the request to update the message.
     * @param context                  The context to associate with this operation.
     * @return the completion.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> updateChatMessageAsync(
        String chatThreadId,
        String chatMessageId,
        UpdateChatMessageOptions updateChatMessageRequest,
        Context context) {
        return updateChatMessageWithResponseAsync(chatThreadId, chatMessageId, updateChatMessageRequest, context)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Updates a message.
     *
     * @param chatThreadId             The thread id to which the message was sent.
     * @param chatMessageId            The message id.
     * @param updateChatMessageRequest Details of the request to update the message.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void updateChatMessage(
        String chatThreadId, String chatMessageId, UpdateChatMessageOptions updateChatMessageRequest) {
        updateChatMessageAsync(chatThreadId, chatMessageId, updateChatMessageRequest).block();
    }

    /**
     * Updates a message.
     *
     * @param chatThreadId             The thread id to which the message was sent.
     * @param chatMessageId            The message id.
     * @param updateChatMessageRequest Details of the request to update the message.
     * @param context                  The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void updateChatMessage(
        String chatThreadId,
        String chatMessageId,
        UpdateChatMessageOptions updateChatMessageRequest,
        Context context) {
        updateChatMessageAsync(chatThreadId, chatMessageId, updateChatMessageRequest, context).block();
    }

    /**
     * Deletes a message.
     *
     * @param chatThreadId  The thread id to which the message was sent.
     * @param chatMessageId The message id.
     * @return the completion.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteChatMessageWithResponseAsync(String chatThreadId, String chatMessageId) {
        return FluxUtil.withContext(
            context ->
                service.deleteChatMessage(
                    this.client.getEndpoint(),
                    chatThreadId,
                    chatMessageId,
                    this.client.getApiVersion(),
                    context));
    }

    /**
     * Deletes a message.
     *
     * @param chatThreadId  The thread id to which the message was sent.
     * @param chatMessageId The message id.
     * @param context       The context to associate with this operation.
     * @return the completion.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteChatMessageWithResponseAsync(
        String chatThreadId, String chatMessageId, Context context) {
        return service.deleteChatMessage(
            this.client.getEndpoint(), chatThreadId, chatMessageId, this.client.getApiVersion(), context);
    }

    /**
     * Deletes a message.
     *
     * @param chatThreadId  The thread id to which the message was sent.
     * @param chatMessageId The message id.
     * @return the completion.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteChatMessageAsync(String chatThreadId, String chatMessageId) {
        return deleteChatMessageWithResponseAsync(chatThreadId, chatMessageId)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Deletes a message.
     *
     * @param chatThreadId  The thread id to which the message was sent.
     * @param chatMessageId The message id.
     * @param context       The context to associate with this operation.
     * @return the completion.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteChatMessageAsync(String chatThreadId, String chatMessageId, Context context) {
        return deleteChatMessageWithResponseAsync(chatThreadId, chatMessageId, context)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Deletes a message.
     *
     * @param chatThreadId  The thread id to which the message was sent.
     * @param chatMessageId The message id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteChatMessage(String chatThreadId, String chatMessageId) {
        deleteChatMessageAsync(chatThreadId, chatMessageId).block();
    }

    /**
     * Deletes a message.
     *
     * @param chatThreadId  The thread id to which the message was sent.
     * @param chatMessageId The message id.
     * @param context       The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteChatMessage(String chatThreadId, String chatMessageId, Context context) {
        deleteChatMessageAsync(chatThreadId, chatMessageId, context).block();
    }

    /**
     * Posts a typing event to a thread, on behalf of a user.
     *
     * @param chatThreadId Id of the thread.
     * @return the completion.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> sendTypingNotificationWithResponseAsync(String chatThreadId) {
        return FluxUtil.withContext(
            context ->
                service.sendTypingNotification(
                    this.client.getEndpoint(), chatThreadId, this.client.getApiVersion(), context));
    }

    /**
     * Posts a typing event to a thread, on behalf of a user.
     *
     * @param chatThreadId Id of the thread.
     * @param context      The context to associate with this operation.
     * @return the completion.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> sendTypingNotificationWithResponseAsync(String chatThreadId, Context context) {
        return service.sendTypingNotification(
            this.client.getEndpoint(), chatThreadId, this.client.getApiVersion(), context);
    }

    /**
     * Posts a typing event to a thread, on behalf of a user.
     *
     * @param chatThreadId Id of the thread.
     * @return the completion.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> sendTypingNotificationAsync(String chatThreadId) {
        return sendTypingNotificationWithResponseAsync(chatThreadId).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Posts a typing event to a thread, on behalf of a user.
     *
     * @param chatThreadId Id of the thread.
     * @param context      The context to associate with this operation.
     * @return the completion.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> sendTypingNotificationAsync(String chatThreadId, Context context) {
        return sendTypingNotificationWithResponseAsync(chatThreadId, context)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Posts a typing event to a thread, on behalf of a user.
     *
     * @param chatThreadId Id of the thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void sendTypingNotification(String chatThreadId) {
        sendTypingNotificationAsync(chatThreadId).block();
    }

    /**
     * Posts a typing event to a thread, on behalf of a user.
     *
     * @param chatThreadId Id of the thread.
     * @param context      The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void sendTypingNotification(String chatThreadId, Context context) {
        sendTypingNotificationAsync(chatThreadId, context).block();
    }

    /**
     * Gets the participants of a thread.
     *
     * @param chatThreadId Thread id to get participants for.
     * @param maxPageSize  The maximum number of participants to be returned per page.
     * @param skip         Skips participants up to a specified position in response.
     * @return the participants of a thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ChatParticipant>> listChatParticipantsSinglePageAsync(
        String chatThreadId, Integer maxPageSize, Integer skip) {
        return FluxUtil.withContext(
            context ->
                service.listChatParticipants(
                    this.client.getEndpoint(),
                    chatThreadId,
                    maxPageSize,
                    skip,
                    this.client.getApiVersion(),
                    context))
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().getValue(),
                        res.getValue().getNextLink(),
                        null));
    }

    /**
     * Gets the participants of a thread.
     *
     * @param chatThreadId Thread id to get participants for.
     * @param maxPageSize  The maximum number of participants to be returned per page.
     * @param skip         Skips participants up to a specified position in response.
     * @param context      The context to associate with this operation.
     * @return the participants of a thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ChatParticipant>> listChatParticipantsSinglePageAsync(
        String chatThreadId, Integer maxPageSize, Integer skip, Context context) {
        return service.listChatParticipants(
            this.client.getEndpoint(),
            chatThreadId,
            maxPageSize,
            skip,
            this.client.getApiVersion(),
            context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().getValue(),
                        res.getValue().getNextLink(),
                        null));
    }

    /**
     * Gets the participants of a thread.
     *
     * @param chatThreadId Thread id to get participants for.
     * @param maxPageSize  The maximum number of participants to be returned per page.
     * @param skip         Skips participants up to a specified position in response.
     * @return the participants of a thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<ChatParticipant> listChatParticipantsAsync(
        String chatThreadId, Integer maxPageSize, Integer skip) {
        return new PagedFlux<>(
            () -> listChatParticipantsSinglePageAsync(chatThreadId, maxPageSize, skip),
            nextLink -> listChatParticipantsNextSinglePageAsync(nextLink));
    }

    /**
     * Gets the participants of a thread.
     *
     * @param chatThreadId Thread id to get participants for.
     * @param maxPageSize  The maximum number of participants to be returned per page.
     * @param skip         Skips participants up to a specified position in response.
     * @param context      The context to associate with this operation.
     * @return the participants of a thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<ChatParticipant> listChatParticipantsAsync(
        String chatThreadId, Integer maxPageSize, Integer skip, Context context) {
        return new PagedFlux<>(
            () -> listChatParticipantsSinglePageAsync(chatThreadId, maxPageSize, skip, context),
            nextLink -> listChatParticipantsNextSinglePageAsync(nextLink, context));
    }

    /**
     * Gets the participants of a thread.
     *
     * @param chatThreadId Thread id to get participants for.
     * @return the participants of a thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<ChatParticipant> listChatParticipantsAsync(String chatThreadId) {
        final Integer maxPageSize = null;
        final Integer skip = null;
        final Context context = null;
        return new PagedFlux<>(
            () -> listChatParticipantsSinglePageAsync(chatThreadId, maxPageSize, skip),
            nextLink -> listChatParticipantsNextSinglePageAsync(nextLink, context));
    }

    /**
     * Gets the participants of a thread.
     *
     * @param chatThreadId Thread id to get participants for.
     * @param maxPageSize  The maximum number of participants to be returned per page.
     * @param skip         Skips participants up to a specified position in response.
     * @return the participants of a thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ChatParticipant> listChatParticipants(String chatThreadId, Integer maxPageSize, Integer skip) {
        return new PagedIterable<>(listChatParticipantsAsync(chatThreadId, maxPageSize, skip));
    }

    /**
     * Gets the participants of a thread.
     *
     * @param chatThreadId Thread id to get participants for.
     * @param maxPageSize  The maximum number of participants to be returned per page.
     * @param skip         Skips participants up to a specified position in response.
     * @param context      The context to associate with this operation.
     * @return the participants of a thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ChatParticipant> listChatParticipants(
        String chatThreadId, Integer maxPageSize, Integer skip, Context context) {
        return new PagedIterable<>(listChatParticipantsAsync(chatThreadId, maxPageSize, skip, context));
    }

    /**
     * Gets the participants of a thread.
     *
     * @param chatThreadId Thread id to get participants for.
     * @return the participants of a thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ChatParticipant> listChatParticipants(String chatThreadId) {
        final Integer maxPageSize = null;
        final Integer skip = null;
        final Context context = null;
        return new PagedIterable<>(listChatParticipantsAsync(chatThreadId, maxPageSize, skip));
    }

    /**
     * Adds thread participants to a thread. If participants already exist, no change occurs.
     *
     * @param chatThreadId               Id of the thread to add participants to.
     * @param addChatParticipantsRequest Participants to be added to the thread.
     * @return the completion.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> addChatParticipantsWithResponseAsync(
        String chatThreadId, AddChatParticipantsOptions addChatParticipantsRequest) {
        return FluxUtil.withContext(
            context ->
                service.addChatParticipants(
                    this.client.getEndpoint(),
                    chatThreadId,
                    this.client.getApiVersion(),
                    addChatParticipantsRequest,
                    context));
    }

    /**
     * Adds thread participants to a thread. If participants already exist, no change occurs.
     *
     * @param chatThreadId               Id of the thread to add participants to.
     * @param addChatParticipantsRequest Participants to be added to the thread.
     * @param context                    The context to associate with this operation.
     * @return the completion.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> addChatParticipantsWithResponseAsync(
        String chatThreadId, AddChatParticipantsOptions addChatParticipantsRequest, Context context) {
        return service.addChatParticipants(
            this.client.getEndpoint(),
            chatThreadId,
            this.client.getApiVersion(),
            addChatParticipantsRequest,
            context);
    }

    /**
     * Adds thread participants to a thread. If participants already exist, no change occurs.
     *
     * @param chatThreadId               Id of the thread to add participants to.
     * @param addChatParticipantsRequest Participants to be added to the thread.
     * @return the completion.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> addChatParticipantsAsync(
        String chatThreadId, AddChatParticipantsOptions addChatParticipantsRequest) {
        return addChatParticipantsWithResponseAsync(chatThreadId, addChatParticipantsRequest)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Adds thread participants to a thread. If participants already exist, no change occurs.
     *
     * @param chatThreadId               Id of the thread to add participants to.
     * @param addChatParticipantsRequest Participants to be added to the thread.
     * @param context                    The context to associate with this operation.
     * @return the completion.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> addChatParticipantsAsync(
        String chatThreadId, AddChatParticipantsOptions addChatParticipantsRequest, Context context) {
        return addChatParticipantsWithResponseAsync(chatThreadId, addChatParticipantsRequest, context)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Adds thread participants to a thread. If participants already exist, no change occurs.
     *
     * @param chatThreadId               Id of the thread to add participants to.
     * @param addChatParticipantsRequest Participants to be added to the thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void addChatParticipants(String chatThreadId, AddChatParticipantsOptions addChatParticipantsRequest) {
        addChatParticipantsAsync(chatThreadId, addChatParticipantsRequest).block();
    }

    /**
     * Adds thread participants to a thread. If participants already exist, no change occurs.
     *
     * @param chatThreadId               Id of the thread to add participants to.
     * @param addChatParticipantsRequest Participants to be added to the thread.
     * @param context                    The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void addChatParticipants(
        String chatThreadId, AddChatParticipantsOptions addChatParticipantsRequest, Context context) {
        addChatParticipantsAsync(chatThreadId, addChatParticipantsRequest, context).block();
    }

    /**
     * Remove a participant from a thread.
     *
     * @param chatThreadId      Thread id to remove the participant from.
     * @param chatParticipantId Id of the thread participant to remove from the thread.
     * @return the completion.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> removeChatParticipantWithResponseAsync(String chatThreadId, String chatParticipantId) {
        return FluxUtil.withContext(
            context ->
                service.removeChatParticipant(
                    this.client.getEndpoint(),
                    chatThreadId,
                    chatParticipantId,
                    this.client.getApiVersion(),
                    context));
    }

    /**
     * Remove a participant from a thread.
     *
     * @param chatThreadId      Thread id to remove the participant from.
     * @param chatParticipantId Id of the thread participant to remove from the thread.
     * @param context           The context to associate with this operation.
     * @return the completion.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> removeChatParticipantWithResponseAsync(
        String chatThreadId, String chatParticipantId, Context context) {
        return service.removeChatParticipant(
            this.client.getEndpoint(), chatThreadId, chatParticipantId, this.client.getApiVersion(), context);
    }

    /**
     * Remove a participant from a thread.
     *
     * @param chatThreadId      Thread id to remove the participant from.
     * @param chatParticipantId Id of the thread participant to remove from the thread.
     * @return the completion.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> removeChatParticipantAsync(String chatThreadId, String chatParticipantId) {
        return removeChatParticipantWithResponseAsync(chatThreadId, chatParticipantId)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Remove a participant from a thread.
     *
     * @param chatThreadId      Thread id to remove the participant from.
     * @param chatParticipantId Id of the thread participant to remove from the thread.
     * @param context           The context to associate with this operation.
     * @return the completion.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> removeChatParticipantAsync(String chatThreadId, String chatParticipantId, Context context) {
        return removeChatParticipantWithResponseAsync(chatThreadId, chatParticipantId, context)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Remove a participant from a thread.
     *
     * @param chatThreadId      Thread id to remove the participant from.
     * @param chatParticipantId Id of the thread participant to remove from the thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void removeChatParticipant(String chatThreadId, String chatParticipantId) {
        removeChatParticipantAsync(chatThreadId, chatParticipantId).block();
    }

    /**
     * Remove a participant from a thread.
     *
     * @param chatThreadId      Thread id to remove the participant from.
     * @param chatParticipantId Id of the thread participant to remove from the thread.
     * @param context           The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void removeChatParticipant(String chatThreadId, String chatParticipantId, Context context) {
        removeChatParticipantAsync(chatThreadId, chatParticipantId, context).block();
    }

    /**
     * Updates a thread's properties.
     *
     * @param chatThreadId            The id of the thread to update.
     * @param updateChatThreadRequest Request payload for updating a chat thread.
     * @return the completion.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updateChatThreadWithResponseAsync(
        String chatThreadId, UpdateChatThreadOptions updateChatThreadRequest) {
        return FluxUtil.withContext(
            context ->
                service.updateChatThread(
                    this.client.getEndpoint(),
                    chatThreadId,
                    this.client.getApiVersion(),
                    updateChatThreadRequest,
                    context));
    }

    /**
     * Updates a thread's properties.
     *
     * @param chatThreadId            The id of the thread to update.
     * @param updateChatThreadRequest Request payload for updating a chat thread.
     * @param context                 The context to associate with this operation.
     * @return the completion.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updateChatThreadWithResponseAsync(
        String chatThreadId, UpdateChatThreadOptions updateChatThreadRequest, Context context) {
        return service.updateChatThread(
            this.client.getEndpoint(), chatThreadId, this.client.getApiVersion(), updateChatThreadRequest, context);
    }

    /**
     * Updates a thread's properties.
     *
     * @param chatThreadId            The id of the thread to update.
     * @param updateChatThreadRequest Request payload for updating a chat thread.
     * @return the completion.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> updateChatThreadAsync(String chatThreadId, UpdateChatThreadOptions updateChatThreadRequest) {
        return updateChatThreadWithResponseAsync(chatThreadId, updateChatThreadRequest)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Updates a thread's properties.
     *
     * @param chatThreadId            The id of the thread to update.
     * @param updateChatThreadRequest Request payload for updating a chat thread.
     * @param context                 The context to associate with this operation.
     * @return the completion.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> updateChatThreadAsync(
        String chatThreadId, UpdateChatThreadOptions updateChatThreadRequest, Context context) {
        return updateChatThreadWithResponseAsync(chatThreadId, updateChatThreadRequest, context)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Updates a thread's properties.
     *
     * @param chatThreadId            The id of the thread to update.
     * @param updateChatThreadRequest Request payload for updating a chat thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void updateChatThread(String chatThreadId, UpdateChatThreadOptions updateChatThreadRequest) {
        updateChatThreadAsync(chatThreadId, updateChatThreadRequest).block();
    }

    /**
     * Updates a thread's properties.
     *
     * @param chatThreadId            The id of the thread to update.
     * @param updateChatThreadRequest Request payload for updating a chat thread.
     * @param context                 The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void updateChatThread(
        String chatThreadId, UpdateChatThreadOptions updateChatThreadRequest, Context context) {
        updateChatThreadAsync(chatThreadId, updateChatThreadRequest, context).block();
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @return the response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ChatMessageReadReceipt>> listChatReadReceiptsNextSinglePageAsync(String nextLink) {
        return FluxUtil.withContext(context -> service.listChatReadReceiptsNext(nextLink, context))
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().getValue(),
                        res.getValue().getNextLink(),
                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context  The context to associate with this operation.
     * @return the response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ChatMessageReadReceipt>> listChatReadReceiptsNextSinglePageAsync(
        String nextLink, Context context) {
        return service.listChatReadReceiptsNext(nextLink, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().getValue(),
                        res.getValue().getNextLink(),
                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @return collection of chat messages for a particular chat thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ChatMessage>> listChatMessagesNextSinglePageAsync(String nextLink) {
        return FluxUtil.withContext(context -> service.listChatMessagesNext(nextLink, context))
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().getValue(),
                        res.getValue().getNextLink(),
                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context  The context to associate with this operation.
     * @return collection of chat messages for a particular chat thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ChatMessage>> listChatMessagesNextSinglePageAsync(String nextLink, Context context) {
        return service.listChatMessagesNext(nextLink, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().getValue(),
                        res.getValue().getNextLink(),
                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @return collection of participants belong to a particular thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ChatParticipant>> listChatParticipantsNextSinglePageAsync(String nextLink) {
        return FluxUtil.withContext(context -> service.listChatParticipantsNext(nextLink, context))
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().getValue(),
                        res.getValue().getNextLink(),
                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context  The context to associate with this operation.
     * @return collection of participants belong to a particular thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException           thrown if the request is rejected by server.
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ChatParticipant>> listChatParticipantsNextSinglePageAsync(
        String nextLink, Context context) {
        return service.listChatParticipantsNext(nextLink, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().getValue(),
                        res.getValue().getNextLink(),
                        null));
    }
}
