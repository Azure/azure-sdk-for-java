// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.communication.chat.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Request payload for typing notifications.
 */
@Fluent
public final class TypingNotificationOptions implements JsonSerializable<TypingNotificationOptions> {
    /*
     * The display name of the typing notification sender. This property is used to populate sender name for push
     * notifications.
     */
    private String senderDisplayName;

    /**
     * Creates an instance of TypingNotificationOptions class.
     */
    public TypingNotificationOptions() {
    }

    /**
     * Get the senderDisplayName property: The display name of the typing notification sender. This property is used to
     * populate sender name for push notifications.
     * 
     * @return the senderDisplayName value.
     */
    public String getSenderDisplayName() {
        return this.senderDisplayName;
    }

    /**
     * Set the senderDisplayName property: The display name of the typing notification sender. This property is used to
     * populate sender name for push notifications.
     * 
     * @param senderDisplayName the senderDisplayName value to set.
     * @return the TypingNotificationOptions object itself.
     */
    public TypingNotificationOptions setSenderDisplayName(String senderDisplayName) {
        this.senderDisplayName = senderDisplayName;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("senderDisplayName", this.senderDisplayName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TypingNotificationOptions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TypingNotificationOptions if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the TypingNotificationOptions.
     */
    public static TypingNotificationOptions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TypingNotificationOptions deserializedTypingNotificationOptions = new TypingNotificationOptions();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("senderDisplayName".equals(fieldName)) {
                    deserializedTypingNotificationOptions.senderDisplayName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTypingNotificationOptions;
        });
    }
}
