// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.communication.chat.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Request payload for creating a chat thread.
 */
@Fluent
public final class CreateChatThreadOptions implements JsonSerializable<CreateChatThreadOptions> {
    /*
     * The chat thread topic.
     */
    private String topic;

    /*
     * Participants to be added to the chat thread.
     */
    private List<ChatParticipant> participants;

    /*
     * Contextual metadata for the thread. The metadata consists of name/value pairs. The total size of all metadata
     * pairs can be up to 1KB in size.
     */
    private Map<String, String> metadata;

    /*
     * Data retention policy for auto deletion.
     */
    private ChatRetentionPolicy retentionPolicy;

    /**
     * Creates an instance of CreateChatThreadOptions class.
     */
    public CreateChatThreadOptions() {
    }

    /**
     * Get the topic property: The chat thread topic.
     * 
     * @return the topic.
     */
    public String getTopic() {
        return this.topic;
    }

    /**
     * Set the topic property: The chat thread topic.
     * 
     * @param topic the topic value to set.
     * @return the CreateChatThreadOptions object itself.
     */
    public CreateChatThreadOptions setTopic(String topic) {
        this.topic = topic;
        return this;
    }

    /**
     * Get the participants property: Participants to be added to the chat thread.
     * 
     * @return the participants.
     */
    public List<ChatParticipant> getParticipants() {
        return this.participants;
    }

    /**
     * Set the participants property: Participants to be added to the chat thread.
     * 
     * @param participants the participants to set.
     * @return the CreateChatThreadOptions object itself.
     */
    public CreateChatThreadOptions setParticipants(List<ChatParticipant> participants) {
        this.participants = participants;
        return this;
    }

    /**
     * Get the metadata property: Contextual metadata for the thread. The metadata consists of name/value pairs. The
     * total size of all metadata pairs can be up to 1KB in size.
     * 
     * @return the metadata.
     */
    public Map<String, String> getMetadata() {
        return this.metadata;
    }

    /**
     * Set the metadata property: Contextual metadata for the thread. The metadata consists of name/value pairs. The
     * total size of all metadata pairs can be up to 1KB in size.
     * 
     * @param metadata the metadata value to set.
     * @return the CreateChatThreadOptions object itself.
     */
    public CreateChatThreadOptions setMetadata(Map<String, String> metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * Get the retentionPolicy property: Data retention policy for auto deletion.
     * 
     * @return the retentionPolicy.
     */
    public ChatRetentionPolicy getRetentionPolicy() {
        return this.retentionPolicy;
    }

    /**
     * Set the retentionPolicy property: Data retention policy for auto deletion.
     * 
     * @param retentionPolicy the retentionPolicy value to set.
     * @return the CreateChatThreadOptions object itself.
     */
    public CreateChatThreadOptions setRetentionPolicy(ChatRetentionPolicy retentionPolicy) {
        this.retentionPolicy = retentionPolicy;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("topic", this.topic);
        jsonWriter.writeArrayField("participants", this.participants, (writer, element) -> writer.writeJson(element));
        if (this.metadata != null) {
            jsonWriter.writeMapField("metadata", this.metadata, (writer, element) -> writer.writeString(element));
        }
        jsonWriter.writeJsonField("retentionPolicy", this.retentionPolicy);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CreateChatThreadOptions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CreateChatThreadOptions if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CreateChatThreadOptions.
     */
    public static CreateChatThreadOptions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CreateChatThreadOptions deserializedCreateChatThreadOptions = new CreateChatThreadOptions();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("topic".equals(fieldName)) {
                    deserializedCreateChatThreadOptions.topic = reader.getString();
                } else if ("participants".equals(fieldName)) {
                    List<ChatParticipant> participants = reader.readArray(reader1 -> ChatParticipant.fromJson(reader1));
                    deserializedCreateChatThreadOptions.participants = participants;
                } else if ("metadata".equals(fieldName)) {
                    Map<String, String> metadata = reader.readMap(reader1 -> reader1.getString());
                    deserializedCreateChatThreadOptions.metadata = metadata;
                } else if ("retentionPolicy".equals(fieldName)) {
                    deserializedCreateChatThreadOptions.retentionPolicy = ChatRetentionPolicy.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCreateChatThreadOptions;
        });
    }
}
