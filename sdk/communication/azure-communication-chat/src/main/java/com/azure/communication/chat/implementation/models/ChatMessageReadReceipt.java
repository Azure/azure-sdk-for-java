// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.communication.chat.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * A chat message read receipt indicates the time a chat message was read by a recipient.
 */
@Fluent
public final class ChatMessageReadReceipt implements JsonSerializable<ChatMessageReadReceipt> {
    /*
     * Identifies a participant in Azure Communication services. A participant is, for example, a phone number or an
     * Azure communication user. This model is polymorphic: Apart from kind and rawId, at most one further property may
     * be set which must match the kind enum value.
     */
    private CommunicationIdentifierModel senderCommunicationIdentifier;

    /*
     * Id of the chat message that has been read. This id is generated by the server.
     */
    private String chatMessageId;

    /*
     * The time at which the message was read. The timestamp is in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`.
     */
    private OffsetDateTime readOn;

    /**
     * Creates an instance of ChatMessageReadReceipt class.
     */
    public ChatMessageReadReceipt() {
    }

    /**
     * Get the senderCommunicationIdentifier property: Identifies a participant in Azure Communication services. A
     * participant is, for example, a phone number or an Azure communication user. This model is polymorphic: Apart from
     * kind and rawId, at most one further property may be set which must match the kind enum value.
     * 
     * @return the senderCommunicationIdentifier value.
     */
    public CommunicationIdentifierModel getSenderCommunicationIdentifier() {
        return this.senderCommunicationIdentifier;
    }

    /**
     * Set the senderCommunicationIdentifier property: Identifies a participant in Azure Communication services. A
     * participant is, for example, a phone number or an Azure communication user. This model is polymorphic: Apart from
     * kind and rawId, at most one further property may be set which must match the kind enum value.
     * 
     * @param senderCommunicationIdentifier the senderCommunicationIdentifier value to set.
     * @return the ChatMessageReadReceipt object itself.
     */
    public ChatMessageReadReceipt
        setSenderCommunicationIdentifier(CommunicationIdentifierModel senderCommunicationIdentifier) {
        this.senderCommunicationIdentifier = senderCommunicationIdentifier;
        return this;
    }

    /**
     * Get the chatMessageId property: Id of the chat message that has been read. This id is generated by the server.
     * 
     * @return the chatMessageId value.
     */
    public String getChatMessageId() {
        return this.chatMessageId;
    }

    /**
     * Set the chatMessageId property: Id of the chat message that has been read. This id is generated by the server.
     * 
     * @param chatMessageId the chatMessageId value to set.
     * @return the ChatMessageReadReceipt object itself.
     */
    public ChatMessageReadReceipt setChatMessageId(String chatMessageId) {
        this.chatMessageId = chatMessageId;
        return this;
    }

    /**
     * Get the readOn property: The time at which the message was read. The timestamp is in RFC3339 format:
     * `yyyy-MM-ddTHH:mm:ssZ`.
     * 
     * @return the readOn value.
     */
    public OffsetDateTime getReadOn() {
        return this.readOn;
    }

    /**
     * Set the readOn property: The time at which the message was read. The timestamp is in RFC3339 format:
     * `yyyy-MM-ddTHH:mm:ssZ`.
     * 
     * @param readOn the readOn value to set.
     * @return the ChatMessageReadReceipt object itself.
     */
    public ChatMessageReadReceipt setReadOn(OffsetDateTime readOn) {
        this.readOn = readOn;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("senderCommunicationIdentifier", this.senderCommunicationIdentifier);
        jsonWriter.writeStringField("chatMessageId", this.chatMessageId);
        jsonWriter.writeStringField("readOn",
            this.readOn == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.readOn));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ChatMessageReadReceipt from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ChatMessageReadReceipt if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ChatMessageReadReceipt.
     */
    public static ChatMessageReadReceipt fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ChatMessageReadReceipt deserializedChatMessageReadReceipt = new ChatMessageReadReceipt();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("senderCommunicationIdentifier".equals(fieldName)) {
                    deserializedChatMessageReadReceipt.senderCommunicationIdentifier
                        = CommunicationIdentifierModel.fromJson(reader);
                } else if ("chatMessageId".equals(fieldName)) {
                    deserializedChatMessageReadReceipt.chatMessageId = reader.getString();
                } else if ("readOn".equals(fieldName)) {
                    deserializedChatMessageReadReceipt.readOn = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedChatMessageReadReceipt;
        });
    }
}
