// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.communication.chat.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;

import java.io.IOException;
import java.util.List;

/**
 * Result of the add chat participants operation.
 */
@Immutable
public final class AddChatParticipantsResult implements JsonSerializable<AddChatParticipantsResult> {
    /**
     * The participants that failed to be added to the chat thread.
     */
    private List<ChatError> invalidParticipants;

    /**
     *
     * @param invalidParticipants List of errors relating to invalid participants
     */
    public AddChatParticipantsResult(List<ChatError> invalidParticipants) {
        this.invalidParticipants = invalidParticipants;
    }

    /**
     * Get the invalidParticipants property: The participants that failed to be added to the chat thread.
     * The 'target' property of each ChatError will reference the failed participant.
     *
     * @return the invalidParticipants value.
     */
    public List<ChatError> getInvalidParticipants() {
        return this.invalidParticipants;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        // Not serializing 'invalidParticipants' as it is json read only.
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AddChatParticipantsResult from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of AddChatParticipantsResult if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AddChatParticipantsResult.
     */
    public static AddChatParticipantsResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<ChatError> invalidParticipants = null;
            while (jsonReader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("invalidParticipants".equals(fieldName)) {
                    invalidParticipants = reader.readArray(ChatError::fromJson);
                } else {
                    reader.skipChildren();
                }
            }
            return new AddChatParticipantsResult(invalidParticipants);
        });
    }
}
