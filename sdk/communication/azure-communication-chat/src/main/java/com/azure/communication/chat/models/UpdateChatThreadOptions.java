// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.communication.chat.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.fasterxml.jackson.annotation.JsonProperty;

import java.io.IOException;

/**
 * Request payload for updating a chat thread.
 */
@Fluent
public final class UpdateChatThreadOptions implements JsonSerializable<UpdateChatThreadOptions> {
    /*
     * Chat thread topic.
     */
    @JsonProperty(value = "topic")
    private String topic;

    /**
     * Creates an instance of UpdateChatThreadOptions class.
     */
    public UpdateChatThreadOptions() {
    }

    /**
     * Get the topic property: Chat thread topic.
     *
     * @return the topic value.
     */
    public String getTopic() {
        return this.topic;
    }

    /**
     * Set the topic property: Chat thread topic.
     *
     * @param topic the topic value to set.
     * @return the UpdateChatThreadOptions object itself.
     */
    public UpdateChatThreadOptions setTopic(String topic) {
        this.topic = topic;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("topic", topic);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SendChatMessageResult from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of SendChatMessageResult if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SendChatMessageResult.
     */
    public static UpdateChatThreadOptions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UpdateChatThreadOptions options = new UpdateChatThreadOptions();
            while (jsonReader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("topic".equals(fieldName)) {
                    options.setTopic(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            return options;
        });
    }
}
