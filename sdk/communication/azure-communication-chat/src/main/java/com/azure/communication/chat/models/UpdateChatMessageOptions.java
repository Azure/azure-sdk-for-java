// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.communication.chat.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.fasterxml.jackson.annotation.JsonProperty;

import java.io.IOException;
import java.util.Map;

/**
 * Request payload for updating a chat message.
 */
@Fluent
public final class UpdateChatMessageOptions implements JsonSerializable<UpdateChatMessageOptions> {
    /*
     * Chat message content.
     */
    @JsonProperty(value = "content")
    private String content;

    /*
     * Message metadata.
     */
    @JsonProperty(value = "metadata")
    private Map<String, String> metadata;

    /**
     * Creates an instance of UpdateChatMessageOptions class.
     */
    public UpdateChatMessageOptions() {
    }

    /**
     * Get the content property: Chat message content.
     *
     * @return the content value.
     */
    public String getContent() {
        return this.content;
    }

    /**
     * Set the content property: Chat message content.
     *
     * @param content the content value to set.
     * @return the UpdateChatMessageOptions object itself.
     */
    public UpdateChatMessageOptions setContent(String content) {
        this.content = content;
        return this;
    }

    /**
     * Get the metadata property: Message metadata.
     *
     * @return the metadata value.
     */
    public Map<String, String> getMetadata() {
        return this.metadata;
    }

    /**
     * Set the metadata property: Message metadata.
     *
     * @param metadata the metadata value to set.
     * @return the UpdateChatMessageOptions object itself.
     */
    public UpdateChatMessageOptions setMetadata(Map<String, String> metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("content", content);
        jsonWriter.writeMapField("metadata", metadata, JsonWriter::writeString);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SendChatMessageOptions from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of SendChatMessageOptions if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SendChatMessageOptions.
     */
    public static SendChatMessageOptions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            final SendChatMessageOptions options = new SendChatMessageOptions();
            while (jsonReader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("content".equals(fieldName)) {
                    options.setContent(reader.getString());
                } else if ("metadata".equals(fieldName)) {
                    options.setMetadata(reader.readMap(JsonReader::getString));
                } else {
                    reader.skipChildren();
                }
            }
            return options;
        });
    }
}
