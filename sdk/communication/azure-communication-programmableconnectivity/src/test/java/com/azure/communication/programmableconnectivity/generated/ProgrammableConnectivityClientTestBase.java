// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.communication.programmableconnectivity.generated;

// The Java test files under 'generated' package are generated for your reference.
// If you wish to modify these files, please copy them out of the 'generated' package, and modify there.
// See https://aka.ms/azsdk/dpg/java/tests for guide on adding a test.

import com.azure.communication.programmableconnectivity.DeviceLocationClient;
import com.azure.communication.programmableconnectivity.DeviceNetworkClient;
import com.azure.communication.programmableconnectivity.NumberVerificationClient;
import com.azure.communication.programmableconnectivity.ProgrammableConnectivityClientBuilder;
import com.azure.communication.programmableconnectivity.SimSwapClient;
import com.azure.core.http.policy.HttpLogDetailLevel;
import com.azure.core.http.policy.HttpLogOptions;
import com.azure.core.test.TestMode;
import com.azure.core.test.TestProxyTestBase;
import com.azure.core.test.utils.MockTokenCredential;
import com.azure.core.util.Configuration;
import com.azure.identity.DefaultAzureCredentialBuilder;

class ProgrammableConnectivityClientTestBase extends TestProxyTestBase {
    protected DeviceLocationClient deviceLocationClient;

    protected DeviceNetworkClient deviceNetworkClient;

    protected NumberVerificationClient numberVerificationClient;

    protected SimSwapClient simSwapClient;

    @Override
    protected void beforeTest() {
        ProgrammableConnectivityClientBuilder deviceLocationClientbuilder = new ProgrammableConnectivityClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
            .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            deviceLocationClientbuilder.credential(new MockTokenCredential());
        } else if (getTestMode() == TestMode.RECORD) {
            deviceLocationClientbuilder.addPolicy(interceptorManager.getRecordPolicy())
                .credential(new DefaultAzureCredentialBuilder().build());
        } else if (getTestMode() == TestMode.LIVE) {
            deviceLocationClientbuilder.credential(new DefaultAzureCredentialBuilder().build());
        }
        deviceLocationClient = deviceLocationClientbuilder.buildDeviceLocationClient();

        ProgrammableConnectivityClientBuilder deviceNetworkClientbuilder = new ProgrammableConnectivityClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
            .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            deviceNetworkClientbuilder.credential(new MockTokenCredential());
        } else if (getTestMode() == TestMode.RECORD) {
            deviceNetworkClientbuilder.addPolicy(interceptorManager.getRecordPolicy())
                .credential(new DefaultAzureCredentialBuilder().build());
        } else if (getTestMode() == TestMode.LIVE) {
            deviceNetworkClientbuilder.credential(new DefaultAzureCredentialBuilder().build());
        }
        deviceNetworkClient = deviceNetworkClientbuilder.buildDeviceNetworkClient();

        ProgrammableConnectivityClientBuilder numberVerificationClientbuilder
            = new ProgrammableConnectivityClientBuilder()
                .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
                .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            numberVerificationClientbuilder.credential(new MockTokenCredential());
        } else if (getTestMode() == TestMode.RECORD) {
            numberVerificationClientbuilder.addPolicy(interceptorManager.getRecordPolicy())
                .credential(new DefaultAzureCredentialBuilder().build());
        } else if (getTestMode() == TestMode.LIVE) {
            numberVerificationClientbuilder.credential(new DefaultAzureCredentialBuilder().build());
        }
        numberVerificationClient = numberVerificationClientbuilder.buildNumberVerificationClient();

        ProgrammableConnectivityClientBuilder simSwapClientbuilder = new ProgrammableConnectivityClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
            .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            simSwapClientbuilder.credential(new MockTokenCredential());
        } else if (getTestMode() == TestMode.RECORD) {
            simSwapClientbuilder.addPolicy(interceptorManager.getRecordPolicy())
                .credential(new DefaultAzureCredentialBuilder().build());
        } else if (getTestMode() == TestMode.LIVE) {
            simSwapClientbuilder.credential(new DefaultAzureCredentialBuilder().build());
        }
        simSwapClient = simSwapClientbuilder.buildSimSwapClient();

    }
}
