// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.communication.programmableconnectivity.implementation;

import com.azure.communication.programmableconnectivity.ProgrammableConnectivityServiceVersion;
import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in NumberVerifications.
 */
public final class NumberVerificationsImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final NumberVerificationsService service;

    /**
     * The service client containing this operation class.
     */
    private final ProgrammableConnectivityClientImpl client;

    /**
     * Initializes an instance of NumberVerificationsImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    NumberVerificationsImpl(ProgrammableConnectivityClientImpl client) {
        this.service = RestProxy.create(NumberVerificationsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public ProgrammableConnectivityServiceVersion getServiceVersion() {
        return client.getServiceVersion();
    }

    /**
     * The interface defining all the services for ProgrammableConnectivityClientNumberVerifications to be used by the
     * proxy service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "ProgrammableConnecti")
    public interface NumberVerificationsService {
        @Post("/number-verification/number:verify")
        @ExpectedResponses({ 302 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> verifyWithoutCode(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("apc-gateway-id") String apcGatewayId,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData body, RequestOptions requestOptions, Context context);

        @Post("/number-verification/number:verify")
        @ExpectedResponses({ 302 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> verifyWithoutCodeSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("apc-gateway-id") String apcGatewayId,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData body, RequestOptions requestOptions, Context context);

        @Post("/number-verification/number:verify")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> verifyWithCode(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("apc-gateway-id") String apcGatewayId,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData body, RequestOptions requestOptions, Context context);

        @Post("/number-verification/number:verify")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> verifyWithCodeSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("apc-gateway-id") String apcGatewayId,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData body, RequestOptions requestOptions, Context context);
    }

    /**
     * Verifies the phone number (MSISDN) associated with a device. As part of the frontend authorization flow, the
     * device is redirected to the operator network to authenticate directly.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     networkIdentifier (Required): {
     *         identifierType: String (Required)
     *         identifier: String (Required)
     *     }
     *     phoneNumber: String (Optional)
     *     hashedPhoneNumber: String (Optional)
     *     redirectUri: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param apcGatewayId The identifier of the APC Gateway resource which should handle this request.
     * @param body Body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> verifyWithoutCodeWithResponseAsync(String apcGatewayId, BinaryData body,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.verifyWithoutCode(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), apcGatewayId, contentType, accept, body, requestOptions,
            context));
    }

    /**
     * Verifies the phone number (MSISDN) associated with a device. As part of the frontend authorization flow, the
     * device is redirected to the operator network to authenticate directly.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     networkIdentifier (Required): {
     *         identifierType: String (Required)
     *         identifier: String (Required)
     *     }
     *     phoneNumber: String (Optional)
     *     hashedPhoneNumber: String (Optional)
     *     redirectUri: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param apcGatewayId The identifier of the APC Gateway resource which should handle this request.
     * @param body Body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> verifyWithoutCodeWithResponse(String apcGatewayId, BinaryData body,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.verifyWithoutCodeSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            apcGatewayId, contentType, accept, body, requestOptions, Context.NONE);
    }

    /**
     * Verifies the phone number (MSISDN) associated with a device.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     apcCode: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     verificationResult: boolean (Required)
     * }
     * }
     * </pre>
     * 
     * @param apcGatewayId The identifier of the APC Gateway resource which should handle this request.
     * @param body Body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response verifying number of device along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> verifyWithCodeWithResponseAsync(String apcGatewayId, BinaryData body,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.verifyWithCode(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
                apcGatewayId, contentType, accept, body, requestOptions, context));
    }

    /**
     * Verifies the phone number (MSISDN) associated with a device.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     apcCode: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     verificationResult: boolean (Required)
     * }
     * }
     * </pre>
     * 
     * @param apcGatewayId The identifier of the APC Gateway resource which should handle this request.
     * @param body Body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response verifying number of device along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> verifyWithCodeWithResponse(String apcGatewayId, BinaryData body,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.verifyWithCodeSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            apcGatewayId, contentType, accept, body, requestOptions, Context.NONE);
    }
}
