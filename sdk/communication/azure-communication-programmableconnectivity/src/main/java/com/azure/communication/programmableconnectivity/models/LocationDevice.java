// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.communication.programmableconnectivity.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Device information needed by operator to provide location information. Include exactly one of these properties to
 * identify your device.
 */
@Fluent
public final class LocationDevice implements JsonSerializable<LocationDevice> {
    /*
     * External identifier or network access identifier of the device
     */
    @Generated
    private String networkAccessIdentifier;

    /*
     * Phone number in E.164 format (starting with country code), and optionally prefixed with '+'
     */
    @Generated
    private String phoneNumber;

    /*
     * The Ipv4 address
     */
    @Generated
    private Ipv4Address ipv4Address;

    /*
     * The Ipv6 address
     */
    @Generated
    private Ipv6Address ipv6Address;

    /**
     * Creates an instance of LocationDevice class.
     */
    @Generated
    public LocationDevice() {
    }

    /**
     * Get the networkAccessIdentifier property: External identifier or network access identifier of the device.
     * 
     * @return the networkAccessIdentifier value.
     */
    @Generated
    public String getNetworkAccessIdentifier() {
        return this.networkAccessIdentifier;
    }

    /**
     * Set the networkAccessIdentifier property: External identifier or network access identifier of the device.
     * 
     * @param networkAccessIdentifier the networkAccessIdentifier value to set.
     * @return the LocationDevice object itself.
     */
    @Generated
    public LocationDevice setNetworkAccessIdentifier(String networkAccessIdentifier) {
        this.networkAccessIdentifier = networkAccessIdentifier;
        return this;
    }

    /**
     * Get the phoneNumber property: Phone number in E.164 format (starting with country code), and optionally prefixed
     * with '+'.
     * 
     * @return the phoneNumber value.
     */
    @Generated
    public String getPhoneNumber() {
        return this.phoneNumber;
    }

    /**
     * Set the phoneNumber property: Phone number in E.164 format (starting with country code), and optionally prefixed
     * with '+'.
     * 
     * @param phoneNumber the phoneNumber value to set.
     * @return the LocationDevice object itself.
     */
    @Generated
    public LocationDevice setPhoneNumber(String phoneNumber) {
        this.phoneNumber = phoneNumber;
        return this;
    }

    /**
     * Get the ipv4Address property: The Ipv4 address.
     * 
     * @return the ipv4Address value.
     */
    @Generated
    public Ipv4Address getIpv4Address() {
        return this.ipv4Address;
    }

    /**
     * Set the ipv4Address property: The Ipv4 address.
     * 
     * @param ipv4Address the ipv4Address value to set.
     * @return the LocationDevice object itself.
     */
    @Generated
    public LocationDevice setIpv4Address(Ipv4Address ipv4Address) {
        this.ipv4Address = ipv4Address;
        return this;
    }

    /**
     * Get the ipv6Address property: The Ipv6 address.
     * 
     * @return the ipv6Address value.
     */
    @Generated
    public Ipv6Address getIpv6Address() {
        return this.ipv6Address;
    }

    /**
     * Set the ipv6Address property: The Ipv6 address.
     * 
     * @param ipv6Address the ipv6Address value to set.
     * @return the LocationDevice object itself.
     */
    @Generated
    public LocationDevice setIpv6Address(Ipv6Address ipv6Address) {
        this.ipv6Address = ipv6Address;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("networkAccessIdentifier", this.networkAccessIdentifier);
        jsonWriter.writeStringField("phoneNumber", this.phoneNumber);
        jsonWriter.writeJsonField("ipv4Address", this.ipv4Address);
        jsonWriter.writeJsonField("ipv6Address", this.ipv6Address);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LocationDevice from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LocationDevice if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the LocationDevice.
     */
    @Generated
    public static LocationDevice fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LocationDevice deserializedLocationDevice = new LocationDevice();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("networkAccessIdentifier".equals(fieldName)) {
                    deserializedLocationDevice.networkAccessIdentifier = reader.getString();
                } else if ("phoneNumber".equals(fieldName)) {
                    deserializedLocationDevice.phoneNumber = reader.getString();
                } else if ("ipv4Address".equals(fieldName)) {
                    deserializedLocationDevice.ipv4Address = Ipv4Address.fromJson(reader);
                } else if ("ipv6Address".equals(fieldName)) {
                    deserializedLocationDevice.ipv6Address = Ipv6Address.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLocationDevice;
        });
    }
}
