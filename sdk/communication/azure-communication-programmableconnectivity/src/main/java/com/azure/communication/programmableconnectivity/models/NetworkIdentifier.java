// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.communication.programmableconnectivity.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Identifier for the network to be queried.
 */
@Immutable
public final class NetworkIdentifier implements JsonSerializable<NetworkIdentifier> {
    /*
     * The type of identifier for the network. one of: 'IPv4', 'IPv6', 'MSISDN', 'NetworkCode'
     */
    @Generated
    private final String identifierType;

    /*
     * The network identifier, based on the identifierType: an IPv4 address, an IPv6 address, an MSISDN, or a Network
     * Code.
     * A Network Code may be obtained from APC documentation or from the APC /Network:retrieve endpoint.
     */
    @Generated
    private final String identifier;

    /**
     * Creates an instance of NetworkIdentifier class.
     * 
     * @param identifierType the identifierType value to set.
     * @param identifier the identifier value to set.
     */
    @Generated
    public NetworkIdentifier(String identifierType, String identifier) {
        this.identifierType = identifierType;
        this.identifier = identifier;
    }

    /**
     * Get the identifierType property: The type of identifier for the network. one of: 'IPv4', 'IPv6', 'MSISDN',
     * 'NetworkCode'.
     * 
     * @return the identifierType value.
     */
    @Generated
    public String getIdentifierType() {
        return this.identifierType;
    }

    /**
     * Get the identifier property: The network identifier, based on the identifierType: an IPv4 address, an IPv6
     * address, an MSISDN, or a Network Code.
     * A Network Code may be obtained from APC documentation or from the APC /Network:retrieve endpoint.
     * 
     * @return the identifier value.
     */
    @Generated
    public String getIdentifier() {
        return this.identifier;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("identifierType", this.identifierType);
        jsonWriter.writeStringField("identifier", this.identifier);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NetworkIdentifier from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NetworkIdentifier if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the NetworkIdentifier.
     */
    @Generated
    public static NetworkIdentifier fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String identifierType = null;
            String identifier = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("identifierType".equals(fieldName)) {
                    identifierType = reader.getString();
                } else if ("identifier".equals(fieldName)) {
                    identifier = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return new NetworkIdentifier(identifierType, identifier);
        });
    }
}
