// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.communication.programmableconnectivity;

import com.azure.communication.programmableconnectivity.implementation.SimSwapsImpl;
import com.azure.communication.programmableconnectivity.models.SimSwapRetrievalContent;
import com.azure.communication.programmableconnectivity.models.SimSwapRetrievalResult;
import com.azure.communication.programmableconnectivity.models.SimSwapVerificationContent;
import com.azure.communication.programmableconnectivity.models.SimSwapVerificationResult;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;

/**
 * Initializes a new instance of the synchronous ProgrammableConnectivityClient type.
 */
@ServiceClient(builder = ProgrammableConnectivityClientBuilder.class)
public final class SimSwapClient {
    @Generated
    private final SimSwapsImpl serviceClient;

    /**
     * Initializes an instance of SimSwapClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    SimSwapClient(SimSwapsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Provides timestamp of latest SIM swap.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     phoneNumber: String (Optional)
     *     networkIdentifier (Required): {
     *         identifierType: String (Required)
     *         identifier: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     date: OffsetDateTime (Optional)
     * }
     * }
     * </pre>
     * 
     * @param apcGatewayId The identifier of the APC Gateway resource which should handle this request.
     * @param body Body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response with SimSwap date along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> retrieveWithResponse(String apcGatewayId, BinaryData body,
        RequestOptions requestOptions) {
        return this.serviceClient.retrieveWithResponse(apcGatewayId, body, requestOptions);
    }

    /**
     * Verifies if a SIM swap has been performed during a past period (defined in the request with 'maxAgeHours'
     * attribute). Returns 'True' if a SIM swap has occured.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     phoneNumber: String (Optional)
     *     maxAgeHours: Integer (Optional)
     *     networkIdentifier (Required): {
     *         identifierType: String (Required)
     *         identifier: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     verificationResult: boolean (Required)
     * }
     * }
     * </pre>
     * 
     * @param apcGatewayId The identifier of the APC Gateway resource which should handle this request.
     * @param body Body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response verifying SimSwap in period along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> verifyWithResponse(String apcGatewayId, BinaryData body,
        RequestOptions requestOptions) {
        return this.serviceClient.verifyWithResponse(apcGatewayId, body, requestOptions);
    }

    /**
     * Provides timestamp of latest SIM swap.
     * 
     * @param apcGatewayId The identifier of the APC Gateway resource which should handle this request.
     * @param body Body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response with SimSwap date.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SimSwapRetrievalResult retrieve(String apcGatewayId, SimSwapRetrievalContent body) {
        // Generated convenience method for retrieveWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return retrieveWithResponse(apcGatewayId, BinaryData.fromObject(body), requestOptions).getValue()
            .toObject(SimSwapRetrievalResult.class);
    }

    /**
     * Verifies if a SIM swap has been performed during a past period (defined in the request with 'maxAgeHours'
     * attribute). Returns 'True' if a SIM swap has occured.
     * 
     * @param apcGatewayId The identifier of the APC Gateway resource which should handle this request.
     * @param body Body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response verifying SimSwap in period.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SimSwapVerificationResult verify(String apcGatewayId, SimSwapVerificationContent body) {
        // Generated convenience method for verifyWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return verifyWithResponse(apcGatewayId, BinaryData.fromObject(body), requestOptions).getValue()
            .toObject(SimSwapVerificationResult.class);
    }
}
