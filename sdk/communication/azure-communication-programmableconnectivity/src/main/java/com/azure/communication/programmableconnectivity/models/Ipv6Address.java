// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.communication.programmableconnectivity.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * IPv6 device indicator.
 */
@Immutable
public final class Ipv6Address implements JsonSerializable<Ipv6Address> {
    /*
     * An IPv6 address. This may be specified as an exact address, or as a subnet in CIDR notation.
     */
    @Generated
    private final String ipv6;

    /*
     * User equipment port.
     */
    @Generated
    private final int port;

    /**
     * Creates an instance of Ipv6Address class.
     * 
     * @param ipv6 the ipv6 value to set.
     * @param port the port value to set.
     */
    @Generated
    public Ipv6Address(String ipv6, int port) {
        this.ipv6 = ipv6;
        this.port = port;
    }

    /**
     * Get the ipv6 property: An IPv6 address. This may be specified as an exact address, or as a subnet in CIDR
     * notation.
     * 
     * @return the ipv6 value.
     */
    @Generated
    public String getIpv6() {
        return this.ipv6;
    }

    /**
     * Get the port property: User equipment port.
     * 
     * @return the port value.
     */
    @Generated
    public int getPort() {
        return this.port;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("ipv6", this.ipv6);
        jsonWriter.writeIntField("port", this.port);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Ipv6Address from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Ipv6Address if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Ipv6Address.
     */
    @Generated
    public static Ipv6Address fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String ipv6 = null;
            int port = 0;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("ipv6".equals(fieldName)) {
                    ipv6 = reader.getString();
                } else if ("port".equals(fieldName)) {
                    port = reader.getInt();
                } else {
                    reader.skipChildren();
                }
            }
            return new Ipv6Address(ipv6, port);
        });
    }
}
