// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.communication.programmableconnectivity.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Response with SimSwap date.
 */
@Immutable
public final class SimSwapRetrievalResult implements JsonSerializable<SimSwapRetrievalResult> {
    /*
     * Datetime of most recent swap for SIM
     */
    @Generated
    private OffsetDateTime date;

    /**
     * Creates an instance of SimSwapRetrievalResult class.
     */
    @Generated
    private SimSwapRetrievalResult() {
    }

    /**
     * Get the date property: Datetime of most recent swap for SIM.
     * 
     * @return the date value.
     */
    @Generated
    public OffsetDateTime getDate() {
        return this.date;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("date",
            this.date == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.date));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SimSwapRetrievalResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SimSwapRetrievalResult if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SimSwapRetrievalResult.
     */
    @Generated
    public static SimSwapRetrievalResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SimSwapRetrievalResult deserializedSimSwapRetrievalResult = new SimSwapRetrievalResult();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("date".equals(fieldName)) {
                    deserializedSimSwapRetrievalResult.date = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSimSwapRetrievalResult;
        });
    }
}
