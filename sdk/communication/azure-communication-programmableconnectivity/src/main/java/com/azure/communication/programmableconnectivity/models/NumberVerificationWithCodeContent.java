// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.communication.programmableconnectivity.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Request to verify number of device - second call.
 */
@Immutable
public final class NumberVerificationWithCodeContent implements JsonSerializable<NumberVerificationWithCodeContent> {
    /*
     * The code provided by APC in exchange for the operator code.
     */
    @Generated
    private final String apcCode;

    /**
     * Creates an instance of NumberVerificationWithCodeContent class.
     * 
     * @param apcCode the apcCode value to set.
     */
    @Generated
    public NumberVerificationWithCodeContent(String apcCode) {
        this.apcCode = apcCode;
    }

    /**
     * Get the apcCode property: The code provided by APC in exchange for the operator code.
     * 
     * @return the apcCode value.
     */
    @Generated
    public String getApcCode() {
        return this.apcCode;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("apcCode", this.apcCode);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NumberVerificationWithCodeContent from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NumberVerificationWithCodeContent if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the NumberVerificationWithCodeContent.
     */
    @Generated
    public static NumberVerificationWithCodeContent fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String apcCode = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("apcCode".equals(fieldName)) {
                    apcCode = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return new NumberVerificationWithCodeContent(apcCode);
        });
    }
}
