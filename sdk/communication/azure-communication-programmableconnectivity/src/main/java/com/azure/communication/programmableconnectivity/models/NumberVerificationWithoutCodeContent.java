// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.communication.programmableconnectivity.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Request to verify number of device - first call.
 */
@Fluent
public final class NumberVerificationWithoutCodeContent
    implements JsonSerializable<NumberVerificationWithoutCodeContent> {
    /*
     * Identifier for the network to query for this device.
     */
    @Generated
    private final NetworkIdentifier networkIdentifier;

    /*
     * Phone number in E.164 format (starting with country code), and optionally prefixed with '+'
     */
    @Generated
    private String phoneNumber;

    /*
     * Hashed phone number. SHA-256 (in hexadecimal representation) of the mobile phone number in **E.164 format
     * (starting with country code)**. Optionally prefixed with '+'.
     */
    @Generated
    private String hashedPhoneNumber;

    /*
     * Redirect URI to backend application.
     */
    @Generated
    private final String redirectUri;

    /**
     * Creates an instance of NumberVerificationWithoutCodeContent class.
     * 
     * @param networkIdentifier the networkIdentifier value to set.
     * @param redirectUri the redirectUri value to set.
     */
    @Generated
    public NumberVerificationWithoutCodeContent(NetworkIdentifier networkIdentifier, String redirectUri) {
        this.networkIdentifier = networkIdentifier;
        this.redirectUri = redirectUri;
    }

    /**
     * Get the networkIdentifier property: Identifier for the network to query for this device.
     * 
     * @return the networkIdentifier value.
     */
    @Generated
    public NetworkIdentifier getNetworkIdentifier() {
        return this.networkIdentifier;
    }

    /**
     * Get the phoneNumber property: Phone number in E.164 format (starting with country code), and optionally prefixed
     * with '+'.
     * 
     * @return the phoneNumber value.
     */
    @Generated
    public String getPhoneNumber() {
        return this.phoneNumber;
    }

    /**
     * Set the phoneNumber property: Phone number in E.164 format (starting with country code), and optionally prefixed
     * with '+'.
     * 
     * @param phoneNumber the phoneNumber value to set.
     * @return the NumberVerificationWithoutCodeContent object itself.
     */
    @Generated
    public NumberVerificationWithoutCodeContent setPhoneNumber(String phoneNumber) {
        this.phoneNumber = phoneNumber;
        return this;
    }

    /**
     * Get the hashedPhoneNumber property: Hashed phone number. SHA-256 (in hexadecimal representation) of the mobile
     * phone number in **E.164 format (starting with country code)**. Optionally prefixed with '+'.
     * 
     * @return the hashedPhoneNumber value.
     */
    @Generated
    public String getHashedPhoneNumber() {
        return this.hashedPhoneNumber;
    }

    /**
     * Set the hashedPhoneNumber property: Hashed phone number. SHA-256 (in hexadecimal representation) of the mobile
     * phone number in **E.164 format (starting with country code)**. Optionally prefixed with '+'.
     * 
     * @param hashedPhoneNumber the hashedPhoneNumber value to set.
     * @return the NumberVerificationWithoutCodeContent object itself.
     */
    @Generated
    public NumberVerificationWithoutCodeContent setHashedPhoneNumber(String hashedPhoneNumber) {
        this.hashedPhoneNumber = hashedPhoneNumber;
        return this;
    }

    /**
     * Get the redirectUri property: Redirect URI to backend application.
     * 
     * @return the redirectUri value.
     */
    @Generated
    public String getRedirectUri() {
        return this.redirectUri;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("networkIdentifier", this.networkIdentifier);
        jsonWriter.writeStringField("redirectUri", this.redirectUri);
        jsonWriter.writeStringField("phoneNumber", this.phoneNumber);
        jsonWriter.writeStringField("hashedPhoneNumber", this.hashedPhoneNumber);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NumberVerificationWithoutCodeContent from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NumberVerificationWithoutCodeContent if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the NumberVerificationWithoutCodeContent.
     */
    @Generated
    public static NumberVerificationWithoutCodeContent fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NetworkIdentifier networkIdentifier = null;
            String redirectUri = null;
            String phoneNumber = null;
            String hashedPhoneNumber = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("networkIdentifier".equals(fieldName)) {
                    networkIdentifier = NetworkIdentifier.fromJson(reader);
                } else if ("redirectUri".equals(fieldName)) {
                    redirectUri = reader.getString();
                } else if ("phoneNumber".equals(fieldName)) {
                    phoneNumber = reader.getString();
                } else if ("hashedPhoneNumber".equals(fieldName)) {
                    hashedPhoneNumber = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            NumberVerificationWithoutCodeContent deserializedNumberVerificationWithoutCodeContent
                = new NumberVerificationWithoutCodeContent(networkIdentifier, redirectUri);
            deserializedNumberVerificationWithoutCodeContent.phoneNumber = phoneNumber;
            deserializedNumberVerificationWithoutCodeContent.hashedPhoneNumber = hashedPhoneNumber;

            return deserializedNumberVerificationWithoutCodeContent;
        });
    }
}
