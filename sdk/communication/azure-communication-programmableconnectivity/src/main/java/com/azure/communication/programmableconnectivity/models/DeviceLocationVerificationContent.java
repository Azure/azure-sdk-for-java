// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.communication.programmableconnectivity.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Request to verify Location.
 */
@Immutable
public final class DeviceLocationVerificationContent implements JsonSerializable<DeviceLocationVerificationContent> {
    /*
     * Network to query for this device, or device information to enable network routing.
     */
    @Generated
    private final NetworkIdentifier networkIdentifier;

    /*
     * Latitude of location to be verified
     */
    @Generated
    private final double latitude;

    /*
     * Longitude of location to be verified
     */
    @Generated
    private final double longitude;

    /*
     * Accuracy expected for location verification in kilometers
     */
    @Generated
    private final int accuracy;

    /*
     * The device to find the location for. Exactly one of Network Access Code, Phone Number, IPv4 address, or IPv6
     * address
     */
    @Generated
    private final LocationDevice device;

    /**
     * Creates an instance of DeviceLocationVerificationContent class.
     * 
     * @param networkIdentifier the networkIdentifier value to set.
     * @param latitude the latitude value to set.
     * @param longitude the longitude value to set.
     * @param accuracy the accuracy value to set.
     * @param device the device value to set.
     */
    @Generated
    public DeviceLocationVerificationContent(NetworkIdentifier networkIdentifier, double latitude, double longitude,
        int accuracy, LocationDevice device) {
        this.networkIdentifier = networkIdentifier;
        this.latitude = latitude;
        this.longitude = longitude;
        this.accuracy = accuracy;
        this.device = device;
    }

    /**
     * Get the networkIdentifier property: Network to query for this device, or device information to enable network
     * routing.
     * 
     * @return the networkIdentifier value.
     */
    @Generated
    public NetworkIdentifier getNetworkIdentifier() {
        return this.networkIdentifier;
    }

    /**
     * Get the latitude property: Latitude of location to be verified.
     * 
     * @return the latitude value.
     */
    @Generated
    public double getLatitude() {
        return this.latitude;
    }

    /**
     * Get the longitude property: Longitude of location to be verified.
     * 
     * @return the longitude value.
     */
    @Generated
    public double getLongitude() {
        return this.longitude;
    }

    /**
     * Get the accuracy property: Accuracy expected for location verification in kilometers.
     * 
     * @return the accuracy value.
     */
    @Generated
    public int getAccuracy() {
        return this.accuracy;
    }

    /**
     * Get the device property: The device to find the location for. Exactly one of Network Access Code, Phone Number,
     * IPv4 address, or IPv6 address.
     * 
     * @return the device value.
     */
    @Generated
    public LocationDevice getDevice() {
        return this.device;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("networkIdentifier", this.networkIdentifier);
        jsonWriter.writeDoubleField("latitude", this.latitude);
        jsonWriter.writeDoubleField("longitude", this.longitude);
        jsonWriter.writeIntField("accuracy", this.accuracy);
        jsonWriter.writeJsonField("device", this.device);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DeviceLocationVerificationContent from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DeviceLocationVerificationContent if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DeviceLocationVerificationContent.
     */
    @Generated
    public static DeviceLocationVerificationContent fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NetworkIdentifier networkIdentifier = null;
            double latitude = 0.0;
            double longitude = 0.0;
            int accuracy = 0;
            LocationDevice device = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("networkIdentifier".equals(fieldName)) {
                    networkIdentifier = NetworkIdentifier.fromJson(reader);
                } else if ("latitude".equals(fieldName)) {
                    latitude = reader.getDouble();
                } else if ("longitude".equals(fieldName)) {
                    longitude = reader.getDouble();
                } else if ("accuracy".equals(fieldName)) {
                    accuracy = reader.getInt();
                } else if ("device".equals(fieldName)) {
                    device = LocationDevice.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return new DeviceLocationVerificationContent(networkIdentifier, latitude, longitude, accuracy, device);
        });
    }
}
