// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.communication.messages.models;

import com.azure.core.models.GeoPosition;
import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * The message template's location value information.
 */
@Fluent
public final class MessageTemplateLocation extends MessageTemplateValue {

    /*
     * The [Optional] name of the location.
     */
    @Generated
    private String locationName;

    /*
     * The [Optional] address of the location.
     */
    @Generated
    private String address;

    /*
     * The latitude of the location.
     */
    @Generated
    private final double latitude;

    /*
     * The longitude of the location.
     */
    @Generated
    private final double longitude;

    /**
     * Creates an instance of MessageTemplateLocation class.
     *
     * @param refValue the refValue value to set.
     * @param geoPosition the geoPosition value to set.
     */
    @Generated
    public MessageTemplateLocation(@JsonProperty(value = "name") String refValue, GeoPosition geoPosition) {
        super(refValue);
        this.latitude = geoPosition.getLatitude();
        this.longitude = geoPosition.getLongitude();
    }

    /**
     * Get the locationName property: The [Optional] name of the location.
     *
     * @return the locationName value.
     */
    @Generated
    public String getLocationName() {
        return this.locationName;
    }

    /**
     * Set the locationName property: The [Optional] name of the location.
     *
     * @param locationName the locationName value to set.
     * @return the MessageTemplateLocation object itself.
     */
    @Generated
    public MessageTemplateLocation setLocationName(String locationName) {
        this.locationName = locationName;
        return this;
    }

    /**
     * Get the address property: The [Optional] address of the location.
     *
     * @return the address value.
     */
    @Generated
    public String getAddress() {
        return this.address;
    }

    /**
     * Set the address property: The [Optional] address of the location.
     *
     * @param address the address value to set.
     * @return the MessageTemplateLocation object itself.
     */
    @Generated
    public MessageTemplateLocation setAddress(String address) {
        this.address = address;
        return this;
    }

    /**
     * Get the geo position: The longitude and latitude of the location.
     *
     * @return the GeoPosition object.
     */
    public GeoPosition getPosition() {
        return new GeoPosition(this.longitude, this.latitude);
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", getRefValue());
        jsonWriter.writeStringField("kind", getKind() == null ? null : getKind().toString());
        jsonWriter.writeDoubleField("latitude", this.latitude);
        jsonWriter.writeDoubleField("longitude", this.longitude);
        jsonWriter.writeStringField("locationName", this.locationName);
        jsonWriter.writeStringField("address", this.address);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MessageTemplateLocation from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of MessageTemplateLocation if the JsonReader was pointing to an instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MessageTemplateLocation.
     */
    @Generated
    public static MessageTemplateLocation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String refValue = null;
            MessageTemplateValueKind kind = MessageTemplateValueKind.LOCATION;
            double latitude = 0.0;
            double longitude = 0.0;
            String locationName = null;
            String address = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("name".equals(fieldName)) {
                    refValue = reader.getString();
                } else if ("kind".equals(fieldName)) {
                    kind = MessageTemplateValueKind.fromString(reader.getString());
                } else if ("latitude".equals(fieldName)) {
                    latitude = reader.getDouble();
                } else if ("longitude".equals(fieldName)) {
                    longitude = reader.getDouble();
                } else if ("locationName".equals(fieldName)) {
                    locationName = reader.getString();
                } else if ("address".equals(fieldName)) {
                    address = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            MessageTemplateLocation deserializedMessageTemplateLocation
                = new MessageTemplateLocation(refValue, latitude, longitude);
            deserializedMessageTemplateLocation.setKind(kind);
            deserializedMessageTemplateLocation.locationName = locationName;
            deserializedMessageTemplateLocation.address = address;
            return deserializedMessageTemplateLocation;
        });
    }
}
