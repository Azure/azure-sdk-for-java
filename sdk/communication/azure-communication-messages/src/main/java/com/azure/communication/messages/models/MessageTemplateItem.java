// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.communication.messages.models;

import com.azure.communication.messages.models.channels.WhatsAppMessageTemplateItem;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import com.azure.communication.messages.implementation.accesshelpers.MessageTemplateItemAccessHelper;

/**
 * The message template as returned from the service.
 */
@Immutable
public class MessageTemplateItem implements JsonSerializable<MessageTemplateItem> {

    static {
        MessageTemplateItemAccessHelper.setAccessor(MessageTemplateItem::setName);
    }

    /*
     * The type discriminator describing a template type.
     */
    @Generated
    private CommunicationMessagesChannel kind = CommunicationMessagesChannel.fromString("MessageTemplateItem");

    /*
     * The template's name.
     */
    @Generated
    private String name;

    /*
     * The template's language, in the ISO 639 format, consist of a two-letter language code followed by an optional
     * two-letter country code, e.g., 'en' or 'en_US'.
     */
    @Generated
    private final String language;

    /*
     * The aggregated template status.
     */
    @Generated
    private final MessageTemplateStatus status;

    /**
     * Creates an instance of MessageTemplateItem class.
     *
     * @param language the language value to set.
     * @param status the status value to set.
     */
    @Generated
    protected MessageTemplateItem(String language, MessageTemplateStatus status) {
        this.language = language;
        this.status = status;
    }

    /**
     * Get the kind property: The type discriminator describing a template type.
     *
     * @return the kind value.
     */
    @Generated
    public CommunicationMessagesChannel getKind() {
        return this.kind;
    }

    /**
     * Get the name property: The template's name.
     *
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Set the name property: The template's name.
     *
     * @param name the name value to set.
     * @return the MessageTemplateItem object itself.
     */
    @Generated
    MessageTemplateItem setName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the language property: The template's language, in the ISO 639 format, consist of a two-letter language code
     * followed by an optional two-letter country code, e.g., 'en' or 'en_US'.
     *
     * @return the language value.
     */
    @Generated
    public String getLanguage() {
        return this.language;
    }

    /**
     * Get the status property: The aggregated template status.
     *
     * @return the status value.
     */
    @Generated
    public MessageTemplateStatus getStatus() {
        return this.status;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("language", this.language);
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MessageTemplateItem from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of MessageTemplateItem if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MessageTemplateItem.
     */
    @Generated
    public static MessageTemplateItem fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                // Prepare for reading
                readerToUse.nextToken();
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("kind".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("whatsApp".equals(discriminatorValue)) {
                    return WhatsAppMessageTemplateItem.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    @Generated
    static MessageTemplateItem fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String name = null;
            String language = null;
            MessageTemplateStatus status = null;
            CommunicationMessagesChannel kind = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("language".equals(fieldName)) {
                    language = reader.getString();
                } else if ("status".equals(fieldName)) {
                    status = MessageTemplateStatus.fromString(reader.getString());
                } else if ("kind".equals(fieldName)) {
                    kind = CommunicationMessagesChannel.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            MessageTemplateItem deserializedMessageTemplateItem = new MessageTemplateItem(language, status);
            deserializedMessageTemplateItem.name = name;
            deserializedMessageTemplateItem.kind = kind;
            return deserializedMessageTemplateItem;
        });
    }
}
