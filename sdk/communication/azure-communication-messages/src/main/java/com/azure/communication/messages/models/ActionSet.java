// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.communication.messages.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The Action Set content.
 */
@Immutable
public final class ActionSet implements JsonSerializable<ActionSet> {

    /*
     * Title of the ActionSet.
     */
    @Generated
    private final String title;

    /*
     * Array of items in ActionSet.
     */
    @Generated
    private final List<ActionSetItem> items;

    /**
     * Creates an instance of ActionSet class.
     *
     * @param title the title value to set.
     * @param items the items value to set.
     */
    @Generated
    public ActionSet(String title, List<ActionSetItem> items) {
        this.title = title;
        this.items = items;
    }

    /**
     * Get the title property: Title of the ActionSet.
     *
     * @return the title value.
     */
    @Generated
    public String getTitle() {
        return this.title;
    }

    /**
     * Get the items property: Array of items in ActionSet.
     *
     * @return the items value.
     */
    @Generated
    public List<ActionSetItem> getItems() {
        return this.items;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("title", this.title);
        jsonWriter.writeArrayField("items", this.items, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ActionSet from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ActionSet if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ActionSet.
     */
    @Generated
    public static ActionSet fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String title = null;
            List<ActionSetItem> items = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("title".equals(fieldName)) {
                    title = reader.getString();
                } else if ("items".equals(fieldName)) {
                    items = reader.readArray(reader1 -> ActionSetItem.fromJson(reader1));
                } else {
                    reader.skipChildren();
                }
            }
            return new ActionSet(title, items);
        });
    }
}
