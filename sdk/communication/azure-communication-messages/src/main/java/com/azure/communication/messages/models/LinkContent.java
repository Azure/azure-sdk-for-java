// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.communication.messages.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The message content of type Url information.
 */
@Immutable
public final class LinkContent extends MessageContent {

    /*
     * Kind of MessageContent.
     */
    @Generated
    private MessageContentKind kind = MessageContentKind.URL;

    /*
     * Title of the url content.
     */
    @Generated
    private final String title;

    /*
     * The url in the content.
     */
    @Generated
    private final String url;

    /**
     * Creates an instance of LinkContent class.
     *
     * @param title the title value to set.
     * @param url the url value to set.
     */
    @Generated
    public LinkContent(String title, String url) {
        this.title = title;
        this.url = url;
    }

    /**
     * Get the kind property: Kind of MessageContent.
     *
     * @return the kind value.
     */
    @Generated
    @Override
    public MessageContentKind getKind() {
        return this.kind;
    }

    /**
     * Get the title property: Title of the url content.
     *
     * @return the title value.
     */
    @Generated
    public String getTitle() {
        return this.title;
    }

    /**
     * Get the url property: The url in the content.
     *
     * @return the url value.
     */
    @Generated
    public String getUrl() {
        return this.url;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("title", this.title);
        jsonWriter.writeStringField("url", this.url);
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LinkContent from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of LinkContent if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the LinkContent.
     */
    @Generated
    public static LinkContent fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String title = null;
            String url = null;
            MessageContentKind kind = MessageContentKind.URL;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("title".equals(fieldName)) {
                    title = reader.getString();
                } else if ("url".equals(fieldName)) {
                    url = reader.getString();
                } else if ("kind".equals(fieldName)) {
                    kind = MessageContentKind.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            LinkContent deserializedLinkContent = new LinkContent(title, url);
            deserializedLinkContent.kind = kind;
            return deserializedLinkContent;
        });
    }
}
