// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.communication.messages.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Advanced Messaging conversation participant.
 */
@Fluent
public class ConversationParticipant implements JsonSerializable<ConversationParticipant> {
    /*
     * The type discriminator describing a participant type.
     */
    @Generated
    private ParticipantKind kind = ParticipantKind.fromString("ConversationParticipant");

    /*
     * Participant Identifier.
     */
    @Generated
    private String id;

    /*
     * Participant display name.
     */
    @Generated
    private String displayName;

    /**
     * Creates an instance of ConversationParticipant class.
     */
    @Generated
    public ConversationParticipant() {
    }

    /**
     * Get the kind property: The type discriminator describing a participant type.
     * 
     * @return the kind value.
     */
    @Generated
    public ParticipantKind getKind() {
        return this.kind;
    }

    /**
     * Get the id property: Participant Identifier.
     * 
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Set the id property: Participant Identifier.
     * 
     * @param id the id value to set.
     * @return the ConversationParticipant object itself.
     */
    @Generated
    ConversationParticipant setId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the displayName property: Participant display name.
     * 
     * @return the displayName value.
     */
    @Generated
    public String getDisplayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: Participant display name.
     * 
     * @param displayName the displayName value to set.
     * @return the ConversationParticipant object itself.
     */
    @Generated
    public ConversationParticipant setDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        jsonWriter.writeStringField("displayName", this.displayName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ConversationParticipant from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ConversationParticipant if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ConversationParticipant.
     */
    @Generated
    public static ConversationParticipant fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("kind".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("internal".equals(discriminatorValue)) {
                    return InternalConversationParticipant.fromJson(readerToUse.reset());
                } else if ("external".equals(discriminatorValue)) {
                    return ExternalConversationParticipant.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    @Generated
    static ConversationParticipant fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ConversationParticipant deserializedConversationParticipant = new ConversationParticipant();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedConversationParticipant.id = reader.getString();
                } else if ("kind".equals(fieldName)) {
                    deserializedConversationParticipant.kind = ParticipantKind.fromString(reader.getString());
                } else if ("displayName".equals(fieldName)) {
                    deserializedConversationParticipant.displayName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedConversationParticipant;
        });
    }
}
