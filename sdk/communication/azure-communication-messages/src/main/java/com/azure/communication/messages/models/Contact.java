// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.communication.messages.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Details of an external platform contact.
 */
@Immutable
public class Contact implements JsonSerializable<Contact> {
    /*
     * Type of message platform (e.g., WhatsApp).
     */
    @Generated
    private MessagePlatformKind kind = MessagePlatformKind.fromString("Contact");

    /*
     * External platform identifier.
     */
    @Generated
    private final String id;

    /**
     * Creates an instance of Contact class.
     * 
     * @param id the id value to set.
     */
    @Generated
    public Contact(String id) {
        this.id = id;
    }

    /**
     * Get the kind property: Type of message platform (e.g., WhatsApp).
     * 
     * @return the kind value.
     */
    @Generated
    public MessagePlatformKind getKind() {
        return this.kind;
    }

    /**
     * Get the id property: External platform identifier.
     * 
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Contact from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Contact if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Contact.
     */
    @Generated
    public static Contact fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("kind".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("communication".equals(discriminatorValue)) {
                    return CommunicationContact.fromJson(readerToUse.reset());
                } else if ("bot".equals(discriminatorValue)) {
                    return BotContact.fromJson(readerToUse.reset());
                } else if ("whatsApp".equals(discriminatorValue)) {
                    return WhatsAppContact.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    @Generated
    static Contact fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String id = null;
            MessagePlatformKind kind = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("kind".equals(fieldName)) {
                    kind = MessagePlatformKind.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            Contact deserializedContact = new Contact(id);
            deserializedContact.kind = kind;

            return deserializedContact;
        });
    }
}
