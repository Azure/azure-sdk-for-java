// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.communication.messages.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A request to send a text conversation message.
 */
@Immutable
public final class TextConversationMessageContent extends ConversationMessageContent {
    /*
     * The type discriminator describing a message type.
     */
    @Generated
    private CommunicationMessageKind kind = CommunicationMessageKind.TEXT;

    /*
     * Message content.
     */
    @Generated
    private final String content;

    /**
     * Creates an instance of TextConversationMessageContent class.
     * 
     * @param content the content value to set.
     */
    @Generated
    public TextConversationMessageContent(String content) {
        this.content = content;
    }

    /**
     * Get the kind property: The type discriminator describing a message type.
     * 
     * @return the kind value.
     */
    @Generated
    @Override
    public CommunicationMessageKind getKind() {
        return this.kind;
    }

    /**
     * Get the content property: Message content.
     * 
     * @return the content value.
     */
    @Generated
    public String getContent() {
        return this.content;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("content", this.content);
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TextConversationMessageContent from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TextConversationMessageContent if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TextConversationMessageContent.
     */
    @Generated
    public static TextConversationMessageContent fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String content = null;
            CommunicationMessageKind kind = CommunicationMessageKind.TEXT;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("content".equals(fieldName)) {
                    content = reader.getString();
                } else if ("kind".equals(fieldName)) {
                    kind = CommunicationMessageKind.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            TextConversationMessageContent deserializedTextConversationMessageContent
                = new TextConversationMessageContent(content);
            deserializedTextConversationMessageContent.kind = kind;

            return deserializedTextConversationMessageContent;
        });
    }
}
