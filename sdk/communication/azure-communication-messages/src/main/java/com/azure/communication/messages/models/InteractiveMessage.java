// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.communication.messages.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The Interactive message content to which user can read and respond.
 */
@Fluent
public final class InteractiveMessage implements JsonSerializable<InteractiveMessage> {

    /*
     * Gets or Sets Header content. Supports the following types:text, images etc.
     */
    @Generated
    private MessageContent headerProperty;

    /*
     * Gets or Sets Message body content. Emojis, markdown, and links are supported.
     */
    @Generated
    private final TextMessageContent body;

    /*
     * Gets or Sets Message footer content. Emojis, markdown, and links are supported.
     */
    @Generated
    private TextMessageContent footer;

    /*
     * The binding object to get or set Action which describes options user have to respond to message.
     */
    @Generated
    private final ActionBindings action;

    /**
     * Creates an instance of InteractiveMessage class.
     *
     * @param body the body value to set.
     * @param action the action value to set.
     */
    @Generated
    public InteractiveMessage(TextMessageContent body, ActionBindings action) {
        this.body = body;
        this.action = action;
    }

    /**
     * Get the body property: Gets or Sets Message body content. Emojis, markdown, and links are supported.
     *
     * @return the body value.
     */
    @Generated
    public TextMessageContent getBody() {
        return this.body;
    }

    /**
     * Get the footer property: Gets or Sets Message footer content. Emojis, markdown, and links are supported.
     *
     * @return the footer value.
     */
    @Generated
    public TextMessageContent getFooter() {
        return this.footer;
    }

    /**
     * Set the footer property: Gets or Sets Message footer content. Emojis, markdown, and links are supported.
     *
     * @param footer the footer value to set.
     * @return the InteractiveMessage object itself.
     */
    @Generated
    public InteractiveMessage setFooter(TextMessageContent footer) {
        this.footer = footer;
        return this;
    }

    /**
     * Get the action property: The binding object to get or set Action which describes options user have to respond to
     * message.
     *
     * @return the action value.
     */
    @Generated
    public ActionBindings getAction() {
        return this.action;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("body", this.body);
        jsonWriter.writeJsonField("action", this.action);
        jsonWriter.writeJsonField("header", this.headerProperty);
        jsonWriter.writeJsonField("footer", this.footer);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of InteractiveMessage from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of InteractiveMessage if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the InteractiveMessage.
     */
    @Generated
    public static InteractiveMessage fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TextMessageContent body = null;
            ActionBindings action = null;
            MessageContent headerProperty = null;
            TextMessageContent footer = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("body".equals(fieldName)) {
                    body = TextMessageContent.fromJson(reader);
                } else if ("action".equals(fieldName)) {
                    action = ActionBindings.fromJson(reader);
                } else if ("header".equals(fieldName)) {
                    headerProperty = MessageContent.fromJson(reader);
                } else if ("footer".equals(fieldName)) {
                    footer = TextMessageContent.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            InteractiveMessage deserializedInteractiveMessage = new InteractiveMessage(body, action);
            deserializedInteractiveMessage.headerProperty = headerProperty;
            deserializedInteractiveMessage.footer = footer;
            return deserializedInteractiveMessage;
        });
    }

    /**
     * Get the headerProperty property: Gets or Sets Header content. Supports the following types:text, images etc.
     *
     * @return the headerProperty value.
     */
    public MessageContent getHeader() {
        return this.headerProperty;
    }

    /**
     * Set the header property: Gets or Sets Header content. Supports the following types:text, images etc.
     *
     * @param header the header value to set.
     * @return the InteractiveMessage object itself.
     */
    public InteractiveMessage setHeader(MessageContent header) {
        this.headerProperty = header;
        return this;
    }
}
