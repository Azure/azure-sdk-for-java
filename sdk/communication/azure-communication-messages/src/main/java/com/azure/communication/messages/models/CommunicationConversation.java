// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.communication.messages.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A conversation.
 */
@Immutable
public final class CommunicationConversation implements JsonSerializable<CommunicationConversation> {
    /*
     * The conversation ID.
     */
    @Generated
    private String id;

    /*
     * The conversation topic.
     */
    @Generated
    private String topic;

    /*
     * List of delivery channel IDs.
     */
    @Generated
    private List<String> deliveryChannelIds;

    /*
     * Outbound delivery strategy for the conversation.
     */
    @Generated
    private OutboundDeliveryStrategyKind outboundDeliveryStrategy;

    /*
     * List of participants involved in the conversation.
     */
    @Generated
    private List<ConversationParticipant> participants;

    /**
     * Creates an instance of CommunicationConversation class.
     */
    @Generated
    private CommunicationConversation() {
    }

    /**
     * Get the id property: The conversation ID.
     * 
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the topic property: The conversation topic.
     * 
     * @return the topic value.
     */
    @Generated
    public String getTopic() {
        return this.topic;
    }

    /**
     * Get the deliveryChannelIds property: List of delivery channel IDs.
     * 
     * @return the deliveryChannelIds value.
     */
    @Generated
    public List<String> getDeliveryChannelIds() {
        return this.deliveryChannelIds;
    }

    /**
     * Get the outboundDeliveryStrategy property: Outbound delivery strategy for the conversation.
     * 
     * @return the outboundDeliveryStrategy value.
     */
    @Generated
    public OutboundDeliveryStrategyKind getOutboundDeliveryStrategy() {
        return this.outboundDeliveryStrategy;
    }

    /**
     * Get the participants property: List of participants involved in the conversation.
     * 
     * @return the participants value.
     */
    @Generated
    public List<ConversationParticipant> getParticipants() {
        return this.participants;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("topic", this.topic);
        jsonWriter.writeArrayField("deliveryChannelIds", this.deliveryChannelIds,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("outboundDeliveryStrategy",
            this.outboundDeliveryStrategy == null ? null : this.outboundDeliveryStrategy.toString());
        jsonWriter.writeArrayField("participants", this.participants, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CommunicationConversation from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CommunicationConversation if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CommunicationConversation.
     */
    @Generated
    public static CommunicationConversation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CommunicationConversation deserializedCommunicationConversation = new CommunicationConversation();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedCommunicationConversation.id = reader.getString();
                } else if ("topic".equals(fieldName)) {
                    deserializedCommunicationConversation.topic = reader.getString();
                } else if ("deliveryChannelIds".equals(fieldName)) {
                    List<String> deliveryChannelIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedCommunicationConversation.deliveryChannelIds = deliveryChannelIds;
                } else if ("outboundDeliveryStrategy".equals(fieldName)) {
                    deserializedCommunicationConversation.outboundDeliveryStrategy
                        = OutboundDeliveryStrategyKind.fromString(reader.getString());
                } else if ("participants".equals(fieldName)) {
                    List<ConversationParticipant> participants
                        = reader.readArray(reader1 -> ConversationParticipant.fromJson(reader1));
                    deserializedCommunicationConversation.participants = participants;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCommunicationConversation;
        });
    }
}
