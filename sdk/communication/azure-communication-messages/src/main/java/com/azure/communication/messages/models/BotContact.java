// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.communication.messages.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Bot Contact.
 */
@Immutable
public final class BotContact extends Contact {
    /*
     * Type of message platform (e.g., WhatsApp).
     */
    @Generated
    private MessagePlatformKind kind = MessagePlatformKind.BOT;

    /*
     * Bot App Id of the Bot Contact.
     */
    @Generated
    private final String botAppId;

    /**
     * Creates an instance of BotContact class.
     * 
     * @param id the id value to set.
     * @param botAppId the botAppId value to set.
     */
    @Generated
    public BotContact(String id, String botAppId) {
        super(id);
        this.botAppId = botAppId;
    }

    /**
     * Get the kind property: Type of message platform (e.g., WhatsApp).
     * 
     * @return the kind value.
     */
    @Generated
    @Override
    public MessagePlatformKind getKind() {
        return this.kind;
    }

    /**
     * Get the botAppId property: Bot App Id of the Bot Contact.
     * 
     * @return the botAppId value.
     */
    @Generated
    public String getBotAppId() {
        return this.botAppId;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", getId());
        jsonWriter.writeStringField("botAppId", this.botAppId);
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BotContact from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BotContact if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the BotContact.
     */
    @Generated
    public static BotContact fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String id = null;
            String botAppId = null;
            MessagePlatformKind kind = MessagePlatformKind.BOT;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("botAppId".equals(fieldName)) {
                    botAppId = reader.getString();
                } else if ("kind".equals(fieldName)) {
                    kind = MessagePlatformKind.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            BotContact deserializedBotContact = new BotContact(id, botAppId);
            deserializedBotContact.kind = kind;

            return deserializedBotContact;
        });
    }
}
