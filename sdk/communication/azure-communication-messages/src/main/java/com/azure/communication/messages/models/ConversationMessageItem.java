// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.communication.messages.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * The conversation message as returned from the service.
 */
@Immutable
public final class ConversationMessageItem implements JsonSerializable<ConversationMessageItem> {
    /*
     * Message ID.
     */
    @Generated
    private String id;

    /*
     * Message sequence ID.
     */
    @Generated
    private Long sequenceId;

    /*
     * Payload of a threaded conversation message.
     */
    @Generated
    private final ConversationMessageContent message;

    /*
     * The display name of the message sender.
     */
    @Generated
    private String senderDisplayName;

    /*
     * The communication identifier of the message sender.
     */
    @Generated
    private final String senderCommunicationIdentifier;

    /*
     * Timestamp when the message is sent.
     */
    @Generated
    private final OffsetDateTime createdOn;

    /**
     * Creates an instance of ConversationMessageItem class.
     * 
     * @param message the message value to set.
     * @param senderCommunicationIdentifier the senderCommunicationIdentifier value to set.
     * @param createdOn the createdOn value to set.
     */
    @Generated
    private ConversationMessageItem(ConversationMessageContent message, String senderCommunicationIdentifier,
        OffsetDateTime createdOn) {
        this.message = message;
        this.senderCommunicationIdentifier = senderCommunicationIdentifier;
        this.createdOn = createdOn;
    }

    /**
     * Get the id property: Message ID.
     * 
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the sequenceId property: Message sequence ID.
     * 
     * @return the sequenceId value.
     */
    @Generated
    public Long getSequenceId() {
        return this.sequenceId;
    }

    /**
     * Get the message property: Payload of a threaded conversation message.
     * 
     * @return the message value.
     */
    @Generated
    public ConversationMessageContent getMessage() {
        return this.message;
    }

    /**
     * Get the senderDisplayName property: The display name of the message sender.
     * 
     * @return the senderDisplayName value.
     */
    @Generated
    public String getSenderDisplayName() {
        return this.senderDisplayName;
    }

    /**
     * Get the senderCommunicationIdentifier property: The communication identifier of the message sender.
     * 
     * @return the senderCommunicationIdentifier value.
     */
    @Generated
    public String getSenderCommunicationIdentifier() {
        return this.senderCommunicationIdentifier;
    }

    /**
     * Get the createdOn property: Timestamp when the message is sent.
     * 
     * @return the createdOn value.
     */
    @Generated
    public OffsetDateTime getCreatedOn() {
        return this.createdOn;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("message", this.message);
        jsonWriter.writeStringField("senderCommunicationIdentifier", this.senderCommunicationIdentifier);
        jsonWriter.writeStringField("createdOn",
            this.createdOn == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.createdOn));
        jsonWriter.writeNumberField("sequenceId", this.sequenceId);
        jsonWriter.writeStringField("senderDisplayName", this.senderDisplayName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ConversationMessageItem from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ConversationMessageItem if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ConversationMessageItem.
     */
    @Generated
    public static ConversationMessageItem fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String id = null;
            ConversationMessageContent message = null;
            String senderCommunicationIdentifier = null;
            OffsetDateTime createdOn = null;
            Long sequenceId = null;
            String senderDisplayName = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("message".equals(fieldName)) {
                    message = ConversationMessageContent.fromJson(reader);
                } else if ("senderCommunicationIdentifier".equals(fieldName)) {
                    senderCommunicationIdentifier = reader.getString();
                } else if ("createdOn".equals(fieldName)) {
                    createdOn = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("sequenceId".equals(fieldName)) {
                    sequenceId = reader.getNullable(JsonReader::getLong);
                } else if ("senderDisplayName".equals(fieldName)) {
                    senderDisplayName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            ConversationMessageItem deserializedConversationMessageItem
                = new ConversationMessageItem(message, senderCommunicationIdentifier, createdOn);
            deserializedConversationMessageItem.id = id;
            deserializedConversationMessageItem.sequenceId = sequenceId;
            deserializedConversationMessageItem.senderDisplayName = senderDisplayName;

            return deserializedConversationMessageItem;
        });
    }
}
