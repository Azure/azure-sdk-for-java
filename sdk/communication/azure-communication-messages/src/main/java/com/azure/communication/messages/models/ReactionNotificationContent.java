// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.communication.messages.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A request to send a Reaction notification.
 */
@Immutable
public final class ReactionNotificationContent extends NotificationContent {

    /*
     * The type discriminator describing a notification type.
     */
    @Generated
    private CommunicationMessageKind kind = CommunicationMessageKind.REACTION;

    /*
     * emoji content like \uD83D\uDE00.
     */
    @Generated
    private final String emoji;

    /*
     * ID of the previous message you want to reply to.
     */
    @Generated
    private final String messageId;

    /**
     * Creates an instance of ReactionNotificationContent class.
     *
     * @param channelRegistrationId the channelRegistrationId value to set.
     * @param to the to value to set.
     * @param emoji the emoji value to set.
     * @param messageId the messageId value to set.
     */
    @Generated
    public ReactionNotificationContent(String channelRegistrationId, List<String> to, String emoji, String messageId) {
        super(channelRegistrationId, to);
        this.emoji = emoji;
        this.messageId = messageId;
    }

    /**
     * Get the kind property: The type discriminator describing a notification type.
     *
     * @return the kind value.
     */
    @Generated
    @Override
    public CommunicationMessageKind getKind() {
        return this.kind;
    }

    /**
     * Get the emoji property: emoji content like \uD83D\uDE00.
     *
     * @return the emoji value.
     */
    @Generated
    public String getEmoji() {
        return this.emoji;
    }

    /**
     * Get the messageId property: ID of the previous message you want to reply to.
     *
     * @return the messageId value.
     */
    @Generated
    public String getMessageId() {
        return this.messageId;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("channelRegistrationId", getChannelRegistrationId());
        jsonWriter.writeArrayField("to", getTo(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("emoji", this.emoji);
        jsonWriter.writeStringField("messageId", this.messageId);
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ReactionNotificationContent from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ReactionNotificationContent if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ReactionNotificationContent.
     */
    @Generated
    public static ReactionNotificationContent fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String channelRegistrationId = null;
            List<String> to = null;
            String emoji = null;
            String messageId = null;
            CommunicationMessageKind kind = CommunicationMessageKind.REACTION;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("channelRegistrationId".equals(fieldName)) {
                    channelRegistrationId = reader.getString();
                } else if ("to".equals(fieldName)) {
                    to = reader.readArray(reader1 -> reader1.getString());
                } else if ("emoji".equals(fieldName)) {
                    emoji = reader.getString();
                } else if ("messageId".equals(fieldName)) {
                    messageId = reader.getString();
                } else if ("kind".equals(fieldName)) {
                    kind = CommunicationMessageKind.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            ReactionNotificationContent deserializedReactionNotificationContent
                = new ReactionNotificationContent(channelRegistrationId, to, emoji, messageId);
            deserializedReactionNotificationContent.kind = kind;
            return deserializedReactionNotificationContent;
        });
    }
}
