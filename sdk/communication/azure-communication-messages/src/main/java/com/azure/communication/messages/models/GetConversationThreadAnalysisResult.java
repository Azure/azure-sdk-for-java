// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.communication.messages.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Result of the get conversation messages AI Analysis operation.
 */
@Immutable
public final class GetConversationThreadAnalysisResult
    implements JsonSerializable<GetConversationThreadAnalysisResult> {
    /*
     * The AI summary of the conversation messages.
     */
    @Generated
    private final String summary;

    /**
     * Creates an instance of GetConversationThreadAnalysisResult class.
     * 
     * @param summary the summary value to set.
     */
    @Generated
    private GetConversationThreadAnalysisResult(String summary) {
        this.summary = summary;
    }

    /**
     * Get the summary property: The AI summary of the conversation messages.
     * 
     * @return the summary value.
     */
    @Generated
    public String getSummary() {
        return this.summary;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("summary", this.summary);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GetConversationThreadAnalysisResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GetConversationThreadAnalysisResult if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the GetConversationThreadAnalysisResult.
     */
    @Generated
    public static GetConversationThreadAnalysisResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String summary = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("summary".equals(fieldName)) {
                    summary = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return new GetConversationThreadAnalysisResult(summary);
        });
    }
}
