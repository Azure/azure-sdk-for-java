// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.communication.messages.models.channels;

import com.azure.communication.messages.models.MessageTemplateBindings;
import com.azure.communication.messages.models.MessageTemplateBindingsKind;
import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The template bindings for WhatsApp.
 */
@Fluent
public final class WhatsAppMessageTemplateBindings extends MessageTemplateBindings {

    /*
     * The type discriminator describing a template bindings type.
     */
    @Generated
    private MessageTemplateBindingsKind kind = MessageTemplateBindingsKind.WHATS_APP;

    /*
     * The header template bindings
     */
    @Generated
    private List<WhatsAppMessageTemplateBindingsComponent> headerProperty;

    /*
     * The body template bindings
     */
    @Generated
    private List<WhatsAppMessageTemplateBindingsComponent> body;

    /*
     * The footer template bindings
     */
    @Generated
    private List<WhatsAppMessageTemplateBindingsComponent> footer;

    /*
     * The button template bindings
     */
    @Generated
    private List<WhatsAppMessageTemplateBindingsButton> buttons;

    /**
     * Creates an instance of WhatsAppMessageTemplateBindings class.
     */
    @Generated
    public WhatsAppMessageTemplateBindings() {
    }

    /**
     * Get the kind property: The type discriminator describing a template bindings type.
     *
     * @return the kind value.
     */
    @Generated
    @Override
    public MessageTemplateBindingsKind getKind() {
        return this.kind;
    }

    /**
     * Get the headerProperty property: The header template bindings.
     *
     * @return the headerProperty value.
     */
    @Generated
    public List<WhatsAppMessageTemplateBindingsComponent> getHeaderProperty() {
        return this.headerProperty;
    }

    /**
     * Set the headerProperty property: The header template bindings.
     *
     * @param headerProperty the headerProperty value to set.
     * @return the WhatsAppMessageTemplateBindings object itself.
     */
    @Generated
    public WhatsAppMessageTemplateBindings
        setHeaderProperty(List<WhatsAppMessageTemplateBindingsComponent> headerProperty) {
        this.headerProperty = headerProperty;
        return this;
    }

    /**
     * Get the body property: The body template bindings.
     *
     * @return the body value.
     */
    @Generated
    public List<WhatsAppMessageTemplateBindingsComponent> getBody() {
        return this.body;
    }

    /**
     * Set the body property: The body template bindings.
     *
     * @param body the body value to set.
     * @return the WhatsAppMessageTemplateBindings object itself.
     */
    @Generated
    public WhatsAppMessageTemplateBindings setBody(List<WhatsAppMessageTemplateBindingsComponent> body) {
        this.body = body;
        return this;
    }

    /**
     * Get the footer property: The footer template bindings.
     *
     * @return the footer value.
     */
    @Generated
    public List<WhatsAppMessageTemplateBindingsComponent> getFooter() {
        return this.footer;
    }

    /**
     * Set the footer property: The footer template bindings.
     *
     * @param footer the footer value to set.
     * @return the WhatsAppMessageTemplateBindings object itself.
     */
    @Generated
    public WhatsAppMessageTemplateBindings setFooter(List<WhatsAppMessageTemplateBindingsComponent> footer) {
        this.footer = footer;
        return this;
    }

    /**
     * Get the buttons property: The button template bindings.
     *
     * @return the buttons value.
     */
    @Generated
    public List<WhatsAppMessageTemplateBindingsButton> getButtons() {
        return this.buttons;
    }

    /**
     * Set the buttons property: The button template bindings.
     *
     * @param buttons the buttons value to set.
     * @return the WhatsAppMessageTemplateBindings object itself.
     */
    @Generated
    public WhatsAppMessageTemplateBindings setButtons(List<WhatsAppMessageTemplateBindingsButton> buttons) {
        this.buttons = buttons;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        jsonWriter.writeArrayField("header", this.headerProperty, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("body", this.body, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("footer", this.footer, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("buttons", this.buttons, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WhatsAppMessageTemplateBindings from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of WhatsAppMessageTemplateBindings if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the WhatsAppMessageTemplateBindings.
     */
    @Generated
    public static WhatsAppMessageTemplateBindings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WhatsAppMessageTemplateBindings deserializedWhatsAppMessageTemplateBindings
                = new WhatsAppMessageTemplateBindings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("kind".equals(fieldName)) {
                    deserializedWhatsAppMessageTemplateBindings.kind
                        = MessageTemplateBindingsKind.fromString(reader.getString());
                } else if ("header".equals(fieldName)) {
                    List<WhatsAppMessageTemplateBindingsComponent> headerProperty
                        = reader.readArray(reader1 -> WhatsAppMessageTemplateBindingsComponent.fromJson(reader1));
                    deserializedWhatsAppMessageTemplateBindings.headerProperty = headerProperty;
                } else if ("body".equals(fieldName)) {
                    List<WhatsAppMessageTemplateBindingsComponent> body
                        = reader.readArray(reader1 -> WhatsAppMessageTemplateBindingsComponent.fromJson(reader1));
                    deserializedWhatsAppMessageTemplateBindings.body = body;
                } else if ("footer".equals(fieldName)) {
                    List<WhatsAppMessageTemplateBindingsComponent> footer
                        = reader.readArray(reader1 -> WhatsAppMessageTemplateBindingsComponent.fromJson(reader1));
                    deserializedWhatsAppMessageTemplateBindings.footer = footer;
                } else if ("buttons".equals(fieldName)) {
                    List<WhatsAppMessageTemplateBindingsButton> buttons
                        = reader.readArray(reader1 -> WhatsAppMessageTemplateBindingsButton.fromJson(reader1));
                    deserializedWhatsAppMessageTemplateBindings.buttons = buttons;
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedWhatsAppMessageTemplateBindings;
        });
    }
}
