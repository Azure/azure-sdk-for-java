// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.communication.messages.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Request payload for removing participants from a conversation.
 */
@Immutable
public final class RemoveParticipantsOptions implements JsonSerializable<RemoveParticipantsOptions> {
    /*
     * The participant IDs to remove.
     */
    @Generated
    private final List<String> participantIds;

    /**
     * Creates an instance of RemoveParticipantsOptions class.
     * 
     * @param participantIds the participantIds value to set.
     */
    @Generated
    public RemoveParticipantsOptions(List<String> participantIds) {
        this.participantIds = participantIds;
    }

    /**
     * Get the participantIds property: The participant IDs to remove.
     * 
     * @return the participantIds value.
     */
    @Generated
    public List<String> getParticipantIds() {
        return this.participantIds;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("participantIds", this.participantIds,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RemoveParticipantsOptions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RemoveParticipantsOptions if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RemoveParticipantsOptions.
     */
    @Generated
    public static RemoveParticipantsOptions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<String> participantIds = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("participantIds".equals(fieldName)) {
                    participantIds = reader.readArray(reader1 -> reader1.getString());
                } else {
                    reader.skipChildren();
                }
            }
            return new RemoveParticipantsOptions(participantIds);
        });
    }
}
