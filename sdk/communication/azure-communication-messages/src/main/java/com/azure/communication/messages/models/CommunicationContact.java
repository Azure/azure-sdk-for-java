// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.communication.messages.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Communication Contact.
 */
@Immutable
public final class CommunicationContact extends Contact {
    /*
     * Type of message platform (e.g., WhatsApp).
     */
    @Generated
    private MessagePlatformKind kind = MessagePlatformKind.COMMUNICATION;

    /**
     * Creates an instance of CommunicationContact class.
     * 
     * @param id the id value to set.
     */
    @Generated
    public CommunicationContact(String id) {
        super(id);
    }

    /**
     * Get the kind property: Type of message platform (e.g., WhatsApp).
     * 
     * @return the kind value.
     */
    @Generated
    @Override
    public MessagePlatformKind getKind() {
        return this.kind;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", getId());
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CommunicationContact from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CommunicationContact if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CommunicationContact.
     */
    @Generated
    public static CommunicationContact fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String id = null;
            MessagePlatformKind kind = MessagePlatformKind.COMMUNICATION;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("kind".equals(fieldName)) {
                    kind = MessagePlatformKind.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            CommunicationContact deserializedCommunicationContact = new CommunicationContact(id);
            deserializedCommunicationContact.kind = kind;

            return deserializedCommunicationContact;
        });
    }
}
