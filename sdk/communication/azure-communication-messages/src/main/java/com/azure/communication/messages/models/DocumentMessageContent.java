// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.communication.messages.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The message content of type document information.
 */
@Immutable
public final class DocumentMessageContent extends MessageContent {

    /*
     * Kind of MessageContent.
     */
    @Generated
    private MessageContentKind kind = MessageContentKind.DOCUMENT;

    /*
     * MediaUri of the media content.
     */
    @Generated
    private final String mediaUrl;

    /**
     * Creates an instance of DocumentMessageContent class.
     *
     * @param mediaUrl the mediaUrl value to set.
     */
    @Generated
    public DocumentMessageContent(String mediaUrl) {
        this.mediaUrl = mediaUrl;
    }

    /**
     * Get the kind property: Kind of MessageContent.
     *
     * @return the kind value.
     */
    @Generated
    @Override
    public MessageContentKind getKind() {
        return this.kind;
    }

    /**
     * Get the mediaUrl property: MediaUri of the media content.
     *
     * @return the mediaUrl value.
     */
    @Generated
    public String getMediaUrl() {
        return this.mediaUrl;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("mediaUri", this.mediaUrl);
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DocumentMessageContent from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of DocumentMessageContent if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DocumentMessageContent.
     */
    @Generated
    public static DocumentMessageContent fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String mediaUrl = null;
            MessageContentKind kind = MessageContentKind.DOCUMENT;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("mediaUri".equals(fieldName)) {
                    mediaUrl = reader.getString();
                } else if ("kind".equals(fieldName)) {
                    kind = MessageContentKind.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            DocumentMessageContent deserializedDocumentMessageContent = new DocumentMessageContent(mediaUrl);
            deserializedDocumentMessageContent.kind = kind;
            return deserializedDocumentMessageContent;
        });
    }
}
