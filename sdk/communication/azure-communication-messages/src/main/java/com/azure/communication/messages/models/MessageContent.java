// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.communication.messages.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The message content object used to create interactive messages components.
 */
@Immutable
public abstract class MessageContent implements JsonSerializable<MessageContent> {

    /*
     * Kind of MessageContent.
     */
    @Generated
    private MessageContentKind kind = MessageContentKind.fromString("MessageContent");

    /**
     * Creates an instance of MessageContent class.
     */
    @Generated
    protected MessageContent() {
    }

    /**
     * Get the kind property: Kind of MessageContent.
     *
     * @return the kind value.
     */
    @Generated
    public MessageContentKind getKind() {
        return this.kind;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MessageContent from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of MessageContent if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MessageContent.
     */
    @Generated
    public static MessageContent fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                // Prepare for reading
                readerToUse.nextToken();
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("kind".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("text".equals(discriminatorValue)) {
                    return TextMessageContent.fromJson(readerToUse.reset());
                } else if ("document".equals(discriminatorValue)) {
                    return DocumentMessageContent.fromJson(readerToUse.reset());
                } else if ("image".equals(discriminatorValue)) {
                    return ImageMessageContent.fromJson(readerToUse.reset());
                } else if ("video".equals(discriminatorValue)) {
                    return VideoMessageContent.fromJson(readerToUse.reset());
                } else if ("buttonSet".equals(discriminatorValue)) {
                    return ButtonSetContent.fromJson(readerToUse.reset());
                } else if ("url".equals(discriminatorValue)) {
                    return LinkContent.fromJson(readerToUse.reset());
                } else if ("group".equals(discriminatorValue)) {
                    return ActionGroupContent.fromJson(readerToUse.reset());
                } else {
                    throw new IllegalStateException("Invalid Kind value - " + discriminatorValue);
                }
            }
        });
    }
}
