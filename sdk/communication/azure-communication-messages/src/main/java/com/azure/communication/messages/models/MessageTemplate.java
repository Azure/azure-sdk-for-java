// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.communication.messages.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The template object used to create templates.
 */
@Fluent
public final class MessageTemplate implements JsonSerializable<MessageTemplate> {

    /*
     * Name of the template.
     */
    @Generated
    private final String name;

    /*
     * The template's language, in the ISO 639 format, consist of a two-letter language code followed by an optional
     * two-letter country code, e.g., 'en' or 'en_US'.
     */
    @Generated
    private final String language;

    /*
     * The template values.
     */
    @Generated
    private List<MessageTemplateValue> values;

    /*
     * The binding object to link values to the template specific locations
     */
    @Generated
    private MessageTemplateBindings bindings;

    /**
     * Creates an instance of MessageTemplate class.
     *
     * @param name the name value to set.
     * @param language the language value to set.
     */
    @Generated
    public MessageTemplate(String name, String language) {
        this.name = name;
        this.language = language;
    }

    /**
     * Get the name property: Name of the template.
     *
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the language property: The template's language, in the ISO 639 format, consist of a two-letter language code
     * followed by an optional two-letter country code, e.g., 'en' or 'en_US'.
     *
     * @return the language value.
     */
    @Generated
    public String getLanguage() {
        return this.language;
    }

    /**
     * Get the values property: The template values.
     *
     * @return the values value.
     */
    @Generated
    public List<MessageTemplateValue> getValues() {
        return this.values;
    }

    /**
     * Set the values property: The template values.
     *
     * @param values the values value to set.
     * @return the MessageTemplate object itself.
     */
    @Generated
    public MessageTemplate setValues(List<MessageTemplateValue> values) {
        this.values = values;
        return this;
    }

    /**
     * Get the bindings property: The binding object to link values to the template specific locations.
     *
     * @return the bindings value.
     */
    @Generated
    public MessageTemplateBindings getBindings() {
        return this.bindings;
    }

    /**
     * Set the bindings property: The binding object to link values to the template specific locations.
     *
     * @param bindings the bindings value to set.
     * @return the MessageTemplate object itself.
     */
    @Generated
    public MessageTemplate setBindings(MessageTemplateBindings bindings) {
        this.bindings = bindings;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("language", this.language);
        jsonWriter.writeArrayField("values", this.values, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("bindings", this.bindings);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MessageTemplate from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of MessageTemplate if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MessageTemplate.
     */
    @Generated
    public static MessageTemplate fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String name = null;
            String language = null;
            List<MessageTemplateValue> values = null;
            MessageTemplateBindings bindings = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("language".equals(fieldName)) {
                    language = reader.getString();
                } else if ("values".equals(fieldName)) {
                    values = reader.readArray(reader1 -> MessageTemplateValue.fromJson(reader1));
                } else if ("bindings".equals(fieldName)) {
                    bindings = MessageTemplateBindings.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            MessageTemplate deserializedMessageTemplate = new MessageTemplate(name, language);
            deserializedMessageTemplate.values = values;
            deserializedMessageTemplate.bindings = bindings;
            return deserializedMessageTemplate;
        });
    }
}
