// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.communication.messages.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Response for the remove participants operation.
 */
@Immutable
public final class RemoveParticipantsResult implements JsonSerializable<RemoveParticipantsResult> {
    /*
     * List of Ids with Errors if failed to be added
     */
    @Generated
    private final List<UpdateParticipantsResult> invalidParticipants;

    /**
     * Creates an instance of RemoveParticipantsResult class.
     * 
     * @param invalidParticipants the invalidParticipants value to set.
     */
    @Generated
    private RemoveParticipantsResult(List<UpdateParticipantsResult> invalidParticipants) {
        this.invalidParticipants = invalidParticipants;
    }

    /**
     * Get the invalidParticipants property: List of Ids with Errors if failed to be added.
     * 
     * @return the invalidParticipants value.
     */
    @Generated
    public List<UpdateParticipantsResult> getInvalidParticipants() {
        return this.invalidParticipants;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("invalidParticipants", this.invalidParticipants,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RemoveParticipantsResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RemoveParticipantsResult if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RemoveParticipantsResult.
     */
    @Generated
    public static RemoveParticipantsResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<UpdateParticipantsResult> invalidParticipants = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("invalidParticipants".equals(fieldName)) {
                    invalidParticipants = reader.readArray(reader1 -> UpdateParticipantsResult.fromJson(reader1));
                } else {
                    reader.skipChildren();
                }
            }
            return new RemoveParticipantsResult(invalidParticipants);
        });
    }
}
