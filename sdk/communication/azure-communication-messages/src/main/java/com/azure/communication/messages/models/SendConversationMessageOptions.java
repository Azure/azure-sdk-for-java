// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.communication.messages.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Request payload for sending a conversation message.
 */
@Fluent
public final class SendConversationMessageOptions implements JsonSerializable<SendConversationMessageOptions> {
    /*
     * Details of a send conversation message request.
     */
    @Generated
    private final ConversationMessageContent request;

    /*
     * The options of the outbound delivery strategy for messages sent by participants in a conversation.
     * Supports internalOnly, allChannels.
     */
    @Generated
    private OutboundDeliveryStrategyKind outboundDeliveryStrategy;

    /**
     * Creates an instance of SendConversationMessageOptions class.
     * 
     * @param request the request value to set.
     */
    @Generated
    public SendConversationMessageOptions(ConversationMessageContent request) {
        this.request = request;
    }

    /**
     * Get the request property: Details of a send conversation message request.
     * 
     * @return the request value.
     */
    @Generated
    public ConversationMessageContent getRequest() {
        return this.request;
    }

    /**
     * Get the outboundDeliveryStrategy property: The options of the outbound delivery strategy for messages sent by
     * participants in a conversation.
     * Supports internalOnly, allChannels.
     * 
     * @return the outboundDeliveryStrategy value.
     */
    @Generated
    public OutboundDeliveryStrategyKind getOutboundDeliveryStrategy() {
        return this.outboundDeliveryStrategy;
    }

    /**
     * Set the outboundDeliveryStrategy property: The options of the outbound delivery strategy for messages sent by
     * participants in a conversation.
     * Supports internalOnly, allChannels.
     * 
     * @param outboundDeliveryStrategy the outboundDeliveryStrategy value to set.
     * @return the SendConversationMessageOptions object itself.
     */
    @Generated
    public SendConversationMessageOptions
        setOutboundDeliveryStrategy(OutboundDeliveryStrategyKind outboundDeliveryStrategy) {
        this.outboundDeliveryStrategy = outboundDeliveryStrategy;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("request", this.request);
        jsonWriter.writeStringField("outboundDeliveryStrategy",
            this.outboundDeliveryStrategy == null ? null : this.outboundDeliveryStrategy.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SendConversationMessageOptions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SendConversationMessageOptions if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SendConversationMessageOptions.
     */
    @Generated
    public static SendConversationMessageOptions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ConversationMessageContent request = null;
            OutboundDeliveryStrategyKind outboundDeliveryStrategy = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("request".equals(fieldName)) {
                    request = ConversationMessageContent.fromJson(reader);
                } else if ("outboundDeliveryStrategy".equals(fieldName)) {
                    outboundDeliveryStrategy = OutboundDeliveryStrategyKind.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            SendConversationMessageOptions deserializedSendConversationMessageOptions
                = new SendConversationMessageOptions(request);
            deserializedSendConversationMessageOptions.outboundDeliveryStrategy = outboundDeliveryStrategy;

            return deserializedSendConversationMessageOptions;
        });
    }
}
