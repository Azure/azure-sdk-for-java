// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.communication.messages.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Request payload for adding participants to a conversation.
 */
@Immutable
public final class AddParticipantsOptions implements JsonSerializable<AddParticipantsOptions> {
    /*
     * List of participants to add.
     */
    @Generated
    private final List<ConversationParticipant> participants;

    /**
     * Creates an instance of AddParticipantsOptions class.
     * 
     * @param participants the participants value to set.
     */
    @Generated
    public AddParticipantsOptions(List<ConversationParticipant> participants) {
        this.participants = participants;
    }

    /**
     * Get the participants property: List of participants to add.
     * 
     * @return the participants value.
     */
    @Generated
    public List<ConversationParticipant> getParticipants() {
        return this.participants;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("participants", this.participants, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AddParticipantsOptions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AddParticipantsOptions if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AddParticipantsOptions.
     */
    @Generated
    public static AddParticipantsOptions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<ConversationParticipant> participants = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("participants".equals(fieldName)) {
                    participants = reader.readArray(reader1 -> ConversationParticipant.fromJson(reader1));
                } else {
                    reader.skipChildren();
                }
            }
            return new AddParticipantsOptions(participants);
        });
    }
}
