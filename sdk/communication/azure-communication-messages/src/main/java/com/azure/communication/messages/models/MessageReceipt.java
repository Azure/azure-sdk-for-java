// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.communication.messages.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Receipt of the sending one message.
 */
@Immutable
public final class MessageReceipt implements JsonSerializable<MessageReceipt> {

    /*
     * The message id.
     */
    @Generated
    private final String messageId;

    /*
     * The native external platform user identifier of the recipient.
     */
    @Generated
    private final String to;

    /**
     * Creates an instance of MessageReceipt class.
     *
     * @param messageId the messageId value to set.
     * @param to the to value to set.
     */
    @Generated
    private MessageReceipt(String messageId, String to) {
        this.messageId = messageId;
        this.to = to;
    }

    /**
     * Get the messageId property: The message id.
     *
     * @return the messageId value.
     */
    @Generated
    public String getMessageId() {
        return this.messageId;
    }

    /**
     * Get the to property: The native external platform user identifier of the recipient.
     *
     * @return the to value.
     */
    @Generated
    public String getTo() {
        return this.to;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("messageId", this.messageId);
        jsonWriter.writeStringField("to", this.to);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MessageReceipt from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of MessageReceipt if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MessageReceipt.
     */
    @Generated
    public static MessageReceipt fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String messageId = null;
            String to = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("messageId".equals(fieldName)) {
                    messageId = reader.getString();
                } else if ("to".equals(fieldName)) {
                    to = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return new MessageReceipt(messageId, to);
        });
    }
}
