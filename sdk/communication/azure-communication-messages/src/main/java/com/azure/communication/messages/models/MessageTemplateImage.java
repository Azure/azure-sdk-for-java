// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.communication.messages.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The message template's image value information.
 */
@Fluent
public final class MessageTemplateImage extends MessageTemplateValue {

    /*
     * The type discriminator describing a template parameter type.
     */
    @Generated
    private MessageTemplateValueKind kind = MessageTemplateValueKind.IMAGE;

    /*
     * The (public) URL of the media.
     */
    @Generated
    private final String url;

    /*
     * The [optional] caption of the media object.
     */
    @Generated
    private String caption;

    /*
     * The [optional] filename of the media file.
     */
    @Generated
    private String fileName;

    /**
     * Creates an instance of MessageTemplateImage class.
     *
     * @param refValue the refValue value to set.
     * @param url the url value to set.
     */
    @Generated
    public MessageTemplateImage(String refValue, String url) {
        super(refValue);
        this.url = url;
    }

    /**
     * Get the kind property: The type discriminator describing a template parameter type.
     *
     * @return the kind value.
     */
    @Generated
    @Override
    public MessageTemplateValueKind getKind() {
        return this.kind;
    }

    /**
     * Get the url property: The (public) URL of the media.
     *
     * @return the url value.
     */
    @Generated
    public String getUrl() {
        return this.url;
    }

    /**
     * Get the caption property: The [optional] caption of the media object.
     *
     * @return the caption value.
     */
    @Generated
    public String getCaption() {
        return this.caption;
    }

    /**
     * Set the caption property: The [optional] caption of the media object.
     *
     * @param caption the caption value to set.
     * @return the MessageTemplateImage object itself.
     */
    @Generated
    public MessageTemplateImage setCaption(String caption) {
        this.caption = caption;
        return this;
    }

    /**
     * Get the fileName property: The [optional] filename of the media file.
     *
     * @return the fileName value.
     */
    @Generated
    public String getFileName() {
        return this.fileName;
    }

    /**
     * Set the fileName property: The [optional] filename of the media file.
     *
     * @param fileName the fileName value to set.
     * @return the MessageTemplateImage object itself.
     */
    @Generated
    public MessageTemplateImage setFileName(String fileName) {
        this.fileName = fileName;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", getRefValue());
        jsonWriter.writeStringField("url", this.url);
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        jsonWriter.writeStringField("caption", this.caption);
        jsonWriter.writeStringField("fileName", this.fileName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MessageTemplateImage from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of MessageTemplateImage if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MessageTemplateImage.
     */
    @Generated
    public static MessageTemplateImage fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String refValue = null;
            String url = null;
            MessageTemplateValueKind kind = MessageTemplateValueKind.IMAGE;
            String caption = null;
            String fileName = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("name".equals(fieldName)) {
                    refValue = reader.getString();
                } else if ("url".equals(fieldName)) {
                    url = reader.getString();
                } else if ("kind".equals(fieldName)) {
                    kind = MessageTemplateValueKind.fromString(reader.getString());
                } else if ("caption".equals(fieldName)) {
                    caption = reader.getString();
                } else if ("fileName".equals(fieldName)) {
                    fileName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            MessageTemplateImage deserializedMessageTemplateImage = new MessageTemplateImage(refValue, url);
            deserializedMessageTemplateImage.kind = kind;
            deserializedMessageTemplateImage.caption = caption;
            deserializedMessageTemplateImage.fileName = fileName;
            return deserializedMessageTemplateImage;
        });
    }
}
