// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.communication.messages.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Binding actions to the interactive message.
 */
@Immutable
public abstract class ActionBindings implements JsonSerializable<ActionBindings> {

    /*
     * Kind of the MessageActionBinding.
     */
    @Generated
    private MessageActionBindingKind actionBindingKind = MessageActionBindingKind.fromString("ActionBindings");

    /**
     * Creates an instance of ActionBindings class.
     */
    @Generated
    protected ActionBindings() {
    }

    /**
     * Get the actionBindingKind property: Kind of the MessageActionBinding.
     *
     * @return the actionBindingKind value.
     */
    @Generated
    public MessageActionBindingKind getActionBindingKind() {
        return this.actionBindingKind;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("actionBindingKind",
            this.actionBindingKind == null ? null : this.actionBindingKind.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ActionBindings from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ActionBindings if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ActionBindings.
     */
    @Generated
    public static ActionBindings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                // Prepare for reading
                readerToUse.nextToken();
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("actionBindingKind".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("whatsAppListAction".equals(discriminatorValue)) {
                    return WhatsAppListActionBindings.fromJson(readerToUse.reset());
                } else if ("whatsAppButtonAction".equals(discriminatorValue)) {
                    return WhatsAppButtonActionBindings.fromJson(readerToUse.reset());
                } else if ("whatsAppUrlAction".equals(discriminatorValue)) {
                    return WhatsAppUrlActionBindings.fromJson(readerToUse.reset());
                } else {
                    throw new IllegalStateException("Invalid Kind value - " + discriminatorValue);
                }
            }
        });
    }
}
