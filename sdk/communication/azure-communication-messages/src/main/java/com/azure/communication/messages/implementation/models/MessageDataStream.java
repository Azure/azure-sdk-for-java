// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.communication.messages.implementation.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A data stream.
 */
@Immutable
public final class MessageDataStream implements JsonSerializable<MessageDataStream> {

    /*
     * The stream ID.
     */
    @Generated
    private String mediaId;

    /*
     * The stream body.
     */
    @Generated
    private final byte[] body;

    /**
     * Creates an instance of MessageDataStream class.
     *
     * @param body the body value to set.
     */
    @Generated
    private MessageDataStream(byte[] body) {
        this.body = body;
    }

    /**
     * Get the mediaId property: The stream ID.
     *
     * @return the mediaId value.
     */
    @Generated
    public String getMediaId() {
        return this.mediaId;
    }

    /**
     * Get the body property: The stream body.
     *
     * @return the body value.
     */
    @Generated
    public byte[] getBody() {
        return CoreUtils.clone(this.body);
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBinaryField("body", this.body);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MessageDataStream from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of MessageDataStream if the JsonReader was pointing to an instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MessageDataStream.
     */
    @Generated
    public static MessageDataStream fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String mediaId = null;
            byte[] body = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("id".equals(fieldName)) {
                    mediaId = reader.getString();
                } else if ("body".equals(fieldName)) {
                    body = reader.getBinary();
                } else {
                    reader.skipChildren();
                }
            }
            MessageDataStream deserializedMessageDataStream = new MessageDataStream(body);
            deserializedMessageDataStream.mediaId = mediaId;
            return deserializedMessageDataStream;
        });
    }
}
