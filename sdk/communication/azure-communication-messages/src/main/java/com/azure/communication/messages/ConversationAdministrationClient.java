// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.communication.messages;

import com.azure.communication.messages.implementation.ConversationAdministrationClientImpl;
import com.azure.communication.messages.implementation.models.CreateConversationRequest1;
import com.azure.communication.messages.models.AddParticipantsOptions;
import com.azure.communication.messages.models.AddParticipantsResult;
import com.azure.communication.messages.models.CommunicationConversation;
import com.azure.communication.messages.models.ConversationMessageItem;
import com.azure.communication.messages.models.GetConversationThreadAnalysisResult;
import com.azure.communication.messages.models.Message;
import com.azure.communication.messages.models.RemoveParticipantsOptions;
import com.azure.communication.messages.models.RemoveParticipantsResult;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;

/**
 * Initializes a new instance of the synchronous ConversationAdministrationClient type.
 */
@ServiceClient(builder = ConversationAdministrationClientBuilder.class)
public final class ConversationAdministrationClient {
    @Generated
    private final ConversationAdministrationClientImpl serviceClient;

    /**
     * Initializes an instance of ConversationAdministrationClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    ConversationAdministrationClient(ConversationAdministrationClientImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Creates a new conversation. This is only for create operation.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     conversation (Required): {
     *         id: String (Required)
     *         topic: String (Optional)
     *         deliveryChannelIds (Optional): [
     *             String (Optional)
     *         ]
     *         outboundDeliveryStrategy: String(internalOnly/allParticipants) (Optional)
     *         participants (Optional): [
     *              (Optional){
     *                 kind: String(internal/external) (Required)
     *                 id: String (Required)
     *                 displayName: String (Optional)
     *             }
     *         ]
     *     }
     *     initialMessage (Optional): {
     *         content: String (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     topic: String (Optional)
     *     deliveryChannelIds (Optional): [
     *         String (Optional)
     *     ]
     *     outboundDeliveryStrategy: String(internalOnly/allParticipants) (Optional)
     *     participants (Optional): [
     *          (Optional){
     *             kind: String(internal/external) (Required)
     *             id: String (Required)
     *             displayName: String (Optional)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param createConversationRequest1 The createConversationRequest1 parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a conversation along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createConversationWithResponse(BinaryData createConversationRequest1,
        RequestOptions requestOptions) {
        return this.serviceClient.createConversationWithResponse(createConversationRequest1, requestOptions);
    }

    /**
     * Gets the details of a specific conversation.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     topic: String (Optional)
     *     deliveryChannelIds (Optional): [
     *         String (Optional)
     *     ]
     *     outboundDeliveryStrategy: String(internalOnly/allParticipants) (Optional)
     *     participants (Optional): [
     *          (Optional){
     *             kind: String(internal/external) (Required)
     *             id: String (Required)
     *             displayName: String (Optional)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param conversationId The conversation ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the details of a specific conversation along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getConversationWithResponse(String conversationId, RequestOptions requestOptions) {
        return this.serviceClient.getConversationWithResponse(conversationId, requestOptions);
    }

    /**
     * Deletes a specific conversation.
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>repeatability-request-id</td><td>String</td><td>No</td><td>Repeatability request ID header</td></tr>
     * <tr><td>repeatability-first-sent</td><td>String</td><td>No</td><td>Repeatability first sent header as
     * HTTP-date</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param conversationId The conversation ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteConversationWithResponse(String conversationId, RequestOptions requestOptions) {
        return this.serviceClient.deleteConversationWithResponse(conversationId, requestOptions);
    }

    /**
     * Terminates a specific conversation.
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>repeatability-request-id</td><td>String</td><td>No</td><td>Repeatability request ID header</td></tr>
     * <tr><td>repeatability-first-sent</td><td>String</td><td>No</td><td>Repeatability first sent header as
     * HTTP-date</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param conversationId The conversation ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> terminateConversationWithResponse(String conversationId, RequestOptions requestOptions) {
        return this.serviceClient.terminateConversationWithResponse(conversationId, requestOptions);
    }

    /**
     * Retrieves list of conversations.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxPageSize</td><td>Integer</td><td>No</td><td>Number of objects to return per page.</td></tr>
     * <tr><td>participantId</td><td>String</td><td>No</td><td>The participant user ID</td></tr>
     * <tr><td>channelId</td><td>String</td><td>No</td><td>The id of channel</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     topic: String (Optional)
     *     deliveryChannelIds (Optional): [
     *         String (Optional)
     *     ]
     *     outboundDeliveryStrategy: String(internalOnly/allParticipants) (Optional)
     *     participants (Optional): [
     *          (Optional){
     *             kind: String(internal/external) (Required)
     *             id: String (Required)
     *             displayName: String (Optional)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of Conversation items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listConversations(RequestOptions requestOptions) {
        return this.serviceClient.listConversations(requestOptions);
    }

    /**
     * Retrieves list of conversation messages.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxPageSize</td><td>Integer</td><td>No</td><td>Number of objects to return per page.</td></tr>
     * <tr><td>participantId</td><td>String</td><td>No</td><td>The participant user ID</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     sequenceId: Long (Optional)
     *     message (Required): {
     *         kind: String(text/image/image_v0/document/video/audio/template/sticker/reaction/interactive) (Required)
     *     }
     *     senderDisplayName: String (Optional)
     *     senderCommunicationIdentifier: String (Required)
     *     createdOn: OffsetDateTime (Required)
     * }
     * }
     * </pre>
     * 
     * @param conversationId The conversation ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of ConversationMessageItem items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listMessages(String conversationId, RequestOptions requestOptions) {
        return this.serviceClient.listMessages(conversationId, requestOptions);
    }

    /**
     * Adds participants to a specific conversation.
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>repeatability-request-id</td><td>String</td><td>No</td><td>Repeatability request ID header</td></tr>
     * <tr><td>repeatability-first-sent</td><td>String</td><td>No</td><td>Repeatability first sent header as
     * HTTP-date</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     participants (Required): [
     *          (Required){
     *             kind: String(internal/external) (Required)
     *             id: String (Required)
     *             displayName: String (Optional)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     invalidParticipants (Required): [
     *          (Required){
     *             id: String (Required)
     *             error (Optional): {
     *                 error (Required): (recursive schema, see error above)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param conversationId The conversation ID.
     * @param options Details of the payload for adding participants to a conversation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response for the add participants operation along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> addParticipantsWithResponse(String conversationId, BinaryData options,
        RequestOptions requestOptions) {
        return this.serviceClient.addParticipantsWithResponse(conversationId, options, requestOptions);
    }

    /**
     * remove a participant from a conversation.
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>repeatability-request-id</td><td>String</td><td>No</td><td>Repeatability request ID header</td></tr>
     * <tr><td>repeatability-first-sent</td><td>String</td><td>No</td><td>Repeatability first sent header as
     * HTTP-date</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     participantIds (Required): [
     *         String (Required)
     *     ]
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     invalidParticipants (Required): [
     *          (Required){
     *             id: String (Required)
     *             error (Optional): {
     *                 error (Required): (recursive schema, see error above)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param conversationId The conversation ID.
     * @param options Details of the request body for removing participants from a conversation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response for the remove participants operation along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> removeParticipantsWithResponse(String conversationId, BinaryData options,
        RequestOptions requestOptions) {
        return this.serviceClient.removeParticipantsWithResponse(conversationId, options, requestOptions);
    }

    /**
     * Get AI Analysis of a conversation.
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>repeatability-request-id</td><td>String</td><td>No</td><td>Repeatability request ID header</td></tr>
     * <tr><td>repeatability-first-sent</td><td>String</td><td>No</td><td>Repeatability first sent header as
     * HTTP-date</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     summary: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param conversationId The conversation ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return aI Analysis of a conversation along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> analyzeConversationWithResponse(String conversationId, RequestOptions requestOptions) {
        return this.serviceClient.analyzeConversationWithResponse(conversationId, requestOptions);
    }

    /**
     * Creates a new conversation. This is only for create operation.
     * 
     * @param initialMessage An initial message within the conversation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a conversation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CommunicationConversation createConversation(Message initialMessage) {
        // Generated convenience method for createConversationWithResponse
        RequestOptions requestOptions = new RequestOptions();
        CreateConversationRequest1 createConversationRequest1Obj
            = new CreateConversationRequest1().setInitialMessage(initialMessage);
        BinaryData createConversationRequest1 = BinaryData.fromObject(createConversationRequest1Obj);
        return createConversationWithResponse(createConversationRequest1, requestOptions).getValue()
            .toObject(CommunicationConversation.class);
    }

    /**
     * Creates a new conversation. This is only for create operation.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a conversation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CommunicationConversation createConversation() {
        // Generated convenience method for createConversationWithResponse
        RequestOptions requestOptions = new RequestOptions();
        CreateConversationRequest1 createConversationRequest1Obj = new CreateConversationRequest1();
        BinaryData createConversationRequest1 = BinaryData.fromObject(createConversationRequest1Obj);
        return createConversationWithResponse(createConversationRequest1, requestOptions).getValue()
            .toObject(CommunicationConversation.class);
    }

    /**
     * Gets the details of a specific conversation.
     * 
     * @param conversationId The conversation ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of a specific conversation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CommunicationConversation getConversation(String conversationId) {
        // Generated convenience method for getConversationWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getConversationWithResponse(conversationId, requestOptions).getValue()
            .toObject(CommunicationConversation.class);
    }

    /**
     * Deletes a specific conversation.
     * 
     * @param conversationId The conversation ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteConversation(String conversationId) {
        // Generated convenience method for deleteConversationWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deleteConversationWithResponse(conversationId, requestOptions).getValue();
    }

    /**
     * Terminates a specific conversation.
     * 
     * @param conversationId The conversation ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void terminateConversation(String conversationId) {
        // Generated convenience method for terminateConversationWithResponse
        RequestOptions requestOptions = new RequestOptions();
        terminateConversationWithResponse(conversationId, requestOptions).getValue();
    }

    /**
     * Retrieves list of conversations.
     * 
     * @param participantId The participant user ID.
     * @param channelId The id of channel.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of Conversation items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<CommunicationConversation> listConversations(String participantId, String channelId) {
        // Generated convenience method for listConversations
        RequestOptions requestOptions = new RequestOptions();
        if (participantId != null) {
            requestOptions.addQueryParam("participantId", participantId, false);
        }
        if (channelId != null) {
            requestOptions.addQueryParam("channelId", channelId, false);
        }
        return serviceClient.listConversations(requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(CommunicationConversation.class));
    }

    /**
     * Retrieves list of conversations.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of Conversation items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<CommunicationConversation> listConversations() {
        // Generated convenience method for listConversations
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.listConversations(requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(CommunicationConversation.class));
    }

    /**
     * Retrieves list of conversation messages.
     * 
     * @param conversationId The conversation ID.
     * @param participantId The participant user ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of ConversationMessageItem items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ConversationMessageItem> listMessages(String conversationId, String participantId) {
        // Generated convenience method for listMessages
        RequestOptions requestOptions = new RequestOptions();
        if (participantId != null) {
            requestOptions.addQueryParam("participantId", participantId, false);
        }
        return serviceClient.listMessages(conversationId, requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(ConversationMessageItem.class));
    }

    /**
     * Retrieves list of conversation messages.
     * 
     * @param conversationId The conversation ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of ConversationMessageItem items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ConversationMessageItem> listMessages(String conversationId) {
        // Generated convenience method for listMessages
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.listMessages(conversationId, requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(ConversationMessageItem.class));
    }

    /**
     * Adds participants to a specific conversation.
     * 
     * @param conversationId The conversation ID.
     * @param options Details of the payload for adding participants to a conversation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for the add participants operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AddParticipantsResult addParticipants(String conversationId, AddParticipantsOptions options) {
        // Generated convenience method for addParticipantsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return addParticipantsWithResponse(conversationId, BinaryData.fromObject(options), requestOptions).getValue()
            .toObject(AddParticipantsResult.class);
    }

    /**
     * remove a participant from a conversation.
     * 
     * @param conversationId The conversation ID.
     * @param options Details of the request body for removing participants from a conversation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for the remove participants operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RemoveParticipantsResult removeParticipants(String conversationId, RemoveParticipantsOptions options) {
        // Generated convenience method for removeParticipantsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return removeParticipantsWithResponse(conversationId, BinaryData.fromObject(options), requestOptions).getValue()
            .toObject(RemoveParticipantsResult.class);
    }

    /**
     * Get AI Analysis of a conversation.
     * 
     * @param conversationId The conversation ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return aI Analysis of a conversation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GetConversationThreadAnalysisResult analyzeConversation(String conversationId) {
        // Generated convenience method for analyzeConversationWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return analyzeConversationWithResponse(conversationId, requestOptions).getValue()
            .toObject(GetConversationThreadAnalysisResult.class);
    }
}
