// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.communication.messages;

import com.azure.communication.messages.implementation.ConversationThreadClientImpl;
import com.azure.communication.messages.models.AddParticipantsOptions;
import com.azure.communication.messages.models.AddParticipantsResult;
import com.azure.communication.messages.models.CommunicationConversation;
import com.azure.communication.messages.models.ConversationMessageItem;
import com.azure.communication.messages.models.GetConversationThreadAnalysisResult;
import com.azure.communication.messages.models.RemoveParticipantsOptions;
import com.azure.communication.messages.models.RemoveParticipantsResult;
import com.azure.communication.messages.models.SendConversationMessageOptions;
import com.azure.communication.messages.models.SendConversationMessageResult;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.FluxUtil;
import java.util.stream.Collectors;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the asynchronous ConversationThreadClient type.
 */
@ServiceClient(builder = ConversationThreadClientBuilder.class, isAsync = true)
public final class ConversationThreadAsyncClient {
    @Generated
    private final ConversationThreadClientImpl serviceClient;

    /**
     * Initializes an instance of ConversationThreadAsyncClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    ConversationThreadAsyncClient(ConversationThreadClientImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Adds participants to a specific conversation.
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>repeatability-request-id</td><td>String</td><td>No</td><td>Repeatability request ID header</td></tr>
     * <tr><td>repeatability-first-sent</td><td>String</td><td>No</td><td>Repeatability first sent header as
     * HTTP-date</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     participants (Required): [
     *          (Required){
     *             kind: String(internal/external) (Required)
     *             id: String (Required)
     *             displayName: String (Optional)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     invalidParticipants (Required): [
     *          (Required){
     *             id: String (Required)
     *             error (Optional): {
     *                 error (Required): (recursive schema, see error above)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param conversationId The conversation ID.
     * @param options Details of the payload for adding participants to a conversation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response for the add participants operation along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> addParticipantsWithResponse(String conversationId, BinaryData options,
        RequestOptions requestOptions) {
        return this.serviceClient.addParticipantsWithResponseAsync(conversationId, options, requestOptions);
    }

    /**
     * remove a participant from a conversation.
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>repeatability-request-id</td><td>String</td><td>No</td><td>Repeatability request ID header</td></tr>
     * <tr><td>repeatability-first-sent</td><td>String</td><td>No</td><td>Repeatability first sent header as
     * HTTP-date</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     participantIds (Required): [
     *         String (Required)
     *     ]
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     invalidParticipants (Required): [
     *          (Required){
     *             id: String (Required)
     *             error (Optional): {
     *                 error (Required): (recursive schema, see error above)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param conversationId The conversation ID.
     * @param options Details of the request body for removing participants from a conversation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response for the remove participants operation along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> removeParticipantsWithResponse(String conversationId, BinaryData options,
        RequestOptions requestOptions) {
        return this.serviceClient.removeParticipantsWithResponseAsync(conversationId, options, requestOptions);
    }

    /**
     * Retrieves list of conversations.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxPageSize</td><td>Integer</td><td>No</td><td>Number of objects to return per page.</td></tr>
     * <tr><td>participantId</td><td>String</td><td>No</td><td>The participant user ID</td></tr>
     * <tr><td>channelId</td><td>String</td><td>No</td><td>The id of channel</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     topic: String (Optional)
     *     deliveryChannelIds (Optional): [
     *         String (Optional)
     *     ]
     *     outboundDeliveryStrategy: String(internalOnly/allParticipants) (Optional)
     *     participants (Optional): [
     *          (Optional){
     *             kind: String(internal/external) (Required)
     *             id: String (Required)
     *             displayName: String (Optional)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of Conversation items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listConversations(RequestOptions requestOptions) {
        return this.serviceClient.listConversationsAsync(requestOptions);
    }

    /**
     * Retrieves list of conversation messages.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxPageSize</td><td>Integer</td><td>No</td><td>Number of objects to return per page.</td></tr>
     * <tr><td>participantId</td><td>String</td><td>No</td><td>The participant user ID</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     sequenceId: Long (Optional)
     *     message (Required): {
     *         kind: String(text/image/image_v0/document/video/audio/template/sticker/reaction/interactive) (Required)
     *     }
     *     senderDisplayName: String (Optional)
     *     senderCommunicationIdentifier: String (Required)
     *     createdOn: OffsetDateTime (Required)
     * }
     * }
     * </pre>
     * 
     * @param conversationId The conversation ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of ConversationMessageItem items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listMessages(String conversationId, RequestOptions requestOptions) {
        return this.serviceClient.listMessagesAsync(conversationId, requestOptions);
    }

    /**
     * Sends a conversation message from Business to User.
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>repeatability-request-id</td><td>String</td><td>No</td><td>Repeatability request ID header</td></tr>
     * <tr><td>repeatability-first-sent</td><td>String</td><td>No</td><td>Repeatability first sent header as
     * HTTP-date</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     request (Required): {
     *         kind: String(text/image/image_v0/document/video/audio/template/sticker/reaction/interactive) (Required)
     *     }
     *     outboundDeliveryStrategy: String(internalOnly/allParticipants) (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     messageId: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param conversationId The conversation ID.
     * @param options Details of the conversation message to send.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return result of the send conversation message operation along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> sendMessageWithResponse(String conversationId, BinaryData options,
        RequestOptions requestOptions) {
        return this.serviceClient.sendMessageWithResponseAsync(conversationId, options, requestOptions);
    }

    /**
     * Get AI Analysis of a conversation.
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>repeatability-request-id</td><td>String</td><td>No</td><td>Repeatability request ID header</td></tr>
     * <tr><td>repeatability-first-sent</td><td>String</td><td>No</td><td>Repeatability first sent header as
     * HTTP-date</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     summary: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param conversationId The conversation ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return aI Analysis of a conversation along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> analyzeConversationWithResponse(String conversationId,
        RequestOptions requestOptions) {
        return this.serviceClient.analyzeConversationWithResponseAsync(conversationId, requestOptions);
    }

    /**
     * Adds participants to a specific conversation.
     * 
     * @param conversationId The conversation ID.
     * @param options Details of the payload for adding participants to a conversation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for the add participants operation on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AddParticipantsResult> addParticipants(String conversationId, AddParticipantsOptions options) {
        // Generated convenience method for addParticipantsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return addParticipantsWithResponse(conversationId, BinaryData.fromObject(options), requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(AddParticipantsResult.class));
    }

    /**
     * remove a participant from a conversation.
     * 
     * @param conversationId The conversation ID.
     * @param options Details of the request body for removing participants from a conversation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response for the remove participants operation on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RemoveParticipantsResult> removeParticipants(String conversationId, RemoveParticipantsOptions options) {
        // Generated convenience method for removeParticipantsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return removeParticipantsWithResponse(conversationId, BinaryData.fromObject(options), requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(RemoveParticipantsResult.class));
    }

    /**
     * Retrieves list of conversations.
     * 
     * @param participantId The participant user ID.
     * @param channelId The id of channel.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of Conversation items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<CommunicationConversation> listConversations(String participantId, String channelId) {
        // Generated convenience method for listConversations
        RequestOptions requestOptions = new RequestOptions();
        if (participantId != null) {
            requestOptions.addQueryParam("participantId", participantId, false);
        }
        if (channelId != null) {
            requestOptions.addQueryParam("channelId", channelId, false);
        }
        PagedFlux<BinaryData> pagedFluxResponse = listConversations(requestOptions);
        return PagedFlux.create(() -> (continuationTokenParam, pageSizeParam) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationTokenParam == null)
                ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationTokenParam).take(1);
            return flux
                .map(pagedResponse -> new PagedResponseBase<Void, CommunicationConversation>(pagedResponse.getRequest(),
                    pagedResponse.getStatusCode(), pagedResponse.getHeaders(),
                    pagedResponse.getValue()
                        .stream()
                        .map(protocolMethodData -> protocolMethodData.toObject(CommunicationConversation.class))
                        .collect(Collectors.toList()),
                    pagedResponse.getContinuationToken(), null));
        });
    }

    /**
     * Retrieves list of conversations.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of Conversation items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<CommunicationConversation> listConversations() {
        // Generated convenience method for listConversations
        RequestOptions requestOptions = new RequestOptions();
        PagedFlux<BinaryData> pagedFluxResponse = listConversations(requestOptions);
        return PagedFlux.create(() -> (continuationTokenParam, pageSizeParam) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationTokenParam == null)
                ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationTokenParam).take(1);
            return flux
                .map(pagedResponse -> new PagedResponseBase<Void, CommunicationConversation>(pagedResponse.getRequest(),
                    pagedResponse.getStatusCode(), pagedResponse.getHeaders(),
                    pagedResponse.getValue()
                        .stream()
                        .map(protocolMethodData -> protocolMethodData.toObject(CommunicationConversation.class))
                        .collect(Collectors.toList()),
                    pagedResponse.getContinuationToken(), null));
        });
    }

    /**
     * Retrieves list of conversation messages.
     * 
     * @param conversationId The conversation ID.
     * @param participantId The participant user ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of ConversationMessageItem items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<ConversationMessageItem> listMessages(String conversationId, String participantId) {
        // Generated convenience method for listMessages
        RequestOptions requestOptions = new RequestOptions();
        if (participantId != null) {
            requestOptions.addQueryParam("participantId", participantId, false);
        }
        PagedFlux<BinaryData> pagedFluxResponse = listMessages(conversationId, requestOptions);
        return PagedFlux.create(() -> (continuationTokenParam, pageSizeParam) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationTokenParam == null)
                ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationTokenParam).take(1);
            return flux
                .map(pagedResponse -> new PagedResponseBase<Void, ConversationMessageItem>(pagedResponse.getRequest(),
                    pagedResponse.getStatusCode(), pagedResponse.getHeaders(),
                    pagedResponse.getValue()
                        .stream()
                        .map(protocolMethodData -> protocolMethodData.toObject(ConversationMessageItem.class))
                        .collect(Collectors.toList()),
                    pagedResponse.getContinuationToken(), null));
        });
    }

    /**
     * Retrieves list of conversation messages.
     * 
     * @param conversationId The conversation ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of ConversationMessageItem items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<ConversationMessageItem> listMessages(String conversationId) {
        // Generated convenience method for listMessages
        RequestOptions requestOptions = new RequestOptions();
        PagedFlux<BinaryData> pagedFluxResponse = listMessages(conversationId, requestOptions);
        return PagedFlux.create(() -> (continuationTokenParam, pageSizeParam) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationTokenParam == null)
                ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationTokenParam).take(1);
            return flux
                .map(pagedResponse -> new PagedResponseBase<Void, ConversationMessageItem>(pagedResponse.getRequest(),
                    pagedResponse.getStatusCode(), pagedResponse.getHeaders(),
                    pagedResponse.getValue()
                        .stream()
                        .map(protocolMethodData -> protocolMethodData.toObject(ConversationMessageItem.class))
                        .collect(Collectors.toList()),
                    pagedResponse.getContinuationToken(), null));
        });
    }

    /**
     * Sends a conversation message from Business to User.
     * 
     * @param conversationId The conversation ID.
     * @param options Details of the conversation message to send.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the send conversation message operation on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SendConversationMessageResult> sendMessage(String conversationId,
        SendConversationMessageOptions options) {
        // Generated convenience method for sendMessageWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return sendMessageWithResponse(conversationId, BinaryData.fromObject(options), requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(SendConversationMessageResult.class));
    }

    /**
     * Get AI Analysis of a conversation.
     * 
     * @param conversationId The conversation ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return aI Analysis of a conversation on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<GetConversationThreadAnalysisResult> analyzeConversation(String conversationId) {
        // Generated convenience method for analyzeConversationWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return analyzeConversationWithResponse(conversationId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(GetConversationThreadAnalysisResult.class));
    }
}
