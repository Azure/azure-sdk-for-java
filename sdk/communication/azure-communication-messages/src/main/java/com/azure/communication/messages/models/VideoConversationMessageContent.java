// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.communication.messages.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A request to send a video conversation message.
 */
@Fluent
public final class VideoConversationMessageContent extends ConversationMessageContent {
    /*
     * The type discriminator describing a message type.
     */
    @Generated
    private CommunicationMessageKind kind = CommunicationMessageKind.VIDEO;

    /*
     * Optional text content.
     */
    @Generated
    private String caption;

    /*
     * A media url for the file. Required if the type is one of the supported media types, e.g. image
     */
    @Generated
    private final String mediaUrl;

    /**
     * Creates an instance of VideoConversationMessageContent class.
     * 
     * @param mediaUrl the mediaUrl value to set.
     */
    @Generated
    public VideoConversationMessageContent(String mediaUrl) {
        this.mediaUrl = mediaUrl;
    }

    /**
     * Get the kind property: The type discriminator describing a message type.
     * 
     * @return the kind value.
     */
    @Generated
    @Override
    public CommunicationMessageKind getKind() {
        return this.kind;
    }

    /**
     * Get the caption property: Optional text content.
     * 
     * @return the caption value.
     */
    @Generated
    public String getCaption() {
        return this.caption;
    }

    /**
     * Set the caption property: Optional text content.
     * 
     * @param caption the caption value to set.
     * @return the VideoConversationMessageContent object itself.
     */
    @Generated
    public VideoConversationMessageContent setCaption(String caption) {
        this.caption = caption;
        return this;
    }

    /**
     * Get the mediaUrl property: A media url for the file. Required if the type is one of the supported media types,
     * e.g. image.
     * 
     * @return the mediaUrl value.
     */
    @Generated
    public String getMediaUrl() {
        return this.mediaUrl;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("mediaUri", this.mediaUrl);
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        jsonWriter.writeStringField("caption", this.caption);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VideoConversationMessageContent from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VideoConversationMessageContent if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the VideoConversationMessageContent.
     */
    @Generated
    public static VideoConversationMessageContent fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String mediaUrl = null;
            CommunicationMessageKind kind = CommunicationMessageKind.VIDEO;
            String caption = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("mediaUri".equals(fieldName)) {
                    mediaUrl = reader.getString();
                } else if ("kind".equals(fieldName)) {
                    kind = CommunicationMessageKind.fromString(reader.getString());
                } else if ("caption".equals(fieldName)) {
                    caption = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            VideoConversationMessageContent deserializedVideoConversationMessageContent
                = new VideoConversationMessageContent(mediaUrl);
            deserializedVideoConversationMessageContent.kind = kind;
            deserializedVideoConversationMessageContent.caption = caption;

            return deserializedVideoConversationMessageContent;
        });
    }
}
