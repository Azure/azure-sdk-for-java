/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.resourcemover.v2021_01_01.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.resourcemover.v2021_01_01.MoveResourceProperties;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in MoveResources.
 */
public class MoveResourcesInner {
    /** The Retrofit service to perform REST calls. */
    private MoveResourcesService service;
    /** The service client containing this operation class. */
    private ResourceMoverServiceAPIImpl client;

    /**
     * Initializes an instance of MoveResourcesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public MoveResourcesInner(Retrofit retrofit, ResourceMoverServiceAPIImpl client) {
        this.service = retrofit.create(MoveResourcesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for MoveResources to be
     * used by Retrofit to perform actually REST calls.
     */
    interface MoveResourcesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.resourcemover.v2021_01_01.MoveResources list" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/moveCollections/{moveCollectionName}/moveResources")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("moveCollectionName") String moveCollectionName, @Query("api-version") String apiVersion, @Query("$filter") String filter, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.resourcemover.v2021_01_01.MoveResources create" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/moveCollections/{moveCollectionName}/moveResources/{moveResourceName}")
        Observable<Response<ResponseBody>> create(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("moveCollectionName") String moveCollectionName, @Path("moveResourceName") String moveResourceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body MoveResourceInner body, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.resourcemover.v2021_01_01.MoveResources beginCreate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/moveCollections/{moveCollectionName}/moveResources/{moveResourceName}")
        Observable<Response<ResponseBody>> beginCreate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("moveCollectionName") String moveCollectionName, @Path("moveResourceName") String moveResourceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body MoveResourceInner body, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.resourcemover.v2021_01_01.MoveResources delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/moveCollections/{moveCollectionName}/moveResources/{moveResourceName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("moveCollectionName") String moveCollectionName, @Path("moveResourceName") String moveResourceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.resourcemover.v2021_01_01.MoveResources beginDelete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/moveCollections/{moveCollectionName}/moveResources/{moveResourceName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginDelete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("moveCollectionName") String moveCollectionName, @Path("moveResourceName") String moveResourceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.resourcemover.v2021_01_01.MoveResources get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/moveCollections/{moveCollectionName}/moveResources/{moveResourceName}")
        Observable<Response<ResponseBody>> get(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("moveCollectionName") String moveCollectionName, @Path("moveResourceName") String moveResourceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.resourcemover.v2021_01_01.MoveResources listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Lists the Move Resources in the move collection.
     *
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;MoveResourceInner&gt; object if successful.
     */
    public PagedList<MoveResourceInner> list(final String resourceGroupName, final String moveCollectionName) {
        ServiceResponse<Page<MoveResourceInner>> response = listSinglePageAsync(resourceGroupName, moveCollectionName).toBlocking().single();
        return new PagedList<MoveResourceInner>(response.body()) {
            @Override
            public Page<MoveResourceInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the Move Resources in the move collection.
     *
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<MoveResourceInner>> listAsync(final String resourceGroupName, final String moveCollectionName, final ListOperationCallback<MoveResourceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(resourceGroupName, moveCollectionName),
            new Func1<String, Observable<ServiceResponse<Page<MoveResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MoveResourceInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the Move Resources in the move collection.
     *
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;MoveResourceInner&gt; object
     */
    public Observable<Page<MoveResourceInner>> listAsync(final String resourceGroupName, final String moveCollectionName) {
        return listWithServiceResponseAsync(resourceGroupName, moveCollectionName)
            .map(new Func1<ServiceResponse<Page<MoveResourceInner>>, Page<MoveResourceInner>>() {
                @Override
                public Page<MoveResourceInner> call(ServiceResponse<Page<MoveResourceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the Move Resources in the move collection.
     *
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;MoveResourceInner&gt; object
     */
    public Observable<ServiceResponse<Page<MoveResourceInner>>> listWithServiceResponseAsync(final String resourceGroupName, final String moveCollectionName) {
        return listSinglePageAsync(resourceGroupName, moveCollectionName)
            .concatMap(new Func1<ServiceResponse<Page<MoveResourceInner>>, Observable<ServiceResponse<Page<MoveResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MoveResourceInner>>> call(ServiceResponse<Page<MoveResourceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the Move Resources in the move collection.
     *
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;MoveResourceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<MoveResourceInner>>> listSinglePageAsync(final String resourceGroupName, final String moveCollectionName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (moveCollectionName == null) {
            throw new IllegalArgumentException("Parameter moveCollectionName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String filter = null;
        return service.list(this.client.subscriptionId(), resourceGroupName, moveCollectionName, this.client.apiVersion(), filter, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<MoveResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MoveResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<MoveResourceInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<MoveResourceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Lists the Move Resources in the move collection.
     *
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param filter The filter to apply on the operation. For example, you can use $filter=Properties/ProvisioningState eq 'Succeeded'.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;MoveResourceInner&gt; object if successful.
     */
    public PagedList<MoveResourceInner> list(final String resourceGroupName, final String moveCollectionName, final String filter) {
        ServiceResponse<Page<MoveResourceInner>> response = listSinglePageAsync(resourceGroupName, moveCollectionName, filter).toBlocking().single();
        return new PagedList<MoveResourceInner>(response.body()) {
            @Override
            public Page<MoveResourceInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the Move Resources in the move collection.
     *
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param filter The filter to apply on the operation. For example, you can use $filter=Properties/ProvisioningState eq 'Succeeded'.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<MoveResourceInner>> listAsync(final String resourceGroupName, final String moveCollectionName, final String filter, final ListOperationCallback<MoveResourceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(resourceGroupName, moveCollectionName, filter),
            new Func1<String, Observable<ServiceResponse<Page<MoveResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MoveResourceInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the Move Resources in the move collection.
     *
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param filter The filter to apply on the operation. For example, you can use $filter=Properties/ProvisioningState eq 'Succeeded'.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;MoveResourceInner&gt; object
     */
    public Observable<Page<MoveResourceInner>> listAsync(final String resourceGroupName, final String moveCollectionName, final String filter) {
        return listWithServiceResponseAsync(resourceGroupName, moveCollectionName, filter)
            .map(new Func1<ServiceResponse<Page<MoveResourceInner>>, Page<MoveResourceInner>>() {
                @Override
                public Page<MoveResourceInner> call(ServiceResponse<Page<MoveResourceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the Move Resources in the move collection.
     *
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param filter The filter to apply on the operation. For example, you can use $filter=Properties/ProvisioningState eq 'Succeeded'.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;MoveResourceInner&gt; object
     */
    public Observable<ServiceResponse<Page<MoveResourceInner>>> listWithServiceResponseAsync(final String resourceGroupName, final String moveCollectionName, final String filter) {
        return listSinglePageAsync(resourceGroupName, moveCollectionName, filter)
            .concatMap(new Func1<ServiceResponse<Page<MoveResourceInner>>, Observable<ServiceResponse<Page<MoveResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MoveResourceInner>>> call(ServiceResponse<Page<MoveResourceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the Move Resources in the move collection.
     *
    ServiceResponse<PageImpl<MoveResourceInner>> * @param resourceGroupName The Resource Group Name.
    ServiceResponse<PageImpl<MoveResourceInner>> * @param moveCollectionName The Move Collection Name.
    ServiceResponse<PageImpl<MoveResourceInner>> * @param filter The filter to apply on the operation. For example, you can use $filter=Properties/ProvisioningState eq 'Succeeded'.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;MoveResourceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<MoveResourceInner>>> listSinglePageAsync(final String resourceGroupName, final String moveCollectionName, final String filter) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (moveCollectionName == null) {
            throw new IllegalArgumentException("Parameter moveCollectionName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.subscriptionId(), resourceGroupName, moveCollectionName, this.client.apiVersion(), filter, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<MoveResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MoveResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<MoveResourceInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<MoveResourceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<MoveResourceInner>> listDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<MoveResourceInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<MoveResourceInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Creates or updates a Move Resource in the move collection.
     *
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param moveResourceName The Move Resource Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the MoveResourceInner object if successful.
     */
    public MoveResourceInner create(String resourceGroupName, String moveCollectionName, String moveResourceName) {
        return createWithServiceResponseAsync(resourceGroupName, moveCollectionName, moveResourceName).toBlocking().last().body();
    }

    /**
     * Creates or updates a Move Resource in the move collection.
     *
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param moveResourceName The Move Resource Name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<MoveResourceInner> createAsync(String resourceGroupName, String moveCollectionName, String moveResourceName, final ServiceCallback<MoveResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(resourceGroupName, moveCollectionName, moveResourceName), serviceCallback);
    }

    /**
     * Creates or updates a Move Resource in the move collection.
     *
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param moveResourceName The Move Resource Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<MoveResourceInner> createAsync(String resourceGroupName, String moveCollectionName, String moveResourceName) {
        return createWithServiceResponseAsync(resourceGroupName, moveCollectionName, moveResourceName).map(new Func1<ServiceResponse<MoveResourceInner>, MoveResourceInner>() {
            @Override
            public MoveResourceInner call(ServiceResponse<MoveResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates a Move Resource in the move collection.
     *
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param moveResourceName The Move Resource Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<MoveResourceInner>> createWithServiceResponseAsync(String resourceGroupName, String moveCollectionName, String moveResourceName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (moveCollectionName == null) {
            throw new IllegalArgumentException("Parameter moveCollectionName is required and cannot be null.");
        }
        if (moveResourceName == null) {
            throw new IllegalArgumentException("Parameter moveResourceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final MoveResourceProperties properties = null;
        MoveResourceInner body = new MoveResourceInner();
        body.withProperties(null);
        Observable<Response<ResponseBody>> observable = service.create(this.client.subscriptionId(), resourceGroupName, moveCollectionName, moveResourceName, this.client.apiVersion(), this.client.acceptLanguage(), body, this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<MoveResourceInner>() { }.getType());
    }
    /**
     * Creates or updates a Move Resource in the move collection.
     *
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param moveResourceName The Move Resource Name.
     * @param properties the MoveResourceProperties value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the MoveResourceInner object if successful.
     */
    public MoveResourceInner create(String resourceGroupName, String moveCollectionName, String moveResourceName, MoveResourceProperties properties) {
        return createWithServiceResponseAsync(resourceGroupName, moveCollectionName, moveResourceName, properties).toBlocking().last().body();
    }

    /**
     * Creates or updates a Move Resource in the move collection.
     *
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param moveResourceName The Move Resource Name.
     * @param properties the MoveResourceProperties value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<MoveResourceInner> createAsync(String resourceGroupName, String moveCollectionName, String moveResourceName, MoveResourceProperties properties, final ServiceCallback<MoveResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(resourceGroupName, moveCollectionName, moveResourceName, properties), serviceCallback);
    }

    /**
     * Creates or updates a Move Resource in the move collection.
     *
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param moveResourceName The Move Resource Name.
     * @param properties the MoveResourceProperties value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<MoveResourceInner> createAsync(String resourceGroupName, String moveCollectionName, String moveResourceName, MoveResourceProperties properties) {
        return createWithServiceResponseAsync(resourceGroupName, moveCollectionName, moveResourceName, properties).map(new Func1<ServiceResponse<MoveResourceInner>, MoveResourceInner>() {
            @Override
            public MoveResourceInner call(ServiceResponse<MoveResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates a Move Resource in the move collection.
     *
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param moveResourceName The Move Resource Name.
     * @param properties the MoveResourceProperties value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<MoveResourceInner>> createWithServiceResponseAsync(String resourceGroupName, String moveCollectionName, String moveResourceName, MoveResourceProperties properties) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (moveCollectionName == null) {
            throw new IllegalArgumentException("Parameter moveCollectionName is required and cannot be null.");
        }
        if (moveResourceName == null) {
            throw new IllegalArgumentException("Parameter moveResourceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(properties);
        MoveResourceInner body = null;
        if (properties != null) {
            body = new MoveResourceInner();
            body.withProperties(properties);
        }
        Observable<Response<ResponseBody>> observable = service.create(this.client.subscriptionId(), resourceGroupName, moveCollectionName, moveResourceName, this.client.apiVersion(), this.client.acceptLanguage(), body, this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<MoveResourceInner>() { }.getType());
    }

    /**
     * Creates or updates a Move Resource in the move collection.
     *
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param moveResourceName The Move Resource Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the MoveResourceInner object if successful.
     */
    public MoveResourceInner beginCreate(String resourceGroupName, String moveCollectionName, String moveResourceName) {
        return beginCreateWithServiceResponseAsync(resourceGroupName, moveCollectionName, moveResourceName).toBlocking().single().body();
    }

    /**
     * Creates or updates a Move Resource in the move collection.
     *
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param moveResourceName The Move Resource Name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<MoveResourceInner> beginCreateAsync(String resourceGroupName, String moveCollectionName, String moveResourceName, final ServiceCallback<MoveResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateWithServiceResponseAsync(resourceGroupName, moveCollectionName, moveResourceName), serviceCallback);
    }

    /**
     * Creates or updates a Move Resource in the move collection.
     *
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param moveResourceName The Move Resource Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the MoveResourceInner object
     */
    public Observable<MoveResourceInner> beginCreateAsync(String resourceGroupName, String moveCollectionName, String moveResourceName) {
        return beginCreateWithServiceResponseAsync(resourceGroupName, moveCollectionName, moveResourceName).map(new Func1<ServiceResponse<MoveResourceInner>, MoveResourceInner>() {
            @Override
            public MoveResourceInner call(ServiceResponse<MoveResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates a Move Resource in the move collection.
     *
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param moveResourceName The Move Resource Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the MoveResourceInner object
     */
    public Observable<ServiceResponse<MoveResourceInner>> beginCreateWithServiceResponseAsync(String resourceGroupName, String moveCollectionName, String moveResourceName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (moveCollectionName == null) {
            throw new IllegalArgumentException("Parameter moveCollectionName is required and cannot be null.");
        }
        if (moveResourceName == null) {
            throw new IllegalArgumentException("Parameter moveResourceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final MoveResourceProperties properties = null;
        MoveResourceInner body = new MoveResourceInner();
        body.withProperties(null);
        return service.beginCreate(this.client.subscriptionId(), resourceGroupName, moveCollectionName, moveResourceName, this.client.apiVersion(), this.client.acceptLanguage(), body, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<MoveResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<MoveResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<MoveResourceInner> clientResponse = beginCreateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Creates or updates a Move Resource in the move collection.
     *
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param moveResourceName The Move Resource Name.
     * @param properties the MoveResourceProperties value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the MoveResourceInner object if successful.
     */
    public MoveResourceInner beginCreate(String resourceGroupName, String moveCollectionName, String moveResourceName, MoveResourceProperties properties) {
        return beginCreateWithServiceResponseAsync(resourceGroupName, moveCollectionName, moveResourceName, properties).toBlocking().single().body();
    }

    /**
     * Creates or updates a Move Resource in the move collection.
     *
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param moveResourceName The Move Resource Name.
     * @param properties the MoveResourceProperties value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<MoveResourceInner> beginCreateAsync(String resourceGroupName, String moveCollectionName, String moveResourceName, MoveResourceProperties properties, final ServiceCallback<MoveResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateWithServiceResponseAsync(resourceGroupName, moveCollectionName, moveResourceName, properties), serviceCallback);
    }

    /**
     * Creates or updates a Move Resource in the move collection.
     *
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param moveResourceName The Move Resource Name.
     * @param properties the MoveResourceProperties value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the MoveResourceInner object
     */
    public Observable<MoveResourceInner> beginCreateAsync(String resourceGroupName, String moveCollectionName, String moveResourceName, MoveResourceProperties properties) {
        return beginCreateWithServiceResponseAsync(resourceGroupName, moveCollectionName, moveResourceName, properties).map(new Func1<ServiceResponse<MoveResourceInner>, MoveResourceInner>() {
            @Override
            public MoveResourceInner call(ServiceResponse<MoveResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates a Move Resource in the move collection.
     *
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param moveResourceName The Move Resource Name.
     * @param properties the MoveResourceProperties value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the MoveResourceInner object
     */
    public Observable<ServiceResponse<MoveResourceInner>> beginCreateWithServiceResponseAsync(String resourceGroupName, String moveCollectionName, String moveResourceName, MoveResourceProperties properties) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (moveCollectionName == null) {
            throw new IllegalArgumentException("Parameter moveCollectionName is required and cannot be null.");
        }
        if (moveResourceName == null) {
            throw new IllegalArgumentException("Parameter moveResourceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(properties);
        MoveResourceInner body = null;
        if (properties != null) {
            body = new MoveResourceInner();
            body.withProperties(properties);
        }
        return service.beginCreate(this.client.subscriptionId(), resourceGroupName, moveCollectionName, moveResourceName, this.client.apiVersion(), this.client.acceptLanguage(), body, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<MoveResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<MoveResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<MoveResourceInner> clientResponse = beginCreateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<MoveResourceInner> beginCreateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<MoveResourceInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<MoveResourceInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Deletes a Move Resource from the move collection.
     *
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param moveResourceName The Move Resource Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatusInner object if successful.
     */
    public OperationStatusInner delete(String resourceGroupName, String moveCollectionName, String moveResourceName) {
        return deleteWithServiceResponseAsync(resourceGroupName, moveCollectionName, moveResourceName).toBlocking().last().body();
    }

    /**
     * Deletes a Move Resource from the move collection.
     *
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param moveResourceName The Move Resource Name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<OperationStatusInner> deleteAsync(String resourceGroupName, String moveCollectionName, String moveResourceName, final ServiceCallback<OperationStatusInner> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, moveCollectionName, moveResourceName), serviceCallback);
    }

    /**
     * Deletes a Move Resource from the move collection.
     *
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param moveResourceName The Move Resource Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<OperationStatusInner> deleteAsync(String resourceGroupName, String moveCollectionName, String moveResourceName) {
        return deleteWithServiceResponseAsync(resourceGroupName, moveCollectionName, moveResourceName).map(new Func1<ServiceResponse<OperationStatusInner>, OperationStatusInner>() {
            @Override
            public OperationStatusInner call(ServiceResponse<OperationStatusInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes a Move Resource from the move collection.
     *
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param moveResourceName The Move Resource Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<OperationStatusInner>> deleteWithServiceResponseAsync(String resourceGroupName, String moveCollectionName, String moveResourceName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (moveCollectionName == null) {
            throw new IllegalArgumentException("Parameter moveCollectionName is required and cannot be null.");
        }
        if (moveResourceName == null) {
            throw new IllegalArgumentException("Parameter moveResourceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.delete(this.client.subscriptionId(), resourceGroupName, moveCollectionName, moveResourceName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<OperationStatusInner>() { }.getType());
    }

    /**
     * Deletes a Move Resource from the move collection.
     *
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param moveResourceName The Move Resource Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatusInner object if successful.
     */
    public OperationStatusInner beginDelete(String resourceGroupName, String moveCollectionName, String moveResourceName) {
        return beginDeleteWithServiceResponseAsync(resourceGroupName, moveCollectionName, moveResourceName).toBlocking().single().body();
    }

    /**
     * Deletes a Move Resource from the move collection.
     *
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param moveResourceName The Move Resource Name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<OperationStatusInner> beginDeleteAsync(String resourceGroupName, String moveCollectionName, String moveResourceName, final ServiceCallback<OperationStatusInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeleteWithServiceResponseAsync(resourceGroupName, moveCollectionName, moveResourceName), serviceCallback);
    }

    /**
     * Deletes a Move Resource from the move collection.
     *
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param moveResourceName The Move Resource Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatusInner object
     */
    public Observable<OperationStatusInner> beginDeleteAsync(String resourceGroupName, String moveCollectionName, String moveResourceName) {
        return beginDeleteWithServiceResponseAsync(resourceGroupName, moveCollectionName, moveResourceName).map(new Func1<ServiceResponse<OperationStatusInner>, OperationStatusInner>() {
            @Override
            public OperationStatusInner call(ServiceResponse<OperationStatusInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes a Move Resource from the move collection.
     *
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param moveResourceName The Move Resource Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatusInner object
     */
    public Observable<ServiceResponse<OperationStatusInner>> beginDeleteWithServiceResponseAsync(String resourceGroupName, String moveCollectionName, String moveResourceName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (moveCollectionName == null) {
            throw new IllegalArgumentException("Parameter moveCollectionName is required and cannot be null.");
        }
        if (moveResourceName == null) {
            throw new IllegalArgumentException("Parameter moveResourceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginDelete(this.client.subscriptionId(), resourceGroupName, moveCollectionName, moveResourceName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<OperationStatusInner>>>() {
                @Override
                public Observable<ServiceResponse<OperationStatusInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<OperationStatusInner> clientResponse = beginDeleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<OperationStatusInner> beginDeleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<OperationStatusInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<OperationStatusInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets the Move Resource.
     *
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param moveResourceName The Move Resource Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the MoveResourceInner object if successful.
     */
    public MoveResourceInner get(String resourceGroupName, String moveCollectionName, String moveResourceName) {
        return getWithServiceResponseAsync(resourceGroupName, moveCollectionName, moveResourceName).toBlocking().single().body();
    }

    /**
     * Gets the Move Resource.
     *
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param moveResourceName The Move Resource Name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<MoveResourceInner> getAsync(String resourceGroupName, String moveCollectionName, String moveResourceName, final ServiceCallback<MoveResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroupName, moveCollectionName, moveResourceName), serviceCallback);
    }

    /**
     * Gets the Move Resource.
     *
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param moveResourceName The Move Resource Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the MoveResourceInner object
     */
    public Observable<MoveResourceInner> getAsync(String resourceGroupName, String moveCollectionName, String moveResourceName) {
        return getWithServiceResponseAsync(resourceGroupName, moveCollectionName, moveResourceName).map(new Func1<ServiceResponse<MoveResourceInner>, MoveResourceInner>() {
            @Override
            public MoveResourceInner call(ServiceResponse<MoveResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the Move Resource.
     *
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param moveResourceName The Move Resource Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the MoveResourceInner object
     */
    public Observable<ServiceResponse<MoveResourceInner>> getWithServiceResponseAsync(String resourceGroupName, String moveCollectionName, String moveResourceName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (moveCollectionName == null) {
            throw new IllegalArgumentException("Parameter moveCollectionName is required and cannot be null.");
        }
        if (moveResourceName == null) {
            throw new IllegalArgumentException("Parameter moveResourceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(this.client.subscriptionId(), resourceGroupName, moveCollectionName, moveResourceName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<MoveResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<MoveResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<MoveResourceInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<MoveResourceInner> getDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<MoveResourceInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<MoveResourceInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Lists the Move Resources in the move collection.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;MoveResourceInner&gt; object if successful.
     */
    public PagedList<MoveResourceInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<MoveResourceInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<MoveResourceInner>(response.body()) {
            @Override
            public Page<MoveResourceInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the Move Resources in the move collection.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<MoveResourceInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<MoveResourceInner>> serviceFuture, final ListOperationCallback<MoveResourceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<MoveResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MoveResourceInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the Move Resources in the move collection.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;MoveResourceInner&gt; object
     */
    public Observable<Page<MoveResourceInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<MoveResourceInner>>, Page<MoveResourceInner>>() {
                @Override
                public Page<MoveResourceInner> call(ServiceResponse<Page<MoveResourceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the Move Resources in the move collection.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;MoveResourceInner&gt; object
     */
    public Observable<ServiceResponse<Page<MoveResourceInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<MoveResourceInner>>, Observable<ServiceResponse<Page<MoveResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MoveResourceInner>>> call(ServiceResponse<Page<MoveResourceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the Move Resources in the move collection.
     *
    ServiceResponse<PageImpl<MoveResourceInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;MoveResourceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<MoveResourceInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<MoveResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MoveResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<MoveResourceInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<MoveResourceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<MoveResourceInner>> listNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<MoveResourceInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<MoveResourceInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
