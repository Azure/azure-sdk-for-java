/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.resourcemover.v2021_01_01.implementation;

import com.microsoft.azure.management.resourcemover.v2021_01_01.MoveResource;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.resourcemover.v2021_01_01.MoveResourceProperties;
import java.util.List;
import rx.functions.Func1;

class MoveResourceImpl extends CreatableUpdatableImpl<MoveResource, MoveResourceInner, MoveResourceImpl> implements MoveResource, MoveResource.Definition, MoveResource.Update {
    private final ResourceMoverManager manager;
    private String resourceGroupName;
    private String moveCollectionName;
    private String moveResourceName;
    private MoveResourceProperties cproperties;
    private MoveResourceProperties uproperties;

    MoveResourceImpl(String name, ResourceMoverManager manager) {
        super(name, new MoveResourceInner());
        this.manager = manager;
        // Set resource name
        this.moveResourceName = name;
        //
        this.cproperties = new MoveResourceProperties();
        this.uproperties = new MoveResourceProperties();
    }

    MoveResourceImpl(MoveResourceInner inner, ResourceMoverManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.moveResourceName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.moveCollectionName = IdParsingUtils.getValueFromIdByName(inner.id(), "moveCollections");
        this.moveResourceName = IdParsingUtils.getValueFromIdByName(inner.id(), "moveResources");
        //
        this.cproperties = new MoveResourceProperties();
        this.uproperties = new MoveResourceProperties();
    }

    @Override
    public ResourceMoverManager manager() {
        return this.manager;
    }

    @Override
    public Observable<MoveResource> createResourceAsync() {
        MoveResourcesInner client = this.manager().inner().moveResources();
        return client.createAsync(this.resourceGroupName, this.moveCollectionName, this.moveResourceName, this.cproperties)
            .map(new Func1<MoveResourceInner, MoveResourceInner>() {
               @Override
               public MoveResourceInner call(MoveResourceInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<MoveResource> updateResourceAsync() {
        MoveResourcesInner client = this.manager().inner().moveResources();
        return client.createAsync(this.resourceGroupName, this.moveCollectionName, this.moveResourceName, this.uproperties)
            .map(new Func1<MoveResourceInner, MoveResourceInner>() {
               @Override
               public MoveResourceInner call(MoveResourceInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<MoveResourceInner> getInnerAsync() {
        MoveResourcesInner client = this.manager().inner().moveResources();
        return client.getAsync(this.resourceGroupName, this.moveCollectionName, this.moveResourceName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }

    private void resetCreateUpdateParameters() {
        this.cproperties = new MoveResourceProperties();
        this.uproperties = new MoveResourceProperties();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public MoveResourceProperties properties() {
        return this.inner().properties();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public MoveResourceImpl withExistingMoveCollection(String resourceGroupName, String moveCollectionName) {
        this.resourceGroupName = resourceGroupName;
        this.moveCollectionName = moveCollectionName;
        return this;
    }

    @Override
    public MoveResourceImpl withProperties(MoveResourceProperties properties) {
        if (isInCreateMode()) {
            this.cproperties = properties;
        } else {
            this.uproperties = properties;
        }
        return this;
    }

}
