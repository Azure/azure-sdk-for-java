/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.resourcemover.v2021_01_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.resourcemover.v2021_01_01.MoveResources;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.resourcemover.v2021_01_01.MoveResource;

class MoveResourcesImpl extends WrapperImpl<MoveResourcesInner> implements MoveResources {
    private final ResourceMoverManager manager;

    MoveResourcesImpl(ResourceMoverManager manager) {
        super(manager.inner().moveResources());
        this.manager = manager;
    }

    public ResourceMoverManager manager() {
        return this.manager;
    }

    @Override
    public MoveResourceImpl define(String name) {
        return wrapModel(name);
    }

    private MoveResourceImpl wrapModel(MoveResourceInner inner) {
        return  new MoveResourceImpl(inner, manager());
    }

    private MoveResourceImpl wrapModel(String name) {
        return new MoveResourceImpl(name, this.manager());
    }

    @Override
    public Observable<MoveResource> listAsync(final String resourceGroupName, final String moveCollectionName) {
        MoveResourcesInner client = this.inner();
        return client.listAsync(resourceGroupName, moveCollectionName)
        .flatMapIterable(new Func1<Page<MoveResourceInner>, Iterable<MoveResourceInner>>() {
            @Override
            public Iterable<MoveResourceInner> call(Page<MoveResourceInner> page) {
                return page.items();
            }
        })
        .map(new Func1<MoveResourceInner, MoveResource>() {
            @Override
            public MoveResource call(MoveResourceInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<MoveResource> getAsync(String resourceGroupName, String moveCollectionName, String moveResourceName) {
        MoveResourcesInner client = this.inner();
        return client.getAsync(resourceGroupName, moveCollectionName, moveResourceName)
        .flatMap(new Func1<MoveResourceInner, Observable<MoveResource>>() {
            @Override
            public Observable<MoveResource> call(MoveResourceInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((MoveResource)wrapModel(inner));
                }
            }
       });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String moveCollectionName, String moveResourceName) {
        MoveResourcesInner client = this.inner();
        return client.deleteAsync(resourceGroupName, moveCollectionName, moveResourceName).toCompletable();
    }

}
