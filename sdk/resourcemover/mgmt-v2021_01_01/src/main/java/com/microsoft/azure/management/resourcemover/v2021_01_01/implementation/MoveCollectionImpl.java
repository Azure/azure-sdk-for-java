/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.resourcemover.v2021_01_01.implementation;

import com.microsoft.azure.arm.resources.models.implementation.GroupableResourceCoreImpl;
import com.microsoft.azure.management.resourcemover.v2021_01_01.MoveCollection;
import rx.Observable;
import com.microsoft.azure.management.resourcemover.v2021_01_01.UpdateMoveCollectionRequest;
import com.microsoft.azure.management.resourcemover.v2021_01_01.Identity;
import com.microsoft.azure.management.resourcemover.v2021_01_01.MoveCollectionProperties;
import rx.functions.Func1;

class MoveCollectionImpl extends GroupableResourceCoreImpl<MoveCollection, MoveCollectionInner, MoveCollectionImpl, ResourceMoverManager> implements MoveCollection, MoveCollection.Definition, MoveCollection.Update {
    private UpdateMoveCollectionRequest updateParameter;
    MoveCollectionImpl(String name, MoveCollectionInner inner, ResourceMoverManager manager) {
        super(name, inner, manager);
        this.updateParameter = new UpdateMoveCollectionRequest();
    }

    @Override
    public Observable<MoveCollection> createResourceAsync() {
        MoveCollectionsInner client = this.manager().inner().moveCollections();
        return client.createAsync(this.resourceGroupName(), this.name(), this.inner())
            .map(new Func1<MoveCollectionInner, MoveCollectionInner>() {
               @Override
               public MoveCollectionInner call(MoveCollectionInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<MoveCollection> updateResourceAsync() {
        MoveCollectionsInner client = this.manager().inner().moveCollections();
        return client.updateAsync(this.resourceGroupName(), this.name(), this.updateParameter)
            .map(new Func1<MoveCollectionInner, MoveCollectionInner>() {
               @Override
               public MoveCollectionInner call(MoveCollectionInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<MoveCollectionInner> getInnerAsync() {
        MoveCollectionsInner client = this.manager().inner().moveCollections();
        return client.getByResourceGroupAsync(this.resourceGroupName(), this.name());
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }

    private void resetCreateUpdateParameters() {
        this.updateParameter = new UpdateMoveCollectionRequest();
    }

    @Override
    public String etag() {
        return this.inner().etag();
    }

    @Override
    public Identity identity() {
        return this.inner().identity();
    }

    @Override
    public MoveCollectionProperties properties() {
        return this.inner().properties();
    }

    @Override
    public MoveCollectionImpl withProperties(MoveCollectionProperties properties) {
        this.inner().withProperties(properties);
        return this;
    }

    @Override
    public MoveCollectionImpl withIdentity(Identity identity) {
        if (isInCreateMode()) {
            this.inner().withIdentity(identity);
        } else {
            this.updateParameter.withIdentity(identity);
        }
        return this;
    }

}
