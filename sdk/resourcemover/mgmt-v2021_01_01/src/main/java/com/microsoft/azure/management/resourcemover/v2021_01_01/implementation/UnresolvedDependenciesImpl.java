/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.resourcemover.v2021_01_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.resourcemover.v2021_01_01.UnresolvedDependencies;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.resourcemover.v2021_01_01.UnresolvedDependency;

class UnresolvedDependenciesImpl extends WrapperImpl<UnresolvedDependenciesInner> implements UnresolvedDependencies {
    private final ResourceMoverManager manager;

    UnresolvedDependenciesImpl(ResourceMoverManager manager) {
        super(manager.inner().unresolvedDependencies());
        this.manager = manager;
    }

    public ResourceMoverManager manager() {
        return this.manager;
    }

    private UnresolvedDependencyImpl wrapModel(UnresolvedDependencyInner inner) {
        return  new UnresolvedDependencyImpl(inner, manager());
    }

    @Override
    public Observable<UnresolvedDependency> getAsync(final String resourceGroupName, final String moveCollectionName) {
        UnresolvedDependenciesInner client = this.inner();
        return client.getAsync(resourceGroupName, moveCollectionName)
        .flatMapIterable(new Func1<Page<UnresolvedDependencyInner>, Iterable<UnresolvedDependencyInner>>() {
            @Override
            public Iterable<UnresolvedDependencyInner> call(Page<UnresolvedDependencyInner> page) {
                return page.items();
            }
        })
        .map(new Func1<UnresolvedDependencyInner, UnresolvedDependency>() {
            @Override
            public UnresolvedDependency call(UnresolvedDependencyInner inner) {
                return wrapModel(inner);
            }
        });
    }

}
