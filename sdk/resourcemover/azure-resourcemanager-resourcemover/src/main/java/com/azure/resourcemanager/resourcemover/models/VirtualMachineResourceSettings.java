// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourcemover.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Gets or sets the virtual machine resource settings.
 */
@Fluent
public final class VirtualMachineResourceSettings extends ResourceSettings {
    /*
     * The resource type. For example, the value can be Microsoft.Compute/virtualMachines.
     */
    private String resourceType = "Microsoft.Compute/virtualMachines";

    /*
     * Gets or sets the Resource tags.
     */
    private Map<String, String> tags;

    /*
     * Gets or sets user-managed identities
     */
    private List<String> userManagedIdentities;

    /*
     * Gets or sets the target availability zone.
     */
    private TargetAvailabilityZone targetAvailabilityZone;

    /*
     * Gets or sets the target virtual machine size.
     */
    private String targetVmSize;

    /*
     * Gets or sets the target availability set id for virtual machines not in an availability set at source.
     */
    private String targetAvailabilitySetId;

    /**
     * Creates an instance of VirtualMachineResourceSettings class.
     */
    public VirtualMachineResourceSettings() {
    }

    /**
     * Get the resourceType property: The resource type. For example, the value can be
     * Microsoft.Compute/virtualMachines.
     * 
     * @return the resourceType value.
     */
    @Override
    public String resourceType() {
        return this.resourceType;
    }

    /**
     * Get the tags property: Gets or sets the Resource tags.
     * 
     * @return the tags value.
     */
    public Map<String, String> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: Gets or sets the Resource tags.
     * 
     * @param tags the tags value to set.
     * @return the VirtualMachineResourceSettings object itself.
     */
    public VirtualMachineResourceSettings withTags(Map<String, String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the userManagedIdentities property: Gets or sets user-managed identities.
     * 
     * @return the userManagedIdentities value.
     */
    public List<String> userManagedIdentities() {
        return this.userManagedIdentities;
    }

    /**
     * Set the userManagedIdentities property: Gets or sets user-managed identities.
     * 
     * @param userManagedIdentities the userManagedIdentities value to set.
     * @return the VirtualMachineResourceSettings object itself.
     */
    public VirtualMachineResourceSettings withUserManagedIdentities(List<String> userManagedIdentities) {
        this.userManagedIdentities = userManagedIdentities;
        return this;
    }

    /**
     * Get the targetAvailabilityZone property: Gets or sets the target availability zone.
     * 
     * @return the targetAvailabilityZone value.
     */
    public TargetAvailabilityZone targetAvailabilityZone() {
        return this.targetAvailabilityZone;
    }

    /**
     * Set the targetAvailabilityZone property: Gets or sets the target availability zone.
     * 
     * @param targetAvailabilityZone the targetAvailabilityZone value to set.
     * @return the VirtualMachineResourceSettings object itself.
     */
    public VirtualMachineResourceSettings withTargetAvailabilityZone(TargetAvailabilityZone targetAvailabilityZone) {
        this.targetAvailabilityZone = targetAvailabilityZone;
        return this;
    }

    /**
     * Get the targetVmSize property: Gets or sets the target virtual machine size.
     * 
     * @return the targetVmSize value.
     */
    public String targetVmSize() {
        return this.targetVmSize;
    }

    /**
     * Set the targetVmSize property: Gets or sets the target virtual machine size.
     * 
     * @param targetVmSize the targetVmSize value to set.
     * @return the VirtualMachineResourceSettings object itself.
     */
    public VirtualMachineResourceSettings withTargetVmSize(String targetVmSize) {
        this.targetVmSize = targetVmSize;
        return this;
    }

    /**
     * Get the targetAvailabilitySetId property: Gets or sets the target availability set id for virtual machines not in
     * an availability set at source.
     * 
     * @return the targetAvailabilitySetId value.
     */
    public String targetAvailabilitySetId() {
        return this.targetAvailabilitySetId;
    }

    /**
     * Set the targetAvailabilitySetId property: Gets or sets the target availability set id for virtual machines not in
     * an availability set at source.
     * 
     * @param targetAvailabilitySetId the targetAvailabilitySetId value to set.
     * @return the VirtualMachineResourceSettings object itself.
     */
    public VirtualMachineResourceSettings withTargetAvailabilitySetId(String targetAvailabilitySetId) {
        this.targetAvailabilitySetId = targetAvailabilitySetId;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public VirtualMachineResourceSettings withTargetResourceName(String targetResourceName) {
        super.withTargetResourceName(targetResourceName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public VirtualMachineResourceSettings withTargetResourceGroupName(String targetResourceGroupName) {
        super.withTargetResourceGroupName(targetResourceGroupName);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("targetResourceName", targetResourceName());
        jsonWriter.writeStringField("targetResourceGroupName", targetResourceGroupName());
        jsonWriter.writeStringField("resourceType", this.resourceType);
        jsonWriter.writeMapField("tags", this.tags, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("userManagedIdentities", this.userManagedIdentities,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("targetAvailabilityZone",
            this.targetAvailabilityZone == null ? null : this.targetAvailabilityZone.toString());
        jsonWriter.writeStringField("targetVmSize", this.targetVmSize);
        jsonWriter.writeStringField("targetAvailabilitySetId", this.targetAvailabilitySetId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VirtualMachineResourceSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VirtualMachineResourceSettings if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the VirtualMachineResourceSettings.
     */
    public static VirtualMachineResourceSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VirtualMachineResourceSettings deserializedVirtualMachineResourceSettings
                = new VirtualMachineResourceSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("targetResourceName".equals(fieldName)) {
                    deserializedVirtualMachineResourceSettings.withTargetResourceName(reader.getString());
                } else if ("targetResourceGroupName".equals(fieldName)) {
                    deserializedVirtualMachineResourceSettings.withTargetResourceGroupName(reader.getString());
                } else if ("resourceType".equals(fieldName)) {
                    deserializedVirtualMachineResourceSettings.resourceType = reader.getString();
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedVirtualMachineResourceSettings.tags = tags;
                } else if ("userManagedIdentities".equals(fieldName)) {
                    List<String> userManagedIdentities = reader.readArray(reader1 -> reader1.getString());
                    deserializedVirtualMachineResourceSettings.userManagedIdentities = userManagedIdentities;
                } else if ("targetAvailabilityZone".equals(fieldName)) {
                    deserializedVirtualMachineResourceSettings.targetAvailabilityZone
                        = TargetAvailabilityZone.fromString(reader.getString());
                } else if ("targetVmSize".equals(fieldName)) {
                    deserializedVirtualMachineResourceSettings.targetVmSize = reader.getString();
                } else if ("targetAvailabilitySetId".equals(fieldName)) {
                    deserializedVirtualMachineResourceSettings.targetAvailabilitySetId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVirtualMachineResourceSettings;
        });
    }
}
