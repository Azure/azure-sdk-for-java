// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourcemover.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.resourcemover.fluent.UnresolvedDependenciesClient;
import com.azure.resourcemanager.resourcemover.fluent.models.UnresolvedDependencyInner;
import com.azure.resourcemanager.resourcemover.models.DependencyLevel;
import com.azure.resourcemanager.resourcemover.models.UnresolvedDependencyCollection;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in UnresolvedDependenciesClient. */
public final class UnresolvedDependenciesClientImpl implements UnresolvedDependenciesClient {
    private final ClientLogger logger = new ClientLogger(UnresolvedDependenciesClientImpl.class);

    /** The proxy service used to perform REST calls. */
    private final UnresolvedDependenciesService service;

    /** The service client containing this operation class. */
    private final ResourceMoverServiceApiImpl client;

    /**
     * Initializes an instance of UnresolvedDependenciesClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    UnresolvedDependenciesClientImpl(ResourceMoverServiceApiImpl client) {
        this.service =
            RestProxy
                .create(UnresolvedDependenciesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for ResourceMoverServiceApiUnresolvedDependencies to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "ResourceMoverService")
    private interface UnresolvedDependenciesService {
        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate"
                + "/moveCollections/{moveCollectionName}/unresolvedDependencies")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<UnresolvedDependencyCollection>> get(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("moveCollectionName") String moveCollectionName,
            @QueryParam("dependencyLevel") DependencyLevel dependencyLevel,
            @QueryParam("$orderby") String orderby,
            @QueryParam("api-version") String apiVersion,
            @QueryParam("$filter") String filter,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<UnresolvedDependencyCollection>> getNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Gets a list of unresolved dependencies.
     *
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param dependencyLevel Defines the dependency level.
     * @param orderby OData order by query option. For example, you can use $orderby=Count desc.
     * @param filter The filter to apply on the operation. For example, $apply=filter(count eq 2).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of unresolved dependencies.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<UnresolvedDependencyInner>> getSinglePageAsync(
        String resourceGroupName,
        String moveCollectionName,
        DependencyLevel dependencyLevel,
        String orderby,
        String filter) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (moveCollectionName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter moveCollectionName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            moveCollectionName,
                            dependencyLevel,
                            orderby,
                            this.client.getApiVersion(),
                            filter,
                            accept,
                            context))
            .<PagedResponse<UnresolvedDependencyInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets a list of unresolved dependencies.
     *
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param dependencyLevel Defines the dependency level.
     * @param orderby OData order by query option. For example, you can use $orderby=Count desc.
     * @param filter The filter to apply on the operation. For example, $apply=filter(count eq 2).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of unresolved dependencies.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<UnresolvedDependencyInner>> getSinglePageAsync(
        String resourceGroupName,
        String moveCollectionName,
        DependencyLevel dependencyLevel,
        String orderby,
        String filter,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (moveCollectionName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter moveCollectionName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .get(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                moveCollectionName,
                dependencyLevel,
                orderby,
                this.client.getApiVersion(),
                filter,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Gets a list of unresolved dependencies.
     *
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param dependencyLevel Defines the dependency level.
     * @param orderby OData order by query option. For example, you can use $orderby=Count desc.
     * @param filter The filter to apply on the operation. For example, $apply=filter(count eq 2).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of unresolved dependencies.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<UnresolvedDependencyInner> getAsync(
        String resourceGroupName,
        String moveCollectionName,
        DependencyLevel dependencyLevel,
        String orderby,
        String filter) {
        return new PagedFlux<>(
            () -> getSinglePageAsync(resourceGroupName, moveCollectionName, dependencyLevel, orderby, filter),
            nextLink -> getNextSinglePageAsync(nextLink));
    }

    /**
     * Gets a list of unresolved dependencies.
     *
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of unresolved dependencies.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<UnresolvedDependencyInner> getAsync(String resourceGroupName, String moveCollectionName) {
        final DependencyLevel dependencyLevel = null;
        final String orderby = null;
        final String filter = null;
        return new PagedFlux<>(
            () -> getSinglePageAsync(resourceGroupName, moveCollectionName, dependencyLevel, orderby, filter),
            nextLink -> getNextSinglePageAsync(nextLink));
    }

    /**
     * Gets a list of unresolved dependencies.
     *
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param dependencyLevel Defines the dependency level.
     * @param orderby OData order by query option. For example, you can use $orderby=Count desc.
     * @param filter The filter to apply on the operation. For example, $apply=filter(count eq 2).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of unresolved dependencies.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<UnresolvedDependencyInner> getAsync(
        String resourceGroupName,
        String moveCollectionName,
        DependencyLevel dependencyLevel,
        String orderby,
        String filter,
        Context context) {
        return new PagedFlux<>(
            () -> getSinglePageAsync(resourceGroupName, moveCollectionName, dependencyLevel, orderby, filter, context),
            nextLink -> getNextSinglePageAsync(nextLink, context));
    }

    /**
     * Gets a list of unresolved dependencies.
     *
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of unresolved dependencies.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UnresolvedDependencyInner> get(String resourceGroupName, String moveCollectionName) {
        final DependencyLevel dependencyLevel = null;
        final String orderby = null;
        final String filter = null;
        return new PagedIterable<>(getAsync(resourceGroupName, moveCollectionName, dependencyLevel, orderby, filter));
    }

    /**
     * Gets a list of unresolved dependencies.
     *
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param dependencyLevel Defines the dependency level.
     * @param orderby OData order by query option. For example, you can use $orderby=Count desc.
     * @param filter The filter to apply on the operation. For example, $apply=filter(count eq 2).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of unresolved dependencies.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UnresolvedDependencyInner> get(
        String resourceGroupName,
        String moveCollectionName,
        DependencyLevel dependencyLevel,
        String orderby,
        String filter,
        Context context) {
        return new PagedIterable<>(
            getAsync(resourceGroupName, moveCollectionName, dependencyLevel, orderby, filter, context));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return unresolved dependency collection.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<UnresolvedDependencyInner>> getNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.getNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<UnresolvedDependencyInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return unresolved dependency collection.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<UnresolvedDependencyInner>> getNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .getNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }
}
