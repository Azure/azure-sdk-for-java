// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourcemover.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Defines the load balancer resource settings.
 */
@Fluent
public final class LoadBalancerResourceSettings extends ResourceSettings {
    /*
     * The resource type. For example, the value can be Microsoft.Compute/virtualMachines.
     */
    private String resourceType = "Microsoft.Network/loadBalancers";

    /*
     * Gets or sets the Resource tags.
     */
    private Map<String, String> tags;

    /*
     * Gets or sets load balancer sku (Basic/Standard).
     */
    private String sku;

    /*
     * Gets or sets the frontend IP configurations of the load balancer.
     */
    private List<LBFrontendIpConfigurationResourceSettings> frontendIpConfigurations;

    /*
     * Gets or sets the backend address pools of the load balancer.
     */
    private List<LBBackendAddressPoolResourceSettings> backendAddressPools;

    /*
     * Gets or sets the csv list of zones common for all frontend IP configurations. Note this is given
     * precedence only if frontend IP configurations settings are not present.
     */
    private String zones;

    /**
     * Creates an instance of LoadBalancerResourceSettings class.
     */
    public LoadBalancerResourceSettings() {
    }

    /**
     * Get the resourceType property: The resource type. For example, the value can be
     * Microsoft.Compute/virtualMachines.
     * 
     * @return the resourceType value.
     */
    @Override
    public String resourceType() {
        return this.resourceType;
    }

    /**
     * Get the tags property: Gets or sets the Resource tags.
     * 
     * @return the tags value.
     */
    public Map<String, String> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: Gets or sets the Resource tags.
     * 
     * @param tags the tags value to set.
     * @return the LoadBalancerResourceSettings object itself.
     */
    public LoadBalancerResourceSettings withTags(Map<String, String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the sku property: Gets or sets load balancer sku (Basic/Standard).
     * 
     * @return the sku value.
     */
    public String sku() {
        return this.sku;
    }

    /**
     * Set the sku property: Gets or sets load balancer sku (Basic/Standard).
     * 
     * @param sku the sku value to set.
     * @return the LoadBalancerResourceSettings object itself.
     */
    public LoadBalancerResourceSettings withSku(String sku) {
        this.sku = sku;
        return this;
    }

    /**
     * Get the frontendIpConfigurations property: Gets or sets the frontend IP configurations of the load balancer.
     * 
     * @return the frontendIpConfigurations value.
     */
    public List<LBFrontendIpConfigurationResourceSettings> frontendIpConfigurations() {
        return this.frontendIpConfigurations;
    }

    /**
     * Set the frontendIpConfigurations property: Gets or sets the frontend IP configurations of the load balancer.
     * 
     * @param frontendIpConfigurations the frontendIpConfigurations value to set.
     * @return the LoadBalancerResourceSettings object itself.
     */
    public LoadBalancerResourceSettings
        withFrontendIpConfigurations(List<LBFrontendIpConfigurationResourceSettings> frontendIpConfigurations) {
        this.frontendIpConfigurations = frontendIpConfigurations;
        return this;
    }

    /**
     * Get the backendAddressPools property: Gets or sets the backend address pools of the load balancer.
     * 
     * @return the backendAddressPools value.
     */
    public List<LBBackendAddressPoolResourceSettings> backendAddressPools() {
        return this.backendAddressPools;
    }

    /**
     * Set the backendAddressPools property: Gets or sets the backend address pools of the load balancer.
     * 
     * @param backendAddressPools the backendAddressPools value to set.
     * @return the LoadBalancerResourceSettings object itself.
     */
    public LoadBalancerResourceSettings
        withBackendAddressPools(List<LBBackendAddressPoolResourceSettings> backendAddressPools) {
        this.backendAddressPools = backendAddressPools;
        return this;
    }

    /**
     * Get the zones property: Gets or sets the csv list of zones common for all frontend IP configurations. Note this
     * is given
     * precedence only if frontend IP configurations settings are not present.
     * 
     * @return the zones value.
     */
    public String zones() {
        return this.zones;
    }

    /**
     * Set the zones property: Gets or sets the csv list of zones common for all frontend IP configurations. Note this
     * is given
     * precedence only if frontend IP configurations settings are not present.
     * 
     * @param zones the zones value to set.
     * @return the LoadBalancerResourceSettings object itself.
     */
    public LoadBalancerResourceSettings withZones(String zones) {
        this.zones = zones;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LoadBalancerResourceSettings withTargetResourceName(String targetResourceName) {
        super.withTargetResourceName(targetResourceName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LoadBalancerResourceSettings withTargetResourceGroupName(String targetResourceGroupName) {
        super.withTargetResourceGroupName(targetResourceGroupName);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (frontendIpConfigurations() != null) {
            frontendIpConfigurations().forEach(e -> e.validate());
        }
        if (backendAddressPools() != null) {
            backendAddressPools().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("targetResourceName", targetResourceName());
        jsonWriter.writeStringField("targetResourceGroupName", targetResourceGroupName());
        jsonWriter.writeStringField("resourceType", this.resourceType);
        jsonWriter.writeMapField("tags", this.tags, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("sku", this.sku);
        jsonWriter.writeArrayField("frontendIPConfigurations", this.frontendIpConfigurations,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("backendAddressPools", this.backendAddressPools,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("zones", this.zones);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LoadBalancerResourceSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LoadBalancerResourceSettings if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the LoadBalancerResourceSettings.
     */
    public static LoadBalancerResourceSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LoadBalancerResourceSettings deserializedLoadBalancerResourceSettings = new LoadBalancerResourceSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("targetResourceName".equals(fieldName)) {
                    deserializedLoadBalancerResourceSettings.withTargetResourceName(reader.getString());
                } else if ("targetResourceGroupName".equals(fieldName)) {
                    deserializedLoadBalancerResourceSettings.withTargetResourceGroupName(reader.getString());
                } else if ("resourceType".equals(fieldName)) {
                    deserializedLoadBalancerResourceSettings.resourceType = reader.getString();
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedLoadBalancerResourceSettings.tags = tags;
                } else if ("sku".equals(fieldName)) {
                    deserializedLoadBalancerResourceSettings.sku = reader.getString();
                } else if ("frontendIPConfigurations".equals(fieldName)) {
                    List<LBFrontendIpConfigurationResourceSettings> frontendIpConfigurations
                        = reader.readArray(reader1 -> LBFrontendIpConfigurationResourceSettings.fromJson(reader1));
                    deserializedLoadBalancerResourceSettings.frontendIpConfigurations = frontendIpConfigurations;
                } else if ("backendAddressPools".equals(fieldName)) {
                    List<LBBackendAddressPoolResourceSettings> backendAddressPools
                        = reader.readArray(reader1 -> LBBackendAddressPoolResourceSettings.fromJson(reader1));
                    deserializedLoadBalancerResourceSettings.backendAddressPools = backendAddressPools;
                } else if ("zones".equals(fieldName)) {
                    deserializedLoadBalancerResourceSettings.zones = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLoadBalancerResourceSettings;
        });
    }
}
