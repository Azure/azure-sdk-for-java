// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourcemover.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.resourcemover.ResourceMoverManager;
import com.azure.resourcemanager.resourcemover.fluent.UnresolvedDependenciesClient;
import com.azure.resourcemanager.resourcemover.fluent.models.UnresolvedDependencyCollectionInner;
import com.azure.resourcemanager.resourcemover.models.UnresolvedDependencies;
import com.azure.resourcemanager.resourcemover.models.UnresolvedDependencyCollection;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class UnresolvedDependenciesImpl implements UnresolvedDependencies {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(UnresolvedDependenciesImpl.class);

    private final UnresolvedDependenciesClient innerClient;

    private final ResourceMoverManager serviceManager;

    public UnresolvedDependenciesImpl(UnresolvedDependenciesClient innerClient, ResourceMoverManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public UnresolvedDependencyCollection get(String resourceGroupName, String moveCollectionName) {
        UnresolvedDependencyCollectionInner inner = this.serviceClient().get(resourceGroupName, moveCollectionName);
        if (inner != null) {
            return new UnresolvedDependencyCollectionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<UnresolvedDependencyCollection> getWithResponse(
        String resourceGroupName, String moveCollectionName, Context context) {
        Response<UnresolvedDependencyCollectionInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, moveCollectionName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new UnresolvedDependencyCollectionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    private UnresolvedDependenciesClient serviceClient() {
        return this.innerClient;
    }

    private ResourceMoverManager manager() {
        return this.serviceManager;
    }
}
