// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourcemover.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The operation error info.
 */
@Immutable
public final class OperationErrorAdditionalInfo implements JsonSerializable<OperationErrorAdditionalInfo> {
    /*
     * The error type.
     */
    private String type;

    /*
     * The operation error info.
     */
    private MoveErrorInfo info;

    /**
     * Creates an instance of OperationErrorAdditionalInfo class.
     */
    public OperationErrorAdditionalInfo() {
    }

    /**
     * Get the type property: The error type.
     * 
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Get the info property: The operation error info.
     * 
     * @return the info value.
     */
    public MoveErrorInfo info() {
        return this.info;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (info() != null) {
            info().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OperationErrorAdditionalInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OperationErrorAdditionalInfo if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the OperationErrorAdditionalInfo.
     */
    public static OperationErrorAdditionalInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OperationErrorAdditionalInfo deserializedOperationErrorAdditionalInfo = new OperationErrorAdditionalInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedOperationErrorAdditionalInfo.type = reader.getString();
                } else if ("info".equals(fieldName)) {
                    deserializedOperationErrorAdditionalInfo.info = MoveErrorInfo.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOperationErrorAdditionalInfo;
        });
    }
}
