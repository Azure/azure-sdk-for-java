// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourcemover.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Defines the disk encryption set resource settings.
 */
@Fluent
public final class DiskEncryptionSetResourceSettings extends ResourceSettings {
    /*
     * The resource type. For example, the value can be Microsoft.Compute/virtualMachines.
     */
    private String resourceType = "Microsoft.Compute/diskEncryptionSets";

    /**
     * Creates an instance of DiskEncryptionSetResourceSettings class.
     */
    public DiskEncryptionSetResourceSettings() {
    }

    /**
     * Get the resourceType property: The resource type. For example, the value can be
     * Microsoft.Compute/virtualMachines.
     * 
     * @return the resourceType value.
     */
    @Override
    public String resourceType() {
        return this.resourceType;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DiskEncryptionSetResourceSettings withTargetResourceName(String targetResourceName) {
        super.withTargetResourceName(targetResourceName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DiskEncryptionSetResourceSettings withTargetResourceGroupName(String targetResourceGroupName) {
        super.withTargetResourceGroupName(targetResourceGroupName);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("targetResourceName", targetResourceName());
        jsonWriter.writeStringField("targetResourceGroupName", targetResourceGroupName());
        jsonWriter.writeStringField("resourceType", this.resourceType);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DiskEncryptionSetResourceSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DiskEncryptionSetResourceSettings if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DiskEncryptionSetResourceSettings.
     */
    public static DiskEncryptionSetResourceSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DiskEncryptionSetResourceSettings deserializedDiskEncryptionSetResourceSettings
                = new DiskEncryptionSetResourceSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("targetResourceName".equals(fieldName)) {
                    deserializedDiskEncryptionSetResourceSettings.withTargetResourceName(reader.getString());
                } else if ("targetResourceGroupName".equals(fieldName)) {
                    deserializedDiskEncryptionSetResourceSettings.withTargetResourceGroupName(reader.getString());
                } else if ("resourceType".equals(fieldName)) {
                    deserializedDiskEncryptionSetResourceSettings.resourceType = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDiskEncryptionSetResourceSettings;
        });
    }
}
