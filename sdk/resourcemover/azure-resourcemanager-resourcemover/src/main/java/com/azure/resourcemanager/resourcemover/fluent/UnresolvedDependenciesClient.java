// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourcemover.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.util.Context;
import com.azure.resourcemanager.resourcemover.fluent.models.UnresolvedDependencyInner;
import com.azure.resourcemanager.resourcemover.models.DependencyLevel;

/** An instance of this class provides access to all the operations defined in UnresolvedDependenciesClient. */
public interface UnresolvedDependenciesClient {
    /**
     * Gets a list of unresolved dependencies.
     *
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of unresolved dependencies.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<UnresolvedDependencyInner> get(String resourceGroupName, String moveCollectionName);

    /**
     * Gets a list of unresolved dependencies.
     *
     * @param resourceGroupName The Resource Group Name.
     * @param moveCollectionName The Move Collection Name.
     * @param dependencyLevel Defines the dependency level.
     * @param orderby OData order by query option. For example, you can use $orderby=Count desc.
     * @param filter The filter to apply on the operation. For example, $apply=filter(count eq 2).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of unresolved dependencies.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<UnresolvedDependencyInner> get(
        String resourceGroupName,
        String moveCollectionName,
        DependencyLevel dependencyLevel,
        String orderby,
        String filter,
        Context context);
}
