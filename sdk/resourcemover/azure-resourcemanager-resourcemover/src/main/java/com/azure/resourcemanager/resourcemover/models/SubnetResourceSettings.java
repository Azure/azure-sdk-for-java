// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourcemover.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Defines the virtual network subnets resource settings.
 */
@Fluent
public final class SubnetResourceSettings implements JsonSerializable<SubnetResourceSettings> {
    /*
     * Gets or sets the Subnet name.
     */
    private String name;

    /*
     * Gets or sets address prefix for the subnet.
     */
    private String addressPrefix;

    /*
     * Defines reference to NSG.
     */
    private NsgReference networkSecurityGroup;

    /**
     * Creates an instance of SubnetResourceSettings class.
     */
    public SubnetResourceSettings() {
    }

    /**
     * Get the name property: Gets or sets the Subnet name.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Gets or sets the Subnet name.
     * 
     * @param name the name value to set.
     * @return the SubnetResourceSettings object itself.
     */
    public SubnetResourceSettings withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the addressPrefix property: Gets or sets address prefix for the subnet.
     * 
     * @return the addressPrefix value.
     */
    public String addressPrefix() {
        return this.addressPrefix;
    }

    /**
     * Set the addressPrefix property: Gets or sets address prefix for the subnet.
     * 
     * @param addressPrefix the addressPrefix value to set.
     * @return the SubnetResourceSettings object itself.
     */
    public SubnetResourceSettings withAddressPrefix(String addressPrefix) {
        this.addressPrefix = addressPrefix;
        return this;
    }

    /**
     * Get the networkSecurityGroup property: Defines reference to NSG.
     * 
     * @return the networkSecurityGroup value.
     */
    public NsgReference networkSecurityGroup() {
        return this.networkSecurityGroup;
    }

    /**
     * Set the networkSecurityGroup property: Defines reference to NSG.
     * 
     * @param networkSecurityGroup the networkSecurityGroup value to set.
     * @return the SubnetResourceSettings object itself.
     */
    public SubnetResourceSettings withNetworkSecurityGroup(NsgReference networkSecurityGroup) {
        this.networkSecurityGroup = networkSecurityGroup;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (networkSecurityGroup() != null) {
            networkSecurityGroup().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("addressPrefix", this.addressPrefix);
        jsonWriter.writeJsonField("networkSecurityGroup", this.networkSecurityGroup);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SubnetResourceSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SubnetResourceSettings if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SubnetResourceSettings.
     */
    public static SubnetResourceSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SubnetResourceSettings deserializedSubnetResourceSettings = new SubnetResourceSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedSubnetResourceSettings.name = reader.getString();
                } else if ("addressPrefix".equals(fieldName)) {
                    deserializedSubnetResourceSettings.addressPrefix = reader.getString();
                } else if ("networkSecurityGroup".equals(fieldName)) {
                    deserializedSubnetResourceSettings.networkSecurityGroup = NsgReference.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSubnetResourceSettings;
        });
    }
}
