// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourcemover.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Defines the network interface resource settings.
 */
@Fluent
public final class NetworkInterfaceResourceSettings extends ResourceSettings {
    /*
     * The resource type. For example, the value can be Microsoft.Compute/virtualMachines.
     */
    private String resourceType = "Microsoft.Network/networkInterfaces";

    /*
     * Gets or sets the Resource tags.
     */
    private Map<String, String> tags;

    /*
     * Gets or sets the IP configurations of the NIC.
     */
    private List<NicIpConfigurationResourceSettings> ipConfigurations;

    /*
     * Gets or sets a value indicating whether accelerated networking is enabled.
     */
    private Boolean enableAcceleratedNetworking;

    /**
     * Creates an instance of NetworkInterfaceResourceSettings class.
     */
    public NetworkInterfaceResourceSettings() {
    }

    /**
     * Get the resourceType property: The resource type. For example, the value can be
     * Microsoft.Compute/virtualMachines.
     * 
     * @return the resourceType value.
     */
    @Override
    public String resourceType() {
        return this.resourceType;
    }

    /**
     * Get the tags property: Gets or sets the Resource tags.
     * 
     * @return the tags value.
     */
    public Map<String, String> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: Gets or sets the Resource tags.
     * 
     * @param tags the tags value to set.
     * @return the NetworkInterfaceResourceSettings object itself.
     */
    public NetworkInterfaceResourceSettings withTags(Map<String, String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the ipConfigurations property: Gets or sets the IP configurations of the NIC.
     * 
     * @return the ipConfigurations value.
     */
    public List<NicIpConfigurationResourceSettings> ipConfigurations() {
        return this.ipConfigurations;
    }

    /**
     * Set the ipConfigurations property: Gets or sets the IP configurations of the NIC.
     * 
     * @param ipConfigurations the ipConfigurations value to set.
     * @return the NetworkInterfaceResourceSettings object itself.
     */
    public NetworkInterfaceResourceSettings
        withIpConfigurations(List<NicIpConfigurationResourceSettings> ipConfigurations) {
        this.ipConfigurations = ipConfigurations;
        return this;
    }

    /**
     * Get the enableAcceleratedNetworking property: Gets or sets a value indicating whether accelerated networking is
     * enabled.
     * 
     * @return the enableAcceleratedNetworking value.
     */
    public Boolean enableAcceleratedNetworking() {
        return this.enableAcceleratedNetworking;
    }

    /**
     * Set the enableAcceleratedNetworking property: Gets or sets a value indicating whether accelerated networking is
     * enabled.
     * 
     * @param enableAcceleratedNetworking the enableAcceleratedNetworking value to set.
     * @return the NetworkInterfaceResourceSettings object itself.
     */
    public NetworkInterfaceResourceSettings withEnableAcceleratedNetworking(Boolean enableAcceleratedNetworking) {
        this.enableAcceleratedNetworking = enableAcceleratedNetworking;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public NetworkInterfaceResourceSettings withTargetResourceName(String targetResourceName) {
        super.withTargetResourceName(targetResourceName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public NetworkInterfaceResourceSettings withTargetResourceGroupName(String targetResourceGroupName) {
        super.withTargetResourceGroupName(targetResourceGroupName);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (ipConfigurations() != null) {
            ipConfigurations().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("targetResourceName", targetResourceName());
        jsonWriter.writeStringField("targetResourceGroupName", targetResourceGroupName());
        jsonWriter.writeStringField("resourceType", this.resourceType);
        jsonWriter.writeMapField("tags", this.tags, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("ipConfigurations", this.ipConfigurations,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeBooleanField("enableAcceleratedNetworking", this.enableAcceleratedNetworking);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NetworkInterfaceResourceSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NetworkInterfaceResourceSettings if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the NetworkInterfaceResourceSettings.
     */
    public static NetworkInterfaceResourceSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NetworkInterfaceResourceSettings deserializedNetworkInterfaceResourceSettings
                = new NetworkInterfaceResourceSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("targetResourceName".equals(fieldName)) {
                    deserializedNetworkInterfaceResourceSettings.withTargetResourceName(reader.getString());
                } else if ("targetResourceGroupName".equals(fieldName)) {
                    deserializedNetworkInterfaceResourceSettings.withTargetResourceGroupName(reader.getString());
                } else if ("resourceType".equals(fieldName)) {
                    deserializedNetworkInterfaceResourceSettings.resourceType = reader.getString();
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedNetworkInterfaceResourceSettings.tags = tags;
                } else if ("ipConfigurations".equals(fieldName)) {
                    List<NicIpConfigurationResourceSettings> ipConfigurations
                        = reader.readArray(reader1 -> NicIpConfigurationResourceSettings.fromJson(reader1));
                    deserializedNetworkInterfaceResourceSettings.ipConfigurations = ipConfigurations;
                } else if ("enableAcceleratedNetworking".equals(fieldName)) {
                    deserializedNetworkInterfaceResourceSettings.enableAcceleratedNetworking
                        = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNetworkInterfaceResourceSettings;
        });
    }
}
