// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourcemover.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Defines reference to load balancer backend address pools.
 */
@Fluent
public final class LoadBalancerBackendAddressPoolReference extends ProxyResourceReference {
    /**
     * Creates an instance of LoadBalancerBackendAddressPoolReference class.
     */
    public LoadBalancerBackendAddressPoolReference() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LoadBalancerBackendAddressPoolReference withName(String name) {
        super.withName(name);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LoadBalancerBackendAddressPoolReference withSourceArmResourceId(String sourceArmResourceId) {
        super.withSourceArmResourceId(sourceArmResourceId);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (sourceArmResourceId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property sourceArmResourceId in model LoadBalancerBackendAddressPoolReference"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(LoadBalancerBackendAddressPoolReference.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("sourceArmResourceId", sourceArmResourceId());
        jsonWriter.writeStringField("name", name());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LoadBalancerBackendAddressPoolReference from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LoadBalancerBackendAddressPoolReference if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the LoadBalancerBackendAddressPoolReference.
     */
    public static LoadBalancerBackendAddressPoolReference fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LoadBalancerBackendAddressPoolReference deserializedLoadBalancerBackendAddressPoolReference
                = new LoadBalancerBackendAddressPoolReference();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sourceArmResourceId".equals(fieldName)) {
                    deserializedLoadBalancerBackendAddressPoolReference.withSourceArmResourceId(reader.getString());
                } else if ("name".equals(fieldName)) {
                    deserializedLoadBalancerBackendAddressPoolReference.withName(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLoadBalancerBackendAddressPoolReference;
        });
    }
}
