// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourcemover.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Required for resources collection.
 */
@Fluent
public final class RequiredForResourcesCollectionInner
    implements JsonSerializable<RequiredForResourcesCollectionInner> {
    /*
     * Gets or sets the list of source Ids for which the input resource is required.
     */
    private List<String> sourceIds;

    /**
     * Creates an instance of RequiredForResourcesCollectionInner class.
     */
    public RequiredForResourcesCollectionInner() {
    }

    /**
     * Get the sourceIds property: Gets or sets the list of source Ids for which the input resource is required.
     * 
     * @return the sourceIds value.
     */
    public List<String> sourceIds() {
        return this.sourceIds;
    }

    /**
     * Set the sourceIds property: Gets or sets the list of source Ids for which the input resource is required.
     * 
     * @param sourceIds the sourceIds value to set.
     * @return the RequiredForResourcesCollectionInner object itself.
     */
    public RequiredForResourcesCollectionInner withSourceIds(List<String> sourceIds) {
        this.sourceIds = sourceIds;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("sourceIds", this.sourceIds, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RequiredForResourcesCollectionInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RequiredForResourcesCollectionInner if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the RequiredForResourcesCollectionInner.
     */
    public static RequiredForResourcesCollectionInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RequiredForResourcesCollectionInner deserializedRequiredForResourcesCollectionInner
                = new RequiredForResourcesCollectionInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sourceIds".equals(fieldName)) {
                    List<String> sourceIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedRequiredForResourcesCollectionInner.sourceIds = sourceIds;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRequiredForResourcesCollectionInner;
        });
    }
}
