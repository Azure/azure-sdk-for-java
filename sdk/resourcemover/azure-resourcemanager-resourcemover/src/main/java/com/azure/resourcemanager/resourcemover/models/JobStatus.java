// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourcemover.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Defines the job status.
 */
@Immutable
public final class JobStatus implements JsonSerializable<JobStatus> {
    /*
     * Defines the job name.
     */
    private JobName jobName;

    /*
     * Gets or sets the monitoring job percentage.
     */
    private String jobProgress;

    /**
     * Creates an instance of JobStatus class.
     */
    public JobStatus() {
    }

    /**
     * Get the jobName property: Defines the job name.
     * 
     * @return the jobName value.
     */
    public JobName jobName() {
        return this.jobName;
    }

    /**
     * Get the jobProgress property: Gets or sets the monitoring job percentage.
     * 
     * @return the jobProgress value.
     */
    public String jobProgress() {
        return this.jobProgress;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of JobStatus from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of JobStatus if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the JobStatus.
     */
    public static JobStatus fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            JobStatus deserializedJobStatus = new JobStatus();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("jobName".equals(fieldName)) {
                    deserializedJobStatus.jobName = JobName.fromString(reader.getString());
                } else if ("jobProgress".equals(fieldName)) {
                    deserializedJobStatus.jobProgress = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedJobStatus;
        });
    }
}
