// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourcemover.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Defines the public IP address resource settings.
 */
@Fluent
public final class PublicIpAddressResourceSettings extends ResourceSettings {
    /*
     * The resource type. For example, the value can be Microsoft.Compute/virtualMachines.
     */
    private String resourceType = "Microsoft.Network/publicIPAddresses";

    /*
     * Gets or sets the Resource tags.
     */
    private Map<String, String> tags;

    /*
     * Gets or sets the domain name label.
     */
    private String domainNameLabel;

    /*
     * Gets or sets the fully qualified domain name.
     */
    private String fqdn;

    /*
     * Gets or sets public IP allocation method.
     */
    private String publicIpAllocationMethod;

    /*
     * Gets or sets public IP sku.
     */
    private String sku;

    /*
     * Gets or sets public IP zones.
     */
    private String zones;

    /**
     * Creates an instance of PublicIpAddressResourceSettings class.
     */
    public PublicIpAddressResourceSettings() {
    }

    /**
     * Get the resourceType property: The resource type. For example, the value can be
     * Microsoft.Compute/virtualMachines.
     * 
     * @return the resourceType value.
     */
    @Override
    public String resourceType() {
        return this.resourceType;
    }

    /**
     * Get the tags property: Gets or sets the Resource tags.
     * 
     * @return the tags value.
     */
    public Map<String, String> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: Gets or sets the Resource tags.
     * 
     * @param tags the tags value to set.
     * @return the PublicIpAddressResourceSettings object itself.
     */
    public PublicIpAddressResourceSettings withTags(Map<String, String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the domainNameLabel property: Gets or sets the domain name label.
     * 
     * @return the domainNameLabel value.
     */
    public String domainNameLabel() {
        return this.domainNameLabel;
    }

    /**
     * Set the domainNameLabel property: Gets or sets the domain name label.
     * 
     * @param domainNameLabel the domainNameLabel value to set.
     * @return the PublicIpAddressResourceSettings object itself.
     */
    public PublicIpAddressResourceSettings withDomainNameLabel(String domainNameLabel) {
        this.domainNameLabel = domainNameLabel;
        return this;
    }

    /**
     * Get the fqdn property: Gets or sets the fully qualified domain name.
     * 
     * @return the fqdn value.
     */
    public String fqdn() {
        return this.fqdn;
    }

    /**
     * Set the fqdn property: Gets or sets the fully qualified domain name.
     * 
     * @param fqdn the fqdn value to set.
     * @return the PublicIpAddressResourceSettings object itself.
     */
    public PublicIpAddressResourceSettings withFqdn(String fqdn) {
        this.fqdn = fqdn;
        return this;
    }

    /**
     * Get the publicIpAllocationMethod property: Gets or sets public IP allocation method.
     * 
     * @return the publicIpAllocationMethod value.
     */
    public String publicIpAllocationMethod() {
        return this.publicIpAllocationMethod;
    }

    /**
     * Set the publicIpAllocationMethod property: Gets or sets public IP allocation method.
     * 
     * @param publicIpAllocationMethod the publicIpAllocationMethod value to set.
     * @return the PublicIpAddressResourceSettings object itself.
     */
    public PublicIpAddressResourceSettings withPublicIpAllocationMethod(String publicIpAllocationMethod) {
        this.publicIpAllocationMethod = publicIpAllocationMethod;
        return this;
    }

    /**
     * Get the sku property: Gets or sets public IP sku.
     * 
     * @return the sku value.
     */
    public String sku() {
        return this.sku;
    }

    /**
     * Set the sku property: Gets or sets public IP sku.
     * 
     * @param sku the sku value to set.
     * @return the PublicIpAddressResourceSettings object itself.
     */
    public PublicIpAddressResourceSettings withSku(String sku) {
        this.sku = sku;
        return this;
    }

    /**
     * Get the zones property: Gets or sets public IP zones.
     * 
     * @return the zones value.
     */
    public String zones() {
        return this.zones;
    }

    /**
     * Set the zones property: Gets or sets public IP zones.
     * 
     * @param zones the zones value to set.
     * @return the PublicIpAddressResourceSettings object itself.
     */
    public PublicIpAddressResourceSettings withZones(String zones) {
        this.zones = zones;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PublicIpAddressResourceSettings withTargetResourceName(String targetResourceName) {
        super.withTargetResourceName(targetResourceName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PublicIpAddressResourceSettings withTargetResourceGroupName(String targetResourceGroupName) {
        super.withTargetResourceGroupName(targetResourceGroupName);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("targetResourceName", targetResourceName());
        jsonWriter.writeStringField("targetResourceGroupName", targetResourceGroupName());
        jsonWriter.writeStringField("resourceType", this.resourceType);
        jsonWriter.writeMapField("tags", this.tags, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("domainNameLabel", this.domainNameLabel);
        jsonWriter.writeStringField("fqdn", this.fqdn);
        jsonWriter.writeStringField("publicIpAllocationMethod", this.publicIpAllocationMethod);
        jsonWriter.writeStringField("sku", this.sku);
        jsonWriter.writeStringField("zones", this.zones);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PublicIpAddressResourceSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PublicIpAddressResourceSettings if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the PublicIpAddressResourceSettings.
     */
    public static PublicIpAddressResourceSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PublicIpAddressResourceSettings deserializedPublicIpAddressResourceSettings
                = new PublicIpAddressResourceSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("targetResourceName".equals(fieldName)) {
                    deserializedPublicIpAddressResourceSettings.withTargetResourceName(reader.getString());
                } else if ("targetResourceGroupName".equals(fieldName)) {
                    deserializedPublicIpAddressResourceSettings.withTargetResourceGroupName(reader.getString());
                } else if ("resourceType".equals(fieldName)) {
                    deserializedPublicIpAddressResourceSettings.resourceType = reader.getString();
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedPublicIpAddressResourceSettings.tags = tags;
                } else if ("domainNameLabel".equals(fieldName)) {
                    deserializedPublicIpAddressResourceSettings.domainNameLabel = reader.getString();
                } else if ("fqdn".equals(fieldName)) {
                    deserializedPublicIpAddressResourceSettings.fqdn = reader.getString();
                } else if ("publicIpAllocationMethod".equals(fieldName)) {
                    deserializedPublicIpAddressResourceSettings.publicIpAllocationMethod = reader.getString();
                } else if ("sku".equals(fieldName)) {
                    deserializedPublicIpAddressResourceSettings.sku = reader.getString();
                } else if ("zones".equals(fieldName)) {
                    deserializedPublicIpAddressResourceSettings.zones = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPublicIpAddressResourceSettings;
        });
    }
}
