// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourcemover.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Defines the move resource properties.
 */
@Fluent
public final class MoveResourceProperties implements JsonSerializable<MoveResourceProperties> {
    /*
     * Defines the provisioning states.
     */
    private ProvisioningState provisioningState;

    /*
     * Gets or sets the Source ARM Id of the resource.
     */
    private String sourceId;

    /*
     * Gets or sets the Target ARM Id of the resource.
     */
    private String targetId;

    /*
     * Gets or sets the existing target ARM Id of the resource.
     */
    private String existingTargetId;

    /*
     * Gets or sets the resource settings.
     */
    private ResourceSettings resourceSettings;

    /*
     * Gets or sets the source resource settings.
     */
    private ResourceSettings sourceResourceSettings;

    /*
     * Defines the move resource status.
     */
    private MoveResourcePropertiesMoveStatus moveStatus;

    /*
     * Gets or sets the move resource dependencies.
     */
    private List<MoveResourceDependency> dependsOn;

    /*
     * Gets or sets the move resource dependencies overrides.
     */
    private List<MoveResourceDependencyOverride> dependsOnOverrides;

    /*
     * Gets a value indicating whether the resolve action is required over the move collection.
     */
    private Boolean isResolveRequired;

    /*
     * Defines the move resource errors.
     */
    private MoveResourcePropertiesErrors errors;

    /**
     * Creates an instance of MoveResourceProperties class.
     */
    public MoveResourceProperties() {
    }

    /**
     * Get the provisioningState property: Defines the provisioning states.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the sourceId property: Gets or sets the Source ARM Id of the resource.
     * 
     * @return the sourceId value.
     */
    public String sourceId() {
        return this.sourceId;
    }

    /**
     * Set the sourceId property: Gets or sets the Source ARM Id of the resource.
     * 
     * @param sourceId the sourceId value to set.
     * @return the MoveResourceProperties object itself.
     */
    public MoveResourceProperties withSourceId(String sourceId) {
        this.sourceId = sourceId;
        return this;
    }

    /**
     * Get the targetId property: Gets or sets the Target ARM Id of the resource.
     * 
     * @return the targetId value.
     */
    public String targetId() {
        return this.targetId;
    }

    /**
     * Get the existingTargetId property: Gets or sets the existing target ARM Id of the resource.
     * 
     * @return the existingTargetId value.
     */
    public String existingTargetId() {
        return this.existingTargetId;
    }

    /**
     * Set the existingTargetId property: Gets or sets the existing target ARM Id of the resource.
     * 
     * @param existingTargetId the existingTargetId value to set.
     * @return the MoveResourceProperties object itself.
     */
    public MoveResourceProperties withExistingTargetId(String existingTargetId) {
        this.existingTargetId = existingTargetId;
        return this;
    }

    /**
     * Get the resourceSettings property: Gets or sets the resource settings.
     * 
     * @return the resourceSettings value.
     */
    public ResourceSettings resourceSettings() {
        return this.resourceSettings;
    }

    /**
     * Set the resourceSettings property: Gets or sets the resource settings.
     * 
     * @param resourceSettings the resourceSettings value to set.
     * @return the MoveResourceProperties object itself.
     */
    public MoveResourceProperties withResourceSettings(ResourceSettings resourceSettings) {
        this.resourceSettings = resourceSettings;
        return this;
    }

    /**
     * Get the sourceResourceSettings property: Gets or sets the source resource settings.
     * 
     * @return the sourceResourceSettings value.
     */
    public ResourceSettings sourceResourceSettings() {
        return this.sourceResourceSettings;
    }

    /**
     * Get the moveStatus property: Defines the move resource status.
     * 
     * @return the moveStatus value.
     */
    public MoveResourcePropertiesMoveStatus moveStatus() {
        return this.moveStatus;
    }

    /**
     * Get the dependsOn property: Gets or sets the move resource dependencies.
     * 
     * @return the dependsOn value.
     */
    public List<MoveResourceDependency> dependsOn() {
        return this.dependsOn;
    }

    /**
     * Get the dependsOnOverrides property: Gets or sets the move resource dependencies overrides.
     * 
     * @return the dependsOnOverrides value.
     */
    public List<MoveResourceDependencyOverride> dependsOnOverrides() {
        return this.dependsOnOverrides;
    }

    /**
     * Set the dependsOnOverrides property: Gets or sets the move resource dependencies overrides.
     * 
     * @param dependsOnOverrides the dependsOnOverrides value to set.
     * @return the MoveResourceProperties object itself.
     */
    public MoveResourceProperties withDependsOnOverrides(List<MoveResourceDependencyOverride> dependsOnOverrides) {
        this.dependsOnOverrides = dependsOnOverrides;
        return this;
    }

    /**
     * Get the isResolveRequired property: Gets a value indicating whether the resolve action is required over the move
     * collection.
     * 
     * @return the isResolveRequired value.
     */
    public Boolean isResolveRequired() {
        return this.isResolveRequired;
    }

    /**
     * Get the errors property: Defines the move resource errors.
     * 
     * @return the errors value.
     */
    public MoveResourcePropertiesErrors errors() {
        return this.errors;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (sourceId() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property sourceId in model MoveResourceProperties"));
        }
        if (resourceSettings() != null) {
            resourceSettings().validate();
        }
        if (sourceResourceSettings() != null) {
            sourceResourceSettings().validate();
        }
        if (moveStatus() != null) {
            moveStatus().validate();
        }
        if (dependsOn() != null) {
            dependsOn().forEach(e -> e.validate());
        }
        if (dependsOnOverrides() != null) {
            dependsOnOverrides().forEach(e -> e.validate());
        }
        if (errors() != null) {
            errors().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(MoveResourceProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("sourceId", this.sourceId);
        jsonWriter.writeStringField("existingTargetId", this.existingTargetId);
        jsonWriter.writeJsonField("resourceSettings", this.resourceSettings);
        jsonWriter.writeArrayField("dependsOnOverrides", this.dependsOnOverrides,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MoveResourceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MoveResourceProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MoveResourceProperties.
     */
    public static MoveResourceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MoveResourceProperties deserializedMoveResourceProperties = new MoveResourceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sourceId".equals(fieldName)) {
                    deserializedMoveResourceProperties.sourceId = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedMoveResourceProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("targetId".equals(fieldName)) {
                    deserializedMoveResourceProperties.targetId = reader.getString();
                } else if ("existingTargetId".equals(fieldName)) {
                    deserializedMoveResourceProperties.existingTargetId = reader.getString();
                } else if ("resourceSettings".equals(fieldName)) {
                    deserializedMoveResourceProperties.resourceSettings = ResourceSettings.fromJson(reader);
                } else if ("sourceResourceSettings".equals(fieldName)) {
                    deserializedMoveResourceProperties.sourceResourceSettings = ResourceSettings.fromJson(reader);
                } else if ("moveStatus".equals(fieldName)) {
                    deserializedMoveResourceProperties.moveStatus = MoveResourcePropertiesMoveStatus.fromJson(reader);
                } else if ("dependsOn".equals(fieldName)) {
                    List<MoveResourceDependency> dependsOn
                        = reader.readArray(reader1 -> MoveResourceDependency.fromJson(reader1));
                    deserializedMoveResourceProperties.dependsOn = dependsOn;
                } else if ("dependsOnOverrides".equals(fieldName)) {
                    List<MoveResourceDependencyOverride> dependsOnOverrides
                        = reader.readArray(reader1 -> MoveResourceDependencyOverride.fromJson(reader1));
                    deserializedMoveResourceProperties.dependsOnOverrides = dependsOnOverrides;
                } else if ("isResolveRequired".equals(fieldName)) {
                    deserializedMoveResourceProperties.isResolveRequired = reader.getNullable(JsonReader::getBoolean);
                } else if ("errors".equals(fieldName)) {
                    deserializedMoveResourceProperties.errors = MoveResourcePropertiesErrors.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMoveResourceProperties;
        });
    }
}
