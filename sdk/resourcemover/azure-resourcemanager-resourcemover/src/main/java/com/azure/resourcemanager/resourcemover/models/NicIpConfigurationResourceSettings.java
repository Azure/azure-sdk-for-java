// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourcemover.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Defines NIC IP configuration properties. */
@Fluent
public final class NicIpConfigurationResourceSettings {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(NicIpConfigurationResourceSettings.class);

    /*
     * Gets or sets the IP configuration name.
     */
    @JsonProperty(value = "name")
    private String name;

    /*
     * Gets or sets the private IP address of the network interface IP
     * Configuration.
     */
    @JsonProperty(value = "privateIpAddress")
    private String privateIpAddress;

    /*
     * Gets or sets the private IP address allocation method.
     */
    @JsonProperty(value = "privateIpAllocationMethod")
    private String privateIpAllocationMethod;

    /*
     * Defines reference to a proxy resource.
     */
    @JsonProperty(value = "subnet")
    private ProxyResourceReference subnet;

    /*
     * Gets or sets a value indicating whether this IP configuration is the
     * primary.
     */
    @JsonProperty(value = "primary")
    private Boolean primary;

    /*
     * Gets or sets the references of the load balancer backend address pools.
     */
    @JsonProperty(value = "loadBalancerBackendAddressPools")
    private List<ProxyResourceReference> loadBalancerBackendAddressPools;

    /*
     * Gets or sets the references of the load balancer NAT rules.
     */
    @JsonProperty(value = "loadBalancerNatRules")
    private List<ProxyResourceReference> loadBalancerNatRules;

    /*
     * Defines reference to an Azure resource.
     */
    @JsonProperty(value = "publicIp")
    private AzureResourceReference publicIp;

    /**
     * Get the name property: Gets or sets the IP configuration name.
     *
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Gets or sets the IP configuration name.
     *
     * @param name the name value to set.
     * @return the NicIpConfigurationResourceSettings object itself.
     */
    public NicIpConfigurationResourceSettings withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the privateIpAddress property: Gets or sets the private IP address of the network interface IP Configuration.
     *
     * @return the privateIpAddress value.
     */
    public String privateIpAddress() {
        return this.privateIpAddress;
    }

    /**
     * Set the privateIpAddress property: Gets or sets the private IP address of the network interface IP Configuration.
     *
     * @param privateIpAddress the privateIpAddress value to set.
     * @return the NicIpConfigurationResourceSettings object itself.
     */
    public NicIpConfigurationResourceSettings withPrivateIpAddress(String privateIpAddress) {
        this.privateIpAddress = privateIpAddress;
        return this;
    }

    /**
     * Get the privateIpAllocationMethod property: Gets or sets the private IP address allocation method.
     *
     * @return the privateIpAllocationMethod value.
     */
    public String privateIpAllocationMethod() {
        return this.privateIpAllocationMethod;
    }

    /**
     * Set the privateIpAllocationMethod property: Gets or sets the private IP address allocation method.
     *
     * @param privateIpAllocationMethod the privateIpAllocationMethod value to set.
     * @return the NicIpConfigurationResourceSettings object itself.
     */
    public NicIpConfigurationResourceSettings withPrivateIpAllocationMethod(String privateIpAllocationMethod) {
        this.privateIpAllocationMethod = privateIpAllocationMethod;
        return this;
    }

    /**
     * Get the subnet property: Defines reference to a proxy resource.
     *
     * @return the subnet value.
     */
    public ProxyResourceReference subnet() {
        return this.subnet;
    }

    /**
     * Set the subnet property: Defines reference to a proxy resource.
     *
     * @param subnet the subnet value to set.
     * @return the NicIpConfigurationResourceSettings object itself.
     */
    public NicIpConfigurationResourceSettings withSubnet(ProxyResourceReference subnet) {
        this.subnet = subnet;
        return this;
    }

    /**
     * Get the primary property: Gets or sets a value indicating whether this IP configuration is the primary.
     *
     * @return the primary value.
     */
    public Boolean primary() {
        return this.primary;
    }

    /**
     * Set the primary property: Gets or sets a value indicating whether this IP configuration is the primary.
     *
     * @param primary the primary value to set.
     * @return the NicIpConfigurationResourceSettings object itself.
     */
    public NicIpConfigurationResourceSettings withPrimary(Boolean primary) {
        this.primary = primary;
        return this;
    }

    /**
     * Get the loadBalancerBackendAddressPools property: Gets or sets the references of the load balancer backend
     * address pools.
     *
     * @return the loadBalancerBackendAddressPools value.
     */
    public List<ProxyResourceReference> loadBalancerBackendAddressPools() {
        return this.loadBalancerBackendAddressPools;
    }

    /**
     * Set the loadBalancerBackendAddressPools property: Gets or sets the references of the load balancer backend
     * address pools.
     *
     * @param loadBalancerBackendAddressPools the loadBalancerBackendAddressPools value to set.
     * @return the NicIpConfigurationResourceSettings object itself.
     */
    public NicIpConfigurationResourceSettings withLoadBalancerBackendAddressPools(
        List<ProxyResourceReference> loadBalancerBackendAddressPools) {
        this.loadBalancerBackendAddressPools = loadBalancerBackendAddressPools;
        return this;
    }

    /**
     * Get the loadBalancerNatRules property: Gets or sets the references of the load balancer NAT rules.
     *
     * @return the loadBalancerNatRules value.
     */
    public List<ProxyResourceReference> loadBalancerNatRules() {
        return this.loadBalancerNatRules;
    }

    /**
     * Set the loadBalancerNatRules property: Gets or sets the references of the load balancer NAT rules.
     *
     * @param loadBalancerNatRules the loadBalancerNatRules value to set.
     * @return the NicIpConfigurationResourceSettings object itself.
     */
    public NicIpConfigurationResourceSettings withLoadBalancerNatRules(
        List<ProxyResourceReference> loadBalancerNatRules) {
        this.loadBalancerNatRules = loadBalancerNatRules;
        return this;
    }

    /**
     * Get the publicIp property: Defines reference to an Azure resource.
     *
     * @return the publicIp value.
     */
    public AzureResourceReference publicIp() {
        return this.publicIp;
    }

    /**
     * Set the publicIp property: Defines reference to an Azure resource.
     *
     * @param publicIp the publicIp value to set.
     * @return the NicIpConfigurationResourceSettings object itself.
     */
    public NicIpConfigurationResourceSettings withPublicIp(AzureResourceReference publicIp) {
        this.publicIp = publicIp;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (subnet() != null) {
            subnet().validate();
        }
        if (loadBalancerBackendAddressPools() != null) {
            loadBalancerBackendAddressPools().forEach(e -> e.validate());
        }
        if (loadBalancerNatRules() != null) {
            loadBalancerNatRules().forEach(e -> e.validate());
        }
        if (publicIp() != null) {
            publicIp().validate();
        }
    }
}
