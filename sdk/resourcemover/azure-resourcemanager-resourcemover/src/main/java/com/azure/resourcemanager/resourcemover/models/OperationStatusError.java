// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourcemover.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Class for operation status errors.
 */
@Immutable
public final class OperationStatusError implements JsonSerializable<OperationStatusError> {
    /*
     * The error code.
     */
    private String code;

    /*
     * The error message.
     */
    private String message;

    /*
     * The error details.
     */
    private List<OperationStatusError> details;

    /*
     * The additional info.
     */
    private List<OperationErrorAdditionalInfo> additionalInfo;

    /**
     * Creates an instance of OperationStatusError class.
     */
    public OperationStatusError() {
    }

    /**
     * Get the code property: The error code.
     * 
     * @return the code value.
     */
    public String code() {
        return this.code;
    }

    /**
     * Get the message property: The error message.
     * 
     * @return the message value.
     */
    public String message() {
        return this.message;
    }

    /**
     * Get the details property: The error details.
     * 
     * @return the details value.
     */
    public List<OperationStatusError> details() {
        return this.details;
    }

    /**
     * Get the additionalInfo property: The additional info.
     * 
     * @return the additionalInfo value.
     */
    public List<OperationErrorAdditionalInfo> additionalInfo() {
        return this.additionalInfo;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (details() != null) {
            details().forEach(e -> e.validate());
        }
        if (additionalInfo() != null) {
            additionalInfo().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OperationStatusError from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OperationStatusError if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the OperationStatusError.
     */
    public static OperationStatusError fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OperationStatusError deserializedOperationStatusError = new OperationStatusError();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("code".equals(fieldName)) {
                    deserializedOperationStatusError.code = reader.getString();
                } else if ("message".equals(fieldName)) {
                    deserializedOperationStatusError.message = reader.getString();
                } else if ("details".equals(fieldName)) {
                    List<OperationStatusError> details
                        = reader.readArray(reader1 -> OperationStatusError.fromJson(reader1));
                    deserializedOperationStatusError.details = details;
                } else if ("additionalInfo".equals(fieldName)) {
                    List<OperationErrorAdditionalInfo> additionalInfo
                        = reader.readArray(reader1 -> OperationErrorAdditionalInfo.fromJson(reader1));
                    deserializedOperationStatusError.additionalInfo = additionalInfo;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOperationStatusError;
        });
    }
}
