// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourcemover.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.resourcemover.models.AutomaticResolutionProperties;
import com.azure.resourcemanager.resourcemover.models.DependencyType;
import com.azure.resourcemanager.resourcemover.models.ManualResolutionProperties;
import com.azure.resourcemanager.resourcemover.models.MoveResourceDependency;
import com.azure.resourcemanager.resourcemover.models.ResolutionType;
import org.junit.jupiter.api.Assertions;

public final class MoveResourceDependencyTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MoveResourceDependency model =
            BinaryData
                .fromString(
                    "{\"id\":\"wgndrvynhzgpp\",\"resolutionStatus\":\"cgyncocpecf\",\"resolutionType\":\"Manual\",\"dependencyType\":\"RequiredForPrepare\",\"manualResolution\":{\"targetId\":\"sxlzevgbmqj\"},\"automaticResolution\":{\"moveResourceId\":\"c\"},\"isOptional\":\"mivkwlzuvcc\"}")
                .toObject(MoveResourceDependency.class);
        Assertions.assertEquals("wgndrvynhzgpp", model.id());
        Assertions.assertEquals("cgyncocpecf", model.resolutionStatus());
        Assertions.assertEquals(ResolutionType.MANUAL, model.resolutionType());
        Assertions.assertEquals(DependencyType.REQUIRED_FOR_PREPARE, model.dependencyType());
        Assertions.assertEquals("sxlzevgbmqj", model.manualResolution().targetId());
        Assertions.assertEquals("c", model.automaticResolution().moveResourceId());
        Assertions.assertEquals("mivkwlzuvcc", model.isOptional());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MoveResourceDependency model =
            new MoveResourceDependency()
                .withId("wgndrvynhzgpp")
                .withResolutionStatus("cgyncocpecf")
                .withResolutionType(ResolutionType.MANUAL)
                .withDependencyType(DependencyType.REQUIRED_FOR_PREPARE)
                .withManualResolution(new ManualResolutionProperties().withTargetId("sxlzevgbmqj"))
                .withAutomaticResolution(new AutomaticResolutionProperties().withMoveResourceId("c"))
                .withIsOptional("mivkwlzuvcc");
        model = BinaryData.fromObject(model).toObject(MoveResourceDependency.class);
        Assertions.assertEquals("wgndrvynhzgpp", model.id());
        Assertions.assertEquals("cgyncocpecf", model.resolutionStatus());
        Assertions.assertEquals(ResolutionType.MANUAL, model.resolutionType());
        Assertions.assertEquals(DependencyType.REQUIRED_FOR_PREPARE, model.dependencyType());
        Assertions.assertEquals("sxlzevgbmqj", model.manualResolution().targetId());
        Assertions.assertEquals("c", model.automaticResolution().moveResourceId());
        Assertions.assertEquals("mivkwlzuvcc", model.isOptional());
    }
}
