// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourcemover.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.resourcemover.ResourceMoverManager;
import com.azure.resourcemanager.resourcemover.models.OperationsDiscoveryCollection;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class OperationsDiscoveriesGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"name\":\"rjaltolmncw\",\"isDataAction\":true,\"display\":{\"provider\":\"csdbnwdcfhuc\",\"resource\":\"pfuvglsbjjca\",\"operation\":\"xbvtvudu\",\"description\":\"cormr\"},\"origin\":\"qtvcofudflvkgj\",\"properties\":\"datagdknnqv\"},{\"name\":\"znqntoru\",\"isDataAction\":true,\"display\":{\"provider\":\"hmk\",\"resource\":\"grauwjuetaebur\",\"operation\":\"dmovsm\",\"description\":\"xwabmqoe\"},\"origin\":\"ifrvtpu\",\"properties\":\"datajmqlgkfb\"},{\"name\":\"doaon\",\"isDataAction\":false,\"display\":{\"provider\":\"tujitcjedft\",\"resource\":\"ae\",\"operation\":\"ojvdcpzfoqo\",\"description\":\"cybxa\"},\"origin\":\"gszufoxciqopid\",\"properties\":\"datamciodhkhazxkhn\"},{\"name\":\"onlwntoeg\",\"isDataAction\":true,\"display\":{\"provider\":\"whkszzcmrvexztvb\",\"resource\":\"gsfraoyzkoow\",\"operation\":\"mnguxawqaldsyu\",\"description\":\"imerqfobwyznk\"},\"origin\":\"kutwpf\",\"properties\":\"dataa\"}],\"nextLink\":\"hrskdsnfd\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        ResourceMoverManager manager =
            ResourceMoverManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        OperationsDiscoveryCollection response =
            manager.operationsDiscoveries().getWithResponse(com.azure.core.util.Context.NONE).getValue();

        Assertions.assertEquals("rjaltolmncw", response.value().get(0).name());
        Assertions.assertEquals(true, response.value().get(0).isDataAction());
        Assertions.assertEquals("csdbnwdcfhuc", response.value().get(0).display().provider());
        Assertions.assertEquals("pfuvglsbjjca", response.value().get(0).display().resource());
        Assertions.assertEquals("xbvtvudu", response.value().get(0).display().operation());
        Assertions.assertEquals("cormr", response.value().get(0).display().description());
        Assertions.assertEquals("qtvcofudflvkgj", response.value().get(0).origin());
        Assertions.assertEquals("hrskdsnfd", response.nextLink());
    }
}
