// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourcemover.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.resourcemover.models.LBBackendAddressPoolResourceSettings;
import com.azure.resourcemanager.resourcemover.models.LBFrontendIpConfigurationResourceSettings;
import com.azure.resourcemanager.resourcemover.models.LoadBalancerResourceSettings;
import com.azure.resourcemanager.resourcemover.models.SubnetReference;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class LoadBalancerResourceSettingsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        LoadBalancerResourceSettings model =
            BinaryData
                .fromString(
                    "{\"resourceType\":\"Microsoft.Network/loadBalancers\",\"tags\":{\"mcqibycnojv\":\"qbex\",\"zhpvgqzcjrvxd\":\"nmefqsgzvahapj\",\"vawjvzunlu\":\"zlmwlxkvugfhz\",\"xipeilpjzuaejx\":\"hnnpr\"},\"sku\":\"ltskzbbtd\",\"frontendIPConfigurations\":[{\"name\":\"e\",\"privateIpAddress\":\"gpw\",\"privateIpAllocationMethod\":\"uh\",\"subnet\":{\"name\":\"bsjyofdx\",\"sourceArmResourceId\":\"uusdttouwa\"},\"zones\":\"ekqvkeln\"}],\"backendAddressPools\":[{\"name\":\"xwyjsflhhc\"},{\"name\":\"lnjixisxya\"},{\"name\":\"oyaqcslyjpkiid\"}],\"zones\":\"exznelixhnr\",\"targetResourceName\":\"folhbnxknal\",\"targetResourceGroupName\":\"lp\"}")
                .toObject(LoadBalancerResourceSettings.class);
        Assertions.assertEquals("folhbnxknal", model.targetResourceName());
        Assertions.assertEquals("lp", model.targetResourceGroupName());
        Assertions.assertEquals("qbex", model.tags().get("mcqibycnojv"));
        Assertions.assertEquals("ltskzbbtd", model.sku());
        Assertions.assertEquals("e", model.frontendIpConfigurations().get(0).name());
        Assertions.assertEquals("gpw", model.frontendIpConfigurations().get(0).privateIpAddress());
        Assertions.assertEquals("uh", model.frontendIpConfigurations().get(0).privateIpAllocationMethod());
        Assertions.assertEquals("uusdttouwa", model.frontendIpConfigurations().get(0).subnet().sourceArmResourceId());
        Assertions.assertEquals("bsjyofdx", model.frontendIpConfigurations().get(0).subnet().name());
        Assertions.assertEquals("ekqvkeln", model.frontendIpConfigurations().get(0).zones());
        Assertions.assertEquals("xwyjsflhhc", model.backendAddressPools().get(0).name());
        Assertions.assertEquals("exznelixhnr", model.zones());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        LoadBalancerResourceSettings model =
            new LoadBalancerResourceSettings()
                .withTargetResourceName("folhbnxknal")
                .withTargetResourceGroupName("lp")
                .withTags(
                    mapOf(
                        "mcqibycnojv",
                        "qbex",
                        "zhpvgqzcjrvxd",
                        "nmefqsgzvahapj",
                        "vawjvzunlu",
                        "zlmwlxkvugfhz",
                        "xipeilpjzuaejx",
                        "hnnpr"))
                .withSku("ltskzbbtd")
                .withFrontendIpConfigurations(
                    Arrays
                        .asList(
                            new LBFrontendIpConfigurationResourceSettings()
                                .withName("e")
                                .withPrivateIpAddress("gpw")
                                .withPrivateIpAllocationMethod("uh")
                                .withSubnet(
                                    new SubnetReference().withSourceArmResourceId("uusdttouwa").withName("bsjyofdx"))
                                .withZones("ekqvkeln")))
                .withBackendAddressPools(
                    Arrays
                        .asList(
                            new LBBackendAddressPoolResourceSettings().withName("xwyjsflhhc"),
                            new LBBackendAddressPoolResourceSettings().withName("lnjixisxya"),
                            new LBBackendAddressPoolResourceSettings().withName("oyaqcslyjpkiid")))
                .withZones("exznelixhnr");
        model = BinaryData.fromObject(model).toObject(LoadBalancerResourceSettings.class);
        Assertions.assertEquals("folhbnxknal", model.targetResourceName());
        Assertions.assertEquals("lp", model.targetResourceGroupName());
        Assertions.assertEquals("qbex", model.tags().get("mcqibycnojv"));
        Assertions.assertEquals("ltskzbbtd", model.sku());
        Assertions.assertEquals("e", model.frontendIpConfigurations().get(0).name());
        Assertions.assertEquals("gpw", model.frontendIpConfigurations().get(0).privateIpAddress());
        Assertions.assertEquals("uh", model.frontendIpConfigurations().get(0).privateIpAllocationMethod());
        Assertions.assertEquals("uusdttouwa", model.frontendIpConfigurations().get(0).subnet().sourceArmResourceId());
        Assertions.assertEquals("bsjyofdx", model.frontendIpConfigurations().get(0).subnet().name());
        Assertions.assertEquals("ekqvkeln", model.frontendIpConfigurations().get(0).zones());
        Assertions.assertEquals("xwyjsflhhc", model.backendAddressPools().get(0).name());
        Assertions.assertEquals("exznelixhnr", model.zones());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
