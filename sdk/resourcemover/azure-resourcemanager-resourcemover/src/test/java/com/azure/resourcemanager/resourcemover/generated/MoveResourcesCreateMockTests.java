// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourcemover.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.resourcemover.ResourceMoverManager;
import com.azure.resourcemanager.resourcemover.models.MoveResource;
import com.azure.resourcemanager.resourcemover.models.MoveResourceProperties;
import com.azure.resourcemanager.resourcemover.models.ResourceSettings;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class MoveResourcesCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"provisioningState\":\"Succeeded\",\"sourceId\":\"xwczelpcire\",\"targetId\":\"feaenwab\",\"existingTargetId\":\"tkl\",\"resourceSettings\":{\"resourceType\":\"ResourceSettings\",\"targetResourceName\":\"xbjhwuaanozjosph\"},\"sourceResourceSettings\":{\"resourceType\":\"ResourceSettings\",\"targetResourceName\":\"ulpjr\"},\"moveStatus\":{\"moveState\":\"PreparePending\"},\"dependsOn\":[],\"dependsOnOverrides\":[],\"isResolveRequired\":true,\"errors\":{}},\"id\":\"tx\",\"name\":\"tcs\",\"type\":\"fcktqumiekke\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        ResourceMoverManager manager =
            ResourceMoverManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        MoveResource response =
            manager
                .moveResources()
                .define("tkwqqtchealm")
                .withExistingMoveCollection("edndr", "v")
                .withProperties(
                    new MoveResourceProperties()
                        .withSourceId("aayg")
                        .withExistingTargetId("rtfudxepxg")
                        .withResourceSettings(new ResourceSettings().withTargetResourceName("agvrvmnpkuk"))
                        .withDependsOnOverrides(Arrays.asList()))
                .create();

        Assertions.assertEquals("xwczelpcire", response.properties().sourceId());
        Assertions.assertEquals("tkl", response.properties().existingTargetId());
        Assertions.assertEquals("xbjhwuaanozjosph", response.properties().resourceSettings().targetResourceName());
    }
}
