// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourcemover.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.resourcemover.models.Identity;
import com.azure.resourcemanager.resourcemover.models.ResourceIdentityType;
import com.azure.resourcemanager.resourcemover.models.UpdateMoveCollectionRequest;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class UpdateMoveCollectionRequestTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        UpdateMoveCollectionRequest model =
            BinaryData
                .fromString(
                    "{\"tags\":{\"rkdtmlxh\":\"my\"},\"identity\":{\"type\":\"UserAssigned\",\"principalId\":\"jtxukcdm\",\"tenantId\":\"rcryuanzwuxzdxta\"}}")
                .toObject(UpdateMoveCollectionRequest.class);
        Assertions.assertEquals("my", model.tags().get("rkdtmlxh"));
        Assertions.assertEquals(ResourceIdentityType.USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("jtxukcdm", model.identity().principalId());
        Assertions.assertEquals("rcryuanzwuxzdxta", model.identity().tenantId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        UpdateMoveCollectionRequest model =
            new UpdateMoveCollectionRequest()
                .withTags(mapOf("rkdtmlxh", "my"))
                .withIdentity(
                    new Identity()
                        .withType(ResourceIdentityType.USER_ASSIGNED)
                        .withPrincipalId("jtxukcdm")
                        .withTenantId("rcryuanzwuxzdxta"));
        model = BinaryData.fromObject(model).toObject(UpdateMoveCollectionRequest.class);
        Assertions.assertEquals("my", model.tags().get("rkdtmlxh"));
        Assertions.assertEquals(ResourceIdentityType.USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("jtxukcdm", model.identity().principalId());
        Assertions.assertEquals("rcryuanzwuxzdxta", model.identity().tenantId());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
