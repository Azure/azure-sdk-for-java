// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.v2.security.keyvault.secrets.implementation.models;

import io.clientcore.core.annotations.Metadata;
import io.clientcore.core.annotations.MetadataProperties;
import io.clientcore.core.serialization.json.JsonReader;
import io.clientcore.core.serialization.json.JsonSerializable;
import io.clientcore.core.serialization.json.JsonToken;
import io.clientcore.core.serialization.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * The secret update parameters.
 */
@Metadata(properties = { MetadataProperties.FLUENT })
public final class SecretUpdateParameters implements JsonSerializable<SecretUpdateParameters> {
    /*
     * Type of the secret value such as a password.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private String contentType;

    /*
     * The secret management attributes.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private SecretAttributes secretAttributes;

    /*
     * Application specific metadata in the form of key-value pairs.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private Map<String, String> tags;

    /**
     * Creates an instance of SecretUpdateParameters class.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public SecretUpdateParameters() {
    }

    /**
     * Get the contentType property: Type of the secret value such as a password.
     * 
     * @return the contentType value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public String getContentType() {
        return this.contentType;
    }

    /**
     * Set the contentType property: Type of the secret value such as a password.
     * 
     * @param contentType the contentType value to set.
     * @return the SecretUpdateParameters object itself.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public SecretUpdateParameters setContentType(String contentType) {
        this.contentType = contentType;
        return this;
    }

    /**
     * Get the secretAttributes property: The secret management attributes.
     * 
     * @return the secretAttributes value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public SecretAttributes getSecretAttributes() {
        return this.secretAttributes;
    }

    /**
     * Set the secretAttributes property: The secret management attributes.
     * 
     * @param secretAttributes the secretAttributes value to set.
     * @return the SecretUpdateParameters object itself.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public SecretUpdateParameters setSecretAttributes(SecretAttributes secretAttributes) {
        this.secretAttributes = secretAttributes;
        return this;
    }

    /**
     * Get the tags property: Application specific metadata in the form of key-value pairs.
     * 
     * @return the tags value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public Map<String, String> getTags() {
        return this.tags;
    }

    /**
     * Set the tags property: Application specific metadata in the form of key-value pairs.
     * 
     * @param tags the tags value to set.
     * @return the SecretUpdateParameters object itself.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public SecretUpdateParameters setTags(Map<String, String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("contentType", this.contentType);
        jsonWriter.writeJsonField("attributes", this.secretAttributes);
        jsonWriter.writeMapField("tags", this.tags, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SecretUpdateParameters from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SecretUpdateParameters if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SecretUpdateParameters.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public static SecretUpdateParameters fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SecretUpdateParameters deserializedSecretUpdateParameters = new SecretUpdateParameters();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("contentType".equals(fieldName)) {
                    deserializedSecretUpdateParameters.contentType = reader.getString();
                } else if ("attributes".equals(fieldName)) {
                    deserializedSecretUpdateParameters.secretAttributes = SecretAttributes.fromJson(reader);
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedSecretUpdateParameters.tags = tags;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSecretUpdateParameters;
        });
    }
}
