// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.v2.security.keyvault.secrets.implementation.models;

import io.clientcore.core.annotations.Metadata;
import io.clientcore.core.annotations.TypeConditions;
import io.clientcore.core.serialization.json.JsonReader;
import io.clientcore.core.serialization.json.JsonSerializable;
import io.clientcore.core.serialization.json.JsonToken;
import io.clientcore.core.serialization.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * The secret set parameters.
 */
@Metadata(conditions = { TypeConditions.FLUENT })
public final class SecretSetParameters implements JsonSerializable<SecretSetParameters> {
    /*
     * The value of the secret.
     */
    @Metadata(generated = true)
    private final String value;

    /*
     * Application specific metadata in the form of key-value pairs.
     */
    @Metadata(generated = true)
    private Map<String, String> tags;

    /*
     * Type of the secret value such as a password.
     */
    @Metadata(generated = true)
    private String contentType;

    /*
     * The secret management attributes.
     */
    @Metadata(generated = true)
    private SecretAttributes secretAttributes;

    /**
     * Creates an instance of SecretSetParameters class.
     *
     * @param value the value value to set.
     */
    @Metadata(generated = true)
    public SecretSetParameters(String value) {
        this.value = value;
    }

    /**
     * Get the value property: The value of the secret.
     *
     * @return the value value.
     */
    @Metadata(generated = true)
    public String getValue() {
        return this.value;
    }

    /**
     * Get the tags property: Application specific metadata in the form of key-value pairs.
     *
     * @return the tags value.
     */
    @Metadata(generated = true)
    public Map<String, String> getTags() {
        return this.tags;
    }

    /**
     * Set the tags property: Application specific metadata in the form of key-value pairs.
     *
     * @param tags the tags value to set.
     * @return the SecretSetParameters object itself.
     */
    @Metadata(generated = true)
    public SecretSetParameters setTags(Map<String, String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the contentType property: Type of the secret value such as a password.
     *
     * @return the contentType value.
     */
    @Metadata(generated = true)
    public String getContentType() {
        return this.contentType;
    }

    /**
     * Set the contentType property: Type of the secret value such as a password.
     *
     * @param contentType the contentType value to set.
     * @return the SecretSetParameters object itself.
     */
    @Metadata(generated = true)
    public SecretSetParameters setContentType(String contentType) {
        this.contentType = contentType;
        return this;
    }

    /**
     * Get the secretAttributes property: The secret management attributes.
     *
     * @return the secretAttributes value.
     */
    @Metadata(generated = true)
    public SecretAttributes getSecretAttributes() {
        return this.secretAttributes;
    }

    /**
     * Set the secretAttributes property: The secret management attributes.
     *
     * @param secretAttributes the secretAttributes value to set.
     * @return the SecretSetParameters object itself.
     */
    @Metadata(generated = true)
    public SecretSetParameters setSecretAttributes(SecretAttributes secretAttributes) {
        this.secretAttributes = secretAttributes;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("value", this.value);
        jsonWriter.writeMapField("tags", this.tags, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("contentType", this.contentType);
        jsonWriter.writeJsonField("attributes", this.secretAttributes);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SecretSetParameters from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of SecretSetParameters if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SecretSetParameters.
     */
    @Metadata(generated = true)
    public static SecretSetParameters fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String value = null;
            Map<String, String> tags = null;
            String contentType = null;
            SecretAttributes secretAttributes = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("value".equals(fieldName)) {
                    value = reader.getString();
                } else if ("tags".equals(fieldName)) {
                    tags = reader.readMap(reader1 -> reader1.getString());
                } else if ("contentType".equals(fieldName)) {
                    contentType = reader.getString();
                } else if ("attributes".equals(fieldName)) {
                    secretAttributes = SecretAttributes.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            SecretSetParameters deserializedSecretSetParameters = new SecretSetParameters(value);
            deserializedSecretSetParameters.tags = tags;
            deserializedSecretSetParameters.contentType = contentType;
            deserializedSecretSetParameters.secretAttributes = secretAttributes;

            return deserializedSecretSetParameters;
        });
    }
}
