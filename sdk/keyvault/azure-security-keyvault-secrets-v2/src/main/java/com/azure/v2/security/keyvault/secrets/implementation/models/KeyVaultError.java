// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.v2.security.keyvault.secrets.implementation.models;

import io.clientcore.core.annotations.Metadata;
import io.clientcore.core.annotations.TypeConditions;
import io.clientcore.core.serialization.json.JsonReader;
import io.clientcore.core.serialization.json.JsonSerializable;
import io.clientcore.core.serialization.json.JsonToken;
import io.clientcore.core.serialization.json.JsonWriter;
import java.io.IOException;

/**
 * The key vault error exception.
 */
@Metadata(conditions = { TypeConditions.IMMUTABLE })
public final class KeyVaultError implements JsonSerializable<KeyVaultError> {
    /*
     * The key vault server error.
     */
    @Metadata(generated = true)
    private KeyVaultErrorError error;

    /**
     * Creates an instance of KeyVaultError class.
     */
    @Metadata(generated = true)
    private KeyVaultError() {
    }

    /**
     * Get the error property: The key vault server error.
     *
     * @return the error value.
     */
    @Metadata(generated = true)
    public KeyVaultErrorError getError() {
        return this.error;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of KeyVaultError from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of KeyVaultError if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the KeyVaultError.
     */
    @Metadata(generated = true)
    public static KeyVaultError fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            KeyVaultError deserializedKeyVaultError = new KeyVaultError();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("error".equals(fieldName)) {
                    deserializedKeyVaultError.error = KeyVaultErrorError.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedKeyVaultError;
        });
    }
}
