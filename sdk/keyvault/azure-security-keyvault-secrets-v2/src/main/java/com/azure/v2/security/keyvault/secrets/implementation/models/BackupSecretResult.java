// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.v2.security.keyvault.secrets.implementation.models;

import io.clientcore.core.annotations.Metadata;
import io.clientcore.core.annotations.MetadataProperties;
import io.clientcore.core.serialization.json.JsonReader;
import io.clientcore.core.serialization.json.JsonSerializable;
import io.clientcore.core.serialization.json.JsonToken;
import io.clientcore.core.serialization.json.JsonWriter;
import io.clientcore.core.utils.Base64Uri;

import java.io.IOException;

/**
 * The backup secret result, containing the backup blob.
 */
@Metadata(properties = { MetadataProperties.IMMUTABLE })
public final class BackupSecretResult implements JsonSerializable<BackupSecretResult> {
    /*
     * The backup blob containing the backed up secret.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private Base64Uri value;

    /**
     * Creates an instance of BackupSecretResult class.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private BackupSecretResult() {
    }

    /**
     * Get the value property: The backup blob containing the backed up secret.
     * 
     * @return the value value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public byte[] getValue() {
        if (this.value == null) {
            return null;
        }
        return this.value.decodedBytes();
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BackupSecretResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BackupSecretResult if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the BackupSecretResult.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public static BackupSecretResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BackupSecretResult deserializedBackupSecretResult = new BackupSecretResult();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("value".equals(fieldName)) {
                    deserializedBackupSecretResult.value
                        = reader.getNullable(nonNullReader -> new Base64Uri(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBackupSecretResult;
        });
    }
}
