// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.v2.security.keyvault.secrets.implementation;

import com.azure.v2.security.keyvault.secrets.SecretServiceVersion;
import com.azure.v2.security.keyvault.secrets.implementation.models.BackupSecretResult;
import com.azure.v2.security.keyvault.secrets.implementation.models.DeletedSecretBundle;
import com.azure.v2.security.keyvault.secrets.implementation.models.DeletedSecretItem;
import com.azure.v2.security.keyvault.secrets.implementation.models.DeletedSecretListResult;
import com.azure.v2.security.keyvault.secrets.implementation.models.KeyVaultError;
import com.azure.v2.security.keyvault.secrets.implementation.models.SecretBundle;
import com.azure.v2.security.keyvault.secrets.implementation.models.SecretItem;
import com.azure.v2.security.keyvault.secrets.implementation.models.SecretListResult;
import io.clientcore.core.annotations.ServiceInterface;
import io.clientcore.core.http.RestProxy;
import io.clientcore.core.http.annotations.BodyParam;
import io.clientcore.core.http.annotations.HeaderParam;
import io.clientcore.core.http.annotations.HostParam;
import io.clientcore.core.http.annotations.HttpRequestInformation;
import io.clientcore.core.http.annotations.PathParam;
import io.clientcore.core.http.annotations.QueryParam;
import io.clientcore.core.http.annotations.UnexpectedResponseExceptionDetail;
import io.clientcore.core.http.exceptions.HttpResponseException;
import io.clientcore.core.http.models.HttpMethod;
import io.clientcore.core.http.models.PagedIterable;
import io.clientcore.core.http.models.PagedResponse;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.http.pipeline.HttpPipeline;
import io.clientcore.core.models.binarydata.BinaryData;
import io.clientcore.core.serialization.ObjectSerializer;
import io.clientcore.core.utils.Context;
import java.lang.reflect.InvocationTargetException;

/**
 * Initializes a new instance of the KeyVaultClient type.
 */
public final class SecretClientImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final SecretClientService service;

    /**
     */
    private final String vaultBaseUrl;

    /**
     * Gets.
     *
     * @return the vaultBaseUrl value.
     */
    public String getVaultBaseUrl() {
        return this.vaultBaseUrl;
    }

    /**
     * Service version.
     */
    private final SecretServiceVersion serviceVersion;

    /**
     * Gets Service version.
     *
     * @return the serviceVersion value.
     */
    public SecretServiceVersion getServiceVersion() {
        return this.serviceVersion;
    }

    /**
     * The HTTP pipeline to send requests through.
     */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     *
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /**
     * Initializes an instance of KeyVaultClient client.
     *
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param vaultBaseUrl
     * @param serviceVersion Service version.
     */
    public SecretClientImpl(HttpPipeline httpPipeline, String vaultBaseUrl, SecretServiceVersion serviceVersion) {
        this.httpPipeline = httpPipeline;
        this.vaultBaseUrl = vaultBaseUrl;
        this.serviceVersion = serviceVersion;
        this.service = RestProxy.create(SecretClientService.class, this.httpPipeline);
    }

    /**
     * The interface defining all the services for KeyVaultClient to be used by the proxy service to perform REST calls.
     */
    @ServiceInterface(name = "KeyVaultClient", host = "{vaultBaseUrl}")
    public interface SecretClientService {
        static SecretClientService getNewInstance(HttpPipeline pipeline, ObjectSerializer serializer,
            @HostParam("vaultBaseUrl") String vaultBaseUrl, @HeaderParam("Accept") String accept) {
            try {
                Class<?> clazz
                    = Class.forName("com.azure.v2.security.keyvault.secrets.implementation.KeyVaultClientServiceImpl");
                return (SecretClientService) clazz
                    .getMethod("getNewInstance", HttpPipeline.class, ObjectSerializer.class, String.class, String.class)
                    .invoke(null, pipeline, serializer, vaultBaseUrl, accept);
            } catch (ClassNotFoundException | NoSuchMethodException | IllegalAccessException
                | InvocationTargetException e) {
                throw new RuntimeException(e);
            }

        }

        @HttpRequestInformation(method = HttpMethod.PUT, path = "/secrets/{secret-name}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = KeyVaultError.class)
        Response<SecretBundle> setSecret(@QueryParam("api-version") String apiVersion,
            @PathParam("secret-name") String secretName, @HeaderParam("Content-Type") String contentType,
            @BodyParam("application/json") BinaryData parameters, RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.PUT, path = "/secrets/{secret-name}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = KeyVaultError.class)
        default SecretBundle setSecret(@QueryParam("api-version") String apiVersion,
            @PathParam("secret-name") String secretName, @HeaderParam("Content-Type") String contentType,
            @BodyParam("application/json") BinaryData parameters) {
            return setSecret(apiVersion, secretName, contentType, parameters, null).getValue();
        }

        @HttpRequestInformation(
            method = HttpMethod.DELETE,
            path = "/secrets/{secret-name}",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = KeyVaultError.class)
        Response<DeletedSecretBundle> deleteSecret(@QueryParam("api-version") String apiVersion,
            @PathParam("secret-name") String secretName, RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.DELETE,
            path = "/secrets/{secret-name}",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = KeyVaultError.class)
        default DeletedSecretBundle deleteSecret(@QueryParam("api-version") String apiVersion,
            @PathParam("secret-name") String secretName) {
            return deleteSecret(apiVersion, secretName, null).getValue();
        }

        @HttpRequestInformation(
            method = HttpMethod.PATCH,
            path = "/secrets/{secret-name}/{secret-version}",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = KeyVaultError.class)
        Response<SecretBundle> updateSecret(@QueryParam("api-version") String apiVersion,
            @PathParam("secret-name") String secretName, @PathParam("secret-version") String secretVersion,
            @HeaderParam("Content-Type") String contentType, @BodyParam("application/json") BinaryData parameters,
            RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.PATCH,
            path = "/secrets/{secret-name}/{secret-version}",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = KeyVaultError.class)
        default SecretBundle updateSecret(@QueryParam("api-version") String apiVersion,
            @PathParam("secret-name") String secretName, @PathParam("secret-version") String secretVersion,
            @HeaderParam("Content-Type") String contentType, @BodyParam("application/json") BinaryData parameters) {
            return updateSecret(apiVersion, secretName, secretVersion, contentType, parameters, null).getValue();
        }

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/secrets/{secret-name}/{secret-version}",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = KeyVaultError.class)
        Response<SecretBundle> getSecret(@QueryParam("api-version") String apiVersion,
            @PathParam("secret-name") String secretName, @PathParam("secret-version") String secretVersion,
            RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/secrets/{secret-name}/{secret-version}",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = KeyVaultError.class)
        default SecretBundle getSecret(@QueryParam("api-version") String apiVersion,
            @PathParam("secret-name") String secretName, @PathParam("secret-version") String secretVersion) {
            return getSecret(apiVersion, secretName, secretVersion, null).getValue();
        }

        @HttpRequestInformation(method = HttpMethod.GET, path = "/secrets", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = KeyVaultError.class)
        Response<SecretListResult> getSecrets(@QueryParam("api-version") String apiVersion,
            RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.GET, path = "/secrets", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = KeyVaultError.class)
        default SecretListResult getSecrets(@QueryParam("api-version") String apiVersion) {
            return getSecrets(apiVersion, null).getValue();
        }

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/secrets/{secret-name}/versions",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = KeyVaultError.class)
        Response<SecretListResult> getSecretVersions(@QueryParam("api-version") String apiVersion,
            @PathParam("secret-name") String secretName, RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/secrets/{secret-name}/versions",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = KeyVaultError.class)
        default SecretListResult getSecretVersions(@QueryParam("api-version") String apiVersion,
            @PathParam("secret-name") String secretName) {
            return getSecretVersions(apiVersion, secretName, null).getValue();
        }

        @HttpRequestInformation(method = HttpMethod.GET, path = "/deletedsecrets", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = KeyVaultError.class)
        Response<DeletedSecretListResult> getDeletedSecrets(@QueryParam("api-version") String apiVersion,
            RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.GET, path = "/deletedsecrets", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = KeyVaultError.class)
        default DeletedSecretListResult getDeletedSecrets(@QueryParam("api-version") String apiVersion) {
            return getDeletedSecrets(apiVersion, null).getValue();
        }

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/deletedsecrets/{secret-name}",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = KeyVaultError.class)
        Response<DeletedSecretBundle> getDeletedSecret(@QueryParam("api-version") String apiVersion,
            @PathParam("secret-name") String secretName, RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/deletedsecrets/{secret-name}",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = KeyVaultError.class)
        default DeletedSecretBundle getDeletedSecret(@QueryParam("api-version") String apiVersion,
            @PathParam("secret-name") String secretName) {
            return getDeletedSecret(apiVersion, secretName, null).getValue();
        }

        @HttpRequestInformation(
            method = HttpMethod.DELETE,
            path = "/deletedsecrets/{secret-name}",
            expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = KeyVaultError.class)
        Response<Void> purgeDeletedSecret(@QueryParam("api-version") String apiVersion,
            @PathParam("secret-name") String secretName, RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.DELETE,
            path = "/deletedsecrets/{secret-name}",
            expectedStatusCodes = { 204 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = KeyVaultError.class)
        default void purgeDeletedSecret(@QueryParam("api-version") String apiVersion,
            @PathParam("secret-name") String secretName) {
            purgeDeletedSecret(apiVersion, secretName, null);
        }

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/deletedsecrets/{secret-name}/recover",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = KeyVaultError.class)
        Response<SecretBundle> recoverDeletedSecret(@QueryParam("api-version") String apiVersion,
            @PathParam("secret-name") String secretName, RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/deletedsecrets/{secret-name}/recover",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = KeyVaultError.class)
        default SecretBundle recoverDeletedSecret(@QueryParam("api-version") String apiVersion,
            @PathParam("secret-name") String secretName) {
            return recoverDeletedSecret(apiVersion, secretName, null).getValue();
        }

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/secrets/{secret-name}/backup",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = KeyVaultError.class)
        Response<BackupSecretResult> backupSecret(@QueryParam("api-version") String apiVersion,
            @PathParam("secret-name") String secretName, RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/secrets/{secret-name}/backup",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = KeyVaultError.class)
        default BackupSecretResult backupSecret(@QueryParam("api-version") String apiVersion,
            @PathParam("secret-name") String secretName) {
            return backupSecret(apiVersion, secretName, null).getValue();
        }

        @HttpRequestInformation(method = HttpMethod.POST, path = "/secrets/restore", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = KeyVaultError.class)
        Response<SecretBundle> restoreSecret(@QueryParam("api-version") String apiVersion,
            @HeaderParam("Content-Type") String contentType, @BodyParam("application/json") BinaryData parameters,
            RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.POST, path = "/secrets/restore", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = KeyVaultError.class)
        default SecretBundle restoreSecret(@QueryParam("api-version") String apiVersion,
            @HeaderParam("Content-Type") String contentType, @BodyParam("application/json") BinaryData parameters) {
            return restoreSecret(apiVersion, contentType, parameters, null).getValue();
        }

        @HttpRequestInformation(method = HttpMethod.GET, path = "{nextLink}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = KeyVaultError.class)
        Response<SecretListResult> getSecretsNext(@PathParam(value = "nextLink", encoded = true) String nextLink,
            RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.GET, path = "{nextLink}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = KeyVaultError.class)
        default SecretListResult getSecretsNext(@PathParam(value = "nextLink", encoded = true) String nextLink) {
            return getSecretsNext(nextLink, null).getValue();
        }

        @HttpRequestInformation(method = HttpMethod.GET, path = "{nextLink}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = KeyVaultError.class)
        Response<SecretListResult> getSecretVersionsNext(@PathParam(value = "nextLink", encoded = true) String nextLink,
            RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.GET, path = "{nextLink}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = KeyVaultError.class)
        default SecretListResult getSecretVersionsNext(@PathParam(value = "nextLink", encoded = true) String nextLink) {
            return getSecretVersionsNext(nextLink, null).getValue();
        }

        @HttpRequestInformation(method = HttpMethod.GET, path = "{nextLink}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = KeyVaultError.class)
        Response<DeletedSecretListResult> getDeletedSecretsNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.GET, path = "{nextLink}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = KeyVaultError.class)
        default DeletedSecretListResult
            getDeletedSecretsNext(@PathParam(value = "nextLink", encoded = true) String nextLink) {
            return getDeletedSecretsNext(nextLink, null).getValue();
        }
    }

    /**
     * Sets a secret in a specified key vault.
     *
     * The SET operation adds a secret to the Azure Key Vault. If the named secret already exists, Azure Key Vault
     * creates a new version of that secret. This operation requires the secrets/set permission.
     * <p><strong>Request Body Schema</strong></p>
     *
     * <pre>
     * {@code
     * {
     *     value: String (Required)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     contentType: String (Optional)
     *     attributes (Optional): {
     *         enabled: Boolean (Optional)
     *         nbf: Long (Optional)
     *         exp: Long (Optional)
     *         created: Long (Optional)
     *         updated: Long (Optional)
     *         recoverableDays: Integer (Optional)
     *         recoveryLevel: String(Purgeable/Recoverable+Purgeable/Recoverable/Recoverable+ProtectedSubscription/CustomizedRecoverable+Purgeable/CustomizedRecoverable/CustomizedRecoverable+ProtectedSubscription) (Optional)
     *     }
     * }
     * }
     * </pre>
     *
     * <p><strong>Response Body Schema</strong></p>
     *
     * <pre>
     * {@code
     * {
     *     value: String (Optional)
     *     id: String (Optional)
     *     contentType: String (Optional)
     *     attributes (Optional): {
     *         enabled: Boolean (Optional)
     *         nbf: Long (Optional)
     *         exp: Long (Optional)
     *         created: Long (Optional)
     *         updated: Long (Optional)
     *         recoverableDays: Integer (Optional)
     *         recoveryLevel: String(Purgeable/Recoverable+Purgeable/Recoverable/Recoverable+ProtectedSubscription/CustomizedRecoverable+Purgeable/CustomizedRecoverable/CustomizedRecoverable+ProtectedSubscription) (Optional)
     *     }
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     kid: String (Optional)
     *     managed: Boolean (Optional)
     * }
     * }
     * </pre>
     *
     * @param secretName The name of the secret. The value you provide may be copied globally for the purpose of running
     * the service. The value provided should not include personally identifiable or sensitive information.
     * @param parameters The parameters for setting the secret.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return a secret consisting of a value, id and its attributes.
     */
    public Response<SecretBundle> setSecretWithResponse(String secretName, BinaryData parameters,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        return service.setSecret(this.getServiceVersion().getVersion(), secretName, contentType, parameters,
            requestOptions);
    }

    /**
     * Deletes a secret from a specified key vault.
     *
     * The DELETE operation applies to any secret stored in Azure Key Vault. DELETE cannot be applied to an individual
     * version of a secret. This operation requires the secrets/delete permission.
     * <p><strong>Response Body Schema</strong></p>
     *
     * <pre>
     * {@code
     * {
     *     value: String (Optional)
     *     id: String (Optional)
     *     contentType: String (Optional)
     *     attributes (Optional): {
     *         enabled: Boolean (Optional)
     *         nbf: Long (Optional)
     *         exp: Long (Optional)
     *         created: Long (Optional)
     *         updated: Long (Optional)
     *         recoverableDays: Integer (Optional)
     *         recoveryLevel: String(Purgeable/Recoverable+Purgeable/Recoverable/Recoverable+ProtectedSubscription/CustomizedRecoverable+Purgeable/CustomizedRecoverable/CustomizedRecoverable+ProtectedSubscription) (Optional)
     *     }
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     kid: String (Optional)
     *     managed: Boolean (Optional)
     *     recoveryId: String (Optional)
     *     scheduledPurgeDate: Long (Optional)
     *     deletedDate: Long (Optional)
     * }
     * }
     * </pre>
     *
     * @param secretName The name of the secret.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return a Deleted Secret consisting of its previous id, attributes and its tags, as well as information on when
     * it will be purged.
     */
    public Response<DeletedSecretBundle> deleteSecretWithResponse(String secretName, RequestOptions requestOptions) {
        return service.deleteSecret(this.getServiceVersion().getVersion(), secretName, requestOptions);
    }

    /**
     * Updates the attributes associated with a specified secret in a given key vault.
     *
     * The UPDATE operation changes specified attributes of an existing stored secret. Attributes that are not specified
     * in the request are left unchanged. The value of a secret itself cannot be changed. This operation requires the
     * secrets/set permission.
     * <p><strong>Request Body Schema</strong></p>
     *
     * <pre>
     * {@code
     * {
     *     contentType: String (Optional)
     *     attributes (Optional): {
     *         enabled: Boolean (Optional)
     *         nbf: Long (Optional)
     *         exp: Long (Optional)
     *         created: Long (Optional)
     *         updated: Long (Optional)
     *         recoverableDays: Integer (Optional)
     *         recoveryLevel: String(Purgeable/Recoverable+Purgeable/Recoverable/Recoverable+ProtectedSubscription/CustomizedRecoverable+Purgeable/CustomizedRecoverable/CustomizedRecoverable+ProtectedSubscription) (Optional)
     *     }
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }
     * </pre>
     *
     * <p><strong>Response Body Schema</strong></p>
     *
     * <pre>
     * {@code
     * {
     *     value: String (Optional)
     *     id: String (Optional)
     *     contentType: String (Optional)
     *     attributes (Optional): {
     *         enabled: Boolean (Optional)
     *         nbf: Long (Optional)
     *         exp: Long (Optional)
     *         created: Long (Optional)
     *         updated: Long (Optional)
     *         recoverableDays: Integer (Optional)
     *         recoveryLevel: String(Purgeable/Recoverable+Purgeable/Recoverable/Recoverable+ProtectedSubscription/CustomizedRecoverable+Purgeable/CustomizedRecoverable/CustomizedRecoverable+ProtectedSubscription) (Optional)
     *     }
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     kid: String (Optional)
     *     managed: Boolean (Optional)
     * }
     * }
     * </pre>
     *
     * @param secretName The name of the secret.
     * @param secretVersion The version of the secret.
     * @param parameters The parameters for update secret operation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return a secret consisting of a value, id and its attributes.
     */
    public Response<SecretBundle> updateSecretWithResponse(String secretName, String secretVersion,
        BinaryData parameters, RequestOptions requestOptions) {
        final String contentType = "application/json";
        return service.updateSecret(this.getServiceVersion().getVersion(), secretName, secretVersion, contentType,
            parameters, requestOptions);
    }

    /**
     * Get a specified secret from a given key vault.
     *
     * The GET operation is applicable to any secret stored in Azure Key Vault. This operation requires the secrets/get
     * permission.
     * <p><strong>Response Body Schema</strong></p>
     *
     * <pre>
     * {@code
     * {
     *     value: String (Optional)
     *     id: String (Optional)
     *     contentType: String (Optional)
     *     attributes (Optional): {
     *         enabled: Boolean (Optional)
     *         nbf: Long (Optional)
     *         exp: Long (Optional)
     *         created: Long (Optional)
     *         updated: Long (Optional)
     *         recoverableDays: Integer (Optional)
     *         recoveryLevel: String(Purgeable/Recoverable+Purgeable/Recoverable/Recoverable+ProtectedSubscription/CustomizedRecoverable+Purgeable/CustomizedRecoverable/CustomizedRecoverable+ProtectedSubscription) (Optional)
     *     }
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     kid: String (Optional)
     *     managed: Boolean (Optional)
     * }
     * }
     * </pre>
     *
     * @param secretName The name of the secret.
     * @param secretVersion The version of the secret. This URI fragment is optional. If not specified, the latest
     * version of the secret is returned.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return a specified secret from a given key vault.
     *
     * The GET operation is applicable to any secret stored in Azure Key Vault.
     */
    public Response<SecretBundle> getSecretWithResponse(String secretName, String secretVersion,
        RequestOptions requestOptions) {
        return service.getSecret(this.getServiceVersion().getVersion(), secretName, secretVersion, requestOptions);
    }

    /**
     * List secrets in a specified key vault.
     *
     * The Get Secrets operation is applicable to the entire vault. However, only the base secret identifier and its
     * attributes are provided in the response. Individual secret versions are not listed in the response. This
     * operation requires the secrets/list permission.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxresults</td><td>Integer</td><td>No</td><td>Maximum number of results to return in a page. If not
     * specified the service will return up to 25 results.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     *
     * <pre>
     * {@code
     * {
     *     value (Optional): [
     *          (Optional){
     *             id: String (Optional)
     *             attributes (Optional): {
     *                 enabled: Boolean (Optional)
     *                 nbf: Long (Optional)
     *                 exp: Long (Optional)
     *                 created: Long (Optional)
     *                 updated: Long (Optional)
     *                 recoverableDays: Integer (Optional)
     *                 recoveryLevel: String(Purgeable/Recoverable+Purgeable/Recoverable/Recoverable+ProtectedSubscription/CustomizedRecoverable+Purgeable/CustomizedRecoverable/CustomizedRecoverable+ProtectedSubscription) (Optional)
     *             }
     *             tags (Optional): {
     *                 String: String (Required)
     *             }
     *             contentType: String (Optional)
     *             managed: Boolean (Optional)
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }
     * </pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the secret list result.
     */
    public PagedResponse<SecretItem> getSecretsSinglePage(RequestOptions requestOptions) {
        Response<SecretListResult> res = service.getSecrets(this.getServiceVersion().getVersion(), requestOptions);
        return new PagedResponse<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getBody(),
            res.getValue().getValue(), null, res.getValue().getNextLink(), null, null, null);
    }

    /**
     * List secrets in a specified key vault.
     *
     * The Get Secrets operation is applicable to the entire vault. However, only the base secret identifier and its
     * attributes are provided in the response. Individual secret versions are not listed in the response. This
     * operation requires the secrets/list permission.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxresults</td><td>Integer</td><td>No</td><td>Maximum number of results to return in a page. If not
     * specified the service will return up to 25 results.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     *
     * <pre>
     * {@code
     * {
     *     value (Optional): [
     *          (Optional){
     *             id: String (Optional)
     *             attributes (Optional): {
     *                 enabled: Boolean (Optional)
     *                 nbf: Long (Optional)
     *                 exp: Long (Optional)
     *                 created: Long (Optional)
     *                 updated: Long (Optional)
     *                 recoverableDays: Integer (Optional)
     *                 recoveryLevel: String(Purgeable/Recoverable+Purgeable/Recoverable/Recoverable+ProtectedSubscription/CustomizedRecoverable+Purgeable/CustomizedRecoverable/CustomizedRecoverable+ProtectedSubscription) (Optional)
     *             }
     *             tags (Optional): {
     *                 String: String (Required)
     *             }
     *             contentType: String (Optional)
     *             managed: Boolean (Optional)
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }
     * </pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the secret list result.
     */
    public PagedIterable<SecretItem> getSecrets(RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(requestOptions != null && requestOptions.getContext() != null
            ? requestOptions.getContext()
            : Context.none());
        return new PagedIterable<>((pagingOptions) -> getSecretsSinglePage(requestOptions),
            (pagingOptions, nextLink) -> getSecretsNextSinglePage(nextLink, requestOptionsForNextPage));
    }

    /**
     * List all versions of the specified secret.
     *
     * The full secret identifier and attributes are provided in the response. No values are returned for the secrets.
     * This operations requires the secrets/list permission.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxresults</td><td>Integer</td><td>No</td><td>Maximum number of results to return in a page. If not
     * specified the service will return up to 25 results.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     *
     * <pre>
     * {@code
     * {
     *     value (Optional): [
     *          (Optional){
     *             id: String (Optional)
     *             attributes (Optional): {
     *                 enabled: Boolean (Optional)
     *                 nbf: Long (Optional)
     *                 exp: Long (Optional)
     *                 created: Long (Optional)
     *                 updated: Long (Optional)
     *                 recoverableDays: Integer (Optional)
     *                 recoveryLevel: String(Purgeable/Recoverable+Purgeable/Recoverable/Recoverable+ProtectedSubscription/CustomizedRecoverable+Purgeable/CustomizedRecoverable/CustomizedRecoverable+ProtectedSubscription) (Optional)
     *             }
     *             tags (Optional): {
     *                 String: String (Required)
     *             }
     *             contentType: String (Optional)
     *             managed: Boolean (Optional)
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }
     * </pre>
     *
     * @param secretName The name of the secret.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the secret list result.
     */
    public PagedResponse<SecretItem> getSecretVersionsSinglePage(String secretName, RequestOptions requestOptions) {
        Response<SecretListResult> res
            = service.getSecretVersions(this.getServiceVersion().getVersion(), secretName, requestOptions);
        return new PagedResponse<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getBody(),
            res.getValue().getValue(), null, res.getValue().getNextLink(), null, null, null);
    }

    /**
     * List all versions of the specified secret.
     *
     * The full secret identifier and attributes are provided in the response. No values are returned for the secrets.
     * This operations requires the secrets/list permission.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxresults</td><td>Integer</td><td>No</td><td>Maximum number of results to return in a page. If not
     * specified the service will return up to 25 results.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     *
     * <pre>
     * {@code
     * {
     *     value (Optional): [
     *          (Optional){
     *             id: String (Optional)
     *             attributes (Optional): {
     *                 enabled: Boolean (Optional)
     *                 nbf: Long (Optional)
     *                 exp: Long (Optional)
     *                 created: Long (Optional)
     *                 updated: Long (Optional)
     *                 recoverableDays: Integer (Optional)
     *                 recoveryLevel: String(Purgeable/Recoverable+Purgeable/Recoverable/Recoverable+ProtectedSubscription/CustomizedRecoverable+Purgeable/CustomizedRecoverable/CustomizedRecoverable+ProtectedSubscription) (Optional)
     *             }
     *             tags (Optional): {
     *                 String: String (Required)
     *             }
     *             contentType: String (Optional)
     *             managed: Boolean (Optional)
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }
     * </pre>
     *
     * @param secretName The name of the secret.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the secret list result.
     */
    public PagedIterable<SecretItem> getSecretVersions(String secretName, RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(requestOptions != null && requestOptions.getContext() != null
            ? requestOptions.getContext()
            : Context.none());
        return new PagedIterable<>((pagingOptions) -> getSecretVersionsSinglePage(secretName, requestOptions),
            (pagingOptions, nextLink) -> getSecretVersionsNextSinglePage(nextLink, requestOptionsForNextPage));
    }

    /**
     * Lists deleted secrets for the specified vault.
     *
     * The Get Deleted Secrets operation returns the secrets that have been deleted for a vault enabled for soft-delete.
     * This operation requires the secrets/list permission.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxresults</td><td>Integer</td><td>No</td><td>Maximum number of results to return in a page. If not
     * specified the service will return up to 25 results.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     *
     * <pre>
     * {@code
     * {
     *     value (Optional): [
     *          (Optional){
     *             id: String (Optional)
     *             attributes (Optional): {
     *                 enabled: Boolean (Optional)
     *                 nbf: Long (Optional)
     *                 exp: Long (Optional)
     *                 created: Long (Optional)
     *                 updated: Long (Optional)
     *                 recoverableDays: Integer (Optional)
     *                 recoveryLevel: String(Purgeable/Recoverable+Purgeable/Recoverable/Recoverable+ProtectedSubscription/CustomizedRecoverable+Purgeable/CustomizedRecoverable/CustomizedRecoverable+ProtectedSubscription) (Optional)
     *             }
     *             tags (Optional): {
     *                 String: String (Required)
     *             }
     *             contentType: String (Optional)
     *             managed: Boolean (Optional)
     *             recoveryId: String (Optional)
     *             scheduledPurgeDate: Long (Optional)
     *             deletedDate: Long (Optional)
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }
     * </pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the deleted secret list result.
     */
    public PagedResponse<DeletedSecretItem> getDeletedSecretsSinglePage(RequestOptions requestOptions) {
        Response<DeletedSecretListResult> res
            = service.getDeletedSecrets(this.getServiceVersion().getVersion(), requestOptions);
        return new PagedResponse<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getBody(),
            res.getValue().getValue(), null, res.getValue().getNextLink(), null, null, null);
    }

    /**
     * Lists deleted secrets for the specified vault.
     *
     * The Get Deleted Secrets operation returns the secrets that have been deleted for a vault enabled for soft-delete.
     * This operation requires the secrets/list permission.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxresults</td><td>Integer</td><td>No</td><td>Maximum number of results to return in a page. If not
     * specified the service will return up to 25 results.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     *
     * <pre>
     * {@code
     * {
     *     value (Optional): [
     *          (Optional){
     *             id: String (Optional)
     *             attributes (Optional): {
     *                 enabled: Boolean (Optional)
     *                 nbf: Long (Optional)
     *                 exp: Long (Optional)
     *                 created: Long (Optional)
     *                 updated: Long (Optional)
     *                 recoverableDays: Integer (Optional)
     *                 recoveryLevel: String(Purgeable/Recoverable+Purgeable/Recoverable/Recoverable+ProtectedSubscription/CustomizedRecoverable+Purgeable/CustomizedRecoverable/CustomizedRecoverable+ProtectedSubscription) (Optional)
     *             }
     *             tags (Optional): {
     *                 String: String (Required)
     *             }
     *             contentType: String (Optional)
     *             managed: Boolean (Optional)
     *             recoveryId: String (Optional)
     *             scheduledPurgeDate: Long (Optional)
     *             deletedDate: Long (Optional)
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }
     * </pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the deleted secret list result.
     */
    public PagedIterable<DeletedSecretItem> getDeletedSecrets(RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(requestOptions != null && requestOptions.getContext() != null
            ? requestOptions.getContext()
            : Context.none());
        return new PagedIterable<>((pagingOptions) -> getDeletedSecretsSinglePage(requestOptions),
            (pagingOptions, nextLink) -> getDeletedSecretsNextSinglePage(nextLink, requestOptionsForNextPage));
    }

    /**
     * Gets the specified deleted secret.
     *
     * The Get Deleted Secret operation returns the specified deleted secret along with its attributes. This operation
     * requires the secrets/get permission.
     * <p><strong>Response Body Schema</strong></p>
     *
     * <pre>
     * {@code
     * {
     *     value: String (Optional)
     *     id: String (Optional)
     *     contentType: String (Optional)
     *     attributes (Optional): {
     *         enabled: Boolean (Optional)
     *         nbf: Long (Optional)
     *         exp: Long (Optional)
     *         created: Long (Optional)
     *         updated: Long (Optional)
     *         recoverableDays: Integer (Optional)
     *         recoveryLevel: String(Purgeable/Recoverable+Purgeable/Recoverable/Recoverable+ProtectedSubscription/CustomizedRecoverable+Purgeable/CustomizedRecoverable/CustomizedRecoverable+ProtectedSubscription) (Optional)
     *     }
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     kid: String (Optional)
     *     managed: Boolean (Optional)
     *     recoveryId: String (Optional)
     *     scheduledPurgeDate: Long (Optional)
     *     deletedDate: Long (Optional)
     * }
     * }
     * </pre>
     *
     * @param secretName The name of the secret.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the specified deleted secret.
     *
     * The Get Deleted Secret operation returns the specified deleted secret along with its attributes.
     */
    public Response<DeletedSecretBundle> getDeletedSecretWithResponse(String secretName,
        RequestOptions requestOptions) {
        return service.getDeletedSecret(this.getServiceVersion().getVersion(), secretName, requestOptions);
    }

    /**
     * Permanently deletes the specified secret.
     *
     * The purge deleted secret operation removes the secret permanently, without the possibility of recovery. This
     * operation can only be enabled on a soft-delete enabled vault. This operation requires the secrets/purge
     * permission.
     *
     * @param secretName The name of the secret.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Void> purgeDeletedSecretWithResponse(String secretName, RequestOptions requestOptions) {
        return service.purgeDeletedSecret(this.getServiceVersion().getVersion(), secretName, requestOptions);
    }

    /**
     * Recovers the deleted secret to the latest version.
     *
     * Recovers the deleted secret in the specified vault. This operation can only be performed on a soft-delete enabled
     * vault. This operation requires the secrets/recover permission.
     * <p><strong>Response Body Schema</strong></p>
     *
     * <pre>
     * {@code
     * {
     *     value: String (Optional)
     *     id: String (Optional)
     *     contentType: String (Optional)
     *     attributes (Optional): {
     *         enabled: Boolean (Optional)
     *         nbf: Long (Optional)
     *         exp: Long (Optional)
     *         created: Long (Optional)
     *         updated: Long (Optional)
     *         recoverableDays: Integer (Optional)
     *         recoveryLevel: String(Purgeable/Recoverable+Purgeable/Recoverable/Recoverable+ProtectedSubscription/CustomizedRecoverable+Purgeable/CustomizedRecoverable/CustomizedRecoverable+ProtectedSubscription) (Optional)
     *     }
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     kid: String (Optional)
     *     managed: Boolean (Optional)
     * }
     * }
     * </pre>
     *
     * @param secretName The name of the deleted secret.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return a secret consisting of a value, id and its attributes.
     */
    public Response<SecretBundle> recoverDeletedSecretWithResponse(String secretName, RequestOptions requestOptions) {
        return service.recoverDeletedSecret(this.getServiceVersion().getVersion(), secretName, requestOptions);
    }

    /**
     * Backs up the specified secret.
     *
     * Requests that a backup of the specified secret be downloaded to the client. All versions of the secret will be
     * downloaded. This operation requires the secrets/backup permission.
     * <p><strong>Response Body Schema</strong></p>
     *
     * <pre>
     * {@code
     * {
     *     value: Base64Url (Optional)
     * }
     * }
     * </pre>
     *
     * @param secretName The name of the secret.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the backup secret result, containing the backup blob.
     */
    public Response<BackupSecretResult> backupSecretWithResponse(String secretName, RequestOptions requestOptions) {
        return service.backupSecret(this.getServiceVersion().getVersion(), secretName, requestOptions);
    }

    /**
     * Restores a backed up secret to a vault.
     *
     * Restores a backed up secret, and all its versions, to a vault. This operation requires the secrets/restore
     * permission.
     * <p><strong>Request Body Schema</strong></p>
     *
     * <pre>
     * {@code
     * {
     *     value: Base64Url (Required)
     * }
     * }
     * </pre>
     *
     * <p><strong>Response Body Schema</strong></p>
     *
     * <pre>
     * {@code
     * {
     *     value: String (Optional)
     *     id: String (Optional)
     *     contentType: String (Optional)
     *     attributes (Optional): {
     *         enabled: Boolean (Optional)
     *         nbf: Long (Optional)
     *         exp: Long (Optional)
     *         created: Long (Optional)
     *         updated: Long (Optional)
     *         recoverableDays: Integer (Optional)
     *         recoveryLevel: String(Purgeable/Recoverable+Purgeable/Recoverable/Recoverable+ProtectedSubscription/CustomizedRecoverable+Purgeable/CustomizedRecoverable/CustomizedRecoverable+ProtectedSubscription) (Optional)
     *     }
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     kid: String (Optional)
     *     managed: Boolean (Optional)
     * }
     * }
     * </pre>
     *
     * @param parameters The parameters to restore the secret.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return a secret consisting of a value, id and its attributes.
     */
    public Response<SecretBundle> restoreSecretWithResponse(BinaryData parameters, RequestOptions requestOptions) {
        final String contentType = "application/json";
        return service.restoreSecret(this.getServiceVersion().getVersion(), contentType, parameters, requestOptions);
    }

    /**
     * List secrets in a specified key vault.
     *
     * Get the next page of items.
     * <p><strong>Response Body Schema</strong></p>
     *
     * <pre>
     * {@code
     * {
     *     value (Optional): [
     *          (Optional){
     *             id: String (Optional)
     *             attributes (Optional): {
     *                 enabled: Boolean (Optional)
     *                 nbf: Long (Optional)
     *                 exp: Long (Optional)
     *                 created: Long (Optional)
     *                 updated: Long (Optional)
     *                 recoverableDays: Integer (Optional)
     *                 recoveryLevel: String(Purgeable/Recoverable+Purgeable/Recoverable/Recoverable+ProtectedSubscription/CustomizedRecoverable+Purgeable/CustomizedRecoverable/CustomizedRecoverable+ProtectedSubscription) (Optional)
     *             }
     *             tags (Optional): {
     *                 String: String (Required)
     *             }
     *             contentType: String (Optional)
     *             managed: Boolean (Optional)
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }
     * </pre>
     *
     * @param nextLink The URL to get the next list of items.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the secret list result.
     */
    public PagedResponse<SecretItem> getSecretsNextSinglePage(String nextLink, RequestOptions requestOptions) {
        Response<SecretListResult> res = service.getSecretsNext(nextLink, requestOptions);
        return new PagedResponse<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getBody(),
            res.getValue().getValue(), null, res.getValue().getNextLink(), null, null, null);
    }

    /**
     * List all versions of the specified secret.
     *
     * Get the next page of items.
     * <p><strong>Response Body Schema</strong></p>
     *
     * <pre>
     * {@code
     * {
     *     value (Optional): [
     *          (Optional){
     *             id: String (Optional)
     *             attributes (Optional): {
     *                 enabled: Boolean (Optional)
     *                 nbf: Long (Optional)
     *                 exp: Long (Optional)
     *                 created: Long (Optional)
     *                 updated: Long (Optional)
     *                 recoverableDays: Integer (Optional)
     *                 recoveryLevel: String(Purgeable/Recoverable+Purgeable/Recoverable/Recoverable+ProtectedSubscription/CustomizedRecoverable+Purgeable/CustomizedRecoverable/CustomizedRecoverable+ProtectedSubscription) (Optional)
     *             }
     *             tags (Optional): {
     *                 String: String (Required)
     *             }
     *             contentType: String (Optional)
     *             managed: Boolean (Optional)
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }
     * </pre>
     *
     * @param nextLink The URL to get the next list of items.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the secret list result.
     */
    public PagedResponse<SecretItem> getSecretVersionsNextSinglePage(String nextLink, RequestOptions requestOptions) {
        Response<SecretListResult> res = service.getSecretVersionsNext(nextLink, requestOptions);
        return new PagedResponse<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getBody(),
            res.getValue().getValue(), null, res.getValue().getNextLink(), null, null, null);
    }

    /**
     * Lists deleted secrets for the specified vault.
     *
     * Get the next page of items.
     * <p><strong>Response Body Schema</strong></p>
     *
     * <pre>
     * {@code
     * {
     *     value (Optional): [
     *          (Optional){
     *             id: String (Optional)
     *             attributes (Optional): {
     *                 enabled: Boolean (Optional)
     *                 nbf: Long (Optional)
     *                 exp: Long (Optional)
     *                 created: Long (Optional)
     *                 updated: Long (Optional)
     *                 recoverableDays: Integer (Optional)
     *                 recoveryLevel: String(Purgeable/Recoverable+Purgeable/Recoverable/Recoverable+ProtectedSubscription/CustomizedRecoverable+Purgeable/CustomizedRecoverable/CustomizedRecoverable+ProtectedSubscription) (Optional)
     *             }
     *             tags (Optional): {
     *                 String: String (Required)
     *             }
     *             contentType: String (Optional)
     *             managed: Boolean (Optional)
     *             recoveryId: String (Optional)
     *             scheduledPurgeDate: Long (Optional)
     *             deletedDate: Long (Optional)
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }
     * </pre>
     *
     * @param nextLink The URL to get the next list of items.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the deleted secret list result.
     */
    public PagedResponse<DeletedSecretItem> getDeletedSecretsNextSinglePage(String nextLink,
        RequestOptions requestOptions) {
        Response<DeletedSecretListResult> res = service.getDeletedSecretsNext(nextLink, requestOptions);
        return new PagedResponse<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getBody(),
            res.getValue().getValue(), null, res.getValue().getNextLink(), null, null, null);
    }
}
