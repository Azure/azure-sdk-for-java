import { EmitContext } from "@typespec/compiler";
export interface EmitterOptions {
    "namespace"?: string;
    "output-dir"?: string;
    "package-dir"?: string;
    "flavor"?: string;
    "service-name"?: string;
    "service-versions"?: string[];
    "skip-special-headers"?: string[];
    "namer"?: boolean;
    "generate-samples"?: boolean;
    "generate-tests"?: boolean;
    "examples-directory"?: string;
    "enable-sync-stack"?: boolean;
    "stream-style-serialization"?: boolean;
    "partial-update"?: boolean;
    "models-subpackage"?: string;
    "custom-types"?: string;
    "custom-types-subpackage"?: string;
    "customization-class"?: string;
    "polling"?: any;
    "group-etag-headers"?: boolean;
    "advanced-versioning"?: boolean;
    "api-version"?: string;
    "service-version-exclude-preview"?: boolean;
    "dev-options"?: DevOptions;
}
export interface DevOptions {
    "generate-code-model"?: boolean;
    "debug"?: boolean;
    "loglevel"?: "off" | "debug" | "info" | "warn" | "error";
    "java-temp-dir"?: string;
}
export declare const $lib: import("@typespec/compiler").TypeSpecLibrary<{
    [code: string]: import("@typespec/compiler").DiagnosticMessages;
}, EmitterOptions, never>;
export declare function $onEmit(context: EmitContext<EmitterOptions>): Promise<void>;
//# sourceMappingURL=emitter.d.ts.map