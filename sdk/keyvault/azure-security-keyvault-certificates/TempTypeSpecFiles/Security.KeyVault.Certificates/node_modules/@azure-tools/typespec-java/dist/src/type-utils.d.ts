import { EncodeData, IntrinsicScalarName, Model, Program, Scalar, TemplatedTypeBase, Type, TypeNameOptions, Union, Value } from "@typespec/compiler";
import { SchemaContext } from "@autorest/codemodel";
import { DurationSchema } from "./common/schemas/time.js";
import { SdkDurationType, SdkType } from "@azure-tools/typespec-client-generator-core";
import { Version } from "@typespec/versioning";
/** Acts as a cache for processing inputs.
 *
 * If the input is undefined, the output is always undefined.
 * for a given input, the process is only ever called once.
 */
export declare class ProcessingCache<In, Out> {
    private transform;
    private results;
    constructor(transform: (orig: In, ...args: Array<any>) => Out);
    has(original: In | undefined): boolean;
    set(original: In, result: Out): Out;
    process(original: In | undefined, ...args: Array<any>): Out | undefined;
}
export declare function isStable(version: Version): boolean;
/** adds only if the item is not in the collection already
 *
 * @note  While this isn't very efficient, it doesn't disturb the original
 * collection, so you won't get inadvertent side effects from using Set, etc.
 */
export declare function pushDistinct<T>(targetArray: Array<T>, ...items: Array<T>): Array<T>;
export declare function modelContainsDerivedModel(model: Model): boolean;
export declare function isModelReferredInTemplate(template: TemplatedTypeBase, target: Model): boolean;
export declare function isNullableType(type: Type): boolean;
export declare function getNonNullSdkType(type: SdkType): SdkType;
export declare function getDefaultValue(value: Value | undefined): any;
export declare function getDurationFormat(encode: EncodeData): DurationSchema["format"];
export declare function getDurationFormatFromSdkType(type: SdkDurationType): DurationSchema["format"];
export declare function hasScalarAsBase(type: Scalar, scalarName: IntrinsicScalarName): boolean;
export declare function unionReferredByType(program: Program, type: Type, cache: Map<Type, Union | null | undefined>): Union | null;
export declare function getUnionDescription(union: Union, typeNameOptions: TypeNameOptions): string;
export declare function modelIs(model: Model, name: string, namespace: string): boolean;
export declare function getAccess(type: Type | undefined): string | undefined;
export declare function isAllValueInteger(values: number[]): boolean;
export declare function getUsage(type: Type | undefined): SchemaContext[] | undefined;
/**
 * Check if a given model or model property is an ARM common type.
 * This is copied from typespec-azure-resource-manager. We don't want to depend on this package since it now has weird dependency on typespec-autorest.
 *
 * @param {Type} entity - The entity to be checked.
 *  @return {boolean} - A boolean value indicating whether an entity is an ARM common type.
 */
export declare function isArmCommonType(entity: Type): boolean;
//# sourceMappingURL=type-utils.d.ts.map