export class ClientContext {
    constructor(baseUri, hostParameters, globalParameters, apiVersions) {
        this.baseUri = baseUri;
        this.hostParameters = hostParameters;
        this.globalParameters = globalParameters;
        this.apiVersions = apiVersions === null || apiVersions === void 0 ? void 0 : apiVersions.map((it) => it.version);
        this.ignoredOperations = new Set();
    }
    addGlobalParameter(parameter) {
        if (!this.globalParameters.includes(parameter) &&
            !this.globalParameters.some((it) => it.language.default.name === parameter.language.default.name)) {
            this.globalParameters.push(parameter);
        }
    }
    getAddedVersions(versions) {
        // currently only allow one added version
        const addedVersions = [];
        const addedVersion = versions.shift().value;
        if (this.apiVersions) {
            let includeVersion = false;
            for (const version of this.apiVersions) {
                if (version === addedVersion) {
                    includeVersion = true;
                }
                if (includeVersion) {
                    addedVersions.push(version);
                }
            }
        }
        return addedVersions;
    }
}
//# sourceMappingURL=models.js.map