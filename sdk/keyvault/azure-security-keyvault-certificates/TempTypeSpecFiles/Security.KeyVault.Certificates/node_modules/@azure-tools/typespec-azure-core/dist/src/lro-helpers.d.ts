import { IntrinsicType, Model, ModelProperty, Operation, Program } from "@typespec/compiler";
import { PropertyMap } from "./lro-info.js";
/**
 * Custom polling
 * Represents a property or header that provides a Uri linking to another operation
 */
export interface OperationLink {
    kind: "link";
    /** Indicates whether the link is in the response header or response body */
    location: "ResponseHeader" | "ResponseBody" | "Self";
    /** The property that contains the link */
    property: ModelProperty;
}
/**
 * Custom polling
 * Represents the property that contains the state and the terminal state values
 */
export type TerminationStatus = HttpTerminationStatus | ModelPropertyTerminationStatus;
/**
 * Definition of a StatusMonitor that uses http status rather then status code.
 */
export interface HttpTerminationStatus {
    kind: "status-code";
}
/**
 * Definition of a status monitor that uses a status field
 */
export interface ModelPropertyTerminationStatus {
    kind: "model-property";
    /** The property that contains the status */
    property: ModelProperty;
    /** The status values that indicate completion with success */
    succeededState: string[];
    /** The status values that indicate operation failure */
    failedState: string[];
    /** The status values that indicate operation cancellation, by the user or another actor */
    canceledState: string[];
}
/**
 * Custom polling
 * Represents the source of a parameter value when the client resolves an operation reference
 */
export interface ParameterSource {
    location: "OperationParameters" | "RequestBody" | "Response";
    /** The name of the property or parameter */
    parameter: string;
}
/**
 * Custom polling
 * Represents a reference to an operation, including a map from the
 * original operation to the parameters of the linked operation
 */
export interface OperationReference {
    kind: "reference";
    /** The referenced operation */
    operation: Operation;
    /** information on how to construct the operation parameters from the original request and response */
    parameterMap?: Map<string, ParameterSource>;
    parameters?: Map<string, PropertyMap>;
}
/**
 * Custom polling
 * A step in a logical operation that involves multiple calls
 */
export interface LogicalOperationStep {
    /** The TypeSpec type that is returned by following a link or calling a lined operation */
    responseModel: Model | IntrinsicType;
}
/** Information on how to get to the StatusMonitor */
export type OperationStep = NextOperationLink | NextOperationReference | PollingOperationStep | FinalOperationLink | FinalOperationReference | PollingSuccessProperty;
/**
 * Indicates that an operation step involves polling, and includes details on
 * how to end polling
 */
export interface PollingOperationStep extends LogicalOperationStep {
    kind: "pollingOperationStep";
    responseModel: Model;
    /** Information on how to determine when the operation reaches a terminal state (most often, this is the terminal values that may be returned in the status field) */
    terminationStatus: TerminationStatus;
    /** Property of the status monitor that contains the logical operation result (if any) */
    resultProperty?: ModelProperty;
    /** Property of the status monitor that contains operation errors in case of failure (if any) */
    errorProperty?: ModelProperty;
}
export type nextOperationStep = NextOperationLink | NextOperationReference;
/**
 * A resource link to the next operation
 */
export interface NextOperationLink extends LogicalOperationStep {
    kind: "nextOperationLink";
    responseModel: Model;
    /** information on how to get the uri to the status monitor */
    target: OperationLink;
}
/**
 * An operation link to the next operation
 */
export interface NextOperationReference extends LogicalOperationStep {
    kind: "nextOperationReference";
    responseModel: Model;
    /** Information on how to call the STatusMonitor operation */
    target: OperationReference;
}
/**
 * For long-running operations, a description of the final step for
 * getting to a success result
 */
export type FinalOperationStep = FinalOperationLink | FinalOperationReference | PollingSuccessProperty | NoPollingSuccessProperty;
/**
 * For long-running operations, the resource link to the final result
 */
export interface FinalOperationLink extends LogicalOperationStep {
    kind: "finalOperationLink";
    /** if a link must be followed to get the result after polling completes, contains information about how to get the uri from the STatusMonitor */
    target: OperationLink;
}
/**
 * For long-running operations, the operation link to the final result
 */
export interface FinalOperationReference extends LogicalOperationStep {
    kind: "finalOperationReference";
    /** if another operation must be called to get the result after polling completes, contains information about how to call this operation */
    target: OperationReference;
}
/**
 * For long-running operations using a status monitor, describes the
 * property of the StatusMonitor that contains the success response
 */
export interface PollingSuccessProperty extends LogicalOperationStep {
    kind: "pollingSuccessProperty";
    responseModel: Model;
    /** The property containing the results of success */
    target: ModelProperty;
    /** The property in the response that contained a url to the status monitor */
    sourceProperty: ModelProperty | undefined;
}
export interface NoPollingSuccessProperty extends LogicalOperationStep {
    kind: "noPollingResult";
    responseModel: IntrinsicType;
}
/**
 * For long-running operations using a status monitor, indicates that
 * the operation has no logical final result when polling completes.
 */
export interface PollingSuccessNoResult extends LogicalOperationStep {
    kind: "pollingSuccessNoResult";
    /** There is no target */
    target: null;
}
/**
 * Azure SDK polling information: provides data contained in the
 * long-running-operation-options.final-state-via field
 */
export declare enum FinalStateValue {
    /** Poll the Azure-AsyncOperation header */
    azureAsyncOperation = "azure-async-operation",
    /** Poll the location header */
    location = "location",
    /** poll the Operation-Location header */
    operationLocation = "operation-location",
    /** poll (GET) the same uri as the original operation */
    originalUri = "original-uri",
    /** Poll on a header or field other than those above */
    customLink = "custom-link",
    /** Call a polling operation using the data in LroMetadata */
    customOperationReference = "custom-operation-reference"
}
/**
 * Information about long-running operations
 * For standard Lro Patterns, only the 'logicalResult' and 'finalStateVia' will be used.
 */
export interface LroMetadata {
    /** The operation that was processed */
    operation: Operation;
    /** The model representing important data returned on a success - clients will want to return this model */
    logicalResult: Model;
    /** An enumeration summarizing how a poller should reach a terminal state */
    finalStateVia: FinalStateValue;
    /** Specific information on how to reach the StatusMonitor, this is either instructions for constructing a call to the status monitor operation {NextOperationReference} ,
     * or the response property containing the url that points to the Statue Monitor {NextOperationLink}
     */
    statusMonitorStep?: NextOperationLink | NextOperationReference;
    /** Specific information about how to process the status monitor, including the location of status, success, and error fields, and the terminal states for polling */
    pollingInfo: PollingOperationStep;
    /** If another operation call is required after polling ends to get the results of the operation, a link to that 'final' operation */
    finalStep?: FinalOperationStep;
    /** The TypeSpec type of the object that contains the final result */
    envelopeResult: Model;
    /** The path to the field in the status monitor that contains results.  If undefined, then there is no results field in the status monitor */
    logicalPath?: string;
    /** The model representing important data returned on a success - clients will want to return this model. If undefined,
     *  then clients would want to return nothing.
     */
    finalResult?: Model | "void";
    /** The TypeSpec type of the object that contains the 'finalResult'. */
    finalEnvelopeResult?: Model | "void";
    /** The path to the field in the 'finalEnvelopeResult' that contains the 'finalResult'. */
    finalResultPath?: string;
}
/**
 *
 * @param program The program being processed
 * @param operation The operation to get Lwo Metadata for
 * @returns LroMetadata for the operation is it is long-running,
 * or nothing if the operation is synchronous, or lro information
 * cannot be processed.
 */
export declare function getLroMetadata(program: Program, operation: Operation): LroMetadata | undefined;
//# sourceMappingURL=lro-helpers.d.ts.map