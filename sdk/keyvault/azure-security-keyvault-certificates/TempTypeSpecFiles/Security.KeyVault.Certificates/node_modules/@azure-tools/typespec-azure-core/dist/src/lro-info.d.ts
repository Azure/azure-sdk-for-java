import { Diagnostic, IntrinsicType, Model, ModelProperty, Operation, Program } from "@typespec/compiler";
import { LongRunningStates } from "./decorators.js";
import { ModelPropertyTerminationStatus, OperationLink } from "./lro-helpers.js";
export interface LroOperationInfo {
    getInvocationInfo(): OperationInvocationInfo | undefined;
    getOperationLink(): OperationLink | undefined;
    getResultInfo(): ResultInfo | undefined;
}
export interface OperationInvocationInfo {
    parameterMap?: Map<string, PropertyMap>;
    operation: Operation;
}
export interface PropertyMap {
    sourceKind: SourceKind;
    source: ModelProperty;
    target: ModelProperty;
}
export interface ResultInfo {
    /** The model type of the status monitor */
    type?: Model;
    /** information about the linked status monitor */
    statusMonitor?: StatusMonitorMetadata;
}
/** Metadata for the STatusMonitor */
export interface StatusMonitorMetadata {
    /** The model type of the status monitor */
    monitorType: Model;
    /** Information on polling status property and termina states */
    terminationInfo: ModelPropertyTerminationStatus;
    lroStates: LongRunningStates;
    /** The property containing the response when polling terminates with success */
    successProperty?: ModelProperty;
    /** The property containing error information when polling terminates with failure */
    errorProperty?: ModelProperty;
    statusProperty: ModelProperty;
    successType: Model | IntrinsicType;
    errorType?: Model;
}
export type SourceKind = "RequestParameter" | "RequestBody" | "ResponseBody";
export declare function extractStatusMonitorInfo(program: Program, model: Model, statusProperty: ModelProperty): [StatusMonitorMetadata | undefined, readonly Diagnostic[]];
export declare function getLroOperationInfo(program: Program, sourceOperation: Operation, targetOperation: Operation, parameters?: Model): [LroOperationInfo | undefined, readonly Diagnostic[]];
//# sourceMappingURL=lro-info.d.ts.map