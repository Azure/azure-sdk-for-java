import { Diagnostic, EnumMember, Union, UnionVariant } from "@typespec/compiler";
export interface UnionEnumBase<K extends string, T> {
    kind: K;
    /** Reference to the type used to construct this enum */
    union: Union;
    /** Member of this enum. */
    members: Map<string | symbol, UnionEnumVariant<T>>;
    /** Any union used as a union variant. */
    include: UnionEnumBase<K, T>;
    /** Flattened member of this enum, this is the {@see members} with the members of the {@see include} union flattened inside. */
    flattenedMembers: Map<string | symbol, UnionEnumVariant<T>>;
    /** If the enum is open. */
    open: boolean;
    /** If the union included null as a variant */
    nullable: boolean;
}
export interface UnionEnumVariant<T> {
    value: T;
    /** Reference to the type used to construct this enum member */
    type: UnionVariant | EnumMember;
}
export type UnionEnum = UnionEnumBase<"string", string> | UnionEnumBase<"number", number>;
/**
 * Tries to convert a union into an enum.
 * If the union only contains the same type of literal options with optionally
 * the base scalar to mark extensibility we can represent this union as an enum of that type.
 *
 * @param union Union to try to convert
 *
 * @example
 *
 * Simple closed string enum
 *
 * ```tsp
 * union PetKind { "cat", "dog" }
 * ```
 *
 * ```ts
 * const [enum, diagnostics] = getUnionAsEnum(union);
 * enum.open === false
 * enum.open.members.get("cat") // { value: "cat", variant: ... }
 * enum.open.members.get("dog") // { value: "dog", variant: ... }
 * ```
 *
 * Simple open string enum
 *
 * ```tsp
 * union PetKind { Cat: "cat", Dog: "dog", string }
 * ```
 *
 * ```ts
 * const [enum, diagnostics] = getUnionAsEnum(union);
 * enum.open === true
 * enum.open.members.get("Cat") // { value: "cat", variant: ... }
 * enum.open.members.get("Dog") // { value: "dog", variant: ... }
 * ```
 *
 * Invalid case
 *
 * ```tsp
 * union PetKind { Cat: "cat", Dog: 123, string }
 * ```
 *
 * ```ts
 * const [enum, diagnostics] = getUnionAsEnum(union);
 * enum === undefined
 * diagnostics.length === 1
 * ```
 */
export declare function getUnionAsEnum(union: Union): [UnionEnum | undefined, readonly Diagnostic[]];
//# sourceMappingURL=union-enums.d.ts.map