import { createRule, getNamespaceFullName, } from "@typespec/compiler";
import { isExcludedCoreType } from "./utils.js";
function getTypeReferenceNamespace(program, ref) {
    const baseOperation = program.checker.getTypeForNode(ref);
    return baseOperation.namespace ? getNamespaceFullName(baseOperation.namespace) : "";
}
export const preventRestLibraryInterfaces = createRule({
    name: "no-rest-library-interfaces",
    description: "Resource interfaces from the TypeSpec.Rest.Resource library are incompatible with Azure.Core.",
    severity: "warning",
    messages: {
        default: `Resource interfaces from the TypeSpec.Rest.Resource library are incompatible with Azure.Core.`,
    },
    create(context) {
        return {
            interface: (interfaceContext) => {
                // If the interface itself is defined in an approved namespace, skip it
                if (isExcludedCoreType(context.program, interfaceContext)) {
                    return;
                }
                // If any interface in the `extends` list comes from `TypeSpec.Rest.Resource`, mark it
                const restInterface = interfaceContext.node.extends.find((i) => getTypeReferenceNamespace(context.program, i) === "TypeSpec.Rest.Resource");
                if (restInterface) {
                    context.reportDiagnostic({
                        target: interfaceContext,
                    });
                }
            },
        };
    },
});
//# sourceMappingURL=prevent-rest-library.js.map