import { Enum, EnumMember, Interface, Model, ModelProperty, Namespace, Operation, Program, Scalar, SourceLocation, Union, UnionVariant } from "@typespec/compiler";
type DeclarableType = Namespace | Model | ModelProperty | Enum | EnumMember | Union | UnionVariant | Scalar | Operation | Interface;
/**
 * Returns the full namespace name for the given type, if available.
 * @param program the TypeSpec program
 * @param type the type to query
 * @returns The name of the namespace the type belongs in.
 */
export declare function getNamespaceName(program: Program, type: DeclarableType | undefined): string;
/**
 * Returns true if the type is defined in a namespace that is excluded from linting.
 * @param program the TypeSpec program
 * @param type the type to query
 * @returns true if the type is defined in a namespace that is excluded from linting.
 */
export declare function isExcludedCoreType(program: Program, type: DeclarableType): boolean;
export declare function isAzureSubNamespace(program: Program, ns: Namespace | undefined): boolean;
/**
 * Returns true if the model type is inline (has no name).
 * @param target the target model
 * @returns true if the model type is inline (has no name).
 */
export declare function isInlineModel(target: Model): boolean;
/**
 * Returns true if the model type is a model with template declaration.
 * @param target the target model
 * @returns true if the model type is a model with template declaration.
 */
export declare function isTemplateDeclarationType(target: Model): number | false;
/**
 * Returns true if the operation is defined on a templated interface which hasn't had args filled in
 * @param target the target operation
 * @returns true if the operation is defined on a templated interface which hasn't had args filled in
 */
export declare function isTemplatedInterfaceOperation(target: Operation): boolean | undefined;
/**
 * Returns true if the operation is an uninstantiated signature template
 * @param target the target operation
 * @returns true if the operation is an uninstantiated signature template
 */
export declare function isTemplatedOperationSignature(target: Operation): boolean;
/**
 * Checks whether a given name is in PascalCase
 * @param name the name to check
 * @returns true if the name is in PascalCase
 */
export declare function isPascalCaseNoAcronyms(name: string): boolean;
/**
 * Checks whether a given name is in camelCase
 * @param name the name to check
 * @returns true if the name is in camelCase
 */
export declare function isCamelCaseNoAcronyms(name: string): boolean;
export declare function findLineStartAndIndent(location: SourceLocation): {
    lineStart: number;
    indent: string;
};
export {};
//# sourceMappingURL=utils.d.ts.map