import { Model, ModelProperty, Operation, Program } from "@typespec/compiler";
import { HttpOperation } from "@typespec/http";
/**
 * Filter the model properties of a model, using the given predicate
 * @param model The model to filter
 * @parm predicate The predicate function used to filter model properties
 * @returns a list of filtered properties, it will have length 0 if no properties
 * match the filter.
 */
export declare function filterModelProperties(model: Model, predicate: (prop: ModelProperty) => boolean): ModelProperty[];
/**
 * Filter operation responses using a predicate
 * @param operation The operation containign the response models to filter
 * @param predicate A predicate function to apply to each response model
 * @returns A list of models matching the predicate, or undefined if there are none
 */
export declare function filterResponseModels(operation: HttpOperation, predicate: (model: Model) => boolean): Model[] | undefined;
/**
 * Get the Http metadata for this operation
 * @param program The program being processed
 * @param operation The operation to get http metadata for
 * @returns An HttpOperation with http metadata.  May emit error diagnostics.
 */
export declare function getHttpMetadata(program: Program, operation: Operation): HttpOperation;
/**
 * Get the main success response from an operation
 * @param program Get success responses for an operation
 * @param operation The operation to process
 * @returns A model, if there is a 2xx response, or nothing otherwise
 */
export declare function getOperationResponse(program: Program, operation: Operation): Model | undefined;
/**
 * Return the first response model that has any properties matching the given model property predicate
 * @param program The program being processed
 * @param operation The operation to retrieve matching response from
 * @param predicate The predicate function to apply to each model property of the responses
 * @returns The model and matching model property, or nothing if no matching models are found
 */
export declare function getResultModelWithProperty(program: Program, operation: Operation, predicate: (prop: ModelProperty) => boolean): [Model, ModelProperty] | undefined;
/**
 * Get the first success response of an operation
 * @param program The program being processed
 * @param operation The operation to process
 * @returns The first success response, or nothing, if no matching models are found
 */
export declare function getSuccessResponse(program: Program, operation: HttpOperation): Model | undefined;
/**
 *
 * @param model The model to process
 * @param collection The set of ModelProperties found so far
 * @returns The full set of model properties found in a model and all ancestors
 */
export declare function getAllProperties(model: Model, collection?: Map<string, ModelProperty>): Map<string, ModelProperty>;
//# sourceMappingURL=utils.d.ts.map