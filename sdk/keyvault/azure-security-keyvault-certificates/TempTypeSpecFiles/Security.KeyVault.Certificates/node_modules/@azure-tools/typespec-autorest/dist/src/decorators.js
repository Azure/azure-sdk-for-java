import { AutorestStateKeys, reportDiagnostic } from "./lib.js";
export const namespace = "Autorest";
/**
 * `@example` - attaches example files to an operation. Multiple examples can be specified.
 *
 * @param {string} pathOrUri - path or Uri to the example file.
 * @param {string} title - name or description of the example file.
 *
 * `@example` can be specified on Operations.
 */
export const $example = (context, entity, pathOrUri, title) => {
    const { program } = context;
    if (!program.stateMap(AutorestStateKeys.example).has(entity)) {
        program.stateMap(AutorestStateKeys.example).set(entity, []);
    }
    else if (program
        .stateMap(AutorestStateKeys.example)
        .get(entity)
        .find((e) => e.title === title || e.pathOrUri === pathOrUri)) {
        reportDiagnostic(program, {
            code: "duplicate-example",
            target: entity,
        });
    }
    program.stateMap(AutorestStateKeys.example).get(entity).push({
        pathOrUri,
        title,
    });
};
export function getExamples(program, entity) {
    return program.stateMap(AutorestStateKeys.example).get(entity);
}
/**
 * `@useRef` - is used to replace the TypeSpec model type in emitter output with a pre-existing named OpenAPI schema such as ARM common types.
 *
 * @param {string} jsonRef - path or Uri to an OpenAPI schema.
 *
 * `@useRef` can be specified on Models and ModelProperty.
 */
export const $useRef = (context, entity, jsonRef) => {
    context.program.stateMap(AutorestStateKeys.useRef).set(entity, jsonRef);
};
export function getRef(program, entity) {
    const refOrProducer = program.stateMap(AutorestStateKeys.useRef).get(entity);
    return refOrProducer;
}
//# sourceMappingURL=decorators.js.map