import { OpenAPI2Document } from "./openapi2-document.js";
import type { AutorestEmitterResult } from "./types.js";
import { AutorestEmitterContext } from "./utils.js";
/**
 * Options to configure the behavior of the Autorest document emitter.
 */
export interface AutorestDocumentEmitterOptions {
    readonly examplesDirectory?: string;
    /**
     * Omit unreachable types.
     * By default all types declared under the service namespace will be included. With this flag on only types references in an operation will be emitted.
     */
    readonly omitUnreachableTypes?: boolean;
    /**
     * If the x-typespec-name extension should be included
     */
    readonly includeXTypeSpecName: "inline-only" | "never";
    /**
     * Arm types dir
     */
    readonly armTypesDir: string;
    /**
     * readOnly property schema behavior
     */
    readonly useReadOnlyStatusSchema?: boolean;
    /**
     * Decide how to deal with the version enum when `omitUnreachableTypes` is not set.
     * @default "omit"
     */
    readonly versionEnumStrategy?: "omit" | "include";
    /**
     * Determines whether and how to emit x-ms-long-running-operation-options
     * to describe resolution of asynchronous operations
     * @default "final-state-only"
     */
    readonly emitLroOptions?: "none" | "final-state-only" | "all";
    /**
     * readOnly property ARM resource flattening
     */
    readonly armResourceFlattening?: boolean;
    /**
     * Determines whether and how to emit schema for arm common-types
     * @default "for-visibility-only"
     */
    readonly emitCommonTypesSchema?: "never" | "for-visibility-changes";
}
export declare function getOpenAPIForService(context: AutorestEmitterContext, options: AutorestDocumentEmitterOptions): Promise<AutorestEmitterResult>;
export declare function sortOpenAPIDocument(doc: OpenAPI2Document): OpenAPI2Document;
//# sourceMappingURL=openapi.d.ts.map