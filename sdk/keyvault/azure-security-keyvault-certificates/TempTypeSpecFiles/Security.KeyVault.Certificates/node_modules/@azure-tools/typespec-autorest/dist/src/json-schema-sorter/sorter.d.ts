export type JsonSchema = {
    title?: string;
    id?: string;
    schema?: string;
    $defs?: Record<string, JsonSchemaType>;
} & JsonSchemaObject;
export type ResolvedJsonSchemaType = Exclude<JsonSchemaType, JsonSchemaRef>;
export type JsonSchemaType = JsonSchemaObject | JsonSchemaArray | JsonSchemaPrimitive | JsonSchemaRef;
export interface JsonSchemaBase {
    $id?: string;
}
export interface JsonSchemaObject extends JsonSchemaBase {
    type: "object";
    properties?: Record<string, JsonSchemaType>;
    additionalProperties?: JsonSchemaType | boolean;
    patternProperties?: Record<string, JsonSchemaType>;
    "x-ordering"?: "keep" | "url";
}
export interface JsonSchemaArray extends JsonSchemaBase {
    type: "array";
    items?: JsonSchema;
}
export interface JsonSchemaRef {
    $ref: string;
}
export interface JsonSchemaPrimitive extends JsonSchemaBase {
    type: "number" | "string" | "boolean";
}
export declare function sortWithJsonSchema<T>(value: T, jsonSchema: JsonSchema, ref?: string): T;
//# sourceMappingURL=sorter.d.ts.map