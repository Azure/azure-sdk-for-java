import { createTCGCContext } from "@azure-tools/typespec-client-generator-core";
import { NoTarget, emitFile, getDirectoryPath, getNamespaceFullName, getService, interpolatePath, listServices, projectProgram, reportDeprecated, resolvePath, } from "@typespec/compiler";
import { resolveInfo } from "@typespec/openapi";
import { buildVersionProjections } from "@typespec/versioning";
import { getTracer } from "./lib.js";
import { getOpenAPIForService, sortOpenAPIDocument, } from "./openapi.js";
const defaultOptions = {
    "output-file": "{azure-resource-provider-folder}/{service-name}/{version-status}/{version}/openapi.json",
    "new-line": "lf",
    "include-x-typespec-name": "never",
};
export async function $onEmit(context) {
    const tracer = getTracer(context.program);
    const options = resolveAutorestOptions(context.program, context.emitterOutputDir, context.options);
    tracer.trace("options", JSON.stringify(options, null, 2));
    await emitAllServiceAtAllVersions(context.program, options);
}
export function resolveAutorestOptions(program, emitterOutputDir, options) {
    const resolvedOptions = {
        ...defaultOptions,
        ...options,
    };
    const armTypesDir = interpolatePath(resolvedOptions["arm-types-dir"] ?? "{project-root}/../../common-types/resource-management", {
        "project-root": program.projectRoot,
        "emitter-output-dir": emitterOutputDir,
    });
    if (resolvedOptions["examples-directory"]) {
        reportDeprecated(program, `examples-directory option is deprecated use examples-dir instead or remove it if examples are located in {project-root}/examples`, NoTarget);
    }
    return {
        outputFile: resolvedOptions["output-file"],
        outputDir: emitterOutputDir,
        azureResourceProviderFolder: resolvedOptions["azure-resource-provider-folder"],
        examplesDirectory: resolvedOptions["examples-dir"] ?? resolvedOptions["examples-directory"],
        version: resolvedOptions["version"],
        newLine: resolvedOptions["new-line"],
        omitUnreachableTypes: resolvedOptions["omit-unreachable-types"],
        versionEnumStrategy: resolvedOptions["version-enum-strategy"],
        includeXTypeSpecName: resolvedOptions["include-x-typespec-name"],
        armTypesDir,
        useReadOnlyStatusSchema: resolvedOptions["use-read-only-status-schema"],
        emitLroOptions: resolvedOptions["emit-lro-options"],
        armResourceFlattening: resolvedOptions["arm-resource-flattening"],
        emitCommonTypesSchema: resolvedOptions["emit-common-types-schema"],
    };
}
export async function getAllServicesAtAllVersions(program, options) {
    const tcgcSdkContext = createTCGCContext(program, "@azure-tools/typespec-autorest");
    const services = listServices(program);
    if (services.length === 0) {
        services.push({ type: program.getGlobalNamespaceType() });
    }
    const serviceRecords = [];
    for (const service of services) {
        const originalProgram = program;
        const versions = buildVersionProjections(program, service.type).filter((v) => !options.version || options.version === v.version);
        if (versions.length === 1 && versions[0].version === undefined) {
            let projectedProgram;
            if (versions[0].projections.length > 0) {
                projectedProgram = program = projectProgram(originalProgram, versions[0].projections);
            }
            const projectedServiceNs = projectedProgram
                ? projectedProgram.projector.projectedTypes.get(service.type)
                : service.type;
            const projectedService = projectedServiceNs === program.getGlobalNamespaceType()
                ? { type: program.getGlobalNamespaceType() }
                : getService(program, projectedServiceNs);
            const context = {
                program,
                outputFile: resolveOutputFile(program, service, services.length > 1, options),
                service: projectedService,
                tcgcSdkContext,
            };
            const result = await getOpenAPIForService(context, options);
            serviceRecords.push({
                service,
                versioned: false,
                ...result,
            });
        }
        else {
            const serviceRecord = {
                service,
                versioned: true,
                versions: [],
            };
            serviceRecords.push(serviceRecord);
            for (const record of versions) {
                const projectedProgram = (program = projectProgram(originalProgram, record.projections));
                const projectedServiceNs = projectedProgram
                    ? projectedProgram.projector.projectedTypes.get(service.type)
                    : service.type;
                const projectedService = projectedServiceNs === program.getGlobalNamespaceType()
                    ? { type: program.getGlobalNamespaceType() }
                    : getService(program, projectedServiceNs);
                const context = {
                    program,
                    outputFile: resolveOutputFile(program, projectedService, services.length > 1, options, record.version),
                    service: projectedService,
                    version: record.version,
                    tcgcSdkContext,
                };
                const result = await getOpenAPIForService(context, options);
                serviceRecord.versions.push({
                    ...result,
                    service: projectedService,
                    version: record.version,
                });
            }
        }
    }
    return serviceRecords;
}
async function emitAllServiceAtAllVersions(program, options) {
    const services = await getAllServicesAtAllVersions(program, options);
    if (program.compilerOptions.noEmit || program.hasError()) {
        return;
    }
    for (const serviceRecord of services) {
        if (serviceRecord.versioned) {
            for (const documentRecord of serviceRecord.versions) {
                await emitOutput(program, documentRecord, options);
            }
        }
        else {
            await emitOutput(program, serviceRecord, options);
        }
    }
}
async function emitOutput(program, result, options) {
    const sortedDocument = sortOpenAPIDocument(result.document);
    // Write out the OpenAPI document to the output path
    await emitFile(program, {
        path: result.outputFile,
        content: prettierOutput(JSON.stringify(sortedDocument, null, 2)),
        newLine: options.newLine,
    });
    // Copy examples to the output directory
    if (result.operationExamples.length > 0) {
        const examplesPath = resolvePath(getDirectoryPath(result.outputFile), "examples");
        await program.host.mkdirp(examplesPath);
        for (const { examples } of result.operationExamples) {
            if (examples) {
                for (const { relativePath, file } of Object.values(examples)) {
                    await emitFile(program, {
                        path: resolvePath(examplesPath, relativePath),
                        content: file.text,
                        newLine: options.newLine,
                    });
                }
            }
        }
    }
}
function prettierOutput(output) {
    return output + "\n";
}
function resolveOutputFile(program, service, multipleServices, options, version) {
    const azureResourceProviderFolder = options.azureResourceProviderFolder;
    if (azureResourceProviderFolder) {
        const info = resolveInfo(program, service.type);
        version = version ?? info?.version ?? "0000-00-00";
    }
    const interpolated = interpolatePath(options.outputFile, {
        "azure-resource-provider-folder": azureResourceProviderFolder,
        "service-name": multipleServices || azureResourceProviderFolder
            ? getNamespaceFullName(service.type)
            : undefined,
        "version-status": azureResourceProviderFolder
            ? version?.includes("preview")
                ? "preview"
                : "stable"
            : undefined,
        version,
    });
    return resolvePath(options.outputDir, interpolated);
}
//# sourceMappingURL=emit.js.map