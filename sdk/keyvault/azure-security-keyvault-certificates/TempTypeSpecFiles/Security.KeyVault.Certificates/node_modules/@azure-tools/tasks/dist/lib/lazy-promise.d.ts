export declare class LazyPromise<T> implements Promise<T> {
    private factory;
    finally(onfinally?: (() => void) | null | undefined): Promise<T>;
    private promise;
    constructor(factory: () => Promise<T>);
    private getValue;
    get [Symbol.toStringTag](): string;
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
}
//# sourceMappingURL=lazy-promise.d.ts.map