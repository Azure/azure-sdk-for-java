"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.SharedLockUnavailableException = exports.ExclusiveLockUnavailableException = exports.AggregateException = exports.OperationAbortedException = exports.OutstandingTaskAlreadyCompletedException = exports.OperationCanceledException = exports.TypeException = exports.Exception = void 0;
class Exception extends Error {
    constructor(message, exitCode = 1) {
        super(message);
        this.exitCode = exitCode;
        Object.setPrototypeOf(this, Exception.prototype);
    }
}
exports.Exception = Exception;
class TypeException extends Exception {
    constructor(code, name, expectedType, instance) {
        super(instance ? `${code} - '${name}' is not expected type '${expectedType}' (instance: '${instance}') .` : `${code} - '${name}' is not expected type '${expectedType}'.`, 1);
        Object.setPrototypeOf(this, TypeException.prototype);
    }
}
exports.TypeException = TypeException;
class OperationCanceledException extends Exception {
    constructor(message = 'Cancelation Requested', exitCode = 1) {
        super(message, exitCode);
        this.exitCode = exitCode;
        Object.setPrototypeOf(this, OperationCanceledException.prototype);
    }
}
exports.OperationCanceledException = OperationCanceledException;
class OutstandingTaskAlreadyCompletedException extends Exception {
    constructor() {
        super('The OutstandingTaskAwaiter is already completed, may not Enter() again.', 1);
        Object.setPrototypeOf(this, OutstandingTaskAlreadyCompletedException.prototype);
    }
}
exports.OutstandingTaskAlreadyCompletedException = OutstandingTaskAlreadyCompletedException;
class OperationAbortedException extends Exception {
    constructor() {
        super('Error occurred. Exiting.', 1);
        Object.setPrototypeOf(this, OperationAbortedException.prototype);
    }
}
exports.OperationAbortedException = OperationAbortedException;
class AggregateException extends Exception {
    constructor(errors) {
        super('Multiple Exceptions caught.', 1);
        this.errors = errors;
        Object.setPrototypeOf(this, AggregateException.prototype);
    }
}
exports.AggregateException = AggregateException;
class ExclusiveLockUnavailableException extends Exception {
    constructor(resource, timeout) {
        super(`Unable to acquire exclusive lock on '${resource}' before timeout ${timeout} msec.`, 1);
        Object.setPrototypeOf(this, ExclusiveLockUnavailableException.prototype);
    }
}
exports.ExclusiveLockUnavailableException = ExclusiveLockUnavailableException;
class SharedLockUnavailableException extends Exception {
    constructor(resource, timeout) {
        super(`Unable to acquire shared lock on '${resource}' before timeout ${timeout} msec.`, 1);
        Object.setPrototypeOf(this, SharedLockUnavailableException.prototype);
    }
}
exports.SharedLockUnavailableException = SharedLockUnavailableException;
//# sourceMappingURL=exception.js.map