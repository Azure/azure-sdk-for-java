"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.ManualPromise = void 0;
/**
* A manually (or externally) controlled asynchronous Promise implementation
*/
class ManualPromise {
    constructor() {
        /**
         * A method to manually resolve the Promise.
         */
        this.resolve = (v) => { };
        /**
         *  A method to manually reject the Promise
         */
        this.reject = (e) => { };
        this.state = 'pending';
        this.p = new Promise((r, j) => {
            this.resolve = (v) => { this.state = 'resolved'; r(v); };
            this.reject = (e) => { this.state = 'rejected'; j(e); };
        });
    }
    /**
      * Attaches callbacks for the resolution and/or rejection of the Promise.
      * @param onfulfilled The callback to execute when the Promise is resolved.
      * @param onrejected The callback to execute when the Promise is rejected.
      * @returns A Promise for the completion of which ever callback is executed.
      */
    then(onfulfilled, onrejected) {
        return this.p.then(onfulfilled, onrejected);
    }
    /**
    * Attaches a callback for only the rejection of the Promise.
    * @param onrejected The callback to execute when the Promise is rejected.
    * @returns A Promise for the completion of the callback.
    */
    catch(onrejected) {
        return this.p.catch(onrejected);
    }
    finally(onfinally) {
        return this.p.finally(onfinally);
    }
    /**
     * Returns true of the Promise has been Resolved or Rejected
     */
    get isCompleted() {
        return this.state !== 'pending';
    }
    /**
     * Returns true if the Promise has been Resolved.
     */
    get isResolved() {
        return this.state === 'resolved';
    }
    /**
     * Returns true if the Promise has been Rejected.
     */
    get isRejected() {
        return this.state === 'rejected';
    }
}
exports.ManualPromise = ManualPromise;
//# sourceMappingURL=manual-promise.js.map