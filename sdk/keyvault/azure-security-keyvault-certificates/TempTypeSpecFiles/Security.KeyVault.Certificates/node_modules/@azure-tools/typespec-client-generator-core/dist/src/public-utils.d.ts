import { Diagnostic, Enum, Interface, Model, ModelProperty, Namespace, Operation, Scalar, Type, Union } from "@typespec/compiler";
import { HttpOperation } from "@typespec/http";
import { Version } from "@typespec/versioning";
import { SdkHttpOperationExample, TCGCContext } from "./interfaces.js";
import { TspLiteralType } from "./internal-utils.js";
/**
 * Return the default api version for a versioned service. Will return undefined if one does not exist
 * @param program
 * @param serviceNamespace
 * @returns
 */
export declare function getDefaultApiVersion(context: TCGCContext, serviceNamespace: Namespace): Version | undefined;
/**
 * Return whether a parameter is the Api Version parameter of a client
 * @param program
 * @param parameter
 * @returns
 */
export declare function isApiVersion(context: TCGCContext, type: {
    name: string;
}): boolean;
/**
 * Get the client's namespace for generation. If package-name is passed in config, we return
 * that value as our namespace. Otherwise, we default to the TypeSpec service namespace.
 * @param program
 * @param context
 * @returns
 */
export declare function getClientNamespaceString(context: TCGCContext): string | undefined;
/**
 * If the given type is an anonymous model and all of its properties excluding
 * header/query/path/status-code are sourced from a named model, returns that original named model.
 * Otherwise the given type is returned unchanged.
 *
 * @param context
 * @param type
 * @returns
 */
export declare function getEffectivePayloadType(context: TCGCContext, type: Model): Model;
/**
 *
 * @deprecated This function is deprecated. Please pass in your emitter name as a parameter name to createSdkContext
 */
export declare function getEmitterTargetName(context: TCGCContext): string;
/**
 * Get the library and wire name of a model property. Takes @clientName and @encodedName into account
 * @param context
 * @param property
 * @returns a tuple of the library and wire name for a model property
 */
export declare function getPropertyNames(context: TCGCContext, property: ModelProperty): [string, string];
/**
 * Get the library name of a property / parameter / operation / model / enum. Takes projections into account
 *
 * Returns name in the following order of priority
 * 1. language emitter name, i.e. @clientName("csharpSpecificName", "csharp") => "csharpSpecificName"
 * 2. client name, i.e. @clientName(""clientName") => "clientName"
 * 3. deprecated projected name
 * 4. friendly name, i.e. @friendlyName("friendlyName") => "friendlyName"
 * 5. name in typespec
 *
 * @param context
 * @param type
 * @returns the library name for a typespec type
 */
export declare function getLibraryName(context: TCGCContext, type: Type & {
    name?: string | symbol;
}): string;
/**
 * Get the serialized name of a type.
 * @param context
 * @param type
 * @returns
 */
export declare function getWireName(context: TCGCContext, type: Type & {
    name: string;
}): string;
/**
 * Helper function to return cross language definition id for a type
 * @param type
 * @returns
 */
export declare function getCrossLanguageDefinitionId(context: TCGCContext, type: Union | Model | Enum | Scalar | ModelProperty | Operation | Namespace | Interface, operation?: Operation, appendNamespace?: boolean): string;
/**
 * Helper function return the cross langauge package id for a package
 */
export declare function getCrossLanguagePackageId(context: TCGCContext): [string, readonly Diagnostic[]];
/**
 * Create a name for anonymous model
 * @param context
 * @param type
 */
export declare function getGeneratedName(context: TCGCContext, type: Model | Union | TspLiteralType, operation?: Operation): string;
export declare function getHttpOperationWithCache(context: TCGCContext, operation: Operation): HttpOperation;
/**
 * Get the examples for a given http operation.
 */
export declare function getHttpOperationExamples(context: TCGCContext, operation: HttpOperation): SdkHttpOperationExample[];
//# sourceMappingURL=public-utils.d.ts.map