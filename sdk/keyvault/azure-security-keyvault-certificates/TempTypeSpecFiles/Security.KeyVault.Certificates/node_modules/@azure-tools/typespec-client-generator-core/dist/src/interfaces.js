// these two vars are used to validate whether our SdkBuiltInKinds are exhaustive for all possible values from typespec
// if it is not, a typescript compilation error will be thrown here.
const _ = true;
const __ = true;
var SdkIntKindsEnum;
(function (SdkIntKindsEnum) {
    SdkIntKindsEnum["numeric"] = "numeric";
    SdkIntKindsEnum["integer"] = "integer";
    SdkIntKindsEnum["safeint"] = "safeint";
    SdkIntKindsEnum["int8"] = "int8";
    SdkIntKindsEnum["int16"] = "int16";
    SdkIntKindsEnum["int32"] = "int32";
    SdkIntKindsEnum["int64"] = "int64";
    SdkIntKindsEnum["uint8"] = "uint8";
    SdkIntKindsEnum["uint16"] = "uint16";
    SdkIntKindsEnum["uint32"] = "uint32";
    SdkIntKindsEnum["uint64"] = "uint64";
})(SdkIntKindsEnum || (SdkIntKindsEnum = {}));
var SdkFloatingPointKindsEnum;
(function (SdkFloatingPointKindsEnum) {
    SdkFloatingPointKindsEnum["float"] = "float";
    SdkFloatingPointKindsEnum["float32"] = "float32";
    SdkFloatingPointKindsEnum["float64"] = "float64";
})(SdkFloatingPointKindsEnum || (SdkFloatingPointKindsEnum = {}));
var SdkFixedPointKindsEnum;
(function (SdkFixedPointKindsEnum) {
    SdkFixedPointKindsEnum["decimal"] = "decimal";
    SdkFixedPointKindsEnum["decimal128"] = "decimal128";
})(SdkFixedPointKindsEnum || (SdkFixedPointKindsEnum = {}));
var SdkGenericBuiltInStringKindsEnum;
(function (SdkGenericBuiltInStringKindsEnum) {
    SdkGenericBuiltInStringKindsEnum["string"] = "string";
    SdkGenericBuiltInStringKindsEnum["url"] = "url";
})(SdkGenericBuiltInStringKindsEnum || (SdkGenericBuiltInStringKindsEnum = {}));
var SdkBuiltInKindsMiscellaneousEnum;
(function (SdkBuiltInKindsMiscellaneousEnum) {
    SdkBuiltInKindsMiscellaneousEnum["bytes"] = "bytes";
    SdkBuiltInKindsMiscellaneousEnum["boolean"] = "boolean";
    SdkBuiltInKindsMiscellaneousEnum["plainDate"] = "plainDate";
    SdkBuiltInKindsMiscellaneousEnum["plainTime"] = "plainTime";
    SdkBuiltInKindsMiscellaneousEnum["unknown"] = "unknown";
})(SdkBuiltInKindsMiscellaneousEnum || (SdkBuiltInKindsMiscellaneousEnum = {}));
export function getKnownScalars() {
    const retval = {};
    const typespecNamespace = Object.keys(SdkBuiltInKindsMiscellaneousEnum)
        .concat(Object.keys(SdkIntKindsEnum))
        .concat(Object.keys(SdkFloatingPointKindsEnum))
        .concat(Object.keys(SdkFixedPointKindsEnum))
        .concat(Object.keys(SdkGenericBuiltInStringKindsEnum));
    for (const kind of typespecNamespace) {
        if (!isSdkBuiltInKind(kind))
            continue; // it will always be true
        retval[`TypeSpec.${kind}`] = kind;
    }
    return retval;
}
export function isSdkBuiltInKind(kind) {
    return (kind in SdkBuiltInKindsMiscellaneousEnum ||
        isSdkIntKind(kind) ||
        isSdkFloatKind(kind) ||
        isSdkFixedPointKind(kind) ||
        kind in SdkGenericBuiltInStringKindsEnum);
}
export function isSdkIntKind(kind) {
    return kind in SdkIntKindsEnum;
}
export function isSdkFloatKind(kind) {
    return kind in SdkFloatingPointKindsEnum;
}
function isSdkFixedPointKind(kind) {
    return kind in SdkFixedPointKindsEnum;
}
const SdkDateTimeEncodingsConst = ["rfc3339", "rfc7231", "unixTimestamp"];
export function isSdkDateTimeEncodings(encoding) {
    return SdkDateTimeEncodingsConst.includes(encoding);
}
/**
 * This enum represents the different ways a model can be used in a method.
 */
export var UsageFlags;
(function (UsageFlags) {
    UsageFlags[UsageFlags["None"] = 0] = "None";
    UsageFlags[UsageFlags["Input"] = 2] = "Input";
    UsageFlags[UsageFlags["Output"] = 4] = "Output";
    UsageFlags[UsageFlags["ApiVersionEnum"] = 8] = "ApiVersionEnum";
    // Input and Json will also be set when JsonMergePatch is set.
    UsageFlags[UsageFlags["JsonMergePatch"] = 16] = "JsonMergePatch";
    // Input will also be set when MultipartFormData is set.
    UsageFlags[UsageFlags["MultipartFormData"] = 32] = "MultipartFormData";
    // Used in spread.
    UsageFlags[UsageFlags["Spread"] = 64] = "Spread";
    // Output will also be set when Error is set.
    UsageFlags[UsageFlags["Error"] = 128] = "Error";
    // Set when model is used in conjunction with an application/json content type.
    UsageFlags[UsageFlags["Json"] = 256] = "Json";
    // Set when model is used in conjunction with an application/xml content type.
    UsageFlags[UsageFlags["Xml"] = 512] = "Xml";
})(UsageFlags || (UsageFlags = {}));
//# sourceMappingURL=interfaces.js.map