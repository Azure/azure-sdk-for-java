import { getLroMetadata, getPagedResult } from "@azure-tools/typespec-azure-core";
import { createDiagnosticCollector, getNamespaceFullName, getService, ignoreDiagnostics, } from "@typespec/compiler";
import { getServers } from "@typespec/http";
import { resolveVersions } from "@typespec/versioning";
import { camelCase } from "change-case";
import { getAccess, getClientNameOverride, getOverriddenClientMethod, listClients, listOperationGroups, listOperationsInOperationGroup, shouldGenerateConvenient, shouldGenerateProtocol, } from "./decorators.js";
import { getCorrespondingMethodParams, getSdkHttpOperation, getSdkHttpParameter } from "./http.js";
import { UsageFlags, } from "./interfaces.js";
import { createGeneratedName, filterApiVersionsWithDecorators, getAllResponseBodiesAndNonBodyExists, getAvailableApiVersions, getClientNamespaceStringHelper, getDocHelper, getHashForType, getLocationOfOperation, getTypeDecorators, isNeverOrVoidType, updateWithApiVersionInformation, } from "./internal-utils.js";
import { createDiagnostic } from "./lib.js";
import { getClientNamespaceString, getCrossLanguageDefinitionId, getCrossLanguagePackageId, getDefaultApiVersion, getHttpOperationWithCache, getLibraryName, } from "./public-utils.js";
import { getAllModelsWithDiagnostics, getClientTypeWithDiagnostics, getSdkCredentialParameter, getSdkModelPropertyType, getTypeSpecBuiltInType, } from "./types.js";
function getSdkServiceOperation(context, operation, methodParameters) {
    const diagnostics = createDiagnosticCollector();
    const httpOperation = getHttpOperationWithCache(context, operation);
    if (httpOperation) {
        const sdkHttpOperation = diagnostics.pipe(getSdkHttpOperation(context, httpOperation, methodParameters));
        return diagnostics.wrap(sdkHttpOperation);
    }
    diagnostics.add(createDiagnostic({
        code: "unsupported-protocol",
        target: operation,
        format: {},
    }));
    return diagnostics.wrap(undefined);
}
function getSdkLroPagingServiceMethod(context, operation) {
    const diagnostics = createDiagnosticCollector();
    return diagnostics.wrap({
        ...diagnostics.pipe(getSdkLroServiceMethod(context, operation)),
        ...diagnostics.pipe(getSdkPagingServiceMethod(context, operation)),
        kind: "lropaging",
    });
}
function getSdkPagingServiceMethod(context, operation) {
    const diagnostics = createDiagnosticCollector();
    const pagedMetadata = getPagedResult(context.program, operation);
    const basic = diagnostics.pipe(getSdkBasicServiceMethod(context, operation));
    if (pagedMetadata.itemsProperty) {
        basic.response.type = diagnostics.pipe(getClientTypeWithDiagnostics(context, pagedMetadata.itemsProperty.type));
    }
    basic.response.resultPath = pagedMetadata.itemsSegments?.join(".");
    return diagnostics.wrap({
        ...basic,
        __raw_paged_metadata: pagedMetadata,
        kind: "paging",
        nextLinkPath: pagedMetadata?.nextLinkSegments?.join("."),
        nextLinkOperation: pagedMetadata?.nextLinkOperation
            ? diagnostics.pipe(getSdkServiceOperation(context, pagedMetadata.nextLinkOperation, basic.parameters))
            : undefined,
        getResponseMapping() {
            return basic.response.resultPath;
        },
    });
}
function getSdkLroServiceMethod(context, operation) {
    const diagnostics = createDiagnosticCollector();
    const metadata = getLroMetadata(context.program, operation);
    const basicServiceMethod = diagnostics.pipe(getSdkBasicServiceMethod(context, operation));
    if (metadata.finalResult === undefined || metadata.finalResult === "void") {
        basicServiceMethod.response.type = undefined;
    }
    else {
        basicServiceMethod.response.type = diagnostics.pipe(getClientTypeWithDiagnostics(context, metadata.finalResult));
    }
    basicServiceMethod.response.resultPath = metadata.finalResultPath;
    return diagnostics.wrap({
        ...basicServiceMethod,
        kind: "lro",
        __raw_lro_metadata: metadata,
        operation: diagnostics.pipe(getSdkServiceOperation(context, metadata.operation, basicServiceMethod.parameters)),
        getResponseMapping() {
            return this.response.resultPath;
        },
    });
}
function getSdkMethodResponse(context, operation, sdkOperation) {
    const responses = sdkOperation.responses;
    // TODO: put head as bool here
    const { allResponseBodies, nonBodyExists } = getAllResponseBodiesAndNonBodyExists(responses);
    const responseTypes = new Set(allResponseBodies.map((x) => getHashForType(x)));
    let type = undefined;
    if (responseTypes.size > 1) {
        // return union of all the different types
        type = {
            __raw: operation,
            kind: "union",
            values: allResponseBodies,
            name: createGeneratedName(context, operation, "UnionResponse"),
            isGeneratedName: true,
            crossLanguageDefinitionId: getCrossLanguageDefinitionId(context, operation),
            decorators: [],
        };
    }
    else if (responseTypes.size === 1) {
        type = allResponseBodies[0];
    }
    if (nonBodyExists && type) {
        type = {
            kind: "nullable",
            type: type,
            decorators: [],
        };
    }
    return {
        kind: "method",
        type,
    };
}
function getSdkBasicServiceMethod(context, operation) {
    const diagnostics = createDiagnosticCollector();
    const methodParameters = [];
    // we have to calculate apiVersions first, so that the information is put
    // in __tspTypeToApiVersions before we call parameters since method wraps parameter
    const apiVersions = getAvailableApiVersions(context, operation, getLocationOfOperation(operation));
    const override = getOverriddenClientMethod(context, operation);
    const params = (override ?? operation).parameters.properties.values();
    for (const param of params) {
        if (isNeverOrVoidType(param.type))
            continue;
        methodParameters.push(diagnostics.pipe(getSdkMethodParameter(context, param, operation)));
    }
    const serviceOperation = diagnostics.pipe(getSdkServiceOperation(context, operation, methodParameters));
    const response = getSdkMethodResponse(context, operation, serviceOperation);
    const name = getLibraryName(context, operation);
    return diagnostics.wrap({
        __raw: operation,
        kind: "basic",
        name,
        access: getAccess(context, operation),
        parameters: methodParameters,
        description: getDocHelper(context, operation).description,
        details: getDocHelper(context, operation).details,
        operation: serviceOperation,
        response,
        apiVersions,
        getParameterMapping: function getParameterMapping(serviceParam) {
            return ignoreDiagnostics(getCorrespondingMethodParams(context, operation, methodParameters, serviceParam));
        },
        getResponseMapping: function getResponseMapping() {
            return undefined; // currently we only return a value for paging or lro
        },
        crossLanguageDefintionId: getCrossLanguageDefinitionId(context, operation),
        decorators: diagnostics.pipe(getTypeDecorators(context, operation)),
        generateConvenient: shouldGenerateConvenient(context, operation),
        generateProtocol: shouldGenerateProtocol(context, operation),
    });
}
function getSdkServiceMethod(context, operation) {
    const lro = getLroMetadata(context.program, operation);
    const paging = getPagedResult(context.program, operation);
    if (lro && paging) {
        return getSdkLroPagingServiceMethod(context, operation);
    }
    else if (paging) {
        return getSdkPagingServiceMethod(context, operation);
    }
    else if (lro) {
        return getSdkLroServiceMethod(context, operation);
    }
    return getSdkBasicServiceMethod(context, operation);
}
function getClientDefaultApiVersion(context, client) {
    if (context.apiVersion && !["latest", "all"].includes(context.apiVersion)) {
        return context.apiVersion;
    }
    let defaultVersion = getDefaultApiVersion(context, client.service)?.value;
    if (!defaultVersion) {
        // eslint-disable-next-line deprecation/deprecation
        defaultVersion = getService(context.program, client.service)?.version;
    }
    return defaultVersion;
}
function getSdkInitializationType(context, client) {
    const diagnostics = createDiagnosticCollector();
    const credentialParam = getSdkCredentialParameter(context, client);
    const properties = [
        diagnostics.pipe(getSdkEndpointParameter(context, client)), // there will always be an endpoint parameter
    ];
    if (credentialParam) {
        properties.push(credentialParam);
    }
    let apiVersionParam = context.__namespaceToApiVersionParameter.get(client.type);
    if (!apiVersionParam) {
        for (const operationGroup of listOperationGroups(context, client)) {
            // if any sub operation groups have an api version param, the top level needs
            // the api version param as well
            apiVersionParam = context.__namespaceToApiVersionParameter.get(operationGroup.type);
            if (apiVersionParam)
                break;
        }
    }
    if (apiVersionParam) {
        properties.push(apiVersionParam);
    }
    if (context.__subscriptionIdParameter) {
        properties.push(context.__subscriptionIdParameter);
    }
    const namePrefix = client.kind === "SdkClient" ? client.name : client.groupPath;
    const name = `${namePrefix.split(".").at(-1)}Options`;
    return diagnostics.wrap({
        __raw: client.service,
        description: "Initialization class for the client",
        kind: "model",
        properties,
        name,
        isGeneratedName: true,
        access: client.kind === "SdkClient" ? "public" : "internal",
        usage: UsageFlags.Input,
        crossLanguageDefinitionId: `${getNamespaceFullName(client.service.namespace)}.${name}`,
        apiVersions: context.__tspTypeToApiVersions.get(client.type),
        isFormDataType: false,
        isError: false,
        decorators: [],
    });
}
function getSdkMethodParameter(context, type, operation) {
    const diagnostics = createDiagnosticCollector();
    if (type.kind !== "ModelProperty") {
        const libraryName = getLibraryName(context, type);
        const name = camelCase(libraryName ?? "body");
        // call before creating property type, so we can pass apiVersions of param onto its type
        const apiVersions = getAvailableApiVersions(context, type, operation);
        const propertyType = diagnostics.pipe(getClientTypeWithDiagnostics(context, type, operation));
        return diagnostics.wrap({
            kind: "method",
            description: getDocHelper(context, type).description,
            details: getDocHelper(context, type).details,
            apiVersions,
            type: propertyType,
            name,
            isGeneratedName: Boolean(libraryName),
            optional: false,
            discriminator: false,
            serializedName: name,
            isApiVersionParam: false,
            onClient: false,
            crossLanguageDefinitionId: "anonymous",
            decorators: diagnostics.pipe(getTypeDecorators(context, type)),
        });
    }
    return diagnostics.wrap({
        ...diagnostics.pipe(getSdkModelPropertyType(context, type, operation)),
        kind: "method",
    });
}
function getSdkMethods(context, client) {
    const diagnostics = createDiagnosticCollector();
    const retval = [];
    for (const operation of listOperationsInOperationGroup(context, client)) {
        retval.push(diagnostics.pipe(getSdkServiceMethod(context, operation)));
    }
    for (const operationGroup of listOperationGroups(context, client)) {
        // We create a client accessor for each operation group
        const operationGroupClient = diagnostics.pipe(createSdkClientType(context, operationGroup));
        const name = `get${operationGroup.type.name}`;
        retval.push({
            kind: "clientaccessor",
            parameters: [],
            name,
            description: getDocHelper(context, operationGroup.type).description,
            details: getDocHelper(context, operationGroup.type).details,
            access: "internal",
            response: operationGroupClient,
            apiVersions: getAvailableApiVersions(context, operationGroup.type, client.type),
            crossLanguageDefintionId: getCrossLanguageDefinitionId(context, operationGroup.type),
            decorators: [],
        });
    }
    return diagnostics.wrap(retval);
}
function getEndpointTypeFromSingleServer(context, client, server) {
    const diagnostics = createDiagnosticCollector();
    const templateArguments = [];
    const defaultOverridableEndpointType = {
        kind: "endpoint",
        serverUrl: "{endpoint}",
        templateArguments: [
            {
                name: "endpoint",
                isGeneratedName: true,
                description: "Service host",
                kind: "path",
                onClient: true,
                urlEncode: false,
                optional: false,
                serializedName: "endpoint",
                correspondingMethodParams: [],
                type: getTypeSpecBuiltInType(context, "string"),
                isApiVersionParam: false,
                apiVersions: context.__tspTypeToApiVersions.get(client.type),
                crossLanguageDefinitionId: `${getCrossLanguageDefinitionId(context, client.service)}.endpoint`,
                decorators: [],
            },
        ],
        decorators: [],
    };
    const types = [];
    if (!server)
        return diagnostics.wrap([defaultOverridableEndpointType]);
    for (const param of server.parameters.values()) {
        const sdkParam = diagnostics.pipe(getSdkHttpParameter(context, param, undefined, "path"));
        if (sdkParam.kind === "path") {
            templateArguments.push(sdkParam);
            sdkParam.onClient = true;
            if (param.defaultValue && "value" in param.defaultValue) {
                sdkParam.clientDefaultValue = param.defaultValue.value;
            }
            const apiVersionInfo = updateWithApiVersionInformation(context, param, client.type);
            sdkParam.isApiVersionParam = apiVersionInfo.isApiVersionParam;
            if (sdkParam.isApiVersionParam) {
                sdkParam.clientDefaultValue = apiVersionInfo.clientDefaultValue;
            }
            sdkParam.apiVersions = getAvailableApiVersions(context, param, client.type);
        }
        else {
            diagnostics.add(createDiagnostic({
                code: "server-param-not-path",
                target: param,
                format: {
                    templateArgumentName: sdkParam.name,
                    templateArgumentType: sdkParam.kind,
                },
            }));
        }
    }
    const isOverridable = templateArguments.length === 1 && server.url.startsWith("{") && server.url.endsWith("}");
    if (templateArguments.length === 0) {
        types.push(defaultOverridableEndpointType);
        types[0].templateArguments[0].clientDefaultValue = server.url;
    }
    else {
        types.push({
            kind: "endpoint",
            serverUrl: server.url,
            templateArguments,
            decorators: [],
        });
        if (!isOverridable) {
            types.push(defaultOverridableEndpointType);
        }
    }
    return diagnostics.wrap(types);
}
function getSdkEndpointParameter(context, client) {
    const diagnostics = createDiagnosticCollector();
    const servers = getServers(context.program, client.service);
    const types = [];
    if (servers === undefined) {
        // if there is no defined server url, we will return an overridable endpoint
        types.push(...diagnostics.pipe(getEndpointTypeFromSingleServer(context, client, undefined)));
    }
    else {
        for (const server of servers) {
            types.push(...diagnostics.pipe(getEndpointTypeFromSingleServer(context, client, server)));
        }
    }
    let type;
    if (types.length > 1) {
        type = {
            kind: "union",
            values: types,
            name: createGeneratedName(context, client.service, "Endpoint"),
            isGeneratedName: true,
            crossLanguageDefinitionId: getCrossLanguageDefinitionId(context, client.service),
            decorators: [],
        };
    }
    else {
        type = types[0];
    }
    return diagnostics.wrap({
        kind: "endpoint",
        type,
        name: "endpoint",
        isGeneratedName: true,
        description: "Service host",
        onClient: true,
        urlEncode: false,
        apiVersions: context.__tspTypeToApiVersions.get(client.type),
        optional: false,
        isApiVersionParam: false,
        crossLanguageDefinitionId: `${getCrossLanguageDefinitionId(context, client.service)}.endpoint`,
        decorators: [],
    });
}
function createSdkClientType(context, client) {
    const diagnostics = createDiagnosticCollector();
    const isClient = client.kind === "SdkClient";
    let name = "";
    if (isClient) {
        name = client.name;
    }
    else {
        name = getClientNameOverride(context, client.type) ?? client.type.name;
    }
    // NOTE: getSdkMethods recursively calls createSdkClientType
    const methods = diagnostics.pipe(getSdkMethods(context, client));
    const docWrapper = getDocHelper(context, client.type);
    const sdkClientType = {
        kind: "client",
        name,
        description: docWrapper.description,
        details: docWrapper.details,
        methods: methods,
        apiVersions: context.__tspTypeToApiVersions.get(client.type),
        nameSpace: getClientNamespaceStringHelper(context, client.service),
        initialization: diagnostics.pipe(getSdkInitializationType(context, client)), // MUST call this after getSdkMethods has been called
        // eslint-disable-next-line deprecation/deprecation
        arm: client.kind === "SdkClient" ? client.arm : false,
        decorators: diagnostics.pipe(getTypeDecorators(context, client.type)),
        // if it is client, the crossLanguageDefinitionId is the ${namespace}, if it is operation group, the crosslanguageDefinitionId is the %{namespace}.%{operationGroupName}
        crossLanguageDefinitionId: getCrossLanguageDefinitionId(context, client.type),
    };
    return diagnostics.wrap(sdkClientType);
}
function populateApiVersionInformation(context) {
    for (const client of listClients(context)) {
        let clientApiVersions = resolveVersions(context.program, client.service)
            .filter((x) => x.rootVersion)
            .map((x) => x.rootVersion.value);
        context.__tspTypeToApiVersions.set(client.type, filterApiVersionsWithDecorators(context, client.type, clientApiVersions));
        context.__namespaceToApiVersionClientDefaultValue.set(client.type, getClientDefaultApiVersion(context, client));
        for (const og of listOperationGroups(context, client)) {
            clientApiVersions = resolveVersions(context.program, og.service)
                .filter((x) => x.rootVersion)
                .map((x) => x.rootVersion.value);
            context.__tspTypeToApiVersions.set(og.type, filterApiVersionsWithDecorators(context, og.type, clientApiVersions));
            context.__namespaceToApiVersionClientDefaultValue.set(og.type, getClientDefaultApiVersion(context, og));
        }
    }
}
export function getSdkPackage(context) {
    const diagnostics = createDiagnosticCollector();
    populateApiVersionInformation(context);
    const modelsAndEnums = diagnostics.pipe(getAllModelsWithDiagnostics(context));
    const crossLanguagePackageId = diagnostics.pipe(getCrossLanguagePackageId(context));
    return diagnostics.wrap({
        name: getClientNamespaceString(context),
        rootNamespace: getClientNamespaceString(context),
        clients: listClients(context).map((c) => diagnostics.pipe(createSdkClientType(context, c))),
        models: modelsAndEnums.filter((x) => x.kind === "model"),
        enums: modelsAndEnums.filter((x) => x.kind === "enum"),
        crossLanguagePackageId,
    });
}
//# sourceMappingURL=package.js.map