import { Diagnostic, ModelProperty, Operation } from "@typespec/compiler";
import { HttpOperation, HttpOperationParameter } from "@typespec/http";
import { SdkHttpOperation, SdkHttpParameter, SdkMethodParameter, SdkModelPropertyType, SdkParameter, TCGCContext } from "./interfaces.js";
export declare function getSdkHttpOperation(context: TCGCContext, httpOperation: HttpOperation, methodParameters: SdkMethodParameter[]): [SdkHttpOperation, readonly Diagnostic[]];
export declare function isSdkHttpParameter(context: TCGCContext, type: ModelProperty): boolean;
/**
 * Generate TCGC Http parameter type, `httpParam` or `location` should be provided at least one
 * @param context
 * @param param TypeSpec param for the http parameter
 * @param operation
 * @param httpParam TypeSpec Http parameter type
 * @param location Location of the http parameter
 * @returns
 */
export declare function getSdkHttpParameter(context: TCGCContext, param: ModelProperty, operation?: Operation, httpParam?: HttpOperationParameter, location?: "path" | "query" | "header" | "body"): [SdkHttpParameter, readonly Diagnostic[]];
export declare function getCorrespondingMethodParams(context: TCGCContext, operation: Operation, methodParameters: SdkParameter[], serviceParam: SdkHttpParameter): [SdkModelPropertyType[], readonly Diagnostic[]];
//# sourceMappingURL=http.d.ts.map