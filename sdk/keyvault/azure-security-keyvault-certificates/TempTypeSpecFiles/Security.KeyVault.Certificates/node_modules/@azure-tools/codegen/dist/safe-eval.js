"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createSandbox = exports.safeEval = void 0;
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
const vm = __importStar(require("vm"));
/**
 * A sandboxed eval function
 *
 * @deprecated consumers should create a local sandbox to reuse. (@see createSandbox )
 *  */
exports.safeEval = createSandbox();
/**
 * Creates a reusable safe-eval sandbox to execute code in.
 */
function createSandbox() {
    const sandbox = vm.createContext({});
    return (code, context) => {
        const response = "SAFE_EVAL_" + Math.floor(Math.random() * 1000000);
        sandbox[response] = {};
        if (context) {
            for (const key of Object.keys(context)) {
                sandbox[key] = context[key];
            }
            vm.runInContext(`${response} = ${code}`, sandbox);
            for (const key of Object.keys(context)) {
                delete sandbox[key];
            }
        }
        else {
            vm.runInContext(`${response} = ${code}`, sandbox);
        }
        return sandbox[response];
    };
}
exports.createSandbox = createSandbox;
//# sourceMappingURL=safe-eval.js.map