"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.SchemaType = void 0;
/** possible schema types that indicate the type of schema.
 *
 * @note - this is essentially a discriminator for Schema
 */
var SchemaType;
(function (SchemaType) {
    /** a collection of items */
    SchemaType["Array"] = "array";
    /** an associative array (ie, dictionary, hashtable, etc) */
    SchemaType["Dictionary"] = "dictionary";
    /** a true or false value */
    SchemaType["Boolean"] = "boolean";
    /** an integer value */
    SchemaType["Integer"] = "integer";
    /** a number value */
    SchemaType["Number"] = "number";
    /** an object of some type */
    SchemaType["Object"] = "object";
    /** a string of characters  */
    SchemaType["String"] = "string";
    /** UnixTime */
    SchemaType["UnixTime"] = "unixtime";
    /** ByteArray -- an array of bytes */
    SchemaType["ByteArray"] = "byte-array";
    /* a binary stream */
    SchemaType["Binary"] = "binary";
    /** a single character */
    SchemaType["Char"] = "char";
    /** a Date */
    SchemaType["Date"] = "date";
    /** a Date */
    SchemaType["Time"] = "time";
    /** a DateTime */
    SchemaType["DateTime"] = "date-time";
    /** a Duration */
    SchemaType["Duration"] = "duration";
    /** a universally unique identifier  */
    SchemaType["Uuid"] = "uuid";
    /** an URI of some kind */
    SchemaType["Uri"] = "uri";
    /**
     * Represent a Azure Resource Manager Resource ID.
     */
    SchemaType["ArmId"] = "arm-id";
    /** a password or credential  */
    SchemaType["Credential"] = "credential";
    /** OData Query */
    SchemaType["ODataQuery"] = "odata-query";
    /** a type that can be anything */
    SchemaType["Any"] = "any";
    /**
     * A type that can be any object. Like Any but cannot be a primitive type or array
     */
    SchemaType["AnyObject"] = "any-object";
    /** a choice between one of several  values (ie, 'enum')
     *
     * @description - this is essentially can be thought of as an 'enum'
     * that is a choice between one of several strings
     */
    SchemaType["Choice"] = "choice";
    SchemaType["SealedChoice"] = "sealed-choice";
    SchemaType["Conditional"] = "conditional";
    SchemaType["SealedConditional"] = "sealed-conditional";
    SchemaType["Flag"] = "flag";
    /** a constant value */
    SchemaType["Constant"] = "constant";
    SchemaType["Or"] = "or";
    SchemaType["Xor"] = "xor";
    SchemaType["Not"] = "not";
    /** the type is not known.
     *
     * @description it's possible that we just may make this an error
     * in representation.
     */
    SchemaType["Unknown"] = "unknown";
    SchemaType["Group"] = "group";
})(SchemaType || (exports.SchemaType = SchemaType = {}));
//# sourceMappingURL=schema-type.js.map