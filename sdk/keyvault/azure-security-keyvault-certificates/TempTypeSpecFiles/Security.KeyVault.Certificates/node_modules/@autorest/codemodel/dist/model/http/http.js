"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpModel = exports.HttpBinaryResponse = exports.HttpResponse = exports.HttpHeader = exports.HttpMultipartRequest = exports.HttpBinaryRequest = exports.HttpWithBodyRequest = exports.HttpRequest = exports.HttpParameter = void 0;
const codegen_1 = require("@azure-tools/codegen");
const metadata_1 = require("../common/metadata");
class HttpParameter extends metadata_1.Protocol {
    constructor(location, objectInitializer) {
        super();
        this.in = location;
        this.apply(objectInitializer);
    }
}
exports.HttpParameter = HttpParameter;
class HttpRequest extends metadata_1.Protocol {
}
exports.HttpRequest = HttpRequest;
class HttpWithBodyRequest extends HttpRequest {
    constructor(objectInitializer) {
        super();
        this.apply(objectInitializer);
    }
}
exports.HttpWithBodyRequest = HttpWithBodyRequest;
class HttpBinaryRequest extends HttpWithBodyRequest {
}
exports.HttpBinaryRequest = HttpBinaryRequest;
class HttpMultipartRequest extends HttpWithBodyRequest {
    constructor() {
        super(...arguments);
        this.multipart = true;
    }
}
exports.HttpMultipartRequest = HttpMultipartRequest;
class HttpHeader extends codegen_1.Initializer {
    constructor(header, schema, objectInitializer) {
        super();
        this.header = header;
        this.schema = schema;
        this.apply(objectInitializer);
    }
}
exports.HttpHeader = HttpHeader;
class HttpResponse extends metadata_1.Protocol {
}
exports.HttpResponse = HttpResponse;
class HttpBinaryResponse extends HttpResponse {
}
exports.HttpBinaryResponse = HttpBinaryResponse;
class HttpModel extends metadata_1.Protocol {
}
exports.HttpModel = HttpModel;
//# sourceMappingURL=http.js.map