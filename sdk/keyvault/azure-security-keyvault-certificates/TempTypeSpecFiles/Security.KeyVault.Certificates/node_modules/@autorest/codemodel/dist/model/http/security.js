"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClientCredentialsFlow = exports.AuthorizationCodeOAuthFlow = exports.PasswordOAuthFlow = exports.OpenIdConnectSecurityScheme = exports.OAuthFlows = exports.OAuth2SecurityScheme = exports.NonBearerHTTPSecurityScheme = exports.ImplicitOAuthFlow = exports.BearerHTTPSecurityScheme = exports.APIKeySecurityScheme = exports.SecurityType = exports.Scheme = void 0;
const codegen_1 = require("@azure-tools/codegen");
var Scheme;
(function (Scheme) {
    Scheme["Bearer"] = "bearer";
})(Scheme || (exports.Scheme = Scheme = {}));
var SecurityType;
(function (SecurityType) {
    SecurityType["ApiKey"] = "apiKey";
    SecurityType["Http"] = "http";
    SecurityType["OAuth2"] = "oauth2";
    SecurityType["OpenIDConnect"] = "openIdConnect";
})(SecurityType || (exports.SecurityType = SecurityType = {}));
class APIKeySecurityScheme extends codegen_1.Initializer {
    constructor(name, inWhere, initializer) {
        super();
        this.name = name;
        this.in = inWhere;
        this.type = SecurityType.ApiKey;
        this.apply(initializer);
    }
}
exports.APIKeySecurityScheme = APIKeySecurityScheme;
class BearerHTTPSecurityScheme extends codegen_1.Initializer {
    constructor(initializer) {
        super();
        this.scheme = Scheme.Bearer;
        this.type = SecurityType.Http;
        this.apply(initializer);
    }
}
exports.BearerHTTPSecurityScheme = BearerHTTPSecurityScheme;
class ImplicitOAuthFlow extends codegen_1.Initializer {
    constructor(authorizationUrl, initializer) {
        super();
        this.authorizationUrl = authorizationUrl;
        this.scopes = {};
        this.apply(initializer);
    }
}
exports.ImplicitOAuthFlow = ImplicitOAuthFlow;
class NonBearerHTTPSecurityScheme extends codegen_1.Initializer {
    constructor(scheme, initializer) {
        super();
        this.scheme = scheme;
        this.apply(initializer);
        this.type = SecurityType.Http;
    }
}
exports.NonBearerHTTPSecurityScheme = NonBearerHTTPSecurityScheme;
class OAuth2SecurityScheme extends codegen_1.Initializer {
    constructor(flows, initializer) {
        super();
        this.flows = flows;
        this.type = SecurityType.OAuth2;
        this.apply(initializer);
    }
}
exports.OAuth2SecurityScheme = OAuth2SecurityScheme;
class OAuthFlows extends codegen_1.Initializer {
    constructor(initializer) {
        super();
        this.apply(initializer);
    }
}
exports.OAuthFlows = OAuthFlows;
class OpenIdConnectSecurityScheme extends codegen_1.Initializer {
    constructor(openIdConnectUrl, initializer) {
        super();
        this.openIdConnectUrl = openIdConnectUrl;
        this.type = SecurityType.OpenIDConnect;
        this.apply(initializer);
    }
}
exports.OpenIdConnectSecurityScheme = OpenIdConnectSecurityScheme;
class PasswordOAuthFlow extends codegen_1.Initializer {
    constructor(tokenUrl, initializer) {
        super();
        this.tokenUrl = tokenUrl;
        this.scopes = {};
        this.apply(initializer);
    }
}
exports.PasswordOAuthFlow = PasswordOAuthFlow;
class AuthorizationCodeOAuthFlow extends codegen_1.Initializer {
    constructor(authorizationUrl, tokenUrl, initializer) {
        super();
        this.authorizationUrl = authorizationUrl;
        this.scopes = {};
        this.apply(initializer);
    }
}
exports.AuthorizationCodeOAuthFlow = AuthorizationCodeOAuthFlow;
class ClientCredentialsFlow extends codegen_1.Initializer {
    constructor(tokenUrl, initializer) {
        super();
        this.tokenUrl = tokenUrl;
        this.scopes = {};
        this.apply(initializer);
    }
}
exports.ClientCredentialsFlow = ClientCredentialsFlow;
//# sourceMappingURL=security.js.map