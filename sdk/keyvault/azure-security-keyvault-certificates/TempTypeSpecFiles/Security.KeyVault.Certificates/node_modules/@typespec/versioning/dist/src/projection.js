import { VersioningStateKeys } from "./lib.js";
import { TimelineMoment, VersioningTimeline } from "./versioning-timeline.js";
import { resolveVersions } from "./versioning.js";
/**
 * @internal
 */
export function indexTimeline(program, timeline, projectingMoment) {
    const versionKey = program.checker.createType({
        kind: "Object",
        properties: {},
    });
    program
        .stateMap(VersioningStateKeys.versionIndex)
        .set(versionKey, { timeline, projectingMoment });
    return versionKey;
}
export function buildVersionProjections(program, rootNs) {
    const resolutions = resolveVersions(program, rootNs);
    const timeline = new VersioningTimeline(program, resolutions.map((x) => x.versions));
    return resolutions.map((resolution) => {
        if (resolution.versions.size === 0) {
            return { version: undefined, projections: [] };
        }
        else {
            const versionKey = indexTimeline(program, timeline, timeline.get(resolution.versions.values().next().value));
            return {
                version: resolution.rootVersion?.value,
                projections: [
                    {
                        projectionName: "v",
                        arguments: [versionKey],
                    },
                ],
            };
        }
    });
}
//# sourceMappingURL=projection.js.map