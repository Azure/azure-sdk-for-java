import type { DecoratorContext, Enum, EnumMember, Interface, Model, ModelProperty, Namespace, Operation, Program, Scalar, Type, Union, UnionVariant } from "@typespec/compiler";
import type { AddedDecorator, MadeOptionalDecorator, MadeRequiredDecorator, RenamedFromDecorator, ReturnTypeChangedFromDecorator, TypeChangedFromDecorator, VersionedDecorator } from "../generated-defs/TypeSpec.Versioning.js";
import type { Version } from "./types.js";
export declare const namespace = "TypeSpec.Versioning";
export declare const $added: AddedDecorator;
export declare function $removed(context: DecoratorContext, t: Model | ModelProperty | Operation | Enum | EnumMember | Union | UnionVariant | Scalar | Interface, v: EnumMember): void;
/**
 * Returns the mapping of versions to old type values, if applicable
 * @param p TypeSpec program
 * @param t type to query
 * @returns Map of versions to old types, if any
 */
export declare function getTypeChangedFrom(p: Program, t: Type): Map<Version, Type> | undefined;
export declare const $typeChangedFrom: TypeChangedFromDecorator;
/**
 * Returns the mapping of versions to old return type values, if applicable
 * @param p TypeSpec program
 * @param t type to query
 * @returns Map of versions to old types, if any
 */
export declare function getReturnTypeChangedFrom(p: Program, t: Type): Map<Version, Type> | undefined;
export declare const $returnTypeChangedFrom: ReturnTypeChangedFromDecorator;
interface RenamedFrom {
    version: Version;
    oldName: string;
}
export declare const $renamedFrom: RenamedFromDecorator;
export declare const $madeOptional: MadeOptionalDecorator;
export declare const $madeRequired: MadeRequiredDecorator;
/**
 * @returns version when the given type was made required if applicable.
 */
export declare function getMadeRequiredOn(p: Program, t: Type): Version | undefined;
/**
 * @returns the array of RenamedFrom metadata if applicable.
 */
export declare function getRenamedFrom(p: Program, t: Type): Array<RenamedFrom> | undefined;
/**
 * @returns the list of versions for which this decorator has been applied
 */
export declare function getRenamedFromVersions(p: Program, t: Type): Version[] | undefined;
export declare function getAddedOnVersions(p: Program, t: Type): Version[] | undefined;
export declare function getRemovedOnVersions(p: Program, t: Type): Version[] | undefined;
/**
 * @returns version when the given type was made optional if applicable.
 */
export declare function getMadeOptionalOn(p: Program, t: Type): Version | undefined;
export declare class VersionMap {
    private map;
    constructor(namespace: Namespace, enumType: Enum);
    getVersionForEnumMember(member: EnumMember): Version | undefined;
    getVersions(): Version[];
    get size(): number;
}
export declare const $versioned: VersionedDecorator;
/**
 * Get the version map of the namespace.
 */
export declare function getVersion(program: Program, namespace: Namespace): VersionMap | undefined;
export declare function findVersionedNamespace(program: Program, namespace: Namespace): Namespace | undefined;
export declare function $useDependency(context: DecoratorContext, target: EnumMember | Namespace, ...versionRecords: EnumMember[]): void;
export declare function getUseDependencies(program: Program, target: Namespace | Enum, searchEnum?: boolean): Map<Namespace, Map<Version, Version> | Version> | undefined;
export {};
//# sourceMappingURL=decorators.d.ts.map