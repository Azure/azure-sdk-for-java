/** TypeSpec Xml Library Definition */
export declare const $lib: import("@typespec/compiler").TypeSpecLibrary<{
    "ns-enum-not-declaration": {
        readonly default: "Enum member used as namespace must be part of an enum marked with @nsDeclaration.";
    };
    "invalid-ns-declaration-member": {
        readonly default: import("@typespec/compiler").CallableMessage<["name"]>;
    };
    "ns-missing-prefix": {
        readonly default: "When using a string namespace you must provide a prefix as the 2nd argument.";
    };
    "prefix-not-allowed": {
        readonly default: "@ns decorator cannot have the prefix parameter set when using an enum member.";
    };
    "ns-not-uri": {
        readonly default: "Namespace namespace is not a valid URI.";
    };
}, Record<string, any>, "attribute" | "unwrapped" | "ns" | "nsDeclaration">;
export declare const reportDiagnostic: <C extends "ns-enum-not-declaration" | "invalid-ns-declaration-member" | "ns-missing-prefix" | "prefix-not-allowed" | "ns-not-uri", M extends keyof {
    "ns-enum-not-declaration": {
        readonly default: "Enum member used as namespace must be part of an enum marked with @nsDeclaration.";
    };
    "invalid-ns-declaration-member": {
        readonly default: import("@typespec/compiler").CallableMessage<["name"]>;
    };
    "ns-missing-prefix": {
        readonly default: "When using a string namespace you must provide a prefix as the 2nd argument.";
    };
    "prefix-not-allowed": {
        readonly default: "@ns decorator cannot have the prefix parameter set when using an enum member.";
    };
    "ns-not-uri": {
        readonly default: "Namespace namespace is not a valid URI.";
    };
}[C]>(program: import("@typespec/compiler").Program, diag: import("@typespec/compiler").DiagnosticReport<{
    "ns-enum-not-declaration": {
        readonly default: "Enum member used as namespace must be part of an enum marked with @nsDeclaration.";
    };
    "invalid-ns-declaration-member": {
        readonly default: import("@typespec/compiler").CallableMessage<["name"]>;
    };
    "ns-missing-prefix": {
        readonly default: "When using a string namespace you must provide a prefix as the 2nd argument.";
    };
    "prefix-not-allowed": {
        readonly default: "@ns decorator cannot have the prefix parameter set when using an enum member.";
    };
    "ns-not-uri": {
        readonly default: "Namespace namespace is not a valid URI.";
    };
}, C, M>) => void, createStateSymbol: (name: string) => symbol, XmlStateKeys: Record<"attribute" | "unwrapped" | "ns" | "nsDeclaration", symbol>;
//# sourceMappingURL=lib.d.ts.map