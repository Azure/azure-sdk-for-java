import { SpawnSyncOptionsWithStringEncoding } from "child_process";
import { Diagnostic } from "../types.js";
import { CliCompilerHost } from "./types.js";
export interface RunOptions extends Partial<SpawnSyncOptionsWithStringEncoding> {
    readonly debug?: boolean;
    readonly extraEnv?: NodeJS.ProcessEnv;
    readonly allowNotFound?: boolean;
    readonly allowedExitCodes?: number[];
}
export interface CliHostArgs {
    pretty?: boolean;
    debug?: boolean;
}
export declare function withCliHost<T extends CliHostArgs>(fn: (host: CliCompilerHost, args: T) => void | Promise<void>): (args: T) => void | Promise<void>;
/**
 * Resolve Cli host automatically using cli args and handle diagnostics returned by the action.
 */
export declare function withCliHostAndDiagnostics<T extends CliHostArgs>(fn: (host: CliCompilerHost, args: T) => readonly Diagnostic[] | Promise<readonly Diagnostic[]>): (args: T) => void | Promise<void>;
export declare function createCLICompilerHost(options: CliHostArgs): CliCompilerHost;
export declare function run(host: CliCompilerHost, command: string, commandArgs: string[], options?: RunOptions): import("child_process").SpawnSyncReturns<string>;
export declare function logDiagnosticCount(diagnostics: readonly Diagnostic[]): void;
export declare function logInternalCompilerError(error: unknown): void;
/**
 * Handle an internal compiler error.
 *
 * NOTE: An expected error, like one thrown for bad input, shouldn't reach
 * here, but be handled somewhere else. If we reach here, it should be
 * considered a bug and therefore we should not suppress the stack trace as
 * that risks losing it in the case of a bug that does not repro easily.
 *
 * @param error error thrown
 */
export declare function handleInternalCompilerError(error: unknown): void;
//# sourceMappingURL=utils.d.ts.map