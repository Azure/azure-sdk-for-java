import { isArray } from "../utils/misc.js";
export async function resolveCodeFix(codeFix) {
    const context = createCodeFixContext();
    const values = await codeFix.fix(context);
    const textEdit = values === undefined ? [] : isArray(values) ? values : [values];
    return textEdit;
}
export async function applyCodeFix(host, codeFix) {
    const edits = await resolveCodeFix(codeFix);
    await applyCodeFixEdits(host, edits);
}
async function applyCodeFixEdits(host, edits) {
    const perFile = new Map();
    for (const edit of edits) {
        const file = edit.file;
        if (!perFile.has(file.path)) {
            perFile.set(file.path, [file, []]);
        }
        perFile.get(file.path)[1].push(edit);
    }
    for (const [file, edits] of perFile.values()) {
        const newContent = applyCodeFixEditsOnText(file.text, edits);
        await host.writeFile(file.path, newContent);
    }
}
function applyCodeFixEditsOnText(content, edits) {
    const segments = [];
    let last = 0;
    for (const edit of edits) {
        switch (edit.kind) {
            case "insert-text":
                segments.push(content.slice(last, edit.pos));
                segments.push(edit.text);
                last = edit.pos;
                break;
            case "replace-text":
                segments.push(content.slice(last, edit.pos));
                segments.push(edit.text);
                last = edit.end;
        }
    }
    segments.push(content.slice(last));
    return segments.join("");
}
function createCodeFixContext() {
    return {
        prependText,
        appendText,
        replaceText,
    };
    function prependText(node, text) {
        return {
            kind: "insert-text",
            pos: node.pos,
            text,
            file: node.file,
        };
    }
    function appendText(node, text) {
        return {
            kind: "insert-text",
            pos: "end" in node ? node.end : node.pos,
            text,
            file: node.file,
        };
    }
    function replaceText(node, text) {
        return {
            kind: "replace-text",
            pos: node.pos,
            end: node.end,
            file: node.file,
            text,
        };
    }
}
//# sourceMappingURL=code-fixes.js.map