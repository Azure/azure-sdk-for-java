export function scopeChain(scope) {
    const chain = [];
    while (scope) {
        chain.unshift(scope);
        scope = scope.parentScope;
    }
    return chain;
}
/**
 * Resolve relative scopes between the current scope and the target declaration.
 * @param target The target declaration
 * @param currentScope Current scope
 * @returns
 */
export function resolveDeclarationReferenceScope(target, currentScope) {
    const targetScope = target.scope;
    const targetChain = scopeChain(targetScope);
    const currentChain = scopeChain(currentScope);
    let diffStart = 0;
    while (targetChain[diffStart] &&
        currentChain[diffStart] &&
        targetChain[diffStart] === currentChain[diffStart]) {
        diffStart++;
    }
    const pathUp = currentChain.slice(diffStart);
    const pathDown = targetChain.slice(diffStart);
    const commonScope = targetChain[diffStart - 1] ?? null;
    return { pathUp, pathDown, commonScope };
}
//# sourceMappingURL=ref-scope.js.map