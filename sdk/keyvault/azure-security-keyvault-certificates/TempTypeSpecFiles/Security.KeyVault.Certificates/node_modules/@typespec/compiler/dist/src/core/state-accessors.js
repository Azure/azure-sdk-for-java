export class StateMap extends Map {
}
export class StateSet extends Map {
}
class StateMapView {
    state;
    projector;
    constructor(state, projector) {
        this.state = state;
        this.projector = projector;
    }
    has(t) {
        return this.dispatch(t)?.has(t) ?? false;
    }
    set(t, v) {
        this.dispatch(t).set(t, v);
        return this;
    }
    get(t) {
        return this.dispatch(t).get(t);
    }
    delete(t) {
        return this.dispatch(t).delete(t);
    }
    forEach(cb, thisArg) {
        this.dispatch().forEach(cb, thisArg);
        return this;
    }
    get size() {
        return this.dispatch().size;
    }
    clear() {
        return this.dispatch().clear();
    }
    entries() {
        return this.dispatch().entries();
    }
    values() {
        return this.dispatch().values();
    }
    keys() {
        return this.dispatch().keys();
    }
    [Symbol.iterator]() {
        return this.entries();
    }
    [Symbol.toStringTag] = "StateMap";
    dispatch(keyType) {
        const key = keyType ? keyType.projector : this.projector;
        if (!this.state.has(key)) {
            this.state.set(key, new Map());
        }
        return this.state.get(key);
    }
}
class StateSetView {
    state;
    projector;
    constructor(state, projector) {
        this.state = state;
        this.projector = projector;
    }
    has(t) {
        return this.dispatch(t)?.has(t) ?? false;
    }
    add(t) {
        this.dispatch(t).add(t);
        return this;
    }
    delete(t) {
        return this.dispatch(t).delete(t);
    }
    forEach(cb, thisArg) {
        this.dispatch().forEach(cb, thisArg);
        return this;
    }
    get size() {
        return this.dispatch().size;
    }
    clear() {
        return this.dispatch().clear();
    }
    values() {
        return this.dispatch().values();
    }
    keys() {
        return this.dispatch().keys();
    }
    entries() {
        return this.dispatch().entries();
    }
    [Symbol.iterator]() {
        return this.values();
    }
    [Symbol.toStringTag] = "StateSet";
    dispatch(keyType) {
        const key = keyType ? keyType.projector : this.projector;
        if (!this.state.has(key)) {
            this.state.set(key, new Set());
        }
        return this.state.get(key);
    }
}
export function createStateAccessors(stateMaps, stateSets, projector) {
    function stateMap(key) {
        let m = stateMaps.get(key);
        if (!m) {
            m = new StateMap();
            stateMaps.set(key, m);
        }
        return new StateMapView(m, projector);
    }
    function stateSet(key) {
        let s = stateSets.get(key);
        if (!s) {
            s = new StateSet();
            stateSets.set(key, s);
        }
        return new StateSetView(s, projector);
    }
    return { stateMap, stateSet };
}
//# sourceMappingURL=state-accessors.js.map