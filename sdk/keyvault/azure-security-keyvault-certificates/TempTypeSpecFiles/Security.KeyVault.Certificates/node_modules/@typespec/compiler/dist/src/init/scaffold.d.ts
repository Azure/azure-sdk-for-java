import { CompilerHost } from "../core/types.js";
import { InitTemplate, InitTemplateLibrary, InitTemplateLibrarySpec } from "./init-template.js";
export interface ScaffoldingConfig {
    /** Template used to resolve that config */
    template: InitTemplate;
    /**
     * Path where this template was loaded from.
     */
    baseUri: string;
    /**
     * Directory full path where the project should be initialized.
     */
    directory: string;
    /**
     * folder name where the project should be initialized.
     */
    folderName: string;
    /**
     * Name of the project.
     */
    name: string;
    /**
     * List of libraries to include
     */
    libraries: InitTemplateLibrarySpec[];
    /**
     * Whether to generate a .gitignore file.
     */
    includeGitignore: boolean;
    /**
     * Custom parameters provided in the tempalates.
     */
    parameters: Record<string, any>;
}
export declare function normalizeLibrary(library: InitTemplateLibrary): InitTemplateLibrarySpec;
export declare function makeScaffoldingConfig(template: InitTemplate, config: Partial<ScaffoldingConfig>): ScaffoldingConfig;
/**
 * Scaffold a new TypeSpec project using the given scaffolding config.
 * @param host
 * @param config
 */
export declare function scaffoldNewProject(host: CompilerHost, config: ScaffoldingConfig): Promise<void>;
//# sourceMappingURL=scaffold.d.ts.map