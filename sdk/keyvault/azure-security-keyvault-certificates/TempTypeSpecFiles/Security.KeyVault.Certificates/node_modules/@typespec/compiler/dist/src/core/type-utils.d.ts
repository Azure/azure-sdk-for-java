import type { Program } from "./program.js";
import { ArrayModelType, Entity, Enum, ErrorType, Interface, Model, Namespace, NeverType, Node, NullType, Operation, Sym, TemplateDeclarationNode, TemplatedType, Type, TypeMapper, UnknownType, Value, VoidType } from "./types.js";
export declare function isErrorType(type: Entity): type is ErrorType;
export declare function isVoidType(type: Entity): type is VoidType;
export declare function isNeverType(type: Entity): type is NeverType;
export declare function isUnknownType(type: Entity): type is UnknownType;
export declare function isNullType(type: Entity): type is NullType;
export declare function isType(entity: Entity): entity is Type;
export declare function isValue(entity: Entity): entity is Value;
/**
 * @param type Model type
 */
export declare function isArrayModelType(program: Program, type: Model): type is ArrayModelType;
/**
 * Check if a model is an array type.
 * @param type Model type
 */
export declare function isRecordModelType(program: Program, type: Model): type is ArrayModelType;
/**
 * Lookup and find the node
 * @param node Node
 * @returns Template Parent node if applicable
 */
export declare function getParentTemplateNode(node: Node): (Node & TemplateDeclarationNode) | undefined;
/**
 * Check the given type is a finished template instance.
 */
export declare function isTemplateInstance(type: Type): type is TemplatedType & {
    templateArguments: Type[];
    templateMapper: TypeMapper;
};
/**
 * Check if the type is a declared type. This include:
 * - non templated type
 * - template declaration
 */
export declare function isDeclaredType(type: Type): boolean;
/**
 * Resolve if the type is a template type declaration(Non initialized template type).
 */
export declare function isTemplateDeclaration(type: TemplatedType): type is TemplatedType & {
    node: TemplateDeclarationNode;
};
/**
 * Resolve if the type was created from a template type or is a template type declaration.
 */
export declare function isTemplateDeclarationOrInstance(type: TemplatedType): boolean;
/**
 * Check if the given namespace is the global namespace
 * @param program Program
 * @param namespace Namespace
 * @returns {boolean}
 */
export declare function isGlobalNamespace(program: Program, namespace: Namespace): namespace is Namespace & {
    name: "";
    namespace: undefined;
};
/**
 * Check if the given type is declared in the specified namespace or, optionally, its child namespaces.
 * @param type Type
 * @param namespace Namespace
 * @returns {boolean}
 */
export declare function isDeclaredInNamespace(type: Model | Operation | Interface | Namespace | Enum, namespace: Namespace, options?: {
    recursive?: boolean;
}): boolean;
export declare function getFullyQualifiedSymbolName(sym: Sym | undefined, options?: {
    useGlobalPrefixAtTopLevel?: boolean;
}): string;
//# sourceMappingURL=type-utils.d.ts.map