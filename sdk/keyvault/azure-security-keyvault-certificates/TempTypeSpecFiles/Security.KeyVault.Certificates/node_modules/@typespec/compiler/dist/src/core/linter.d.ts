import { DiagnosticCollector } from "./diagnostics.js";
import type { Program } from "./program.js";
import { Diagnostic, DiagnosticMessages, LibraryInstance, LinterDefinition, LinterResolvedDefinition, LinterRule, LinterRuleContext, LinterRuleSet } from "./types.js";
export interface Linter {
    extendRuleSet(ruleSet: LinterRuleSet): Promise<readonly Diagnostic[]>;
    lint(): readonly Diagnostic[];
}
/**
 * Resolve the linter definition
 */
export declare function resolveLinterDefinition(libName: string, linter: LinterDefinition): LinterResolvedDefinition;
export declare function createLinter(program: Program, loadLibrary: (name: string) => Promise<LibraryInstance | undefined>): Linter;
export declare function createLinterRuleContext<N extends string, DM extends DiagnosticMessages>(program: Program, rule: LinterRule<N, DM>, diagnosticCollector: DiagnosticCollector): LinterRuleContext<DM>;
//# sourceMappingURL=linter.d.ts.map