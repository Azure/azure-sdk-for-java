import { Diagnostic } from "./types.js";
export interface TypeSpecFormatOptions {
    exclude?: string[];
    debug?: boolean;
}
export interface TypeSpecFormatResult {
    /**
     * The list of files which were formatted successfully, the paths of which are either relative or absolute based on the original file path patterns.
     */
    formattedFiles: string[];
}
/**
 * Format all the TypeSpec files.
 * @param patterns List of wildcard pattern searching for TypeSpec files.
 * @returns list of files which failed to format.
 */
export declare function formatTypeSpecFiles(patterns: string[], { exclude, debug }: TypeSpecFormatOptions): Promise<[TypeSpecFormatResult, readonly Diagnostic[]]>;
/**
 * Find all the unformatted files.
 * @returns list of files not formatted.
 */
export declare function findUnformattedTypeSpecFiles(patterns: string[], { exclude, debug }: TypeSpecFormatOptions): Promise<string[]>;
export declare function formatTypeSpecFile(filename: string): Promise<void>;
/**
 * Check the given TypeSpec file is correctly formatted.
 * @returns true if code is formatted correctly.
 */
export declare function checkFormatTypeSpecFile(filename: string): Promise<boolean>;
//# sourceMappingURL=formatter-fs.d.ts.map