import { isTemplateDeclaration, isTemplateDeclarationOrInstance } from "../type-utils.js";
/**
 * List operations in the given container. Will list operation recursively by default(Check subnamespaces.)
 * @param container Container.
 * @param options Options.
 */
export function listOperationsIn(container, options = {}) {
    const operations = [];
    function addOperations(current) {
        if (current.kind === "Interface" && isTemplateDeclaration(current)) {
            // Skip template interface operations
            return;
        }
        for (const op of current.operations.values()) {
            // Skip templated operations
            if (!isTemplateDeclarationOrInstance(op)) {
                operations.push(op);
            }
        }
        if (current.kind === "Namespace") {
            const recursive = options.recursive ?? true;
            const children = [
                ...(recursive ? current.namespaces.values() : []),
                ...current.interfaces.values(),
            ];
            for (const child of children) {
                addOperations(child);
            }
        }
    }
    addOperations(container);
    return operations;
}
//# sourceMappingURL=operation-utils.js.map