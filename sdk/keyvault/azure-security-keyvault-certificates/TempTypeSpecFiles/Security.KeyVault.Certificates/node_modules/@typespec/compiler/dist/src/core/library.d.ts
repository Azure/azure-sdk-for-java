import { DiagnosticMessages, LinterDefinition, LinterRuleDefinition, PackageFlags, TypeSpecLibrary, TypeSpecLibraryDef } from "./types.js";
export { paramMessage } from "./param-message.js";
/** @deprecated use createTypeSpecLibrary */
export declare const createCadlLibrary: typeof createTypeSpecLibrary;
/**
 * Create a new TypeSpec library definition.
 * @param lib Library definition.
 * @returns Library with utility functions.
 *
 *
 * @tutorial Create the lib object with `as const` to get the full typing.
 *
 * @example
 * const libDef = {
 *   name: "myLib",
 *   diagnostics: {
 *    "my-code": {serverity: "error", messages: {default: "Foo bar"}}
 *   },
 * } as const;
 *
 * const lib = createTypeSpecLibrary(libDef);
 */
export declare function createTypeSpecLibrary<const T extends {
    [code: string]: DiagnosticMessages;
}, const E extends Record<string, any>, const State extends string = never>(lib: Readonly<TypeSpecLibraryDef<T, E, State>>): TypeSpecLibrary<T, E, State>;
export declare function definePackageFlags(flags: PackageFlags): PackageFlags;
export declare function defineLinter(def: LinterDefinition): LinterDefinition;
/** Create a new linter rule. */
export declare function createLinterRule<const N extends string, const T extends DiagnosticMessages>(definition: LinterRuleDefinition<N, T>): LinterRuleDefinition<N, T>;
/** @deprecated use setTypeSpecNamespace */
export declare const setCadlNamespace: typeof setTypeSpecNamespace;
/**
 * Set the TypeSpec namespace for that function.
 * @param namespace Namespace string (e.g. "Foo.Bar")
 * @param functions Functions
 */
export declare function setTypeSpecNamespace(namespace: string, ...functions: Array<(...args: any[]) => any>): void;
//# sourceMappingURL=library.d.ts.map