import type { JSONSchemaType } from "ajv";
import { TypeSpecRawConfig } from "../config/types.js";
export interface InitTemplateFile {
    path: string;
    destination: string;
    skipGeneration?: boolean;
}
export interface InitTemplateInput {
    description: string;
    type: "text";
    initialValue: any;
}
export interface InitTemplate {
    /**
     * Name of the template
     */
    title: string;
    /**
     * Description for the template.
     */
    description: string;
    /** Minimum Compiler Support Version */
    compilerVersion?: string;
    /**
     * List of libraries to include
     */
    libraries?: InitTemplateLibrary[];
    /**
     * Config
     */
    config?: TypeSpecRawConfig;
    /**
     * Custom inputs to prompt to the user
     */
    inputs?: Record<string, InitTemplateInput>;
    /**
     * A flag to indicate not adding @typespec/compiler package to package.json.
     * Other libraries may already brought in the dependency such as Azure template.
     */
    skipCompilerPackage?: boolean;
    /**
     * List of files to copy.
     */
    files?: InitTemplateFile[];
}
/**
 * Describes a library dependency that will be added to the generated project.
 */
export type InitTemplateLibrary = string | InitTemplateLibrarySpec;
/**
 * Describes a library dependency that will be added to the generated project.
 */
export interface InitTemplateLibrarySpec {
    /**
     * The npm package name of the library.
     */
    name: string;
    /**
     *  The npm-style version string as it would appear in package.json.
     */
    version?: string;
}
export declare const InitTemplateLibrarySpecSchema: JSONSchemaType<InitTemplateLibrarySpec>;
export declare const InitTemplateSchema: JSONSchemaType<InitTemplate>;
//# sourceMappingURL=init-template.d.ts.map