import { compilerAssert } from "../../core/index.js";
import { Placeholder } from "../placeholder.js";
import { EmitterResult } from "../types.js";
const placeholderSym = Symbol("placeholder");
// eslint-disable-next-line @typescript-eslint/no-unsafe-declaration-merging
export class ObjectBuilder {
    [placeholderSym];
    constructor(initializer = {}) {
        const copyProperties = (source) => {
            for (const [key, value] of Object.entries(source)) {
                this.set(key, value);
            }
        };
        const registerPlaceholder = (placeholder) => {
            placeholder.onValue(copyProperties);
        };
        if (initializer instanceof ObjectBuilder) {
            if (initializer[placeholderSym]) {
                this[placeholderSym] = initializer[placeholderSym];
                registerPlaceholder(initializer[placeholderSym]);
            }
            copyProperties(initializer);
        }
        else if (initializer instanceof Placeholder) {
            this[placeholderSym] = initializer;
            registerPlaceholder(initializer);
        }
        else {
            copyProperties(initializer);
        }
    }
    set(key, v) {
        let value = v;
        if (v instanceof EmitterResult) {
            compilerAssert(v.kind !== "circular", "Can't set a circular emit result.");
            if (v.kind === "none") {
                this[key] = undefined;
                return;
            }
            else {
                value = v.value;
            }
        }
        if (value instanceof Placeholder) {
            value.onValue((v) => {
                this[key] = v;
            });
        }
        this[key] = value;
    }
}
//# sourceMappingURL=object-builder.js.map