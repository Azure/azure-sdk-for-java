import { codeFrameColumns } from "@babel/code-frame";
import pc from "picocolors";
export function createConsoleSink(options = {}) {
    function log(data) {
        // eslint-disable-next-line no-console
        console.log(formatLog(data, options));
    }
    return {
        log,
    };
}
export function formatLog(log, options) {
    const code = color(options, log.code ? ` ${log.code}` : "", pc.gray);
    const level = formatLevel(options, log.level);
    const content = `${level}${code}: ${log.message}`;
    const location = log.sourceLocation;
    if (location?.file) {
        const formattedLocation = formatSourceLocation(options, location);
        const sourcePreview = formatSourcePreview(options, location);
        return `${formattedLocation} - ${content}${sourcePreview}`;
    }
    else {
        return content;
    }
}
function color(options, text, color) {
    return options.pretty ? color(text) : text;
}
function formatLevel(options, level) {
    switch (level) {
        case "error":
            return color(options, "error", pc.red);
        case "warning":
            return color(options, "warning", pc.yellow);
        case "trace":
            return color(options, "trace", pc.green);
    }
}
function formatSourceLocation(options, location) {
    const postition = getLineAndColumn(location);
    const path = color(options, location.file.path, pc.cyan);
    const line = color(options, postition.start.line.toString(), pc.yellow);
    const column = color(options, postition.start.column.toString(), pc.yellow);
    return `${path}:${line}:${column}`;
}
/**
 * Create a preview of where the log location is.
 *
 * ----------------------------------------------
 *   4 |
 *   5 | @route("/alpha/{id}")
 * > 6 | op doAlpha(@path id: string): abc;
 *     |                               ^
 *   7 |
 *   8 | @route("/beta/{id}")
 *   9 | op doBeta(@path id: string): string;
 */
function formatSourcePreview(options, location) {
    if (!options.pretty || location.isSynthetic) {
        return "";
    }
    const postion = getLineAndColumn(location);
    const result = codeFrameColumns(location.file.text, postion, {
        linesAbove: 0,
        linesBelow: 0,
    });
    return `\n${result}`;
}
function getLineAndColumn(location) {
    const pos = location.file.getLineAndCharacterOfPosition(location.pos ?? 0);
    const end = location.end ? location.file.getLineAndCharacterOfPosition(location.end) : undefined;
    const result = {
        start: { line: pos.line + 1, column: pos.character + 1 },
    };
    if (end) {
        result.end = { line: end.line + 1, column: end.character + 1 };
    }
    return result;
}
//# sourceMappingURL=console-sink.js.map