// Contains all intrinsic data setter or getter
// Anything that the TypeSpec check might should be here.
function createStateSymbol(name) {
    return Symbol.for(`TypeSpec.${name}`);
}
const stateKeys = {
    minValues: createStateSymbol("minValues"),
    maxValues: createStateSymbol("maxValues"),
    minValueExclusive: createStateSymbol("minValueExclusive"),
    maxValueExclusive: createStateSymbol("maxValueExclusive"),
    minLength: createStateSymbol("minLengthValues"),
    maxLength: createStateSymbol("maxLengthValues"),
    minItems: createStateSymbol("minItems"),
    maxItems: createStateSymbol("maxItems"),
    docs: createStateSymbol("docs"),
    returnDocs: createStateSymbol("returnsDocs"),
    errorsDocs: createStateSymbol("errorDocs"),
    discriminator: createStateSymbol("discriminator"),
};
// #region @minValue
export function setMinValue(program, target, value) {
    program.stateMap(stateKeys.minValues).set(target, value);
}
export function getMinValueAsNumeric(program, target) {
    return program.stateMap(stateKeys.minValues).get(target);
}
export function getMinValue(program, target) {
    return getMinValueAsNumeric(program, target)?.asNumber() ?? undefined;
}
// #endregion @minValue
// #region @maxValue
export function setMaxValue(program, target, value) {
    program.stateMap(stateKeys.maxValues).set(target, value);
}
export function getMaxValueAsNumeric(program, target) {
    return program.stateMap(stateKeys.maxValues).get(target);
}
export function getMaxValue(program, target) {
    return getMaxValueAsNumeric(program, target)?.asNumber() ?? undefined;
}
// #endregion @maxValue
// #region @minValueExclusive
export function setMinValueExclusive(program, target, value) {
    program.stateMap(stateKeys.minValueExclusive).set(target, value);
}
export function getMinValueExclusiveAsNumeric(program, target) {
    return program.stateMap(stateKeys.minValueExclusive).get(target);
}
export function getMinValueExclusive(program, target) {
    return getMinValueExclusiveAsNumeric(program, target)?.asNumber() ?? undefined;
}
// #endregion @minValueExclusive
// #region @maxValueExclusive
export function setMaxValueExclusive(program, target, value) {
    program.stateMap(stateKeys.maxValueExclusive).set(target, value);
}
export function getMaxValueExclusiveAsNumeric(program, target) {
    return program.stateMap(stateKeys.maxValueExclusive).get(target);
}
export function getMaxValueExclusive(program, target) {
    return getMaxValueExclusiveAsNumeric(program, target)?.asNumber() ?? undefined;
}
// #endregion @maxValueExclusive
// #region @minLength
export function setMinLength(program, target, value) {
    program.stateMap(stateKeys.minLength).set(target, value);
}
/**
 * Get the minimum length of a string type as a {@link Numeric} value.
 * @param program Current program
 * @param target Type with the `@minLength` decorator
 */
export function getMinLengthAsNumeric(program, target) {
    return program.stateMap(stateKeys.minLength).get(target);
}
export function getMinLength(program, target) {
    return getMinLengthAsNumeric(program, target)?.asNumber() ?? undefined;
}
// #endregion @minLength
// #region @maxLength
export function setMaxLength(program, target, value) {
    program.stateMap(stateKeys.maxLength).set(target, value);
}
/**
 * Get the minimum length of a string type as a {@link Numeric} value.
 * @param program Current program
 * @param target Type with the `@maxLength` decorator
 */
export function getMaxLengthAsNumeric(program, target) {
    return program.stateMap(stateKeys.maxLength).get(target);
}
export function getMaxLength(program, target) {
    return getMaxLengthAsNumeric(program, target)?.asNumber() ?? undefined;
}
// #endregion @maxLength
// #region @minItems
export function setMinItems(program, target, value) {
    program.stateMap(stateKeys.minItems).set(target, value);
}
export function getMinItemsAsNumeric(program, target) {
    return program.stateMap(stateKeys.minItems).get(target);
}
export function getMinItems(program, target) {
    return getMinItemsAsNumeric(program, target)?.asNumber() ?? undefined;
}
// #endregion @minItems
// #region @minItems
export function setMaxItems(program, target, value) {
    program.stateMap(stateKeys.maxItems).set(target, value);
}
export function getMaxItemsAsNumeric(program, target) {
    return program.stateMap(stateKeys.maxItems).get(target);
}
export function getMaxItems(program, target) {
    return getMaxItemsAsNumeric(program, target)?.asNumber() ?? undefined;
}
/** @internal */
export function setDocData(program, target, key, data) {
    program.stateMap(getDocKey(key)).set(target, data);
}
function getDocKey(target) {
    switch (target) {
        case "self":
            return stateKeys.docs;
        case "returns":
            return stateKeys.returnDocs;
        case "errors":
            return stateKeys.errorsDocs;
    }
}
/**
 * @internal
 * Get the documentation information for the given type. In most cases you probably just want to use {@link getDoc}
 * @param program Program
 * @param target Type
 * @returns Doc data with source information.
 */
export function getDocDataInternal(program, target, key) {
    return program.stateMap(getDocKey(key)).get(target);
}
/**
 * Get the documentation information for the given type. In most cases you probably just want to use {@link getDoc}
 * @param program Program
 * @param target Type
 * @returns Doc data with source information.
 */
export function getDocData(program, target) {
    return getDocDataInternal(program, target, "self");
}
export function setDiscriminator(program, entity, discriminator) {
    program.stateMap(stateKeys.discriminator).set(entity, discriminator);
}
export function getDiscriminator(program, entity) {
    return program.stateMap(stateKeys.discriminator).get(entity);
}
export function getDiscriminatedTypes(program) {
    return [...program.stateMap(stateKeys.discriminator).entries()];
}
// #endregion
//# sourceMappingURL=intrinsic-type-state.js.map