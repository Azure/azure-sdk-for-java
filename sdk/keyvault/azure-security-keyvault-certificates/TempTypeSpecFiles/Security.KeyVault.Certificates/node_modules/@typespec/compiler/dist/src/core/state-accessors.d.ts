import type { Projector, Type } from "./types.js";
export declare class StateMap extends Map<undefined | Projector, Map<Type, unknown>> {
}
export declare class StateSet extends Map<undefined | Projector, Set<Type>> {
}
declare class StateMapView<V> implements Map<Type, V> {
    private state;
    private projector?;
    constructor(state: StateMap, projector?: Projector | undefined);
    has(t: Type): boolean;
    set(t: Type, v: any): this;
    get(t: Type): V | undefined;
    delete(t: Type): boolean;
    forEach(cb: (value: V, key: Type, map: Map<Type, V>) => void, thisArg?: any): this;
    get size(): number;
    clear(): void;
    entries(): MapIterator<[Type, V]>;
    values(): MapIterator<V>;
    keys(): MapIterator<Type>;
    [Symbol.iterator](): MapIterator<[Type, V]>;
    [Symbol.toStringTag]: string;
    dispatch(keyType?: Type): Map<Type, V>;
}
declare class StateSetView implements Set<Type> {
    private state;
    private projector?;
    constructor(state: StateSet, projector?: Projector | undefined);
    has(t: Type): boolean;
    add(t: Type): this;
    delete(t: Type): boolean;
    forEach(cb: (value: Type, value2: Type, set: Set<Type>) => void, thisArg?: any): this;
    get size(): number;
    clear(): void;
    values(): SetIterator<Type>;
    keys(): SetIterator<Type>;
    entries(): SetIterator<[Type, Type]>;
    [Symbol.iterator](): SetIterator<Type>;
    [Symbol.toStringTag]: string;
    dispatch(keyType?: Type): Set<Type>;
}
export declare function createStateAccessors(stateMaps: Map<symbol, StateMap>, stateSets: Map<symbol, StateSet>, projector?: Projector): {
    stateMap: <T>(key: symbol) => StateMapView<T>;
    stateSet: (key: symbol) => StateSetView;
};
export {};
//# sourceMappingURL=state-accessors.d.ts.map