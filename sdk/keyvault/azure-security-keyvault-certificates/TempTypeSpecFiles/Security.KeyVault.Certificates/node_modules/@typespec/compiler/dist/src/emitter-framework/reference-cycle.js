import { getTypeName } from "../core/helpers/type-name-utils.js";
/**
 * Represent a reference cycle.
 * The cycle entries will always start with a declaration if there is one in the cycle.
 */
export class ReferenceCycle {
    /**
     * If this cycle contains a declaration.
     */
    containsDeclaration;
    #entries;
    constructor(entries) {
        const firstDeclarationIndex = entries.findIndex((entry) => entry.entity.kind === "declaration");
        this.containsDeclaration = firstDeclarationIndex !== -1;
        this.#entries = this.containsDeclaration
            ? [...entries.slice(firstDeclarationIndex), ...entries.slice(0, firstDeclarationIndex)]
            : entries;
    }
    get first() {
        return this.#entries[0];
    }
    [Symbol.iterator]() {
        return this.#entries[Symbol.iterator]();
    }
    [Symbol.toStringTag]() {
        return [...this.#entries, this.#entries[0]].map((x) => getTypeName(x.type)).join(" -> ");
    }
    toString() {
        return this[Symbol.toStringTag]();
    }
}
//# sourceMappingURL=reference-cycle.js.map