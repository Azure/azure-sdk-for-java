import type { Model, Type, Union } from "./index.js";
import type { Numeric } from "./numeric.js";
import type { Program } from "./program.js";
export declare function setMinValue(program: Program, target: Type, value: Numeric): void;
export declare function getMinValueAsNumeric(program: Program, target: Type): Numeric | undefined;
export declare function getMinValue(program: Program, target: Type): number | undefined;
export declare function setMaxValue(program: Program, target: Type, value: Numeric): void;
export declare function getMaxValueAsNumeric(program: Program, target: Type): Numeric | undefined;
export declare function getMaxValue(program: Program, target: Type): number | undefined;
export declare function setMinValueExclusive(program: Program, target: Type, value: Numeric): void;
export declare function getMinValueExclusiveAsNumeric(program: Program, target: Type): Numeric | undefined;
export declare function getMinValueExclusive(program: Program, target: Type): number | undefined;
export declare function setMaxValueExclusive(program: Program, target: Type, value: Numeric): void;
export declare function getMaxValueExclusiveAsNumeric(program: Program, target: Type): Numeric | undefined;
export declare function getMaxValueExclusive(program: Program, target: Type): number | undefined;
export declare function setMinLength(program: Program, target: Type, value: Numeric): void;
/**
 * Get the minimum length of a string type as a {@link Numeric} value.
 * @param program Current program
 * @param target Type with the `@minLength` decorator
 */
export declare function getMinLengthAsNumeric(program: Program, target: Type): Numeric | undefined;
export declare function getMinLength(program: Program, target: Type): number | undefined;
export declare function setMaxLength(program: Program, target: Type, value: Numeric): void;
/**
 * Get the minimum length of a string type as a {@link Numeric} value.
 * @param program Current program
 * @param target Type with the `@maxLength` decorator
 */
export declare function getMaxLengthAsNumeric(program: Program, target: Type): Numeric | undefined;
export declare function getMaxLength(program: Program, target: Type): number | undefined;
export declare function setMinItems(program: Program, target: Type, value: Numeric): void;
export declare function getMinItemsAsNumeric(program: Program, target: Type): Numeric | undefined;
export declare function getMinItems(program: Program, target: Type): number | undefined;
export declare function setMaxItems(program: Program, target: Type, value: Numeric): void;
export declare function getMaxItemsAsNumeric(program: Program, target: Type): Numeric | undefined;
export declare function getMaxItems(program: Program, target: Type): number | undefined;
export interface DocData {
    /**
     * Doc value.
     */
    value: string;
    /**
     * How was the doc set.
     * - `decorator` means the `@doc` decorator was used
     * - `comment` means it was set from a `/** comment * /`
     */
    source: "decorator" | "comment";
}
/**
 * Get the documentation information for the given type. In most cases you probably just want to use {@link getDoc}
 * @param program Program
 * @param target Type
 * @returns Doc data with source information.
 */
export declare function getDocData(program: Program, target: Type): DocData | undefined;
export interface Discriminator {
    readonly propertyName: string;
}
export declare function setDiscriminator(program: Program, entity: Type, discriminator: Discriminator): void;
export declare function getDiscriminator(program: Program, entity: Type): Discriminator | undefined;
export declare function getDiscriminatedTypes(program: Program): [Model | Union, Discriminator][];
//# sourceMappingURL=intrinsic-type-state.d.ts.map