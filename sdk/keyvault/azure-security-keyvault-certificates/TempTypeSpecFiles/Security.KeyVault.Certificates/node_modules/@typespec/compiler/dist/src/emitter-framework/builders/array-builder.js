import { compilerAssert } from "../../core/index.js";
import { Placeholder } from "../placeholder.js";
import { EmitterResult } from "../types.js";
export class ArrayBuilder extends Array {
    #setPlaceholderValue(p, value) {
        for (const [i, item] of this.entries()) {
            if (item === p) {
                this[i] = value;
            }
        }
    }
    push(...values) {
        for (const v of values) {
            let toPush;
            if (v instanceof EmitterResult) {
                compilerAssert(v.kind !== "circular", "Can't push a circular emit result.");
                if (v.kind === "none") {
                    toPush = undefined;
                }
                else {
                    toPush = v.value;
                }
            }
            else {
                toPush = v;
            }
            if (toPush instanceof Placeholder) {
                toPush.onValue((v) => this.#setPlaceholderValue(toPush, v));
            }
            super.push(toPush);
        }
        return values.length;
    }
}
//# sourceMappingURL=array-builder.js.map