/**
 * TypeSpec Language configuration. Format: https://code.visualstudio.com/api/language-extensions/language-configuration-guide
 * @hidden Typedoc causing issue with this
 */
export declare const TypeSpecLanguageConfiguration: {
    readonly comments: {
        readonly lineComment: "//";
        readonly blockComment: readonly ["/*", "*/"];
    };
    readonly brackets: readonly [readonly ["{", "}"], readonly ["[", "]"], readonly ["(", ")"]];
    readonly autoClosingPairs: readonly [{
        readonly open: "{";
        readonly close: "}";
    }, {
        readonly open: "[";
        readonly close: "]";
    }, {
        readonly open: "(";
        readonly close: ")";
    }, {
        readonly open: "\"";
        readonly close: "\"";
    }, {
        readonly open: "/**";
        readonly close: " */";
        readonly notIn: readonly ["string"];
    }];
    readonly surroundingPairs: readonly [{
        readonly open: "{";
        readonly close: "}";
    }, {
        readonly open: "[";
        readonly close: "]";
    }, {
        readonly open: "(";
        readonly close: ")";
    }, {
        readonly open: "\"";
        readonly close: "\"";
    }];
    readonly indentationRules: {
        readonly decreaseIndentPattern: {
            readonly pattern: "^((?!.*?/\\*).*\\*/)?\\s*[\\}\\]].*$";
        };
        readonly increaseIndentPattern: {
            readonly pattern: "^((?!//).)*(\\{([^}\"'`/]*|(\\t|[ ])*//.*)|\\([^)\"'`/]*|\\[[^\\]\"'`/]*)$";
        };
        readonly unIndentedLinePattern: {
            readonly pattern: "^(\\t|[ ])*[ ]\\*[^/]*\\*/\\s*$|^(\\t|[ ])*[ ]\\*/\\s*$|^(\\t|[ ])*[ ]\\*([ ]([^\\*]|\\*(?!/))*)?$";
        };
    };
    readonly onEnterRules: readonly [{
        readonly beforeText: {
            readonly pattern: "^\\s*/\\*\\*(?!/)([^\\*]|\\*(?!/))*$";
        };
        readonly afterText: {
            readonly pattern: "^\\s*\\*/$";
        };
        readonly action: {
            readonly indent: "indentOutdent";
            readonly appendText: " * ";
        };
    }, {
        readonly beforeText: {
            readonly pattern: "^\\s*/\\*\\*(?!/)([^\\*]|\\*(?!/))*$";
        };
        readonly action: {
            readonly indent: "none";
            readonly appendText: " * ";
        };
    }, {
        readonly beforeText: {
            readonly pattern: "^(\\t|[ ])*[ ]\\*([ ]([^\\*]|\\*(?!/))*)?$";
        };
        readonly previousLineText: {
            readonly pattern: "(?=^(\\s*(/\\*\\*|\\*)).*)(?=(?!(\\s*\\*/)))";
        };
        readonly action: {
            readonly indent: "none";
            readonly appendText: "* ";
        };
    }, {
        readonly beforeText: {
            readonly pattern: "^(\\t|[ ])*[ ]\\*/\\s*$";
        };
        readonly action: {
            readonly indent: "none";
            readonly removeText: 1;
        };
    }, {
        readonly beforeText: {
            readonly pattern: "^(\\t|[ ])*[ ]\\*[^/]*\\*/\\s*$";
        };
        readonly action: {
            readonly indent: "none";
            readonly removeText: 1;
        };
    }];
};
/**
 * @deprecated Use TypeSpecLanguageConfiguration
 * @hidden
 */
export declare const CadlLanguageConfiguration: {
    readonly comments: {
        readonly lineComment: "//";
        readonly blockComment: readonly ["/*", "*/"];
    };
    readonly brackets: readonly [readonly ["{", "}"], readonly ["[", "]"], readonly ["(", ")"]];
    readonly autoClosingPairs: readonly [{
        readonly open: "{";
        readonly close: "}";
    }, {
        readonly open: "[";
        readonly close: "]";
    }, {
        readonly open: "(";
        readonly close: ")";
    }, {
        readonly open: "\"";
        readonly close: "\"";
    }, {
        readonly open: "/**";
        readonly close: " */";
        readonly notIn: readonly ["string"];
    }];
    readonly surroundingPairs: readonly [{
        readonly open: "{";
        readonly close: "}";
    }, {
        readonly open: "[";
        readonly close: "]";
    }, {
        readonly open: "(";
        readonly close: ")";
    }, {
        readonly open: "\"";
        readonly close: "\"";
    }];
    readonly indentationRules: {
        readonly decreaseIndentPattern: {
            readonly pattern: "^((?!.*?/\\*).*\\*/)?\\s*[\\}\\]].*$";
        };
        readonly increaseIndentPattern: {
            readonly pattern: "^((?!//).)*(\\{([^}\"'`/]*|(\\t|[ ])*//.*)|\\([^)\"'`/]*|\\[[^\\]\"'`/]*)$";
        };
        readonly unIndentedLinePattern: {
            readonly pattern: "^(\\t|[ ])*[ ]\\*[^/]*\\*/\\s*$|^(\\t|[ ])*[ ]\\*/\\s*$|^(\\t|[ ])*[ ]\\*([ ]([^\\*]|\\*(?!/))*)?$";
        };
    };
    readonly onEnterRules: readonly [{
        readonly beforeText: {
            readonly pattern: "^\\s*/\\*\\*(?!/)([^\\*]|\\*(?!/))*$";
        };
        readonly afterText: {
            readonly pattern: "^\\s*\\*/$";
        };
        readonly action: {
            readonly indent: "indentOutdent";
            readonly appendText: " * ";
        };
    }, {
        readonly beforeText: {
            readonly pattern: "^\\s*/\\*\\*(?!/)([^\\*]|\\*(?!/))*$";
        };
        readonly action: {
            readonly indent: "none";
            readonly appendText: " * ";
        };
    }, {
        readonly beforeText: {
            readonly pattern: "^(\\t|[ ])*[ ]\\*([ ]([^\\*]|\\*(?!/))*)?$";
        };
        readonly previousLineText: {
            readonly pattern: "(?=^(\\s*(/\\*\\*|\\*)).*)(?=(?!(\\s*\\*/)))";
        };
        readonly action: {
            readonly indent: "none";
            readonly appendText: "* ";
        };
    }, {
        readonly beforeText: {
            readonly pattern: "^(\\t|[ ])*[ ]\\*/\\s*$";
        };
        readonly action: {
            readonly indent: "none";
            readonly removeText: 1;
        };
    }, {
        readonly beforeText: {
            readonly pattern: "^(\\t|[ ])*[ ]\\*[^/]*\\*/\\s*$";
        };
        readonly action: {
            readonly indent: "none";
            readonly removeText: 1;
        };
    }];
};
//# sourceMappingURL=language-config.d.ts.map