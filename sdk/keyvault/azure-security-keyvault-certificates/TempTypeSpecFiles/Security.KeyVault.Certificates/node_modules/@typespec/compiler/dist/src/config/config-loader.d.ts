import { CompilerHost, Diagnostic } from "../core/types.js";
import { TypeSpecConfig } from "./types.js";
export declare const OldTypeSpecConfigFilename = "cadl-project.yaml";
export declare const TypeSpecConfigFilename = "tspconfig.yaml";
export declare const defaultConfig: {
    outputDir: string;
    diagnostics: Diagnostic[];
};
/**
 * Look for the project root by looking up until a `tspconfig.yaml` is found.
 * @param path Path to the file or the folder to start looking
 */
export declare function findTypeSpecConfigPath(host: CompilerHost, path: string, lookup?: boolean): Promise<string | undefined>;
/**
 * Load the TypeSpec configuration for the provided path or directory
 * @param host
 * @param path
 */
export declare function loadTypeSpecConfigForPath(host: CompilerHost, path: string, errorIfNotFound?: boolean, lookup?: boolean): Promise<TypeSpecConfig>;
/**
 * Load given file as a TypeSpec configuration
 */
export declare function loadTypeSpecConfigFile(host: CompilerHost, filePath: string): Promise<TypeSpecConfig>;
export declare function validateConfigPathsAbsolute(config: TypeSpecConfig): readonly Diagnostic[];
//# sourceMappingURL=config-loader.d.ts.map