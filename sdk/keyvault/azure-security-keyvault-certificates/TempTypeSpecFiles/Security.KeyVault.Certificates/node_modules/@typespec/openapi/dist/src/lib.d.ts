export declare const $lib: import("@typespec/compiler").TypeSpecLibrary<{
    "invalid-extension-key": {
        readonly default: import("@typespec/compiler").CallableMessage<["value"]>;
    };
    "duplicate-type-name": {
        readonly default: import("@typespec/compiler").CallableMessage<["value"]>;
        readonly parameter: import("@typespec/compiler").CallableMessage<["value"]>;
    };
    "not-url": {
        readonly default: import("@typespec/compiler").CallableMessage<["property", "value"]>;
    };
    "duplicate-tag": {
        readonly default: import("@typespec/compiler").CallableMessage<["tagName"]>;
    };
    "tag-metadata-target-service": {
        readonly default: import("@typespec/compiler").CallableMessage<["namespace"]>;
    };
}, Record<string, any>, "tagsMetadata">;
export declare const createDiagnostic: <C extends "invalid-extension-key" | "duplicate-type-name" | "not-url" | "duplicate-tag" | "tag-metadata-target-service", M extends keyof {
    "invalid-extension-key": {
        readonly default: import("@typespec/compiler").CallableMessage<["value"]>;
    };
    "duplicate-type-name": {
        readonly default: import("@typespec/compiler").CallableMessage<["value"]>;
        readonly parameter: import("@typespec/compiler").CallableMessage<["value"]>;
    };
    "not-url": {
        readonly default: import("@typespec/compiler").CallableMessage<["property", "value"]>;
    };
    "duplicate-tag": {
        readonly default: import("@typespec/compiler").CallableMessage<["tagName"]>;
    };
    "tag-metadata-target-service": {
        readonly default: import("@typespec/compiler").CallableMessage<["namespace"]>;
    };
}[C]>(diag: import("@typespec/compiler").DiagnosticReport<{
    "invalid-extension-key": {
        readonly default: import("@typespec/compiler").CallableMessage<["value"]>;
    };
    "duplicate-type-name": {
        readonly default: import("@typespec/compiler").CallableMessage<["value"]>;
        readonly parameter: import("@typespec/compiler").CallableMessage<["value"]>;
    };
    "not-url": {
        readonly default: import("@typespec/compiler").CallableMessage<["property", "value"]>;
    };
    "duplicate-tag": {
        readonly default: import("@typespec/compiler").CallableMessage<["tagName"]>;
    };
    "tag-metadata-target-service": {
        readonly default: import("@typespec/compiler").CallableMessage<["namespace"]>;
    };
}, C, M>) => import("@typespec/compiler").Diagnostic, reportDiagnostic: <C extends "invalid-extension-key" | "duplicate-type-name" | "not-url" | "duplicate-tag" | "tag-metadata-target-service", M extends keyof {
    "invalid-extension-key": {
        readonly default: import("@typespec/compiler").CallableMessage<["value"]>;
    };
    "duplicate-type-name": {
        readonly default: import("@typespec/compiler").CallableMessage<["value"]>;
        readonly parameter: import("@typespec/compiler").CallableMessage<["value"]>;
    };
    "not-url": {
        readonly default: import("@typespec/compiler").CallableMessage<["property", "value"]>;
    };
    "duplicate-tag": {
        readonly default: import("@typespec/compiler").CallableMessage<["tagName"]>;
    };
    "tag-metadata-target-service": {
        readonly default: import("@typespec/compiler").CallableMessage<["namespace"]>;
    };
}[C]>(program: import("@typespec/compiler").Program, diag: import("@typespec/compiler").DiagnosticReport<{
    "invalid-extension-key": {
        readonly default: import("@typespec/compiler").CallableMessage<["value"]>;
    };
    "duplicate-type-name": {
        readonly default: import("@typespec/compiler").CallableMessage<["value"]>;
        readonly parameter: import("@typespec/compiler").CallableMessage<["value"]>;
    };
    "not-url": {
        readonly default: import("@typespec/compiler").CallableMessage<["property", "value"]>;
    };
    "duplicate-tag": {
        readonly default: import("@typespec/compiler").CallableMessage<["tagName"]>;
    };
    "tag-metadata-target-service": {
        readonly default: import("@typespec/compiler").CallableMessage<["namespace"]>;
    };
}, C, M>) => void, createStateSymbol: (name: string) => symbol, OpenAPIKeys: Record<"tagsMetadata", symbol>;
//# sourceMappingURL=lib.d.ts.map