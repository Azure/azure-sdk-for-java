import { Namespace, Operation, Program, Type } from "@typespec/compiler";
import { DefaultResponseDecorator, ExtensionDecorator, ExternalDocsDecorator, InfoDecorator, OperationIdDecorator } from "../generated-defs/TypeSpec.OpenAPI.js";
import { AdditionalInfo, ExtensionKey } from "./types.js";
export declare const namespace = "TypeSpec.OpenAPI";
/**
 * Set a specific operation ID.
 * @param context Decorator Context
 * @param entity Decorator target
 * @param opId Operation ID.
 */
export declare const $operationId: OperationIdDecorator;
/**
 * @returns operationId set via the @operationId decorator or `undefined`
 */
export declare function getOperationId(program: Program, entity: Operation): string | undefined;
export declare const $extension: ExtensionDecorator;
export declare function setInfo(program: Program, entity: Namespace, data: AdditionalInfo & Record<ExtensionKey, unknown>): void;
export declare function setExtension(program: Program, entity: Type, extensionName: ExtensionKey, data: unknown): void;
export declare function getExtensions(program: Program, entity: Type): ReadonlyMap<ExtensionKey, any>;
export declare const $defaultResponse: DefaultResponseDecorator;
/**
 * Check if the given model has been mark as a default response.
 * @param program TypeSpec Program
 * @param entity Model to check.
 * @returns boolean.
 */
export declare function isDefaultResponse(program: Program, entity: Type): boolean;
export interface ExternalDocs {
    url: string;
    description?: string;
}
/**
 * Allows referencing an external resource for extended documentation.
 * @param url The URL for the target documentation. Value MUST be in the format of a URL.
 * @param description A short description of the target documentation.
 */
export declare const $externalDocs: ExternalDocsDecorator;
export declare function getExternalDocs(program: Program, entity: Type): ExternalDocs | undefined;
export declare const $info: InfoDecorator;
export declare function getInfo(program: Program, entity: Namespace): AdditionalInfo | undefined;
/** Resolve the info entry by merging data specified with `@service`, `@summary` and `@info`. */
export declare function resolveInfo(program: Program, entity: Namespace): AdditionalInfo | undefined;
//# sourceMappingURL=decorators.d.ts.map