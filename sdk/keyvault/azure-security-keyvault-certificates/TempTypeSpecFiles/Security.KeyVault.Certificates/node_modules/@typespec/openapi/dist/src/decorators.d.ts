import { Namespace, Operation, Program, Type } from "@typespec/compiler";
import { DefaultResponseDecorator, ExtensionDecorator, ExternalDocsDecorator, InfoDecorator, OperationIdDecorator, TagMetadata, TagMetadataDecorator } from "../generated-defs/TypeSpec.OpenAPI.js";
import { AdditionalInfo, ExtensionKey, ExternalDocs } from "./types.js";
/**
 * Set a specific operation ID.
 * @param context Decorator Context
 * @param entity Decorator target
 * @param opId Operation ID.
 */
export declare const $operationId: OperationIdDecorator;
/**
 * Returns operationId set via the `@operationId` decorator or `undefined`
 */
export declare function getOperationId(program: Program, entity: Operation): string | undefined;
/** {@inheritdoc ExtensionDecorator} */
export declare const $extension: ExtensionDecorator;
/**
 * Set the OpenAPI info node on for the given service namespace.
 * @param program Program
 * @param entity Service namespace
 * @param data OpenAPI Info object
 */
export declare function setInfo(program: Program, entity: Namespace, data: AdditionalInfo & Record<ExtensionKey, unknown>): void;
/**
 *  Set OpenAPI extension on the given type. Equivalent of using `@extension` decorator
 * @param program Program
 * @param entity Type to annotate
 * @param extensionName Extension key
 * @param data Extension value
 */
export declare function setExtension(program: Program, entity: Type, extensionName: ExtensionKey, data: unknown): void;
/**
 * Get extensions set for the given type.
 * @param program Program
 * @param entity Type
 */
export declare function getExtensions(program: Program, entity: Type): ReadonlyMap<ExtensionKey, any>;
/** {@inheritdoc DefaultResponseDecorator} */
export declare const $defaultResponse: DefaultResponseDecorator;
/**
 * Check if the given model has been mark as a default response.
 * @param program TypeSpec Program
 * @param entity Model to check.
 * @returns boolean.
 */
export declare function isDefaultResponse(program: Program, entity: Type): boolean;
/**
 * Allows referencing an external resource for extended documentation.
 * @param url The URL for the target documentation. Value MUST be in the format of a URL.
 * @param description A short description of the target documentation.
 */
export declare const $externalDocs: ExternalDocsDecorator;
/**
 * Return external doc info set via the `@externalDocs` decorator.
 * @param program Program
 * @param entity Type
 */
export declare function getExternalDocs(program: Program, entity: Type): ExternalDocs | undefined;
/** {@inheritdoc InfoDecorator} */
export declare const $info: InfoDecorator;
/**
 * Get the info entry for the given service namespace.
 * @param program Program
 * @param entity Service namespace
 */
export declare function getInfo(program: Program, entity: Namespace): AdditionalInfo | undefined;
/** Resolve the info entry by merging data specified with `@service`, `@summary` and `@info`. */
export declare function resolveInfo(program: Program, entity: Namespace): AdditionalInfo | undefined;
/** Get TagsMetadata set with `@tagMetadata` decorator */
declare const getTagsMetadata: (program: Program, type: Type) => {
    [name: string]: TagMetadata;
} | undefined;
/**
 * Decorator to add metadata to a tag associated with a namespace.
 * @param context - The decorator context.
 * @param entity - The namespace entity to associate the tag with.
 * @param name - The name of the tag.
 * @param tagMetadata - Optional metadata for the tag.
 */
export declare const tagMetadataDecorator: TagMetadataDecorator;
export { getTagsMetadata };
//# sourceMappingURL=decorators.d.ts.map