import { DecoratorContext, Model, ModelProperty, Program, Type } from "@typespec/compiler";
import { ParentResourceDecorator } from "../generated-defs/TypeSpec.Rest.js";
export interface ResourceKey {
    resourceType: Model;
    keyProperty: ModelProperty;
}
export declare function setResourceTypeKey(program: Program, resourceType: Model, keyProperty: ModelProperty): void;
export declare function getResourceTypeKey(program: Program, resourceType: Model): ResourceKey | undefined;
export declare function $resourceTypeForKeyParam(context: DecoratorContext, entity: Type, resourceType: Type): void;
export declare function getResourceTypeForKeyParam(program: Program, param: ModelProperty): Model | undefined;
export declare function $copyResourceKeyParameters(context: DecoratorContext, entity: Model, filter?: string): void;
export declare function getParentResource(program: Program, resourceType: Model): Model | undefined;
/**
 * `@parentResource` marks a model with a reference to its parent resource type
 *
 * The first argument should be a reference to a model type which will be treated as the parent
 * type of the target model type.  This will cause the `@key` properties of all parent types of
 * the target type to show up in operations of the `Resource*<T>` interfaces defined in this library.
 *
 * `@parentResource` can only be applied to models.
 */
export declare const $parentResource: ParentResourceDecorator;
//# sourceMappingURL=resource.d.ts.map