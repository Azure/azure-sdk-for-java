export declare const $lib: import("@typespec/compiler").TypeSpecLibrary<{
    "http-verb-duplicate": {
        readonly default: import("@typespec/compiler").CallableMessage<["entityName"]>;
    };
    "missing-uri-param": {
        readonly default: import("@typespec/compiler").CallableMessage<["param"]>;
    };
    "incompatible-uri-param": {
        readonly default: import("@typespec/compiler").CallableMessage<["param", "uriKind", "annotationKind"]>;
    };
    "use-uri-template": {
        readonly default: import("@typespec/compiler").CallableMessage<["param"]>;
    };
    "optional-path-param": {
        readonly default: import("@typespec/compiler").CallableMessage<["paramName"]>;
    };
    "missing-server-param": {
        readonly default: import("@typespec/compiler").CallableMessage<["param"]>;
    };
    "duplicate-body": {
        readonly default: "Operation has multiple @body parameters declared";
        readonly duplicateUnannotated: "Operation has multiple unannotated parameters. There can only be one representing the body";
        readonly bodyAndUnannotated: "Operation has a @body and an unannotated parameter. There can only be one representing the body";
    };
    "duplicate-route-decorator": {
        readonly namespace: "@route was defined twice on this namespace and has different values.";
    };
    "operation-param-duplicate-type": {
        readonly default: import("@typespec/compiler").CallableMessage<["paramName", "types"]>;
    };
    "duplicate-operation": {
        readonly default: import("@typespec/compiler").CallableMessage<["operationName", "verb", "path"]>;
    };
    "multiple-status-codes": {
        readonly default: "Multiple `@statusCode` decorators defined for this operation response.";
    };
    "status-code-invalid": {
        readonly default: "statusCode value must be a numeric or string literal or union of numeric or string literals";
        readonly value: "statusCode value must be a three digit code between 100 and 599";
    };
    "content-type-string": {
        readonly default: "contentType parameter must be a string literal or union of string literals";
    };
    "content-type-ignored": {
        readonly default: "`Content-Type` header ignored because there is no body.";
    };
    "metadata-ignored": {
        readonly default: import("@typespec/compiler").CallableMessage<["kind"]>;
    };
    "no-service-found": {
        readonly default: import("@typespec/compiler").CallableMessage<["namespace"]>;
    };
    "invalid-type-for-auth": {
        readonly default: import("@typespec/compiler").CallableMessage<["kind"]>;
    };
    "shared-inconsistency": {
        readonly default: import("@typespec/compiler").CallableMessage<["verb", "path"]>;
    };
    "write-visibility-not-supported": {
        readonly default: "@visibility(\"write\") is not supported. Use @visibility(\"update\"), @visibility(\"create\") or @visibility(\"create\", \"update\") as appropriate.";
    };
    "multipart-invalid-content-type": {
        readonly default: import("@typespec/compiler").CallableMessage<["contentType", "supportedContentTypes"]>;
    };
    "multipart-model": {
        readonly default: "Multipart request body must be a model.";
    };
    "multipart-part": {
        readonly default: "Expect item to be an HttpPart model.";
    };
    "multipart-nested": {
        readonly default: "Cannot use @multipartBody inside of an HttpPart";
    };
    "http-file-extra-property": {
        readonly default: import("@typespec/compiler").CallableMessage<["propName"]>;
    };
    "formdata-no-part-name": {
        readonly default: "Part used in multipart/form-data must have a name.";
    };
    "header-format-required": {
        readonly default: "A format must be specified for @header when type is an array. e.g. @header({format: \"csv\"})";
    };
}, Record<string, any>, "path" | "file" | "query" | "authentication" | "header" | "body" | "bodyRoot" | "bodyIgnore" | "multipartBody" | "statusCode" | "verbs" | "servers" | "includeInapplicableMetadataInPayload" | "externalInterfaces" | "routeProducer" | "routes" | "sharedRoutes" | "routeOptions" | "httpPart">;
export declare const reportDiagnostic: <C extends "http-verb-duplicate" | "missing-uri-param" | "incompatible-uri-param" | "use-uri-template" | "optional-path-param" | "missing-server-param" | "duplicate-body" | "duplicate-route-decorator" | "operation-param-duplicate-type" | "duplicate-operation" | "multiple-status-codes" | "status-code-invalid" | "content-type-string" | "content-type-ignored" | "metadata-ignored" | "no-service-found" | "invalid-type-for-auth" | "shared-inconsistency" | "write-visibility-not-supported" | "multipart-invalid-content-type" | "multipart-model" | "multipart-part" | "multipart-nested" | "http-file-extra-property" | "formdata-no-part-name" | "header-format-required", M extends keyof {
    "http-verb-duplicate": {
        readonly default: import("@typespec/compiler").CallableMessage<["entityName"]>;
    };
    "missing-uri-param": {
        readonly default: import("@typespec/compiler").CallableMessage<["param"]>;
    };
    "incompatible-uri-param": {
        readonly default: import("@typespec/compiler").CallableMessage<["param", "uriKind", "annotationKind"]>;
    };
    "use-uri-template": {
        readonly default: import("@typespec/compiler").CallableMessage<["param"]>;
    };
    "optional-path-param": {
        readonly default: import("@typespec/compiler").CallableMessage<["paramName"]>;
    };
    "missing-server-param": {
        readonly default: import("@typespec/compiler").CallableMessage<["param"]>;
    };
    "duplicate-body": {
        readonly default: "Operation has multiple @body parameters declared";
        readonly duplicateUnannotated: "Operation has multiple unannotated parameters. There can only be one representing the body";
        readonly bodyAndUnannotated: "Operation has a @body and an unannotated parameter. There can only be one representing the body";
    };
    "duplicate-route-decorator": {
        readonly namespace: "@route was defined twice on this namespace and has different values.";
    };
    "operation-param-duplicate-type": {
        readonly default: import("@typespec/compiler").CallableMessage<["paramName", "types"]>;
    };
    "duplicate-operation": {
        readonly default: import("@typespec/compiler").CallableMessage<["operationName", "verb", "path"]>;
    };
    "multiple-status-codes": {
        readonly default: "Multiple `@statusCode` decorators defined for this operation response.";
    };
    "status-code-invalid": {
        readonly default: "statusCode value must be a numeric or string literal or union of numeric or string literals";
        readonly value: "statusCode value must be a three digit code between 100 and 599";
    };
    "content-type-string": {
        readonly default: "contentType parameter must be a string literal or union of string literals";
    };
    "content-type-ignored": {
        readonly default: "`Content-Type` header ignored because there is no body.";
    };
    "metadata-ignored": {
        readonly default: import("@typespec/compiler").CallableMessage<["kind"]>;
    };
    "no-service-found": {
        readonly default: import("@typespec/compiler").CallableMessage<["namespace"]>;
    };
    "invalid-type-for-auth": {
        readonly default: import("@typespec/compiler").CallableMessage<["kind"]>;
    };
    "shared-inconsistency": {
        readonly default: import("@typespec/compiler").CallableMessage<["verb", "path"]>;
    };
    "write-visibility-not-supported": {
        readonly default: "@visibility(\"write\") is not supported. Use @visibility(\"update\"), @visibility(\"create\") or @visibility(\"create\", \"update\") as appropriate.";
    };
    "multipart-invalid-content-type": {
        readonly default: import("@typespec/compiler").CallableMessage<["contentType", "supportedContentTypes"]>;
    };
    "multipart-model": {
        readonly default: "Multipart request body must be a model.";
    };
    "multipart-part": {
        readonly default: "Expect item to be an HttpPart model.";
    };
    "multipart-nested": {
        readonly default: "Cannot use @multipartBody inside of an HttpPart";
    };
    "http-file-extra-property": {
        readonly default: import("@typespec/compiler").CallableMessage<["propName"]>;
    };
    "formdata-no-part-name": {
        readonly default: "Part used in multipart/form-data must have a name.";
    };
    "header-format-required": {
        readonly default: "A format must be specified for @header when type is an array. e.g. @header({format: \"csv\"})";
    };
}[C]>(program: import("@typespec/compiler").Program, diag: import("@typespec/compiler").DiagnosticReport<{
    "http-verb-duplicate": {
        readonly default: import("@typespec/compiler").CallableMessage<["entityName"]>;
    };
    "missing-uri-param": {
        readonly default: import("@typespec/compiler").CallableMessage<["param"]>;
    };
    "incompatible-uri-param": {
        readonly default: import("@typespec/compiler").CallableMessage<["param", "uriKind", "annotationKind"]>;
    };
    "use-uri-template": {
        readonly default: import("@typespec/compiler").CallableMessage<["param"]>;
    };
    "optional-path-param": {
        readonly default: import("@typespec/compiler").CallableMessage<["paramName"]>;
    };
    "missing-server-param": {
        readonly default: import("@typespec/compiler").CallableMessage<["param"]>;
    };
    "duplicate-body": {
        readonly default: "Operation has multiple @body parameters declared";
        readonly duplicateUnannotated: "Operation has multiple unannotated parameters. There can only be one representing the body";
        readonly bodyAndUnannotated: "Operation has a @body and an unannotated parameter. There can only be one representing the body";
    };
    "duplicate-route-decorator": {
        readonly namespace: "@route was defined twice on this namespace and has different values.";
    };
    "operation-param-duplicate-type": {
        readonly default: import("@typespec/compiler").CallableMessage<["paramName", "types"]>;
    };
    "duplicate-operation": {
        readonly default: import("@typespec/compiler").CallableMessage<["operationName", "verb", "path"]>;
    };
    "multiple-status-codes": {
        readonly default: "Multiple `@statusCode` decorators defined for this operation response.";
    };
    "status-code-invalid": {
        readonly default: "statusCode value must be a numeric or string literal or union of numeric or string literals";
        readonly value: "statusCode value must be a three digit code between 100 and 599";
    };
    "content-type-string": {
        readonly default: "contentType parameter must be a string literal or union of string literals";
    };
    "content-type-ignored": {
        readonly default: "`Content-Type` header ignored because there is no body.";
    };
    "metadata-ignored": {
        readonly default: import("@typespec/compiler").CallableMessage<["kind"]>;
    };
    "no-service-found": {
        readonly default: import("@typespec/compiler").CallableMessage<["namespace"]>;
    };
    "invalid-type-for-auth": {
        readonly default: import("@typespec/compiler").CallableMessage<["kind"]>;
    };
    "shared-inconsistency": {
        readonly default: import("@typespec/compiler").CallableMessage<["verb", "path"]>;
    };
    "write-visibility-not-supported": {
        readonly default: "@visibility(\"write\") is not supported. Use @visibility(\"update\"), @visibility(\"create\") or @visibility(\"create\", \"update\") as appropriate.";
    };
    "multipart-invalid-content-type": {
        readonly default: import("@typespec/compiler").CallableMessage<["contentType", "supportedContentTypes"]>;
    };
    "multipart-model": {
        readonly default: "Multipart request body must be a model.";
    };
    "multipart-part": {
        readonly default: "Expect item to be an HttpPart model.";
    };
    "multipart-nested": {
        readonly default: "Cannot use @multipartBody inside of an HttpPart";
    };
    "http-file-extra-property": {
        readonly default: import("@typespec/compiler").CallableMessage<["propName"]>;
    };
    "formdata-no-part-name": {
        readonly default: "Part used in multipart/form-data must have a name.";
    };
    "header-format-required": {
        readonly default: "A format must be specified for @header when type is an array. e.g. @header({format: \"csv\"})";
    };
}, C, M>) => void, createDiagnostic: <C extends "http-verb-duplicate" | "missing-uri-param" | "incompatible-uri-param" | "use-uri-template" | "optional-path-param" | "missing-server-param" | "duplicate-body" | "duplicate-route-decorator" | "operation-param-duplicate-type" | "duplicate-operation" | "multiple-status-codes" | "status-code-invalid" | "content-type-string" | "content-type-ignored" | "metadata-ignored" | "no-service-found" | "invalid-type-for-auth" | "shared-inconsistency" | "write-visibility-not-supported" | "multipart-invalid-content-type" | "multipart-model" | "multipart-part" | "multipart-nested" | "http-file-extra-property" | "formdata-no-part-name" | "header-format-required", M extends keyof {
    "http-verb-duplicate": {
        readonly default: import("@typespec/compiler").CallableMessage<["entityName"]>;
    };
    "missing-uri-param": {
        readonly default: import("@typespec/compiler").CallableMessage<["param"]>;
    };
    "incompatible-uri-param": {
        readonly default: import("@typespec/compiler").CallableMessage<["param", "uriKind", "annotationKind"]>;
    };
    "use-uri-template": {
        readonly default: import("@typespec/compiler").CallableMessage<["param"]>;
    };
    "optional-path-param": {
        readonly default: import("@typespec/compiler").CallableMessage<["paramName"]>;
    };
    "missing-server-param": {
        readonly default: import("@typespec/compiler").CallableMessage<["param"]>;
    };
    "duplicate-body": {
        readonly default: "Operation has multiple @body parameters declared";
        readonly duplicateUnannotated: "Operation has multiple unannotated parameters. There can only be one representing the body";
        readonly bodyAndUnannotated: "Operation has a @body and an unannotated parameter. There can only be one representing the body";
    };
    "duplicate-route-decorator": {
        readonly namespace: "@route was defined twice on this namespace and has different values.";
    };
    "operation-param-duplicate-type": {
        readonly default: import("@typespec/compiler").CallableMessage<["paramName", "types"]>;
    };
    "duplicate-operation": {
        readonly default: import("@typespec/compiler").CallableMessage<["operationName", "verb", "path"]>;
    };
    "multiple-status-codes": {
        readonly default: "Multiple `@statusCode` decorators defined for this operation response.";
    };
    "status-code-invalid": {
        readonly default: "statusCode value must be a numeric or string literal or union of numeric or string literals";
        readonly value: "statusCode value must be a three digit code between 100 and 599";
    };
    "content-type-string": {
        readonly default: "contentType parameter must be a string literal or union of string literals";
    };
    "content-type-ignored": {
        readonly default: "`Content-Type` header ignored because there is no body.";
    };
    "metadata-ignored": {
        readonly default: import("@typespec/compiler").CallableMessage<["kind"]>;
    };
    "no-service-found": {
        readonly default: import("@typespec/compiler").CallableMessage<["namespace"]>;
    };
    "invalid-type-for-auth": {
        readonly default: import("@typespec/compiler").CallableMessage<["kind"]>;
    };
    "shared-inconsistency": {
        readonly default: import("@typespec/compiler").CallableMessage<["verb", "path"]>;
    };
    "write-visibility-not-supported": {
        readonly default: "@visibility(\"write\") is not supported. Use @visibility(\"update\"), @visibility(\"create\") or @visibility(\"create\", \"update\") as appropriate.";
    };
    "multipart-invalid-content-type": {
        readonly default: import("@typespec/compiler").CallableMessage<["contentType", "supportedContentTypes"]>;
    };
    "multipart-model": {
        readonly default: "Multipart request body must be a model.";
    };
    "multipart-part": {
        readonly default: "Expect item to be an HttpPart model.";
    };
    "multipart-nested": {
        readonly default: "Cannot use @multipartBody inside of an HttpPart";
    };
    "http-file-extra-property": {
        readonly default: import("@typespec/compiler").CallableMessage<["propName"]>;
    };
    "formdata-no-part-name": {
        readonly default: "Part used in multipart/form-data must have a name.";
    };
    "header-format-required": {
        readonly default: "A format must be specified for @header when type is an array. e.g. @header({format: \"csv\"})";
    };
}[C]>(diag: import("@typespec/compiler").DiagnosticReport<{
    "http-verb-duplicate": {
        readonly default: import("@typespec/compiler").CallableMessage<["entityName"]>;
    };
    "missing-uri-param": {
        readonly default: import("@typespec/compiler").CallableMessage<["param"]>;
    };
    "incompatible-uri-param": {
        readonly default: import("@typespec/compiler").CallableMessage<["param", "uriKind", "annotationKind"]>;
    };
    "use-uri-template": {
        readonly default: import("@typespec/compiler").CallableMessage<["param"]>;
    };
    "optional-path-param": {
        readonly default: import("@typespec/compiler").CallableMessage<["paramName"]>;
    };
    "missing-server-param": {
        readonly default: import("@typespec/compiler").CallableMessage<["param"]>;
    };
    "duplicate-body": {
        readonly default: "Operation has multiple @body parameters declared";
        readonly duplicateUnannotated: "Operation has multiple unannotated parameters. There can only be one representing the body";
        readonly bodyAndUnannotated: "Operation has a @body and an unannotated parameter. There can only be one representing the body";
    };
    "duplicate-route-decorator": {
        readonly namespace: "@route was defined twice on this namespace and has different values.";
    };
    "operation-param-duplicate-type": {
        readonly default: import("@typespec/compiler").CallableMessage<["paramName", "types"]>;
    };
    "duplicate-operation": {
        readonly default: import("@typespec/compiler").CallableMessage<["operationName", "verb", "path"]>;
    };
    "multiple-status-codes": {
        readonly default: "Multiple `@statusCode` decorators defined for this operation response.";
    };
    "status-code-invalid": {
        readonly default: "statusCode value must be a numeric or string literal or union of numeric or string literals";
        readonly value: "statusCode value must be a three digit code between 100 and 599";
    };
    "content-type-string": {
        readonly default: "contentType parameter must be a string literal or union of string literals";
    };
    "content-type-ignored": {
        readonly default: "`Content-Type` header ignored because there is no body.";
    };
    "metadata-ignored": {
        readonly default: import("@typespec/compiler").CallableMessage<["kind"]>;
    };
    "no-service-found": {
        readonly default: import("@typespec/compiler").CallableMessage<["namespace"]>;
    };
    "invalid-type-for-auth": {
        readonly default: import("@typespec/compiler").CallableMessage<["kind"]>;
    };
    "shared-inconsistency": {
        readonly default: import("@typespec/compiler").CallableMessage<["verb", "path"]>;
    };
    "write-visibility-not-supported": {
        readonly default: "@visibility(\"write\") is not supported. Use @visibility(\"update\"), @visibility(\"create\") or @visibility(\"create\", \"update\") as appropriate.";
    };
    "multipart-invalid-content-type": {
        readonly default: import("@typespec/compiler").CallableMessage<["contentType", "supportedContentTypes"]>;
    };
    "multipart-model": {
        readonly default: "Multipart request body must be a model.";
    };
    "multipart-part": {
        readonly default: "Expect item to be an HttpPart model.";
    };
    "multipart-nested": {
        readonly default: "Cannot use @multipartBody inside of an HttpPart";
    };
    "http-file-extra-property": {
        readonly default: import("@typespec/compiler").CallableMessage<["propName"]>;
    };
    "formdata-no-part-name": {
        readonly default: "Part used in multipart/form-data must have a name.";
    };
    "header-format-required": {
        readonly default: "A format must be specified for @header when type is an array. e.g. @header({format: \"csv\"})";
    };
}, C, M>) => import("@typespec/compiler").Diagnostic, HttpStateKeys: Record<"path" | "file" | "query" | "authentication" | "header" | "body" | "bodyRoot" | "bodyIgnore" | "multipartBody" | "statusCode" | "verbs" | "servers" | "includeInapplicableMetadataInPayload" | "externalInterfaces" | "routeProducer" | "routes" | "sharedRoutes" | "routeOptions" | "httpPart", symbol>;
//# sourceMappingURL=lib.d.ts.map