import { HttpStateKeys, reportDiagnostic } from "./lib.js";
import { getAllHttpServices } from "./operations.js";
import { isSharedRoute } from "./route.js";
export function $onValidate(program) {
    // Pass along any diagnostics that might be returned from the HTTP library
    const [services, diagnostics] = getAllHttpServices(program);
    if (diagnostics.length > 0) {
        program.reportDiagnostics(diagnostics);
    }
    validateSharedRouteConsistency(program, services);
    validateHttpFiles(program);
}
function validateHttpFiles(program) {
    const httpFiles = [...program.stateSet(HttpStateKeys.file)];
    for (const model of httpFiles) {
        if (model.kind === "Model") {
            validateHttpFileModel(program, model);
        }
    }
}
function validateHttpFileModel(program, model) {
    for (const prop of model.properties.values()) {
        if (prop.name !== "contentType" && prop.name !== "filename" && prop.name !== "contents") {
            reportDiagnostic(program, {
                code: "http-file-extra-property",
                format: { propName: prop.name },
                target: prop,
            });
        }
    }
    for (const child of model.derivedModels) {
        validateHttpFileModel(program, child);
    }
}
function groupHttpOperations(operations) {
    const paths = new Map();
    for (const operation of operations) {
        const { verb, path } = operation;
        let pathOps = paths.get(path);
        if (pathOps === undefined) {
            pathOps = new Map();
            paths.set(path, pathOps);
        }
        const ops = pathOps.get(verb);
        if (ops === undefined) {
            pathOps.set(verb, [operation]);
        }
        else {
            ops.push(operation);
        }
    }
    return paths;
}
function validateSharedRouteConsistency(program, services) {
    for (const service of services) {
        const paths = groupHttpOperations(service.operations);
        for (const pathOps of paths.values()) {
            for (const ops of pathOps.values()) {
                let hasShared = false;
                let hasNonShared = false;
                for (const op of ops) {
                    if (isSharedRoute(program, op.operation)) {
                        hasShared = true;
                    }
                    else {
                        hasNonShared = true;
                    }
                }
                if (hasShared && hasNonShared) {
                    for (const op of ops) {
                        reportDiagnostic(program, {
                            code: "shared-inconsistency",
                            target: op.operation,
                            format: { verb: op.verb, path: op.path },
                        });
                    }
                }
            }
        }
    }
}
//# sourceMappingURL=validate.js.map