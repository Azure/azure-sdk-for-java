import { DecoratorContext, DiagnosticResult, Interface, Namespace, Operation, Program, Type } from "@typespec/compiler";
import { HttpOperation, HttpOperationParameter, HttpOperationParameters, HttpOperationPathParameter, RouteOptions, RoutePath, RouteProducer, RouteProducerResult, RouteResolutionOptions } from "./types.js";
export declare function joinPathSegments(rest: string[]): string;
export declare function resolvePathAndParameters(program: Program, operation: Operation, overloadBase: HttpOperation | undefined, options: RouteResolutionOptions): DiagnosticResult<{
    readonly uriTemplate: string;
    path: string;
    parameters: HttpOperationParameters;
}>;
/**
 * @deprecated DO NOT USE. For internal use only as a workaround.
 * @param program Program
 * @param target Target namespace
 * @param sourceInterface Interface that should be included in namespace.
 */
export declare function includeInterfaceRoutesInNamespace(program: Program, target: Namespace, sourceInterface: string): void;
export declare function DefaultRouteProducer(program: Program, operation: Operation, parentSegments: string[], overloadBase: HttpOperation | undefined, options: RouteOptions): DiagnosticResult<RouteProducerResult>;
export declare function getUriTemplatePathParam(param: HttpOperationPathParameter): string;
export declare function addQueryParamsToUriTemplate(uriTemplate: string, params: HttpOperationParameter[]): string;
export declare function setRouteProducer(program: Program, operation: Operation, routeProducer: RouteProducer): void;
export declare function getRouteProducer(program: Program, operation: Operation): RouteProducer;
export declare function setRoute(context: DecoratorContext, entity: Type, details: RoutePath): void;
export declare function setSharedRoute(program: Program, operation: Operation): void;
export declare function isSharedRoute(program: Program, operation: Operation): boolean;
export declare function getRoutePath(program: Program, entity: Namespace | Interface | Operation): RoutePath | undefined;
export declare function setRouteOptionsForNamespace(program: Program, namespace: Namespace, options: RouteOptions): void;
export declare function getRouteOptionsForNamespace(program: Program, namespace: Namespace): RouteOptions | undefined;
//# sourceMappingURL=route.d.ts.map