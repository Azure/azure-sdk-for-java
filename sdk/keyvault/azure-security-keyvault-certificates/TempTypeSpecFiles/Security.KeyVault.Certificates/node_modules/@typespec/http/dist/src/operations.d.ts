import { Diagnostic, DiagnosticCollector, Namespace, Operation, Program } from "@typespec/compiler";
import { HttpOperation, HttpService, OperationContainer, RouteResolutionOptions } from "./types.js";
/**
 * Return the Http Operation details for a given TypeSpec operation.
 * @param operation Operation
 * @param options Optional option on how to resolve the http details.
 */
export declare function getHttpOperation(program: Program, operation: Operation, options?: RouteResolutionOptions): [HttpOperation, readonly Diagnostic[]];
/**
 * Get all the Http Operation in the given container.
 * @param program Program
 * @param container Namespace or interface containing operations
 * @param options Resolution options
 * @returns
 */
export declare function listHttpOperationsIn(program: Program, container: OperationContainer, options?: RouteResolutionOptions): [HttpOperation[], readonly Diagnostic[]];
/**
 * Returns all the services defined.
 */
export declare function getAllHttpServices(program: Program, options?: RouteResolutionOptions): [HttpService[], readonly Diagnostic[]];
export declare function getHttpService(program: Program, serviceNamespace: Namespace, options?: RouteResolutionOptions): [HttpService, readonly Diagnostic[]];
/**
 * @deprecated use `getAllHttpServices` instead
 */
export declare function getAllRoutes(program: Program, options?: RouteResolutionOptions): [HttpOperation[], readonly Diagnostic[]];
export declare function reportIfNoRoutes(program: Program, routes: HttpOperation[]): void;
export declare function validateRouteUnique(program: Program, diagnostics: DiagnosticCollector, operations: HttpOperation[]): void;
export declare function isOverloadSameEndpoint(overload: HttpOperation & {
    overloading: HttpOperation;
}): boolean;
//# sourceMappingURL=operations.d.ts.map