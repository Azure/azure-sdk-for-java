import { getProperty, } from "@typespec/compiler";
import { HttpStateKeys } from "./lib.js";
export const namespace = "TypeSpec.Http.Private";
export const $plainData = (context, entity) => {
    const { program } = context;
    const decoratorsToRemove = ["$header", "$body", "$query", "$path", "$statusCode"];
    const [headers, bodies, queries, paths, statusCodes] = [
        program.stateMap(HttpStateKeys.header),
        program.stateSet(HttpStateKeys.body),
        program.stateMap(HttpStateKeys.query),
        program.stateMap(HttpStateKeys.path),
        program.stateMap(HttpStateKeys.statusCode),
    ];
    for (const property of entity.properties.values()) {
        // Remove the decorators so that they do not run in the future, for example,
        // if this model is later spread into another.
        property.decorators = property.decorators.filter((d) => !decoratorsToRemove.includes(d.decorator.name));
        // Remove the impact the decorators already had on this model.
        headers.delete(property);
        bodies.delete(property);
        queries.delete(property);
        paths.delete(property);
        statusCodes.delete(property);
    }
};
export const $httpFile = (context, target) => {
    context.program.stateSet(HttpStateKeys.file).add(target);
};
/**
 * Check if the given type is an `HttpFile`
 */
export function isHttpFile(program, type) {
    return program.stateSet(HttpStateKeys.file).has(type);
}
export function isOrExtendsHttpFile(program, type) {
    if (type.kind !== "Model") {
        return false;
    }
    let current = type;
    while (current) {
        if (isHttpFile(program, current)) {
            return true;
        }
        current = current.baseModel;
    }
    return false;
}
export function getHttpFileModel(program, type) {
    if (type.kind !== "Model" || !isOrExtendsHttpFile(program, type)) {
        return undefined;
    }
    const contentType = getProperty(type, "contentType");
    const filename = getProperty(type, "filename");
    const contents = getProperty(type, "contents");
    return { contents, contentType, filename, type };
}
export const $httpPart = (context, target, type, options) => {
    context.program.stateMap(HttpStateKeys.httpPart).set(target, { type, options });
};
/** Return the http part information on a model that is an `HttpPart` */
export function getHttpPart(program, target) {
    return program.stateMap(HttpStateKeys.httpPart).get(target);
}
//# sourceMappingURL=private.decorators.js.map