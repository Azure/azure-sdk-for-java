// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

import com.azure.autorest.customization.ClassCustomization;
import com.azure.autorest.customization.Customization;
import com.azure.autorest.customization.Editor;
import com.azure.autorest.customization.LibraryCustomization;
import org.slf4j.Logger;

/**
 * Contains customizations for Azure KeyVault's Certificates swagger code generation.
 */
public class CertificatesCustomizations extends Customization {
    @Override
    public void customize(LibraryCustomization libraryCustomization, Logger logger) {
        Editor rawEditor = libraryCustomization.getRawEditor();

        // Remove unnecessary files.
        removeFiles(rawEditor);

        customizeError(libraryCustomization);
        customizeClientImpl(libraryCustomization);
    }

    private static void removeFiles(Editor editor) {
        // Remove the next line in favor of renaming to CertificateServiceVersion once the TSP spec includes all service
        // versions.
        editor.removeFile("src/main/java/com/azure/security/keyvault/certificates/KeyVaultServiceVersion.java");
        editor.removeFile("src/main/java/com/azure/security/keyvault/certificates/CertificateAsyncClient.java");
        editor.removeFile("src/main/java/com/azure/security/keyvault/certificates/CertificateClient.java");
        editor.removeFile("src/main/java/com/azure/security/keyvault/certificates/CertificateClientBuilder.java");
    }

    private static void customizeError(LibraryCustomization libraryCustomization) {
        // Rename error class.
        ClassCustomization classCustomization = libraryCustomization
            .getPackage("com.azure.security.keyvault.certificates.implementation.models")
            .getClass("KeyVaultErrorError")
            .rename("CertificateOperationError")
            .customizeAst(ast ->
                ast.getPackageDeclaration().ifPresent(packageDeclaration ->
                    packageDeclaration.setName("com.azure.security.keyvault.certificates.models")));

        String classPath = "src/main/java/com/azure/security/keyvault/certificates/implementation/models/"
            + "CertificateOperationError.java";

        replaceInFile(classCustomization, classPath,
            new String[] { "KeyVaultErrorError" },
            new String[] { "CertificateOperationError" });

        // Move it to public package.
        libraryCustomization
            .getRawEditor()
            .renameFile(classPath,
                "src/main/java/com/azure/security/keyvault/certificates/models/CertificateOperationError.java");

        // Replace instances in impl CertificateOperationError and add import statement.
        classCustomization = libraryCustomization
            .getPackage("com.azure.security.keyvault.certificates.implementation.models")
            .getClass("CertificateOperation")
            .addImports("com.azure.security.keyvault.certificates.models.CertificateOperationError");
        classPath =
            "src/main/java/com/azure/security/keyvault/certificates/implementation/models/CertificateOperation.java";

        replaceInFile(classCustomization, classPath,
            new String[] { "KeyVaultErrorError" },
            new String[] { "CertificateOperationError" });
    }

    private static void customizeClientImpl(LibraryCustomization libraryCustomization) {
        // Rename the class.
        ClassCustomization classCustomization = libraryCustomization
            .getPackage("com.azure.security.keyvault.certificates.implementation")
            .getClass("CertificateClientImpl");
        String classPath =
            "src/main/java/com/azure/security/keyvault/certificates/implementation/CertificateClientImpl.java";

        String serviceInterfacePagingMethodsOriginal =
            "@Post(\"/deletedcertificates/{certificate-name}/recover\")\n"
                + "        @ExpectedResponses({200})\n"
                + "        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = {401})\n"
                + "        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = {404})\n"
                + "        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = {409})\n"
                + "        @UnexpectedResponseExceptionType(HttpResponseException.class)\n"
                + "        Response<BinaryData> recoverDeletedCertificateSync(@HostParam(\"vaultBaseUrl\") String vaultBaseUrl, @QueryParam(\"api-version\") String apiVersion, @PathParam(\"certificate-name\") String certificateName, @HeaderParam(\"Accept\") String accept, RequestOptions requestOptions, Context context);";
        String serviceInterfacePagingMethodsNew = "@Post(\"/deletedcertificates/{certificate-name}/recover\")\n"
            + "        @ExpectedResponses({ 200 })\n"
            + "        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })\n"
            + "        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })\n"
            + "        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })\n"
            + "        @UnexpectedResponseExceptionType(HttpResponseException.class)\n"
            + "        Response<BinaryData> recoverDeletedCertificateSync(@HostParam(\"vaultBaseUrl\") String vaultBaseUrl,\n"
            + "            @QueryParam(\"api-version\") String apiVersion, @PathParam(\"certificate-name\") String certificateName,\n"
            + "            @HeaderParam(\"Accept\") String accept, RequestOptions requestOptions, Context context);\n"
            + "\n"
            + "        @Get(\"{nextLink}\")\n"
            + "        @ExpectedResponses({ 200 })\n"
            + "        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })\n"
            + "        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })\n"
            + "        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })\n"
            + "        @UnexpectedResponseExceptionType(HttpResponseException.class)\n"
            + "        Mono<Response<BinaryData>> getCertificatesNext(@PathParam(value = \"nextLink\", encoded = true) String nextLink,\n"
            + "            @HostParam(\"vaultBaseUrl\") String vaultBaseUrl, @HeaderParam(\"Accept\") String accept,\n"
            + "            RequestOptions requestOptions, Context context);\n"
            + "\n"
            + "        @Get(\"{nextLink}\")\n"
            + "        @ExpectedResponses({ 200 })\n"
            + "        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })\n"
            + "        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })\n"
            + "        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })\n"
            + "        @UnexpectedResponseExceptionType(HttpResponseException.class)\n"
            + "        Response<BinaryData> getCertificatesNextSync(@PathParam(value = \"nextLink\", encoded = true) String nextLink,\n"
            + "            @HostParam(\"vaultBaseUrl\") String vaultBaseUrl, @HeaderParam(\"Accept\") String accept,\n"
            + "            RequestOptions requestOptions, Context context);\n"
            + "\n"
            + "        @Get(\"{nextLink}\")\n"
            + "        @ExpectedResponses({ 200 })\n"
            + "        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })\n"
            + "        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })\n"
            + "        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })\n"
            + "        @UnexpectedResponseExceptionType(HttpResponseException.class)\n"
            + "        Mono<Response<BinaryData>> getCertificateIssuersNext(\n"
            + "            @PathParam(value = \"nextLink\", encoded = true) String nextLink,\n"
            + "            @HostParam(\"vaultBaseUrl\") String vaultBaseUrl, @HeaderParam(\"Accept\") String accept,\n"
            + "            RequestOptions requestOptions, Context context);\n"
            + "\n"
            + "        @Get(\"{nextLink}\")\n"
            + "        @ExpectedResponses({ 200 })\n"
            + "        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })\n"
            + "        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })\n"
            + "        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })\n"
            + "        @UnexpectedResponseExceptionType(HttpResponseException.class)\n"
            + "        Response<BinaryData> getCertificateIssuersNextSync(\n"
            + "            @PathParam(value = \"nextLink\", encoded = true) String nextLink,\n"
            + "            @HostParam(\"vaultBaseUrl\") String vaultBaseUrl, @HeaderParam(\"Accept\") String accept,\n"
            + "            RequestOptions requestOptions, Context context);\n"
            + "\n"
            + "        @Get(\"{nextLink}\")\n"
            + "        @ExpectedResponses({ 200 })\n"
            + "        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })\n"
            + "        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })\n"
            + "        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })\n"
            + "        @UnexpectedResponseExceptionType(HttpResponseException.class)\n"
            + "        Mono<Response<BinaryData>> getCertificateVersionsNext(\n"
            + "            @PathParam(value = \"nextLink\", encoded = true) String nextLink,\n"
            + "            @HostParam(\"vaultBaseUrl\") String vaultBaseUrl, @HeaderParam(\"Accept\") String accept,\n"
            + "            RequestOptions requestOptions, Context context);\n"
            + "\n"
            + "        @Get(\"{nextLink}\")\n"
            + "        @ExpectedResponses({ 200 })\n"
            + "        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })\n"
            + "        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })\n"
            + "        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })\n"
            + "        @UnexpectedResponseExceptionType(HttpResponseException.class)\n"
            + "        Response<BinaryData> getCertificateVersionsNextSync(\n"
            + "            @PathParam(value = \"nextLink\", encoded = true) String nextLink,\n"
            + "            @HostParam(\"vaultBaseUrl\") String vaultBaseUrl, @HeaderParam(\"Accept\") String accept,\n"
            + "            RequestOptions requestOptions, Context context);\n"
            + "\n"
            + "        @Get(\"{nextLink}\")\n"
            + "        @ExpectedResponses({ 200 })\n"
            + "        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })\n"
            + "        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })\n"
            + "        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })\n"
            + "        @UnexpectedResponseExceptionType(HttpResponseException.class)\n"
            + "        Mono<Response<BinaryData>> getDeletedCertificatesNext(\n"
            + "            @PathParam(value = \"nextLink\", encoded = true) String nextLink,\n"
            + "            @HostParam(\"vaultBaseUrl\") String vaultBaseUrl, @HeaderParam(\"Accept\") String accept,\n"
            + "            RequestOptions requestOptions, Context context);\n"
            + "\n"
            + "        @Get(\"{nextLink}\")\n"
            + "        @ExpectedResponses({ 200 })\n"
            + "        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })\n"
            + "        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })\n"
            + "        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })\n"
            + "        @UnexpectedResponseExceptionType(HttpResponseException.class)\n"
            + "        Response<BinaryData> getDeletedCertificatesNextSync(\n"
            + "            @PathParam(value = \"nextLink\", encoded = true) String nextLink,\n"
            + "            @HostParam(\"vaultBaseUrl\") String vaultBaseUrl, @HeaderParam(\"Accept\") String accept,\n"
            + "            RequestOptions requestOptions, Context context);";
        String recoverDeletedCertificate = "@ServiceMethod(returns = ReturnType.SINGLE)\n"
            + "    public Response<BinaryData> recoverDeletedCertificateWithResponse(String certificateName, RequestOptions requestOptions) {\n"
            + "        final String accept = \"application/json\";\n"
            + "        return service.recoverDeletedCertificateSync(this.getVaultBaseUrl(), this.getServiceVersion().getVersion(), certificateName, accept, requestOptions, Context.NONE);\n"
            + "    }";
        String listCertificates = "/**\n"
            + "     * List certificates in a specified key vault\n"
            + "     * \n"
            + "     * The GetCertificates operation returns the set of certificates resources in the specified key vault. This\n"
            + "     * operation requires the certificates/list permission.\n"
            + "     * <p><strong>Query Parameters</strong></p>\n"
            + "     * <table border=\"1\">\n"
            + "     * <caption>Query Parameters</caption>\n"
            + "     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>\n"
            + "     * <tr><td>maxresults</td><td>Integer</td><td>No</td><td>Maximum number of results to return in a page. If not\n"
            + "     * specified the service will return up to 25 results.</td></tr>\n"
            + "     * <tr><td>includePending</td><td>Boolean</td><td>No</td><td>Specifies whether to include certificates which are not\n"
            + "     * completely provisioned.</td></tr>\n"
            + "     * </table>\n"
            + "     * You can add these to a request with {@link RequestOptions#addQueryParam}\n"
            + "     * <p><strong>Response Body Schema</strong></p>\n"
            + "     * \n"
            + "     * <pre>\n"
            + "     * {@code\n"
            + "     * {\n"
            + "     *     id: String (Optional)\n"
            + "     *     attributes (Optional): {\n"
            + "     *         enabled: Boolean (Optional)\n"
            + "     *         nbf: Long (Optional)\n"
            + "     *         exp: Long (Optional)\n"
            + "     *         created: Long (Optional)\n"
            + "     *         updated: Long (Optional)\n"
            + "     *         recoverableDays: Integer (Optional)\n"
            + "     *         recoveryLevel: String(Purgeable/Recoverable+Purgeable/Recoverable/Recoverable+ProtectedSubscription/CustomizedRecoverable+Purgeable/CustomizedRecoverable/CustomizedRecoverable+ProtectedSubscription) (Optional)\n"
            + "     *     }\n"
            + "     *     tags (Optional): {\n"
            + "     *         String: String (Required)\n"
            + "     *     }\n"
            + "     *     x5t: Base64Url (Optional)\n"
            + "     * }\n"
            + "     * }\n"
            + "     * </pre>\n"
            + "     * \n"
            + "     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.\n"
            + "     * @throws HttpResponseException thrown if the request is rejected by server.\n"
            + "     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.\n"
            + "     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.\n"
            + "     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.\n"
            + "     * @return the certificate list result along with {@link PagedResponse} on successful completion of {@link Mono}.\n"
            + "     */\n"
            + "    @ServiceMethod(returns = ReturnType.SINGLE)\n"
            + "    private Mono<PagedResponse<BinaryData>> getCertificatesSinglePageAsync(RequestOptions requestOptions) {\n"
            + "        final String accept = \"application/json\";\n"
            + "        return FluxUtil\n"
            + "            .withContext(context -> service.getCertificates(this.getVaultBaseUrl(),\n"
            + "                this.getServiceVersion().getVersion(), accept, requestOptions, context))\n"
            + "            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),\n"
            + "                getValues(res.getValue(), \"value\"), getNextLink(res.getValue(), \"nextLink\"), null));\n"
            + "    }\n"
            + "\n"
            + "    /**\n"
            + "     * List certificates in a specified key vault\n"
            + "     * \n"
            + "     * The GetCertificates operation returns the set of certificates resources in the specified key vault. This\n"
            + "     * operation requires the certificates/list permission.\n"
            + "     * <p><strong>Query Parameters</strong></p>\n"
            + "     * <table border=\"1\">\n"
            + "     * <caption>Query Parameters</caption>\n"
            + "     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>\n"
            + "     * <tr><td>maxresults</td><td>Integer</td><td>No</td><td>Maximum number of results to return in a page. If not\n"
            + "     * specified the service will return up to 25 results.</td></tr>\n"
            + "     * <tr><td>includePending</td><td>Boolean</td><td>No</td><td>Specifies whether to include certificates which are not\n"
            + "     * completely provisioned.</td></tr>\n"
            + "     * </table>\n"
            + "     * You can add these to a request with {@link RequestOptions#addQueryParam}\n"
            + "     * <p><strong>Response Body Schema</strong></p>\n"
            + "     * \n"
            + "     * <pre>\n"
            + "     * {@code\n"
            + "     * {\n"
            + "     *     id: String (Optional)\n"
            + "     *     attributes (Optional): {\n"
            + "     *         enabled: Boolean (Optional)\n"
            + "     *         nbf: Long (Optional)\n"
            + "     *         exp: Long (Optional)\n"
            + "     *         created: Long (Optional)\n"
            + "     *         updated: Long (Optional)\n"
            + "     *         recoverableDays: Integer (Optional)\n"
            + "     *         recoveryLevel: String(Purgeable/Recoverable+Purgeable/Recoverable/Recoverable+ProtectedSubscription/CustomizedRecoverable+Purgeable/CustomizedRecoverable/CustomizedRecoverable+ProtectedSubscription) (Optional)\n"
            + "     *     }\n"
            + "     *     tags (Optional): {\n"
            + "     *         String: String (Required)\n"
            + "     *     }\n"
            + "     *     x5t: Base64Url (Optional)\n"
            + "     * }\n"
            + "     * }\n"
            + "     * </pre>\n"
            + "     * \n"
            + "     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.\n"
            + "     * @throws HttpResponseException thrown if the request is rejected by server.\n"
            + "     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.\n"
            + "     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.\n"
            + "     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.\n"
            + "     * @return the certificate list result as paginated response with {@link PagedFlux}.\n"
            + "     */\n"
            + "    @ServiceMethod(returns = ReturnType.COLLECTION)\n"
            + "    public PagedFlux<BinaryData> getCertificatesAsync(RequestOptions requestOptions) {\n"
            + "        RequestOptions requestOptionsForNextPage = new RequestOptions();\n"
            + "        requestOptionsForNextPage.setContext(\n"
            + "            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);\n"
            + "        return new PagedFlux<>(() -> getCertificatesSinglePageAsync(requestOptions),\n"
            + "            nextLink -> getCertificatesNextSinglePageAsync(nextLink, requestOptionsForNextPage));\n"
            + "    }\n"
            + "\n"
            + "    /**\n"
            + "     * List certificates in a specified key vault\n"
            + "     * \n"
            + "     * The GetCertificates operation returns the set of certificates resources in the specified key vault. This\n"
            + "     * operation requires the certificates/list permission.\n"
            + "     * <p><strong>Query Parameters</strong></p>\n"
            + "     * <table border=\"1\">\n"
            + "     * <caption>Query Parameters</caption>\n"
            + "     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>\n"
            + "     * <tr><td>maxresults</td><td>Integer</td><td>No</td><td>Maximum number of results to return in a page. If not\n"
            + "     * specified the service will return up to 25 results.</td></tr>\n"
            + "     * <tr><td>includePending</td><td>Boolean</td><td>No</td><td>Specifies whether to include certificates which are not\n"
            + "     * completely provisioned.</td></tr>\n"
            + "     * </table>\n"
            + "     * You can add these to a request with {@link RequestOptions#addQueryParam}\n"
            + "     * <p><strong>Response Body Schema</strong></p>\n"
            + "     * \n"
            + "     * <pre>\n"
            + "     * {@code\n"
            + "     * {\n"
            + "     *     id: String (Optional)\n"
            + "     *     attributes (Optional): {\n"
            + "     *         enabled: Boolean (Optional)\n"
            + "     *         nbf: Long (Optional)\n"
            + "     *         exp: Long (Optional)\n"
            + "     *         created: Long (Optional)\n"
            + "     *         updated: Long (Optional)\n"
            + "     *         recoverableDays: Integer (Optional)\n"
            + "     *         recoveryLevel: String(Purgeable/Recoverable+Purgeable/Recoverable/Recoverable+ProtectedSubscription/CustomizedRecoverable+Purgeable/CustomizedRecoverable/CustomizedRecoverable+ProtectedSubscription) (Optional)\n"
            + "     *     }\n"
            + "     *     tags (Optional): {\n"
            + "     *         String: String (Required)\n"
            + "     *     }\n"
            + "     *     x5t: Base64Url (Optional)\n"
            + "     * }\n"
            + "     * }\n"
            + "     * </pre>\n"
            + "     * \n"
            + "     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.\n"
            + "     * @throws HttpResponseException thrown if the request is rejected by server.\n"
            + "     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.\n"
            + "     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.\n"
            + "     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.\n"
            + "     * @return the certificate list result along with {@link PagedResponse}.\n"
            + "     */\n"
            + "    @ServiceMethod(returns = ReturnType.SINGLE)\n"
            + "    private PagedResponse<BinaryData> getCertificatesSinglePage(RequestOptions requestOptions) {\n"
            + "        final String accept = \"application/json\";\n"
            + "        Response<BinaryData> res = service.getCertificatesSync(this.getVaultBaseUrl(),\n"
            + "            this.getServiceVersion().getVersion(), accept, requestOptions, Context.NONE);\n"
            + "        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),\n"
            + "            getValues(res.getValue(), \"value\"), getNextLink(res.getValue(), \"nextLink\"), null);\n"
            + "    }\n"
            + "\n"
            + "    /**\n"
            + "     * List certificates in a specified key vault\n"
            + "     * \n"
            + "     * The GetCertificates operation returns the set of certificates resources in the specified key vault. This\n"
            + "     * operation requires the certificates/list permission.\n"
            + "     * <p><strong>Query Parameters</strong></p>\n"
            + "     * <table border=\"1\">\n"
            + "     * <caption>Query Parameters</caption>\n"
            + "     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>\n"
            + "     * <tr><td>maxresults</td><td>Integer</td><td>No</td><td>Maximum number of results to return in a page. If not\n"
            + "     * specified the service will return up to 25 results.</td></tr>\n"
            + "     * <tr><td>includePending</td><td>Boolean</td><td>No</td><td>Specifies whether to include certificates which are not\n"
            + "     * completely provisioned.</td></tr>\n"
            + "     * </table>\n"
            + "     * You can add these to a request with {@link RequestOptions#addQueryParam}\n"
            + "     * <p><strong>Response Body Schema</strong></p>\n"
            + "     * \n"
            + "     * <pre>\n"
            + "     * {@code\n"
            + "     * {\n"
            + "     *     id: String (Optional)\n"
            + "     *     attributes (Optional): {\n"
            + "     *         enabled: Boolean (Optional)\n"
            + "     *         nbf: Long (Optional)\n"
            + "     *         exp: Long (Optional)\n"
            + "     *         created: Long (Optional)\n"
            + "     *         updated: Long (Optional)\n"
            + "     *         recoverableDays: Integer (Optional)\n"
            + "     *         recoveryLevel: String(Purgeable/Recoverable+Purgeable/Recoverable/Recoverable+ProtectedSubscription/CustomizedRecoverable+Purgeable/CustomizedRecoverable/CustomizedRecoverable+ProtectedSubscription) (Optional)\n"
            + "     *     }\n"
            + "     *     tags (Optional): {\n"
            + "     *         String: String (Required)\n"
            + "     *     }\n"
            + "     *     x5t: Base64Url (Optional)\n"
            + "     * }\n"
            + "     * }\n"
            + "     * </pre>\n"
            + "     * \n"
            + "     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.\n"
            + "     * @throws HttpResponseException thrown if the request is rejected by server.\n"
            + "     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.\n"
            + "     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.\n"
            + "     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.\n"
            + "     * @return the certificate list result as paginated response with {@link PagedIterable}.\n"
            + "     */\n"
            + "    @ServiceMethod(returns = ReturnType.COLLECTION)\n"
            + "    public PagedIterable<BinaryData> getCertificates(RequestOptions requestOptions) {\n"
            + "        RequestOptions requestOptionsForNextPage = new RequestOptions();\n"
            + "        requestOptionsForNextPage.setContext(\n"
            + "            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);\n"
            + "        return new PagedIterable<>(() -> getCertificatesSinglePage(requestOptions),\n"
            + "            nextLink -> getCertificatesNextSinglePage(nextLink, requestOptionsForNextPage));\n"
            + "    }";
        String listIssuers = "/**\n"
            + "     * List certificate issuers for a specified key vault.\n"
            + "     * \n"
            + "     * The GetCertificateIssuers operation returns the set of certificate issuer resources in the specified key vault.\n"
            + "     * This operation requires the certificates/manageissuers/getissuers permission.\n"
            + "     * <p><strong>Query Parameters</strong></p>\n"
            + "     * <table border=\"1\">\n"
            + "     * <caption>Query Parameters</caption>\n"
            + "     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>\n"
            + "     * <tr><td>maxresults</td><td>Integer</td><td>No</td><td>Maximum number of results to return in a page. If not\n"
            + "     * specified the service will return up to 25 results.</td></tr>\n"
            + "     * </table>\n"
            + "     * You can add these to a request with {@link RequestOptions#addQueryParam}\n"
            + "     * <p><strong>Response Body Schema</strong></p>\n"
            + "     * \n"
            + "     * <pre>\n"
            + "     * {@code\n"
            + "     * {\n"
            + "     *     id: String (Optional)\n"
            + "     *     provider: String (Optional)\n"
            + "     * }\n"
            + "     * }\n"
            + "     * </pre>\n"
            + "     * \n"
            + "     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.\n"
            + "     * @throws HttpResponseException thrown if the request is rejected by server.\n"
            + "     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.\n"
            + "     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.\n"
            + "     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.\n"
            + "     * @return the certificate issuer list result along with {@link PagedResponse} on successful completion of\n"
            + "     * {@link Mono}.\n"
            + "     */\n"
            + "    @ServiceMethod(returns = ReturnType.SINGLE)\n"
            + "    private Mono<PagedResponse<BinaryData>> getCertificateIssuersSinglePageAsync(RequestOptions requestOptions) {\n"
            + "        final String accept = \"application/json\";\n"
            + "        return FluxUtil\n"
            + "            .withContext(context -> service.getCertificateIssuers(this.getVaultBaseUrl(),\n"
            + "                this.getServiceVersion().getVersion(), accept, requestOptions, context))\n"
            + "            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),\n"
            + "                getValues(res.getValue(), \"value\"), getNextLink(res.getValue(), \"nextLink\"), null));\n"
            + "    }\n"
            + "\n"
            + "    /**\n"
            + "     * List certificate issuers for a specified key vault.\n"
            + "     * \n"
            + "     * The GetCertificateIssuers operation returns the set of certificate issuer resources in the specified key vault.\n"
            + "     * This operation requires the certificates/manageissuers/getissuers permission.\n"
            + "     * <p><strong>Query Parameters</strong></p>\n"
            + "     * <table border=\"1\">\n"
            + "     * <caption>Query Parameters</caption>\n"
            + "     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>\n"
            + "     * <tr><td>maxresults</td><td>Integer</td><td>No</td><td>Maximum number of results to return in a page. If not\n"
            + "     * specified the service will return up to 25 results.</td></tr>\n"
            + "     * </table>\n"
            + "     * You can add these to a request with {@link RequestOptions#addQueryParam}\n"
            + "     * <p><strong>Response Body Schema</strong></p>\n"
            + "     * \n"
            + "     * <pre>\n"
            + "     * {@code\n"
            + "     * {\n"
            + "     *     id: String (Optional)\n"
            + "     *     provider: String (Optional)\n"
            + "     * }\n"
            + "     * }\n"
            + "     * </pre>\n"
            + "     * \n"
            + "     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.\n"
            + "     * @throws HttpResponseException thrown if the request is rejected by server.\n"
            + "     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.\n"
            + "     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.\n"
            + "     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.\n"
            + "     * @return the certificate issuer list result as paginated response with {@link PagedFlux}.\n"
            + "     */\n"
            + "    @ServiceMethod(returns = ReturnType.COLLECTION)\n"
            + "    public PagedFlux<BinaryData> getCertificateIssuersAsync(RequestOptions requestOptions) {\n"
            + "        RequestOptions requestOptionsForNextPage = new RequestOptions();\n"
            + "        requestOptionsForNextPage.setContext(\n"
            + "            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);\n"
            + "        return new PagedFlux<>(() -> getCertificateIssuersSinglePageAsync(requestOptions),\n"
            + "            nextLink -> getCertificateIssuersNextSinglePageAsync(nextLink, requestOptionsForNextPage));\n"
            + "    }\n"
            + "\n"
            + "    /**\n"
            + "     * List certificate issuers for a specified key vault.\n"
            + "     * \n"
            + "     * The GetCertificateIssuers operation returns the set of certificate issuer resources in the specified key vault.\n"
            + "     * This operation requires the certificates/manageissuers/getissuers permission.\n"
            + "     * <p><strong>Query Parameters</strong></p>\n"
            + "     * <table border=\"1\">\n"
            + "     * <caption>Query Parameters</caption>\n"
            + "     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>\n"
            + "     * <tr><td>maxresults</td><td>Integer</td><td>No</td><td>Maximum number of results to return in a page. If not\n"
            + "     * specified the service will return up to 25 results.</td></tr>\n"
            + "     * </table>\n"
            + "     * You can add these to a request with {@link RequestOptions#addQueryParam}\n"
            + "     * <p><strong>Response Body Schema</strong></p>\n"
            + "     * \n"
            + "     * <pre>\n"
            + "     * {@code\n"
            + "     * {\n"
            + "     *     id: String (Optional)\n"
            + "     *     provider: String (Optional)\n"
            + "     * }\n"
            + "     * }\n"
            + "     * </pre>\n"
            + "     * \n"
            + "     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.\n"
            + "     * @throws HttpResponseException thrown if the request is rejected by server.\n"
            + "     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.\n"
            + "     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.\n"
            + "     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.\n"
            + "     * @return the certificate issuer list result along with {@link PagedResponse}.\n"
            + "     */\n"
            + "    @ServiceMethod(returns = ReturnType.SINGLE)\n"
            + "    private PagedResponse<BinaryData> getCertificateIssuersSinglePage(RequestOptions requestOptions) {\n"
            + "        final String accept = \"application/json\";\n"
            + "        Response<BinaryData> res = service.getCertificateIssuersSync(this.getVaultBaseUrl(),\n"
            + "            this.getServiceVersion().getVersion(), accept, requestOptions, Context.NONE);\n"
            + "        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),\n"
            + "            getValues(res.getValue(), \"value\"), getNextLink(res.getValue(), \"nextLink\"), null);\n"
            + "    }\n"
            + "\n"
            + "    /**\n"
            + "     * List certificate issuers for a specified key vault.\n"
            + "     * \n"
            + "     * The GetCertificateIssuers operation returns the set of certificate issuer resources in the specified key vault.\n"
            + "     * This operation requires the certificates/manageissuers/getissuers permission.\n"
            + "     * <p><strong>Query Parameters</strong></p>\n"
            + "     * <table border=\"1\">\n"
            + "     * <caption>Query Parameters</caption>\n"
            + "     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>\n"
            + "     * <tr><td>maxresults</td><td>Integer</td><td>No</td><td>Maximum number of results to return in a page. If not\n"
            + "     * specified the service will return up to 25 results.</td></tr>\n"
            + "     * </table>\n"
            + "     * You can add these to a request with {@link RequestOptions#addQueryParam}\n"
            + "     * <p><strong>Response Body Schema</strong></p>\n"
            + "     * \n"
            + "     * <pre>\n"
            + "     * {@code\n"
            + "     * {\n"
            + "     *     id: String (Optional)\n"
            + "     *     provider: String (Optional)\n"
            + "     * }\n"
            + "     * }\n"
            + "     * </pre>\n"
            + "     * \n"
            + "     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.\n"
            + "     * @throws HttpResponseException thrown if the request is rejected by server.\n"
            + "     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.\n"
            + "     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.\n"
            + "     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.\n"
            + "     * @return the certificate issuer list result as paginated response with {@link PagedIterable}.\n"
            + "     */\n"
            + "    @ServiceMethod(returns = ReturnType.COLLECTION)\n"
            + "    public PagedIterable<BinaryData> getCertificateIssuers(RequestOptions requestOptions) {\n"
            + "        RequestOptions requestOptionsForNextPage = new RequestOptions();\n"
            + "        requestOptionsForNextPage.setContext(\n"
            + "            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);\n"
            + "        return new PagedIterable<>(() -> getCertificateIssuersSinglePage(requestOptions),\n"
            + "            nextLink -> getCertificateIssuersNextSinglePage(nextLink, requestOptionsForNextPage));\n"
            + "    }";
        String listCertificateVersions = "/**\n"
            + "     * List the versions of a certificate.\n"
            + "     * \n"
            + "     * The GetCertificateVersions operation returns the versions of a certificate in the specified key vault. This\n"
            + "     * operation requires the certificates/list permission.\n"
            + "     * <p><strong>Query Parameters</strong></p>\n"
            + "     * <table border=\"1\">\n"
            + "     * <caption>Query Parameters</caption>\n"
            + "     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>\n"
            + "     * <tr><td>maxresults</td><td>Integer</td><td>No</td><td>Maximum number of results to return in a page. If not\n"
            + "     * specified the service will return up to 25 results.</td></tr>\n"
            + "     * </table>\n"
            + "     * You can add these to a request with {@link RequestOptions#addQueryParam}\n"
            + "     * <p><strong>Response Body Schema</strong></p>\n"
            + "     * \n"
            + "     * <pre>\n"
            + "     * {@code\n"
            + "     * {\n"
            + "     *     id: String (Optional)\n"
            + "     *     attributes (Optional): {\n"
            + "     *         enabled: Boolean (Optional)\n"
            + "     *         nbf: Long (Optional)\n"
            + "     *         exp: Long (Optional)\n"
            + "     *         created: Long (Optional)\n"
            + "     *         updated: Long (Optional)\n"
            + "     *         recoverableDays: Integer (Optional)\n"
            + "     *         recoveryLevel: String(Purgeable/Recoverable+Purgeable/Recoverable/Recoverable+ProtectedSubscription/CustomizedRecoverable+Purgeable/CustomizedRecoverable/CustomizedRecoverable+ProtectedSubscription) (Optional)\n"
            + "     *     }\n"
            + "     *     tags (Optional): {\n"
            + "     *         String: String (Required)\n"
            + "     *     }\n"
            + "     *     x5t: Base64Url (Optional)\n"
            + "     * }\n"
            + "     * }\n"
            + "     * </pre>\n"
            + "     * \n"
            + "     * @param certificateName The name of the certificate.\n"
            + "     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.\n"
            + "     * @throws HttpResponseException thrown if the request is rejected by server.\n"
            + "     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.\n"
            + "     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.\n"
            + "     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.\n"
            + "     * @return the certificate list result along with {@link PagedResponse} on successful completion of {@link Mono}.\n"
            + "     */\n"
            + "    @ServiceMethod(returns = ReturnType.SINGLE)\n"
            + "    private Mono<PagedResponse<BinaryData>> getCertificateVersionsSinglePageAsync(String certificateName,\n"
            + "        RequestOptions requestOptions) {\n"
            + "        final String accept = \"application/json\";\n"
            + "        return FluxUtil\n"
            + "            .withContext(context -> service.getCertificateVersions(this.getVaultBaseUrl(),\n"
            + "                this.getServiceVersion().getVersion(), certificateName, accept, requestOptions, context))\n"
            + "            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),\n"
            + "                getValues(res.getValue(), \"value\"), getNextLink(res.getValue(), \"nextLink\"), null));\n"
            + "    }\n"
            + "\n"
            + "    /**\n"
            + "     * List the versions of a certificate.\n"
            + "     * \n"
            + "     * The GetCertificateVersions operation returns the versions of a certificate in the specified key vault. This\n"
            + "     * operation requires the certificates/list permission.\n"
            + "     * <p><strong>Query Parameters</strong></p>\n"
            + "     * <table border=\"1\">\n"
            + "     * <caption>Query Parameters</caption>\n"
            + "     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>\n"
            + "     * <tr><td>maxresults</td><td>Integer</td><td>No</td><td>Maximum number of results to return in a page. If not\n"
            + "     * specified the service will return up to 25 results.</td></tr>\n"
            + "     * </table>\n"
            + "     * You can add these to a request with {@link RequestOptions#addQueryParam}\n"
            + "     * <p><strong>Response Body Schema</strong></p>\n"
            + "     * \n"
            + "     * <pre>\n"
            + "     * {@code\n"
            + "     * {\n"
            + "     *     id: String (Optional)\n"
            + "     *     attributes (Optional): {\n"
            + "     *         enabled: Boolean (Optional)\n"
            + "     *         nbf: Long (Optional)\n"
            + "     *         exp: Long (Optional)\n"
            + "     *         created: Long (Optional)\n"
            + "     *         updated: Long (Optional)\n"
            + "     *         recoverableDays: Integer (Optional)\n"
            + "     *         recoveryLevel: String(Purgeable/Recoverable+Purgeable/Recoverable/Recoverable+ProtectedSubscription/CustomizedRecoverable+Purgeable/CustomizedRecoverable/CustomizedRecoverable+ProtectedSubscription) (Optional)\n"
            + "     *     }\n"
            + "     *     tags (Optional): {\n"
            + "     *         String: String (Required)\n"
            + "     *     }\n"
            + "     *     x5t: Base64Url (Optional)\n"
            + "     * }\n"
            + "     * }\n"
            + "     * </pre>\n"
            + "     * \n"
            + "     * @param certificateName The name of the certificate.\n"
            + "     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.\n"
            + "     * @throws HttpResponseException thrown if the request is rejected by server.\n"
            + "     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.\n"
            + "     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.\n"
            + "     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.\n"
            + "     * @return the certificate list result as paginated response with {@link PagedFlux}.\n"
            + "     */\n"
            + "    @ServiceMethod(returns = ReturnType.COLLECTION)\n"
            + "    public PagedFlux<BinaryData> getCertificateVersionsAsync(String certificateName, RequestOptions requestOptions) {\n"
            + "        RequestOptions requestOptionsForNextPage = new RequestOptions();\n"
            + "        requestOptionsForNextPage.setContext(\n"
            + "            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);\n"
            + "        return new PagedFlux<>(() -> getCertificateVersionsSinglePageAsync(certificateName, requestOptions),\n"
            + "            nextLink -> getCertificateVersionsNextSinglePageAsync(nextLink, requestOptionsForNextPage));\n"
            + "    }\n"
            + "\n"
            + "    /**\n"
            + "     * List the versions of a certificate.\n"
            + "     * \n"
            + "     * The GetCertificateVersions operation returns the versions of a certificate in the specified key vault. This\n"
            + "     * operation requires the certificates/list permission.\n"
            + "     * <p><strong>Query Parameters</strong></p>\n"
            + "     * <table border=\"1\">\n"
            + "     * <caption>Query Parameters</caption>\n"
            + "     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>\n"
            + "     * <tr><td>maxresults</td><td>Integer</td><td>No</td><td>Maximum number of results to return in a page. If not\n"
            + "     * specified the service will return up to 25 results.</td></tr>\n"
            + "     * </table>\n"
            + "     * You can add these to a request with {@link RequestOptions#addQueryParam}\n"
            + "     * <p><strong>Response Body Schema</strong></p>\n"
            + "     * \n"
            + "     * <pre>\n"
            + "     * {@code\n"
            + "     * {\n"
            + "     *     id: String (Optional)\n"
            + "     *     attributes (Optional): {\n"
            + "     *         enabled: Boolean (Optional)\n"
            + "     *         nbf: Long (Optional)\n"
            + "     *         exp: Long (Optional)\n"
            + "     *         created: Long (Optional)\n"
            + "     *         updated: Long (Optional)\n"
            + "     *         recoverableDays: Integer (Optional)\n"
            + "     *         recoveryLevel: String(Purgeable/Recoverable+Purgeable/Recoverable/Recoverable+ProtectedSubscription/CustomizedRecoverable+Purgeable/CustomizedRecoverable/CustomizedRecoverable+ProtectedSubscription) (Optional)\n"
            + "     *     }\n"
            + "     *     tags (Optional): {\n"
            + "     *         String: String (Required)\n"
            + "     *     }\n"
            + "     *     x5t: Base64Url (Optional)\n"
            + "     * }\n"
            + "     * }\n"
            + "     * </pre>\n"
            + "     * \n"
            + "     * @param certificateName The name of the certificate.\n"
            + "     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.\n"
            + "     * @throws HttpResponseException thrown if the request is rejected by server.\n"
            + "     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.\n"
            + "     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.\n"
            + "     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.\n"
            + "     * @return the certificate list result along with {@link PagedResponse}.\n"
            + "     */\n"
            + "    @ServiceMethod(returns = ReturnType.SINGLE)\n"
            + "    private PagedResponse<BinaryData> getCertificateVersionsSinglePage(String certificateName,\n"
            + "        RequestOptions requestOptions) {\n"
            + "        final String accept = \"application/json\";\n"
            + "        Response<BinaryData> res = service.getCertificateVersionsSync(this.getVaultBaseUrl(),\n"
            + "            this.getServiceVersion().getVersion(), certificateName, accept, requestOptions, Context.NONE);\n"
            + "        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),\n"
            + "            getValues(res.getValue(), \"value\"), getNextLink(res.getValue(), \"nextLink\"), null);\n"
            + "    }\n"
            + "\n"
            + "    /**\n"
            + "     * List the versions of a certificate.\n"
            + "     * \n"
            + "     * The GetCertificateVersions operation returns the versions of a certificate in the specified key vault. This\n"
            + "     * operation requires the certificates/list permission.\n"
            + "     * <p><strong>Query Parameters</strong></p>\n"
            + "     * <table border=\"1\">\n"
            + "     * <caption>Query Parameters</caption>\n"
            + "     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>\n"
            + "     * <tr><td>maxresults</td><td>Integer</td><td>No</td><td>Maximum number of results to return in a page. If not\n"
            + "     * specified the service will return up to 25 results.</td></tr>\n"
            + "     * </table>\n"
            + "     * You can add these to a request with {@link RequestOptions#addQueryParam}\n"
            + "     * <p><strong>Response Body Schema</strong></p>\n"
            + "     * \n"
            + "     * <pre>\n"
            + "     * {@code\n"
            + "     * {\n"
            + "     *     id: String (Optional)\n"
            + "     *     attributes (Optional): {\n"
            + "     *         enabled: Boolean (Optional)\n"
            + "     *         nbf: Long (Optional)\n"
            + "     *         exp: Long (Optional)\n"
            + "     *         created: Long (Optional)\n"
            + "     *         updated: Long (Optional)\n"
            + "     *         recoverableDays: Integer (Optional)\n"
            + "     *         recoveryLevel: String(Purgeable/Recoverable+Purgeable/Recoverable/Recoverable+ProtectedSubscription/CustomizedRecoverable+Purgeable/CustomizedRecoverable/CustomizedRecoverable+ProtectedSubscription) (Optional)\n"
            + "     *     }\n"
            + "     *     tags (Optional): {\n"
            + "     *         String: String (Required)\n"
            + "     *     }\n"
            + "     *     x5t: Base64Url (Optional)\n"
            + "     * }\n"
            + "     * }\n"
            + "     * </pre>\n"
            + "     * \n"
            + "     * @param certificateName The name of the certificate.\n"
            + "     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.\n"
            + "     * @throws HttpResponseException thrown if the request is rejected by server.\n"
            + "     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.\n"
            + "     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.\n"
            + "     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.\n"
            + "     * @return the certificate list result as paginated response with {@link PagedIterable}.\n"
            + "     */\n"
            + "    @ServiceMethod(returns = ReturnType.COLLECTION)\n"
            + "    public PagedIterable<BinaryData> getCertificateVersions(String certificateName, RequestOptions requestOptions) {\n"
            + "        RequestOptions requestOptionsForNextPage = new RequestOptions();\n"
            + "        requestOptionsForNextPage.setContext(\n"
            + "            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);\n"
            + "        return new PagedIterable<>(() -> getCertificateVersionsSinglePage(certificateName, requestOptions),\n"
            + "            nextLink -> getCertificateVersionsNextSinglePage(nextLink, requestOptionsForNextPage));\n"
            + "    }";
        String listDeletedCertificates = "/**\n"
            + "     * Lists the deleted certificates in the specified vault currently available for recovery.\n"
            + "     * \n"
            + "     * The GetDeletedCertificates operation retrieves the certificates in the current vault which are in a deleted state\n"
            + "     * and ready for recovery or purging. This operation includes deletion-specific information. This operation requires\n"
            + "     * the certificates/get/list permission. This operation can only be enabled on soft-delete enabled vaults.\n"
            + "     * <p><strong>Query Parameters</strong></p>\n"
            + "     * <table border=\"1\">\n"
            + "     * <caption>Query Parameters</caption>\n"
            + "     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>\n"
            + "     * <tr><td>maxresults</td><td>Integer</td><td>No</td><td>Maximum number of results to return in a page. If not\n"
            + "     * specified the service will return up to 25 results.</td></tr>\n"
            + "     * <tr><td>includePending</td><td>Boolean</td><td>No</td><td>Specifies whether to include certificates which are not\n"
            + "     * completely provisioned.</td></tr>\n"
            + "     * </table>\n"
            + "     * You can add these to a request with {@link RequestOptions#addQueryParam}\n"
            + "     * <p><strong>Response Body Schema</strong></p>\n"
            + "     * \n"
            + "     * <pre>\n"
            + "     * {@code\n"
            + "     * {\n"
            + "     *     id: String (Optional)\n"
            + "     *     attributes (Optional): {\n"
            + "     *         enabled: Boolean (Optional)\n"
            + "     *         nbf: Long (Optional)\n"
            + "     *         exp: Long (Optional)\n"
            + "     *         created: Long (Optional)\n"
            + "     *         updated: Long (Optional)\n"
            + "     *         recoverableDays: Integer (Optional)\n"
            + "     *         recoveryLevel: String(Purgeable/Recoverable+Purgeable/Recoverable/Recoverable+ProtectedSubscription/CustomizedRecoverable+Purgeable/CustomizedRecoverable/CustomizedRecoverable+ProtectedSubscription) (Optional)\n"
            + "     *     }\n"
            + "     *     tags (Optional): {\n"
            + "     *         String: String (Required)\n"
            + "     *     }\n"
            + "     *     x5t: Base64Url (Optional)\n"
            + "     *     recoveryId: String (Optional)\n"
            + "     *     scheduledPurgeDate: Long (Optional)\n"
            + "     *     deletedDate: Long (Optional)\n"
            + "     * }\n"
            + "     * }\n"
            + "     * </pre>\n"
            + "     * \n"
            + "     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.\n"
            + "     * @throws HttpResponseException thrown if the request is rejected by server.\n"
            + "     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.\n"
            + "     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.\n"
            + "     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.\n"
            + "     * @return a list of certificates that have been deleted in this vault along with {@link PagedResponse} on\n"
            + "     * successful completion of {@link Mono}.\n"
            + "     */\n"
            + "    @ServiceMethod(returns = ReturnType.SINGLE)\n"
            + "    private Mono<PagedResponse<BinaryData>> getDeletedCertificatesSinglePageAsync(RequestOptions requestOptions) {\n"
            + "        final String accept = \"application/json\";\n"
            + "        return FluxUtil\n"
            + "            .withContext(context -> service.getDeletedCertificates(this.getVaultBaseUrl(),\n"
            + "                this.getServiceVersion().getVersion(), accept, requestOptions, context))\n"
            + "            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),\n"
            + "                getValues(res.getValue(), \"value\"), getNextLink(res.getValue(), \"nextLink\"), null));\n"
            + "    }\n"
            + "\n"
            + "    /**\n"
            + "     * Lists the deleted certificates in the specified vault currently available for recovery.\n"
            + "     * \n"
            + "     * The GetDeletedCertificates operation retrieves the certificates in the current vault which are in a deleted state\n"
            + "     * and ready for recovery or purging. This operation includes deletion-specific information. This operation requires\n"
            + "     * the certificates/get/list permission. This operation can only be enabled on soft-delete enabled vaults.\n"
            + "     * <p><strong>Query Parameters</strong></p>\n"
            + "     * <table border=\"1\">\n"
            + "     * <caption>Query Parameters</caption>\n"
            + "     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>\n"
            + "     * <tr><td>maxresults</td><td>Integer</td><td>No</td><td>Maximum number of results to return in a page. If not\n"
            + "     * specified the service will return up to 25 results.</td></tr>\n"
            + "     * <tr><td>includePending</td><td>Boolean</td><td>No</td><td>Specifies whether to include certificates which are not\n"
            + "     * completely provisioned.</td></tr>\n"
            + "     * </table>\n"
            + "     * You can add these to a request with {@link RequestOptions#addQueryParam}\n"
            + "     * <p><strong>Response Body Schema</strong></p>\n"
            + "     * \n"
            + "     * <pre>\n"
            + "     * {@code\n"
            + "     * {\n"
            + "     *     id: String (Optional)\n"
            + "     *     attributes (Optional): {\n"
            + "     *         enabled: Boolean (Optional)\n"
            + "     *         nbf: Long (Optional)\n"
            + "     *         exp: Long (Optional)\n"
            + "     *         created: Long (Optional)\n"
            + "     *         updated: Long (Optional)\n"
            + "     *         recoverableDays: Integer (Optional)\n"
            + "     *         recoveryLevel: String(Purgeable/Recoverable+Purgeable/Recoverable/Recoverable+ProtectedSubscription/CustomizedRecoverable+Purgeable/CustomizedRecoverable/CustomizedRecoverable+ProtectedSubscription) (Optional)\n"
            + "     *     }\n"
            + "     *     tags (Optional): {\n"
            + "     *         String: String (Required)\n"
            + "     *     }\n"
            + "     *     x5t: Base64Url (Optional)\n"
            + "     *     recoveryId: String (Optional)\n"
            + "     *     scheduledPurgeDate: Long (Optional)\n"
            + "     *     deletedDate: Long (Optional)\n"
            + "     * }\n"
            + "     * }\n"
            + "     * </pre>\n"
            + "     * \n"
            + "     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.\n"
            + "     * @throws HttpResponseException thrown if the request is rejected by server.\n"
            + "     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.\n"
            + "     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.\n"
            + "     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.\n"
            + "     * @return a list of certificates that have been deleted in this vault as paginated response with {@link PagedFlux}.\n"
            + "     */\n"
            + "    @ServiceMethod(returns = ReturnType.COLLECTION)\n"
            + "    public PagedFlux<BinaryData> getDeletedCertificatesAsync(RequestOptions requestOptions) {\n"
            + "        RequestOptions requestOptionsForNextPage = new RequestOptions();\n"
            + "        requestOptionsForNextPage.setContext(\n"
            + "            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);\n"
            + "        return new PagedFlux<>(() -> getDeletedCertificatesSinglePageAsync(requestOptions),\n"
            + "            nextLink -> getDeletedCertificatesNextSinglePageAsync(nextLink, requestOptionsForNextPage));\n"
            + "    }\n"
            + "\n"
            + "    /**\n"
            + "     * Lists the deleted certificates in the specified vault currently available for recovery.\n"
            + "     * \n"
            + "     * The GetDeletedCertificates operation retrieves the certificates in the current vault which are in a deleted state\n"
            + "     * and ready for recovery or purging. This operation includes deletion-specific information. This operation requires\n"
            + "     * the certificates/get/list permission. This operation can only be enabled on soft-delete enabled vaults.\n"
            + "     * <p><strong>Query Parameters</strong></p>\n"
            + "     * <table border=\"1\">\n"
            + "     * <caption>Query Parameters</caption>\n"
            + "     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>\n"
            + "     * <tr><td>maxresults</td><td>Integer</td><td>No</td><td>Maximum number of results to return in a page. If not\n"
            + "     * specified the service will return up to 25 results.</td></tr>\n"
            + "     * <tr><td>includePending</td><td>Boolean</td><td>No</td><td>Specifies whether to include certificates which are not\n"
            + "     * completely provisioned.</td></tr>\n"
            + "     * </table>\n"
            + "     * You can add these to a request with {@link RequestOptions#addQueryParam}\n"
            + "     * <p><strong>Response Body Schema</strong></p>\n"
            + "     * \n"
            + "     * <pre>\n"
            + "     * {@code\n"
            + "     * {\n"
            + "     *     id: String (Optional)\n"
            + "     *     attributes (Optional): {\n"
            + "     *         enabled: Boolean (Optional)\n"
            + "     *         nbf: Long (Optional)\n"
            + "     *         exp: Long (Optional)\n"
            + "     *         created: Long (Optional)\n"
            + "     *         updated: Long (Optional)\n"
            + "     *         recoverableDays: Integer (Optional)\n"
            + "     *         recoveryLevel: String(Purgeable/Recoverable+Purgeable/Recoverable/Recoverable+ProtectedSubscription/CustomizedRecoverable+Purgeable/CustomizedRecoverable/CustomizedRecoverable+ProtectedSubscription) (Optional)\n"
            + "     *     }\n"
            + "     *     tags (Optional): {\n"
            + "     *         String: String (Required)\n"
            + "     *     }\n"
            + "     *     x5t: Base64Url (Optional)\n"
            + "     *     recoveryId: String (Optional)\n"
            + "     *     scheduledPurgeDate: Long (Optional)\n"
            + "     *     deletedDate: Long (Optional)\n"
            + "     * }\n"
            + "     * }\n"
            + "     * </pre>\n"
            + "     * \n"
            + "     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.\n"
            + "     * @throws HttpResponseException thrown if the request is rejected by server.\n"
            + "     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.\n"
            + "     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.\n"
            + "     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.\n"
            + "     * @return a list of certificates that have been deleted in this vault along with {@link PagedResponse}.\n"
            + "     */\n"
            + "    @ServiceMethod(returns = ReturnType.SINGLE)\n"
            + "    private PagedResponse<BinaryData> getDeletedCertificatesSinglePage(RequestOptions requestOptions) {\n"
            + "        final String accept = \"application/json\";\n"
            + "        Response<BinaryData> res = service.getDeletedCertificatesSync(this.getVaultBaseUrl(),\n"
            + "            this.getServiceVersion().getVersion(), accept, requestOptions, Context.NONE);\n"
            + "        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),\n"
            + "            getValues(res.getValue(), \"value\"), getNextLink(res.getValue(), \"nextLink\"), null);\n"
            + "    }\n"
            + "\n"
            + "    /**\n"
            + "     * Lists the deleted certificates in the specified vault currently available for recovery.\n"
            + "     * \n"
            + "     * The GetDeletedCertificates operation retrieves the certificates in the current vault which are in a deleted state\n"
            + "     * and ready for recovery or purging. This operation includes deletion-specific information. This operation requires\n"
            + "     * the certificates/get/list permission. This operation can only be enabled on soft-delete enabled vaults.\n"
            + "     * <p><strong>Query Parameters</strong></p>\n"
            + "     * <table border=\"1\">\n"
            + "     * <caption>Query Parameters</caption>\n"
            + "     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>\n"
            + "     * <tr><td>maxresults</td><td>Integer</td><td>No</td><td>Maximum number of results to return in a page. If not\n"
            + "     * specified the service will return up to 25 results.</td></tr>\n"
            + "     * <tr><td>includePending</td><td>Boolean</td><td>No</td><td>Specifies whether to include certificates which are not\n"
            + "     * completely provisioned.</td></tr>\n"
            + "     * </table>\n"
            + "     * You can add these to a request with {@link RequestOptions#addQueryParam}\n"
            + "     * <p><strong>Response Body Schema</strong></p>\n"
            + "     * \n"
            + "     * <pre>\n"
            + "     * {@code\n"
            + "     * {\n"
            + "     *     id: String (Optional)\n"
            + "     *     attributes (Optional): {\n"
            + "     *         enabled: Boolean (Optional)\n"
            + "     *         nbf: Long (Optional)\n"
            + "     *         exp: Long (Optional)\n"
            + "     *         created: Long (Optional)\n"
            + "     *         updated: Long (Optional)\n"
            + "     *         recoverableDays: Integer (Optional)\n"
            + "     *         recoveryLevel: String(Purgeable/Recoverable+Purgeable/Recoverable/Recoverable+ProtectedSubscription/CustomizedRecoverable+Purgeable/CustomizedRecoverable/CustomizedRecoverable+ProtectedSubscription) (Optional)\n"
            + "     *     }\n"
            + "     *     tags (Optional): {\n"
            + "     *         String: String (Required)\n"
            + "     *     }\n"
            + "     *     x5t: Base64Url (Optional)\n"
            + "     *     recoveryId: String (Optional)\n"
            + "     *     scheduledPurgeDate: Long (Optional)\n"
            + "     *     deletedDate: Long (Optional)\n"
            + "     * }\n"
            + "     * }\n"
            + "     * </pre>\n"
            + "     * \n"
            + "     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.\n"
            + "     * @throws HttpResponseException thrown if the request is rejected by server.\n"
            + "     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.\n"
            + "     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.\n"
            + "     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.\n"
            + "     * @return a list of certificates that have been deleted in this vault as paginated response with\n"
            + "     * {@link PagedIterable}.\n"
            + "     */\n"
            + "    @ServiceMethod(returns = ReturnType.COLLECTION)\n"
            + "    public PagedIterable<BinaryData> getDeletedCertificates(RequestOptions requestOptions) {\n"
            + "        RequestOptions requestOptionsForNextPage = new RequestOptions();\n"
            + "        requestOptionsForNextPage.setContext(\n"
            + "            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);\n"
            + "        return new PagedIterable<>(() -> getDeletedCertificatesSinglePage(requestOptions),\n"
            + "            nextLink -> getDeletedCertificatesNextSinglePage(nextLink, requestOptionsForNextPage));\n"
            + "    }";
        String nextLinkOperations = "/**\n"
            + "     * List certificates in a specified key vault\n"
            + "     * \n"
            + "     * Get the next page of items.\n"
            + "     * <p><strong>Response Body Schema</strong></p>\n"
            + "     * \n"
            + "     * <pre>\n"
            + "     * {@code\n"
            + "     * {\n"
            + "     *     id: String (Optional)\n"
            + "     *     attributes (Optional): {\n"
            + "     *         enabled: Boolean (Optional)\n"
            + "     *         nbf: Long (Optional)\n"
            + "     *         exp: Long (Optional)\n"
            + "     *         created: Long (Optional)\n"
            + "     *         updated: Long (Optional)\n"
            + "     *         recoverableDays: Integer (Optional)\n"
            + "     *         recoveryLevel: String(Purgeable/Recoverable+Purgeable/Recoverable/Recoverable+ProtectedSubscription/CustomizedRecoverable+Purgeable/CustomizedRecoverable/CustomizedRecoverable+ProtectedSubscription) (Optional)\n"
            + "     *     }\n"
            + "     *     tags (Optional): {\n"
            + "     *         String: String (Required)\n"
            + "     *     }\n"
            + "     *     x5t: Base64Url (Optional)\n"
            + "     * }\n"
            + "     * }\n"
            + "     * </pre>\n"
            + "     * \n"
            + "     * @param nextLink The URL to get the next list of items.\n"
            + "     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.\n"
            + "     * @throws HttpResponseException thrown if the request is rejected by server.\n"
            + "     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.\n"
            + "     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.\n"
            + "     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.\n"
            + "     * @return the certificate list result along with {@link PagedResponse} on successful completion of {@link Mono}.\n"
            + "     */\n"
            + "    @ServiceMethod(returns = ReturnType.SINGLE)\n"
            + "    private Mono<PagedResponse<BinaryData>> getCertificatesNextSinglePageAsync(String nextLink,\n"
            + "        RequestOptions requestOptions) {\n"
            + "        final String accept = \"application/json\";\n"
            + "        return FluxUtil.withContext(\n"
            + "            context -> service.getCertificatesNext(nextLink, this.getVaultBaseUrl(), accept, requestOptions, context))\n"
            + "            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),\n"
            + "                getValues(res.getValue(), \"value\"), getNextLink(res.getValue(), \"nextLink\"), null));\n"
            + "    }\n"
            + "\n"
            + "    /**\n"
            + "     * List certificates in a specified key vault\n"
            + "     * \n"
            + "     * Get the next page of items.\n"
            + "     * <p><strong>Response Body Schema</strong></p>\n"
            + "     * \n"
            + "     * <pre>\n"
            + "     * {@code\n"
            + "     * {\n"
            + "     *     id: String (Optional)\n"
            + "     *     attributes (Optional): {\n"
            + "     *         enabled: Boolean (Optional)\n"
            + "     *         nbf: Long (Optional)\n"
            + "     *         exp: Long (Optional)\n"
            + "     *         created: Long (Optional)\n"
            + "     *         updated: Long (Optional)\n"
            + "     *         recoverableDays: Integer (Optional)\n"
            + "     *         recoveryLevel: String(Purgeable/Recoverable+Purgeable/Recoverable/Recoverable+ProtectedSubscription/CustomizedRecoverable+Purgeable/CustomizedRecoverable/CustomizedRecoverable+ProtectedSubscription) (Optional)\n"
            + "     *     }\n"
            + "     *     tags (Optional): {\n"
            + "     *         String: String (Required)\n"
            + "     *     }\n"
            + "     *     x5t: Base64Url (Optional)\n"
            + "     * }\n"
            + "     * }\n"
            + "     * </pre>\n"
            + "     * \n"
            + "     * @param nextLink The URL to get the next list of items.\n"
            + "     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.\n"
            + "     * @throws HttpResponseException thrown if the request is rejected by server.\n"
            + "     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.\n"
            + "     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.\n"
            + "     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.\n"
            + "     * @return the certificate list result along with {@link PagedResponse}.\n"
            + "     */\n"
            + "    @ServiceMethod(returns = ReturnType.SINGLE)\n"
            + "    private PagedResponse<BinaryData> getCertificatesNextSinglePage(String nextLink, RequestOptions requestOptions) {\n"
            + "        final String accept = \"application/json\";\n"
            + "        Response<BinaryData> res\n"
            + "            = service.getCertificatesNextSync(nextLink, this.getVaultBaseUrl(), accept, requestOptions, Context.NONE);\n"
            + "        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),\n"
            + "            getValues(res.getValue(), \"value\"), getNextLink(res.getValue(), \"nextLink\"), null);\n"
            + "    }\n"
            + "\n"
            + "    /**\n"
            + "     * List certificate issuers for a specified key vault.\n"
            + "     * \n"
            + "     * Get the next page of items.\n"
            + "     * <p><strong>Response Body Schema</strong></p>\n"
            + "     * \n"
            + "     * <pre>\n"
            + "     * {@code\n"
            + "     * {\n"
            + "     *     id: String (Optional)\n"
            + "     *     provider: String (Optional)\n"
            + "     * }\n"
            + "     * }\n"
            + "     * </pre>\n"
            + "     * \n"
            + "     * @param nextLink The URL to get the next list of items.\n"
            + "     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.\n"
            + "     * @throws HttpResponseException thrown if the request is rejected by server.\n"
            + "     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.\n"
            + "     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.\n"
            + "     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.\n"
            + "     * @return the certificate issuer list result along with {@link PagedResponse} on successful completion of\n"
            + "     * {@link Mono}.\n"
            + "     */\n"
            + "    @ServiceMethod(returns = ReturnType.SINGLE)\n"
            + "    private Mono<PagedResponse<BinaryData>> getCertificateIssuersNextSinglePageAsync(String nextLink,\n"
            + "        RequestOptions requestOptions) {\n"
            + "        final String accept = \"application/json\";\n"
            + "        return FluxUtil\n"
            + "            .withContext(context -> service.getCertificateIssuersNext(nextLink, this.getVaultBaseUrl(), accept,\n"
            + "                requestOptions, context))\n"
            + "            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),\n"
            + "                getValues(res.getValue(), \"value\"), getNextLink(res.getValue(), \"nextLink\"), null));\n"
            + "    }\n"
            + "\n"
            + "    /**\n"
            + "     * List certificate issuers for a specified key vault.\n"
            + "     * \n"
            + "     * Get the next page of items.\n"
            + "     * <p><strong>Response Body Schema</strong></p>\n"
            + "     * \n"
            + "     * <pre>\n"
            + "     * {@code\n"
            + "     * {\n"
            + "     *     id: String (Optional)\n"
            + "     *     provider: String (Optional)\n"
            + "     * }\n"
            + "     * }\n"
            + "     * </pre>\n"
            + "     * \n"
            + "     * @param nextLink The URL to get the next list of items.\n"
            + "     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.\n"
            + "     * @throws HttpResponseException thrown if the request is rejected by server.\n"
            + "     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.\n"
            + "     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.\n"
            + "     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.\n"
            + "     * @return the certificate issuer list result along with {@link PagedResponse}.\n"
            + "     */\n"
            + "    @ServiceMethod(returns = ReturnType.SINGLE)\n"
            + "    private PagedResponse<BinaryData> getCertificateIssuersNextSinglePage(String nextLink,\n"
            + "        RequestOptions requestOptions) {\n"
            + "        final String accept = \"application/json\";\n"
            + "        Response<BinaryData> res = service.getCertificateIssuersNextSync(nextLink, this.getVaultBaseUrl(), accept,\n"
            + "            requestOptions, Context.NONE);\n"
            + "        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),\n"
            + "            getValues(res.getValue(), \"value\"), getNextLink(res.getValue(), \"nextLink\"), null);\n"
            + "    }\n"
            + "\n"
            + "    /**\n"
            + "     * List the versions of a certificate.\n"
            + "     * \n"
            + "     * Get the next page of items.\n"
            + "     * <p><strong>Response Body Schema</strong></p>\n"
            + "     * \n"
            + "     * <pre>\n"
            + "     * {@code\n"
            + "     * {\n"
            + "     *     id: String (Optional)\n"
            + "     *     attributes (Optional): {\n"
            + "     *         enabled: Boolean (Optional)\n"
            + "     *         nbf: Long (Optional)\n"
            + "     *         exp: Long (Optional)\n"
            + "     *         created: Long (Optional)\n"
            + "     *         updated: Long (Optional)\n"
            + "     *         recoverableDays: Integer (Optional)\n"
            + "     *         recoveryLevel: String(Purgeable/Recoverable+Purgeable/Recoverable/Recoverable+ProtectedSubscription/CustomizedRecoverable+Purgeable/CustomizedRecoverable/CustomizedRecoverable+ProtectedSubscription) (Optional)\n"
            + "     *     }\n"
            + "     *     tags (Optional): {\n"
            + "     *         String: String (Required)\n"
            + "     *     }\n"
            + "     *     x5t: Base64Url (Optional)\n"
            + "     * }\n"
            + "     * }\n"
            + "     * </pre>\n"
            + "     * \n"
            + "     * @param nextLink The URL to get the next list of items.\n"
            + "     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.\n"
            + "     * @throws HttpResponseException thrown if the request is rejected by server.\n"
            + "     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.\n"
            + "     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.\n"
            + "     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.\n"
            + "     * @return the certificate list result along with {@link PagedResponse} on successful completion of {@link Mono}.\n"
            + "     */\n"
            + "    @ServiceMethod(returns = ReturnType.SINGLE)\n"
            + "    private Mono<PagedResponse<BinaryData>> getCertificateVersionsNextSinglePageAsync(String nextLink,\n"
            + "        RequestOptions requestOptions) {\n"
            + "        final String accept = \"application/json\";\n"
            + "        return FluxUtil\n"
            + "            .withContext(context -> service.getCertificateVersionsNext(nextLink, this.getVaultBaseUrl(), accept,\n"
            + "                requestOptions, context))\n"
            + "            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),\n"
            + "                getValues(res.getValue(), \"value\"), getNextLink(res.getValue(), \"nextLink\"), null));\n"
            + "    }\n"
            + "\n"
            + "    /**\n"
            + "     * List the versions of a certificate.\n"
            + "     * \n"
            + "     * Get the next page of items.\n"
            + "     * <p><strong>Response Body Schema</strong></p>\n"
            + "     * \n"
            + "     * <pre>\n"
            + "     * {@code\n"
            + "     * {\n"
            + "     *     id: String (Optional)\n"
            + "     *     attributes (Optional): {\n"
            + "     *         enabled: Boolean (Optional)\n"
            + "     *         nbf: Long (Optional)\n"
            + "     *         exp: Long (Optional)\n"
            + "     *         created: Long (Optional)\n"
            + "     *         updated: Long (Optional)\n"
            + "     *         recoverableDays: Integer (Optional)\n"
            + "     *         recoveryLevel: String(Purgeable/Recoverable+Purgeable/Recoverable/Recoverable+ProtectedSubscription/CustomizedRecoverable+Purgeable/CustomizedRecoverable/CustomizedRecoverable+ProtectedSubscription) (Optional)\n"
            + "     *     }\n"
            + "     *     tags (Optional): {\n"
            + "     *         String: String (Required)\n"
            + "     *     }\n"
            + "     *     x5t: Base64Url (Optional)\n"
            + "     * }\n"
            + "     * }\n"
            + "     * </pre>\n"
            + "     * \n"
            + "     * @param nextLink The URL to get the next list of items.\n"
            + "     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.\n"
            + "     * @throws HttpResponseException thrown if the request is rejected by server.\n"
            + "     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.\n"
            + "     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.\n"
            + "     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.\n"
            + "     * @return the certificate list result along with {@link PagedResponse}.\n"
            + "     */\n"
            + "    @ServiceMethod(returns = ReturnType.SINGLE)\n"
            + "    private PagedResponse<BinaryData> getCertificateVersionsNextSinglePage(String nextLink,\n"
            + "        RequestOptions requestOptions) {\n"
            + "        final String accept = \"application/json\";\n"
            + "        Response<BinaryData> res = service.getCertificateVersionsNextSync(nextLink, this.getVaultBaseUrl(), accept,\n"
            + "            requestOptions, Context.NONE);\n"
            + "        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),\n"
            + "            getValues(res.getValue(), \"value\"), getNextLink(res.getValue(), \"nextLink\"), null);\n"
            + "    }\n"
            + "\n"
            + "    /**\n"
            + "     * Lists the deleted certificates in the specified vault currently available for recovery.\n"
            + "     * \n"
            + "     * Get the next page of items.\n"
            + "     * <p><strong>Response Body Schema</strong></p>\n"
            + "     * \n"
            + "     * <pre>\n"
            + "     * {@code\n"
            + "     * {\n"
            + "     *     id: String (Optional)\n"
            + "     *     attributes (Optional): {\n"
            + "     *         enabled: Boolean (Optional)\n"
            + "     *         nbf: Long (Optional)\n"
            + "     *         exp: Long (Optional)\n"
            + "     *         created: Long (Optional)\n"
            + "     *         updated: Long (Optional)\n"
            + "     *         recoverableDays: Integer (Optional)\n"
            + "     *         recoveryLevel: String(Purgeable/Recoverable+Purgeable/Recoverable/Recoverable+ProtectedSubscription/CustomizedRecoverable+Purgeable/CustomizedRecoverable/CustomizedRecoverable+ProtectedSubscription) (Optional)\n"
            + "     *     }\n"
            + "     *     tags (Optional): {\n"
            + "     *         String: String (Required)\n"
            + "     *     }\n"
            + "     *     x5t: Base64Url (Optional)\n"
            + "     *     recoveryId: String (Optional)\n"
            + "     *     scheduledPurgeDate: Long (Optional)\n"
            + "     *     deletedDate: Long (Optional)\n"
            + "     * }\n"
            + "     * }\n"
            + "     * </pre>\n"
            + "     * \n"
            + "     * @param nextLink The URL to get the next list of items.\n"
            + "     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.\n"
            + "     * @throws HttpResponseException thrown if the request is rejected by server.\n"
            + "     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.\n"
            + "     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.\n"
            + "     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.\n"
            + "     * @return a list of certificates that have been deleted in this vault along with {@link PagedResponse} on\n"
            + "     * successful completion of {@link Mono}.\n"
            + "     */\n"
            + "    @ServiceMethod(returns = ReturnType.SINGLE)\n"
            + "    private Mono<PagedResponse<BinaryData>> getDeletedCertificatesNextSinglePageAsync(String nextLink,\n"
            + "        RequestOptions requestOptions) {\n"
            + "        final String accept = \"application/json\";\n"
            + "        return FluxUtil\n"
            + "            .withContext(context -> service.getDeletedCertificatesNext(nextLink, this.getVaultBaseUrl(), accept,\n"
            + "                requestOptions, context))\n"
            + "            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),\n"
            + "                getValues(res.getValue(), \"value\"), getNextLink(res.getValue(), \"nextLink\"), null));\n"
            + "    }\n"
            + "\n"
            + "    /**\n"
            + "     * Lists the deleted certificates in the specified vault currently available for recovery.\n"
            + "     * \n"
            + "     * Get the next page of items.\n"
            + "     * <p><strong>Response Body Schema</strong></p>\n"
            + "     * \n"
            + "     * <pre>\n"
            + "     * {@code\n"
            + "     * {\n"
            + "     *     id: String (Optional)\n"
            + "     *     attributes (Optional): {\n"
            + "     *         enabled: Boolean (Optional)\n"
            + "     *         nbf: Long (Optional)\n"
            + "     *         exp: Long (Optional)\n"
            + "     *         created: Long (Optional)\n"
            + "     *         updated: Long (Optional)\n"
            + "     *         recoverableDays: Integer (Optional)\n"
            + "     *         recoveryLevel: String(Purgeable/Recoverable+Purgeable/Recoverable/Recoverable+ProtectedSubscription/CustomizedRecoverable+Purgeable/CustomizedRecoverable/CustomizedRecoverable+ProtectedSubscription) (Optional)\n"
            + "     *     }\n"
            + "     *     tags (Optional): {\n"
            + "     *         String: String (Required)\n"
            + "     *     }\n"
            + "     *     x5t: Base64Url (Optional)\n"
            + "     *     recoveryId: String (Optional)\n"
            + "     *     scheduledPurgeDate: Long (Optional)\n"
            + "     *     deletedDate: Long (Optional)\n"
            + "     * }\n"
            + "     * }\n"
            + "     * </pre>\n"
            + "     * \n"
            + "     * @param nextLink The URL to get the next list of items.\n"
            + "     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.\n"
            + "     * @throws HttpResponseException thrown if the request is rejected by server.\n"
            + "     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.\n"
            + "     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.\n"
            + "     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.\n"
            + "     * @return a list of certificates that have been deleted in this vault along with {@link PagedResponse}.\n"
            + "     */\n"
            + "    @ServiceMethod(returns = ReturnType.SINGLE)\n"
            + "    private PagedResponse<BinaryData> getDeletedCertificatesNextSinglePage(String nextLink,\n"
            + "        RequestOptions requestOptions) {\n"
            + "        final String accept = \"application/json\";\n"
            + "        Response<BinaryData> res = service.getDeletedCertificatesNextSync(nextLink, this.getVaultBaseUrl(), accept,\n"
            + "            requestOptions, Context.NONE);\n"
            + "        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),\n"
            + "            getValues(res.getValue(), \"value\"), getNextLink(res.getValue(), \"nextLink\"), null);\n"
            + "    }\n"
            + "\n"
            + "    private List<BinaryData> getValues(BinaryData binaryData, String path) {\n"
            + "        try {\n"
            + "            Map<?, ?> obj = binaryData.toObject(Map.class);\n"
            + "            List<?> values = (List<?>) obj.get(path);\n"
            + "            return values.stream().map(BinaryData::fromObject).collect(Collectors.toList());\n"
            + "        } catch (RuntimeException e) {\n"
            + "            return null;\n"
            + "        }\n"
            + "    }\n"
            + "\n"
            + "    private String getNextLink(BinaryData binaryData, String path) {\n"
            + "        try {\n"
            + "            Map<?, ?> obj = binaryData.toObject(Map.class);\n"
            + "            return (String) obj.get(path);\n"
            + "        } catch (RuntimeException e) {\n"
            + "            return null;\n"
            + "        }\n"
            + "    }";

        // Rename class references and add imports.
        replaceInFile(classCustomization, classPath,
            new String[] {
                "KeyVault",
                "import com.azure.core.http.policy.UserAgentPolicy;",
                "import com.azure.security.keyvault.certificates.CertificateServiceVersion;",
                serviceInterfacePagingMethodsOriginal,
                recoverDeletedCertificate
            }, new String[] {
                "Certificate",
                "import com.azure.core.http.policy.UserAgentPolicy;\n"
                    + "import com.azure.core.http.rest.PagedFlux;\n"
                    + "import com.azure.core.http.rest.PagedIterable;\n"
                    + "import com.azure.core.http.rest.PagedResponse;\n"
                    + "import com.azure.core.http.rest.PagedResponseBase;",
                "import com.azure.security.keyvault.certificates.CertificateServiceVersion;\n"
                    + "import java.util.List;\n"
                    + "import java.util.Map;\n"
                    + "import java.util.stream.Collectors;",
                serviceInterfacePagingMethodsNew,
                recoverDeletedCertificate
                    + "\n\n" + listCertificates
                    + "\n\n" + listIssuers
                    + "\n\n" + listCertificateVersions
                    + "\n\n" + listDeletedCertificates
                    + "\n\n" + nextLinkOperations
            });
    }

    /**
     * This method replaces all the provided strings in the specified file with new strings provided in the latter half
     * of the 'strings' parameter.
     *
     * @param classCustomization The class customization to use to edit the file.
     * @param classPath The path to the file to edit.
     * @param stringsToReplace The strings to replace.
     * @param replacementStrings The strings to replace with.
     */
    private static void replaceInFile(ClassCustomization classCustomization, String classPath,
                                      String[] stringsToReplace, String[] replacementStrings) {

        if (stringsToReplace != null && replacementStrings != null) {
            Editor editor = classCustomization.getEditor();
            String fileContent = editor.getFileContent(classPath);

            // Ensure names has an even length.
            if (stringsToReplace.length != replacementStrings.length) {
                throw new IllegalArgumentException(
                    "'stringsToReplace' must have the same number of elements as 'replacementStrings'.");
            }

            for (int i = 0; i < stringsToReplace.length; i++) {
                fileContent = fileContent.replace(stringsToReplace[i], replacementStrings[i]);
            }

            editor.replaceFile(classPath, fileContent);
        } else if (stringsToReplace != null || replacementStrings != null) {
            throw new IllegalArgumentException(
                "'stringsToReplace' must have the same number of elements as 'replacementStrings'.");
        }
    }
}
