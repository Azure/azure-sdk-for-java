// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.security.keyvault.certificates.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The contact information for the vault certificates.
 */
@Fluent
public final class Contact implements JsonSerializable<Contact> {
    /*
     * Email address.
     */
    @Generated
    private String emailAddress;

    /*
     * Name.
     */
    @Generated
    private String name;

    /*
     * Phone number.
     */
    @Generated
    private String phone;

    /**
     * Creates an instance of Contact class.
     */
    @Generated
    public Contact() {
    }

    /**
     * Get the emailAddress property: Email address.
     * 
     * @return the emailAddress value.
     */
    @Generated
    public String getEmailAddress() {
        return this.emailAddress;
    }

    /**
     * Set the emailAddress property: Email address.
     * 
     * @param emailAddress the emailAddress value to set.
     * @return the Contact object itself.
     */
    @Generated
    public Contact setEmailAddress(String emailAddress) {
        this.emailAddress = emailAddress;
        return this;
    }

    /**
     * Get the name property: Name.
     * 
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Set the name property: Name.
     * 
     * @param name the name value to set.
     * @return the Contact object itself.
     */
    @Generated
    public Contact setName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the phone property: Phone number.
     * 
     * @return the phone value.
     */
    @Generated
    public String getPhone() {
        return this.phone;
    }

    /**
     * Set the phone property: Phone number.
     * 
     * @param phone the phone value to set.
     * @return the Contact object itself.
     */
    @Generated
    public Contact setPhone(String phone) {
        this.phone = phone;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("email", this.emailAddress);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("phone", this.phone);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Contact from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Contact if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the Contact.
     */
    @Generated
    public static Contact fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Contact deserializedContact = new Contact();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("email".equals(fieldName)) {
                    deserializedContact.emailAddress = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedContact.name = reader.getString();
                } else if ("phone".equals(fieldName)) {
                    deserializedContact.phone = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedContact;
        });
    }
}
