// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.security.keyvault.certificates.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Details of the organization administrator of the certificate issuer.
 */
@Fluent
public final class AdministratorDetails implements JsonSerializable<AdministratorDetails> {

    /*
     * First name.
     */
    @Generated
    private String firstName;

    /*
     * Last name.
     */
    @Generated
    private String lastName;

    /*
     * Email address.
     */
    @Generated
    private String emailAddress;

    /*
     * Phone number.
     */
    @Generated
    private String phone;

    /**
     * Creates an instance of AdministratorDetails class.
     */
    @Generated
    public AdministratorDetails() {
    }

    /**
     * Get the firstName property: First name.
     *
     * @return the firstName value.
     */
    @Generated
    public String getFirstName() {
        return this.firstName;
    }

    /**
     * Set the firstName property: First name.
     *
     * @param firstName the firstName value to set.
     * @return the AdministratorDetails object itself.
     */
    @Generated
    public AdministratorDetails setFirstName(String firstName) {
        this.firstName = firstName;
        return this;
    }

    /**
     * Get the lastName property: Last name.
     *
     * @return the lastName value.
     */
    @Generated
    public String getLastName() {
        return this.lastName;
    }

    /**
     * Set the lastName property: Last name.
     *
     * @param lastName the lastName value to set.
     * @return the AdministratorDetails object itself.
     */
    @Generated
    public AdministratorDetails setLastName(String lastName) {
        this.lastName = lastName;
        return this;
    }

    /**
     * Get the emailAddress property: Email address.
     *
     * @return the emailAddress value.
     */
    @Generated
    public String getEmailAddress() {
        return this.emailAddress;
    }

    /**
     * Set the emailAddress property: Email address.
     *
     * @param emailAddress the emailAddress value to set.
     * @return the AdministratorDetails object itself.
     */
    @Generated
    public AdministratorDetails setEmailAddress(String emailAddress) {
        this.emailAddress = emailAddress;
        return this;
    }

    /**
     * Get the phone property: Phone number.
     *
     * @return the phone value.
     */
    @Generated
    public String getPhone() {
        return this.phone;
    }

    /**
     * Set the phone property: Phone number.
     *
     * @param phone the phone value to set.
     * @return the AdministratorDetails object itself.
     */
    @Generated
    public AdministratorDetails setPhone(String phone) {
        this.phone = phone;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("first_name", this.firstName);
        jsonWriter.writeStringField("last_name", this.lastName);
        jsonWriter.writeStringField("email", this.emailAddress);
        jsonWriter.writeStringField("phone", this.phone);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AdministratorDetails from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of AdministratorDetails if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AdministratorDetails.
     */
    @Generated
    public static AdministratorDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AdministratorDetails deserializedAdministratorDetails = new AdministratorDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("first_name".equals(fieldName)) {
                    deserializedAdministratorDetails.firstName = reader.getString();
                } else if ("last_name".equals(fieldName)) {
                    deserializedAdministratorDetails.lastName = reader.getString();
                } else if ("email".equals(fieldName)) {
                    deserializedAdministratorDetails.emailAddress = reader.getString();
                } else if ("phone".equals(fieldName)) {
                    deserializedAdministratorDetails.phone = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedAdministratorDetails;
        });
    }
}
