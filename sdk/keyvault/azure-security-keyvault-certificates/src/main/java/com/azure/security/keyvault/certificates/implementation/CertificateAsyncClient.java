// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.security.keyvault.certificates.implementation;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.FluxUtil;
import com.azure.security.keyvault.certificates.implementation.models.BackupCertificateResult;
import com.azure.security.keyvault.certificates.implementation.models.CertificateBundle;
import com.azure.security.keyvault.certificates.implementation.models.CertificateCreateParameters;
import com.azure.security.keyvault.certificates.implementation.models.CertificateImportParameters;
import com.azure.security.keyvault.certificates.implementation.models.CertificateIssuerItem;
import com.azure.security.keyvault.certificates.implementation.models.CertificateIssuerSetParameters;
import com.azure.security.keyvault.certificates.implementation.models.CertificateIssuerUpdateParameters;
import com.azure.security.keyvault.certificates.implementation.models.CertificateItem;
import com.azure.security.keyvault.certificates.implementation.models.CertificateMergeParameters;
import com.azure.security.keyvault.certificates.implementation.models.CertificateOperation;
import com.azure.security.keyvault.certificates.implementation.models.CertificateOperationUpdateParameter;
import com.azure.security.keyvault.certificates.implementation.models.CertificatePolicy;
import com.azure.security.keyvault.certificates.implementation.models.CertificateRestoreParameters;
import com.azure.security.keyvault.certificates.implementation.models.CertificateUpdateParameters;
import com.azure.security.keyvault.certificates.implementation.models.Contacts;
import com.azure.security.keyvault.certificates.implementation.models.DeletedCertificateBundle;
import com.azure.security.keyvault.certificates.implementation.models.DeletedCertificateListResult;
import com.azure.security.keyvault.certificates.implementation.models.IssuerBundle;
import java.util.stream.Collectors;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the asynchronous CertificateClient type.
 */
@ServiceClient(builder = CertificateClientBuilder.class, isAsync = true)
public final class CertificateAsyncClient {

    @Generated
    private final CertificateClientImpl serviceClient;

    /**
     * Initializes an instance of CertificateAsyncClient class.
     *
     * @param serviceClient the service client implementation.
     */
    @Generated
    CertificateAsyncClient(CertificateClientImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * List certificates in a specified key vault
     *
     * The GetCertificates operation returns the set of certificates resources in the
     * specified key vault. This operation requires the certificates/list permission.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxresults</td><td>Integer</td><td>No</td><td>Maximum number of results to return in a page. If not
     * specified the service
     * will return up to 25 results.</td></tr>
     * <tr><td>includePending</td><td>Boolean</td><td>No</td><td>Specifies whether to include certificates which are not
     * completely provisioned.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     attributes (Optional): {
     *         enabled: Boolean (Optional)
     *         nbf: Long (Optional)
     *         exp: Long (Optional)
     *         created: Long (Optional)
     *         updated: Long (Optional)
     *         recoverableDays: Integer (Optional)
     *         recoveryLevel: String (Optional)
     *     }
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     x5t: Base64Url (Optional)
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the certificate list result as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> getCertificates(RequestOptions requestOptions) {
        return this.serviceClient.getCertificatesAsync(requestOptions);
    }

    /**
     * Deletes a certificate from a specified key vault.
     *
     * Deletes all versions of a certificate object along with its associated policy.
     * Delete certificate cannot be used to remove individual versions of a
     * certificate object. This operation requires the certificates/delete permission.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     kid: String (Optional)
     *     sid: String (Optional)
     *     x5t: Base64Url (Optional)
     *     policy (Optional): {
     *         id: String (Optional)
     *         key_props (Optional): {
     *             exportable: Boolean (Optional)
     *             kty: String(EC/EC-HSM/RSA/RSA-HSM/oct/oct-HSM) (Optional)
     *             key_size: Integer (Optional)
     *             reuse_key: Boolean (Optional)
     *             crv: String(P-256/P-384/P-521/P-256K) (Optional)
     *         }
     *         secret_props (Optional): {
     *             contentType: String (Optional)
     *         }
     *         x509_props (Optional): {
     *             subject: String (Optional)
     *             ekus (Optional): [
     *                 String (Optional)
     *             ]
     *             sans (Optional): {
     *                 emails (Optional): [
     *                     String (Optional)
     *                 ]
     *                 dns_names (Optional): [
     *                     String (Optional)
     *                 ]
     *                 upns (Optional): [
     *                     String (Optional)
     *                 ]
     *             }
     *             key_usage (Optional): [
     *                 String(digitalSignature/nonRepudiation/keyEncipherment/dataEncipherment/keyAgreement/keyCertSign/cRLSign/encipherOnly/decipherOnly) (Optional)
     *             ]
     *             validity_months: Integer (Optional)
     *         }
     *         lifetime_actions (Optional): [
     *              (Optional){
     *                 trigger (Optional): {
     *                     lifetime_percentage: Integer (Optional)
     *                     days_before_expiry: Integer (Optional)
     *                 }
     *                 action (Optional): {
     *                     action_type: String(EmailContacts/AutoRenew) (Optional)
     *                 }
     *             }
     *         ]
     *         issuer (Optional): {
     *             name: String (Optional)
     *             cty: String (Optional)
     *             cert_transparency: Boolean (Optional)
     *         }
     *         attributes (Optional): {
     *             enabled: Boolean (Optional)
     *             nbf: Long (Optional)
     *             exp: Long (Optional)
     *             created: Long (Optional)
     *             updated: Long (Optional)
     *             recoverableDays: Integer (Optional)
     *             recoveryLevel: String (Optional)
     *         }
     *     }
     *     cer: byte[] (Optional)
     *     contentType: String (Optional)
     *     attributes (Optional): (recursive schema, see attributes above)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     recoveryId: String (Optional)
     *     scheduledPurgeDate: Long (Optional)
     *     deletedDate: Long (Optional)
     * }
     * }</pre>
     *
     * @param certificateName The name of the certificate.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a Deleted Certificate consisting of its previous id, attributes and its tags,
     * as well as information on when it will be purged along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> deleteCertificateWithResponse(String certificateName,
        RequestOptions requestOptions) {
        return this.serviceClient.deleteCertificateWithResponseAsync(certificateName, requestOptions);
    }

    /**
     * Sets the certificate contacts for the specified key vault.
     *
     * Sets the certificate contacts for the specified key vault. This operation
     * requires the certificates/managecontacts permission.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     contacts (Optional): [
     *          (Optional){
     *             email: String (Optional)
     *             name: String (Optional)
     *             phone: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     contacts (Optional): [
     *          (Optional){
     *             email: String (Optional)
     *             name: String (Optional)
     *             phone: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param contacts The contacts for the key vault certificate.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the contacts for the vault certificates along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> setCertificateContactsWithResponse(BinaryData contacts,
        RequestOptions requestOptions) {
        return this.serviceClient.setCertificateContactsWithResponseAsync(contacts, requestOptions);
    }

    /**
     * Lists the certificate contacts for a specified key vault.
     *
     * The GetCertificateContacts operation returns the set of certificate contact
     * resources in the specified key vault. This operation requires the
     * certificates/managecontacts permission.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     contacts (Optional): [
     *          (Optional){
     *             email: String (Optional)
     *             name: String (Optional)
     *             phone: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the contacts for the vault certificates along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getCertificateContactsWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.getCertificateContactsWithResponseAsync(requestOptions);
    }

    /**
     * Deletes the certificate contacts for a specified key vault.
     *
     * Deletes the certificate contacts for a specified key vault certificate. This
     * operation requires the certificates/managecontacts permission.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     contacts (Optional): [
     *          (Optional){
     *             email: String (Optional)
     *             name: String (Optional)
     *             phone: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the contacts for the vault certificates along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> deleteCertificateContactsWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.deleteCertificateContactsWithResponseAsync(requestOptions);
    }

    /**
     * List certificate issuers for a specified key vault.
     *
     * The GetCertificateIssuers operation returns the set of certificate issuer
     * resources in the specified key vault. This operation requires the
     * certificates/manageissuers/getissuers permission.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxresults</td><td>Integer</td><td>No</td><td>Maximum number of results to return in a page. If not
     * specified the service
     * will return up to 25 results.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     provider: String (Optional)
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the certificate issuer list result as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> getCertificateIssuers(RequestOptions requestOptions) {
        return this.serviceClient.getCertificateIssuersAsync(requestOptions);
    }

    /**
     * Sets the specified certificate issuer.
     *
     * The SetCertificateIssuer operation adds or updates the specified certificate
     * issuer. This operation requires the certificates/setissuers permission.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     provider: String (Required)
     *     credentials (Optional): {
     *         account_id: String (Optional)
     *         pwd: String (Optional)
     *     }
     *     org_details (Optional): {
     *         id: String (Optional)
     *         admin_details (Optional): [
     *              (Optional){
     *                 first_name: String (Optional)
     *                 last_name: String (Optional)
     *                 email: String (Optional)
     *                 phone: String (Optional)
     *             }
     *         ]
     *     }
     *     attributes (Optional): {
     *         enabled: Boolean (Optional)
     *         created: Long (Optional)
     *         updated: Long (Optional)
     *     }
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     provider: String (Optional)
     *     credentials (Optional): {
     *         account_id: String (Optional)
     *         pwd: String (Optional)
     *     }
     *     org_details (Optional): {
     *         id: String (Optional)
     *         admin_details (Optional): [
     *              (Optional){
     *                 first_name: String (Optional)
     *                 last_name: String (Optional)
     *                 email: String (Optional)
     *                 phone: String (Optional)
     *             }
     *         ]
     *     }
     *     attributes (Optional): {
     *         enabled: Boolean (Optional)
     *         created: Long (Optional)
     *         updated: Long (Optional)
     *     }
     * }
     * }</pre>
     *
     * @param issuerName The name of the issuer. The value you provide may be copied globally for the
     * purpose of running the service. The value provided should not include
     * personally identifiable or sensitive information.
     * @param parameter Certificate issuer set parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the issuer for Key Vault certificate along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> setCertificateIssuerWithResponse(String issuerName, BinaryData parameter,
        RequestOptions requestOptions) {
        return this.serviceClient.setCertificateIssuerWithResponseAsync(issuerName, parameter, requestOptions);
    }

    /**
     * Updates the specified certificate issuer.
     *
     * The UpdateCertificateIssuer operation performs an update on the specified
     * certificate issuer entity. This operation requires the certificates/setissuers
     * permission.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     provider: String (Optional)
     *     credentials (Optional): {
     *         account_id: String (Optional)
     *         pwd: String (Optional)
     *     }
     *     org_details (Optional): {
     *         id: String (Optional)
     *         admin_details (Optional): [
     *              (Optional){
     *                 first_name: String (Optional)
     *                 last_name: String (Optional)
     *                 email: String (Optional)
     *                 phone: String (Optional)
     *             }
     *         ]
     *     }
     *     attributes (Optional): {
     *         enabled: Boolean (Optional)
     *         created: Long (Optional)
     *         updated: Long (Optional)
     *     }
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     provider: String (Optional)
     *     credentials (Optional): {
     *         account_id: String (Optional)
     *         pwd: String (Optional)
     *     }
     *     org_details (Optional): {
     *         id: String (Optional)
     *         admin_details (Optional): [
     *              (Optional){
     *                 first_name: String (Optional)
     *                 last_name: String (Optional)
     *                 email: String (Optional)
     *                 phone: String (Optional)
     *             }
     *         ]
     *     }
     *     attributes (Optional): {
     *         enabled: Boolean (Optional)
     *         created: Long (Optional)
     *         updated: Long (Optional)
     *     }
     * }
     * }</pre>
     *
     * @param issuerName The name of the issuer.
     * @param parameter Certificate issuer update parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the issuer for Key Vault certificate along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> updateCertificateIssuerWithResponse(String issuerName, BinaryData parameter,
        RequestOptions requestOptions) {
        return this.serviceClient.updateCertificateIssuerWithResponseAsync(issuerName, parameter, requestOptions);
    }

    /**
     * Lists the specified certificate issuer.
     *
     * The GetCertificateIssuer operation returns the specified certificate issuer
     * resources in the specified key vault. This operation requires the
     * certificates/manageissuers/getissuers permission.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     provider: String (Optional)
     *     credentials (Optional): {
     *         account_id: String (Optional)
     *         pwd: String (Optional)
     *     }
     *     org_details (Optional): {
     *         id: String (Optional)
     *         admin_details (Optional): [
     *              (Optional){
     *                 first_name: String (Optional)
     *                 last_name: String (Optional)
     *                 email: String (Optional)
     *                 phone: String (Optional)
     *             }
     *         ]
     *     }
     *     attributes (Optional): {
     *         enabled: Boolean (Optional)
     *         created: Long (Optional)
     *         updated: Long (Optional)
     *     }
     * }
     * }</pre>
     *
     * @param issuerName The name of the issuer.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the issuer for Key Vault certificate along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getCertificateIssuerWithResponse(String issuerName,
        RequestOptions requestOptions) {
        return this.serviceClient.getCertificateIssuerWithResponseAsync(issuerName, requestOptions);
    }

    /**
     * Deletes the specified certificate issuer.
     *
     * The DeleteCertificateIssuer operation permanently removes the specified
     * certificate issuer from the vault. This operation requires the
     * certificates/manageissuers/deleteissuers permission.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     provider: String (Optional)
     *     credentials (Optional): {
     *         account_id: String (Optional)
     *         pwd: String (Optional)
     *     }
     *     org_details (Optional): {
     *         id: String (Optional)
     *         admin_details (Optional): [
     *              (Optional){
     *                 first_name: String (Optional)
     *                 last_name: String (Optional)
     *                 email: String (Optional)
     *                 phone: String (Optional)
     *             }
     *         ]
     *     }
     *     attributes (Optional): {
     *         enabled: Boolean (Optional)
     *         created: Long (Optional)
     *         updated: Long (Optional)
     *     }
     * }
     * }</pre>
     *
     * @param issuerName The name of the issuer.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the issuer for Key Vault certificate along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> deleteCertificateIssuerWithResponse(String issuerName,
        RequestOptions requestOptions) {
        return this.serviceClient.deleteCertificateIssuerWithResponseAsync(issuerName, requestOptions);
    }

    /**
     * Creates a new certificate.
     *
     * If this is the first version, the certificate resource is created. This
     * operation requires the certificates/create permission.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     policy (Optional): {
     *         id: String (Optional)
     *         key_props (Optional): {
     *             exportable: Boolean (Optional)
     *             kty: String(EC/EC-HSM/RSA/RSA-HSM/oct/oct-HSM) (Optional)
     *             key_size: Integer (Optional)
     *             reuse_key: Boolean (Optional)
     *             crv: String(P-256/P-384/P-521/P-256K) (Optional)
     *         }
     *         secret_props (Optional): {
     *             contentType: String (Optional)
     *         }
     *         x509_props (Optional): {
     *             subject: String (Optional)
     *             ekus (Optional): [
     *                 String (Optional)
     *             ]
     *             sans (Optional): {
     *                 emails (Optional): [
     *                     String (Optional)
     *                 ]
     *                 dns_names (Optional): [
     *                     String (Optional)
     *                 ]
     *                 upns (Optional): [
     *                     String (Optional)
     *                 ]
     *             }
     *             key_usage (Optional): [
     *                 String(digitalSignature/nonRepudiation/keyEncipherment/dataEncipherment/keyAgreement/keyCertSign/cRLSign/encipherOnly/decipherOnly) (Optional)
     *             ]
     *             validity_months: Integer (Optional)
     *         }
     *         lifetime_actions (Optional): [
     *              (Optional){
     *                 trigger (Optional): {
     *                     lifetime_percentage: Integer (Optional)
     *                     days_before_expiry: Integer (Optional)
     *                 }
     *                 action (Optional): {
     *                     action_type: String(EmailContacts/AutoRenew) (Optional)
     *                 }
     *             }
     *         ]
     *         issuer (Optional): {
     *             name: String (Optional)
     *             cty: String (Optional)
     *             cert_transparency: Boolean (Optional)
     *         }
     *         attributes (Optional): {
     *             enabled: Boolean (Optional)
     *             nbf: Long (Optional)
     *             exp: Long (Optional)
     *             created: Long (Optional)
     *             updated: Long (Optional)
     *             recoverableDays: Integer (Optional)
     *             recoveryLevel: String (Optional)
     *         }
     *     }
     *     attributes (Optional): (recursive schema, see attributes above)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     issuer (Optional): {
     *         name: String (Optional)
     *         cty: String (Optional)
     *         cert_transparency: Boolean (Optional)
     *     }
     *     csr: byte[] (Optional)
     *     cancellation_requested: Boolean (Optional)
     *     status: String (Optional)
     *     status_details: String (Optional)
     *     error (Optional): {
     *         code: String (Optional)
     *         message: String (Optional)
     *         innererror (Optional): (recursive schema, see innererror above)
     *     }
     *     target: String (Optional)
     *     request_id: String (Optional)
     * }
     * }</pre>
     *
     * @param certificateName The name of the certificate. The value you provide may be copied globally for
     * the purpose of running the service. The value provided should not include
     * personally identifiable or sensitive information.
     * @param parameters The parameters to create a certificate.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a certificate operation is returned in case of asynchronous requests along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createCertificateWithResponse(String certificateName, BinaryData parameters,
        RequestOptions requestOptions) {
        return this.serviceClient.createCertificateWithResponseAsync(certificateName, parameters, requestOptions);
    }

    /**
     * Imports a certificate into a specified key vault.
     *
     * Imports an existing valid certificate, containing a private key, into Azure Key
     * Vault. This operation requires the certificates/import permission. The
     * certificate to be imported can be in either PFX or PEM format. If the
     * certificate is in PEM format the PEM file must contain the key as well as x509
     * certificates. Key Vault will only accept a key in PKCS#8 format.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     value: String (Required)
     *     pwd: String (Optional)
     *     policy (Optional): {
     *         id: String (Optional)
     *         key_props (Optional): {
     *             exportable: Boolean (Optional)
     *             kty: String(EC/EC-HSM/RSA/RSA-HSM/oct/oct-HSM) (Optional)
     *             key_size: Integer (Optional)
     *             reuse_key: Boolean (Optional)
     *             crv: String(P-256/P-384/P-521/P-256K) (Optional)
     *         }
     *         secret_props (Optional): {
     *             contentType: String (Optional)
     *         }
     *         x509_props (Optional): {
     *             subject: String (Optional)
     *             ekus (Optional): [
     *                 String (Optional)
     *             ]
     *             sans (Optional): {
     *                 emails (Optional): [
     *                     String (Optional)
     *                 ]
     *                 dns_names (Optional): [
     *                     String (Optional)
     *                 ]
     *                 upns (Optional): [
     *                     String (Optional)
     *                 ]
     *             }
     *             key_usage (Optional): [
     *                 String(digitalSignature/nonRepudiation/keyEncipherment/dataEncipherment/keyAgreement/keyCertSign/cRLSign/encipherOnly/decipherOnly) (Optional)
     *             ]
     *             validity_months: Integer (Optional)
     *         }
     *         lifetime_actions (Optional): [
     *              (Optional){
     *                 trigger (Optional): {
     *                     lifetime_percentage: Integer (Optional)
     *                     days_before_expiry: Integer (Optional)
     *                 }
     *                 action (Optional): {
     *                     action_type: String(EmailContacts/AutoRenew) (Optional)
     *                 }
     *             }
     *         ]
     *         issuer (Optional): {
     *             name: String (Optional)
     *             cty: String (Optional)
     *             cert_transparency: Boolean (Optional)
     *         }
     *         attributes (Optional): {
     *             enabled: Boolean (Optional)
     *             nbf: Long (Optional)
     *             exp: Long (Optional)
     *             created: Long (Optional)
     *             updated: Long (Optional)
     *             recoverableDays: Integer (Optional)
     *             recoveryLevel: String (Optional)
     *         }
     *     }
     *     attributes (Optional): (recursive schema, see attributes above)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     kid: String (Optional)
     *     sid: String (Optional)
     *     x5t: Base64Url (Optional)
     *     policy (Optional): {
     *         id: String (Optional)
     *         key_props (Optional): {
     *             exportable: Boolean (Optional)
     *             kty: String(EC/EC-HSM/RSA/RSA-HSM/oct/oct-HSM) (Optional)
     *             key_size: Integer (Optional)
     *             reuse_key: Boolean (Optional)
     *             crv: String(P-256/P-384/P-521/P-256K) (Optional)
     *         }
     *         secret_props (Optional): {
     *             contentType: String (Optional)
     *         }
     *         x509_props (Optional): {
     *             subject: String (Optional)
     *             ekus (Optional): [
     *                 String (Optional)
     *             ]
     *             sans (Optional): {
     *                 emails (Optional): [
     *                     String (Optional)
     *                 ]
     *                 dns_names (Optional): [
     *                     String (Optional)
     *                 ]
     *                 upns (Optional): [
     *                     String (Optional)
     *                 ]
     *             }
     *             key_usage (Optional): [
     *                 String(digitalSignature/nonRepudiation/keyEncipherment/dataEncipherment/keyAgreement/keyCertSign/cRLSign/encipherOnly/decipherOnly) (Optional)
     *             ]
     *             validity_months: Integer (Optional)
     *         }
     *         lifetime_actions (Optional): [
     *              (Optional){
     *                 trigger (Optional): {
     *                     lifetime_percentage: Integer (Optional)
     *                     days_before_expiry: Integer (Optional)
     *                 }
     *                 action (Optional): {
     *                     action_type: String(EmailContacts/AutoRenew) (Optional)
     *                 }
     *             }
     *         ]
     *         issuer (Optional): {
     *             name: String (Optional)
     *             cty: String (Optional)
     *             cert_transparency: Boolean (Optional)
     *         }
     *         attributes (Optional): {
     *             enabled: Boolean (Optional)
     *             nbf: Long (Optional)
     *             exp: Long (Optional)
     *             created: Long (Optional)
     *             updated: Long (Optional)
     *             recoverableDays: Integer (Optional)
     *             recoveryLevel: String (Optional)
     *         }
     *     }
     *     cer: byte[] (Optional)
     *     contentType: String (Optional)
     *     attributes (Optional): (recursive schema, see attributes above)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     *
     * @param certificateName The name of the certificate. The value you provide may be copied globally for
     * the purpose of running the service. The value provided should not include
     * personally identifiable or sensitive information.
     * @param parameters The parameters to import the certificate.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a certificate bundle consists of a certificate (X509) plus its attributes along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> importCertificateWithResponse(String certificateName, BinaryData parameters,
        RequestOptions requestOptions) {
        return this.serviceClient.importCertificateWithResponseAsync(certificateName, parameters, requestOptions);
    }

    /**
     * List the versions of a certificate.
     *
     * The GetCertificateVersions operation returns the versions of a certificate in
     * the specified key vault. This operation requires the certificates/list
     * permission.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxresults</td><td>Integer</td><td>No</td><td>Maximum number of results to return in a page. If not
     * specified the service
     * will return up to 25 results.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     attributes (Optional): {
     *         enabled: Boolean (Optional)
     *         nbf: Long (Optional)
     *         exp: Long (Optional)
     *         created: Long (Optional)
     *         updated: Long (Optional)
     *         recoverableDays: Integer (Optional)
     *         recoveryLevel: String (Optional)
     *     }
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     x5t: Base64Url (Optional)
     * }
     * }</pre>
     *
     * @param certificateName The name of the certificate.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the certificate list result as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> getCertificateVersions(String certificateName, RequestOptions requestOptions) {
        return this.serviceClient.getCertificateVersionsAsync(certificateName, requestOptions);
    }

    /**
     * Lists the policy for a certificate.
     *
     * The GetCertificatePolicy operation returns the specified certificate policy
     * resources in the specified key vault. This operation requires the
     * certificates/get permission.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     key_props (Optional): {
     *         exportable: Boolean (Optional)
     *         kty: String(EC/EC-HSM/RSA/RSA-HSM/oct/oct-HSM) (Optional)
     *         key_size: Integer (Optional)
     *         reuse_key: Boolean (Optional)
     *         crv: String(P-256/P-384/P-521/P-256K) (Optional)
     *     }
     *     secret_props (Optional): {
     *         contentType: String (Optional)
     *     }
     *     x509_props (Optional): {
     *         subject: String (Optional)
     *         ekus (Optional): [
     *             String (Optional)
     *         ]
     *         sans (Optional): {
     *             emails (Optional): [
     *                 String (Optional)
     *             ]
     *             dns_names (Optional): [
     *                 String (Optional)
     *             ]
     *             upns (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *         key_usage (Optional): [
     *             String(digitalSignature/nonRepudiation/keyEncipherment/dataEncipherment/keyAgreement/keyCertSign/cRLSign/encipherOnly/decipherOnly) (Optional)
     *         ]
     *         validity_months: Integer (Optional)
     *     }
     *     lifetime_actions (Optional): [
     *          (Optional){
     *             trigger (Optional): {
     *                 lifetime_percentage: Integer (Optional)
     *                 days_before_expiry: Integer (Optional)
     *             }
     *             action (Optional): {
     *                 action_type: String(EmailContacts/AutoRenew) (Optional)
     *             }
     *         }
     *     ]
     *     issuer (Optional): {
     *         name: String (Optional)
     *         cty: String (Optional)
     *         cert_transparency: Boolean (Optional)
     *     }
     *     attributes (Optional): {
     *         enabled: Boolean (Optional)
     *         nbf: Long (Optional)
     *         exp: Long (Optional)
     *         created: Long (Optional)
     *         updated: Long (Optional)
     *         recoverableDays: Integer (Optional)
     *         recoveryLevel: String (Optional)
     *     }
     * }
     * }</pre>
     *
     * @param certificateName The name of the certificate in a given key vault.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return management policy for a certificate along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getCertificatePolicyWithResponse(String certificateName,
        RequestOptions requestOptions) {
        return this.serviceClient.getCertificatePolicyWithResponseAsync(certificateName, requestOptions);
    }

    /**
     * Updates the policy for a certificate.
     *
     * Set specified members in the certificate policy. Leave others as null. This
     * operation requires the certificates/update permission.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     key_props (Optional): {
     *         exportable: Boolean (Optional)
     *         kty: String(EC/EC-HSM/RSA/RSA-HSM/oct/oct-HSM) (Optional)
     *         key_size: Integer (Optional)
     *         reuse_key: Boolean (Optional)
     *         crv: String(P-256/P-384/P-521/P-256K) (Optional)
     *     }
     *     secret_props (Optional): {
     *         contentType: String (Optional)
     *     }
     *     x509_props (Optional): {
     *         subject: String (Optional)
     *         ekus (Optional): [
     *             String (Optional)
     *         ]
     *         sans (Optional): {
     *             emails (Optional): [
     *                 String (Optional)
     *             ]
     *             dns_names (Optional): [
     *                 String (Optional)
     *             ]
     *             upns (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *         key_usage (Optional): [
     *             String(digitalSignature/nonRepudiation/keyEncipherment/dataEncipherment/keyAgreement/keyCertSign/cRLSign/encipherOnly/decipherOnly) (Optional)
     *         ]
     *         validity_months: Integer (Optional)
     *     }
     *     lifetime_actions (Optional): [
     *          (Optional){
     *             trigger (Optional): {
     *                 lifetime_percentage: Integer (Optional)
     *                 days_before_expiry: Integer (Optional)
     *             }
     *             action (Optional): {
     *                 action_type: String(EmailContacts/AutoRenew) (Optional)
     *             }
     *         }
     *     ]
     *     issuer (Optional): {
     *         name: String (Optional)
     *         cty: String (Optional)
     *         cert_transparency: Boolean (Optional)
     *     }
     *     attributes (Optional): {
     *         enabled: Boolean (Optional)
     *         nbf: Long (Optional)
     *         exp: Long (Optional)
     *         created: Long (Optional)
     *         updated: Long (Optional)
     *         recoverableDays: Integer (Optional)
     *         recoveryLevel: String (Optional)
     *     }
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     key_props (Optional): {
     *         exportable: Boolean (Optional)
     *         kty: String(EC/EC-HSM/RSA/RSA-HSM/oct/oct-HSM) (Optional)
     *         key_size: Integer (Optional)
     *         reuse_key: Boolean (Optional)
     *         crv: String(P-256/P-384/P-521/P-256K) (Optional)
     *     }
     *     secret_props (Optional): {
     *         contentType: String (Optional)
     *     }
     *     x509_props (Optional): {
     *         subject: String (Optional)
     *         ekus (Optional): [
     *             String (Optional)
     *         ]
     *         sans (Optional): {
     *             emails (Optional): [
     *                 String (Optional)
     *             ]
     *             dns_names (Optional): [
     *                 String (Optional)
     *             ]
     *             upns (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *         key_usage (Optional): [
     *             String(digitalSignature/nonRepudiation/keyEncipherment/dataEncipherment/keyAgreement/keyCertSign/cRLSign/encipherOnly/decipherOnly) (Optional)
     *         ]
     *         validity_months: Integer (Optional)
     *     }
     *     lifetime_actions (Optional): [
     *          (Optional){
     *             trigger (Optional): {
     *                 lifetime_percentage: Integer (Optional)
     *                 days_before_expiry: Integer (Optional)
     *             }
     *             action (Optional): {
     *                 action_type: String(EmailContacts/AutoRenew) (Optional)
     *             }
     *         }
     *     ]
     *     issuer (Optional): {
     *         name: String (Optional)
     *         cty: String (Optional)
     *         cert_transparency: Boolean (Optional)
     *     }
     *     attributes (Optional): {
     *         enabled: Boolean (Optional)
     *         nbf: Long (Optional)
     *         exp: Long (Optional)
     *         created: Long (Optional)
     *         updated: Long (Optional)
     *         recoverableDays: Integer (Optional)
     *         recoveryLevel: String (Optional)
     *     }
     * }
     * }</pre>
     *
     * @param certificateName The name of the certificate in the given vault.
     * @param certificatePolicy The policy for the certificate.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return management policy for a certificate along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> updateCertificatePolicyWithResponse(String certificateName,
        BinaryData certificatePolicy, RequestOptions requestOptions) {
        return this.serviceClient.updateCertificatePolicyWithResponseAsync(certificateName, certificatePolicy,
            requestOptions);
    }

    /**
     * Updates the specified attributes associated with the given certificate.
     *
     * The UpdateCertificate operation applies the specified update on the given
     * certificate; the only elements updated are the certificate's attributes. This
     * operation requires the certificates/update permission.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     policy (Optional): {
     *         id: String (Optional)
     *         key_props (Optional): {
     *             exportable: Boolean (Optional)
     *             kty: String(EC/EC-HSM/RSA/RSA-HSM/oct/oct-HSM) (Optional)
     *             key_size: Integer (Optional)
     *             reuse_key: Boolean (Optional)
     *             crv: String(P-256/P-384/P-521/P-256K) (Optional)
     *         }
     *         secret_props (Optional): {
     *             contentType: String (Optional)
     *         }
     *         x509_props (Optional): {
     *             subject: String (Optional)
     *             ekus (Optional): [
     *                 String (Optional)
     *             ]
     *             sans (Optional): {
     *                 emails (Optional): [
     *                     String (Optional)
     *                 ]
     *                 dns_names (Optional): [
     *                     String (Optional)
     *                 ]
     *                 upns (Optional): [
     *                     String (Optional)
     *                 ]
     *             }
     *             key_usage (Optional): [
     *                 String(digitalSignature/nonRepudiation/keyEncipherment/dataEncipherment/keyAgreement/keyCertSign/cRLSign/encipherOnly/decipherOnly) (Optional)
     *             ]
     *             validity_months: Integer (Optional)
     *         }
     *         lifetime_actions (Optional): [
     *              (Optional){
     *                 trigger (Optional): {
     *                     lifetime_percentage: Integer (Optional)
     *                     days_before_expiry: Integer (Optional)
     *                 }
     *                 action (Optional): {
     *                     action_type: String(EmailContacts/AutoRenew) (Optional)
     *                 }
     *             }
     *         ]
     *         issuer (Optional): {
     *             name: String (Optional)
     *             cty: String (Optional)
     *             cert_transparency: Boolean (Optional)
     *         }
     *         attributes (Optional): {
     *             enabled: Boolean (Optional)
     *             nbf: Long (Optional)
     *             exp: Long (Optional)
     *             created: Long (Optional)
     *             updated: Long (Optional)
     *             recoverableDays: Integer (Optional)
     *             recoveryLevel: String (Optional)
     *         }
     *     }
     *     attributes (Optional): (recursive schema, see attributes above)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     kid: String (Optional)
     *     sid: String (Optional)
     *     x5t: Base64Url (Optional)
     *     policy (Optional): {
     *         id: String (Optional)
     *         key_props (Optional): {
     *             exportable: Boolean (Optional)
     *             kty: String(EC/EC-HSM/RSA/RSA-HSM/oct/oct-HSM) (Optional)
     *             key_size: Integer (Optional)
     *             reuse_key: Boolean (Optional)
     *             crv: String(P-256/P-384/P-521/P-256K) (Optional)
     *         }
     *         secret_props (Optional): {
     *             contentType: String (Optional)
     *         }
     *         x509_props (Optional): {
     *             subject: String (Optional)
     *             ekus (Optional): [
     *                 String (Optional)
     *             ]
     *             sans (Optional): {
     *                 emails (Optional): [
     *                     String (Optional)
     *                 ]
     *                 dns_names (Optional): [
     *                     String (Optional)
     *                 ]
     *                 upns (Optional): [
     *                     String (Optional)
     *                 ]
     *             }
     *             key_usage (Optional): [
     *                 String(digitalSignature/nonRepudiation/keyEncipherment/dataEncipherment/keyAgreement/keyCertSign/cRLSign/encipherOnly/decipherOnly) (Optional)
     *             ]
     *             validity_months: Integer (Optional)
     *         }
     *         lifetime_actions (Optional): [
     *              (Optional){
     *                 trigger (Optional): {
     *                     lifetime_percentage: Integer (Optional)
     *                     days_before_expiry: Integer (Optional)
     *                 }
     *                 action (Optional): {
     *                     action_type: String(EmailContacts/AutoRenew) (Optional)
     *                 }
     *             }
     *         ]
     *         issuer (Optional): {
     *             name: String (Optional)
     *             cty: String (Optional)
     *             cert_transparency: Boolean (Optional)
     *         }
     *         attributes (Optional): {
     *             enabled: Boolean (Optional)
     *             nbf: Long (Optional)
     *             exp: Long (Optional)
     *             created: Long (Optional)
     *             updated: Long (Optional)
     *             recoverableDays: Integer (Optional)
     *             recoveryLevel: String (Optional)
     *         }
     *     }
     *     cer: byte[] (Optional)
     *     contentType: String (Optional)
     *     attributes (Optional): (recursive schema, see attributes above)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     *
     * @param certificateName The name of the certificate in the given key vault.
     * @param certificateVersion The version of the certificate.
     * @param parameters The parameters for certificate update.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a certificate bundle consists of a certificate (X509) plus its attributes along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> updateCertificateWithResponse(String certificateName, String certificateVersion,
        BinaryData parameters, RequestOptions requestOptions) {
        return this.serviceClient.updateCertificateWithResponseAsync(certificateName, certificateVersion, parameters,
            requestOptions);
    }

    /**
     * Gets information about a certificate.
     *
     * Gets information about a specific certificate. This operation requires the
     * certificates/get permission.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     kid: String (Optional)
     *     sid: String (Optional)
     *     x5t: Base64Url (Optional)
     *     policy (Optional): {
     *         id: String (Optional)
     *         key_props (Optional): {
     *             exportable: Boolean (Optional)
     *             kty: String(EC/EC-HSM/RSA/RSA-HSM/oct/oct-HSM) (Optional)
     *             key_size: Integer (Optional)
     *             reuse_key: Boolean (Optional)
     *             crv: String(P-256/P-384/P-521/P-256K) (Optional)
     *         }
     *         secret_props (Optional): {
     *             contentType: String (Optional)
     *         }
     *         x509_props (Optional): {
     *             subject: String (Optional)
     *             ekus (Optional): [
     *                 String (Optional)
     *             ]
     *             sans (Optional): {
     *                 emails (Optional): [
     *                     String (Optional)
     *                 ]
     *                 dns_names (Optional): [
     *                     String (Optional)
     *                 ]
     *                 upns (Optional): [
     *                     String (Optional)
     *                 ]
     *             }
     *             key_usage (Optional): [
     *                 String(digitalSignature/nonRepudiation/keyEncipherment/dataEncipherment/keyAgreement/keyCertSign/cRLSign/encipherOnly/decipherOnly) (Optional)
     *             ]
     *             validity_months: Integer (Optional)
     *         }
     *         lifetime_actions (Optional): [
     *              (Optional){
     *                 trigger (Optional): {
     *                     lifetime_percentage: Integer (Optional)
     *                     days_before_expiry: Integer (Optional)
     *                 }
     *                 action (Optional): {
     *                     action_type: String(EmailContacts/AutoRenew) (Optional)
     *                 }
     *             }
     *         ]
     *         issuer (Optional): {
     *             name: String (Optional)
     *             cty: String (Optional)
     *             cert_transparency: Boolean (Optional)
     *         }
     *         attributes (Optional): {
     *             enabled: Boolean (Optional)
     *             nbf: Long (Optional)
     *             exp: Long (Optional)
     *             created: Long (Optional)
     *             updated: Long (Optional)
     *             recoverableDays: Integer (Optional)
     *             recoveryLevel: String (Optional)
     *         }
     *     }
     *     cer: byte[] (Optional)
     *     contentType: String (Optional)
     *     attributes (Optional): (recursive schema, see attributes above)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     *
     * @param certificateName The name of the certificate in the given vault.
     * @param certificateVersion The version of the certificate. This URI fragment is optional. If not
     * specified, the latest version of the certificate is returned.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return information about a specific certificate along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getCertificateWithResponse(String certificateName, String certificateVersion,
        RequestOptions requestOptions) {
        return this.serviceClient.getCertificateWithResponseAsync(certificateName, certificateVersion, requestOptions);
    }

    /**
     * Updates a certificate operation.
     *
     * Updates a certificate creation operation that is already in progress. This
     * operation requires the certificates/update permission.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     cancellation_requested: boolean (Required)
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     issuer (Optional): {
     *         name: String (Optional)
     *         cty: String (Optional)
     *         cert_transparency: Boolean (Optional)
     *     }
     *     csr: byte[] (Optional)
     *     cancellation_requested: Boolean (Optional)
     *     status: String (Optional)
     *     status_details: String (Optional)
     *     error (Optional): {
     *         code: String (Optional)
     *         message: String (Optional)
     *         innererror (Optional): (recursive schema, see innererror above)
     *     }
     *     target: String (Optional)
     *     request_id: String (Optional)
     * }
     * }</pre>
     *
     * @param certificateName The name of the certificate.
     * @param certificateOperation The certificate operation response.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a certificate operation is returned in case of asynchronous requests along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> updateCertificateOperationWithResponse(String certificateName,
        BinaryData certificateOperation, RequestOptions requestOptions) {
        return this.serviceClient.updateCertificateOperationWithResponseAsync(certificateName, certificateOperation,
            requestOptions);
    }

    /**
     * Gets the creation operation of a certificate.
     *
     * Gets the creation operation associated with a specified certificate. This
     * operation requires the certificates/get permission.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     issuer (Optional): {
     *         name: String (Optional)
     *         cty: String (Optional)
     *         cert_transparency: Boolean (Optional)
     *     }
     *     csr: byte[] (Optional)
     *     cancellation_requested: Boolean (Optional)
     *     status: String (Optional)
     *     status_details: String (Optional)
     *     error (Optional): {
     *         code: String (Optional)
     *         message: String (Optional)
     *         innererror (Optional): (recursive schema, see innererror above)
     *     }
     *     target: String (Optional)
     *     request_id: String (Optional)
     * }
     * }</pre>
     *
     * @param certificateName The name of the certificate.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the creation operation associated with a specified certificate along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getCertificateOperationWithResponse(String certificateName,
        RequestOptions requestOptions) {
        return this.serviceClient.getCertificateOperationWithResponseAsync(certificateName, requestOptions);
    }

    /**
     * Deletes the creation operation for a specific certificate.
     *
     * Deletes the creation operation for a specified certificate that is in the
     * process of being created. The certificate is no longer created. This operation
     * requires the certificates/update permission.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     issuer (Optional): {
     *         name: String (Optional)
     *         cty: String (Optional)
     *         cert_transparency: Boolean (Optional)
     *     }
     *     csr: byte[] (Optional)
     *     cancellation_requested: Boolean (Optional)
     *     status: String (Optional)
     *     status_details: String (Optional)
     *     error (Optional): {
     *         code: String (Optional)
     *         message: String (Optional)
     *         innererror (Optional): (recursive schema, see innererror above)
     *     }
     *     target: String (Optional)
     *     request_id: String (Optional)
     * }
     * }</pre>
     *
     * @param certificateName The name of the certificate.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a certificate operation is returned in case of asynchronous requests along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> deleteCertificateOperationWithResponse(String certificateName,
        RequestOptions requestOptions) {
        return this.serviceClient.deleteCertificateOperationWithResponseAsync(certificateName, requestOptions);
    }

    /**
     * Merges a certificate or a certificate chain with a key pair existing on the server.
     *
     * The MergeCertificate operation performs the merging of a certificate or
     * certificate chain with a key pair currently available in the service. This
     * operation requires the certificates/create permission.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     x5c (Required): [
     *         byte[] (Required)
     *     ]
     *     attributes (Optional): {
     *         enabled: Boolean (Optional)
     *         nbf: Long (Optional)
     *         exp: Long (Optional)
     *         created: Long (Optional)
     *         updated: Long (Optional)
     *         recoverableDays: Integer (Optional)
     *         recoveryLevel: String (Optional)
     *     }
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     kid: String (Optional)
     *     sid: String (Optional)
     *     x5t: Base64Url (Optional)
     *     policy (Optional): {
     *         id: String (Optional)
     *         key_props (Optional): {
     *             exportable: Boolean (Optional)
     *             kty: String(EC/EC-HSM/RSA/RSA-HSM/oct/oct-HSM) (Optional)
     *             key_size: Integer (Optional)
     *             reuse_key: Boolean (Optional)
     *             crv: String(P-256/P-384/P-521/P-256K) (Optional)
     *         }
     *         secret_props (Optional): {
     *             contentType: String (Optional)
     *         }
     *         x509_props (Optional): {
     *             subject: String (Optional)
     *             ekus (Optional): [
     *                 String (Optional)
     *             ]
     *             sans (Optional): {
     *                 emails (Optional): [
     *                     String (Optional)
     *                 ]
     *                 dns_names (Optional): [
     *                     String (Optional)
     *                 ]
     *                 upns (Optional): [
     *                     String (Optional)
     *                 ]
     *             }
     *             key_usage (Optional): [
     *                 String(digitalSignature/nonRepudiation/keyEncipherment/dataEncipherment/keyAgreement/keyCertSign/cRLSign/encipherOnly/decipherOnly) (Optional)
     *             ]
     *             validity_months: Integer (Optional)
     *         }
     *         lifetime_actions (Optional): [
     *              (Optional){
     *                 trigger (Optional): {
     *                     lifetime_percentage: Integer (Optional)
     *                     days_before_expiry: Integer (Optional)
     *                 }
     *                 action (Optional): {
     *                     action_type: String(EmailContacts/AutoRenew) (Optional)
     *                 }
     *             }
     *         ]
     *         issuer (Optional): {
     *             name: String (Optional)
     *             cty: String (Optional)
     *             cert_transparency: Boolean (Optional)
     *         }
     *         attributes (Optional): {
     *             enabled: Boolean (Optional)
     *             nbf: Long (Optional)
     *             exp: Long (Optional)
     *             created: Long (Optional)
     *             updated: Long (Optional)
     *             recoverableDays: Integer (Optional)
     *             recoveryLevel: String (Optional)
     *         }
     *     }
     *     cer: byte[] (Optional)
     *     contentType: String (Optional)
     *     attributes (Optional): (recursive schema, see attributes above)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     *
     * @param certificateName The name of the certificate.
     * @param parameters The parameters to merge certificate.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a certificate bundle consists of a certificate (X509) plus its attributes along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> mergeCertificateWithResponse(String certificateName, BinaryData parameters,
        RequestOptions requestOptions) {
        return this.serviceClient.mergeCertificateWithResponseAsync(certificateName, parameters, requestOptions);
    }

    /**
     * Backs up the specified certificate.
     *
     * Requests that a backup of the specified certificate be downloaded to the
     * client. All versions of the certificate will be downloaded. This operation
     * requires the certificates/backup permission.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     value: Base64Url (Optional)
     * }
     * }</pre>
     *
     * @param certificateName The name of the certificate.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the backup certificate result, containing the backup blob along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> backupCertificateWithResponse(String certificateName,
        RequestOptions requestOptions) {
        return this.serviceClient.backupCertificateWithResponseAsync(certificateName, requestOptions);
    }

    /**
     * Restores a backed up certificate to a vault.
     *
     * Restores a backed up certificate, and all its versions, to a vault. This
     * operation requires the certificates/restore permission.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     value: Base64Url (Required)
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     kid: String (Optional)
     *     sid: String (Optional)
     *     x5t: Base64Url (Optional)
     *     policy (Optional): {
     *         id: String (Optional)
     *         key_props (Optional): {
     *             exportable: Boolean (Optional)
     *             kty: String(EC/EC-HSM/RSA/RSA-HSM/oct/oct-HSM) (Optional)
     *             key_size: Integer (Optional)
     *             reuse_key: Boolean (Optional)
     *             crv: String(P-256/P-384/P-521/P-256K) (Optional)
     *         }
     *         secret_props (Optional): {
     *             contentType: String (Optional)
     *         }
     *         x509_props (Optional): {
     *             subject: String (Optional)
     *             ekus (Optional): [
     *                 String (Optional)
     *             ]
     *             sans (Optional): {
     *                 emails (Optional): [
     *                     String (Optional)
     *                 ]
     *                 dns_names (Optional): [
     *                     String (Optional)
     *                 ]
     *                 upns (Optional): [
     *                     String (Optional)
     *                 ]
     *             }
     *             key_usage (Optional): [
     *                 String(digitalSignature/nonRepudiation/keyEncipherment/dataEncipherment/keyAgreement/keyCertSign/cRLSign/encipherOnly/decipherOnly) (Optional)
     *             ]
     *             validity_months: Integer (Optional)
     *         }
     *         lifetime_actions (Optional): [
     *              (Optional){
     *                 trigger (Optional): {
     *                     lifetime_percentage: Integer (Optional)
     *                     days_before_expiry: Integer (Optional)
     *                 }
     *                 action (Optional): {
     *                     action_type: String(EmailContacts/AutoRenew) (Optional)
     *                 }
     *             }
     *         ]
     *         issuer (Optional): {
     *             name: String (Optional)
     *             cty: String (Optional)
     *             cert_transparency: Boolean (Optional)
     *         }
     *         attributes (Optional): {
     *             enabled: Boolean (Optional)
     *             nbf: Long (Optional)
     *             exp: Long (Optional)
     *             created: Long (Optional)
     *             updated: Long (Optional)
     *             recoverableDays: Integer (Optional)
     *             recoveryLevel: String (Optional)
     *         }
     *     }
     *     cer: byte[] (Optional)
     *     contentType: String (Optional)
     *     attributes (Optional): (recursive schema, see attributes above)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     *
     * @param parameters The parameters to restore the certificate.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a certificate bundle consists of a certificate (X509) plus its attributes along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> restoreCertificateWithResponse(BinaryData parameters,
        RequestOptions requestOptions) {
        return this.serviceClient.restoreCertificateWithResponseAsync(parameters, requestOptions);
    }

    /**
     * Lists the deleted certificates in the specified vault currently available for recovery.
     *
     * The GetDeletedCertificates operation retrieves the certificates in the current
     * vault which are in a deleted state and ready for recovery or purging. This
     * operation includes deletion-specific information. This operation requires the
     * certificates/get/list permission. This operation can only be enabled on
     * soft-delete enabled vaults.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxresults</td><td>Integer</td><td>No</td><td>Maximum number of results to return in a page. If not
     * specified the service
     * will return up to 25 results.</td></tr>
     * <tr><td>includePending</td><td>Boolean</td><td>No</td><td>Specifies whether to include certificates which are not
     * completely provisioned.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     value (Optional): [
     *          (Optional){
     *             id: String (Optional)
     *             attributes (Optional): {
     *                 enabled: Boolean (Optional)
     *                 nbf: Long (Optional)
     *                 exp: Long (Optional)
     *                 created: Long (Optional)
     *                 updated: Long (Optional)
     *                 recoverableDays: Integer (Optional)
     *                 recoveryLevel: String (Optional)
     *             }
     *             tags (Optional): {
     *                 String: String (Required)
     *             }
     *             x5t: Base64Url (Optional)
     *             recoveryId: String (Optional)
     *             scheduledPurgeDate: Long (Optional)
     *             deletedDate: Long (Optional)
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of certificates that have been deleted in this vault along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDeletedCertificatesWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.getDeletedCertificatesWithResponseAsync(requestOptions);
    }

    /**
     * Retrieves information about the specified deleted certificate.
     *
     * The GetDeletedCertificate operation retrieves the deleted certificate
     * information plus its attributes, such as retention interval, scheduled
     * permanent deletion and the current deletion recovery level. This operation
     * requires the certificates/get permission.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     kid: String (Optional)
     *     sid: String (Optional)
     *     x5t: Base64Url (Optional)
     *     policy (Optional): {
     *         id: String (Optional)
     *         key_props (Optional): {
     *             exportable: Boolean (Optional)
     *             kty: String(EC/EC-HSM/RSA/RSA-HSM/oct/oct-HSM) (Optional)
     *             key_size: Integer (Optional)
     *             reuse_key: Boolean (Optional)
     *             crv: String(P-256/P-384/P-521/P-256K) (Optional)
     *         }
     *         secret_props (Optional): {
     *             contentType: String (Optional)
     *         }
     *         x509_props (Optional): {
     *             subject: String (Optional)
     *             ekus (Optional): [
     *                 String (Optional)
     *             ]
     *             sans (Optional): {
     *                 emails (Optional): [
     *                     String (Optional)
     *                 ]
     *                 dns_names (Optional): [
     *                     String (Optional)
     *                 ]
     *                 upns (Optional): [
     *                     String (Optional)
     *                 ]
     *             }
     *             key_usage (Optional): [
     *                 String(digitalSignature/nonRepudiation/keyEncipherment/dataEncipherment/keyAgreement/keyCertSign/cRLSign/encipherOnly/decipherOnly) (Optional)
     *             ]
     *             validity_months: Integer (Optional)
     *         }
     *         lifetime_actions (Optional): [
     *              (Optional){
     *                 trigger (Optional): {
     *                     lifetime_percentage: Integer (Optional)
     *                     days_before_expiry: Integer (Optional)
     *                 }
     *                 action (Optional): {
     *                     action_type: String(EmailContacts/AutoRenew) (Optional)
     *                 }
     *             }
     *         ]
     *         issuer (Optional): {
     *             name: String (Optional)
     *             cty: String (Optional)
     *             cert_transparency: Boolean (Optional)
     *         }
     *         attributes (Optional): {
     *             enabled: Boolean (Optional)
     *             nbf: Long (Optional)
     *             exp: Long (Optional)
     *             created: Long (Optional)
     *             updated: Long (Optional)
     *             recoverableDays: Integer (Optional)
     *             recoveryLevel: String (Optional)
     *         }
     *     }
     *     cer: byte[] (Optional)
     *     contentType: String (Optional)
     *     attributes (Optional): (recursive schema, see attributes above)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     recoveryId: String (Optional)
     *     scheduledPurgeDate: Long (Optional)
     *     deletedDate: Long (Optional)
     * }
     * }</pre>
     *
     * @param certificateName The name of the certificate.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a Deleted Certificate consisting of its previous id, attributes and its tags,
     * as well as information on when it will be purged along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDeletedCertificateWithResponse(String certificateName,
        RequestOptions requestOptions) {
        return this.serviceClient.getDeletedCertificateWithResponseAsync(certificateName, requestOptions);
    }

    /**
     * Permanently deletes the specified deleted certificate.
     *
     * The PurgeDeletedCertificate operation performs an irreversible deletion of the
     * specified certificate, without possibility for recovery. The operation is not
     * available if the recovery level does not specify 'Purgeable'. This operation
     * requires the certificate/purge permission.
     *
     * @param certificateName The name of the certificate.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> purgeDeletedCertificateWithResponse(String certificateName,
        RequestOptions requestOptions) {
        return this.serviceClient.purgeDeletedCertificateWithResponseAsync(certificateName, requestOptions);
    }

    /**
     * Recovers the deleted certificate back to its current version under /certificates.
     *
     * The RecoverDeletedCertificate operation performs the reversal of the Delete
     * operation. The operation is applicable in vaults enabled for soft-delete, and
     * must be issued during the retention interval (available in the deleted
     * certificate's attributes). This operation requires the certificates/recover
     * permission.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     kid: String (Optional)
     *     sid: String (Optional)
     *     x5t: Base64Url (Optional)
     *     policy (Optional): {
     *         id: String (Optional)
     *         key_props (Optional): {
     *             exportable: Boolean (Optional)
     *             kty: String(EC/EC-HSM/RSA/RSA-HSM/oct/oct-HSM) (Optional)
     *             key_size: Integer (Optional)
     *             reuse_key: Boolean (Optional)
     *             crv: String(P-256/P-384/P-521/P-256K) (Optional)
     *         }
     *         secret_props (Optional): {
     *             contentType: String (Optional)
     *         }
     *         x509_props (Optional): {
     *             subject: String (Optional)
     *             ekus (Optional): [
     *                 String (Optional)
     *             ]
     *             sans (Optional): {
     *                 emails (Optional): [
     *                     String (Optional)
     *                 ]
     *                 dns_names (Optional): [
     *                     String (Optional)
     *                 ]
     *                 upns (Optional): [
     *                     String (Optional)
     *                 ]
     *             }
     *             key_usage (Optional): [
     *                 String(digitalSignature/nonRepudiation/keyEncipherment/dataEncipherment/keyAgreement/keyCertSign/cRLSign/encipherOnly/decipherOnly) (Optional)
     *             ]
     *             validity_months: Integer (Optional)
     *         }
     *         lifetime_actions (Optional): [
     *              (Optional){
     *                 trigger (Optional): {
     *                     lifetime_percentage: Integer (Optional)
     *                     days_before_expiry: Integer (Optional)
     *                 }
     *                 action (Optional): {
     *                     action_type: String(EmailContacts/AutoRenew) (Optional)
     *                 }
     *             }
     *         ]
     *         issuer (Optional): {
     *             name: String (Optional)
     *             cty: String (Optional)
     *             cert_transparency: Boolean (Optional)
     *         }
     *         attributes (Optional): {
     *             enabled: Boolean (Optional)
     *             nbf: Long (Optional)
     *             exp: Long (Optional)
     *             created: Long (Optional)
     *             updated: Long (Optional)
     *             recoverableDays: Integer (Optional)
     *             recoveryLevel: String (Optional)
     *         }
     *     }
     *     cer: byte[] (Optional)
     *     contentType: String (Optional)
     *     attributes (Optional): (recursive schema, see attributes above)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     *
     * @param certificateName The name of the deleted certificate.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a certificate bundle consists of a certificate (X509) plus its attributes along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> recoverDeletedCertificateWithResponse(String certificateName,
        RequestOptions requestOptions) {
        return this.serviceClient.recoverDeletedCertificateWithResponseAsync(certificateName, requestOptions);
    }

    /**
     * List certificates in a specified key vault
     *
     * The GetCertificates operation returns the set of certificates resources in the
     * specified key vault. This operation requires the certificates/list permission.
     *
     * @param maxresults Maximum number of results to return in a page. If not specified the service
     * will return up to 25 results.
     * @param includePending Specifies whether to include certificates which are not completely provisioned.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the certificate list result as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<CertificateItem> getCertificates(Integer maxresults, Boolean includePending) {
        // Generated convenience method for getCertificates
        RequestOptions requestOptions = new RequestOptions();
        if (maxresults != null) {
            requestOptions.addQueryParam("maxresults", String.valueOf(maxresults), false);
        }
        if (includePending != null) {
            requestOptions.addQueryParam("includePending", String.valueOf(includePending), false);
        }
        PagedFlux<BinaryData> pagedFluxResponse = getCertificates(requestOptions);
        return PagedFlux.create(() -> (continuationTokenParam, pageSizeParam) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationTokenParam == null)
                ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationTokenParam).take(1);
            return flux.map(pagedResponse -> new PagedResponseBase<Void, CertificateItem>(pagedResponse.getRequest(),
                pagedResponse.getStatusCode(), pagedResponse.getHeaders(),
                pagedResponse.getValue()
                    .stream()
                    .map(protocolMethodData -> protocolMethodData.toObject(CertificateItem.class))
                    .collect(Collectors.toList()),
                pagedResponse.getContinuationToken(), null));
        });
    }

    /**
     * List certificates in a specified key vault
     *
     * The GetCertificates operation returns the set of certificates resources in the
     * specified key vault. This operation requires the certificates/list permission.
     *
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the certificate list result as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<CertificateItem> getCertificates() {
        // Generated convenience method for getCertificates
        RequestOptions requestOptions = new RequestOptions();
        PagedFlux<BinaryData> pagedFluxResponse = getCertificates(requestOptions);
        return PagedFlux.create(() -> (continuationTokenParam, pageSizeParam) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationTokenParam == null)
                ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationTokenParam).take(1);
            return flux.map(pagedResponse -> new PagedResponseBase<Void, CertificateItem>(pagedResponse.getRequest(),
                pagedResponse.getStatusCode(), pagedResponse.getHeaders(),
                pagedResponse.getValue()
                    .stream()
                    .map(protocolMethodData -> protocolMethodData.toObject(CertificateItem.class))
                    .collect(Collectors.toList()),
                pagedResponse.getContinuationToken(), null));
        });
    }

    /**
     * Deletes a certificate from a specified key vault.
     *
     * Deletes all versions of a certificate object along with its associated policy.
     * Delete certificate cannot be used to remove individual versions of a
     * certificate object. This operation requires the certificates/delete permission.
     *
     * @param certificateName The name of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Deleted Certificate consisting of its previous id, attributes and its tags,
     * as well as information on when it will be purged on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DeletedCertificateBundle> deleteCertificate(String certificateName) {
        // Generated convenience method for deleteCertificateWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return deleteCertificateWithResponse(certificateName, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(DeletedCertificateBundle.class));
    }

    /**
     * Sets the certificate contacts for the specified key vault.
     *
     * Sets the certificate contacts for the specified key vault. This operation
     * requires the certificates/managecontacts permission.
     *
     * @param contacts The contacts for the key vault certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the contacts for the vault certificates on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Contacts> setCertificateContacts(Contacts contacts) {
        // Generated convenience method for setCertificateContactsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return setCertificateContactsWithResponse(BinaryData.fromObject(contacts), requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(Contacts.class));
    }

    /**
     * Lists the certificate contacts for a specified key vault.
     *
     * The GetCertificateContacts operation returns the set of certificate contact
     * resources in the specified key vault. This operation requires the
     * certificates/managecontacts permission.
     *
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the contacts for the vault certificates on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Contacts> getCertificateContacts() {
        // Generated convenience method for getCertificateContactsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getCertificateContactsWithResponse(requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(Contacts.class));
    }

    /**
     * Deletes the certificate contacts for a specified key vault.
     *
     * Deletes the certificate contacts for a specified key vault certificate. This
     * operation requires the certificates/managecontacts permission.
     *
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the contacts for the vault certificates on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Contacts> deleteCertificateContacts() {
        // Generated convenience method for deleteCertificateContactsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return deleteCertificateContactsWithResponse(requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(Contacts.class));
    }

    /**
     * List certificate issuers for a specified key vault.
     *
     * The GetCertificateIssuers operation returns the set of certificate issuer
     * resources in the specified key vault. This operation requires the
     * certificates/manageissuers/getissuers permission.
     *
     * @param maxresults Maximum number of results to return in a page. If not specified the service
     * will return up to 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the certificate issuer list result as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<CertificateIssuerItem> getCertificateIssuers(Integer maxresults) {
        // Generated convenience method for getCertificateIssuers
        RequestOptions requestOptions = new RequestOptions();
        if (maxresults != null) {
            requestOptions.addQueryParam("maxresults", String.valueOf(maxresults), false);
        }
        PagedFlux<BinaryData> pagedFluxResponse = getCertificateIssuers(requestOptions);
        return PagedFlux.create(() -> (continuationTokenParam, pageSizeParam) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationTokenParam == null)
                ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationTokenParam).take(1);
            return flux
                .map(pagedResponse -> new PagedResponseBase<Void, CertificateIssuerItem>(pagedResponse.getRequest(),
                    pagedResponse.getStatusCode(), pagedResponse.getHeaders(),
                    pagedResponse.getValue()
                        .stream()
                        .map(protocolMethodData -> protocolMethodData.toObject(CertificateIssuerItem.class))
                        .collect(Collectors.toList()),
                    pagedResponse.getContinuationToken(), null));
        });
    }

    /**
     * List certificate issuers for a specified key vault.
     *
     * The GetCertificateIssuers operation returns the set of certificate issuer
     * resources in the specified key vault. This operation requires the
     * certificates/manageissuers/getissuers permission.
     *
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the certificate issuer list result as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<CertificateIssuerItem> getCertificateIssuers() {
        // Generated convenience method for getCertificateIssuers
        RequestOptions requestOptions = new RequestOptions();
        PagedFlux<BinaryData> pagedFluxResponse = getCertificateIssuers(requestOptions);
        return PagedFlux.create(() -> (continuationTokenParam, pageSizeParam) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationTokenParam == null)
                ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationTokenParam).take(1);
            return flux
                .map(pagedResponse -> new PagedResponseBase<Void, CertificateIssuerItem>(pagedResponse.getRequest(),
                    pagedResponse.getStatusCode(), pagedResponse.getHeaders(),
                    pagedResponse.getValue()
                        .stream()
                        .map(protocolMethodData -> protocolMethodData.toObject(CertificateIssuerItem.class))
                        .collect(Collectors.toList()),
                    pagedResponse.getContinuationToken(), null));
        });
    }

    /**
     * Sets the specified certificate issuer.
     *
     * The SetCertificateIssuer operation adds or updates the specified certificate
     * issuer. This operation requires the certificates/setissuers permission.
     *
     * @param issuerName The name of the issuer. The value you provide may be copied globally for the
     * purpose of running the service. The value provided should not include
     * personally identifiable or sensitive information.
     * @param parameter Certificate issuer set parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the issuer for Key Vault certificate on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<IssuerBundle> setCertificateIssuer(String issuerName, CertificateIssuerSetParameters parameter) {
        // Generated convenience method for setCertificateIssuerWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return setCertificateIssuerWithResponse(issuerName, BinaryData.fromObject(parameter), requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(IssuerBundle.class));
    }

    /**
     * Updates the specified certificate issuer.
     *
     * The UpdateCertificateIssuer operation performs an update on the specified
     * certificate issuer entity. This operation requires the certificates/setissuers
     * permission.
     *
     * @param issuerName The name of the issuer.
     * @param parameter Certificate issuer update parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the issuer for Key Vault certificate on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<IssuerBundle> updateCertificateIssuer(String issuerName, CertificateIssuerUpdateParameters parameter) {
        // Generated convenience method for updateCertificateIssuerWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return updateCertificateIssuerWithResponse(issuerName, BinaryData.fromObject(parameter), requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(IssuerBundle.class));
    }

    /**
     * Lists the specified certificate issuer.
     *
     * The GetCertificateIssuer operation returns the specified certificate issuer
     * resources in the specified key vault. This operation requires the
     * certificates/manageissuers/getissuers permission.
     *
     * @param issuerName The name of the issuer.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the issuer for Key Vault certificate on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<IssuerBundle> getCertificateIssuer(String issuerName) {
        // Generated convenience method for getCertificateIssuerWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getCertificateIssuerWithResponse(issuerName, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(IssuerBundle.class));
    }

    /**
     * Deletes the specified certificate issuer.
     *
     * The DeleteCertificateIssuer operation permanently removes the specified
     * certificate issuer from the vault. This operation requires the
     * certificates/manageissuers/deleteissuers permission.
     *
     * @param issuerName The name of the issuer.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the issuer for Key Vault certificate on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<IssuerBundle> deleteCertificateIssuer(String issuerName) {
        // Generated convenience method for deleteCertificateIssuerWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return deleteCertificateIssuerWithResponse(issuerName, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(IssuerBundle.class));
    }

    /**
     * Creates a new certificate.
     *
     * If this is the first version, the certificate resource is created. This
     * operation requires the certificates/create permission.
     *
     * @param certificateName The name of the certificate. The value you provide may be copied globally for
     * the purpose of running the service. The value provided should not include
     * personally identifiable or sensitive information.
     * @param parameters The parameters to create a certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a certificate operation is returned in case of asynchronous requests on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CertificateOperation> createCertificate(String certificateName,
        CertificateCreateParameters parameters) {
        // Generated convenience method for createCertificateWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createCertificateWithResponse(certificateName, BinaryData.fromObject(parameters), requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(CertificateOperation.class));
    }

    /**
     * Imports a certificate into a specified key vault.
     *
     * Imports an existing valid certificate, containing a private key, into Azure Key
     * Vault. This operation requires the certificates/import permission. The
     * certificate to be imported can be in either PFX or PEM format. If the
     * certificate is in PEM format the PEM file must contain the key as well as x509
     * certificates. Key Vault will only accept a key in PKCS#8 format.
     *
     * @param certificateName The name of the certificate. The value you provide may be copied globally for
     * the purpose of running the service. The value provided should not include
     * personally identifiable or sensitive information.
     * @param parameters The parameters to import the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a certificate bundle consists of a certificate (X509) plus its attributes on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CertificateBundle> importCertificate(String certificateName, CertificateImportParameters parameters) {
        // Generated convenience method for importCertificateWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return importCertificateWithResponse(certificateName, BinaryData.fromObject(parameters), requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(CertificateBundle.class));
    }

    /**
     * List the versions of a certificate.
     *
     * The GetCertificateVersions operation returns the versions of a certificate in
     * the specified key vault. This operation requires the certificates/list
     * permission.
     *
     * @param certificateName The name of the certificate.
     * @param maxresults Maximum number of results to return in a page. If not specified the service
     * will return up to 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the certificate list result as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<CertificateItem> getCertificateVersions(String certificateName, Integer maxresults) {
        // Generated convenience method for getCertificateVersions
        RequestOptions requestOptions = new RequestOptions();
        if (maxresults != null) {
            requestOptions.addQueryParam("maxresults", String.valueOf(maxresults), false);
        }
        PagedFlux<BinaryData> pagedFluxResponse = getCertificateVersions(certificateName, requestOptions);
        return PagedFlux.create(() -> (continuationTokenParam, pageSizeParam) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationTokenParam == null)
                ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationTokenParam).take(1);
            return flux.map(pagedResponse -> new PagedResponseBase<Void, CertificateItem>(pagedResponse.getRequest(),
                pagedResponse.getStatusCode(), pagedResponse.getHeaders(),
                pagedResponse.getValue()
                    .stream()
                    .map(protocolMethodData -> protocolMethodData.toObject(CertificateItem.class))
                    .collect(Collectors.toList()),
                pagedResponse.getContinuationToken(), null));
        });
    }

    /**
     * List the versions of a certificate.
     *
     * The GetCertificateVersions operation returns the versions of a certificate in
     * the specified key vault. This operation requires the certificates/list
     * permission.
     *
     * @param certificateName The name of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the certificate list result as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<CertificateItem> getCertificateVersions(String certificateName) {
        // Generated convenience method for getCertificateVersions
        RequestOptions requestOptions = new RequestOptions();
        PagedFlux<BinaryData> pagedFluxResponse = getCertificateVersions(certificateName, requestOptions);
        return PagedFlux.create(() -> (continuationTokenParam, pageSizeParam) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationTokenParam == null)
                ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationTokenParam).take(1);
            return flux.map(pagedResponse -> new PagedResponseBase<Void, CertificateItem>(pagedResponse.getRequest(),
                pagedResponse.getStatusCode(), pagedResponse.getHeaders(),
                pagedResponse.getValue()
                    .stream()
                    .map(protocolMethodData -> protocolMethodData.toObject(CertificateItem.class))
                    .collect(Collectors.toList()),
                pagedResponse.getContinuationToken(), null));
        });
    }

    /**
     * Lists the policy for a certificate.
     *
     * The GetCertificatePolicy operation returns the specified certificate policy
     * resources in the specified key vault. This operation requires the
     * certificates/get permission.
     *
     * @param certificateName The name of the certificate in a given key vault.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return management policy for a certificate on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CertificatePolicy> getCertificatePolicy(String certificateName) {
        // Generated convenience method for getCertificatePolicyWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getCertificatePolicyWithResponse(certificateName, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(CertificatePolicy.class));
    }

    /**
     * Updates the policy for a certificate.
     *
     * Set specified members in the certificate policy. Leave others as null. This
     * operation requires the certificates/update permission.
     *
     * @param certificateName The name of the certificate in the given vault.
     * @param certificatePolicy The policy for the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return management policy for a certificate on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CertificatePolicy> updateCertificatePolicy(String certificateName,
        CertificatePolicy certificatePolicy) {
        // Generated convenience method for updateCertificatePolicyWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return updateCertificatePolicyWithResponse(certificateName, BinaryData.fromObject(certificatePolicy),
            requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(CertificatePolicy.class));
    }

    /**
     * Updates the specified attributes associated with the given certificate.
     *
     * The UpdateCertificate operation applies the specified update on the given
     * certificate; the only elements updated are the certificate's attributes. This
     * operation requires the certificates/update permission.
     *
     * @param certificateName The name of the certificate in the given key vault.
     * @param certificateVersion The version of the certificate.
     * @param parameters The parameters for certificate update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a certificate bundle consists of a certificate (X509) plus its attributes on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CertificateBundle> updateCertificate(String certificateName, String certificateVersion,
        CertificateUpdateParameters parameters) {
        // Generated convenience method for updateCertificateWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return updateCertificateWithResponse(certificateName, certificateVersion, BinaryData.fromObject(parameters),
            requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(CertificateBundle.class));
    }

    /**
     * Gets information about a certificate.
     *
     * Gets information about a specific certificate. This operation requires the
     * certificates/get permission.
     *
     * @param certificateName The name of the certificate in the given vault.
     * @param certificateVersion The version of the certificate. This URI fragment is optional. If not
     * specified, the latest version of the certificate is returned.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about a specific certificate on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CertificateBundle> getCertificate(String certificateName, String certificateVersion) {
        // Generated convenience method for getCertificateWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getCertificateWithResponse(certificateName, certificateVersion, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(CertificateBundle.class));
    }

    /**
     * Updates a certificate operation.
     *
     * Updates a certificate creation operation that is already in progress. This
     * operation requires the certificates/update permission.
     *
     * @param certificateName The name of the certificate.
     * @param certificateOperation The certificate operation response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a certificate operation is returned in case of asynchronous requests on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CertificateOperation> updateCertificateOperation(String certificateName,
        CertificateOperationUpdateParameter certificateOperation) {
        // Generated convenience method for updateCertificateOperationWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return updateCertificateOperationWithResponse(certificateName, BinaryData.fromObject(certificateOperation),
            requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(CertificateOperation.class));
    }

    /**
     * Gets the creation operation of a certificate.
     *
     * Gets the creation operation associated with a specified certificate. This
     * operation requires the certificates/get permission.
     *
     * @param certificateName The name of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the creation operation associated with a specified certificate on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CertificateOperation> getCertificateOperation(String certificateName) {
        // Generated convenience method for getCertificateOperationWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getCertificateOperationWithResponse(certificateName, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(CertificateOperation.class));
    }

    /**
     * Deletes the creation operation for a specific certificate.
     *
     * Deletes the creation operation for a specified certificate that is in the
     * process of being created. The certificate is no longer created. This operation
     * requires the certificates/update permission.
     *
     * @param certificateName The name of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a certificate operation is returned in case of asynchronous requests on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CertificateOperation> deleteCertificateOperation(String certificateName) {
        // Generated convenience method for deleteCertificateOperationWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return deleteCertificateOperationWithResponse(certificateName, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(CertificateOperation.class));
    }

    /**
     * Merges a certificate or a certificate chain with a key pair existing on the server.
     *
     * The MergeCertificate operation performs the merging of a certificate or
     * certificate chain with a key pair currently available in the service. This
     * operation requires the certificates/create permission.
     *
     * @param certificateName The name of the certificate.
     * @param parameters The parameters to merge certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a certificate bundle consists of a certificate (X509) plus its attributes on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CertificateBundle> mergeCertificate(String certificateName, CertificateMergeParameters parameters) {
        // Generated convenience method for mergeCertificateWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return mergeCertificateWithResponse(certificateName, BinaryData.fromObject(parameters), requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(CertificateBundle.class));
    }

    /**
     * Backs up the specified certificate.
     *
     * Requests that a backup of the specified certificate be downloaded to the
     * client. All versions of the certificate will be downloaded. This operation
     * requires the certificates/backup permission.
     *
     * @param certificateName The name of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the backup certificate result, containing the backup blob on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BackupCertificateResult> backupCertificate(String certificateName) {
        // Generated convenience method for backupCertificateWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return backupCertificateWithResponse(certificateName, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(BackupCertificateResult.class));
    }

    /**
     * Restores a backed up certificate to a vault.
     *
     * Restores a backed up certificate, and all its versions, to a vault. This
     * operation requires the certificates/restore permission.
     *
     * @param parameters The parameters to restore the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a certificate bundle consists of a certificate (X509) plus its attributes on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CertificateBundle> restoreCertificate(CertificateRestoreParameters parameters) {
        // Generated convenience method for restoreCertificateWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return restoreCertificateWithResponse(BinaryData.fromObject(parameters), requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(CertificateBundle.class));
    }

    /**
     * Lists the deleted certificates in the specified vault currently available for recovery.
     *
     * The GetDeletedCertificates operation retrieves the certificates in the current
     * vault which are in a deleted state and ready for recovery or purging. This
     * operation includes deletion-specific information. This operation requires the
     * certificates/get/list permission. This operation can only be enabled on
     * soft-delete enabled vaults.
     *
     * @param maxresults Maximum number of results to return in a page. If not specified the service
     * will return up to 25 results.
     * @param includePending Specifies whether to include certificates which are not completely provisioned.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of certificates that have been deleted in this vault on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DeletedCertificateListResult> getDeletedCertificates(Integer maxresults, Boolean includePending) {
        // Generated convenience method for getDeletedCertificatesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (maxresults != null) {
            requestOptions.addQueryParam("maxresults", String.valueOf(maxresults), false);
        }
        if (includePending != null) {
            requestOptions.addQueryParam("includePending", String.valueOf(includePending), false);
        }
        return getDeletedCertificatesWithResponse(requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(DeletedCertificateListResult.class));
    }

    /**
     * Lists the deleted certificates in the specified vault currently available for recovery.
     *
     * The GetDeletedCertificates operation retrieves the certificates in the current
     * vault which are in a deleted state and ready for recovery or purging. This
     * operation includes deletion-specific information. This operation requires the
     * certificates/get/list permission. This operation can only be enabled on
     * soft-delete enabled vaults.
     *
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of certificates that have been deleted in this vault on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DeletedCertificateListResult> getDeletedCertificates() {
        // Generated convenience method for getDeletedCertificatesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getDeletedCertificatesWithResponse(requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(DeletedCertificateListResult.class));
    }

    /**
     * Retrieves information about the specified deleted certificate.
     *
     * The GetDeletedCertificate operation retrieves the deleted certificate
     * information plus its attributes, such as retention interval, scheduled
     * permanent deletion and the current deletion recovery level. This operation
     * requires the certificates/get permission.
     *
     * @param certificateName The name of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Deleted Certificate consisting of its previous id, attributes and its tags,
     * as well as information on when it will be purged on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DeletedCertificateBundle> getDeletedCertificate(String certificateName) {
        // Generated convenience method for getDeletedCertificateWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getDeletedCertificateWithResponse(certificateName, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(DeletedCertificateBundle.class));
    }

    /**
     * Permanently deletes the specified deleted certificate.
     *
     * The PurgeDeletedCertificate operation performs an irreversible deletion of the
     * specified certificate, without possibility for recovery. The operation is not
     * available if the recovery level does not specify 'Purgeable'. This operation
     * requires the certificate/purge permission.
     *
     * @param certificateName The name of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> purgeDeletedCertificate(String certificateName) {
        // Generated convenience method for purgeDeletedCertificateWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return purgeDeletedCertificateWithResponse(certificateName, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Recovers the deleted certificate back to its current version under /certificates.
     *
     * The RecoverDeletedCertificate operation performs the reversal of the Delete
     * operation. The operation is applicable in vaults enabled for soft-delete, and
     * must be issued during the retention interval (available in the deleted
     * certificate's attributes). This operation requires the certificates/recover
     * permission.
     *
     * @param certificateName The name of the deleted certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a certificate bundle consists of a certificate (X509) plus its attributes on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CertificateBundle> recoverDeletedCertificate(String certificateName) {
        // Generated convenience method for recoverDeletedCertificateWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return recoverDeletedCertificateWithResponse(certificateName, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(CertificateBundle.class));
    }
}
