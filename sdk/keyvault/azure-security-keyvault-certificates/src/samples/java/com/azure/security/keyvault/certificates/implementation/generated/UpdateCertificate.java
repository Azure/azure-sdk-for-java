// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.security.keyvault.certificates.implementation.generated;

import com.azure.identity.DefaultAzureCredentialBuilder;
import com.azure.security.keyvault.certificates.implementation.CertificateClient;
import com.azure.security.keyvault.certificates.implementation.CertificateClientBuilder;
import com.azure.security.keyvault.certificates.implementation.models.CertificateAttributes;
import com.azure.security.keyvault.certificates.implementation.models.CertificateBundle;
import com.azure.security.keyvault.certificates.implementation.models.CertificateUpdateParameters;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;

public class UpdateCertificate {
    public static void main(String[] args) {
        CertificateClient certificateClient
            = new CertificateClientBuilder().credential(new DefaultAzureCredentialBuilder().build())
                .vaultBaseUrl("https://myvault.vault.azure.net/")
                .buildClient();
        // BEGIN:com.azure.security.keyvault.certificates.implementation.generated.updatecertificate.updatecertificate
        CertificateBundle response
            = certificateClient.updateCertificate("updateCert01", "c3d31d7b36c942ad83ef36fc0785a4fc",
                new CertificateUpdateParameters().setCertificateAttributes(new CertificateAttributes().setEnabled(true)
                    .setNotBefore(OffsetDateTime.parse("1430344421"))
                    .setExpires(OffsetDateTime.parse("2208988799"))).setTags(mapOf("department", "KeyVaultTest")));
        // END:com.azure.security.keyvault.certificates.implementation.generated.updatecertificate.updatecertificate
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
