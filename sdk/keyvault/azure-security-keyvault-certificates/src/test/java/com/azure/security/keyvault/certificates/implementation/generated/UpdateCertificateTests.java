// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.security.keyvault.certificates.implementation.generated;

import com.azure.security.keyvault.certificates.implementation.models.CertificateAttributes;
import com.azure.security.keyvault.certificates.implementation.models.CertificateBundle;
import com.azure.security.keyvault.certificates.implementation.models.CertificateUpdateParameters;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class UpdateCertificateTests extends CertificateClientTestBase {
    @Test
    @Disabled
    public void testUpdateCertificateTests() {
        // method invocation
        CertificateBundle response
            = certificateClient.updateCertificate("updateCert01", "c3d31d7b36c942ad83ef36fc0785a4fc",
                new CertificateUpdateParameters().setCertificateAttributes(new CertificateAttributes().setEnabled(true)
                    .setNotBefore(OffsetDateTime.parse("1430344421"))
                    .setExpires(OffsetDateTime.parse("2208988799"))).setTags(mapOf("department", "KeyVaultTest")));

        // response assertion
        Assertions.assertNotNull(response);
        // verify property "id"
        Assertions.assertEquals(
            "https://myvault.vault.azure.net/certificates/updateCert01/c3d31d7b36c942ad83ef36fc0785a4fc",
            response.getId());
        // verify property "kid"
        Assertions.assertEquals("https://myvault.vault.azure.net/keys/updateCert01/c3d31d7b36c942ad83ef36fc0785a4fc",
            response.getKid());
        // verify property "sid"
        Assertions.assertEquals("https://myvault.vault.azure.net/secrets/updateCert01/c3d31d7b36c942ad83ef36fc0785a4fc",
            response.getSid());
        // verify property "x509Thumbprint"
        Assertions.assertNotNull(response.getX509Thumbprint());
        // verify property "cer"
        Assertions.assertNotNull(response.getCer());
        // verify property "attributes"
        CertificateAttributes responseAttributes = response.getAttributes();
        Assertions.assertNotNull(responseAttributes);
        Assertions.assertEquals(true, responseAttributes.isEnabled());
        Assertions.assertNotNull(responseAttributes.getNotBefore());
        Assertions.assertNotNull(responseAttributes.getExpires());
        Assertions.assertNotNull(responseAttributes.getCreated());
        Assertions.assertNotNull(responseAttributes.getUpdated());
        // verify property "tags"
        Assertions.assertNotNull(response.getTags());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
