// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.security.keyvault.certificates.implementation.generated;

import com.azure.security.keyvault.certificates.implementation.models.Action;
import com.azure.security.keyvault.certificates.implementation.models.CertificateAttributes;
import com.azure.security.keyvault.certificates.implementation.models.CertificatePolicy;
import com.azure.security.keyvault.certificates.implementation.models.CertificatePolicyAction;
import com.azure.security.keyvault.certificates.implementation.models.DeletedCertificateBundle;
import com.azure.security.keyvault.certificates.implementation.models.IssuerParameters;
import com.azure.security.keyvault.certificates.implementation.models.JsonWebKeyType;
import com.azure.security.keyvault.certificates.implementation.models.KeyProperties;
import com.azure.security.keyvault.certificates.implementation.models.KeyUsageType;
import com.azure.security.keyvault.certificates.implementation.models.LifetimeAction;
import com.azure.security.keyvault.certificates.implementation.models.SecretProperties;
import com.azure.security.keyvault.certificates.implementation.models.Trigger;
import com.azure.security.keyvault.certificates.implementation.models.X509CertificateProperties;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class DeleteCertificateTests extends CertificateClientTestBase {
    @Test
    @Disabled
    public void testDeleteCertificateTests() {
        // method invocation
        DeletedCertificateBundle response = certificateClient.deleteCertificate("importCert01");

        // response assertion
        Assertions.assertNotNull(response);
        // verify property "id"
        Assertions.assertEquals(
            "https://myvault.vault.azure.net/certificates/importCert01/f00e72f0ddee4dddadc27c0f605d84d7",
            response.getId());
        // verify property "kid"
        Assertions.assertEquals("https://myvault.vault.azure.net/keys/importCert01/f00e72f0ddee4dddadc27c0f605d84d7",
            response.getKid());
        // verify property "sid"
        Assertions.assertEquals("https://myvault.vault.azure.net/secrets/importCert01/f00e72f0ddee4dddadc27c0f605d84d7",
            response.getSid());
        // verify property "x509Thumbprint"
        Assertions.assertNotNull(response.getX509Thumbprint());
        // verify property "policy"
        CertificatePolicy responsePolicy = response.getPolicy();
        Assertions.assertNotNull(responsePolicy);
        Assertions.assertEquals("https://myvault.vault.azure.net/certificates/importCert01/policy",
            responsePolicy.getId());
        KeyProperties responsePolicyKeyProperties = responsePolicy.getKeyProperties();
        Assertions.assertNotNull(responsePolicyKeyProperties);
        Assertions.assertEquals(true, responsePolicyKeyProperties.isExportable());
        Assertions.assertEquals(JsonWebKeyType.RSA, responsePolicyKeyProperties.getKeyType());
        Assertions.assertEquals(2048, responsePolicyKeyProperties.getKeySize());
        Assertions.assertEquals(false, responsePolicyKeyProperties.isReuseKey());
        SecretProperties responsePolicySecretProperties = responsePolicy.getSecretProperties();
        Assertions.assertNotNull(responsePolicySecretProperties);
        Assertions.assertEquals("application/x-pkcs12", responsePolicySecretProperties.getContentType());
        X509CertificateProperties responsePolicyX509CertificateProperties
            = responsePolicy.getX509CertificateProperties();
        Assertions.assertNotNull(responsePolicyX509CertificateProperties);
        Assertions.assertEquals("CN=KeyVaultTest", responsePolicyX509CertificateProperties.getSubject());
        List<String> responsePolicyX509CertificatePropertiesEkus = responsePolicyX509CertificateProperties.getEkus();
        Assertions.assertEquals(0, responsePolicyX509CertificatePropertiesEkus.size());
        List<KeyUsageType> responsePolicyX509CertificatePropertiesKeyUsage
            = responsePolicyX509CertificateProperties.getKeyUsage();
        Assertions.assertEquals(0, responsePolicyX509CertificatePropertiesKeyUsage.size());
        Assertions.assertEquals(297, responsePolicyX509CertificateProperties.getValidityInMonths());
        List<LifetimeAction> responsePolicyLifetimeActions = responsePolicy.getLifetimeActions();
        LifetimeAction responsePolicyLifetimeActionsFirstItem = responsePolicyLifetimeActions.iterator().next();
        Assertions.assertNotNull(responsePolicyLifetimeActionsFirstItem);
        Trigger responsePolicyLifetimeActionsFirstItemTrigger = responsePolicyLifetimeActionsFirstItem.getTrigger();
        Assertions.assertNotNull(responsePolicyLifetimeActionsFirstItemTrigger);
        Assertions.assertEquals(80, responsePolicyLifetimeActionsFirstItemTrigger.getLifetimePercentage());
        Action responsePolicyLifetimeActionsFirstItemAction = responsePolicyLifetimeActionsFirstItem.getAction();
        Assertions.assertNotNull(responsePolicyLifetimeActionsFirstItemAction);
        Assertions.assertEquals(CertificatePolicyAction.EMAIL_CONTACTS,
            responsePolicyLifetimeActionsFirstItemAction.getActionType());
        IssuerParameters responsePolicyIssuerParameters = responsePolicy.getIssuerParameters();
        Assertions.assertNotNull(responsePolicyIssuerParameters);
        Assertions.assertEquals("Unknown", responsePolicyIssuerParameters.getName());
        CertificateAttributes responsePolicyAttributes = responsePolicy.getAttributes();
        Assertions.assertNotNull(responsePolicyAttributes);
        Assertions.assertEquals(true, responsePolicyAttributes.isEnabled());
        Assertions.assertNotNull(responsePolicyAttributes.getCreated());
        Assertions.assertNotNull(responsePolicyAttributes.getUpdated());
        // verify property "cer"
        Assertions.assertNotNull(response.getCer());
        // verify property "attributes"
        CertificateAttributes responseAttributes = response.getAttributes();
        Assertions.assertNotNull(responseAttributes);
        Assertions.assertEquals(true, responseAttributes.isEnabled());
        Assertions.assertNotNull(responseAttributes.getNotBefore());
        Assertions.assertNotNull(responseAttributes.getExpires());
        Assertions.assertNotNull(responseAttributes.getCreated());
        Assertions.assertNotNull(responseAttributes.getUpdated());
        Assertions.assertEquals("Recoverable+Purgeable", responseAttributes.getRecoveryLevel());
        // verify property "recoveryId"
        Assertions.assertEquals("https://myvault.vault.azure.net/deletedcertificates/importCert01",
            response.getRecoveryId());
        // verify property "scheduledPurgeDate"
        Assertions.assertNotNull(response.getScheduledPurgeDate());
        // verify property "deletedDate"
        Assertions.assertNotNull(response.getDeletedDate());
    }
}
