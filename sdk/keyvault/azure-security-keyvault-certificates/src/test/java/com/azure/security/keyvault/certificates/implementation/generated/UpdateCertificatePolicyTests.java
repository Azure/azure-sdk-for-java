// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.security.keyvault.certificates.implementation.generated;

import com.azure.security.keyvault.certificates.implementation.models.Action;
import com.azure.security.keyvault.certificates.implementation.models.CertificateAttributes;
import com.azure.security.keyvault.certificates.implementation.models.CertificatePolicy;
import com.azure.security.keyvault.certificates.implementation.models.CertificatePolicyAction;
import com.azure.security.keyvault.certificates.implementation.models.IssuerParameters;
import com.azure.security.keyvault.certificates.implementation.models.JsonWebKeyType;
import com.azure.security.keyvault.certificates.implementation.models.KeyProperties;
import com.azure.security.keyvault.certificates.implementation.models.KeyUsageType;
import com.azure.security.keyvault.certificates.implementation.models.LifetimeAction;
import com.azure.security.keyvault.certificates.implementation.models.SecretProperties;
import com.azure.security.keyvault.certificates.implementation.models.Trigger;
import com.azure.security.keyvault.certificates.implementation.models.X509CertificateProperties;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class UpdateCertificatePolicyTests extends CertificateClientTestBase {
    @Test
    @Disabled
    public void testUpdateCertificatePolicyTests() {
        // method invocation
        CertificatePolicy response = certificateClient.updateCertificatePolicy("updateCert01", new CertificatePolicy()
            .setKeyProperties(new KeyProperties().setExportable(true)
                .setKeyType(JsonWebKeyType.RSA)
                .setKeySize(2048)
                .setReuseKey(false))
            .setSecretProperties(new SecretProperties().setContentType("application/x-pkcs12"))
            .setX509CertificateProperties(new X509CertificateProperties().setSubject("CN=KeyVaultTest")
                .setEkus(Arrays.asList())
                .setKeyUsage(Arrays.asList())
                .setValidityInMonths(297))
            .setLifetimeActions(Arrays.asList(new LifetimeAction().setTrigger(new Trigger().setLifetimePercentage(80))
                .setAction(new Action().setActionType(CertificatePolicyAction.EMAIL_CONTACTS))))
            .setIssuerParameters(new IssuerParameters().setName("Self"))
            .setAttributes(new CertificateAttributes().setEnabled(true)));

        // response assertion
        Assertions.assertNotNull(response);
        // verify property "id"
        Assertions.assertEquals("https://myvault.vault.azure.net/certificates/updateCert01/policy", response.getId());
        // verify property "keyProperties"
        KeyProperties responseKeyProperties = response.getKeyProperties();
        Assertions.assertNotNull(responseKeyProperties);
        Assertions.assertEquals(true, responseKeyProperties.isExportable());
        Assertions.assertEquals(JsonWebKeyType.RSA, responseKeyProperties.getKeyType());
        Assertions.assertEquals(2048, responseKeyProperties.getKeySize());
        Assertions.assertEquals(false, responseKeyProperties.isReuseKey());
        // verify property "secretProperties"
        SecretProperties responseSecretProperties = response.getSecretProperties();
        Assertions.assertNotNull(responseSecretProperties);
        Assertions.assertEquals("application/x-pkcs12", responseSecretProperties.getContentType());
        // verify property "x509CertificateProperties"
        X509CertificateProperties responseX509CertificateProperties = response.getX509CertificateProperties();
        Assertions.assertNotNull(responseX509CertificateProperties);
        Assertions.assertEquals("CN=KeyVaultTest", responseX509CertificateProperties.getSubject());
        List<String> responseX509CertificatePropertiesEkus = responseX509CertificateProperties.getEkus();
        Assertions.assertEquals(0, responseX509CertificatePropertiesEkus.size());
        List<KeyUsageType> responseX509CertificatePropertiesKeyUsage = responseX509CertificateProperties.getKeyUsage();
        Assertions.assertEquals(0, responseX509CertificatePropertiesKeyUsage.size());
        Assertions.assertEquals(297, responseX509CertificateProperties.getValidityInMonths());
        // verify property "lifetimeActions"
        List<LifetimeAction> responseLifetimeActions = response.getLifetimeActions();
        LifetimeAction responseLifetimeActionsFirstItem = responseLifetimeActions.iterator().next();
        Assertions.assertNotNull(responseLifetimeActionsFirstItem);
        Trigger responseLifetimeActionsFirstItemTrigger = responseLifetimeActionsFirstItem.getTrigger();
        Assertions.assertNotNull(responseLifetimeActionsFirstItemTrigger);
        Assertions.assertEquals(80, responseLifetimeActionsFirstItemTrigger.getLifetimePercentage());
        Action responseLifetimeActionsFirstItemAction = responseLifetimeActionsFirstItem.getAction();
        Assertions.assertNotNull(responseLifetimeActionsFirstItemAction);
        Assertions.assertEquals(CertificatePolicyAction.EMAIL_CONTACTS,
            responseLifetimeActionsFirstItemAction.getActionType());
        // verify property "issuerParameters"
        IssuerParameters responseIssuerParameters = response.getIssuerParameters();
        Assertions.assertNotNull(responseIssuerParameters);
        Assertions.assertEquals("Self", responseIssuerParameters.getName());
        // verify property "attributes"
        CertificateAttributes responseAttributes = response.getAttributes();
        Assertions.assertNotNull(responseAttributes);
        Assertions.assertEquals(true, responseAttributes.isEnabled());
        Assertions.assertNotNull(responseAttributes.getCreated());
        Assertions.assertNotNull(responseAttributes.getUpdated());
    }
}
