// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.security.keyvault.secrets.implementation;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.security.keyvault.secrets.implementation.models.BackupSecretResult;
import com.azure.security.keyvault.secrets.implementation.models.DeletedSecretBundle;
import com.azure.security.keyvault.secrets.implementation.models.DeletedSecretItem;
import com.azure.security.keyvault.secrets.implementation.models.SecretBundle;
import com.azure.security.keyvault.secrets.implementation.models.SecretItem;
import com.azure.security.keyvault.secrets.implementation.models.SecretRestoreParameters;
import com.azure.security.keyvault.secrets.implementation.models.SecretSetParameters;
import com.azure.security.keyvault.secrets.implementation.models.SecretUpdateParameters;

/**
 * Initializes a new instance of the synchronous SecretClient type.
 */
@ServiceClient(builder = SecretClientBuilder.class)
public final class SecretClient {

    @Generated
    private final SecretClientImpl serviceClient;

    /**
     * Initializes an instance of SecretClient class.
     *
     * @param serviceClient the service client implementation.
     */
    @Generated
    SecretClient(SecretClientImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Sets a secret in a specified key vault.
     *
     * The SET operation adds a secret to the Azure Key Vault. If the named secret
     * already exists, Azure Key Vault creates a new version of that secret. This
     * operation requires the secrets/set permission.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     value: String (Required)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     contentType: String (Optional)
     *     attributes (Optional): {
     *         enabled: Boolean (Optional)
     *         nbf: Long (Optional)
     *         exp: Long (Optional)
     *         created: Long (Optional)
     *         updated: Long (Optional)
     *         recoverableDays: Integer (Optional)
     *         recoveryLevel: String(Purgeable/Recoverable+Purgeable/Recoverable/Recoverable+ProtectedSubscription/CustomizedRecoverable+Purgeable/CustomizedRecoverable/CustomizedRecoverable+ProtectedSubscription) (Optional)
     *     }
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     value: String (Optional)
     *     id: String (Optional)
     *     contentType: String (Optional)
     *     attributes (Optional): {
     *         enabled: Boolean (Optional)
     *         nbf: Long (Optional)
     *         exp: Long (Optional)
     *         created: Long (Optional)
     *         updated: Long (Optional)
     *         recoverableDays: Integer (Optional)
     *         recoveryLevel: String(Purgeable/Recoverable+Purgeable/Recoverable/Recoverable+ProtectedSubscription/CustomizedRecoverable+Purgeable/CustomizedRecoverable/CustomizedRecoverable+ProtectedSubscription) (Optional)
     *     }
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     kid: String (Optional)
     *     managed: Boolean (Optional)
     * }
     * }</pre>
     *
     * @param secretName The name of the secret. The value you provide may be copied globally for the
     * purpose of running the service. The value provided should not include
     * personally identifiable or sensitive information.
     * @param parameters The parameters for setting the secret.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a secret consisting of a value, id and its attributes along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> setSecretWithResponse(String secretName, BinaryData parameters,
        RequestOptions requestOptions) {
        return this.serviceClient.setSecretWithResponse(secretName, parameters, requestOptions);
    }

    /**
     * Deletes a secret from a specified key vault.
     *
     * The DELETE operation applies to any secret stored in Azure Key Vault. DELETE
     * cannot be applied to an individual version of a secret. This operation requires
     * the secrets/delete permission.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     value: String (Optional)
     *     id: String (Optional)
     *     contentType: String (Optional)
     *     attributes (Optional): {
     *         enabled: Boolean (Optional)
     *         nbf: Long (Optional)
     *         exp: Long (Optional)
     *         created: Long (Optional)
     *         updated: Long (Optional)
     *         recoverableDays: Integer (Optional)
     *         recoveryLevel: String(Purgeable/Recoverable+Purgeable/Recoverable/Recoverable+ProtectedSubscription/CustomizedRecoverable+Purgeable/CustomizedRecoverable/CustomizedRecoverable+ProtectedSubscription) (Optional)
     *     }
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     kid: String (Optional)
     *     managed: Boolean (Optional)
     *     recoveryId: String (Optional)
     *     scheduledPurgeDate: Long (Optional)
     *     deletedDate: Long (Optional)
     * }
     * }</pre>
     *
     * @param secretName The name of the secret.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a Deleted Secret consisting of its previous id, attributes and its tags, as
     * well as information on when it will be purged along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> deleteSecretWithResponse(String secretName, RequestOptions requestOptions) {
        return this.serviceClient.deleteSecretWithResponse(secretName, requestOptions);
    }

    /**
     * Updates the attributes associated with a specified secret in a given key vault.
     *
     * The UPDATE operation changes specified attributes of an existing stored secret.
     * Attributes that are not specified in the request are left unchanged. The value
     * of a secret itself cannot be changed. This operation requires the secrets/set
     * permission.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     contentType: String (Optional)
     *     attributes (Optional): {
     *         enabled: Boolean (Optional)
     *         nbf: Long (Optional)
     *         exp: Long (Optional)
     *         created: Long (Optional)
     *         updated: Long (Optional)
     *         recoverableDays: Integer (Optional)
     *         recoveryLevel: String(Purgeable/Recoverable+Purgeable/Recoverable/Recoverable+ProtectedSubscription/CustomizedRecoverable+Purgeable/CustomizedRecoverable/CustomizedRecoverable+ProtectedSubscription) (Optional)
     *     }
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     value: String (Optional)
     *     id: String (Optional)
     *     contentType: String (Optional)
     *     attributes (Optional): {
     *         enabled: Boolean (Optional)
     *         nbf: Long (Optional)
     *         exp: Long (Optional)
     *         created: Long (Optional)
     *         updated: Long (Optional)
     *         recoverableDays: Integer (Optional)
     *         recoveryLevel: String(Purgeable/Recoverable+Purgeable/Recoverable/Recoverable+ProtectedSubscription/CustomizedRecoverable+Purgeable/CustomizedRecoverable/CustomizedRecoverable+ProtectedSubscription) (Optional)
     *     }
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     kid: String (Optional)
     *     managed: Boolean (Optional)
     * }
     * }</pre>
     *
     * @param secretName The name of the secret.
     * @param secretVersion The version of the secret.
     * @param parameters The parameters for update secret operation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a secret consisting of a value, id and its attributes along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> updateSecretWithResponse(String secretName, String secretVersion, BinaryData parameters,
        RequestOptions requestOptions) {
        return this.serviceClient.updateSecretWithResponse(secretName, secretVersion, parameters, requestOptions);
    }

    /**
     * Get a specified secret from a given key vault.
     *
     * The GET operation is applicable to any secret stored in Azure Key Vault. This
     * operation requires the secrets/get permission.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     value: String (Optional)
     *     id: String (Optional)
     *     contentType: String (Optional)
     *     attributes (Optional): {
     *         enabled: Boolean (Optional)
     *         nbf: Long (Optional)
     *         exp: Long (Optional)
     *         created: Long (Optional)
     *         updated: Long (Optional)
     *         recoverableDays: Integer (Optional)
     *         recoveryLevel: String(Purgeable/Recoverable+Purgeable/Recoverable/Recoverable+ProtectedSubscription/CustomizedRecoverable+Purgeable/CustomizedRecoverable/CustomizedRecoverable+ProtectedSubscription) (Optional)
     *     }
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     kid: String (Optional)
     *     managed: Boolean (Optional)
     * }
     * }</pre>
     *
     * @param secretName The name of the secret.
     * @param secretVersion The version of the secret. This URI fragment is optional. If not specified, the
     * latest version of the secret is returned.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a secret consisting of a value, id and its attributes along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getSecretWithResponse(String secretName, String secretVersion,
        RequestOptions requestOptions) {
        return this.serviceClient.getSecretWithResponse(secretName, secretVersion, requestOptions);
    }

    /**
     * List secrets in a specified key vault.
     *
     * The Get Secrets operation is applicable to the entire vault. However, only the
     * base secret identifier and its attributes are provided in the response.
     * Individual secret versions are not listed in the response. This operation
     * requires the secrets/list permission.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxresults</td><td>Integer</td><td>No</td><td>Maximum number of results to return in a page. If not
     * specified the service
     * will return up to 25 results.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     attributes (Optional): {
     *         enabled: Boolean (Optional)
     *         nbf: Long (Optional)
     *         exp: Long (Optional)
     *         created: Long (Optional)
     *         updated: Long (Optional)
     *         recoverableDays: Integer (Optional)
     *         recoveryLevel: String(Purgeable/Recoverable+Purgeable/Recoverable/Recoverable+ProtectedSubscription/CustomizedRecoverable+Purgeable/CustomizedRecoverable/CustomizedRecoverable+ProtectedSubscription) (Optional)
     *     }
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     contentType: String (Optional)
     *     managed: Boolean (Optional)
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of SecretItem items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> getSecrets(RequestOptions requestOptions) {
        return this.serviceClient.getSecrets(requestOptions);
    }

    /**
     * List all versions of the specified secret.
     *
     * The full secret identifier and attributes are provided in the response. No
     * values are returned for the secrets. This operations requires the secrets/list
     * permission.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxresults</td><td>Integer</td><td>No</td><td>Maximum number of results to return in a page. If not
     * specified the service
     * will return up to 25 results.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     attributes (Optional): {
     *         enabled: Boolean (Optional)
     *         nbf: Long (Optional)
     *         exp: Long (Optional)
     *         created: Long (Optional)
     *         updated: Long (Optional)
     *         recoverableDays: Integer (Optional)
     *         recoveryLevel: String(Purgeable/Recoverable+Purgeable/Recoverable/Recoverable+ProtectedSubscription/CustomizedRecoverable+Purgeable/CustomizedRecoverable/CustomizedRecoverable+ProtectedSubscription) (Optional)
     *     }
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     contentType: String (Optional)
     *     managed: Boolean (Optional)
     * }
     * }</pre>
     *
     * @param secretName The name of the secret.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the secret list result as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> getSecretVersions(String secretName, RequestOptions requestOptions) {
        return this.serviceClient.getSecretVersions(secretName, requestOptions);
    }

    /**
     * Lists deleted secrets for the specified vault.
     *
     * The Get Deleted Secrets operation returns the secrets that have been deleted
     * for a vault enabled for soft-delete. This operation requires the secrets/list
     * permission.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxresults</td><td>Integer</td><td>No</td><td>Maximum number of results to return in a page. If not
     * specified the service
     * will return up to 25 results.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     attributes (Optional): {
     *         enabled: Boolean (Optional)
     *         nbf: Long (Optional)
     *         exp: Long (Optional)
     *         created: Long (Optional)
     *         updated: Long (Optional)
     *         recoverableDays: Integer (Optional)
     *         recoveryLevel: String(Purgeable/Recoverable+Purgeable/Recoverable/Recoverable+ProtectedSubscription/CustomizedRecoverable+Purgeable/CustomizedRecoverable/CustomizedRecoverable+ProtectedSubscription) (Optional)
     *     }
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     contentType: String (Optional)
     *     managed: Boolean (Optional)
     *     recoveryId: String (Optional)
     *     scheduledPurgeDate: Long (Optional)
     *     deletedDate: Long (Optional)
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of DeletedSecretItem items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> getDeletedSecrets(RequestOptions requestOptions) {
        return this.serviceClient.getDeletedSecrets(requestOptions);
    }

    /**
     * Gets the specified deleted secret.
     *
     * The Get Deleted Secret operation returns the specified deleted secret along
     * with its attributes. This operation requires the secrets/get permission.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     value: String (Optional)
     *     id: String (Optional)
     *     contentType: String (Optional)
     *     attributes (Optional): {
     *         enabled: Boolean (Optional)
     *         nbf: Long (Optional)
     *         exp: Long (Optional)
     *         created: Long (Optional)
     *         updated: Long (Optional)
     *         recoverableDays: Integer (Optional)
     *         recoveryLevel: String(Purgeable/Recoverable+Purgeable/Recoverable/Recoverable+ProtectedSubscription/CustomizedRecoverable+Purgeable/CustomizedRecoverable/CustomizedRecoverable+ProtectedSubscription) (Optional)
     *     }
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     kid: String (Optional)
     *     managed: Boolean (Optional)
     *     recoveryId: String (Optional)
     *     scheduledPurgeDate: Long (Optional)
     *     deletedDate: Long (Optional)
     * }
     * }</pre>
     *
     * @param secretName The name of the secret.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a Deleted Secret consisting of its previous id, attributes and its tags, as
     * well as information on when it will be purged along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDeletedSecretWithResponse(String secretName, RequestOptions requestOptions) {
        return this.serviceClient.getDeletedSecretWithResponse(secretName, requestOptions);
    }

    /**
     * Permanently deletes the specified secret.
     *
     * The purge deleted secret operation removes the secret permanently, without the
     * possibility of recovery. This operation can only be enabled on a soft-delete
     * enabled vault. This operation requires the secrets/purge permission.
     *
     * @param secretName The name of the secret.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> purgeDeletedSecretWithResponse(String secretName, RequestOptions requestOptions) {
        return this.serviceClient.purgeDeletedSecretWithResponse(secretName, requestOptions);
    }

    /**
     * Recovers the deleted secret to the latest version.
     *
     * Recovers the deleted secret in the specified vault. This operation can only be
     * performed on a soft-delete enabled vault. This operation requires the
     * secrets/recover permission.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     value: String (Optional)
     *     id: String (Optional)
     *     contentType: String (Optional)
     *     attributes (Optional): {
     *         enabled: Boolean (Optional)
     *         nbf: Long (Optional)
     *         exp: Long (Optional)
     *         created: Long (Optional)
     *         updated: Long (Optional)
     *         recoverableDays: Integer (Optional)
     *         recoveryLevel: String(Purgeable/Recoverable+Purgeable/Recoverable/Recoverable+ProtectedSubscription/CustomizedRecoverable+Purgeable/CustomizedRecoverable/CustomizedRecoverable+ProtectedSubscription) (Optional)
     *     }
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     kid: String (Optional)
     *     managed: Boolean (Optional)
     * }
     * }</pre>
     *
     * @param secretName The name of the deleted secret.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a secret consisting of a value, id and its attributes along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> recoverDeletedSecretWithResponse(String secretName, RequestOptions requestOptions) {
        return this.serviceClient.recoverDeletedSecretWithResponse(secretName, requestOptions);
    }

    /**
     * Backs up the specified secret.
     *
     * Requests that a backup of the specified secret be downloaded to the client. All
     * versions of the secret will be downloaded. This operation requires the
     * secrets/backup permission.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     value: Base64Url (Optional)
     * }
     * }</pre>
     *
     * @param secretName The name of the secret.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the backup secret result, containing the backup blob along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> backupSecretWithResponse(String secretName, RequestOptions requestOptions) {
        return this.serviceClient.backupSecretWithResponse(secretName, requestOptions);
    }

    /**
     * Restores a backed up secret to a vault.
     *
     * Restores a backed up secret, and all its versions, to a vault. This operation
     * requires the secrets/restore permission.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     value: Base64Url (Required)
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     value: String (Optional)
     *     id: String (Optional)
     *     contentType: String (Optional)
     *     attributes (Optional): {
     *         enabled: Boolean (Optional)
     *         nbf: Long (Optional)
     *         exp: Long (Optional)
     *         created: Long (Optional)
     *         updated: Long (Optional)
     *         recoverableDays: Integer (Optional)
     *         recoveryLevel: String(Purgeable/Recoverable+Purgeable/Recoverable/Recoverable+ProtectedSubscription/CustomizedRecoverable+Purgeable/CustomizedRecoverable/CustomizedRecoverable+ProtectedSubscription) (Optional)
     *     }
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     kid: String (Optional)
     *     managed: Boolean (Optional)
     * }
     * }</pre>
     *
     * @param parameters The parameters to restore the secret.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a secret consisting of a value, id and its attributes along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> restoreSecretWithResponse(BinaryData parameters, RequestOptions requestOptions) {
        return this.serviceClient.restoreSecretWithResponse(parameters, requestOptions);
    }

    /**
     * Sets a secret in a specified key vault.
     *
     * The SET operation adds a secret to the Azure Key Vault. If the named secret
     * already exists, Azure Key Vault creates a new version of that secret. This
     * operation requires the secrets/set permission.
     *
     * @param secretName The name of the secret. The value you provide may be copied globally for the
     * purpose of running the service. The value provided should not include
     * personally identifiable or sensitive information.
     * @param parameters The parameters for setting the secret.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a secret consisting of a value, id and its attributes.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SecretBundle setSecret(String secretName, SecretSetParameters parameters) {
        // Generated convenience method for setSecretWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return setSecretWithResponse(secretName, BinaryData.fromObject(parameters), requestOptions).getValue()
            .toObject(SecretBundle.class);
    }

    /**
     * Deletes a secret from a specified key vault.
     *
     * The DELETE operation applies to any secret stored in Azure Key Vault. DELETE
     * cannot be applied to an individual version of a secret. This operation requires
     * the secrets/delete permission.
     *
     * @param secretName The name of the secret.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Deleted Secret consisting of its previous id, attributes and its tags, as
     * well as information on when it will be purged.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DeletedSecretBundle deleteSecret(String secretName) {
        // Generated convenience method for deleteSecretWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return deleteSecretWithResponse(secretName, requestOptions).getValue().toObject(DeletedSecretBundle.class);
    }

    /**
     * Updates the attributes associated with a specified secret in a given key vault.
     *
     * The UPDATE operation changes specified attributes of an existing stored secret.
     * Attributes that are not specified in the request are left unchanged. The value
     * of a secret itself cannot be changed. This operation requires the secrets/set
     * permission.
     *
     * @param secretName The name of the secret.
     * @param secretVersion The version of the secret.
     * @param parameters The parameters for update secret operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a secret consisting of a value, id and its attributes.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SecretBundle updateSecret(String secretName, String secretVersion, SecretUpdateParameters parameters) {
        // Generated convenience method for updateSecretWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return updateSecretWithResponse(secretName, secretVersion, BinaryData.fromObject(parameters), requestOptions)
            .getValue()
            .toObject(SecretBundle.class);
    }

    /**
     * Get a specified secret from a given key vault.
     *
     * The GET operation is applicable to any secret stored in Azure Key Vault. This
     * operation requires the secrets/get permission.
     *
     * @param secretName The name of the secret.
     * @param secretVersion The version of the secret. This URI fragment is optional. If not specified, the
     * latest version of the secret is returned.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a secret consisting of a value, id and its attributes.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SecretBundle getSecret(String secretName, String secretVersion) {
        // Generated convenience method for getSecretWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getSecretWithResponse(secretName, secretVersion, requestOptions).getValue().toObject(SecretBundle.class);
    }

    /**
     * List secrets in a specified key vault.
     *
     * The Get Secrets operation is applicable to the entire vault. However, only the
     * base secret identifier and its attributes are provided in the response.
     * Individual secret versions are not listed in the response. This operation
     * requires the secrets/list permission.
     *
     * @param maxresults Maximum number of results to return in a page. If not specified the service
     * will return up to 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of SecretItem items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SecretItem> getSecrets(Integer maxresults) {
        // Generated convenience method for getSecrets
        RequestOptions requestOptions = new RequestOptions();
        if (maxresults != null) {
            requestOptions.addQueryParam("maxresults", String.valueOf(maxresults), false);
        }
        return serviceClient.getSecrets(requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(SecretItem.class));
    }

    /**
     * List secrets in a specified key vault.
     *
     * The Get Secrets operation is applicable to the entire vault. However, only the
     * base secret identifier and its attributes are provided in the response.
     * Individual secret versions are not listed in the response. This operation
     * requires the secrets/list permission.
     *
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of SecretItem items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SecretItem> getSecrets() {
        // Generated convenience method for getSecrets
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.getSecrets(requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(SecretItem.class));
    }

    /**
     * List all versions of the specified secret.
     *
     * The full secret identifier and attributes are provided in the response. No
     * values are returned for the secrets. This operations requires the secrets/list
     * permission.
     *
     * @param secretName The name of the secret.
     * @param maxresults Maximum number of results to return in a page. If not specified the service
     * will return up to 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the secret list result as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SecretItem> getSecretVersions(String secretName, Integer maxresults) {
        // Generated convenience method for getSecretVersions
        RequestOptions requestOptions = new RequestOptions();
        if (maxresults != null) {
            requestOptions.addQueryParam("maxresults", String.valueOf(maxresults), false);
        }
        return serviceClient.getSecretVersions(secretName, requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(SecretItem.class));
    }

    /**
     * List all versions of the specified secret.
     *
     * The full secret identifier and attributes are provided in the response. No
     * values are returned for the secrets. This operations requires the secrets/list
     * permission.
     *
     * @param secretName The name of the secret.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the secret list result as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SecretItem> getSecretVersions(String secretName) {
        // Generated convenience method for getSecretVersions
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.getSecretVersions(secretName, requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(SecretItem.class));
    }

    /**
     * Lists deleted secrets for the specified vault.
     *
     * The Get Deleted Secrets operation returns the secrets that have been deleted
     * for a vault enabled for soft-delete. This operation requires the secrets/list
     * permission.
     *
     * @param maxresults Maximum number of results to return in a page. If not specified the service
     * will return up to 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DeletedSecretItem items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DeletedSecretItem> getDeletedSecrets(Integer maxresults) {
        // Generated convenience method for getDeletedSecrets
        RequestOptions requestOptions = new RequestOptions();
        if (maxresults != null) {
            requestOptions.addQueryParam("maxresults", String.valueOf(maxresults), false);
        }
        return serviceClient.getDeletedSecrets(requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(DeletedSecretItem.class));
    }

    /**
     * Lists deleted secrets for the specified vault.
     *
     * The Get Deleted Secrets operation returns the secrets that have been deleted
     * for a vault enabled for soft-delete. This operation requires the secrets/list
     * permission.
     *
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DeletedSecretItem items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DeletedSecretItem> getDeletedSecrets() {
        // Generated convenience method for getDeletedSecrets
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.getDeletedSecrets(requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(DeletedSecretItem.class));
    }

    /**
     * Gets the specified deleted secret.
     *
     * The Get Deleted Secret operation returns the specified deleted secret along
     * with its attributes. This operation requires the secrets/get permission.
     *
     * @param secretName The name of the secret.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Deleted Secret consisting of its previous id, attributes and its tags, as
     * well as information on when it will be purged.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DeletedSecretBundle getDeletedSecret(String secretName) {
        // Generated convenience method for getDeletedSecretWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getDeletedSecretWithResponse(secretName, requestOptions).getValue().toObject(DeletedSecretBundle.class);
    }

    /**
     * Permanently deletes the specified secret.
     *
     * The purge deleted secret operation removes the secret permanently, without the
     * possibility of recovery. This operation can only be enabled on a soft-delete
     * enabled vault. This operation requires the secrets/purge permission.
     *
     * @param secretName The name of the secret.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void purgeDeletedSecret(String secretName) {
        // Generated convenience method for purgeDeletedSecretWithResponse
        RequestOptions requestOptions = new RequestOptions();
        purgeDeletedSecretWithResponse(secretName, requestOptions).getValue();
    }

    /**
     * Recovers the deleted secret to the latest version.
     *
     * Recovers the deleted secret in the specified vault. This operation can only be
     * performed on a soft-delete enabled vault. This operation requires the
     * secrets/recover permission.
     *
     * @param secretName The name of the deleted secret.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a secret consisting of a value, id and its attributes.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SecretBundle recoverDeletedSecret(String secretName) {
        // Generated convenience method for recoverDeletedSecretWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return recoverDeletedSecretWithResponse(secretName, requestOptions).getValue().toObject(SecretBundle.class);
    }

    /**
     * Backs up the specified secret.
     *
     * Requests that a backup of the specified secret be downloaded to the client. All
     * versions of the secret will be downloaded. This operation requires the
     * secrets/backup permission.
     *
     * @param secretName The name of the secret.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the backup secret result, containing the backup blob.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BackupSecretResult backupSecret(String secretName) {
        // Generated convenience method for backupSecretWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return backupSecretWithResponse(secretName, requestOptions).getValue().toObject(BackupSecretResult.class);
    }

    /**
     * Restores a backed up secret to a vault.
     *
     * Restores a backed up secret, and all its versions, to a vault. This operation
     * requires the secrets/restore permission.
     *
     * @param parameters The parameters to restore the secret.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a secret consisting of a value, id and its attributes.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SecretBundle restoreSecret(SecretRestoreParameters parameters) {
        // Generated convenience method for restoreSecretWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return restoreSecretWithResponse(BinaryData.fromObject(parameters), requestOptions).getValue()
            .toObject(SecretBundle.class);
    }
}
