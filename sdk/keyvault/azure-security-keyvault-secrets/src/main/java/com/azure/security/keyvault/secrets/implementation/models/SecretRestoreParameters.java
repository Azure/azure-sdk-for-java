// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.security.keyvault.secrets.implementation.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.Base64Url;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/** The secret restore parameters. */
@Immutable
public final class SecretRestoreParameters implements JsonSerializable<SecretRestoreParameters> {
    /*
     * The backup blob associated with a secret bundle.
     */
    private final Base64Url secretBundleBackup;

    /**
     * Creates an instance of SecretRestoreParameters class.
     *
     * @param secretBundleBackup the secretBundleBackup value to set.
     */
    public SecretRestoreParameters(byte[] secretBundleBackup) {
        this.secretBundleBackup = Base64Url.encode(secretBundleBackup);
    }

    /**
     * Get the secretBundleBackup property: The backup blob associated with a secret bundle.
     *
     * @return the secretBundleBackup value.
     */
    public byte[] getSecretBundleBackup() {
        if (this.secretBundleBackup == null) {
            return new byte[0];
        }
        return this.secretBundleBackup.decodedBytes();
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("value", Objects.toString(this.secretBundleBackup, null));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SecretRestoreParameters from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of SecretRestoreParameters if the JsonReader was pointing to an instance of it, or null if it
     *     was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SecretRestoreParameters.
     */
    public static SecretRestoreParameters fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(
                reader -> {
                    boolean secretBundleBackupFound = false;
                    byte[] secretBundleBackup = new byte[0];
                    while (reader.nextToken() != JsonToken.END_OBJECT) {
                        String fieldName = reader.getFieldName();
                        reader.nextToken();

                        if ("value".equals(fieldName)) {
                            secretBundleBackup =
                                    reader.getNullable(nonNullReader -> new Base64Url(nonNullReader.getString()))
                                            .decodedBytes();
                            secretBundleBackupFound = true;
                        } else {
                            reader.skipChildren();
                        }
                    }
                    if (secretBundleBackupFound) {
                        SecretRestoreParameters deserializedSecretRestoreParameters =
                                new SecretRestoreParameters(secretBundleBackup);

                        return deserializedSecretRestoreParameters;
                    }
                    List<String> missingProperties = new ArrayList<>();
                    if (!secretBundleBackupFound) {
                        missingProperties.add("value");
                    }

                    throw new IllegalStateException(
                            "Missing required property/properties: " + String.join(", ", missingProperties));
                });
    }
}
