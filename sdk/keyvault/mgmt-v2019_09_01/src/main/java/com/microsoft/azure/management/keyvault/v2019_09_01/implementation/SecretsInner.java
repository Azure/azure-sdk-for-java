/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.keyvault.v2019_09_01.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.keyvault.v2019_09_01.SecretCreateOrUpdateParameters;
import com.microsoft.azure.management.keyvault.v2019_09_01.SecretPatchParameters;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Secrets.
 */
public class SecretsInner {
    /** The Retrofit service to perform REST calls. */
    private SecretsService service;
    /** The service client containing this operation class. */
    private KeyVaultManagementClientImpl client;

    /**
     * Initializes an instance of SecretsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public SecretsInner(Retrofit retrofit, KeyVaultManagementClientImpl client) {
        this.service = retrofit.create(SecretsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Secrets to be
     * used by Retrofit to perform actually REST calls.
     */
    interface SecretsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.keyvault.v2019_09_01.Secrets createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}/secrets/{secretName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("resourceGroupName") String resourceGroupName, @Path("vaultName") String vaultName, @Path("secretName") String secretName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Body SecretCreateOrUpdateParameters parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.keyvault.v2019_09_01.Secrets update" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}/secrets/{secretName}")
        Observable<Response<ResponseBody>> update(@Path("resourceGroupName") String resourceGroupName, @Path("vaultName") String vaultName, @Path("secretName") String secretName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Body SecretPatchParameters parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.keyvault.v2019_09_01.Secrets get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}/secrets/{secretName}")
        Observable<Response<ResponseBody>> get(@Path("resourceGroupName") String resourceGroupName, @Path("vaultName") String vaultName, @Path("secretName") String secretName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.keyvault.v2019_09_01.Secrets list" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}/secrets")
        Observable<Response<ResponseBody>> list(@Path("resourceGroupName") String resourceGroupName, @Path("vaultName") String vaultName, @Path("subscriptionId") String subscriptionId, @Query("$top") Integer top, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.keyvault.v2019_09_01.Secrets listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Create or update a secret in a key vault in the specified subscription.  NOTE: This API is intended for internal use in ARM deployments. Users should use the data-plane REST service for interaction with vault secrets.
     *
     * @param resourceGroupName The name of the Resource Group to which the vault belongs.
     * @param vaultName Name of the vault
     * @param secretName Name of the secret
     * @param parameters Parameters to create or update the secret
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SecretInner object if successful.
     */
    public SecretInner createOrUpdate(String resourceGroupName, String vaultName, String secretName, SecretCreateOrUpdateParameters parameters) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, vaultName, secretName, parameters).toBlocking().single().body();
    }

    /**
     * Create or update a secret in a key vault in the specified subscription.  NOTE: This API is intended for internal use in ARM deployments. Users should use the data-plane REST service for interaction with vault secrets.
     *
     * @param resourceGroupName The name of the Resource Group to which the vault belongs.
     * @param vaultName Name of the vault
     * @param secretName Name of the secret
     * @param parameters Parameters to create or update the secret
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SecretInner> createOrUpdateAsync(String resourceGroupName, String vaultName, String secretName, SecretCreateOrUpdateParameters parameters, final ServiceCallback<SecretInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, vaultName, secretName, parameters), serviceCallback);
    }

    /**
     * Create or update a secret in a key vault in the specified subscription.  NOTE: This API is intended for internal use in ARM deployments. Users should use the data-plane REST service for interaction with vault secrets.
     *
     * @param resourceGroupName The name of the Resource Group to which the vault belongs.
     * @param vaultName Name of the vault
     * @param secretName Name of the secret
     * @param parameters Parameters to create or update the secret
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SecretInner object
     */
    public Observable<SecretInner> createOrUpdateAsync(String resourceGroupName, String vaultName, String secretName, SecretCreateOrUpdateParameters parameters) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, vaultName, secretName, parameters).map(new Func1<ServiceResponse<SecretInner>, SecretInner>() {
            @Override
            public SecretInner call(ServiceResponse<SecretInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or update a secret in a key vault in the specified subscription.  NOTE: This API is intended for internal use in ARM deployments. Users should use the data-plane REST service for interaction with vault secrets.
     *
     * @param resourceGroupName The name of the Resource Group to which the vault belongs.
     * @param vaultName Name of the vault
     * @param secretName Name of the secret
     * @param parameters Parameters to create or update the secret
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SecretInner object
     */
    public Observable<ServiceResponse<SecretInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String vaultName, String secretName, SecretCreateOrUpdateParameters parameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (vaultName == null) {
            throw new IllegalArgumentException("Parameter vaultName is required and cannot be null.");
        }
        if (secretName == null) {
            throw new IllegalArgumentException("Parameter secretName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.createOrUpdate(resourceGroupName, vaultName, secretName, this.client.subscriptionId(), this.client.apiVersion(), parameters, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SecretInner>>>() {
                @Override
                public Observable<ServiceResponse<SecretInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SecretInner> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SecretInner> createOrUpdateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<SecretInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<SecretInner>() { }.getType())
                .register(201, new TypeToken<SecretInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Update a secret in the specified subscription.  NOTE: This API is intended for internal use in ARM deployments.  Users should use the data-plane REST service for interaction with vault secrets.
     *
     * @param resourceGroupName The name of the Resource Group to which the vault belongs.
     * @param vaultName Name of the vault
     * @param secretName Name of the secret
     * @param parameters Parameters to patch the secret
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SecretInner object if successful.
     */
    public SecretInner update(String resourceGroupName, String vaultName, String secretName, SecretPatchParameters parameters) {
        return updateWithServiceResponseAsync(resourceGroupName, vaultName, secretName, parameters).toBlocking().single().body();
    }

    /**
     * Update a secret in the specified subscription.  NOTE: This API is intended for internal use in ARM deployments.  Users should use the data-plane REST service for interaction with vault secrets.
     *
     * @param resourceGroupName The name of the Resource Group to which the vault belongs.
     * @param vaultName Name of the vault
     * @param secretName Name of the secret
     * @param parameters Parameters to patch the secret
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SecretInner> updateAsync(String resourceGroupName, String vaultName, String secretName, SecretPatchParameters parameters, final ServiceCallback<SecretInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, vaultName, secretName, parameters), serviceCallback);
    }

    /**
     * Update a secret in the specified subscription.  NOTE: This API is intended for internal use in ARM deployments.  Users should use the data-plane REST service for interaction with vault secrets.
     *
     * @param resourceGroupName The name of the Resource Group to which the vault belongs.
     * @param vaultName Name of the vault
     * @param secretName Name of the secret
     * @param parameters Parameters to patch the secret
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SecretInner object
     */
    public Observable<SecretInner> updateAsync(String resourceGroupName, String vaultName, String secretName, SecretPatchParameters parameters) {
        return updateWithServiceResponseAsync(resourceGroupName, vaultName, secretName, parameters).map(new Func1<ServiceResponse<SecretInner>, SecretInner>() {
            @Override
            public SecretInner call(ServiceResponse<SecretInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Update a secret in the specified subscription.  NOTE: This API is intended for internal use in ARM deployments.  Users should use the data-plane REST service for interaction with vault secrets.
     *
     * @param resourceGroupName The name of the Resource Group to which the vault belongs.
     * @param vaultName Name of the vault
     * @param secretName Name of the secret
     * @param parameters Parameters to patch the secret
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SecretInner object
     */
    public Observable<ServiceResponse<SecretInner>> updateWithServiceResponseAsync(String resourceGroupName, String vaultName, String secretName, SecretPatchParameters parameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (vaultName == null) {
            throw new IllegalArgumentException("Parameter vaultName is required and cannot be null.");
        }
        if (secretName == null) {
            throw new IllegalArgumentException("Parameter secretName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.update(resourceGroupName, vaultName, secretName, this.client.subscriptionId(), this.client.apiVersion(), parameters, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SecretInner>>>() {
                @Override
                public Observable<ServiceResponse<SecretInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SecretInner> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SecretInner> updateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<SecretInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<SecretInner>() { }.getType())
                .register(201, new TypeToken<SecretInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets the specified secret.  NOTE: This API is intended for internal use in ARM deployments. Users should use the data-plane REST service for interaction with vault secrets.
     *
     * @param resourceGroupName The name of the Resource Group to which the vault belongs.
     * @param vaultName The name of the vault.
     * @param secretName The name of the secret.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SecretInner object if successful.
     */
    public SecretInner get(String resourceGroupName, String vaultName, String secretName) {
        return getWithServiceResponseAsync(resourceGroupName, vaultName, secretName).toBlocking().single().body();
    }

    /**
     * Gets the specified secret.  NOTE: This API is intended for internal use in ARM deployments. Users should use the data-plane REST service for interaction with vault secrets.
     *
     * @param resourceGroupName The name of the Resource Group to which the vault belongs.
     * @param vaultName The name of the vault.
     * @param secretName The name of the secret.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SecretInner> getAsync(String resourceGroupName, String vaultName, String secretName, final ServiceCallback<SecretInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroupName, vaultName, secretName), serviceCallback);
    }

    /**
     * Gets the specified secret.  NOTE: This API is intended for internal use in ARM deployments. Users should use the data-plane REST service for interaction with vault secrets.
     *
     * @param resourceGroupName The name of the Resource Group to which the vault belongs.
     * @param vaultName The name of the vault.
     * @param secretName The name of the secret.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SecretInner object
     */
    public Observable<SecretInner> getAsync(String resourceGroupName, String vaultName, String secretName) {
        return getWithServiceResponseAsync(resourceGroupName, vaultName, secretName).map(new Func1<ServiceResponse<SecretInner>, SecretInner>() {
            @Override
            public SecretInner call(ServiceResponse<SecretInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the specified secret.  NOTE: This API is intended for internal use in ARM deployments. Users should use the data-plane REST service for interaction with vault secrets.
     *
     * @param resourceGroupName The name of the Resource Group to which the vault belongs.
     * @param vaultName The name of the vault.
     * @param secretName The name of the secret.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SecretInner object
     */
    public Observable<ServiceResponse<SecretInner>> getWithServiceResponseAsync(String resourceGroupName, String vaultName, String secretName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (vaultName == null) {
            throw new IllegalArgumentException("Parameter vaultName is required and cannot be null.");
        }
        if (secretName == null) {
            throw new IllegalArgumentException("Parameter secretName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(resourceGroupName, vaultName, secretName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SecretInner>>>() {
                @Override
                public Observable<ServiceResponse<SecretInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SecretInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SecretInner> getDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<SecretInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<SecretInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * The List operation gets information about the secrets in a vault.  NOTE: This API is intended for internal use in ARM deployments. Users should use the data-plane REST service for interaction with vault secrets.
     *
     * @param resourceGroupName The name of the Resource Group to which the vault belongs.
     * @param vaultName The name of the vault.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;SecretInner&gt; object if successful.
     */
    public PagedList<SecretInner> list(final String resourceGroupName, final String vaultName) {
        ServiceResponse<Page<SecretInner>> response = listSinglePageAsync(resourceGroupName, vaultName).toBlocking().single();
        return new PagedList<SecretInner>(response.body()) {
            @Override
            public Page<SecretInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * The List operation gets information about the secrets in a vault.  NOTE: This API is intended for internal use in ARM deployments. Users should use the data-plane REST service for interaction with vault secrets.
     *
     * @param resourceGroupName The name of the Resource Group to which the vault belongs.
     * @param vaultName The name of the vault.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<SecretInner>> listAsync(final String resourceGroupName, final String vaultName, final ListOperationCallback<SecretInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(resourceGroupName, vaultName),
            new Func1<String, Observable<ServiceResponse<Page<SecretInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<SecretInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * The List operation gets information about the secrets in a vault.  NOTE: This API is intended for internal use in ARM deployments. Users should use the data-plane REST service for interaction with vault secrets.
     *
     * @param resourceGroupName The name of the Resource Group to which the vault belongs.
     * @param vaultName The name of the vault.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;SecretInner&gt; object
     */
    public Observable<Page<SecretInner>> listAsync(final String resourceGroupName, final String vaultName) {
        return listWithServiceResponseAsync(resourceGroupName, vaultName)
            .map(new Func1<ServiceResponse<Page<SecretInner>>, Page<SecretInner>>() {
                @Override
                public Page<SecretInner> call(ServiceResponse<Page<SecretInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * The List operation gets information about the secrets in a vault.  NOTE: This API is intended for internal use in ARM deployments. Users should use the data-plane REST service for interaction with vault secrets.
     *
     * @param resourceGroupName The name of the Resource Group to which the vault belongs.
     * @param vaultName The name of the vault.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;SecretInner&gt; object
     */
    public Observable<ServiceResponse<Page<SecretInner>>> listWithServiceResponseAsync(final String resourceGroupName, final String vaultName) {
        return listSinglePageAsync(resourceGroupName, vaultName)
            .concatMap(new Func1<ServiceResponse<Page<SecretInner>>, Observable<ServiceResponse<Page<SecretInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<SecretInner>>> call(ServiceResponse<Page<SecretInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * The List operation gets information about the secrets in a vault.  NOTE: This API is intended for internal use in ARM deployments. Users should use the data-plane REST service for interaction with vault secrets.
     *
     * @param resourceGroupName The name of the Resource Group to which the vault belongs.
     * @param vaultName The name of the vault.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;SecretInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<SecretInner>>> listSinglePageAsync(final String resourceGroupName, final String vaultName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (vaultName == null) {
            throw new IllegalArgumentException("Parameter vaultName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final Integer top = null;
        return service.list(resourceGroupName, vaultName, this.client.subscriptionId(), top, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<SecretInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<SecretInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<SecretInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<SecretInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * The List operation gets information about the secrets in a vault.  NOTE: This API is intended for internal use in ARM deployments. Users should use the data-plane REST service for interaction with vault secrets.
     *
     * @param resourceGroupName The name of the Resource Group to which the vault belongs.
     * @param vaultName The name of the vault.
     * @param top Maximum number of results to return.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;SecretInner&gt; object if successful.
     */
    public PagedList<SecretInner> list(final String resourceGroupName, final String vaultName, final Integer top) {
        ServiceResponse<Page<SecretInner>> response = listSinglePageAsync(resourceGroupName, vaultName, top).toBlocking().single();
        return new PagedList<SecretInner>(response.body()) {
            @Override
            public Page<SecretInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * The List operation gets information about the secrets in a vault.  NOTE: This API is intended for internal use in ARM deployments. Users should use the data-plane REST service for interaction with vault secrets.
     *
     * @param resourceGroupName The name of the Resource Group to which the vault belongs.
     * @param vaultName The name of the vault.
     * @param top Maximum number of results to return.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<SecretInner>> listAsync(final String resourceGroupName, final String vaultName, final Integer top, final ListOperationCallback<SecretInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(resourceGroupName, vaultName, top),
            new Func1<String, Observable<ServiceResponse<Page<SecretInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<SecretInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * The List operation gets information about the secrets in a vault.  NOTE: This API is intended for internal use in ARM deployments. Users should use the data-plane REST service for interaction with vault secrets.
     *
     * @param resourceGroupName The name of the Resource Group to which the vault belongs.
     * @param vaultName The name of the vault.
     * @param top Maximum number of results to return.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;SecretInner&gt; object
     */
    public Observable<Page<SecretInner>> listAsync(final String resourceGroupName, final String vaultName, final Integer top) {
        return listWithServiceResponseAsync(resourceGroupName, vaultName, top)
            .map(new Func1<ServiceResponse<Page<SecretInner>>, Page<SecretInner>>() {
                @Override
                public Page<SecretInner> call(ServiceResponse<Page<SecretInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * The List operation gets information about the secrets in a vault.  NOTE: This API is intended for internal use in ARM deployments. Users should use the data-plane REST service for interaction with vault secrets.
     *
     * @param resourceGroupName The name of the Resource Group to which the vault belongs.
     * @param vaultName The name of the vault.
     * @param top Maximum number of results to return.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;SecretInner&gt; object
     */
    public Observable<ServiceResponse<Page<SecretInner>>> listWithServiceResponseAsync(final String resourceGroupName, final String vaultName, final Integer top) {
        return listSinglePageAsync(resourceGroupName, vaultName, top)
            .concatMap(new Func1<ServiceResponse<Page<SecretInner>>, Observable<ServiceResponse<Page<SecretInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<SecretInner>>> call(ServiceResponse<Page<SecretInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * The List operation gets information about the secrets in a vault.  NOTE: This API is intended for internal use in ARM deployments. Users should use the data-plane REST service for interaction with vault secrets.
     *
    ServiceResponse<PageImpl<SecretInner>> * @param resourceGroupName The name of the Resource Group to which the vault belongs.
    ServiceResponse<PageImpl<SecretInner>> * @param vaultName The name of the vault.
    ServiceResponse<PageImpl<SecretInner>> * @param top Maximum number of results to return.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;SecretInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<SecretInner>>> listSinglePageAsync(final String resourceGroupName, final String vaultName, final Integer top) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (vaultName == null) {
            throw new IllegalArgumentException("Parameter vaultName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(resourceGroupName, vaultName, this.client.subscriptionId(), top, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<SecretInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<SecretInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<SecretInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<SecretInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<SecretInner>> listDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<SecretInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<SecretInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * The List operation gets information about the secrets in a vault.  NOTE: This API is intended for internal use in ARM deployments. Users should use the data-plane REST service for interaction with vault secrets.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;SecretInner&gt; object if successful.
     */
    public PagedList<SecretInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<SecretInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<SecretInner>(response.body()) {
            @Override
            public Page<SecretInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * The List operation gets information about the secrets in a vault.  NOTE: This API is intended for internal use in ARM deployments. Users should use the data-plane REST service for interaction with vault secrets.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<SecretInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<SecretInner>> serviceFuture, final ListOperationCallback<SecretInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<SecretInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<SecretInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * The List operation gets information about the secrets in a vault.  NOTE: This API is intended for internal use in ARM deployments. Users should use the data-plane REST service for interaction with vault secrets.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;SecretInner&gt; object
     */
    public Observable<Page<SecretInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<SecretInner>>, Page<SecretInner>>() {
                @Override
                public Page<SecretInner> call(ServiceResponse<Page<SecretInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * The List operation gets information about the secrets in a vault.  NOTE: This API is intended for internal use in ARM deployments. Users should use the data-plane REST service for interaction with vault secrets.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;SecretInner&gt; object
     */
    public Observable<ServiceResponse<Page<SecretInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<SecretInner>>, Observable<ServiceResponse<Page<SecretInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<SecretInner>>> call(ServiceResponse<Page<SecretInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * The List operation gets information about the secrets in a vault.  NOTE: This API is intended for internal use in ARM deployments. Users should use the data-plane REST service for interaction with vault secrets.
     *
    ServiceResponse<PageImpl<SecretInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;SecretInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<SecretInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<SecretInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<SecretInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<SecretInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<SecretInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<SecretInner>> listNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<SecretInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<SecretInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
