/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.keyvault.v2019_09_01.implementation;

import com.microsoft.azure.management.keyvault.v2019_09_01.Secret;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.keyvault.v2019_09_01.SecretPatchParameters;
import java.util.Map;
import com.microsoft.azure.management.keyvault.v2019_09_01.SecretCreateOrUpdateParameters;
import com.microsoft.azure.management.keyvault.v2019_09_01.SecretProperties;
import com.microsoft.azure.management.keyvault.v2019_09_01.SecretPatchProperties;
import rx.functions.Func1;

class SecretImpl extends CreatableUpdatableImpl<Secret, SecretInner, SecretImpl> implements Secret, Secret.Definition, Secret.Update {
    private final KeyVaultManager manager;
    private String resourceGroupName;
    private String vaultName;
    private String secretName;
    private SecretCreateOrUpdateParameters createParameter;
    private SecretPatchParameters updateParameter;

    SecretImpl(String name, KeyVaultManager manager) {
        super(name, new SecretInner());
        this.manager = manager;
        // Set resource name
        this.secretName = name;
        //
        this.createParameter = new SecretCreateOrUpdateParameters();
        this.updateParameter = new SecretPatchParameters();
    }

    SecretImpl(SecretInner inner, KeyVaultManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.secretName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.vaultName = IdParsingUtils.getValueFromIdByName(inner.id(), "vaults");
        this.secretName = IdParsingUtils.getValueFromIdByName(inner.id(), "secrets");
        //
        this.createParameter = new SecretCreateOrUpdateParameters();
        this.updateParameter = new SecretPatchParameters();
    }

    @Override
    public KeyVaultManager manager() {
        return this.manager;
    }

    @Override
    public Observable<Secret> createResourceAsync() {
        SecretsInner client = this.manager().inner().secrets();
        return client.createOrUpdateAsync(this.resourceGroupName, this.vaultName, this.secretName, this.createParameter)
            .map(new Func1<SecretInner, SecretInner>() {
               @Override
               public SecretInner call(SecretInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<Secret> updateResourceAsync() {
        SecretsInner client = this.manager().inner().secrets();
        return client.updateAsync(this.resourceGroupName, this.vaultName, this.secretName, this.updateParameter)
            .map(new Func1<SecretInner, SecretInner>() {
               @Override
               public SecretInner call(SecretInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<SecretInner> getInnerAsync() {
        SecretsInner client = this.manager().inner().secrets();
        return client.getAsync(this.resourceGroupName, this.vaultName, this.secretName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }

    private void resetCreateUpdateParameters() {
        this.createParameter = new SecretCreateOrUpdateParameters();
        this.updateParameter = new SecretPatchParameters();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String location() {
        return this.inner().location();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public SecretProperties properties() {
        return this.inner().properties();
    }

    @Override
    public Map<String, String> tags() {
        return this.inner().getTags();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public SecretImpl withExistingVault(String resourceGroupName, String vaultName) {
        this.resourceGroupName = resourceGroupName;
        this.vaultName = vaultName;
        return this;
    }

    @Override
    public SecretImpl withProperties(SecretProperties properties) {
        this.createParameter.withProperties(properties);
        return this;
    }

    @Override
    public SecretImpl withProperties(SecretPatchProperties properties) {
        this.updateParameter.withProperties(properties);
        return this;
    }

    @Override
    public SecretImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.createParameter.withTags(tags);
        } else {
            this.updateParameter.withTags(tags);
        }
        return this;
    }

}
