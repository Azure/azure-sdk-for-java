// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.v2.security.keyvault.keys.implementation.models;

import io.clientcore.core.annotations.Metadata;
import io.clientcore.core.annotations.MetadataProperties;
import io.clientcore.core.serialization.json.JsonReader;
import io.clientcore.core.serialization.json.JsonSerializable;
import io.clientcore.core.serialization.json.JsonToken;
import io.clientcore.core.serialization.json.JsonWriter;
import io.clientcore.core.utils.Base64Uri;
import java.io.IOException;
import java.util.Objects;

/**
 * The key restore parameters.
 */
@Metadata(properties = { MetadataProperties.IMMUTABLE })
public final class KeyRestoreParameters implements JsonSerializable<KeyRestoreParameters> {
    /*
     * The backup blob associated with a key bundle.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private final Base64Uri keyBundleBackup;

    /**
     * Creates an instance of KeyRestoreParameters class.
     * 
     * @param keyBundleBackup the keyBundleBackup value to set.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public KeyRestoreParameters(byte[] keyBundleBackup) {
        if (keyBundleBackup == null) {
            this.keyBundleBackup = null;
        } else {
            this.keyBundleBackup = Base64Uri.encode(keyBundleBackup);
        }
    }

    /**
     * Get the keyBundleBackup property: The backup blob associated with a key bundle.
     * 
     * @return the keyBundleBackup value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public byte[] getKeyBundleBackup() {
        if (this.keyBundleBackup == null) {
            return null;
        }
        return this.keyBundleBackup.decodedBytes();
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("value", Objects.toString(this.keyBundleBackup, null));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of KeyRestoreParameters from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of KeyRestoreParameters if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the KeyRestoreParameters.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public static KeyRestoreParameters fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            byte[] keyBundleBackup = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("value".equals(fieldName)) {
                    Base64Uri keyBundleBackupHolder
                        = reader.getNullable(nonNullReader -> new Base64Uri(nonNullReader.getString()));
                    if (keyBundleBackupHolder != null) {
                        keyBundleBackup = keyBundleBackupHolder.decodedBytes();
                    }
                } else {
                    reader.skipChildren();
                }
            }
            return new KeyRestoreParameters(keyBundleBackup);
        });
    }
}
