// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.v2.security.keyvault.keys.implementation.models;

import io.clientcore.core.annotations.Metadata;
import io.clientcore.core.annotations.TypeConditions;
import io.clientcore.core.serialization.json.JsonReader;
import io.clientcore.core.serialization.json.JsonSerializable;
import io.clientcore.core.serialization.json.JsonToken;
import io.clientcore.core.serialization.json.JsonWriter;
import java.io.IOException;

/**
 * Action and its trigger that will be performed by Key Vault over the lifetime of a key.
 */
@Metadata(conditions = { TypeConditions.FLUENT })
public final class LifetimeActions implements JsonSerializable<LifetimeActions> {
    /*
     * The condition that will execute the action.
     */
    @Metadata(generated = true)
    private LifetimeActionsTrigger trigger;

    /*
     * The action that will be executed.
     */
    @Metadata(generated = true)
    private LifetimeActionsType action;

    /**
     * Creates an instance of LifetimeActions class.
     */
    @Metadata(generated = true)
    public LifetimeActions() {
    }

    /**
     * Get the trigger property: The condition that will execute the action.
     * 
     * @return the trigger value.
     */
    @Metadata(generated = true)
    public LifetimeActionsTrigger getTrigger() {
        return this.trigger;
    }

    /**
     * Set the trigger property: The condition that will execute the action.
     * 
     * @param trigger the trigger value to set.
     * @return the LifetimeActions object itself.
     */
    @Metadata(generated = true)
    public LifetimeActions setTrigger(LifetimeActionsTrigger trigger) {
        this.trigger = trigger;
        return this;
    }

    /**
     * Get the action property: The action that will be executed.
     * 
     * @return the action value.
     */
    @Metadata(generated = true)
    public LifetimeActionsType getAction() {
        return this.action;
    }

    /**
     * Set the action property: The action that will be executed.
     * 
     * @param action the action value to set.
     * @return the LifetimeActions object itself.
     */
    @Metadata(generated = true)
    public LifetimeActions setAction(LifetimeActionsType action) {
        this.action = action;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("trigger", this.trigger);
        jsonWriter.writeJsonField("action", this.action);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LifetimeActions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LifetimeActions if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the LifetimeActions.
     */
    @Metadata(generated = true)
    public static LifetimeActions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LifetimeActions deserializedLifetimeActions = new LifetimeActions();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("trigger".equals(fieldName)) {
                    deserializedLifetimeActions.trigger = LifetimeActionsTrigger.fromJson(reader);
                } else if ("action".equals(fieldName)) {
                    deserializedLifetimeActions.action = LifetimeActionsType.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLifetimeActions;
        });
    }
}
