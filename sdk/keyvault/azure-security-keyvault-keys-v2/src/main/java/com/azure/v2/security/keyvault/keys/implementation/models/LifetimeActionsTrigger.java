// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.v2.security.keyvault.keys.implementation.models;

import io.clientcore.core.annotations.Metadata;
import io.clientcore.core.annotations.MetadataProperties;
import io.clientcore.core.serialization.json.JsonReader;
import io.clientcore.core.serialization.json.JsonSerializable;
import io.clientcore.core.serialization.json.JsonToken;
import io.clientcore.core.serialization.json.JsonWriter;

import java.io.IOException;

/**
 * A condition to be satisfied for an action to be executed.
 */
@Metadata(properties = { MetadataProperties.FLUENT })
public final class LifetimeActionsTrigger implements JsonSerializable<LifetimeActionsTrigger> {
    /*
     * Time after creation to attempt to rotate. It only applies to rotate. It will be in ISO 8601 duration format.
     * Example: 90 days : "P90D"
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private String timeAfterCreate;

    /*
     * Time before expiry to attempt to rotate or notify. It will be in ISO 8601 duration format. Example: 90 days :
     * "P90D"
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private String timeBeforeExpiry;

    /**
     * Creates an instance of LifetimeActionsTrigger class.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public LifetimeActionsTrigger() {
    }

    /**
     * Get the timeAfterCreate property: Time after creation to attempt to rotate. It only applies to rotate. It will be
     * in ISO 8601 duration format. Example: 90 days : "P90D".
     * 
     * @return the timeAfterCreate value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public String getTimeAfterCreate() {
        return this.timeAfterCreate;
    }

    /**
     * Set the timeAfterCreate property: Time after creation to attempt to rotate. It only applies to rotate. It will be
     * in ISO 8601 duration format. Example: 90 days : "P90D".
     * 
     * @param timeAfterCreate the timeAfterCreate value to set.
     * @return the LifetimeActionsTrigger object itself.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public LifetimeActionsTrigger setTimeAfterCreate(String timeAfterCreate) {
        this.timeAfterCreate = timeAfterCreate;
        return this;
    }

    /**
     * Get the timeBeforeExpiry property: Time before expiry to attempt to rotate or notify. It will be in ISO 8601
     * duration format. Example: 90 days : "P90D".
     * 
     * @return the timeBeforeExpiry value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public String getTimeBeforeExpiry() {
        return this.timeBeforeExpiry;
    }

    /**
     * Set the timeBeforeExpiry property: Time before expiry to attempt to rotate or notify. It will be in ISO 8601
     * duration format. Example: 90 days : "P90D".
     * 
     * @param timeBeforeExpiry the timeBeforeExpiry value to set.
     * @return the LifetimeActionsTrigger object itself.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public LifetimeActionsTrigger setTimeBeforeExpiry(String timeBeforeExpiry) {
        this.timeBeforeExpiry = timeBeforeExpiry;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("timeAfterCreate", this.timeAfterCreate);
        jsonWriter.writeStringField("timeBeforeExpiry", this.timeBeforeExpiry);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LifetimeActionsTrigger from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LifetimeActionsTrigger if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the LifetimeActionsTrigger.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public static LifetimeActionsTrigger fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LifetimeActionsTrigger deserializedLifetimeActionsTrigger = new LifetimeActionsTrigger();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("timeAfterCreate".equals(fieldName)) {
                    deserializedLifetimeActionsTrigger.timeAfterCreate = reader.getString();
                } else if ("timeBeforeExpiry".equals(fieldName)) {
                    deserializedLifetimeActionsTrigger.timeBeforeExpiry = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLifetimeActionsTrigger;
        });
    }
}
