// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.v2.security.keyvault.keys.models;

import io.clientcore.core.annotations.Metadata;
import io.clientcore.core.utils.ExpandableEnum;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Map;
import java.util.Objects;
import java.util.concurrent.ConcurrentHashMap;
import java.util.function.Function;

/**
 * JSON web key operations. For more information, see JsonWebKeyOperation.
 */
public final class KeyOperation implements ExpandableEnum<String> {
    private static final Map<String, KeyOperation> VALUES = new ConcurrentHashMap<>();

    private static final Function<String, KeyOperation> NEW_INSTANCE = KeyOperation::new;

    /**
     * Indicates that the key can be used to encrypt.
     */
    @Metadata(generated = true)
    public static final KeyOperation ENCRYPT = fromValue("encrypt");

    /**
     * Indicates that the key can be used to decrypt.
     */
    @Metadata(generated = true)
    public static final KeyOperation DECRYPT = fromValue("decrypt");

    /**
     * Indicates that the key can be used to sign.
     */
    @Metadata(generated = true)
    public static final KeyOperation SIGN = fromValue("sign");

    /**
     * Indicates that the key can be used to verify.
     */
    @Metadata(generated = true)
    public static final KeyOperation VERIFY = fromValue("verify");

    /**
     * Indicates that the key can be used to wrap another key.
     */
    @Metadata(generated = true)
    public static final KeyOperation WRAP_KEY = fromValue("wrapKey");

    /**
     * Indicates that the key can be used to unwrap another key.
     */
    @Metadata(generated = true)
    public static final KeyOperation UNWRAP_KEY = fromValue("unwrapKey");

    /**
     * Indicates that the key can be imported during creation.
     */
    @Metadata(generated = true)
    public static final KeyOperation IMPORT = fromValue("import");

    /**
     * Indicates that the private component of the key can be exported.
     */
    @Metadata(generated = true)
    public static final KeyOperation EXPORT = fromValue("export");

    private final String value;

    private KeyOperation(String value) {
        this.value = value;
    }

    /**
     * Creates or finds a KeyOperation.
     * 
     * @param value a value to look for.
     * @return the corresponding KeyOperation.
     * @throws IllegalArgumentException if value is null.
     */
    @Metadata(generated = true)
    public static KeyOperation fromValue(String value) {
        if (value == null) {
            throw new IllegalArgumentException("'value' cannot be null.");
        }
        return VALUES.computeIfAbsent(value, NEW_INSTANCE);
    }

    /**
     * Gets known KeyOperation values.
     * 
     * @return Known KeyOperation values.
     */
    @Metadata(generated = true)
    public static Collection<KeyOperation> values() {
        return new ArrayList<>(VALUES.values());
    }

    /**
     * Gets the value of the KeyOperation instance.
     * 
     * @return the value of the KeyOperation instance.
     */
    @Metadata(generated = true)
    @Override
    public String getValue() {
        return this.value;
    }

    @Metadata(generated = true)
    @Override
    public String toString() {
        return Objects.toString(this.value);
    }

    @Metadata(generated = true)
    @Override
    public boolean equals(Object obj) {
        return this == obj;
    }

    @Metadata(generated = true)
    @Override
    public int hashCode() {
        return Objects.hashCode(this.value);
    }
}
