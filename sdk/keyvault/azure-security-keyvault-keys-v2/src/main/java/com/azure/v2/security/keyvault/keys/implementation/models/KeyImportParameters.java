// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.v2.security.keyvault.keys.implementation.models;

import io.clientcore.core.annotations.Metadata;
import io.clientcore.core.annotations.MetadataProperties;
import io.clientcore.core.serialization.json.JsonReader;
import io.clientcore.core.serialization.json.JsonSerializable;
import io.clientcore.core.serialization.json.JsonToken;
import io.clientcore.core.serialization.json.JsonWriter;

import java.io.IOException;
import java.util.Map;

/**
 * The key import parameters.
 */
@Metadata(properties = { MetadataProperties.FLUENT })
public final class KeyImportParameters implements JsonSerializable<KeyImportParameters> {
    /*
     * Whether to import as a hardware key (HSM) or software key.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private Boolean hsm;

    /*
     * The Json web key
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private final JsonWebKey key;

    /*
     * The key management attributes.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private KeyAttributes keyAttributes;

    /*
     * Application specific metadata in the form of key-value pairs.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private Map<String, String> tags;

    /*
     * The policy rules under which the key can be exported.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private KeyReleasePolicy releasePolicy;

    /**
     * Creates an instance of KeyImportParameters class.
     * 
     * @param key the key value to set.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public KeyImportParameters(JsonWebKey key) {
        this.key = key;
    }

    /**
     * Get the hsm property: Whether to import as a hardware key (HSM) or software key.
     * 
     * @return the hsm value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public Boolean isHsm() {
        return this.hsm;
    }

    /**
     * Set the hsm property: Whether to import as a hardware key (HSM) or software key.
     * 
     * @param hsm the hsm value to set.
     * @return the KeyImportParameters object itself.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public KeyImportParameters setHsm(Boolean hsm) {
        this.hsm = hsm;
        return this;
    }

    /**
     * Get the key property: The Json web key.
     * 
     * @return the key value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public JsonWebKey getKey() {
        return this.key;
    }

    /**
     * Get the keyAttributes property: The key management attributes.
     * 
     * @return the keyAttributes value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public KeyAttributes getKeyAttributes() {
        return this.keyAttributes;
    }

    /**
     * Set the keyAttributes property: The key management attributes.
     * 
     * @param keyAttributes the keyAttributes value to set.
     * @return the KeyImportParameters object itself.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public KeyImportParameters setKeyAttributes(KeyAttributes keyAttributes) {
        this.keyAttributes = keyAttributes;
        return this;
    }

    /**
     * Get the tags property: Application specific metadata in the form of key-value pairs.
     * 
     * @return the tags value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public Map<String, String> getTags() {
        return this.tags;
    }

    /**
     * Set the tags property: Application specific metadata in the form of key-value pairs.
     * 
     * @param tags the tags value to set.
     * @return the KeyImportParameters object itself.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public KeyImportParameters setTags(Map<String, String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the releasePolicy property: The policy rules under which the key can be exported.
     * 
     * @return the releasePolicy value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public KeyReleasePolicy getReleasePolicy() {
        return this.releasePolicy;
    }

    /**
     * Set the releasePolicy property: The policy rules under which the key can be exported.
     * 
     * @param releasePolicy the releasePolicy value to set.
     * @return the KeyImportParameters object itself.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public KeyImportParameters setReleasePolicy(KeyReleasePolicy releasePolicy) {
        this.releasePolicy = releasePolicy;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("key", this.key);
        jsonWriter.writeBooleanField("Hsm", this.hsm);
        jsonWriter.writeJsonField("attributes", this.keyAttributes);
        jsonWriter.writeMapField("tags", this.tags, (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("release_policy", this.releasePolicy);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of KeyImportParameters from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of KeyImportParameters if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the KeyImportParameters.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public static KeyImportParameters fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            JsonWebKey key = null;
            Boolean hsm = null;
            KeyAttributes keyAttributes = null;
            Map<String, String> tags = null;
            KeyReleasePolicy releasePolicy = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("key".equals(fieldName)) {
                    key = JsonWebKey.fromJson(reader);
                } else if ("Hsm".equals(fieldName)) {
                    hsm = reader.getNullable(JsonReader::getBoolean);
                } else if ("attributes".equals(fieldName)) {
                    keyAttributes = KeyAttributes.fromJson(reader);
                } else if ("tags".equals(fieldName)) {
                    tags = reader.readMap(reader1 -> reader1.getString());
                } else if ("release_policy".equals(fieldName)) {
                    releasePolicy = KeyReleasePolicy.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            KeyImportParameters deserializedKeyImportParameters = new KeyImportParameters(key);
            deserializedKeyImportParameters.hsm = hsm;
            deserializedKeyImportParameters.keyAttributes = keyAttributes;
            deserializedKeyImportParameters.tags = tags;
            deserializedKeyImportParameters.releasePolicy = releasePolicy;

            return deserializedKeyImportParameters;
        });
    }
}
