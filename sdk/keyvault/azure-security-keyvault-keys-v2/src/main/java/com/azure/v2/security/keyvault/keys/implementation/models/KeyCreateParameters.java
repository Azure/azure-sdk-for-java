// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.v2.security.keyvault.keys.implementation.models;

import com.azure.v2.security.keyvault.keys.models.KeyCurveName;
import com.azure.v2.security.keyvault.keys.models.KeyOperation;
import com.azure.v2.security.keyvault.keys.models.KeyType;
import io.clientcore.core.annotations.Metadata;
import io.clientcore.core.annotations.MetadataProperties;
import io.clientcore.core.serialization.json.JsonReader;
import io.clientcore.core.serialization.json.JsonSerializable;
import io.clientcore.core.serialization.json.JsonToken;
import io.clientcore.core.serialization.json.JsonWriter;

import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * The key create parameters.
 */
@Metadata(properties = { MetadataProperties.FLUENT })
public final class KeyCreateParameters implements JsonSerializable<KeyCreateParameters> {
    /*
     * The type of key to create. For valid values, see JsonWebKeyType.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private final KeyType kty;

    /*
     * The key size in bits. For example: 2048, 3072, or 4096 for RSA.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private Integer keySize;

    /*
     * The public exponent for a RSA key.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private Integer publicExponent;

    /*
     * Json web key operations. For more information on possible key operations, see JsonWebKeyOperation.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private List<KeyOperation> keyOps;

    /*
     * The attributes of a key managed by the key vault service.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private KeyAttributes keyAttributes;

    /*
     * Application specific metadata in the form of key-value pairs.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private Map<String, String> tags;

    /*
     * Elliptic curve name. For valid values, see JsonWebKeyCurveName.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private KeyCurveName curve;

    /*
     * The policy rules under which the key can be exported.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private KeyReleasePolicy releasePolicy;

    /**
     * Creates an instance of KeyCreateParameters class.
     * 
     * @param kty the kty value to set.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public KeyCreateParameters(KeyType kty) {
        this.kty = kty;
    }

    /**
     * Get the kty property: The type of key to create. For valid values, see JsonWebKeyType.
     * 
     * @return the kty value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public KeyType getKty() {
        return this.kty;
    }

    /**
     * Get the keySize property: The key size in bits. For example: 2048, 3072, or 4096 for RSA.
     * 
     * @return the keySize value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public Integer getKeySize() {
        return this.keySize;
    }

    /**
     * Set the keySize property: The key size in bits. For example: 2048, 3072, or 4096 for RSA.
     * 
     * @param keySize the keySize value to set.
     * @return the KeyCreateParameters object itself.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public KeyCreateParameters setKeySize(Integer keySize) {
        this.keySize = keySize;
        return this;
    }

    /**
     * Get the publicExponent property: The public exponent for a RSA key.
     * 
     * @return the publicExponent value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public Integer getPublicExponent() {
        return this.publicExponent;
    }

    /**
     * Set the publicExponent property: The public exponent for a RSA key.
     * 
     * @param publicExponent the publicExponent value to set.
     * @return the KeyCreateParameters object itself.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public KeyCreateParameters setPublicExponent(Integer publicExponent) {
        this.publicExponent = publicExponent;
        return this;
    }

    /**
     * Get the keyOps property: Json web key operations. For more information on possible key operations, see
     * JsonWebKeyOperation.
     * 
     * @return the keyOps value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public List<KeyOperation> getKeyOps() {
        return this.keyOps;
    }

    /**
     * Set the keyOps property: Json web key operations. For more information on possible key operations, see
     * JsonWebKeyOperation.
     * 
     * @param keyOps the keyOps value to set.
     * @return the KeyCreateParameters object itself.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public KeyCreateParameters setKeyOps(List<KeyOperation> keyOps) {
        this.keyOps = keyOps;
        return this;
    }

    /**
     * Get the keyAttributes property: The attributes of a key managed by the key vault service.
     * 
     * @return the keyAttributes value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public KeyAttributes getKeyAttributes() {
        return this.keyAttributes;
    }

    /**
     * Set the keyAttributes property: The attributes of a key managed by the key vault service.
     * 
     * @param keyAttributes the keyAttributes value to set.
     * @return the KeyCreateParameters object itself.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public KeyCreateParameters setKeyAttributes(KeyAttributes keyAttributes) {
        this.keyAttributes = keyAttributes;
        return this;
    }

    /**
     * Get the tags property: Application specific metadata in the form of key-value pairs.
     * 
     * @return the tags value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public Map<String, String> getTags() {
        return this.tags;
    }

    /**
     * Set the tags property: Application specific metadata in the form of key-value pairs.
     * 
     * @param tags the tags value to set.
     * @return the KeyCreateParameters object itself.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public KeyCreateParameters setTags(Map<String, String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the curve property: Elliptic curve name. For valid values, see JsonWebKeyCurveName.
     * 
     * @return the curve value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public KeyCurveName getCurve() {
        return this.curve;
    }

    /**
     * Set the curve property: Elliptic curve name. For valid values, see JsonWebKeyCurveName.
     * 
     * @param curve the curve value to set.
     * @return the KeyCreateParameters object itself.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public KeyCreateParameters setCurve(KeyCurveName curve) {
        this.curve = curve;
        return this;
    }

    /**
     * Get the releasePolicy property: The policy rules under which the key can be exported.
     * 
     * @return the releasePolicy value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public KeyReleasePolicy getReleasePolicy() {
        return this.releasePolicy;
    }

    /**
     * Set the releasePolicy property: The policy rules under which the key can be exported.
     * 
     * @param releasePolicy the releasePolicy value to set.
     * @return the KeyCreateParameters object itself.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public KeyCreateParameters setReleasePolicy(KeyReleasePolicy releasePolicy) {
        this.releasePolicy = releasePolicy;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("kty", this.kty == null ? null : this.kty.getValue());
        jsonWriter.writeNumberField("key_size", this.keySize);
        jsonWriter.writeNumberField("public_exponent", this.publicExponent);
        jsonWriter.writeArrayField("key_ops", this.keyOps,
            (writer, element) -> writer.writeString(element == null ? null : element.getValue()));
        jsonWriter.writeJsonField("attributes", this.keyAttributes);
        jsonWriter.writeMapField("tags", this.tags, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("crv", this.curve == null ? null : this.curve.getValue());
        jsonWriter.writeJsonField("release_policy", this.releasePolicy);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of KeyCreateParameters from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of KeyCreateParameters if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the KeyCreateParameters.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public static KeyCreateParameters fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            KeyType kty = null;
            Integer keySize = null;
            Integer publicExponent = null;
            List<KeyOperation> keyOps = null;
            KeyAttributes keyAttributes = null;
            Map<String, String> tags = null;
            KeyCurveName curve = null;
            KeyReleasePolicy releasePolicy = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("kty".equals(fieldName)) {
                    kty = KeyType.fromValue(reader.getString());
                } else if ("key_size".equals(fieldName)) {
                    keySize = reader.getNullable(JsonReader::getInt);
                } else if ("public_exponent".equals(fieldName)) {
                    publicExponent = reader.getNullable(JsonReader::getInt);
                } else if ("key_ops".equals(fieldName)) {
                    keyOps = reader.readArray(reader1 -> KeyOperation.fromValue(reader1.getString()));
                } else if ("attributes".equals(fieldName)) {
                    keyAttributes = KeyAttributes.fromJson(reader);
                } else if ("tags".equals(fieldName)) {
                    tags = reader.readMap(reader1 -> reader1.getString());
                } else if ("crv".equals(fieldName)) {
                    curve = KeyCurveName.fromValue(reader.getString());
                } else if ("release_policy".equals(fieldName)) {
                    releasePolicy = KeyReleasePolicy.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            KeyCreateParameters deserializedKeyCreateParameters = new KeyCreateParameters(kty);
            deserializedKeyCreateParameters.keySize = keySize;
            deserializedKeyCreateParameters.publicExponent = publicExponent;
            deserializedKeyCreateParameters.keyOps = keyOps;
            deserializedKeyCreateParameters.keyAttributes = keyAttributes;
            deserializedKeyCreateParameters.tags = tags;
            deserializedKeyCreateParameters.curve = curve;
            deserializedKeyCreateParameters.releasePolicy = releasePolicy;

            return deserializedKeyCreateParameters;
        });
    }
}
