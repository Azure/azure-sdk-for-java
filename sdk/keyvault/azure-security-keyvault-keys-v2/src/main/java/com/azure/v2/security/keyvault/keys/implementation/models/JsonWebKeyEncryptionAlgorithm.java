// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.v2.security.keyvault.keys.implementation.models;

import io.clientcore.core.annotations.Metadata;
import io.clientcore.core.utils.ExpandableEnum;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Map;
import java.util.Objects;
import java.util.concurrent.ConcurrentHashMap;
import java.util.function.Function;

/**
 * An algorithm used for encryption and decryption.
 */
public final class JsonWebKeyEncryptionAlgorithm implements ExpandableEnum<String> {
    private static final Map<String, JsonWebKeyEncryptionAlgorithm> VALUES = new ConcurrentHashMap<>();

    private static final Function<String, JsonWebKeyEncryptionAlgorithm> NEW_INSTANCE
        = JsonWebKeyEncryptionAlgorithm::new;

    /**
     * [Not recommended] RSAES using Optimal Asymmetric Encryption Padding (OAEP), as described in
     * https://tools.ietf.org/html/rfc3447, with the default parameters specified by RFC 3447 in Section A.2.1. Those
     * default parameters are using a hash function of SHA-1 and a mask generation function of MGF1 with SHA-1.
     * Microsoft recommends using RSA_OAEP_256 or stronger algorithms for enhanced security. Microsoft does *not*
     * recommend RSA_OAEP, which is included solely for backwards compatibility. RSA_OAEP utilizes SHA1, which has known
     * collision problems.
     */
    @Metadata(generated = true)
    public static final JsonWebKeyEncryptionAlgorithm RSA_OAEP = fromValue("RSA-OAEP");

    /**
     * RSAES using Optimal Asymmetric Encryption Padding with a hash function of SHA-256 and a mask generation function
     * of MGF1 with SHA-256.
     */
    @Metadata(generated = true)
    public static final JsonWebKeyEncryptionAlgorithm RSA_OAEP256 = fromValue("RSA-OAEP-256");

    /**
     * [Not recommended] RSAES-PKCS1-V1_5 key encryption, as described in https://tools.ietf.org/html/rfc3447. Microsoft
     * recommends using RSA_OAEP_256 or stronger algorithms for enhanced security. Microsoft does *not* recommend
     * RSA_1_5, which is included solely for backwards compatibility. Cryptographic standards no longer consider RSA
     * with the PKCS#1 v1.5 padding scheme secure for encryption.
     */
    @Metadata(generated = true)
    public static final JsonWebKeyEncryptionAlgorithm RSA1_5 = fromValue("RSA1_5");

    /**
     * 128-bit AES-GCM.
     */
    @Metadata(generated = true)
    public static final JsonWebKeyEncryptionAlgorithm A128_GCM = fromValue("A128GCM");

    /**
     * 192-bit AES-GCM.
     */
    @Metadata(generated = true)
    public static final JsonWebKeyEncryptionAlgorithm A192_GCM = fromValue("A192GCM");

    /**
     * 256-bit AES-GCM.
     */
    @Metadata(generated = true)
    public static final JsonWebKeyEncryptionAlgorithm A256_GCM = fromValue("A256GCM");

    /**
     * 128-bit AES key wrap.
     */
    @Metadata(generated = true)
    public static final JsonWebKeyEncryptionAlgorithm A128_KW = fromValue("A128KW");

    /**
     * 192-bit AES key wrap.
     */
    @Metadata(generated = true)
    public static final JsonWebKeyEncryptionAlgorithm A192_KW = fromValue("A192KW");

    /**
     * 256-bit AES key wrap.
     */
    @Metadata(generated = true)
    public static final JsonWebKeyEncryptionAlgorithm A256_KW = fromValue("A256KW");

    /**
     * 128-bit AES-CBC.
     */
    @Metadata(generated = true)
    public static final JsonWebKeyEncryptionAlgorithm A128_CBC = fromValue("A128CBC");

    /**
     * 192-bit AES-CBC.
     */
    @Metadata(generated = true)
    public static final JsonWebKeyEncryptionAlgorithm A192_CBC = fromValue("A192CBC");

    /**
     * 256-bit AES-CBC.
     */
    @Metadata(generated = true)
    public static final JsonWebKeyEncryptionAlgorithm A256_CBC = fromValue("A256CBC");

    /**
     * 128-bit AES-CBC with PKCS padding.
     */
    @Metadata(generated = true)
    public static final JsonWebKeyEncryptionAlgorithm A128_CBCPAD = fromValue("A128CBCPAD");

    /**
     * 192-bit AES-CBC with PKCS padding.
     */
    @Metadata(generated = true)
    public static final JsonWebKeyEncryptionAlgorithm A192_CBCPAD = fromValue("A192CBCPAD");

    /**
     * 256-bit AES-CBC with PKCS padding.
     */
    @Metadata(generated = true)
    public static final JsonWebKeyEncryptionAlgorithm A256_CBCPAD = fromValue("A256CBCPAD");

    private final String value;

    private JsonWebKeyEncryptionAlgorithm(String value) {
        this.value = value;
    }

    /**
     * Creates or finds a JsonWebKeyEncryptionAlgorithm.
     * 
     * @param value a value to look for.
     * @return the corresponding JsonWebKeyEncryptionAlgorithm.
     * @throws IllegalArgumentException if value is null.
     */
    @Metadata(generated = true)
    public static JsonWebKeyEncryptionAlgorithm fromValue(String value) {
        if (value == null) {
            throw new IllegalArgumentException("'value' cannot be null.");
        }
        return VALUES.computeIfAbsent(value, NEW_INSTANCE);
    }

    /**
     * Gets known JsonWebKeyEncryptionAlgorithm values.
     * 
     * @return Known JsonWebKeyEncryptionAlgorithm values.
     */
    @Metadata(generated = true)
    public static Collection<JsonWebKeyEncryptionAlgorithm> values() {
        return new ArrayList<>(VALUES.values());
    }

    /**
     * Gets the value of the JsonWebKeyEncryptionAlgorithm instance.
     * 
     * @return the value of the JsonWebKeyEncryptionAlgorithm instance.
     */
    @Metadata(generated = true)
    @Override
    public String getValue() {
        return this.value;
    }

    @Metadata(generated = true)
    @Override
    public String toString() {
        return Objects.toString(this.value);
    }

    @Metadata(generated = true)
    @Override
    public boolean equals(Object obj) {
        return this == obj;
    }

    @Metadata(generated = true)
    @Override
    public int hashCode() {
        return Objects.hashCode(this.value);
    }
}
