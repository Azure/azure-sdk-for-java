// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.v2.security.keyvault.keys.implementation.models;

import io.clientcore.core.annotations.Metadata;
import io.clientcore.core.annotations.TypeConditions;
import io.clientcore.core.serialization.json.JsonReader;
import io.clientcore.core.serialization.json.JsonSerializable;
import io.clientcore.core.serialization.json.JsonToken;
import io.clientcore.core.serialization.json.JsonWriter;
import io.clientcore.core.utils.Base64Url;
import java.io.IOException;
import java.util.Objects;

/**
 * The get random bytes response object containing the bytes.
 */
@Metadata(conditions = { TypeConditions.IMMUTABLE })
public final class RandomBytes implements JsonSerializable<RandomBytes> {
    /*
     * The bytes encoded as a base64url string.
     */
    @Metadata(generated = true)
    private final Base64Url value;

    /**
     * Creates an instance of RandomBytes class.
     * 
     * @param value the value value to set.
     */
    @Metadata(generated = true)
    private RandomBytes(byte[] value) {
        if (value == null) {
            this.value = null;
        } else {
            this.value = Base64Url.encode(value);
        }
    }

    /**
     * Get the value property: The bytes encoded as a base64url string.
     * 
     * @return the value value.
     */
    @Metadata(generated = true)
    public byte[] getValue() {
        if (this.value == null) {
            return null;
        }
        return this.value.decodedBytes();
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("value", Objects.toString(this.value, null));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RandomBytes from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RandomBytes if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RandomBytes.
     */
    @Metadata(generated = true)
    public static RandomBytes fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            byte[] value = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("value".equals(fieldName)) {
                    Base64Url valueHolder
                        = reader.getNullable(nonNullReader -> new Base64Url(nonNullReader.getString()));
                    if (valueHolder != null) {
                        value = valueHolder.decodedBytes();
                    }
                } else {
                    reader.skipChildren();
                }
            }
            return new RandomBytes(value);
        });
    }
}
