// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.v2.security.keyvault.keys.implementation;

import com.azure.v2.security.keyvault.keys.implementation.models.BackupKeyResult;
import com.azure.v2.security.keyvault.keys.implementation.models.DeletedKeyBundle;
import com.azure.v2.security.keyvault.keys.implementation.models.DeletedKeyItem;
import com.azure.v2.security.keyvault.keys.implementation.models.GetRandomBytesRequest;
import com.azure.v2.security.keyvault.keys.implementation.models.KeyBundle;
import com.azure.v2.security.keyvault.keys.implementation.models.KeyCreateParameters;
import com.azure.v2.security.keyvault.keys.implementation.models.KeyImportParameters;
import com.azure.v2.security.keyvault.keys.implementation.models.KeyItem;
import com.azure.v2.security.keyvault.keys.implementation.models.KeyOperationResult;
import com.azure.v2.security.keyvault.keys.implementation.models.KeyOperationsParameters;
import com.azure.v2.security.keyvault.keys.implementation.models.KeyReleaseParameters;
import com.azure.v2.security.keyvault.keys.implementation.models.KeyRestoreParameters;
import com.azure.v2.security.keyvault.keys.implementation.models.KeyRotationPolicy;
import com.azure.v2.security.keyvault.keys.implementation.models.KeySignParameters;
import com.azure.v2.security.keyvault.keys.implementation.models.KeyUpdateParameters;
import com.azure.v2.security.keyvault.keys.implementation.models.KeyVerifyParameters;
import com.azure.v2.security.keyvault.keys.implementation.models.KeyVerifyResult;
import com.azure.v2.security.keyvault.keys.implementation.models.RandomBytes;
import com.azure.v2.security.keyvault.keys.models.ReleaseKeyResult;
import io.clientcore.core.annotations.Metadata;
import io.clientcore.core.annotations.ReturnType;
import io.clientcore.core.annotations.ServiceClient;
import io.clientcore.core.annotations.ServiceMethod;
import io.clientcore.core.http.exceptions.HttpResponseException;
import io.clientcore.core.http.models.PagedIterable;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.models.binarydata.BinaryData;

/**
 * Initializes a new instance of the synchronous KeyClient type.
 */
@ServiceClient(builder = KeyClientBuilder.class)
public final class KeyClient {
    @Metadata(generated = true)
    private final KeyClientImpl serviceClient;

    /**
     * Initializes an instance of KeyClient class.
     *
     * @param serviceClient the service client implementation.
     */
    @Metadata(generated = true)
    KeyClient(KeyClientImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Creates a new key, stores it, then returns key parameters and attributes to the client.
     *
     * The create key operation can be used to create any key type in Azure Key Vault. If the named key already exists,
     * Azure Key Vault creates a new version of the key. It requires the keys/create permission.
     * <p><strong>Request Body Schema</strong></p>
     *
     * <pre>
     * {@code
     * {
     *     kty: String(EC/EC-HSM/RSA/RSA-HSM/oct/oct-HSM) (Required)
     *     key_size: Integer (Optional)
     *     public_exponent: Integer (Optional)
     *     key_ops (Optional): [
     *         String(encrypt/decrypt/sign/verify/wrapKey/unwrapKey/import/export) (Optional)
     *     ]
     *     attributes (Optional): {
     *         enabled: Boolean (Optional)
     *         nbf: Long (Optional)
     *         exp: Long (Optional)
     *         created: Long (Optional)
     *         updated: Long (Optional)
     *         recoverableDays: Integer (Optional)
     *         recoveryLevel: String(Purgeable/Recoverable+Purgeable/Recoverable/Recoverable+ProtectedSubscription/CustomizedRecoverable+Purgeable/CustomizedRecoverable/CustomizedRecoverable+ProtectedSubscription) (Optional)
     *         exportable: Boolean (Optional)
     *         hsmPlatform: String (Optional)
     *     }
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     crv: String(P-256/P-384/P-521/P-256K) (Optional)
     *     release_policy (Optional): {
     *         contentType: String (Optional)
     *         immutable: Boolean (Optional)
     *         data: Base64Uri (Optional)
     *     }
     * }
     * }
     * </pre>
     *
     * <p><strong>Response Body Schema</strong></p>
     *
     * <pre>
     * {@code
     * {
     *     key (Optional): {
     *         kid: String (Optional)
     *         kty: String(EC/EC-HSM/RSA/RSA-HSM/oct/oct-HSM) (Optional)
     *         key_ops (Optional): [
     *             String (Optional)
     *         ]
     *         n: Base64Uri (Optional)
     *         e: Base64Uri (Optional)
     *         d: Base64Uri (Optional)
     *         dp: Base64Uri (Optional)
     *         dq: Base64Uri (Optional)
     *         qi: Base64Uri (Optional)
     *         p: Base64Uri (Optional)
     *         q: Base64Uri (Optional)
     *         k: Base64Uri (Optional)
     *         key_hsm: Base64Uri (Optional)
     *         crv: String(P-256/P-384/P-521/P-256K) (Optional)
     *         x: Base64Uri (Optional)
     *         y: Base64Uri (Optional)
     *     }
     *     attributes (Optional): {
     *         enabled: Boolean (Optional)
     *         nbf: Long (Optional)
     *         exp: Long (Optional)
     *         created: Long (Optional)
     *         updated: Long (Optional)
     *         recoverableDays: Integer (Optional)
     *         recoveryLevel: String(Purgeable/Recoverable+Purgeable/Recoverable/Recoverable+ProtectedSubscription/CustomizedRecoverable+Purgeable/CustomizedRecoverable/CustomizedRecoverable+ProtectedSubscription) (Optional)
     *         exportable: Boolean (Optional)
     *         hsmPlatform: String (Optional)
     *     }
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     managed: Boolean (Optional)
     *     release_policy (Optional): {
     *         contentType: String (Optional)
     *         immutable: Boolean (Optional)
     *         data: Base64Uri (Optional)
     *     }
     * }
     * }
     * </pre>
     *
     * @param keyName The name for the new key. The system will generate the version name for the new key. The value you
     * provide may be copied globally for the purpose of running the service. The value provided should not include
     * personally identifiable or sensitive information.
     * @param parameters The parameters to create a key.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return a KeyBundle consisting of a WebKey plus its attributes.
     */
    @Metadata(generated = true)
    public Response<KeyBundle> createKeyWithResponse(String keyName, BinaryData parameters,
        RequestOptions requestOptions) {
        return this.serviceClient.createKeyWithResponse(keyName, parameters, requestOptions);
    }

    /**
     * Creates a new key version, stores it, then returns key parameters, attributes and policy to the client.
     *
     * The operation will rotate the key based on the key policy. It requires the keys/rotate permission.
     * <p><strong>Response Body Schema</strong></p>
     *
     * <pre>
     * {@code
     * {
     *     key (Optional): {
     *         kid: String (Optional)
     *         kty: String(EC/EC-HSM/RSA/RSA-HSM/oct/oct-HSM) (Optional)
     *         key_ops (Optional): [
     *             String (Optional)
     *         ]
     *         n: Base64Uri (Optional)
     *         e: Base64Uri (Optional)
     *         d: Base64Uri (Optional)
     *         dp: Base64Uri (Optional)
     *         dq: Base64Uri (Optional)
     *         qi: Base64Uri (Optional)
     *         p: Base64Uri (Optional)
     *         q: Base64Uri (Optional)
     *         k: Base64Uri (Optional)
     *         key_hsm: Base64Uri (Optional)
     *         crv: String(P-256/P-384/P-521/P-256K) (Optional)
     *         x: Base64Uri (Optional)
     *         y: Base64Uri (Optional)
     *     }
     *     attributes (Optional): {
     *         enabled: Boolean (Optional)
     *         nbf: Long (Optional)
     *         exp: Long (Optional)
     *         created: Long (Optional)
     *         updated: Long (Optional)
     *         recoverableDays: Integer (Optional)
     *         recoveryLevel: String(Purgeable/Recoverable+Purgeable/Recoverable/Recoverable+ProtectedSubscription/CustomizedRecoverable+Purgeable/CustomizedRecoverable/CustomizedRecoverable+ProtectedSubscription) (Optional)
     *         exportable: Boolean (Optional)
     *         hsmPlatform: String (Optional)
     *     }
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     managed: Boolean (Optional)
     *     release_policy (Optional): {
     *         contentType: String (Optional)
     *         immutable: Boolean (Optional)
     *         data: Base64Uri (Optional)
     *     }
     * }
     * }
     * </pre>
     *
     * @param keyName The name of key to be rotated. The system will generate a new version in the specified key.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return a KeyBundle consisting of a WebKey plus its attributes.
     */
    @Metadata(generated = true)
    public Response<KeyBundle> rotateKeyWithResponse(String keyName, RequestOptions requestOptions) {
        return this.serviceClient.rotateKeyWithResponse(keyName, requestOptions);
    }

    /**
     * Imports an externally created key, stores it, and returns key parameters and attributes to the client.
     *
     * The import key operation may be used to import any key type into an Azure Key Vault. If the named key already
     * exists, Azure Key Vault creates a new version of the key. This operation requires the keys/import permission.
     * <p><strong>Request Body Schema</strong></p>
     *
     * <pre>
     * {@code
     * {
     *     Hsm: Boolean (Optional)
     *     key (Required): {
     *         kid: String (Optional)
     *         kty: String(EC/EC-HSM/RSA/RSA-HSM/oct/oct-HSM) (Optional)
     *         key_ops (Optional): [
     *             String (Optional)
     *         ]
     *         n: Base64Uri (Optional)
     *         e: Base64Uri (Optional)
     *         d: Base64Uri (Optional)
     *         dp: Base64Uri (Optional)
     *         dq: Base64Uri (Optional)
     *         qi: Base64Uri (Optional)
     *         p: Base64Uri (Optional)
     *         q: Base64Uri (Optional)
     *         k: Base64Uri (Optional)
     *         key_hsm: Base64Uri (Optional)
     *         crv: String(P-256/P-384/P-521/P-256K) (Optional)
     *         x: Base64Uri (Optional)
     *         y: Base64Uri (Optional)
     *     }
     *     attributes (Optional): {
     *         enabled: Boolean (Optional)
     *         nbf: Long (Optional)
     *         exp: Long (Optional)
     *         created: Long (Optional)
     *         updated: Long (Optional)
     *         recoverableDays: Integer (Optional)
     *         recoveryLevel: String(Purgeable/Recoverable+Purgeable/Recoverable/Recoverable+ProtectedSubscription/CustomizedRecoverable+Purgeable/CustomizedRecoverable/CustomizedRecoverable+ProtectedSubscription) (Optional)
     *         exportable: Boolean (Optional)
     *         hsmPlatform: String (Optional)
     *     }
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     release_policy (Optional): {
     *         contentType: String (Optional)
     *         immutable: Boolean (Optional)
     *         data: Base64Uri (Optional)
     *     }
     * }
     * }
     * </pre>
     *
     * <p><strong>Response Body Schema</strong></p>
     *
     * <pre>
     * {@code
     * {
     *     key (Optional): {
     *         kid: String (Optional)
     *         kty: String(EC/EC-HSM/RSA/RSA-HSM/oct/oct-HSM) (Optional)
     *         key_ops (Optional): [
     *             String (Optional)
     *         ]
     *         n: Base64Uri (Optional)
     *         e: Base64Uri (Optional)
     *         d: Base64Uri (Optional)
     *         dp: Base64Uri (Optional)
     *         dq: Base64Uri (Optional)
     *         qi: Base64Uri (Optional)
     *         p: Base64Uri (Optional)
     *         q: Base64Uri (Optional)
     *         k: Base64Uri (Optional)
     *         key_hsm: Base64Uri (Optional)
     *         crv: String(P-256/P-384/P-521/P-256K) (Optional)
     *         x: Base64Uri (Optional)
     *         y: Base64Uri (Optional)
     *     }
     *     attributes (Optional): {
     *         enabled: Boolean (Optional)
     *         nbf: Long (Optional)
     *         exp: Long (Optional)
     *         created: Long (Optional)
     *         updated: Long (Optional)
     *         recoverableDays: Integer (Optional)
     *         recoveryLevel: String(Purgeable/Recoverable+Purgeable/Recoverable/Recoverable+ProtectedSubscription/CustomizedRecoverable+Purgeable/CustomizedRecoverable/CustomizedRecoverable+ProtectedSubscription) (Optional)
     *         exportable: Boolean (Optional)
     *         hsmPlatform: String (Optional)
     *     }
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     managed: Boolean (Optional)
     *     release_policy (Optional): {
     *         contentType: String (Optional)
     *         immutable: Boolean (Optional)
     *         data: Base64Uri (Optional)
     *     }
     * }
     * }
     * </pre>
     *
     * @param keyName Name for the imported key. The value you provide may be copied globally for the purpose of running
     * the service. The value provided should not include personally identifiable or sensitive information.
     * @param parameters The parameters to import a key.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return a KeyBundle consisting of a WebKey plus its attributes.
     */
    @Metadata(generated = true)
    public Response<KeyBundle> importKeyWithResponse(String keyName, BinaryData parameters,
        RequestOptions requestOptions) {
        return this.serviceClient.importKeyWithResponse(keyName, parameters, requestOptions);
    }

    /**
     * Deletes a key of any type from storage in Azure Key Vault.
     *
     * The delete key operation cannot be used to remove individual versions of a key. This operation removes the
     * cryptographic material associated with the key, which means the key is not usable for Sign/Verify, Wrap/Unwrap or
     * Encrypt/Decrypt operations. This operation requires the keys/delete permission.
     * <p><strong>Response Body Schema</strong></p>
     *
     * <pre>
     * {@code
     * {
     *     key (Optional): {
     *         kid: String (Optional)
     *         kty: String(EC/EC-HSM/RSA/RSA-HSM/oct/oct-HSM) (Optional)
     *         key_ops (Optional): [
     *             String (Optional)
     *         ]
     *         n: Base64Uri (Optional)
     *         e: Base64Uri (Optional)
     *         d: Base64Uri (Optional)
     *         dp: Base64Uri (Optional)
     *         dq: Base64Uri (Optional)
     *         qi: Base64Uri (Optional)
     *         p: Base64Uri (Optional)
     *         q: Base64Uri (Optional)
     *         k: Base64Uri (Optional)
     *         key_hsm: Base64Uri (Optional)
     *         crv: String(P-256/P-384/P-521/P-256K) (Optional)
     *         x: Base64Uri (Optional)
     *         y: Base64Uri (Optional)
     *     }
     *     attributes (Optional): {
     *         enabled: Boolean (Optional)
     *         nbf: Long (Optional)
     *         exp: Long (Optional)
     *         created: Long (Optional)
     *         updated: Long (Optional)
     *         recoverableDays: Integer (Optional)
     *         recoveryLevel: String(Purgeable/Recoverable+Purgeable/Recoverable/Recoverable+ProtectedSubscription/CustomizedRecoverable+Purgeable/CustomizedRecoverable/CustomizedRecoverable+ProtectedSubscription) (Optional)
     *         exportable: Boolean (Optional)
     *         hsmPlatform: String (Optional)
     *     }
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     managed: Boolean (Optional)
     *     release_policy (Optional): {
     *         contentType: String (Optional)
     *         immutable: Boolean (Optional)
     *         data: Base64Uri (Optional)
     *     }
     *     recoveryId: String (Optional)
     *     scheduledPurgeDate: Long (Optional)
     *     deletedDate: Long (Optional)
     * }
     * }
     * </pre>
     *
     * @param keyName The name of the key to delete.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return a DeletedKeyBundle consisting of a WebKey plus its Attributes and deletion info.
     */
    @Metadata(generated = true)
    public Response<DeletedKeyBundle> deleteKeyWithResponse(String keyName, RequestOptions requestOptions) {
        return this.serviceClient.deleteKeyWithResponse(keyName, requestOptions);
    }

    /**
     * The update key operation changes specified attributes of a stored key and can be applied to any key type and key
     * version stored in Azure Key Vault.
     *
     * In order to perform this operation, the key must already exist in the Key Vault. Note: The cryptographic material
     * of a key itself cannot be changed. This operation requires the keys/update permission.
     * <p><strong>Request Body Schema</strong></p>
     *
     * <pre>
     * {@code
     * {
     *     key_ops (Optional): [
     *         String(encrypt/decrypt/sign/verify/wrapKey/unwrapKey/import/export) (Optional)
     *     ]
     *     attributes (Optional): {
     *         enabled: Boolean (Optional)
     *         nbf: Long (Optional)
     *         exp: Long (Optional)
     *         created: Long (Optional)
     *         updated: Long (Optional)
     *         recoverableDays: Integer (Optional)
     *         recoveryLevel: String(Purgeable/Recoverable+Purgeable/Recoverable/Recoverable+ProtectedSubscription/CustomizedRecoverable+Purgeable/CustomizedRecoverable/CustomizedRecoverable+ProtectedSubscription) (Optional)
     *         exportable: Boolean (Optional)
     *         hsmPlatform: String (Optional)
     *     }
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     release_policy (Optional): {
     *         contentType: String (Optional)
     *         immutable: Boolean (Optional)
     *         data: Base64Uri (Optional)
     *     }
     * }
     * }
     * </pre>
     *
     * <p><strong>Response Body Schema</strong></p>
     *
     * <pre>
     * {@code
     * {
     *     key (Optional): {
     *         kid: String (Optional)
     *         kty: String(EC/EC-HSM/RSA/RSA-HSM/oct/oct-HSM) (Optional)
     *         key_ops (Optional): [
     *             String (Optional)
     *         ]
     *         n: Base64Uri (Optional)
     *         e: Base64Uri (Optional)
     *         d: Base64Uri (Optional)
     *         dp: Base64Uri (Optional)
     *         dq: Base64Uri (Optional)
     *         qi: Base64Uri (Optional)
     *         p: Base64Uri (Optional)
     *         q: Base64Uri (Optional)
     *         k: Base64Uri (Optional)
     *         key_hsm: Base64Uri (Optional)
     *         crv: String(P-256/P-384/P-521/P-256K) (Optional)
     *         x: Base64Uri (Optional)
     *         y: Base64Uri (Optional)
     *     }
     *     attributes (Optional): {
     *         enabled: Boolean (Optional)
     *         nbf: Long (Optional)
     *         exp: Long (Optional)
     *         created: Long (Optional)
     *         updated: Long (Optional)
     *         recoverableDays: Integer (Optional)
     *         recoveryLevel: String(Purgeable/Recoverable+Purgeable/Recoverable/Recoverable+ProtectedSubscription/CustomizedRecoverable+Purgeable/CustomizedRecoverable/CustomizedRecoverable+ProtectedSubscription) (Optional)
     *         exportable: Boolean (Optional)
     *         hsmPlatform: String (Optional)
     *     }
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     managed: Boolean (Optional)
     *     release_policy (Optional): {
     *         contentType: String (Optional)
     *         immutable: Boolean (Optional)
     *         data: Base64Uri (Optional)
     *     }
     * }
     * }
     * </pre>
     *
     * @param keyName The name of key to update.
     * @param keyVersion The version of the key to update.
     * @param parameters The parameters of the key to update.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return a KeyBundle consisting of a WebKey plus its attributes.
     */
    @Metadata(generated = true)
    public Response<KeyBundle> updateKeyWithResponse(String keyName, String keyVersion, BinaryData parameters,
        RequestOptions requestOptions) {
        return this.serviceClient.updateKeyWithResponse(keyName, keyVersion, parameters, requestOptions);
    }

    /**
     * Gets the public part of a stored key.
     *
     * The get key operation is applicable to all key types. If the requested key is symmetric, then no key material is
     * released in the response. This operation requires the keys/get permission.
     * <p><strong>Response Body Schema</strong></p>
     *
     * <pre>
     * {@code
     * {
     *     key (Optional): {
     *         kid: String (Optional)
     *         kty: String(EC/EC-HSM/RSA/RSA-HSM/oct/oct-HSM) (Optional)
     *         key_ops (Optional): [
     *             String (Optional)
     *         ]
     *         n: Base64Uri (Optional)
     *         e: Base64Uri (Optional)
     *         d: Base64Uri (Optional)
     *         dp: Base64Uri (Optional)
     *         dq: Base64Uri (Optional)
     *         qi: Base64Uri (Optional)
     *         p: Base64Uri (Optional)
     *         q: Base64Uri (Optional)
     *         k: Base64Uri (Optional)
     *         key_hsm: Base64Uri (Optional)
     *         crv: String(P-256/P-384/P-521/P-256K) (Optional)
     *         x: Base64Uri (Optional)
     *         y: Base64Uri (Optional)
     *     }
     *     attributes (Optional): {
     *         enabled: Boolean (Optional)
     *         nbf: Long (Optional)
     *         exp: Long (Optional)
     *         created: Long (Optional)
     *         updated: Long (Optional)
     *         recoverableDays: Integer (Optional)
     *         recoveryLevel: String(Purgeable/Recoverable+Purgeable/Recoverable/Recoverable+ProtectedSubscription/CustomizedRecoverable+Purgeable/CustomizedRecoverable/CustomizedRecoverable+ProtectedSubscription) (Optional)
     *         exportable: Boolean (Optional)
     *         hsmPlatform: String (Optional)
     *     }
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     managed: Boolean (Optional)
     *     release_policy (Optional): {
     *         contentType: String (Optional)
     *         immutable: Boolean (Optional)
     *         data: Base64Uri (Optional)
     *     }
     * }
     * }
     * </pre>
     *
     * @param keyName The name of the key to get.
     * @param keyVersion Adding the version parameter retrieves a specific version of a key. This URI fragment is
     * optional. If not specified, the latest version of the key is returned.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the public part of a stored key.
     *
     * The get key operation is applicable to all key types.
     */
    @Metadata(generated = true)
    public Response<KeyBundle> getKeyWithResponse(String keyName, String keyVersion, RequestOptions requestOptions) {
        return this.serviceClient.getKeyWithResponse(keyName, keyVersion, requestOptions);
    }

    /**
     * Retrieves a list of individual key versions with the same key name.
     *
     * The full key identifier, attributes, and tags are provided in the response. This operation requires the keys/list
     * permission.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxresults</td><td>Integer</td><td>No</td><td>Maximum number of results to return in a page. If not
     * specified the service will return up to 25 results.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     *
     * <pre>
     * {@code
     * {
     *     value (Optional): [
     *          (Optional){
     *             kid: String (Optional)
     *             attributes (Optional): {
     *                 enabled: Boolean (Optional)
     *                 nbf: Long (Optional)
     *                 exp: Long (Optional)
     *                 created: Long (Optional)
     *                 updated: Long (Optional)
     *                 recoverableDays: Integer (Optional)
     *                 recoveryLevel: String(Purgeable/Recoverable+Purgeable/Recoverable/Recoverable+ProtectedSubscription/CustomizedRecoverable+Purgeable/CustomizedRecoverable/CustomizedRecoverable+ProtectedSubscription) (Optional)
     *                 exportable: Boolean (Optional)
     *                 hsmPlatform: String (Optional)
     *             }
     *             tags (Optional): {
     *                 String: String (Required)
     *             }
     *             managed: Boolean (Optional)
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }
     * </pre>
     *
     * @param keyName The name of the key.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the key list result.
     */
    @Metadata(generated = true)
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<KeyItem> getKeyVersions(String keyName, RequestOptions requestOptions) {
        return this.serviceClient.getKeyVersions(keyName, requestOptions);
    }

    /**
     * List keys in the specified vault.
     *
     * Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public part of a stored
     * key. The LIST operation is applicable to all key types, however only the base key identifier, attributes, and
     * tags are provided in the response. Individual versions of a key are not listed in the response. This operation
     * requires the keys/list permission.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxresults</td><td>Integer</td><td>No</td><td>Maximum number of results to return in a page. If not
     * specified the service will return up to 25 results.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     *
     * <pre>
     * {@code
     * {
     *     value (Optional): [
     *          (Optional){
     *             kid: String (Optional)
     *             attributes (Optional): {
     *                 enabled: Boolean (Optional)
     *                 nbf: Long (Optional)
     *                 exp: Long (Optional)
     *                 created: Long (Optional)
     *                 updated: Long (Optional)
     *                 recoverableDays: Integer (Optional)
     *                 recoveryLevel: String(Purgeable/Recoverable+Purgeable/Recoverable/Recoverable+ProtectedSubscription/CustomizedRecoverable+Purgeable/CustomizedRecoverable/CustomizedRecoverable+ProtectedSubscription) (Optional)
     *                 exportable: Boolean (Optional)
     *                 hsmPlatform: String (Optional)
     *             }
     *             tags (Optional): {
     *                 String: String (Required)
     *             }
     *             managed: Boolean (Optional)
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }
     * </pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the key list result.
     */
    @Metadata(generated = true)
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<KeyItem> getKeys(RequestOptions requestOptions) {
        return this.serviceClient.getKeys(requestOptions);
    }

    /**
     * Requests that a backup of the specified key be downloaded to the client.
     *
     * The Key Backup operation exports a key from Azure Key Vault in a protected form. Note that this operation does
     * NOT return key material in a form that can be used outside the Azure Key Vault system, the returned key material
     * is either protected to a Azure Key Vault HSM or to Azure Key Vault itself. The intent of this operation is to
     * allow a client to GENERATE a key in one Azure Key Vault instance, BACKUP the key, and then RESTORE it into
     * another Azure Key Vault instance. The BACKUP operation may be used to export, in protected form, any key type
     * from Azure Key Vault. Individual versions of a key cannot be backed up. BACKUP / RESTORE can be performed within
     * geographical boundaries only; meaning that a BACKUP from one geographical area cannot be restored to another
     * geographical area. For example, a backup from the US geographical area cannot be restored in an EU geographical
     * area. This operation requires the key/backup permission.
     * <p><strong>Response Body Schema</strong></p>
     *
     * <pre>
     * {@code
     * {
     *     value: Base64Uri (Optional)
     * }
     * }
     * </pre>
     *
     * @param keyName The name of the key.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the backup key result, containing the backup blob.
     */
    @Metadata(generated = true)
    public Response<BackupKeyResult> backupKeyWithResponse(String keyName, RequestOptions requestOptions) {
        return this.serviceClient.backupKeyWithResponse(keyName, requestOptions);
    }

    /**
     * Restores a backed up key to a vault.
     *
     * Imports a previously backed up key into Azure Key Vault, restoring the key, its key identifier, attributes and
     * access control policies. The RESTORE operation may be used to import a previously backed up key. Individual
     * versions of a key cannot be restored. The key is restored in its entirety with the same key name as it had when
     * it was backed up. If the key name is not available in the target Key Vault, the RESTORE operation will be
     * rejected. While the key name is retained during restore, the final key identifier will change if the key is
     * restored to a different vault. Restore will restore all versions and preserve version identifiers. The RESTORE
     * operation is subject to security constraints: The target Key Vault must be owned by the same Microsoft Azure
     * Subscription as the source Key Vault The user must have RESTORE permission in the target Key Vault. This
     * operation requires the keys/restore permission.
     * <p><strong>Request Body Schema</strong></p>
     *
     * <pre>
     * {@code
     * {
     *     value: Base64Uri (Required)
     * }
     * }
     * </pre>
     *
     * <p><strong>Response Body Schema</strong></p>
     *
     * <pre>
     * {@code
     * {
     *     key (Optional): {
     *         kid: String (Optional)
     *         kty: String(EC/EC-HSM/RSA/RSA-HSM/oct/oct-HSM) (Optional)
     *         key_ops (Optional): [
     *             String (Optional)
     *         ]
     *         n: Base64Uri (Optional)
     *         e: Base64Uri (Optional)
     *         d: Base64Uri (Optional)
     *         dp: Base64Uri (Optional)
     *         dq: Base64Uri (Optional)
     *         qi: Base64Uri (Optional)
     *         p: Base64Uri (Optional)
     *         q: Base64Uri (Optional)
     *         k: Base64Uri (Optional)
     *         key_hsm: Base64Uri (Optional)
     *         crv: String(P-256/P-384/P-521/P-256K) (Optional)
     *         x: Base64Uri (Optional)
     *         y: Base64Uri (Optional)
     *     }
     *     attributes (Optional): {
     *         enabled: Boolean (Optional)
     *         nbf: Long (Optional)
     *         exp: Long (Optional)
     *         created: Long (Optional)
     *         updated: Long (Optional)
     *         recoverableDays: Integer (Optional)
     *         recoveryLevel: String(Purgeable/Recoverable+Purgeable/Recoverable/Recoverable+ProtectedSubscription/CustomizedRecoverable+Purgeable/CustomizedRecoverable/CustomizedRecoverable+ProtectedSubscription) (Optional)
     *         exportable: Boolean (Optional)
     *         hsmPlatform: String (Optional)
     *     }
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     managed: Boolean (Optional)
     *     release_policy (Optional): {
     *         contentType: String (Optional)
     *         immutable: Boolean (Optional)
     *         data: Base64Uri (Optional)
     *     }
     * }
     * }
     * </pre>
     *
     * @param parameters The parameters to restore the key.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return a KeyBundle consisting of a WebKey plus its attributes.
     */
    @Metadata(generated = true)
    public Response<KeyBundle> restoreKeyWithResponse(BinaryData parameters, RequestOptions requestOptions) {
        return this.serviceClient.restoreKeyWithResponse(parameters, requestOptions);
    }

    /**
     * Encrypts an arbitrary sequence of bytes using an encryption key that is stored in a key vault.
     *
     * The ENCRYPT operation encrypts an arbitrary sequence of bytes using an encryption key that is stored in Azure Key
     * Vault. Note that the ENCRYPT operation only supports a single block of data, the size of which is dependent on
     * the target key and the encryption algorithm to be used. The ENCRYPT operation is only strictly necessary for
     * symmetric keys stored in Azure Key Vault since protection with an asymmetric key can be performed using public
     * portion of the key. This operation is supported for asymmetric keys as a convenience for callers that have a
     * key-reference but do not have access to the public key material. This operation requires the keys/encrypt
     * permission.
     * <p><strong>Request Body Schema</strong></p>
     *
     * <pre>
     * {@code
     * {
     *     alg: String(RSA-OAEP/RSA-OAEP-256/RSA1_5/A128GCM/A192GCM/A256GCM/A128KW/A192KW/A256KW/A128CBC/A192CBC/A256CBC/A128CBCPAD/A192CBCPAD/A256CBCPAD) (Required)
     *     value: Base64Uri (Required)
     *     iv: Base64Uri (Optional)
     *     aad: Base64Uri (Optional)
     *     tag: Base64Uri (Optional)
     * }
     * }
     * </pre>
     *
     * <p><strong>Response Body Schema</strong></p>
     *
     * <pre>
     * {@code
     * {
     *     kid: String (Optional)
     *     value: Base64Uri (Optional)
     *     iv: Base64Uri (Optional)
     *     tag: Base64Uri (Optional)
     *     aad: Base64Uri (Optional)
     * }
     * }
     * </pre>
     *
     * @param keyName The name of the key.
     * @param keyVersion The version of the key.
     * @param parameters The parameters for the encryption operation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the key operation result.
     */
    @Metadata(generated = true)
    public Response<KeyOperationResult> encryptWithResponse(String keyName, String keyVersion, BinaryData parameters,
        RequestOptions requestOptions) {
        return this.serviceClient.encryptWithResponse(keyName, keyVersion, parameters, requestOptions);
    }

    /**
     * Decrypts a single block of encrypted data.
     *
     * The DECRYPT operation decrypts a well-formed block of ciphertext using the target encryption key and specified
     * algorithm. This operation is the reverse of the ENCRYPT operation; only a single block of data may be decrypted,
     * the size of this block is dependent on the target key and the algorithm to be used. The DECRYPT operation applies
     * to asymmetric and symmetric keys stored in Azure Key Vault since it uses the private portion of the key. This
     * operation requires the keys/decrypt permission. Microsoft recommends not to use CBC algorithms for decryption
     * without first ensuring the integrity of the ciphertext using an HMAC, for example. See
     * https://learn.microsoft.com/dotnet/standard/security/vulnerabilities-cbc-mode for more information.
     * <p><strong>Request Body Schema</strong></p>
     *
     * <pre>
     * {@code
     * {
     *     alg: String(RSA-OAEP/RSA-OAEP-256/RSA1_5/A128GCM/A192GCM/A256GCM/A128KW/A192KW/A256KW/A128CBC/A192CBC/A256CBC/A128CBCPAD/A192CBCPAD/A256CBCPAD) (Required)
     *     value: Base64Uri (Required)
     *     iv: Base64Uri (Optional)
     *     aad: Base64Uri (Optional)
     *     tag: Base64Uri (Optional)
     * }
     * }
     * </pre>
     *
     * <p><strong>Response Body Schema</strong></p>
     *
     * <pre>
     * {@code
     * {
     *     kid: String (Optional)
     *     value: Base64Uri (Optional)
     *     iv: Base64Uri (Optional)
     *     tag: Base64Uri (Optional)
     *     aad: Base64Uri (Optional)
     * }
     * }
     * </pre>
     *
     * @param keyName The name of the key.
     * @param keyVersion The version of the key.
     * @param parameters The parameters for the decryption operation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the key operation result.
     */
    @Metadata(generated = true)
    public Response<KeyOperationResult> decryptWithResponse(String keyName, String keyVersion, BinaryData parameters,
        RequestOptions requestOptions) {
        return this.serviceClient.decryptWithResponse(keyName, keyVersion, parameters, requestOptions);
    }

    /**
     * Creates a signature from a digest using the specified key.
     *
     * The SIGN operation is applicable to asymmetric and symmetric keys stored in Azure Key Vault since this operation
     * uses the private portion of the key. This operation requires the keys/sign permission.
     * <p><strong>Request Body Schema</strong></p>
     *
     * <pre>
     * {@code
     * {
     *     alg: String(PS256/PS384/PS512/RS256/RS384/RS512/RSNULL/ES256/ES384/ES512/ES256K) (Required)
     *     value: Base64Uri (Required)
     * }
     * }
     * </pre>
     *
     * <p><strong>Response Body Schema</strong></p>
     *
     * <pre>
     * {@code
     * {
     *     kid: String (Optional)
     *     value: Base64Uri (Optional)
     *     iv: Base64Uri (Optional)
     *     tag: Base64Uri (Optional)
     *     aad: Base64Uri (Optional)
     * }
     * }
     * </pre>
     *
     * @param keyName The name of the key.
     * @param keyVersion The version of the key.
     * @param parameters The parameters for the signing operation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the key operation result.
     */
    @Metadata(generated = true)
    public Response<KeyOperationResult> signWithResponse(String keyName, String keyVersion, BinaryData parameters,
        RequestOptions requestOptions) {
        return this.serviceClient.signWithResponse(keyName, keyVersion, parameters, requestOptions);
    }

    /**
     * Verifies a signature using a specified key.
     *
     * The VERIFY operation is applicable to symmetric keys stored in Azure Key Vault. VERIFY is not strictly necessary
     * for asymmetric keys stored in Azure Key Vault since signature verification can be performed using the public
     * portion of the key but this operation is supported as a convenience for callers that only have a key-reference
     * and not the public portion of the key. This operation requires the keys/verify permission.
     * <p><strong>Request Body Schema</strong></p>
     *
     * <pre>
     * {@code
     * {
     *     alg: String(PS256/PS384/PS512/RS256/RS384/RS512/RSNULL/ES256/ES384/ES512/ES256K) (Required)
     *     digest: Base64Uri (Required)
     *     value: Base64Uri (Required)
     * }
     * }
     * </pre>
     *
     * <p><strong>Response Body Schema</strong></p>
     *
     * <pre>
     * {@code
     * {
     *     value: Boolean (Optional)
     * }
     * }
     * </pre>
     *
     * @param keyName The name of the key.
     * @param keyVersion The version of the key.
     * @param parameters The parameters for verify operations.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the key verify result.
     */
    @Metadata(generated = true)
    public Response<KeyVerifyResult> verifyWithResponse(String keyName, String keyVersion, BinaryData parameters,
        RequestOptions requestOptions) {
        return this.serviceClient.verifyWithResponse(keyName, keyVersion, parameters, requestOptions);
    }

    /**
     * Wraps a symmetric key using a specified key.
     *
     * The WRAP operation supports encryption of a symmetric key using a key encryption key that has previously been
     * stored in an Azure Key Vault. The WRAP operation is only strictly necessary for symmetric keys stored in Azure
     * Key Vault since protection with an asymmetric key can be performed using the public portion of the key. This
     * operation is supported for asymmetric keys as a convenience for callers that have a key-reference but do not have
     * access to the public key material. This operation requires the keys/wrapKey permission.
     * <p><strong>Request Body Schema</strong></p>
     *
     * <pre>
     * {@code
     * {
     *     alg: String(RSA-OAEP/RSA-OAEP-256/RSA1_5/A128GCM/A192GCM/A256GCM/A128KW/A192KW/A256KW/A128CBC/A192CBC/A256CBC/A128CBCPAD/A192CBCPAD/A256CBCPAD) (Required)
     *     value: Base64Uri (Required)
     *     iv: Base64Uri (Optional)
     *     aad: Base64Uri (Optional)
     *     tag: Base64Uri (Optional)
     * }
     * }
     * </pre>
     *
     * <p><strong>Response Body Schema</strong></p>
     *
     * <pre>
     * {@code
     * {
     *     kid: String (Optional)
     *     value: Base64Uri (Optional)
     *     iv: Base64Uri (Optional)
     *     tag: Base64Uri (Optional)
     *     aad: Base64Uri (Optional)
     * }
     * }
     * </pre>
     *
     * @param keyName The name of the key.
     * @param keyVersion The version of the key.
     * @param parameters The parameters for wrap operation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the key operation result.
     */
    @Metadata(generated = true)
    public Response<KeyOperationResult> wrapKeyWithResponse(String keyName, String keyVersion, BinaryData parameters,
        RequestOptions requestOptions) {
        return this.serviceClient.wrapKeyWithResponse(keyName, keyVersion, parameters, requestOptions);
    }

    /**
     * Unwraps a symmetric key using the specified key that was initially used for wrapping that key.
     *
     * The UNWRAP operation supports decryption of a symmetric key using the target key encryption key. This operation
     * is the reverse of the WRAP operation. The UNWRAP operation applies to asymmetric and symmetric keys stored in
     * Azure Key Vault since it uses the private portion of the key. This operation requires the keys/unwrapKey
     * permission.
     * <p><strong>Request Body Schema</strong></p>
     *
     * <pre>
     * {@code
     * {
     *     alg: String(RSA-OAEP/RSA-OAEP-256/RSA1_5/A128GCM/A192GCM/A256GCM/A128KW/A192KW/A256KW/A128CBC/A192CBC/A256CBC/A128CBCPAD/A192CBCPAD/A256CBCPAD) (Required)
     *     value: Base64Uri (Required)
     *     iv: Base64Uri (Optional)
     *     aad: Base64Uri (Optional)
     *     tag: Base64Uri (Optional)
     * }
     * }
     * </pre>
     *
     * <p><strong>Response Body Schema</strong></p>
     *
     * <pre>
     * {@code
     * {
     *     kid: String (Optional)
     *     value: Base64Uri (Optional)
     *     iv: Base64Uri (Optional)
     *     tag: Base64Uri (Optional)
     *     aad: Base64Uri (Optional)
     * }
     * }
     * </pre>
     *
     * @param keyName The name of the key.
     * @param keyVersion The version of the key.
     * @param parameters The parameters for the key operation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the key operation result.
     */
    @Metadata(generated = true)
    public Response<KeyOperationResult> unwrapKeyWithResponse(String keyName, String keyVersion, BinaryData parameters,
        RequestOptions requestOptions) {
        return this.serviceClient.unwrapKeyWithResponse(keyName, keyVersion, parameters, requestOptions);
    }

    /**
     * Releases a key.
     *
     * The release key operation is applicable to all key types. The target key must be marked exportable. This
     * operation requires the keys/release permission.
     * <p><strong>Request Body Schema</strong></p>
     *
     * <pre>
     * {@code
     * {
     *     target: String (Required)
     *     nonce: String (Optional)
     *     enc: String(CKM_RSA_AES_KEY_WRAP/RSA_AES_KEY_WRAP_256/RSA_AES_KEY_WRAP_384) (Optional)
     * }
     * }
     * </pre>
     *
     * <p><strong>Response Body Schema</strong></p>
     *
     * <pre>
     * {@code
     * {
     *     value: String (Optional)
     * }
     * }
     * </pre>
     *
     * @param keyName The name of the key to get.
     * @param keyVersion Adding the version parameter retrieves a specific version of a key.
     * @param parameters The parameters for the key release operation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the release result, containing the released key.
     */
    @Metadata(generated = true)
    public Response<ReleaseKeyResult> releaseWithResponse(String keyName, String keyVersion, BinaryData parameters,
        RequestOptions requestOptions) {
        return this.serviceClient.releaseWithResponse(keyName, keyVersion, parameters, requestOptions);
    }

    /**
     * Lists the deleted keys in the specified vault.
     *
     * Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public part of a
     * deleted key. This operation includes deletion-specific information. The Get Deleted Keys operation is applicable
     * for vaults enabled for soft-delete. While the operation can be invoked on any vault, it will return an error if
     * invoked on a non soft-delete enabled vault. This operation requires the keys/list permission.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxresults</td><td>Integer</td><td>No</td><td>Maximum number of results to return in a page. If not
     * specified the service will return up to 25 results.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     *
     * <pre>
     * {@code
     * {
     *     value (Optional): [
     *          (Optional){
     *             kid: String (Optional)
     *             attributes (Optional): {
     *                 enabled: Boolean (Optional)
     *                 nbf: Long (Optional)
     *                 exp: Long (Optional)
     *                 created: Long (Optional)
     *                 updated: Long (Optional)
     *                 recoverableDays: Integer (Optional)
     *                 recoveryLevel: String(Purgeable/Recoverable+Purgeable/Recoverable/Recoverable+ProtectedSubscription/CustomizedRecoverable+Purgeable/CustomizedRecoverable/CustomizedRecoverable+ProtectedSubscription) (Optional)
     *                 exportable: Boolean (Optional)
     *                 hsmPlatform: String (Optional)
     *             }
     *             tags (Optional): {
     *                 String: String (Required)
     *             }
     *             managed: Boolean (Optional)
     *             recoveryId: String (Optional)
     *             scheduledPurgeDate: Long (Optional)
     *             deletedDate: Long (Optional)
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }
     * </pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return a list of keys that have been deleted in this vault.
     */
    @Metadata(generated = true)
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DeletedKeyItem> getDeletedKeys(RequestOptions requestOptions) {
        return this.serviceClient.getDeletedKeys(requestOptions);
    }

    /**
     * Gets the public part of a deleted key.
     *
     * The Get Deleted Key operation is applicable for soft-delete enabled vaults. While the operation can be invoked on
     * any vault, it will return an error if invoked on a non soft-delete enabled vault. This operation requires the
     * keys/get permission.
     * <p><strong>Response Body Schema</strong></p>
     *
     * <pre>
     * {@code
     * {
     *     key (Optional): {
     *         kid: String (Optional)
     *         kty: String(EC/EC-HSM/RSA/RSA-HSM/oct/oct-HSM) (Optional)
     *         key_ops (Optional): [
     *             String (Optional)
     *         ]
     *         n: Base64Uri (Optional)
     *         e: Base64Uri (Optional)
     *         d: Base64Uri (Optional)
     *         dp: Base64Uri (Optional)
     *         dq: Base64Uri (Optional)
     *         qi: Base64Uri (Optional)
     *         p: Base64Uri (Optional)
     *         q: Base64Uri (Optional)
     *         k: Base64Uri (Optional)
     *         key_hsm: Base64Uri (Optional)
     *         crv: String(P-256/P-384/P-521/P-256K) (Optional)
     *         x: Base64Uri (Optional)
     *         y: Base64Uri (Optional)
     *     }
     *     attributes (Optional): {
     *         enabled: Boolean (Optional)
     *         nbf: Long (Optional)
     *         exp: Long (Optional)
     *         created: Long (Optional)
     *         updated: Long (Optional)
     *         recoverableDays: Integer (Optional)
     *         recoveryLevel: String(Purgeable/Recoverable+Purgeable/Recoverable/Recoverable+ProtectedSubscription/CustomizedRecoverable+Purgeable/CustomizedRecoverable/CustomizedRecoverable+ProtectedSubscription) (Optional)
     *         exportable: Boolean (Optional)
     *         hsmPlatform: String (Optional)
     *     }
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     managed: Boolean (Optional)
     *     release_policy (Optional): {
     *         contentType: String (Optional)
     *         immutable: Boolean (Optional)
     *         data: Base64Uri (Optional)
     *     }
     *     recoveryId: String (Optional)
     *     scheduledPurgeDate: Long (Optional)
     *     deletedDate: Long (Optional)
     * }
     * }
     * </pre>
     *
     * @param keyName The name of the key.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the public part of a deleted key.
     *
     * The Get Deleted Key operation is applicable for soft-delete enabled vaults.
     */
    @Metadata(generated = true)
    public Response<DeletedKeyBundle> getDeletedKeyWithResponse(String keyName, RequestOptions requestOptions) {
        return this.serviceClient.getDeletedKeyWithResponse(keyName, requestOptions);
    }

    /**
     * Permanently deletes the specified key.
     *
     * The Purge Deleted Key operation is applicable for soft-delete enabled vaults. While the operation can be invoked
     * on any vault, it will return an error if invoked on a non soft-delete enabled vault. This operation requires the
     * keys/purge permission.
     *
     * @param keyName The name of the key.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<Void> purgeDeletedKeyWithResponse(String keyName, RequestOptions requestOptions) {
        return this.serviceClient.purgeDeletedKeyWithResponse(keyName, requestOptions);
    }

    /**
     * Recovers the deleted key to its latest version.
     *
     * The Recover Deleted Key operation is applicable for deleted keys in soft-delete enabled vaults. It recovers the
     * deleted key back to its latest version under /keys. An attempt to recover an non-deleted key will return an
     * error. Consider this the inverse of the delete operation on soft-delete enabled vaults. This operation requires
     * the keys/recover permission.
     * <p><strong>Response Body Schema</strong></p>
     *
     * <pre>
     * {@code
     * {
     *     key (Optional): {
     *         kid: String (Optional)
     *         kty: String(EC/EC-HSM/RSA/RSA-HSM/oct/oct-HSM) (Optional)
     *         key_ops (Optional): [
     *             String (Optional)
     *         ]
     *         n: Base64Uri (Optional)
     *         e: Base64Uri (Optional)
     *         d: Base64Uri (Optional)
     *         dp: Base64Uri (Optional)
     *         dq: Base64Uri (Optional)
     *         qi: Base64Uri (Optional)
     *         p: Base64Uri (Optional)
     *         q: Base64Uri (Optional)
     *         k: Base64Uri (Optional)
     *         key_hsm: Base64Uri (Optional)
     *         crv: String(P-256/P-384/P-521/P-256K) (Optional)
     *         x: Base64Uri (Optional)
     *         y: Base64Uri (Optional)
     *     }
     *     attributes (Optional): {
     *         enabled: Boolean (Optional)
     *         nbf: Long (Optional)
     *         exp: Long (Optional)
     *         created: Long (Optional)
     *         updated: Long (Optional)
     *         recoverableDays: Integer (Optional)
     *         recoveryLevel: String(Purgeable/Recoverable+Purgeable/Recoverable/Recoverable+ProtectedSubscription/CustomizedRecoverable+Purgeable/CustomizedRecoverable/CustomizedRecoverable+ProtectedSubscription) (Optional)
     *         exportable: Boolean (Optional)
     *         hsmPlatform: String (Optional)
     *     }
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     managed: Boolean (Optional)
     *     release_policy (Optional): {
     *         contentType: String (Optional)
     *         immutable: Boolean (Optional)
     *         data: Base64Uri (Optional)
     *     }
     * }
     * }
     * </pre>
     *
     * @param keyName The name of the deleted key.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return a KeyBundle consisting of a WebKey plus its attributes.
     */
    @Metadata(generated = true)
    public Response<KeyBundle> recoverDeletedKeyWithResponse(String keyName, RequestOptions requestOptions) {
        return this.serviceClient.recoverDeletedKeyWithResponse(keyName, requestOptions);
    }

    /**
     * Lists the policy for a key.
     *
     * The GetKeyRotationPolicy operation returns the specified key policy resources in the specified key vault. This
     * operation requires the keys/get permission.
     * <p><strong>Response Body Schema</strong></p>
     *
     * <pre>
     * {@code
     * {
     *     id: String (Optional)
     *     lifetimeActions (Optional): [
     *          (Optional){
     *             trigger (Optional): {
     *                 timeAfterCreate: String (Optional)
     *                 timeBeforeExpiry: String (Optional)
     *             }
     *             action (Optional): {
     *                 type: String(Rotate/Notify) (Optional)
     *             }
     *         }
     *     ]
     *     attributes (Optional): {
     *         expiryTime: String (Optional)
     *         created: Long (Optional)
     *         updated: Long (Optional)
     *     }
     * }
     * }
     * </pre>
     *
     * @param keyName The name of the key in a given key vault.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return management policy for a key.
     */
    @Metadata(generated = true)
    public Response<KeyRotationPolicy> getKeyRotationPolicyWithResponse(String keyName, RequestOptions requestOptions) {
        return this.serviceClient.getKeyRotationPolicyWithResponse(keyName, requestOptions);
    }

    /**
     * Updates the rotation policy for a key.
     *
     * Set specified members in the key policy. Leave others as undefined. This operation requires the keys/update
     * permission.
     * <p><strong>Request Body Schema</strong></p>
     *
     * <pre>
     * {@code
     * {
     *     id: String (Optional)
     *     lifetimeActions (Optional): [
     *          (Optional){
     *             trigger (Optional): {
     *                 timeAfterCreate: String (Optional)
     *                 timeBeforeExpiry: String (Optional)
     *             }
     *             action (Optional): {
     *                 type: String(Rotate/Notify) (Optional)
     *             }
     *         }
     *     ]
     *     attributes (Optional): {
     *         expiryTime: String (Optional)
     *         created: Long (Optional)
     *         updated: Long (Optional)
     *     }
     * }
     * }
     * </pre>
     *
     * <p><strong>Response Body Schema</strong></p>
     *
     * <pre>
     * {@code
     * {
     *     id: String (Optional)
     *     lifetimeActions (Optional): [
     *          (Optional){
     *             trigger (Optional): {
     *                 timeAfterCreate: String (Optional)
     *                 timeBeforeExpiry: String (Optional)
     *             }
     *             action (Optional): {
     *                 type: String(Rotate/Notify) (Optional)
     *             }
     *         }
     *     ]
     *     attributes (Optional): {
     *         expiryTime: String (Optional)
     *         created: Long (Optional)
     *         updated: Long (Optional)
     *     }
     * }
     * }
     * </pre>
     *
     * @param keyName The name of the key in the given vault.
     * @param keyRotationPolicy The policy for the key.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return management policy for a key.
     */
    @Metadata(generated = true)
    public Response<KeyRotationPolicy> updateKeyRotationPolicyWithResponse(String keyName, BinaryData keyRotationPolicy,
        RequestOptions requestOptions) {
        return this.serviceClient.updateKeyRotationPolicyWithResponse(keyName, keyRotationPolicy, requestOptions);
    }

    /**
     * Get the requested number of bytes containing random values.
     *
     * Get the requested number of bytes containing random values from a managed HSM.
     * <p><strong>Request Body Schema</strong></p>
     *
     * <pre>
     * {@code
     * {
     *     count: int (Required)
     * }
     * }
     * </pre>
     *
     * <p><strong>Response Body Schema</strong></p>
     *
     * <pre>
     * {@code
     * {
     *     value: Base64Uri (Required)
     * }
     * }
     * </pre>
     *
     * @param parameters The request object to get random bytes.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the requested number of bytes containing random values.
     *
     * Get the requested number of bytes containing random values from a managed HSM.
     */
    @Metadata(generated = true)
    public Response<RandomBytes> getRandomBytesWithResponse(BinaryData parameters, RequestOptions requestOptions) {
        return this.serviceClient.getRandomBytesWithResponse(parameters, requestOptions);
    }

    /**
     * Creates a new key, stores it, then returns key parameters and attributes to the client.
     *
     * The create key operation can be used to create any key type in Azure Key Vault. If the named key already exists,
     * Azure Key Vault creates a new version of the key. It requires the keys/create permission.
     *
     * @param keyName The name for the new key. The system will generate the version name for the new key. The value you
     * provide may be copied globally for the purpose of running the service. The value provided should not include
     * personally identifiable or sensitive information.
     * @param parameters The parameters to create a key.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a KeyBundle consisting of a WebKey plus its attributes.
     */
    @Metadata(generated = true)
    public KeyBundle createKey(String keyName, KeyCreateParameters parameters) {
        // Generated convenience method for createKeyWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createKeyWithResponse(keyName, BinaryData.fromObject(parameters), requestOptions).getValue();
    }

    /**
     * Creates a new key version, stores it, then returns key parameters, attributes and policy to the client.
     *
     * The operation will rotate the key based on the key policy. It requires the keys/rotate permission.
     *
     * @param keyName The name of key to be rotated. The system will generate a new version in the specified key.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a KeyBundle consisting of a WebKey plus its attributes.
     */
    @Metadata(generated = true)
    public KeyBundle rotateKey(String keyName) {
        // Generated convenience method for rotateKeyWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return rotateKeyWithResponse(keyName, requestOptions).getValue();
    }

    /**
     * Imports an externally created key, stores it, and returns key parameters and attributes to the client.
     *
     * The import key operation may be used to import any key type into an Azure Key Vault. If the named key already
     * exists, Azure Key Vault creates a new version of the key. This operation requires the keys/import permission.
     *
     * @param keyName Name for the imported key. The value you provide may be copied globally for the purpose of running
     * the service. The value provided should not include personally identifiable or sensitive information.
     * @param parameters The parameters to import a key.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a KeyBundle consisting of a WebKey plus its attributes.
     */
    @Metadata(generated = true)
    public KeyBundle importKey(String keyName, KeyImportParameters parameters) {
        // Generated convenience method for importKeyWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return importKeyWithResponse(keyName, BinaryData.fromObject(parameters), requestOptions).getValue();
    }

    /**
     * Deletes a key of any type from storage in Azure Key Vault.
     *
     * The delete key operation cannot be used to remove individual versions of a key. This operation removes the
     * cryptographic material associated with the key, which means the key is not usable for Sign/Verify, Wrap/Unwrap or
     * Encrypt/Decrypt operations. This operation requires the keys/delete permission.
     *
     * @param keyName The name of the key to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a DeletedKeyBundle consisting of a WebKey plus its Attributes and deletion info.
     */
    @Metadata(generated = true)
    public DeletedKeyBundle deleteKey(String keyName) {
        // Generated convenience method for deleteKeyWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return deleteKeyWithResponse(keyName, requestOptions).getValue();
    }

    /**
     * The update key operation changes specified attributes of a stored key and can be applied to any key type and key
     * version stored in Azure Key Vault.
     *
     * In order to perform this operation, the key must already exist in the Key Vault. Note: The cryptographic material
     * of a key itself cannot be changed. This operation requires the keys/update permission.
     *
     * @param keyName The name of key to update.
     * @param keyVersion The version of the key to update.
     * @param parameters The parameters of the key to update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a KeyBundle consisting of a WebKey plus its attributes.
     */
    @Metadata(generated = true)
    public KeyBundle updateKey(String keyName, String keyVersion, KeyUpdateParameters parameters) {
        // Generated convenience method for updateKeyWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return updateKeyWithResponse(keyName, keyVersion, BinaryData.fromObject(parameters), requestOptions).getValue();
    }

    /**
     * Gets the public part of a stored key.
     *
     * The get key operation is applicable to all key types. If the requested key is symmetric, then no key material is
     * released in the response. This operation requires the keys/get permission.
     *
     * @param keyName The name of the key to get.
     * @param keyVersion Adding the version parameter retrieves a specific version of a key. This URI fragment is
     * optional. If not specified, the latest version of the key is returned.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the public part of a stored key.
     *
     * The get key operation is applicable to all key types.
     */
    @Metadata(generated = true)
    public KeyBundle getKey(String keyName, String keyVersion) {
        // Generated convenience method for getKeyWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getKeyWithResponse(keyName, keyVersion, requestOptions).getValue();
    }

    /**
     * Retrieves a list of individual key versions with the same key name.
     *
     * The full key identifier, attributes, and tags are provided in the response. This operation requires the keys/list
     * permission.
     *
     * @param keyName The name of the key.
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to
     * 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the key list result.
     */
    @Metadata(generated = true)
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<KeyItem> getKeyVersions(String keyName, Integer maxresults) {
        // Generated convenience method for getKeyVersions
        RequestOptions requestOptions = new RequestOptions();
        if (maxresults != null) {
            requestOptions.addQueryParam("maxresults", String.valueOf(maxresults));
        }
        return serviceClient.getKeyVersions(keyName, requestOptions);
    }

    /**
     * Retrieves a list of individual key versions with the same key name.
     *
     * The full key identifier, attributes, and tags are provided in the response. This operation requires the keys/list
     * permission.
     *
     * @param keyName The name of the key.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the key list result.
     */
    @Metadata(generated = true)
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<KeyItem> getKeyVersions(String keyName) {
        // Generated convenience method for getKeyVersions
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.getKeyVersions(keyName, requestOptions);
    }

    /**
     * List keys in the specified vault.
     *
     * Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public part of a stored
     * key. The LIST operation is applicable to all key types, however only the base key identifier, attributes, and
     * tags are provided in the response. Individual versions of a key are not listed in the response. This operation
     * requires the keys/list permission.
     *
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to
     * 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the key list result.
     */
    @Metadata(generated = true)
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<KeyItem> getKeys(Integer maxresults) {
        // Generated convenience method for getKeys
        RequestOptions requestOptions = new RequestOptions();
        if (maxresults != null) {
            requestOptions.addQueryParam("maxresults", String.valueOf(maxresults));
        }
        return serviceClient.getKeys(requestOptions);
    }

    /**
     * List keys in the specified vault.
     *
     * Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public part of a stored
     * key. The LIST operation is applicable to all key types, however only the base key identifier, attributes, and
     * tags are provided in the response. Individual versions of a key are not listed in the response. This operation
     * requires the keys/list permission.
     *
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the key list result.
     */
    @Metadata(generated = true)
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<KeyItem> getKeys() {
        // Generated convenience method for getKeys
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.getKeys(requestOptions);
    }

    /**
     * Requests that a backup of the specified key be downloaded to the client.
     *
     * The Key Backup operation exports a key from Azure Key Vault in a protected form. Note that this operation does
     * NOT return key material in a form that can be used outside the Azure Key Vault system, the returned key material
     * is either protected to a Azure Key Vault HSM or to Azure Key Vault itself. The intent of this operation is to
     * allow a client to GENERATE a key in one Azure Key Vault instance, BACKUP the key, and then RESTORE it into
     * another Azure Key Vault instance. The BACKUP operation may be used to export, in protected form, any key type
     * from Azure Key Vault. Individual versions of a key cannot be backed up. BACKUP / RESTORE can be performed within
     * geographical boundaries only; meaning that a BACKUP from one geographical area cannot be restored to another
     * geographical area. For example, a backup from the US geographical area cannot be restored in an EU geographical
     * area. This operation requires the key/backup permission.
     *
     * @param keyName The name of the key.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the backup key result, containing the backup blob.
     */
    @Metadata(generated = true)
    public BackupKeyResult backupKey(String keyName) {
        // Generated convenience method for backupKeyWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return backupKeyWithResponse(keyName, requestOptions).getValue();
    }

    /**
     * Restores a backed up key to a vault.
     *
     * Imports a previously backed up key into Azure Key Vault, restoring the key, its key identifier, attributes and
     * access control policies. The RESTORE operation may be used to import a previously backed up key. Individual
     * versions of a key cannot be restored. The key is restored in its entirety with the same key name as it had when
     * it was backed up. If the key name is not available in the target Key Vault, the RESTORE operation will be
     * rejected. While the key name is retained during restore, the final key identifier will change if the key is
     * restored to a different vault. Restore will restore all versions and preserve version identifiers. The RESTORE
     * operation is subject to security constraints: The target Key Vault must be owned by the same Microsoft Azure
     * Subscription as the source Key Vault The user must have RESTORE permission in the target Key Vault. This
     * operation requires the keys/restore permission.
     *
     * @param parameters The parameters to restore the key.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a KeyBundle consisting of a WebKey plus its attributes.
     */
    @Metadata(generated = true)
    public KeyBundle restoreKey(KeyRestoreParameters parameters) {
        // Generated convenience method for restoreKeyWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return restoreKeyWithResponse(BinaryData.fromObject(parameters), requestOptions).getValue();
    }

    /**
     * Encrypts an arbitrary sequence of bytes using an encryption key that is stored in a key vault.
     *
     * The ENCRYPT operation encrypts an arbitrary sequence of bytes using an encryption key that is stored in Azure Key
     * Vault. Note that the ENCRYPT operation only supports a single block of data, the size of which is dependent on
     * the target key and the encryption algorithm to be used. The ENCRYPT operation is only strictly necessary for
     * symmetric keys stored in Azure Key Vault since protection with an asymmetric key can be performed using public
     * portion of the key. This operation is supported for asymmetric keys as a convenience for callers that have a
     * key-reference but do not have access to the public key material. This operation requires the keys/encrypt
     * permission.
     *
     * @param keyName The name of the key.
     * @param keyVersion The version of the key.
     * @param parameters The parameters for the encryption operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the key operation result.
     */
    @Metadata(generated = true)
    public KeyOperationResult encrypt(String keyName, String keyVersion, KeyOperationsParameters parameters) {
        // Generated convenience method for encryptWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return encryptWithResponse(keyName, keyVersion, BinaryData.fromObject(parameters), requestOptions).getValue();
    }

    /**
     * Decrypts a single block of encrypted data.
     *
     * The DECRYPT operation decrypts a well-formed block of ciphertext using the target encryption key and specified
     * algorithm. This operation is the reverse of the ENCRYPT operation; only a single block of data may be decrypted,
     * the size of this block is dependent on the target key and the algorithm to be used. The DECRYPT operation applies
     * to asymmetric and symmetric keys stored in Azure Key Vault since it uses the private portion of the key. This
     * operation requires the keys/decrypt permission. Microsoft recommends not to use CBC algorithms for decryption
     * without first ensuring the integrity of the ciphertext using an HMAC, for example. See
     * https://learn.microsoft.com/dotnet/standard/security/vulnerabilities-cbc-mode for more information.
     *
     * @param keyName The name of the key.
     * @param keyVersion The version of the key.
     * @param parameters The parameters for the decryption operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the key operation result.
     */
    @Metadata(generated = true)
    public KeyOperationResult decrypt(String keyName, String keyVersion, KeyOperationsParameters parameters) {
        // Generated convenience method for decryptWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return decryptWithResponse(keyName, keyVersion, BinaryData.fromObject(parameters), requestOptions).getValue();
    }

    /**
     * Creates a signature from a digest using the specified key.
     *
     * The SIGN operation is applicable to asymmetric and symmetric keys stored in Azure Key Vault since this operation
     * uses the private portion of the key. This operation requires the keys/sign permission.
     *
     * @param keyName The name of the key.
     * @param keyVersion The version of the key.
     * @param parameters The parameters for the signing operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the key operation result.
     */
    @Metadata(generated = true)
    public KeyOperationResult sign(String keyName, String keyVersion, KeySignParameters parameters) {
        // Generated convenience method for signWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return signWithResponse(keyName, keyVersion, BinaryData.fromObject(parameters), requestOptions).getValue();
    }

    /**
     * Verifies a signature using a specified key.
     *
     * The VERIFY operation is applicable to symmetric keys stored in Azure Key Vault. VERIFY is not strictly necessary
     * for asymmetric keys stored in Azure Key Vault since signature verification can be performed using the public
     * portion of the key but this operation is supported as a convenience for callers that only have a key-reference
     * and not the public portion of the key. This operation requires the keys/verify permission.
     *
     * @param keyName The name of the key.
     * @param keyVersion The version of the key.
     * @param parameters The parameters for verify operations.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the key verify result.
     */
    @Metadata(generated = true)
    public KeyVerifyResult verify(String keyName, String keyVersion, KeyVerifyParameters parameters) {
        // Generated convenience method for verifyWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return verifyWithResponse(keyName, keyVersion, BinaryData.fromObject(parameters), requestOptions).getValue();
    }

    /**
     * Wraps a symmetric key using a specified key.
     *
     * The WRAP operation supports encryption of a symmetric key using a key encryption key that has previously been
     * stored in an Azure Key Vault. The WRAP operation is only strictly necessary for symmetric keys stored in Azure
     * Key Vault since protection with an asymmetric key can be performed using the public portion of the key. This
     * operation is supported for asymmetric keys as a convenience for callers that have a key-reference but do not have
     * access to the public key material. This operation requires the keys/wrapKey permission.
     *
     * @param keyName The name of the key.
     * @param keyVersion The version of the key.
     * @param parameters The parameters for wrap operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the key operation result.
     */
    @Metadata(generated = true)
    public KeyOperationResult wrapKey(String keyName, String keyVersion, KeyOperationsParameters parameters) {
        // Generated convenience method for wrapKeyWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return wrapKeyWithResponse(keyName, keyVersion, BinaryData.fromObject(parameters), requestOptions).getValue();
    }

    /**
     * Unwraps a symmetric key using the specified key that was initially used for wrapping that key.
     *
     * The UNWRAP operation supports decryption of a symmetric key using the target key encryption key. This operation
     * is the reverse of the WRAP operation. The UNWRAP operation applies to asymmetric and symmetric keys stored in
     * Azure Key Vault since it uses the private portion of the key. This operation requires the keys/unwrapKey
     * permission.
     *
     * @param keyName The name of the key.
     * @param keyVersion The version of the key.
     * @param parameters The parameters for the key operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the key operation result.
     */
    @Metadata(generated = true)
    public KeyOperationResult unwrapKey(String keyName, String keyVersion, KeyOperationsParameters parameters) {
        // Generated convenience method for unwrapKeyWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return unwrapKeyWithResponse(keyName, keyVersion, BinaryData.fromObject(parameters), requestOptions).getValue();
    }

    /**
     * Releases a key.
     *
     * The release key operation is applicable to all key types. The target key must be marked exportable. This
     * operation requires the keys/release permission.
     *
     * @param keyName The name of the key to get.
     * @param keyVersion Adding the version parameter retrieves a specific version of a key.
     * @param parameters The parameters for the key release operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the release result, containing the released key.
     */
    @Metadata(generated = true)
    public ReleaseKeyResult release(String keyName, String keyVersion, KeyReleaseParameters parameters) {
        // Generated convenience method for releaseWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return releaseWithResponse(keyName, keyVersion, BinaryData.fromObject(parameters), requestOptions).getValue();
    }

    /**
     * Lists the deleted keys in the specified vault.
     *
     * Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public part of a
     * deleted key. This operation includes deletion-specific information. The Get Deleted Keys operation is applicable
     * for vaults enabled for soft-delete. While the operation can be invoked on any vault, it will return an error if
     * invoked on a non soft-delete enabled vault. This operation requires the keys/list permission.
     *
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to
     * 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of keys that have been deleted in this vault.
     */
    @Metadata(generated = true)
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DeletedKeyItem> getDeletedKeys(Integer maxresults) {
        // Generated convenience method for getDeletedKeys
        RequestOptions requestOptions = new RequestOptions();
        if (maxresults != null) {
            requestOptions.addQueryParam("maxresults", String.valueOf(maxresults));
        }
        return serviceClient.getDeletedKeys(requestOptions);
    }

    /**
     * Lists the deleted keys in the specified vault.
     *
     * Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public part of a
     * deleted key. This operation includes deletion-specific information. The Get Deleted Keys operation is applicable
     * for vaults enabled for soft-delete. While the operation can be invoked on any vault, it will return an error if
     * invoked on a non soft-delete enabled vault. This operation requires the keys/list permission.
     *
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of keys that have been deleted in this vault.
     */
    @Metadata(generated = true)
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DeletedKeyItem> getDeletedKeys() {
        // Generated convenience method for getDeletedKeys
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.getDeletedKeys(requestOptions);
    }

    /**
     * Gets the public part of a deleted key.
     *
     * The Get Deleted Key operation is applicable for soft-delete enabled vaults. While the operation can be invoked on
     * any vault, it will return an error if invoked on a non soft-delete enabled vault. This operation requires the
     * keys/get permission.
     *
     * @param keyName The name of the key.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the public part of a deleted key.
     *
     * The Get Deleted Key operation is applicable for soft-delete enabled vaults.
     */
    @Metadata(generated = true)
    public DeletedKeyBundle getDeletedKey(String keyName) {
        // Generated convenience method for getDeletedKeyWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getDeletedKeyWithResponse(keyName, requestOptions).getValue();
    }

    /**
     * Permanently deletes the specified key.
     *
     * The Purge Deleted Key operation is applicable for soft-delete enabled vaults. While the operation can be invoked
     * on any vault, it will return an error if invoked on a non soft-delete enabled vault. This operation requires the
     * keys/purge permission.
     *
     * @param keyName The name of the key.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Metadata(generated = true)
    public void purgeDeletedKey(String keyName) {
        // Generated convenience method for purgeDeletedKeyWithResponse
        RequestOptions requestOptions = new RequestOptions();
        purgeDeletedKeyWithResponse(keyName, requestOptions).getValue();
    }

    /**
     * Recovers the deleted key to its latest version.
     *
     * The Recover Deleted Key operation is applicable for deleted keys in soft-delete enabled vaults. It recovers the
     * deleted key back to its latest version under /keys. An attempt to recover an non-deleted key will return an
     * error. Consider this the inverse of the delete operation on soft-delete enabled vaults. This operation requires
     * the keys/recover permission.
     *
     * @param keyName The name of the deleted key.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a KeyBundle consisting of a WebKey plus its attributes.
     */
    @Metadata(generated = true)
    public KeyBundle recoverDeletedKey(String keyName) {
        // Generated convenience method for recoverDeletedKeyWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return recoverDeletedKeyWithResponse(keyName, requestOptions).getValue();
    }

    /**
     * Lists the policy for a key.
     *
     * The GetKeyRotationPolicy operation returns the specified key policy resources in the specified key vault. This
     * operation requires the keys/get permission.
     *
     * @param keyName The name of the key in a given key vault.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return management policy for a key.
     */
    @Metadata(generated = true)
    public KeyRotationPolicy getKeyRotationPolicy(String keyName) {
        // Generated convenience method for getKeyRotationPolicyWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getKeyRotationPolicyWithResponse(keyName, requestOptions).getValue();
    }

    /**
     * Updates the rotation policy for a key.
     *
     * Set specified members in the key policy. Leave others as undefined. This operation requires the keys/update
     * permission.
     *
     * @param keyName The name of the key in the given vault.
     * @param keyRotationPolicy The policy for the key.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return management policy for a key.
     */
    @Metadata(generated = true)
    public KeyRotationPolicy updateKeyRotationPolicy(String keyName, KeyRotationPolicy keyRotationPolicy) {
        // Generated convenience method for updateKeyRotationPolicyWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return updateKeyRotationPolicyWithResponse(keyName, BinaryData.fromObject(keyRotationPolicy), requestOptions)
            .getValue();
    }

    /**
     * Get the requested number of bytes containing random values.
     *
     * Get the requested number of bytes containing random values from a managed HSM.
     *
     * @param parameters The request object to get random bytes.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the requested number of bytes containing random values.
     *
     * Get the requested number of bytes containing random values from a managed HSM.
     */
    @Metadata(generated = true)
    public RandomBytes getRandomBytes(GetRandomBytesRequest parameters) {
        // Generated convenience method for getRandomBytesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getRandomBytesWithResponse(BinaryData.fromObject(parameters), requestOptions).getValue();
    }
}
