// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.v2.security.keyvault.certificates;

import com.azure.v2.security.keyvault.certificates.implementation.CertificateClientImpl;
import com.azure.v2.security.keyvault.certificates.implementation.models.BackupCertificateResult;
import com.azure.v2.security.keyvault.certificates.implementation.models.CertificateBundle;
import com.azure.v2.security.keyvault.certificates.implementation.models.CertificateCreateParameters;
import com.azure.v2.security.keyvault.certificates.implementation.models.CertificateImportParameters;
import com.azure.v2.security.keyvault.certificates.implementation.models.CertificateIssuerItem;
import com.azure.v2.security.keyvault.certificates.implementation.models.CertificateIssuerSetParameters;
import com.azure.v2.security.keyvault.certificates.implementation.models.CertificateIssuerUpdateParameters;
import com.azure.v2.security.keyvault.certificates.implementation.models.CertificateItem;
import com.azure.v2.security.keyvault.certificates.implementation.models.CertificateMergeParameters;
import com.azure.v2.security.keyvault.certificates.implementation.models.CertificateOperation;
import com.azure.v2.security.keyvault.certificates.implementation.models.CertificateOperationUpdateParameter;
import com.azure.v2.security.keyvault.certificates.implementation.models.CertificatePolicy;
import com.azure.v2.security.keyvault.certificates.implementation.models.CertificateRestoreParameters;
import com.azure.v2.security.keyvault.certificates.implementation.models.CertificateUpdateParameters;
import com.azure.v2.security.keyvault.certificates.implementation.models.Contacts;
import com.azure.v2.security.keyvault.certificates.implementation.models.DeletedCertificateBundle;
import com.azure.v2.security.keyvault.certificates.implementation.models.DeletedCertificateItem;
import com.azure.v2.security.keyvault.certificates.implementation.models.IssuerBundle;
import com.azure.v2.security.keyvault.certificates.implementation.models.KeyVaultErrorException;
import io.clientcore.core.annotations.Metadata;
import io.clientcore.core.annotations.MetadataProperties;
import io.clientcore.core.annotations.ReturnType;
import io.clientcore.core.annotations.ServiceClient;
import io.clientcore.core.annotations.ServiceMethod;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.http.paging.PagedIterable;

/**
 * Initializes a new instance of the synchronous CertificateClient type.
 */
@ServiceClient(builder = CertificateClientBuilder.class)
public final class CertificateClient {
    @Metadata(properties = { MetadataProperties.GENERATED })
    private final CertificateClientImpl serviceClient;

    /**
     * Initializes an instance of CertificateClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    CertificateClient(CertificateClientImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * List certificates in a specified key vault
     * 
     * The GetCertificates operation returns the set of certificates resources in the specified key vault. This
     * operation requires the certificates/list permission.
     * 
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to
     * 25 results.
     * @param includePending Specifies whether to include certificates which are not completely provisioned.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the certificate list result.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<CertificateItem> getCertificates(Integer maxresults, Boolean includePending) {
        return this.serviceClient.getCertificates(maxresults, includePending);
    }

    /**
     * List certificates in a specified key vault
     * 
     * The GetCertificates operation returns the set of certificates resources in the specified key vault. This
     * operation requires the certificates/list permission.
     * 
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the certificate list result.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<CertificateItem> getCertificates() {
        return this.serviceClient.getCertificates();
    }

    /**
     * List certificates in a specified key vault
     * 
     * The GetCertificates operation returns the set of certificates resources in the specified key vault. This
     * operation requires the certificates/list permission.
     * 
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to
     * 25 results.
     * @param includePending Specifies whether to include certificates which are not completely provisioned.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the certificate list result.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<CertificateItem> getCertificates(Integer maxresults, Boolean includePending,
        RequestOptions requestOptions) {
        return this.serviceClient.getCertificates(maxresults, includePending, requestOptions);
    }

    /**
     * Deletes a certificate from a specified key vault.
     * 
     * Deletes all versions of a certificate object along with its associated policy. Delete certificate cannot be used
     * to remove individual versions of a certificate object. This operation requires the certificates/delete
     * permission.
     * 
     * @param certificateName The name of the certificate.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Deleted Certificate consisting of its previous id, attributes and its tags, as well as information on
     * when it will be purged.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<DeletedCertificateBundle> deleteCertificateWithResponse(String certificateName,
        RequestOptions requestOptions) {
        return this.serviceClient.deleteCertificateWithResponse(certificateName, requestOptions);
    }

    /**
     * Deletes a certificate from a specified key vault.
     * 
     * Deletes all versions of a certificate object along with its associated policy. Delete certificate cannot be used
     * to remove individual versions of a certificate object. This operation requires the certificates/delete
     * permission.
     * 
     * @param certificateName The name of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Deleted Certificate consisting of its previous id, attributes and its tags, as well as information on
     * when it will be purged.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DeletedCertificateBundle deleteCertificate(String certificateName) {
        return this.serviceClient.deleteCertificate(certificateName);
    }

    /**
     * Sets the certificate contacts for the specified key vault.
     * 
     * Sets the certificate contacts for the specified key vault. This operation requires the
     * certificates/managecontacts permission.
     * 
     * @param contacts The contacts for the key vault certificate.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the contacts for the vault certificates.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Contacts> setCertificateContactsWithResponse(Contacts contacts, RequestOptions requestOptions) {
        return this.serviceClient.setCertificateContactsWithResponse(contacts, requestOptions);
    }

    /**
     * Sets the certificate contacts for the specified key vault.
     * 
     * Sets the certificate contacts for the specified key vault. This operation requires the
     * certificates/managecontacts permission.
     * 
     * @param contacts The contacts for the key vault certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the contacts for the vault certificates.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Contacts setCertificateContacts(Contacts contacts) {
        return this.serviceClient.setCertificateContacts(contacts);
    }

    /**
     * Lists the certificate contacts for a specified key vault.
     * 
     * The GetCertificateContacts operation returns the set of certificate contact resources in the specified key vault.
     * This operation requires the certificates/managecontacts permission.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the contacts for the vault certificates.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Contacts> getCertificateContactsWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.getCertificateContactsWithResponse(requestOptions);
    }

    /**
     * Lists the certificate contacts for a specified key vault.
     * 
     * The GetCertificateContacts operation returns the set of certificate contact resources in the specified key vault.
     * This operation requires the certificates/managecontacts permission.
     * 
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the contacts for the vault certificates.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Contacts getCertificateContacts() {
        return this.serviceClient.getCertificateContacts();
    }

    /**
     * Deletes the certificate contacts for a specified key vault.
     * 
     * Deletes the certificate contacts for a specified key vault certificate. This operation requires the
     * certificates/managecontacts permission.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the contacts for the vault certificates.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Contacts> deleteCertificateContactsWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.deleteCertificateContactsWithResponse(requestOptions);
    }

    /**
     * Deletes the certificate contacts for a specified key vault.
     * 
     * Deletes the certificate contacts for a specified key vault certificate. This operation requires the
     * certificates/managecontacts permission.
     * 
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the contacts for the vault certificates.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Contacts deleteCertificateContacts() {
        return this.serviceClient.deleteCertificateContacts();
    }

    /**
     * List certificate issuers for a specified key vault.
     * 
     * The GetCertificateIssuers operation returns the set of certificate issuer resources in the specified key vault.
     * This operation requires the certificates/manageissuers/getissuers permission.
     * 
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to
     * 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the certificate issuer list result.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<CertificateIssuerItem> getCertificateIssuers(Integer maxresults) {
        return this.serviceClient.getCertificateIssuers(maxresults);
    }

    /**
     * List certificate issuers for a specified key vault.
     * 
     * The GetCertificateIssuers operation returns the set of certificate issuer resources in the specified key vault.
     * This operation requires the certificates/manageissuers/getissuers permission.
     * 
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the certificate issuer list result.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<CertificateIssuerItem> getCertificateIssuers() {
        return this.serviceClient.getCertificateIssuers();
    }

    /**
     * List certificate issuers for a specified key vault.
     * 
     * The GetCertificateIssuers operation returns the set of certificate issuer resources in the specified key vault.
     * This operation requires the certificates/manageissuers/getissuers permission.
     * 
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to
     * 25 results.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the certificate issuer list result.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<CertificateIssuerItem> getCertificateIssuers(Integer maxresults,
        RequestOptions requestOptions) {
        return this.serviceClient.getCertificateIssuers(maxresults, requestOptions);
    }

    /**
     * Sets the specified certificate issuer.
     * 
     * The SetCertificateIssuer operation adds or updates the specified certificate issuer. This operation requires the
     * certificates/setissuers permission.
     * 
     * @param issuerName The name of the issuer. The value you provide may be copied globally for the purpose of running
     * the service. The value provided should not include personally identifiable or sensitive information.
     * @param parameter Certificate issuer set parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the issuer for Key Vault certificate.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<IssuerBundle> setCertificateIssuerWithResponse(String issuerName,
        CertificateIssuerSetParameters parameter, RequestOptions requestOptions) {
        return this.serviceClient.setCertificateIssuerWithResponse(issuerName, parameter, requestOptions);
    }

    /**
     * Sets the specified certificate issuer.
     * 
     * The SetCertificateIssuer operation adds or updates the specified certificate issuer. This operation requires the
     * certificates/setissuers permission.
     * 
     * @param issuerName The name of the issuer. The value you provide may be copied globally for the purpose of running
     * the service. The value provided should not include personally identifiable or sensitive information.
     * @param parameter Certificate issuer set parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the issuer for Key Vault certificate.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public IssuerBundle setCertificateIssuer(String issuerName, CertificateIssuerSetParameters parameter) {
        return this.serviceClient.setCertificateIssuer(issuerName, parameter);
    }

    /**
     * Updates the specified certificate issuer.
     * 
     * The UpdateCertificateIssuer operation performs an update on the specified certificate issuer entity. This
     * operation requires the certificates/setissuers permission.
     * 
     * @param issuerName The name of the issuer.
     * @param parameter Certificate issuer update parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the issuer for Key Vault certificate.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<IssuerBundle> updateCertificateIssuerWithResponse(String issuerName,
        CertificateIssuerUpdateParameters parameter, RequestOptions requestOptions) {
        return this.serviceClient.updateCertificateIssuerWithResponse(issuerName, parameter, requestOptions);
    }

    /**
     * Updates the specified certificate issuer.
     * 
     * The UpdateCertificateIssuer operation performs an update on the specified certificate issuer entity. This
     * operation requires the certificates/setissuers permission.
     * 
     * @param issuerName The name of the issuer.
     * @param parameter Certificate issuer update parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the issuer for Key Vault certificate.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public IssuerBundle updateCertificateIssuer(String issuerName, CertificateIssuerUpdateParameters parameter) {
        return this.serviceClient.updateCertificateIssuer(issuerName, parameter);
    }

    /**
     * Lists the specified certificate issuer.
     * 
     * The GetCertificateIssuer operation returns the specified certificate issuer resources in the specified key vault.
     * This operation requires the certificates/manageissuers/getissuers permission.
     * 
     * @param issuerName The name of the issuer.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the issuer for Key Vault certificate.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<IssuerBundle> getCertificateIssuerWithResponse(String issuerName, RequestOptions requestOptions) {
        return this.serviceClient.getCertificateIssuerWithResponse(issuerName, requestOptions);
    }

    /**
     * Lists the specified certificate issuer.
     * 
     * The GetCertificateIssuer operation returns the specified certificate issuer resources in the specified key vault.
     * This operation requires the certificates/manageissuers/getissuers permission.
     * 
     * @param issuerName The name of the issuer.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the issuer for Key Vault certificate.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public IssuerBundle getCertificateIssuer(String issuerName) {
        return this.serviceClient.getCertificateIssuer(issuerName);
    }

    /**
     * Deletes the specified certificate issuer.
     * 
     * The DeleteCertificateIssuer operation permanently removes the specified certificate issuer from the vault. This
     * operation requires the certificates/manageissuers/deleteissuers permission.
     * 
     * @param issuerName The name of the issuer.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the issuer for Key Vault certificate.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<IssuerBundle> deleteCertificateIssuerWithResponse(String issuerName,
        RequestOptions requestOptions) {
        return this.serviceClient.deleteCertificateIssuerWithResponse(issuerName, requestOptions);
    }

    /**
     * Deletes the specified certificate issuer.
     * 
     * The DeleteCertificateIssuer operation permanently removes the specified certificate issuer from the vault. This
     * operation requires the certificates/manageissuers/deleteissuers permission.
     * 
     * @param issuerName The name of the issuer.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the issuer for Key Vault certificate.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public IssuerBundle deleteCertificateIssuer(String issuerName) {
        return this.serviceClient.deleteCertificateIssuer(issuerName);
    }

    /**
     * Creates a new certificate.
     * 
     * If this is the first version, the certificate resource is created. This operation requires the
     * certificates/create permission.
     * 
     * @param certificateName The name of the certificate. The value you provide may be copied globally for the purpose
     * of running the service. The value provided should not include personally identifiable or sensitive information.
     * @param parameters The parameters to create a certificate.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a certificate operation is returned in case of asynchronous requests.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<CertificateOperation> createCertificateWithResponse(String certificateName,
        CertificateCreateParameters parameters, RequestOptions requestOptions) {
        return this.serviceClient.createCertificateWithResponse(certificateName, parameters, requestOptions);
    }

    /**
     * Creates a new certificate.
     * 
     * If this is the first version, the certificate resource is created. This operation requires the
     * certificates/create permission.
     * 
     * @param certificateName The name of the certificate. The value you provide may be copied globally for the purpose
     * of running the service. The value provided should not include personally identifiable or sensitive information.
     * @param parameters The parameters to create a certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a certificate operation is returned in case of asynchronous requests.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CertificateOperation createCertificate(String certificateName, CertificateCreateParameters parameters) {
        return this.serviceClient.createCertificate(certificateName, parameters);
    }

    /**
     * Imports a certificate into a specified key vault.
     * 
     * Imports an existing valid certificate, containing a private key, into Azure Key Vault. This operation requires
     * the certificates/import permission. The certificate to be imported can be in either PFX or PEM format. If the
     * certificate is in PEM format the PEM file must contain the key as well as x509 certificates. Key Vault will only
     * accept a key in PKCS#8 format.
     * 
     * @param certificateName The name of the certificate. The value you provide may be copied globally for the purpose
     * of running the service. The value provided should not include personally identifiable or sensitive information.
     * @param parameters The parameters to import the certificate.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a certificate bundle consists of a certificate (X509) plus its attributes.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<CertificateBundle> importCertificateWithResponse(String certificateName,
        CertificateImportParameters parameters, RequestOptions requestOptions) {
        return this.serviceClient.importCertificateWithResponse(certificateName, parameters, requestOptions);
    }

    /**
     * Imports a certificate into a specified key vault.
     * 
     * Imports an existing valid certificate, containing a private key, into Azure Key Vault. This operation requires
     * the certificates/import permission. The certificate to be imported can be in either PFX or PEM format. If the
     * certificate is in PEM format the PEM file must contain the key as well as x509 certificates. Key Vault will only
     * accept a key in PKCS#8 format.
     * 
     * @param certificateName The name of the certificate. The value you provide may be copied globally for the purpose
     * of running the service. The value provided should not include personally identifiable or sensitive information.
     * @param parameters The parameters to import the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a certificate bundle consists of a certificate (X509) plus its attributes.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CertificateBundle importCertificate(String certificateName, CertificateImportParameters parameters) {
        return this.serviceClient.importCertificate(certificateName, parameters);
    }

    /**
     * List the versions of a certificate.
     * 
     * The GetCertificateVersions operation returns the versions of a certificate in the specified key vault. This
     * operation requires the certificates/list permission.
     * 
     * @param certificateName The name of the certificate.
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to
     * 25 results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the certificate list result.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<CertificateItem> getCertificateVersions(String certificateName, Integer maxresults) {
        return this.serviceClient.getCertificateVersions(certificateName, maxresults);
    }

    /**
     * List the versions of a certificate.
     * 
     * The GetCertificateVersions operation returns the versions of a certificate in the specified key vault. This
     * operation requires the certificates/list permission.
     * 
     * @param certificateName The name of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the certificate list result.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<CertificateItem> getCertificateVersions(String certificateName) {
        return this.serviceClient.getCertificateVersions(certificateName);
    }

    /**
     * List the versions of a certificate.
     * 
     * The GetCertificateVersions operation returns the versions of a certificate in the specified key vault. This
     * operation requires the certificates/list permission.
     * 
     * @param certificateName The name of the certificate.
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to
     * 25 results.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the certificate list result.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<CertificateItem> getCertificateVersions(String certificateName, Integer maxresults,
        RequestOptions requestOptions) {
        return this.serviceClient.getCertificateVersions(certificateName, maxresults, requestOptions);
    }

    /**
     * Lists the policy for a certificate.
     * 
     * The GetCertificatePolicy operation returns the specified certificate policy resources in the specified key vault.
     * This operation requires the certificates/get permission.
     * 
     * @param certificateName The name of the certificate in a given key vault.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return management policy for a certificate.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<CertificatePolicy> getCertificatePolicyWithResponse(String certificateName,
        RequestOptions requestOptions) {
        return this.serviceClient.getCertificatePolicyWithResponse(certificateName, requestOptions);
    }

    /**
     * Lists the policy for a certificate.
     * 
     * The GetCertificatePolicy operation returns the specified certificate policy resources in the specified key vault.
     * This operation requires the certificates/get permission.
     * 
     * @param certificateName The name of the certificate in a given key vault.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return management policy for a certificate.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CertificatePolicy getCertificatePolicy(String certificateName) {
        return this.serviceClient.getCertificatePolicy(certificateName);
    }

    /**
     * Updates the policy for a certificate.
     * 
     * Set specified members in the certificate policy. Leave others as null. This operation requires the
     * certificates/update permission.
     * 
     * @param certificateName The name of the certificate in the given vault.
     * @param certificatePolicy The policy for the certificate.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return management policy for a certificate.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<CertificatePolicy> updateCertificatePolicyWithResponse(String certificateName,
        CertificatePolicy certificatePolicy, RequestOptions requestOptions) {
        return this.serviceClient.updateCertificatePolicyWithResponse(certificateName, certificatePolicy,
            requestOptions);
    }

    /**
     * Updates the policy for a certificate.
     * 
     * Set specified members in the certificate policy. Leave others as null. This operation requires the
     * certificates/update permission.
     * 
     * @param certificateName The name of the certificate in the given vault.
     * @param certificatePolicy The policy for the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return management policy for a certificate.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CertificatePolicy updateCertificatePolicy(String certificateName, CertificatePolicy certificatePolicy) {
        return this.serviceClient.updateCertificatePolicy(certificateName, certificatePolicy);
    }

    /**
     * Updates the specified attributes associated with the given certificate.
     * 
     * The UpdateCertificate operation applies the specified update on the given certificate; the only elements updated
     * are the certificate's attributes. This operation requires the certificates/update permission.
     * 
     * @param certificateName The name of the certificate in the given key vault.
     * @param certificateVersion The version of the certificate.
     * @param parameters The parameters for certificate update.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a certificate bundle consists of a certificate (X509) plus its attributes.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<CertificateBundle> updateCertificateWithResponse(String certificateName, String certificateVersion,
        CertificateUpdateParameters parameters, RequestOptions requestOptions) {
        return this.serviceClient.updateCertificateWithResponse(certificateName, certificateVersion, parameters,
            requestOptions);
    }

    /**
     * Updates the specified attributes associated with the given certificate.
     * 
     * The UpdateCertificate operation applies the specified update on the given certificate; the only elements updated
     * are the certificate's attributes. This operation requires the certificates/update permission.
     * 
     * @param certificateName The name of the certificate in the given key vault.
     * @param certificateVersion The version of the certificate.
     * @param parameters The parameters for certificate update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a certificate bundle consists of a certificate (X509) plus its attributes.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CertificateBundle updateCertificate(String certificateName, String certificateVersion,
        CertificateUpdateParameters parameters) {
        return this.serviceClient.updateCertificate(certificateName, certificateVersion, parameters);
    }

    /**
     * Gets information about a certificate.
     * 
     * Gets information about a specific certificate. This operation requires the certificates/get permission.
     * 
     * @param certificateName The name of the certificate in the given vault.
     * @param certificateVersion The version of the certificate. This URI fragment is optional. If not specified, the
     * latest version of the certificate is returned.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about a certificate.
     * 
     * Gets information about a specific certificate.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<CertificateBundle> getCertificateWithResponse(String certificateName, String certificateVersion,
        RequestOptions requestOptions) {
        return this.serviceClient.getCertificateWithResponse(certificateName, certificateVersion, requestOptions);
    }

    /**
     * Gets information about a certificate.
     * 
     * Gets information about a specific certificate. This operation requires the certificates/get permission.
     * 
     * @param certificateName The name of the certificate in the given vault.
     * @param certificateVersion The version of the certificate. This URI fragment is optional. If not specified, the
     * latest version of the certificate is returned.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about a certificate.
     * 
     * Gets information about a specific certificate.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CertificateBundle getCertificate(String certificateName, String certificateVersion) {
        return this.serviceClient.getCertificate(certificateName, certificateVersion);
    }

    /**
     * Updates a certificate operation.
     * 
     * Updates a certificate creation operation that is already in progress. This operation requires the
     * certificates/update permission.
     * 
     * @param certificateName The name of the certificate.
     * @param certificateOperation The certificate operation response.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a certificate operation is returned in case of asynchronous requests.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<CertificateOperation> updateCertificateOperationWithResponse(String certificateName,
        CertificateOperationUpdateParameter certificateOperation, RequestOptions requestOptions) {
        return this.serviceClient.updateCertificateOperationWithResponse(certificateName, certificateOperation,
            requestOptions);
    }

    /**
     * Updates a certificate operation.
     * 
     * Updates a certificate creation operation that is already in progress. This operation requires the
     * certificates/update permission.
     * 
     * @param certificateName The name of the certificate.
     * @param certificateOperation The certificate operation response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a certificate operation is returned in case of asynchronous requests.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CertificateOperation updateCertificateOperation(String certificateName,
        CertificateOperationUpdateParameter certificateOperation) {
        return this.serviceClient.updateCertificateOperation(certificateName, certificateOperation);
    }

    /**
     * Gets the creation operation of a certificate.
     * 
     * Gets the creation operation associated with a specified certificate. This operation requires the certificates/get
     * permission.
     * 
     * @param certificateName The name of the certificate.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the creation operation of a certificate.
     * 
     * Gets the creation operation associated with a specified certificate.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<CertificateOperation> getCertificateOperationWithResponse(String certificateName,
        RequestOptions requestOptions) {
        return this.serviceClient.getCertificateOperationWithResponse(certificateName, requestOptions);
    }

    /**
     * Gets the creation operation of a certificate.
     * 
     * Gets the creation operation associated with a specified certificate. This operation requires the certificates/get
     * permission.
     * 
     * @param certificateName The name of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the creation operation of a certificate.
     * 
     * Gets the creation operation associated with a specified certificate.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CertificateOperation getCertificateOperation(String certificateName) {
        return this.serviceClient.getCertificateOperation(certificateName);
    }

    /**
     * Deletes the creation operation for a specific certificate.
     * 
     * Deletes the creation operation for a specified certificate that is in the process of being created. The
     * certificate is no longer created. This operation requires the certificates/update permission.
     * 
     * @param certificateName The name of the certificate.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a certificate operation is returned in case of asynchronous requests.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<CertificateOperation> deleteCertificateOperationWithResponse(String certificateName,
        RequestOptions requestOptions) {
        return this.serviceClient.deleteCertificateOperationWithResponse(certificateName, requestOptions);
    }

    /**
     * Deletes the creation operation for a specific certificate.
     * 
     * Deletes the creation operation for a specified certificate that is in the process of being created. The
     * certificate is no longer created. This operation requires the certificates/update permission.
     * 
     * @param certificateName The name of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a certificate operation is returned in case of asynchronous requests.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CertificateOperation deleteCertificateOperation(String certificateName) {
        return this.serviceClient.deleteCertificateOperation(certificateName);
    }

    /**
     * Merges a certificate or a certificate chain with a key pair existing on the server.
     * 
     * The MergeCertificate operation performs the merging of a certificate or certificate chain with a key pair
     * currently available in the service. This operation requires the certificates/create permission.
     * 
     * @param certificateName The name of the certificate.
     * @param parameters The parameters to merge certificate.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a certificate bundle consists of a certificate (X509) plus its attributes.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<CertificateBundle> mergeCertificateWithResponse(String certificateName,
        CertificateMergeParameters parameters, RequestOptions requestOptions) {
        return this.serviceClient.mergeCertificateWithResponse(certificateName, parameters, requestOptions);
    }

    /**
     * Merges a certificate or a certificate chain with a key pair existing on the server.
     * 
     * The MergeCertificate operation performs the merging of a certificate or certificate chain with a key pair
     * currently available in the service. This operation requires the certificates/create permission.
     * 
     * @param certificateName The name of the certificate.
     * @param parameters The parameters to merge certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a certificate bundle consists of a certificate (X509) plus its attributes.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CertificateBundle mergeCertificate(String certificateName, CertificateMergeParameters parameters) {
        return this.serviceClient.mergeCertificate(certificateName, parameters);
    }

    /**
     * Backs up the specified certificate.
     * 
     * Requests that a backup of the specified certificate be downloaded to the client. All versions of the certificate
     * will be downloaded. This operation requires the certificates/backup permission.
     * 
     * @param certificateName The name of the certificate.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the backup certificate result, containing the backup blob.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BackupCertificateResult> backupCertificateWithResponse(String certificateName,
        RequestOptions requestOptions) {
        return this.serviceClient.backupCertificateWithResponse(certificateName, requestOptions);
    }

    /**
     * Backs up the specified certificate.
     * 
     * Requests that a backup of the specified certificate be downloaded to the client. All versions of the certificate
     * will be downloaded. This operation requires the certificates/backup permission.
     * 
     * @param certificateName The name of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the backup certificate result, containing the backup blob.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BackupCertificateResult backupCertificate(String certificateName) {
        return this.serviceClient.backupCertificate(certificateName);
    }

    /**
     * Restores a backed up certificate to a vault.
     * 
     * Restores a backed up certificate, and all its versions, to a vault. This operation requires the
     * certificates/restore permission.
     * 
     * @param parameters The parameters to restore the certificate.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a certificate bundle consists of a certificate (X509) plus its attributes.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<CertificateBundle> restoreCertificateWithResponse(CertificateRestoreParameters parameters,
        RequestOptions requestOptions) {
        return this.serviceClient.restoreCertificateWithResponse(parameters, requestOptions);
    }

    /**
     * Restores a backed up certificate to a vault.
     * 
     * Restores a backed up certificate, and all its versions, to a vault. This operation requires the
     * certificates/restore permission.
     * 
     * @param parameters The parameters to restore the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a certificate bundle consists of a certificate (X509) plus its attributes.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CertificateBundle restoreCertificate(CertificateRestoreParameters parameters) {
        return this.serviceClient.restoreCertificate(parameters);
    }

    /**
     * Lists the deleted certificates in the specified vault currently available for recovery.
     * 
     * The GetDeletedCertificates operation retrieves the certificates in the current vault which are in a deleted state
     * and ready for recovery or purging. This operation includes deletion-specific information. This operation requires
     * the certificates/get/list permission. This operation can only be enabled on soft-delete enabled vaults.
     * 
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to
     * 25 results.
     * @param includePending Specifies whether to include certificates which are not completely provisioned.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of certificates that have been deleted in this vault.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DeletedCertificateItem> getDeletedCertificates(Integer maxresults, Boolean includePending) {
        return this.serviceClient.getDeletedCertificates(maxresults, includePending);
    }

    /**
     * Lists the deleted certificates in the specified vault currently available for recovery.
     * 
     * The GetDeletedCertificates operation retrieves the certificates in the current vault which are in a deleted state
     * and ready for recovery or purging. This operation includes deletion-specific information. This operation requires
     * the certificates/get/list permission. This operation can only be enabled on soft-delete enabled vaults.
     * 
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of certificates that have been deleted in this vault.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DeletedCertificateItem> getDeletedCertificates() {
        return this.serviceClient.getDeletedCertificates();
    }

    /**
     * Lists the deleted certificates in the specified vault currently available for recovery.
     * 
     * The GetDeletedCertificates operation retrieves the certificates in the current vault which are in a deleted state
     * and ready for recovery or purging. This operation includes deletion-specific information. This operation requires
     * the certificates/get/list permission. This operation can only be enabled on soft-delete enabled vaults.
     * 
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to
     * 25 results.
     * @param includePending Specifies whether to include certificates which are not completely provisioned.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of certificates that have been deleted in this vault.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DeletedCertificateItem> getDeletedCertificates(Integer maxresults, Boolean includePending,
        RequestOptions requestOptions) {
        return this.serviceClient.getDeletedCertificates(maxresults, includePending, requestOptions);
    }

    /**
     * Retrieves information about the specified deleted certificate.
     * 
     * The GetDeletedCertificate operation retrieves the deleted certificate information plus its attributes, such as
     * retention interval, scheduled permanent deletion and the current deletion recovery level. This operation requires
     * the certificates/get permission.
     * 
     * @param certificateName The name of the certificate.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Deleted Certificate consisting of its previous id, attributes and its tags, as well as information on
     * when it will be purged.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<DeletedCertificateBundle> getDeletedCertificateWithResponse(String certificateName,
        RequestOptions requestOptions) {
        return this.serviceClient.getDeletedCertificateWithResponse(certificateName, requestOptions);
    }

    /**
     * Retrieves information about the specified deleted certificate.
     * 
     * The GetDeletedCertificate operation retrieves the deleted certificate information plus its attributes, such as
     * retention interval, scheduled permanent deletion and the current deletion recovery level. This operation requires
     * the certificates/get permission.
     * 
     * @param certificateName The name of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Deleted Certificate consisting of its previous id, attributes and its tags, as well as information on
     * when it will be purged.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DeletedCertificateBundle getDeletedCertificate(String certificateName) {
        return this.serviceClient.getDeletedCertificate(certificateName);
    }

    /**
     * Permanently deletes the specified deleted certificate.
     * 
     * The PurgeDeletedCertificate operation performs an irreversible deletion of the specified certificate, without
     * possibility for recovery. The operation is not available if the recovery level does not specify 'Purgeable'. This
     * operation requires the certificate/purge permission.
     * 
     * @param certificateName The name of the certificate.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> purgeDeletedCertificateWithResponse(String certificateName, RequestOptions requestOptions) {
        return this.serviceClient.purgeDeletedCertificateWithResponse(certificateName, requestOptions);
    }

    /**
     * Permanently deletes the specified deleted certificate.
     * 
     * The PurgeDeletedCertificate operation performs an irreversible deletion of the specified certificate, without
     * possibility for recovery. The operation is not available if the recovery level does not specify 'Purgeable'. This
     * operation requires the certificate/purge permission.
     * 
     * @param certificateName The name of the certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void purgeDeletedCertificate(String certificateName) {
        this.serviceClient.purgeDeletedCertificate(certificateName);
    }

    /**
     * Recovers the deleted certificate back to its current version under /certificates.
     * 
     * The RecoverDeletedCertificate operation performs the reversal of the Delete operation. The operation is
     * applicable in vaults enabled for soft-delete, and must be issued during the retention interval (available in the
     * deleted certificate's attributes). This operation requires the certificates/recover permission.
     * 
     * @param certificateName The name of the deleted certificate.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a certificate bundle consists of a certificate (X509) plus its attributes.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<CertificateBundle> recoverDeletedCertificateWithResponse(String certificateName,
        RequestOptions requestOptions) {
        return this.serviceClient.recoverDeletedCertificateWithResponse(certificateName, requestOptions);
    }

    /**
     * Recovers the deleted certificate back to its current version under /certificates.
     * 
     * The RecoverDeletedCertificate operation performs the reversal of the Delete operation. The operation is
     * applicable in vaults enabled for soft-delete, and must be issued during the retention interval (available in the
     * deleted certificate's attributes). This operation requires the certificates/recover permission.
     * 
     * @param certificateName The name of the deleted certificate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a certificate bundle consists of a certificate (X509) plus its attributes.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CertificateBundle recoverDeletedCertificate(String certificateName) {
        return this.serviceClient.recoverDeletedCertificate(certificateName);
    }
}
