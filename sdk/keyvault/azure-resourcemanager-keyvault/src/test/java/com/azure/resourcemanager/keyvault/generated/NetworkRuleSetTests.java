// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.keyvault.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.keyvault.models.IpRule;
import com.azure.resourcemanager.keyvault.models.NetworkRuleAction;
import com.azure.resourcemanager.keyvault.models.NetworkRuleBypassOptions;
import com.azure.resourcemanager.keyvault.models.NetworkRuleSet;
import com.azure.resourcemanager.keyvault.models.VirtualNetworkRule;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class NetworkRuleSetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NetworkRuleSet model = BinaryData.fromString(
            "{\"bypass\":\"None\",\"defaultAction\":\"Allow\",\"ipRules\":[{\"value\":\"ierhhbcsglummaj\"},{\"value\":\"j\"}],\"virtualNetworkRules\":[{\"id\":\"xobnbdxkqpxok\",\"ignoreMissingVnetServiceEndpoint\":true}]}")
            .toObject(NetworkRuleSet.class);
        Assertions.assertEquals(NetworkRuleBypassOptions.NONE, model.bypass());
        Assertions.assertEquals(NetworkRuleAction.ALLOW, model.defaultAction());
        Assertions.assertEquals("ierhhbcsglummaj", model.ipRules().get(0).value());
        Assertions.assertEquals("xobnbdxkqpxok", model.virtualNetworkRules().get(0).id());
        Assertions.assertTrue(model.virtualNetworkRules().get(0).ignoreMissingVnetServiceEndpoint());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NetworkRuleSet model = new NetworkRuleSet().withBypass(NetworkRuleBypassOptions.NONE)
            .withDefaultAction(NetworkRuleAction.ALLOW)
            .withIpRules(Arrays.asList(new IpRule().withValue("ierhhbcsglummaj"), new IpRule().withValue("j")))
            .withVirtualNetworkRules(Arrays
                .asList(new VirtualNetworkRule().withId("xobnbdxkqpxok").withIgnoreMissingVnetServiceEndpoint(true)));
        model = BinaryData.fromObject(model).toObject(NetworkRuleSet.class);
        Assertions.assertEquals(NetworkRuleBypassOptions.NONE, model.bypass());
        Assertions.assertEquals(NetworkRuleAction.ALLOW, model.defaultAction());
        Assertions.assertEquals("ierhhbcsglummaj", model.ipRules().get(0).value());
        Assertions.assertEquals("xobnbdxkqpxok", model.virtualNetworkRules().get(0).id());
        Assertions.assertTrue(model.virtualNetworkRules().get(0).ignoreMissingVnetServiceEndpoint());
    }
}
