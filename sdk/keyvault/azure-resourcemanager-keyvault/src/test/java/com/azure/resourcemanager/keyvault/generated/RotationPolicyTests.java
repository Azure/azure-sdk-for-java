// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.keyvault.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.keyvault.models.Action;
import com.azure.resourcemanager.keyvault.models.KeyRotationPolicyActionType;
import com.azure.resourcemanager.keyvault.models.KeyRotationPolicyAttributes;
import com.azure.resourcemanager.keyvault.models.LifetimeAction;
import com.azure.resourcemanager.keyvault.models.RotationPolicy;
import com.azure.resourcemanager.keyvault.models.Trigger;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class RotationPolicyTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        RotationPolicy model = BinaryData.fromString(
            "{\"attributes\":{\"created\":1523837111721006893,\"updated\":3476175612376206504,\"expiryTime\":\"opbminrfdw\"},\"lifetimeActions\":[{\"trigger\":{\"timeAfterCreate\":\"ziuiefozbhdm\",\"timeBeforeExpiry\":\"l\"},\"action\":{\"type\":\"rotate\"}},{\"trigger\":{\"timeAfterCreate\":\"trmaequiahxicslf\",\"timeBeforeExpiry\":\"qzpiyyl\"},\"action\":{\"type\":\"rotate\"}},{\"trigger\":{\"timeAfterCreate\":\"hc\",\"timeBeforeExpiry\":\"ph\"},\"action\":{\"type\":\"notify\"}},{\"trigger\":{\"timeAfterCreate\":\"tqscywug\",\"timeBeforeExpiry\":\"oluhczbwemh\"},\"action\":{\"type\":\"rotate\"}}]}")
            .toObject(RotationPolicy.class);
        Assertions.assertEquals("opbminrfdw", model.attributes().expiryTime());
        Assertions.assertEquals("ziuiefozbhdm", model.lifetimeActions().get(0).trigger().timeAfterCreate());
        Assertions.assertEquals("l", model.lifetimeActions().get(0).trigger().timeBeforeExpiry());
        Assertions.assertEquals(KeyRotationPolicyActionType.ROTATE, model.lifetimeActions().get(0).action().type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        RotationPolicy model
            = new RotationPolicy().withAttributes(new KeyRotationPolicyAttributes().withExpiryTime("opbminrfdw"))
                .withLifetimeActions(Arrays.asList(new LifetimeAction()
                    .withTrigger(new Trigger().withTimeAfterCreate("ziuiefozbhdm").withTimeBeforeExpiry("l"))
                    .withAction(new Action().withType(KeyRotationPolicyActionType.ROTATE)),
                    new LifetimeAction()
                        .withTrigger(
                            new Trigger().withTimeAfterCreate("trmaequiahxicslf").withTimeBeforeExpiry("qzpiyyl"))
                        .withAction(new Action().withType(KeyRotationPolicyActionType.ROTATE)),
                    new LifetimeAction().withTrigger(new Trigger().withTimeAfterCreate("hc").withTimeBeforeExpiry("ph"))
                        .withAction(new Action().withType(KeyRotationPolicyActionType.NOTIFY)),
                    new LifetimeAction()
                        .withTrigger(new Trigger().withTimeAfterCreate("tqscywug").withTimeBeforeExpiry("oluhczbwemh"))
                        .withAction(new Action().withType(KeyRotationPolicyActionType.ROTATE))));
        model = BinaryData.fromObject(model).toObject(RotationPolicy.class);
        Assertions.assertEquals("opbminrfdw", model.attributes().expiryTime());
        Assertions.assertEquals("ziuiefozbhdm", model.lifetimeActions().get(0).trigger().timeAfterCreate());
        Assertions.assertEquals("l", model.lifetimeActions().get(0).trigger().timeBeforeExpiry());
        Assertions.assertEquals(KeyRotationPolicyActionType.ROTATE, model.lifetimeActions().get(0).action().type());
    }
}
