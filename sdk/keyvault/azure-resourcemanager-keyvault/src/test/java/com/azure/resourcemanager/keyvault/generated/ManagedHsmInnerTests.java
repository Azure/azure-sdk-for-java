// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.keyvault.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.keyvault.fluent.models.ManagedHsmInner;
import com.azure.resourcemanager.keyvault.fluent.models.MhsmGeoReplicatedRegionInner;
import com.azure.resourcemanager.keyvault.models.CreateMode;
import com.azure.resourcemanager.keyvault.models.ManagedHsmProperties;
import com.azure.resourcemanager.keyvault.models.ManagedHsmSku;
import com.azure.resourcemanager.keyvault.models.ManagedHsmSkuFamily;
import com.azure.resourcemanager.keyvault.models.ManagedHsmSkuName;
import com.azure.resourcemanager.keyvault.models.ManagedServiceIdentity;
import com.azure.resourcemanager.keyvault.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.keyvault.models.MhsmNetworkRuleSet;
import com.azure.resourcemanager.keyvault.models.MhsmServiceTagRule;
import com.azure.resourcemanager.keyvault.models.MhsmVirtualNetworkRule;
import com.azure.resourcemanager.keyvault.models.MhsmipRule;
import com.azure.resourcemanager.keyvault.models.NetworkRuleAction;
import com.azure.resourcemanager.keyvault.models.NetworkRuleBypassOptions;
import com.azure.resourcemanager.keyvault.models.PublicNetworkAccess;
import com.azure.resourcemanager.keyvault.models.UserAssignedIdentity;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import org.junit.jupiter.api.Assertions;

public final class ManagedHsmInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ManagedHsmInner model = BinaryData.fromString(
            "{\"properties\":{\"tenantId\":\"7a7e69a5-0518-4ec0-bd95-1197bfb3b829\",\"initialAdminObjectIds\":[\"yqiklbbovplwzb\"],\"hsmUri\":\"gy\",\"enableSoftDelete\":true,\"softDeleteRetentionInDays\":615952432,\"enablePurgeProtection\":true,\"createMode\":\"default\",\"statusMessage\":\"sxqu\",\"provisioningState\":\"Provisioning\",\"networkAcls\":{\"bypass\":\"None\",\"defaultAction\":\"Deny\",\"ipRules\":[{\"value\":\"nkjzkdeslpvlop\"},{\"value\":\"i\"},{\"value\":\"ighxpk\"}],\"serviceTags\":[{\"tag\":\"baiuebbaumny\"}],\"virtualNetworkRules\":[{\"id\":\"edeojnabc\"}]},\"regions\":[{\"name\":\"txp\",\"provisioningState\":\"Succeeded\",\"isPrimary\":true},{\"name\":\"hvpesapskrdqm\",\"provisioningState\":\"Cleanup\",\"isPrimary\":false},{\"name\":\"ldwkyzxuutkn\",\"provisioningState\":\"Deleting\",\"isPrimary\":true}],\"privateEndpointConnections\":[{\"id\":\"xotogtwrupqsxv\",\"etag\":\"i\",\"properties\":{\"privateEndpoint\":{\"id\":\"ceoveilovno\"},\"privateLinkServiceConnectionState\":{\"status\":\"Pending\",\"description\":\"cnjbkcnxdhbt\",\"actionsRequired\":\"None\"},\"provisioningState\":\"Deleting\"}},{\"id\":\"pnvjtoqnermclf\",\"etag\":\"phoxus\",\"properties\":{\"privateEndpoint\":{\"id\":\"bgyepsbj\"},\"privateLinkServiceConnectionState\":{\"status\":\"Disconnected\",\"description\":\"gxywpmue\",\"actionsRequired\":\"None\"},\"provisioningState\":\"Creating\"}},{\"id\":\"qkqujidsu\",\"etag\":\"nobglaocq\",\"properties\":{\"privateEndpoint\":{\"id\":\"mgyudxytlmoyrxv\"},\"privateLinkServiceConnectionState\":{\"status\":\"Pending\",\"description\":\"pz\",\"actionsRequired\":\"None\"},\"provisioningState\":\"Disconnected\"}},{\"id\":\"hl\",\"etag\":\"jbhckfrlhr\",\"properties\":{\"privateEndpoint\":{\"id\":\"yvpycanuzbpzk\"},\"privateLinkServiceConnectionState\":{\"status\":\"Pending\",\"description\":\"b\",\"actionsRequired\":\"None\"},\"provisioningState\":\"Succeeded\"}}],\"publicNetworkAccess\":\"Disabled\",\"scheduledPurgeDate\":\"2021-05-28T09:26:13Z\",\"securityDomainProperties\":{\"activationStatus\":\"Unknown\",\"activationStatusMessage\":\"jusrtslhspk\"}},\"tags\":{\"melmqkrha\":\"maofmxagkv\",\"aquhcdhm\":\"vljua\",\"rcrgvx\":\"ualaexqpvfadmw\"},\"location\":\"gomz\",\"sku\":{\"family\":\"B\",\"name\":\"Custom_C10\"},\"identity\":{\"principalId\":\"976ccf29-b5f4-4f8b-a23f-af5d429cb589\",\"tenantId\":\"b7ed9299-cc25-4f0b-9350-cafe69db1f25\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"ldawkzbaliourqha\":{\"principalId\":\"f31784fb-a67b-41b2-b62a-44edf50c137e\",\"clientId\":\"3c78cb26-b800-4737-8be9-11eb5815713c\"}}},\"id\":\"uhashsfwx\",\"name\":\"sowzxcugi\",\"type\":\"jooxdjebw\"}")
            .toObject(ManagedHsmInner.class);
        Assertions.assertEquals(UUID.fromString("7a7e69a5-0518-4ec0-bd95-1197bfb3b829"), model.properties().tenantId());
        Assertions.assertEquals("yqiklbbovplwzb", model.properties().initialAdminObjectIds().get(0));
        Assertions.assertTrue(model.properties().enableSoftDelete());
        Assertions.assertEquals(615952432, model.properties().softDeleteRetentionInDays());
        Assertions.assertTrue(model.properties().enablePurgeProtection());
        Assertions.assertEquals(CreateMode.DEFAULT, model.properties().createMode());
        Assertions.assertEquals(NetworkRuleBypassOptions.NONE, model.properties().networkAcls().bypass());
        Assertions.assertEquals(NetworkRuleAction.DENY, model.properties().networkAcls().defaultAction());
        Assertions.assertEquals("nkjzkdeslpvlop", model.properties().networkAcls().ipRules().get(0).value());
        Assertions.assertEquals("baiuebbaumny", model.properties().networkAcls().serviceTags().get(0).tag());
        Assertions.assertEquals("edeojnabc", model.properties().networkAcls().virtualNetworkRules().get(0).id());
        Assertions.assertEquals("txp", model.properties().regions().get(0).name());
        Assertions.assertTrue(model.properties().regions().get(0).isPrimary());
        Assertions.assertEquals(PublicNetworkAccess.DISABLED, model.properties().publicNetworkAccess());
        Assertions.assertEquals("maofmxagkv", model.tags().get("melmqkrha"));
        Assertions.assertEquals("gomz", model.location());
        Assertions.assertEquals(ManagedHsmSkuFamily.B, model.sku().family());
        Assertions.assertEquals(ManagedHsmSkuName.CUSTOM_C10, model.sku().name());
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, model.identity().type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ManagedHsmInner model = new ManagedHsmInner()
            .withProperties(
                new ManagedHsmProperties().withTenantId(UUID.fromString("7a7e69a5-0518-4ec0-bd95-1197bfb3b829"))
                    .withInitialAdminObjectIds(Arrays.asList("yqiklbbovplwzb"))
                    .withEnableSoftDelete(true)
                    .withSoftDeleteRetentionInDays(615952432)
                    .withEnablePurgeProtection(true)
                    .withCreateMode(CreateMode.DEFAULT)
                    .withNetworkAcls(new MhsmNetworkRuleSet().withBypass(NetworkRuleBypassOptions.NONE)
                        .withDefaultAction(NetworkRuleAction.DENY)
                        .withIpRules(Arrays.asList(new MhsmipRule().withValue("nkjzkdeslpvlop"),
                            new MhsmipRule().withValue("i"), new MhsmipRule().withValue("ighxpk")))
                        .withServiceTags(Arrays.asList(new MhsmServiceTagRule().withTag("baiuebbaumny")))
                        .withVirtualNetworkRules(Arrays.asList(new MhsmVirtualNetworkRule().withId("edeojnabc"))))
                    .withRegions(Arrays.asList(new MhsmGeoReplicatedRegionInner().withName("txp").withIsPrimary(true),
                        new MhsmGeoReplicatedRegionInner().withName("hvpesapskrdqm").withIsPrimary(false),
                        new MhsmGeoReplicatedRegionInner().withName("ldwkyzxuutkn").withIsPrimary(true)))
                    .withPublicNetworkAccess(PublicNetworkAccess.DISABLED))
            .withTags(mapOf("melmqkrha", "maofmxagkv", "aquhcdhm", "vljua", "rcrgvx", "ualaexqpvfadmw"))
            .withLocation("gomz")
            .withSku(new ManagedHsmSku().withFamily(ManagedHsmSkuFamily.B).withName(ManagedHsmSkuName.CUSTOM_C10))
            .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.USER_ASSIGNED)
                .withUserAssignedIdentities(mapOf("ldawkzbaliourqha", new UserAssignedIdentity())));
        model = BinaryData.fromObject(model).toObject(ManagedHsmInner.class);
        Assertions.assertEquals(UUID.fromString("7a7e69a5-0518-4ec0-bd95-1197bfb3b829"), model.properties().tenantId());
        Assertions.assertEquals("yqiklbbovplwzb", model.properties().initialAdminObjectIds().get(0));
        Assertions.assertTrue(model.properties().enableSoftDelete());
        Assertions.assertEquals(615952432, model.properties().softDeleteRetentionInDays());
        Assertions.assertTrue(model.properties().enablePurgeProtection());
        Assertions.assertEquals(CreateMode.DEFAULT, model.properties().createMode());
        Assertions.assertEquals(NetworkRuleBypassOptions.NONE, model.properties().networkAcls().bypass());
        Assertions.assertEquals(NetworkRuleAction.DENY, model.properties().networkAcls().defaultAction());
        Assertions.assertEquals("nkjzkdeslpvlop", model.properties().networkAcls().ipRules().get(0).value());
        Assertions.assertEquals("baiuebbaumny", model.properties().networkAcls().serviceTags().get(0).tag());
        Assertions.assertEquals("edeojnabc", model.properties().networkAcls().virtualNetworkRules().get(0).id());
        Assertions.assertEquals("txp", model.properties().regions().get(0).name());
        Assertions.assertTrue(model.properties().regions().get(0).isPrimary());
        Assertions.assertEquals(PublicNetworkAccess.DISABLED, model.properties().publicNetworkAccess());
        Assertions.assertEquals("maofmxagkv", model.tags().get("melmqkrha"));
        Assertions.assertEquals("gomz", model.location());
        Assertions.assertEquals(ManagedHsmSkuFamily.B, model.sku().family());
        Assertions.assertEquals(ManagedHsmSkuName.CUSTOM_C10, model.sku().name());
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, model.identity().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
