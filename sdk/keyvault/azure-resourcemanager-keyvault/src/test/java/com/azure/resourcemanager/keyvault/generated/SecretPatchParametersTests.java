// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.keyvault.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.keyvault.models.SecretAttributes;
import com.azure.resourcemanager.keyvault.models.SecretPatchParameters;
import com.azure.resourcemanager.keyvault.models.SecretPatchProperties;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SecretPatchParametersTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SecretPatchParameters model = BinaryData.fromString(
            "{\"tags\":{\"pzfoqoui\":\"waezkojvd\"},\"properties\":{\"value\":\"xarzgszufoxciq\",\"contentType\":\"idoamciodhkha\",\"attributes\":{\"enabled\":false,\"nbf\":8226405962302008930,\"exp\":7437240091195438123,\"created\":4122808446567257102,\"updated\":8683067691856036748}}}")
            .toObject(SecretPatchParameters.class);
        Assertions.assertEquals("waezkojvd", model.tags().get("pzfoqoui"));
        Assertions.assertEquals("xarzgszufoxciq", model.properties().value());
        Assertions.assertEquals("idoamciodhkha", model.properties().contentType());
        Assertions.assertFalse(model.properties().attributes().enabled());
        Assertions.assertEquals(OffsetDateTime.parse("8226405962302008930"),
            model.properties().attributes().notBefore());
        Assertions.assertEquals(OffsetDateTime.parse("7437240091195438123"), model.properties().attributes().expires());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SecretPatchParameters model = new SecretPatchParameters().withTags(mapOf("pzfoqoui", "waezkojvd"))
            .withProperties(new SecretPatchProperties().withValue("xarzgszufoxciq")
                .withContentType("idoamciodhkha")
                .withAttributes(new SecretAttributes().withEnabled(false)
                    .withNotBefore(OffsetDateTime.parse("8226405962302008930"))
                    .withExpires(OffsetDateTime.parse("7437240091195438123"))));
        model = BinaryData.fromObject(model).toObject(SecretPatchParameters.class);
        Assertions.assertEquals("waezkojvd", model.tags().get("pzfoqoui"));
        Assertions.assertEquals("xarzgszufoxciq", model.properties().value());
        Assertions.assertEquals("idoamciodhkha", model.properties().contentType());
        Assertions.assertFalse(model.properties().attributes().enabled());
        Assertions.assertEquals(OffsetDateTime.parse("8226405962302008930"),
            model.properties().attributes().notBefore());
        Assertions.assertEquals(OffsetDateTime.parse("7437240091195438123"), model.properties().attributes().expires());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
