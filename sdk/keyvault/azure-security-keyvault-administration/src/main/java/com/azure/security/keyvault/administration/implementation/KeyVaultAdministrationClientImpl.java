// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.security.keyvault.administration.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.DefaultPollingStrategy;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.PollingStrategyOptions;
import com.azure.core.util.polling.SyncDefaultPollingStrategy;
import com.azure.core.util.polling.SyncPoller;
import com.azure.core.util.serializer.JacksonAdapter;
import com.azure.core.util.serializer.SerializerAdapter;
import com.azure.core.util.serializer.TypeReference;
import com.azure.security.keyvault.administration.KeyVaultAdministrationServiceVersion;
import com.azure.security.keyvault.administration.implementation.models.FullBackupOperation;
import com.azure.security.keyvault.administration.implementation.models.RestoreOperation;
import com.azure.security.keyvault.administration.implementation.models.SelectiveKeyRestoreOperation;
import java.time.Duration;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the KeyVaultAdministrationClient type.
 */
public final class KeyVaultAdministrationClientImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final KeyVaultAdministrationClientService service;

    /**
     */
    private final String vaultBaseUrl;

    /**
     * Gets.
     * 
     * @return the vaultBaseUrl value.
     */
    public String getVaultBaseUrl() {
        return this.vaultBaseUrl;
    }

    /**
     * Service version.
     */
    private final KeyVaultAdministrationServiceVersion serviceVersion;

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public KeyVaultAdministrationServiceVersion getServiceVersion() {
        return this.serviceVersion;
    }

    /**
     * The HTTP pipeline to send requests through.
     */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     * 
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /**
     * The serializer to serialize an object into a string.
     */
    private final SerializerAdapter serializerAdapter;

    /**
     * Gets The serializer to serialize an object into a string.
     * 
     * @return the serializerAdapter value.
     */
    public SerializerAdapter getSerializerAdapter() {
        return this.serializerAdapter;
    }

    /**
     * The RoleAssignmentsImpl object to access its operations.
     */
    private final RoleAssignmentsImpl roleAssignments;

    /**
     * Gets the RoleAssignmentsImpl object to access its operations.
     * 
     * @return the RoleAssignmentsImpl object.
     */
    public RoleAssignmentsImpl getRoleAssignments() {
        return this.roleAssignments;
    }

    /**
     * The RoleDefinitionsImpl object to access its operations.
     */
    private final RoleDefinitionsImpl roleDefinitions;

    /**
     * Gets the RoleDefinitionsImpl object to access its operations.
     * 
     * @return the RoleDefinitionsImpl object.
     */
    public RoleDefinitionsImpl getRoleDefinitions() {
        return this.roleDefinitions;
    }

    /**
     * Initializes an instance of KeyVaultAdministrationClient client.
     * 
     * @param vaultBaseUrl
     * @param serviceVersion Service version.
     */
    public KeyVaultAdministrationClientImpl(String vaultBaseUrl, KeyVaultAdministrationServiceVersion serviceVersion) {
        this(new HttpPipelineBuilder().policies(new UserAgentPolicy(), new RetryPolicy()).build(),
            JacksonAdapter.createDefaultSerializerAdapter(), vaultBaseUrl, serviceVersion);
    }

    /**
     * Initializes an instance of KeyVaultAdministrationClient client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param vaultBaseUrl
     * @param serviceVersion Service version.
     */
    public KeyVaultAdministrationClientImpl(HttpPipeline httpPipeline, String vaultBaseUrl,
        KeyVaultAdministrationServiceVersion serviceVersion) {
        this(httpPipeline, JacksonAdapter.createDefaultSerializerAdapter(), vaultBaseUrl, serviceVersion);
    }

    /**
     * Initializes an instance of KeyVaultAdministrationClient client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param serializerAdapter The serializer to serialize an object into a string.
     * @param vaultBaseUrl
     * @param serviceVersion Service version.
     */
    public KeyVaultAdministrationClientImpl(HttpPipeline httpPipeline, SerializerAdapter serializerAdapter,
        String vaultBaseUrl, KeyVaultAdministrationServiceVersion serviceVersion) {
        this.httpPipeline = httpPipeline;
        this.serializerAdapter = serializerAdapter;
        this.vaultBaseUrl = vaultBaseUrl;
        this.serviceVersion = serviceVersion;
        this.roleAssignments = new RoleAssignmentsImpl(this);
        this.roleDefinitions = new RoleDefinitionsImpl(this);
        this.service = RestProxy.create(KeyVaultAdministrationClientService.class, this.httpPipeline,
            this.getSerializerAdapter());
    }

    /**
     * The interface defining all the services for KeyVaultAdministrationClient to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{vaultBaseUrl}")
    @ServiceInterface(name = "KeyVaultAdministrationClient")
    public interface KeyVaultAdministrationClientService {
        @Get("/backup/{jobId}/pending")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> fullBackupStatus(@HostParam("vaultBaseUrl") String vaultBaseUrl,
            @QueryParam("api-version") String apiVersion, @PathParam("jobId") String jobId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/backup/{jobId}/pending")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> fullBackupStatusSync(@HostParam("vaultBaseUrl") String vaultBaseUrl,
            @QueryParam("api-version") String apiVersion, @PathParam("jobId") String jobId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Post("/backup")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> fullBackup(@HostParam("vaultBaseUrl") String vaultBaseUrl,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData azureStorageBlobContainerUri, RequestOptions requestOptions,
            Context context);

        @Post("/backup")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> fullBackupSync(@HostParam("vaultBaseUrl") String vaultBaseUrl,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData azureStorageBlobContainerUri, RequestOptions requestOptions,
            Context context);

        @Post("/prebackup")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> preFullBackup(@HostParam("vaultBaseUrl") String vaultBaseUrl,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData preBackupOperationParameters, RequestOptions requestOptions,
            Context context);

        @Post("/prebackup")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> preFullBackupSync(@HostParam("vaultBaseUrl") String vaultBaseUrl,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData preBackupOperationParameters, RequestOptions requestOptions,
            Context context);

        @Get("/restore/{jobId}/pending")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> restoreStatus(@HostParam("vaultBaseUrl") String vaultBaseUrl,
            @QueryParam("api-version") String apiVersion, @PathParam("jobId") String jobId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/restore/{jobId}/pending")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> restoreStatusSync(@HostParam("vaultBaseUrl") String vaultBaseUrl,
            @QueryParam("api-version") String apiVersion, @PathParam("jobId") String jobId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Put("/prerestore")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> preFullRestoreOperation(@HostParam("vaultBaseUrl") String vaultBaseUrl,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData preRestoreOperationParameters, RequestOptions requestOptions,
            Context context);

        @Put("/prerestore")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> preFullRestoreOperationSync(@HostParam("vaultBaseUrl") String vaultBaseUrl,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData preRestoreOperationParameters, RequestOptions requestOptions,
            Context context);

        @Put("/restore")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> fullRestoreOperation(@HostParam("vaultBaseUrl") String vaultBaseUrl,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData restoreBlobDetails,
            RequestOptions requestOptions, Context context);

        @Put("/restore")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> fullRestoreOperationSync(@HostParam("vaultBaseUrl") String vaultBaseUrl,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData restoreBlobDetails,
            RequestOptions requestOptions, Context context);

        @Get("/restore/{jobId}/pending")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> selectiveKeyRestoreStatus(@HostParam("vaultBaseUrl") String vaultBaseUrl,
            @QueryParam("api-version") String apiVersion, @PathParam("jobId") String jobId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/restore/{jobId}/pending")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> selectiveKeyRestoreStatusSync(@HostParam("vaultBaseUrl") String vaultBaseUrl,
            @QueryParam("api-version") String apiVersion, @PathParam("jobId") String jobId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Put("/keys/{keyName}/restore")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> selectiveKeyRestoreOperation(@HostParam("vaultBaseUrl") String vaultBaseUrl,
            @QueryParam("api-version") String apiVersion, @PathParam("keyName") String keyName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData restoreBlobDetails, RequestOptions requestOptions,
            Context context);

        @Put("/keys/{keyName}/restore")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> selectiveKeyRestoreOperationSync(@HostParam("vaultBaseUrl") String vaultBaseUrl,
            @QueryParam("api-version") String apiVersion, @PathParam("keyName") String keyName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData restoreBlobDetails, RequestOptions requestOptions,
            Context context);

        @Patch("/settings/{setting-name}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> updateSetting(@HostParam("vaultBaseUrl") String vaultBaseUrl,
            @QueryParam("api-version") String apiVersion, @PathParam("setting-name") String settingName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData parameters, RequestOptions requestOptions, Context context);

        @Patch("/settings/{setting-name}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> updateSettingSync(@HostParam("vaultBaseUrl") String vaultBaseUrl,
            @QueryParam("api-version") String apiVersion, @PathParam("setting-name") String settingName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData parameters, RequestOptions requestOptions, Context context);

        @Get("/settings/{setting-name}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getSetting(@HostParam("vaultBaseUrl") String vaultBaseUrl,
            @QueryParam("api-version") String apiVersion, @PathParam("setting-name") String settingName,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/settings/{setting-name}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getSettingSync(@HostParam("vaultBaseUrl") String vaultBaseUrl,
            @QueryParam("api-version") String apiVersion, @PathParam("setting-name") String settingName,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/settings")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getSettings(@HostParam("vaultBaseUrl") String vaultBaseUrl,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/settings")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getSettingsSync(@HostParam("vaultBaseUrl") String vaultBaseUrl,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);
    }

    /**
     * Returns the status of full backup operation.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     status: String(InProgress/Succeeded/Canceled/Failed) (Optional)
     *     statusDetails: String (Optional)
     *     error (Optional): {
     *         code: String (Optional)
     *         message: String (Optional)
     *         innererror (Optional): (recursive schema, see innererror above)
     *     }
     *     startTime: Long (Optional)
     *     endTime: Long (Optional)
     *     jobId: String (Optional)
     *     azureStorageBlobContainerUri: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param jobId The id returned as part of the backup request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return full backup operation along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> fullBackupStatusWithResponseAsync(String jobId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.fullBackupStatus(this.getVaultBaseUrl(),
            this.getServiceVersion().getVersion(), jobId, accept, requestOptions, context));
    }

    /**
     * Returns the status of full backup operation.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     status: String(InProgress/Succeeded/Canceled/Failed) (Optional)
     *     statusDetails: String (Optional)
     *     error (Optional): {
     *         code: String (Optional)
     *         message: String (Optional)
     *         innererror (Optional): (recursive schema, see innererror above)
     *     }
     *     startTime: Long (Optional)
     *     endTime: Long (Optional)
     *     jobId: String (Optional)
     *     azureStorageBlobContainerUri: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param jobId The id returned as part of the backup request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return full backup operation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> fullBackupStatusWithResponse(String jobId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.fullBackupStatusSync(this.getVaultBaseUrl(), this.getServiceVersion().getVersion(), jobId,
            accept, requestOptions, Context.NONE);
    }

    /**
     * Creates a full backup using a user-provided SAS token to an Azure blob storage container.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     storageResourceUri: String (Required)
     *     token: String (Optional)
     *     useManagedIdentity: Boolean (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     status: String(InProgress/Succeeded/Canceled/Failed) (Optional)
     *     statusDetails: String (Optional)
     *     error (Optional): {
     *         code: String (Optional)
     *         message: String (Optional)
     *         innererror (Optional): (recursive schema, see innererror above)
     *     }
     *     startTime: Long (Optional)
     *     endTime: Long (Optional)
     *     jobId: String (Optional)
     *     azureStorageBlobContainerUri: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param azureStorageBlobContainerUri Azure blob shared access signature token pointing to a valid Azure blob
     * container where full backup needs to be stored. This token needs to be valid for at least next 24 hours from the
     * time of making this call.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return full backup operation along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> fullBackupWithResponseAsync(BinaryData azureStorageBlobContainerUri,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.fullBackup(this.getVaultBaseUrl(), this.getServiceVersion().getVersion(),
                contentType, accept, azureStorageBlobContainerUri, requestOptions, context));
    }

    /**
     * Creates a full backup using a user-provided SAS token to an Azure blob storage container.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     storageResourceUri: String (Required)
     *     token: String (Optional)
     *     useManagedIdentity: Boolean (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     status: String(InProgress/Succeeded/Canceled/Failed) (Optional)
     *     statusDetails: String (Optional)
     *     error (Optional): {
     *         code: String (Optional)
     *         message: String (Optional)
     *         innererror (Optional): (recursive schema, see innererror above)
     *     }
     *     startTime: Long (Optional)
     *     endTime: Long (Optional)
     *     jobId: String (Optional)
     *     azureStorageBlobContainerUri: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param azureStorageBlobContainerUri Azure blob shared access signature token pointing to a valid Azure blob
     * container where full backup needs to be stored. This token needs to be valid for at least next 24 hours from the
     * time of making this call.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return full backup operation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> fullBackupWithResponse(BinaryData azureStorageBlobContainerUri,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.fullBackupSync(this.getVaultBaseUrl(), this.getServiceVersion().getVersion(), contentType,
            accept, azureStorageBlobContainerUri, requestOptions, Context.NONE);
    }

    /**
     * Creates a full backup using a user-provided SAS token to an Azure blob storage container.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     storageResourceUri: String (Required)
     *     token: String (Optional)
     *     useManagedIdentity: Boolean (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     status: String(InProgress/Succeeded/Canceled/Failed) (Optional)
     *     statusDetails: String (Optional)
     *     error (Optional): {
     *         code: String (Optional)
     *         message: String (Optional)
     *         innererror (Optional): (recursive schema, see innererror above)
     *     }
     *     startTime: Long (Optional)
     *     endTime: Long (Optional)
     *     jobId: String (Optional)
     *     azureStorageBlobContainerUri: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param azureStorageBlobContainerUri Azure blob shared access signature token pointing to a valid Azure blob
     * container where full backup needs to be stored. This token needs to be valid for at least next 24 hours from the
     * time of making this call.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of full backup operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginFullBackupAsync(BinaryData azureStorageBlobContainerUri,
        RequestOptions requestOptions) {
        return PollerFlux.create(Duration.ofSeconds(1),
            () -> this.fullBackupWithResponseAsync(azureStorageBlobContainerUri, requestOptions),
            new DefaultPollingStrategy<>(new PollingStrategyOptions(this.getHttpPipeline())

                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.getServiceVersion().getVersion())),
            TypeReference.createInstance(BinaryData.class), TypeReference.createInstance(BinaryData.class));
    }

    /**
     * Creates a full backup using a user-provided SAS token to an Azure blob storage container.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     storageResourceUri: String (Required)
     *     token: String (Optional)
     *     useManagedIdentity: Boolean (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     status: String(InProgress/Succeeded/Canceled/Failed) (Optional)
     *     statusDetails: String (Optional)
     *     error (Optional): {
     *         code: String (Optional)
     *         message: String (Optional)
     *         innererror (Optional): (recursive schema, see innererror above)
     *     }
     *     startTime: Long (Optional)
     *     endTime: Long (Optional)
     *     jobId: String (Optional)
     *     azureStorageBlobContainerUri: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param azureStorageBlobContainerUri Azure blob shared access signature token pointing to a valid Azure blob
     * container where full backup needs to be stored. This token needs to be valid for at least next 24 hours from the
     * time of making this call.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of full backup operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginFullBackup(BinaryData azureStorageBlobContainerUri,
        RequestOptions requestOptions) {
        return SyncPoller.createPoller(Duration.ofSeconds(1),
            () -> this.fullBackupWithResponse(azureStorageBlobContainerUri, requestOptions),
            new SyncDefaultPollingStrategy<>(new PollingStrategyOptions(this.getHttpPipeline())

                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.getServiceVersion().getVersion())),
            TypeReference.createInstance(BinaryData.class), TypeReference.createInstance(BinaryData.class));
    }

    /**
     * Creates a full backup using a user-provided SAS token to an Azure blob storage container.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     storageResourceUri: String (Required)
     *     token: String (Optional)
     *     useManagedIdentity: Boolean (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     status: String(InProgress/Succeeded/Canceled/Failed) (Optional)
     *     statusDetails: String (Optional)
     *     error (Optional): {
     *         code: String (Optional)
     *         message: String (Optional)
     *         innererror (Optional): (recursive schema, see innererror above)
     *     }
     *     startTime: Long (Optional)
     *     endTime: Long (Optional)
     *     jobId: String (Optional)
     *     azureStorageBlobContainerUri: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param azureStorageBlobContainerUri Azure blob shared access signature token pointing to a valid Azure blob
     * container where full backup needs to be stored. This token needs to be valid for at least next 24 hours from the
     * time of making this call.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of full backup operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<FullBackupOperation, FullBackupOperation>
        beginFullBackupWithModelAsync(BinaryData azureStorageBlobContainerUri, RequestOptions requestOptions) {
        return PollerFlux.create(Duration.ofSeconds(1),
            () -> this.fullBackupWithResponseAsync(azureStorageBlobContainerUri, requestOptions),
            new DefaultPollingStrategy<>(new PollingStrategyOptions(this.getHttpPipeline())

                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.getServiceVersion().getVersion())),
            TypeReference.createInstance(FullBackupOperation.class),
            TypeReference.createInstance(FullBackupOperation.class));
    }

    /**
     * Creates a full backup using a user-provided SAS token to an Azure blob storage container.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     storageResourceUri: String (Required)
     *     token: String (Optional)
     *     useManagedIdentity: Boolean (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     status: String(InProgress/Succeeded/Canceled/Failed) (Optional)
     *     statusDetails: String (Optional)
     *     error (Optional): {
     *         code: String (Optional)
     *         message: String (Optional)
     *         innererror (Optional): (recursive schema, see innererror above)
     *     }
     *     startTime: Long (Optional)
     *     endTime: Long (Optional)
     *     jobId: String (Optional)
     *     azureStorageBlobContainerUri: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param azureStorageBlobContainerUri Azure blob shared access signature token pointing to a valid Azure blob
     * container where full backup needs to be stored. This token needs to be valid for at least next 24 hours from the
     * time of making this call.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of full backup operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<FullBackupOperation, FullBackupOperation>
        beginFullBackupWithModel(BinaryData azureStorageBlobContainerUri, RequestOptions requestOptions) {
        return SyncPoller.createPoller(Duration.ofSeconds(1),
            () -> this.fullBackupWithResponse(azureStorageBlobContainerUri, requestOptions),
            new SyncDefaultPollingStrategy<>(new PollingStrategyOptions(this.getHttpPipeline())

                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.getServiceVersion().getVersion())),
            TypeReference.createInstance(FullBackupOperation.class),
            TypeReference.createInstance(FullBackupOperation.class));
    }

    /**
     * Pre-backup operation for checking whether the customer can perform a full backup operation.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     storageResourceUri: String (Optional)
     *     token: String (Optional)
     *     useManagedIdentity: Boolean (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     status: String(InProgress/Succeeded/Canceled/Failed) (Optional)
     *     statusDetails: String (Optional)
     *     error (Optional): {
     *         code: String (Optional)
     *         message: String (Optional)
     *         innererror (Optional): (recursive schema, see innererror above)
     *     }
     *     startTime: Long (Optional)
     *     endTime: Long (Optional)
     *     jobId: String (Optional)
     *     azureStorageBlobContainerUri: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param preBackupOperationParameters Optional parameters to validate prior to performing a full backup operation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return full backup operation along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> preFullBackupWithResponseAsync(BinaryData preBackupOperationParameters,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.preFullBackup(this.getVaultBaseUrl(), this.getServiceVersion().getVersion(),
                contentType, accept, preBackupOperationParameters, requestOptions, context));
    }

    /**
     * Pre-backup operation for checking whether the customer can perform a full backup operation.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     storageResourceUri: String (Optional)
     *     token: String (Optional)
     *     useManagedIdentity: Boolean (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     status: String(InProgress/Succeeded/Canceled/Failed) (Optional)
     *     statusDetails: String (Optional)
     *     error (Optional): {
     *         code: String (Optional)
     *         message: String (Optional)
     *         innererror (Optional): (recursive schema, see innererror above)
     *     }
     *     startTime: Long (Optional)
     *     endTime: Long (Optional)
     *     jobId: String (Optional)
     *     azureStorageBlobContainerUri: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param preBackupOperationParameters Optional parameters to validate prior to performing a full backup operation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return full backup operation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> preFullBackupWithResponse(BinaryData preBackupOperationParameters,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.preFullBackupSync(this.getVaultBaseUrl(), this.getServiceVersion().getVersion(), contentType,
            accept, preBackupOperationParameters, requestOptions, Context.NONE);
    }

    /**
     * Pre-backup operation for checking whether the customer can perform a full backup operation.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     storageResourceUri: String (Optional)
     *     token: String (Optional)
     *     useManagedIdentity: Boolean (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     status: String(InProgress/Succeeded/Canceled/Failed) (Optional)
     *     statusDetails: String (Optional)
     *     error (Optional): {
     *         code: String (Optional)
     *         message: String (Optional)
     *         innererror (Optional): (recursive schema, see innererror above)
     *     }
     *     startTime: Long (Optional)
     *     endTime: Long (Optional)
     *     jobId: String (Optional)
     *     azureStorageBlobContainerUri: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param preBackupOperationParameters Optional parameters to validate prior to performing a full backup operation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of full backup operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginPreFullBackupAsync(BinaryData preBackupOperationParameters,
        RequestOptions requestOptions) {
        return PollerFlux.create(Duration.ofSeconds(1),
            () -> this.preFullBackupWithResponseAsync(preBackupOperationParameters, requestOptions),
            new DefaultPollingStrategy<>(new PollingStrategyOptions(this.getHttpPipeline())

                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.getServiceVersion().getVersion())),
            TypeReference.createInstance(BinaryData.class), TypeReference.createInstance(BinaryData.class));
    }

    /**
     * Pre-backup operation for checking whether the customer can perform a full backup operation.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     storageResourceUri: String (Optional)
     *     token: String (Optional)
     *     useManagedIdentity: Boolean (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     status: String(InProgress/Succeeded/Canceled/Failed) (Optional)
     *     statusDetails: String (Optional)
     *     error (Optional): {
     *         code: String (Optional)
     *         message: String (Optional)
     *         innererror (Optional): (recursive schema, see innererror above)
     *     }
     *     startTime: Long (Optional)
     *     endTime: Long (Optional)
     *     jobId: String (Optional)
     *     azureStorageBlobContainerUri: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param preBackupOperationParameters Optional parameters to validate prior to performing a full backup operation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of full backup operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginPreFullBackup(BinaryData preBackupOperationParameters,
        RequestOptions requestOptions) {
        return SyncPoller.createPoller(Duration.ofSeconds(1),
            () -> this.preFullBackupWithResponse(preBackupOperationParameters, requestOptions),
            new SyncDefaultPollingStrategy<>(new PollingStrategyOptions(this.getHttpPipeline())

                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.getServiceVersion().getVersion())),
            TypeReference.createInstance(BinaryData.class), TypeReference.createInstance(BinaryData.class));
    }

    /**
     * Pre-backup operation for checking whether the customer can perform a full backup operation.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     storageResourceUri: String (Optional)
     *     token: String (Optional)
     *     useManagedIdentity: Boolean (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     status: String(InProgress/Succeeded/Canceled/Failed) (Optional)
     *     statusDetails: String (Optional)
     *     error (Optional): {
     *         code: String (Optional)
     *         message: String (Optional)
     *         innererror (Optional): (recursive schema, see innererror above)
     *     }
     *     startTime: Long (Optional)
     *     endTime: Long (Optional)
     *     jobId: String (Optional)
     *     azureStorageBlobContainerUri: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param preBackupOperationParameters Optional parameters to validate prior to performing a full backup operation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of full backup operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<FullBackupOperation, FullBackupOperation>
        beginPreFullBackupWithModelAsync(BinaryData preBackupOperationParameters, RequestOptions requestOptions) {
        return PollerFlux.create(Duration.ofSeconds(1),
            () -> this.preFullBackupWithResponseAsync(preBackupOperationParameters, requestOptions),
            new DefaultPollingStrategy<>(new PollingStrategyOptions(this.getHttpPipeline())

                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.getServiceVersion().getVersion())),
            TypeReference.createInstance(FullBackupOperation.class),
            TypeReference.createInstance(FullBackupOperation.class));
    }

    /**
     * Pre-backup operation for checking whether the customer can perform a full backup operation.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     storageResourceUri: String (Optional)
     *     token: String (Optional)
     *     useManagedIdentity: Boolean (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     status: String(InProgress/Succeeded/Canceled/Failed) (Optional)
     *     statusDetails: String (Optional)
     *     error (Optional): {
     *         code: String (Optional)
     *         message: String (Optional)
     *         innererror (Optional): (recursive schema, see innererror above)
     *     }
     *     startTime: Long (Optional)
     *     endTime: Long (Optional)
     *     jobId: String (Optional)
     *     azureStorageBlobContainerUri: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param preBackupOperationParameters Optional parameters to validate prior to performing a full backup operation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of full backup operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<FullBackupOperation, FullBackupOperation>
        beginPreFullBackupWithModel(BinaryData preBackupOperationParameters, RequestOptions requestOptions) {
        return SyncPoller.createPoller(Duration.ofSeconds(1),
            () -> this.preFullBackupWithResponse(preBackupOperationParameters, requestOptions),
            new SyncDefaultPollingStrategy<>(new PollingStrategyOptions(this.getHttpPipeline())

                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.getServiceVersion().getVersion())),
            TypeReference.createInstance(FullBackupOperation.class),
            TypeReference.createInstance(FullBackupOperation.class));
    }

    /**
     * Returns the status of restore operation.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     status: String(InProgress/Succeeded/Canceled/Failed) (Optional)
     *     statusDetails: String (Optional)
     *     error (Optional): {
     *         code: String (Optional)
     *         message: String (Optional)
     *         innererror (Optional): (recursive schema, see innererror above)
     *     }
     *     jobId: String (Optional)
     *     startTime: Long (Optional)
     *     endTime: Long (Optional)
     * }
     * }
     * </pre>
     * 
     * @param jobId The Job Id returned part of the restore operation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return restore operation along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> restoreStatusWithResponseAsync(String jobId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.restoreStatus(this.getVaultBaseUrl(),
            this.getServiceVersion().getVersion(), jobId, accept, requestOptions, context));
    }

    /**
     * Returns the status of restore operation.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     status: String(InProgress/Succeeded/Canceled/Failed) (Optional)
     *     statusDetails: String (Optional)
     *     error (Optional): {
     *         code: String (Optional)
     *         message: String (Optional)
     *         innererror (Optional): (recursive schema, see innererror above)
     *     }
     *     jobId: String (Optional)
     *     startTime: Long (Optional)
     *     endTime: Long (Optional)
     * }
     * }
     * </pre>
     * 
     * @param jobId The Job Id returned part of the restore operation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return restore operation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> restoreStatusWithResponse(String jobId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.restoreStatusSync(this.getVaultBaseUrl(), this.getServiceVersion().getVersion(), jobId, accept,
            requestOptions, Context.NONE);
    }

    /**
     * Pre-restore operation for checking whether the customer can perform a full restore operation.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     sasTokenParameters (Optional): {
     *         storageResourceUri: String (Required)
     *         token: String (Optional)
     *         useManagedIdentity: Boolean (Optional)
     *     }
     *     folderToRestore: String (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     status: String(InProgress/Succeeded/Canceled/Failed) (Optional)
     *     statusDetails: String (Optional)
     *     error (Optional): {
     *         code: String (Optional)
     *         message: String (Optional)
     *         innererror (Optional): (recursive schema, see innererror above)
     *     }
     *     jobId: String (Optional)
     *     startTime: Long (Optional)
     *     endTime: Long (Optional)
     * }
     * }
     * </pre>
     * 
     * @param preRestoreOperationParameters Optional pre restore parameters to validate prior to performing a full
     * restore operation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return restore operation along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> preFullRestoreOperationWithResponseAsync(BinaryData preRestoreOperationParameters,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.preFullRestoreOperation(this.getVaultBaseUrl(), this.getServiceVersion().getVersion(),
                contentType, accept, preRestoreOperationParameters, requestOptions, context));
    }

    /**
     * Pre-restore operation for checking whether the customer can perform a full restore operation.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     sasTokenParameters (Optional): {
     *         storageResourceUri: String (Required)
     *         token: String (Optional)
     *         useManagedIdentity: Boolean (Optional)
     *     }
     *     folderToRestore: String (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     status: String(InProgress/Succeeded/Canceled/Failed) (Optional)
     *     statusDetails: String (Optional)
     *     error (Optional): {
     *         code: String (Optional)
     *         message: String (Optional)
     *         innererror (Optional): (recursive schema, see innererror above)
     *     }
     *     jobId: String (Optional)
     *     startTime: Long (Optional)
     *     endTime: Long (Optional)
     * }
     * }
     * </pre>
     * 
     * @param preRestoreOperationParameters Optional pre restore parameters to validate prior to performing a full
     * restore operation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return restore operation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> preFullRestoreOperationWithResponse(BinaryData preRestoreOperationParameters,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.preFullRestoreOperationSync(this.getVaultBaseUrl(), this.getServiceVersion().getVersion(),
            contentType, accept, preRestoreOperationParameters, requestOptions, Context.NONE);
    }

    /**
     * Pre-restore operation for checking whether the customer can perform a full restore operation.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     sasTokenParameters (Optional): {
     *         storageResourceUri: String (Required)
     *         token: String (Optional)
     *         useManagedIdentity: Boolean (Optional)
     *     }
     *     folderToRestore: String (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     status: String(InProgress/Succeeded/Canceled/Failed) (Optional)
     *     statusDetails: String (Optional)
     *     error (Optional): {
     *         code: String (Optional)
     *         message: String (Optional)
     *         innererror (Optional): (recursive schema, see innererror above)
     *     }
     *     jobId: String (Optional)
     *     startTime: Long (Optional)
     *     endTime: Long (Optional)
     * }
     * }
     * </pre>
     * 
     * @param preRestoreOperationParameters Optional pre restore parameters to validate prior to performing a full
     * restore operation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of restore operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData>
        beginPreFullRestoreOperationAsync(BinaryData preRestoreOperationParameters, RequestOptions requestOptions) {
        return PollerFlux.create(Duration.ofSeconds(1),
            () -> this.preFullRestoreOperationWithResponseAsync(preRestoreOperationParameters, requestOptions),
            new DefaultPollingStrategy<>(new PollingStrategyOptions(this.getHttpPipeline())

                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.getServiceVersion().getVersion())),
            TypeReference.createInstance(BinaryData.class), TypeReference.createInstance(BinaryData.class));
    }

    /**
     * Pre-restore operation for checking whether the customer can perform a full restore operation.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     sasTokenParameters (Optional): {
     *         storageResourceUri: String (Required)
     *         token: String (Optional)
     *         useManagedIdentity: Boolean (Optional)
     *     }
     *     folderToRestore: String (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     status: String(InProgress/Succeeded/Canceled/Failed) (Optional)
     *     statusDetails: String (Optional)
     *     error (Optional): {
     *         code: String (Optional)
     *         message: String (Optional)
     *         innererror (Optional): (recursive schema, see innererror above)
     *     }
     *     jobId: String (Optional)
     *     startTime: Long (Optional)
     *     endTime: Long (Optional)
     * }
     * }
     * </pre>
     * 
     * @param preRestoreOperationParameters Optional pre restore parameters to validate prior to performing a full
     * restore operation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of restore operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginPreFullRestoreOperation(BinaryData preRestoreOperationParameters,
        RequestOptions requestOptions) {
        return SyncPoller.createPoller(Duration.ofSeconds(1),
            () -> this.preFullRestoreOperationWithResponse(preRestoreOperationParameters, requestOptions),
            new SyncDefaultPollingStrategy<>(new PollingStrategyOptions(this.getHttpPipeline())

                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.getServiceVersion().getVersion())),
            TypeReference.createInstance(BinaryData.class), TypeReference.createInstance(BinaryData.class));
    }

    /**
     * Pre-restore operation for checking whether the customer can perform a full restore operation.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     sasTokenParameters (Optional): {
     *         storageResourceUri: String (Required)
     *         token: String (Optional)
     *         useManagedIdentity: Boolean (Optional)
     *     }
     *     folderToRestore: String (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     status: String(InProgress/Succeeded/Canceled/Failed) (Optional)
     *     statusDetails: String (Optional)
     *     error (Optional): {
     *         code: String (Optional)
     *         message: String (Optional)
     *         innererror (Optional): (recursive schema, see innererror above)
     *     }
     *     jobId: String (Optional)
     *     startTime: Long (Optional)
     *     endTime: Long (Optional)
     * }
     * }
     * </pre>
     * 
     * @param preRestoreOperationParameters Optional pre restore parameters to validate prior to performing a full
     * restore operation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of restore operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<RestoreOperation, RestoreOperation> beginPreFullRestoreOperationWithModelAsync(
        BinaryData preRestoreOperationParameters, RequestOptions requestOptions) {
        return PollerFlux.create(Duration.ofSeconds(1),
            () -> this.preFullRestoreOperationWithResponseAsync(preRestoreOperationParameters, requestOptions),
            new DefaultPollingStrategy<>(new PollingStrategyOptions(this.getHttpPipeline())

                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.getServiceVersion().getVersion())),
            TypeReference.createInstance(RestoreOperation.class), TypeReference.createInstance(RestoreOperation.class));
    }

    /**
     * Pre-restore operation for checking whether the customer can perform a full restore operation.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     sasTokenParameters (Optional): {
     *         storageResourceUri: String (Required)
     *         token: String (Optional)
     *         useManagedIdentity: Boolean (Optional)
     *     }
     *     folderToRestore: String (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     status: String(InProgress/Succeeded/Canceled/Failed) (Optional)
     *     statusDetails: String (Optional)
     *     error (Optional): {
     *         code: String (Optional)
     *         message: String (Optional)
     *         innererror (Optional): (recursive schema, see innererror above)
     *     }
     *     jobId: String (Optional)
     *     startTime: Long (Optional)
     *     endTime: Long (Optional)
     * }
     * }
     * </pre>
     * 
     * @param preRestoreOperationParameters Optional pre restore parameters to validate prior to performing a full
     * restore operation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of restore operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<RestoreOperation, RestoreOperation>
        beginPreFullRestoreOperationWithModel(BinaryData preRestoreOperationParameters, RequestOptions requestOptions) {
        return SyncPoller.createPoller(Duration.ofSeconds(1),
            () -> this.preFullRestoreOperationWithResponse(preRestoreOperationParameters, requestOptions),
            new SyncDefaultPollingStrategy<>(new PollingStrategyOptions(this.getHttpPipeline())

                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.getServiceVersion().getVersion())),
            TypeReference.createInstance(RestoreOperation.class), TypeReference.createInstance(RestoreOperation.class));
    }

    /**
     * Restores all key materials using the SAS token pointing to a previously stored Azure Blob storage backup folder.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     sasTokenParameters (Required): {
     *         storageResourceUri: String (Required)
     *         token: String (Optional)
     *         useManagedIdentity: Boolean (Optional)
     *     }
     *     folderToRestore: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     status: String(InProgress/Succeeded/Canceled/Failed) (Optional)
     *     statusDetails: String (Optional)
     *     error (Optional): {
     *         code: String (Optional)
     *         message: String (Optional)
     *         innererror (Optional): (recursive schema, see innererror above)
     *     }
     *     jobId: String (Optional)
     *     startTime: Long (Optional)
     *     endTime: Long (Optional)
     * }
     * }
     * </pre>
     * 
     * @param restoreBlobDetails The Azure blob SAS token pointing to a folder where the previous successful full backup
     * was stored.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return restore operation along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> fullRestoreOperationWithResponseAsync(BinaryData restoreBlobDetails,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.fullRestoreOperation(this.getVaultBaseUrl(),
            this.getServiceVersion().getVersion(), contentType, accept, restoreBlobDetails, requestOptions, context));
    }

    /**
     * Restores all key materials using the SAS token pointing to a previously stored Azure Blob storage backup folder.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     sasTokenParameters (Required): {
     *         storageResourceUri: String (Required)
     *         token: String (Optional)
     *         useManagedIdentity: Boolean (Optional)
     *     }
     *     folderToRestore: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     status: String(InProgress/Succeeded/Canceled/Failed) (Optional)
     *     statusDetails: String (Optional)
     *     error (Optional): {
     *         code: String (Optional)
     *         message: String (Optional)
     *         innererror (Optional): (recursive schema, see innererror above)
     *     }
     *     jobId: String (Optional)
     *     startTime: Long (Optional)
     *     endTime: Long (Optional)
     * }
     * }
     * </pre>
     * 
     * @param restoreBlobDetails The Azure blob SAS token pointing to a folder where the previous successful full backup
     * was stored.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return restore operation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> fullRestoreOperationWithResponse(BinaryData restoreBlobDetails,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.fullRestoreOperationSync(this.getVaultBaseUrl(), this.getServiceVersion().getVersion(),
            contentType, accept, restoreBlobDetails, requestOptions, Context.NONE);
    }

    /**
     * Restores all key materials using the SAS token pointing to a previously stored Azure Blob storage backup folder.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     sasTokenParameters (Required): {
     *         storageResourceUri: String (Required)
     *         token: String (Optional)
     *         useManagedIdentity: Boolean (Optional)
     *     }
     *     folderToRestore: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     status: String(InProgress/Succeeded/Canceled/Failed) (Optional)
     *     statusDetails: String (Optional)
     *     error (Optional): {
     *         code: String (Optional)
     *         message: String (Optional)
     *         innererror (Optional): (recursive schema, see innererror above)
     *     }
     *     jobId: String (Optional)
     *     startTime: Long (Optional)
     *     endTime: Long (Optional)
     * }
     * }
     * </pre>
     * 
     * @param restoreBlobDetails The Azure blob SAS token pointing to a folder where the previous successful full backup
     * was stored.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of restore operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginFullRestoreOperationAsync(BinaryData restoreBlobDetails,
        RequestOptions requestOptions) {
        return PollerFlux.create(Duration.ofSeconds(1),
            () -> this.fullRestoreOperationWithResponseAsync(restoreBlobDetails, requestOptions),
            new DefaultPollingStrategy<>(new PollingStrategyOptions(this.getHttpPipeline())

                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.getServiceVersion().getVersion())),
            TypeReference.createInstance(BinaryData.class), TypeReference.createInstance(BinaryData.class));
    }

    /**
     * Restores all key materials using the SAS token pointing to a previously stored Azure Blob storage backup folder.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     sasTokenParameters (Required): {
     *         storageResourceUri: String (Required)
     *         token: String (Optional)
     *         useManagedIdentity: Boolean (Optional)
     *     }
     *     folderToRestore: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     status: String(InProgress/Succeeded/Canceled/Failed) (Optional)
     *     statusDetails: String (Optional)
     *     error (Optional): {
     *         code: String (Optional)
     *         message: String (Optional)
     *         innererror (Optional): (recursive schema, see innererror above)
     *     }
     *     jobId: String (Optional)
     *     startTime: Long (Optional)
     *     endTime: Long (Optional)
     * }
     * }
     * </pre>
     * 
     * @param restoreBlobDetails The Azure blob SAS token pointing to a folder where the previous successful full backup
     * was stored.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of restore operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginFullRestoreOperation(BinaryData restoreBlobDetails,
        RequestOptions requestOptions) {
        return SyncPoller.createPoller(Duration.ofSeconds(1),
            () -> this.fullRestoreOperationWithResponse(restoreBlobDetails, requestOptions),
            new SyncDefaultPollingStrategy<>(new PollingStrategyOptions(this.getHttpPipeline())

                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.getServiceVersion().getVersion())),
            TypeReference.createInstance(BinaryData.class), TypeReference.createInstance(BinaryData.class));
    }

    /**
     * Restores all key materials using the SAS token pointing to a previously stored Azure Blob storage backup folder.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     sasTokenParameters (Required): {
     *         storageResourceUri: String (Required)
     *         token: String (Optional)
     *         useManagedIdentity: Boolean (Optional)
     *     }
     *     folderToRestore: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     status: String(InProgress/Succeeded/Canceled/Failed) (Optional)
     *     statusDetails: String (Optional)
     *     error (Optional): {
     *         code: String (Optional)
     *         message: String (Optional)
     *         innererror (Optional): (recursive schema, see innererror above)
     *     }
     *     jobId: String (Optional)
     *     startTime: Long (Optional)
     *     endTime: Long (Optional)
     * }
     * }
     * </pre>
     * 
     * @param restoreBlobDetails The Azure blob SAS token pointing to a folder where the previous successful full backup
     * was stored.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of restore operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<RestoreOperation, RestoreOperation>
        beginFullRestoreOperationWithModelAsync(BinaryData restoreBlobDetails, RequestOptions requestOptions) {
        return PollerFlux.create(Duration.ofSeconds(1),
            () -> this.fullRestoreOperationWithResponseAsync(restoreBlobDetails, requestOptions),
            new DefaultPollingStrategy<>(new PollingStrategyOptions(this.getHttpPipeline())

                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.getServiceVersion().getVersion())),
            TypeReference.createInstance(RestoreOperation.class), TypeReference.createInstance(RestoreOperation.class));
    }

    /**
     * Restores all key materials using the SAS token pointing to a previously stored Azure Blob storage backup folder.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     sasTokenParameters (Required): {
     *         storageResourceUri: String (Required)
     *         token: String (Optional)
     *         useManagedIdentity: Boolean (Optional)
     *     }
     *     folderToRestore: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     status: String(InProgress/Succeeded/Canceled/Failed) (Optional)
     *     statusDetails: String (Optional)
     *     error (Optional): {
     *         code: String (Optional)
     *         message: String (Optional)
     *         innererror (Optional): (recursive schema, see innererror above)
     *     }
     *     jobId: String (Optional)
     *     startTime: Long (Optional)
     *     endTime: Long (Optional)
     * }
     * }
     * </pre>
     * 
     * @param restoreBlobDetails The Azure blob SAS token pointing to a folder where the previous successful full backup
     * was stored.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of restore operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<RestoreOperation, RestoreOperation>
        beginFullRestoreOperationWithModel(BinaryData restoreBlobDetails, RequestOptions requestOptions) {
        return SyncPoller.createPoller(Duration.ofSeconds(1),
            () -> this.fullRestoreOperationWithResponse(restoreBlobDetails, requestOptions),
            new SyncDefaultPollingStrategy<>(new PollingStrategyOptions(this.getHttpPipeline())

                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.getServiceVersion().getVersion())),
            TypeReference.createInstance(RestoreOperation.class), TypeReference.createInstance(RestoreOperation.class));
    }

    /**
     * Returns the status of the selective key restore operation.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     status: String(InProgress/Succeeded/Canceled/Failed) (Optional)
     *     statusDetails: String (Optional)
     *     error (Optional): {
     *         code: String (Optional)
     *         message: String (Optional)
     *         innererror (Optional): (recursive schema, see innererror above)
     *     }
     *     jobId: String (Optional)
     *     startTime: Long (Optional)
     *     endTime: Long (Optional)
     * }
     * }
     * </pre>
     * 
     * @param jobId The Job Id returned part of the restore operation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return selective Key Restore operation along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> selectiveKeyRestoreStatusWithResponseAsync(String jobId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.selectiveKeyRestoreStatus(this.getVaultBaseUrl(),
            this.getServiceVersion().getVersion(), jobId, accept, requestOptions, context));
    }

    /**
     * Returns the status of the selective key restore operation.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     status: String(InProgress/Succeeded/Canceled/Failed) (Optional)
     *     statusDetails: String (Optional)
     *     error (Optional): {
     *         code: String (Optional)
     *         message: String (Optional)
     *         innererror (Optional): (recursive schema, see innererror above)
     *     }
     *     jobId: String (Optional)
     *     startTime: Long (Optional)
     *     endTime: Long (Optional)
     * }
     * }
     * </pre>
     * 
     * @param jobId The Job Id returned part of the restore operation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return selective Key Restore operation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> selectiveKeyRestoreStatusWithResponse(String jobId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.selectiveKeyRestoreStatusSync(this.getVaultBaseUrl(), this.getServiceVersion().getVersion(),
            jobId, accept, requestOptions, Context.NONE);
    }

    /**
     * Restores all key versions of a given key using user supplied SAS token pointing to a previously stored Azure Blob
     * storage backup folder.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     sasTokenParameters (Required): {
     *         storageResourceUri: String (Required)
     *         token: String (Optional)
     *         useManagedIdentity: Boolean (Optional)
     *     }
     *     folder: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     status: String(InProgress/Succeeded/Canceled/Failed) (Optional)
     *     statusDetails: String (Optional)
     *     error (Optional): {
     *         code: String (Optional)
     *         message: String (Optional)
     *         innererror (Optional): (recursive schema, see innererror above)
     *     }
     *     jobId: String (Optional)
     *     startTime: Long (Optional)
     *     endTime: Long (Optional)
     * }
     * }
     * </pre>
     * 
     * @param keyName The name of the key to be restored from the user supplied backup.
     * @param restoreBlobDetails The Azure blob SAS token pointing to a folder where the previous successful full backup
     * was stored.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return selective Key Restore operation along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> selectiveKeyRestoreOperationWithResponseAsync(String keyName,
        BinaryData restoreBlobDetails, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.selectiveKeyRestoreOperation(this.getVaultBaseUrl(),
            this.getServiceVersion().getVersion(), keyName, contentType, accept, restoreBlobDetails, requestOptions,
            context));
    }

    /**
     * Restores all key versions of a given key using user supplied SAS token pointing to a previously stored Azure Blob
     * storage backup folder.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     sasTokenParameters (Required): {
     *         storageResourceUri: String (Required)
     *         token: String (Optional)
     *         useManagedIdentity: Boolean (Optional)
     *     }
     *     folder: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     status: String(InProgress/Succeeded/Canceled/Failed) (Optional)
     *     statusDetails: String (Optional)
     *     error (Optional): {
     *         code: String (Optional)
     *         message: String (Optional)
     *         innererror (Optional): (recursive schema, see innererror above)
     *     }
     *     jobId: String (Optional)
     *     startTime: Long (Optional)
     *     endTime: Long (Optional)
     * }
     * }
     * </pre>
     * 
     * @param keyName The name of the key to be restored from the user supplied backup.
     * @param restoreBlobDetails The Azure blob SAS token pointing to a folder where the previous successful full backup
     * was stored.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return selective Key Restore operation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> selectiveKeyRestoreOperationWithResponse(String keyName, BinaryData restoreBlobDetails,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.selectiveKeyRestoreOperationSync(this.getVaultBaseUrl(), this.getServiceVersion().getVersion(),
            keyName, contentType, accept, restoreBlobDetails, requestOptions, Context.NONE);
    }

    /**
     * Restores all key versions of a given key using user supplied SAS token pointing to a previously stored Azure Blob
     * storage backup folder.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     sasTokenParameters (Required): {
     *         storageResourceUri: String (Required)
     *         token: String (Optional)
     *         useManagedIdentity: Boolean (Optional)
     *     }
     *     folder: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     status: String(InProgress/Succeeded/Canceled/Failed) (Optional)
     *     statusDetails: String (Optional)
     *     error (Optional): {
     *         code: String (Optional)
     *         message: String (Optional)
     *         innererror (Optional): (recursive schema, see innererror above)
     *     }
     *     jobId: String (Optional)
     *     startTime: Long (Optional)
     *     endTime: Long (Optional)
     * }
     * }
     * </pre>
     * 
     * @param keyName The name of the key to be restored from the user supplied backup.
     * @param restoreBlobDetails The Azure blob SAS token pointing to a folder where the previous successful full backup
     * was stored.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of selective Key Restore operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginSelectiveKeyRestoreOperationAsync(String keyName,
        BinaryData restoreBlobDetails, RequestOptions requestOptions) {
        return PollerFlux.create(Duration.ofSeconds(1),
            () -> this.selectiveKeyRestoreOperationWithResponseAsync(keyName, restoreBlobDetails, requestOptions),
            new DefaultPollingStrategy<>(new PollingStrategyOptions(this.getHttpPipeline())

                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.getServiceVersion().getVersion())),
            TypeReference.createInstance(BinaryData.class), TypeReference.createInstance(BinaryData.class));
    }

    /**
     * Restores all key versions of a given key using user supplied SAS token pointing to a previously stored Azure Blob
     * storage backup folder.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     sasTokenParameters (Required): {
     *         storageResourceUri: String (Required)
     *         token: String (Optional)
     *         useManagedIdentity: Boolean (Optional)
     *     }
     *     folder: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     status: String(InProgress/Succeeded/Canceled/Failed) (Optional)
     *     statusDetails: String (Optional)
     *     error (Optional): {
     *         code: String (Optional)
     *         message: String (Optional)
     *         innererror (Optional): (recursive schema, see innererror above)
     *     }
     *     jobId: String (Optional)
     *     startTime: Long (Optional)
     *     endTime: Long (Optional)
     * }
     * }
     * </pre>
     * 
     * @param keyName The name of the key to be restored from the user supplied backup.
     * @param restoreBlobDetails The Azure blob SAS token pointing to a folder where the previous successful full backup
     * was stored.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of selective Key Restore operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginSelectiveKeyRestoreOperation(String keyName,
        BinaryData restoreBlobDetails, RequestOptions requestOptions) {
        return SyncPoller.createPoller(Duration.ofSeconds(1),
            () -> this.selectiveKeyRestoreOperationWithResponse(keyName, restoreBlobDetails, requestOptions),
            new SyncDefaultPollingStrategy<>(new PollingStrategyOptions(this.getHttpPipeline())

                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.getServiceVersion().getVersion())),
            TypeReference.createInstance(BinaryData.class), TypeReference.createInstance(BinaryData.class));
    }

    /**
     * Restores all key versions of a given key using user supplied SAS token pointing to a previously stored Azure Blob
     * storage backup folder.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     sasTokenParameters (Required): {
     *         storageResourceUri: String (Required)
     *         token: String (Optional)
     *         useManagedIdentity: Boolean (Optional)
     *     }
     *     folder: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     status: String(InProgress/Succeeded/Canceled/Failed) (Optional)
     *     statusDetails: String (Optional)
     *     error (Optional): {
     *         code: String (Optional)
     *         message: String (Optional)
     *         innererror (Optional): (recursive schema, see innererror above)
     *     }
     *     jobId: String (Optional)
     *     startTime: Long (Optional)
     *     endTime: Long (Optional)
     * }
     * }
     * </pre>
     * 
     * @param keyName The name of the key to be restored from the user supplied backup.
     * @param restoreBlobDetails The Azure blob SAS token pointing to a folder where the previous successful full backup
     * was stored.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of selective Key Restore operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<SelectiveKeyRestoreOperation, SelectiveKeyRestoreOperation>
        beginSelectiveKeyRestoreOperationWithModelAsync(String keyName, BinaryData restoreBlobDetails,
            RequestOptions requestOptions) {
        return PollerFlux.create(Duration.ofSeconds(1),
            () -> this.selectiveKeyRestoreOperationWithResponseAsync(keyName, restoreBlobDetails, requestOptions),
            new DefaultPollingStrategy<>(new PollingStrategyOptions(this.getHttpPipeline())

                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.getServiceVersion().getVersion())),
            TypeReference.createInstance(SelectiveKeyRestoreOperation.class),
            TypeReference.createInstance(SelectiveKeyRestoreOperation.class));
    }

    /**
     * Restores all key versions of a given key using user supplied SAS token pointing to a previously stored Azure Blob
     * storage backup folder.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     sasTokenParameters (Required): {
     *         storageResourceUri: String (Required)
     *         token: String (Optional)
     *         useManagedIdentity: Boolean (Optional)
     *     }
     *     folder: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     status: String(InProgress/Succeeded/Canceled/Failed) (Optional)
     *     statusDetails: String (Optional)
     *     error (Optional): {
     *         code: String (Optional)
     *         message: String (Optional)
     *         innererror (Optional): (recursive schema, see innererror above)
     *     }
     *     jobId: String (Optional)
     *     startTime: Long (Optional)
     *     endTime: Long (Optional)
     * }
     * }
     * </pre>
     * 
     * @param keyName The name of the key to be restored from the user supplied backup.
     * @param restoreBlobDetails The Azure blob SAS token pointing to a folder where the previous successful full backup
     * was stored.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of selective Key Restore operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<SelectiveKeyRestoreOperation, SelectiveKeyRestoreOperation>
        beginSelectiveKeyRestoreOperationWithModel(String keyName, BinaryData restoreBlobDetails,
            RequestOptions requestOptions) {
        return SyncPoller.createPoller(Duration.ofSeconds(1),
            () -> this.selectiveKeyRestoreOperationWithResponse(keyName, restoreBlobDetails, requestOptions),
            new SyncDefaultPollingStrategy<>(new PollingStrategyOptions(this.getHttpPipeline())

                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.getServiceVersion().getVersion())),
            TypeReference.createInstance(SelectiveKeyRestoreOperation.class),
            TypeReference.createInstance(SelectiveKeyRestoreOperation.class));
    }

    /**
     * Updates key vault account setting, stores it, then returns the setting name and value to the client.
     * 
     * Description of the pool setting to be updated.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     value: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     value: String (Required)
     *     type: String(boolean) (Optional)
     * }
     * }
     * </pre>
     * 
     * @param settingName The name of the account setting. Must be a valid settings option.
     * @param parameters The parameters to update an account setting.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a Key Vault account setting along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> updateSettingWithResponseAsync(String settingName, BinaryData parameters,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.updateSetting(this.getVaultBaseUrl(), this.getServiceVersion().getVersion(),
                settingName, contentType, accept, parameters, requestOptions, context));
    }

    /**
     * Updates key vault account setting, stores it, then returns the setting name and value to the client.
     * 
     * Description of the pool setting to be updated.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     value: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     value: String (Required)
     *     type: String(boolean) (Optional)
     * }
     * }
     * </pre>
     * 
     * @param settingName The name of the account setting. Must be a valid settings option.
     * @param parameters The parameters to update an account setting.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a Key Vault account setting along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> updateSettingWithResponse(String settingName, BinaryData parameters,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.updateSettingSync(this.getVaultBaseUrl(), this.getServiceVersion().getVersion(), settingName,
            contentType, accept, parameters, requestOptions, Context.NONE);
    }

    /**
     * Get specified account setting object.
     * 
     * Retrieves the setting object of a specified setting name.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     value: String (Required)
     *     type: String(boolean) (Optional)
     * }
     * }
     * </pre>
     * 
     * @param settingName The name of the account setting. Must be a valid settings option.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return specified account setting object.
     * 
     * Retrieves the setting object of a specified setting name along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getSettingWithResponseAsync(String settingName, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getSetting(this.getVaultBaseUrl(),
            this.getServiceVersion().getVersion(), settingName, accept, requestOptions, context));
    }

    /**
     * Get specified account setting object.
     * 
     * Retrieves the setting object of a specified setting name.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     value: String (Required)
     *     type: String(boolean) (Optional)
     * }
     * }
     * </pre>
     * 
     * @param settingName The name of the account setting. Must be a valid settings option.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return specified account setting object.
     * 
     * Retrieves the setting object of a specified setting name along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getSettingWithResponse(String settingName, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getSettingSync(this.getVaultBaseUrl(), this.getServiceVersion().getVersion(), settingName,
            accept, requestOptions, Context.NONE);
    }

    /**
     * List account settings.
     * 
     * Retrieves a list of all the available account settings that can be configured.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     settings (Optional): [
     *          (Optional){
     *             name: String (Required)
     *             value: String (Required)
     *             type: String(boolean) (Optional)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the settings list result along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getSettingsWithResponseAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getSettings(this.getVaultBaseUrl(),
            this.getServiceVersion().getVersion(), accept, requestOptions, context));
    }

    /**
     * List account settings.
     * 
     * Retrieves a list of all the available account settings that can be configured.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     settings (Optional): [
     *          (Optional){
     *             name: String (Required)
     *             value: String (Required)
     *             type: String(boolean) (Optional)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the settings list result along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getSettingsWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getSettingsSync(this.getVaultBaseUrl(), this.getServiceVersion().getVersion(), accept,
            requestOptions, Context.NONE);
    }
}
