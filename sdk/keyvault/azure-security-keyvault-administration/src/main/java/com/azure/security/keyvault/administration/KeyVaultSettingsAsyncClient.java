// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.security.keyvault.administration;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.Response;
import com.azure.security.keyvault.administration.implementation.KeyVaultSettingsClientImpl;
import com.azure.security.keyvault.administration.implementation.models.KeyVaultErrorException;
import com.azure.security.keyvault.administration.implementation.models.Setting;
import com.azure.security.keyvault.administration.implementation.models.SettingsListResult;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the asynchronous KeyVaultSettingsClient type. */
@ServiceClient(builder = KeyVaultSettingsClientBuilder.class, isAsync = true)
public final class KeyVaultSettingsAsyncClient {
    @Generated private final KeyVaultSettingsClientImpl serviceClient;

    /**
     * Initializes an instance of KeyVaultSettingsAsyncClient class.
     *
     * @param serviceClient the service client implementation.
     */
    @Generated
    KeyVaultSettingsAsyncClient(KeyVaultSettingsClientImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Updates key vault account setting, stores it, then returns the setting name and value to the client.
     *
     * <p>Description of the pool setting to be updated.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param settingName The name of the account setting. Must be a valid settings option.
     * @param value The value of the pool setting.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Setting>> createOrUpdateSettingWithResponse(
            String vaultBaseUrl, String settingName, String value) {
        return this.serviceClient.createOrUpdateSettingWithResponseAsync(vaultBaseUrl, settingName, value);
    }

    /**
     * Updates key vault account setting, stores it, then returns the setting name and value to the client.
     *
     * <p>Description of the pool setting to be updated.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param settingName The name of the account setting. Must be a valid settings option.
     * @param value The value of the pool setting.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Setting> createOrUpdateSetting(String vaultBaseUrl, String settingName, String value) {
        return this.serviceClient.createOrUpdateSettingAsync(vaultBaseUrl, settingName, value);
    }

    /**
     * Get specified account setting value.
     *
     * <p>Retrieves the value of a specified, value account setting.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param settingName The name of the account setting. Must be a valid settings option.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Setting>> getSettingWithResponse(String vaultBaseUrl, String settingName) {
        return this.serviceClient.getSettingWithResponseAsync(vaultBaseUrl, settingName);
    }

    /**
     * Get specified account setting value.
     *
     * <p>Retrieves the value of a specified, value account setting.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param settingName The name of the account setting. Must be a valid settings option.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Setting> getSetting(String vaultBaseUrl, String settingName) {
        return this.serviceClient.getSettingAsync(vaultBaseUrl, settingName);
    }

    /**
     * List account settings.
     *
     * <p>Retrieves a list of all the available account settings that can be configured.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the settings list result along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<SettingsListResult>> getSettingsWithResponse(String vaultBaseUrl) {
        return this.serviceClient.getSettingsWithResponseAsync(vaultBaseUrl);
    }

    /**
     * List account settings.
     *
     * <p>Retrieves a list of all the available account settings that can be configured.
     *
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the settings list result on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SettingsListResult> getSettings(String vaultBaseUrl) {
        return this.serviceClient.getSettingsAsync(vaultBaseUrl);
    }
}
