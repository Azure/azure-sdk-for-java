// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.security.keyvault.administration.implementation.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.security.keyvault.administration.models.KeyVaultRoleScope;
import java.io.IOException;

/**
 * Role assignment properties with scope.
 */
@Immutable
public final class RoleAssignmentPropertiesWithScope implements JsonSerializable<RoleAssignmentPropertiesWithScope> {

    /*
     * The role scope.
     */
    @Generated
    private KeyVaultRoleScope scope;

    /*
     * The role definition ID.
     */
    @Generated
    private String roleDefinitionId;

    /*
     * The principal ID.
     */
    @Generated
    private String principalId;

    /**
     * Creates an instance of RoleAssignmentPropertiesWithScope class.
     */
    @Generated
    private RoleAssignmentPropertiesWithScope() {
    }

    /**
     * Get the scope property: The role scope.
     *
     * @return the scope value.
     */
    @Generated
    public KeyVaultRoleScope getScope() {
        return this.scope;
    }

    /**
     * Get the roleDefinitionId property: The role definition ID.
     *
     * @return the roleDefinitionId value.
     */
    @Generated
    public String getRoleDefinitionId() {
        return this.roleDefinitionId;
    }

    /**
     * Get the principalId property: The principal ID.
     *
     * @return the principalId value.
     */
    @Generated
    public String getPrincipalId() {
        return this.principalId;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("scope", this.scope == null ? null : this.scope.toString());
        jsonWriter.writeStringField("roleDefinitionId", this.roleDefinitionId);
        jsonWriter.writeStringField("principalId", this.principalId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RoleAssignmentPropertiesWithScope from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of RoleAssignmentPropertiesWithScope if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the RoleAssignmentPropertiesWithScope.
     */
    @Generated
    public static RoleAssignmentPropertiesWithScope fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RoleAssignmentPropertiesWithScope deserializedRoleAssignmentPropertiesWithScope
                = new RoleAssignmentPropertiesWithScope();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("scope".equals(fieldName)) {
                    deserializedRoleAssignmentPropertiesWithScope.scope
                        = KeyVaultRoleScope.fromString(reader.getString());
                } else if ("roleDefinitionId".equals(fieldName)) {
                    deserializedRoleAssignmentPropertiesWithScope.roleDefinitionId = reader.getString();
                } else if ("principalId".equals(fieldName)) {
                    deserializedRoleAssignmentPropertiesWithScope.principalId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedRoleAssignmentPropertiesWithScope;
        });
    }
}
