// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.security.keyvault.administration.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.security.keyvault.administration.KeyVaultAdministrationServiceVersion;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in RoleDefinitions.
 */
public final class RoleDefinitionsImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final RoleDefinitionsService service;

    /**
     * The service client containing this operation class.
     */
    private final KeyVaultAdministrationClientImpl client;

    /**
     * Initializes an instance of RoleDefinitionsImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    RoleDefinitionsImpl(KeyVaultAdministrationClientImpl client) {
        this.service
            = RestProxy.create(RoleDefinitionsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public KeyVaultAdministrationServiceVersion getServiceVersion() {
        return client.getServiceVersion();
    }

    /**
     * The interface defining all the services for KeyVaultAdministrationClientRoleDefinitions to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{vaultBaseUrl}")
    @ServiceInterface(name = "KeyVaultAdministrationClientRoleDe")
    public interface RoleDefinitionsService {
        @Delete("/{scope}/providers/Microsoft.Authorization/roleDefinitions/{roleDefinitionName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> delete(@HostParam("vaultBaseUrl") String vaultBaseUrl,
            @QueryParam("api-version") String apiVersion, @PathParam(value = "scope", encoded = true) String scope,
            @PathParam("roleDefinitionName") String roleDefinitionName, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Delete("/{scope}/providers/Microsoft.Authorization/roleDefinitions/{roleDefinitionName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> deleteSync(@HostParam("vaultBaseUrl") String vaultBaseUrl,
            @QueryParam("api-version") String apiVersion, @PathParam(value = "scope", encoded = true) String scope,
            @PathParam("roleDefinitionName") String roleDefinitionName, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Put("/{scope}/providers/Microsoft.Authorization/roleDefinitions/{roleDefinitionName}")
        @ExpectedResponses({ 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> createOrUpdate(@HostParam("vaultBaseUrl") String vaultBaseUrl,
            @QueryParam("api-version") String apiVersion, @PathParam(value = "scope", encoded = true) String scope,
            @PathParam("roleDefinitionName") String roleDefinitionName, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData parameters,
            RequestOptions requestOptions, Context context);

        @Put("/{scope}/providers/Microsoft.Authorization/roleDefinitions/{roleDefinitionName}")
        @ExpectedResponses({ 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createOrUpdateSync(@HostParam("vaultBaseUrl") String vaultBaseUrl,
            @QueryParam("api-version") String apiVersion, @PathParam(value = "scope", encoded = true) String scope,
            @PathParam("roleDefinitionName") String roleDefinitionName, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData parameters,
            RequestOptions requestOptions, Context context);

        @Get("/{scope}/providers/Microsoft.Authorization/roleDefinitions/{roleDefinitionName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> get(@HostParam("vaultBaseUrl") String vaultBaseUrl,
            @QueryParam("api-version") String apiVersion, @PathParam(value = "scope", encoded = true) String scope,
            @PathParam("roleDefinitionName") String roleDefinitionName, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/{scope}/providers/Microsoft.Authorization/roleDefinitions/{roleDefinitionName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getSync(@HostParam("vaultBaseUrl") String vaultBaseUrl,
            @QueryParam("api-version") String apiVersion, @PathParam(value = "scope", encoded = true) String scope,
            @PathParam("roleDefinitionName") String roleDefinitionName, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/{scope}/providers/Microsoft.Authorization/roleDefinitions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> list(@HostParam("vaultBaseUrl") String vaultBaseUrl,
            @QueryParam("api-version") String apiVersion, @PathParam(value = "scope", encoded = true) String scope,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/{scope}/providers/Microsoft.Authorization/roleDefinitions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listSync(@HostParam("vaultBaseUrl") String vaultBaseUrl,
            @QueryParam("api-version") String apiVersion, @PathParam(value = "scope", encoded = true) String scope,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listNext(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("vaultBaseUrl") String vaultBaseUrl, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listNextSync(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("vaultBaseUrl") String vaultBaseUrl, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);
    }

    /**
     * Deletes a custom role definition.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Optional)
     *     name: String (Optional)
     *     type: String(Microsoft.Authorization/roleDefinitions) (Optional)
     *     properties (Optional): {
     *         roleName: String (Optional)
     *         description: String (Optional)
     *         type: String(AKVBuiltInRole/CustomRole) (Optional)
     *         permissions (Optional): [
     *              (Optional){
     *                 actions (Optional): [
     *                     String (Optional)
     *                 ]
     *                 notActions (Optional): [
     *                     String (Optional)
     *                 ]
     *                 dataActions (Optional): [
     *                     String(Microsoft.KeyVaultAdministration/managedHsm/keys/read/action/Microsoft.KeyVaultAdministration/managedHsm/keys/write/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/read/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/recover/action/Microsoft.KeyVaultAdministration/managedHsm/keys/backup/action/Microsoft.KeyVaultAdministration/managedHsm/keys/restore/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/delete/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/read/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/write/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/read/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/write/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/delete/action/Microsoft.KeyVaultAdministration/managedHsm/keys/encrypt/action/Microsoft.KeyVaultAdministration/managedHsm/keys/decrypt/action/Microsoft.KeyVaultAdministration/managedHsm/keys/wrap/action/Microsoft.KeyVaultAdministration/managedHsm/keys/unwrap/action/Microsoft.KeyVaultAdministration/managedHsm/keys/sign/action/Microsoft.KeyVaultAdministration/managedHsm/keys/verify/action/Microsoft.KeyVaultAdministration/managedHsm/keys/create/Microsoft.KeyVaultAdministration/managedHsm/keys/delete/Microsoft.KeyVaultAdministration/managedHsm/keys/export/action/Microsoft.KeyVaultAdministration/managedHsm/keys/release/action/Microsoft.KeyVaultAdministration/managedHsm/keys/import/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/delete/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/download/action/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/download/read/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/upload/action/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/upload/read/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/transferkey/read/Microsoft.KeyVaultAdministration/managedHsm/backup/start/action/Microsoft.KeyVaultAdministration/managedHsm/restore/start/action/Microsoft.KeyVaultAdministration/managedHsm/backup/status/action/Microsoft.KeyVaultAdministration/managedHsm/restore/status/action/Microsoft.KeyVaultAdministration/managedHsm/rng/action) (Optional)
     *                 ]
     *                 notDataActions (Optional): [
     *                     String(Microsoft.KeyVaultAdministration/managedHsm/keys/read/action/Microsoft.KeyVaultAdministration/managedHsm/keys/write/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/read/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/recover/action/Microsoft.KeyVaultAdministration/managedHsm/keys/backup/action/Microsoft.KeyVaultAdministration/managedHsm/keys/restore/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/delete/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/read/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/write/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/read/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/write/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/delete/action/Microsoft.KeyVaultAdministration/managedHsm/keys/encrypt/action/Microsoft.KeyVaultAdministration/managedHsm/keys/decrypt/action/Microsoft.KeyVaultAdministration/managedHsm/keys/wrap/action/Microsoft.KeyVaultAdministration/managedHsm/keys/unwrap/action/Microsoft.KeyVaultAdministration/managedHsm/keys/sign/action/Microsoft.KeyVaultAdministration/managedHsm/keys/verify/action/Microsoft.KeyVaultAdministration/managedHsm/keys/create/Microsoft.KeyVaultAdministration/managedHsm/keys/delete/Microsoft.KeyVaultAdministration/managedHsm/keys/export/action/Microsoft.KeyVaultAdministration/managedHsm/keys/release/action/Microsoft.KeyVaultAdministration/managedHsm/keys/import/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/delete/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/download/action/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/download/read/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/upload/action/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/upload/read/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/transferkey/read/Microsoft.KeyVaultAdministration/managedHsm/backup/start/action/Microsoft.KeyVaultAdministration/managedHsm/restore/start/action/Microsoft.KeyVaultAdministration/managedHsm/backup/status/action/Microsoft.KeyVaultAdministration/managedHsm/restore/status/action/Microsoft.KeyVaultAdministration/managedHsm/rng/action) (Optional)
     *                 ]
     *             }
     *         ]
     *         assignableScopes (Optional): [
     *             String(///keys) (Optional)
     *         ]
     *     }
     * }
     * }
     * </pre>
     * 
     * @param scope The scope of the role definition to delete. Managed HSM only supports '/'.
     * @param roleDefinitionName The name (GUID) of the role definition to delete.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return role definition along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> deleteWithResponseAsync(String scope, String roleDefinitionName,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.delete(this.client.getVaultBaseUrl(),
            this.client.getServiceVersion().getVersion(), scope, roleDefinitionName, accept, requestOptions, context));
    }

    /**
     * Deletes a custom role definition.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Optional)
     *     name: String (Optional)
     *     type: String(Microsoft.Authorization/roleDefinitions) (Optional)
     *     properties (Optional): {
     *         roleName: String (Optional)
     *         description: String (Optional)
     *         type: String(AKVBuiltInRole/CustomRole) (Optional)
     *         permissions (Optional): [
     *              (Optional){
     *                 actions (Optional): [
     *                     String (Optional)
     *                 ]
     *                 notActions (Optional): [
     *                     String (Optional)
     *                 ]
     *                 dataActions (Optional): [
     *                     String(Microsoft.KeyVaultAdministration/managedHsm/keys/read/action/Microsoft.KeyVaultAdministration/managedHsm/keys/write/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/read/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/recover/action/Microsoft.KeyVaultAdministration/managedHsm/keys/backup/action/Microsoft.KeyVaultAdministration/managedHsm/keys/restore/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/delete/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/read/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/write/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/read/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/write/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/delete/action/Microsoft.KeyVaultAdministration/managedHsm/keys/encrypt/action/Microsoft.KeyVaultAdministration/managedHsm/keys/decrypt/action/Microsoft.KeyVaultAdministration/managedHsm/keys/wrap/action/Microsoft.KeyVaultAdministration/managedHsm/keys/unwrap/action/Microsoft.KeyVaultAdministration/managedHsm/keys/sign/action/Microsoft.KeyVaultAdministration/managedHsm/keys/verify/action/Microsoft.KeyVaultAdministration/managedHsm/keys/create/Microsoft.KeyVaultAdministration/managedHsm/keys/delete/Microsoft.KeyVaultAdministration/managedHsm/keys/export/action/Microsoft.KeyVaultAdministration/managedHsm/keys/release/action/Microsoft.KeyVaultAdministration/managedHsm/keys/import/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/delete/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/download/action/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/download/read/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/upload/action/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/upload/read/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/transferkey/read/Microsoft.KeyVaultAdministration/managedHsm/backup/start/action/Microsoft.KeyVaultAdministration/managedHsm/restore/start/action/Microsoft.KeyVaultAdministration/managedHsm/backup/status/action/Microsoft.KeyVaultAdministration/managedHsm/restore/status/action/Microsoft.KeyVaultAdministration/managedHsm/rng/action) (Optional)
     *                 ]
     *                 notDataActions (Optional): [
     *                     String(Microsoft.KeyVaultAdministration/managedHsm/keys/read/action/Microsoft.KeyVaultAdministration/managedHsm/keys/write/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/read/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/recover/action/Microsoft.KeyVaultAdministration/managedHsm/keys/backup/action/Microsoft.KeyVaultAdministration/managedHsm/keys/restore/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/delete/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/read/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/write/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/read/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/write/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/delete/action/Microsoft.KeyVaultAdministration/managedHsm/keys/encrypt/action/Microsoft.KeyVaultAdministration/managedHsm/keys/decrypt/action/Microsoft.KeyVaultAdministration/managedHsm/keys/wrap/action/Microsoft.KeyVaultAdministration/managedHsm/keys/unwrap/action/Microsoft.KeyVaultAdministration/managedHsm/keys/sign/action/Microsoft.KeyVaultAdministration/managedHsm/keys/verify/action/Microsoft.KeyVaultAdministration/managedHsm/keys/create/Microsoft.KeyVaultAdministration/managedHsm/keys/delete/Microsoft.KeyVaultAdministration/managedHsm/keys/export/action/Microsoft.KeyVaultAdministration/managedHsm/keys/release/action/Microsoft.KeyVaultAdministration/managedHsm/keys/import/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/delete/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/download/action/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/download/read/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/upload/action/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/upload/read/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/transferkey/read/Microsoft.KeyVaultAdministration/managedHsm/backup/start/action/Microsoft.KeyVaultAdministration/managedHsm/restore/start/action/Microsoft.KeyVaultAdministration/managedHsm/backup/status/action/Microsoft.KeyVaultAdministration/managedHsm/restore/status/action/Microsoft.KeyVaultAdministration/managedHsm/rng/action) (Optional)
     *                 ]
     *             }
     *         ]
     *         assignableScopes (Optional): [
     *             String(///keys) (Optional)
     *         ]
     *     }
     * }
     * }
     * </pre>
     * 
     * @param scope The scope of the role definition to delete. Managed HSM only supports '/'.
     * @param roleDefinitionName The name (GUID) of the role definition to delete.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return role definition along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> deleteWithResponse(String scope, String roleDefinitionName,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.deleteSync(this.client.getVaultBaseUrl(), this.client.getServiceVersion().getVersion(), scope,
            roleDefinitionName, accept, requestOptions, Context.NONE);
    }

    /**
     * Creates or updates a custom role definition.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     properties (Required): {
     *         roleName: String (Optional)
     *         description: String (Optional)
     *         type: String(AKVBuiltInRole/CustomRole) (Optional)
     *         permissions (Optional): [
     *              (Optional){
     *                 actions (Optional): [
     *                     String (Optional)
     *                 ]
     *                 notActions (Optional): [
     *                     String (Optional)
     *                 ]
     *                 dataActions (Optional): [
     *                     String(Microsoft.KeyVaultAdministration/managedHsm/keys/read/action/Microsoft.KeyVaultAdministration/managedHsm/keys/write/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/read/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/recover/action/Microsoft.KeyVaultAdministration/managedHsm/keys/backup/action/Microsoft.KeyVaultAdministration/managedHsm/keys/restore/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/delete/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/read/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/write/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/read/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/write/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/delete/action/Microsoft.KeyVaultAdministration/managedHsm/keys/encrypt/action/Microsoft.KeyVaultAdministration/managedHsm/keys/decrypt/action/Microsoft.KeyVaultAdministration/managedHsm/keys/wrap/action/Microsoft.KeyVaultAdministration/managedHsm/keys/unwrap/action/Microsoft.KeyVaultAdministration/managedHsm/keys/sign/action/Microsoft.KeyVaultAdministration/managedHsm/keys/verify/action/Microsoft.KeyVaultAdministration/managedHsm/keys/create/Microsoft.KeyVaultAdministration/managedHsm/keys/delete/Microsoft.KeyVaultAdministration/managedHsm/keys/export/action/Microsoft.KeyVaultAdministration/managedHsm/keys/release/action/Microsoft.KeyVaultAdministration/managedHsm/keys/import/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/delete/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/download/action/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/download/read/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/upload/action/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/upload/read/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/transferkey/read/Microsoft.KeyVaultAdministration/managedHsm/backup/start/action/Microsoft.KeyVaultAdministration/managedHsm/restore/start/action/Microsoft.KeyVaultAdministration/managedHsm/backup/status/action/Microsoft.KeyVaultAdministration/managedHsm/restore/status/action/Microsoft.KeyVaultAdministration/managedHsm/rng/action) (Optional)
     *                 ]
     *                 notDataActions (Optional): [
     *                     String(Microsoft.KeyVaultAdministration/managedHsm/keys/read/action/Microsoft.KeyVaultAdministration/managedHsm/keys/write/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/read/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/recover/action/Microsoft.KeyVaultAdministration/managedHsm/keys/backup/action/Microsoft.KeyVaultAdministration/managedHsm/keys/restore/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/delete/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/read/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/write/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/read/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/write/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/delete/action/Microsoft.KeyVaultAdministration/managedHsm/keys/encrypt/action/Microsoft.KeyVaultAdministration/managedHsm/keys/decrypt/action/Microsoft.KeyVaultAdministration/managedHsm/keys/wrap/action/Microsoft.KeyVaultAdministration/managedHsm/keys/unwrap/action/Microsoft.KeyVaultAdministration/managedHsm/keys/sign/action/Microsoft.KeyVaultAdministration/managedHsm/keys/verify/action/Microsoft.KeyVaultAdministration/managedHsm/keys/create/Microsoft.KeyVaultAdministration/managedHsm/keys/delete/Microsoft.KeyVaultAdministration/managedHsm/keys/export/action/Microsoft.KeyVaultAdministration/managedHsm/keys/release/action/Microsoft.KeyVaultAdministration/managedHsm/keys/import/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/delete/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/download/action/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/download/read/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/upload/action/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/upload/read/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/transferkey/read/Microsoft.KeyVaultAdministration/managedHsm/backup/start/action/Microsoft.KeyVaultAdministration/managedHsm/restore/start/action/Microsoft.KeyVaultAdministration/managedHsm/backup/status/action/Microsoft.KeyVaultAdministration/managedHsm/restore/status/action/Microsoft.KeyVaultAdministration/managedHsm/rng/action) (Optional)
     *                 ]
     *             }
     *         ]
     *         assignableScopes (Optional): [
     *             String(///keys) (Optional)
     *         ]
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Optional)
     *     name: String (Optional)
     *     type: String(Microsoft.Authorization/roleDefinitions) (Optional)
     *     properties (Optional): {
     *         roleName: String (Optional)
     *         description: String (Optional)
     *         type: String(AKVBuiltInRole/CustomRole) (Optional)
     *         permissions (Optional): [
     *              (Optional){
     *                 actions (Optional): [
     *                     String (Optional)
     *                 ]
     *                 notActions (Optional): [
     *                     String (Optional)
     *                 ]
     *                 dataActions (Optional): [
     *                     String(Microsoft.KeyVaultAdministration/managedHsm/keys/read/action/Microsoft.KeyVaultAdministration/managedHsm/keys/write/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/read/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/recover/action/Microsoft.KeyVaultAdministration/managedHsm/keys/backup/action/Microsoft.KeyVaultAdministration/managedHsm/keys/restore/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/delete/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/read/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/write/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/read/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/write/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/delete/action/Microsoft.KeyVaultAdministration/managedHsm/keys/encrypt/action/Microsoft.KeyVaultAdministration/managedHsm/keys/decrypt/action/Microsoft.KeyVaultAdministration/managedHsm/keys/wrap/action/Microsoft.KeyVaultAdministration/managedHsm/keys/unwrap/action/Microsoft.KeyVaultAdministration/managedHsm/keys/sign/action/Microsoft.KeyVaultAdministration/managedHsm/keys/verify/action/Microsoft.KeyVaultAdministration/managedHsm/keys/create/Microsoft.KeyVaultAdministration/managedHsm/keys/delete/Microsoft.KeyVaultAdministration/managedHsm/keys/export/action/Microsoft.KeyVaultAdministration/managedHsm/keys/release/action/Microsoft.KeyVaultAdministration/managedHsm/keys/import/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/delete/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/download/action/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/download/read/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/upload/action/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/upload/read/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/transferkey/read/Microsoft.KeyVaultAdministration/managedHsm/backup/start/action/Microsoft.KeyVaultAdministration/managedHsm/restore/start/action/Microsoft.KeyVaultAdministration/managedHsm/backup/status/action/Microsoft.KeyVaultAdministration/managedHsm/restore/status/action/Microsoft.KeyVaultAdministration/managedHsm/rng/action) (Optional)
     *                 ]
     *                 notDataActions (Optional): [
     *                     String(Microsoft.KeyVaultAdministration/managedHsm/keys/read/action/Microsoft.KeyVaultAdministration/managedHsm/keys/write/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/read/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/recover/action/Microsoft.KeyVaultAdministration/managedHsm/keys/backup/action/Microsoft.KeyVaultAdministration/managedHsm/keys/restore/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/delete/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/read/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/write/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/read/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/write/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/delete/action/Microsoft.KeyVaultAdministration/managedHsm/keys/encrypt/action/Microsoft.KeyVaultAdministration/managedHsm/keys/decrypt/action/Microsoft.KeyVaultAdministration/managedHsm/keys/wrap/action/Microsoft.KeyVaultAdministration/managedHsm/keys/unwrap/action/Microsoft.KeyVaultAdministration/managedHsm/keys/sign/action/Microsoft.KeyVaultAdministration/managedHsm/keys/verify/action/Microsoft.KeyVaultAdministration/managedHsm/keys/create/Microsoft.KeyVaultAdministration/managedHsm/keys/delete/Microsoft.KeyVaultAdministration/managedHsm/keys/export/action/Microsoft.KeyVaultAdministration/managedHsm/keys/release/action/Microsoft.KeyVaultAdministration/managedHsm/keys/import/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/delete/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/download/action/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/download/read/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/upload/action/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/upload/read/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/transferkey/read/Microsoft.KeyVaultAdministration/managedHsm/backup/start/action/Microsoft.KeyVaultAdministration/managedHsm/restore/start/action/Microsoft.KeyVaultAdministration/managedHsm/backup/status/action/Microsoft.KeyVaultAdministration/managedHsm/restore/status/action/Microsoft.KeyVaultAdministration/managedHsm/rng/action) (Optional)
     *                 ]
     *             }
     *         ]
     *         assignableScopes (Optional): [
     *             String(///keys) (Optional)
     *         ]
     *     }
     * }
     * }
     * </pre>
     * 
     * @param scope The scope of the role definition to create or update. Managed HSM only supports '/'.
     * @param roleDefinitionName The name of the role definition to create or update. It can be any valid GUID.
     * @param parameters Parameters for the role definition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return role definition along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createOrUpdateWithResponseAsync(String scope, String roleDefinitionName,
        BinaryData parameters, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.createOrUpdate(this.client.getVaultBaseUrl(),
            this.client.getServiceVersion().getVersion(), scope, roleDefinitionName, contentType, accept, parameters,
            requestOptions, context));
    }

    /**
     * Creates or updates a custom role definition.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     properties (Required): {
     *         roleName: String (Optional)
     *         description: String (Optional)
     *         type: String(AKVBuiltInRole/CustomRole) (Optional)
     *         permissions (Optional): [
     *              (Optional){
     *                 actions (Optional): [
     *                     String (Optional)
     *                 ]
     *                 notActions (Optional): [
     *                     String (Optional)
     *                 ]
     *                 dataActions (Optional): [
     *                     String(Microsoft.KeyVaultAdministration/managedHsm/keys/read/action/Microsoft.KeyVaultAdministration/managedHsm/keys/write/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/read/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/recover/action/Microsoft.KeyVaultAdministration/managedHsm/keys/backup/action/Microsoft.KeyVaultAdministration/managedHsm/keys/restore/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/delete/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/read/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/write/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/read/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/write/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/delete/action/Microsoft.KeyVaultAdministration/managedHsm/keys/encrypt/action/Microsoft.KeyVaultAdministration/managedHsm/keys/decrypt/action/Microsoft.KeyVaultAdministration/managedHsm/keys/wrap/action/Microsoft.KeyVaultAdministration/managedHsm/keys/unwrap/action/Microsoft.KeyVaultAdministration/managedHsm/keys/sign/action/Microsoft.KeyVaultAdministration/managedHsm/keys/verify/action/Microsoft.KeyVaultAdministration/managedHsm/keys/create/Microsoft.KeyVaultAdministration/managedHsm/keys/delete/Microsoft.KeyVaultAdministration/managedHsm/keys/export/action/Microsoft.KeyVaultAdministration/managedHsm/keys/release/action/Microsoft.KeyVaultAdministration/managedHsm/keys/import/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/delete/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/download/action/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/download/read/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/upload/action/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/upload/read/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/transferkey/read/Microsoft.KeyVaultAdministration/managedHsm/backup/start/action/Microsoft.KeyVaultAdministration/managedHsm/restore/start/action/Microsoft.KeyVaultAdministration/managedHsm/backup/status/action/Microsoft.KeyVaultAdministration/managedHsm/restore/status/action/Microsoft.KeyVaultAdministration/managedHsm/rng/action) (Optional)
     *                 ]
     *                 notDataActions (Optional): [
     *                     String(Microsoft.KeyVaultAdministration/managedHsm/keys/read/action/Microsoft.KeyVaultAdministration/managedHsm/keys/write/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/read/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/recover/action/Microsoft.KeyVaultAdministration/managedHsm/keys/backup/action/Microsoft.KeyVaultAdministration/managedHsm/keys/restore/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/delete/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/read/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/write/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/read/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/write/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/delete/action/Microsoft.KeyVaultAdministration/managedHsm/keys/encrypt/action/Microsoft.KeyVaultAdministration/managedHsm/keys/decrypt/action/Microsoft.KeyVaultAdministration/managedHsm/keys/wrap/action/Microsoft.KeyVaultAdministration/managedHsm/keys/unwrap/action/Microsoft.KeyVaultAdministration/managedHsm/keys/sign/action/Microsoft.KeyVaultAdministration/managedHsm/keys/verify/action/Microsoft.KeyVaultAdministration/managedHsm/keys/create/Microsoft.KeyVaultAdministration/managedHsm/keys/delete/Microsoft.KeyVaultAdministration/managedHsm/keys/export/action/Microsoft.KeyVaultAdministration/managedHsm/keys/release/action/Microsoft.KeyVaultAdministration/managedHsm/keys/import/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/delete/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/download/action/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/download/read/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/upload/action/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/upload/read/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/transferkey/read/Microsoft.KeyVaultAdministration/managedHsm/backup/start/action/Microsoft.KeyVaultAdministration/managedHsm/restore/start/action/Microsoft.KeyVaultAdministration/managedHsm/backup/status/action/Microsoft.KeyVaultAdministration/managedHsm/restore/status/action/Microsoft.KeyVaultAdministration/managedHsm/rng/action) (Optional)
     *                 ]
     *             }
     *         ]
     *         assignableScopes (Optional): [
     *             String(///keys) (Optional)
     *         ]
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Optional)
     *     name: String (Optional)
     *     type: String(Microsoft.Authorization/roleDefinitions) (Optional)
     *     properties (Optional): {
     *         roleName: String (Optional)
     *         description: String (Optional)
     *         type: String(AKVBuiltInRole/CustomRole) (Optional)
     *         permissions (Optional): [
     *              (Optional){
     *                 actions (Optional): [
     *                     String (Optional)
     *                 ]
     *                 notActions (Optional): [
     *                     String (Optional)
     *                 ]
     *                 dataActions (Optional): [
     *                     String(Microsoft.KeyVaultAdministration/managedHsm/keys/read/action/Microsoft.KeyVaultAdministration/managedHsm/keys/write/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/read/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/recover/action/Microsoft.KeyVaultAdministration/managedHsm/keys/backup/action/Microsoft.KeyVaultAdministration/managedHsm/keys/restore/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/delete/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/read/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/write/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/read/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/write/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/delete/action/Microsoft.KeyVaultAdministration/managedHsm/keys/encrypt/action/Microsoft.KeyVaultAdministration/managedHsm/keys/decrypt/action/Microsoft.KeyVaultAdministration/managedHsm/keys/wrap/action/Microsoft.KeyVaultAdministration/managedHsm/keys/unwrap/action/Microsoft.KeyVaultAdministration/managedHsm/keys/sign/action/Microsoft.KeyVaultAdministration/managedHsm/keys/verify/action/Microsoft.KeyVaultAdministration/managedHsm/keys/create/Microsoft.KeyVaultAdministration/managedHsm/keys/delete/Microsoft.KeyVaultAdministration/managedHsm/keys/export/action/Microsoft.KeyVaultAdministration/managedHsm/keys/release/action/Microsoft.KeyVaultAdministration/managedHsm/keys/import/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/delete/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/download/action/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/download/read/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/upload/action/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/upload/read/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/transferkey/read/Microsoft.KeyVaultAdministration/managedHsm/backup/start/action/Microsoft.KeyVaultAdministration/managedHsm/restore/start/action/Microsoft.KeyVaultAdministration/managedHsm/backup/status/action/Microsoft.KeyVaultAdministration/managedHsm/restore/status/action/Microsoft.KeyVaultAdministration/managedHsm/rng/action) (Optional)
     *                 ]
     *                 notDataActions (Optional): [
     *                     String(Microsoft.KeyVaultAdministration/managedHsm/keys/read/action/Microsoft.KeyVaultAdministration/managedHsm/keys/write/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/read/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/recover/action/Microsoft.KeyVaultAdministration/managedHsm/keys/backup/action/Microsoft.KeyVaultAdministration/managedHsm/keys/restore/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/delete/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/read/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/write/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/read/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/write/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/delete/action/Microsoft.KeyVaultAdministration/managedHsm/keys/encrypt/action/Microsoft.KeyVaultAdministration/managedHsm/keys/decrypt/action/Microsoft.KeyVaultAdministration/managedHsm/keys/wrap/action/Microsoft.KeyVaultAdministration/managedHsm/keys/unwrap/action/Microsoft.KeyVaultAdministration/managedHsm/keys/sign/action/Microsoft.KeyVaultAdministration/managedHsm/keys/verify/action/Microsoft.KeyVaultAdministration/managedHsm/keys/create/Microsoft.KeyVaultAdministration/managedHsm/keys/delete/Microsoft.KeyVaultAdministration/managedHsm/keys/export/action/Microsoft.KeyVaultAdministration/managedHsm/keys/release/action/Microsoft.KeyVaultAdministration/managedHsm/keys/import/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/delete/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/download/action/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/download/read/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/upload/action/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/upload/read/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/transferkey/read/Microsoft.KeyVaultAdministration/managedHsm/backup/start/action/Microsoft.KeyVaultAdministration/managedHsm/restore/start/action/Microsoft.KeyVaultAdministration/managedHsm/backup/status/action/Microsoft.KeyVaultAdministration/managedHsm/restore/status/action/Microsoft.KeyVaultAdministration/managedHsm/rng/action) (Optional)
     *                 ]
     *             }
     *         ]
     *         assignableScopes (Optional): [
     *             String(///keys) (Optional)
     *         ]
     *     }
     * }
     * }
     * </pre>
     * 
     * @param scope The scope of the role definition to create or update. Managed HSM only supports '/'.
     * @param roleDefinitionName The name of the role definition to create or update. It can be any valid GUID.
     * @param parameters Parameters for the role definition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return role definition along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createOrUpdateWithResponse(String scope, String roleDefinitionName,
        BinaryData parameters, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.createOrUpdateSync(this.client.getVaultBaseUrl(), this.client.getServiceVersion().getVersion(),
            scope, roleDefinitionName, contentType, accept, parameters, requestOptions, Context.NONE);
    }

    /**
     * Get the specified role definition.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Optional)
     *     name: String (Optional)
     *     type: String(Microsoft.Authorization/roleDefinitions) (Optional)
     *     properties (Optional): {
     *         roleName: String (Optional)
     *         description: String (Optional)
     *         type: String(AKVBuiltInRole/CustomRole) (Optional)
     *         permissions (Optional): [
     *              (Optional){
     *                 actions (Optional): [
     *                     String (Optional)
     *                 ]
     *                 notActions (Optional): [
     *                     String (Optional)
     *                 ]
     *                 dataActions (Optional): [
     *                     String(Microsoft.KeyVaultAdministration/managedHsm/keys/read/action/Microsoft.KeyVaultAdministration/managedHsm/keys/write/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/read/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/recover/action/Microsoft.KeyVaultAdministration/managedHsm/keys/backup/action/Microsoft.KeyVaultAdministration/managedHsm/keys/restore/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/delete/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/read/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/write/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/read/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/write/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/delete/action/Microsoft.KeyVaultAdministration/managedHsm/keys/encrypt/action/Microsoft.KeyVaultAdministration/managedHsm/keys/decrypt/action/Microsoft.KeyVaultAdministration/managedHsm/keys/wrap/action/Microsoft.KeyVaultAdministration/managedHsm/keys/unwrap/action/Microsoft.KeyVaultAdministration/managedHsm/keys/sign/action/Microsoft.KeyVaultAdministration/managedHsm/keys/verify/action/Microsoft.KeyVaultAdministration/managedHsm/keys/create/Microsoft.KeyVaultAdministration/managedHsm/keys/delete/Microsoft.KeyVaultAdministration/managedHsm/keys/export/action/Microsoft.KeyVaultAdministration/managedHsm/keys/release/action/Microsoft.KeyVaultAdministration/managedHsm/keys/import/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/delete/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/download/action/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/download/read/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/upload/action/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/upload/read/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/transferkey/read/Microsoft.KeyVaultAdministration/managedHsm/backup/start/action/Microsoft.KeyVaultAdministration/managedHsm/restore/start/action/Microsoft.KeyVaultAdministration/managedHsm/backup/status/action/Microsoft.KeyVaultAdministration/managedHsm/restore/status/action/Microsoft.KeyVaultAdministration/managedHsm/rng/action) (Optional)
     *                 ]
     *                 notDataActions (Optional): [
     *                     String(Microsoft.KeyVaultAdministration/managedHsm/keys/read/action/Microsoft.KeyVaultAdministration/managedHsm/keys/write/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/read/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/recover/action/Microsoft.KeyVaultAdministration/managedHsm/keys/backup/action/Microsoft.KeyVaultAdministration/managedHsm/keys/restore/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/delete/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/read/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/write/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/read/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/write/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/delete/action/Microsoft.KeyVaultAdministration/managedHsm/keys/encrypt/action/Microsoft.KeyVaultAdministration/managedHsm/keys/decrypt/action/Microsoft.KeyVaultAdministration/managedHsm/keys/wrap/action/Microsoft.KeyVaultAdministration/managedHsm/keys/unwrap/action/Microsoft.KeyVaultAdministration/managedHsm/keys/sign/action/Microsoft.KeyVaultAdministration/managedHsm/keys/verify/action/Microsoft.KeyVaultAdministration/managedHsm/keys/create/Microsoft.KeyVaultAdministration/managedHsm/keys/delete/Microsoft.KeyVaultAdministration/managedHsm/keys/export/action/Microsoft.KeyVaultAdministration/managedHsm/keys/release/action/Microsoft.KeyVaultAdministration/managedHsm/keys/import/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/delete/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/download/action/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/download/read/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/upload/action/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/upload/read/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/transferkey/read/Microsoft.KeyVaultAdministration/managedHsm/backup/start/action/Microsoft.KeyVaultAdministration/managedHsm/restore/start/action/Microsoft.KeyVaultAdministration/managedHsm/backup/status/action/Microsoft.KeyVaultAdministration/managedHsm/restore/status/action/Microsoft.KeyVaultAdministration/managedHsm/rng/action) (Optional)
     *                 ]
     *             }
     *         ]
     *         assignableScopes (Optional): [
     *             String(///keys) (Optional)
     *         ]
     *     }
     * }
     * }
     * </pre>
     * 
     * @param scope The scope of the role definition to get. Managed HSM only supports '/'.
     * @param roleDefinitionName The name of the role definition to get.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the specified role definition along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getWithResponseAsync(String scope, String roleDefinitionName,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.get(this.client.getVaultBaseUrl(),
            this.client.getServiceVersion().getVersion(), scope, roleDefinitionName, accept, requestOptions, context));
    }

    /**
     * Get the specified role definition.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Optional)
     *     name: String (Optional)
     *     type: String(Microsoft.Authorization/roleDefinitions) (Optional)
     *     properties (Optional): {
     *         roleName: String (Optional)
     *         description: String (Optional)
     *         type: String(AKVBuiltInRole/CustomRole) (Optional)
     *         permissions (Optional): [
     *              (Optional){
     *                 actions (Optional): [
     *                     String (Optional)
     *                 ]
     *                 notActions (Optional): [
     *                     String (Optional)
     *                 ]
     *                 dataActions (Optional): [
     *                     String(Microsoft.KeyVaultAdministration/managedHsm/keys/read/action/Microsoft.KeyVaultAdministration/managedHsm/keys/write/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/read/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/recover/action/Microsoft.KeyVaultAdministration/managedHsm/keys/backup/action/Microsoft.KeyVaultAdministration/managedHsm/keys/restore/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/delete/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/read/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/write/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/read/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/write/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/delete/action/Microsoft.KeyVaultAdministration/managedHsm/keys/encrypt/action/Microsoft.KeyVaultAdministration/managedHsm/keys/decrypt/action/Microsoft.KeyVaultAdministration/managedHsm/keys/wrap/action/Microsoft.KeyVaultAdministration/managedHsm/keys/unwrap/action/Microsoft.KeyVaultAdministration/managedHsm/keys/sign/action/Microsoft.KeyVaultAdministration/managedHsm/keys/verify/action/Microsoft.KeyVaultAdministration/managedHsm/keys/create/Microsoft.KeyVaultAdministration/managedHsm/keys/delete/Microsoft.KeyVaultAdministration/managedHsm/keys/export/action/Microsoft.KeyVaultAdministration/managedHsm/keys/release/action/Microsoft.KeyVaultAdministration/managedHsm/keys/import/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/delete/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/download/action/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/download/read/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/upload/action/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/upload/read/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/transferkey/read/Microsoft.KeyVaultAdministration/managedHsm/backup/start/action/Microsoft.KeyVaultAdministration/managedHsm/restore/start/action/Microsoft.KeyVaultAdministration/managedHsm/backup/status/action/Microsoft.KeyVaultAdministration/managedHsm/restore/status/action/Microsoft.KeyVaultAdministration/managedHsm/rng/action) (Optional)
     *                 ]
     *                 notDataActions (Optional): [
     *                     String(Microsoft.KeyVaultAdministration/managedHsm/keys/read/action/Microsoft.KeyVaultAdministration/managedHsm/keys/write/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/read/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/recover/action/Microsoft.KeyVaultAdministration/managedHsm/keys/backup/action/Microsoft.KeyVaultAdministration/managedHsm/keys/restore/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/delete/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/read/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/write/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/read/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/write/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/delete/action/Microsoft.KeyVaultAdministration/managedHsm/keys/encrypt/action/Microsoft.KeyVaultAdministration/managedHsm/keys/decrypt/action/Microsoft.KeyVaultAdministration/managedHsm/keys/wrap/action/Microsoft.KeyVaultAdministration/managedHsm/keys/unwrap/action/Microsoft.KeyVaultAdministration/managedHsm/keys/sign/action/Microsoft.KeyVaultAdministration/managedHsm/keys/verify/action/Microsoft.KeyVaultAdministration/managedHsm/keys/create/Microsoft.KeyVaultAdministration/managedHsm/keys/delete/Microsoft.KeyVaultAdministration/managedHsm/keys/export/action/Microsoft.KeyVaultAdministration/managedHsm/keys/release/action/Microsoft.KeyVaultAdministration/managedHsm/keys/import/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/delete/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/download/action/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/download/read/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/upload/action/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/upload/read/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/transferkey/read/Microsoft.KeyVaultAdministration/managedHsm/backup/start/action/Microsoft.KeyVaultAdministration/managedHsm/restore/start/action/Microsoft.KeyVaultAdministration/managedHsm/backup/status/action/Microsoft.KeyVaultAdministration/managedHsm/restore/status/action/Microsoft.KeyVaultAdministration/managedHsm/rng/action) (Optional)
     *                 ]
     *             }
     *         ]
     *         assignableScopes (Optional): [
     *             String(///keys) (Optional)
     *         ]
     *     }
     * }
     * }
     * </pre>
     * 
     * @param scope The scope of the role definition to get. Managed HSM only supports '/'.
     * @param roleDefinitionName The name of the role definition to get.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the specified role definition along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getWithResponse(String scope, String roleDefinitionName,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getSync(this.client.getVaultBaseUrl(), this.client.getServiceVersion().getVersion(), scope,
            roleDefinitionName, accept, requestOptions, Context.NONE);
    }

    /**
     * Get all role definitions that are applicable at scope and above.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>$filter</td><td>String</td><td>No</td><td>The filter to apply on the operation. Use atScopeAndBelow
     * filter to search below the given scope as well.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Optional)
     *     name: String (Optional)
     *     type: String(Microsoft.Authorization/roleDefinitions) (Optional)
     *     properties (Optional): {
     *         roleName: String (Optional)
     *         description: String (Optional)
     *         type: String(AKVBuiltInRole/CustomRole) (Optional)
     *         permissions (Optional): [
     *              (Optional){
     *                 actions (Optional): [
     *                     String (Optional)
     *                 ]
     *                 notActions (Optional): [
     *                     String (Optional)
     *                 ]
     *                 dataActions (Optional): [
     *                     String(Microsoft.KeyVaultAdministration/managedHsm/keys/read/action/Microsoft.KeyVaultAdministration/managedHsm/keys/write/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/read/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/recover/action/Microsoft.KeyVaultAdministration/managedHsm/keys/backup/action/Microsoft.KeyVaultAdministration/managedHsm/keys/restore/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/delete/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/read/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/write/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/read/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/write/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/delete/action/Microsoft.KeyVaultAdministration/managedHsm/keys/encrypt/action/Microsoft.KeyVaultAdministration/managedHsm/keys/decrypt/action/Microsoft.KeyVaultAdministration/managedHsm/keys/wrap/action/Microsoft.KeyVaultAdministration/managedHsm/keys/unwrap/action/Microsoft.KeyVaultAdministration/managedHsm/keys/sign/action/Microsoft.KeyVaultAdministration/managedHsm/keys/verify/action/Microsoft.KeyVaultAdministration/managedHsm/keys/create/Microsoft.KeyVaultAdministration/managedHsm/keys/delete/Microsoft.KeyVaultAdministration/managedHsm/keys/export/action/Microsoft.KeyVaultAdministration/managedHsm/keys/release/action/Microsoft.KeyVaultAdministration/managedHsm/keys/import/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/delete/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/download/action/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/download/read/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/upload/action/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/upload/read/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/transferkey/read/Microsoft.KeyVaultAdministration/managedHsm/backup/start/action/Microsoft.KeyVaultAdministration/managedHsm/restore/start/action/Microsoft.KeyVaultAdministration/managedHsm/backup/status/action/Microsoft.KeyVaultAdministration/managedHsm/restore/status/action/Microsoft.KeyVaultAdministration/managedHsm/rng/action) (Optional)
     *                 ]
     *                 notDataActions (Optional): [
     *                     String(Microsoft.KeyVaultAdministration/managedHsm/keys/read/action/Microsoft.KeyVaultAdministration/managedHsm/keys/write/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/read/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/recover/action/Microsoft.KeyVaultAdministration/managedHsm/keys/backup/action/Microsoft.KeyVaultAdministration/managedHsm/keys/restore/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/delete/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/read/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/write/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/read/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/write/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/delete/action/Microsoft.KeyVaultAdministration/managedHsm/keys/encrypt/action/Microsoft.KeyVaultAdministration/managedHsm/keys/decrypt/action/Microsoft.KeyVaultAdministration/managedHsm/keys/wrap/action/Microsoft.KeyVaultAdministration/managedHsm/keys/unwrap/action/Microsoft.KeyVaultAdministration/managedHsm/keys/sign/action/Microsoft.KeyVaultAdministration/managedHsm/keys/verify/action/Microsoft.KeyVaultAdministration/managedHsm/keys/create/Microsoft.KeyVaultAdministration/managedHsm/keys/delete/Microsoft.KeyVaultAdministration/managedHsm/keys/export/action/Microsoft.KeyVaultAdministration/managedHsm/keys/release/action/Microsoft.KeyVaultAdministration/managedHsm/keys/import/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/delete/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/download/action/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/download/read/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/upload/action/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/upload/read/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/transferkey/read/Microsoft.KeyVaultAdministration/managedHsm/backup/start/action/Microsoft.KeyVaultAdministration/managedHsm/restore/start/action/Microsoft.KeyVaultAdministration/managedHsm/backup/status/action/Microsoft.KeyVaultAdministration/managedHsm/restore/status/action/Microsoft.KeyVaultAdministration/managedHsm/rng/action) (Optional)
     *                 ]
     *             }
     *         ]
     *         assignableScopes (Optional): [
     *             String(///keys) (Optional)
     *         ]
     *     }
     * }
     * }
     * </pre>
     * 
     * @param scope The scope of the role definition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all role definitions that are applicable at scope and above along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listSinglePageAsync(String scope, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.list(this.client.getVaultBaseUrl(),
                this.client.getServiceVersion().getVersion(), scope, accept, requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * Get all role definitions that are applicable at scope and above.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>$filter</td><td>String</td><td>No</td><td>The filter to apply on the operation. Use atScopeAndBelow
     * filter to search below the given scope as well.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Optional)
     *     name: String (Optional)
     *     type: String(Microsoft.Authorization/roleDefinitions) (Optional)
     *     properties (Optional): {
     *         roleName: String (Optional)
     *         description: String (Optional)
     *         type: String(AKVBuiltInRole/CustomRole) (Optional)
     *         permissions (Optional): [
     *              (Optional){
     *                 actions (Optional): [
     *                     String (Optional)
     *                 ]
     *                 notActions (Optional): [
     *                     String (Optional)
     *                 ]
     *                 dataActions (Optional): [
     *                     String(Microsoft.KeyVaultAdministration/managedHsm/keys/read/action/Microsoft.KeyVaultAdministration/managedHsm/keys/write/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/read/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/recover/action/Microsoft.KeyVaultAdministration/managedHsm/keys/backup/action/Microsoft.KeyVaultAdministration/managedHsm/keys/restore/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/delete/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/read/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/write/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/read/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/write/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/delete/action/Microsoft.KeyVaultAdministration/managedHsm/keys/encrypt/action/Microsoft.KeyVaultAdministration/managedHsm/keys/decrypt/action/Microsoft.KeyVaultAdministration/managedHsm/keys/wrap/action/Microsoft.KeyVaultAdministration/managedHsm/keys/unwrap/action/Microsoft.KeyVaultAdministration/managedHsm/keys/sign/action/Microsoft.KeyVaultAdministration/managedHsm/keys/verify/action/Microsoft.KeyVaultAdministration/managedHsm/keys/create/Microsoft.KeyVaultAdministration/managedHsm/keys/delete/Microsoft.KeyVaultAdministration/managedHsm/keys/export/action/Microsoft.KeyVaultAdministration/managedHsm/keys/release/action/Microsoft.KeyVaultAdministration/managedHsm/keys/import/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/delete/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/download/action/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/download/read/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/upload/action/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/upload/read/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/transferkey/read/Microsoft.KeyVaultAdministration/managedHsm/backup/start/action/Microsoft.KeyVaultAdministration/managedHsm/restore/start/action/Microsoft.KeyVaultAdministration/managedHsm/backup/status/action/Microsoft.KeyVaultAdministration/managedHsm/restore/status/action/Microsoft.KeyVaultAdministration/managedHsm/rng/action) (Optional)
     *                 ]
     *                 notDataActions (Optional): [
     *                     String(Microsoft.KeyVaultAdministration/managedHsm/keys/read/action/Microsoft.KeyVaultAdministration/managedHsm/keys/write/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/read/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/recover/action/Microsoft.KeyVaultAdministration/managedHsm/keys/backup/action/Microsoft.KeyVaultAdministration/managedHsm/keys/restore/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/delete/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/read/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/write/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/read/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/write/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/delete/action/Microsoft.KeyVaultAdministration/managedHsm/keys/encrypt/action/Microsoft.KeyVaultAdministration/managedHsm/keys/decrypt/action/Microsoft.KeyVaultAdministration/managedHsm/keys/wrap/action/Microsoft.KeyVaultAdministration/managedHsm/keys/unwrap/action/Microsoft.KeyVaultAdministration/managedHsm/keys/sign/action/Microsoft.KeyVaultAdministration/managedHsm/keys/verify/action/Microsoft.KeyVaultAdministration/managedHsm/keys/create/Microsoft.KeyVaultAdministration/managedHsm/keys/delete/Microsoft.KeyVaultAdministration/managedHsm/keys/export/action/Microsoft.KeyVaultAdministration/managedHsm/keys/release/action/Microsoft.KeyVaultAdministration/managedHsm/keys/import/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/delete/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/download/action/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/download/read/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/upload/action/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/upload/read/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/transferkey/read/Microsoft.KeyVaultAdministration/managedHsm/backup/start/action/Microsoft.KeyVaultAdministration/managedHsm/restore/start/action/Microsoft.KeyVaultAdministration/managedHsm/backup/status/action/Microsoft.KeyVaultAdministration/managedHsm/restore/status/action/Microsoft.KeyVaultAdministration/managedHsm/rng/action) (Optional)
     *                 ]
     *             }
     *         ]
     *         assignableScopes (Optional): [
     *             String(///keys) (Optional)
     *         ]
     *     }
     * }
     * }
     * </pre>
     * 
     * @param scope The scope of the role definition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all role definitions that are applicable at scope and above as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listAsync(String scope, RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedFlux<>(() -> listSinglePageAsync(scope, requestOptions),
            nextLink -> listNextSinglePageAsync(nextLink, requestOptionsForNextPage));
    }

    /**
     * Get all role definitions that are applicable at scope and above.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>$filter</td><td>String</td><td>No</td><td>The filter to apply on the operation. Use atScopeAndBelow
     * filter to search below the given scope as well.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Optional)
     *     name: String (Optional)
     *     type: String(Microsoft.Authorization/roleDefinitions) (Optional)
     *     properties (Optional): {
     *         roleName: String (Optional)
     *         description: String (Optional)
     *         type: String(AKVBuiltInRole/CustomRole) (Optional)
     *         permissions (Optional): [
     *              (Optional){
     *                 actions (Optional): [
     *                     String (Optional)
     *                 ]
     *                 notActions (Optional): [
     *                     String (Optional)
     *                 ]
     *                 dataActions (Optional): [
     *                     String(Microsoft.KeyVaultAdministration/managedHsm/keys/read/action/Microsoft.KeyVaultAdministration/managedHsm/keys/write/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/read/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/recover/action/Microsoft.KeyVaultAdministration/managedHsm/keys/backup/action/Microsoft.KeyVaultAdministration/managedHsm/keys/restore/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/delete/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/read/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/write/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/read/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/write/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/delete/action/Microsoft.KeyVaultAdministration/managedHsm/keys/encrypt/action/Microsoft.KeyVaultAdministration/managedHsm/keys/decrypt/action/Microsoft.KeyVaultAdministration/managedHsm/keys/wrap/action/Microsoft.KeyVaultAdministration/managedHsm/keys/unwrap/action/Microsoft.KeyVaultAdministration/managedHsm/keys/sign/action/Microsoft.KeyVaultAdministration/managedHsm/keys/verify/action/Microsoft.KeyVaultAdministration/managedHsm/keys/create/Microsoft.KeyVaultAdministration/managedHsm/keys/delete/Microsoft.KeyVaultAdministration/managedHsm/keys/export/action/Microsoft.KeyVaultAdministration/managedHsm/keys/release/action/Microsoft.KeyVaultAdministration/managedHsm/keys/import/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/delete/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/download/action/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/download/read/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/upload/action/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/upload/read/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/transferkey/read/Microsoft.KeyVaultAdministration/managedHsm/backup/start/action/Microsoft.KeyVaultAdministration/managedHsm/restore/start/action/Microsoft.KeyVaultAdministration/managedHsm/backup/status/action/Microsoft.KeyVaultAdministration/managedHsm/restore/status/action/Microsoft.KeyVaultAdministration/managedHsm/rng/action) (Optional)
     *                 ]
     *                 notDataActions (Optional): [
     *                     String(Microsoft.KeyVaultAdministration/managedHsm/keys/read/action/Microsoft.KeyVaultAdministration/managedHsm/keys/write/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/read/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/recover/action/Microsoft.KeyVaultAdministration/managedHsm/keys/backup/action/Microsoft.KeyVaultAdministration/managedHsm/keys/restore/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/delete/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/read/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/write/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/read/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/write/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/delete/action/Microsoft.KeyVaultAdministration/managedHsm/keys/encrypt/action/Microsoft.KeyVaultAdministration/managedHsm/keys/decrypt/action/Microsoft.KeyVaultAdministration/managedHsm/keys/wrap/action/Microsoft.KeyVaultAdministration/managedHsm/keys/unwrap/action/Microsoft.KeyVaultAdministration/managedHsm/keys/sign/action/Microsoft.KeyVaultAdministration/managedHsm/keys/verify/action/Microsoft.KeyVaultAdministration/managedHsm/keys/create/Microsoft.KeyVaultAdministration/managedHsm/keys/delete/Microsoft.KeyVaultAdministration/managedHsm/keys/export/action/Microsoft.KeyVaultAdministration/managedHsm/keys/release/action/Microsoft.KeyVaultAdministration/managedHsm/keys/import/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/delete/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/download/action/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/download/read/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/upload/action/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/upload/read/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/transferkey/read/Microsoft.KeyVaultAdministration/managedHsm/backup/start/action/Microsoft.KeyVaultAdministration/managedHsm/restore/start/action/Microsoft.KeyVaultAdministration/managedHsm/backup/status/action/Microsoft.KeyVaultAdministration/managedHsm/restore/status/action/Microsoft.KeyVaultAdministration/managedHsm/rng/action) (Optional)
     *                 ]
     *             }
     *         ]
     *         assignableScopes (Optional): [
     *             String(///keys) (Optional)
     *         ]
     *     }
     * }
     * }
     * </pre>
     * 
     * @param scope The scope of the role definition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all role definitions that are applicable at scope and above along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listSinglePage(String scope, RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res = service.listSync(this.client.getVaultBaseUrl(),
            this.client.getServiceVersion().getVersion(), scope, accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    /**
     * Get all role definitions that are applicable at scope and above.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>$filter</td><td>String</td><td>No</td><td>The filter to apply on the operation. Use atScopeAndBelow
     * filter to search below the given scope as well.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Optional)
     *     name: String (Optional)
     *     type: String(Microsoft.Authorization/roleDefinitions) (Optional)
     *     properties (Optional): {
     *         roleName: String (Optional)
     *         description: String (Optional)
     *         type: String(AKVBuiltInRole/CustomRole) (Optional)
     *         permissions (Optional): [
     *              (Optional){
     *                 actions (Optional): [
     *                     String (Optional)
     *                 ]
     *                 notActions (Optional): [
     *                     String (Optional)
     *                 ]
     *                 dataActions (Optional): [
     *                     String(Microsoft.KeyVaultAdministration/managedHsm/keys/read/action/Microsoft.KeyVaultAdministration/managedHsm/keys/write/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/read/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/recover/action/Microsoft.KeyVaultAdministration/managedHsm/keys/backup/action/Microsoft.KeyVaultAdministration/managedHsm/keys/restore/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/delete/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/read/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/write/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/read/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/write/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/delete/action/Microsoft.KeyVaultAdministration/managedHsm/keys/encrypt/action/Microsoft.KeyVaultAdministration/managedHsm/keys/decrypt/action/Microsoft.KeyVaultAdministration/managedHsm/keys/wrap/action/Microsoft.KeyVaultAdministration/managedHsm/keys/unwrap/action/Microsoft.KeyVaultAdministration/managedHsm/keys/sign/action/Microsoft.KeyVaultAdministration/managedHsm/keys/verify/action/Microsoft.KeyVaultAdministration/managedHsm/keys/create/Microsoft.KeyVaultAdministration/managedHsm/keys/delete/Microsoft.KeyVaultAdministration/managedHsm/keys/export/action/Microsoft.KeyVaultAdministration/managedHsm/keys/release/action/Microsoft.KeyVaultAdministration/managedHsm/keys/import/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/delete/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/download/action/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/download/read/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/upload/action/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/upload/read/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/transferkey/read/Microsoft.KeyVaultAdministration/managedHsm/backup/start/action/Microsoft.KeyVaultAdministration/managedHsm/restore/start/action/Microsoft.KeyVaultAdministration/managedHsm/backup/status/action/Microsoft.KeyVaultAdministration/managedHsm/restore/status/action/Microsoft.KeyVaultAdministration/managedHsm/rng/action) (Optional)
     *                 ]
     *                 notDataActions (Optional): [
     *                     String(Microsoft.KeyVaultAdministration/managedHsm/keys/read/action/Microsoft.KeyVaultAdministration/managedHsm/keys/write/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/read/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/recover/action/Microsoft.KeyVaultAdministration/managedHsm/keys/backup/action/Microsoft.KeyVaultAdministration/managedHsm/keys/restore/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/delete/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/read/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/write/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/read/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/write/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/delete/action/Microsoft.KeyVaultAdministration/managedHsm/keys/encrypt/action/Microsoft.KeyVaultAdministration/managedHsm/keys/decrypt/action/Microsoft.KeyVaultAdministration/managedHsm/keys/wrap/action/Microsoft.KeyVaultAdministration/managedHsm/keys/unwrap/action/Microsoft.KeyVaultAdministration/managedHsm/keys/sign/action/Microsoft.KeyVaultAdministration/managedHsm/keys/verify/action/Microsoft.KeyVaultAdministration/managedHsm/keys/create/Microsoft.KeyVaultAdministration/managedHsm/keys/delete/Microsoft.KeyVaultAdministration/managedHsm/keys/export/action/Microsoft.KeyVaultAdministration/managedHsm/keys/release/action/Microsoft.KeyVaultAdministration/managedHsm/keys/import/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/delete/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/download/action/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/download/read/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/upload/action/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/upload/read/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/transferkey/read/Microsoft.KeyVaultAdministration/managedHsm/backup/start/action/Microsoft.KeyVaultAdministration/managedHsm/restore/start/action/Microsoft.KeyVaultAdministration/managedHsm/backup/status/action/Microsoft.KeyVaultAdministration/managedHsm/restore/status/action/Microsoft.KeyVaultAdministration/managedHsm/rng/action) (Optional)
     *                 ]
     *             }
     *         ]
     *         assignableScopes (Optional): [
     *             String(///keys) (Optional)
     *         ]
     *     }
     * }
     * }
     * </pre>
     * 
     * @param scope The scope of the role definition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all role definitions that are applicable at scope and above as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> list(String scope, RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedIterable<>(() -> listSinglePage(scope, requestOptions),
            nextLink -> listNextSinglePage(nextLink, requestOptionsForNextPage));
    }

    /**
     * Get the next page of items.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Optional)
     *     name: String (Optional)
     *     type: String(Microsoft.Authorization/roleDefinitions) (Optional)
     *     properties (Optional): {
     *         roleName: String (Optional)
     *         description: String (Optional)
     *         type: String(AKVBuiltInRole/CustomRole) (Optional)
     *         permissions (Optional): [
     *              (Optional){
     *                 actions (Optional): [
     *                     String (Optional)
     *                 ]
     *                 notActions (Optional): [
     *                     String (Optional)
     *                 ]
     *                 dataActions (Optional): [
     *                     String(Microsoft.KeyVaultAdministration/managedHsm/keys/read/action/Microsoft.KeyVaultAdministration/managedHsm/keys/write/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/read/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/recover/action/Microsoft.KeyVaultAdministration/managedHsm/keys/backup/action/Microsoft.KeyVaultAdministration/managedHsm/keys/restore/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/delete/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/read/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/write/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/read/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/write/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/delete/action/Microsoft.KeyVaultAdministration/managedHsm/keys/encrypt/action/Microsoft.KeyVaultAdministration/managedHsm/keys/decrypt/action/Microsoft.KeyVaultAdministration/managedHsm/keys/wrap/action/Microsoft.KeyVaultAdministration/managedHsm/keys/unwrap/action/Microsoft.KeyVaultAdministration/managedHsm/keys/sign/action/Microsoft.KeyVaultAdministration/managedHsm/keys/verify/action/Microsoft.KeyVaultAdministration/managedHsm/keys/create/Microsoft.KeyVaultAdministration/managedHsm/keys/delete/Microsoft.KeyVaultAdministration/managedHsm/keys/export/action/Microsoft.KeyVaultAdministration/managedHsm/keys/release/action/Microsoft.KeyVaultAdministration/managedHsm/keys/import/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/delete/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/download/action/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/download/read/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/upload/action/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/upload/read/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/transferkey/read/Microsoft.KeyVaultAdministration/managedHsm/backup/start/action/Microsoft.KeyVaultAdministration/managedHsm/restore/start/action/Microsoft.KeyVaultAdministration/managedHsm/backup/status/action/Microsoft.KeyVaultAdministration/managedHsm/restore/status/action/Microsoft.KeyVaultAdministration/managedHsm/rng/action) (Optional)
     *                 ]
     *                 notDataActions (Optional): [
     *                     String(Microsoft.KeyVaultAdministration/managedHsm/keys/read/action/Microsoft.KeyVaultAdministration/managedHsm/keys/write/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/read/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/recover/action/Microsoft.KeyVaultAdministration/managedHsm/keys/backup/action/Microsoft.KeyVaultAdministration/managedHsm/keys/restore/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/delete/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/read/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/write/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/read/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/write/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/delete/action/Microsoft.KeyVaultAdministration/managedHsm/keys/encrypt/action/Microsoft.KeyVaultAdministration/managedHsm/keys/decrypt/action/Microsoft.KeyVaultAdministration/managedHsm/keys/wrap/action/Microsoft.KeyVaultAdministration/managedHsm/keys/unwrap/action/Microsoft.KeyVaultAdministration/managedHsm/keys/sign/action/Microsoft.KeyVaultAdministration/managedHsm/keys/verify/action/Microsoft.KeyVaultAdministration/managedHsm/keys/create/Microsoft.KeyVaultAdministration/managedHsm/keys/delete/Microsoft.KeyVaultAdministration/managedHsm/keys/export/action/Microsoft.KeyVaultAdministration/managedHsm/keys/release/action/Microsoft.KeyVaultAdministration/managedHsm/keys/import/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/delete/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/download/action/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/download/read/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/upload/action/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/upload/read/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/transferkey/read/Microsoft.KeyVaultAdministration/managedHsm/backup/start/action/Microsoft.KeyVaultAdministration/managedHsm/restore/start/action/Microsoft.KeyVaultAdministration/managedHsm/backup/status/action/Microsoft.KeyVaultAdministration/managedHsm/restore/status/action/Microsoft.KeyVaultAdministration/managedHsm/rng/action) (Optional)
     *                 ]
     *             }
     *         ]
     *         assignableScopes (Optional): [
     *             String(///keys) (Optional)
     *         ]
     *     }
     * }
     * }
     * </pre>
     * 
     * @param nextLink The URL to get the next list of items.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return role definition list operation result along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listNextSinglePageAsync(String nextLink, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listNext(nextLink, this.client.getVaultBaseUrl(), accept, requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * Get the next page of items.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Optional)
     *     name: String (Optional)
     *     type: String(Microsoft.Authorization/roleDefinitions) (Optional)
     *     properties (Optional): {
     *         roleName: String (Optional)
     *         description: String (Optional)
     *         type: String(AKVBuiltInRole/CustomRole) (Optional)
     *         permissions (Optional): [
     *              (Optional){
     *                 actions (Optional): [
     *                     String (Optional)
     *                 ]
     *                 notActions (Optional): [
     *                     String (Optional)
     *                 ]
     *                 dataActions (Optional): [
     *                     String(Microsoft.KeyVaultAdministration/managedHsm/keys/read/action/Microsoft.KeyVaultAdministration/managedHsm/keys/write/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/read/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/recover/action/Microsoft.KeyVaultAdministration/managedHsm/keys/backup/action/Microsoft.KeyVaultAdministration/managedHsm/keys/restore/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/delete/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/read/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/write/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/read/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/write/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/delete/action/Microsoft.KeyVaultAdministration/managedHsm/keys/encrypt/action/Microsoft.KeyVaultAdministration/managedHsm/keys/decrypt/action/Microsoft.KeyVaultAdministration/managedHsm/keys/wrap/action/Microsoft.KeyVaultAdministration/managedHsm/keys/unwrap/action/Microsoft.KeyVaultAdministration/managedHsm/keys/sign/action/Microsoft.KeyVaultAdministration/managedHsm/keys/verify/action/Microsoft.KeyVaultAdministration/managedHsm/keys/create/Microsoft.KeyVaultAdministration/managedHsm/keys/delete/Microsoft.KeyVaultAdministration/managedHsm/keys/export/action/Microsoft.KeyVaultAdministration/managedHsm/keys/release/action/Microsoft.KeyVaultAdministration/managedHsm/keys/import/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/delete/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/download/action/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/download/read/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/upload/action/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/upload/read/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/transferkey/read/Microsoft.KeyVaultAdministration/managedHsm/backup/start/action/Microsoft.KeyVaultAdministration/managedHsm/restore/start/action/Microsoft.KeyVaultAdministration/managedHsm/backup/status/action/Microsoft.KeyVaultAdministration/managedHsm/restore/status/action/Microsoft.KeyVaultAdministration/managedHsm/rng/action) (Optional)
     *                 ]
     *                 notDataActions (Optional): [
     *                     String(Microsoft.KeyVaultAdministration/managedHsm/keys/read/action/Microsoft.KeyVaultAdministration/managedHsm/keys/write/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/read/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/recover/action/Microsoft.KeyVaultAdministration/managedHsm/keys/backup/action/Microsoft.KeyVaultAdministration/managedHsm/keys/restore/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/delete/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/read/action/Microsoft.KeyVaultAdministration/managedHsm/roleAssignments/write/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/read/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/write/action/Microsoft.KeyVaultAdministration/managedHsm/roleDefinitions/delete/action/Microsoft.KeyVaultAdministration/managedHsm/keys/encrypt/action/Microsoft.KeyVaultAdministration/managedHsm/keys/decrypt/action/Microsoft.KeyVaultAdministration/managedHsm/keys/wrap/action/Microsoft.KeyVaultAdministration/managedHsm/keys/unwrap/action/Microsoft.KeyVaultAdministration/managedHsm/keys/sign/action/Microsoft.KeyVaultAdministration/managedHsm/keys/verify/action/Microsoft.KeyVaultAdministration/managedHsm/keys/create/Microsoft.KeyVaultAdministration/managedHsm/keys/delete/Microsoft.KeyVaultAdministration/managedHsm/keys/export/action/Microsoft.KeyVaultAdministration/managedHsm/keys/release/action/Microsoft.KeyVaultAdministration/managedHsm/keys/import/action/Microsoft.KeyVaultAdministration/managedHsm/keys/deletedKeys/delete/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/download/action/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/download/read/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/upload/action/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/upload/read/Microsoft.KeyVaultAdministration/managedHsm/securitydomain/transferkey/read/Microsoft.KeyVaultAdministration/managedHsm/backup/start/action/Microsoft.KeyVaultAdministration/managedHsm/restore/start/action/Microsoft.KeyVaultAdministration/managedHsm/backup/status/action/Microsoft.KeyVaultAdministration/managedHsm/restore/status/action/Microsoft.KeyVaultAdministration/managedHsm/rng/action) (Optional)
     *                 ]
     *             }
     *         ]
     *         assignableScopes (Optional): [
     *             String(///keys) (Optional)
     *         ]
     *     }
     * }
     * }
     * </pre>
     * 
     * @param nextLink The URL to get the next list of items.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return role definition list operation result along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listNextSinglePage(String nextLink, RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res
            = service.listNextSync(nextLink, this.client.getVaultBaseUrl(), accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    private List<BinaryData> getValues(BinaryData binaryData, String path) {
        try {
            Map<?, ?> obj = binaryData.toObject(Map.class);
            List<?> values = (List<?>) obj.get(path);
            return values.stream().map(BinaryData::fromObject).collect(Collectors.toList());
        } catch (RuntimeException e) {
            return null;
        }
    }

    private String getNextLink(BinaryData binaryData, String path) {
        try {
            Map<?, ?> obj = binaryData.toObject(Map.class);
            return (String) obj.get(path);
        } catch (RuntimeException e) {
            return null;
        }
    }
}
