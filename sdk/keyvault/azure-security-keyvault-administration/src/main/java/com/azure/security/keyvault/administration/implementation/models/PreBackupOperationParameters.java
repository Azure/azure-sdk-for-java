// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.security.keyvault.administration.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The PreBackupOperationParameters model.
 */
@Fluent
public final class PreBackupOperationParameters implements JsonSerializable<PreBackupOperationParameters> {
    /*
     * Azure Blob storage container Uri
     */
    private String storageResourceUri;

    /*
     * The SAS token pointing to an Azure Blob storage container
     */
    private String token;

    /*
     * Indicates which authentication method should be used. If set to true, Managed HSM will use the configured
     * user-assigned managed identity to authenticate with Azure Storage. Otherwise, a SAS token has to be specified.
     */
    private Boolean useManagedIdentity;

    /**
     * Creates an instance of PreBackupOperationParameters class.
     */
    public PreBackupOperationParameters() {
    }

    /**
     * Get the storageResourceUri property: Azure Blob storage container Uri.
     *
     * @return the storageResourceUri value.
     */
    public String getStorageResourceUri() {
        return this.storageResourceUri;
    }

    /**
     * Set the storageResourceUri property: Azure Blob storage container Uri.
     *
     * @param storageResourceUri the storageResourceUri value to set.
     * @return the PreBackupOperationParameters object itself.
     */
    public PreBackupOperationParameters setStorageResourceUri(String storageResourceUri) {
        this.storageResourceUri = storageResourceUri;
        return this;
    }

    /**
     * Get the token property: The SAS token pointing to an Azure Blob storage container.
     *
     * @return the token value.
     */
    public String getToken() {
        return this.token;
    }

    /**
     * Set the token property: The SAS token pointing to an Azure Blob storage container.
     *
     * @param token the token value to set.
     * @return the PreBackupOperationParameters object itself.
     */
    public PreBackupOperationParameters setToken(String token) {
        this.token = token;
        return this;
    }

    /**
     * Get the useManagedIdentity property: Indicates which authentication method should be used. If set to true,
     * Managed HSM will use the configured user-assigned managed identity to authenticate with Azure Storage.
     * Otherwise, a SAS token has to be specified.
     *
     * @return the useManagedIdentity value.
     */
    public Boolean isUseManagedIdentity() {
        return this.useManagedIdentity;
    }

    /**
     * Set the useManagedIdentity property: Indicates which authentication method should be used. If set to true,
     * Managed HSM will use the configured user-assigned managed identity to authenticate with Azure Storage.
     * Otherwise, a SAS token has to be specified.
     *
     * @param useManagedIdentity the useManagedIdentity value to set.
     * @return the PreBackupOperationParameters object itself.
     */
    public PreBackupOperationParameters setUseManagedIdentity(Boolean useManagedIdentity) {
        this.useManagedIdentity = useManagedIdentity;
        return this;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("storageResourceUri", this.storageResourceUri);
        jsonWriter.writeStringField("token", this.token);
        jsonWriter.writeBooleanField("useManagedIdentity", this.useManagedIdentity);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PreBackupOperationParameters from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of PreBackupOperationParameters if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the PreBackupOperationParameters.
     */
    public static PreBackupOperationParameters fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PreBackupOperationParameters deserializedPreBackupOperationParameters = new PreBackupOperationParameters();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("storageResourceUri".equals(fieldName)) {
                    deserializedPreBackupOperationParameters.storageResourceUri = reader.getString();
                } else if ("token".equals(fieldName)) {
                    deserializedPreBackupOperationParameters.token = reader.getString();
                } else if ("useManagedIdentity".equals(fieldName)) {
                    deserializedPreBackupOperationParameters.useManagedIdentity
                        = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPreBackupOperationParameters;
        });
    }
}
