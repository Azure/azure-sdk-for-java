// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.security.keyvault.administration.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.security.keyvault.administration.models.KeyVaultRoleScope;
import com.azure.security.keyvault.administration.models.KeyVaultRoleType;
import java.io.IOException;
import java.util.List;

/**
 * Role definition properties.
 */
@Fluent
public final class RoleDefinitionProperties implements JsonSerializable<RoleDefinitionProperties> {

    /*
     * The role name.
     */
    @Generated
    private String roleName;

    /*
     * The role definition description.
     */
    @Generated
    private String description;

    /*
     * The role type.
     */
    @Generated
    private KeyVaultRoleType roleType;

    /*
     * Role definition permissions.
     */
    @Generated
    private List<Permission> permissions;

    /*
     * Role definition assignable scopes.
     */
    @Generated
    private List<KeyVaultRoleScope> assignableScopes;

    /**
     * Creates an instance of RoleDefinitionProperties class.
     */
    @Generated
    public RoleDefinitionProperties() {
    }

    /**
     * Get the roleName property: The role name.
     *
     * @return the roleName value.
     */
    @Generated
    public String getRoleName() {
        return this.roleName;
    }

    /**
     * Set the roleName property: The role name.
     *
     * @param roleName the roleName value to set.
     * @return the RoleDefinitionProperties object itself.
     */
    @Generated
    public RoleDefinitionProperties setRoleName(String roleName) {
        this.roleName = roleName;
        return this;
    }

    /**
     * Get the description property: The role definition description.
     *
     * @return the description value.
     */
    @Generated
    public String getDescription() {
        return this.description;
    }

    /**
     * Set the description property: The role definition description.
     *
     * @param description the description value to set.
     * @return the RoleDefinitionProperties object itself.
     */
    @Generated
    public RoleDefinitionProperties setDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the roleType property: The role type.
     *
     * @return the roleType value.
     */
    @Generated
    public KeyVaultRoleType getRoleType() {
        return this.roleType;
    }

    /**
     * Set the roleType property: The role type.
     *
     * @param roleType the roleType value to set.
     * @return the RoleDefinitionProperties object itself.
     */
    @Generated
    public RoleDefinitionProperties setRoleType(KeyVaultRoleType roleType) {
        this.roleType = roleType;
        return this;
    }

    /**
     * Get the permissions property: Role definition permissions.
     *
     * @return the permissions value.
     */
    @Generated
    public List<Permission> getPermissions() {
        return this.permissions;
    }

    /**
     * Set the permissions property: Role definition permissions.
     *
     * @param permissions the permissions value to set.
     * @return the RoleDefinitionProperties object itself.
     */
    @Generated
    public RoleDefinitionProperties setPermissions(List<Permission> permissions) {
        this.permissions = permissions;
        return this;
    }

    /**
     * Get the assignableScopes property: Role definition assignable scopes.
     *
     * @return the assignableScopes value.
     */
    @Generated
    public List<KeyVaultRoleScope> getAssignableScopes() {
        return this.assignableScopes;
    }

    /**
     * Set the assignableScopes property: Role definition assignable scopes.
     *
     * @param assignableScopes the assignableScopes value to set.
     * @return the RoleDefinitionProperties object itself.
     */
    @Generated
    public RoleDefinitionProperties setAssignableScopes(List<KeyVaultRoleScope> assignableScopes) {
        this.assignableScopes = assignableScopes;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("roleName", this.roleName);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeStringField("type", this.roleType == null ? null : this.roleType.toString());
        jsonWriter.writeArrayField("permissions", this.permissions, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("assignableScopes", this.assignableScopes,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RoleDefinitionProperties from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of RoleDefinitionProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the RoleDefinitionProperties.
     */
    @Generated
    public static RoleDefinitionProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RoleDefinitionProperties deserializedRoleDefinitionProperties = new RoleDefinitionProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("roleName".equals(fieldName)) {
                    deserializedRoleDefinitionProperties.roleName = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedRoleDefinitionProperties.description = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedRoleDefinitionProperties.roleType = KeyVaultRoleType.fromString(reader.getString());
                } else if ("permissions".equals(fieldName)) {
                    List<Permission> permissions = reader.readArray(reader1 -> Permission.fromJson(reader1));
                    deserializedRoleDefinitionProperties.permissions = permissions;
                } else if ("assignableScopes".equals(fieldName)) {
                    List<KeyVaultRoleScope> assignableScopes
                        = reader.readArray(reader1 -> KeyVaultRoleScope.fromString(reader1.getString()));
                    deserializedRoleDefinitionProperties.assignableScopes = assignableScopes;
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedRoleDefinitionProperties;
        });
    }
}
