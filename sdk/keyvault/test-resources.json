{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "baseName": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]",
      "metadata": {
        "description": "The base resource name."
      }
    },
    "tenantId": {
      "type": "string",
      "defaultValue": "[subscription().tenantId]",
      "metadata": {
        "description": "The tenant ID to which the application and resources belong."
      }
    },
    "testApplicationOid": {
      "type": "string",
      "metadata": {
        "description": "The client OID to grant access to test resources."
      }
    },
    "provisionerApplicationOid": {
      "type": "string",
      "metadata": {
        "description": "The provisioner OID to grant access to test resources."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The location of the resource. By default, this is the same as the resource group."
      }
    },
    "hsmLocation": {
      "type": "string",
      "defaultValue": "northcentralus",
      "allowedValues": [
        "australiacentral",
        "australiaeast",
        "canadacentral",
        "canadaeast",
        "centralindia",
        "centralus",
        "eastasia",
        "eastus",
        "eastus2",
        "francecentral",
        "japaneast",
        "koreacentral",
        "northcentralus",
        "northeurope",
        "southafricanorth",
        "southcentralus",
        "switzerlandnorth",
        "switzerlandwest",
        "uaenorth",
        "uksouth",
        "westcentralus",
        "westeurope",
        "westus",
        "westus2",
        "westus3"
      ],
      "metadata": {
        "description": "The location of the Managed HSM. By default, this is 'northcentralus'."
      }
    },
    "enableHsm": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Whether to enable deployment of Managed HSM. The default is false."
      }
    },
    "keyVaultSku": {
      "type": "string",
      "defaultValue": "premium",
      "allowedValues": [
        "standard",
        "premium"
      ],
      "metadata": {
        "description": "Key Vault SKU to deploy. The default is 'Premium'"
      }
    },
    "keyVaultEndpointSuffix": {
      "type": "string",
      "defaultValue": ".vault.azure.net"
    },
    "testApplicationId": {
      "type": "string"
    },
    "testApplicationSecret": {
      "type": "string"
    },
    "enabledForDeployment": {
      "type": "bool",
      "defaultValue": false,
      "allowedValues": [
        true,
        false
      ]
    },
    "enabledForDiskEncryption": {
      "type": "bool",
      "defaultValue": false,
      "allowedValues": [
        true,
        false
      ]
    },
    "enabledForTemplateDeployment": {
      "type": "bool",
      "defaultValue": false,
      "allowedValues": [
        true,
        false
      ]
    },
    "identityName": {
      "type": "string",
      "defaultValue": "identityForKeyVault"
    },
    "certificateName": {
      "type": "string",
      "defaultValue": "myalias"
    },
    "subjectName": {
      "type": "string",
      "defaultValue": "CN=mydomain.com"
    },
    "utcValue": {
      "type": "string",
      "defaultValue": "[utcNow()]"
    },
    "attestationImage": {
      "type": "string",
      "defaultValue": "keyvault-mock-attestation:latest",
      "metadata": {
        "description": "The attestation image to use. The default is 'keyvault-mock-attestation:latest'."
      }
    },
    "storageEndpointSuffix": {
      "type": "string",
      "defaultValue": "core.windows.net",
      "metadata": {
          "description": "The url suffix to use when accessing the storage data plane."
      }
    }
  },
  "variables": {
    "kvApiVersion": "2019-09-01",
    "attestationFarm": "[concat(parameters('baseName'), 'farm')]",
    "attestationSite": "[concat(parameters('baseName'), 'site')]",
    "attestationImageUri": "[concat('DOCKER|azsdkengsys.azurecr.io/', parameters('attestationImage'))]",
    "kvName": "[parameters('baseName')]",
    "hsmApiVersion": "2021-04-01-preview",
    "hsmName": "[concat(parameters('baseName'), 'hsm')]",
    "mgmtApiVersion": "2019-04-01",
    "blobContainerName": "backup",
    "primaryAccountName": "[concat(parameters('baseName'), 'prim')]",
    "encryption": {
      "services": {
        "blob": {
          "enabled": true
        }
      },
      "keySource": "Microsoft.Storage"
    },
    "networkAcls": {
      "bypass": "AzureServices",
      "virtualNetworkRules": [],
      "ipRules": [],
      "defaultAction": "Allow"
    },
    "bootstrapRoleAssignmentId": "[guid(concat(resourceGroup().id, 'contributor'))]",
    "contributorRoleDefinitionId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]"
  },
  "resources": [
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2018-11-30",
      "name": "[parameters('identityName')]",
      "location": "[parameters('location')]"
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2018-09-01-preview",
      "name": "[variables('bootstrapRoleAssignmentId')]",
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName'))]"
      ],
      "properties": {
        "roleDefinitionId": "[variables('contributorRoleDefinitionId')]",
        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName')), '2018-11-30').principalId]",
        "scope": "[resourceGroup().id]",
        "principalType": "ServicePrincipal"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "[variables('kvApiVersion')]",
      "name": "[variables('kvName')]",
      "location": "[parameters('location')]",
      "properties": {
        "sku": {
          "family": "A",
          "name": "[parameters('keyVaultSku')]"
        },
        "tenantId": "[parameters('tenantId')]",
        "accessPolicies": [
          {
            "tenantId": "[parameters('tenantId')]",
            "objectId": "[parameters('testApplicationOid')]",
            "permissions": {
              "keys": [
                "Get",
                "List",
                "Update",
                "Create",
                "Import",
                "Delete",
                "Recover",
                "Backup",
                "Restore",
                "Decrypt",
                "Encrypt",
                "UnwrapKey",
                "WrapKey",
                "Sign",
                "Purge",
                "Rotate",
                "Verify",
                "GetRotationPolicy",
                "SetRotationPolicy"
              ],
              "secrets": [
                "Get",
                "List",
                "Set",
                "Delete",
                "Recover",
                "Backup",
                "Restore",
                "Purge"
              ],
              "certificates": [
                "Get",
                "List",
                "Update",
                "Create",
                "Import",
                "Delete",
                "Recover",
                "Backup",
                "Restore",
                "ManageContacts",
                "ManageIssuers",
                "GetIssuers",
                "ListIssuers",
                "SetIssuers",
                "DeleteIssuers",
                "Purge"
              ]
            }
          },
          {
            "tenantId": "[parameters('tenantId')]",
            "objectId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName')), '2018-11-30').principalId]",
            "permissions": {
              "keys": [
                "Get",
                "List",
                "Update",
                "Create",
                "Import",
                "Delete",
                "Recover",
                "Backup",
                "Restore",
                "Decrypt",
                "Encrypt",
                "UnwrapKey",
                "WrapKey",
                "Sign",
                "Purge",
                "Rotate",
                "Verify",
                "GetRotationPolicy",
                "SetRotationPolicy"
              ],
              "secrets": [
                "Get",
                "List",
                "Set",
                "Delete",
                "Recover",
                "Backup",
                "Restore",
                "Purge"
              ],
              "certificates": [
                "Get",
                "List",
                "Update",
                "Create",
                "Import",
                "Delete",
                "Recover",
                "Backup",
                "Restore",
                "ManageContacts",
                "ManageIssuers",
                "GetIssuers",
                "ListIssuers",
                "SetIssuers",
                "DeleteIssuers",
                "Purge"
              ]
            }
          }
        ],
        "enabledForDeployment": "[parameters('enabledForDeployment')]",
        "enabledForDiskEncryption": "[parameters('enabledForDiskEncryption')]",
        "enabledForTemplateDeployment": "[parameters('enabledForTemplateDeployment')]",
        "enableSoftDelete": true,
        "softDeleteRetentionInDays": 7,
        "networkAcls": "[variables('networkAcls')]"
      }
    },
    {
      "type": "Microsoft.KeyVault/managedHSMs",
      "apiVersion": "[variables('hsmApiVersion')]",
      "name": "[variables('hsmName')]",
      "condition": "[parameters('enableHsm')]",
      "location": "[parameters('hsmLocation')]",
      "sku": {
        "family": "B",
        "name": "Standard_B1"
      },
      "properties": {
        "tenantId": "[parameters('tenantId')]",
        "initialAdminObjectIds": "[union(array(parameters('testApplicationOid')), array(parameters('provisionerApplicationOid')))]",
        "enablePurgeProtection": false,
        "enableSoftDelete": true,
        "softDeleteRetentionInDays": 7,
        "publicNetworkAccess": "Enabled",
        "networkAcls": "[variables('networkAcls')]"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "[variables('mgmtApiVersion')]",
      "name": "[variables('primaryAccountName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_RAGRS",
        "tier": "Standard"
      },
      "kind": "StorageV2",
      "properties": {
        "networkAcls": "[variables('networkAcls')]",
        "supportsHttpsTrafficOnly": true,
        "encryption": "[variables('encryption')]",
        "accessTier": "Hot"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices",
      "apiVersion": "2019-06-01",
      "name": "[concat(variables('primaryAccountName'), '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('primaryAccountName'))]"
      ],
      "sku": {
        "name": "Standard_RAGRS",
        "tier": "Standard"
      },
      "properties": {
        "cors": {
          "corsRules": []
        },
        "deleteRetentionPolicy": {
          "enabled": false
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2019-06-01",
      "name": "[concat(variables('primaryAccountName'), '/default/', variables('blobContainerName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('primaryAccountName'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('primaryAccountName'))]"
      ],
      "properties": {
        "publicAccess": "None"
      }
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2020-12-01",
      "name": "[variables('attestationFarm')]",
      "location": "[parameters('location')]",
      "kind": "linux",
      "sku": {
        "name": "B1"
      },
      "properties": {
        "reserved": true
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2020-12-01",
      "name": "[variables('attestationSite')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('attestationFarm'))]"
      ],
      "location": "[parameters('location')]",
      "properties": {
        "httpsOnly": true,
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('attestationFarm'))]",
        "siteConfig": {
          "name": "[variables('attestationSite')]",
          "alwaysOn": true,
          "linuxFxVersion": "[variables('attestationImageUri')]",
          "appSettings": [
            {
              "name": "WEBSITES_ENABLE_APP_SERVICE_STORAGE",
              "value": "false"
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2020-10-01",
      "name": "createAddCertificate",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('kvName'))]",
        "[resourceId('Microsoft.Authorization/roleAssignments', variables('bootstrapRoleAssignmentId'))]"
      ],
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName'))]": {
          }
        }
      },
      "kind": "AzurePowerShell",
      "properties": {
        "forceUpdateTag": "[parameters('utcValue')]",
        "azPowerShellVersion": "5.0",
        "timeout": "PT30M",
        "arguments": "[format(' -vaultName {0} -certificateName {1} -subjectName {2}', variables('kvName'), parameters('certificateName'), parameters('subjectName'))]",
        "scriptContent": "
        param(
    [string] [Parameter(Mandatory=$true)] $vaultName,
    [string] [Parameter(Mandatory=$true)] $certificateName,
    [string] [Parameter(Mandatory=$true)] $subjectName
    )

    $ErrorActionPreference = 'Stop'
    $DeploymentScriptOutputs = @{}

    $policy = New-AzKeyVaultCertificatePolicy -SubjectName $subjectName -IssuerName Self -ValidityInMonths 12 -Verbose

    Add-AzKeyVaultCertificate -VaultName $vaultName -Name $certificateName -CertificatePolicy $policy -Verbose

    $newCert = Get-AzKeyVaultCertificate -VaultName $vaultName -Name $certificateName

    $tries = 0
    do {
      Write-Host 'Waiting for certificate creation completion...'
      Start-Sleep -Seconds 10
      $operation = Get-AzKeyVaultCertificateOperation -VaultName $vaultName -Name $certificateName
      $tries++

      if ($operation.Status -eq 'failed') {
        throw 'Creating certificate $certificateName in vault $vaultName failed with error $($operation.ErrorMessage)'
      }

      if ($tries -gt 120) {
        throw 'Timed out waiting for creation of certificate $certificateName in vault $vaultName'
      }
    } while ($operation.Status -ne 'completed')

    $DeploymentScriptOutputs['certThumbprint'] = $newCert.Thumbprint
    $newCert | Out-String
    ",
    "cleanupPreference": "OnSuccess",
    "retentionInterval": "P1D"
    }
  }
  ],
  "outputs": {
    "AZURE_KEYVAULT_ENDPOINT": {
      "type": "string",
      "value": "[reference(variables('kvName')).vaultUri]"
    },
    "AZURE_MANAGEDHSM_ENDPOINT": {
      "type": "string",
      "condition": "[parameters('enableHsm')]",
      "value": "[reference(variables('hsmName')).hsmUri]"
    },
    "AZURE_KEYVAULT_TENANT_ID": {
      "type": "string",
      "value": "[parameters('tenantId')]"
    },
    "AZURE_KEYVAULT_CLIENT_ID": {
      "type": "string",
      "value": "[parameters('testApplicationId')]"
    },
    "AZURE_KEYVAULT_CLIENT_SECRET": {
      "type": "string",
      "value": "[parameters('testApplicationSecret')]"
    },
    "AZURE_KEYVAULT_CERTIFICATE_NAME": {
      "type": "string",
      "value": "[parameters('certificateName')]"
    },
    "AZURE_KEYVAULT_URI": {
      "type": "string",
      "value": "[reference(variables('kvName')).vaultUri]"
    },
    "KEYVAULT_SKU": {
      "type": "string",
      "value": "[reference(parameters('baseName')).sku.name]"
    },
    "CLIENT_OBJECTID": {
      "type": "string",
      "value": "[parameters('testApplicationOid')]"
    },
    "KEYVAULT_STORAGE_ENDPOINT_SUFFIX": {
        "type": "string",
        "value": "[parameters('storageEndpointSuffix')]"
    },
    "BLOB_STORAGE_ACCOUNT_NAME": {
      "type": "string",
      "value": "[variables('primaryAccountName')]"
    },
    "BLOB_PRIMARY_STORAGE_ACCOUNT_KEY": {
      "type": "string",
      "value": "[listKeys(variables('primaryAccountName'), variables('mgmtApiVersion')).keys[0].value]"
    },
    "BLOB_CONTAINER_NAME" : {
      "type": "string",
      "value": "[variables('blobContainerName')]"
    },
    "AZURE_KEYVAULT_ATTESTATION_URL": {
      "type": "string",
      "value": "[format('https://{0}/', reference(variables('attestationSite')).defaultHostName)]"
    },
    "KEY_VAULT_ENDPOINT_SUFFIX": {
      "type": "string",
      "value": "[parameters('keyVaultEndpointSuffix')]"
    }
  }
}
