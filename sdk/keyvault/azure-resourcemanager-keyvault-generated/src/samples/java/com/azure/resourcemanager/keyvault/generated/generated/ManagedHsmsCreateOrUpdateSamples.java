// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.keyvault.generated.generated;

import com.azure.resourcemanager.keyvault.generated.models.ManagedHsmProperties;
import com.azure.resourcemanager.keyvault.generated.models.ManagedHsmSku;
import com.azure.resourcemanager.keyvault.generated.models.ManagedHsmSkuFamily;
import com.azure.resourcemanager.keyvault.generated.models.ManagedHsmSkuName;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

/** Samples for ManagedHsms CreateOrUpdate. */
public final class ManagedHsmsCreateOrUpdateSamples {
    /*
     * x-ms-original-file: specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/ManagedHsm_CreateOrUpdate.json
     */
    /**
     * Sample code: Create a new managed HSM Pool or update an existing managed HSM Pool.
     *
     * @param manager Entry point to KeyVaultManager.
     */
    public static void createANewManagedHSMPoolOrUpdateAnExistingManagedHSMPool(
        com.azure.resourcemanager.keyvault.generated.KeyVaultManager manager) {
        manager
            .managedHsms()
            .define("hsm1")
            .withRegion("westus")
            .withExistingResourceGroup("hsm-group")
            .withTags(mapOf("Dept", "hsm", "Environment", "dogfood"))
            .withSku(new ManagedHsmSku().withFamily(ManagedHsmSkuFamily.B).withName(ManagedHsmSkuName.STANDARD_B1))
            .withProperties(
                new ManagedHsmProperties()
                    .withTenantId(UUID.fromString("00000000-0000-0000-0000-000000000000"))
                    .withInitialAdminObjectIds(Arrays.asList("00000000-0000-0000-0000-000000000000"))
                    .withEnableSoftDelete(true)
                    .withSoftDeleteRetentionInDays(90)
                    .withEnablePurgeProtection(true))
            .create();
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
