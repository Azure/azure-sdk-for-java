// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.keyvault.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.management.Resource;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.keyvault.generated.models.Attributes;
import com.azure.resourcemanager.keyvault.generated.models.JsonWebKeyCurveName;
import com.azure.resourcemanager.keyvault.generated.models.JsonWebKeyOperation;
import com.azure.resourcemanager.keyvault.generated.models.JsonWebKeyType;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/** The key resource. */
@JsonFlatten
@Fluent
public class KeyInner extends Resource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(KeyInner.class);

    /*
     * The attributes of the key.
     */
    @JsonProperty(value = "properties.attributes")
    private Attributes attributes;

    /*
     * The type of the key. For valid values, see JsonWebKeyType.
     */
    @JsonProperty(value = "properties.kty")
    private JsonWebKeyType kty;

    /*
     * The keyOps property.
     */
    @JsonProperty(value = "properties.keyOps")
    private List<JsonWebKeyOperation> keyOps;

    /*
     * The key size in bits. For example: 2048, 3072, or 4096 for RSA.
     */
    @JsonProperty(value = "properties.keySize")
    private Integer keySize;

    /*
     * The elliptic curve name. For valid values, see JsonWebKeyCurveName.
     */
    @JsonProperty(value = "properties.curveName")
    private JsonWebKeyCurveName curveName;

    /*
     * The URI to retrieve the current version of the key.
     */
    @JsonProperty(value = "properties.keyUri", access = JsonProperty.Access.WRITE_ONLY)
    private String keyUri;

    /*
     * The URI to retrieve the specific version of the key.
     */
    @JsonProperty(value = "properties.keyUriWithVersion", access = JsonProperty.Access.WRITE_ONLY)
    private String keyUriWithVersion;

    /**
     * Get the attributes property: The attributes of the key.
     *
     * @return the attributes value.
     */
    public Attributes attributes() {
        return this.attributes;
    }

    /**
     * Set the attributes property: The attributes of the key.
     *
     * @param attributes the attributes value to set.
     * @return the KeyInner object itself.
     */
    public KeyInner withAttributes(Attributes attributes) {
        this.attributes = attributes;
        return this;
    }

    /**
     * Get the kty property: The type of the key. For valid values, see JsonWebKeyType.
     *
     * @return the kty value.
     */
    public JsonWebKeyType kty() {
        return this.kty;
    }

    /**
     * Set the kty property: The type of the key. For valid values, see JsonWebKeyType.
     *
     * @param kty the kty value to set.
     * @return the KeyInner object itself.
     */
    public KeyInner withKty(JsonWebKeyType kty) {
        this.kty = kty;
        return this;
    }

    /**
     * Get the keyOps property: The keyOps property.
     *
     * @return the keyOps value.
     */
    public List<JsonWebKeyOperation> keyOps() {
        return this.keyOps;
    }

    /**
     * Set the keyOps property: The keyOps property.
     *
     * @param keyOps the keyOps value to set.
     * @return the KeyInner object itself.
     */
    public KeyInner withKeyOps(List<JsonWebKeyOperation> keyOps) {
        this.keyOps = keyOps;
        return this;
    }

    /**
     * Get the keySize property: The key size in bits. For example: 2048, 3072, or 4096 for RSA.
     *
     * @return the keySize value.
     */
    public Integer keySize() {
        return this.keySize;
    }

    /**
     * Set the keySize property: The key size in bits. For example: 2048, 3072, or 4096 for RSA.
     *
     * @param keySize the keySize value to set.
     * @return the KeyInner object itself.
     */
    public KeyInner withKeySize(Integer keySize) {
        this.keySize = keySize;
        return this;
    }

    /**
     * Get the curveName property: The elliptic curve name. For valid values, see JsonWebKeyCurveName.
     *
     * @return the curveName value.
     */
    public JsonWebKeyCurveName curveName() {
        return this.curveName;
    }

    /**
     * Set the curveName property: The elliptic curve name. For valid values, see JsonWebKeyCurveName.
     *
     * @param curveName the curveName value to set.
     * @return the KeyInner object itself.
     */
    public KeyInner withCurveName(JsonWebKeyCurveName curveName) {
        this.curveName = curveName;
        return this;
    }

    /**
     * Get the keyUri property: The URI to retrieve the current version of the key.
     *
     * @return the keyUri value.
     */
    public String keyUri() {
        return this.keyUri;
    }

    /**
     * Get the keyUriWithVersion property: The URI to retrieve the specific version of the key.
     *
     * @return the keyUriWithVersion value.
     */
    public String keyUriWithVersion() {
        return this.keyUriWithVersion;
    }

    /** {@inheritDoc} */
    @Override
    public KeyInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public KeyInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (attributes() != null) {
            attributes().validate();
        }
    }
}
