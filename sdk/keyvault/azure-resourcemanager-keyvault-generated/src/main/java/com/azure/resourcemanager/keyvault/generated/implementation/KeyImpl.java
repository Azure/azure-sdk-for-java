// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.keyvault.generated.implementation;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.keyvault.generated.KeyVaultManager;
import com.azure.resourcemanager.keyvault.generated.fluent.models.KeyInner;
import com.azure.resourcemanager.keyvault.generated.models.Attributes;
import com.azure.resourcemanager.keyvault.generated.models.JsonWebKeyCurveName;
import com.azure.resourcemanager.keyvault.generated.models.JsonWebKeyOperation;
import com.azure.resourcemanager.keyvault.generated.models.JsonWebKeyType;
import com.azure.resourcemanager.keyvault.generated.models.Key;
import com.azure.resourcemanager.keyvault.generated.models.KeyCreateParameters;
import com.azure.resourcemanager.keyvault.generated.models.KeyProperties;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public final class KeyImpl implements Key, Key.Definition {
    private KeyInner innerObject;

    private final KeyVaultManager serviceManager;

    public KeyImpl(KeyInner innerObject, KeyVaultManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
    }

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public Attributes attributes() {
        return this.innerModel().attributes();
    }

    public JsonWebKeyType kty() {
        return this.innerModel().kty();
    }

    public List<JsonWebKeyOperation> keyOps() {
        List<JsonWebKeyOperation> inner = this.innerModel().keyOps();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public Integer keySize() {
        return this.innerModel().keySize();
    }

    public JsonWebKeyCurveName curveName() {
        return this.innerModel().curveName();
    }

    public String keyUri() {
        return this.innerModel().keyUri();
    }

    public String keyUriWithVersion() {
        return this.innerModel().keyUriWithVersion();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public KeyInner innerModel() {
        return this.innerObject;
    }

    private KeyVaultManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String vaultName;

    private String keyName;

    private KeyCreateParameters createParameters;

    public KeyImpl withExistingVault(String resourceGroupName, String vaultName) {
        this.resourceGroupName = resourceGroupName;
        this.vaultName = vaultName;
        return this;
    }

    public Key create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getKeys()
                .createIfNotExistWithResponse(resourceGroupName, vaultName, keyName, createParameters, Context.NONE)
                .getValue();
        return this;
    }

    public Key create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getKeys()
                .createIfNotExistWithResponse(resourceGroupName, vaultName, keyName, createParameters, context)
                .getValue();
        return this;
    }

    public KeyImpl(String name, KeyVaultManager serviceManager) {
        this.innerObject = new KeyInner();
        this.serviceManager = serviceManager;
        this.keyName = name;
        this.createParameters = new KeyCreateParameters();
    }

    public Key refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getKeys()
                .getWithResponse(resourceGroupName, vaultName, keyName, Context.NONE)
                .getValue();
        return this;
    }

    public Key refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getKeys()
                .getWithResponse(resourceGroupName, vaultName, keyName, context)
                .getValue();
        return this;
    }

    public KeyImpl withProperties(KeyProperties properties) {
        this.createParameters.withProperties(properties);
        return this;
    }

    public KeyImpl withTags(Map<String, String> tags) {
        this.createParameters.withTags(tags);
        return this;
    }
}
