// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.v2.security.keyvault.administration;

import com.azure.v2.security.keyvault.administration.implementation.KeyVaultClientImpl;
import com.azure.v2.security.keyvault.administration.implementation.models.FullBackupOperation;
import com.azure.v2.security.keyvault.administration.implementation.models.KeyVaultErrorException;
import com.azure.v2.security.keyvault.administration.implementation.models.RestoreOperation;
import com.azure.v2.security.keyvault.administration.implementation.models.SelectiveKeyRestoreOperation;
import com.azure.v2.security.keyvault.administration.implementation.models.Setting;
import com.azure.v2.security.keyvault.administration.implementation.models.SettingsListResult;
import com.azure.v2.security.keyvault.administration.implementation.models.UpdateSettingRequest;
import io.clientcore.core.annotations.Metadata;
import io.clientcore.core.annotations.MetadataProperties;
import io.clientcore.core.annotations.ReturnType;
import io.clientcore.core.annotations.ServiceClient;
import io.clientcore.core.annotations.ServiceMethod;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;

/**
 * Initializes a new instance of the synchronous KeyVaultClient type.
 */
@ServiceClient(builder = KeyVaultClientBuilder.class)
public final class KeyVaultClient {
    @Metadata(properties = { MetadataProperties.GENERATED })
    private final KeyVaultClientImpl serviceClient;

    /**
     * Initializes an instance of KeyVaultClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    KeyVaultClient(KeyVaultClientImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Returns the status of full backup operation.
     * 
     * @param jobId The id returned as part of the backup request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return full backup operation.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<FullBackupOperation> fullBackupStatusWithResponse(String jobId, RequestOptions requestOptions) {
        return this.serviceClient.fullBackupStatusWithResponse(jobId, requestOptions);
    }

    /**
     * Returns the status of full backup operation.
     * 
     * @param jobId The id returned as part of the backup request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return full backup operation.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FullBackupOperation fullBackupStatus(String jobId) {
        return this.serviceClient.fullBackupStatus(jobId);
    }

    /**
     * Returns the status of restore operation.
     * 
     * @param jobId The Job Id returned part of the restore operation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return restore operation.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<RestoreOperation> restoreStatusWithResponse(String jobId, RequestOptions requestOptions) {
        return this.serviceClient.restoreStatusWithResponse(jobId, requestOptions);
    }

    /**
     * Returns the status of restore operation.
     * 
     * @param jobId The Job Id returned part of the restore operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return restore operation.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RestoreOperation restoreStatus(String jobId) {
        return this.serviceClient.restoreStatus(jobId);
    }

    /**
     * Returns the status of the selective key restore operation.
     * 
     * @param jobId The Job Id returned part of the restore operation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return selective Key Restore operation.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SelectiveKeyRestoreOperation> selectiveKeyRestoreStatusWithResponse(String jobId,
        RequestOptions requestOptions) {
        return this.serviceClient.selectiveKeyRestoreStatusWithResponse(jobId, requestOptions);
    }

    /**
     * Returns the status of the selective key restore operation.
     * 
     * @param jobId The Job Id returned part of the restore operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return selective Key Restore operation.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SelectiveKeyRestoreOperation selectiveKeyRestoreStatus(String jobId) {
        return this.serviceClient.selectiveKeyRestoreStatus(jobId);
    }

    /**
     * Updates key vault account setting, stores it, then returns the setting name and value to the client.
     * 
     * Description of the pool setting to be updated.
     * 
     * @param settingName The name of the account setting. Must be a valid settings option.
     * @param parameters The parameters to update an account setting.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Key Vault account setting.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Setting> updateSettingWithResponse(String settingName, UpdateSettingRequest parameters,
        RequestOptions requestOptions) {
        return this.serviceClient.updateSettingWithResponse(settingName, parameters, requestOptions);
    }

    /**
     * Updates key vault account setting, stores it, then returns the setting name and value to the client.
     * 
     * Description of the pool setting to be updated.
     * 
     * @param settingName The name of the account setting. Must be a valid settings option.
     * @param parameters The parameters to update an account setting.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Key Vault account setting.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Setting updateSetting(String settingName, UpdateSettingRequest parameters) {
        return this.serviceClient.updateSetting(settingName, parameters);
    }

    /**
     * Get specified account setting object.
     * 
     * Retrieves the setting object of a specified setting name.
     * 
     * @param settingName The name of the account setting. Must be a valid settings option.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specified account setting object.
     * 
     * Retrieves the setting object of a specified setting name.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Setting> getSettingWithResponse(String settingName, RequestOptions requestOptions) {
        return this.serviceClient.getSettingWithResponse(settingName, requestOptions);
    }

    /**
     * Get specified account setting object.
     * 
     * Retrieves the setting object of a specified setting name.
     * 
     * @param settingName The name of the account setting. Must be a valid settings option.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specified account setting object.
     * 
     * Retrieves the setting object of a specified setting name.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Setting getSetting(String settingName) {
        return this.serviceClient.getSetting(settingName);
    }

    /**
     * List account settings.
     * 
     * Retrieves a list of all the available account settings that can be configured.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the settings list result.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SettingsListResult> getSettingsWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.getSettingsWithResponse(requestOptions);
    }

    /**
     * List account settings.
     * 
     * Retrieves a list of all the available account settings that can be configured.
     * 
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the settings list result.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SettingsListResult getSettings() {
        return this.serviceClient.getSettings();
    }
}
