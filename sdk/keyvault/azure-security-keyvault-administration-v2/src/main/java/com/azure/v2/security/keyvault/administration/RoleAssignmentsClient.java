// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.v2.security.keyvault.administration;

import com.azure.v2.security.keyvault.administration.implementation.RoleAssignmentsImpl;
import com.azure.v2.security.keyvault.administration.implementation.models.KeyVaultErrorException;
import com.azure.v2.security.keyvault.administration.implementation.models.RoleAssignment;
import com.azure.v2.security.keyvault.administration.implementation.models.RoleAssignmentCreateParameters;
import io.clientcore.core.annotations.Metadata;
import io.clientcore.core.annotations.MetadataProperties;
import io.clientcore.core.annotations.ReturnType;
import io.clientcore.core.annotations.ServiceClient;
import io.clientcore.core.annotations.ServiceMethod;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.http.paging.PagedIterable;

/**
 * Initializes a new instance of the synchronous KeyVaultClient type.
 */
@ServiceClient(builder = KeyVaultClientBuilder.class)
public final class RoleAssignmentsClient {
    @Metadata(properties = { MetadataProperties.GENERATED })
    private final RoleAssignmentsImpl serviceClient;

    /**
     * Initializes an instance of RoleAssignmentsClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    RoleAssignmentsClient(RoleAssignmentsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Deletes a role assignment.
     * 
     * @param scope The scope of the role assignment to delete.
     * @param roleAssignmentName The name of the role assignment to delete.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return role Assignments.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<RoleAssignment> deleteWithResponse(String scope, String roleAssignmentName,
        RequestOptions requestOptions) {
        return this.serviceClient.deleteWithResponse(scope, roleAssignmentName, requestOptions);
    }

    /**
     * Deletes a role assignment.
     * 
     * @param scope The scope of the role assignment to delete.
     * @param roleAssignmentName The name of the role assignment to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return role Assignments.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RoleAssignment delete(String scope, String roleAssignmentName) {
        return this.serviceClient.delete(scope, roleAssignmentName);
    }

    /**
     * Creates a role assignment.
     * 
     * @param scope The scope of the role assignment to create.
     * @param roleAssignmentName The name of the role assignment to create. It can be any valid GUID.
     * @param parameters Parameters for the role assignment.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return role Assignments.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<RoleAssignment> createWithResponse(String scope, String roleAssignmentName,
        RoleAssignmentCreateParameters parameters, RequestOptions requestOptions) {
        return this.serviceClient.createWithResponse(scope, roleAssignmentName, parameters, requestOptions);
    }

    /**
     * Creates a role assignment.
     * 
     * @param scope The scope of the role assignment to create.
     * @param roleAssignmentName The name of the role assignment to create. It can be any valid GUID.
     * @param parameters Parameters for the role assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return role Assignments.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RoleAssignment create(String scope, String roleAssignmentName, RoleAssignmentCreateParameters parameters) {
        return this.serviceClient.create(scope, roleAssignmentName, parameters);
    }

    /**
     * Get the specified role assignment.
     * 
     * @param scope The scope of the role assignment.
     * @param roleAssignmentName The name of the role assignment to get.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specified role assignment.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<RoleAssignment> getWithResponse(String scope, String roleAssignmentName,
        RequestOptions requestOptions) {
        return this.serviceClient.getWithResponse(scope, roleAssignmentName, requestOptions);
    }

    /**
     * Get the specified role assignment.
     * 
     * @param scope The scope of the role assignment.
     * @param roleAssignmentName The name of the role assignment to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specified role assignment.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RoleAssignment get(String scope, String roleAssignmentName) {
        return this.serviceClient.get(scope, roleAssignmentName);
    }

    /**
     * Gets role assignments for a scope.
     * 
     * @param scope The scope of the role assignments.
     * @param filter The filter to apply on the operation. Use $filter=atScope() to return all role assignments at or
     * above the scope. Use $filter=principalId eq {id} to return all role assignments at, above or below the scope for
     * the specified principal.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return role assignments for a scope.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<RoleAssignment> listForScope(String scope, String filter) {
        return this.serviceClient.listForScope(scope, filter);
    }

    /**
     * Gets role assignments for a scope.
     * 
     * @param scope The scope of the role assignments.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return role assignments for a scope.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<RoleAssignment> listForScope(String scope) {
        return this.serviceClient.listForScope(scope);
    }

    /**
     * Gets role assignments for a scope.
     * 
     * @param scope The scope of the role assignments.
     * @param filter The filter to apply on the operation. Use $filter=atScope() to return all role assignments at or
     * above the scope. Use $filter=principalId eq {id} to return all role assignments at, above or below the scope for
     * the specified principal.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return role assignments for a scope.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<RoleAssignment> listForScope(String scope, String filter, RequestOptions requestOptions) {
        return this.serviceClient.listForScope(scope, filter, requestOptions);
    }
}
