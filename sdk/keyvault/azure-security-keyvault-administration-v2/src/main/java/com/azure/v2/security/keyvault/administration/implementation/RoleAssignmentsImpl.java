// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.v2.security.keyvault.administration.implementation;

import com.azure.v2.security.keyvault.administration.KeyVaultServiceVersion;
import com.azure.v2.security.keyvault.administration.implementation.implementation.models.RoleAssignmentListResult;
import com.azure.v2.security.keyvault.administration.implementation.models.KeyVaultError;
import com.azure.v2.security.keyvault.administration.implementation.models.RoleAssignment;
import com.azure.v2.security.keyvault.administration.implementation.models.RoleAssignmentCreateParameters;
import io.clientcore.core.annotations.ReturnType;
import io.clientcore.core.annotations.ServiceInterface;
import io.clientcore.core.annotations.ServiceMethod;
import io.clientcore.core.http.annotations.BodyParam;
import io.clientcore.core.http.annotations.HeaderParam;
import io.clientcore.core.http.annotations.HostParam;
import io.clientcore.core.http.annotations.HttpRequestInformation;
import io.clientcore.core.http.annotations.PathParam;
import io.clientcore.core.http.annotations.QueryParam;
import io.clientcore.core.http.annotations.UnexpectedResponseExceptionDetail;
import io.clientcore.core.http.models.HttpMethod;
import io.clientcore.core.http.models.HttpResponseException;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.http.paging.PagedIterable;
import io.clientcore.core.http.paging.PagedResponse;
import io.clientcore.core.http.pipeline.HttpPipeline;
import io.clientcore.core.utils.Context;
import java.lang.reflect.InvocationTargetException;

/**
 * An instance of this class provides access to all the operations defined in RoleAssignments.
 */
public final class RoleAssignmentsImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final RoleAssignmentsService service;

    /**
     * The service client containing this operation class.
     */
    private final KeyVaultClientImpl client;

    /**
     * Initializes an instance of RoleAssignmentsImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    RoleAssignmentsImpl(KeyVaultClientImpl client) {
        this.service = RoleAssignmentsService.getNewInstance(client.getHttpPipeline());
        this.client = client;
    }

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public KeyVaultServiceVersion getServiceVersion() {
        return client.getServiceVersion();
    }

    /**
     * The interface defining all the services for KeyVaultClientRoleAssignments to be used by the proxy service to
     * perform REST calls.
     */
    @ServiceInterface(name = "KeyVaultClientRoleAs", host = "{vaultBaseUrl}")
    public interface RoleAssignmentsService {
        static RoleAssignmentsService getNewInstance(HttpPipeline pipeline) {
            try {
                Class<?> clazz = Class
                    .forName("com.azure.v2.security.keyvault.administration.implementation.RoleAssignmentsServiceImpl");
                return (RoleAssignmentsService) clazz.getMethod("getNewInstance", HttpPipeline.class)
                    .invoke(null, pipeline);
            } catch (ClassNotFoundException | NoSuchMethodException | IllegalAccessException
                | InvocationTargetException e) {
                throw new RuntimeException(e);
            }

        }

        @HttpRequestInformation(
            method = HttpMethod.DELETE,
            path = "/{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = KeyVaultError.class)
        Response<RoleAssignment> delete(@HostParam("vaultBaseUrl") String vaultBaseUrl,
            @QueryParam("api-version") String apiVersion, @PathParam(value = "scope", encoded = true) String scope,
            @PathParam("roleAssignmentName") String roleAssignmentName, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.PUT,
            path = "/{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}",
            expectedStatusCodes = { 201 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = KeyVaultError.class)
        Response<RoleAssignment> create(@HostParam("vaultBaseUrl") String vaultBaseUrl,
            @QueryParam("api-version") String apiVersion, @PathParam(value = "scope", encoded = true) String scope,
            @PathParam("roleAssignmentName") String roleAssignmentName, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept,
            @BodyParam("application/json") RoleAssignmentCreateParameters parameters, RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = KeyVaultError.class)
        Response<RoleAssignment> get(@HostParam("vaultBaseUrl") String vaultBaseUrl,
            @QueryParam("api-version") String apiVersion, @PathParam(value = "scope", encoded = true) String scope,
            @PathParam("roleAssignmentName") String roleAssignmentName, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/{scope}/providers/Microsoft.Authorization/roleAssignments",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = KeyVaultError.class)
        Response<RoleAssignmentListResult> listForScope(@HostParam("vaultBaseUrl") String vaultBaseUrl,
            @QueryParam("api-version") String apiVersion, @PathParam(value = "scope", encoded = true) String scope,
            @QueryParam("$filter") String filter, @HeaderParam("Accept") String accept, RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.GET, path = "{nextLink}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = KeyVaultError.class)
        Response<RoleAssignmentListResult> listForScopeNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("vaultBaseUrl") String vaultBaseUrl, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions);
    }

    /**
     * Deletes a role assignment.
     * 
     * @param scope The scope of the role assignment to delete.
     * @param roleAssignmentName The name of the role assignment to delete.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return role Assignments.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<RoleAssignment> deleteWithResponse(String scope, String roleAssignmentName,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.delete(this.client.getVaultBaseUrl(), this.client.getServiceVersion().getVersion(), scope,
            roleAssignmentName, accept, requestOptions);
    }

    /**
     * Deletes a role assignment.
     * 
     * @param scope The scope of the role assignment to delete.
     * @param roleAssignmentName The name of the role assignment to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return role Assignments.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RoleAssignment delete(String scope, String roleAssignmentName) {
        return deleteWithResponse(scope, roleAssignmentName, RequestOptions.none()).getValue();
    }

    /**
     * Creates a role assignment.
     * 
     * @param scope The scope of the role assignment to create.
     * @param roleAssignmentName The name of the role assignment to create. It can be any valid GUID.
     * @param parameters Parameters for the role assignment.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return role Assignments.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<RoleAssignment> createWithResponse(String scope, String roleAssignmentName,
        RoleAssignmentCreateParameters parameters, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.create(this.client.getVaultBaseUrl(), this.client.getServiceVersion().getVersion(), scope,
            roleAssignmentName, contentType, accept, parameters, requestOptions);
    }

    /**
     * Creates a role assignment.
     * 
     * @param scope The scope of the role assignment to create.
     * @param roleAssignmentName The name of the role assignment to create. It can be any valid GUID.
     * @param parameters Parameters for the role assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return role Assignments.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RoleAssignment create(String scope, String roleAssignmentName, RoleAssignmentCreateParameters parameters) {
        return createWithResponse(scope, roleAssignmentName, parameters, RequestOptions.none()).getValue();
    }

    /**
     * Get the specified role assignment.
     * 
     * @param scope The scope of the role assignment.
     * @param roleAssignmentName The name of the role assignment to get.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specified role assignment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<RoleAssignment> getWithResponse(String scope, String roleAssignmentName,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.get(this.client.getVaultBaseUrl(), this.client.getServiceVersion().getVersion(), scope,
            roleAssignmentName, accept, requestOptions);
    }

    /**
     * Get the specified role assignment.
     * 
     * @param scope The scope of the role assignment.
     * @param roleAssignmentName The name of the role assignment to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specified role assignment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RoleAssignment get(String scope, String roleAssignmentName) {
        return getWithResponse(scope, roleAssignmentName, RequestOptions.none()).getValue();
    }

    /**
     * Gets role assignments for a scope.
     * 
     * @param scope The scope of the role assignments.
     * @param filter The filter to apply on the operation. Use $filter=atScope() to return all role assignments at or
     * above the scope. Use $filter=principalId eq {id} to return all role assignments at, above or below the scope for
     * the specified principal.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return role assignments for a scope.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PagedResponse<RoleAssignment> listForScopeSinglePage(String scope, String filter) {
        final String accept = "application/json";
        Response<RoleAssignmentListResult> res = service.listForScope(this.client.getVaultBaseUrl(),
            this.client.getServiceVersion().getVersion(), scope, filter, accept, RequestOptions.none());
        return new PagedResponse<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().getValue(),
            null, res.getValue().getNextLink(), null, null, null);
    }

    /**
     * Gets role assignments for a scope.
     * 
     * @param scope The scope of the role assignments.
     * @param filter The filter to apply on the operation. Use $filter=atScope() to return all role assignments at or
     * above the scope. Use $filter=principalId eq {id} to return all role assignments at, above or below the scope for
     * the specified principal.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return role assignments for a scope.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PagedResponse<RoleAssignment> listForScopeSinglePage(String scope, String filter,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<RoleAssignmentListResult> res = service.listForScope(this.client.getVaultBaseUrl(),
            this.client.getServiceVersion().getVersion(), scope, filter, accept, requestOptions);
        return new PagedResponse<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().getValue(),
            null, res.getValue().getNextLink(), null, null, null);
    }

    /**
     * Gets role assignments for a scope.
     * 
     * @param scope The scope of the role assignments.
     * @param filter The filter to apply on the operation. Use $filter=atScope() to return all role assignments at or
     * above the scope. Use $filter=principalId eq {id} to return all role assignments at, above or below the scope for
     * the specified principal.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return role assignments for a scope.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<RoleAssignment> listForScope(String scope, String filter) {
        return new PagedIterable<>((pagingOptions) -> listForScopeSinglePage(scope, filter),
            (pagingOptions, nextLink) -> listForScopeNextSinglePage(nextLink));
    }

    /**
     * Gets role assignments for a scope.
     * 
     * @param scope The scope of the role assignments.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return role assignments for a scope.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<RoleAssignment> listForScope(String scope) {
        final String filter = null;
        return new PagedIterable<>((pagingOptions) -> listForScopeSinglePage(scope, filter),
            (pagingOptions, nextLink) -> listForScopeNextSinglePage(nextLink));
    }

    /**
     * Gets role assignments for a scope.
     * 
     * @param scope The scope of the role assignments.
     * @param filter The filter to apply on the operation. Use $filter=atScope() to return all role assignments at or
     * above the scope. Use $filter=principalId eq {id} to return all role assignments at, above or below the scope for
     * the specified principal.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return role assignments for a scope.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<RoleAssignment> listForScope(String scope, String filter, RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(requestOptions != null && requestOptions.getContext() != null
            ? requestOptions.getContext()
            : Context.none());
        return new PagedIterable<>((pagingOptions) -> listForScopeSinglePage(scope, filter, requestOptions),
            (pagingOptions, nextLink) -> listForScopeNextSinglePage(nextLink, requestOptionsForNextPage));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return role assignment list operation result.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PagedResponse<RoleAssignment> listForScopeNextSinglePage(String nextLink) {
        final String accept = "application/json";
        Response<RoleAssignmentListResult> res
            = service.listForScopeNext(nextLink, this.client.getVaultBaseUrl(), accept, RequestOptions.none());
        return new PagedResponse<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().getValue(),
            null, res.getValue().getNextLink(), null, null, null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return role assignment list operation result.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PagedResponse<RoleAssignment> listForScopeNextSinglePage(String nextLink, RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<RoleAssignmentListResult> res
            = service.listForScopeNext(nextLink, this.client.getVaultBaseUrl(), accept, requestOptions);
        return new PagedResponse<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().getValue(),
            null, res.getValue().getNextLink(), null, null, null);
    }
}
