// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.v2.security.keyvault.administration;

import com.azure.v2.security.keyvault.administration.implementation.RoleDefinitionsImpl;
import com.azure.v2.security.keyvault.administration.implementation.models.KeyVaultErrorException;
import com.azure.v2.security.keyvault.administration.implementation.models.RoleDefinition;
import com.azure.v2.security.keyvault.administration.implementation.models.RoleDefinitionCreateParameters;
import io.clientcore.core.annotations.Metadata;
import io.clientcore.core.annotations.MetadataProperties;
import io.clientcore.core.annotations.ReturnType;
import io.clientcore.core.annotations.ServiceClient;
import io.clientcore.core.annotations.ServiceMethod;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.http.paging.PagedIterable;

/**
 * Initializes a new instance of the synchronous KeyVaultClient type.
 */
@ServiceClient(builder = KeyVaultClientBuilder.class)
public final class RoleDefinitionsClient {
    @Metadata(properties = { MetadataProperties.GENERATED })
    private final RoleDefinitionsImpl serviceClient;

    /**
     * Initializes an instance of RoleDefinitionsClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    RoleDefinitionsClient(RoleDefinitionsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Deletes a custom role definition.
     * 
     * @param scope The scope of the role definition to delete. Managed HSM only supports '/'.
     * @param roleDefinitionName The name (GUID) of the role definition to delete.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return role definition.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<RoleDefinition> deleteWithResponse(String scope, String roleDefinitionName,
        RequestOptions requestOptions) {
        return this.serviceClient.deleteWithResponse(scope, roleDefinitionName, requestOptions);
    }

    /**
     * Deletes a custom role definition.
     * 
     * @param scope The scope of the role definition to delete. Managed HSM only supports '/'.
     * @param roleDefinitionName The name (GUID) of the role definition to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return role definition.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RoleDefinition delete(String scope, String roleDefinitionName) {
        return this.serviceClient.delete(scope, roleDefinitionName);
    }

    /**
     * Creates or updates a custom role definition.
     * 
     * @param scope The scope of the role definition to create or update. Managed HSM only supports '/'.
     * @param roleDefinitionName The name of the role definition to create or update. It can be any valid GUID.
     * @param parameters Parameters for the role definition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return role definition.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<RoleDefinition> createOrUpdateWithResponse(String scope, String roleDefinitionName,
        RoleDefinitionCreateParameters parameters, RequestOptions requestOptions) {
        return this.serviceClient.createOrUpdateWithResponse(scope, roleDefinitionName, parameters, requestOptions);
    }

    /**
     * Creates or updates a custom role definition.
     * 
     * @param scope The scope of the role definition to create or update. Managed HSM only supports '/'.
     * @param roleDefinitionName The name of the role definition to create or update. It can be any valid GUID.
     * @param parameters Parameters for the role definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return role definition.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RoleDefinition createOrUpdate(String scope, String roleDefinitionName,
        RoleDefinitionCreateParameters parameters) {
        return this.serviceClient.createOrUpdate(scope, roleDefinitionName, parameters);
    }

    /**
     * Get the specified role definition.
     * 
     * @param scope The scope of the role definition to get. Managed HSM only supports '/'.
     * @param roleDefinitionName The name of the role definition to get.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specified role definition.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<RoleDefinition> getWithResponse(String scope, String roleDefinitionName,
        RequestOptions requestOptions) {
        return this.serviceClient.getWithResponse(scope, roleDefinitionName, requestOptions);
    }

    /**
     * Get the specified role definition.
     * 
     * @param scope The scope of the role definition to get. Managed HSM only supports '/'.
     * @param roleDefinitionName The name of the role definition to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specified role definition.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RoleDefinition get(String scope, String roleDefinitionName) {
        return this.serviceClient.get(scope, roleDefinitionName);
    }

    /**
     * Get all role definitions that are applicable at scope and above.
     * 
     * @param scope The scope of the role definition.
     * @param filter The filter to apply on the operation. Use atScopeAndBelow filter to search below the given scope as
     * well.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all role definitions that are applicable at scope and above.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<RoleDefinition> list(String scope, String filter) {
        return this.serviceClient.list(scope, filter);
    }

    /**
     * Get all role definitions that are applicable at scope and above.
     * 
     * @param scope The scope of the role definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all role definitions that are applicable at scope and above.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<RoleDefinition> list(String scope) {
        return this.serviceClient.list(scope);
    }

    /**
     * Get all role definitions that are applicable at scope and above.
     * 
     * @param scope The scope of the role definition.
     * @param filter The filter to apply on the operation. Use atScopeAndBelow filter to search below the given scope as
     * well.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws KeyVaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all role definitions that are applicable at scope and above.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<RoleDefinition> list(String scope, String filter, RequestOptions requestOptions) {
        return this.serviceClient.list(scope, filter, requestOptions);
    }
}
