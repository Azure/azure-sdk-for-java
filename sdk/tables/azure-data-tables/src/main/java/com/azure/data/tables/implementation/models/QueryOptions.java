// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.data.tables.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Parameter group.
 */
@Fluent
public final class QueryOptions implements JsonSerializable<QueryOptions> {
    /*
     * Specifies the media type for the response.
     */
    private OdataMetadataFormat format;

    /*
     * Maximum number of records to return.
     */
    private Integer top;

    /*
     * Select expression using OData notation. Limits the columns on each record to just those requested, e.g.
     * "$select=PolicyAssignmentId, ResourceId".
     */
    private String select;

    /*
     * OData filter expression.
     */
    private String filter;

    /**
     * Creates an instance of QueryOptions class.
     */
    public QueryOptions() {
    }

    /**
     * Get the format property: Specifies the media type for the response.
     * 
     * @return the format value.
     */
    public OdataMetadataFormat getFormat() {
        return this.format;
    }

    /**
     * Set the format property: Specifies the media type for the response.
     * 
     * @param format the format value to set.
     * @return the QueryOptions object itself.
     */
    public QueryOptions setFormat(OdataMetadataFormat format) {
        this.format = format;
        return this;
    }

    /**
     * Get the top property: Maximum number of records to return.
     * 
     * @return the top value.
     */
    public Integer getTop() {
        return this.top;
    }

    /**
     * Set the top property: Maximum number of records to return.
     * 
     * @param top the top value to set.
     * @return the QueryOptions object itself.
     */
    public QueryOptions setTop(Integer top) {
        this.top = top;
        return this;
    }

    /**
     * Get the select property: Select expression using OData notation. Limits the columns on each record to just those
     * requested, e.g. "$select=PolicyAssignmentId, ResourceId".
     * 
     * @return the select value.
     */
    public String getSelect() {
        return this.select;
    }

    /**
     * Set the select property: Select expression using OData notation. Limits the columns on each record to just those
     * requested, e.g. "$select=PolicyAssignmentId, ResourceId".
     * 
     * @param select the select value to set.
     * @return the QueryOptions object itself.
     */
    public QueryOptions setSelect(String select) {
        this.select = select;
        return this;
    }

    /**
     * Get the filter property: OData filter expression.
     * 
     * @return the filter value.
     */
    public String getFilter() {
        return this.filter;
    }

    /**
     * Set the filter property: OData filter expression.
     * 
     * @param filter the filter value to set.
     * @return the QueryOptions object itself.
     */
    public QueryOptions setFilter(String filter) {
        this.filter = filter;
        return this;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("Format", this.format == null ? null : this.format.toString());
        jsonWriter.writeNumberField("Top", this.top);
        jsonWriter.writeStringField("Select", this.select);
        jsonWriter.writeStringField("Filter", this.filter);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of QueryOptions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of QueryOptions if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the QueryOptions.
     */
    public static QueryOptions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            QueryOptions deserializedQueryOptions = new QueryOptions();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("Format".equals(fieldName)) {
                    deserializedQueryOptions.format = OdataMetadataFormat.fromString(reader.getString());
                } else if ("Top".equals(fieldName)) {
                    deserializedQueryOptions.top = reader.getNullable(JsonReader::getInt);
                } else if ("Select".equals(fieldName)) {
                    deserializedQueryOptions.select = reader.getString();
                } else if ("Filter".equals(fieldName)) {
                    deserializedQueryOptions.filter = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedQueryOptions;
        });
    }
}
