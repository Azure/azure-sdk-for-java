// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.customproviders.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.customproviders.fluent.CustomResourceProvidersClient;
import com.azure.resourcemanager.customproviders.fluent.models.CustomRPManifestInner;
import com.azure.resourcemanager.customproviders.models.CustomRPManifest;
import com.azure.resourcemanager.customproviders.models.CustomResourceProviders;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class CustomResourceProvidersImpl implements CustomResourceProviders {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(CustomResourceProvidersImpl.class);

    private final CustomResourceProvidersClient innerClient;

    private final com.azure.resourcemanager.customproviders.CustomprovidersManager serviceManager;

    public CustomResourceProvidersImpl(
        CustomResourceProvidersClient innerClient,
        com.azure.resourcemanager.customproviders.CustomprovidersManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public void deleteByResourceGroup(String resourceGroupName, String resourceProviderName) {
        this.serviceClient().delete(resourceGroupName, resourceProviderName);
    }

    public void delete(String resourceGroupName, String resourceProviderName, Context context) {
        this.serviceClient().delete(resourceGroupName, resourceProviderName, context);
    }

    public CustomRPManifest getByResourceGroup(String resourceGroupName, String resourceProviderName) {
        CustomRPManifestInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, resourceProviderName);
        if (inner != null) {
            return new CustomRPManifestImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<CustomRPManifest> getByResourceGroupWithResponse(
        String resourceGroupName, String resourceProviderName, Context context) {
        Response<CustomRPManifestInner> inner =
            this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, resourceProviderName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new CustomRPManifestImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<CustomRPManifest> listByResourceGroup(String resourceGroupName) {
        PagedIterable<CustomRPManifestInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return Utils.mapPage(inner, inner1 -> new CustomRPManifestImpl(inner1, this.manager()));
    }

    public PagedIterable<CustomRPManifest> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<CustomRPManifestInner> inner =
            this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return Utils.mapPage(inner, inner1 -> new CustomRPManifestImpl(inner1, this.manager()));
    }

    public PagedIterable<CustomRPManifest> list() {
        PagedIterable<CustomRPManifestInner> inner = this.serviceClient().list();
        return Utils.mapPage(inner, inner1 -> new CustomRPManifestImpl(inner1, this.manager()));
    }

    public PagedIterable<CustomRPManifest> list(Context context) {
        PagedIterable<CustomRPManifestInner> inner = this.serviceClient().list(context);
        return Utils.mapPage(inner, inner1 -> new CustomRPManifestImpl(inner1, this.manager()));
    }

    public CustomRPManifest getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String resourceProviderName = Utils.getValueFromIdByName(id, "resourceProviders");
        if (resourceProviderName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'resourceProviders'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, resourceProviderName, Context.NONE).getValue();
    }

    public Response<CustomRPManifest> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String resourceProviderName = Utils.getValueFromIdByName(id, "resourceProviders");
        if (resourceProviderName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'resourceProviders'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, resourceProviderName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String resourceProviderName = Utils.getValueFromIdByName(id, "resourceProviders");
        if (resourceProviderName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'resourceProviders'.", id)));
        }
        this.delete(resourceGroupName, resourceProviderName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String resourceProviderName = Utils.getValueFromIdByName(id, "resourceProviders");
        if (resourceProviderName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'resourceProviders'.", id)));
        }
        this.delete(resourceGroupName, resourceProviderName, context);
    }

    private CustomResourceProvidersClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.customproviders.CustomprovidersManager manager() {
        return this.serviceManager;
    }

    public CustomRPManifestImpl define(String name) {
        return new CustomRPManifestImpl(name, this.manager());
    }
}
