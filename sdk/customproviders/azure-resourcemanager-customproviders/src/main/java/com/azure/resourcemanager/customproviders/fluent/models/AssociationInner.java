// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.customproviders.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.management.ProxyResource;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.customproviders.models.ProvisioningState;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** The resource definition of this association. */
@JsonFlatten
@Fluent
public class AssociationInner extends ProxyResource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(AssociationInner.class);

    /*
     * The REST resource instance of the target resource for this association.
     */
    @JsonProperty(value = "properties.targetResourceId")
    private String targetResourceId;

    /*
     * The provisioning state of the association.
     */
    @JsonProperty(value = "properties.provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /**
     * Get the targetResourceId property: The REST resource instance of the target resource for this association.
     *
     * @return the targetResourceId value.
     */
    public String targetResourceId() {
        return this.targetResourceId;
    }

    /**
     * Set the targetResourceId property: The REST resource instance of the target resource for this association.
     *
     * @param targetResourceId the targetResourceId value to set.
     * @return the AssociationInner object itself.
     */
    public AssociationInner withTargetResourceId(String targetResourceId) {
        this.targetResourceId = targetResourceId;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state of the association.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
