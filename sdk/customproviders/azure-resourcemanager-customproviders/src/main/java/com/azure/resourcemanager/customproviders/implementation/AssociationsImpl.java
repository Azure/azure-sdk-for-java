// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.customproviders.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.customproviders.CustomprovidersManager;
import com.azure.resourcemanager.customproviders.fluent.AssociationsClient;
import com.azure.resourcemanager.customproviders.fluent.models.AssociationInner;
import com.azure.resourcemanager.customproviders.models.Association;
import com.azure.resourcemanager.customproviders.models.Associations;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class AssociationsImpl implements Associations {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(AssociationsImpl.class);

    private final AssociationsClient innerClient;

    private final CustomprovidersManager serviceManager;

    public AssociationsImpl(AssociationsClient innerClient, CustomprovidersManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Association createOrUpdate(String scope, String associationName, AssociationInner association) {
        AssociationInner inner = this.serviceClient().createOrUpdate(scope, associationName, association);
        if (inner != null) {
            return new AssociationImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Association createOrUpdate(
        String scope, String associationName, AssociationInner association, Context context) {
        AssociationInner inner = this.serviceClient().createOrUpdate(scope, associationName, association, context);
        if (inner != null) {
            return new AssociationImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String scope, String associationName) {
        this.serviceClient().delete(scope, associationName);
    }

    public void delete(String scope, String associationName, Context context) {
        this.serviceClient().delete(scope, associationName, context);
    }

    public Association get(String scope, String associationName) {
        AssociationInner inner = this.serviceClient().get(scope, associationName);
        if (inner != null) {
            return new AssociationImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Association> getWithResponse(String scope, String associationName, Context context) {
        Response<AssociationInner> inner = this.serviceClient().getWithResponse(scope, associationName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new AssociationImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<Association> listAll(String scope) {
        PagedIterable<AssociationInner> inner = this.serviceClient().listAll(scope);
        return inner.mapPage(inner1 -> new AssociationImpl(inner1, this.manager()));
    }

    public PagedIterable<Association> listAll(String scope, Context context) {
        PagedIterable<AssociationInner> inner = this.serviceClient().listAll(scope, context);
        return inner.mapPage(inner1 -> new AssociationImpl(inner1, this.manager()));
    }

    private AssociationsClient serviceClient() {
        return this.innerClient;
    }

    private CustomprovidersManager manager() {
        return this.serviceManager;
    }
}
