// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.customproviders.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.customproviders.fluent.AssociationsClient;
import com.azure.resourcemanager.customproviders.fluent.models.AssociationInner;
import com.azure.resourcemanager.customproviders.models.AssociationsList;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in AssociationsClient. */
public final class AssociationsClientImpl implements AssociationsClient {
    private final ClientLogger logger = new ClientLogger(AssociationsClientImpl.class);

    /** The proxy service used to perform REST calls. */
    private final AssociationsService service;

    /** The service client containing this operation class. */
    private final CustomprovidersImpl client;

    /**
     * Initializes an instance of AssociationsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    AssociationsClientImpl(CustomprovidersImpl client) {
        this.service =
            RestProxy.create(AssociationsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for CustomprovidersAssociations to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "CustomprovidersAssoc")
    private interface AssociationsService {
        @Headers({"Content-Type: application/json"})
        @Put("/{scope}/providers/Microsoft.CustomProviders/associations/{associationName}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(
            @HostParam("$host") String endpoint,
            @PathParam(value = "scope", encoded = true) String scope,
            @PathParam("associationName") String associationName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") AssociationInner association,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete("/{scope}/providers/Microsoft.CustomProviders/associations/{associationName}")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(
            @HostParam("$host") String endpoint,
            @PathParam(value = "scope", encoded = true) String scope,
            @PathParam("associationName") String associationName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("/{scope}/providers/Microsoft.CustomProviders/associations/{associationName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<AssociationInner>> get(
            @HostParam("$host") String endpoint,
            @PathParam(value = "scope", encoded = true) String scope,
            @PathParam("associationName") String associationName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("/{scope}/providers/Microsoft.CustomProviders/associations")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<AssociationsList>> listAll(
            @HostParam("$host") String endpoint,
            @PathParam(value = "scope", encoded = true) String scope,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<AssociationsList>> listAllNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Create or update an association.
     *
     * @param scope The scope of the association. The scope can be any valid REST resource instance. For example, use
     *     '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/Microsoft.Compute/virtualMachines/{vm-name}'
     *     for a virtual machine resource.
     * @param associationName The name of the association.
     * @param association The parameters required to create or update an association.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the resource definition of this association.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(
        String scope, String associationName, AssociationInner association) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (associationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter associationName is required and cannot be null."));
        }
        if (association == null) {
            return Mono.error(new IllegalArgumentException("Parameter association is required and cannot be null."));
        } else {
            association.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createOrUpdate(
                            this.client.getEndpoint(),
                            scope,
                            associationName,
                            this.client.getApiVersion(),
                            association,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create or update an association.
     *
     * @param scope The scope of the association. The scope can be any valid REST resource instance. For example, use
     *     '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/Microsoft.Compute/virtualMachines/{vm-name}'
     *     for a virtual machine resource.
     * @param associationName The name of the association.
     * @param association The parameters required to create or update an association.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the resource definition of this association.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(
        String scope, String associationName, AssociationInner association, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (associationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter associationName is required and cannot be null."));
        }
        if (association == null) {
            return Mono.error(new IllegalArgumentException("Parameter association is required and cannot be null."));
        } else {
            association.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .createOrUpdate(
                this.client.getEndpoint(),
                scope,
                associationName,
                this.client.getApiVersion(),
                association,
                accept,
                context);
    }

    /**
     * Create or update an association.
     *
     * @param scope The scope of the association. The scope can be any valid REST resource instance. For example, use
     *     '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/Microsoft.Compute/virtualMachines/{vm-name}'
     *     for a virtual machine resource.
     * @param associationName The name of the association.
     * @param association The parameters required to create or update an association.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the resource definition of this association.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<AssociationInner>, AssociationInner> beginCreateOrUpdateAsync(
        String scope, String associationName, AssociationInner association) {
        Mono<Response<Flux<ByteBuffer>>> mono = createOrUpdateWithResponseAsync(scope, associationName, association);
        return this
            .client
            .<AssociationInner, AssociationInner>getLroResult(
                mono, this.client.getHttpPipeline(), AssociationInner.class, AssociationInner.class, Context.NONE);
    }

    /**
     * Create or update an association.
     *
     * @param scope The scope of the association. The scope can be any valid REST resource instance. For example, use
     *     '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/Microsoft.Compute/virtualMachines/{vm-name}'
     *     for a virtual machine resource.
     * @param associationName The name of the association.
     * @param association The parameters required to create or update an association.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the resource definition of this association.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<AssociationInner>, AssociationInner> beginCreateOrUpdateAsync(
        String scope, String associationName, AssociationInner association, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            createOrUpdateWithResponseAsync(scope, associationName, association, context);
        return this
            .client
            .<AssociationInner, AssociationInner>getLroResult(
                mono, this.client.getHttpPipeline(), AssociationInner.class, AssociationInner.class, context);
    }

    /**
     * Create or update an association.
     *
     * @param scope The scope of the association. The scope can be any valid REST resource instance. For example, use
     *     '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/Microsoft.Compute/virtualMachines/{vm-name}'
     *     for a virtual machine resource.
     * @param associationName The name of the association.
     * @param association The parameters required to create or update an association.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the resource definition of this association.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<AssociationInner>, AssociationInner> beginCreateOrUpdate(
        String scope, String associationName, AssociationInner association) {
        return beginCreateOrUpdateAsync(scope, associationName, association).getSyncPoller();
    }

    /**
     * Create or update an association.
     *
     * @param scope The scope of the association. The scope can be any valid REST resource instance. For example, use
     *     '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/Microsoft.Compute/virtualMachines/{vm-name}'
     *     for a virtual machine resource.
     * @param associationName The name of the association.
     * @param association The parameters required to create or update an association.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the resource definition of this association.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<AssociationInner>, AssociationInner> beginCreateOrUpdate(
        String scope, String associationName, AssociationInner association, Context context) {
        return beginCreateOrUpdateAsync(scope, associationName, association, context).getSyncPoller();
    }

    /**
     * Create or update an association.
     *
     * @param scope The scope of the association. The scope can be any valid REST resource instance. For example, use
     *     '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/Microsoft.Compute/virtualMachines/{vm-name}'
     *     for a virtual machine resource.
     * @param associationName The name of the association.
     * @param association The parameters required to create or update an association.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the resource definition of this association.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<AssociationInner> createOrUpdateAsync(
        String scope, String associationName, AssociationInner association) {
        return beginCreateOrUpdateAsync(scope, associationName, association)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create or update an association.
     *
     * @param scope The scope of the association. The scope can be any valid REST resource instance. For example, use
     *     '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/Microsoft.Compute/virtualMachines/{vm-name}'
     *     for a virtual machine resource.
     * @param associationName The name of the association.
     * @param association The parameters required to create or update an association.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the resource definition of this association.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<AssociationInner> createOrUpdateAsync(
        String scope, String associationName, AssociationInner association, Context context) {
        return beginCreateOrUpdateAsync(scope, associationName, association, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create or update an association.
     *
     * @param scope The scope of the association. The scope can be any valid REST resource instance. For example, use
     *     '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/Microsoft.Compute/virtualMachines/{vm-name}'
     *     for a virtual machine resource.
     * @param associationName The name of the association.
     * @param association The parameters required to create or update an association.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the resource definition of this association.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AssociationInner createOrUpdate(String scope, String associationName, AssociationInner association) {
        return createOrUpdateAsync(scope, associationName, association).block();
    }

    /**
     * Create or update an association.
     *
     * @param scope The scope of the association. The scope can be any valid REST resource instance. For example, use
     *     '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/Microsoft.Compute/virtualMachines/{vm-name}'
     *     for a virtual machine resource.
     * @param associationName The name of the association.
     * @param association The parameters required to create or update an association.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the resource definition of this association.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AssociationInner createOrUpdate(
        String scope, String associationName, AssociationInner association, Context context) {
        return createOrUpdateAsync(scope, associationName, association, context).block();
    }

    /**
     * Delete an association.
     *
     * @param scope The scope of the association.
     * @param associationName The name of the association.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String scope, String associationName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (associationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter associationName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .delete(
                            this.client.getEndpoint(),
                            scope,
                            associationName,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete an association.
     *
     * @param scope The scope of the association.
     * @param associationName The name of the association.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(
        String scope, String associationName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (associationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter associationName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .delete(this.client.getEndpoint(), scope, associationName, this.client.getApiVersion(), accept, context);
    }

    /**
     * Delete an association.
     *
     * @param scope The scope of the association.
     * @param associationName The name of the association.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String scope, String associationName) {
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(scope, associationName);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, Context.NONE);
    }

    /**
     * Delete an association.
     *
     * @param scope The scope of the association.
     * @param associationName The name of the association.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String scope, String associationName, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(scope, associationName, context);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, context);
    }

    /**
     * Delete an association.
     *
     * @param scope The scope of the association.
     * @param associationName The name of the association.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String scope, String associationName) {
        return beginDeleteAsync(scope, associationName).getSyncPoller();
    }

    /**
     * Delete an association.
     *
     * @param scope The scope of the association.
     * @param associationName The name of the association.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String scope, String associationName, Context context) {
        return beginDeleteAsync(scope, associationName, context).getSyncPoller();
    }

    /**
     * Delete an association.
     *
     * @param scope The scope of the association.
     * @param associationName The name of the association.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String scope, String associationName) {
        return beginDeleteAsync(scope, associationName).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete an association.
     *
     * @param scope The scope of the association.
     * @param associationName The name of the association.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String scope, String associationName, Context context) {
        return beginDeleteAsync(scope, associationName, context).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete an association.
     *
     * @param scope The scope of the association.
     * @param associationName The name of the association.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String scope, String associationName) {
        deleteAsync(scope, associationName).block();
    }

    /**
     * Delete an association.
     *
     * @param scope The scope of the association.
     * @param associationName The name of the association.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String scope, String associationName, Context context) {
        deleteAsync(scope, associationName, context).block();
    }

    /**
     * Get an association.
     *
     * @param scope The scope of the association.
     * @param associationName The name of the association.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an association.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<AssociationInner>> getWithResponseAsync(String scope, String associationName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (associationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter associationName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(
                            this.client.getEndpoint(),
                            scope,
                            associationName,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get an association.
     *
     * @param scope The scope of the association.
     * @param associationName The name of the association.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an association.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<AssociationInner>> getWithResponseAsync(
        String scope, String associationName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (associationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter associationName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .get(this.client.getEndpoint(), scope, associationName, this.client.getApiVersion(), accept, context);
    }

    /**
     * Get an association.
     *
     * @param scope The scope of the association.
     * @param associationName The name of the association.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an association.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<AssociationInner> getAsync(String scope, String associationName) {
        return getWithResponseAsync(scope, associationName)
            .flatMap(
                (Response<AssociationInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Get an association.
     *
     * @param scope The scope of the association.
     * @param associationName The name of the association.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an association.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AssociationInner get(String scope, String associationName) {
        return getAsync(scope, associationName).block();
    }

    /**
     * Get an association.
     *
     * @param scope The scope of the association.
     * @param associationName The name of the association.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an association.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<AssociationInner> getWithResponse(String scope, String associationName, Context context) {
        return getWithResponseAsync(scope, associationName, context).block();
    }

    /**
     * Gets all association for the given scope.
     *
     * @param scope The scope of the association.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all association for the given scope.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<AssociationInner>> listAllSinglePageAsync(String scope) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service.listAll(this.client.getEndpoint(), scope, this.client.getApiVersion(), accept, context))
            .<PagedResponse<AssociationInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets all association for the given scope.
     *
     * @param scope The scope of the association.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all association for the given scope.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<AssociationInner>> listAllSinglePageAsync(String scope, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listAll(this.client.getEndpoint(), scope, this.client.getApiVersion(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Gets all association for the given scope.
     *
     * @param scope The scope of the association.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all association for the given scope.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<AssociationInner> listAllAsync(String scope) {
        return new PagedFlux<>(() -> listAllSinglePageAsync(scope), nextLink -> listAllNextSinglePageAsync(nextLink));
    }

    /**
     * Gets all association for the given scope.
     *
     * @param scope The scope of the association.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all association for the given scope.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<AssociationInner> listAllAsync(String scope, Context context) {
        return new PagedFlux<>(
            () -> listAllSinglePageAsync(scope, context), nextLink -> listAllNextSinglePageAsync(nextLink, context));
    }

    /**
     * Gets all association for the given scope.
     *
     * @param scope The scope of the association.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all association for the given scope.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<AssociationInner> listAll(String scope) {
        return new PagedIterable<>(listAllAsync(scope));
    }

    /**
     * Gets all association for the given scope.
     *
     * @param scope The scope of the association.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all association for the given scope.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<AssociationInner> listAll(String scope, Context context) {
        return new PagedIterable<>(listAllAsync(scope, context));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of associations.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<AssociationInner>> listAllNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listAllNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<AssociationInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of associations.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<AssociationInner>> listAllNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listAllNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }
}
