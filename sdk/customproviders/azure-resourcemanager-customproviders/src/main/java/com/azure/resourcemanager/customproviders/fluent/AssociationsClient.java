// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.customproviders.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.customproviders.fluent.models.AssociationInner;

/** An instance of this class provides access to all the operations defined in AssociationsClient. */
public interface AssociationsClient {
    /**
     * Create or update an association.
     *
     * @param scope The scope of the association. The scope can be any valid REST resource instance. For example, use
     *     '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/Microsoft.Compute/virtualMachines/{vm-name}'
     *     for a virtual machine resource.
     * @param associationName The name of the association.
     * @param association The parameters required to create or update an association.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the resource definition of this association.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<AssociationInner>, AssociationInner> beginCreateOrUpdate(
        String scope, String associationName, AssociationInner association);

    /**
     * Create or update an association.
     *
     * @param scope The scope of the association. The scope can be any valid REST resource instance. For example, use
     *     '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/Microsoft.Compute/virtualMachines/{vm-name}'
     *     for a virtual machine resource.
     * @param associationName The name of the association.
     * @param association The parameters required to create or update an association.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the resource definition of this association.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<AssociationInner>, AssociationInner> beginCreateOrUpdate(
        String scope, String associationName, AssociationInner association, Context context);

    /**
     * Create or update an association.
     *
     * @param scope The scope of the association. The scope can be any valid REST resource instance. For example, use
     *     '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/Microsoft.Compute/virtualMachines/{vm-name}'
     *     for a virtual machine resource.
     * @param associationName The name of the association.
     * @param association The parameters required to create or update an association.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the resource definition of this association.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    AssociationInner createOrUpdate(String scope, String associationName, AssociationInner association);

    /**
     * Create or update an association.
     *
     * @param scope The scope of the association. The scope can be any valid REST resource instance. For example, use
     *     '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/Microsoft.Compute/virtualMachines/{vm-name}'
     *     for a virtual machine resource.
     * @param associationName The name of the association.
     * @param association The parameters required to create or update an association.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the resource definition of this association.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    AssociationInner createOrUpdate(
        String scope, String associationName, AssociationInner association, Context context);

    /**
     * Delete an association.
     *
     * @param scope The scope of the association.
     * @param associationName The name of the association.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<Void>, Void> beginDelete(String scope, String associationName);

    /**
     * Delete an association.
     *
     * @param scope The scope of the association.
     * @param associationName The name of the association.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<Void>, Void> beginDelete(String scope, String associationName, Context context);

    /**
     * Delete an association.
     *
     * @param scope The scope of the association.
     * @param associationName The name of the association.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String scope, String associationName);

    /**
     * Delete an association.
     *
     * @param scope The scope of the association.
     * @param associationName The name of the association.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String scope, String associationName, Context context);

    /**
     * Get an association.
     *
     * @param scope The scope of the association.
     * @param associationName The name of the association.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an association.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    AssociationInner get(String scope, String associationName);

    /**
     * Get an association.
     *
     * @param scope The scope of the association.
     * @param associationName The name of the association.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an association.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<AssociationInner> getWithResponse(String scope, String associationName, Context context);

    /**
     * Gets all association for the given scope.
     *
     * @param scope The scope of the association.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all association for the given scope.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<AssociationInner> listAll(String scope);

    /**
     * Gets all association for the given scope.
     *
     * @param scope The scope of the association.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all association for the given scope.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<AssociationInner> listAll(String scope, Context context);
}
