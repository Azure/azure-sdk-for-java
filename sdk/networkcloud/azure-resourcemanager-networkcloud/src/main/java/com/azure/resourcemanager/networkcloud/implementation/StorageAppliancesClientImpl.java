// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.networkcloud.fluent.StorageAppliancesClient;
import com.azure.resourcemanager.networkcloud.fluent.models.OperationStatusResultInner;
import com.azure.resourcemanager.networkcloud.fluent.models.StorageApplianceInner;
import com.azure.resourcemanager.networkcloud.models.StorageApplianceEnableRemoteVendorManagementParameters;
import com.azure.resourcemanager.networkcloud.models.StorageApplianceList;
import com.azure.resourcemanager.networkcloud.models.StorageAppliancePatchParameters;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in StorageAppliancesClient.
 */
public final class StorageAppliancesClientImpl implements StorageAppliancesClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final StorageAppliancesService service;

    /**
     * The service client containing this operation class.
     */
    private final NetworkCloudImpl client;

    /**
     * Initializes an instance of StorageAppliancesClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    StorageAppliancesClientImpl(NetworkCloudImpl client) {
        this.service
            = RestProxy.create(StorageAppliancesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for NetworkCloudStorageAppliances to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "NetworkCloudStorageAppliances")
    public interface StorageAppliancesService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/providers/Microsoft.NetworkCloud/storageAppliances")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<StorageApplianceList>> list(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/providers/Microsoft.NetworkCloud/storageAppliances")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<StorageApplianceList> listSync(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/storageAppliances")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<StorageApplianceList>> listByResourceGroup(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/storageAppliances")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<StorageApplianceList> listByResourceGroupSync(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/storageAppliances/{storageApplianceName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<StorageApplianceInner>> getByResourceGroup(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("storageApplianceName") String storageApplianceName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/storageAppliances/{storageApplianceName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<StorageApplianceInner> getByResourceGroupSync(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("storageApplianceName") String storageApplianceName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/storageAppliances/{storageApplianceName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("storageApplianceName") String storageApplianceName, @HeaderParam("If-Match") String ifMatch,
            @HeaderParam("If-None-Match") String ifNoneMatch,
            @BodyParam("application/json") StorageApplianceInner storageApplianceParameters,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/storageAppliances/{storageApplianceName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> createOrUpdateSync(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("storageApplianceName") String storageApplianceName, @HeaderParam("If-Match") String ifMatch,
            @HeaderParam("If-None-Match") String ifNoneMatch,
            @BodyParam("application/json") StorageApplianceInner storageApplianceParameters,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/storageAppliances/{storageApplianceName}")
        @ExpectedResponses({ 200, 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("storageApplianceName") String storageApplianceName, @HeaderParam("If-Match") String ifMatch,
            @HeaderParam("If-None-Match") String ifNoneMatch, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/storageAppliances/{storageApplianceName}")
        @ExpectedResponses({ 200, 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> deleteSync(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("storageApplianceName") String storageApplianceName, @HeaderParam("If-Match") String ifMatch,
            @HeaderParam("If-None-Match") String ifNoneMatch, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/storageAppliances/{storageApplianceName}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> update(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("storageApplianceName") String storageApplianceName, @HeaderParam("If-Match") String ifMatch,
            @HeaderParam("If-None-Match") String ifNoneMatch,
            @BodyParam("application/json") StorageAppliancePatchParameters storageApplianceUpdateParameters,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/storageAppliances/{storageApplianceName}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> updateSync(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("storageApplianceName") String storageApplianceName, @HeaderParam("If-Match") String ifMatch,
            @HeaderParam("If-None-Match") String ifNoneMatch,
            @BodyParam("application/json") StorageAppliancePatchParameters storageApplianceUpdateParameters,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/storageAppliances/{storageApplianceName}/disableRemoteVendorManagement")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> disableRemoteVendorManagement(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("storageApplianceName") String storageApplianceName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/storageAppliances/{storageApplianceName}/disableRemoteVendorManagement")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> disableRemoteVendorManagementSync(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("storageApplianceName") String storageApplianceName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/storageAppliances/{storageApplianceName}/enableRemoteVendorManagement")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> enableRemoteVendorManagement(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("storageApplianceName") String storageApplianceName,
            @BodyParam("application/json") StorageApplianceEnableRemoteVendorManagementParameters storageApplianceEnableRemoteVendorManagementParameters,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/storageAppliances/{storageApplianceName}/enableRemoteVendorManagement")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> enableRemoteVendorManagementSync(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("storageApplianceName") String storageApplianceName,
            @BodyParam("application/json") StorageApplianceEnableRemoteVendorManagementParameters storageApplianceEnableRemoteVendorManagementParameters,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<StorageApplianceList>> listBySubscriptionNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<StorageApplianceList> listBySubscriptionNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<StorageApplianceList>> listByResourceGroupNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<StorageApplianceList> listByResourceGroupNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * List storage appliances in the subscription.
     * 
     * Get a list of storage appliances in the provided subscription.
     * 
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of storage appliances in the provided subscription along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<StorageApplianceInner>> listSinglePageAsync() {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.list(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), accept, context))
            .<PagedResponse<StorageApplianceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List storage appliances in the subscription.
     * 
     * Get a list of storage appliances in the provided subscription.
     * 
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of storage appliances in the provided subscription as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<StorageApplianceInner> listAsync() {
        return new PagedFlux<>(() -> listSinglePageAsync(),
            nextLink -> listBySubscriptionNextSinglePageAsync(nextLink));
    }

    /**
     * List storage appliances in the subscription.
     * 
     * Get a list of storage appliances in the provided subscription.
     * 
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of storage appliances in the provided subscription along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<StorageApplianceInner> listSinglePage() {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<StorageApplianceList> res = service.listSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List storage appliances in the subscription.
     * 
     * Get a list of storage appliances in the provided subscription.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of storage appliances in the provided subscription along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<StorageApplianceInner> listSinglePage(Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<StorageApplianceList> res = service.listSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List storage appliances in the subscription.
     * 
     * Get a list of storage appliances in the provided subscription.
     * 
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of storage appliances in the provided subscription as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<StorageApplianceInner> list() {
        return new PagedIterable<>(() -> listSinglePage(), nextLink -> listBySubscriptionNextSinglePage(nextLink));
    }

    /**
     * List storage appliances in the subscription.
     * 
     * Get a list of storage appliances in the provided subscription.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of storage appliances in the provided subscription as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<StorageApplianceInner> list(Context context) {
        return new PagedIterable<>(() -> listSinglePage(context),
            nextLink -> listBySubscriptionNextSinglePage(nextLink, context));
    }

    /**
     * List storage appliances in the resource group.
     * 
     * Get a list of storage appliances in the provided resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of storage appliances in the provided resource group along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<StorageApplianceInner>> listByResourceGroupSinglePageAsync(String resourceGroupName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByResourceGroup(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, accept, context))
            .<PagedResponse<StorageApplianceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List storage appliances in the resource group.
     * 
     * Get a list of storage appliances in the provided resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of storage appliances in the provided resource group as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<StorageApplianceInner> listByResourceGroupAsync(String resourceGroupName) {
        return new PagedFlux<>(() -> listByResourceGroupSinglePageAsync(resourceGroupName),
            nextLink -> listByResourceGroupNextSinglePageAsync(nextLink));
    }

    /**
     * List storage appliances in the resource group.
     * 
     * Get a list of storage appliances in the provided resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of storage appliances in the provided resource group along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<StorageApplianceInner> listByResourceGroupSinglePage(String resourceGroupName) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<StorageApplianceList> res = service.listByResourceGroupSync(this.client.getEndpoint(),
            this.client.getApiVersion(), this.client.getSubscriptionId(), resourceGroupName, accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List storage appliances in the resource group.
     * 
     * Get a list of storage appliances in the provided resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of storage appliances in the provided resource group along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<StorageApplianceInner> listByResourceGroupSinglePage(String resourceGroupName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<StorageApplianceList> res = service.listByResourceGroupSync(this.client.getEndpoint(),
            this.client.getApiVersion(), this.client.getSubscriptionId(), resourceGroupName, accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List storage appliances in the resource group.
     * 
     * Get a list of storage appliances in the provided resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of storage appliances in the provided resource group as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<StorageApplianceInner> listByResourceGroup(String resourceGroupName) {
        return new PagedIterable<>(() -> listByResourceGroupSinglePage(resourceGroupName),
            nextLink -> listByResourceGroupNextSinglePage(nextLink));
    }

    /**
     * List storage appliances in the resource group.
     * 
     * Get a list of storage appliances in the provided resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of storage appliances in the provided resource group as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<StorageApplianceInner> listByResourceGroup(String resourceGroupName, Context context) {
        return new PagedIterable<>(() -> listByResourceGroupSinglePage(resourceGroupName, context),
            nextLink -> listByResourceGroupNextSinglePage(nextLink, context));
    }

    /**
     * Retrieve the storage appliance.
     * 
     * Get properties of the provided storage appliance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageApplianceName The name of the storage appliance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of the provided storage appliance along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<StorageApplianceInner>> getByResourceGroupWithResponseAsync(String resourceGroupName,
        String storageApplianceName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (storageApplianceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter storageApplianceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.getByResourceGroup(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, storageApplianceName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Retrieve the storage appliance.
     * 
     * Get properties of the provided storage appliance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageApplianceName The name of the storage appliance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of the provided storage appliance on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<StorageApplianceInner> getByResourceGroupAsync(String resourceGroupName, String storageApplianceName) {
        return getByResourceGroupWithResponseAsync(resourceGroupName, storageApplianceName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Retrieve the storage appliance.
     * 
     * Get properties of the provided storage appliance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageApplianceName The name of the storage appliance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of the provided storage appliance along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<StorageApplianceInner> getByResourceGroupWithResponse(String resourceGroupName,
        String storageApplianceName, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (storageApplianceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter storageApplianceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.getByResourceGroupSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, storageApplianceName, accept, context);
    }

    /**
     * Retrieve the storage appliance.
     * 
     * Get properties of the provided storage appliance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageApplianceName The name of the storage appliance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of the provided storage appliance.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public StorageApplianceInner getByResourceGroup(String resourceGroupName, String storageApplianceName) {
        return getByResourceGroupWithResponse(resourceGroupName, storageApplianceName, Context.NONE).getValue();
    }

    /**
     * Create or update the storage appliance.
     * 
     * Create a new storage appliance or update the properties of the existing one.
     * All customer initiated requests will be rejected as the life cycle of this resource is managed by the system.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageApplianceName The name of the storage appliance.
     * @param storageApplianceParameters The request body.
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current resource. Specify
     * the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new record set to be created, but to prevent updating an existing
     * resource. Other values will result in error from server as they are not supported.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return storageAppliance represents on-premises Network Cloud storage appliance along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String storageApplianceName, StorageApplianceInner storageApplianceParameters, String ifMatch,
        String ifNoneMatch) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (storageApplianceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter storageApplianceName is required and cannot be null."));
        }
        if (storageApplianceParameters == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter storageApplianceParameters is required and cannot be null."));
        } else {
            storageApplianceParameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createOrUpdate(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, storageApplianceName, ifMatch, ifNoneMatch,
                storageApplianceParameters, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create or update the storage appliance.
     * 
     * Create a new storage appliance or update the properties of the existing one.
     * All customer initiated requests will be rejected as the life cycle of this resource is managed by the system.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageApplianceName The name of the storage appliance.
     * @param storageApplianceParameters The request body.
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current resource. Specify
     * the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new record set to be created, but to prevent updating an existing
     * resource. Other values will result in error from server as they are not supported.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return storageAppliance represents on-premises Network Cloud storage appliance along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> createOrUpdateWithResponse(String resourceGroupName, String storageApplianceName,
        StorageApplianceInner storageApplianceParameters, String ifMatch, String ifNoneMatch) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (storageApplianceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter storageApplianceName is required and cannot be null."));
        }
        if (storageApplianceParameters == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter storageApplianceParameters is required and cannot be null."));
        } else {
            storageApplianceParameters.validate();
        }
        final String accept = "application/json";
        return service.createOrUpdateSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, storageApplianceName, ifMatch, ifNoneMatch,
            storageApplianceParameters, accept, Context.NONE);
    }

    /**
     * Create or update the storage appliance.
     * 
     * Create a new storage appliance or update the properties of the existing one.
     * All customer initiated requests will be rejected as the life cycle of this resource is managed by the system.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageApplianceName The name of the storage appliance.
     * @param storageApplianceParameters The request body.
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current resource. Specify
     * the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new record set to be created, but to prevent updating an existing
     * resource. Other values will result in error from server as they are not supported.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return storageAppliance represents on-premises Network Cloud storage appliance along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> createOrUpdateWithResponse(String resourceGroupName, String storageApplianceName,
        StorageApplianceInner storageApplianceParameters, String ifMatch, String ifNoneMatch, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (storageApplianceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter storageApplianceName is required and cannot be null."));
        }
        if (storageApplianceParameters == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter storageApplianceParameters is required and cannot be null."));
        } else {
            storageApplianceParameters.validate();
        }
        final String accept = "application/json";
        return service.createOrUpdateSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, storageApplianceName, ifMatch, ifNoneMatch,
            storageApplianceParameters, accept, context);
    }

    /**
     * Create or update the storage appliance.
     * 
     * Create a new storage appliance or update the properties of the existing one.
     * All customer initiated requests will be rejected as the life cycle of this resource is managed by the system.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageApplianceName The name of the storage appliance.
     * @param storageApplianceParameters The request body.
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current resource. Specify
     * the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new record set to be created, but to prevent updating an existing
     * resource. Other values will result in error from server as they are not supported.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of storageAppliance represents on-premises Network Cloud storage
     * appliance.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<StorageApplianceInner>, StorageApplianceInner> beginCreateOrUpdateAsync(
        String resourceGroupName, String storageApplianceName, StorageApplianceInner storageApplianceParameters,
        String ifMatch, String ifNoneMatch) {
        Mono<Response<Flux<ByteBuffer>>> mono = createOrUpdateWithResponseAsync(resourceGroupName, storageApplianceName,
            storageApplianceParameters, ifMatch, ifNoneMatch);
        return this.client.<StorageApplianceInner, StorageApplianceInner>getLroResult(mono,
            this.client.getHttpPipeline(), StorageApplianceInner.class, StorageApplianceInner.class,
            this.client.getContext());
    }

    /**
     * Create or update the storage appliance.
     * 
     * Create a new storage appliance or update the properties of the existing one.
     * All customer initiated requests will be rejected as the life cycle of this resource is managed by the system.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageApplianceName The name of the storage appliance.
     * @param storageApplianceParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of storageAppliance represents on-premises Network Cloud storage
     * appliance.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<StorageApplianceInner>, StorageApplianceInner> beginCreateOrUpdateAsync(
        String resourceGroupName, String storageApplianceName, StorageApplianceInner storageApplianceParameters) {
        final String ifMatch = null;
        final String ifNoneMatch = null;
        Mono<Response<Flux<ByteBuffer>>> mono = createOrUpdateWithResponseAsync(resourceGroupName, storageApplianceName,
            storageApplianceParameters, ifMatch, ifNoneMatch);
        return this.client.<StorageApplianceInner, StorageApplianceInner>getLroResult(mono,
            this.client.getHttpPipeline(), StorageApplianceInner.class, StorageApplianceInner.class,
            this.client.getContext());
    }

    /**
     * Create or update the storage appliance.
     * 
     * Create a new storage appliance or update the properties of the existing one.
     * All customer initiated requests will be rejected as the life cycle of this resource is managed by the system.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageApplianceName The name of the storage appliance.
     * @param storageApplianceParameters The request body.
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current resource. Specify
     * the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new record set to be created, but to prevent updating an existing
     * resource. Other values will result in error from server as they are not supported.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of storageAppliance represents on-premises Network Cloud storage
     * appliance.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<StorageApplianceInner>, StorageApplianceInner> beginCreateOrUpdate(
        String resourceGroupName, String storageApplianceName, StorageApplianceInner storageApplianceParameters,
        String ifMatch, String ifNoneMatch) {
        Response<BinaryData> response = createOrUpdateWithResponse(resourceGroupName, storageApplianceName,
            storageApplianceParameters, ifMatch, ifNoneMatch);
        return this.client.<StorageApplianceInner, StorageApplianceInner>getLroResult(response,
            StorageApplianceInner.class, StorageApplianceInner.class, Context.NONE);
    }

    /**
     * Create or update the storage appliance.
     * 
     * Create a new storage appliance or update the properties of the existing one.
     * All customer initiated requests will be rejected as the life cycle of this resource is managed by the system.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageApplianceName The name of the storage appliance.
     * @param storageApplianceParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of storageAppliance represents on-premises Network Cloud storage
     * appliance.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<StorageApplianceInner>, StorageApplianceInner> beginCreateOrUpdate(
        String resourceGroupName, String storageApplianceName, StorageApplianceInner storageApplianceParameters) {
        final String ifMatch = null;
        final String ifNoneMatch = null;
        Response<BinaryData> response = createOrUpdateWithResponse(resourceGroupName, storageApplianceName,
            storageApplianceParameters, ifMatch, ifNoneMatch);
        return this.client.<StorageApplianceInner, StorageApplianceInner>getLroResult(response,
            StorageApplianceInner.class, StorageApplianceInner.class, Context.NONE);
    }

    /**
     * Create or update the storage appliance.
     * 
     * Create a new storage appliance or update the properties of the existing one.
     * All customer initiated requests will be rejected as the life cycle of this resource is managed by the system.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageApplianceName The name of the storage appliance.
     * @param storageApplianceParameters The request body.
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current resource. Specify
     * the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new record set to be created, but to prevent updating an existing
     * resource. Other values will result in error from server as they are not supported.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of storageAppliance represents on-premises Network Cloud storage
     * appliance.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<StorageApplianceInner>, StorageApplianceInner> beginCreateOrUpdate(
        String resourceGroupName, String storageApplianceName, StorageApplianceInner storageApplianceParameters,
        String ifMatch, String ifNoneMatch, Context context) {
        Response<BinaryData> response = createOrUpdateWithResponse(resourceGroupName, storageApplianceName,
            storageApplianceParameters, ifMatch, ifNoneMatch, context);
        return this.client.<StorageApplianceInner, StorageApplianceInner>getLroResult(response,
            StorageApplianceInner.class, StorageApplianceInner.class, context);
    }

    /**
     * Create or update the storage appliance.
     * 
     * Create a new storage appliance or update the properties of the existing one.
     * All customer initiated requests will be rejected as the life cycle of this resource is managed by the system.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageApplianceName The name of the storage appliance.
     * @param storageApplianceParameters The request body.
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current resource. Specify
     * the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new record set to be created, but to prevent updating an existing
     * resource. Other values will result in error from server as they are not supported.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return storageAppliance represents on-premises Network Cloud storage appliance on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<StorageApplianceInner> createOrUpdateAsync(String resourceGroupName, String storageApplianceName,
        StorageApplianceInner storageApplianceParameters, String ifMatch, String ifNoneMatch) {
        return beginCreateOrUpdateAsync(resourceGroupName, storageApplianceName, storageApplianceParameters, ifMatch,
            ifNoneMatch).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create or update the storage appliance.
     * 
     * Create a new storage appliance or update the properties of the existing one.
     * All customer initiated requests will be rejected as the life cycle of this resource is managed by the system.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageApplianceName The name of the storage appliance.
     * @param storageApplianceParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return storageAppliance represents on-premises Network Cloud storage appliance on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<StorageApplianceInner> createOrUpdateAsync(String resourceGroupName, String storageApplianceName,
        StorageApplianceInner storageApplianceParameters) {
        final String ifMatch = null;
        final String ifNoneMatch = null;
        return beginCreateOrUpdateAsync(resourceGroupName, storageApplianceName, storageApplianceParameters, ifMatch,
            ifNoneMatch).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create or update the storage appliance.
     * 
     * Create a new storage appliance or update the properties of the existing one.
     * All customer initiated requests will be rejected as the life cycle of this resource is managed by the system.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageApplianceName The name of the storage appliance.
     * @param storageApplianceParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return storageAppliance represents on-premises Network Cloud storage appliance.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public StorageApplianceInner createOrUpdate(String resourceGroupName, String storageApplianceName,
        StorageApplianceInner storageApplianceParameters) {
        final String ifMatch = null;
        final String ifNoneMatch = null;
        return beginCreateOrUpdate(resourceGroupName, storageApplianceName, storageApplianceParameters, ifMatch,
            ifNoneMatch).getFinalResult();
    }

    /**
     * Create or update the storage appliance.
     * 
     * Create a new storage appliance or update the properties of the existing one.
     * All customer initiated requests will be rejected as the life cycle of this resource is managed by the system.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageApplianceName The name of the storage appliance.
     * @param storageApplianceParameters The request body.
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current resource. Specify
     * the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new record set to be created, but to prevent updating an existing
     * resource. Other values will result in error from server as they are not supported.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return storageAppliance represents on-premises Network Cloud storage appliance.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public StorageApplianceInner createOrUpdate(String resourceGroupName, String storageApplianceName,
        StorageApplianceInner storageApplianceParameters, String ifMatch, String ifNoneMatch, Context context) {
        return beginCreateOrUpdate(resourceGroupName, storageApplianceName, storageApplianceParameters, ifMatch,
            ifNoneMatch, context).getFinalResult();
    }

    /**
     * Delete the storage appliance.
     * 
     * Delete the provided storage appliance.
     * All customer initiated requests will be rejected as the life cycle of this resource is managed by the system.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageApplianceName The name of the storage appliance.
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current resource. Specify
     * the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new record set to be created, but to prevent updating an existing
     * resource. Other values will result in error from server as they are not supported.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName,
        String storageApplianceName, String ifMatch, String ifNoneMatch) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (storageApplianceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter storageApplianceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, storageApplianceName, ifMatch, ifNoneMatch, accept,
                context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete the storage appliance.
     * 
     * Delete the provided storage appliance.
     * All customer initiated requests will be rejected as the life cycle of this resource is managed by the system.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageApplianceName The name of the storage appliance.
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current resource. Specify
     * the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new record set to be created, but to prevent updating an existing
     * resource. Other values will result in error from server as they are not supported.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> deleteWithResponse(String resourceGroupName, String storageApplianceName,
        String ifMatch, String ifNoneMatch) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (storageApplianceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter storageApplianceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.deleteSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, storageApplianceName, ifMatch, ifNoneMatch, accept,
            Context.NONE);
    }

    /**
     * Delete the storage appliance.
     * 
     * Delete the provided storage appliance.
     * All customer initiated requests will be rejected as the life cycle of this resource is managed by the system.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageApplianceName The name of the storage appliance.
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current resource. Specify
     * the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new record set to be created, but to prevent updating an existing
     * resource. Other values will result in error from server as they are not supported.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> deleteWithResponse(String resourceGroupName, String storageApplianceName,
        String ifMatch, String ifNoneMatch, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (storageApplianceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter storageApplianceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.deleteSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, storageApplianceName, ifMatch, ifNoneMatch, accept,
            context);
    }

    /**
     * Delete the storage appliance.
     * 
     * Delete the provided storage appliance.
     * All customer initiated requests will be rejected as the life cycle of this resource is managed by the system.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageApplianceName The name of the storage appliance.
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current resource. Specify
     * the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new record set to be created, but to prevent updating an existing
     * resource. Other values will result in error from server as they are not supported.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginDeleteAsync(String resourceGroupName, String storageApplianceName, String ifMatch, String ifNoneMatch) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = deleteWithResponseAsync(resourceGroupName, storageApplianceName, ifMatch, ifNoneMatch);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(mono,
            this.client.getHttpPipeline(), OperationStatusResultInner.class, OperationStatusResultInner.class,
            this.client.getContext());
    }

    /**
     * Delete the storage appliance.
     * 
     * Delete the provided storage appliance.
     * All customer initiated requests will be rejected as the life cycle of this resource is managed by the system.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageApplianceName The name of the storage appliance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginDeleteAsync(String resourceGroupName, String storageApplianceName) {
        final String ifMatch = null;
        final String ifNoneMatch = null;
        Mono<Response<Flux<ByteBuffer>>> mono
            = deleteWithResponseAsync(resourceGroupName, storageApplianceName, ifMatch, ifNoneMatch);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(mono,
            this.client.getHttpPipeline(), OperationStatusResultInner.class, OperationStatusResultInner.class,
            this.client.getContext());
    }

    /**
     * Delete the storage appliance.
     * 
     * Delete the provided storage appliance.
     * All customer initiated requests will be rejected as the life cycle of this resource is managed by the system.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageApplianceName The name of the storage appliance.
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current resource. Specify
     * the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new record set to be created, but to prevent updating an existing
     * resource. Other values will result in error from server as they are not supported.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginDelete(String resourceGroupName, String storageApplianceName, String ifMatch, String ifNoneMatch) {
        Response<BinaryData> response
            = deleteWithResponse(resourceGroupName, storageApplianceName, ifMatch, ifNoneMatch);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(response,
            OperationStatusResultInner.class, OperationStatusResultInner.class, Context.NONE);
    }

    /**
     * Delete the storage appliance.
     * 
     * Delete the provided storage appliance.
     * All customer initiated requests will be rejected as the life cycle of this resource is managed by the system.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageApplianceName The name of the storage appliance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginDelete(String resourceGroupName, String storageApplianceName) {
        final String ifMatch = null;
        final String ifNoneMatch = null;
        Response<BinaryData> response
            = deleteWithResponse(resourceGroupName, storageApplianceName, ifMatch, ifNoneMatch);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(response,
            OperationStatusResultInner.class, OperationStatusResultInner.class, Context.NONE);
    }

    /**
     * Delete the storage appliance.
     * 
     * Delete the provided storage appliance.
     * All customer initiated requests will be rejected as the life cycle of this resource is managed by the system.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageApplianceName The name of the storage appliance.
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current resource. Specify
     * the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new record set to be created, but to prevent updating an existing
     * resource. Other values will result in error from server as they are not supported.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner> beginDelete(
        String resourceGroupName, String storageApplianceName, String ifMatch, String ifNoneMatch, Context context) {
        Response<BinaryData> response
            = deleteWithResponse(resourceGroupName, storageApplianceName, ifMatch, ifNoneMatch, context);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(response,
            OperationStatusResultInner.class, OperationStatusResultInner.class, context);
    }

    /**
     * Delete the storage appliance.
     * 
     * Delete the provided storage appliance.
     * All customer initiated requests will be rejected as the life cycle of this resource is managed by the system.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageApplianceName The name of the storage appliance.
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current resource. Specify
     * the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new record set to be created, but to prevent updating an existing
     * resource. Other values will result in error from server as they are not supported.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<OperationStatusResultInner> deleteAsync(String resourceGroupName, String storageApplianceName,
        String ifMatch, String ifNoneMatch) {
        return beginDeleteAsync(resourceGroupName, storageApplianceName, ifMatch, ifNoneMatch).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete the storage appliance.
     * 
     * Delete the provided storage appliance.
     * All customer initiated requests will be rejected as the life cycle of this resource is managed by the system.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageApplianceName The name of the storage appliance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<OperationStatusResultInner> deleteAsync(String resourceGroupName, String storageApplianceName) {
        final String ifMatch = null;
        final String ifNoneMatch = null;
        return beginDeleteAsync(resourceGroupName, storageApplianceName, ifMatch, ifNoneMatch).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete the storage appliance.
     * 
     * Delete the provided storage appliance.
     * All customer initiated requests will be rejected as the life cycle of this resource is managed by the system.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageApplianceName The name of the storage appliance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OperationStatusResultInner delete(String resourceGroupName, String storageApplianceName) {
        final String ifMatch = null;
        final String ifNoneMatch = null;
        return beginDelete(resourceGroupName, storageApplianceName, ifMatch, ifNoneMatch).getFinalResult();
    }

    /**
     * Delete the storage appliance.
     * 
     * Delete the provided storage appliance.
     * All customer initiated requests will be rejected as the life cycle of this resource is managed by the system.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageApplianceName The name of the storage appliance.
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current resource. Specify
     * the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new record set to be created, but to prevent updating an existing
     * resource. Other values will result in error from server as they are not supported.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OperationStatusResultInner delete(String resourceGroupName, String storageApplianceName, String ifMatch,
        String ifNoneMatch, Context context) {
        return beginDelete(resourceGroupName, storageApplianceName, ifMatch, ifNoneMatch, context).getFinalResult();
    }

    /**
     * Patch the storage appliance.
     * 
     * Update properties of the provided storage appliance, or update tags associated with the storage appliance
     * Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageApplianceName The name of the storage appliance.
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current resource. Specify
     * the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new record set to be created, but to prevent updating an existing
     * resource. Other values will result in error from server as they are not supported.
     * @param storageApplianceUpdateParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return storageAppliance represents on-premises Network Cloud storage appliance along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String resourceGroupName,
        String storageApplianceName, String ifMatch, String ifNoneMatch,
        StorageAppliancePatchParameters storageApplianceUpdateParameters) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (storageApplianceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter storageApplianceName is required and cannot be null."));
        }
        if (storageApplianceUpdateParameters != null) {
            storageApplianceUpdateParameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.update(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, storageApplianceName, ifMatch, ifNoneMatch,
                storageApplianceUpdateParameters, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Patch the storage appliance.
     * 
     * Update properties of the provided storage appliance, or update tags associated with the storage appliance
     * Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageApplianceName The name of the storage appliance.
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current resource. Specify
     * the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new record set to be created, but to prevent updating an existing
     * resource. Other values will result in error from server as they are not supported.
     * @param storageApplianceUpdateParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return storageAppliance represents on-premises Network Cloud storage appliance along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> updateWithResponse(String resourceGroupName, String storageApplianceName,
        String ifMatch, String ifNoneMatch, StorageAppliancePatchParameters storageApplianceUpdateParameters) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (storageApplianceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter storageApplianceName is required and cannot be null."));
        }
        if (storageApplianceUpdateParameters != null) {
            storageApplianceUpdateParameters.validate();
        }
        final String accept = "application/json";
        return service.updateSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, storageApplianceName, ifMatch, ifNoneMatch,
            storageApplianceUpdateParameters, accept, Context.NONE);
    }

    /**
     * Patch the storage appliance.
     * 
     * Update properties of the provided storage appliance, or update tags associated with the storage appliance
     * Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageApplianceName The name of the storage appliance.
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current resource. Specify
     * the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new record set to be created, but to prevent updating an existing
     * resource. Other values will result in error from server as they are not supported.
     * @param storageApplianceUpdateParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return storageAppliance represents on-premises Network Cloud storage appliance along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> updateWithResponse(String resourceGroupName, String storageApplianceName,
        String ifMatch, String ifNoneMatch, StorageAppliancePatchParameters storageApplianceUpdateParameters,
        Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (storageApplianceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter storageApplianceName is required and cannot be null."));
        }
        if (storageApplianceUpdateParameters != null) {
            storageApplianceUpdateParameters.validate();
        }
        final String accept = "application/json";
        return service.updateSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, storageApplianceName, ifMatch, ifNoneMatch,
            storageApplianceUpdateParameters, accept, context);
    }

    /**
     * Patch the storage appliance.
     * 
     * Update properties of the provided storage appliance, or update tags associated with the storage appliance
     * Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageApplianceName The name of the storage appliance.
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current resource. Specify
     * the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new record set to be created, but to prevent updating an existing
     * resource. Other values will result in error from server as they are not supported.
     * @param storageApplianceUpdateParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of storageAppliance represents on-premises Network Cloud storage
     * appliance.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<StorageApplianceInner>, StorageApplianceInner> beginUpdateAsync(
        String resourceGroupName, String storageApplianceName, String ifMatch, String ifNoneMatch,
        StorageAppliancePatchParameters storageApplianceUpdateParameters) {
        Mono<Response<Flux<ByteBuffer>>> mono = updateWithResponseAsync(resourceGroupName, storageApplianceName,
            ifMatch, ifNoneMatch, storageApplianceUpdateParameters);
        return this.client.<StorageApplianceInner, StorageApplianceInner>getLroResult(mono,
            this.client.getHttpPipeline(), StorageApplianceInner.class, StorageApplianceInner.class,
            this.client.getContext());
    }

    /**
     * Patch the storage appliance.
     * 
     * Update properties of the provided storage appliance, or update tags associated with the storage appliance
     * Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageApplianceName The name of the storage appliance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of storageAppliance represents on-premises Network Cloud storage
     * appliance.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<StorageApplianceInner>, StorageApplianceInner>
        beginUpdateAsync(String resourceGroupName, String storageApplianceName) {
        final String ifMatch = null;
        final String ifNoneMatch = null;
        final StorageAppliancePatchParameters storageApplianceUpdateParameters = null;
        Mono<Response<Flux<ByteBuffer>>> mono = updateWithResponseAsync(resourceGroupName, storageApplianceName,
            ifMatch, ifNoneMatch, storageApplianceUpdateParameters);
        return this.client.<StorageApplianceInner, StorageApplianceInner>getLroResult(mono,
            this.client.getHttpPipeline(), StorageApplianceInner.class, StorageApplianceInner.class,
            this.client.getContext());
    }

    /**
     * Patch the storage appliance.
     * 
     * Update properties of the provided storage appliance, or update tags associated with the storage appliance
     * Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageApplianceName The name of the storage appliance.
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current resource. Specify
     * the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new record set to be created, but to prevent updating an existing
     * resource. Other values will result in error from server as they are not supported.
     * @param storageApplianceUpdateParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of storageAppliance represents on-premises Network Cloud storage
     * appliance.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<StorageApplianceInner>, StorageApplianceInner> beginUpdate(String resourceGroupName,
        String storageApplianceName, String ifMatch, String ifNoneMatch,
        StorageAppliancePatchParameters storageApplianceUpdateParameters) {
        Response<BinaryData> response = updateWithResponse(resourceGroupName, storageApplianceName, ifMatch,
            ifNoneMatch, storageApplianceUpdateParameters);
        return this.client.<StorageApplianceInner, StorageApplianceInner>getLroResult(response,
            StorageApplianceInner.class, StorageApplianceInner.class, Context.NONE);
    }

    /**
     * Patch the storage appliance.
     * 
     * Update properties of the provided storage appliance, or update tags associated with the storage appliance
     * Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageApplianceName The name of the storage appliance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of storageAppliance represents on-premises Network Cloud storage
     * appliance.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<StorageApplianceInner>, StorageApplianceInner> beginUpdate(String resourceGroupName,
        String storageApplianceName) {
        final String ifMatch = null;
        final String ifNoneMatch = null;
        final StorageAppliancePatchParameters storageApplianceUpdateParameters = null;
        Response<BinaryData> response = updateWithResponse(resourceGroupName, storageApplianceName, ifMatch,
            ifNoneMatch, storageApplianceUpdateParameters);
        return this.client.<StorageApplianceInner, StorageApplianceInner>getLroResult(response,
            StorageApplianceInner.class, StorageApplianceInner.class, Context.NONE);
    }

    /**
     * Patch the storage appliance.
     * 
     * Update properties of the provided storage appliance, or update tags associated with the storage appliance
     * Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageApplianceName The name of the storage appliance.
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current resource. Specify
     * the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new record set to be created, but to prevent updating an existing
     * resource. Other values will result in error from server as they are not supported.
     * @param storageApplianceUpdateParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of storageAppliance represents on-premises Network Cloud storage
     * appliance.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<StorageApplianceInner>, StorageApplianceInner> beginUpdate(String resourceGroupName,
        String storageApplianceName, String ifMatch, String ifNoneMatch,
        StorageAppliancePatchParameters storageApplianceUpdateParameters, Context context) {
        Response<BinaryData> response = updateWithResponse(resourceGroupName, storageApplianceName, ifMatch,
            ifNoneMatch, storageApplianceUpdateParameters, context);
        return this.client.<StorageApplianceInner, StorageApplianceInner>getLroResult(response,
            StorageApplianceInner.class, StorageApplianceInner.class, context);
    }

    /**
     * Patch the storage appliance.
     * 
     * Update properties of the provided storage appliance, or update tags associated with the storage appliance
     * Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageApplianceName The name of the storage appliance.
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current resource. Specify
     * the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new record set to be created, but to prevent updating an existing
     * resource. Other values will result in error from server as they are not supported.
     * @param storageApplianceUpdateParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return storageAppliance represents on-premises Network Cloud storage appliance on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<StorageApplianceInner> updateAsync(String resourceGroupName, String storageApplianceName,
        String ifMatch, String ifNoneMatch, StorageAppliancePatchParameters storageApplianceUpdateParameters) {
        return beginUpdateAsync(resourceGroupName, storageApplianceName, ifMatch, ifNoneMatch,
            storageApplianceUpdateParameters).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Patch the storage appliance.
     * 
     * Update properties of the provided storage appliance, or update tags associated with the storage appliance
     * Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageApplianceName The name of the storage appliance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return storageAppliance represents on-premises Network Cloud storage appliance on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<StorageApplianceInner> updateAsync(String resourceGroupName, String storageApplianceName) {
        final String ifMatch = null;
        final String ifNoneMatch = null;
        final StorageAppliancePatchParameters storageApplianceUpdateParameters = null;
        return beginUpdateAsync(resourceGroupName, storageApplianceName, ifMatch, ifNoneMatch,
            storageApplianceUpdateParameters).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Patch the storage appliance.
     * 
     * Update properties of the provided storage appliance, or update tags associated with the storage appliance
     * Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageApplianceName The name of the storage appliance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return storageAppliance represents on-premises Network Cloud storage appliance.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public StorageApplianceInner update(String resourceGroupName, String storageApplianceName) {
        final String ifMatch = null;
        final String ifNoneMatch = null;
        final StorageAppliancePatchParameters storageApplianceUpdateParameters = null;
        return beginUpdate(resourceGroupName, storageApplianceName, ifMatch, ifNoneMatch,
            storageApplianceUpdateParameters).getFinalResult();
    }

    /**
     * Patch the storage appliance.
     * 
     * Update properties of the provided storage appliance, or update tags associated with the storage appliance
     * Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageApplianceName The name of the storage appliance.
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current resource. Specify
     * the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new record set to be created, but to prevent updating an existing
     * resource. Other values will result in error from server as they are not supported.
     * @param storageApplianceUpdateParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return storageAppliance represents on-premises Network Cloud storage appliance.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public StorageApplianceInner update(String resourceGroupName, String storageApplianceName, String ifMatch,
        String ifNoneMatch, StorageAppliancePatchParameters storageApplianceUpdateParameters, Context context) {
        return beginUpdate(resourceGroupName, storageApplianceName, ifMatch, ifNoneMatch,
            storageApplianceUpdateParameters, context).getFinalResult();
    }

    /**
     * Turn off remote vendor management for a storage appliance, if supported.
     * 
     * Disable remote vendor management of the provided storage appliance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageApplianceName The name of the storage appliance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> disableRemoteVendorManagementWithResponseAsync(String resourceGroupName,
        String storageApplianceName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (storageApplianceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter storageApplianceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.disableRemoteVendorManagement(this.client.getEndpoint(), this.client.getApiVersion(),
                    this.client.getSubscriptionId(), resourceGroupName, storageApplianceName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Turn off remote vendor management for a storage appliance, if supported.
     * 
     * Disable remote vendor management of the provided storage appliance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageApplianceName The name of the storage appliance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> disableRemoteVendorManagementWithResponse(String resourceGroupName,
        String storageApplianceName) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (storageApplianceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter storageApplianceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.disableRemoteVendorManagementSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, storageApplianceName, accept, Context.NONE);
    }

    /**
     * Turn off remote vendor management for a storage appliance, if supported.
     * 
     * Disable remote vendor management of the provided storage appliance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageApplianceName The name of the storage appliance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> disableRemoteVendorManagementWithResponse(String resourceGroupName,
        String storageApplianceName, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (storageApplianceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter storageApplianceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.disableRemoteVendorManagementSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, storageApplianceName, accept, context);
    }

    /**
     * Turn off remote vendor management for a storage appliance, if supported.
     * 
     * Disable remote vendor management of the provided storage appliance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageApplianceName The name of the storage appliance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginDisableRemoteVendorManagementAsync(String resourceGroupName, String storageApplianceName) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = disableRemoteVendorManagementWithResponseAsync(resourceGroupName, storageApplianceName);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(mono,
            this.client.getHttpPipeline(), OperationStatusResultInner.class, OperationStatusResultInner.class,
            this.client.getContext());
    }

    /**
     * Turn off remote vendor management for a storage appliance, if supported.
     * 
     * Disable remote vendor management of the provided storage appliance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageApplianceName The name of the storage appliance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginDisableRemoteVendorManagement(String resourceGroupName, String storageApplianceName) {
        Response<BinaryData> response
            = disableRemoteVendorManagementWithResponse(resourceGroupName, storageApplianceName);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(response,
            OperationStatusResultInner.class, OperationStatusResultInner.class, Context.NONE);
    }

    /**
     * Turn off remote vendor management for a storage appliance, if supported.
     * 
     * Disable remote vendor management of the provided storage appliance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageApplianceName The name of the storage appliance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginDisableRemoteVendorManagement(String resourceGroupName, String storageApplianceName, Context context) {
        Response<BinaryData> response
            = disableRemoteVendorManagementWithResponse(resourceGroupName, storageApplianceName, context);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(response,
            OperationStatusResultInner.class, OperationStatusResultInner.class, context);
    }

    /**
     * Turn off remote vendor management for a storage appliance, if supported.
     * 
     * Disable remote vendor management of the provided storage appliance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageApplianceName The name of the storage appliance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<OperationStatusResultInner> disableRemoteVendorManagementAsync(String resourceGroupName,
        String storageApplianceName) {
        return beginDisableRemoteVendorManagementAsync(resourceGroupName, storageApplianceName).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Turn off remote vendor management for a storage appliance, if supported.
     * 
     * Disable remote vendor management of the provided storage appliance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageApplianceName The name of the storage appliance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OperationStatusResultInner disableRemoteVendorManagement(String resourceGroupName,
        String storageApplianceName) {
        return beginDisableRemoteVendorManagement(resourceGroupName, storageApplianceName).getFinalResult();
    }

    /**
     * Turn off remote vendor management for a storage appliance, if supported.
     * 
     * Disable remote vendor management of the provided storage appliance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageApplianceName The name of the storage appliance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OperationStatusResultInner disableRemoteVendorManagement(String resourceGroupName,
        String storageApplianceName, Context context) {
        return beginDisableRemoteVendorManagement(resourceGroupName, storageApplianceName, context).getFinalResult();
    }

    /**
     * Turn on remote vendor management for a storage appliance, if supported.
     * 
     * Enable remote vendor management of the provided storage appliance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageApplianceName The name of the storage appliance.
     * @param storageApplianceEnableRemoteVendorManagementParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> enableRemoteVendorManagementWithResponseAsync(String resourceGroupName,
        String storageApplianceName,
        StorageApplianceEnableRemoteVendorManagementParameters storageApplianceEnableRemoteVendorManagementParameters) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (storageApplianceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter storageApplianceName is required and cannot be null."));
        }
        if (storageApplianceEnableRemoteVendorManagementParameters != null) {
            storageApplianceEnableRemoteVendorManagementParameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.enableRemoteVendorManagement(this.client.getEndpoint(),
                this.client.getApiVersion(), this.client.getSubscriptionId(), resourceGroupName, storageApplianceName,
                storageApplianceEnableRemoteVendorManagementParameters, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Turn on remote vendor management for a storage appliance, if supported.
     * 
     * Enable remote vendor management of the provided storage appliance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageApplianceName The name of the storage appliance.
     * @param storageApplianceEnableRemoteVendorManagementParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> enableRemoteVendorManagementWithResponse(String resourceGroupName,
        String storageApplianceName,
        StorageApplianceEnableRemoteVendorManagementParameters storageApplianceEnableRemoteVendorManagementParameters) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (storageApplianceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter storageApplianceName is required and cannot be null."));
        }
        if (storageApplianceEnableRemoteVendorManagementParameters != null) {
            storageApplianceEnableRemoteVendorManagementParameters.validate();
        }
        final String accept = "application/json";
        return service.enableRemoteVendorManagementSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, storageApplianceName,
            storageApplianceEnableRemoteVendorManagementParameters, accept, Context.NONE);
    }

    /**
     * Turn on remote vendor management for a storage appliance, if supported.
     * 
     * Enable remote vendor management of the provided storage appliance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageApplianceName The name of the storage appliance.
     * @param storageApplianceEnableRemoteVendorManagementParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> enableRemoteVendorManagementWithResponse(String resourceGroupName,
        String storageApplianceName,
        StorageApplianceEnableRemoteVendorManagementParameters storageApplianceEnableRemoteVendorManagementParameters,
        Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (storageApplianceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter storageApplianceName is required and cannot be null."));
        }
        if (storageApplianceEnableRemoteVendorManagementParameters != null) {
            storageApplianceEnableRemoteVendorManagementParameters.validate();
        }
        final String accept = "application/json";
        return service.enableRemoteVendorManagementSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, storageApplianceName,
            storageApplianceEnableRemoteVendorManagementParameters, accept, context);
    }

    /**
     * Turn on remote vendor management for a storage appliance, if supported.
     * 
     * Enable remote vendor management of the provided storage appliance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageApplianceName The name of the storage appliance.
     * @param storageApplianceEnableRemoteVendorManagementParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginEnableRemoteVendorManagementAsync(String resourceGroupName, String storageApplianceName,
            StorageApplianceEnableRemoteVendorManagementParameters storageApplianceEnableRemoteVendorManagementParameters) {
        Mono<Response<Flux<ByteBuffer>>> mono = enableRemoteVendorManagementWithResponseAsync(resourceGroupName,
            storageApplianceName, storageApplianceEnableRemoteVendorManagementParameters);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(mono,
            this.client.getHttpPipeline(), OperationStatusResultInner.class, OperationStatusResultInner.class,
            this.client.getContext());
    }

    /**
     * Turn on remote vendor management for a storage appliance, if supported.
     * 
     * Enable remote vendor management of the provided storage appliance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageApplianceName The name of the storage appliance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginEnableRemoteVendorManagementAsync(String resourceGroupName, String storageApplianceName) {
        final StorageApplianceEnableRemoteVendorManagementParameters storageApplianceEnableRemoteVendorManagementParameters
            = null;
        Mono<Response<Flux<ByteBuffer>>> mono = enableRemoteVendorManagementWithResponseAsync(resourceGroupName,
            storageApplianceName, storageApplianceEnableRemoteVendorManagementParameters);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(mono,
            this.client.getHttpPipeline(), OperationStatusResultInner.class, OperationStatusResultInner.class,
            this.client.getContext());
    }

    /**
     * Turn on remote vendor management for a storage appliance, if supported.
     * 
     * Enable remote vendor management of the provided storage appliance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageApplianceName The name of the storage appliance.
     * @param storageApplianceEnableRemoteVendorManagementParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginEnableRemoteVendorManagement(String resourceGroupName, String storageApplianceName,
            StorageApplianceEnableRemoteVendorManagementParameters storageApplianceEnableRemoteVendorManagementParameters) {
        Response<BinaryData> response = enableRemoteVendorManagementWithResponse(resourceGroupName,
            storageApplianceName, storageApplianceEnableRemoteVendorManagementParameters);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(response,
            OperationStatusResultInner.class, OperationStatusResultInner.class, Context.NONE);
    }

    /**
     * Turn on remote vendor management for a storage appliance, if supported.
     * 
     * Enable remote vendor management of the provided storage appliance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageApplianceName The name of the storage appliance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginEnableRemoteVendorManagement(String resourceGroupName, String storageApplianceName) {
        final StorageApplianceEnableRemoteVendorManagementParameters storageApplianceEnableRemoteVendorManagementParameters
            = null;
        Response<BinaryData> response = enableRemoteVendorManagementWithResponse(resourceGroupName,
            storageApplianceName, storageApplianceEnableRemoteVendorManagementParameters);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(response,
            OperationStatusResultInner.class, OperationStatusResultInner.class, Context.NONE);
    }

    /**
     * Turn on remote vendor management for a storage appliance, if supported.
     * 
     * Enable remote vendor management of the provided storage appliance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageApplianceName The name of the storage appliance.
     * @param storageApplianceEnableRemoteVendorManagementParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginEnableRemoteVendorManagement(String resourceGroupName, String storageApplianceName,
            StorageApplianceEnableRemoteVendorManagementParameters storageApplianceEnableRemoteVendorManagementParameters,
            Context context) {
        Response<BinaryData> response = enableRemoteVendorManagementWithResponse(resourceGroupName,
            storageApplianceName, storageApplianceEnableRemoteVendorManagementParameters, context);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(response,
            OperationStatusResultInner.class, OperationStatusResultInner.class, context);
    }

    /**
     * Turn on remote vendor management for a storage appliance, if supported.
     * 
     * Enable remote vendor management of the provided storage appliance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageApplianceName The name of the storage appliance.
     * @param storageApplianceEnableRemoteVendorManagementParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<OperationStatusResultInner> enableRemoteVendorManagementAsync(String resourceGroupName,
        String storageApplianceName,
        StorageApplianceEnableRemoteVendorManagementParameters storageApplianceEnableRemoteVendorManagementParameters) {
        return beginEnableRemoteVendorManagementAsync(resourceGroupName, storageApplianceName,
            storageApplianceEnableRemoteVendorManagementParameters).last()
                .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Turn on remote vendor management for a storage appliance, if supported.
     * 
     * Enable remote vendor management of the provided storage appliance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageApplianceName The name of the storage appliance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<OperationStatusResultInner> enableRemoteVendorManagementAsync(String resourceGroupName,
        String storageApplianceName) {
        final StorageApplianceEnableRemoteVendorManagementParameters storageApplianceEnableRemoteVendorManagementParameters
            = null;
        return beginEnableRemoteVendorManagementAsync(resourceGroupName, storageApplianceName,
            storageApplianceEnableRemoteVendorManagementParameters).last()
                .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Turn on remote vendor management for a storage appliance, if supported.
     * 
     * Enable remote vendor management of the provided storage appliance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageApplianceName The name of the storage appliance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OperationStatusResultInner enableRemoteVendorManagement(String resourceGroupName,
        String storageApplianceName) {
        final StorageApplianceEnableRemoteVendorManagementParameters storageApplianceEnableRemoteVendorManagementParameters
            = null;
        return beginEnableRemoteVendorManagement(resourceGroupName, storageApplianceName,
            storageApplianceEnableRemoteVendorManagementParameters).getFinalResult();
    }

    /**
     * Turn on remote vendor management for a storage appliance, if supported.
     * 
     * Enable remote vendor management of the provided storage appliance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageApplianceName The name of the storage appliance.
     * @param storageApplianceEnableRemoteVendorManagementParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OperationStatusResultInner enableRemoteVendorManagement(String resourceGroupName,
        String storageApplianceName,
        StorageApplianceEnableRemoteVendorManagementParameters storageApplianceEnableRemoteVendorManagementParameters,
        Context context) {
        return beginEnableRemoteVendorManagement(resourceGroupName, storageApplianceName,
            storageApplianceEnableRemoteVendorManagementParameters, context).getFinalResult();
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return storageApplianceList represents a list of storage appliances along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<StorageApplianceInner>> listBySubscriptionNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listBySubscriptionNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<StorageApplianceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return storageApplianceList represents a list of storage appliances along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<StorageApplianceInner> listBySubscriptionNextSinglePage(String nextLink) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<StorageApplianceList> res
            = service.listBySubscriptionNextSync(nextLink, this.client.getEndpoint(), accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return storageApplianceList represents a list of storage appliances along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<StorageApplianceInner> listBySubscriptionNextSinglePage(String nextLink, Context context) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<StorageApplianceList> res
            = service.listBySubscriptionNextSync(nextLink, this.client.getEndpoint(), accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return storageApplianceList represents a list of storage appliances along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<StorageApplianceInner>> listByResourceGroupNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByResourceGroupNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<StorageApplianceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return storageApplianceList represents a list of storage appliances along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<StorageApplianceInner> listByResourceGroupNextSinglePage(String nextLink) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<StorageApplianceList> res
            = service.listByResourceGroupNextSync(nextLink, this.client.getEndpoint(), accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return storageApplianceList represents a list of storage appliances along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<StorageApplianceInner> listByResourceGroupNextSinglePage(String nextLink, Context context) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<StorageApplianceList> res
            = service.listByResourceGroupNextSync(nextLink, this.client.getEndpoint(), accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    private static final ClientLogger LOGGER = new ClientLogger(StorageAppliancesClientImpl.class);
}
