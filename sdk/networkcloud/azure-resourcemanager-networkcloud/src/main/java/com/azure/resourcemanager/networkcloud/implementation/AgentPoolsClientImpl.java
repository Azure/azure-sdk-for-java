// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.networkcloud.fluent.AgentPoolsClient;
import com.azure.resourcemanager.networkcloud.fluent.models.AgentPoolInner;
import com.azure.resourcemanager.networkcloud.models.AgentPoolList;
import com.azure.resourcemanager.networkcloud.models.AgentPoolPatchParameters;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in AgentPoolsClient. */
public final class AgentPoolsClientImpl implements AgentPoolsClient {
    /** The proxy service used to perform REST calls. */
    private final AgentPoolsService service;

    /** The service client containing this operation class. */
    private final NetworkCloudImpl client;

    /**
     * Initializes an instance of AgentPoolsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    AgentPoolsClientImpl(NetworkCloudImpl client) {
        this.service =
            RestProxy.create(AgentPoolsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for NetworkCloudAgentPools to be used by the proxy service to perform
     * REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "NetworkCloudAgentPoo")
    public interface AgentPoolsService {
        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/kubernetesClusters/{kubernetesClusterName}/agentPools")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<AgentPoolList>> listByKubernetesCluster(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("kubernetesClusterName") String kubernetesClusterName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/kubernetesClusters/{kubernetesClusterName}/agentPools/{agentPoolName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<AgentPoolInner>> get(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("kubernetesClusterName") String kubernetesClusterName,
            @PathParam("agentPoolName") String agentPoolName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/kubernetesClusters/{kubernetesClusterName}/agentPools/{agentPoolName}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("kubernetesClusterName") String kubernetesClusterName,
            @PathParam("agentPoolName") String agentPoolName,
            @BodyParam("application/json") AgentPoolInner agentPoolParameters,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/kubernetesClusters/{kubernetesClusterName}/agentPools/{agentPoolName}")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("kubernetesClusterName") String kubernetesClusterName,
            @PathParam("agentPoolName") String agentPoolName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Patch(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/kubernetesClusters/{kubernetesClusterName}/agentPools/{agentPoolName}")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> update(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("kubernetesClusterName") String kubernetesClusterName,
            @PathParam("agentPoolName") String agentPoolName,
            @BodyParam("application/json") AgentPoolPatchParameters agentPoolUpdateParameters,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<AgentPoolList>> listByKubernetesClusterNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * List agent pools of the Kubernetes cluster.
     *
     * <p>Get a list of agent pools for the provided Kubernetes cluster.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of agent pools for the provided Kubernetes cluster along with {@link PagedResponse} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<AgentPoolInner>> listByKubernetesClusterSinglePageAsync(
        String resourceGroupName, String kubernetesClusterName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (kubernetesClusterName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter kubernetesClusterName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listByKubernetesCluster(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            kubernetesClusterName,
                            accept,
                            context))
            .<PagedResponse<AgentPoolInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List agent pools of the Kubernetes cluster.
     *
     * <p>Get a list of agent pools for the provided Kubernetes cluster.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of agent pools for the provided Kubernetes cluster along with {@link PagedResponse} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<AgentPoolInner>> listByKubernetesClusterSinglePageAsync(
        String resourceGroupName, String kubernetesClusterName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (kubernetesClusterName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter kubernetesClusterName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByKubernetesCluster(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                kubernetesClusterName,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * List agent pools of the Kubernetes cluster.
     *
     * <p>Get a list of agent pools for the provided Kubernetes cluster.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of agent pools for the provided Kubernetes cluster as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<AgentPoolInner> listByKubernetesClusterAsync(
        String resourceGroupName, String kubernetesClusterName) {
        return new PagedFlux<>(
            () -> listByKubernetesClusterSinglePageAsync(resourceGroupName, kubernetesClusterName),
            nextLink -> listByKubernetesClusterNextSinglePageAsync(nextLink));
    }

    /**
     * List agent pools of the Kubernetes cluster.
     *
     * <p>Get a list of agent pools for the provided Kubernetes cluster.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of agent pools for the provided Kubernetes cluster as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<AgentPoolInner> listByKubernetesClusterAsync(
        String resourceGroupName, String kubernetesClusterName, Context context) {
        return new PagedFlux<>(
            () -> listByKubernetesClusterSinglePageAsync(resourceGroupName, kubernetesClusterName, context),
            nextLink -> listByKubernetesClusterNextSinglePageAsync(nextLink, context));
    }

    /**
     * List agent pools of the Kubernetes cluster.
     *
     * <p>Get a list of agent pools for the provided Kubernetes cluster.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of agent pools for the provided Kubernetes cluster as paginated response with {@link
     *     PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<AgentPoolInner> listByKubernetesCluster(
        String resourceGroupName, String kubernetesClusterName) {
        return new PagedIterable<>(listByKubernetesClusterAsync(resourceGroupName, kubernetesClusterName));
    }

    /**
     * List agent pools of the Kubernetes cluster.
     *
     * <p>Get a list of agent pools for the provided Kubernetes cluster.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of agent pools for the provided Kubernetes cluster as paginated response with {@link
     *     PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<AgentPoolInner> listByKubernetesCluster(
        String resourceGroupName, String kubernetesClusterName, Context context) {
        return new PagedIterable<>(listByKubernetesClusterAsync(resourceGroupName, kubernetesClusterName, context));
    }

    /**
     * Retrieve the Kubernetes cluster agent pool.
     *
     * <p>Get properties of the provided Kubernetes cluster agent pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param agentPoolName The name of the Kubernetes cluster agent pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of the provided Kubernetes cluster agent pool along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<AgentPoolInner>> getWithResponseAsync(
        String resourceGroupName, String kubernetesClusterName, String agentPoolName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (kubernetesClusterName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter kubernetesClusterName is required and cannot be null."));
        }
        if (agentPoolName == null) {
            return Mono.error(new IllegalArgumentException("Parameter agentPoolName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            kubernetesClusterName,
                            agentPoolName,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Retrieve the Kubernetes cluster agent pool.
     *
     * <p>Get properties of the provided Kubernetes cluster agent pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param agentPoolName The name of the Kubernetes cluster agent pool.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of the provided Kubernetes cluster agent pool along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<AgentPoolInner>> getWithResponseAsync(
        String resourceGroupName, String kubernetesClusterName, String agentPoolName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (kubernetesClusterName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter kubernetesClusterName is required and cannot be null."));
        }
        if (agentPoolName == null) {
            return Mono.error(new IllegalArgumentException("Parameter agentPoolName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .get(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                kubernetesClusterName,
                agentPoolName,
                accept,
                context);
    }

    /**
     * Retrieve the Kubernetes cluster agent pool.
     *
     * <p>Get properties of the provided Kubernetes cluster agent pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param agentPoolName The name of the Kubernetes cluster agent pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of the provided Kubernetes cluster agent pool on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<AgentPoolInner> getAsync(
        String resourceGroupName, String kubernetesClusterName, String agentPoolName) {
        return getWithResponseAsync(resourceGroupName, kubernetesClusterName, agentPoolName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Retrieve the Kubernetes cluster agent pool.
     *
     * <p>Get properties of the provided Kubernetes cluster agent pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param agentPoolName The name of the Kubernetes cluster agent pool.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of the provided Kubernetes cluster agent pool along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<AgentPoolInner> getWithResponse(
        String resourceGroupName, String kubernetesClusterName, String agentPoolName, Context context) {
        return getWithResponseAsync(resourceGroupName, kubernetesClusterName, agentPoolName, context).block();
    }

    /**
     * Retrieve the Kubernetes cluster agent pool.
     *
     * <p>Get properties of the provided Kubernetes cluster agent pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param agentPoolName The name of the Kubernetes cluster agent pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of the provided Kubernetes cluster agent pool.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AgentPoolInner get(String resourceGroupName, String kubernetesClusterName, String agentPoolName) {
        return getWithResponse(resourceGroupName, kubernetesClusterName, agentPoolName, Context.NONE).getValue();
    }

    /**
     * Create or update the Kubernetes cluster agent pool.
     *
     * <p>Create a new Kubernetes cluster agent pool or update the properties of the existing one.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param agentPoolName The name of the Kubernetes cluster agent pool.
     * @param agentPoolParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return agentPool represents the agent pool of Kubernetes cluster along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(
        String resourceGroupName,
        String kubernetesClusterName,
        String agentPoolName,
        AgentPoolInner agentPoolParameters) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (kubernetesClusterName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter kubernetesClusterName is required and cannot be null."));
        }
        if (agentPoolName == null) {
            return Mono.error(new IllegalArgumentException("Parameter agentPoolName is required and cannot be null."));
        }
        if (agentPoolParameters == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter agentPoolParameters is required and cannot be null."));
        } else {
            agentPoolParameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createOrUpdate(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            kubernetesClusterName,
                            agentPoolName,
                            agentPoolParameters,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create or update the Kubernetes cluster agent pool.
     *
     * <p>Create a new Kubernetes cluster agent pool or update the properties of the existing one.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param agentPoolName The name of the Kubernetes cluster agent pool.
     * @param agentPoolParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return agentPool represents the agent pool of Kubernetes cluster along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(
        String resourceGroupName,
        String kubernetesClusterName,
        String agentPoolName,
        AgentPoolInner agentPoolParameters,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (kubernetesClusterName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter kubernetesClusterName is required and cannot be null."));
        }
        if (agentPoolName == null) {
            return Mono.error(new IllegalArgumentException("Parameter agentPoolName is required and cannot be null."));
        }
        if (agentPoolParameters == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter agentPoolParameters is required and cannot be null."));
        } else {
            agentPoolParameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .createOrUpdate(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                kubernetesClusterName,
                agentPoolName,
                agentPoolParameters,
                accept,
                context);
    }

    /**
     * Create or update the Kubernetes cluster agent pool.
     *
     * <p>Create a new Kubernetes cluster agent pool or update the properties of the existing one.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param agentPoolName The name of the Kubernetes cluster agent pool.
     * @param agentPoolParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of agentPool represents the agent pool of Kubernetes cluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<AgentPoolInner>, AgentPoolInner> beginCreateOrUpdateAsync(
        String resourceGroupName,
        String kubernetesClusterName,
        String agentPoolName,
        AgentPoolInner agentPoolParameters) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            createOrUpdateWithResponseAsync(
                resourceGroupName, kubernetesClusterName, agentPoolName, agentPoolParameters);
        return this
            .client
            .<AgentPoolInner, AgentPoolInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                AgentPoolInner.class,
                AgentPoolInner.class,
                this.client.getContext());
    }

    /**
     * Create or update the Kubernetes cluster agent pool.
     *
     * <p>Create a new Kubernetes cluster agent pool or update the properties of the existing one.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param agentPoolName The name of the Kubernetes cluster agent pool.
     * @param agentPoolParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of agentPool represents the agent pool of Kubernetes cluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<AgentPoolInner>, AgentPoolInner> beginCreateOrUpdateAsync(
        String resourceGroupName,
        String kubernetesClusterName,
        String agentPoolName,
        AgentPoolInner agentPoolParameters,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            createOrUpdateWithResponseAsync(
                resourceGroupName, kubernetesClusterName, agentPoolName, agentPoolParameters, context);
        return this
            .client
            .<AgentPoolInner, AgentPoolInner>getLroResult(
                mono, this.client.getHttpPipeline(), AgentPoolInner.class, AgentPoolInner.class, context);
    }

    /**
     * Create or update the Kubernetes cluster agent pool.
     *
     * <p>Create a new Kubernetes cluster agent pool or update the properties of the existing one.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param agentPoolName The name of the Kubernetes cluster agent pool.
     * @param agentPoolParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of agentPool represents the agent pool of Kubernetes cluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<AgentPoolInner>, AgentPoolInner> beginCreateOrUpdate(
        String resourceGroupName,
        String kubernetesClusterName,
        String agentPoolName,
        AgentPoolInner agentPoolParameters) {
        return this
            .beginCreateOrUpdateAsync(resourceGroupName, kubernetesClusterName, agentPoolName, agentPoolParameters)
            .getSyncPoller();
    }

    /**
     * Create or update the Kubernetes cluster agent pool.
     *
     * <p>Create a new Kubernetes cluster agent pool or update the properties of the existing one.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param agentPoolName The name of the Kubernetes cluster agent pool.
     * @param agentPoolParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of agentPool represents the agent pool of Kubernetes cluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<AgentPoolInner>, AgentPoolInner> beginCreateOrUpdate(
        String resourceGroupName,
        String kubernetesClusterName,
        String agentPoolName,
        AgentPoolInner agentPoolParameters,
        Context context) {
        return this
            .beginCreateOrUpdateAsync(
                resourceGroupName, kubernetesClusterName, agentPoolName, agentPoolParameters, context)
            .getSyncPoller();
    }

    /**
     * Create or update the Kubernetes cluster agent pool.
     *
     * <p>Create a new Kubernetes cluster agent pool or update the properties of the existing one.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param agentPoolName The name of the Kubernetes cluster agent pool.
     * @param agentPoolParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return agentPool represents the agent pool of Kubernetes cluster on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<AgentPoolInner> createOrUpdateAsync(
        String resourceGroupName,
        String kubernetesClusterName,
        String agentPoolName,
        AgentPoolInner agentPoolParameters) {
        return beginCreateOrUpdateAsync(resourceGroupName, kubernetesClusterName, agentPoolName, agentPoolParameters)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create or update the Kubernetes cluster agent pool.
     *
     * <p>Create a new Kubernetes cluster agent pool or update the properties of the existing one.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param agentPoolName The name of the Kubernetes cluster agent pool.
     * @param agentPoolParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return agentPool represents the agent pool of Kubernetes cluster on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<AgentPoolInner> createOrUpdateAsync(
        String resourceGroupName,
        String kubernetesClusterName,
        String agentPoolName,
        AgentPoolInner agentPoolParameters,
        Context context) {
        return beginCreateOrUpdateAsync(
                resourceGroupName, kubernetesClusterName, agentPoolName, agentPoolParameters, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create or update the Kubernetes cluster agent pool.
     *
     * <p>Create a new Kubernetes cluster agent pool or update the properties of the existing one.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param agentPoolName The name of the Kubernetes cluster agent pool.
     * @param agentPoolParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return agentPool represents the agent pool of Kubernetes cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AgentPoolInner createOrUpdate(
        String resourceGroupName,
        String kubernetesClusterName,
        String agentPoolName,
        AgentPoolInner agentPoolParameters) {
        return createOrUpdateAsync(resourceGroupName, kubernetesClusterName, agentPoolName, agentPoolParameters)
            .block();
    }

    /**
     * Create or update the Kubernetes cluster agent pool.
     *
     * <p>Create a new Kubernetes cluster agent pool or update the properties of the existing one.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param agentPoolName The name of the Kubernetes cluster agent pool.
     * @param agentPoolParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return agentPool represents the agent pool of Kubernetes cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AgentPoolInner createOrUpdate(
        String resourceGroupName,
        String kubernetesClusterName,
        String agentPoolName,
        AgentPoolInner agentPoolParameters,
        Context context) {
        return createOrUpdateAsync(
                resourceGroupName, kubernetesClusterName, agentPoolName, agentPoolParameters, context)
            .block();
    }

    /**
     * Delete the Kubernetes cluster agent pool.
     *
     * <p>Delete the provided Kubernetes cluster agent pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param agentPoolName The name of the Kubernetes cluster agent pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(
        String resourceGroupName, String kubernetesClusterName, String agentPoolName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (kubernetesClusterName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter kubernetesClusterName is required and cannot be null."));
        }
        if (agentPoolName == null) {
            return Mono.error(new IllegalArgumentException("Parameter agentPoolName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .delete(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            kubernetesClusterName,
                            agentPoolName,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete the Kubernetes cluster agent pool.
     *
     * <p>Delete the provided Kubernetes cluster agent pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param agentPoolName The name of the Kubernetes cluster agent pool.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(
        String resourceGroupName, String kubernetesClusterName, String agentPoolName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (kubernetesClusterName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter kubernetesClusterName is required and cannot be null."));
        }
        if (agentPoolName == null) {
            return Mono.error(new IllegalArgumentException("Parameter agentPoolName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .delete(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                kubernetesClusterName,
                agentPoolName,
                accept,
                context);
    }

    /**
     * Delete the Kubernetes cluster agent pool.
     *
     * <p>Delete the provided Kubernetes cluster agent pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param agentPoolName The name of the Kubernetes cluster agent pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(
        String resourceGroupName, String kubernetesClusterName, String agentPoolName) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            deleteWithResponseAsync(resourceGroupName, kubernetesClusterName, agentPoolName);
        return this
            .client
            .<Void, Void>getLroResult(
                mono, this.client.getHttpPipeline(), Void.class, Void.class, this.client.getContext());
    }

    /**
     * Delete the Kubernetes cluster agent pool.
     *
     * <p>Delete the provided Kubernetes cluster agent pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param agentPoolName The name of the Kubernetes cluster agent pool.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(
        String resourceGroupName, String kubernetesClusterName, String agentPoolName, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            deleteWithResponseAsync(resourceGroupName, kubernetesClusterName, agentPoolName, context);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, context);
    }

    /**
     * Delete the Kubernetes cluster agent pool.
     *
     * <p>Delete the provided Kubernetes cluster agent pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param agentPoolName The name of the Kubernetes cluster agent pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(
        String resourceGroupName, String kubernetesClusterName, String agentPoolName) {
        return this.beginDeleteAsync(resourceGroupName, kubernetesClusterName, agentPoolName).getSyncPoller();
    }

    /**
     * Delete the Kubernetes cluster agent pool.
     *
     * <p>Delete the provided Kubernetes cluster agent pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param agentPoolName The name of the Kubernetes cluster agent pool.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(
        String resourceGroupName, String kubernetesClusterName, String agentPoolName, Context context) {
        return this.beginDeleteAsync(resourceGroupName, kubernetesClusterName, agentPoolName, context).getSyncPoller();
    }

    /**
     * Delete the Kubernetes cluster agent pool.
     *
     * <p>Delete the provided Kubernetes cluster agent pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param agentPoolName The name of the Kubernetes cluster agent pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String kubernetesClusterName, String agentPoolName) {
        return beginDeleteAsync(resourceGroupName, kubernetesClusterName, agentPoolName)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete the Kubernetes cluster agent pool.
     *
     * <p>Delete the provided Kubernetes cluster agent pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param agentPoolName The name of the Kubernetes cluster agent pool.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(
        String resourceGroupName, String kubernetesClusterName, String agentPoolName, Context context) {
        return beginDeleteAsync(resourceGroupName, kubernetesClusterName, agentPoolName, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete the Kubernetes cluster agent pool.
     *
     * <p>Delete the provided Kubernetes cluster agent pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param agentPoolName The name of the Kubernetes cluster agent pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String kubernetesClusterName, String agentPoolName) {
        deleteAsync(resourceGroupName, kubernetesClusterName, agentPoolName).block();
    }

    /**
     * Delete the Kubernetes cluster agent pool.
     *
     * <p>Delete the provided Kubernetes cluster agent pool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param agentPoolName The name of the Kubernetes cluster agent pool.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String kubernetesClusterName, String agentPoolName, Context context) {
        deleteAsync(resourceGroupName, kubernetesClusterName, agentPoolName, context).block();
    }

    /**
     * Patch the Kubernetes cluster agent pool.
     *
     * <p>Patch the properties of the provided Kubernetes cluster agent pool, or update the tags associated with the
     * Kubernetes cluster agent pool. Properties and tag updates can be done independently.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param agentPoolName The name of the Kubernetes cluster agent pool.
     * @param agentPoolUpdateParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return agentPool represents the agent pool of Kubernetes cluster along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(
        String resourceGroupName,
        String kubernetesClusterName,
        String agentPoolName,
        AgentPoolPatchParameters agentPoolUpdateParameters) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (kubernetesClusterName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter kubernetesClusterName is required and cannot be null."));
        }
        if (agentPoolName == null) {
            return Mono.error(new IllegalArgumentException("Parameter agentPoolName is required and cannot be null."));
        }
        if (agentPoolUpdateParameters != null) {
            agentPoolUpdateParameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .update(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            kubernetesClusterName,
                            agentPoolName,
                            agentPoolUpdateParameters,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Patch the Kubernetes cluster agent pool.
     *
     * <p>Patch the properties of the provided Kubernetes cluster agent pool, or update the tags associated with the
     * Kubernetes cluster agent pool. Properties and tag updates can be done independently.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param agentPoolName The name of the Kubernetes cluster agent pool.
     * @param agentPoolUpdateParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return agentPool represents the agent pool of Kubernetes cluster along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(
        String resourceGroupName,
        String kubernetesClusterName,
        String agentPoolName,
        AgentPoolPatchParameters agentPoolUpdateParameters,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (kubernetesClusterName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter kubernetesClusterName is required and cannot be null."));
        }
        if (agentPoolName == null) {
            return Mono.error(new IllegalArgumentException("Parameter agentPoolName is required and cannot be null."));
        }
        if (agentPoolUpdateParameters != null) {
            agentPoolUpdateParameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .update(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                kubernetesClusterName,
                agentPoolName,
                agentPoolUpdateParameters,
                accept,
                context);
    }

    /**
     * Patch the Kubernetes cluster agent pool.
     *
     * <p>Patch the properties of the provided Kubernetes cluster agent pool, or update the tags associated with the
     * Kubernetes cluster agent pool. Properties and tag updates can be done independently.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param agentPoolName The name of the Kubernetes cluster agent pool.
     * @param agentPoolUpdateParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of agentPool represents the agent pool of Kubernetes cluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<AgentPoolInner>, AgentPoolInner> beginUpdateAsync(
        String resourceGroupName,
        String kubernetesClusterName,
        String agentPoolName,
        AgentPoolPatchParameters agentPoolUpdateParameters) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            updateWithResponseAsync(resourceGroupName, kubernetesClusterName, agentPoolName, agentPoolUpdateParameters);
        return this
            .client
            .<AgentPoolInner, AgentPoolInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                AgentPoolInner.class,
                AgentPoolInner.class,
                this.client.getContext());
    }

    /**
     * Patch the Kubernetes cluster agent pool.
     *
     * <p>Patch the properties of the provided Kubernetes cluster agent pool, or update the tags associated with the
     * Kubernetes cluster agent pool. Properties and tag updates can be done independently.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param agentPoolName The name of the Kubernetes cluster agent pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of agentPool represents the agent pool of Kubernetes cluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<AgentPoolInner>, AgentPoolInner> beginUpdateAsync(
        String resourceGroupName, String kubernetesClusterName, String agentPoolName) {
        final AgentPoolPatchParameters agentPoolUpdateParameters = null;
        Mono<Response<Flux<ByteBuffer>>> mono =
            updateWithResponseAsync(resourceGroupName, kubernetesClusterName, agentPoolName, agentPoolUpdateParameters);
        return this
            .client
            .<AgentPoolInner, AgentPoolInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                AgentPoolInner.class,
                AgentPoolInner.class,
                this.client.getContext());
    }

    /**
     * Patch the Kubernetes cluster agent pool.
     *
     * <p>Patch the properties of the provided Kubernetes cluster agent pool, or update the tags associated with the
     * Kubernetes cluster agent pool. Properties and tag updates can be done independently.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param agentPoolName The name of the Kubernetes cluster agent pool.
     * @param agentPoolUpdateParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of agentPool represents the agent pool of Kubernetes cluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<AgentPoolInner>, AgentPoolInner> beginUpdateAsync(
        String resourceGroupName,
        String kubernetesClusterName,
        String agentPoolName,
        AgentPoolPatchParameters agentPoolUpdateParameters,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            updateWithResponseAsync(
                resourceGroupName, kubernetesClusterName, agentPoolName, agentPoolUpdateParameters, context);
        return this
            .client
            .<AgentPoolInner, AgentPoolInner>getLroResult(
                mono, this.client.getHttpPipeline(), AgentPoolInner.class, AgentPoolInner.class, context);
    }

    /**
     * Patch the Kubernetes cluster agent pool.
     *
     * <p>Patch the properties of the provided Kubernetes cluster agent pool, or update the tags associated with the
     * Kubernetes cluster agent pool. Properties and tag updates can be done independently.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param agentPoolName The name of the Kubernetes cluster agent pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of agentPool represents the agent pool of Kubernetes cluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<AgentPoolInner>, AgentPoolInner> beginUpdate(
        String resourceGroupName, String kubernetesClusterName, String agentPoolName) {
        final AgentPoolPatchParameters agentPoolUpdateParameters = null;
        return this
            .beginUpdateAsync(resourceGroupName, kubernetesClusterName, agentPoolName, agentPoolUpdateParameters)
            .getSyncPoller();
    }

    /**
     * Patch the Kubernetes cluster agent pool.
     *
     * <p>Patch the properties of the provided Kubernetes cluster agent pool, or update the tags associated with the
     * Kubernetes cluster agent pool. Properties and tag updates can be done independently.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param agentPoolName The name of the Kubernetes cluster agent pool.
     * @param agentPoolUpdateParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of agentPool represents the agent pool of Kubernetes cluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<AgentPoolInner>, AgentPoolInner> beginUpdate(
        String resourceGroupName,
        String kubernetesClusterName,
        String agentPoolName,
        AgentPoolPatchParameters agentPoolUpdateParameters,
        Context context) {
        return this
            .beginUpdateAsync(
                resourceGroupName, kubernetesClusterName, agentPoolName, agentPoolUpdateParameters, context)
            .getSyncPoller();
    }

    /**
     * Patch the Kubernetes cluster agent pool.
     *
     * <p>Patch the properties of the provided Kubernetes cluster agent pool, or update the tags associated with the
     * Kubernetes cluster agent pool. Properties and tag updates can be done independently.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param agentPoolName The name of the Kubernetes cluster agent pool.
     * @param agentPoolUpdateParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return agentPool represents the agent pool of Kubernetes cluster on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<AgentPoolInner> updateAsync(
        String resourceGroupName,
        String kubernetesClusterName,
        String agentPoolName,
        AgentPoolPatchParameters agentPoolUpdateParameters) {
        return beginUpdateAsync(resourceGroupName, kubernetesClusterName, agentPoolName, agentPoolUpdateParameters)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Patch the Kubernetes cluster agent pool.
     *
     * <p>Patch the properties of the provided Kubernetes cluster agent pool, or update the tags associated with the
     * Kubernetes cluster agent pool. Properties and tag updates can be done independently.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param agentPoolName The name of the Kubernetes cluster agent pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return agentPool represents the agent pool of Kubernetes cluster on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<AgentPoolInner> updateAsync(
        String resourceGroupName, String kubernetesClusterName, String agentPoolName) {
        final AgentPoolPatchParameters agentPoolUpdateParameters = null;
        return beginUpdateAsync(resourceGroupName, kubernetesClusterName, agentPoolName, agentPoolUpdateParameters)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Patch the Kubernetes cluster agent pool.
     *
     * <p>Patch the properties of the provided Kubernetes cluster agent pool, or update the tags associated with the
     * Kubernetes cluster agent pool. Properties and tag updates can be done independently.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param agentPoolName The name of the Kubernetes cluster agent pool.
     * @param agentPoolUpdateParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return agentPool represents the agent pool of Kubernetes cluster on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<AgentPoolInner> updateAsync(
        String resourceGroupName,
        String kubernetesClusterName,
        String agentPoolName,
        AgentPoolPatchParameters agentPoolUpdateParameters,
        Context context) {
        return beginUpdateAsync(
                resourceGroupName, kubernetesClusterName, agentPoolName, agentPoolUpdateParameters, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Patch the Kubernetes cluster agent pool.
     *
     * <p>Patch the properties of the provided Kubernetes cluster agent pool, or update the tags associated with the
     * Kubernetes cluster agent pool. Properties and tag updates can be done independently.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param agentPoolName The name of the Kubernetes cluster agent pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return agentPool represents the agent pool of Kubernetes cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AgentPoolInner update(String resourceGroupName, String kubernetesClusterName, String agentPoolName) {
        final AgentPoolPatchParameters agentPoolUpdateParameters = null;
        return updateAsync(resourceGroupName, kubernetesClusterName, agentPoolName, agentPoolUpdateParameters).block();
    }

    /**
     * Patch the Kubernetes cluster agent pool.
     *
     * <p>Patch the properties of the provided Kubernetes cluster agent pool, or update the tags associated with the
     * Kubernetes cluster agent pool. Properties and tag updates can be done independently.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param agentPoolName The name of the Kubernetes cluster agent pool.
     * @param agentPoolUpdateParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return agentPool represents the agent pool of Kubernetes cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AgentPoolInner update(
        String resourceGroupName,
        String kubernetesClusterName,
        String agentPoolName,
        AgentPoolPatchParameters agentPoolUpdateParameters,
        Context context) {
        return updateAsync(resourceGroupName, kubernetesClusterName, agentPoolName, agentPoolUpdateParameters, context)
            .block();
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return agentPoolList represents a list of Kubernetes cluster agent pools along with {@link PagedResponse} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<AgentPoolInner>> listByKubernetesClusterNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByKubernetesClusterNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<AgentPoolInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return agentPoolList represents a list of Kubernetes cluster agent pools along with {@link PagedResponse} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<AgentPoolInner>> listByKubernetesClusterNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByKubernetesClusterNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }
}
