// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * StorageApplianceEnableRemoteVendorManagementParameters represents the body of the request to enable remote vendor
 * management of a storage appliance.
 */
@Fluent
public final class StorageApplianceEnableRemoteVendorManagementParameters
    implements JsonSerializable<StorageApplianceEnableRemoteVendorManagementParameters> {
    /*
     * Field Deprecated. This field is not used and will be rejected if provided. The list of IPv4 subnets (in CIDR
     * format), IPv6 subnets (in CIDR format), or hostnames that the storage appliance needs accessible in order to turn
     * on the remote vendor management.
     */
    private List<String> supportEndpoints;

    /**
     * Creates an instance of StorageApplianceEnableRemoteVendorManagementParameters class.
     */
    public StorageApplianceEnableRemoteVendorManagementParameters() {
    }

    /**
     * Get the supportEndpoints property: Field Deprecated. This field is not used and will be rejected if provided. The
     * list of IPv4 subnets (in CIDR format), IPv6 subnets (in CIDR format), or hostnames that the storage appliance
     * needs accessible in order to turn on the remote vendor management.
     * 
     * @return the supportEndpoints value.
     */
    public List<String> supportEndpoints() {
        return this.supportEndpoints;
    }

    /**
     * Set the supportEndpoints property: Field Deprecated. This field is not used and will be rejected if provided. The
     * list of IPv4 subnets (in CIDR format), IPv6 subnets (in CIDR format), or hostnames that the storage appliance
     * needs accessible in order to turn on the remote vendor management.
     * 
     * @param supportEndpoints the supportEndpoints value to set.
     * @return the StorageApplianceEnableRemoteVendorManagementParameters object itself.
     */
    public StorageApplianceEnableRemoteVendorManagementParameters withSupportEndpoints(List<String> supportEndpoints) {
        this.supportEndpoints = supportEndpoints;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("supportEndpoints", this.supportEndpoints,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StorageApplianceEnableRemoteVendorManagementParameters from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StorageApplianceEnableRemoteVendorManagementParameters if the JsonReader was pointing to
     * an instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the StorageApplianceEnableRemoteVendorManagementParameters.
     */
    public static StorageApplianceEnableRemoteVendorManagementParameters fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            StorageApplianceEnableRemoteVendorManagementParameters deserializedStorageApplianceEnableRemoteVendorManagementParameters
                = new StorageApplianceEnableRemoteVendorManagementParameters();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("supportEndpoints".equals(fieldName)) {
                    List<String> supportEndpoints = reader.readArray(reader1 -> reader1.getString());
                    deserializedStorageApplianceEnableRemoteVendorManagementParameters.supportEndpoints
                        = supportEndpoints;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStorageApplianceEnableRemoteVendorManagementParameters;
        });
    }
}
