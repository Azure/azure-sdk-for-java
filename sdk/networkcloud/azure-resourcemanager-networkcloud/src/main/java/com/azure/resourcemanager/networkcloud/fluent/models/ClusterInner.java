// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.networkcloud.models.ClusterAvailableUpgradeVersion;
import com.azure.resourcemanager.networkcloud.models.ClusterCapacity;
import com.azure.resourcemanager.networkcloud.models.ClusterConnectionStatus;
import com.azure.resourcemanager.networkcloud.models.ClusterDetailedStatus;
import com.azure.resourcemanager.networkcloud.models.ClusterManagerConnectionStatus;
import com.azure.resourcemanager.networkcloud.models.ClusterProvisioningState;
import com.azure.resourcemanager.networkcloud.models.ClusterSecretArchive;
import com.azure.resourcemanager.networkcloud.models.ClusterType;
import com.azure.resourcemanager.networkcloud.models.ClusterUpdateStrategy;
import com.azure.resourcemanager.networkcloud.models.CommandOutputSettings;
import com.azure.resourcemanager.networkcloud.models.ExtendedLocation;
import com.azure.resourcemanager.networkcloud.models.ManagedResourceGroupConfiguration;
import com.azure.resourcemanager.networkcloud.models.ManagedServiceIdentity;
import com.azure.resourcemanager.networkcloud.models.RackDefinition;
import com.azure.resourcemanager.networkcloud.models.RuntimeProtectionConfiguration;
import com.azure.resourcemanager.networkcloud.models.ServicePrincipalInformation;
import com.azure.resourcemanager.networkcloud.models.ValidationThreshold;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Cluster represents the on-premises Network Cloud cluster.
 */
@Fluent
public final class ClusterInner extends Resource {
    /*
     * The extended location of the cluster manager associated with the cluster.
     */
    private ExtendedLocation extendedLocation;

    /*
     * The identity for the resource.
     */
    private ManagedServiceIdentity identity;

    /*
     * The list of the resource properties.
     */
    private ClusterProperties innerProperties = new ClusterProperties();

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of ClusterInner class.
     */
    public ClusterInner() {
    }

    /**
     * Get the extendedLocation property: The extended location of the cluster manager associated with the cluster.
     * 
     * @return the extendedLocation value.
     */
    public ExtendedLocation extendedLocation() {
        return this.extendedLocation;
    }

    /**
     * Set the extendedLocation property: The extended location of the cluster manager associated with the cluster.
     * 
     * @param extendedLocation the extendedLocation value to set.
     * @return the ClusterInner object itself.
     */
    public ClusterInner withExtendedLocation(ExtendedLocation extendedLocation) {
        this.extendedLocation = extendedLocation;
        return this;
    }

    /**
     * Get the identity property: The identity for the resource.
     * 
     * @return the identity value.
     */
    public ManagedServiceIdentity identity() {
        return this.identity;
    }

    /**
     * Set the identity property: The identity for the resource.
     * 
     * @param identity the identity value to set.
     * @return the ClusterInner object itself.
     */
    public ClusterInner withIdentity(ManagedServiceIdentity identity) {
        this.identity = identity;
        return this;
    }

    /**
     * Get the innerProperties property: The list of the resource properties.
     * 
     * @return the innerProperties value.
     */
    private ClusterProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ClusterInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ClusterInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the aggregatorOrSingleRackDefinition property: The rack definition that is intended to reflect only a single
     * rack in a single rack cluster, or an aggregator rack in a multi-rack cluster.
     * 
     * @return the aggregatorOrSingleRackDefinition value.
     */
    public RackDefinition aggregatorOrSingleRackDefinition() {
        return this.innerProperties() == null ? null : this.innerProperties().aggregatorOrSingleRackDefinition();
    }

    /**
     * Set the aggregatorOrSingleRackDefinition property: The rack definition that is intended to reflect only a single
     * rack in a single rack cluster, or an aggregator rack in a multi-rack cluster.
     * 
     * @param aggregatorOrSingleRackDefinition the aggregatorOrSingleRackDefinition value to set.
     * @return the ClusterInner object itself.
     */
    public ClusterInner withAggregatorOrSingleRackDefinition(RackDefinition aggregatorOrSingleRackDefinition) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ClusterProperties();
        }
        this.innerProperties().withAggregatorOrSingleRackDefinition(aggregatorOrSingleRackDefinition);
        return this;
    }

    /**
     * Get the analyticsWorkspaceId property: The resource ID of the Log Analytics Workspace that will be used for
     * storing relevant logs.
     * 
     * @return the analyticsWorkspaceId value.
     */
    public String analyticsWorkspaceId() {
        return this.innerProperties() == null ? null : this.innerProperties().analyticsWorkspaceId();
    }

    /**
     * Set the analyticsWorkspaceId property: The resource ID of the Log Analytics Workspace that will be used for
     * storing relevant logs.
     * 
     * @param analyticsWorkspaceId the analyticsWorkspaceId value to set.
     * @return the ClusterInner object itself.
     */
    public ClusterInner withAnalyticsWorkspaceId(String analyticsWorkspaceId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ClusterProperties();
        }
        this.innerProperties().withAnalyticsWorkspaceId(analyticsWorkspaceId);
        return this;
    }

    /**
     * Get the availableUpgradeVersions property: The list of cluster runtime version upgrades available for this
     * cluster.
     * 
     * @return the availableUpgradeVersions value.
     */
    public List<ClusterAvailableUpgradeVersion> availableUpgradeVersions() {
        return this.innerProperties() == null ? null : this.innerProperties().availableUpgradeVersions();
    }

    /**
     * Get the clusterCapacity property: The capacity supported by this cluster.
     * 
     * @return the clusterCapacity value.
     */
    public ClusterCapacity clusterCapacity() {
        return this.innerProperties() == null ? null : this.innerProperties().clusterCapacity();
    }

    /**
     * Get the clusterConnectionStatus property: The latest heartbeat status between the cluster manager and the
     * cluster.
     * 
     * @return the clusterConnectionStatus value.
     */
    public ClusterConnectionStatus clusterConnectionStatus() {
        return this.innerProperties() == null ? null : this.innerProperties().clusterConnectionStatus();
    }

    /**
     * Get the clusterExtendedLocation property: The extended location (custom location) that represents the cluster's
     * control plane location. This extended location is used to route the requests of child objects of the cluster that
     * are handled by the platform operator.
     * 
     * @return the clusterExtendedLocation value.
     */
    public ExtendedLocation clusterExtendedLocation() {
        return this.innerProperties() == null ? null : this.innerProperties().clusterExtendedLocation();
    }

    /**
     * Get the clusterLocation property: The customer-provided location information to identify where the cluster
     * resides.
     * 
     * @return the clusterLocation value.
     */
    public String clusterLocation() {
        return this.innerProperties() == null ? null : this.innerProperties().clusterLocation();
    }

    /**
     * Set the clusterLocation property: The customer-provided location information to identify where the cluster
     * resides.
     * 
     * @param clusterLocation the clusterLocation value to set.
     * @return the ClusterInner object itself.
     */
    public ClusterInner withClusterLocation(String clusterLocation) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ClusterProperties();
        }
        this.innerProperties().withClusterLocation(clusterLocation);
        return this;
    }

    /**
     * Get the clusterManagerConnectionStatus property: The latest connectivity status between cluster manager and the
     * cluster.
     * 
     * @return the clusterManagerConnectionStatus value.
     */
    public ClusterManagerConnectionStatus clusterManagerConnectionStatus() {
        return this.innerProperties() == null ? null : this.innerProperties().clusterManagerConnectionStatus();
    }

    /**
     * Get the clusterManagerId property: The resource ID of the cluster manager that manages this cluster. This is set
     * by the Cluster Manager when the cluster is created.
     * 
     * @return the clusterManagerId value.
     */
    public String clusterManagerId() {
        return this.innerProperties() == null ? null : this.innerProperties().clusterManagerId();
    }

    /**
     * Get the clusterServicePrincipal property: The service principal to be used by the cluster during Arc Appliance
     * installation.
     * 
     * @return the clusterServicePrincipal value.
     */
    public ServicePrincipalInformation clusterServicePrincipal() {
        return this.innerProperties() == null ? null : this.innerProperties().clusterServicePrincipal();
    }

    /**
     * Set the clusterServicePrincipal property: The service principal to be used by the cluster during Arc Appliance
     * installation.
     * 
     * @param clusterServicePrincipal the clusterServicePrincipal value to set.
     * @return the ClusterInner object itself.
     */
    public ClusterInner withClusterServicePrincipal(ServicePrincipalInformation clusterServicePrincipal) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ClusterProperties();
        }
        this.innerProperties().withClusterServicePrincipal(clusterServicePrincipal);
        return this;
    }

    /**
     * Get the clusterType property: The type of rack configuration for the cluster.
     * 
     * @return the clusterType value.
     */
    public ClusterType clusterType() {
        return this.innerProperties() == null ? null : this.innerProperties().clusterType();
    }

    /**
     * Set the clusterType property: The type of rack configuration for the cluster.
     * 
     * @param clusterType the clusterType value to set.
     * @return the ClusterInner object itself.
     */
    public ClusterInner withClusterType(ClusterType clusterType) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ClusterProperties();
        }
        this.innerProperties().withClusterType(clusterType);
        return this;
    }

    /**
     * Get the clusterVersion property: The current runtime version of the cluster.
     * 
     * @return the clusterVersion value.
     */
    public String clusterVersion() {
        return this.innerProperties() == null ? null : this.innerProperties().clusterVersion();
    }

    /**
     * Set the clusterVersion property: The current runtime version of the cluster.
     * 
     * @param clusterVersion the clusterVersion value to set.
     * @return the ClusterInner object itself.
     */
    public ClusterInner withClusterVersion(String clusterVersion) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ClusterProperties();
        }
        this.innerProperties().withClusterVersion(clusterVersion);
        return this;
    }

    /**
     * Get the commandOutputSettings property: The settings for commands run in this cluster, such as bare metal machine
     * run read only commands and data extracts.
     * 
     * @return the commandOutputSettings value.
     */
    public CommandOutputSettings commandOutputSettings() {
        return this.innerProperties() == null ? null : this.innerProperties().commandOutputSettings();
    }

    /**
     * Set the commandOutputSettings property: The settings for commands run in this cluster, such as bare metal machine
     * run read only commands and data extracts.
     * 
     * @param commandOutputSettings the commandOutputSettings value to set.
     * @return the ClusterInner object itself.
     */
    public ClusterInner withCommandOutputSettings(CommandOutputSettings commandOutputSettings) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ClusterProperties();
        }
        this.innerProperties().withCommandOutputSettings(commandOutputSettings);
        return this;
    }

    /**
     * Get the computeDeploymentThreshold property: The validation threshold indicating the allowable failures of
     * compute machines during environment validation and deployment.
     * 
     * @return the computeDeploymentThreshold value.
     */
    public ValidationThreshold computeDeploymentThreshold() {
        return this.innerProperties() == null ? null : this.innerProperties().computeDeploymentThreshold();
    }

    /**
     * Set the computeDeploymentThreshold property: The validation threshold indicating the allowable failures of
     * compute machines during environment validation and deployment.
     * 
     * @param computeDeploymentThreshold the computeDeploymentThreshold value to set.
     * @return the ClusterInner object itself.
     */
    public ClusterInner withComputeDeploymentThreshold(ValidationThreshold computeDeploymentThreshold) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ClusterProperties();
        }
        this.innerProperties().withComputeDeploymentThreshold(computeDeploymentThreshold);
        return this;
    }

    /**
     * Get the computeRackDefinitions property: The list of rack definitions for the compute racks in a multi-rack
     * cluster, or an empty list in a single-rack cluster.
     * 
     * @return the computeRackDefinitions value.
     */
    public List<RackDefinition> computeRackDefinitions() {
        return this.innerProperties() == null ? null : this.innerProperties().computeRackDefinitions();
    }

    /**
     * Set the computeRackDefinitions property: The list of rack definitions for the compute racks in a multi-rack
     * cluster, or an empty list in a single-rack cluster.
     * 
     * @param computeRackDefinitions the computeRackDefinitions value to set.
     * @return the ClusterInner object itself.
     */
    public ClusterInner withComputeRackDefinitions(List<RackDefinition> computeRackDefinitions) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ClusterProperties();
        }
        this.innerProperties().withComputeRackDefinitions(computeRackDefinitions);
        return this;
    }

    /**
     * Get the detailedStatus property: The current detailed status of the cluster.
     * 
     * @return the detailedStatus value.
     */
    public ClusterDetailedStatus detailedStatus() {
        return this.innerProperties() == null ? null : this.innerProperties().detailedStatus();
    }

    /**
     * Get the detailedStatusMessage property: The descriptive message about the detailed status.
     * 
     * @return the detailedStatusMessage value.
     */
    public String detailedStatusMessage() {
        return this.innerProperties() == null ? null : this.innerProperties().detailedStatusMessage();
    }

    /**
     * Get the hybridAksExtendedLocation property: Field Deprecated. This field will not be populated in an upcoming
     * version. The extended location (custom location) that represents the Hybrid AKS control plane location. This
     * extended location is used when creating provisioned clusters (Hybrid AKS clusters).
     * 
     * @return the hybridAksExtendedLocation value.
     */
    public ExtendedLocation hybridAksExtendedLocation() {
        return this.innerProperties() == null ? null : this.innerProperties().hybridAksExtendedLocation();
    }

    /**
     * Get the managedResourceGroupConfiguration property: The configuration of the managed resource group associated
     * with the resource.
     * 
     * @return the managedResourceGroupConfiguration value.
     */
    public ManagedResourceGroupConfiguration managedResourceGroupConfiguration() {
        return this.innerProperties() == null ? null : this.innerProperties().managedResourceGroupConfiguration();
    }

    /**
     * Set the managedResourceGroupConfiguration property: The configuration of the managed resource group associated
     * with the resource.
     * 
     * @param managedResourceGroupConfiguration the managedResourceGroupConfiguration value to set.
     * @return the ClusterInner object itself.
     */
    public ClusterInner
        withManagedResourceGroupConfiguration(ManagedResourceGroupConfiguration managedResourceGroupConfiguration) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ClusterProperties();
        }
        this.innerProperties().withManagedResourceGroupConfiguration(managedResourceGroupConfiguration);
        return this;
    }

    /**
     * Get the manualActionCount property: The count of Manual Action Taken (MAT) events that have not been validated.
     * 
     * @return the manualActionCount value.
     */
    public Long manualActionCount() {
        return this.innerProperties() == null ? null : this.innerProperties().manualActionCount();
    }

    /**
     * Get the networkFabricId property: The resource ID of the Network Fabric associated with the cluster.
     * 
     * @return the networkFabricId value.
     */
    public String networkFabricId() {
        return this.innerProperties() == null ? null : this.innerProperties().networkFabricId();
    }

    /**
     * Set the networkFabricId property: The resource ID of the Network Fabric associated with the cluster.
     * 
     * @param networkFabricId the networkFabricId value to set.
     * @return the ClusterInner object itself.
     */
    public ClusterInner withNetworkFabricId(String networkFabricId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ClusterProperties();
        }
        this.innerProperties().withNetworkFabricId(networkFabricId);
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state of the cluster.
     * 
     * @return the provisioningState value.
     */
    public ClusterProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the runtimeProtectionConfiguration property: The settings for cluster runtime protection.
     * 
     * @return the runtimeProtectionConfiguration value.
     */
    public RuntimeProtectionConfiguration runtimeProtectionConfiguration() {
        return this.innerProperties() == null ? null : this.innerProperties().runtimeProtectionConfiguration();
    }

    /**
     * Set the runtimeProtectionConfiguration property: The settings for cluster runtime protection.
     * 
     * @param runtimeProtectionConfiguration the runtimeProtectionConfiguration value to set.
     * @return the ClusterInner object itself.
     */
    public ClusterInner
        withRuntimeProtectionConfiguration(RuntimeProtectionConfiguration runtimeProtectionConfiguration) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ClusterProperties();
        }
        this.innerProperties().withRuntimeProtectionConfiguration(runtimeProtectionConfiguration);
        return this;
    }

    /**
     * Get the secretArchive property: The configuration for use of a key vault to store secrets for later retrieval by
     * the operator.
     * 
     * @return the secretArchive value.
     */
    public ClusterSecretArchive secretArchive() {
        return this.innerProperties() == null ? null : this.innerProperties().secretArchive();
    }

    /**
     * Set the secretArchive property: The configuration for use of a key vault to store secrets for later retrieval by
     * the operator.
     * 
     * @param secretArchive the secretArchive value to set.
     * @return the ClusterInner object itself.
     */
    public ClusterInner withSecretArchive(ClusterSecretArchive secretArchive) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ClusterProperties();
        }
        this.innerProperties().withSecretArchive(secretArchive);
        return this;
    }

    /**
     * Get the supportExpiryDate property: The support end date of the runtime version of the cluster.
     * 
     * @return the supportExpiryDate value.
     */
    public String supportExpiryDate() {
        return this.innerProperties() == null ? null : this.innerProperties().supportExpiryDate();
    }

    /**
     * Get the updateStrategy property: The strategy for updating the cluster.
     * 
     * @return the updateStrategy value.
     */
    public ClusterUpdateStrategy updateStrategy() {
        return this.innerProperties() == null ? null : this.innerProperties().updateStrategy();
    }

    /**
     * Set the updateStrategy property: The strategy for updating the cluster.
     * 
     * @param updateStrategy the updateStrategy value to set.
     * @return the ClusterInner object itself.
     */
    public ClusterInner withUpdateStrategy(ClusterUpdateStrategy updateStrategy) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ClusterProperties();
        }
        this.innerProperties().withUpdateStrategy(updateStrategy);
        return this;
    }

    /**
     * Get the workloadResourceIds property: The list of workload resource IDs that are hosted within this cluster.
     * 
     * @return the workloadResourceIds value.
     */
    public List<String> workloadResourceIds() {
        return this.innerProperties() == null ? null : this.innerProperties().workloadResourceIds();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (extendedLocation() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property extendedLocation in model ClusterInner"));
        } else {
            extendedLocation().validate();
        }
        if (identity() != null) {
            identity().validate();
        }
        if (innerProperties() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property innerProperties in model ClusterInner"));
        } else {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ClusterInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("location", location());
        jsonWriter.writeMapField("tags", tags(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("extendedLocation", this.extendedLocation);
        jsonWriter.writeJsonField("properties", this.innerProperties);
        jsonWriter.writeJsonField("identity", this.identity);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ClusterInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ClusterInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ClusterInner.
     */
    public static ClusterInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ClusterInner deserializedClusterInner = new ClusterInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedClusterInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedClusterInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedClusterInner.type = reader.getString();
                } else if ("location".equals(fieldName)) {
                    deserializedClusterInner.withLocation(reader.getString());
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedClusterInner.withTags(tags);
                } else if ("extendedLocation".equals(fieldName)) {
                    deserializedClusterInner.extendedLocation = ExtendedLocation.fromJson(reader);
                } else if ("properties".equals(fieldName)) {
                    deserializedClusterInner.innerProperties = ClusterProperties.fromJson(reader);
                } else if ("identity".equals(fieldName)) {
                    deserializedClusterInner.identity = ManagedServiceIdentity.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedClusterInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedClusterInner;
        });
    }
}
