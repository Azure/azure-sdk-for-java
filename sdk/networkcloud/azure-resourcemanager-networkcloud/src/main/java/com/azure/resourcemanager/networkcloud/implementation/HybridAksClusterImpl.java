// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.networkcloud.fluent.models.HybridAksClusterInner;
import com.azure.resourcemanager.networkcloud.models.ExtendedLocation;
import com.azure.resourcemanager.networkcloud.models.HybridAksCluster;
import com.azure.resourcemanager.networkcloud.models.HybridAksClusterDetailedStatus;
import com.azure.resourcemanager.networkcloud.models.HybridAksClusterPatchParameters;
import com.azure.resourcemanager.networkcloud.models.HybridAksClusterProvisioningState;
import com.azure.resourcemanager.networkcloud.models.HybridAksClusterRestartNodeParameters;
import com.azure.resourcemanager.networkcloud.models.NodeConfiguration;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public final class HybridAksClusterImpl
    implements HybridAksCluster, HybridAksCluster.Definition, HybridAksCluster.Update {
    private HybridAksClusterInner innerObject;

    private final com.azure.resourcemanager.networkcloud.NetworkCloudManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public ExtendedLocation extendedLocation() {
        return this.innerModel().extendedLocation();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public List<String> associatedNetworkIds() {
        List<String> inner = this.innerModel().associatedNetworkIds();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public String cloudServicesNetworkId() {
        return this.innerModel().cloudServicesNetworkId();
    }

    public String clusterId() {
        return this.innerModel().clusterId();
    }

    public long controlPlaneCount() {
        return this.innerModel().controlPlaneCount();
    }

    public List<NodeConfiguration> controlPlaneNodes() {
        List<NodeConfiguration> inner = this.innerModel().controlPlaneNodes();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public String defaultCniNetworkId() {
        return this.innerModel().defaultCniNetworkId();
    }

    public HybridAksClusterDetailedStatus detailedStatus() {
        return this.innerModel().detailedStatus();
    }

    public String detailedStatusMessage() {
        return this.innerModel().detailedStatusMessage();
    }

    public String hybridAksProvisionedClusterId() {
        return this.innerModel().hybridAksProvisionedClusterId();
    }

    public HybridAksClusterProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public List<String> volumes() {
        List<String> inner = this.innerModel().volumes();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public long workerCount() {
        return this.innerModel().workerCount();
    }

    public List<NodeConfiguration> workerNodes() {
        List<NodeConfiguration> inner = this.innerModel().workerNodes();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public HybridAksClusterInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.networkcloud.NetworkCloudManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String hybridAksClusterName;

    private HybridAksClusterPatchParameters updateHybridAksClusterUpdateParameters;

    public HybridAksClusterImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public HybridAksCluster create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getHybridAksClusters()
                .createOrUpdate(resourceGroupName, hybridAksClusterName, this.innerModel(), Context.NONE);
        return this;
    }

    public HybridAksCluster create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getHybridAksClusters()
                .createOrUpdate(resourceGroupName, hybridAksClusterName, this.innerModel(), context);
        return this;
    }

    HybridAksClusterImpl(String name, com.azure.resourcemanager.networkcloud.NetworkCloudManager serviceManager) {
        this.innerObject = new HybridAksClusterInner();
        this.serviceManager = serviceManager;
        this.hybridAksClusterName = name;
    }

    public HybridAksClusterImpl update() {
        this.updateHybridAksClusterUpdateParameters = new HybridAksClusterPatchParameters();
        return this;
    }

    public HybridAksCluster apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getHybridAksClusters()
                .updateWithResponse(
                    resourceGroupName, hybridAksClusterName, updateHybridAksClusterUpdateParameters, Context.NONE)
                .getValue();
        return this;
    }

    public HybridAksCluster apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getHybridAksClusters()
                .updateWithResponse(
                    resourceGroupName, hybridAksClusterName, updateHybridAksClusterUpdateParameters, context)
                .getValue();
        return this;
    }

    HybridAksClusterImpl(
        HybridAksClusterInner innerObject, com.azure.resourcemanager.networkcloud.NetworkCloudManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.hybridAksClusterName = Utils.getValueFromIdByName(innerObject.id(), "hybridAksClusters");
    }

    public HybridAksCluster refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getHybridAksClusters()
                .getByResourceGroupWithResponse(resourceGroupName, hybridAksClusterName, Context.NONE)
                .getValue();
        return this;
    }

    public HybridAksCluster refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getHybridAksClusters()
                .getByResourceGroupWithResponse(resourceGroupName, hybridAksClusterName, context)
                .getValue();
        return this;
    }

    public void restartNode(HybridAksClusterRestartNodeParameters hybridAksClusterRestartNodeParameters) {
        serviceManager
            .hybridAksClusters()
            .restartNode(resourceGroupName, hybridAksClusterName, hybridAksClusterRestartNodeParameters);
    }

    public void restartNode(
        HybridAksClusterRestartNodeParameters hybridAksClusterRestartNodeParameters, Context context) {
        serviceManager
            .hybridAksClusters()
            .restartNode(resourceGroupName, hybridAksClusterName, hybridAksClusterRestartNodeParameters, context);
    }

    public HybridAksClusterImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public HybridAksClusterImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public HybridAksClusterImpl withExtendedLocation(ExtendedLocation extendedLocation) {
        this.innerModel().withExtendedLocation(extendedLocation);
        return this;
    }

    public HybridAksClusterImpl withAssociatedNetworkIds(List<String> associatedNetworkIds) {
        this.innerModel().withAssociatedNetworkIds(associatedNetworkIds);
        return this;
    }

    public HybridAksClusterImpl withControlPlaneCount(long controlPlaneCount) {
        this.innerModel().withControlPlaneCount(controlPlaneCount);
        return this;
    }

    public HybridAksClusterImpl withHybridAksProvisionedClusterId(String hybridAksProvisionedClusterId) {
        this.innerModel().withHybridAksProvisionedClusterId(hybridAksProvisionedClusterId);
        return this;
    }

    public HybridAksClusterImpl withWorkerCount(long workerCount) {
        this.innerModel().withWorkerCount(workerCount);
        return this;
    }

    public HybridAksClusterImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateHybridAksClusterUpdateParameters.withTags(tags);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
