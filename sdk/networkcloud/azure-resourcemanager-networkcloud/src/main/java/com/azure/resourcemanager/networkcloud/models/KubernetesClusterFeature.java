// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.models;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.networkcloud.fluent.models.KubernetesClusterFeatureInner;
import java.util.List;
import java.util.Map;

/**
 * An immutable client-side representation of KubernetesClusterFeature.
 */
public interface KubernetesClusterFeature {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     * 
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     * 
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     * 
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     * 
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the availabilityLifecycle property: The lifecycle indicator of the feature.
     * 
     * @return the availabilityLifecycle value.
     */
    KubernetesClusterFeatureAvailabilityLifecycle availabilityLifecycle();

    /**
     * Gets the detailedStatus property: The detailed status of the feature.
     * 
     * @return the detailedStatus value.
     */
    KubernetesClusterFeatureDetailedStatus detailedStatus();

    /**
     * Gets the detailedStatusMessage property: The descriptive message for the detailed status of the feature.
     * 
     * @return the detailedStatusMessage value.
     */
    String detailedStatusMessage();

    /**
     * Gets the options property: The configured options for the feature.
     * 
     * @return the options value.
     */
    List<StringKeyValuePair> options();

    /**
     * Gets the provisioningState property: The provisioning state of the Kubernetes cluster feature.
     * 
     * @return the provisioningState value.
     */
    KubernetesClusterFeatureProvisioningState provisioningState();

    /**
     * Gets the required property: The indicator of if the feature is required or optional. Optional features may be
     * deleted by the user, while required features are managed with the kubernetes cluster lifecycle.
     * 
     * @return the required value.
     */
    KubernetesClusterFeatureRequired required();

    /**
     * Gets the version property: The version of the feature.
     * 
     * @return the version value.
     */
    String version();

    /**
     * Gets the region of the resource.
     * 
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     * 
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the name of the resource group.
     * 
     * @return the name of the resource group.
     */
    String resourceGroupName();

    /**
     * Gets the inner com.azure.resourcemanager.networkcloud.fluent.models.KubernetesClusterFeatureInner object.
     * 
     * @return the inner object.
     */
    KubernetesClusterFeatureInner innerModel();

    /**
     * The entirety of the KubernetesClusterFeature definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithLocation,
        DefinitionStages.WithParentResource, DefinitionStages.WithCreate {
    }

    /**
     * The KubernetesClusterFeature definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of the KubernetesClusterFeature definition.
         */
        interface Blank extends WithLocation {
        }

        /**
         * The stage of the KubernetesClusterFeature definition allowing to specify location.
         */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             * 
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithParentResource withRegion(Region location);

            /**
             * Specifies the region for the resource.
             * 
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithParentResource withRegion(String location);
        }

        /**
         * The stage of the KubernetesClusterFeature definition allowing to specify parent resource.
         */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, kubernetesClusterName.
             * 
             * @param resourceGroupName The name of the resource group. The name is case insensitive.
             * @param kubernetesClusterName The name of the Kubernetes cluster.
             * @return the next definition stage.
             */
            WithCreate withExistingKubernetesCluster(String resourceGroupName, String kubernetesClusterName);
        }

        /**
         * The stage of the KubernetesClusterFeature definition which contains all the minimum required properties for
         * the resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate extends DefinitionStages.WithTags, DefinitionStages.WithOptions {
            /**
             * Executes the create request.
             * 
             * @return the created resource.
             */
            KubernetesClusterFeature create();

            /**
             * Executes the create request.
             * 
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            KubernetesClusterFeature create(Context context);
        }

        /**
         * The stage of the KubernetesClusterFeature definition allowing to specify tags.
         */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             * 
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }

        /**
         * The stage of the KubernetesClusterFeature definition allowing to specify options.
         */
        interface WithOptions {
            /**
             * Specifies the options property: The configured options for the feature..
             * 
             * @param options The configured options for the feature.
             * @return the next definition stage.
             */
            WithCreate withOptions(List<StringKeyValuePair> options);
        }
    }

    /**
     * Begins update for the KubernetesClusterFeature resource.
     * 
     * @return the stage of resource update.
     */
    KubernetesClusterFeature.Update update();

    /**
     * The template for KubernetesClusterFeature update.
     */
    interface Update extends UpdateStages.WithTags, UpdateStages.WithOptions {
        /**
         * Executes the update request.
         * 
         * @return the updated resource.
         */
        KubernetesClusterFeature apply();

        /**
         * Executes the update request.
         * 
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        KubernetesClusterFeature apply(Context context);
    }

    /**
     * The KubernetesClusterFeature update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the KubernetesClusterFeature update allowing to specify tags.
         */
        interface WithTags {
            /**
             * Specifies the tags property: The Azure resource tags that will replace the existing ones..
             * 
             * @param tags The Azure resource tags that will replace the existing ones.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }

        /**
         * The stage of the KubernetesClusterFeature update allowing to specify options.
         */
        interface WithOptions {
            /**
             * Specifies the options property: The configured options for the feature..
             * 
             * @param options The configured options for the feature.
             * @return the next definition stage.
             */
            Update withOptions(List<StringKeyValuePair> options);
        }
    }

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @return the refreshed resource.
     */
    KubernetesClusterFeature refresh();

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    KubernetesClusterFeature refresh(Context context);
}
