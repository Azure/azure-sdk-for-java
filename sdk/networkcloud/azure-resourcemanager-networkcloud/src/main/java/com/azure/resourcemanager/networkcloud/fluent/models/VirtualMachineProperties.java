// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.networkcloud.models.ImageRepositoryCredentials;
import com.azure.resourcemanager.networkcloud.models.NetworkAttachment;
import com.azure.resourcemanager.networkcloud.models.SshPublicKey;
import com.azure.resourcemanager.networkcloud.models.StorageProfile;
import com.azure.resourcemanager.networkcloud.models.VirtualMachineBootMethod;
import com.azure.resourcemanager.networkcloud.models.VirtualMachineDetailedStatus;
import com.azure.resourcemanager.networkcloud.models.VirtualMachineDeviceModelType;
import com.azure.resourcemanager.networkcloud.models.VirtualMachineIsolateEmulatorThread;
import com.azure.resourcemanager.networkcloud.models.VirtualMachinePlacementHint;
import com.azure.resourcemanager.networkcloud.models.VirtualMachinePowerState;
import com.azure.resourcemanager.networkcloud.models.VirtualMachineProvisioningState;
import com.azure.resourcemanager.networkcloud.models.VirtualMachineVirtioInterfaceType;
import java.io.IOException;
import java.util.List;

/**
 * VirtualMachineProperties represents the properties of the virtual machine.
 */
@Fluent
public final class VirtualMachineProperties implements JsonSerializable<VirtualMachineProperties> {
    /*
     * The name of the administrator to which the ssh public keys will be added into the authorized keys.
     */
    private String adminUsername;

    /*
     * The cluster availability zone containing this virtual machine.
     */
    private String availabilityZone;

    /*
     * The resource ID of the bare metal machine that hosts the virtual machine.
     */
    private String bareMetalMachineId;

    /*
     * Selects the boot method for the virtual machine.
     */
    private VirtualMachineBootMethod bootMethod;

    /*
     * The cloud service network that provides platform-level services for the virtual machine.
     */
    private NetworkAttachment cloudServicesNetworkAttachment;

    /*
     * The resource ID of the cluster the virtual machine is created for.
     */
    private String clusterId;

    /*
     * The number of CPU cores in the virtual machine.
     */
    private long cpuCores;

    /*
     * The more detailed status of the virtual machine.
     */
    private VirtualMachineDetailedStatus detailedStatus;

    /*
     * The descriptive message about the current detailed status.
     */
    private String detailedStatusMessage;

    /*
     * Field Deprecated, the value will be ignored if provided. The indicator of whether one of the specified CPU cores
     * is isolated to run the emulator thread for this virtual machine.
     */
    private VirtualMachineIsolateEmulatorThread isolateEmulatorThread;

    /*
     * The memory size of the virtual machine. Allocations are measured in gibibytes.
     */
    private long memorySizeGB;

    /*
     * The list of network attachments to the virtual machine.
     */
    private List<NetworkAttachment> networkAttachments;

    /*
     * The Base64 encoded cloud-init network data.
     */
    private String networkData;

    /*
     * The scheduling hints for the virtual machine.
     */
    private List<VirtualMachinePlacementHint> placementHints;

    /*
     * The power state of the virtual machine.
     */
    private VirtualMachinePowerState powerState;

    /*
     * The provisioning state of the virtual machine.
     */
    private VirtualMachineProvisioningState provisioningState;

    /*
     * The list of ssh public keys. Each key will be added to the virtual machine using the cloud-init
     * ssh_authorized_keys mechanism for the adminUsername.
     */
    private List<SshPublicKey> sshPublicKeys;

    /*
     * The storage profile that specifies size and other parameters about the disks related to the virtual machine.
     */
    private StorageProfile storageProfile;

    /*
     * The Base64 encoded cloud-init user data.
     */
    private String userData;

    /*
     * Field Deprecated, use virtualizationModel instead. The type of the virtio interface.
     */
    private VirtualMachineVirtioInterfaceType virtioInterface;

    /*
     * The type of the device model to use.
     */
    private VirtualMachineDeviceModelType vmDeviceModel;

    /*
     * The virtual machine image that is currently provisioned to the OS disk, using the full url and tag notation used
     * to pull the image.
     */
    private String vmImage;

    /*
     * The credentials used to login to the image repository that has access to the specified image.
     */
    private ImageRepositoryCredentials vmImageRepositoryCredentials;

    /*
     * The resource IDs of volumes that are attached to the virtual machine.
     */
    private List<String> volumes;

    /**
     * Creates an instance of VirtualMachineProperties class.
     */
    public VirtualMachineProperties() {
    }

    /**
     * Get the adminUsername property: The name of the administrator to which the ssh public keys will be added into the
     * authorized keys.
     * 
     * @return the adminUsername value.
     */
    public String adminUsername() {
        return this.adminUsername;
    }

    /**
     * Set the adminUsername property: The name of the administrator to which the ssh public keys will be added into the
     * authorized keys.
     * 
     * @param adminUsername the adminUsername value to set.
     * @return the VirtualMachineProperties object itself.
     */
    public VirtualMachineProperties withAdminUsername(String adminUsername) {
        this.adminUsername = adminUsername;
        return this;
    }

    /**
     * Get the availabilityZone property: The cluster availability zone containing this virtual machine.
     * 
     * @return the availabilityZone value.
     */
    public String availabilityZone() {
        return this.availabilityZone;
    }

    /**
     * Get the bareMetalMachineId property: The resource ID of the bare metal machine that hosts the virtual machine.
     * 
     * @return the bareMetalMachineId value.
     */
    public String bareMetalMachineId() {
        return this.bareMetalMachineId;
    }

    /**
     * Get the bootMethod property: Selects the boot method for the virtual machine.
     * 
     * @return the bootMethod value.
     */
    public VirtualMachineBootMethod bootMethod() {
        return this.bootMethod;
    }

    /**
     * Set the bootMethod property: Selects the boot method for the virtual machine.
     * 
     * @param bootMethod the bootMethod value to set.
     * @return the VirtualMachineProperties object itself.
     */
    public VirtualMachineProperties withBootMethod(VirtualMachineBootMethod bootMethod) {
        this.bootMethod = bootMethod;
        return this;
    }

    /**
     * Get the cloudServicesNetworkAttachment property: The cloud service network that provides platform-level services
     * for the virtual machine.
     * 
     * @return the cloudServicesNetworkAttachment value.
     */
    public NetworkAttachment cloudServicesNetworkAttachment() {
        return this.cloudServicesNetworkAttachment;
    }

    /**
     * Set the cloudServicesNetworkAttachment property: The cloud service network that provides platform-level services
     * for the virtual machine.
     * 
     * @param cloudServicesNetworkAttachment the cloudServicesNetworkAttachment value to set.
     * @return the VirtualMachineProperties object itself.
     */
    public VirtualMachineProperties
        withCloudServicesNetworkAttachment(NetworkAttachment cloudServicesNetworkAttachment) {
        this.cloudServicesNetworkAttachment = cloudServicesNetworkAttachment;
        return this;
    }

    /**
     * Get the clusterId property: The resource ID of the cluster the virtual machine is created for.
     * 
     * @return the clusterId value.
     */
    public String clusterId() {
        return this.clusterId;
    }

    /**
     * Get the cpuCores property: The number of CPU cores in the virtual machine.
     * 
     * @return the cpuCores value.
     */
    public long cpuCores() {
        return this.cpuCores;
    }

    /**
     * Set the cpuCores property: The number of CPU cores in the virtual machine.
     * 
     * @param cpuCores the cpuCores value to set.
     * @return the VirtualMachineProperties object itself.
     */
    public VirtualMachineProperties withCpuCores(long cpuCores) {
        this.cpuCores = cpuCores;
        return this;
    }

    /**
     * Get the detailedStatus property: The more detailed status of the virtual machine.
     * 
     * @return the detailedStatus value.
     */
    public VirtualMachineDetailedStatus detailedStatus() {
        return this.detailedStatus;
    }

    /**
     * Get the detailedStatusMessage property: The descriptive message about the current detailed status.
     * 
     * @return the detailedStatusMessage value.
     */
    public String detailedStatusMessage() {
        return this.detailedStatusMessage;
    }

    /**
     * Get the isolateEmulatorThread property: Field Deprecated, the value will be ignored if provided. The indicator of
     * whether one of the specified CPU cores is isolated to run the emulator thread for this virtual machine.
     * 
     * @return the isolateEmulatorThread value.
     */
    public VirtualMachineIsolateEmulatorThread isolateEmulatorThread() {
        return this.isolateEmulatorThread;
    }

    /**
     * Set the isolateEmulatorThread property: Field Deprecated, the value will be ignored if provided. The indicator of
     * whether one of the specified CPU cores is isolated to run the emulator thread for this virtual machine.
     * 
     * @param isolateEmulatorThread the isolateEmulatorThread value to set.
     * @return the VirtualMachineProperties object itself.
     */
    public VirtualMachineProperties
        withIsolateEmulatorThread(VirtualMachineIsolateEmulatorThread isolateEmulatorThread) {
        this.isolateEmulatorThread = isolateEmulatorThread;
        return this;
    }

    /**
     * Get the memorySizeGB property: The memory size of the virtual machine. Allocations are measured in gibibytes.
     * 
     * @return the memorySizeGB value.
     */
    public long memorySizeGB() {
        return this.memorySizeGB;
    }

    /**
     * Set the memorySizeGB property: The memory size of the virtual machine. Allocations are measured in gibibytes.
     * 
     * @param memorySizeGB the memorySizeGB value to set.
     * @return the VirtualMachineProperties object itself.
     */
    public VirtualMachineProperties withMemorySizeGB(long memorySizeGB) {
        this.memorySizeGB = memorySizeGB;
        return this;
    }

    /**
     * Get the networkAttachments property: The list of network attachments to the virtual machine.
     * 
     * @return the networkAttachments value.
     */
    public List<NetworkAttachment> networkAttachments() {
        return this.networkAttachments;
    }

    /**
     * Set the networkAttachments property: The list of network attachments to the virtual machine.
     * 
     * @param networkAttachments the networkAttachments value to set.
     * @return the VirtualMachineProperties object itself.
     */
    public VirtualMachineProperties withNetworkAttachments(List<NetworkAttachment> networkAttachments) {
        this.networkAttachments = networkAttachments;
        return this;
    }

    /**
     * Get the networkData property: The Base64 encoded cloud-init network data.
     * 
     * @return the networkData value.
     */
    public String networkData() {
        return this.networkData;
    }

    /**
     * Set the networkData property: The Base64 encoded cloud-init network data.
     * 
     * @param networkData the networkData value to set.
     * @return the VirtualMachineProperties object itself.
     */
    public VirtualMachineProperties withNetworkData(String networkData) {
        this.networkData = networkData;
        return this;
    }

    /**
     * Get the placementHints property: The scheduling hints for the virtual machine.
     * 
     * @return the placementHints value.
     */
    public List<VirtualMachinePlacementHint> placementHints() {
        return this.placementHints;
    }

    /**
     * Set the placementHints property: The scheduling hints for the virtual machine.
     * 
     * @param placementHints the placementHints value to set.
     * @return the VirtualMachineProperties object itself.
     */
    public VirtualMachineProperties withPlacementHints(List<VirtualMachinePlacementHint> placementHints) {
        this.placementHints = placementHints;
        return this;
    }

    /**
     * Get the powerState property: The power state of the virtual machine.
     * 
     * @return the powerState value.
     */
    public VirtualMachinePowerState powerState() {
        return this.powerState;
    }

    /**
     * Get the provisioningState property: The provisioning state of the virtual machine.
     * 
     * @return the provisioningState value.
     */
    public VirtualMachineProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the sshPublicKeys property: The list of ssh public keys. Each key will be added to the virtual machine using
     * the cloud-init ssh_authorized_keys mechanism for the adminUsername.
     * 
     * @return the sshPublicKeys value.
     */
    public List<SshPublicKey> sshPublicKeys() {
        return this.sshPublicKeys;
    }

    /**
     * Set the sshPublicKeys property: The list of ssh public keys. Each key will be added to the virtual machine using
     * the cloud-init ssh_authorized_keys mechanism for the adminUsername.
     * 
     * @param sshPublicKeys the sshPublicKeys value to set.
     * @return the VirtualMachineProperties object itself.
     */
    public VirtualMachineProperties withSshPublicKeys(List<SshPublicKey> sshPublicKeys) {
        this.sshPublicKeys = sshPublicKeys;
        return this;
    }

    /**
     * Get the storageProfile property: The storage profile that specifies size and other parameters about the disks
     * related to the virtual machine.
     * 
     * @return the storageProfile value.
     */
    public StorageProfile storageProfile() {
        return this.storageProfile;
    }

    /**
     * Set the storageProfile property: The storage profile that specifies size and other parameters about the disks
     * related to the virtual machine.
     * 
     * @param storageProfile the storageProfile value to set.
     * @return the VirtualMachineProperties object itself.
     */
    public VirtualMachineProperties withStorageProfile(StorageProfile storageProfile) {
        this.storageProfile = storageProfile;
        return this;
    }

    /**
     * Get the userData property: The Base64 encoded cloud-init user data.
     * 
     * @return the userData value.
     */
    public String userData() {
        return this.userData;
    }

    /**
     * Set the userData property: The Base64 encoded cloud-init user data.
     * 
     * @param userData the userData value to set.
     * @return the VirtualMachineProperties object itself.
     */
    public VirtualMachineProperties withUserData(String userData) {
        this.userData = userData;
        return this;
    }

    /**
     * Get the virtioInterface property: Field Deprecated, use virtualizationModel instead. The type of the virtio
     * interface.
     * 
     * @return the virtioInterface value.
     */
    public VirtualMachineVirtioInterfaceType virtioInterface() {
        return this.virtioInterface;
    }

    /**
     * Set the virtioInterface property: Field Deprecated, use virtualizationModel instead. The type of the virtio
     * interface.
     * 
     * @param virtioInterface the virtioInterface value to set.
     * @return the VirtualMachineProperties object itself.
     */
    public VirtualMachineProperties withVirtioInterface(VirtualMachineVirtioInterfaceType virtioInterface) {
        this.virtioInterface = virtioInterface;
        return this;
    }

    /**
     * Get the vmDeviceModel property: The type of the device model to use.
     * 
     * @return the vmDeviceModel value.
     */
    public VirtualMachineDeviceModelType vmDeviceModel() {
        return this.vmDeviceModel;
    }

    /**
     * Set the vmDeviceModel property: The type of the device model to use.
     * 
     * @param vmDeviceModel the vmDeviceModel value to set.
     * @return the VirtualMachineProperties object itself.
     */
    public VirtualMachineProperties withVmDeviceModel(VirtualMachineDeviceModelType vmDeviceModel) {
        this.vmDeviceModel = vmDeviceModel;
        return this;
    }

    /**
     * Get the vmImage property: The virtual machine image that is currently provisioned to the OS disk, using the full
     * url and tag notation used to pull the image.
     * 
     * @return the vmImage value.
     */
    public String vmImage() {
        return this.vmImage;
    }

    /**
     * Set the vmImage property: The virtual machine image that is currently provisioned to the OS disk, using the full
     * url and tag notation used to pull the image.
     * 
     * @param vmImage the vmImage value to set.
     * @return the VirtualMachineProperties object itself.
     */
    public VirtualMachineProperties withVmImage(String vmImage) {
        this.vmImage = vmImage;
        return this;
    }

    /**
     * Get the vmImageRepositoryCredentials property: The credentials used to login to the image repository that has
     * access to the specified image.
     * 
     * @return the vmImageRepositoryCredentials value.
     */
    public ImageRepositoryCredentials vmImageRepositoryCredentials() {
        return this.vmImageRepositoryCredentials;
    }

    /**
     * Set the vmImageRepositoryCredentials property: The credentials used to login to the image repository that has
     * access to the specified image.
     * 
     * @param vmImageRepositoryCredentials the vmImageRepositoryCredentials value to set.
     * @return the VirtualMachineProperties object itself.
     */
    public VirtualMachineProperties
        withVmImageRepositoryCredentials(ImageRepositoryCredentials vmImageRepositoryCredentials) {
        this.vmImageRepositoryCredentials = vmImageRepositoryCredentials;
        return this;
    }

    /**
     * Get the volumes property: The resource IDs of volumes that are attached to the virtual machine.
     * 
     * @return the volumes value.
     */
    public List<String> volumes() {
        return this.volumes;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (adminUsername() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property adminUsername in model VirtualMachineProperties"));
        }
        if (cloudServicesNetworkAttachment() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property cloudServicesNetworkAttachment in model VirtualMachineProperties"));
        } else {
            cloudServicesNetworkAttachment().validate();
        }
        if (networkAttachments() != null) {
            networkAttachments().forEach(e -> e.validate());
        }
        if (placementHints() != null) {
            placementHints().forEach(e -> e.validate());
        }
        if (sshPublicKeys() != null) {
            sshPublicKeys().forEach(e -> e.validate());
        }
        if (storageProfile() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property storageProfile in model VirtualMachineProperties"));
        } else {
            storageProfile().validate();
        }
        if (vmImage() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property vmImage in model VirtualMachineProperties"));
        }
        if (vmImageRepositoryCredentials() != null) {
            vmImageRepositoryCredentials().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(VirtualMachineProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("adminUsername", this.adminUsername);
        jsonWriter.writeJsonField("cloudServicesNetworkAttachment", this.cloudServicesNetworkAttachment);
        jsonWriter.writeLongField("cpuCores", this.cpuCores);
        jsonWriter.writeLongField("memorySizeGB", this.memorySizeGB);
        jsonWriter.writeJsonField("storageProfile", this.storageProfile);
        jsonWriter.writeStringField("vmImage", this.vmImage);
        jsonWriter.writeStringField("bootMethod", this.bootMethod == null ? null : this.bootMethod.toString());
        jsonWriter.writeStringField("isolateEmulatorThread",
            this.isolateEmulatorThread == null ? null : this.isolateEmulatorThread.toString());
        jsonWriter.writeArrayField("networkAttachments", this.networkAttachments,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("networkData", this.networkData);
        jsonWriter.writeArrayField("placementHints", this.placementHints,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("sshPublicKeys", this.sshPublicKeys, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("userData", this.userData);
        jsonWriter.writeStringField("virtioInterface",
            this.virtioInterface == null ? null : this.virtioInterface.toString());
        jsonWriter.writeStringField("vmDeviceModel", this.vmDeviceModel == null ? null : this.vmDeviceModel.toString());
        jsonWriter.writeJsonField("vmImageRepositoryCredentials", this.vmImageRepositoryCredentials);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VirtualMachineProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VirtualMachineProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the VirtualMachineProperties.
     */
    public static VirtualMachineProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VirtualMachineProperties deserializedVirtualMachineProperties = new VirtualMachineProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("adminUsername".equals(fieldName)) {
                    deserializedVirtualMachineProperties.adminUsername = reader.getString();
                } else if ("cloudServicesNetworkAttachment".equals(fieldName)) {
                    deserializedVirtualMachineProperties.cloudServicesNetworkAttachment
                        = NetworkAttachment.fromJson(reader);
                } else if ("cpuCores".equals(fieldName)) {
                    deserializedVirtualMachineProperties.cpuCores = reader.getLong();
                } else if ("memorySizeGB".equals(fieldName)) {
                    deserializedVirtualMachineProperties.memorySizeGB = reader.getLong();
                } else if ("storageProfile".equals(fieldName)) {
                    deserializedVirtualMachineProperties.storageProfile = StorageProfile.fromJson(reader);
                } else if ("vmImage".equals(fieldName)) {
                    deserializedVirtualMachineProperties.vmImage = reader.getString();
                } else if ("availabilityZone".equals(fieldName)) {
                    deserializedVirtualMachineProperties.availabilityZone = reader.getString();
                } else if ("bareMetalMachineId".equals(fieldName)) {
                    deserializedVirtualMachineProperties.bareMetalMachineId = reader.getString();
                } else if ("bootMethod".equals(fieldName)) {
                    deserializedVirtualMachineProperties.bootMethod
                        = VirtualMachineBootMethod.fromString(reader.getString());
                } else if ("clusterId".equals(fieldName)) {
                    deserializedVirtualMachineProperties.clusterId = reader.getString();
                } else if ("detailedStatus".equals(fieldName)) {
                    deserializedVirtualMachineProperties.detailedStatus
                        = VirtualMachineDetailedStatus.fromString(reader.getString());
                } else if ("detailedStatusMessage".equals(fieldName)) {
                    deserializedVirtualMachineProperties.detailedStatusMessage = reader.getString();
                } else if ("isolateEmulatorThread".equals(fieldName)) {
                    deserializedVirtualMachineProperties.isolateEmulatorThread
                        = VirtualMachineIsolateEmulatorThread.fromString(reader.getString());
                } else if ("networkAttachments".equals(fieldName)) {
                    List<NetworkAttachment> networkAttachments
                        = reader.readArray(reader1 -> NetworkAttachment.fromJson(reader1));
                    deserializedVirtualMachineProperties.networkAttachments = networkAttachments;
                } else if ("networkData".equals(fieldName)) {
                    deserializedVirtualMachineProperties.networkData = reader.getString();
                } else if ("placementHints".equals(fieldName)) {
                    List<VirtualMachinePlacementHint> placementHints
                        = reader.readArray(reader1 -> VirtualMachinePlacementHint.fromJson(reader1));
                    deserializedVirtualMachineProperties.placementHints = placementHints;
                } else if ("powerState".equals(fieldName)) {
                    deserializedVirtualMachineProperties.powerState
                        = VirtualMachinePowerState.fromString(reader.getString());
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedVirtualMachineProperties.provisioningState
                        = VirtualMachineProvisioningState.fromString(reader.getString());
                } else if ("sshPublicKeys".equals(fieldName)) {
                    List<SshPublicKey> sshPublicKeys = reader.readArray(reader1 -> SshPublicKey.fromJson(reader1));
                    deserializedVirtualMachineProperties.sshPublicKeys = sshPublicKeys;
                } else if ("userData".equals(fieldName)) {
                    deserializedVirtualMachineProperties.userData = reader.getString();
                } else if ("virtioInterface".equals(fieldName)) {
                    deserializedVirtualMachineProperties.virtioInterface
                        = VirtualMachineVirtioInterfaceType.fromString(reader.getString());
                } else if ("vmDeviceModel".equals(fieldName)) {
                    deserializedVirtualMachineProperties.vmDeviceModel
                        = VirtualMachineDeviceModelType.fromString(reader.getString());
                } else if ("vmImageRepositoryCredentials".equals(fieldName)) {
                    deserializedVirtualMachineProperties.vmImageRepositoryCredentials
                        = ImageRepositoryCredentials.fromJson(reader);
                } else if ("volumes".equals(fieldName)) {
                    List<String> volumes = reader.readArray(reader1 -> reader1.getString());
                    deserializedVirtualMachineProperties.volumes = volumes;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVirtualMachineProperties;
        });
    }
}
