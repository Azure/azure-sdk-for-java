// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * ClusterMetricsConfigurationPatchProperties represents the properties of metrics configuration for the cluster for
 * patching.
 */
@Fluent
public final class ClusterMetricsConfigurationPatchProperties
    implements JsonSerializable<ClusterMetricsConfigurationPatchProperties> {
    /*
     * The interval in minutes by which metrics will be collected.
     */
    private Long collectionInterval;

    /*
     * The list of metric names that have been chosen to be enabled in addition to the core set of enabled metrics.
     */
    private List<String> enabledMetrics;

    /**
     * Creates an instance of ClusterMetricsConfigurationPatchProperties class.
     */
    public ClusterMetricsConfigurationPatchProperties() {
    }

    /**
     * Get the collectionInterval property: The interval in minutes by which metrics will be collected.
     * 
     * @return the collectionInterval value.
     */
    public Long collectionInterval() {
        return this.collectionInterval;
    }

    /**
     * Set the collectionInterval property: The interval in minutes by which metrics will be collected.
     * 
     * @param collectionInterval the collectionInterval value to set.
     * @return the ClusterMetricsConfigurationPatchProperties object itself.
     */
    public ClusterMetricsConfigurationPatchProperties withCollectionInterval(Long collectionInterval) {
        this.collectionInterval = collectionInterval;
        return this;
    }

    /**
     * Get the enabledMetrics property: The list of metric names that have been chosen to be enabled in addition to the
     * core set of enabled metrics.
     * 
     * @return the enabledMetrics value.
     */
    public List<String> enabledMetrics() {
        return this.enabledMetrics;
    }

    /**
     * Set the enabledMetrics property: The list of metric names that have been chosen to be enabled in addition to the
     * core set of enabled metrics.
     * 
     * @param enabledMetrics the enabledMetrics value to set.
     * @return the ClusterMetricsConfigurationPatchProperties object itself.
     */
    public ClusterMetricsConfigurationPatchProperties withEnabledMetrics(List<String> enabledMetrics) {
        this.enabledMetrics = enabledMetrics;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("collectionInterval", this.collectionInterval);
        jsonWriter.writeArrayField("enabledMetrics", this.enabledMetrics,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ClusterMetricsConfigurationPatchProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ClusterMetricsConfigurationPatchProperties if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ClusterMetricsConfigurationPatchProperties.
     */
    public static ClusterMetricsConfigurationPatchProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ClusterMetricsConfigurationPatchProperties deserializedClusterMetricsConfigurationPatchProperties
                = new ClusterMetricsConfigurationPatchProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("collectionInterval".equals(fieldName)) {
                    deserializedClusterMetricsConfigurationPatchProperties.collectionInterval
                        = reader.getNullable(JsonReader::getLong);
                } else if ("enabledMetrics".equals(fieldName)) {
                    List<String> enabledMetrics = reader.readArray(reader1 -> reader1.getString());
                    deserializedClusterMetricsConfigurationPatchProperties.enabledMetrics = enabledMetrics;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedClusterMetricsConfigurationPatchProperties;
        });
    }
}
