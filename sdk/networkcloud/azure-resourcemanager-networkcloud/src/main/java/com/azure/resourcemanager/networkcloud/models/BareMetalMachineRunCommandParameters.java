// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * BareMetalMachineRunCommandParameters represents the body of the request to execute a script on the bare metal
 * machine.
 */
@Fluent
public final class BareMetalMachineRunCommandParameters
    implements JsonSerializable<BareMetalMachineRunCommandParameters> {
    /*
     * The list of string arguments that will be passed to the script in order as separate arguments.
     */
    private List<String> arguments;

    /*
     * The maximum time the script is allowed to run.
     * If the execution time exceeds the maximum, the script will be stopped, any output produced until then will be
     * captured, and the exit code matching a timeout will be returned (252).
     */
    private long limitTimeSeconds;

    /*
     * The base64 encoded script to execute on the bare metal machine.
     */
    private String script;

    /**
     * Creates an instance of BareMetalMachineRunCommandParameters class.
     */
    public BareMetalMachineRunCommandParameters() {
    }

    /**
     * Get the arguments property: The list of string arguments that will be passed to the script in order as separate
     * arguments.
     * 
     * @return the arguments value.
     */
    public List<String> arguments() {
        return this.arguments;
    }

    /**
     * Set the arguments property: The list of string arguments that will be passed to the script in order as separate
     * arguments.
     * 
     * @param arguments the arguments value to set.
     * @return the BareMetalMachineRunCommandParameters object itself.
     */
    public BareMetalMachineRunCommandParameters withArguments(List<String> arguments) {
        this.arguments = arguments;
        return this;
    }

    /**
     * Get the limitTimeSeconds property: The maximum time the script is allowed to run.
     * If the execution time exceeds the maximum, the script will be stopped, any output produced until then will be
     * captured, and the exit code matching a timeout will be returned (252).
     * 
     * @return the limitTimeSeconds value.
     */
    public long limitTimeSeconds() {
        return this.limitTimeSeconds;
    }

    /**
     * Set the limitTimeSeconds property: The maximum time the script is allowed to run.
     * If the execution time exceeds the maximum, the script will be stopped, any output produced until then will be
     * captured, and the exit code matching a timeout will be returned (252).
     * 
     * @param limitTimeSeconds the limitTimeSeconds value to set.
     * @return the BareMetalMachineRunCommandParameters object itself.
     */
    public BareMetalMachineRunCommandParameters withLimitTimeSeconds(long limitTimeSeconds) {
        this.limitTimeSeconds = limitTimeSeconds;
        return this;
    }

    /**
     * Get the script property: The base64 encoded script to execute on the bare metal machine.
     * 
     * @return the script value.
     */
    public String script() {
        return this.script;
    }

    /**
     * Set the script property: The base64 encoded script to execute on the bare metal machine.
     * 
     * @param script the script value to set.
     * @return the BareMetalMachineRunCommandParameters object itself.
     */
    public BareMetalMachineRunCommandParameters withScript(String script) {
        this.script = script;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (script() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property script in model BareMetalMachineRunCommandParameters"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(BareMetalMachineRunCommandParameters.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeLongField("limitTimeSeconds", this.limitTimeSeconds);
        jsonWriter.writeStringField("script", this.script);
        jsonWriter.writeArrayField("arguments", this.arguments, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BareMetalMachineRunCommandParameters from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BareMetalMachineRunCommandParameters if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the BareMetalMachineRunCommandParameters.
     */
    public static BareMetalMachineRunCommandParameters fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BareMetalMachineRunCommandParameters deserializedBareMetalMachineRunCommandParameters
                = new BareMetalMachineRunCommandParameters();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("limitTimeSeconds".equals(fieldName)) {
                    deserializedBareMetalMachineRunCommandParameters.limitTimeSeconds = reader.getLong();
                } else if ("script".equals(fieldName)) {
                    deserializedBareMetalMachineRunCommandParameters.script = reader.getString();
                } else if ("arguments".equals(fieldName)) {
                    List<String> arguments = reader.readArray(reader1 -> reader1.getString());
                    deserializedBareMetalMachineRunCommandParameters.arguments = arguments;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBareMetalMachineRunCommandParameters;
        });
    }
}
