// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * SecretArchiveReference represents the reference to a secret in a key vault.
 */
@Immutable
public final class SecretArchiveReference implements JsonSerializable<SecretArchiveReference> {
    /*
     * The resource ID of the key vault containing the secret.
     */
    private String keyVaultId;

    /*
     * The name of the secret in the key vault.
     */
    private String secretName;

    /*
     * The version of the secret in the key vault.
     */
    private String secretVersion;

    /**
     * Creates an instance of SecretArchiveReference class.
     */
    public SecretArchiveReference() {
    }

    /**
     * Get the keyVaultId property: The resource ID of the key vault containing the secret.
     * 
     * @return the keyVaultId value.
     */
    public String keyVaultId() {
        return this.keyVaultId;
    }

    /**
     * Get the secretName property: The name of the secret in the key vault.
     * 
     * @return the secretName value.
     */
    public String secretName() {
        return this.secretName;
    }

    /**
     * Get the secretVersion property: The version of the secret in the key vault.
     * 
     * @return the secretVersion value.
     */
    public String secretVersion() {
        return this.secretVersion;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SecretArchiveReference from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SecretArchiveReference if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SecretArchiveReference.
     */
    public static SecretArchiveReference fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SecretArchiveReference deserializedSecretArchiveReference = new SecretArchiveReference();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("keyVaultId".equals(fieldName)) {
                    deserializedSecretArchiveReference.keyVaultId = reader.getString();
                } else if ("secretName".equals(fieldName)) {
                    deserializedSecretArchiveReference.secretName = reader.getString();
                } else if ("secretVersion".equals(fieldName)) {
                    deserializedSecretArchiveReference.secretVersion = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSecretArchiveReference;
        });
    }
}
