// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.networkcloud.models.AdministrativeCredentials;
import com.azure.resourcemanager.networkcloud.models.BareMetalMachineCordonStatus;
import com.azure.resourcemanager.networkcloud.models.BareMetalMachineDetailedStatus;
import com.azure.resourcemanager.networkcloud.models.BareMetalMachinePowerState;
import com.azure.resourcemanager.networkcloud.models.BareMetalMachineProvisioningState;
import com.azure.resourcemanager.networkcloud.models.BareMetalMachineReadyState;
import com.azure.resourcemanager.networkcloud.models.HardwareInventory;
import com.azure.resourcemanager.networkcloud.models.HardwareValidationStatus;
import com.azure.resourcemanager.networkcloud.models.RuntimeProtectionStatus;
import com.azure.resourcemanager.networkcloud.models.SecretRotationStatus;
import java.io.IOException;
import java.util.List;

/**
 * BareMetalMachineProperties represents the properties of a bare metal machine.
 */
@Fluent
public final class BareMetalMachineProperties implements JsonSerializable<BareMetalMachineProperties> {
    /*
     * The list of resource IDs for the other Microsoft.NetworkCloud resources that have attached this network.
     */
    private List<String> associatedResourceIds;

    /*
     * The connection string for the baseboard management controller including IP address and protocol.
     */
    private String bmcConnectionString;

    /*
     * The credentials of the baseboard management controller on this bare metal machine.
     */
    private AdministrativeCredentials bmcCredentials;

    /*
     * The MAC address of the BMC device.
     */
    private String bmcMacAddress;

    /*
     * The MAC address of a NIC connected to the PXE network.
     */
    private String bootMacAddress;

    /*
     * The resource ID of the cluster this bare metal machine is associated with.
     */
    private String clusterId;

    /*
     * The cordon status of the bare metal machine.
     */
    private BareMetalMachineCordonStatus cordonStatus;

    /*
     * The more detailed status of the bare metal machine.
     */
    private BareMetalMachineDetailedStatus detailedStatus;

    /*
     * The descriptive message about the current detailed status.
     */
    private String detailedStatusMessage;

    /*
     * The hardware inventory, including information acquired from the model/sku information and from the ironic
     * inspector.
     */
    private HardwareInventory hardwareInventory;

    /*
     * The details of the latest hardware validation performed for this bare metal machine.
     */
    private HardwareValidationStatus hardwareValidationStatus;

    /*
     * Field Deprecated. These fields will be empty/omitted. The list of the resource IDs for the HybridAksClusters that
     * have nodes hosted on this bare metal machine.
     */
    private List<String> hybridAksClustersAssociatedIds;

    /*
     * The name of this machine represented by the host object in the Cluster's Kubernetes control plane.
     */
    private String kubernetesNodeName;

    /*
     * The version of Kubernetes running on this machine.
     */
    private String kubernetesVersion;

    /*
     * The cluster version that has been applied to this machine during deployment or a version update.
     */
    private String machineClusterVersion;

    /*
     * The custom details provided by the customer.
     */
    private String machineDetails;

    /*
     * The OS-level hostname assigned to this machine.
     */
    private String machineName;

    /*
     * The list of roles that are assigned to the cluster node running on this machine.
     */
    private List<String> machineRoles;

    /*
     * The unique internal identifier of the bare metal machine SKU.
     */
    private String machineSkuId;

    /*
     * The IPv4 address that is assigned to the bare metal machine during the cluster deployment.
     */
    private String oamIpv4Address;

    /*
     * The IPv6 address that is assigned to the bare metal machine during the cluster deployment.
     */
    private String oamIpv6Address;

    /*
     * The image that is currently provisioned to the OS disk.
     */
    private String osImage;

    /*
     * The power state derived from the baseboard management controller.
     */
    private BareMetalMachinePowerState powerState;

    /*
     * The provisioning state of the bare metal machine.
     */
    private BareMetalMachineProvisioningState provisioningState;

    /*
     * The resource ID of the rack where this bare metal machine resides.
     */
    private String rackId;

    /*
     * The rack slot in which this bare metal machine is located, ordered from the bottom up i.e. the lowest slot is 1.
     */
    private long rackSlot;

    /*
     * The indicator of whether the bare metal machine is ready to receive workloads.
     */
    private BareMetalMachineReadyState readyState;

    /*
     * The runtime protection status of the bare metal machine.
     */
    private RuntimeProtectionStatus runtimeProtectionStatus;

    /*
     * The list of statuses that represent secret rotation activity.
     */
    private List<SecretRotationStatus> secretRotationStatus;

    /*
     * The serial number of the bare metal machine.
     */
    private String serialNumber;

    /*
     * The discovered value of the machine's service tag.
     */
    private String serviceTag;

    /*
     * Field Deprecated. These fields will be empty/omitted. The list of the resource IDs for the VirtualMachines that
     * are hosted on this bare metal machine.
     */
    private List<String> virtualMachinesAssociatedIds;

    /**
     * Creates an instance of BareMetalMachineProperties class.
     */
    public BareMetalMachineProperties() {
    }

    /**
     * Get the associatedResourceIds property: The list of resource IDs for the other Microsoft.NetworkCloud resources
     * that have attached this network.
     * 
     * @return the associatedResourceIds value.
     */
    public List<String> associatedResourceIds() {
        return this.associatedResourceIds;
    }

    /**
     * Get the bmcConnectionString property: The connection string for the baseboard management controller including IP
     * address and protocol.
     * 
     * @return the bmcConnectionString value.
     */
    public String bmcConnectionString() {
        return this.bmcConnectionString;
    }

    /**
     * Set the bmcConnectionString property: The connection string for the baseboard management controller including IP
     * address and protocol.
     * 
     * @param bmcConnectionString the bmcConnectionString value to set.
     * @return the BareMetalMachineProperties object itself.
     */
    public BareMetalMachineProperties withBmcConnectionString(String bmcConnectionString) {
        this.bmcConnectionString = bmcConnectionString;
        return this;
    }

    /**
     * Get the bmcCredentials property: The credentials of the baseboard management controller on this bare metal
     * machine.
     * 
     * @return the bmcCredentials value.
     */
    public AdministrativeCredentials bmcCredentials() {
        return this.bmcCredentials;
    }

    /**
     * Set the bmcCredentials property: The credentials of the baseboard management controller on this bare metal
     * machine.
     * 
     * @param bmcCredentials the bmcCredentials value to set.
     * @return the BareMetalMachineProperties object itself.
     */
    public BareMetalMachineProperties withBmcCredentials(AdministrativeCredentials bmcCredentials) {
        this.bmcCredentials = bmcCredentials;
        return this;
    }

    /**
     * Get the bmcMacAddress property: The MAC address of the BMC device.
     * 
     * @return the bmcMacAddress value.
     */
    public String bmcMacAddress() {
        return this.bmcMacAddress;
    }

    /**
     * Set the bmcMacAddress property: The MAC address of the BMC device.
     * 
     * @param bmcMacAddress the bmcMacAddress value to set.
     * @return the BareMetalMachineProperties object itself.
     */
    public BareMetalMachineProperties withBmcMacAddress(String bmcMacAddress) {
        this.bmcMacAddress = bmcMacAddress;
        return this;
    }

    /**
     * Get the bootMacAddress property: The MAC address of a NIC connected to the PXE network.
     * 
     * @return the bootMacAddress value.
     */
    public String bootMacAddress() {
        return this.bootMacAddress;
    }

    /**
     * Set the bootMacAddress property: The MAC address of a NIC connected to the PXE network.
     * 
     * @param bootMacAddress the bootMacAddress value to set.
     * @return the BareMetalMachineProperties object itself.
     */
    public BareMetalMachineProperties withBootMacAddress(String bootMacAddress) {
        this.bootMacAddress = bootMacAddress;
        return this;
    }

    /**
     * Get the clusterId property: The resource ID of the cluster this bare metal machine is associated with.
     * 
     * @return the clusterId value.
     */
    public String clusterId() {
        return this.clusterId;
    }

    /**
     * Get the cordonStatus property: The cordon status of the bare metal machine.
     * 
     * @return the cordonStatus value.
     */
    public BareMetalMachineCordonStatus cordonStatus() {
        return this.cordonStatus;
    }

    /**
     * Get the detailedStatus property: The more detailed status of the bare metal machine.
     * 
     * @return the detailedStatus value.
     */
    public BareMetalMachineDetailedStatus detailedStatus() {
        return this.detailedStatus;
    }

    /**
     * Get the detailedStatusMessage property: The descriptive message about the current detailed status.
     * 
     * @return the detailedStatusMessage value.
     */
    public String detailedStatusMessage() {
        return this.detailedStatusMessage;
    }

    /**
     * Get the hardwareInventory property: The hardware inventory, including information acquired from the model/sku
     * information and from the ironic inspector.
     * 
     * @return the hardwareInventory value.
     */
    public HardwareInventory hardwareInventory() {
        return this.hardwareInventory;
    }

    /**
     * Get the hardwareValidationStatus property: The details of the latest hardware validation performed for this bare
     * metal machine.
     * 
     * @return the hardwareValidationStatus value.
     */
    public HardwareValidationStatus hardwareValidationStatus() {
        return this.hardwareValidationStatus;
    }

    /**
     * Get the hybridAksClustersAssociatedIds property: Field Deprecated. These fields will be empty/omitted. The list
     * of the resource IDs for the HybridAksClusters that have nodes hosted on this bare metal machine.
     * 
     * @return the hybridAksClustersAssociatedIds value.
     */
    public List<String> hybridAksClustersAssociatedIds() {
        return this.hybridAksClustersAssociatedIds;
    }

    /**
     * Get the kubernetesNodeName property: The name of this machine represented by the host object in the Cluster's
     * Kubernetes control plane.
     * 
     * @return the kubernetesNodeName value.
     */
    public String kubernetesNodeName() {
        return this.kubernetesNodeName;
    }

    /**
     * Get the kubernetesVersion property: The version of Kubernetes running on this machine.
     * 
     * @return the kubernetesVersion value.
     */
    public String kubernetesVersion() {
        return this.kubernetesVersion;
    }

    /**
     * Get the machineClusterVersion property: The cluster version that has been applied to this machine during
     * deployment or a version update.
     * 
     * @return the machineClusterVersion value.
     */
    public String machineClusterVersion() {
        return this.machineClusterVersion;
    }

    /**
     * Set the machineClusterVersion property: The cluster version that has been applied to this machine during
     * deployment or a version update.
     * 
     * @param machineClusterVersion the machineClusterVersion value to set.
     * @return the BareMetalMachineProperties object itself.
     */
    public BareMetalMachineProperties withMachineClusterVersion(String machineClusterVersion) {
        this.machineClusterVersion = machineClusterVersion;
        return this;
    }

    /**
     * Get the machineDetails property: The custom details provided by the customer.
     * 
     * @return the machineDetails value.
     */
    public String machineDetails() {
        return this.machineDetails;
    }

    /**
     * Set the machineDetails property: The custom details provided by the customer.
     * 
     * @param machineDetails the machineDetails value to set.
     * @return the BareMetalMachineProperties object itself.
     */
    public BareMetalMachineProperties withMachineDetails(String machineDetails) {
        this.machineDetails = machineDetails;
        return this;
    }

    /**
     * Get the machineName property: The OS-level hostname assigned to this machine.
     * 
     * @return the machineName value.
     */
    public String machineName() {
        return this.machineName;
    }

    /**
     * Set the machineName property: The OS-level hostname assigned to this machine.
     * 
     * @param machineName the machineName value to set.
     * @return the BareMetalMachineProperties object itself.
     */
    public BareMetalMachineProperties withMachineName(String machineName) {
        this.machineName = machineName;
        return this;
    }

    /**
     * Get the machineRoles property: The list of roles that are assigned to the cluster node running on this machine.
     * 
     * @return the machineRoles value.
     */
    public List<String> machineRoles() {
        return this.machineRoles;
    }

    /**
     * Get the machineSkuId property: The unique internal identifier of the bare metal machine SKU.
     * 
     * @return the machineSkuId value.
     */
    public String machineSkuId() {
        return this.machineSkuId;
    }

    /**
     * Set the machineSkuId property: The unique internal identifier of the bare metal machine SKU.
     * 
     * @param machineSkuId the machineSkuId value to set.
     * @return the BareMetalMachineProperties object itself.
     */
    public BareMetalMachineProperties withMachineSkuId(String machineSkuId) {
        this.machineSkuId = machineSkuId;
        return this;
    }

    /**
     * Get the oamIpv4Address property: The IPv4 address that is assigned to the bare metal machine during the cluster
     * deployment.
     * 
     * @return the oamIpv4Address value.
     */
    public String oamIpv4Address() {
        return this.oamIpv4Address;
    }

    /**
     * Get the oamIpv6Address property: The IPv6 address that is assigned to the bare metal machine during the cluster
     * deployment.
     * 
     * @return the oamIpv6Address value.
     */
    public String oamIpv6Address() {
        return this.oamIpv6Address;
    }

    /**
     * Get the osImage property: The image that is currently provisioned to the OS disk.
     * 
     * @return the osImage value.
     */
    public String osImage() {
        return this.osImage;
    }

    /**
     * Get the powerState property: The power state derived from the baseboard management controller.
     * 
     * @return the powerState value.
     */
    public BareMetalMachinePowerState powerState() {
        return this.powerState;
    }

    /**
     * Get the provisioningState property: The provisioning state of the bare metal machine.
     * 
     * @return the provisioningState value.
     */
    public BareMetalMachineProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the rackId property: The resource ID of the rack where this bare metal machine resides.
     * 
     * @return the rackId value.
     */
    public String rackId() {
        return this.rackId;
    }

    /**
     * Set the rackId property: The resource ID of the rack where this bare metal machine resides.
     * 
     * @param rackId the rackId value to set.
     * @return the BareMetalMachineProperties object itself.
     */
    public BareMetalMachineProperties withRackId(String rackId) {
        this.rackId = rackId;
        return this;
    }

    /**
     * Get the rackSlot property: The rack slot in which this bare metal machine is located, ordered from the bottom up
     * i.e. the lowest slot is 1.
     * 
     * @return the rackSlot value.
     */
    public long rackSlot() {
        return this.rackSlot;
    }

    /**
     * Set the rackSlot property: The rack slot in which this bare metal machine is located, ordered from the bottom up
     * i.e. the lowest slot is 1.
     * 
     * @param rackSlot the rackSlot value to set.
     * @return the BareMetalMachineProperties object itself.
     */
    public BareMetalMachineProperties withRackSlot(long rackSlot) {
        this.rackSlot = rackSlot;
        return this;
    }

    /**
     * Get the readyState property: The indicator of whether the bare metal machine is ready to receive workloads.
     * 
     * @return the readyState value.
     */
    public BareMetalMachineReadyState readyState() {
        return this.readyState;
    }

    /**
     * Get the runtimeProtectionStatus property: The runtime protection status of the bare metal machine.
     * 
     * @return the runtimeProtectionStatus value.
     */
    public RuntimeProtectionStatus runtimeProtectionStatus() {
        return this.runtimeProtectionStatus;
    }

    /**
     * Get the secretRotationStatus property: The list of statuses that represent secret rotation activity.
     * 
     * @return the secretRotationStatus value.
     */
    public List<SecretRotationStatus> secretRotationStatus() {
        return this.secretRotationStatus;
    }

    /**
     * Get the serialNumber property: The serial number of the bare metal machine.
     * 
     * @return the serialNumber value.
     */
    public String serialNumber() {
        return this.serialNumber;
    }

    /**
     * Set the serialNumber property: The serial number of the bare metal machine.
     * 
     * @param serialNumber the serialNumber value to set.
     * @return the BareMetalMachineProperties object itself.
     */
    public BareMetalMachineProperties withSerialNumber(String serialNumber) {
        this.serialNumber = serialNumber;
        return this;
    }

    /**
     * Get the serviceTag property: The discovered value of the machine's service tag.
     * 
     * @return the serviceTag value.
     */
    public String serviceTag() {
        return this.serviceTag;
    }

    /**
     * Get the virtualMachinesAssociatedIds property: Field Deprecated. These fields will be empty/omitted. The list of
     * the resource IDs for the VirtualMachines that are hosted on this bare metal machine.
     * 
     * @return the virtualMachinesAssociatedIds value.
     */
    public List<String> virtualMachinesAssociatedIds() {
        return this.virtualMachinesAssociatedIds;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (bmcConnectionString() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property bmcConnectionString in model BareMetalMachineProperties"));
        }
        if (bmcCredentials() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property bmcCredentials in model BareMetalMachineProperties"));
        } else {
            bmcCredentials().validate();
        }
        if (bmcMacAddress() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property bmcMacAddress in model BareMetalMachineProperties"));
        }
        if (bootMacAddress() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property bootMacAddress in model BareMetalMachineProperties"));
        }
        if (hardwareInventory() != null) {
            hardwareInventory().validate();
        }
        if (hardwareValidationStatus() != null) {
            hardwareValidationStatus().validate();
        }
        if (machineDetails() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property machineDetails in model BareMetalMachineProperties"));
        }
        if (machineName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property machineName in model BareMetalMachineProperties"));
        }
        if (machineSkuId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property machineSkuId in model BareMetalMachineProperties"));
        }
        if (rackId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property rackId in model BareMetalMachineProperties"));
        }
        if (runtimeProtectionStatus() != null) {
            runtimeProtectionStatus().validate();
        }
        if (secretRotationStatus() != null) {
            secretRotationStatus().forEach(e -> e.validate());
        }
        if (serialNumber() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property serialNumber in model BareMetalMachineProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(BareMetalMachineProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("bmcConnectionString", this.bmcConnectionString);
        jsonWriter.writeJsonField("bmcCredentials", this.bmcCredentials);
        jsonWriter.writeStringField("bmcMacAddress", this.bmcMacAddress);
        jsonWriter.writeStringField("bootMacAddress", this.bootMacAddress);
        jsonWriter.writeStringField("machineDetails", this.machineDetails);
        jsonWriter.writeStringField("machineName", this.machineName);
        jsonWriter.writeStringField("machineSkuId", this.machineSkuId);
        jsonWriter.writeStringField("rackId", this.rackId);
        jsonWriter.writeLongField("rackSlot", this.rackSlot);
        jsonWriter.writeStringField("serialNumber", this.serialNumber);
        jsonWriter.writeStringField("machineClusterVersion", this.machineClusterVersion);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BareMetalMachineProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BareMetalMachineProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the BareMetalMachineProperties.
     */
    public static BareMetalMachineProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BareMetalMachineProperties deserializedBareMetalMachineProperties = new BareMetalMachineProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("bmcConnectionString".equals(fieldName)) {
                    deserializedBareMetalMachineProperties.bmcConnectionString = reader.getString();
                } else if ("bmcCredentials".equals(fieldName)) {
                    deserializedBareMetalMachineProperties.bmcCredentials = AdministrativeCredentials.fromJson(reader);
                } else if ("bmcMacAddress".equals(fieldName)) {
                    deserializedBareMetalMachineProperties.bmcMacAddress = reader.getString();
                } else if ("bootMacAddress".equals(fieldName)) {
                    deserializedBareMetalMachineProperties.bootMacAddress = reader.getString();
                } else if ("machineDetails".equals(fieldName)) {
                    deserializedBareMetalMachineProperties.machineDetails = reader.getString();
                } else if ("machineName".equals(fieldName)) {
                    deserializedBareMetalMachineProperties.machineName = reader.getString();
                } else if ("machineSkuId".equals(fieldName)) {
                    deserializedBareMetalMachineProperties.machineSkuId = reader.getString();
                } else if ("rackId".equals(fieldName)) {
                    deserializedBareMetalMachineProperties.rackId = reader.getString();
                } else if ("rackSlot".equals(fieldName)) {
                    deserializedBareMetalMachineProperties.rackSlot = reader.getLong();
                } else if ("serialNumber".equals(fieldName)) {
                    deserializedBareMetalMachineProperties.serialNumber = reader.getString();
                } else if ("associatedResourceIds".equals(fieldName)) {
                    List<String> associatedResourceIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedBareMetalMachineProperties.associatedResourceIds = associatedResourceIds;
                } else if ("clusterId".equals(fieldName)) {
                    deserializedBareMetalMachineProperties.clusterId = reader.getString();
                } else if ("cordonStatus".equals(fieldName)) {
                    deserializedBareMetalMachineProperties.cordonStatus
                        = BareMetalMachineCordonStatus.fromString(reader.getString());
                } else if ("detailedStatus".equals(fieldName)) {
                    deserializedBareMetalMachineProperties.detailedStatus
                        = BareMetalMachineDetailedStatus.fromString(reader.getString());
                } else if ("detailedStatusMessage".equals(fieldName)) {
                    deserializedBareMetalMachineProperties.detailedStatusMessage = reader.getString();
                } else if ("hardwareInventory".equals(fieldName)) {
                    deserializedBareMetalMachineProperties.hardwareInventory = HardwareInventory.fromJson(reader);
                } else if ("hardwareValidationStatus".equals(fieldName)) {
                    deserializedBareMetalMachineProperties.hardwareValidationStatus
                        = HardwareValidationStatus.fromJson(reader);
                } else if ("hybridAksClustersAssociatedIds".equals(fieldName)) {
                    List<String> hybridAksClustersAssociatedIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedBareMetalMachineProperties.hybridAksClustersAssociatedIds
                        = hybridAksClustersAssociatedIds;
                } else if ("kubernetesNodeName".equals(fieldName)) {
                    deserializedBareMetalMachineProperties.kubernetesNodeName = reader.getString();
                } else if ("kubernetesVersion".equals(fieldName)) {
                    deserializedBareMetalMachineProperties.kubernetesVersion = reader.getString();
                } else if ("machineClusterVersion".equals(fieldName)) {
                    deserializedBareMetalMachineProperties.machineClusterVersion = reader.getString();
                } else if ("machineRoles".equals(fieldName)) {
                    List<String> machineRoles = reader.readArray(reader1 -> reader1.getString());
                    deserializedBareMetalMachineProperties.machineRoles = machineRoles;
                } else if ("oamIpv4Address".equals(fieldName)) {
                    deserializedBareMetalMachineProperties.oamIpv4Address = reader.getString();
                } else if ("oamIpv6Address".equals(fieldName)) {
                    deserializedBareMetalMachineProperties.oamIpv6Address = reader.getString();
                } else if ("osImage".equals(fieldName)) {
                    deserializedBareMetalMachineProperties.osImage = reader.getString();
                } else if ("powerState".equals(fieldName)) {
                    deserializedBareMetalMachineProperties.powerState
                        = BareMetalMachinePowerState.fromString(reader.getString());
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedBareMetalMachineProperties.provisioningState
                        = BareMetalMachineProvisioningState.fromString(reader.getString());
                } else if ("readyState".equals(fieldName)) {
                    deserializedBareMetalMachineProperties.readyState
                        = BareMetalMachineReadyState.fromString(reader.getString());
                } else if ("runtimeProtectionStatus".equals(fieldName)) {
                    deserializedBareMetalMachineProperties.runtimeProtectionStatus
                        = RuntimeProtectionStatus.fromJson(reader);
                } else if ("secretRotationStatus".equals(fieldName)) {
                    List<SecretRotationStatus> secretRotationStatus
                        = reader.readArray(reader1 -> SecretRotationStatus.fromJson(reader1));
                    deserializedBareMetalMachineProperties.secretRotationStatus = secretRotationStatus;
                } else if ("serviceTag".equals(fieldName)) {
                    deserializedBareMetalMachineProperties.serviceTag = reader.getString();
                } else if ("virtualMachinesAssociatedIds".equals(fieldName)) {
                    List<String> virtualMachinesAssociatedIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedBareMetalMachineProperties.virtualMachinesAssociatedIds = virtualMachinesAssociatedIds;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBareMetalMachineProperties;
        });
    }
}
