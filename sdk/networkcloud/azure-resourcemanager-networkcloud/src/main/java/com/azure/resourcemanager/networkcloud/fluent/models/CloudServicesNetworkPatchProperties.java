// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.networkcloud.models.CloudServicesNetworkEnableDefaultEgressEndpoints;
import com.azure.resourcemanager.networkcloud.models.EgressEndpoint;
import java.io.IOException;
import java.util.List;

/**
 * CloudServicesNetworkPatchProperties represents the properties of the cloud services network that can be updated using
 * a patch request.
 */
@Fluent
public final class CloudServicesNetworkPatchProperties
    implements JsonSerializable<CloudServicesNetworkPatchProperties> {
    /*
     * The list of egress endpoints. This allows for connection from a Hybrid AKS cluster to the specified endpoint.
     */
    private List<EgressEndpoint> additionalEgressEndpoints;

    /*
     * The indicator of whether the platform default endpoints are allowed for the egress traffic.
     */
    private CloudServicesNetworkEnableDefaultEgressEndpoints enableDefaultEgressEndpoints;

    /**
     * Creates an instance of CloudServicesNetworkPatchProperties class.
     */
    public CloudServicesNetworkPatchProperties() {
    }

    /**
     * Get the additionalEgressEndpoints property: The list of egress endpoints. This allows for connection from a
     * Hybrid AKS cluster to the specified endpoint.
     * 
     * @return the additionalEgressEndpoints value.
     */
    public List<EgressEndpoint> additionalEgressEndpoints() {
        return this.additionalEgressEndpoints;
    }

    /**
     * Set the additionalEgressEndpoints property: The list of egress endpoints. This allows for connection from a
     * Hybrid AKS cluster to the specified endpoint.
     * 
     * @param additionalEgressEndpoints the additionalEgressEndpoints value to set.
     * @return the CloudServicesNetworkPatchProperties object itself.
     */
    public CloudServicesNetworkPatchProperties
        withAdditionalEgressEndpoints(List<EgressEndpoint> additionalEgressEndpoints) {
        this.additionalEgressEndpoints = additionalEgressEndpoints;
        return this;
    }

    /**
     * Get the enableDefaultEgressEndpoints property: The indicator of whether the platform default endpoints are
     * allowed for the egress traffic.
     * 
     * @return the enableDefaultEgressEndpoints value.
     */
    public CloudServicesNetworkEnableDefaultEgressEndpoints enableDefaultEgressEndpoints() {
        return this.enableDefaultEgressEndpoints;
    }

    /**
     * Set the enableDefaultEgressEndpoints property: The indicator of whether the platform default endpoints are
     * allowed for the egress traffic.
     * 
     * @param enableDefaultEgressEndpoints the enableDefaultEgressEndpoints value to set.
     * @return the CloudServicesNetworkPatchProperties object itself.
     */
    public CloudServicesNetworkPatchProperties withEnableDefaultEgressEndpoints(
        CloudServicesNetworkEnableDefaultEgressEndpoints enableDefaultEgressEndpoints) {
        this.enableDefaultEgressEndpoints = enableDefaultEgressEndpoints;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (additionalEgressEndpoints() != null) {
            additionalEgressEndpoints().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("additionalEgressEndpoints", this.additionalEgressEndpoints,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("enableDefaultEgressEndpoints",
            this.enableDefaultEgressEndpoints == null ? null : this.enableDefaultEgressEndpoints.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CloudServicesNetworkPatchProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CloudServicesNetworkPatchProperties if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CloudServicesNetworkPatchProperties.
     */
    public static CloudServicesNetworkPatchProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CloudServicesNetworkPatchProperties deserializedCloudServicesNetworkPatchProperties
                = new CloudServicesNetworkPatchProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("additionalEgressEndpoints".equals(fieldName)) {
                    List<EgressEndpoint> additionalEgressEndpoints
                        = reader.readArray(reader1 -> EgressEndpoint.fromJson(reader1));
                    deserializedCloudServicesNetworkPatchProperties.additionalEgressEndpoints
                        = additionalEgressEndpoints;
                } else if ("enableDefaultEgressEndpoints".equals(fieldName)) {
                    deserializedCloudServicesNetworkPatchProperties.enableDefaultEgressEndpoints
                        = CloudServicesNetworkEnableDefaultEgressEndpoints.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCloudServicesNetworkPatchProperties;
        });
    }
}
