// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.networkcloud.models.BgpPeer;
import com.azure.resourcemanager.networkcloud.models.CniBgpConfiguration;
import com.azure.resourcemanager.networkcloud.models.DefaultCniNetworkDetailedStatus;
import com.azure.resourcemanager.networkcloud.models.DefaultCniNetworkProvisioningState;
import com.azure.resourcemanager.networkcloud.models.IpAllocationType;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** DefaultCniNetworkProperties represents properties of the default CNI network. */
@Fluent
public final class DefaultCniNetworkProperties {
    /*
     * The resource ID of the Network Cloud cluster this default CNI network is associated with.
     */
    @JsonProperty(value = "clusterId", access = JsonProperty.Access.WRITE_ONLY)
    private String clusterId;

    /*
     * The autonomous system number that the fabric expects to peer with, derived from the associated L3 isolation
     * domain.
     */
    @JsonProperty(value = "cniAsNumber", access = JsonProperty.Access.WRITE_ONLY)
    private Long cniAsNumber;

    /*
     * CniBgpConfiguration represents the Calico BGP configuration.
     *
     * The Calico BGP configuration.
     */
    @JsonProperty(value = "cniBgpConfiguration")
    private CniBgpConfiguration cniBgpConfiguration;

    /*
     * The more detailed status of the default CNI network.
     */
    @JsonProperty(value = "detailedStatus", access = JsonProperty.Access.WRITE_ONLY)
    private DefaultCniNetworkDetailedStatus detailedStatus;

    /*
     * The descriptive message about the current detailed status.
     */
    @JsonProperty(value = "detailedStatusMessage", access = JsonProperty.Access.WRITE_ONLY)
    private String detailedStatusMessage;

    /*
     * The L3 isolation fabric BGP peering connectivity information necessary for BGP peering the Hybrid AKS Cluster
     * with the switch fabric.
     */
    @JsonProperty(value = "fabricBgpPeers", access = JsonProperty.Access.WRITE_ONLY)
    private List<BgpPeer> fabricBgpPeers;

    /*
     * The list of Hybrid AKS cluster resource ID(s) that are associated with this default CNI network.
     */
    @JsonProperty(value = "hybridAksClustersAssociatedIds", access = JsonProperty.Access.WRITE_ONLY)
    private List<String> hybridAksClustersAssociatedIds;

    /*
     * The name of the interface that will be present in the virtual machine to represent this network.
     */
    @JsonProperty(value = "interfaceName", access = JsonProperty.Access.WRITE_ONLY)
    private String interfaceName;

    /*
     * The type of the IP address allocation.
     */
    @JsonProperty(value = "ipAllocationType")
    private IpAllocationType ipAllocationType;

    /*
     * The IPV4 prefix (CIDR) assigned to this default CNI network. It is required when the IP allocation type
     * is IPV4 or DualStack.
     */
    @JsonProperty(value = "ipv4ConnectedPrefix")
    private String ipv4ConnectedPrefix;

    /*
     * The IPV6 prefix (CIDR) assigned to this default CNI network. It is required when the IP allocation type
     * is IPV6 or DualStack.
     */
    @JsonProperty(value = "ipv6ConnectedPrefix")
    private String ipv6ConnectedPrefix;

    /*
     * The resource ID of the Network Fabric l3IsolationDomain.
     */
    @JsonProperty(value = "l3IsolationDomainId", required = true)
    private String l3IsolationDomainId;

    /*
     * The provisioning state of the default CNI network.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private DefaultCniNetworkProvisioningState provisioningState;

    /*
     * The VLAN from the l3IsolationDomain that is used for this network.
     */
    @JsonProperty(value = "vlan", required = true)
    private long vlan;

    /** Creates an instance of DefaultCniNetworkProperties class. */
    public DefaultCniNetworkProperties() {
    }

    /**
     * Get the clusterId property: The resource ID of the Network Cloud cluster this default CNI network is associated
     * with.
     *
     * @return the clusterId value.
     */
    public String clusterId() {
        return this.clusterId;
    }

    /**
     * Get the cniAsNumber property: The autonomous system number that the fabric expects to peer with, derived from the
     * associated L3 isolation domain.
     *
     * @return the cniAsNumber value.
     */
    public Long cniAsNumber() {
        return this.cniAsNumber;
    }

    /**
     * Get the cniBgpConfiguration property: CniBgpConfiguration represents the Calico BGP configuration.
     *
     * <p>The Calico BGP configuration.
     *
     * @return the cniBgpConfiguration value.
     */
    public CniBgpConfiguration cniBgpConfiguration() {
        return this.cniBgpConfiguration;
    }

    /**
     * Set the cniBgpConfiguration property: CniBgpConfiguration represents the Calico BGP configuration.
     *
     * <p>The Calico BGP configuration.
     *
     * @param cniBgpConfiguration the cniBgpConfiguration value to set.
     * @return the DefaultCniNetworkProperties object itself.
     */
    public DefaultCniNetworkProperties withCniBgpConfiguration(CniBgpConfiguration cniBgpConfiguration) {
        this.cniBgpConfiguration = cniBgpConfiguration;
        return this;
    }

    /**
     * Get the detailedStatus property: The more detailed status of the default CNI network.
     *
     * @return the detailedStatus value.
     */
    public DefaultCniNetworkDetailedStatus detailedStatus() {
        return this.detailedStatus;
    }

    /**
     * Get the detailedStatusMessage property: The descriptive message about the current detailed status.
     *
     * @return the detailedStatusMessage value.
     */
    public String detailedStatusMessage() {
        return this.detailedStatusMessage;
    }

    /**
     * Get the fabricBgpPeers property: The L3 isolation fabric BGP peering connectivity information necessary for BGP
     * peering the Hybrid AKS Cluster with the switch fabric.
     *
     * @return the fabricBgpPeers value.
     */
    public List<BgpPeer> fabricBgpPeers() {
        return this.fabricBgpPeers;
    }

    /**
     * Get the hybridAksClustersAssociatedIds property: The list of Hybrid AKS cluster resource ID(s) that are
     * associated with this default CNI network.
     *
     * @return the hybridAksClustersAssociatedIds value.
     */
    public List<String> hybridAksClustersAssociatedIds() {
        return this.hybridAksClustersAssociatedIds;
    }

    /**
     * Get the interfaceName property: The name of the interface that will be present in the virtual machine to
     * represent this network.
     *
     * @return the interfaceName value.
     */
    public String interfaceName() {
        return this.interfaceName;
    }

    /**
     * Get the ipAllocationType property: The type of the IP address allocation.
     *
     * @return the ipAllocationType value.
     */
    public IpAllocationType ipAllocationType() {
        return this.ipAllocationType;
    }

    /**
     * Set the ipAllocationType property: The type of the IP address allocation.
     *
     * @param ipAllocationType the ipAllocationType value to set.
     * @return the DefaultCniNetworkProperties object itself.
     */
    public DefaultCniNetworkProperties withIpAllocationType(IpAllocationType ipAllocationType) {
        this.ipAllocationType = ipAllocationType;
        return this;
    }

    /**
     * Get the ipv4ConnectedPrefix property: The IPV4 prefix (CIDR) assigned to this default CNI network. It is required
     * when the IP allocation type is IPV4 or DualStack.
     *
     * @return the ipv4ConnectedPrefix value.
     */
    public String ipv4ConnectedPrefix() {
        return this.ipv4ConnectedPrefix;
    }

    /**
     * Set the ipv4ConnectedPrefix property: The IPV4 prefix (CIDR) assigned to this default CNI network. It is required
     * when the IP allocation type is IPV4 or DualStack.
     *
     * @param ipv4ConnectedPrefix the ipv4ConnectedPrefix value to set.
     * @return the DefaultCniNetworkProperties object itself.
     */
    public DefaultCniNetworkProperties withIpv4ConnectedPrefix(String ipv4ConnectedPrefix) {
        this.ipv4ConnectedPrefix = ipv4ConnectedPrefix;
        return this;
    }

    /**
     * Get the ipv6ConnectedPrefix property: The IPV6 prefix (CIDR) assigned to this default CNI network. It is required
     * when the IP allocation type is IPV6 or DualStack.
     *
     * @return the ipv6ConnectedPrefix value.
     */
    public String ipv6ConnectedPrefix() {
        return this.ipv6ConnectedPrefix;
    }

    /**
     * Set the ipv6ConnectedPrefix property: The IPV6 prefix (CIDR) assigned to this default CNI network. It is required
     * when the IP allocation type is IPV6 or DualStack.
     *
     * @param ipv6ConnectedPrefix the ipv6ConnectedPrefix value to set.
     * @return the DefaultCniNetworkProperties object itself.
     */
    public DefaultCniNetworkProperties withIpv6ConnectedPrefix(String ipv6ConnectedPrefix) {
        this.ipv6ConnectedPrefix = ipv6ConnectedPrefix;
        return this;
    }

    /**
     * Get the l3IsolationDomainId property: The resource ID of the Network Fabric l3IsolationDomain.
     *
     * @return the l3IsolationDomainId value.
     */
    public String l3IsolationDomainId() {
        return this.l3IsolationDomainId;
    }

    /**
     * Set the l3IsolationDomainId property: The resource ID of the Network Fabric l3IsolationDomain.
     *
     * @param l3IsolationDomainId the l3IsolationDomainId value to set.
     * @return the DefaultCniNetworkProperties object itself.
     */
    public DefaultCniNetworkProperties withL3IsolationDomainId(String l3IsolationDomainId) {
        this.l3IsolationDomainId = l3IsolationDomainId;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state of the default CNI network.
     *
     * @return the provisioningState value.
     */
    public DefaultCniNetworkProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the vlan property: The VLAN from the l3IsolationDomain that is used for this network.
     *
     * @return the vlan value.
     */
    public long vlan() {
        return this.vlan;
    }

    /**
     * Set the vlan property: The VLAN from the l3IsolationDomain that is used for this network.
     *
     * @param vlan the vlan value to set.
     * @return the DefaultCniNetworkProperties object itself.
     */
    public DefaultCniNetworkProperties withVlan(long vlan) {
        this.vlan = vlan;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (cniBgpConfiguration() != null) {
            cniBgpConfiguration().validate();
        }
        if (fabricBgpPeers() != null) {
            fabricBgpPeers().forEach(e -> e.validate());
        }
        if (l3IsolationDomainId() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property l3IsolationDomainId in model DefaultCniNetworkProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DefaultCniNetworkProperties.class);
}
