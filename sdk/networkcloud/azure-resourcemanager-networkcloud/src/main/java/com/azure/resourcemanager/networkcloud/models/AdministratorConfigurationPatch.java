// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * AdministratorConfigurationPatch represents the patching capabilities for the administrator configuration.
 */
@Fluent
public final class AdministratorConfigurationPatch implements JsonSerializable<AdministratorConfigurationPatch> {
    /*
     * SshPublicKey represents the public key used to authenticate with a resource through SSH.
     */
    private List<SshPublicKey> sshPublicKeys;

    /**
     * Creates an instance of AdministratorConfigurationPatch class.
     */
    public AdministratorConfigurationPatch() {
    }

    /**
     * Get the sshPublicKeys property: SshPublicKey represents the public key used to authenticate with a resource
     * through SSH.
     * 
     * @return the sshPublicKeys value.
     */
    public List<SshPublicKey> sshPublicKeys() {
        return this.sshPublicKeys;
    }

    /**
     * Set the sshPublicKeys property: SshPublicKey represents the public key used to authenticate with a resource
     * through SSH.
     * 
     * @param sshPublicKeys the sshPublicKeys value to set.
     * @return the AdministratorConfigurationPatch object itself.
     */
    public AdministratorConfigurationPatch withSshPublicKeys(List<SshPublicKey> sshPublicKeys) {
        this.sshPublicKeys = sshPublicKeys;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (sshPublicKeys() != null) {
            sshPublicKeys().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("sshPublicKeys", this.sshPublicKeys, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AdministratorConfigurationPatch from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AdministratorConfigurationPatch if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AdministratorConfigurationPatch.
     */
    public static AdministratorConfigurationPatch fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AdministratorConfigurationPatch deserializedAdministratorConfigurationPatch
                = new AdministratorConfigurationPatch();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sshPublicKeys".equals(fieldName)) {
                    List<SshPublicKey> sshPublicKeys = reader.readArray(reader1 -> SshPublicKey.fromJson(reader1));
                    deserializedAdministratorConfigurationPatch.sshPublicKeys = sshPublicKeys;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAdministratorConfigurationPatch;
        });
    }
}
