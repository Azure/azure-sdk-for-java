// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.networkcloud.models.ClusterAvailableUpgradeVersion;
import com.azure.resourcemanager.networkcloud.models.ClusterCapacity;
import com.azure.resourcemanager.networkcloud.models.ClusterConnectionStatus;
import com.azure.resourcemanager.networkcloud.models.ClusterDetailedStatus;
import com.azure.resourcemanager.networkcloud.models.ClusterManagerConnectionStatus;
import com.azure.resourcemanager.networkcloud.models.ClusterProvisioningState;
import com.azure.resourcemanager.networkcloud.models.ClusterSecretArchive;
import com.azure.resourcemanager.networkcloud.models.ClusterType;
import com.azure.resourcemanager.networkcloud.models.ClusterUpdateStrategy;
import com.azure.resourcemanager.networkcloud.models.CommandOutputSettings;
import com.azure.resourcemanager.networkcloud.models.ExtendedLocation;
import com.azure.resourcemanager.networkcloud.models.ManagedResourceGroupConfiguration;
import com.azure.resourcemanager.networkcloud.models.RackDefinition;
import com.azure.resourcemanager.networkcloud.models.RuntimeProtectionConfiguration;
import com.azure.resourcemanager.networkcloud.models.ServicePrincipalInformation;
import com.azure.resourcemanager.networkcloud.models.ValidationThreshold;
import java.io.IOException;
import java.util.List;

/**
 * ClusterProperties represents the properties of a cluster.
 */
@Fluent
public final class ClusterProperties implements JsonSerializable<ClusterProperties> {
    /*
     * The rack definition that is intended to reflect only a single rack in a single rack cluster, or an aggregator
     * rack in a multi-rack cluster.
     */
    private RackDefinition aggregatorOrSingleRackDefinition;

    /*
     * The resource ID of the Log Analytics Workspace that will be used for storing relevant logs.
     */
    private String analyticsWorkspaceId;

    /*
     * The list of cluster runtime version upgrades available for this cluster.
     */
    private List<ClusterAvailableUpgradeVersion> availableUpgradeVersions;

    /*
     * The capacity supported by this cluster.
     */
    private ClusterCapacity clusterCapacity;

    /*
     * The latest heartbeat status between the cluster manager and the cluster.
     */
    private ClusterConnectionStatus clusterConnectionStatus;

    /*
     * The extended location (custom location) that represents the cluster's control plane location. This extended
     * location is used to route the requests of child objects of the cluster that are handled by the platform operator.
     */
    private ExtendedLocation clusterExtendedLocation;

    /*
     * The customer-provided location information to identify where the cluster resides.
     */
    private String clusterLocation;

    /*
     * The latest connectivity status between cluster manager and the cluster.
     */
    private ClusterManagerConnectionStatus clusterManagerConnectionStatus;

    /*
     * The resource ID of the cluster manager that manages this cluster. This is set by the Cluster Manager when the
     * cluster is created.
     */
    private String clusterManagerId;

    /*
     * The service principal to be used by the cluster during Arc Appliance installation.
     */
    private ServicePrincipalInformation clusterServicePrincipal;

    /*
     * The type of rack configuration for the cluster.
     */
    private ClusterType clusterType;

    /*
     * The current runtime version of the cluster.
     */
    private String clusterVersion;

    /*
     * The settings for commands run in this cluster, such as bare metal machine run read only commands and data
     * extracts.
     */
    private CommandOutputSettings commandOutputSettings;

    /*
     * The validation threshold indicating the allowable failures of compute machines during environment validation and
     * deployment.
     */
    private ValidationThreshold computeDeploymentThreshold;

    /*
     * The list of rack definitions for the compute racks in a multi-rack
     * cluster, or an empty list in a single-rack cluster.
     */
    private List<RackDefinition> computeRackDefinitions;

    /*
     * The current detailed status of the cluster.
     */
    private ClusterDetailedStatus detailedStatus;

    /*
     * The descriptive message about the detailed status.
     */
    private String detailedStatusMessage;

    /*
     * Field Deprecated. This field will not be populated in an upcoming version. The extended location (custom
     * location) that represents the Hybrid AKS control plane location. This extended location is used when creating
     * provisioned clusters (Hybrid AKS clusters).
     */
    private ExtendedLocation hybridAksExtendedLocation;

    /*
     * The configuration of the managed resource group associated with the resource.
     */
    private ManagedResourceGroupConfiguration managedResourceGroupConfiguration;

    /*
     * The count of Manual Action Taken (MAT) events that have not been validated.
     */
    private Long manualActionCount;

    /*
     * The resource ID of the Network Fabric associated with the cluster.
     */
    private String networkFabricId;

    /*
     * The provisioning state of the cluster.
     */
    private ClusterProvisioningState provisioningState;

    /*
     * The settings for cluster runtime protection.
     */
    private RuntimeProtectionConfiguration runtimeProtectionConfiguration;

    /*
     * The configuration for use of a key vault to store secrets for later retrieval by the operator.
     */
    private ClusterSecretArchive secretArchive;

    /*
     * The support end date of the runtime version of the cluster.
     */
    private String supportExpiryDate;

    /*
     * The strategy for updating the cluster.
     */
    private ClusterUpdateStrategy updateStrategy;

    /*
     * The list of workload resource IDs that are hosted within this cluster.
     */
    private List<String> workloadResourceIds;

    /**
     * Creates an instance of ClusterProperties class.
     */
    public ClusterProperties() {
    }

    /**
     * Get the aggregatorOrSingleRackDefinition property: The rack definition that is intended to reflect only a single
     * rack in a single rack cluster, or an aggregator rack in a multi-rack cluster.
     * 
     * @return the aggregatorOrSingleRackDefinition value.
     */
    public RackDefinition aggregatorOrSingleRackDefinition() {
        return this.aggregatorOrSingleRackDefinition;
    }

    /**
     * Set the aggregatorOrSingleRackDefinition property: The rack definition that is intended to reflect only a single
     * rack in a single rack cluster, or an aggregator rack in a multi-rack cluster.
     * 
     * @param aggregatorOrSingleRackDefinition the aggregatorOrSingleRackDefinition value to set.
     * @return the ClusterProperties object itself.
     */
    public ClusterProperties withAggregatorOrSingleRackDefinition(RackDefinition aggregatorOrSingleRackDefinition) {
        this.aggregatorOrSingleRackDefinition = aggregatorOrSingleRackDefinition;
        return this;
    }

    /**
     * Get the analyticsWorkspaceId property: The resource ID of the Log Analytics Workspace that will be used for
     * storing relevant logs.
     * 
     * @return the analyticsWorkspaceId value.
     */
    public String analyticsWorkspaceId() {
        return this.analyticsWorkspaceId;
    }

    /**
     * Set the analyticsWorkspaceId property: The resource ID of the Log Analytics Workspace that will be used for
     * storing relevant logs.
     * 
     * @param analyticsWorkspaceId the analyticsWorkspaceId value to set.
     * @return the ClusterProperties object itself.
     */
    public ClusterProperties withAnalyticsWorkspaceId(String analyticsWorkspaceId) {
        this.analyticsWorkspaceId = analyticsWorkspaceId;
        return this;
    }

    /**
     * Get the availableUpgradeVersions property: The list of cluster runtime version upgrades available for this
     * cluster.
     * 
     * @return the availableUpgradeVersions value.
     */
    public List<ClusterAvailableUpgradeVersion> availableUpgradeVersions() {
        return this.availableUpgradeVersions;
    }

    /**
     * Get the clusterCapacity property: The capacity supported by this cluster.
     * 
     * @return the clusterCapacity value.
     */
    public ClusterCapacity clusterCapacity() {
        return this.clusterCapacity;
    }

    /**
     * Get the clusterConnectionStatus property: The latest heartbeat status between the cluster manager and the
     * cluster.
     * 
     * @return the clusterConnectionStatus value.
     */
    public ClusterConnectionStatus clusterConnectionStatus() {
        return this.clusterConnectionStatus;
    }

    /**
     * Get the clusterExtendedLocation property: The extended location (custom location) that represents the cluster's
     * control plane location. This extended location is used to route the requests of child objects of the cluster that
     * are handled by the platform operator.
     * 
     * @return the clusterExtendedLocation value.
     */
    public ExtendedLocation clusterExtendedLocation() {
        return this.clusterExtendedLocation;
    }

    /**
     * Get the clusterLocation property: The customer-provided location information to identify where the cluster
     * resides.
     * 
     * @return the clusterLocation value.
     */
    public String clusterLocation() {
        return this.clusterLocation;
    }

    /**
     * Set the clusterLocation property: The customer-provided location information to identify where the cluster
     * resides.
     * 
     * @param clusterLocation the clusterLocation value to set.
     * @return the ClusterProperties object itself.
     */
    public ClusterProperties withClusterLocation(String clusterLocation) {
        this.clusterLocation = clusterLocation;
        return this;
    }

    /**
     * Get the clusterManagerConnectionStatus property: The latest connectivity status between cluster manager and the
     * cluster.
     * 
     * @return the clusterManagerConnectionStatus value.
     */
    public ClusterManagerConnectionStatus clusterManagerConnectionStatus() {
        return this.clusterManagerConnectionStatus;
    }

    /**
     * Get the clusterManagerId property: The resource ID of the cluster manager that manages this cluster. This is set
     * by the Cluster Manager when the cluster is created.
     * 
     * @return the clusterManagerId value.
     */
    public String clusterManagerId() {
        return this.clusterManagerId;
    }

    /**
     * Get the clusterServicePrincipal property: The service principal to be used by the cluster during Arc Appliance
     * installation.
     * 
     * @return the clusterServicePrincipal value.
     */
    public ServicePrincipalInformation clusterServicePrincipal() {
        return this.clusterServicePrincipal;
    }

    /**
     * Set the clusterServicePrincipal property: The service principal to be used by the cluster during Arc Appliance
     * installation.
     * 
     * @param clusterServicePrincipal the clusterServicePrincipal value to set.
     * @return the ClusterProperties object itself.
     */
    public ClusterProperties withClusterServicePrincipal(ServicePrincipalInformation clusterServicePrincipal) {
        this.clusterServicePrincipal = clusterServicePrincipal;
        return this;
    }

    /**
     * Get the clusterType property: The type of rack configuration for the cluster.
     * 
     * @return the clusterType value.
     */
    public ClusterType clusterType() {
        return this.clusterType;
    }

    /**
     * Set the clusterType property: The type of rack configuration for the cluster.
     * 
     * @param clusterType the clusterType value to set.
     * @return the ClusterProperties object itself.
     */
    public ClusterProperties withClusterType(ClusterType clusterType) {
        this.clusterType = clusterType;
        return this;
    }

    /**
     * Get the clusterVersion property: The current runtime version of the cluster.
     * 
     * @return the clusterVersion value.
     */
    public String clusterVersion() {
        return this.clusterVersion;
    }

    /**
     * Set the clusterVersion property: The current runtime version of the cluster.
     * 
     * @param clusterVersion the clusterVersion value to set.
     * @return the ClusterProperties object itself.
     */
    public ClusterProperties withClusterVersion(String clusterVersion) {
        this.clusterVersion = clusterVersion;
        return this;
    }

    /**
     * Get the commandOutputSettings property: The settings for commands run in this cluster, such as bare metal machine
     * run read only commands and data extracts.
     * 
     * @return the commandOutputSettings value.
     */
    public CommandOutputSettings commandOutputSettings() {
        return this.commandOutputSettings;
    }

    /**
     * Set the commandOutputSettings property: The settings for commands run in this cluster, such as bare metal machine
     * run read only commands and data extracts.
     * 
     * @param commandOutputSettings the commandOutputSettings value to set.
     * @return the ClusterProperties object itself.
     */
    public ClusterProperties withCommandOutputSettings(CommandOutputSettings commandOutputSettings) {
        this.commandOutputSettings = commandOutputSettings;
        return this;
    }

    /**
     * Get the computeDeploymentThreshold property: The validation threshold indicating the allowable failures of
     * compute machines during environment validation and deployment.
     * 
     * @return the computeDeploymentThreshold value.
     */
    public ValidationThreshold computeDeploymentThreshold() {
        return this.computeDeploymentThreshold;
    }

    /**
     * Set the computeDeploymentThreshold property: The validation threshold indicating the allowable failures of
     * compute machines during environment validation and deployment.
     * 
     * @param computeDeploymentThreshold the computeDeploymentThreshold value to set.
     * @return the ClusterProperties object itself.
     */
    public ClusterProperties withComputeDeploymentThreshold(ValidationThreshold computeDeploymentThreshold) {
        this.computeDeploymentThreshold = computeDeploymentThreshold;
        return this;
    }

    /**
     * Get the computeRackDefinitions property: The list of rack definitions for the compute racks in a multi-rack
     * cluster, or an empty list in a single-rack cluster.
     * 
     * @return the computeRackDefinitions value.
     */
    public List<RackDefinition> computeRackDefinitions() {
        return this.computeRackDefinitions;
    }

    /**
     * Set the computeRackDefinitions property: The list of rack definitions for the compute racks in a multi-rack
     * cluster, or an empty list in a single-rack cluster.
     * 
     * @param computeRackDefinitions the computeRackDefinitions value to set.
     * @return the ClusterProperties object itself.
     */
    public ClusterProperties withComputeRackDefinitions(List<RackDefinition> computeRackDefinitions) {
        this.computeRackDefinitions = computeRackDefinitions;
        return this;
    }

    /**
     * Get the detailedStatus property: The current detailed status of the cluster.
     * 
     * @return the detailedStatus value.
     */
    public ClusterDetailedStatus detailedStatus() {
        return this.detailedStatus;
    }

    /**
     * Get the detailedStatusMessage property: The descriptive message about the detailed status.
     * 
     * @return the detailedStatusMessage value.
     */
    public String detailedStatusMessage() {
        return this.detailedStatusMessage;
    }

    /**
     * Get the hybridAksExtendedLocation property: Field Deprecated. This field will not be populated in an upcoming
     * version. The extended location (custom location) that represents the Hybrid AKS control plane location. This
     * extended location is used when creating provisioned clusters (Hybrid AKS clusters).
     * 
     * @return the hybridAksExtendedLocation value.
     */
    public ExtendedLocation hybridAksExtendedLocation() {
        return this.hybridAksExtendedLocation;
    }

    /**
     * Get the managedResourceGroupConfiguration property: The configuration of the managed resource group associated
     * with the resource.
     * 
     * @return the managedResourceGroupConfiguration value.
     */
    public ManagedResourceGroupConfiguration managedResourceGroupConfiguration() {
        return this.managedResourceGroupConfiguration;
    }

    /**
     * Set the managedResourceGroupConfiguration property: The configuration of the managed resource group associated
     * with the resource.
     * 
     * @param managedResourceGroupConfiguration the managedResourceGroupConfiguration value to set.
     * @return the ClusterProperties object itself.
     */
    public ClusterProperties
        withManagedResourceGroupConfiguration(ManagedResourceGroupConfiguration managedResourceGroupConfiguration) {
        this.managedResourceGroupConfiguration = managedResourceGroupConfiguration;
        return this;
    }

    /**
     * Get the manualActionCount property: The count of Manual Action Taken (MAT) events that have not been validated.
     * 
     * @return the manualActionCount value.
     */
    public Long manualActionCount() {
        return this.manualActionCount;
    }

    /**
     * Get the networkFabricId property: The resource ID of the Network Fabric associated with the cluster.
     * 
     * @return the networkFabricId value.
     */
    public String networkFabricId() {
        return this.networkFabricId;
    }

    /**
     * Set the networkFabricId property: The resource ID of the Network Fabric associated with the cluster.
     * 
     * @param networkFabricId the networkFabricId value to set.
     * @return the ClusterProperties object itself.
     */
    public ClusterProperties withNetworkFabricId(String networkFabricId) {
        this.networkFabricId = networkFabricId;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state of the cluster.
     * 
     * @return the provisioningState value.
     */
    public ClusterProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the runtimeProtectionConfiguration property: The settings for cluster runtime protection.
     * 
     * @return the runtimeProtectionConfiguration value.
     */
    public RuntimeProtectionConfiguration runtimeProtectionConfiguration() {
        return this.runtimeProtectionConfiguration;
    }

    /**
     * Set the runtimeProtectionConfiguration property: The settings for cluster runtime protection.
     * 
     * @param runtimeProtectionConfiguration the runtimeProtectionConfiguration value to set.
     * @return the ClusterProperties object itself.
     */
    public ClusterProperties
        withRuntimeProtectionConfiguration(RuntimeProtectionConfiguration runtimeProtectionConfiguration) {
        this.runtimeProtectionConfiguration = runtimeProtectionConfiguration;
        return this;
    }

    /**
     * Get the secretArchive property: The configuration for use of a key vault to store secrets for later retrieval by
     * the operator.
     * 
     * @return the secretArchive value.
     */
    public ClusterSecretArchive secretArchive() {
        return this.secretArchive;
    }

    /**
     * Set the secretArchive property: The configuration for use of a key vault to store secrets for later retrieval by
     * the operator.
     * 
     * @param secretArchive the secretArchive value to set.
     * @return the ClusterProperties object itself.
     */
    public ClusterProperties withSecretArchive(ClusterSecretArchive secretArchive) {
        this.secretArchive = secretArchive;
        return this;
    }

    /**
     * Get the supportExpiryDate property: The support end date of the runtime version of the cluster.
     * 
     * @return the supportExpiryDate value.
     */
    public String supportExpiryDate() {
        return this.supportExpiryDate;
    }

    /**
     * Get the updateStrategy property: The strategy for updating the cluster.
     * 
     * @return the updateStrategy value.
     */
    public ClusterUpdateStrategy updateStrategy() {
        return this.updateStrategy;
    }

    /**
     * Set the updateStrategy property: The strategy for updating the cluster.
     * 
     * @param updateStrategy the updateStrategy value to set.
     * @return the ClusterProperties object itself.
     */
    public ClusterProperties withUpdateStrategy(ClusterUpdateStrategy updateStrategy) {
        this.updateStrategy = updateStrategy;
        return this;
    }

    /**
     * Get the workloadResourceIds property: The list of workload resource IDs that are hosted within this cluster.
     * 
     * @return the workloadResourceIds value.
     */
    public List<String> workloadResourceIds() {
        return this.workloadResourceIds;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (aggregatorOrSingleRackDefinition() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property aggregatorOrSingleRackDefinition in model ClusterProperties"));
        } else {
            aggregatorOrSingleRackDefinition().validate();
        }
        if (availableUpgradeVersions() != null) {
            availableUpgradeVersions().forEach(e -> e.validate());
        }
        if (clusterCapacity() != null) {
            clusterCapacity().validate();
        }
        if (clusterExtendedLocation() != null) {
            clusterExtendedLocation().validate();
        }
        if (clusterServicePrincipal() != null) {
            clusterServicePrincipal().validate();
        }
        if (clusterType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property clusterType in model ClusterProperties"));
        }
        if (clusterVersion() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property clusterVersion in model ClusterProperties"));
        }
        if (commandOutputSettings() != null) {
            commandOutputSettings().validate();
        }
        if (computeDeploymentThreshold() != null) {
            computeDeploymentThreshold().validate();
        }
        if (computeRackDefinitions() != null) {
            computeRackDefinitions().forEach(e -> e.validate());
        }
        if (hybridAksExtendedLocation() != null) {
            hybridAksExtendedLocation().validate();
        }
        if (managedResourceGroupConfiguration() != null) {
            managedResourceGroupConfiguration().validate();
        }
        if (networkFabricId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property networkFabricId in model ClusterProperties"));
        }
        if (runtimeProtectionConfiguration() != null) {
            runtimeProtectionConfiguration().validate();
        }
        if (secretArchive() != null) {
            secretArchive().validate();
        }
        if (updateStrategy() != null) {
            updateStrategy().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ClusterProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("aggregatorOrSingleRackDefinition", this.aggregatorOrSingleRackDefinition);
        jsonWriter.writeStringField("clusterType", this.clusterType == null ? null : this.clusterType.toString());
        jsonWriter.writeStringField("clusterVersion", this.clusterVersion);
        jsonWriter.writeStringField("networkFabricId", this.networkFabricId);
        jsonWriter.writeStringField("analyticsWorkspaceId", this.analyticsWorkspaceId);
        jsonWriter.writeStringField("clusterLocation", this.clusterLocation);
        jsonWriter.writeJsonField("clusterServicePrincipal", this.clusterServicePrincipal);
        jsonWriter.writeJsonField("commandOutputSettings", this.commandOutputSettings);
        jsonWriter.writeJsonField("computeDeploymentThreshold", this.computeDeploymentThreshold);
        jsonWriter.writeArrayField("computeRackDefinitions", this.computeRackDefinitions,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("managedResourceGroupConfiguration", this.managedResourceGroupConfiguration);
        jsonWriter.writeJsonField("runtimeProtectionConfiguration", this.runtimeProtectionConfiguration);
        jsonWriter.writeJsonField("secretArchive", this.secretArchive);
        jsonWriter.writeJsonField("updateStrategy", this.updateStrategy);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ClusterProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ClusterProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ClusterProperties.
     */
    public static ClusterProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ClusterProperties deserializedClusterProperties = new ClusterProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("aggregatorOrSingleRackDefinition".equals(fieldName)) {
                    deserializedClusterProperties.aggregatorOrSingleRackDefinition = RackDefinition.fromJson(reader);
                } else if ("clusterType".equals(fieldName)) {
                    deserializedClusterProperties.clusterType = ClusterType.fromString(reader.getString());
                } else if ("clusterVersion".equals(fieldName)) {
                    deserializedClusterProperties.clusterVersion = reader.getString();
                } else if ("networkFabricId".equals(fieldName)) {
                    deserializedClusterProperties.networkFabricId = reader.getString();
                } else if ("analyticsWorkspaceId".equals(fieldName)) {
                    deserializedClusterProperties.analyticsWorkspaceId = reader.getString();
                } else if ("availableUpgradeVersions".equals(fieldName)) {
                    List<ClusterAvailableUpgradeVersion> availableUpgradeVersions
                        = reader.readArray(reader1 -> ClusterAvailableUpgradeVersion.fromJson(reader1));
                    deserializedClusterProperties.availableUpgradeVersions = availableUpgradeVersions;
                } else if ("clusterCapacity".equals(fieldName)) {
                    deserializedClusterProperties.clusterCapacity = ClusterCapacity.fromJson(reader);
                } else if ("clusterConnectionStatus".equals(fieldName)) {
                    deserializedClusterProperties.clusterConnectionStatus
                        = ClusterConnectionStatus.fromString(reader.getString());
                } else if ("clusterExtendedLocation".equals(fieldName)) {
                    deserializedClusterProperties.clusterExtendedLocation = ExtendedLocation.fromJson(reader);
                } else if ("clusterLocation".equals(fieldName)) {
                    deserializedClusterProperties.clusterLocation = reader.getString();
                } else if ("clusterManagerConnectionStatus".equals(fieldName)) {
                    deserializedClusterProperties.clusterManagerConnectionStatus
                        = ClusterManagerConnectionStatus.fromString(reader.getString());
                } else if ("clusterManagerId".equals(fieldName)) {
                    deserializedClusterProperties.clusterManagerId = reader.getString();
                } else if ("clusterServicePrincipal".equals(fieldName)) {
                    deserializedClusterProperties.clusterServicePrincipal
                        = ServicePrincipalInformation.fromJson(reader);
                } else if ("commandOutputSettings".equals(fieldName)) {
                    deserializedClusterProperties.commandOutputSettings = CommandOutputSettings.fromJson(reader);
                } else if ("computeDeploymentThreshold".equals(fieldName)) {
                    deserializedClusterProperties.computeDeploymentThreshold = ValidationThreshold.fromJson(reader);
                } else if ("computeRackDefinitions".equals(fieldName)) {
                    List<RackDefinition> computeRackDefinitions
                        = reader.readArray(reader1 -> RackDefinition.fromJson(reader1));
                    deserializedClusterProperties.computeRackDefinitions = computeRackDefinitions;
                } else if ("detailedStatus".equals(fieldName)) {
                    deserializedClusterProperties.detailedStatus = ClusterDetailedStatus.fromString(reader.getString());
                } else if ("detailedStatusMessage".equals(fieldName)) {
                    deserializedClusterProperties.detailedStatusMessage = reader.getString();
                } else if ("hybridAksExtendedLocation".equals(fieldName)) {
                    deserializedClusterProperties.hybridAksExtendedLocation = ExtendedLocation.fromJson(reader);
                } else if ("managedResourceGroupConfiguration".equals(fieldName)) {
                    deserializedClusterProperties.managedResourceGroupConfiguration
                        = ManagedResourceGroupConfiguration.fromJson(reader);
                } else if ("manualActionCount".equals(fieldName)) {
                    deserializedClusterProperties.manualActionCount = reader.getNullable(JsonReader::getLong);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedClusterProperties.provisioningState
                        = ClusterProvisioningState.fromString(reader.getString());
                } else if ("runtimeProtectionConfiguration".equals(fieldName)) {
                    deserializedClusterProperties.runtimeProtectionConfiguration
                        = RuntimeProtectionConfiguration.fromJson(reader);
                } else if ("secretArchive".equals(fieldName)) {
                    deserializedClusterProperties.secretArchive = ClusterSecretArchive.fromJson(reader);
                } else if ("supportExpiryDate".equals(fieldName)) {
                    deserializedClusterProperties.supportExpiryDate = reader.getString();
                } else if ("updateStrategy".equals(fieldName)) {
                    deserializedClusterProperties.updateStrategy = ClusterUpdateStrategy.fromJson(reader);
                } else if ("workloadResourceIds".equals(fieldName)) {
                    List<String> workloadResourceIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedClusterProperties.workloadResourceIds = workloadResourceIds;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedClusterProperties;
        });
    }
}
