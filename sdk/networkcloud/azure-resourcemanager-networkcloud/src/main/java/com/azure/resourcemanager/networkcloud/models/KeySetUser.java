// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * KeySetUser represents the properties of the user in the key set.
 */
@Fluent
public final class KeySetUser implements JsonSerializable<KeySetUser> {
    /*
     * The user name that will be used for access.
     */
    private String azureUsername;

    /*
     * The free-form description for this user.
     */
    private String description;

    /*
     * The SSH public key that will be provisioned for user access. The user is expected to have the corresponding SSH
     * private key for logging in.
     */
    private SshPublicKey sshPublicKey;

    /*
     * The user principal name (email format) used to validate this user's group membership.
     */
    private String userPrincipalName;

    /**
     * Creates an instance of KeySetUser class.
     */
    public KeySetUser() {
    }

    /**
     * Get the azureUsername property: The user name that will be used for access.
     * 
     * @return the azureUsername value.
     */
    public String azureUsername() {
        return this.azureUsername;
    }

    /**
     * Set the azureUsername property: The user name that will be used for access.
     * 
     * @param azureUsername the azureUsername value to set.
     * @return the KeySetUser object itself.
     */
    public KeySetUser withAzureUsername(String azureUsername) {
        this.azureUsername = azureUsername;
        return this;
    }

    /**
     * Get the description property: The free-form description for this user.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: The free-form description for this user.
     * 
     * @param description the description value to set.
     * @return the KeySetUser object itself.
     */
    public KeySetUser withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the sshPublicKey property: The SSH public key that will be provisioned for user access. The user is expected
     * to have the corresponding SSH private key for logging in.
     * 
     * @return the sshPublicKey value.
     */
    public SshPublicKey sshPublicKey() {
        return this.sshPublicKey;
    }

    /**
     * Set the sshPublicKey property: The SSH public key that will be provisioned for user access. The user is expected
     * to have the corresponding SSH private key for logging in.
     * 
     * @param sshPublicKey the sshPublicKey value to set.
     * @return the KeySetUser object itself.
     */
    public KeySetUser withSshPublicKey(SshPublicKey sshPublicKey) {
        this.sshPublicKey = sshPublicKey;
        return this;
    }

    /**
     * Get the userPrincipalName property: The user principal name (email format) used to validate this user's group
     * membership.
     * 
     * @return the userPrincipalName value.
     */
    public String userPrincipalName() {
        return this.userPrincipalName;
    }

    /**
     * Set the userPrincipalName property: The user principal name (email format) used to validate this user's group
     * membership.
     * 
     * @param userPrincipalName the userPrincipalName value to set.
     * @return the KeySetUser object itself.
     */
    public KeySetUser withUserPrincipalName(String userPrincipalName) {
        this.userPrincipalName = userPrincipalName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (azureUsername() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property azureUsername in model KeySetUser"));
        }
        if (sshPublicKey() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property sshPublicKey in model KeySetUser"));
        } else {
            sshPublicKey().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(KeySetUser.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("azureUserName", this.azureUsername);
        jsonWriter.writeJsonField("sshPublicKey", this.sshPublicKey);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeStringField("userPrincipalName", this.userPrincipalName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of KeySetUser from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of KeySetUser if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the KeySetUser.
     */
    public static KeySetUser fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            KeySetUser deserializedKeySetUser = new KeySetUser();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("azureUserName".equals(fieldName)) {
                    deserializedKeySetUser.azureUsername = reader.getString();
                } else if ("sshPublicKey".equals(fieldName)) {
                    deserializedKeySetUser.sshPublicKey = SshPublicKey.fromJson(reader);
                } else if ("description".equals(fieldName)) {
                    deserializedKeySetUser.description = reader.getString();
                } else if ("userPrincipalName".equals(fieldName)) {
                    deserializedKeySetUser.userPrincipalName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedKeySetUser;
        });
    }
}
