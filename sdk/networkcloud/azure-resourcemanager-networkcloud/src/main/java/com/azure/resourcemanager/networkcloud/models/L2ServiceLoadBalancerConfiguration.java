// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * L2ServiceLoadBalancerConfiguration represents the configuration of a layer 2 service load balancer.
 */
@Fluent
public final class L2ServiceLoadBalancerConfiguration implements JsonSerializable<L2ServiceLoadBalancerConfiguration> {
    /*
     * The list of pools of IP addresses that can be allocated to load balancer services.
     */
    private List<IpAddressPool> ipAddressPools;

    /**
     * Creates an instance of L2ServiceLoadBalancerConfiguration class.
     */
    public L2ServiceLoadBalancerConfiguration() {
    }

    /**
     * Get the ipAddressPools property: The list of pools of IP addresses that can be allocated to load balancer
     * services.
     * 
     * @return the ipAddressPools value.
     */
    public List<IpAddressPool> ipAddressPools() {
        return this.ipAddressPools;
    }

    /**
     * Set the ipAddressPools property: The list of pools of IP addresses that can be allocated to load balancer
     * services.
     * 
     * @param ipAddressPools the ipAddressPools value to set.
     * @return the L2ServiceLoadBalancerConfiguration object itself.
     */
    public L2ServiceLoadBalancerConfiguration withIpAddressPools(List<IpAddressPool> ipAddressPools) {
        this.ipAddressPools = ipAddressPools;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (ipAddressPools() != null) {
            ipAddressPools().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("ipAddressPools", this.ipAddressPools,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of L2ServiceLoadBalancerConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of L2ServiceLoadBalancerConfiguration if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the L2ServiceLoadBalancerConfiguration.
     */
    public static L2ServiceLoadBalancerConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            L2ServiceLoadBalancerConfiguration deserializedL2ServiceLoadBalancerConfiguration
                = new L2ServiceLoadBalancerConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("ipAddressPools".equals(fieldName)) {
                    List<IpAddressPool> ipAddressPools = reader.readArray(reader1 -> IpAddressPool.fromJson(reader1));
                    deserializedL2ServiceLoadBalancerConfiguration.ipAddressPools = ipAddressPools;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedL2ServiceLoadBalancerConfiguration;
        });
    }
}
