// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * SecretRotationStatus represents the status of a secret rotation.
 */
@Immutable
public final class SecretRotationStatus implements JsonSerializable<SecretRotationStatus> {
    /*
     * The maximum number of days the secret may be used before it must be changed.
     */
    private Long expirePeriodDays;

    /*
     * The date and time when the secret was last changed.
     */
    private OffsetDateTime lastRotationTime;

    /*
     * The number of days a secret exists before rotations will be attempted.
     */
    private Long rotationPeriodDays;

    /*
     * The reference to the secret in a key vault.
     */
    private SecretArchiveReference secretArchiveReference;

    /*
     * The type name used to identify the purpose of the secret.
     */
    private String secretType;

    /**
     * Creates an instance of SecretRotationStatus class.
     */
    public SecretRotationStatus() {
    }

    /**
     * Get the expirePeriodDays property: The maximum number of days the secret may be used before it must be changed.
     * 
     * @return the expirePeriodDays value.
     */
    public Long expirePeriodDays() {
        return this.expirePeriodDays;
    }

    /**
     * Get the lastRotationTime property: The date and time when the secret was last changed.
     * 
     * @return the lastRotationTime value.
     */
    public OffsetDateTime lastRotationTime() {
        return this.lastRotationTime;
    }

    /**
     * Get the rotationPeriodDays property: The number of days a secret exists before rotations will be attempted.
     * 
     * @return the rotationPeriodDays value.
     */
    public Long rotationPeriodDays() {
        return this.rotationPeriodDays;
    }

    /**
     * Get the secretArchiveReference property: The reference to the secret in a key vault.
     * 
     * @return the secretArchiveReference value.
     */
    public SecretArchiveReference secretArchiveReference() {
        return this.secretArchiveReference;
    }

    /**
     * Get the secretType property: The type name used to identify the purpose of the secret.
     * 
     * @return the secretType value.
     */
    public String secretType() {
        return this.secretType;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (secretArchiveReference() != null) {
            secretArchiveReference().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SecretRotationStatus from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SecretRotationStatus if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SecretRotationStatus.
     */
    public static SecretRotationStatus fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SecretRotationStatus deserializedSecretRotationStatus = new SecretRotationStatus();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("expirePeriodDays".equals(fieldName)) {
                    deserializedSecretRotationStatus.expirePeriodDays = reader.getNullable(JsonReader::getLong);
                } else if ("lastRotationTime".equals(fieldName)) {
                    deserializedSecretRotationStatus.lastRotationTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("rotationPeriodDays".equals(fieldName)) {
                    deserializedSecretRotationStatus.rotationPeriodDays = reader.getNullable(JsonReader::getLong);
                } else if ("secretArchiveReference".equals(fieldName)) {
                    deserializedSecretRotationStatus.secretArchiveReference = SecretArchiveReference.fromJson(reader);
                } else if ("secretType".equals(fieldName)) {
                    deserializedSecretRotationStatus.secretType = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSecretRotationStatus;
        });
    }
}
