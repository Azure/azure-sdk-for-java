// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.networkcloud.fluent.models.RacksPatchProperties;
import java.io.IOException;
import java.util.Map;

/**
 * RackPatchParameters represents the body of the request to patch the rack properties.
 */
@Fluent
public final class RackPatchParameters implements JsonSerializable<RackPatchParameters> {
    /*
     * The list of the resource properties.
     */
    private RacksPatchProperties innerProperties;

    /*
     * The Azure resource tags that will replace the existing ones.
     */
    private Map<String, String> tags;

    /**
     * Creates an instance of RackPatchParameters class.
     */
    public RackPatchParameters() {
    }

    /**
     * Get the innerProperties property: The list of the resource properties.
     * 
     * @return the innerProperties value.
     */
    private RacksPatchProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the tags property: The Azure resource tags that will replace the existing ones.
     * 
     * @return the tags value.
     */
    public Map<String, String> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: The Azure resource tags that will replace the existing ones.
     * 
     * @param tags the tags value to set.
     * @return the RackPatchParameters object itself.
     */
    public RackPatchParameters withTags(Map<String, String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the rackLocation property: The free-form description of the rack location. (e.g. “DTN Datacenter, Floor 3,
     * Isle 9, Rack 2B”).
     * 
     * @return the rackLocation value.
     */
    public String rackLocation() {
        return this.innerProperties() == null ? null : this.innerProperties().rackLocation();
    }

    /**
     * Set the rackLocation property: The free-form description of the rack location. (e.g. “DTN Datacenter, Floor 3,
     * Isle 9, Rack 2B”).
     * 
     * @param rackLocation the rackLocation value to set.
     * @return the RackPatchParameters object itself.
     */
    public RackPatchParameters withRackLocation(String rackLocation) {
        if (this.innerProperties() == null) {
            this.innerProperties = new RacksPatchProperties();
        }
        this.innerProperties().withRackLocation(rackLocation);
        return this;
    }

    /**
     * Get the rackSerialNumber property: The globally unique identifier for the rack.
     * 
     * @return the rackSerialNumber value.
     */
    public String rackSerialNumber() {
        return this.innerProperties() == null ? null : this.innerProperties().rackSerialNumber();
    }

    /**
     * Set the rackSerialNumber property: The globally unique identifier for the rack.
     * 
     * @param rackSerialNumber the rackSerialNumber value to set.
     * @return the RackPatchParameters object itself.
     */
    public RackPatchParameters withRackSerialNumber(String rackSerialNumber) {
        if (this.innerProperties() == null) {
            this.innerProperties = new RacksPatchProperties();
        }
        this.innerProperties().withRackSerialNumber(rackSerialNumber);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        jsonWriter.writeMapField("tags", this.tags, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RackPatchParameters from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RackPatchParameters if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the RackPatchParameters.
     */
    public static RackPatchParameters fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RackPatchParameters deserializedRackPatchParameters = new RackPatchParameters();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("properties".equals(fieldName)) {
                    deserializedRackPatchParameters.innerProperties = RacksPatchProperties.fromJson(reader);
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedRackPatchParameters.tags = tags;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRackPatchParameters;
        });
    }
}
