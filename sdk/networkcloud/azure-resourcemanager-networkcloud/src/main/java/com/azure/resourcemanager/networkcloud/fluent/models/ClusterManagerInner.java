// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.networkcloud.models.ClusterAvailableVersion;
import com.azure.resourcemanager.networkcloud.models.ClusterManagerDetailedStatus;
import com.azure.resourcemanager.networkcloud.models.ClusterManagerProvisioningState;
import com.azure.resourcemanager.networkcloud.models.ExtendedLocation;
import com.azure.resourcemanager.networkcloud.models.ManagedResourceGroupConfiguration;
import com.azure.resourcemanager.networkcloud.models.ManagedServiceIdentity;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * ClusterManager represents a control-plane to manage one or more on-premises clusters.
 */
@Fluent
public final class ClusterManagerInner extends Resource {
    /*
     * The identity of the cluster manager.
     */
    private ManagedServiceIdentity identity;

    /*
     * The list of the resource properties.
     */
    private ClusterManagerProperties innerProperties = new ClusterManagerProperties();

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of ClusterManagerInner class.
     */
    public ClusterManagerInner() {
    }

    /**
     * Get the identity property: The identity of the cluster manager.
     * 
     * @return the identity value.
     */
    public ManagedServiceIdentity identity() {
        return this.identity;
    }

    /**
     * Set the identity property: The identity of the cluster manager.
     * 
     * @param identity the identity value to set.
     * @return the ClusterManagerInner object itself.
     */
    public ClusterManagerInner withIdentity(ManagedServiceIdentity identity) {
        this.identity = identity;
        return this;
    }

    /**
     * Get the innerProperties property: The list of the resource properties.
     * 
     * @return the innerProperties value.
     */
    private ClusterManagerProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ClusterManagerInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ClusterManagerInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the analyticsWorkspaceId property: The resource ID of the Log Analytics workspace that is used for the logs
     * collection.
     * 
     * @return the analyticsWorkspaceId value.
     */
    public String analyticsWorkspaceId() {
        return this.innerProperties() == null ? null : this.innerProperties().analyticsWorkspaceId();
    }

    /**
     * Set the analyticsWorkspaceId property: The resource ID of the Log Analytics workspace that is used for the logs
     * collection.
     * 
     * @param analyticsWorkspaceId the analyticsWorkspaceId value to set.
     * @return the ClusterManagerInner object itself.
     */
    public ClusterManagerInner withAnalyticsWorkspaceId(String analyticsWorkspaceId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ClusterManagerProperties();
        }
        this.innerProperties().withAnalyticsWorkspaceId(analyticsWorkspaceId);
        return this;
    }

    /**
     * Get the availabilityZones property: Field deprecated, this value will no longer influence the cluster manager
     * allocation process and will be removed in a future version. The Azure availability zones within the region that
     * will be used to support the cluster manager resource.
     * 
     * @return the availabilityZones value.
     */
    public List<String> availabilityZones() {
        return this.innerProperties() == null ? null : this.innerProperties().availabilityZones();
    }

    /**
     * Set the availabilityZones property: Field deprecated, this value will no longer influence the cluster manager
     * allocation process and will be removed in a future version. The Azure availability zones within the region that
     * will be used to support the cluster manager resource.
     * 
     * @param availabilityZones the availabilityZones value to set.
     * @return the ClusterManagerInner object itself.
     */
    public ClusterManagerInner withAvailabilityZones(List<String> availabilityZones) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ClusterManagerProperties();
        }
        this.innerProperties().withAvailabilityZones(availabilityZones);
        return this;
    }

    /**
     * Get the clusterVersions property: The list of the cluster versions the manager supports. It is used as input in
     * clusterVersion property of a cluster resource.
     * 
     * @return the clusterVersions value.
     */
    public List<ClusterAvailableVersion> clusterVersions() {
        return this.innerProperties() == null ? null : this.innerProperties().clusterVersions();
    }

    /**
     * Get the detailedStatus property: The detailed status that provides additional information about the cluster
     * manager.
     * 
     * @return the detailedStatus value.
     */
    public ClusterManagerDetailedStatus detailedStatus() {
        return this.innerProperties() == null ? null : this.innerProperties().detailedStatus();
    }

    /**
     * Get the detailedStatusMessage property: The descriptive message about the current detailed status.
     * 
     * @return the detailedStatusMessage value.
     */
    public String detailedStatusMessage() {
        return this.innerProperties() == null ? null : this.innerProperties().detailedStatusMessage();
    }

    /**
     * Get the fabricControllerId property: The resource ID of the fabric controller that has one to one mapping with
     * the cluster manager.
     * 
     * @return the fabricControllerId value.
     */
    public String fabricControllerId() {
        return this.innerProperties() == null ? null : this.innerProperties().fabricControllerId();
    }

    /**
     * Set the fabricControllerId property: The resource ID of the fabric controller that has one to one mapping with
     * the cluster manager.
     * 
     * @param fabricControllerId the fabricControllerId value to set.
     * @return the ClusterManagerInner object itself.
     */
    public ClusterManagerInner withFabricControllerId(String fabricControllerId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ClusterManagerProperties();
        }
        this.innerProperties().withFabricControllerId(fabricControllerId);
        return this;
    }

    /**
     * Get the managedResourceGroupConfiguration property: The configuration of the managed resource group associated
     * with the resource.
     * 
     * @return the managedResourceGroupConfiguration value.
     */
    public ManagedResourceGroupConfiguration managedResourceGroupConfiguration() {
        return this.innerProperties() == null ? null : this.innerProperties().managedResourceGroupConfiguration();
    }

    /**
     * Set the managedResourceGroupConfiguration property: The configuration of the managed resource group associated
     * with the resource.
     * 
     * @param managedResourceGroupConfiguration the managedResourceGroupConfiguration value to set.
     * @return the ClusterManagerInner object itself.
     */
    public ClusterManagerInner
        withManagedResourceGroupConfiguration(ManagedResourceGroupConfiguration managedResourceGroupConfiguration) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ClusterManagerProperties();
        }
        this.innerProperties().withManagedResourceGroupConfiguration(managedResourceGroupConfiguration);
        return this;
    }

    /**
     * Get the managerExtendedLocation property: The extended location (custom location) that represents the cluster
     * manager's control plane location. This extended location is used when creating cluster and rack manifest
     * resources.
     * 
     * @return the managerExtendedLocation value.
     */
    public ExtendedLocation managerExtendedLocation() {
        return this.innerProperties() == null ? null : this.innerProperties().managerExtendedLocation();
    }

    /**
     * Get the provisioningState property: The provisioning state of the cluster manager.
     * 
     * @return the provisioningState value.
     */
    public ClusterManagerProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the vmSize property: Field deprecated, this value will no longer influence the cluster manager allocation
     * process and will be removed in a future version. The size of the Azure virtual machines to use for hosting the
     * cluster manager resource.
     * 
     * @return the vmSize value.
     */
    public String vmSize() {
        return this.innerProperties() == null ? null : this.innerProperties().vmSize();
    }

    /**
     * Set the vmSize property: Field deprecated, this value will no longer influence the cluster manager allocation
     * process and will be removed in a future version. The size of the Azure virtual machines to use for hosting the
     * cluster manager resource.
     * 
     * @param vmSize the vmSize value to set.
     * @return the ClusterManagerInner object itself.
     */
    public ClusterManagerInner withVmSize(String vmSize) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ClusterManagerProperties();
        }
        this.innerProperties().withVmSize(vmSize);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (identity() != null) {
            identity().validate();
        }
        if (innerProperties() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property innerProperties in model ClusterManagerInner"));
        } else {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ClusterManagerInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("location", location());
        jsonWriter.writeMapField("tags", tags(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("properties", this.innerProperties);
        jsonWriter.writeJsonField("identity", this.identity);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ClusterManagerInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ClusterManagerInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ClusterManagerInner.
     */
    public static ClusterManagerInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ClusterManagerInner deserializedClusterManagerInner = new ClusterManagerInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedClusterManagerInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedClusterManagerInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedClusterManagerInner.type = reader.getString();
                } else if ("location".equals(fieldName)) {
                    deserializedClusterManagerInner.withLocation(reader.getString());
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedClusterManagerInner.withTags(tags);
                } else if ("properties".equals(fieldName)) {
                    deserializedClusterManagerInner.innerProperties = ClusterManagerProperties.fromJson(reader);
                } else if ("identity".equals(fieldName)) {
                    deserializedClusterManagerInner.identity = ManagedServiceIdentity.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedClusterManagerInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedClusterManagerInner;
        });
    }
}
