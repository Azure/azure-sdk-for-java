// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.models;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.networkcloud.fluent.models.BareMetalMachineInner;
import java.util.List;
import java.util.Map;

/** An immutable client-side representation of BareMetalMachine. */
public interface BareMetalMachine {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     *
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     *
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the extendedLocation property: ExtendedLocation represents the Azure custom location where the resource will
     * be created.
     *
     * <p>The extended location of the cluster associated with the resource.
     *
     * @return the extendedLocation value.
     */
    ExtendedLocation extendedLocation();

    /**
     * Gets the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     *
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the associatedResourceIds property: The list of resource IDs for the other Microsoft.NetworkCloud resources
     * that have attached this network.
     *
     * @return the associatedResourceIds value.
     */
    List<String> associatedResourceIds();

    /**
     * Gets the bmcConnectionString property: The connection string for the baseboard management controller including IP
     * address and protocol.
     *
     * @return the bmcConnectionString value.
     */
    String bmcConnectionString();

    /**
     * Gets the bmcCredentials property: AdministrativeCredentials represents the admin credentials for the device
     * requiring password-based authentication.
     *
     * <p>The credentials of the baseboard management controller on this bare metal machine.
     *
     * @return the bmcCredentials value.
     */
    AdministrativeCredentials bmcCredentials();

    /**
     * Gets the bmcMacAddress property: The MAC address of the BMC device.
     *
     * @return the bmcMacAddress value.
     */
    String bmcMacAddress();

    /**
     * Gets the bootMacAddress property: The MAC address of a NIC connected to the PXE network.
     *
     * @return the bootMacAddress value.
     */
    String bootMacAddress();

    /**
     * Gets the clusterId property: The resource ID of the cluster this bare metal machine is associated with.
     *
     * @return the clusterId value.
     */
    String clusterId();

    /**
     * Gets the cordonStatus property: The cordon status of the bare metal machine.
     *
     * @return the cordonStatus value.
     */
    BareMetalMachineCordonStatus cordonStatus();

    /**
     * Gets the detailedStatus property: The more detailed status of the bare metal machine.
     *
     * @return the detailedStatus value.
     */
    BareMetalMachineDetailedStatus detailedStatus();

    /**
     * Gets the detailedStatusMessage property: The descriptive message about the current detailed status.
     *
     * @return the detailedStatusMessage value.
     */
    String detailedStatusMessage();

    /**
     * Gets the hardwareInventory property: HardwareInventory represents the hardware configuration of this machine as
     * exposed to the customer, including information acquired from the model/sku information and from the ironic
     * inspector.
     *
     * <p>The hardware inventory, including information acquired from the model/sku information and from the ironic
     * inspector.
     *
     * @return the hardwareInventory value.
     */
    HardwareInventory hardwareInventory();

    /**
     * Gets the hardwareValidationStatus property: HardwareValidationStatus represents the latest hardware validation
     * details performed for this bare metal machine.
     *
     * <p>The details of the latest hardware validation performed for this bare metal machine.
     *
     * @return the hardwareValidationStatus value.
     */
    HardwareValidationStatus hardwareValidationStatus();

    /**
     * Gets the hybridAksClustersAssociatedIds property: Field Deprecated. These fields will be empty/omitted. The list
     * of the resource IDs for the HybridAksClusters that have nodes hosted on this bare metal machine.
     *
     * @return the hybridAksClustersAssociatedIds value.
     */
    List<String> hybridAksClustersAssociatedIds();

    /**
     * Gets the kubernetesNodeName property: The name of this machine represented by the host object in the Cluster's
     * Kubernetes control plane.
     *
     * @return the kubernetesNodeName value.
     */
    String kubernetesNodeName();

    /**
     * Gets the kubernetesVersion property: The version of Kubernetes running on this machine.
     *
     * @return the kubernetesVersion value.
     */
    String kubernetesVersion();

    /**
     * Gets the machineDetails property: The custom details provided by the customer.
     *
     * @return the machineDetails value.
     */
    String machineDetails();

    /**
     * Gets the machineName property: The OS-level hostname assigned to this machine.
     *
     * @return the machineName value.
     */
    String machineName();

    /**
     * Gets the machineSkuId property: The unique internal identifier of the bare metal machine SKU.
     *
     * @return the machineSkuId value.
     */
    String machineSkuId();

    /**
     * Gets the oamIpv4Address property: The IPv4 address that is assigned to the bare metal machine during the cluster
     * deployment.
     *
     * @return the oamIpv4Address value.
     */
    String oamIpv4Address();

    /**
     * Gets the oamIpv6Address property: The IPv6 address that is assigned to the bare metal machine during the cluster
     * deployment.
     *
     * @return the oamIpv6Address value.
     */
    String oamIpv6Address();

    /**
     * Gets the osImage property: The image that is currently provisioned to the OS disk.
     *
     * @return the osImage value.
     */
    String osImage();

    /**
     * Gets the powerState property: The power state derived from the baseboard management controller.
     *
     * @return the powerState value.
     */
    BareMetalMachinePowerState powerState();

    /**
     * Gets the provisioningState property: The provisioning state of the bare metal machine.
     *
     * @return the provisioningState value.
     */
    BareMetalMachineProvisioningState provisioningState();

    /**
     * Gets the rackId property: The resource ID of the rack where this bare metal machine resides.
     *
     * @return the rackId value.
     */
    String rackId();

    /**
     * Gets the rackSlot property: The rack slot in which this bare metal machine is located, ordered from the bottom up
     * i.e. the lowest slot is 1.
     *
     * @return the rackSlot value.
     */
    long rackSlot();

    /**
     * Gets the readyState property: The indicator of whether the bare metal machine is ready to receive workloads.
     *
     * @return the readyState value.
     */
    BareMetalMachineReadyState readyState();

    /**
     * Gets the serialNumber property: The serial number of the bare metal machine.
     *
     * @return the serialNumber value.
     */
    String serialNumber();

    /**
     * Gets the serviceTag property: The discovered value of the machine's service tag.
     *
     * @return the serviceTag value.
     */
    String serviceTag();

    /**
     * Gets the virtualMachinesAssociatedIds property: Field Deprecated. These fields will be empty/omitted. The list of
     * the resource IDs for the VirtualMachines that are hosted on this bare metal machine.
     *
     * @return the virtualMachinesAssociatedIds value.
     */
    List<String> virtualMachinesAssociatedIds();

    /**
     * Gets the region of the resource.
     *
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     *
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the name of the resource group.
     *
     * @return the name of the resource group.
     */
    String resourceGroupName();

    /**
     * Gets the inner com.azure.resourcemanager.networkcloud.fluent.models.BareMetalMachineInner object.
     *
     * @return the inner object.
     */
    BareMetalMachineInner innerModel();

    /** The entirety of the BareMetalMachine definition. */
    interface Definition
        extends DefinitionStages.Blank,
            DefinitionStages.WithLocation,
            DefinitionStages.WithResourceGroup,
            DefinitionStages.WithExtendedLocation,
            DefinitionStages.WithBmcConnectionString,
            DefinitionStages.WithBmcCredentials,
            DefinitionStages.WithBmcMacAddress,
            DefinitionStages.WithBootMacAddress,
            DefinitionStages.WithMachineDetails,
            DefinitionStages.WithMachineName,
            DefinitionStages.WithMachineSkuId,
            DefinitionStages.WithRackId,
            DefinitionStages.WithRackSlot,
            DefinitionStages.WithSerialNumber,
            DefinitionStages.WithCreate {
    }
    /** The BareMetalMachine definition stages. */
    interface DefinitionStages {
        /** The first stage of the BareMetalMachine definition. */
        interface Blank extends WithLocation {
        }
        /** The stage of the BareMetalMachine definition allowing to specify location. */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(Region location);

            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(String location);
        }
        /** The stage of the BareMetalMachine definition allowing to specify parent resource. */
        interface WithResourceGroup {
            /**
             * Specifies resourceGroupName.
             *
             * @param resourceGroupName The name of the resource group. The name is case insensitive.
             * @return the next definition stage.
             */
            WithExtendedLocation withExistingResourceGroup(String resourceGroupName);
        }
        /** The stage of the BareMetalMachine definition allowing to specify extendedLocation. */
        interface WithExtendedLocation {
            /**
             * Specifies the extendedLocation property: ExtendedLocation represents the Azure custom location where the
             * resource will be created.
             *
             * <p>The extended location of the cluster associated with the resource..
             *
             * @param extendedLocation ExtendedLocation represents the Azure custom location where the resource will be
             *     created.
             *     <p>The extended location of the cluster associated with the resource.
             * @return the next definition stage.
             */
            WithBmcConnectionString withExtendedLocation(ExtendedLocation extendedLocation);
        }
        /** The stage of the BareMetalMachine definition allowing to specify bmcConnectionString. */
        interface WithBmcConnectionString {
            /**
             * Specifies the bmcConnectionString property: The connection string for the baseboard management controller
             * including IP address and protocol..
             *
             * @param bmcConnectionString The connection string for the baseboard management controller including IP
             *     address and protocol.
             * @return the next definition stage.
             */
            WithBmcCredentials withBmcConnectionString(String bmcConnectionString);
        }
        /** The stage of the BareMetalMachine definition allowing to specify bmcCredentials. */
        interface WithBmcCredentials {
            /**
             * Specifies the bmcCredentials property: AdministrativeCredentials represents the admin credentials for the
             * device requiring password-based authentication.
             *
             * <p>The credentials of the baseboard management controller on this bare metal machine..
             *
             * @param bmcCredentials AdministrativeCredentials represents the admin credentials for the device requiring
             *     password-based authentication.
             *     <p>The credentials of the baseboard management controller on this bare metal machine.
             * @return the next definition stage.
             */
            WithBmcMacAddress withBmcCredentials(AdministrativeCredentials bmcCredentials);
        }
        /** The stage of the BareMetalMachine definition allowing to specify bmcMacAddress. */
        interface WithBmcMacAddress {
            /**
             * Specifies the bmcMacAddress property: The MAC address of the BMC device..
             *
             * @param bmcMacAddress The MAC address of the BMC device.
             * @return the next definition stage.
             */
            WithBootMacAddress withBmcMacAddress(String bmcMacAddress);
        }
        /** The stage of the BareMetalMachine definition allowing to specify bootMacAddress. */
        interface WithBootMacAddress {
            /**
             * Specifies the bootMacAddress property: The MAC address of a NIC connected to the PXE network..
             *
             * @param bootMacAddress The MAC address of a NIC connected to the PXE network.
             * @return the next definition stage.
             */
            WithMachineDetails withBootMacAddress(String bootMacAddress);
        }
        /** The stage of the BareMetalMachine definition allowing to specify machineDetails. */
        interface WithMachineDetails {
            /**
             * Specifies the machineDetails property: The custom details provided by the customer..
             *
             * @param machineDetails The custom details provided by the customer.
             * @return the next definition stage.
             */
            WithMachineName withMachineDetails(String machineDetails);
        }
        /** The stage of the BareMetalMachine definition allowing to specify machineName. */
        interface WithMachineName {
            /**
             * Specifies the machineName property: The OS-level hostname assigned to this machine..
             *
             * @param machineName The OS-level hostname assigned to this machine.
             * @return the next definition stage.
             */
            WithMachineSkuId withMachineName(String machineName);
        }
        /** The stage of the BareMetalMachine definition allowing to specify machineSkuId. */
        interface WithMachineSkuId {
            /**
             * Specifies the machineSkuId property: The unique internal identifier of the bare metal machine SKU..
             *
             * @param machineSkuId The unique internal identifier of the bare metal machine SKU.
             * @return the next definition stage.
             */
            WithRackId withMachineSkuId(String machineSkuId);
        }
        /** The stage of the BareMetalMachine definition allowing to specify rackId. */
        interface WithRackId {
            /**
             * Specifies the rackId property: The resource ID of the rack where this bare metal machine resides..
             *
             * @param rackId The resource ID of the rack where this bare metal machine resides.
             * @return the next definition stage.
             */
            WithRackSlot withRackId(String rackId);
        }
        /** The stage of the BareMetalMachine definition allowing to specify rackSlot. */
        interface WithRackSlot {
            /**
             * Specifies the rackSlot property: The rack slot in which this bare metal machine is located, ordered from
             * the bottom up i.e. the lowest slot is 1..
             *
             * @param rackSlot The rack slot in which this bare metal machine is located, ordered from the bottom up
             *     i.e. the lowest slot is 1.
             * @return the next definition stage.
             */
            WithSerialNumber withRackSlot(long rackSlot);
        }
        /** The stage of the BareMetalMachine definition allowing to specify serialNumber. */
        interface WithSerialNumber {
            /**
             * Specifies the serialNumber property: The serial number of the bare metal machine..
             *
             * @param serialNumber The serial number of the bare metal machine.
             * @return the next definition stage.
             */
            WithCreate withSerialNumber(String serialNumber);
        }
        /**
         * The stage of the BareMetalMachine definition which contains all the minimum required properties for the
         * resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate extends DefinitionStages.WithTags {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            BareMetalMachine create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            BareMetalMachine create(Context context);
        }
        /** The stage of the BareMetalMachine definition allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }
    }
    /**
     * Begins update for the BareMetalMachine resource.
     *
     * @return the stage of resource update.
     */
    BareMetalMachine.Update update();

    /** The template for BareMetalMachine update. */
    interface Update extends UpdateStages.WithTags, UpdateStages.WithMachineDetails {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        BareMetalMachine apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        BareMetalMachine apply(Context context);
    }
    /** The BareMetalMachine update stages. */
    interface UpdateStages {
        /** The stage of the BareMetalMachine update allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: The Azure resource tags that will replace the existing ones..
             *
             * @param tags The Azure resource tags that will replace the existing ones.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }
        /** The stage of the BareMetalMachine update allowing to specify machineDetails. */
        interface WithMachineDetails {
            /**
             * Specifies the machineDetails property: The details provided by the customer during the creation of rack
             * manifests that allows for custom data to be associated with this machine..
             *
             * @param machineDetails The details provided by the customer during the creation of rack manifests that
             *     allows for custom data to be associated with this machine.
             * @return the next definition stage.
             */
            Update withMachineDetails(String machineDetails);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    BareMetalMachine refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    BareMetalMachine refresh(Context context);

    /**
     * Cordon the bare metal machine.
     *
     * <p>Cordon the provided bare metal machine's Kubernetes node.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void cordon();

    /**
     * Cordon the bare metal machine.
     *
     * <p>Cordon the provided bare metal machine's Kubernetes node.
     *
     * @param bareMetalMachineCordonParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void cordon(BareMetalMachineCordonParameters bareMetalMachineCordonParameters, Context context);

    /**
     * Power off the bare metal machine.
     *
     * <p>Power off the provided bare metal machine.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void powerOff();

    /**
     * Power off the bare metal machine.
     *
     * <p>Power off the provided bare metal machine.
     *
     * @param bareMetalMachinePowerOffParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void powerOff(BareMetalMachinePowerOffParameters bareMetalMachinePowerOffParameters, Context context);

    /**
     * Reimage the bare metal machine.
     *
     * <p>Reimage the provided bare metal machine.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void reimage();

    /**
     * Reimage the bare metal machine.
     *
     * <p>Reimage the provided bare metal machine.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void reimage(Context context);

    /**
     * Replace (service) the bare metal machine.
     *
     * <p>Replace the provided bare metal machine.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void replace();

    /**
     * Replace (service) the bare metal machine.
     *
     * <p>Replace the provided bare metal machine.
     *
     * @param bareMetalMachineReplaceParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void replace(BareMetalMachineReplaceParameters bareMetalMachineReplaceParameters, Context context);

    /**
     * Restart the bare metal machine.
     *
     * <p>Restart the provided bare metal machine.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void restart();

    /**
     * Restart the bare metal machine.
     *
     * <p>Restart the provided bare metal machine.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void restart(Context context);

    /**
     * Run the command on the bare metal machine.
     *
     * <p>Run the command or the script on the provided bare metal machine. The URL to storage account with the command
     * execution results and the command exit code can be retrieved from the operation status API once available.
     *
     * @param bareMetalMachineRunCommandParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void runCommand(BareMetalMachineRunCommandParameters bareMetalMachineRunCommandParameters);

    /**
     * Run the command on the bare metal machine.
     *
     * <p>Run the command or the script on the provided bare metal machine. The URL to storage account with the command
     * execution results and the command exit code can be retrieved from the operation status API once available.
     *
     * @param bareMetalMachineRunCommandParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void runCommand(BareMetalMachineRunCommandParameters bareMetalMachineRunCommandParameters, Context context);

    /**
     * Run data extraction for a bare metal machine.
     *
     * <p>Run one or more data extractions on the provided bare metal machine. The URL to storage account with the
     * command execution results and the command exit code can be retrieved from the operation status API once
     * available.
     *
     * @param bareMetalMachineRunDataExtractsParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void runDataExtracts(BareMetalMachineRunDataExtractsParameters bareMetalMachineRunDataExtractsParameters);

    /**
     * Run data extraction for a bare metal machine.
     *
     * <p>Run one or more data extractions on the provided bare metal machine. The URL to storage account with the
     * command execution results and the command exit code can be retrieved from the operation status API once
     * available.
     *
     * @param bareMetalMachineRunDataExtractsParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void runDataExtracts(
        BareMetalMachineRunDataExtractsParameters bareMetalMachineRunDataExtractsParameters, Context context);

    /**
     * Run read-only commands against a bare metal machine.
     *
     * <p>Run one or more read-only commands on the provided bare metal machine. The URL to storage account with the
     * command execution results and the command exit code can be retrieved from the operation status API once
     * available.
     *
     * @param bareMetalMachineRunReadCommandsParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void runReadCommands(BareMetalMachineRunReadCommandsParameters bareMetalMachineRunReadCommandsParameters);

    /**
     * Run read-only commands against a bare metal machine.
     *
     * <p>Run one or more read-only commands on the provided bare metal machine. The URL to storage account with the
     * command execution results and the command exit code can be retrieved from the operation status API once
     * available.
     *
     * @param bareMetalMachineRunReadCommandsParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void runReadCommands(
        BareMetalMachineRunReadCommandsParameters bareMetalMachineRunReadCommandsParameters, Context context);

    /**
     * Start the bare metal machine.
     *
     * <p>Start the provided bare metal machine.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void start();

    /**
     * Start the bare metal machine.
     *
     * <p>Start the provided bare metal machine.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void start(Context context);

    /**
     * Uncordon the bare metal machine.
     *
     * <p>Uncordon the provided bare metal machine's Kubernetes node.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void uncordon();

    /**
     * Uncordon the bare metal machine.
     *
     * <p>Uncordon the provided bare metal machine's Kubernetes node.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void uncordon(Context context);

    /**
     * Trigger hardware validation of the bare metal machine.
     *
     * <p>Validate the hardware of the provided bare metal machine.
     *
     * @param bareMetalMachineValidateHardwareParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void validateHardware(BareMetalMachineValidateHardwareParameters bareMetalMachineValidateHardwareParameters);

    /**
     * Trigger hardware validation of the bare metal machine.
     *
     * <p>Validate the hardware of the provided bare metal machine.
     *
     * @param bareMetalMachineValidateHardwareParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void validateHardware(
        BareMetalMachineValidateHardwareParameters bareMetalMachineValidateHardwareParameters, Context context);
}
