// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.networkcloud.models.KeySetUser;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * BmcKeySetPatchProperties represents the properties of baseboard management controller key set that are patchable.
 */
@Fluent
public final class BmcKeySetPatchProperties implements JsonSerializable<BmcKeySetPatchProperties> {
    /*
     * The date and time after which the users in this key set will be removed from the baseboard management
     * controllers.
     */
    private OffsetDateTime expiration;

    /*
     * The unique list of permitted users.
     */
    private List<KeySetUser> userList;

    /**
     * Creates an instance of BmcKeySetPatchProperties class.
     */
    public BmcKeySetPatchProperties() {
    }

    /**
     * Get the expiration property: The date and time after which the users in this key set will be removed from the
     * baseboard management controllers.
     * 
     * @return the expiration value.
     */
    public OffsetDateTime expiration() {
        return this.expiration;
    }

    /**
     * Set the expiration property: The date and time after which the users in this key set will be removed from the
     * baseboard management controllers.
     * 
     * @param expiration the expiration value to set.
     * @return the BmcKeySetPatchProperties object itself.
     */
    public BmcKeySetPatchProperties withExpiration(OffsetDateTime expiration) {
        this.expiration = expiration;
        return this;
    }

    /**
     * Get the userList property: The unique list of permitted users.
     * 
     * @return the userList value.
     */
    public List<KeySetUser> userList() {
        return this.userList;
    }

    /**
     * Set the userList property: The unique list of permitted users.
     * 
     * @param userList the userList value to set.
     * @return the BmcKeySetPatchProperties object itself.
     */
    public BmcKeySetPatchProperties withUserList(List<KeySetUser> userList) {
        this.userList = userList;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (userList() != null) {
            userList().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("expiration",
            this.expiration == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.expiration));
        jsonWriter.writeArrayField("userList", this.userList, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BmcKeySetPatchProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BmcKeySetPatchProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the BmcKeySetPatchProperties.
     */
    public static BmcKeySetPatchProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BmcKeySetPatchProperties deserializedBmcKeySetPatchProperties = new BmcKeySetPatchProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("expiration".equals(fieldName)) {
                    deserializedBmcKeySetPatchProperties.expiration = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("userList".equals(fieldName)) {
                    List<KeySetUser> userList = reader.readArray(reader1 -> KeySetUser.fromJson(reader1));
                    deserializedBmcKeySetPatchProperties.userList = userList;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBmcKeySetPatchProperties;
        });
    }
}
