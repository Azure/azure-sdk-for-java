// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.networkcloud.fluent.BareMetalMachinesClient;
import com.azure.resourcemanager.networkcloud.fluent.models.BareMetalMachineInner;
import com.azure.resourcemanager.networkcloud.fluent.models.OperationStatusResultInner;
import com.azure.resourcemanager.networkcloud.models.BareMetalMachineCordonParameters;
import com.azure.resourcemanager.networkcloud.models.BareMetalMachineList;
import com.azure.resourcemanager.networkcloud.models.BareMetalMachinePatchParameters;
import com.azure.resourcemanager.networkcloud.models.BareMetalMachinePowerOffParameters;
import com.azure.resourcemanager.networkcloud.models.BareMetalMachineReplaceParameters;
import com.azure.resourcemanager.networkcloud.models.BareMetalMachineRunCommandParameters;
import com.azure.resourcemanager.networkcloud.models.BareMetalMachineRunDataExtractsParameters;
import com.azure.resourcemanager.networkcloud.models.BareMetalMachineRunReadCommandsParameters;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in BareMetalMachinesClient.
 */
public final class BareMetalMachinesClientImpl implements BareMetalMachinesClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final BareMetalMachinesService service;

    /**
     * The service client containing this operation class.
     */
    private final NetworkCloudImpl client;

    /**
     * Initializes an instance of BareMetalMachinesClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    BareMetalMachinesClientImpl(NetworkCloudImpl client) {
        this.service
            = RestProxy.create(BareMetalMachinesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for NetworkCloudBareMetalMachines to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "NetworkCloudBareMeta")
    public interface BareMetalMachinesService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/providers/Microsoft.NetworkCloud/bareMetalMachines")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<BareMetalMachineList>> list(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/providers/Microsoft.NetworkCloud/bareMetalMachines")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BareMetalMachineList> listSync(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/bareMetalMachines")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<BareMetalMachineList>> listByResourceGroup(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/bareMetalMachines")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BareMetalMachineList> listByResourceGroupSync(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/bareMetalMachines/{bareMetalMachineName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<BareMetalMachineInner>> getByResourceGroup(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("bareMetalMachineName") String bareMetalMachineName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/bareMetalMachines/{bareMetalMachineName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BareMetalMachineInner> getByResourceGroupSync(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("bareMetalMachineName") String bareMetalMachineName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/bareMetalMachines/{bareMetalMachineName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("bareMetalMachineName") String bareMetalMachineName, @HeaderParam("If-Match") String ifMatch,
            @HeaderParam("If-None-Match") String ifNoneMatch,
            @BodyParam("application/json") BareMetalMachineInner bareMetalMachineParameters,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/bareMetalMachines/{bareMetalMachineName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> createOrUpdateSync(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("bareMetalMachineName") String bareMetalMachineName, @HeaderParam("If-Match") String ifMatch,
            @HeaderParam("If-None-Match") String ifNoneMatch,
            @BodyParam("application/json") BareMetalMachineInner bareMetalMachineParameters,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/bareMetalMachines/{bareMetalMachineName}")
        @ExpectedResponses({ 200, 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("bareMetalMachineName") String bareMetalMachineName, @HeaderParam("If-Match") String ifMatch,
            @HeaderParam("If-None-Match") String ifNoneMatch, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/bareMetalMachines/{bareMetalMachineName}")
        @ExpectedResponses({ 200, 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> deleteSync(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("bareMetalMachineName") String bareMetalMachineName, @HeaderParam("If-Match") String ifMatch,
            @HeaderParam("If-None-Match") String ifNoneMatch, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/bareMetalMachines/{bareMetalMachineName}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> update(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("bareMetalMachineName") String bareMetalMachineName, @HeaderParam("If-Match") String ifMatch,
            @HeaderParam("If-None-Match") String ifNoneMatch,
            @BodyParam("application/json") BareMetalMachinePatchParameters bareMetalMachineUpdateParameters,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/bareMetalMachines/{bareMetalMachineName}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> updateSync(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("bareMetalMachineName") String bareMetalMachineName, @HeaderParam("If-Match") String ifMatch,
            @HeaderParam("If-None-Match") String ifNoneMatch,
            @BodyParam("application/json") BareMetalMachinePatchParameters bareMetalMachineUpdateParameters,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/bareMetalMachines/{bareMetalMachineName}/cordon")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> cordon(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("bareMetalMachineName") String bareMetalMachineName,
            @BodyParam("application/json") BareMetalMachineCordonParameters bareMetalMachineCordonParameters,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/bareMetalMachines/{bareMetalMachineName}/cordon")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> cordonSync(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("bareMetalMachineName") String bareMetalMachineName,
            @BodyParam("application/json") BareMetalMachineCordonParameters bareMetalMachineCordonParameters,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/bareMetalMachines/{bareMetalMachineName}/powerOff")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> powerOff(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("bareMetalMachineName") String bareMetalMachineName,
            @BodyParam("application/json") BareMetalMachinePowerOffParameters bareMetalMachinePowerOffParameters,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/bareMetalMachines/{bareMetalMachineName}/powerOff")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> powerOffSync(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("bareMetalMachineName") String bareMetalMachineName,
            @BodyParam("application/json") BareMetalMachinePowerOffParameters bareMetalMachinePowerOffParameters,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/bareMetalMachines/{bareMetalMachineName}/reimage")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> reimage(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("bareMetalMachineName") String bareMetalMachineName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/bareMetalMachines/{bareMetalMachineName}/reimage")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> reimageSync(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("bareMetalMachineName") String bareMetalMachineName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/bareMetalMachines/{bareMetalMachineName}/replace")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> replace(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("bareMetalMachineName") String bareMetalMachineName,
            @BodyParam("application/json") BareMetalMachineReplaceParameters bareMetalMachineReplaceParameters,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/bareMetalMachines/{bareMetalMachineName}/replace")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> replaceSync(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("bareMetalMachineName") String bareMetalMachineName,
            @BodyParam("application/json") BareMetalMachineReplaceParameters bareMetalMachineReplaceParameters,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/bareMetalMachines/{bareMetalMachineName}/restart")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> restart(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("bareMetalMachineName") String bareMetalMachineName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/bareMetalMachines/{bareMetalMachineName}/restart")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> restartSync(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("bareMetalMachineName") String bareMetalMachineName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/bareMetalMachines/{bareMetalMachineName}/runCommand")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> runCommand(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("bareMetalMachineName") String bareMetalMachineName,
            @BodyParam("application/json") BareMetalMachineRunCommandParameters bareMetalMachineRunCommandParameters,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/bareMetalMachines/{bareMetalMachineName}/runCommand")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> runCommandSync(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("bareMetalMachineName") String bareMetalMachineName,
            @BodyParam("application/json") BareMetalMachineRunCommandParameters bareMetalMachineRunCommandParameters,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/bareMetalMachines/{bareMetalMachineName}/runDataExtracts")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> runDataExtracts(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("bareMetalMachineName") String bareMetalMachineName,
            @BodyParam("application/json") BareMetalMachineRunDataExtractsParameters bareMetalMachineRunDataExtractsParameters,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/bareMetalMachines/{bareMetalMachineName}/runDataExtracts")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> runDataExtractsSync(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("bareMetalMachineName") String bareMetalMachineName,
            @BodyParam("application/json") BareMetalMachineRunDataExtractsParameters bareMetalMachineRunDataExtractsParameters,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/bareMetalMachines/{bareMetalMachineName}/runReadCommands")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> runReadCommands(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("bareMetalMachineName") String bareMetalMachineName,
            @BodyParam("application/json") BareMetalMachineRunReadCommandsParameters bareMetalMachineRunReadCommandsParameters,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/bareMetalMachines/{bareMetalMachineName}/runReadCommands")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> runReadCommandsSync(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("bareMetalMachineName") String bareMetalMachineName,
            @BodyParam("application/json") BareMetalMachineRunReadCommandsParameters bareMetalMachineRunReadCommandsParameters,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/bareMetalMachines/{bareMetalMachineName}/start")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> start(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("bareMetalMachineName") String bareMetalMachineName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/bareMetalMachines/{bareMetalMachineName}/start")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> startSync(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("bareMetalMachineName") String bareMetalMachineName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/bareMetalMachines/{bareMetalMachineName}/uncordon")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> uncordon(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("bareMetalMachineName") String bareMetalMachineName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/bareMetalMachines/{bareMetalMachineName}/uncordon")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> uncordonSync(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("bareMetalMachineName") String bareMetalMachineName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<BareMetalMachineList>> listBySubscriptionNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BareMetalMachineList> listBySubscriptionNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<BareMetalMachineList>> listByResourceGroupNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BareMetalMachineList> listByResourceGroupNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * List bare metal machines in the subscription.
     * 
     * Get a list of bare metal machines in the provided subscription.
     * 
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of bare metal machines in the provided subscription along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BareMetalMachineInner>> listSinglePageAsync() {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.list(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), accept, context))
            .<PagedResponse<BareMetalMachineInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List bare metal machines in the subscription.
     * 
     * Get a list of bare metal machines in the provided subscription.
     * 
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of bare metal machines in the provided subscription as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<BareMetalMachineInner> listAsync() {
        return new PagedFlux<>(() -> listSinglePageAsync(),
            nextLink -> listBySubscriptionNextSinglePageAsync(nextLink));
    }

    /**
     * List bare metal machines in the subscription.
     * 
     * Get a list of bare metal machines in the provided subscription.
     * 
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of bare metal machines in the provided subscription along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BareMetalMachineInner> listSinglePage() {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<BareMetalMachineList> res = service.listSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List bare metal machines in the subscription.
     * 
     * Get a list of bare metal machines in the provided subscription.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of bare metal machines in the provided subscription along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BareMetalMachineInner> listSinglePage(Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<BareMetalMachineList> res = service.listSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List bare metal machines in the subscription.
     * 
     * Get a list of bare metal machines in the provided subscription.
     * 
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of bare metal machines in the provided subscription as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BareMetalMachineInner> list() {
        return new PagedIterable<>(() -> listSinglePage(), nextLink -> listBySubscriptionNextSinglePage(nextLink));
    }

    /**
     * List bare metal machines in the subscription.
     * 
     * Get a list of bare metal machines in the provided subscription.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of bare metal machines in the provided subscription as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BareMetalMachineInner> list(Context context) {
        return new PagedIterable<>(() -> listSinglePage(context),
            nextLink -> listBySubscriptionNextSinglePage(nextLink, context));
    }

    /**
     * List bare metal machines in the resource group.
     * 
     * Get a list of bare metal machines in the provided resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of bare metal machines in the provided resource group along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BareMetalMachineInner>> listByResourceGroupSinglePageAsync(String resourceGroupName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByResourceGroup(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, accept, context))
            .<PagedResponse<BareMetalMachineInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List bare metal machines in the resource group.
     * 
     * Get a list of bare metal machines in the provided resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of bare metal machines in the provided resource group as paginated response with
     * {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<BareMetalMachineInner> listByResourceGroupAsync(String resourceGroupName) {
        return new PagedFlux<>(() -> listByResourceGroupSinglePageAsync(resourceGroupName),
            nextLink -> listByResourceGroupNextSinglePageAsync(nextLink));
    }

    /**
     * List bare metal machines in the resource group.
     * 
     * Get a list of bare metal machines in the provided resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of bare metal machines in the provided resource group along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BareMetalMachineInner> listByResourceGroupSinglePage(String resourceGroupName) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<BareMetalMachineList> res = service.listByResourceGroupSync(this.client.getEndpoint(),
            this.client.getApiVersion(), this.client.getSubscriptionId(), resourceGroupName, accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List bare metal machines in the resource group.
     * 
     * Get a list of bare metal machines in the provided resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of bare metal machines in the provided resource group along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BareMetalMachineInner> listByResourceGroupSinglePage(String resourceGroupName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<BareMetalMachineList> res = service.listByResourceGroupSync(this.client.getEndpoint(),
            this.client.getApiVersion(), this.client.getSubscriptionId(), resourceGroupName, accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List bare metal machines in the resource group.
     * 
     * Get a list of bare metal machines in the provided resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of bare metal machines in the provided resource group as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BareMetalMachineInner> listByResourceGroup(String resourceGroupName) {
        return new PagedIterable<>(() -> listByResourceGroupSinglePage(resourceGroupName),
            nextLink -> listByResourceGroupNextSinglePage(nextLink));
    }

    /**
     * List bare metal machines in the resource group.
     * 
     * Get a list of bare metal machines in the provided resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of bare metal machines in the provided resource group as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BareMetalMachineInner> listByResourceGroup(String resourceGroupName, Context context) {
        return new PagedIterable<>(() -> listByResourceGroupSinglePage(resourceGroupName, context),
            nextLink -> listByResourceGroupNextSinglePage(nextLink, context));
    }

    /**
     * Retrieve the bare metal machine.
     * 
     * Get properties of the provided bare metal machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of the provided bare metal machine along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<BareMetalMachineInner>> getByResourceGroupWithResponseAsync(String resourceGroupName,
        String bareMetalMachineName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (bareMetalMachineName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter bareMetalMachineName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.getByResourceGroup(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, bareMetalMachineName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Retrieve the bare metal machine.
     * 
     * Get properties of the provided bare metal machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of the provided bare metal machine on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<BareMetalMachineInner> getByResourceGroupAsync(String resourceGroupName, String bareMetalMachineName) {
        return getByResourceGroupWithResponseAsync(resourceGroupName, bareMetalMachineName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Retrieve the bare metal machine.
     * 
     * Get properties of the provided bare metal machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of the provided bare metal machine along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BareMetalMachineInner> getByResourceGroupWithResponse(String resourceGroupName,
        String bareMetalMachineName, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (bareMetalMachineName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter bareMetalMachineName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.getByResourceGroupSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, bareMetalMachineName, accept, context);
    }

    /**
     * Retrieve the bare metal machine.
     * 
     * Get properties of the provided bare metal machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of the provided bare metal machine.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BareMetalMachineInner getByResourceGroup(String resourceGroupName, String bareMetalMachineName) {
        return getByResourceGroupWithResponse(resourceGroupName, bareMetalMachineName, Context.NONE).getValue();
    }

    /**
     * Create or update the bare metal machine.
     * 
     * Create a new bare metal machine or update the properties of the existing one.
     * All customer initiated requests will be rejected as the life cycle of this resource is managed by the system.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param bareMetalMachineParameters The request body.
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current resource. Specify
     * the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new record set to be created, but to prevent updating an existing
     * resource. Other values will result in error from server as they are not supported.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return bareMetalMachine represents the physical machine in the rack along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String bareMetalMachineName, BareMetalMachineInner bareMetalMachineParameters, String ifMatch,
        String ifNoneMatch) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (bareMetalMachineName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter bareMetalMachineName is required and cannot be null."));
        }
        if (bareMetalMachineParameters == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter bareMetalMachineParameters is required and cannot be null."));
        } else {
            bareMetalMachineParameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createOrUpdate(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, bareMetalMachineName, ifMatch, ifNoneMatch,
                bareMetalMachineParameters, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create or update the bare metal machine.
     * 
     * Create a new bare metal machine or update the properties of the existing one.
     * All customer initiated requests will be rejected as the life cycle of this resource is managed by the system.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param bareMetalMachineParameters The request body.
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current resource. Specify
     * the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new record set to be created, but to prevent updating an existing
     * resource. Other values will result in error from server as they are not supported.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return bareMetalMachine represents the physical machine in the rack along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> createOrUpdateWithResponse(String resourceGroupName, String bareMetalMachineName,
        BareMetalMachineInner bareMetalMachineParameters, String ifMatch, String ifNoneMatch) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (bareMetalMachineName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter bareMetalMachineName is required and cannot be null."));
        }
        if (bareMetalMachineParameters == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter bareMetalMachineParameters is required and cannot be null."));
        } else {
            bareMetalMachineParameters.validate();
        }
        final String accept = "application/json";
        return service.createOrUpdateSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, bareMetalMachineName, ifMatch, ifNoneMatch,
            bareMetalMachineParameters, accept, Context.NONE);
    }

    /**
     * Create or update the bare metal machine.
     * 
     * Create a new bare metal machine or update the properties of the existing one.
     * All customer initiated requests will be rejected as the life cycle of this resource is managed by the system.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param bareMetalMachineParameters The request body.
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current resource. Specify
     * the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new record set to be created, but to prevent updating an existing
     * resource. Other values will result in error from server as they are not supported.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return bareMetalMachine represents the physical machine in the rack along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> createOrUpdateWithResponse(String resourceGroupName, String bareMetalMachineName,
        BareMetalMachineInner bareMetalMachineParameters, String ifMatch, String ifNoneMatch, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (bareMetalMachineName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter bareMetalMachineName is required and cannot be null."));
        }
        if (bareMetalMachineParameters == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter bareMetalMachineParameters is required and cannot be null."));
        } else {
            bareMetalMachineParameters.validate();
        }
        final String accept = "application/json";
        return service.createOrUpdateSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, bareMetalMachineName, ifMatch, ifNoneMatch,
            bareMetalMachineParameters, accept, context);
    }

    /**
     * Create or update the bare metal machine.
     * 
     * Create a new bare metal machine or update the properties of the existing one.
     * All customer initiated requests will be rejected as the life cycle of this resource is managed by the system.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param bareMetalMachineParameters The request body.
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current resource. Specify
     * the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new record set to be created, but to prevent updating an existing
     * resource. Other values will result in error from server as they are not supported.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of bareMetalMachine represents the physical machine in the rack.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<BareMetalMachineInner>, BareMetalMachineInner> beginCreateOrUpdateAsync(
        String resourceGroupName, String bareMetalMachineName, BareMetalMachineInner bareMetalMachineParameters,
        String ifMatch, String ifNoneMatch) {
        Mono<Response<Flux<ByteBuffer>>> mono = createOrUpdateWithResponseAsync(resourceGroupName, bareMetalMachineName,
            bareMetalMachineParameters, ifMatch, ifNoneMatch);
        return this.client.<BareMetalMachineInner, BareMetalMachineInner>getLroResult(mono,
            this.client.getHttpPipeline(), BareMetalMachineInner.class, BareMetalMachineInner.class,
            this.client.getContext());
    }

    /**
     * Create or update the bare metal machine.
     * 
     * Create a new bare metal machine or update the properties of the existing one.
     * All customer initiated requests will be rejected as the life cycle of this resource is managed by the system.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param bareMetalMachineParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of bareMetalMachine represents the physical machine in the rack.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<BareMetalMachineInner>, BareMetalMachineInner> beginCreateOrUpdateAsync(
        String resourceGroupName, String bareMetalMachineName, BareMetalMachineInner bareMetalMachineParameters) {
        final String ifMatch = null;
        final String ifNoneMatch = null;
        Mono<Response<Flux<ByteBuffer>>> mono = createOrUpdateWithResponseAsync(resourceGroupName, bareMetalMachineName,
            bareMetalMachineParameters, ifMatch, ifNoneMatch);
        return this.client.<BareMetalMachineInner, BareMetalMachineInner>getLroResult(mono,
            this.client.getHttpPipeline(), BareMetalMachineInner.class, BareMetalMachineInner.class,
            this.client.getContext());
    }

    /**
     * Create or update the bare metal machine.
     * 
     * Create a new bare metal machine or update the properties of the existing one.
     * All customer initiated requests will be rejected as the life cycle of this resource is managed by the system.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param bareMetalMachineParameters The request body.
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current resource. Specify
     * the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new record set to be created, but to prevent updating an existing
     * resource. Other values will result in error from server as they are not supported.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of bareMetalMachine represents the physical machine in the rack.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<BareMetalMachineInner>, BareMetalMachineInner> beginCreateOrUpdate(
        String resourceGroupName, String bareMetalMachineName, BareMetalMachineInner bareMetalMachineParameters,
        String ifMatch, String ifNoneMatch) {
        Response<BinaryData> response = createOrUpdateWithResponse(resourceGroupName, bareMetalMachineName,
            bareMetalMachineParameters, ifMatch, ifNoneMatch);
        return this.client.<BareMetalMachineInner, BareMetalMachineInner>getLroResult(response,
            BareMetalMachineInner.class, BareMetalMachineInner.class, Context.NONE);
    }

    /**
     * Create or update the bare metal machine.
     * 
     * Create a new bare metal machine or update the properties of the existing one.
     * All customer initiated requests will be rejected as the life cycle of this resource is managed by the system.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param bareMetalMachineParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of bareMetalMachine represents the physical machine in the rack.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<BareMetalMachineInner>, BareMetalMachineInner> beginCreateOrUpdate(
        String resourceGroupName, String bareMetalMachineName, BareMetalMachineInner bareMetalMachineParameters) {
        final String ifMatch = null;
        final String ifNoneMatch = null;
        Response<BinaryData> response = createOrUpdateWithResponse(resourceGroupName, bareMetalMachineName,
            bareMetalMachineParameters, ifMatch, ifNoneMatch);
        return this.client.<BareMetalMachineInner, BareMetalMachineInner>getLroResult(response,
            BareMetalMachineInner.class, BareMetalMachineInner.class, Context.NONE);
    }

    /**
     * Create or update the bare metal machine.
     * 
     * Create a new bare metal machine or update the properties of the existing one.
     * All customer initiated requests will be rejected as the life cycle of this resource is managed by the system.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param bareMetalMachineParameters The request body.
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current resource. Specify
     * the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new record set to be created, but to prevent updating an existing
     * resource. Other values will result in error from server as they are not supported.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of bareMetalMachine represents the physical machine in the rack.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<BareMetalMachineInner>, BareMetalMachineInner> beginCreateOrUpdate(
        String resourceGroupName, String bareMetalMachineName, BareMetalMachineInner bareMetalMachineParameters,
        String ifMatch, String ifNoneMatch, Context context) {
        Response<BinaryData> response = createOrUpdateWithResponse(resourceGroupName, bareMetalMachineName,
            bareMetalMachineParameters, ifMatch, ifNoneMatch, context);
        return this.client.<BareMetalMachineInner, BareMetalMachineInner>getLroResult(response,
            BareMetalMachineInner.class, BareMetalMachineInner.class, context);
    }

    /**
     * Create or update the bare metal machine.
     * 
     * Create a new bare metal machine or update the properties of the existing one.
     * All customer initiated requests will be rejected as the life cycle of this resource is managed by the system.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param bareMetalMachineParameters The request body.
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current resource. Specify
     * the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new record set to be created, but to prevent updating an existing
     * resource. Other values will result in error from server as they are not supported.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return bareMetalMachine represents the physical machine in the rack on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<BareMetalMachineInner> createOrUpdateAsync(String resourceGroupName, String bareMetalMachineName,
        BareMetalMachineInner bareMetalMachineParameters, String ifMatch, String ifNoneMatch) {
        return beginCreateOrUpdateAsync(resourceGroupName, bareMetalMachineName, bareMetalMachineParameters, ifMatch,
            ifNoneMatch).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create or update the bare metal machine.
     * 
     * Create a new bare metal machine or update the properties of the existing one.
     * All customer initiated requests will be rejected as the life cycle of this resource is managed by the system.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param bareMetalMachineParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return bareMetalMachine represents the physical machine in the rack on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<BareMetalMachineInner> createOrUpdateAsync(String resourceGroupName, String bareMetalMachineName,
        BareMetalMachineInner bareMetalMachineParameters) {
        final String ifMatch = null;
        final String ifNoneMatch = null;
        return beginCreateOrUpdateAsync(resourceGroupName, bareMetalMachineName, bareMetalMachineParameters, ifMatch,
            ifNoneMatch).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create or update the bare metal machine.
     * 
     * Create a new bare metal machine or update the properties of the existing one.
     * All customer initiated requests will be rejected as the life cycle of this resource is managed by the system.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param bareMetalMachineParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return bareMetalMachine represents the physical machine in the rack.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BareMetalMachineInner createOrUpdate(String resourceGroupName, String bareMetalMachineName,
        BareMetalMachineInner bareMetalMachineParameters) {
        final String ifMatch = null;
        final String ifNoneMatch = null;
        return beginCreateOrUpdate(resourceGroupName, bareMetalMachineName, bareMetalMachineParameters, ifMatch,
            ifNoneMatch).getFinalResult();
    }

    /**
     * Create or update the bare metal machine.
     * 
     * Create a new bare metal machine or update the properties of the existing one.
     * All customer initiated requests will be rejected as the life cycle of this resource is managed by the system.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param bareMetalMachineParameters The request body.
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current resource. Specify
     * the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new record set to be created, but to prevent updating an existing
     * resource. Other values will result in error from server as they are not supported.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return bareMetalMachine represents the physical machine in the rack.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BareMetalMachineInner createOrUpdate(String resourceGroupName, String bareMetalMachineName,
        BareMetalMachineInner bareMetalMachineParameters, String ifMatch, String ifNoneMatch, Context context) {
        return beginCreateOrUpdate(resourceGroupName, bareMetalMachineName, bareMetalMachineParameters, ifMatch,
            ifNoneMatch, context).getFinalResult();
    }

    /**
     * Delete the bare metal machine.
     * 
     * Delete the provided bare metal machine.
     * All customer initiated requests will be rejected as the life cycle of this resource is managed by the system.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current resource. Specify
     * the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new record set to be created, but to prevent updating an existing
     * resource. Other values will result in error from server as they are not supported.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName,
        String bareMetalMachineName, String ifMatch, String ifNoneMatch) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (bareMetalMachineName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter bareMetalMachineName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, bareMetalMachineName, ifMatch, ifNoneMatch, accept,
                context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete the bare metal machine.
     * 
     * Delete the provided bare metal machine.
     * All customer initiated requests will be rejected as the life cycle of this resource is managed by the system.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current resource. Specify
     * the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new record set to be created, but to prevent updating an existing
     * resource. Other values will result in error from server as they are not supported.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> deleteWithResponse(String resourceGroupName, String bareMetalMachineName,
        String ifMatch, String ifNoneMatch) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (bareMetalMachineName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter bareMetalMachineName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.deleteSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, bareMetalMachineName, ifMatch, ifNoneMatch, accept,
            Context.NONE);
    }

    /**
     * Delete the bare metal machine.
     * 
     * Delete the provided bare metal machine.
     * All customer initiated requests will be rejected as the life cycle of this resource is managed by the system.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current resource. Specify
     * the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new record set to be created, but to prevent updating an existing
     * resource. Other values will result in error from server as they are not supported.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> deleteWithResponse(String resourceGroupName, String bareMetalMachineName,
        String ifMatch, String ifNoneMatch, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (bareMetalMachineName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter bareMetalMachineName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.deleteSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, bareMetalMachineName, ifMatch, ifNoneMatch, accept,
            context);
    }

    /**
     * Delete the bare metal machine.
     * 
     * Delete the provided bare metal machine.
     * All customer initiated requests will be rejected as the life cycle of this resource is managed by the system.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current resource. Specify
     * the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new record set to be created, but to prevent updating an existing
     * resource. Other values will result in error from server as they are not supported.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginDeleteAsync(String resourceGroupName, String bareMetalMachineName, String ifMatch, String ifNoneMatch) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = deleteWithResponseAsync(resourceGroupName, bareMetalMachineName, ifMatch, ifNoneMatch);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(mono,
            this.client.getHttpPipeline(), OperationStatusResultInner.class, OperationStatusResultInner.class,
            this.client.getContext());
    }

    /**
     * Delete the bare metal machine.
     * 
     * Delete the provided bare metal machine.
     * All customer initiated requests will be rejected as the life cycle of this resource is managed by the system.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginDeleteAsync(String resourceGroupName, String bareMetalMachineName) {
        final String ifMatch = null;
        final String ifNoneMatch = null;
        Mono<Response<Flux<ByteBuffer>>> mono
            = deleteWithResponseAsync(resourceGroupName, bareMetalMachineName, ifMatch, ifNoneMatch);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(mono,
            this.client.getHttpPipeline(), OperationStatusResultInner.class, OperationStatusResultInner.class,
            this.client.getContext());
    }

    /**
     * Delete the bare metal machine.
     * 
     * Delete the provided bare metal machine.
     * All customer initiated requests will be rejected as the life cycle of this resource is managed by the system.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current resource. Specify
     * the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new record set to be created, but to prevent updating an existing
     * resource. Other values will result in error from server as they are not supported.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginDelete(String resourceGroupName, String bareMetalMachineName, String ifMatch, String ifNoneMatch) {
        Response<BinaryData> response
            = deleteWithResponse(resourceGroupName, bareMetalMachineName, ifMatch, ifNoneMatch);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(response,
            OperationStatusResultInner.class, OperationStatusResultInner.class, Context.NONE);
    }

    /**
     * Delete the bare metal machine.
     * 
     * Delete the provided bare metal machine.
     * All customer initiated requests will be rejected as the life cycle of this resource is managed by the system.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginDelete(String resourceGroupName, String bareMetalMachineName) {
        final String ifMatch = null;
        final String ifNoneMatch = null;
        Response<BinaryData> response
            = deleteWithResponse(resourceGroupName, bareMetalMachineName, ifMatch, ifNoneMatch);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(response,
            OperationStatusResultInner.class, OperationStatusResultInner.class, Context.NONE);
    }

    /**
     * Delete the bare metal machine.
     * 
     * Delete the provided bare metal machine.
     * All customer initiated requests will be rejected as the life cycle of this resource is managed by the system.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current resource. Specify
     * the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new record set to be created, but to prevent updating an existing
     * resource. Other values will result in error from server as they are not supported.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner> beginDelete(
        String resourceGroupName, String bareMetalMachineName, String ifMatch, String ifNoneMatch, Context context) {
        Response<BinaryData> response
            = deleteWithResponse(resourceGroupName, bareMetalMachineName, ifMatch, ifNoneMatch, context);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(response,
            OperationStatusResultInner.class, OperationStatusResultInner.class, context);
    }

    /**
     * Delete the bare metal machine.
     * 
     * Delete the provided bare metal machine.
     * All customer initiated requests will be rejected as the life cycle of this resource is managed by the system.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current resource. Specify
     * the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new record set to be created, but to prevent updating an existing
     * resource. Other values will result in error from server as they are not supported.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<OperationStatusResultInner> deleteAsync(String resourceGroupName, String bareMetalMachineName,
        String ifMatch, String ifNoneMatch) {
        return beginDeleteAsync(resourceGroupName, bareMetalMachineName, ifMatch, ifNoneMatch).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete the bare metal machine.
     * 
     * Delete the provided bare metal machine.
     * All customer initiated requests will be rejected as the life cycle of this resource is managed by the system.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<OperationStatusResultInner> deleteAsync(String resourceGroupName, String bareMetalMachineName) {
        final String ifMatch = null;
        final String ifNoneMatch = null;
        return beginDeleteAsync(resourceGroupName, bareMetalMachineName, ifMatch, ifNoneMatch).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete the bare metal machine.
     * 
     * Delete the provided bare metal machine.
     * All customer initiated requests will be rejected as the life cycle of this resource is managed by the system.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OperationStatusResultInner delete(String resourceGroupName, String bareMetalMachineName) {
        final String ifMatch = null;
        final String ifNoneMatch = null;
        return beginDelete(resourceGroupName, bareMetalMachineName, ifMatch, ifNoneMatch).getFinalResult();
    }

    /**
     * Delete the bare metal machine.
     * 
     * Delete the provided bare metal machine.
     * All customer initiated requests will be rejected as the life cycle of this resource is managed by the system.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current resource. Specify
     * the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new record set to be created, but to prevent updating an existing
     * resource. Other values will result in error from server as they are not supported.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OperationStatusResultInner delete(String resourceGroupName, String bareMetalMachineName, String ifMatch,
        String ifNoneMatch, Context context) {
        return beginDelete(resourceGroupName, bareMetalMachineName, ifMatch, ifNoneMatch, context).getFinalResult();
    }

    /**
     * Patch the bare metal machine.
     * 
     * Patch properties of the provided bare metal machine, or update tags associated with the bare metal machine.
     * Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current resource. Specify
     * the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new record set to be created, but to prevent updating an existing
     * resource. Other values will result in error from server as they are not supported.
     * @param bareMetalMachineUpdateParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return bareMetalMachine represents the physical machine in the rack along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String resourceGroupName,
        String bareMetalMachineName, String ifMatch, String ifNoneMatch,
        BareMetalMachinePatchParameters bareMetalMachineUpdateParameters) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (bareMetalMachineName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter bareMetalMachineName is required and cannot be null."));
        }
        if (bareMetalMachineUpdateParameters != null) {
            bareMetalMachineUpdateParameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.update(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, bareMetalMachineName, ifMatch, ifNoneMatch,
                bareMetalMachineUpdateParameters, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Patch the bare metal machine.
     * 
     * Patch properties of the provided bare metal machine, or update tags associated with the bare metal machine.
     * Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current resource. Specify
     * the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new record set to be created, but to prevent updating an existing
     * resource. Other values will result in error from server as they are not supported.
     * @param bareMetalMachineUpdateParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return bareMetalMachine represents the physical machine in the rack along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> updateWithResponse(String resourceGroupName, String bareMetalMachineName,
        String ifMatch, String ifNoneMatch, BareMetalMachinePatchParameters bareMetalMachineUpdateParameters) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (bareMetalMachineName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter bareMetalMachineName is required and cannot be null."));
        }
        if (bareMetalMachineUpdateParameters != null) {
            bareMetalMachineUpdateParameters.validate();
        }
        final String accept = "application/json";
        return service.updateSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, bareMetalMachineName, ifMatch, ifNoneMatch,
            bareMetalMachineUpdateParameters, accept, Context.NONE);
    }

    /**
     * Patch the bare metal machine.
     * 
     * Patch properties of the provided bare metal machine, or update tags associated with the bare metal machine.
     * Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current resource. Specify
     * the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new record set to be created, but to prevent updating an existing
     * resource. Other values will result in error from server as they are not supported.
     * @param bareMetalMachineUpdateParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return bareMetalMachine represents the physical machine in the rack along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> updateWithResponse(String resourceGroupName, String bareMetalMachineName,
        String ifMatch, String ifNoneMatch, BareMetalMachinePatchParameters bareMetalMachineUpdateParameters,
        Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (bareMetalMachineName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter bareMetalMachineName is required and cannot be null."));
        }
        if (bareMetalMachineUpdateParameters != null) {
            bareMetalMachineUpdateParameters.validate();
        }
        final String accept = "application/json";
        return service.updateSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, bareMetalMachineName, ifMatch, ifNoneMatch,
            bareMetalMachineUpdateParameters, accept, context);
    }

    /**
     * Patch the bare metal machine.
     * 
     * Patch properties of the provided bare metal machine, or update tags associated with the bare metal machine.
     * Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current resource. Specify
     * the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new record set to be created, but to prevent updating an existing
     * resource. Other values will result in error from server as they are not supported.
     * @param bareMetalMachineUpdateParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of bareMetalMachine represents the physical machine in the rack.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<BareMetalMachineInner>, BareMetalMachineInner> beginUpdateAsync(
        String resourceGroupName, String bareMetalMachineName, String ifMatch, String ifNoneMatch,
        BareMetalMachinePatchParameters bareMetalMachineUpdateParameters) {
        Mono<Response<Flux<ByteBuffer>>> mono = updateWithResponseAsync(resourceGroupName, bareMetalMachineName,
            ifMatch, ifNoneMatch, bareMetalMachineUpdateParameters);
        return this.client.<BareMetalMachineInner, BareMetalMachineInner>getLroResult(mono,
            this.client.getHttpPipeline(), BareMetalMachineInner.class, BareMetalMachineInner.class,
            this.client.getContext());
    }

    /**
     * Patch the bare metal machine.
     * 
     * Patch properties of the provided bare metal machine, or update tags associated with the bare metal machine.
     * Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of bareMetalMachine represents the physical machine in the rack.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<BareMetalMachineInner>, BareMetalMachineInner>
        beginUpdateAsync(String resourceGroupName, String bareMetalMachineName) {
        final String ifMatch = null;
        final String ifNoneMatch = null;
        final BareMetalMachinePatchParameters bareMetalMachineUpdateParameters = null;
        Mono<Response<Flux<ByteBuffer>>> mono = updateWithResponseAsync(resourceGroupName, bareMetalMachineName,
            ifMatch, ifNoneMatch, bareMetalMachineUpdateParameters);
        return this.client.<BareMetalMachineInner, BareMetalMachineInner>getLroResult(mono,
            this.client.getHttpPipeline(), BareMetalMachineInner.class, BareMetalMachineInner.class,
            this.client.getContext());
    }

    /**
     * Patch the bare metal machine.
     * 
     * Patch properties of the provided bare metal machine, or update tags associated with the bare metal machine.
     * Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current resource. Specify
     * the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new record set to be created, but to prevent updating an existing
     * resource. Other values will result in error from server as they are not supported.
     * @param bareMetalMachineUpdateParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of bareMetalMachine represents the physical machine in the rack.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<BareMetalMachineInner>, BareMetalMachineInner> beginUpdate(String resourceGroupName,
        String bareMetalMachineName, String ifMatch, String ifNoneMatch,
        BareMetalMachinePatchParameters bareMetalMachineUpdateParameters) {
        Response<BinaryData> response = updateWithResponse(resourceGroupName, bareMetalMachineName, ifMatch,
            ifNoneMatch, bareMetalMachineUpdateParameters);
        return this.client.<BareMetalMachineInner, BareMetalMachineInner>getLroResult(response,
            BareMetalMachineInner.class, BareMetalMachineInner.class, Context.NONE);
    }

    /**
     * Patch the bare metal machine.
     * 
     * Patch properties of the provided bare metal machine, or update tags associated with the bare metal machine.
     * Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of bareMetalMachine represents the physical machine in the rack.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<BareMetalMachineInner>, BareMetalMachineInner> beginUpdate(String resourceGroupName,
        String bareMetalMachineName) {
        final String ifMatch = null;
        final String ifNoneMatch = null;
        final BareMetalMachinePatchParameters bareMetalMachineUpdateParameters = null;
        Response<BinaryData> response = updateWithResponse(resourceGroupName, bareMetalMachineName, ifMatch,
            ifNoneMatch, bareMetalMachineUpdateParameters);
        return this.client.<BareMetalMachineInner, BareMetalMachineInner>getLroResult(response,
            BareMetalMachineInner.class, BareMetalMachineInner.class, Context.NONE);
    }

    /**
     * Patch the bare metal machine.
     * 
     * Patch properties of the provided bare metal machine, or update tags associated with the bare metal machine.
     * Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current resource. Specify
     * the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new record set to be created, but to prevent updating an existing
     * resource. Other values will result in error from server as they are not supported.
     * @param bareMetalMachineUpdateParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of bareMetalMachine represents the physical machine in the rack.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<BareMetalMachineInner>, BareMetalMachineInner> beginUpdate(String resourceGroupName,
        String bareMetalMachineName, String ifMatch, String ifNoneMatch,
        BareMetalMachinePatchParameters bareMetalMachineUpdateParameters, Context context) {
        Response<BinaryData> response = updateWithResponse(resourceGroupName, bareMetalMachineName, ifMatch,
            ifNoneMatch, bareMetalMachineUpdateParameters, context);
        return this.client.<BareMetalMachineInner, BareMetalMachineInner>getLroResult(response,
            BareMetalMachineInner.class, BareMetalMachineInner.class, context);
    }

    /**
     * Patch the bare metal machine.
     * 
     * Patch properties of the provided bare metal machine, or update tags associated with the bare metal machine.
     * Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current resource. Specify
     * the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new record set to be created, but to prevent updating an existing
     * resource. Other values will result in error from server as they are not supported.
     * @param bareMetalMachineUpdateParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return bareMetalMachine represents the physical machine in the rack on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<BareMetalMachineInner> updateAsync(String resourceGroupName, String bareMetalMachineName,
        String ifMatch, String ifNoneMatch, BareMetalMachinePatchParameters bareMetalMachineUpdateParameters) {
        return beginUpdateAsync(resourceGroupName, bareMetalMachineName, ifMatch, ifNoneMatch,
            bareMetalMachineUpdateParameters).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Patch the bare metal machine.
     * 
     * Patch properties of the provided bare metal machine, or update tags associated with the bare metal machine.
     * Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return bareMetalMachine represents the physical machine in the rack on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<BareMetalMachineInner> updateAsync(String resourceGroupName, String bareMetalMachineName) {
        final String ifMatch = null;
        final String ifNoneMatch = null;
        final BareMetalMachinePatchParameters bareMetalMachineUpdateParameters = null;
        return beginUpdateAsync(resourceGroupName, bareMetalMachineName, ifMatch, ifNoneMatch,
            bareMetalMachineUpdateParameters).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Patch the bare metal machine.
     * 
     * Patch properties of the provided bare metal machine, or update tags associated with the bare metal machine.
     * Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return bareMetalMachine represents the physical machine in the rack.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BareMetalMachineInner update(String resourceGroupName, String bareMetalMachineName) {
        final String ifMatch = null;
        final String ifNoneMatch = null;
        final BareMetalMachinePatchParameters bareMetalMachineUpdateParameters = null;
        return beginUpdate(resourceGroupName, bareMetalMachineName, ifMatch, ifNoneMatch,
            bareMetalMachineUpdateParameters).getFinalResult();
    }

    /**
     * Patch the bare metal machine.
     * 
     * Patch properties of the provided bare metal machine, or update tags associated with the bare metal machine.
     * Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current resource. Specify
     * the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new record set to be created, but to prevent updating an existing
     * resource. Other values will result in error from server as they are not supported.
     * @param bareMetalMachineUpdateParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return bareMetalMachine represents the physical machine in the rack.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BareMetalMachineInner update(String resourceGroupName, String bareMetalMachineName, String ifMatch,
        String ifNoneMatch, BareMetalMachinePatchParameters bareMetalMachineUpdateParameters, Context context) {
        return beginUpdate(resourceGroupName, bareMetalMachineName, ifMatch, ifNoneMatch,
            bareMetalMachineUpdateParameters, context).getFinalResult();
    }

    /**
     * Cordon the bare metal machine.
     * 
     * Cordon the provided bare metal machine's Kubernetes node.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param bareMetalMachineCordonParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> cordonWithResponseAsync(String resourceGroupName,
        String bareMetalMachineName, BareMetalMachineCordonParameters bareMetalMachineCordonParameters) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (bareMetalMachineName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter bareMetalMachineName is required and cannot be null."));
        }
        if (bareMetalMachineCordonParameters != null) {
            bareMetalMachineCordonParameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.cordon(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, bareMetalMachineName,
                bareMetalMachineCordonParameters, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Cordon the bare metal machine.
     * 
     * Cordon the provided bare metal machine's Kubernetes node.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param bareMetalMachineCordonParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> cordonWithResponse(String resourceGroupName, String bareMetalMachineName,
        BareMetalMachineCordonParameters bareMetalMachineCordonParameters) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (bareMetalMachineName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter bareMetalMachineName is required and cannot be null."));
        }
        if (bareMetalMachineCordonParameters != null) {
            bareMetalMachineCordonParameters.validate();
        }
        final String accept = "application/json";
        return service.cordonSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, bareMetalMachineName, bareMetalMachineCordonParameters,
            accept, Context.NONE);
    }

    /**
     * Cordon the bare metal machine.
     * 
     * Cordon the provided bare metal machine's Kubernetes node.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param bareMetalMachineCordonParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> cordonWithResponse(String resourceGroupName, String bareMetalMachineName,
        BareMetalMachineCordonParameters bareMetalMachineCordonParameters, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (bareMetalMachineName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter bareMetalMachineName is required and cannot be null."));
        }
        if (bareMetalMachineCordonParameters != null) {
            bareMetalMachineCordonParameters.validate();
        }
        final String accept = "application/json";
        return service.cordonSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, bareMetalMachineName, bareMetalMachineCordonParameters,
            accept, context);
    }

    /**
     * Cordon the bare metal machine.
     * 
     * Cordon the provided bare metal machine's Kubernetes node.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param bareMetalMachineCordonParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<OperationStatusResultInner>, OperationStatusResultInner> beginCordonAsync(
        String resourceGroupName, String bareMetalMachineName,
        BareMetalMachineCordonParameters bareMetalMachineCordonParameters) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = cordonWithResponseAsync(resourceGroupName, bareMetalMachineName, bareMetalMachineCordonParameters);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(mono,
            this.client.getHttpPipeline(), OperationStatusResultInner.class, OperationStatusResultInner.class,
            this.client.getContext());
    }

    /**
     * Cordon the bare metal machine.
     * 
     * Cordon the provided bare metal machine's Kubernetes node.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginCordonAsync(String resourceGroupName, String bareMetalMachineName) {
        final BareMetalMachineCordonParameters bareMetalMachineCordonParameters = null;
        Mono<Response<Flux<ByteBuffer>>> mono
            = cordonWithResponseAsync(resourceGroupName, bareMetalMachineName, bareMetalMachineCordonParameters);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(mono,
            this.client.getHttpPipeline(), OperationStatusResultInner.class, OperationStatusResultInner.class,
            this.client.getContext());
    }

    /**
     * Cordon the bare metal machine.
     * 
     * Cordon the provided bare metal machine's Kubernetes node.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param bareMetalMachineCordonParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner> beginCordon(
        String resourceGroupName, String bareMetalMachineName,
        BareMetalMachineCordonParameters bareMetalMachineCordonParameters) {
        Response<BinaryData> response
            = cordonWithResponse(resourceGroupName, bareMetalMachineName, bareMetalMachineCordonParameters);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(response,
            OperationStatusResultInner.class, OperationStatusResultInner.class, Context.NONE);
    }

    /**
     * Cordon the bare metal machine.
     * 
     * Cordon the provided bare metal machine's Kubernetes node.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginCordon(String resourceGroupName, String bareMetalMachineName) {
        final BareMetalMachineCordonParameters bareMetalMachineCordonParameters = null;
        Response<BinaryData> response
            = cordonWithResponse(resourceGroupName, bareMetalMachineName, bareMetalMachineCordonParameters);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(response,
            OperationStatusResultInner.class, OperationStatusResultInner.class, Context.NONE);
    }

    /**
     * Cordon the bare metal machine.
     * 
     * Cordon the provided bare metal machine's Kubernetes node.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param bareMetalMachineCordonParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner> beginCordon(
        String resourceGroupName, String bareMetalMachineName,
        BareMetalMachineCordonParameters bareMetalMachineCordonParameters, Context context) {
        Response<BinaryData> response
            = cordonWithResponse(resourceGroupName, bareMetalMachineName, bareMetalMachineCordonParameters, context);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(response,
            OperationStatusResultInner.class, OperationStatusResultInner.class, context);
    }

    /**
     * Cordon the bare metal machine.
     * 
     * Cordon the provided bare metal machine's Kubernetes node.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param bareMetalMachineCordonParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<OperationStatusResultInner> cordonAsync(String resourceGroupName, String bareMetalMachineName,
        BareMetalMachineCordonParameters bareMetalMachineCordonParameters) {
        return beginCordonAsync(resourceGroupName, bareMetalMachineName, bareMetalMachineCordonParameters).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Cordon the bare metal machine.
     * 
     * Cordon the provided bare metal machine's Kubernetes node.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<OperationStatusResultInner> cordonAsync(String resourceGroupName, String bareMetalMachineName) {
        final BareMetalMachineCordonParameters bareMetalMachineCordonParameters = null;
        return beginCordonAsync(resourceGroupName, bareMetalMachineName, bareMetalMachineCordonParameters).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Cordon the bare metal machine.
     * 
     * Cordon the provided bare metal machine's Kubernetes node.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OperationStatusResultInner cordon(String resourceGroupName, String bareMetalMachineName) {
        final BareMetalMachineCordonParameters bareMetalMachineCordonParameters = null;
        return beginCordon(resourceGroupName, bareMetalMachineName, bareMetalMachineCordonParameters).getFinalResult();
    }

    /**
     * Cordon the bare metal machine.
     * 
     * Cordon the provided bare metal machine's Kubernetes node.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param bareMetalMachineCordonParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OperationStatusResultInner cordon(String resourceGroupName, String bareMetalMachineName,
        BareMetalMachineCordonParameters bareMetalMachineCordonParameters, Context context) {
        return beginCordon(resourceGroupName, bareMetalMachineName, bareMetalMachineCordonParameters, context)
            .getFinalResult();
    }

    /**
     * Power off the bare metal machine.
     * 
     * Power off the provided bare metal machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param bareMetalMachinePowerOffParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> powerOffWithResponseAsync(String resourceGroupName,
        String bareMetalMachineName, BareMetalMachinePowerOffParameters bareMetalMachinePowerOffParameters) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (bareMetalMachineName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter bareMetalMachineName is required and cannot be null."));
        }
        if (bareMetalMachinePowerOffParameters != null) {
            bareMetalMachinePowerOffParameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.powerOff(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, bareMetalMachineName,
                bareMetalMachinePowerOffParameters, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Power off the bare metal machine.
     * 
     * Power off the provided bare metal machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param bareMetalMachinePowerOffParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> powerOffWithResponse(String resourceGroupName, String bareMetalMachineName,
        BareMetalMachinePowerOffParameters bareMetalMachinePowerOffParameters) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (bareMetalMachineName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter bareMetalMachineName is required and cannot be null."));
        }
        if (bareMetalMachinePowerOffParameters != null) {
            bareMetalMachinePowerOffParameters.validate();
        }
        final String accept = "application/json";
        return service.powerOffSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, bareMetalMachineName,
            bareMetalMachinePowerOffParameters, accept, Context.NONE);
    }

    /**
     * Power off the bare metal machine.
     * 
     * Power off the provided bare metal machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param bareMetalMachinePowerOffParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> powerOffWithResponse(String resourceGroupName, String bareMetalMachineName,
        BareMetalMachinePowerOffParameters bareMetalMachinePowerOffParameters, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (bareMetalMachineName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter bareMetalMachineName is required and cannot be null."));
        }
        if (bareMetalMachinePowerOffParameters != null) {
            bareMetalMachinePowerOffParameters.validate();
        }
        final String accept = "application/json";
        return service.powerOffSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, bareMetalMachineName,
            bareMetalMachinePowerOffParameters, accept, context);
    }

    /**
     * Power off the bare metal machine.
     * 
     * Power off the provided bare metal machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param bareMetalMachinePowerOffParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<OperationStatusResultInner>, OperationStatusResultInner> beginPowerOffAsync(
        String resourceGroupName, String bareMetalMachineName,
        BareMetalMachinePowerOffParameters bareMetalMachinePowerOffParameters) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = powerOffWithResponseAsync(resourceGroupName, bareMetalMachineName, bareMetalMachinePowerOffParameters);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(mono,
            this.client.getHttpPipeline(), OperationStatusResultInner.class, OperationStatusResultInner.class,
            this.client.getContext());
    }

    /**
     * Power off the bare metal machine.
     * 
     * Power off the provided bare metal machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginPowerOffAsync(String resourceGroupName, String bareMetalMachineName) {
        final BareMetalMachinePowerOffParameters bareMetalMachinePowerOffParameters = null;
        Mono<Response<Flux<ByteBuffer>>> mono
            = powerOffWithResponseAsync(resourceGroupName, bareMetalMachineName, bareMetalMachinePowerOffParameters);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(mono,
            this.client.getHttpPipeline(), OperationStatusResultInner.class, OperationStatusResultInner.class,
            this.client.getContext());
    }

    /**
     * Power off the bare metal machine.
     * 
     * Power off the provided bare metal machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param bareMetalMachinePowerOffParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner> beginPowerOff(
        String resourceGroupName, String bareMetalMachineName,
        BareMetalMachinePowerOffParameters bareMetalMachinePowerOffParameters) {
        Response<BinaryData> response
            = powerOffWithResponse(resourceGroupName, bareMetalMachineName, bareMetalMachinePowerOffParameters);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(response,
            OperationStatusResultInner.class, OperationStatusResultInner.class, Context.NONE);
    }

    /**
     * Power off the bare metal machine.
     * 
     * Power off the provided bare metal machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginPowerOff(String resourceGroupName, String bareMetalMachineName) {
        final BareMetalMachinePowerOffParameters bareMetalMachinePowerOffParameters = null;
        Response<BinaryData> response
            = powerOffWithResponse(resourceGroupName, bareMetalMachineName, bareMetalMachinePowerOffParameters);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(response,
            OperationStatusResultInner.class, OperationStatusResultInner.class, Context.NONE);
    }

    /**
     * Power off the bare metal machine.
     * 
     * Power off the provided bare metal machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param bareMetalMachinePowerOffParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner> beginPowerOff(
        String resourceGroupName, String bareMetalMachineName,
        BareMetalMachinePowerOffParameters bareMetalMachinePowerOffParameters, Context context) {
        Response<BinaryData> response = powerOffWithResponse(resourceGroupName, bareMetalMachineName,
            bareMetalMachinePowerOffParameters, context);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(response,
            OperationStatusResultInner.class, OperationStatusResultInner.class, context);
    }

    /**
     * Power off the bare metal machine.
     * 
     * Power off the provided bare metal machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param bareMetalMachinePowerOffParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<OperationStatusResultInner> powerOffAsync(String resourceGroupName, String bareMetalMachineName,
        BareMetalMachinePowerOffParameters bareMetalMachinePowerOffParameters) {
        return beginPowerOffAsync(resourceGroupName, bareMetalMachineName, bareMetalMachinePowerOffParameters).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Power off the bare metal machine.
     * 
     * Power off the provided bare metal machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<OperationStatusResultInner> powerOffAsync(String resourceGroupName, String bareMetalMachineName) {
        final BareMetalMachinePowerOffParameters bareMetalMachinePowerOffParameters = null;
        return beginPowerOffAsync(resourceGroupName, bareMetalMachineName, bareMetalMachinePowerOffParameters).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Power off the bare metal machine.
     * 
     * Power off the provided bare metal machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OperationStatusResultInner powerOff(String resourceGroupName, String bareMetalMachineName) {
        final BareMetalMachinePowerOffParameters bareMetalMachinePowerOffParameters = null;
        return beginPowerOff(resourceGroupName, bareMetalMachineName, bareMetalMachinePowerOffParameters)
            .getFinalResult();
    }

    /**
     * Power off the bare metal machine.
     * 
     * Power off the provided bare metal machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param bareMetalMachinePowerOffParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OperationStatusResultInner powerOff(String resourceGroupName, String bareMetalMachineName,
        BareMetalMachinePowerOffParameters bareMetalMachinePowerOffParameters, Context context) {
        return beginPowerOff(resourceGroupName, bareMetalMachineName, bareMetalMachinePowerOffParameters, context)
            .getFinalResult();
    }

    /**
     * Reimage the bare metal machine.
     * 
     * Reimage the provided bare metal machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> reimageWithResponseAsync(String resourceGroupName,
        String bareMetalMachineName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (bareMetalMachineName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter bareMetalMachineName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.reimage(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, bareMetalMachineName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Reimage the bare metal machine.
     * 
     * Reimage the provided bare metal machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> reimageWithResponse(String resourceGroupName, String bareMetalMachineName) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (bareMetalMachineName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter bareMetalMachineName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.reimageSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, bareMetalMachineName, accept, Context.NONE);
    }

    /**
     * Reimage the bare metal machine.
     * 
     * Reimage the provided bare metal machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> reimageWithResponse(String resourceGroupName, String bareMetalMachineName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (bareMetalMachineName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter bareMetalMachineName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.reimageSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, bareMetalMachineName, accept, context);
    }

    /**
     * Reimage the bare metal machine.
     * 
     * Reimage the provided bare metal machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginReimageAsync(String resourceGroupName, String bareMetalMachineName) {
        Mono<Response<Flux<ByteBuffer>>> mono = reimageWithResponseAsync(resourceGroupName, bareMetalMachineName);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(mono,
            this.client.getHttpPipeline(), OperationStatusResultInner.class, OperationStatusResultInner.class,
            this.client.getContext());
    }

    /**
     * Reimage the bare metal machine.
     * 
     * Reimage the provided bare metal machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginReimage(String resourceGroupName, String bareMetalMachineName) {
        Response<BinaryData> response = reimageWithResponse(resourceGroupName, bareMetalMachineName);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(response,
            OperationStatusResultInner.class, OperationStatusResultInner.class, Context.NONE);
    }

    /**
     * Reimage the bare metal machine.
     * 
     * Reimage the provided bare metal machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginReimage(String resourceGroupName, String bareMetalMachineName, Context context) {
        Response<BinaryData> response = reimageWithResponse(resourceGroupName, bareMetalMachineName, context);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(response,
            OperationStatusResultInner.class, OperationStatusResultInner.class, context);
    }

    /**
     * Reimage the bare metal machine.
     * 
     * Reimage the provided bare metal machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<OperationStatusResultInner> reimageAsync(String resourceGroupName, String bareMetalMachineName) {
        return beginReimageAsync(resourceGroupName, bareMetalMachineName).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Reimage the bare metal machine.
     * 
     * Reimage the provided bare metal machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OperationStatusResultInner reimage(String resourceGroupName, String bareMetalMachineName) {
        return beginReimage(resourceGroupName, bareMetalMachineName).getFinalResult();
    }

    /**
     * Reimage the bare metal machine.
     * 
     * Reimage the provided bare metal machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OperationStatusResultInner reimage(String resourceGroupName, String bareMetalMachineName, Context context) {
        return beginReimage(resourceGroupName, bareMetalMachineName, context).getFinalResult();
    }

    /**
     * Replace (service) the bare metal machine.
     * 
     * Replace the provided bare metal machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param bareMetalMachineReplaceParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> replaceWithResponseAsync(String resourceGroupName,
        String bareMetalMachineName, BareMetalMachineReplaceParameters bareMetalMachineReplaceParameters) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (bareMetalMachineName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter bareMetalMachineName is required and cannot be null."));
        }
        if (bareMetalMachineReplaceParameters != null) {
            bareMetalMachineReplaceParameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.replace(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, bareMetalMachineName,
                bareMetalMachineReplaceParameters, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Replace (service) the bare metal machine.
     * 
     * Replace the provided bare metal machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param bareMetalMachineReplaceParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> replaceWithResponse(String resourceGroupName, String bareMetalMachineName,
        BareMetalMachineReplaceParameters bareMetalMachineReplaceParameters) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (bareMetalMachineName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter bareMetalMachineName is required and cannot be null."));
        }
        if (bareMetalMachineReplaceParameters != null) {
            bareMetalMachineReplaceParameters.validate();
        }
        final String accept = "application/json";
        return service.replaceSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, bareMetalMachineName, bareMetalMachineReplaceParameters,
            accept, Context.NONE);
    }

    /**
     * Replace (service) the bare metal machine.
     * 
     * Replace the provided bare metal machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param bareMetalMachineReplaceParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> replaceWithResponse(String resourceGroupName, String bareMetalMachineName,
        BareMetalMachineReplaceParameters bareMetalMachineReplaceParameters, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (bareMetalMachineName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter bareMetalMachineName is required and cannot be null."));
        }
        if (bareMetalMachineReplaceParameters != null) {
            bareMetalMachineReplaceParameters.validate();
        }
        final String accept = "application/json";
        return service.replaceSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, bareMetalMachineName, bareMetalMachineReplaceParameters,
            accept, context);
    }

    /**
     * Replace (service) the bare metal machine.
     * 
     * Replace the provided bare metal machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param bareMetalMachineReplaceParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<OperationStatusResultInner>, OperationStatusResultInner> beginReplaceAsync(
        String resourceGroupName, String bareMetalMachineName,
        BareMetalMachineReplaceParameters bareMetalMachineReplaceParameters) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = replaceWithResponseAsync(resourceGroupName, bareMetalMachineName, bareMetalMachineReplaceParameters);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(mono,
            this.client.getHttpPipeline(), OperationStatusResultInner.class, OperationStatusResultInner.class,
            this.client.getContext());
    }

    /**
     * Replace (service) the bare metal machine.
     * 
     * Replace the provided bare metal machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginReplaceAsync(String resourceGroupName, String bareMetalMachineName) {
        final BareMetalMachineReplaceParameters bareMetalMachineReplaceParameters = null;
        Mono<Response<Flux<ByteBuffer>>> mono
            = replaceWithResponseAsync(resourceGroupName, bareMetalMachineName, bareMetalMachineReplaceParameters);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(mono,
            this.client.getHttpPipeline(), OperationStatusResultInner.class, OperationStatusResultInner.class,
            this.client.getContext());
    }

    /**
     * Replace (service) the bare metal machine.
     * 
     * Replace the provided bare metal machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param bareMetalMachineReplaceParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner> beginReplace(
        String resourceGroupName, String bareMetalMachineName,
        BareMetalMachineReplaceParameters bareMetalMachineReplaceParameters) {
        Response<BinaryData> response
            = replaceWithResponse(resourceGroupName, bareMetalMachineName, bareMetalMachineReplaceParameters);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(response,
            OperationStatusResultInner.class, OperationStatusResultInner.class, Context.NONE);
    }

    /**
     * Replace (service) the bare metal machine.
     * 
     * Replace the provided bare metal machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginReplace(String resourceGroupName, String bareMetalMachineName) {
        final BareMetalMachineReplaceParameters bareMetalMachineReplaceParameters = null;
        Response<BinaryData> response
            = replaceWithResponse(resourceGroupName, bareMetalMachineName, bareMetalMachineReplaceParameters);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(response,
            OperationStatusResultInner.class, OperationStatusResultInner.class, Context.NONE);
    }

    /**
     * Replace (service) the bare metal machine.
     * 
     * Replace the provided bare metal machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param bareMetalMachineReplaceParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner> beginReplace(
        String resourceGroupName, String bareMetalMachineName,
        BareMetalMachineReplaceParameters bareMetalMachineReplaceParameters, Context context) {
        Response<BinaryData> response
            = replaceWithResponse(resourceGroupName, bareMetalMachineName, bareMetalMachineReplaceParameters, context);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(response,
            OperationStatusResultInner.class, OperationStatusResultInner.class, context);
    }

    /**
     * Replace (service) the bare metal machine.
     * 
     * Replace the provided bare metal machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param bareMetalMachineReplaceParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<OperationStatusResultInner> replaceAsync(String resourceGroupName, String bareMetalMachineName,
        BareMetalMachineReplaceParameters bareMetalMachineReplaceParameters) {
        return beginReplaceAsync(resourceGroupName, bareMetalMachineName, bareMetalMachineReplaceParameters).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Replace (service) the bare metal machine.
     * 
     * Replace the provided bare metal machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<OperationStatusResultInner> replaceAsync(String resourceGroupName, String bareMetalMachineName) {
        final BareMetalMachineReplaceParameters bareMetalMachineReplaceParameters = null;
        return beginReplaceAsync(resourceGroupName, bareMetalMachineName, bareMetalMachineReplaceParameters).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Replace (service) the bare metal machine.
     * 
     * Replace the provided bare metal machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OperationStatusResultInner replace(String resourceGroupName, String bareMetalMachineName) {
        final BareMetalMachineReplaceParameters bareMetalMachineReplaceParameters = null;
        return beginReplace(resourceGroupName, bareMetalMachineName, bareMetalMachineReplaceParameters)
            .getFinalResult();
    }

    /**
     * Replace (service) the bare metal machine.
     * 
     * Replace the provided bare metal machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param bareMetalMachineReplaceParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OperationStatusResultInner replace(String resourceGroupName, String bareMetalMachineName,
        BareMetalMachineReplaceParameters bareMetalMachineReplaceParameters, Context context) {
        return beginReplace(resourceGroupName, bareMetalMachineName, bareMetalMachineReplaceParameters, context)
            .getFinalResult();
    }

    /**
     * Restart the bare metal machine.
     * 
     * Restart the provided bare metal machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> restartWithResponseAsync(String resourceGroupName,
        String bareMetalMachineName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (bareMetalMachineName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter bareMetalMachineName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.restart(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, bareMetalMachineName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Restart the bare metal machine.
     * 
     * Restart the provided bare metal machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> restartWithResponse(String resourceGroupName, String bareMetalMachineName) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (bareMetalMachineName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter bareMetalMachineName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.restartSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, bareMetalMachineName, accept, Context.NONE);
    }

    /**
     * Restart the bare metal machine.
     * 
     * Restart the provided bare metal machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> restartWithResponse(String resourceGroupName, String bareMetalMachineName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (bareMetalMachineName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter bareMetalMachineName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.restartSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, bareMetalMachineName, accept, context);
    }

    /**
     * Restart the bare metal machine.
     * 
     * Restart the provided bare metal machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginRestartAsync(String resourceGroupName, String bareMetalMachineName) {
        Mono<Response<Flux<ByteBuffer>>> mono = restartWithResponseAsync(resourceGroupName, bareMetalMachineName);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(mono,
            this.client.getHttpPipeline(), OperationStatusResultInner.class, OperationStatusResultInner.class,
            this.client.getContext());
    }

    /**
     * Restart the bare metal machine.
     * 
     * Restart the provided bare metal machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginRestart(String resourceGroupName, String bareMetalMachineName) {
        Response<BinaryData> response = restartWithResponse(resourceGroupName, bareMetalMachineName);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(response,
            OperationStatusResultInner.class, OperationStatusResultInner.class, Context.NONE);
    }

    /**
     * Restart the bare metal machine.
     * 
     * Restart the provided bare metal machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginRestart(String resourceGroupName, String bareMetalMachineName, Context context) {
        Response<BinaryData> response = restartWithResponse(resourceGroupName, bareMetalMachineName, context);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(response,
            OperationStatusResultInner.class, OperationStatusResultInner.class, context);
    }

    /**
     * Restart the bare metal machine.
     * 
     * Restart the provided bare metal machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<OperationStatusResultInner> restartAsync(String resourceGroupName, String bareMetalMachineName) {
        return beginRestartAsync(resourceGroupName, bareMetalMachineName).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Restart the bare metal machine.
     * 
     * Restart the provided bare metal machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OperationStatusResultInner restart(String resourceGroupName, String bareMetalMachineName) {
        return beginRestart(resourceGroupName, bareMetalMachineName).getFinalResult();
    }

    /**
     * Restart the bare metal machine.
     * 
     * Restart the provided bare metal machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OperationStatusResultInner restart(String resourceGroupName, String bareMetalMachineName, Context context) {
        return beginRestart(resourceGroupName, bareMetalMachineName, context).getFinalResult();
    }

    /**
     * Run the command on the bare metal machine.
     * 
     * Run the command or the script on the provided bare metal machine. The URL to storage account with the command
     * execution results and the command exit code can be retrieved from the operation status API once available.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param bareMetalMachineRunCommandParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> runCommandWithResponseAsync(String resourceGroupName,
        String bareMetalMachineName, BareMetalMachineRunCommandParameters bareMetalMachineRunCommandParameters) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (bareMetalMachineName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter bareMetalMachineName is required and cannot be null."));
        }
        if (bareMetalMachineRunCommandParameters == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter bareMetalMachineRunCommandParameters is required and cannot be null."));
        } else {
            bareMetalMachineRunCommandParameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.runCommand(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, bareMetalMachineName,
                bareMetalMachineRunCommandParameters, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Run the command on the bare metal machine.
     * 
     * Run the command or the script on the provided bare metal machine. The URL to storage account with the command
     * execution results and the command exit code can be retrieved from the operation status API once available.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param bareMetalMachineRunCommandParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> runCommandWithResponse(String resourceGroupName, String bareMetalMachineName,
        BareMetalMachineRunCommandParameters bareMetalMachineRunCommandParameters) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (bareMetalMachineName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter bareMetalMachineName is required and cannot be null."));
        }
        if (bareMetalMachineRunCommandParameters == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter bareMetalMachineRunCommandParameters is required and cannot be null."));
        } else {
            bareMetalMachineRunCommandParameters.validate();
        }
        final String accept = "application/json";
        return service.runCommandSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, bareMetalMachineName,
            bareMetalMachineRunCommandParameters, accept, Context.NONE);
    }

    /**
     * Run the command on the bare metal machine.
     * 
     * Run the command or the script on the provided bare metal machine. The URL to storage account with the command
     * execution results and the command exit code can be retrieved from the operation status API once available.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param bareMetalMachineRunCommandParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> runCommandWithResponse(String resourceGroupName, String bareMetalMachineName,
        BareMetalMachineRunCommandParameters bareMetalMachineRunCommandParameters, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (bareMetalMachineName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter bareMetalMachineName is required and cannot be null."));
        }
        if (bareMetalMachineRunCommandParameters == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter bareMetalMachineRunCommandParameters is required and cannot be null."));
        } else {
            bareMetalMachineRunCommandParameters.validate();
        }
        final String accept = "application/json";
        return service.runCommandSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, bareMetalMachineName,
            bareMetalMachineRunCommandParameters, accept, context);
    }

    /**
     * Run the command on the bare metal machine.
     * 
     * Run the command or the script on the provided bare metal machine. The URL to storage account with the command
     * execution results and the command exit code can be retrieved from the operation status API once available.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param bareMetalMachineRunCommandParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<OperationStatusResultInner>, OperationStatusResultInner> beginRunCommandAsync(
        String resourceGroupName, String bareMetalMachineName,
        BareMetalMachineRunCommandParameters bareMetalMachineRunCommandParameters) {
        Mono<Response<Flux<ByteBuffer>>> mono = runCommandWithResponseAsync(resourceGroupName, bareMetalMachineName,
            bareMetalMachineRunCommandParameters);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(mono,
            this.client.getHttpPipeline(), OperationStatusResultInner.class, OperationStatusResultInner.class,
            this.client.getContext());
    }

    /**
     * Run the command on the bare metal machine.
     * 
     * Run the command or the script on the provided bare metal machine. The URL to storage account with the command
     * execution results and the command exit code can be retrieved from the operation status API once available.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param bareMetalMachineRunCommandParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner> beginRunCommand(
        String resourceGroupName, String bareMetalMachineName,
        BareMetalMachineRunCommandParameters bareMetalMachineRunCommandParameters) {
        Response<BinaryData> response
            = runCommandWithResponse(resourceGroupName, bareMetalMachineName, bareMetalMachineRunCommandParameters);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(response,
            OperationStatusResultInner.class, OperationStatusResultInner.class, Context.NONE);
    }

    /**
     * Run the command on the bare metal machine.
     * 
     * Run the command or the script on the provided bare metal machine. The URL to storage account with the command
     * execution results and the command exit code can be retrieved from the operation status API once available.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param bareMetalMachineRunCommandParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner> beginRunCommand(
        String resourceGroupName, String bareMetalMachineName,
        BareMetalMachineRunCommandParameters bareMetalMachineRunCommandParameters, Context context) {
        Response<BinaryData> response = runCommandWithResponse(resourceGroupName, bareMetalMachineName,
            bareMetalMachineRunCommandParameters, context);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(response,
            OperationStatusResultInner.class, OperationStatusResultInner.class, context);
    }

    /**
     * Run the command on the bare metal machine.
     * 
     * Run the command or the script on the provided bare metal machine. The URL to storage account with the command
     * execution results and the command exit code can be retrieved from the operation status API once available.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param bareMetalMachineRunCommandParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<OperationStatusResultInner> runCommandAsync(String resourceGroupName, String bareMetalMachineName,
        BareMetalMachineRunCommandParameters bareMetalMachineRunCommandParameters) {
        return beginRunCommandAsync(resourceGroupName, bareMetalMachineName, bareMetalMachineRunCommandParameters)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Run the command on the bare metal machine.
     * 
     * Run the command or the script on the provided bare metal machine. The URL to storage account with the command
     * execution results and the command exit code can be retrieved from the operation status API once available.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param bareMetalMachineRunCommandParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OperationStatusResultInner runCommand(String resourceGroupName, String bareMetalMachineName,
        BareMetalMachineRunCommandParameters bareMetalMachineRunCommandParameters) {
        return beginRunCommand(resourceGroupName, bareMetalMachineName, bareMetalMachineRunCommandParameters)
            .getFinalResult();
    }

    /**
     * Run the command on the bare metal machine.
     * 
     * Run the command or the script on the provided bare metal machine. The URL to storage account with the command
     * execution results and the command exit code can be retrieved from the operation status API once available.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param bareMetalMachineRunCommandParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OperationStatusResultInner runCommand(String resourceGroupName, String bareMetalMachineName,
        BareMetalMachineRunCommandParameters bareMetalMachineRunCommandParameters, Context context) {
        return beginRunCommand(resourceGroupName, bareMetalMachineName, bareMetalMachineRunCommandParameters, context)
            .getFinalResult();
    }

    /**
     * Run data extraction for a bare metal machine.
     * 
     * Run one or more data extractions on the provided bare metal machine. The URL to storage account with the command
     * execution results and the command exit code can be retrieved from the operation status API once available.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param bareMetalMachineRunDataExtractsParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> runDataExtractsWithResponseAsync(String resourceGroupName,
        String bareMetalMachineName,
        BareMetalMachineRunDataExtractsParameters bareMetalMachineRunDataExtractsParameters) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (bareMetalMachineName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter bareMetalMachineName is required and cannot be null."));
        }
        if (bareMetalMachineRunDataExtractsParameters == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter bareMetalMachineRunDataExtractsParameters is required and cannot be null."));
        } else {
            bareMetalMachineRunDataExtractsParameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.runDataExtracts(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, bareMetalMachineName,
                bareMetalMachineRunDataExtractsParameters, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Run data extraction for a bare metal machine.
     * 
     * Run one or more data extractions on the provided bare metal machine. The URL to storage account with the command
     * execution results and the command exit code can be retrieved from the operation status API once available.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param bareMetalMachineRunDataExtractsParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> runDataExtractsWithResponse(String resourceGroupName, String bareMetalMachineName,
        BareMetalMachineRunDataExtractsParameters bareMetalMachineRunDataExtractsParameters) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (bareMetalMachineName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter bareMetalMachineName is required and cannot be null."));
        }
        if (bareMetalMachineRunDataExtractsParameters == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter bareMetalMachineRunDataExtractsParameters is required and cannot be null."));
        } else {
            bareMetalMachineRunDataExtractsParameters.validate();
        }
        final String accept = "application/json";
        return service.runDataExtractsSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, bareMetalMachineName,
            bareMetalMachineRunDataExtractsParameters, accept, Context.NONE);
    }

    /**
     * Run data extraction for a bare metal machine.
     * 
     * Run one or more data extractions on the provided bare metal machine. The URL to storage account with the command
     * execution results and the command exit code can be retrieved from the operation status API once available.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param bareMetalMachineRunDataExtractsParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> runDataExtractsWithResponse(String resourceGroupName, String bareMetalMachineName,
        BareMetalMachineRunDataExtractsParameters bareMetalMachineRunDataExtractsParameters, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (bareMetalMachineName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter bareMetalMachineName is required and cannot be null."));
        }
        if (bareMetalMachineRunDataExtractsParameters == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter bareMetalMachineRunDataExtractsParameters is required and cannot be null."));
        } else {
            bareMetalMachineRunDataExtractsParameters.validate();
        }
        final String accept = "application/json";
        return service.runDataExtractsSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, bareMetalMachineName,
            bareMetalMachineRunDataExtractsParameters, accept, context);
    }

    /**
     * Run data extraction for a bare metal machine.
     * 
     * Run one or more data extractions on the provided bare metal machine. The URL to storage account with the command
     * execution results and the command exit code can be retrieved from the operation status API once available.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param bareMetalMachineRunDataExtractsParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<OperationStatusResultInner>, OperationStatusResultInner> beginRunDataExtractsAsync(
        String resourceGroupName, String bareMetalMachineName,
        BareMetalMachineRunDataExtractsParameters bareMetalMachineRunDataExtractsParameters) {
        Mono<Response<Flux<ByteBuffer>>> mono = runDataExtractsWithResponseAsync(resourceGroupName,
            bareMetalMachineName, bareMetalMachineRunDataExtractsParameters);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(mono,
            this.client.getHttpPipeline(), OperationStatusResultInner.class, OperationStatusResultInner.class,
            this.client.getContext());
    }

    /**
     * Run data extraction for a bare metal machine.
     * 
     * Run one or more data extractions on the provided bare metal machine. The URL to storage account with the command
     * execution results and the command exit code can be retrieved from the operation status API once available.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param bareMetalMachineRunDataExtractsParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner> beginRunDataExtracts(
        String resourceGroupName, String bareMetalMachineName,
        BareMetalMachineRunDataExtractsParameters bareMetalMachineRunDataExtractsParameters) {
        Response<BinaryData> response = runDataExtractsWithResponse(resourceGroupName, bareMetalMachineName,
            bareMetalMachineRunDataExtractsParameters);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(response,
            OperationStatusResultInner.class, OperationStatusResultInner.class, Context.NONE);
    }

    /**
     * Run data extraction for a bare metal machine.
     * 
     * Run one or more data extractions on the provided bare metal machine. The URL to storage account with the command
     * execution results and the command exit code can be retrieved from the operation status API once available.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param bareMetalMachineRunDataExtractsParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner> beginRunDataExtracts(
        String resourceGroupName, String bareMetalMachineName,
        BareMetalMachineRunDataExtractsParameters bareMetalMachineRunDataExtractsParameters, Context context) {
        Response<BinaryData> response = runDataExtractsWithResponse(resourceGroupName, bareMetalMachineName,
            bareMetalMachineRunDataExtractsParameters, context);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(response,
            OperationStatusResultInner.class, OperationStatusResultInner.class, context);
    }

    /**
     * Run data extraction for a bare metal machine.
     * 
     * Run one or more data extractions on the provided bare metal machine. The URL to storage account with the command
     * execution results and the command exit code can be retrieved from the operation status API once available.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param bareMetalMachineRunDataExtractsParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<OperationStatusResultInner> runDataExtractsAsync(String resourceGroupName, String bareMetalMachineName,
        BareMetalMachineRunDataExtractsParameters bareMetalMachineRunDataExtractsParameters) {
        return beginRunDataExtractsAsync(resourceGroupName, bareMetalMachineName,
            bareMetalMachineRunDataExtractsParameters).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Run data extraction for a bare metal machine.
     * 
     * Run one or more data extractions on the provided bare metal machine. The URL to storage account with the command
     * execution results and the command exit code can be retrieved from the operation status API once available.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param bareMetalMachineRunDataExtractsParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OperationStatusResultInner runDataExtracts(String resourceGroupName, String bareMetalMachineName,
        BareMetalMachineRunDataExtractsParameters bareMetalMachineRunDataExtractsParameters) {
        return beginRunDataExtracts(resourceGroupName, bareMetalMachineName, bareMetalMachineRunDataExtractsParameters)
            .getFinalResult();
    }

    /**
     * Run data extraction for a bare metal machine.
     * 
     * Run one or more data extractions on the provided bare metal machine. The URL to storage account with the command
     * execution results and the command exit code can be retrieved from the operation status API once available.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param bareMetalMachineRunDataExtractsParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OperationStatusResultInner runDataExtracts(String resourceGroupName, String bareMetalMachineName,
        BareMetalMachineRunDataExtractsParameters bareMetalMachineRunDataExtractsParameters, Context context) {
        return beginRunDataExtracts(resourceGroupName, bareMetalMachineName, bareMetalMachineRunDataExtractsParameters,
            context).getFinalResult();
    }

    /**
     * Run read-only commands against a bare metal machine.
     * 
     * Run one or more read-only commands on the provided bare metal machine. The URL to storage account with the
     * command execution results and the command exit code can be retrieved from the operation status API once
     * available.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param bareMetalMachineRunReadCommandsParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> runReadCommandsWithResponseAsync(String resourceGroupName,
        String bareMetalMachineName,
        BareMetalMachineRunReadCommandsParameters bareMetalMachineRunReadCommandsParameters) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (bareMetalMachineName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter bareMetalMachineName is required and cannot be null."));
        }
        if (bareMetalMachineRunReadCommandsParameters == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter bareMetalMachineRunReadCommandsParameters is required and cannot be null."));
        } else {
            bareMetalMachineRunReadCommandsParameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.runReadCommands(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, bareMetalMachineName,
                bareMetalMachineRunReadCommandsParameters, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Run read-only commands against a bare metal machine.
     * 
     * Run one or more read-only commands on the provided bare metal machine. The URL to storage account with the
     * command execution results and the command exit code can be retrieved from the operation status API once
     * available.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param bareMetalMachineRunReadCommandsParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> runReadCommandsWithResponse(String resourceGroupName, String bareMetalMachineName,
        BareMetalMachineRunReadCommandsParameters bareMetalMachineRunReadCommandsParameters) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (bareMetalMachineName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter bareMetalMachineName is required and cannot be null."));
        }
        if (bareMetalMachineRunReadCommandsParameters == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter bareMetalMachineRunReadCommandsParameters is required and cannot be null."));
        } else {
            bareMetalMachineRunReadCommandsParameters.validate();
        }
        final String accept = "application/json";
        return service.runReadCommandsSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, bareMetalMachineName,
            bareMetalMachineRunReadCommandsParameters, accept, Context.NONE);
    }

    /**
     * Run read-only commands against a bare metal machine.
     * 
     * Run one or more read-only commands on the provided bare metal machine. The URL to storage account with the
     * command execution results and the command exit code can be retrieved from the operation status API once
     * available.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param bareMetalMachineRunReadCommandsParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> runReadCommandsWithResponse(String resourceGroupName, String bareMetalMachineName,
        BareMetalMachineRunReadCommandsParameters bareMetalMachineRunReadCommandsParameters, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (bareMetalMachineName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter bareMetalMachineName is required and cannot be null."));
        }
        if (bareMetalMachineRunReadCommandsParameters == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter bareMetalMachineRunReadCommandsParameters is required and cannot be null."));
        } else {
            bareMetalMachineRunReadCommandsParameters.validate();
        }
        final String accept = "application/json";
        return service.runReadCommandsSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, bareMetalMachineName,
            bareMetalMachineRunReadCommandsParameters, accept, context);
    }

    /**
     * Run read-only commands against a bare metal machine.
     * 
     * Run one or more read-only commands on the provided bare metal machine. The URL to storage account with the
     * command execution results and the command exit code can be retrieved from the operation status API once
     * available.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param bareMetalMachineRunReadCommandsParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<OperationStatusResultInner>, OperationStatusResultInner> beginRunReadCommandsAsync(
        String resourceGroupName, String bareMetalMachineName,
        BareMetalMachineRunReadCommandsParameters bareMetalMachineRunReadCommandsParameters) {
        Mono<Response<Flux<ByteBuffer>>> mono = runReadCommandsWithResponseAsync(resourceGroupName,
            bareMetalMachineName, bareMetalMachineRunReadCommandsParameters);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(mono,
            this.client.getHttpPipeline(), OperationStatusResultInner.class, OperationStatusResultInner.class,
            this.client.getContext());
    }

    /**
     * Run read-only commands against a bare metal machine.
     * 
     * Run one or more read-only commands on the provided bare metal machine. The URL to storage account with the
     * command execution results and the command exit code can be retrieved from the operation status API once
     * available.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param bareMetalMachineRunReadCommandsParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner> beginRunReadCommands(
        String resourceGroupName, String bareMetalMachineName,
        BareMetalMachineRunReadCommandsParameters bareMetalMachineRunReadCommandsParameters) {
        Response<BinaryData> response = runReadCommandsWithResponse(resourceGroupName, bareMetalMachineName,
            bareMetalMachineRunReadCommandsParameters);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(response,
            OperationStatusResultInner.class, OperationStatusResultInner.class, Context.NONE);
    }

    /**
     * Run read-only commands against a bare metal machine.
     * 
     * Run one or more read-only commands on the provided bare metal machine. The URL to storage account with the
     * command execution results and the command exit code can be retrieved from the operation status API once
     * available.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param bareMetalMachineRunReadCommandsParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner> beginRunReadCommands(
        String resourceGroupName, String bareMetalMachineName,
        BareMetalMachineRunReadCommandsParameters bareMetalMachineRunReadCommandsParameters, Context context) {
        Response<BinaryData> response = runReadCommandsWithResponse(resourceGroupName, bareMetalMachineName,
            bareMetalMachineRunReadCommandsParameters, context);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(response,
            OperationStatusResultInner.class, OperationStatusResultInner.class, context);
    }

    /**
     * Run read-only commands against a bare metal machine.
     * 
     * Run one or more read-only commands on the provided bare metal machine. The URL to storage account with the
     * command execution results and the command exit code can be retrieved from the operation status API once
     * available.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param bareMetalMachineRunReadCommandsParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<OperationStatusResultInner> runReadCommandsAsync(String resourceGroupName, String bareMetalMachineName,
        BareMetalMachineRunReadCommandsParameters bareMetalMachineRunReadCommandsParameters) {
        return beginRunReadCommandsAsync(resourceGroupName, bareMetalMachineName,
            bareMetalMachineRunReadCommandsParameters).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Run read-only commands against a bare metal machine.
     * 
     * Run one or more read-only commands on the provided bare metal machine. The URL to storage account with the
     * command execution results and the command exit code can be retrieved from the operation status API once
     * available.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param bareMetalMachineRunReadCommandsParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OperationStatusResultInner runReadCommands(String resourceGroupName, String bareMetalMachineName,
        BareMetalMachineRunReadCommandsParameters bareMetalMachineRunReadCommandsParameters) {
        return beginRunReadCommands(resourceGroupName, bareMetalMachineName, bareMetalMachineRunReadCommandsParameters)
            .getFinalResult();
    }

    /**
     * Run read-only commands against a bare metal machine.
     * 
     * Run one or more read-only commands on the provided bare metal machine. The URL to storage account with the
     * command execution results and the command exit code can be retrieved from the operation status API once
     * available.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param bareMetalMachineRunReadCommandsParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OperationStatusResultInner runReadCommands(String resourceGroupName, String bareMetalMachineName,
        BareMetalMachineRunReadCommandsParameters bareMetalMachineRunReadCommandsParameters, Context context) {
        return beginRunReadCommands(resourceGroupName, bareMetalMachineName, bareMetalMachineRunReadCommandsParameters,
            context).getFinalResult();
    }

    /**
     * Start the bare metal machine.
     * 
     * Start the provided bare metal machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> startWithResponseAsync(String resourceGroupName,
        String bareMetalMachineName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (bareMetalMachineName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter bareMetalMachineName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.start(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, bareMetalMachineName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Start the bare metal machine.
     * 
     * Start the provided bare metal machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> startWithResponse(String resourceGroupName, String bareMetalMachineName) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (bareMetalMachineName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter bareMetalMachineName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.startSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, bareMetalMachineName, accept, Context.NONE);
    }

    /**
     * Start the bare metal machine.
     * 
     * Start the provided bare metal machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> startWithResponse(String resourceGroupName, String bareMetalMachineName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (bareMetalMachineName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter bareMetalMachineName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.startSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, bareMetalMachineName, accept, context);
    }

    /**
     * Start the bare metal machine.
     * 
     * Start the provided bare metal machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginStartAsync(String resourceGroupName, String bareMetalMachineName) {
        Mono<Response<Flux<ByteBuffer>>> mono = startWithResponseAsync(resourceGroupName, bareMetalMachineName);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(mono,
            this.client.getHttpPipeline(), OperationStatusResultInner.class, OperationStatusResultInner.class,
            this.client.getContext());
    }

    /**
     * Start the bare metal machine.
     * 
     * Start the provided bare metal machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginStart(String resourceGroupName, String bareMetalMachineName) {
        Response<BinaryData> response = startWithResponse(resourceGroupName, bareMetalMachineName);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(response,
            OperationStatusResultInner.class, OperationStatusResultInner.class, Context.NONE);
    }

    /**
     * Start the bare metal machine.
     * 
     * Start the provided bare metal machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginStart(String resourceGroupName, String bareMetalMachineName, Context context) {
        Response<BinaryData> response = startWithResponse(resourceGroupName, bareMetalMachineName, context);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(response,
            OperationStatusResultInner.class, OperationStatusResultInner.class, context);
    }

    /**
     * Start the bare metal machine.
     * 
     * Start the provided bare metal machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<OperationStatusResultInner> startAsync(String resourceGroupName, String bareMetalMachineName) {
        return beginStartAsync(resourceGroupName, bareMetalMachineName).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Start the bare metal machine.
     * 
     * Start the provided bare metal machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OperationStatusResultInner start(String resourceGroupName, String bareMetalMachineName) {
        return beginStart(resourceGroupName, bareMetalMachineName).getFinalResult();
    }

    /**
     * Start the bare metal machine.
     * 
     * Start the provided bare metal machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OperationStatusResultInner start(String resourceGroupName, String bareMetalMachineName, Context context) {
        return beginStart(resourceGroupName, bareMetalMachineName, context).getFinalResult();
    }

    /**
     * Uncordon the bare metal machine.
     * 
     * Uncordon the provided bare metal machine's Kubernetes node.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> uncordonWithResponseAsync(String resourceGroupName,
        String bareMetalMachineName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (bareMetalMachineName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter bareMetalMachineName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.uncordon(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, bareMetalMachineName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Uncordon the bare metal machine.
     * 
     * Uncordon the provided bare metal machine's Kubernetes node.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> uncordonWithResponse(String resourceGroupName, String bareMetalMachineName) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (bareMetalMachineName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter bareMetalMachineName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.uncordonSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, bareMetalMachineName, accept, Context.NONE);
    }

    /**
     * Uncordon the bare metal machine.
     * 
     * Uncordon the provided bare metal machine's Kubernetes node.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> uncordonWithResponse(String resourceGroupName, String bareMetalMachineName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (bareMetalMachineName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter bareMetalMachineName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.uncordonSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, bareMetalMachineName, accept, context);
    }

    /**
     * Uncordon the bare metal machine.
     * 
     * Uncordon the provided bare metal machine's Kubernetes node.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginUncordonAsync(String resourceGroupName, String bareMetalMachineName) {
        Mono<Response<Flux<ByteBuffer>>> mono = uncordonWithResponseAsync(resourceGroupName, bareMetalMachineName);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(mono,
            this.client.getHttpPipeline(), OperationStatusResultInner.class, OperationStatusResultInner.class,
            this.client.getContext());
    }

    /**
     * Uncordon the bare metal machine.
     * 
     * Uncordon the provided bare metal machine's Kubernetes node.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginUncordon(String resourceGroupName, String bareMetalMachineName) {
        Response<BinaryData> response = uncordonWithResponse(resourceGroupName, bareMetalMachineName);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(response,
            OperationStatusResultInner.class, OperationStatusResultInner.class, Context.NONE);
    }

    /**
     * Uncordon the bare metal machine.
     * 
     * Uncordon the provided bare metal machine's Kubernetes node.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginUncordon(String resourceGroupName, String bareMetalMachineName, Context context) {
        Response<BinaryData> response = uncordonWithResponse(resourceGroupName, bareMetalMachineName, context);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(response,
            OperationStatusResultInner.class, OperationStatusResultInner.class, context);
    }

    /**
     * Uncordon the bare metal machine.
     * 
     * Uncordon the provided bare metal machine's Kubernetes node.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<OperationStatusResultInner> uncordonAsync(String resourceGroupName, String bareMetalMachineName) {
        return beginUncordonAsync(resourceGroupName, bareMetalMachineName).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Uncordon the bare metal machine.
     * 
     * Uncordon the provided bare metal machine's Kubernetes node.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OperationStatusResultInner uncordon(String resourceGroupName, String bareMetalMachineName) {
        return beginUncordon(resourceGroupName, bareMetalMachineName).getFinalResult();
    }

    /**
     * Uncordon the bare metal machine.
     * 
     * Uncordon the provided bare metal machine's Kubernetes node.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param bareMetalMachineName The name of the bare metal machine.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OperationStatusResultInner uncordon(String resourceGroupName, String bareMetalMachineName, Context context) {
        return beginUncordon(resourceGroupName, bareMetalMachineName, context).getFinalResult();
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return bareMetalMachineList represents a list of bare metal machines along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BareMetalMachineInner>> listBySubscriptionNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listBySubscriptionNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<BareMetalMachineInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return bareMetalMachineList represents a list of bare metal machines along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BareMetalMachineInner> listBySubscriptionNextSinglePage(String nextLink) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<BareMetalMachineList> res
            = service.listBySubscriptionNextSync(nextLink, this.client.getEndpoint(), accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return bareMetalMachineList represents a list of bare metal machines along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BareMetalMachineInner> listBySubscriptionNextSinglePage(String nextLink, Context context) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<BareMetalMachineList> res
            = service.listBySubscriptionNextSync(nextLink, this.client.getEndpoint(), accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return bareMetalMachineList represents a list of bare metal machines along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BareMetalMachineInner>> listByResourceGroupNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByResourceGroupNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<BareMetalMachineInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return bareMetalMachineList represents a list of bare metal machines along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BareMetalMachineInner> listByResourceGroupNextSinglePage(String nextLink) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<BareMetalMachineList> res
            = service.listByResourceGroupNextSync(nextLink, this.client.getEndpoint(), accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return bareMetalMachineList represents a list of bare metal machines along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BareMetalMachineInner> listByResourceGroupNextSinglePage(String nextLink, Context context) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<BareMetalMachineList> res
            = service.listByResourceGroupNextSync(nextLink, this.client.getEndpoint(), accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    private static final ClientLogger LOGGER = new ClientLogger(BareMetalMachinesClientImpl.class);
}
