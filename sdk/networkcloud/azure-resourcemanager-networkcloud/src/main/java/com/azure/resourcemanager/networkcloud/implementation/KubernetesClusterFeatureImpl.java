// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.networkcloud.fluent.models.KubernetesClusterFeatureInner;
import com.azure.resourcemanager.networkcloud.models.KubernetesClusterFeature;
import com.azure.resourcemanager.networkcloud.models.KubernetesClusterFeatureAvailabilityLifecycle;
import com.azure.resourcemanager.networkcloud.models.KubernetesClusterFeatureDetailedStatus;
import com.azure.resourcemanager.networkcloud.models.KubernetesClusterFeaturePatchParameters;
import com.azure.resourcemanager.networkcloud.models.KubernetesClusterFeatureProvisioningState;
import com.azure.resourcemanager.networkcloud.models.KubernetesClusterFeatureRequired;
import com.azure.resourcemanager.networkcloud.models.StringKeyValuePair;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public final class KubernetesClusterFeatureImpl
    implements KubernetesClusterFeature, KubernetesClusterFeature.Definition, KubernetesClusterFeature.Update {
    private KubernetesClusterFeatureInner innerObject;

    private final com.azure.resourcemanager.networkcloud.NetworkCloudManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public KubernetesClusterFeatureAvailabilityLifecycle availabilityLifecycle() {
        return this.innerModel().availabilityLifecycle();
    }

    public KubernetesClusterFeatureDetailedStatus detailedStatus() {
        return this.innerModel().detailedStatus();
    }

    public String detailedStatusMessage() {
        return this.innerModel().detailedStatusMessage();
    }

    public List<StringKeyValuePair> options() {
        List<StringKeyValuePair> inner = this.innerModel().options();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public KubernetesClusterFeatureProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public KubernetesClusterFeatureRequired required() {
        return this.innerModel().required();
    }

    public String version() {
        return this.innerModel().version();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public KubernetesClusterFeatureInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.networkcloud.NetworkCloudManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String kubernetesClusterName;

    private String featureName;

    private KubernetesClusterFeaturePatchParameters updateKubernetesClusterFeatureUpdateParameters;

    public KubernetesClusterFeatureImpl withExistingKubernetesCluster(String resourceGroupName,
        String kubernetesClusterName) {
        this.resourceGroupName = resourceGroupName;
        this.kubernetesClusterName = kubernetesClusterName;
        return this;
    }

    public KubernetesClusterFeature create() {
        this.innerObject = serviceManager.serviceClient()
            .getKubernetesClusterFeatures()
            .createOrUpdate(resourceGroupName, kubernetesClusterName, featureName, this.innerModel(), Context.NONE);
        return this;
    }

    public KubernetesClusterFeature create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getKubernetesClusterFeatures()
            .createOrUpdate(resourceGroupName, kubernetesClusterName, featureName, this.innerModel(), context);
        return this;
    }

    KubernetesClusterFeatureImpl(String name,
        com.azure.resourcemanager.networkcloud.NetworkCloudManager serviceManager) {
        this.innerObject = new KubernetesClusterFeatureInner();
        this.serviceManager = serviceManager;
        this.featureName = name;
    }

    public KubernetesClusterFeatureImpl update() {
        this.updateKubernetesClusterFeatureUpdateParameters = new KubernetesClusterFeaturePatchParameters();
        return this;
    }

    public KubernetesClusterFeature apply() {
        this.innerObject = serviceManager.serviceClient()
            .getKubernetesClusterFeatures()
            .update(resourceGroupName, kubernetesClusterName, featureName,
                updateKubernetesClusterFeatureUpdateParameters, Context.NONE);
        return this;
    }

    public KubernetesClusterFeature apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getKubernetesClusterFeatures()
            .update(resourceGroupName, kubernetesClusterName, featureName,
                updateKubernetesClusterFeatureUpdateParameters, context);
        return this;
    }

    KubernetesClusterFeatureImpl(KubernetesClusterFeatureInner innerObject,
        com.azure.resourcemanager.networkcloud.NetworkCloudManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.kubernetesClusterName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "kubernetesClusters");
        this.featureName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "features");
    }

    public KubernetesClusterFeature refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getKubernetesClusterFeatures()
            .getWithResponse(resourceGroupName, kubernetesClusterName, featureName, Context.NONE)
            .getValue();
        return this;
    }

    public KubernetesClusterFeature refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getKubernetesClusterFeatures()
            .getWithResponse(resourceGroupName, kubernetesClusterName, featureName, context)
            .getValue();
        return this;
    }

    public KubernetesClusterFeatureImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public KubernetesClusterFeatureImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public KubernetesClusterFeatureImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateKubernetesClusterFeatureUpdateParameters.withTags(tags);
            return this;
        }
    }

    public KubernetesClusterFeatureImpl withOptions(List<StringKeyValuePair> options) {
        if (isInCreateMode()) {
            this.innerModel().withOptions(options);
            return this;
        } else {
            this.updateKubernetesClusterFeatureUpdateParameters.withOptions(options);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
