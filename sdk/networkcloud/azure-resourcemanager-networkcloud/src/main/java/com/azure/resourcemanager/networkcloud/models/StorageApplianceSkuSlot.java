// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.networkcloud.fluent.models.StorageApplianceSkuProperties;
import java.io.IOException;

/**
 * StorageApplianceSkuSlot represents the single SKU and rack slot associated with the storage appliance.
 */
@Immutable
public final class StorageApplianceSkuSlot implements JsonSerializable<StorageApplianceSkuSlot> {
    /*
     * The list of the resource properties.
     */
    private StorageApplianceSkuProperties innerProperties;

    /*
     * The position in the rack for the storage appliance.
     */
    private Long rackSlot;

    /**
     * Creates an instance of StorageApplianceSkuSlot class.
     */
    public StorageApplianceSkuSlot() {
    }

    /**
     * Get the innerProperties property: The list of the resource properties.
     * 
     * @return the innerProperties value.
     */
    private StorageApplianceSkuProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the rackSlot property: The position in the rack for the storage appliance.
     * 
     * @return the rackSlot value.
     */
    public Long rackSlot() {
        return this.rackSlot;
    }

    /**
     * Get the capacityGB property: The maximum capacity of the storage appliance. Measured in gibibytes.
     * 
     * @return the capacityGB value.
     */
    public Long capacityGB() {
        return this.innerProperties() == null ? null : this.innerProperties().capacityGB();
    }

    /**
     * Get the model property: The model of the storage appliance.
     * 
     * @return the model value.
     */
    public String model() {
        return this.innerProperties() == null ? null : this.innerProperties().model();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StorageApplianceSkuSlot from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StorageApplianceSkuSlot if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the StorageApplianceSkuSlot.
     */
    public static StorageApplianceSkuSlot fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StorageApplianceSkuSlot deserializedStorageApplianceSkuSlot = new StorageApplianceSkuSlot();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("properties".equals(fieldName)) {
                    deserializedStorageApplianceSkuSlot.innerProperties
                        = StorageApplianceSkuProperties.fromJson(reader);
                } else if ("rackSlot".equals(fieldName)) {
                    deserializedStorageApplianceSkuSlot.rackSlot = reader.getNullable(JsonReader::getLong);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStorageApplianceSkuSlot;
        });
    }
}
