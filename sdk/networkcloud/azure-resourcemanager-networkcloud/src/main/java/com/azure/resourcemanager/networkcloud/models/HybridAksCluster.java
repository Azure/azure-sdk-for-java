// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.models;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.networkcloud.fluent.models.HybridAksClusterInner;
import java.util.List;
import java.util.Map;

/** An immutable client-side representation of HybridAksCluster. */
public interface HybridAksCluster {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     *
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     *
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the extendedLocation property: ExtendedLocation represents the Azure custom location where the resource will
     * be created.
     *
     * <p>The extended location of the cluster associated with the resource.
     *
     * @return the extendedLocation value.
     */
    ExtendedLocation extendedLocation();

    /**
     * Gets the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     *
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the associatedNetworkIds property: The list of resource IDs for the workload networks associated with the
     * Hybrid AKS cluster. It can be any of l2Networks, l3Networks, or trunkedNetworks resources. This field will also
     * contain one cloudServicesNetwork and one defaultCniNetwork.
     *
     * @return the associatedNetworkIds value.
     */
    List<String> associatedNetworkIds();

    /**
     * Gets the cloudServicesNetworkId property: The resource ID of the associated cloud services network.
     *
     * @return the cloudServicesNetworkId value.
     */
    String cloudServicesNetworkId();

    /**
     * Gets the clusterId property: The resource ID of the Network Cloud cluster hosting the Hybrid AKS cluster.
     *
     * @return the clusterId value.
     */
    String clusterId();

    /**
     * Gets the controlPlaneCount property: The number of control plane node VMs.
     *
     * @return the controlPlaneCount value.
     */
    long controlPlaneCount();

    /**
     * Gets the controlPlaneNodes property: The list of node configurations detailing associated VMs that are part of
     * the control plane nodes of this Hybrid AKS cluster.
     *
     * @return the controlPlaneNodes value.
     */
    List<NodeConfiguration> controlPlaneNodes();

    /**
     * Gets the defaultCniNetworkId property: The resource ID of the associated default CNI network.
     *
     * @return the defaultCniNetworkId value.
     */
    String defaultCniNetworkId();

    /**
     * Gets the detailedStatus property: The more detailed status of this Hybrid AKS cluster.
     *
     * @return the detailedStatus value.
     */
    HybridAksClusterDetailedStatus detailedStatus();

    /**
     * Gets the detailedStatusMessage property: The descriptive message about the current detailed status.
     *
     * @return the detailedStatusMessage value.
     */
    String detailedStatusMessage();

    /**
     * Gets the hybridAksProvisionedClusterId property: The resource ID of the Hybrid AKS cluster that this additional
     * information is for.
     *
     * @return the hybridAksProvisionedClusterId value.
     */
    String hybridAksProvisionedClusterId();

    /**
     * Gets the provisioningState property: The provisioning state of the Hybrid AKS cluster resource.
     *
     * @return the provisioningState value.
     */
    HybridAksClusterProvisioningState provisioningState();

    /**
     * Gets the volumes property: The resource IDs of volumes that are attached to the Hybrid AKS cluster.
     *
     * @return the volumes value.
     */
    List<String> volumes();

    /**
     * Gets the workerCount property: The number of worker node VMs.
     *
     * @return the workerCount value.
     */
    long workerCount();

    /**
     * Gets the workerNodes property: The list of node configurations detailing associated VMs that are part of the
     * worker nodes of this Hybrid AKS cluster.
     *
     * @return the workerNodes value.
     */
    List<NodeConfiguration> workerNodes();

    /**
     * Gets the region of the resource.
     *
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     *
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the name of the resource group.
     *
     * @return the name of the resource group.
     */
    String resourceGroupName();

    /**
     * Gets the inner com.azure.resourcemanager.networkcloud.fluent.models.HybridAksClusterInner object.
     *
     * @return the inner object.
     */
    HybridAksClusterInner innerModel();

    /** The entirety of the HybridAksCluster definition. */
    interface Definition
        extends DefinitionStages.Blank,
            DefinitionStages.WithLocation,
            DefinitionStages.WithResourceGroup,
            DefinitionStages.WithExtendedLocation,
            DefinitionStages.WithAssociatedNetworkIds,
            DefinitionStages.WithControlPlaneCount,
            DefinitionStages.WithHybridAksProvisionedClusterId,
            DefinitionStages.WithWorkerCount,
            DefinitionStages.WithCreate {
    }
    /** The HybridAksCluster definition stages. */
    interface DefinitionStages {
        /** The first stage of the HybridAksCluster definition. */
        interface Blank extends WithLocation {
        }
        /** The stage of the HybridAksCluster definition allowing to specify location. */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(Region location);

            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(String location);
        }
        /** The stage of the HybridAksCluster definition allowing to specify parent resource. */
        interface WithResourceGroup {
            /**
             * Specifies resourceGroupName.
             *
             * @param resourceGroupName The name of the resource group. The name is case insensitive.
             * @return the next definition stage.
             */
            WithExtendedLocation withExistingResourceGroup(String resourceGroupName);
        }
        /** The stage of the HybridAksCluster definition allowing to specify extendedLocation. */
        interface WithExtendedLocation {
            /**
             * Specifies the extendedLocation property: ExtendedLocation represents the Azure custom location where the
             * resource will be created.
             *
             * <p>The extended location of the cluster associated with the resource..
             *
             * @param extendedLocation ExtendedLocation represents the Azure custom location where the resource will be
             *     created.
             *     <p>The extended location of the cluster associated with the resource.
             * @return the next definition stage.
             */
            WithAssociatedNetworkIds withExtendedLocation(ExtendedLocation extendedLocation);
        }
        /** The stage of the HybridAksCluster definition allowing to specify associatedNetworkIds. */
        interface WithAssociatedNetworkIds {
            /**
             * Specifies the associatedNetworkIds property: The list of resource IDs for the workload networks
             * associated with the Hybrid AKS cluster. It can be any of l2Networks, l3Networks, or trunkedNetworks
             * resources. This field will also contain one cloudServicesNetwork and one defaultCniNetwork..
             *
             * @param associatedNetworkIds The list of resource IDs for the workload networks associated with the Hybrid
             *     AKS cluster. It can be any of l2Networks, l3Networks, or trunkedNetworks resources. This field will
             *     also contain one cloudServicesNetwork and one defaultCniNetwork.
             * @return the next definition stage.
             */
            WithControlPlaneCount withAssociatedNetworkIds(List<String> associatedNetworkIds);
        }
        /** The stage of the HybridAksCluster definition allowing to specify controlPlaneCount. */
        interface WithControlPlaneCount {
            /**
             * Specifies the controlPlaneCount property: The number of control plane node VMs..
             *
             * @param controlPlaneCount The number of control plane node VMs.
             * @return the next definition stage.
             */
            WithHybridAksProvisionedClusterId withControlPlaneCount(long controlPlaneCount);
        }
        /** The stage of the HybridAksCluster definition allowing to specify hybridAksProvisionedClusterId. */
        interface WithHybridAksProvisionedClusterId {
            /**
             * Specifies the hybridAksProvisionedClusterId property: The resource ID of the Hybrid AKS cluster that this
             * additional information is for..
             *
             * @param hybridAksProvisionedClusterId The resource ID of the Hybrid AKS cluster that this additional
             *     information is for.
             * @return the next definition stage.
             */
            WithWorkerCount withHybridAksProvisionedClusterId(String hybridAksProvisionedClusterId);
        }
        /** The stage of the HybridAksCluster definition allowing to specify workerCount. */
        interface WithWorkerCount {
            /**
             * Specifies the workerCount property: The number of worker node VMs..
             *
             * @param workerCount The number of worker node VMs.
             * @return the next definition stage.
             */
            WithCreate withWorkerCount(long workerCount);
        }
        /**
         * The stage of the HybridAksCluster definition which contains all the minimum required properties for the
         * resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate extends DefinitionStages.WithTags {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            HybridAksCluster create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            HybridAksCluster create(Context context);
        }
        /** The stage of the HybridAksCluster definition allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }
    }
    /**
     * Begins update for the HybridAksCluster resource.
     *
     * @return the stage of resource update.
     */
    HybridAksCluster.Update update();

    /** The template for HybridAksCluster update. */
    interface Update extends UpdateStages.WithTags {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        HybridAksCluster apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        HybridAksCluster apply(Context context);
    }
    /** The HybridAksCluster update stages. */
    interface UpdateStages {
        /** The stage of the HybridAksCluster update allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: The Azure resource tags that will replace the existing ones..
             *
             * @param tags The Azure resource tags that will replace the existing ones.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    HybridAksCluster refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    HybridAksCluster refresh(Context context);

    /**
     * Restart a targeted node.
     *
     * <p>Restart a targeted node of a Hybrid AKS cluster.
     *
     * @param hybridAksClusterRestartNodeParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void restartNode(HybridAksClusterRestartNodeParameters hybridAksClusterRestartNodeParameters);

    /**
     * Restart a targeted node.
     *
     * <p>Restart a targeted node of a Hybrid AKS cluster.
     *
     * @param hybridAksClusterRestartNodeParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void restartNode(HybridAksClusterRestartNodeParameters hybridAksClusterRestartNodeParameters, Context context);
}
