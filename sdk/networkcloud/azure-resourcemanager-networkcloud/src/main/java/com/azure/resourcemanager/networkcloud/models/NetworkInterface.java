// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * NetworkInterface represents properties of the network interface.
 */
@Immutable
public final class NetworkInterface implements JsonSerializable<NetworkInterface> {
    /*
     * The partial address of Peripheral Component Interconnect (PCI).
     */
    private String address;

    /*
     * The connection type of the device.
     */
    private DeviceConnectionType deviceConnectionType;

    /*
     * The model name of the device.
     */
    private String model;

    /*
     * The physical slot for this device.
     */
    private Long physicalSlot;

    /*
     * The number of ports on the device.
     */
    private Long portCount;

    /*
     * The maximum amount of data in gigabits that the line card transmits through a port at any given second.
     */
    private Long portSpeed;

    /*
     * The vendor name of the device.
     */
    private String vendor;

    /**
     * Creates an instance of NetworkInterface class.
     */
    public NetworkInterface() {
    }

    /**
     * Get the address property: The partial address of Peripheral Component Interconnect (PCI).
     * 
     * @return the address value.
     */
    public String address() {
        return this.address;
    }

    /**
     * Get the deviceConnectionType property: The connection type of the device.
     * 
     * @return the deviceConnectionType value.
     */
    public DeviceConnectionType deviceConnectionType() {
        return this.deviceConnectionType;
    }

    /**
     * Get the model property: The model name of the device.
     * 
     * @return the model value.
     */
    public String model() {
        return this.model;
    }

    /**
     * Get the physicalSlot property: The physical slot for this device.
     * 
     * @return the physicalSlot value.
     */
    public Long physicalSlot() {
        return this.physicalSlot;
    }

    /**
     * Get the portCount property: The number of ports on the device.
     * 
     * @return the portCount value.
     */
    public Long portCount() {
        return this.portCount;
    }

    /**
     * Get the portSpeed property: The maximum amount of data in gigabits that the line card transmits through a port at
     * any given second.
     * 
     * @return the portSpeed value.
     */
    public Long portSpeed() {
        return this.portSpeed;
    }

    /**
     * Get the vendor property: The vendor name of the device.
     * 
     * @return the vendor value.
     */
    public String vendor() {
        return this.vendor;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NetworkInterface from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NetworkInterface if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the NetworkInterface.
     */
    public static NetworkInterface fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NetworkInterface deserializedNetworkInterface = new NetworkInterface();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("address".equals(fieldName)) {
                    deserializedNetworkInterface.address = reader.getString();
                } else if ("deviceConnectionType".equals(fieldName)) {
                    deserializedNetworkInterface.deviceConnectionType
                        = DeviceConnectionType.fromString(reader.getString());
                } else if ("model".equals(fieldName)) {
                    deserializedNetworkInterface.model = reader.getString();
                } else if ("physicalSlot".equals(fieldName)) {
                    deserializedNetworkInterface.physicalSlot = reader.getNullable(JsonReader::getLong);
                } else if ("portCount".equals(fieldName)) {
                    deserializedNetworkInterface.portCount = reader.getNullable(JsonReader::getLong);
                } else if ("portSpeed".equals(fieldName)) {
                    deserializedNetworkInterface.portSpeed = reader.getNullable(JsonReader::getLong);
                } else if ("vendor".equals(fieldName)) {
                    deserializedNetworkInterface.vendor = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNetworkInterface;
        });
    }
}
