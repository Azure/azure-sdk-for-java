// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.networkcloud.models.CloudServicesNetworkDetailedStatus;
import com.azure.resourcemanager.networkcloud.models.CloudServicesNetworkEnableDefaultEgressEndpoints;
import com.azure.resourcemanager.networkcloud.models.CloudServicesNetworkProvisioningState;
import com.azure.resourcemanager.networkcloud.models.EgressEndpoint;
import java.io.IOException;
import java.util.List;

/**
 * CloudServicesNetworkProperties represents properties of the cloud services network.
 */
@Fluent
public final class CloudServicesNetworkProperties implements JsonSerializable<CloudServicesNetworkProperties> {
    /*
     * The list of egress endpoints. This allows for connection from a Hybrid AKS cluster to the specified endpoint.
     */
    private List<EgressEndpoint> additionalEgressEndpoints;

    /*
     * The list of resource IDs for the other Microsoft.NetworkCloud resources that have attached this network.
     */
    private List<String> associatedResourceIds;

    /*
     * The resource ID of the Network Cloud cluster this cloud services network is associated with.
     */
    private String clusterId;

    /*
     * The more detailed status of the cloud services network.
     */
    private CloudServicesNetworkDetailedStatus detailedStatus;

    /*
     * The descriptive message about the current detailed status.
     */
    private String detailedStatusMessage;

    /*
     * The indicator of whether the platform default endpoints are allowed for the egress traffic.
     */
    private CloudServicesNetworkEnableDefaultEgressEndpoints enableDefaultEgressEndpoints;

    /*
     * The full list of additional and default egress endpoints that are currently enabled.
     */
    private List<EgressEndpoint> enabledEgressEndpoints;

    /*
     * Field Deprecated. These fields will be empty/omitted. The list of Hybrid AKS cluster resource IDs that are
     * associated with this cloud services network.
     */
    private List<String> hybridAksClustersAssociatedIds;

    /*
     * The name of the interface that will be present in the virtual machine to represent this network.
     */
    private String interfaceName;

    /*
     * The provisioning state of the cloud services network.
     */
    private CloudServicesNetworkProvisioningState provisioningState;

    /*
     * Field Deprecated. These fields will be empty/omitted. The list of virtual machine resource IDs, excluding any
     * Hybrid AKS virtual machines, that are currently using this cloud services network.
     */
    private List<String> virtualMachinesAssociatedIds;

    /**
     * Creates an instance of CloudServicesNetworkProperties class.
     */
    public CloudServicesNetworkProperties() {
    }

    /**
     * Get the additionalEgressEndpoints property: The list of egress endpoints. This allows for connection from a
     * Hybrid AKS cluster to the specified endpoint.
     * 
     * @return the additionalEgressEndpoints value.
     */
    public List<EgressEndpoint> additionalEgressEndpoints() {
        return this.additionalEgressEndpoints;
    }

    /**
     * Set the additionalEgressEndpoints property: The list of egress endpoints. This allows for connection from a
     * Hybrid AKS cluster to the specified endpoint.
     * 
     * @param additionalEgressEndpoints the additionalEgressEndpoints value to set.
     * @return the CloudServicesNetworkProperties object itself.
     */
    public CloudServicesNetworkProperties
        withAdditionalEgressEndpoints(List<EgressEndpoint> additionalEgressEndpoints) {
        this.additionalEgressEndpoints = additionalEgressEndpoints;
        return this;
    }

    /**
     * Get the associatedResourceIds property: The list of resource IDs for the other Microsoft.NetworkCloud resources
     * that have attached this network.
     * 
     * @return the associatedResourceIds value.
     */
    public List<String> associatedResourceIds() {
        return this.associatedResourceIds;
    }

    /**
     * Get the clusterId property: The resource ID of the Network Cloud cluster this cloud services network is
     * associated with.
     * 
     * @return the clusterId value.
     */
    public String clusterId() {
        return this.clusterId;
    }

    /**
     * Get the detailedStatus property: The more detailed status of the cloud services network.
     * 
     * @return the detailedStatus value.
     */
    public CloudServicesNetworkDetailedStatus detailedStatus() {
        return this.detailedStatus;
    }

    /**
     * Get the detailedStatusMessage property: The descriptive message about the current detailed status.
     * 
     * @return the detailedStatusMessage value.
     */
    public String detailedStatusMessage() {
        return this.detailedStatusMessage;
    }

    /**
     * Get the enableDefaultEgressEndpoints property: The indicator of whether the platform default endpoints are
     * allowed for the egress traffic.
     * 
     * @return the enableDefaultEgressEndpoints value.
     */
    public CloudServicesNetworkEnableDefaultEgressEndpoints enableDefaultEgressEndpoints() {
        return this.enableDefaultEgressEndpoints;
    }

    /**
     * Set the enableDefaultEgressEndpoints property: The indicator of whether the platform default endpoints are
     * allowed for the egress traffic.
     * 
     * @param enableDefaultEgressEndpoints the enableDefaultEgressEndpoints value to set.
     * @return the CloudServicesNetworkProperties object itself.
     */
    public CloudServicesNetworkProperties withEnableDefaultEgressEndpoints(
        CloudServicesNetworkEnableDefaultEgressEndpoints enableDefaultEgressEndpoints) {
        this.enableDefaultEgressEndpoints = enableDefaultEgressEndpoints;
        return this;
    }

    /**
     * Get the enabledEgressEndpoints property: The full list of additional and default egress endpoints that are
     * currently enabled.
     * 
     * @return the enabledEgressEndpoints value.
     */
    public List<EgressEndpoint> enabledEgressEndpoints() {
        return this.enabledEgressEndpoints;
    }

    /**
     * Get the hybridAksClustersAssociatedIds property: Field Deprecated. These fields will be empty/omitted. The list
     * of Hybrid AKS cluster resource IDs that are associated with this cloud services network.
     * 
     * @return the hybridAksClustersAssociatedIds value.
     */
    public List<String> hybridAksClustersAssociatedIds() {
        return this.hybridAksClustersAssociatedIds;
    }

    /**
     * Get the interfaceName property: The name of the interface that will be present in the virtual machine to
     * represent this network.
     * 
     * @return the interfaceName value.
     */
    public String interfaceName() {
        return this.interfaceName;
    }

    /**
     * Get the provisioningState property: The provisioning state of the cloud services network.
     * 
     * @return the provisioningState value.
     */
    public CloudServicesNetworkProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the virtualMachinesAssociatedIds property: Field Deprecated. These fields will be empty/omitted. The list of
     * virtual machine resource IDs, excluding any Hybrid AKS virtual machines, that are currently using this cloud
     * services network.
     * 
     * @return the virtualMachinesAssociatedIds value.
     */
    public List<String> virtualMachinesAssociatedIds() {
        return this.virtualMachinesAssociatedIds;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (additionalEgressEndpoints() != null) {
            additionalEgressEndpoints().forEach(e -> e.validate());
        }
        if (enabledEgressEndpoints() != null) {
            enabledEgressEndpoints().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("additionalEgressEndpoints", this.additionalEgressEndpoints,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("enableDefaultEgressEndpoints",
            this.enableDefaultEgressEndpoints == null ? null : this.enableDefaultEgressEndpoints.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CloudServicesNetworkProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CloudServicesNetworkProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CloudServicesNetworkProperties.
     */
    public static CloudServicesNetworkProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CloudServicesNetworkProperties deserializedCloudServicesNetworkProperties
                = new CloudServicesNetworkProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("additionalEgressEndpoints".equals(fieldName)) {
                    List<EgressEndpoint> additionalEgressEndpoints
                        = reader.readArray(reader1 -> EgressEndpoint.fromJson(reader1));
                    deserializedCloudServicesNetworkProperties.additionalEgressEndpoints = additionalEgressEndpoints;
                } else if ("associatedResourceIds".equals(fieldName)) {
                    List<String> associatedResourceIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedCloudServicesNetworkProperties.associatedResourceIds = associatedResourceIds;
                } else if ("clusterId".equals(fieldName)) {
                    deserializedCloudServicesNetworkProperties.clusterId = reader.getString();
                } else if ("detailedStatus".equals(fieldName)) {
                    deserializedCloudServicesNetworkProperties.detailedStatus
                        = CloudServicesNetworkDetailedStatus.fromString(reader.getString());
                } else if ("detailedStatusMessage".equals(fieldName)) {
                    deserializedCloudServicesNetworkProperties.detailedStatusMessage = reader.getString();
                } else if ("enableDefaultEgressEndpoints".equals(fieldName)) {
                    deserializedCloudServicesNetworkProperties.enableDefaultEgressEndpoints
                        = CloudServicesNetworkEnableDefaultEgressEndpoints.fromString(reader.getString());
                } else if ("enabledEgressEndpoints".equals(fieldName)) {
                    List<EgressEndpoint> enabledEgressEndpoints
                        = reader.readArray(reader1 -> EgressEndpoint.fromJson(reader1));
                    deserializedCloudServicesNetworkProperties.enabledEgressEndpoints = enabledEgressEndpoints;
                } else if ("hybridAksClustersAssociatedIds".equals(fieldName)) {
                    List<String> hybridAksClustersAssociatedIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedCloudServicesNetworkProperties.hybridAksClustersAssociatedIds
                        = hybridAksClustersAssociatedIds;
                } else if ("interfaceName".equals(fieldName)) {
                    deserializedCloudServicesNetworkProperties.interfaceName = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedCloudServicesNetworkProperties.provisioningState
                        = CloudServicesNetworkProvisioningState.fromString(reader.getString());
                } else if ("virtualMachinesAssociatedIds".equals(fieldName)) {
                    List<String> virtualMachinesAssociatedIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedCloudServicesNetworkProperties.virtualMachinesAssociatedIds
                        = virtualMachinesAssociatedIds;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCloudServicesNetworkProperties;
        });
    }
}
