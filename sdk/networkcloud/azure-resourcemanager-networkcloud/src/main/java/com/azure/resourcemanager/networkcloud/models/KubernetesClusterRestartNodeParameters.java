// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * KubernetesClusterRestartNodeParameters represents the body of the request to restart the node of a Kubernetes
 * cluster.
 */
@Fluent
public final class KubernetesClusterRestartNodeParameters
    implements JsonSerializable<KubernetesClusterRestartNodeParameters> {
    /*
     * The name of the node to restart.
     */
    private String nodeName;

    /**
     * Creates an instance of KubernetesClusterRestartNodeParameters class.
     */
    public KubernetesClusterRestartNodeParameters() {
    }

    /**
     * Get the nodeName property: The name of the node to restart.
     * 
     * @return the nodeName value.
     */
    public String nodeName() {
        return this.nodeName;
    }

    /**
     * Set the nodeName property: The name of the node to restart.
     * 
     * @param nodeName the nodeName value to set.
     * @return the KubernetesClusterRestartNodeParameters object itself.
     */
    public KubernetesClusterRestartNodeParameters withNodeName(String nodeName) {
        this.nodeName = nodeName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (nodeName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property nodeName in model KubernetesClusterRestartNodeParameters"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(KubernetesClusterRestartNodeParameters.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("nodeName", this.nodeName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of KubernetesClusterRestartNodeParameters from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of KubernetesClusterRestartNodeParameters if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the KubernetesClusterRestartNodeParameters.
     */
    public static KubernetesClusterRestartNodeParameters fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            KubernetesClusterRestartNodeParameters deserializedKubernetesClusterRestartNodeParameters
                = new KubernetesClusterRestartNodeParameters();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("nodeName".equals(fieldName)) {
                    deserializedKubernetesClusterRestartNodeParameters.nodeName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedKubernetesClusterRestartNodeParameters;
        });
    }
}
