// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/** Resource collection API of StorageAppliances. */
public interface StorageAppliances {
    /**
     * List storage appliances in the subscription.
     *
     * <p>Get a list of storage appliances in the provided subscription.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of storage appliances in the provided subscription as paginated response with {@link
     *     PagedIterable}.
     */
    PagedIterable<StorageAppliance> list();

    /**
     * List storage appliances in the subscription.
     *
     * <p>Get a list of storage appliances in the provided subscription.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of storage appliances in the provided subscription as paginated response with {@link
     *     PagedIterable}.
     */
    PagedIterable<StorageAppliance> list(Context context);

    /**
     * List storage appliances in the resource group.
     *
     * <p>Get a list of storage appliances in the provided resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of storage appliances in the provided resource group as paginated response with {@link
     *     PagedIterable}.
     */
    PagedIterable<StorageAppliance> listByResourceGroup(String resourceGroupName);

    /**
     * List storage appliances in the resource group.
     *
     * <p>Get a list of storage appliances in the provided resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of storage appliances in the provided resource group as paginated response with {@link
     *     PagedIterable}.
     */
    PagedIterable<StorageAppliance> listByResourceGroup(String resourceGroupName, Context context);

    /**
     * Retrieve the storage appliance.
     *
     * <p>Get properties of the provided storage appliance.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageApplianceName The name of the storage appliance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of the provided storage appliance along with {@link Response}.
     */
    Response<StorageAppliance> getByResourceGroupWithResponse(
        String resourceGroupName, String storageApplianceName, Context context);

    /**
     * Retrieve the storage appliance.
     *
     * <p>Get properties of the provided storage appliance.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageApplianceName The name of the storage appliance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of the provided storage appliance.
     */
    StorageAppliance getByResourceGroup(String resourceGroupName, String storageApplianceName);

    /**
     * Delete the storage appliance.
     *
     * <p>Delete the provided storage appliance. All customer initiated requests will be rejected as the life cycle of
     * this resource is managed by the system.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageApplianceName The name of the storage appliance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByResourceGroup(String resourceGroupName, String storageApplianceName);

    /**
     * Delete the storage appliance.
     *
     * <p>Delete the provided storage appliance. All customer initiated requests will be rejected as the life cycle of
     * this resource is managed by the system.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageApplianceName The name of the storage appliance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String resourceGroupName, String storageApplianceName, Context context);

    /**
     * Turn off remote vendor management for a storage appliance, if supported.
     *
     * <p>Disable remote vendor management of the provided storage appliance.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageApplianceName The name of the storage appliance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void disableRemoteVendorManagement(String resourceGroupName, String storageApplianceName);

    /**
     * Turn off remote vendor management for a storage appliance, if supported.
     *
     * <p>Disable remote vendor management of the provided storage appliance.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageApplianceName The name of the storage appliance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void disableRemoteVendorManagement(String resourceGroupName, String storageApplianceName, Context context);

    /**
     * Turn on remote vendor management for a storage appliance, if supported.
     *
     * <p>Enable remote vendor management of the provided storage appliance.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageApplianceName The name of the storage appliance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void enableRemoteVendorManagement(String resourceGroupName, String storageApplianceName);

    /**
     * Turn on remote vendor management for a storage appliance, if supported.
     *
     * <p>Enable remote vendor management of the provided storage appliance.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageApplianceName The name of the storage appliance.
     * @param storageApplianceEnableRemoteVendorManagementParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void enableRemoteVendorManagement(
        String resourceGroupName,
        String storageApplianceName,
        StorageApplianceEnableRemoteVendorManagementParameters storageApplianceEnableRemoteVendorManagementParameters,
        Context context);

    /**
     * Retrieve output from read-only commands exercised against a storage appliance.
     *
     * <p>Run and retrieve output from read only commands on the provided storage appliance.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageApplianceName The name of the storage appliance.
     * @param storageApplianceRunReadCommandsParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void runReadCommands(
        String resourceGroupName,
        String storageApplianceName,
        StorageApplianceRunReadCommandsParameters storageApplianceRunReadCommandsParameters);

    /**
     * Retrieve output from read-only commands exercised against a storage appliance.
     *
     * <p>Run and retrieve output from read only commands on the provided storage appliance.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageApplianceName The name of the storage appliance.
     * @param storageApplianceRunReadCommandsParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void runReadCommands(
        String resourceGroupName,
        String storageApplianceName,
        StorageApplianceRunReadCommandsParameters storageApplianceRunReadCommandsParameters,
        Context context);

    /**
     * Retrieve the storage appliance.
     *
     * <p>Get properties of the provided storage appliance.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of the provided storage appliance along with {@link Response}.
     */
    StorageAppliance getById(String id);

    /**
     * Retrieve the storage appliance.
     *
     * <p>Get properties of the provided storage appliance.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of the provided storage appliance along with {@link Response}.
     */
    Response<StorageAppliance> getByIdWithResponse(String id, Context context);

    /**
     * Delete the storage appliance.
     *
     * <p>Delete the provided storage appliance. All customer initiated requests will be rejected as the life cycle of
     * this resource is managed by the system.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteById(String id);

    /**
     * Delete the storage appliance.
     *
     * <p>Delete the provided storage appliance. All customer initiated requests will be rejected as the life cycle of
     * this resource is managed by the system.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByIdWithResponse(String id, Context context);

    /**
     * Begins definition for a new StorageAppliance resource.
     *
     * @param name resource name.
     * @return the first stage of the new StorageAppliance definition.
     */
    StorageAppliance.DefinitionStages.Blank define(String name);
}
