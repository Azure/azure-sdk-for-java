// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.networkcloud.models.BareMetalMachineKeySetDetailedStatus;
import com.azure.resourcemanager.networkcloud.models.BareMetalMachineKeySetPrivilegeLevel;
import com.azure.resourcemanager.networkcloud.models.BareMetalMachineKeySetProvisioningState;
import com.azure.resourcemanager.networkcloud.models.KeySetUser;
import com.azure.resourcemanager.networkcloud.models.KeySetUserStatus;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * BareMetalMachineKeySetProperties represents the properties of bare metal machine key set.
 */
@Fluent
public final class BareMetalMachineKeySetProperties implements JsonSerializable<BareMetalMachineKeySetProperties> {
    /*
     * The object ID of Azure Active Directory group that all users in the list must be in for access to be granted.
     * Users that are not in the group will not have access.
     */
    private String azureGroupId;

    /*
     * The more detailed status of the key set.
     */
    private BareMetalMachineKeySetDetailedStatus detailedStatus;

    /*
     * The descriptive message about the current detailed status.
     */
    private String detailedStatusMessage;

    /*
     * The date and time after which the users in this key set will be removed from the bare metal machines.
     */
    private OffsetDateTime expiration;

    /*
     * The list of IP addresses of jump hosts with management network access from which a login will be allowed for the
     * users.
     */
    private List<String> jumpHostsAllowed;

    /*
     * The last time this key set was validated.
     */
    private OffsetDateTime lastValidation;

    /*
     * The name of the group that users will be assigned to on the operating system of the machines.
     */
    private String osGroupName;

    /*
     * The access level allowed for the users in this key set.
     */
    private BareMetalMachineKeySetPrivilegeLevel privilegeLevel;

    /*
     * The provisioning state of the bare metal machine key set.
     */
    private BareMetalMachineKeySetProvisioningState provisioningState;

    /*
     * The unique list of permitted users.
     */
    private List<KeySetUser> userList;

    /*
     * The status evaluation of each user.
     */
    private List<KeySetUserStatus> userListStatus;

    /**
     * Creates an instance of BareMetalMachineKeySetProperties class.
     */
    public BareMetalMachineKeySetProperties() {
    }

    /**
     * Get the azureGroupId property: The object ID of Azure Active Directory group that all users in the list must be
     * in for access to be granted. Users that are not in the group will not have access.
     * 
     * @return the azureGroupId value.
     */
    public String azureGroupId() {
        return this.azureGroupId;
    }

    /**
     * Set the azureGroupId property: The object ID of Azure Active Directory group that all users in the list must be
     * in for access to be granted. Users that are not in the group will not have access.
     * 
     * @param azureGroupId the azureGroupId value to set.
     * @return the BareMetalMachineKeySetProperties object itself.
     */
    public BareMetalMachineKeySetProperties withAzureGroupId(String azureGroupId) {
        this.azureGroupId = azureGroupId;
        return this;
    }

    /**
     * Get the detailedStatus property: The more detailed status of the key set.
     * 
     * @return the detailedStatus value.
     */
    public BareMetalMachineKeySetDetailedStatus detailedStatus() {
        return this.detailedStatus;
    }

    /**
     * Get the detailedStatusMessage property: The descriptive message about the current detailed status.
     * 
     * @return the detailedStatusMessage value.
     */
    public String detailedStatusMessage() {
        return this.detailedStatusMessage;
    }

    /**
     * Get the expiration property: The date and time after which the users in this key set will be removed from the
     * bare metal machines.
     * 
     * @return the expiration value.
     */
    public OffsetDateTime expiration() {
        return this.expiration;
    }

    /**
     * Set the expiration property: The date and time after which the users in this key set will be removed from the
     * bare metal machines.
     * 
     * @param expiration the expiration value to set.
     * @return the BareMetalMachineKeySetProperties object itself.
     */
    public BareMetalMachineKeySetProperties withExpiration(OffsetDateTime expiration) {
        this.expiration = expiration;
        return this;
    }

    /**
     * Get the jumpHostsAllowed property: The list of IP addresses of jump hosts with management network access from
     * which a login will be allowed for the users.
     * 
     * @return the jumpHostsAllowed value.
     */
    public List<String> jumpHostsAllowed() {
        return this.jumpHostsAllowed;
    }

    /**
     * Set the jumpHostsAllowed property: The list of IP addresses of jump hosts with management network access from
     * which a login will be allowed for the users.
     * 
     * @param jumpHostsAllowed the jumpHostsAllowed value to set.
     * @return the BareMetalMachineKeySetProperties object itself.
     */
    public BareMetalMachineKeySetProperties withJumpHostsAllowed(List<String> jumpHostsAllowed) {
        this.jumpHostsAllowed = jumpHostsAllowed;
        return this;
    }

    /**
     * Get the lastValidation property: The last time this key set was validated.
     * 
     * @return the lastValidation value.
     */
    public OffsetDateTime lastValidation() {
        return this.lastValidation;
    }

    /**
     * Get the osGroupName property: The name of the group that users will be assigned to on the operating system of the
     * machines.
     * 
     * @return the osGroupName value.
     */
    public String osGroupName() {
        return this.osGroupName;
    }

    /**
     * Set the osGroupName property: The name of the group that users will be assigned to on the operating system of the
     * machines.
     * 
     * @param osGroupName the osGroupName value to set.
     * @return the BareMetalMachineKeySetProperties object itself.
     */
    public BareMetalMachineKeySetProperties withOsGroupName(String osGroupName) {
        this.osGroupName = osGroupName;
        return this;
    }

    /**
     * Get the privilegeLevel property: The access level allowed for the users in this key set.
     * 
     * @return the privilegeLevel value.
     */
    public BareMetalMachineKeySetPrivilegeLevel privilegeLevel() {
        return this.privilegeLevel;
    }

    /**
     * Set the privilegeLevel property: The access level allowed for the users in this key set.
     * 
     * @param privilegeLevel the privilegeLevel value to set.
     * @return the BareMetalMachineKeySetProperties object itself.
     */
    public BareMetalMachineKeySetProperties withPrivilegeLevel(BareMetalMachineKeySetPrivilegeLevel privilegeLevel) {
        this.privilegeLevel = privilegeLevel;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state of the bare metal machine key set.
     * 
     * @return the provisioningState value.
     */
    public BareMetalMachineKeySetProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the userList property: The unique list of permitted users.
     * 
     * @return the userList value.
     */
    public List<KeySetUser> userList() {
        return this.userList;
    }

    /**
     * Set the userList property: The unique list of permitted users.
     * 
     * @param userList the userList value to set.
     * @return the BareMetalMachineKeySetProperties object itself.
     */
    public BareMetalMachineKeySetProperties withUserList(List<KeySetUser> userList) {
        this.userList = userList;
        return this;
    }

    /**
     * Get the userListStatus property: The status evaluation of each user.
     * 
     * @return the userListStatus value.
     */
    public List<KeySetUserStatus> userListStatus() {
        return this.userListStatus;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (azureGroupId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property azureGroupId in model BareMetalMachineKeySetProperties"));
        }
        if (expiration() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property expiration in model BareMetalMachineKeySetProperties"));
        }
        if (jumpHostsAllowed() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property jumpHostsAllowed in model BareMetalMachineKeySetProperties"));
        }
        if (privilegeLevel() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property privilegeLevel in model BareMetalMachineKeySetProperties"));
        }
        if (userList() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property userList in model BareMetalMachineKeySetProperties"));
        } else {
            userList().forEach(e -> e.validate());
        }
        if (userListStatus() != null) {
            userListStatus().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(BareMetalMachineKeySetProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("azureGroupId", this.azureGroupId);
        jsonWriter.writeStringField("expiration",
            this.expiration == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.expiration));
        jsonWriter.writeArrayField("jumpHostsAllowed", this.jumpHostsAllowed,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("privilegeLevel",
            this.privilegeLevel == null ? null : this.privilegeLevel.toString());
        jsonWriter.writeArrayField("userList", this.userList, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("osGroupName", this.osGroupName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BareMetalMachineKeySetProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BareMetalMachineKeySetProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the BareMetalMachineKeySetProperties.
     */
    public static BareMetalMachineKeySetProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BareMetalMachineKeySetProperties deserializedBareMetalMachineKeySetProperties
                = new BareMetalMachineKeySetProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("azureGroupId".equals(fieldName)) {
                    deserializedBareMetalMachineKeySetProperties.azureGroupId = reader.getString();
                } else if ("expiration".equals(fieldName)) {
                    deserializedBareMetalMachineKeySetProperties.expiration = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("jumpHostsAllowed".equals(fieldName)) {
                    List<String> jumpHostsAllowed = reader.readArray(reader1 -> reader1.getString());
                    deserializedBareMetalMachineKeySetProperties.jumpHostsAllowed = jumpHostsAllowed;
                } else if ("privilegeLevel".equals(fieldName)) {
                    deserializedBareMetalMachineKeySetProperties.privilegeLevel
                        = BareMetalMachineKeySetPrivilegeLevel.fromString(reader.getString());
                } else if ("userList".equals(fieldName)) {
                    List<KeySetUser> userList = reader.readArray(reader1 -> KeySetUser.fromJson(reader1));
                    deserializedBareMetalMachineKeySetProperties.userList = userList;
                } else if ("detailedStatus".equals(fieldName)) {
                    deserializedBareMetalMachineKeySetProperties.detailedStatus
                        = BareMetalMachineKeySetDetailedStatus.fromString(reader.getString());
                } else if ("detailedStatusMessage".equals(fieldName)) {
                    deserializedBareMetalMachineKeySetProperties.detailedStatusMessage = reader.getString();
                } else if ("lastValidation".equals(fieldName)) {
                    deserializedBareMetalMachineKeySetProperties.lastValidation = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("osGroupName".equals(fieldName)) {
                    deserializedBareMetalMachineKeySetProperties.osGroupName = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedBareMetalMachineKeySetProperties.provisioningState
                        = BareMetalMachineKeySetProvisioningState.fromString(reader.getString());
                } else if ("userListStatus".equals(fieldName)) {
                    List<KeySetUserStatus> userListStatus
                        = reader.readArray(reader1 -> KeySetUserStatus.fromJson(reader1));
                    deserializedBareMetalMachineKeySetProperties.userListStatus = userListStatus;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBareMetalMachineKeySetProperties;
        });
    }
}
