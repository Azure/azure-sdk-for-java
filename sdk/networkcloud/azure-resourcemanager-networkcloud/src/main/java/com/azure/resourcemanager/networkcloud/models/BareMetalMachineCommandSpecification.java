// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * BareMetalMachineCommandSpecification represents the command and optional arguments to exercise against the bare metal
 * machine.
 */
@Fluent
public final class BareMetalMachineCommandSpecification
    implements JsonSerializable<BareMetalMachineCommandSpecification> {
    /*
     * The list of string arguments that will be passed to the script in order as separate arguments.
     */
    private List<String> arguments;

    /*
     * The command to execute against the bare metal machine.
     */
    private String command;

    /**
     * Creates an instance of BareMetalMachineCommandSpecification class.
     */
    public BareMetalMachineCommandSpecification() {
    }

    /**
     * Get the arguments property: The list of string arguments that will be passed to the script in order as separate
     * arguments.
     * 
     * @return the arguments value.
     */
    public List<String> arguments() {
        return this.arguments;
    }

    /**
     * Set the arguments property: The list of string arguments that will be passed to the script in order as separate
     * arguments.
     * 
     * @param arguments the arguments value to set.
     * @return the BareMetalMachineCommandSpecification object itself.
     */
    public BareMetalMachineCommandSpecification withArguments(List<String> arguments) {
        this.arguments = arguments;
        return this;
    }

    /**
     * Get the command property: The command to execute against the bare metal machine.
     * 
     * @return the command value.
     */
    public String command() {
        return this.command;
    }

    /**
     * Set the command property: The command to execute against the bare metal machine.
     * 
     * @param command the command value to set.
     * @return the BareMetalMachineCommandSpecification object itself.
     */
    public BareMetalMachineCommandSpecification withCommand(String command) {
        this.command = command;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (command() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property command in model BareMetalMachineCommandSpecification"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(BareMetalMachineCommandSpecification.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("command", this.command);
        jsonWriter.writeArrayField("arguments", this.arguments, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BareMetalMachineCommandSpecification from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BareMetalMachineCommandSpecification if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the BareMetalMachineCommandSpecification.
     */
    public static BareMetalMachineCommandSpecification fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BareMetalMachineCommandSpecification deserializedBareMetalMachineCommandSpecification
                = new BareMetalMachineCommandSpecification();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("command".equals(fieldName)) {
                    deserializedBareMetalMachineCommandSpecification.command = reader.getString();
                } else if ("arguments".equals(fieldName)) {
                    List<String> arguments = reader.readArray(reader1 -> reader1.getString());
                    deserializedBareMetalMachineCommandSpecification.arguments = arguments;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBareMetalMachineCommandSpecification;
        });
    }
}
