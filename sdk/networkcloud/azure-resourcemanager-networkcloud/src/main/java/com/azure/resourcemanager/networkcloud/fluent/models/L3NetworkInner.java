// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.networkcloud.models.ExtendedLocation;
import com.azure.resourcemanager.networkcloud.models.HybridAksIpamEnabled;
import com.azure.resourcemanager.networkcloud.models.HybridAksPluginType;
import com.azure.resourcemanager.networkcloud.models.IpAllocationType;
import com.azure.resourcemanager.networkcloud.models.L3NetworkDetailedStatus;
import com.azure.resourcemanager.networkcloud.models.L3NetworkProvisioningState;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * L3Network represents a network that utilizes a single isolation domain set up for layer-3 resources.
 */
@Fluent
public final class L3NetworkInner extends Resource {
    /*
     * The extended location of the cluster associated with the resource.
     */
    private ExtendedLocation extendedLocation;

    /*
     * The list of the resource properties.
     */
    private L3NetworkProperties innerProperties = new L3NetworkProperties();

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of L3NetworkInner class.
     */
    public L3NetworkInner() {
    }

    /**
     * Get the extendedLocation property: The extended location of the cluster associated with the resource.
     * 
     * @return the extendedLocation value.
     */
    public ExtendedLocation extendedLocation() {
        return this.extendedLocation;
    }

    /**
     * Set the extendedLocation property: The extended location of the cluster associated with the resource.
     * 
     * @param extendedLocation the extendedLocation value to set.
     * @return the L3NetworkInner object itself.
     */
    public L3NetworkInner withExtendedLocation(ExtendedLocation extendedLocation) {
        this.extendedLocation = extendedLocation;
        return this;
    }

    /**
     * Get the innerProperties property: The list of the resource properties.
     * 
     * @return the innerProperties value.
     */
    private L3NetworkProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public L3NetworkInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public L3NetworkInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the associatedResourceIds property: The list of resource IDs for the other Microsoft.NetworkCloud resources
     * that have attached this network.
     * 
     * @return the associatedResourceIds value.
     */
    public List<String> associatedResourceIds() {
        return this.innerProperties() == null ? null : this.innerProperties().associatedResourceIds();
    }

    /**
     * Get the clusterId property: The resource ID of the Network Cloud cluster this L3 network is associated with.
     * 
     * @return the clusterId value.
     */
    public String clusterId() {
        return this.innerProperties() == null ? null : this.innerProperties().clusterId();
    }

    /**
     * Get the detailedStatus property: The more detailed status of the L3 network.
     * 
     * @return the detailedStatus value.
     */
    public L3NetworkDetailedStatus detailedStatus() {
        return this.innerProperties() == null ? null : this.innerProperties().detailedStatus();
    }

    /**
     * Get the detailedStatusMessage property: The descriptive message about the current detailed status.
     * 
     * @return the detailedStatusMessage value.
     */
    public String detailedStatusMessage() {
        return this.innerProperties() == null ? null : this.innerProperties().detailedStatusMessage();
    }

    /**
     * Get the hybridAksClustersAssociatedIds property: Field Deprecated. These fields will be empty/omitted. The list
     * of Hybrid AKS cluster resource IDs that are associated with this L3 network.
     * 
     * @return the hybridAksClustersAssociatedIds value.
     */
    public List<String> hybridAksClustersAssociatedIds() {
        return this.innerProperties() == null ? null : this.innerProperties().hybridAksClustersAssociatedIds();
    }

    /**
     * Get the hybridAksIpamEnabled property: Field Deprecated. The field was previously optional, now it will have no
     * defined behavior and will be ignored. The indicator of whether or not to disable IPAM allocation on the network
     * attachment definition injected into the Hybrid AKS Cluster.
     * 
     * @return the hybridAksIpamEnabled value.
     */
    public HybridAksIpamEnabled hybridAksIpamEnabled() {
        return this.innerProperties() == null ? null : this.innerProperties().hybridAksIpamEnabled();
    }

    /**
     * Set the hybridAksIpamEnabled property: Field Deprecated. The field was previously optional, now it will have no
     * defined behavior and will be ignored. The indicator of whether or not to disable IPAM allocation on the network
     * attachment definition injected into the Hybrid AKS Cluster.
     * 
     * @param hybridAksIpamEnabled the hybridAksIpamEnabled value to set.
     * @return the L3NetworkInner object itself.
     */
    public L3NetworkInner withHybridAksIpamEnabled(HybridAksIpamEnabled hybridAksIpamEnabled) {
        if (this.innerProperties() == null) {
            this.innerProperties = new L3NetworkProperties();
        }
        this.innerProperties().withHybridAksIpamEnabled(hybridAksIpamEnabled);
        return this;
    }

    /**
     * Get the hybridAksPluginType property: Field Deprecated. The field was previously optional, now it will have no
     * defined behavior and will be ignored. The network plugin type for Hybrid AKS.
     * 
     * @return the hybridAksPluginType value.
     */
    public HybridAksPluginType hybridAksPluginType() {
        return this.innerProperties() == null ? null : this.innerProperties().hybridAksPluginType();
    }

    /**
     * Set the hybridAksPluginType property: Field Deprecated. The field was previously optional, now it will have no
     * defined behavior and will be ignored. The network plugin type for Hybrid AKS.
     * 
     * @param hybridAksPluginType the hybridAksPluginType value to set.
     * @return the L3NetworkInner object itself.
     */
    public L3NetworkInner withHybridAksPluginType(HybridAksPluginType hybridAksPluginType) {
        if (this.innerProperties() == null) {
            this.innerProperties = new L3NetworkProperties();
        }
        this.innerProperties().withHybridAksPluginType(hybridAksPluginType);
        return this;
    }

    /**
     * Get the interfaceName property: The default interface name for this L3 network in the virtual machine. This name
     * can be overridden by the name supplied in the network attachment configuration of that virtual machine.
     * 
     * @return the interfaceName value.
     */
    public String interfaceName() {
        return this.innerProperties() == null ? null : this.innerProperties().interfaceName();
    }

    /**
     * Set the interfaceName property: The default interface name for this L3 network in the virtual machine. This name
     * can be overridden by the name supplied in the network attachment configuration of that virtual machine.
     * 
     * @param interfaceName the interfaceName value to set.
     * @return the L3NetworkInner object itself.
     */
    public L3NetworkInner withInterfaceName(String interfaceName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new L3NetworkProperties();
        }
        this.innerProperties().withInterfaceName(interfaceName);
        return this;
    }

    /**
     * Get the ipAllocationType property: The type of the IP address allocation, defaulted to "DualStack".
     * 
     * @return the ipAllocationType value.
     */
    public IpAllocationType ipAllocationType() {
        return this.innerProperties() == null ? null : this.innerProperties().ipAllocationType();
    }

    /**
     * Set the ipAllocationType property: The type of the IP address allocation, defaulted to "DualStack".
     * 
     * @param ipAllocationType the ipAllocationType value to set.
     * @return the L3NetworkInner object itself.
     */
    public L3NetworkInner withIpAllocationType(IpAllocationType ipAllocationType) {
        if (this.innerProperties() == null) {
            this.innerProperties = new L3NetworkProperties();
        }
        this.innerProperties().withIpAllocationType(ipAllocationType);
        return this;
    }

    /**
     * Get the ipv4ConnectedPrefix property: The IPV4 prefix (CIDR) assigned to this L3 network. Required when the IP
     * allocation type
     * is IPV4 or DualStack.
     * 
     * @return the ipv4ConnectedPrefix value.
     */
    public String ipv4ConnectedPrefix() {
        return this.innerProperties() == null ? null : this.innerProperties().ipv4ConnectedPrefix();
    }

    /**
     * Set the ipv4ConnectedPrefix property: The IPV4 prefix (CIDR) assigned to this L3 network. Required when the IP
     * allocation type
     * is IPV4 or DualStack.
     * 
     * @param ipv4ConnectedPrefix the ipv4ConnectedPrefix value to set.
     * @return the L3NetworkInner object itself.
     */
    public L3NetworkInner withIpv4ConnectedPrefix(String ipv4ConnectedPrefix) {
        if (this.innerProperties() == null) {
            this.innerProperties = new L3NetworkProperties();
        }
        this.innerProperties().withIpv4ConnectedPrefix(ipv4ConnectedPrefix);
        return this;
    }

    /**
     * Get the ipv6ConnectedPrefix property: The IPV6 prefix (CIDR) assigned to this L3 network. Required when the IP
     * allocation type
     * is IPV6 or DualStack.
     * 
     * @return the ipv6ConnectedPrefix value.
     */
    public String ipv6ConnectedPrefix() {
        return this.innerProperties() == null ? null : this.innerProperties().ipv6ConnectedPrefix();
    }

    /**
     * Set the ipv6ConnectedPrefix property: The IPV6 prefix (CIDR) assigned to this L3 network. Required when the IP
     * allocation type
     * is IPV6 or DualStack.
     * 
     * @param ipv6ConnectedPrefix the ipv6ConnectedPrefix value to set.
     * @return the L3NetworkInner object itself.
     */
    public L3NetworkInner withIpv6ConnectedPrefix(String ipv6ConnectedPrefix) {
        if (this.innerProperties() == null) {
            this.innerProperties = new L3NetworkProperties();
        }
        this.innerProperties().withIpv6ConnectedPrefix(ipv6ConnectedPrefix);
        return this;
    }

    /**
     * Get the l3IsolationDomainId property: The resource ID of the Network Fabric l3IsolationDomain.
     * 
     * @return the l3IsolationDomainId value.
     */
    public String l3IsolationDomainId() {
        return this.innerProperties() == null ? null : this.innerProperties().l3IsolationDomainId();
    }

    /**
     * Set the l3IsolationDomainId property: The resource ID of the Network Fabric l3IsolationDomain.
     * 
     * @param l3IsolationDomainId the l3IsolationDomainId value to set.
     * @return the L3NetworkInner object itself.
     */
    public L3NetworkInner withL3IsolationDomainId(String l3IsolationDomainId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new L3NetworkProperties();
        }
        this.innerProperties().withL3IsolationDomainId(l3IsolationDomainId);
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state of the L3 network.
     * 
     * @return the provisioningState value.
     */
    public L3NetworkProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the virtualMachinesAssociatedIds property: Field Deprecated. These fields will be empty/omitted. The list of
     * virtual machine resource IDs, excluding any Hybrid AKS virtual machines, that are currently using this L3
     * network.
     * 
     * @return the virtualMachinesAssociatedIds value.
     */
    public List<String> virtualMachinesAssociatedIds() {
        return this.innerProperties() == null ? null : this.innerProperties().virtualMachinesAssociatedIds();
    }

    /**
     * Get the vlan property: The VLAN from the l3IsolationDomain that is used for this network.
     * 
     * @return the vlan value.
     */
    public long vlan() {
        return this.innerProperties() == null ? 0L : this.innerProperties().vlan();
    }

    /**
     * Set the vlan property: The VLAN from the l3IsolationDomain that is used for this network.
     * 
     * @param vlan the vlan value to set.
     * @return the L3NetworkInner object itself.
     */
    public L3NetworkInner withVlan(long vlan) {
        if (this.innerProperties() == null) {
            this.innerProperties = new L3NetworkProperties();
        }
        this.innerProperties().withVlan(vlan);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (extendedLocation() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property extendedLocation in model L3NetworkInner"));
        } else {
            extendedLocation().validate();
        }
        if (innerProperties() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property innerProperties in model L3NetworkInner"));
        } else {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(L3NetworkInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("location", location());
        jsonWriter.writeMapField("tags", tags(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("extendedLocation", this.extendedLocation);
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of L3NetworkInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of L3NetworkInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the L3NetworkInner.
     */
    public static L3NetworkInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            L3NetworkInner deserializedL3NetworkInner = new L3NetworkInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedL3NetworkInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedL3NetworkInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedL3NetworkInner.type = reader.getString();
                } else if ("location".equals(fieldName)) {
                    deserializedL3NetworkInner.withLocation(reader.getString());
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedL3NetworkInner.withTags(tags);
                } else if ("extendedLocation".equals(fieldName)) {
                    deserializedL3NetworkInner.extendedLocation = ExtendedLocation.fromJson(reader);
                } else if ("properties".equals(fieldName)) {
                    deserializedL3NetworkInner.innerProperties = L3NetworkProperties.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedL3NetworkInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedL3NetworkInner;
        });
    }
}
