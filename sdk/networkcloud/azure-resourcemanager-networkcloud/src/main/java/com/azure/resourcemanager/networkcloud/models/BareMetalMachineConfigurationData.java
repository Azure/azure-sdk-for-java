// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * BareMetalMachineConfigurationData represents configuration for the bare metal machine.
 */
@Fluent
public final class BareMetalMachineConfigurationData implements JsonSerializable<BareMetalMachineConfigurationData> {
    /*
     * The connection string for the baseboard management controller including IP address and protocol.
     */
    private String bmcConnectionString;

    /*
     * The credentials of the baseboard management controller on this bare metal machine.
     */
    private AdministrativeCredentials bmcCredentials;

    /*
     * The MAC address of the BMC for this machine.
     */
    private String bmcMacAddress;

    /*
     * The MAC address associated with the PXE NIC card.
     */
    private String bootMacAddress;

    /*
     * The free-form additional information about the machine, e.g. an asset tag.
     */
    private String machineDetails;

    /*
     * The user-provided name for the bare metal machine created from this specification.
     * If not provided, the machine name will be generated programmatically.
     */
    private String machineName;

    /*
     * The slot the physical machine is in the rack based on the BOM configuration.
     */
    private long rackSlot;

    /*
     * The serial number of the machine. Hardware suppliers may use an alternate value. For example, service tag.
     */
    private String serialNumber;

    /**
     * Creates an instance of BareMetalMachineConfigurationData class.
     */
    public BareMetalMachineConfigurationData() {
    }

    /**
     * Get the bmcConnectionString property: The connection string for the baseboard management controller including IP
     * address and protocol.
     * 
     * @return the bmcConnectionString value.
     */
    public String bmcConnectionString() {
        return this.bmcConnectionString;
    }

    /**
     * Get the bmcCredentials property: The credentials of the baseboard management controller on this bare metal
     * machine.
     * 
     * @return the bmcCredentials value.
     */
    public AdministrativeCredentials bmcCredentials() {
        return this.bmcCredentials;
    }

    /**
     * Set the bmcCredentials property: The credentials of the baseboard management controller on this bare metal
     * machine.
     * 
     * @param bmcCredentials the bmcCredentials value to set.
     * @return the BareMetalMachineConfigurationData object itself.
     */
    public BareMetalMachineConfigurationData withBmcCredentials(AdministrativeCredentials bmcCredentials) {
        this.bmcCredentials = bmcCredentials;
        return this;
    }

    /**
     * Get the bmcMacAddress property: The MAC address of the BMC for this machine.
     * 
     * @return the bmcMacAddress value.
     */
    public String bmcMacAddress() {
        return this.bmcMacAddress;
    }

    /**
     * Set the bmcMacAddress property: The MAC address of the BMC for this machine.
     * 
     * @param bmcMacAddress the bmcMacAddress value to set.
     * @return the BareMetalMachineConfigurationData object itself.
     */
    public BareMetalMachineConfigurationData withBmcMacAddress(String bmcMacAddress) {
        this.bmcMacAddress = bmcMacAddress;
        return this;
    }

    /**
     * Get the bootMacAddress property: The MAC address associated with the PXE NIC card.
     * 
     * @return the bootMacAddress value.
     */
    public String bootMacAddress() {
        return this.bootMacAddress;
    }

    /**
     * Set the bootMacAddress property: The MAC address associated with the PXE NIC card.
     * 
     * @param bootMacAddress the bootMacAddress value to set.
     * @return the BareMetalMachineConfigurationData object itself.
     */
    public BareMetalMachineConfigurationData withBootMacAddress(String bootMacAddress) {
        this.bootMacAddress = bootMacAddress;
        return this;
    }

    /**
     * Get the machineDetails property: The free-form additional information about the machine, e.g. an asset tag.
     * 
     * @return the machineDetails value.
     */
    public String machineDetails() {
        return this.machineDetails;
    }

    /**
     * Set the machineDetails property: The free-form additional information about the machine, e.g. an asset tag.
     * 
     * @param machineDetails the machineDetails value to set.
     * @return the BareMetalMachineConfigurationData object itself.
     */
    public BareMetalMachineConfigurationData withMachineDetails(String machineDetails) {
        this.machineDetails = machineDetails;
        return this;
    }

    /**
     * Get the machineName property: The user-provided name for the bare metal machine created from this specification.
     * If not provided, the machine name will be generated programmatically.
     * 
     * @return the machineName value.
     */
    public String machineName() {
        return this.machineName;
    }

    /**
     * Set the machineName property: The user-provided name for the bare metal machine created from this specification.
     * If not provided, the machine name will be generated programmatically.
     * 
     * @param machineName the machineName value to set.
     * @return the BareMetalMachineConfigurationData object itself.
     */
    public BareMetalMachineConfigurationData withMachineName(String machineName) {
        this.machineName = machineName;
        return this;
    }

    /**
     * Get the rackSlot property: The slot the physical machine is in the rack based on the BOM configuration.
     * 
     * @return the rackSlot value.
     */
    public long rackSlot() {
        return this.rackSlot;
    }

    /**
     * Set the rackSlot property: The slot the physical machine is in the rack based on the BOM configuration.
     * 
     * @param rackSlot the rackSlot value to set.
     * @return the BareMetalMachineConfigurationData object itself.
     */
    public BareMetalMachineConfigurationData withRackSlot(long rackSlot) {
        this.rackSlot = rackSlot;
        return this;
    }

    /**
     * Get the serialNumber property: The serial number of the machine. Hardware suppliers may use an alternate value.
     * For example, service tag.
     * 
     * @return the serialNumber value.
     */
    public String serialNumber() {
        return this.serialNumber;
    }

    /**
     * Set the serialNumber property: The serial number of the machine. Hardware suppliers may use an alternate value.
     * For example, service tag.
     * 
     * @param serialNumber the serialNumber value to set.
     * @return the BareMetalMachineConfigurationData object itself.
     */
    public BareMetalMachineConfigurationData withSerialNumber(String serialNumber) {
        this.serialNumber = serialNumber;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (bmcCredentials() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property bmcCredentials in model BareMetalMachineConfigurationData"));
        } else {
            bmcCredentials().validate();
        }
        if (bmcMacAddress() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property bmcMacAddress in model BareMetalMachineConfigurationData"));
        }
        if (bootMacAddress() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property bootMacAddress in model BareMetalMachineConfigurationData"));
        }
        if (serialNumber() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property serialNumber in model BareMetalMachineConfigurationData"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(BareMetalMachineConfigurationData.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("bmcCredentials", this.bmcCredentials);
        jsonWriter.writeStringField("bmcMacAddress", this.bmcMacAddress);
        jsonWriter.writeStringField("bootMacAddress", this.bootMacAddress);
        jsonWriter.writeLongField("rackSlot", this.rackSlot);
        jsonWriter.writeStringField("serialNumber", this.serialNumber);
        jsonWriter.writeStringField("machineDetails", this.machineDetails);
        jsonWriter.writeStringField("machineName", this.machineName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BareMetalMachineConfigurationData from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BareMetalMachineConfigurationData if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the BareMetalMachineConfigurationData.
     */
    public static BareMetalMachineConfigurationData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BareMetalMachineConfigurationData deserializedBareMetalMachineConfigurationData
                = new BareMetalMachineConfigurationData();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("bmcCredentials".equals(fieldName)) {
                    deserializedBareMetalMachineConfigurationData.bmcCredentials
                        = AdministrativeCredentials.fromJson(reader);
                } else if ("bmcMacAddress".equals(fieldName)) {
                    deserializedBareMetalMachineConfigurationData.bmcMacAddress = reader.getString();
                } else if ("bootMacAddress".equals(fieldName)) {
                    deserializedBareMetalMachineConfigurationData.bootMacAddress = reader.getString();
                } else if ("rackSlot".equals(fieldName)) {
                    deserializedBareMetalMachineConfigurationData.rackSlot = reader.getLong();
                } else if ("serialNumber".equals(fieldName)) {
                    deserializedBareMetalMachineConfigurationData.serialNumber = reader.getString();
                } else if ("bmcConnectionString".equals(fieldName)) {
                    deserializedBareMetalMachineConfigurationData.bmcConnectionString = reader.getString();
                } else if ("machineDetails".equals(fieldName)) {
                    deserializedBareMetalMachineConfigurationData.machineDetails = reader.getString();
                } else if ("machineName".equals(fieldName)) {
                    deserializedBareMetalMachineConfigurationData.machineName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBareMetalMachineConfigurationData;
        });
    }
}
