// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.networkcloud.models.AdministrativeCredentials;
import com.azure.resourcemanager.networkcloud.models.RemoteVendorManagementFeature;
import com.azure.resourcemanager.networkcloud.models.RemoteVendorManagementStatus;
import com.azure.resourcemanager.networkcloud.models.SecretRotationStatus;
import com.azure.resourcemanager.networkcloud.models.StorageApplianceDetailedStatus;
import com.azure.resourcemanager.networkcloud.models.StorageApplianceProvisioningState;
import java.io.IOException;
import java.util.List;

/**
 * StorageApplianceProperties represents the properties of the storage appliance.
 */
@Fluent
public final class StorageApplianceProperties implements JsonSerializable<StorageApplianceProperties> {
    /*
     * The credentials of the administrative interface on this storage appliance.
     */
    private AdministrativeCredentials administratorCredentials;

    /*
     * The total capacity of the storage appliance.
     */
    private Long capacity;

    /*
     * The amount of storage consumed.
     */
    private Long capacityUsed;

    /*
     * The resource ID of the cluster this storage appliance is associated with.
     */
    private String clusterId;

    /*
     * The detailed status of the storage appliance.
     */
    private StorageApplianceDetailedStatus detailedStatus;

    /*
     * The descriptive message about the current detailed status.
     */
    private String detailedStatusMessage;

    /*
     * The endpoint for the management interface of the storage appliance.
     */
    private String managementIpv4Address;

    /*
     * The manufacturer of the storage appliance.
     */
    private String manufacturer;

    /*
     * The model of the storage appliance.
     */
    private String model;

    /*
     * The provisioning state of the storage appliance.
     */
    private StorageApplianceProvisioningState provisioningState;

    /*
     * The resource ID of the rack where this storage appliance resides.
     */
    private String rackId;

    /*
     * The slot the storage appliance is in the rack based on the BOM configuration.
     */
    private long rackSlot;

    /*
     * The indicator of whether the storage appliance supports remote vendor management.
     */
    private RemoteVendorManagementFeature remoteVendorManagementFeature;

    /*
     * The indicator of whether the remote vendor management feature is enabled or disabled, or unsupported if it is an
     * unsupported feature.
     */
    private RemoteVendorManagementStatus remoteVendorManagementStatus;

    /*
     * The list of statuses that represent secret rotation activity.
     */
    private List<SecretRotationStatus> secretRotationStatus;

    /*
     * The serial number for the storage appliance.
     */
    private String serialNumber;

    /*
     * The SKU for the storage appliance.
     */
    private String storageApplianceSkuId;

    /*
     * The version of the storage appliance.
     */
    private String version;

    /**
     * Creates an instance of StorageApplianceProperties class.
     */
    public StorageApplianceProperties() {
    }

    /**
     * Get the administratorCredentials property: The credentials of the administrative interface on this storage
     * appliance.
     * 
     * @return the administratorCredentials value.
     */
    public AdministrativeCredentials administratorCredentials() {
        return this.administratorCredentials;
    }

    /**
     * Set the administratorCredentials property: The credentials of the administrative interface on this storage
     * appliance.
     * 
     * @param administratorCredentials the administratorCredentials value to set.
     * @return the StorageApplianceProperties object itself.
     */
    public StorageApplianceProperties withAdministratorCredentials(AdministrativeCredentials administratorCredentials) {
        this.administratorCredentials = administratorCredentials;
        return this;
    }

    /**
     * Get the capacity property: The total capacity of the storage appliance.
     * 
     * @return the capacity value.
     */
    public Long capacity() {
        return this.capacity;
    }

    /**
     * Get the capacityUsed property: The amount of storage consumed.
     * 
     * @return the capacityUsed value.
     */
    public Long capacityUsed() {
        return this.capacityUsed;
    }

    /**
     * Get the clusterId property: The resource ID of the cluster this storage appliance is associated with.
     * 
     * @return the clusterId value.
     */
    public String clusterId() {
        return this.clusterId;
    }

    /**
     * Get the detailedStatus property: The detailed status of the storage appliance.
     * 
     * @return the detailedStatus value.
     */
    public StorageApplianceDetailedStatus detailedStatus() {
        return this.detailedStatus;
    }

    /**
     * Get the detailedStatusMessage property: The descriptive message about the current detailed status.
     * 
     * @return the detailedStatusMessage value.
     */
    public String detailedStatusMessage() {
        return this.detailedStatusMessage;
    }

    /**
     * Get the managementIpv4Address property: The endpoint for the management interface of the storage appliance.
     * 
     * @return the managementIpv4Address value.
     */
    public String managementIpv4Address() {
        return this.managementIpv4Address;
    }

    /**
     * Get the manufacturer property: The manufacturer of the storage appliance.
     * 
     * @return the manufacturer value.
     */
    public String manufacturer() {
        return this.manufacturer;
    }

    /**
     * Get the model property: The model of the storage appliance.
     * 
     * @return the model value.
     */
    public String model() {
        return this.model;
    }

    /**
     * Get the provisioningState property: The provisioning state of the storage appliance.
     * 
     * @return the provisioningState value.
     */
    public StorageApplianceProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the rackId property: The resource ID of the rack where this storage appliance resides.
     * 
     * @return the rackId value.
     */
    public String rackId() {
        return this.rackId;
    }

    /**
     * Set the rackId property: The resource ID of the rack where this storage appliance resides.
     * 
     * @param rackId the rackId value to set.
     * @return the StorageApplianceProperties object itself.
     */
    public StorageApplianceProperties withRackId(String rackId) {
        this.rackId = rackId;
        return this;
    }

    /**
     * Get the rackSlot property: The slot the storage appliance is in the rack based on the BOM configuration.
     * 
     * @return the rackSlot value.
     */
    public long rackSlot() {
        return this.rackSlot;
    }

    /**
     * Set the rackSlot property: The slot the storage appliance is in the rack based on the BOM configuration.
     * 
     * @param rackSlot the rackSlot value to set.
     * @return the StorageApplianceProperties object itself.
     */
    public StorageApplianceProperties withRackSlot(long rackSlot) {
        this.rackSlot = rackSlot;
        return this;
    }

    /**
     * Get the remoteVendorManagementFeature property: The indicator of whether the storage appliance supports remote
     * vendor management.
     * 
     * @return the remoteVendorManagementFeature value.
     */
    public RemoteVendorManagementFeature remoteVendorManagementFeature() {
        return this.remoteVendorManagementFeature;
    }

    /**
     * Get the remoteVendorManagementStatus property: The indicator of whether the remote vendor management feature is
     * enabled or disabled, or unsupported if it is an unsupported feature.
     * 
     * @return the remoteVendorManagementStatus value.
     */
    public RemoteVendorManagementStatus remoteVendorManagementStatus() {
        return this.remoteVendorManagementStatus;
    }

    /**
     * Get the secretRotationStatus property: The list of statuses that represent secret rotation activity.
     * 
     * @return the secretRotationStatus value.
     */
    public List<SecretRotationStatus> secretRotationStatus() {
        return this.secretRotationStatus;
    }

    /**
     * Get the serialNumber property: The serial number for the storage appliance.
     * 
     * @return the serialNumber value.
     */
    public String serialNumber() {
        return this.serialNumber;
    }

    /**
     * Set the serialNumber property: The serial number for the storage appliance.
     * 
     * @param serialNumber the serialNumber value to set.
     * @return the StorageApplianceProperties object itself.
     */
    public StorageApplianceProperties withSerialNumber(String serialNumber) {
        this.serialNumber = serialNumber;
        return this;
    }

    /**
     * Get the storageApplianceSkuId property: The SKU for the storage appliance.
     * 
     * @return the storageApplianceSkuId value.
     */
    public String storageApplianceSkuId() {
        return this.storageApplianceSkuId;
    }

    /**
     * Set the storageApplianceSkuId property: The SKU for the storage appliance.
     * 
     * @param storageApplianceSkuId the storageApplianceSkuId value to set.
     * @return the StorageApplianceProperties object itself.
     */
    public StorageApplianceProperties withStorageApplianceSkuId(String storageApplianceSkuId) {
        this.storageApplianceSkuId = storageApplianceSkuId;
        return this;
    }

    /**
     * Get the version property: The version of the storage appliance.
     * 
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (administratorCredentials() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property administratorCredentials in model StorageApplianceProperties"));
        } else {
            administratorCredentials().validate();
        }
        if (rackId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property rackId in model StorageApplianceProperties"));
        }
        if (secretRotationStatus() != null) {
            secretRotationStatus().forEach(e -> e.validate());
        }
        if (serialNumber() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property serialNumber in model StorageApplianceProperties"));
        }
        if (storageApplianceSkuId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property storageApplianceSkuId in model StorageApplianceProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(StorageApplianceProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("administratorCredentials", this.administratorCredentials);
        jsonWriter.writeStringField("rackId", this.rackId);
        jsonWriter.writeLongField("rackSlot", this.rackSlot);
        jsonWriter.writeStringField("serialNumber", this.serialNumber);
        jsonWriter.writeStringField("storageApplianceSkuId", this.storageApplianceSkuId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StorageApplianceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StorageApplianceProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the StorageApplianceProperties.
     */
    public static StorageApplianceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StorageApplianceProperties deserializedStorageApplianceProperties = new StorageApplianceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("administratorCredentials".equals(fieldName)) {
                    deserializedStorageApplianceProperties.administratorCredentials
                        = AdministrativeCredentials.fromJson(reader);
                } else if ("rackId".equals(fieldName)) {
                    deserializedStorageApplianceProperties.rackId = reader.getString();
                } else if ("rackSlot".equals(fieldName)) {
                    deserializedStorageApplianceProperties.rackSlot = reader.getLong();
                } else if ("serialNumber".equals(fieldName)) {
                    deserializedStorageApplianceProperties.serialNumber = reader.getString();
                } else if ("storageApplianceSkuId".equals(fieldName)) {
                    deserializedStorageApplianceProperties.storageApplianceSkuId = reader.getString();
                } else if ("capacity".equals(fieldName)) {
                    deserializedStorageApplianceProperties.capacity = reader.getNullable(JsonReader::getLong);
                } else if ("capacityUsed".equals(fieldName)) {
                    deserializedStorageApplianceProperties.capacityUsed = reader.getNullable(JsonReader::getLong);
                } else if ("clusterId".equals(fieldName)) {
                    deserializedStorageApplianceProperties.clusterId = reader.getString();
                } else if ("detailedStatus".equals(fieldName)) {
                    deserializedStorageApplianceProperties.detailedStatus
                        = StorageApplianceDetailedStatus.fromString(reader.getString());
                } else if ("detailedStatusMessage".equals(fieldName)) {
                    deserializedStorageApplianceProperties.detailedStatusMessage = reader.getString();
                } else if ("managementIpv4Address".equals(fieldName)) {
                    deserializedStorageApplianceProperties.managementIpv4Address = reader.getString();
                } else if ("manufacturer".equals(fieldName)) {
                    deserializedStorageApplianceProperties.manufacturer = reader.getString();
                } else if ("model".equals(fieldName)) {
                    deserializedStorageApplianceProperties.model = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedStorageApplianceProperties.provisioningState
                        = StorageApplianceProvisioningState.fromString(reader.getString());
                } else if ("remoteVendorManagementFeature".equals(fieldName)) {
                    deserializedStorageApplianceProperties.remoteVendorManagementFeature
                        = RemoteVendorManagementFeature.fromString(reader.getString());
                } else if ("remoteVendorManagementStatus".equals(fieldName)) {
                    deserializedStorageApplianceProperties.remoteVendorManagementStatus
                        = RemoteVendorManagementStatus.fromString(reader.getString());
                } else if ("secretRotationStatus".equals(fieldName)) {
                    List<SecretRotationStatus> secretRotationStatus
                        = reader.readArray(reader1 -> SecretRotationStatus.fromJson(reader1));
                    deserializedStorageApplianceProperties.secretRotationStatus = secretRotationStatus;
                } else if ("version".equals(fieldName)) {
                    deserializedStorageApplianceProperties.version = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStorageApplianceProperties;
        });
    }
}
