// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.networkcloud.models.AdministratorConfiguration;
import com.azure.resourcemanager.networkcloud.models.AgentOptions;
import com.azure.resourcemanager.networkcloud.models.AgentPoolDetailedStatus;
import com.azure.resourcemanager.networkcloud.models.AgentPoolMode;
import com.azure.resourcemanager.networkcloud.models.AgentPoolProvisioningState;
import com.azure.resourcemanager.networkcloud.models.AgentPoolUpgradeSettings;
import com.azure.resourcemanager.networkcloud.models.AttachedNetworkConfiguration;
import com.azure.resourcemanager.networkcloud.models.KubernetesLabel;
import java.io.IOException;
import java.util.List;

/**
 * AgentPoolProperties represents the properties of the Kubernetes cluster agent pool.
 */
@Fluent
public final class AgentPoolProperties implements JsonSerializable<AgentPoolProperties> {
    /*
     * The administrator credentials to be used for the nodes in this agent pool.
     */
    private AdministratorConfiguration administratorConfiguration;

    /*
     * The configurations that will be applied to each agent in this agent pool.
     */
    private AgentOptions agentOptions;

    /*
     * The configuration of networks being attached to the agent pool for use by the workloads that run on this
     * Kubernetes cluster.
     */
    private AttachedNetworkConfiguration attachedNetworkConfiguration;

    /*
     * The list of availability zones of the Network Cloud cluster used for the provisioning of nodes in this agent
     * pool. If not specified, all availability zones will be used.
     */
    private List<String> availabilityZones;

    /*
     * The number of virtual machines that use this configuration.
     */
    private long count;

    /*
     * The current status of the agent pool.
     */
    private AgentPoolDetailedStatus detailedStatus;

    /*
     * The descriptive message about the current detailed status.
     */
    private String detailedStatusMessage;

    /*
     * The Kubernetes version running in this agent pool.
     */
    private String kubernetesVersion;

    /*
     * The labels applied to the nodes in this agent pool.
     */
    private List<KubernetesLabel> labels;

    /*
     * The selection of how this agent pool is utilized, either as a system pool or a user pool. System pools run the
     * features and critical services for the Kubernetes Cluster, while user pools are dedicated to user workloads.
     * Every Kubernetes cluster must contain at least one system node pool with at least one node.
     */
    private AgentPoolMode mode;

    /*
     * The provisioning state of the agent pool.
     */
    private AgentPoolProvisioningState provisioningState;

    /*
     * The taints applied to the nodes in this agent pool.
     */
    private List<KubernetesLabel> taints;

    /*
     * The configuration of the agent pool.
     */
    private AgentPoolUpgradeSettings upgradeSettings;

    /*
     * The name of the VM SKU that determines the size of resources allocated for node VMs.
     */
    private String vmSkuName;

    /**
     * Creates an instance of AgentPoolProperties class.
     */
    public AgentPoolProperties() {
    }

    /**
     * Get the administratorConfiguration property: The administrator credentials to be used for the nodes in this agent
     * pool.
     * 
     * @return the administratorConfiguration value.
     */
    public AdministratorConfiguration administratorConfiguration() {
        return this.administratorConfiguration;
    }

    /**
     * Set the administratorConfiguration property: The administrator credentials to be used for the nodes in this agent
     * pool.
     * 
     * @param administratorConfiguration the administratorConfiguration value to set.
     * @return the AgentPoolProperties object itself.
     */
    public AgentPoolProperties withAdministratorConfiguration(AdministratorConfiguration administratorConfiguration) {
        this.administratorConfiguration = administratorConfiguration;
        return this;
    }

    /**
     * Get the agentOptions property: The configurations that will be applied to each agent in this agent pool.
     * 
     * @return the agentOptions value.
     */
    public AgentOptions agentOptions() {
        return this.agentOptions;
    }

    /**
     * Set the agentOptions property: The configurations that will be applied to each agent in this agent pool.
     * 
     * @param agentOptions the agentOptions value to set.
     * @return the AgentPoolProperties object itself.
     */
    public AgentPoolProperties withAgentOptions(AgentOptions agentOptions) {
        this.agentOptions = agentOptions;
        return this;
    }

    /**
     * Get the attachedNetworkConfiguration property: The configuration of networks being attached to the agent pool for
     * use by the workloads that run on this Kubernetes cluster.
     * 
     * @return the attachedNetworkConfiguration value.
     */
    public AttachedNetworkConfiguration attachedNetworkConfiguration() {
        return this.attachedNetworkConfiguration;
    }

    /**
     * Set the attachedNetworkConfiguration property: The configuration of networks being attached to the agent pool for
     * use by the workloads that run on this Kubernetes cluster.
     * 
     * @param attachedNetworkConfiguration the attachedNetworkConfiguration value to set.
     * @return the AgentPoolProperties object itself.
     */
    public AgentPoolProperties
        withAttachedNetworkConfiguration(AttachedNetworkConfiguration attachedNetworkConfiguration) {
        this.attachedNetworkConfiguration = attachedNetworkConfiguration;
        return this;
    }

    /**
     * Get the availabilityZones property: The list of availability zones of the Network Cloud cluster used for the
     * provisioning of nodes in this agent pool. If not specified, all availability zones will be used.
     * 
     * @return the availabilityZones value.
     */
    public List<String> availabilityZones() {
        return this.availabilityZones;
    }

    /**
     * Set the availabilityZones property: The list of availability zones of the Network Cloud cluster used for the
     * provisioning of nodes in this agent pool. If not specified, all availability zones will be used.
     * 
     * @param availabilityZones the availabilityZones value to set.
     * @return the AgentPoolProperties object itself.
     */
    public AgentPoolProperties withAvailabilityZones(List<String> availabilityZones) {
        this.availabilityZones = availabilityZones;
        return this;
    }

    /**
     * Get the count property: The number of virtual machines that use this configuration.
     * 
     * @return the count value.
     */
    public long count() {
        return this.count;
    }

    /**
     * Set the count property: The number of virtual machines that use this configuration.
     * 
     * @param count the count value to set.
     * @return the AgentPoolProperties object itself.
     */
    public AgentPoolProperties withCount(long count) {
        this.count = count;
        return this;
    }

    /**
     * Get the detailedStatus property: The current status of the agent pool.
     * 
     * @return the detailedStatus value.
     */
    public AgentPoolDetailedStatus detailedStatus() {
        return this.detailedStatus;
    }

    /**
     * Get the detailedStatusMessage property: The descriptive message about the current detailed status.
     * 
     * @return the detailedStatusMessage value.
     */
    public String detailedStatusMessage() {
        return this.detailedStatusMessage;
    }

    /**
     * Get the kubernetesVersion property: The Kubernetes version running in this agent pool.
     * 
     * @return the kubernetesVersion value.
     */
    public String kubernetesVersion() {
        return this.kubernetesVersion;
    }

    /**
     * Get the labels property: The labels applied to the nodes in this agent pool.
     * 
     * @return the labels value.
     */
    public List<KubernetesLabel> labels() {
        return this.labels;
    }

    /**
     * Set the labels property: The labels applied to the nodes in this agent pool.
     * 
     * @param labels the labels value to set.
     * @return the AgentPoolProperties object itself.
     */
    public AgentPoolProperties withLabels(List<KubernetesLabel> labels) {
        this.labels = labels;
        return this;
    }

    /**
     * Get the mode property: The selection of how this agent pool is utilized, either as a system pool or a user pool.
     * System pools run the features and critical services for the Kubernetes Cluster, while user pools are dedicated to
     * user workloads. Every Kubernetes cluster must contain at least one system node pool with at least one node.
     * 
     * @return the mode value.
     */
    public AgentPoolMode mode() {
        return this.mode;
    }

    /**
     * Set the mode property: The selection of how this agent pool is utilized, either as a system pool or a user pool.
     * System pools run the features and critical services for the Kubernetes Cluster, while user pools are dedicated to
     * user workloads. Every Kubernetes cluster must contain at least one system node pool with at least one node.
     * 
     * @param mode the mode value to set.
     * @return the AgentPoolProperties object itself.
     */
    public AgentPoolProperties withMode(AgentPoolMode mode) {
        this.mode = mode;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state of the agent pool.
     * 
     * @return the provisioningState value.
     */
    public AgentPoolProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the taints property: The taints applied to the nodes in this agent pool.
     * 
     * @return the taints value.
     */
    public List<KubernetesLabel> taints() {
        return this.taints;
    }

    /**
     * Set the taints property: The taints applied to the nodes in this agent pool.
     * 
     * @param taints the taints value to set.
     * @return the AgentPoolProperties object itself.
     */
    public AgentPoolProperties withTaints(List<KubernetesLabel> taints) {
        this.taints = taints;
        return this;
    }

    /**
     * Get the upgradeSettings property: The configuration of the agent pool.
     * 
     * @return the upgradeSettings value.
     */
    public AgentPoolUpgradeSettings upgradeSettings() {
        return this.upgradeSettings;
    }

    /**
     * Set the upgradeSettings property: The configuration of the agent pool.
     * 
     * @param upgradeSettings the upgradeSettings value to set.
     * @return the AgentPoolProperties object itself.
     */
    public AgentPoolProperties withUpgradeSettings(AgentPoolUpgradeSettings upgradeSettings) {
        this.upgradeSettings = upgradeSettings;
        return this;
    }

    /**
     * Get the vmSkuName property: The name of the VM SKU that determines the size of resources allocated for node VMs.
     * 
     * @return the vmSkuName value.
     */
    public String vmSkuName() {
        return this.vmSkuName;
    }

    /**
     * Set the vmSkuName property: The name of the VM SKU that determines the size of resources allocated for node VMs.
     * 
     * @param vmSkuName the vmSkuName value to set.
     * @return the AgentPoolProperties object itself.
     */
    public AgentPoolProperties withVmSkuName(String vmSkuName) {
        this.vmSkuName = vmSkuName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (administratorConfiguration() != null) {
            administratorConfiguration().validate();
        }
        if (agentOptions() != null) {
            agentOptions().validate();
        }
        if (attachedNetworkConfiguration() != null) {
            attachedNetworkConfiguration().validate();
        }
        if (labels() != null) {
            labels().forEach(e -> e.validate());
        }
        if (mode() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property mode in model AgentPoolProperties"));
        }
        if (taints() != null) {
            taints().forEach(e -> e.validate());
        }
        if (upgradeSettings() != null) {
            upgradeSettings().validate();
        }
        if (vmSkuName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property vmSkuName in model AgentPoolProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AgentPoolProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeLongField("count", this.count);
        jsonWriter.writeStringField("mode", this.mode == null ? null : this.mode.toString());
        jsonWriter.writeStringField("vmSkuName", this.vmSkuName);
        jsonWriter.writeJsonField("administratorConfiguration", this.administratorConfiguration);
        jsonWriter.writeJsonField("agentOptions", this.agentOptions);
        jsonWriter.writeJsonField("attachedNetworkConfiguration", this.attachedNetworkConfiguration);
        jsonWriter.writeArrayField("availabilityZones", this.availabilityZones,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("labels", this.labels, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("taints", this.taints, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("upgradeSettings", this.upgradeSettings);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AgentPoolProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AgentPoolProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AgentPoolProperties.
     */
    public static AgentPoolProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AgentPoolProperties deserializedAgentPoolProperties = new AgentPoolProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("count".equals(fieldName)) {
                    deserializedAgentPoolProperties.count = reader.getLong();
                } else if ("mode".equals(fieldName)) {
                    deserializedAgentPoolProperties.mode = AgentPoolMode.fromString(reader.getString());
                } else if ("vmSkuName".equals(fieldName)) {
                    deserializedAgentPoolProperties.vmSkuName = reader.getString();
                } else if ("administratorConfiguration".equals(fieldName)) {
                    deserializedAgentPoolProperties.administratorConfiguration
                        = AdministratorConfiguration.fromJson(reader);
                } else if ("agentOptions".equals(fieldName)) {
                    deserializedAgentPoolProperties.agentOptions = AgentOptions.fromJson(reader);
                } else if ("attachedNetworkConfiguration".equals(fieldName)) {
                    deserializedAgentPoolProperties.attachedNetworkConfiguration
                        = AttachedNetworkConfiguration.fromJson(reader);
                } else if ("availabilityZones".equals(fieldName)) {
                    List<String> availabilityZones = reader.readArray(reader1 -> reader1.getString());
                    deserializedAgentPoolProperties.availabilityZones = availabilityZones;
                } else if ("detailedStatus".equals(fieldName)) {
                    deserializedAgentPoolProperties.detailedStatus
                        = AgentPoolDetailedStatus.fromString(reader.getString());
                } else if ("detailedStatusMessage".equals(fieldName)) {
                    deserializedAgentPoolProperties.detailedStatusMessage = reader.getString();
                } else if ("kubernetesVersion".equals(fieldName)) {
                    deserializedAgentPoolProperties.kubernetesVersion = reader.getString();
                } else if ("labels".equals(fieldName)) {
                    List<KubernetesLabel> labels = reader.readArray(reader1 -> KubernetesLabel.fromJson(reader1));
                    deserializedAgentPoolProperties.labels = labels;
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedAgentPoolProperties.provisioningState
                        = AgentPoolProvisioningState.fromString(reader.getString());
                } else if ("taints".equals(fieldName)) {
                    List<KubernetesLabel> taints = reader.readArray(reader1 -> KubernetesLabel.fromJson(reader1));
                    deserializedAgentPoolProperties.taints = taints;
                } else if ("upgradeSettings".equals(fieldName)) {
                    deserializedAgentPoolProperties.upgradeSettings = AgentPoolUpgradeSettings.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAgentPoolProperties;
        });
    }
}
