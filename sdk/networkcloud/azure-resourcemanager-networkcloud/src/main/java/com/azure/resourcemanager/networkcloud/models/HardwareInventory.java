// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * HardwareInventory represents the hardware configuration of this machine as exposed to the customer, including
 * information acquired from the model/sku information and from the ironic inspector.
 */
@Immutable
public final class HardwareInventory implements JsonSerializable<HardwareInventory> {
    /*
     * Freeform data extracted from the environment about this machine. This information varies depending on the
     * specific hardware and configuration.
     */
    private String additionalHostInformation;

    /*
     * The list of network interfaces and associated details for the bare metal machine.
     */
    private List<HardwareInventoryNetworkInterface> interfaces;

    /*
     * Field Deprecated. Will be removed in an upcoming version. The list of network interface cards and associated
     * details for the bare metal machine.
     */
    private List<Nic> nics;

    /**
     * Creates an instance of HardwareInventory class.
     */
    public HardwareInventory() {
    }

    /**
     * Get the additionalHostInformation property: Freeform data extracted from the environment about this machine. This
     * information varies depending on the specific hardware and configuration.
     * 
     * @return the additionalHostInformation value.
     */
    public String additionalHostInformation() {
        return this.additionalHostInformation;
    }

    /**
     * Get the interfaces property: The list of network interfaces and associated details for the bare metal machine.
     * 
     * @return the interfaces value.
     */
    public List<HardwareInventoryNetworkInterface> interfaces() {
        return this.interfaces;
    }

    /**
     * Get the nics property: Field Deprecated. Will be removed in an upcoming version. The list of network interface
     * cards and associated details for the bare metal machine.
     * 
     * @return the nics value.
     */
    public List<Nic> nics() {
        return this.nics;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (interfaces() != null) {
            interfaces().forEach(e -> e.validate());
        }
        if (nics() != null) {
            nics().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of HardwareInventory from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of HardwareInventory if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the HardwareInventory.
     */
    public static HardwareInventory fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            HardwareInventory deserializedHardwareInventory = new HardwareInventory();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("additionalHostInformation".equals(fieldName)) {
                    deserializedHardwareInventory.additionalHostInformation = reader.getString();
                } else if ("interfaces".equals(fieldName)) {
                    List<HardwareInventoryNetworkInterface> interfaces
                        = reader.readArray(reader1 -> HardwareInventoryNetworkInterface.fromJson(reader1));
                    deserializedHardwareInventory.interfaces = interfaces;
                } else if ("nics".equals(fieldName)) {
                    List<Nic> nics = reader.readArray(reader1 -> Nic.fromJson(reader1));
                    deserializedHardwareInventory.nics = nics;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedHardwareInventory;
        });
    }
}
