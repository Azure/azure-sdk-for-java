// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.networkcloud.models.BgpPeer;
import com.azure.resourcemanager.networkcloud.models.CniBgpConfiguration;
import com.azure.resourcemanager.networkcloud.models.DefaultCniNetworkDetailedStatus;
import com.azure.resourcemanager.networkcloud.models.DefaultCniNetworkProvisioningState;
import com.azure.resourcemanager.networkcloud.models.ExtendedLocation;
import com.azure.resourcemanager.networkcloud.models.IpAllocationType;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/**
 * DefaultCniNetwork represents the user-managed portions of the default CNI (pod) network that is created in support of
 * a Hybrid AKS Cluster.
 */
@Fluent
public final class DefaultCniNetworkInner extends Resource {
    /*
     * ExtendedLocation represents the Azure custom location where the resource will be created.
     *
     * The extended location of the cluster associated with the resource.
     */
    @JsonProperty(value = "extendedLocation", required = true)
    private ExtendedLocation extendedLocation;

    /*
     * DefaultCniNetworkProperties represents properties of the default CNI network.
     *
     * The list of the resource properties.
     */
    @JsonProperty(value = "properties", required = true)
    private DefaultCniNetworkProperties innerProperties = new DefaultCniNetworkProperties();

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /** Creates an instance of DefaultCniNetworkInner class. */
    public DefaultCniNetworkInner() {
    }

    /**
     * Get the extendedLocation property: ExtendedLocation represents the Azure custom location where the resource will
     * be created.
     *
     * <p>The extended location of the cluster associated with the resource.
     *
     * @return the extendedLocation value.
     */
    public ExtendedLocation extendedLocation() {
        return this.extendedLocation;
    }

    /**
     * Set the extendedLocation property: ExtendedLocation represents the Azure custom location where the resource will
     * be created.
     *
     * <p>The extended location of the cluster associated with the resource.
     *
     * @param extendedLocation the extendedLocation value to set.
     * @return the DefaultCniNetworkInner object itself.
     */
    public DefaultCniNetworkInner withExtendedLocation(ExtendedLocation extendedLocation) {
        this.extendedLocation = extendedLocation;
        return this;
    }

    /**
     * Get the innerProperties property: DefaultCniNetworkProperties represents properties of the default CNI network.
     *
     * <p>The list of the resource properties.
     *
     * @return the innerProperties value.
     */
    private DefaultCniNetworkProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     *
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /** {@inheritDoc} */
    @Override
    public DefaultCniNetworkInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public DefaultCniNetworkInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the clusterId property: The resource ID of the Network Cloud cluster this default CNI network is associated
     * with.
     *
     * @return the clusterId value.
     */
    public String clusterId() {
        return this.innerProperties() == null ? null : this.innerProperties().clusterId();
    }

    /**
     * Get the cniAsNumber property: The autonomous system number that the fabric expects to peer with, derived from the
     * associated L3 isolation domain.
     *
     * @return the cniAsNumber value.
     */
    public Long cniAsNumber() {
        return this.innerProperties() == null ? null : this.innerProperties().cniAsNumber();
    }

    /**
     * Get the cniBgpConfiguration property: CniBgpConfiguration represents the Calico BGP configuration.
     *
     * <p>The Calico BGP configuration.
     *
     * @return the cniBgpConfiguration value.
     */
    public CniBgpConfiguration cniBgpConfiguration() {
        return this.innerProperties() == null ? null : this.innerProperties().cniBgpConfiguration();
    }

    /**
     * Set the cniBgpConfiguration property: CniBgpConfiguration represents the Calico BGP configuration.
     *
     * <p>The Calico BGP configuration.
     *
     * @param cniBgpConfiguration the cniBgpConfiguration value to set.
     * @return the DefaultCniNetworkInner object itself.
     */
    public DefaultCniNetworkInner withCniBgpConfiguration(CniBgpConfiguration cniBgpConfiguration) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DefaultCniNetworkProperties();
        }
        this.innerProperties().withCniBgpConfiguration(cniBgpConfiguration);
        return this;
    }

    /**
     * Get the detailedStatus property: The more detailed status of the default CNI network.
     *
     * @return the detailedStatus value.
     */
    public DefaultCniNetworkDetailedStatus detailedStatus() {
        return this.innerProperties() == null ? null : this.innerProperties().detailedStatus();
    }

    /**
     * Get the detailedStatusMessage property: The descriptive message about the current detailed status.
     *
     * @return the detailedStatusMessage value.
     */
    public String detailedStatusMessage() {
        return this.innerProperties() == null ? null : this.innerProperties().detailedStatusMessage();
    }

    /**
     * Get the fabricBgpPeers property: The L3 isolation fabric BGP peering connectivity information necessary for BGP
     * peering the Hybrid AKS Cluster with the switch fabric.
     *
     * @return the fabricBgpPeers value.
     */
    public List<BgpPeer> fabricBgpPeers() {
        return this.innerProperties() == null ? null : this.innerProperties().fabricBgpPeers();
    }

    /**
     * Get the hybridAksClustersAssociatedIds property: The list of Hybrid AKS cluster resource ID(s) that are
     * associated with this default CNI network.
     *
     * @return the hybridAksClustersAssociatedIds value.
     */
    public List<String> hybridAksClustersAssociatedIds() {
        return this.innerProperties() == null ? null : this.innerProperties().hybridAksClustersAssociatedIds();
    }

    /**
     * Get the interfaceName property: The name of the interface that will be present in the virtual machine to
     * represent this network.
     *
     * @return the interfaceName value.
     */
    public String interfaceName() {
        return this.innerProperties() == null ? null : this.innerProperties().interfaceName();
    }

    /**
     * Get the ipAllocationType property: The type of the IP address allocation.
     *
     * @return the ipAllocationType value.
     */
    public IpAllocationType ipAllocationType() {
        return this.innerProperties() == null ? null : this.innerProperties().ipAllocationType();
    }

    /**
     * Set the ipAllocationType property: The type of the IP address allocation.
     *
     * @param ipAllocationType the ipAllocationType value to set.
     * @return the DefaultCniNetworkInner object itself.
     */
    public DefaultCniNetworkInner withIpAllocationType(IpAllocationType ipAllocationType) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DefaultCniNetworkProperties();
        }
        this.innerProperties().withIpAllocationType(ipAllocationType);
        return this;
    }

    /**
     * Get the ipv4ConnectedPrefix property: The IPV4 prefix (CIDR) assigned to this default CNI network. It is required
     * when the IP allocation type is IPV4 or DualStack.
     *
     * @return the ipv4ConnectedPrefix value.
     */
    public String ipv4ConnectedPrefix() {
        return this.innerProperties() == null ? null : this.innerProperties().ipv4ConnectedPrefix();
    }

    /**
     * Set the ipv4ConnectedPrefix property: The IPV4 prefix (CIDR) assigned to this default CNI network. It is required
     * when the IP allocation type is IPV4 or DualStack.
     *
     * @param ipv4ConnectedPrefix the ipv4ConnectedPrefix value to set.
     * @return the DefaultCniNetworkInner object itself.
     */
    public DefaultCniNetworkInner withIpv4ConnectedPrefix(String ipv4ConnectedPrefix) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DefaultCniNetworkProperties();
        }
        this.innerProperties().withIpv4ConnectedPrefix(ipv4ConnectedPrefix);
        return this;
    }

    /**
     * Get the ipv6ConnectedPrefix property: The IPV6 prefix (CIDR) assigned to this default CNI network. It is required
     * when the IP allocation type is IPV6 or DualStack.
     *
     * @return the ipv6ConnectedPrefix value.
     */
    public String ipv6ConnectedPrefix() {
        return this.innerProperties() == null ? null : this.innerProperties().ipv6ConnectedPrefix();
    }

    /**
     * Set the ipv6ConnectedPrefix property: The IPV6 prefix (CIDR) assigned to this default CNI network. It is required
     * when the IP allocation type is IPV6 or DualStack.
     *
     * @param ipv6ConnectedPrefix the ipv6ConnectedPrefix value to set.
     * @return the DefaultCniNetworkInner object itself.
     */
    public DefaultCniNetworkInner withIpv6ConnectedPrefix(String ipv6ConnectedPrefix) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DefaultCniNetworkProperties();
        }
        this.innerProperties().withIpv6ConnectedPrefix(ipv6ConnectedPrefix);
        return this;
    }

    /**
     * Get the l3IsolationDomainId property: The resource ID of the Network Fabric l3IsolationDomain.
     *
     * @return the l3IsolationDomainId value.
     */
    public String l3IsolationDomainId() {
        return this.innerProperties() == null ? null : this.innerProperties().l3IsolationDomainId();
    }

    /**
     * Set the l3IsolationDomainId property: The resource ID of the Network Fabric l3IsolationDomain.
     *
     * @param l3IsolationDomainId the l3IsolationDomainId value to set.
     * @return the DefaultCniNetworkInner object itself.
     */
    public DefaultCniNetworkInner withL3IsolationDomainId(String l3IsolationDomainId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DefaultCniNetworkProperties();
        }
        this.innerProperties().withL3IsolationDomainId(l3IsolationDomainId);
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state of the default CNI network.
     *
     * @return the provisioningState value.
     */
    public DefaultCniNetworkProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the vlan property: The VLAN from the l3IsolationDomain that is used for this network.
     *
     * @return the vlan value.
     */
    public long vlan() {
        return this.innerProperties() == null ? 0L : this.innerProperties().vlan();
    }

    /**
     * Set the vlan property: The VLAN from the l3IsolationDomain that is used for this network.
     *
     * @param vlan the vlan value to set.
     * @return the DefaultCniNetworkInner object itself.
     */
    public DefaultCniNetworkInner withVlan(long vlan) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DefaultCniNetworkProperties();
        }
        this.innerProperties().withVlan(vlan);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (extendedLocation() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property extendedLocation in model DefaultCniNetworkInner"));
        } else {
            extendedLocation().validate();
        }
        if (innerProperties() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property innerProperties in model DefaultCniNetworkInner"));
        } else {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DefaultCniNetworkInner.class);
}
