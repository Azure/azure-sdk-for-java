// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.models;

import com.azure.core.annotation.Immutable;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** NodeConfiguration contains configuration for a VM associated with a node. */
@Immutable
public final class NodeConfiguration {
    /*
     * The resource ID of the agent pool that contains the nodes in this configuration.
     */
    @JsonProperty(value = "agentPoolId", access = JsonProperty.Access.WRITE_ONLY)
    private String agentPoolId;

    /*
     * The name of the agent pool that contains the nodes in this configuration.
     */
    @JsonProperty(value = "agentPoolName", access = JsonProperty.Access.WRITE_ONLY)
    private String agentPoolName;

    /*
     * The number of CPU cores in the virtual machine.
     */
    @JsonProperty(value = "cpuCores", access = JsonProperty.Access.WRITE_ONLY)
    private Long cpuCores;

    /*
     * The root disk size of the virtual machine in GB.
     */
    @JsonProperty(value = "diskSizeGB", access = JsonProperty.Access.WRITE_ONLY)
    private Long diskSizeGB;

    /*
     * The memory size of the virtual machine in GB.
     */
    @JsonProperty(value = "memorySizeGB", access = JsonProperty.Access.WRITE_ONLY)
    private Long memorySizeGB;

    /*
     * Field deprecated, use agentPoolName instead. This field will be removed in a future version but will reflect the
     * name of the agent pool that contains the nodes in this configuration.
     */
    @JsonProperty(value = "nodePoolName", access = JsonProperty.Access.WRITE_ONLY)
    private String nodePoolName;

    /*
     * The list of nodes that utilize this configuration.
     */
    @JsonProperty(value = "nodes", access = JsonProperty.Access.WRITE_ONLY)
    private List<Node> nodes;

    /*
     * The number of virtual machines that use this configuration.
     */
    @JsonProperty(value = "vmCount", access = JsonProperty.Access.WRITE_ONLY)
    private Long vmCount;

    /*
     * The name of the VM size supplied during the creation of the cluster.
     */
    @JsonProperty(value = "vmSize", access = JsonProperty.Access.WRITE_ONLY)
    private String vmSize;

    /** Creates an instance of NodeConfiguration class. */
    public NodeConfiguration() {
    }

    /**
     * Get the agentPoolId property: The resource ID of the agent pool that contains the nodes in this configuration.
     *
     * @return the agentPoolId value.
     */
    public String agentPoolId() {
        return this.agentPoolId;
    }

    /**
     * Get the agentPoolName property: The name of the agent pool that contains the nodes in this configuration.
     *
     * @return the agentPoolName value.
     */
    public String agentPoolName() {
        return this.agentPoolName;
    }

    /**
     * Get the cpuCores property: The number of CPU cores in the virtual machine.
     *
     * @return the cpuCores value.
     */
    public Long cpuCores() {
        return this.cpuCores;
    }

    /**
     * Get the diskSizeGB property: The root disk size of the virtual machine in GB.
     *
     * @return the diskSizeGB value.
     */
    public Long diskSizeGB() {
        return this.diskSizeGB;
    }

    /**
     * Get the memorySizeGB property: The memory size of the virtual machine in GB.
     *
     * @return the memorySizeGB value.
     */
    public Long memorySizeGB() {
        return this.memorySizeGB;
    }

    /**
     * Get the nodePoolName property: Field deprecated, use agentPoolName instead. This field will be removed in a
     * future version but will reflect the name of the agent pool that contains the nodes in this configuration.
     *
     * @return the nodePoolName value.
     */
    public String nodePoolName() {
        return this.nodePoolName;
    }

    /**
     * Get the nodes property: The list of nodes that utilize this configuration.
     *
     * @return the nodes value.
     */
    public List<Node> nodes() {
        return this.nodes;
    }

    /**
     * Get the vmCount property: The number of virtual machines that use this configuration.
     *
     * @return the vmCount value.
     */
    public Long vmCount() {
        return this.vmCount;
    }

    /**
     * Get the vmSize property: The name of the VM size supplied during the creation of the cluster.
     *
     * @return the vmSize value.
     */
    public String vmSize() {
        return this.vmSize;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (nodes() != null) {
            nodes().forEach(e -> e.validate());
        }
    }
}
