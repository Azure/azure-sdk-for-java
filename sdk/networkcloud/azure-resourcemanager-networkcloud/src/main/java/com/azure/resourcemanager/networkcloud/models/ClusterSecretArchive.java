// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * ClusterSecretArchive configures the key vault to archive the secrets of the cluster for later retrieval.
 */
@Fluent
public final class ClusterSecretArchive implements JsonSerializable<ClusterSecretArchive> {
    /*
     * The resource ID of the key vault to archive the secrets of the cluster.
     */
    private String keyVaultId;

    /*
     * The indicator if the specified key vault should be used to archive the secrets of the cluster.
     */
    private ClusterSecretArchiveEnabled useKeyVault;

    /**
     * Creates an instance of ClusterSecretArchive class.
     */
    public ClusterSecretArchive() {
    }

    /**
     * Get the keyVaultId property: The resource ID of the key vault to archive the secrets of the cluster.
     * 
     * @return the keyVaultId value.
     */
    public String keyVaultId() {
        return this.keyVaultId;
    }

    /**
     * Set the keyVaultId property: The resource ID of the key vault to archive the secrets of the cluster.
     * 
     * @param keyVaultId the keyVaultId value to set.
     * @return the ClusterSecretArchive object itself.
     */
    public ClusterSecretArchive withKeyVaultId(String keyVaultId) {
        this.keyVaultId = keyVaultId;
        return this;
    }

    /**
     * Get the useKeyVault property: The indicator if the specified key vault should be used to archive the secrets of
     * the cluster.
     * 
     * @return the useKeyVault value.
     */
    public ClusterSecretArchiveEnabled useKeyVault() {
        return this.useKeyVault;
    }

    /**
     * Set the useKeyVault property: The indicator if the specified key vault should be used to archive the secrets of
     * the cluster.
     * 
     * @param useKeyVault the useKeyVault value to set.
     * @return the ClusterSecretArchive object itself.
     */
    public ClusterSecretArchive withUseKeyVault(ClusterSecretArchiveEnabled useKeyVault) {
        this.useKeyVault = useKeyVault;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (keyVaultId() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property keyVaultId in model ClusterSecretArchive"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ClusterSecretArchive.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("keyVaultId", this.keyVaultId);
        jsonWriter.writeStringField("useKeyVault", this.useKeyVault == null ? null : this.useKeyVault.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ClusterSecretArchive from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ClusterSecretArchive if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ClusterSecretArchive.
     */
    public static ClusterSecretArchive fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ClusterSecretArchive deserializedClusterSecretArchive = new ClusterSecretArchive();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("keyVaultId".equals(fieldName)) {
                    deserializedClusterSecretArchive.keyVaultId = reader.getString();
                } else if ("useKeyVault".equals(fieldName)) {
                    deserializedClusterSecretArchive.useKeyVault
                        = ClusterSecretArchiveEnabled.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedClusterSecretArchive;
        });
    }
}
