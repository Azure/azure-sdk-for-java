// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.networkcloud.fluent.HybridAksClustersClient;
import com.azure.resourcemanager.networkcloud.fluent.models.HybridAksClusterInner;
import com.azure.resourcemanager.networkcloud.models.HybridAksClusterList;
import com.azure.resourcemanager.networkcloud.models.HybridAksClusterPatchParameters;
import com.azure.resourcemanager.networkcloud.models.HybridAksClusterRestartNodeParameters;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in HybridAksClustersClient. */
public final class HybridAksClustersClientImpl implements HybridAksClustersClient {
    /** The proxy service used to perform REST calls. */
    private final HybridAksClustersService service;

    /** The service client containing this operation class. */
    private final NetworkCloudImpl client;

    /**
     * Initializes an instance of HybridAksClustersClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    HybridAksClustersClientImpl(NetworkCloudImpl client) {
        this.service =
            RestProxy.create(HybridAksClustersService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for NetworkCloudHybridAksClusters to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "NetworkCloudHybridAk")
    public interface HybridAksClustersService {
        @Headers({"Content-Type: application/json"})
        @Get("/subscriptions/{subscriptionId}/providers/Microsoft.NetworkCloud/hybridAksClusters")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<HybridAksClusterList>> list(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/hybridAksClusters")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<HybridAksClusterList>> listByResourceGroup(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/hybridAksClusters/{hybridAksClusterName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<HybridAksClusterInner>> getByResourceGroup(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("hybridAksClusterName") String hybridAksClusterName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/hybridAksClusters/{hybridAksClusterName}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("hybridAksClusterName") String hybridAksClusterName,
            @BodyParam("application/json") HybridAksClusterInner hybridAksClusterParameters,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/hybridAksClusters/{hybridAksClusterName}")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("hybridAksClusterName") String hybridAksClusterName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Patch(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/hybridAksClusters/{hybridAksClusterName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<HybridAksClusterInner>> update(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("hybridAksClusterName") String hybridAksClusterName,
            @BodyParam("application/json") HybridAksClusterPatchParameters hybridAksClusterUpdateParameters,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/hybridAksClusters/{hybridAksClusterName}/restartNode")
        @ExpectedResponses({202, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> restartNode(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("hybridAksClusterName") String hybridAksClusterName,
            @BodyParam("application/json") HybridAksClusterRestartNodeParameters hybridAksClusterRestartNodeParameters,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<HybridAksClusterList>> listBySubscriptionNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<HybridAksClusterList>> listByResourceGroupNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * List additional details related to Hybrid AKS provisioned clusters in the subscription.
     *
     * <p>Get a list of additional details related to Hybrid AKS provisioned clusters in the provided subscription.
     *
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of additional details related to Hybrid AKS provisioned clusters in the provided subscription
     *     along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<HybridAksClusterInner>> listSinglePageAsync() {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .list(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            accept,
                            context))
            .<PagedResponse<HybridAksClusterInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List additional details related to Hybrid AKS provisioned clusters in the subscription.
     *
     * <p>Get a list of additional details related to Hybrid AKS provisioned clusters in the provided subscription.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of additional details related to Hybrid AKS provisioned clusters in the provided subscription
     *     along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<HybridAksClusterInner>> listSinglePageAsync(Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * List additional details related to Hybrid AKS provisioned clusters in the subscription.
     *
     * <p>Get a list of additional details related to Hybrid AKS provisioned clusters in the provided subscription.
     *
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of additional details related to Hybrid AKS provisioned clusters in the provided subscription as
     *     paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<HybridAksClusterInner> listAsync() {
        return new PagedFlux<>(
            () -> listSinglePageAsync(), nextLink -> listBySubscriptionNextSinglePageAsync(nextLink));
    }

    /**
     * List additional details related to Hybrid AKS provisioned clusters in the subscription.
     *
     * <p>Get a list of additional details related to Hybrid AKS provisioned clusters in the provided subscription.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of additional details related to Hybrid AKS provisioned clusters in the provided subscription as
     *     paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<HybridAksClusterInner> listAsync(Context context) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(context), nextLink -> listBySubscriptionNextSinglePageAsync(nextLink, context));
    }

    /**
     * List additional details related to Hybrid AKS provisioned clusters in the subscription.
     *
     * <p>Get a list of additional details related to Hybrid AKS provisioned clusters in the provided subscription.
     *
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of additional details related to Hybrid AKS provisioned clusters in the provided subscription as
     *     paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<HybridAksClusterInner> list() {
        return new PagedIterable<>(listAsync());
    }

    /**
     * List additional details related to Hybrid AKS provisioned clusters in the subscription.
     *
     * <p>Get a list of additional details related to Hybrid AKS provisioned clusters in the provided subscription.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of additional details related to Hybrid AKS provisioned clusters in the provided subscription as
     *     paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<HybridAksClusterInner> list(Context context) {
        return new PagedIterable<>(listAsync(context));
    }

    /**
     * List additional details related to Hybrid AKS provisioned clusters in the resource group.
     *
     * <p>Get a list of additional details for Hybrid AKS provisioned clusters in the provided resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of additional details for Hybrid AKS provisioned clusters in the provided resource group along
     *     with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<HybridAksClusterInner>> listByResourceGroupSinglePageAsync(String resourceGroupName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listByResourceGroup(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            accept,
                            context))
            .<PagedResponse<HybridAksClusterInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List additional details related to Hybrid AKS provisioned clusters in the resource group.
     *
     * <p>Get a list of additional details for Hybrid AKS provisioned clusters in the provided resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of additional details for Hybrid AKS provisioned clusters in the provided resource group along
     *     with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<HybridAksClusterInner>> listByResourceGroupSinglePageAsync(
        String resourceGroupName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByResourceGroup(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * List additional details related to Hybrid AKS provisioned clusters in the resource group.
     *
     * <p>Get a list of additional details for Hybrid AKS provisioned clusters in the provided resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of additional details for Hybrid AKS provisioned clusters in the provided resource group as
     *     paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<HybridAksClusterInner> listByResourceGroupAsync(String resourceGroupName) {
        return new PagedFlux<>(
            () -> listByResourceGroupSinglePageAsync(resourceGroupName),
            nextLink -> listByResourceGroupNextSinglePageAsync(nextLink));
    }

    /**
     * List additional details related to Hybrid AKS provisioned clusters in the resource group.
     *
     * <p>Get a list of additional details for Hybrid AKS provisioned clusters in the provided resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of additional details for Hybrid AKS provisioned clusters in the provided resource group as
     *     paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<HybridAksClusterInner> listByResourceGroupAsync(String resourceGroupName, Context context) {
        return new PagedFlux<>(
            () -> listByResourceGroupSinglePageAsync(resourceGroupName, context),
            nextLink -> listByResourceGroupNextSinglePageAsync(nextLink, context));
    }

    /**
     * List additional details related to Hybrid AKS provisioned clusters in the resource group.
     *
     * <p>Get a list of additional details for Hybrid AKS provisioned clusters in the provided resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of additional details for Hybrid AKS provisioned clusters in the provided resource group as
     *     paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<HybridAksClusterInner> listByResourceGroup(String resourceGroupName) {
        return new PagedIterable<>(listByResourceGroupAsync(resourceGroupName));
    }

    /**
     * List additional details related to Hybrid AKS provisioned clusters in the resource group.
     *
     * <p>Get a list of additional details for Hybrid AKS provisioned clusters in the provided resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of additional details for Hybrid AKS provisioned clusters in the provided resource group as
     *     paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<HybridAksClusterInner> listByResourceGroup(String resourceGroupName, Context context) {
        return new PagedIterable<>(listByResourceGroupAsync(resourceGroupName, context));
    }

    /**
     * Retrieve the additional details related to the Hybrid AKS provisioned cluster.
     *
     * <p>Get the additional details related to the provided Hybrid AKS provisioned cluster.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hybridAksClusterName The name of the Hybrid AKS cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the additional details related to the provided Hybrid AKS provisioned cluster along with {@link Response}
     *     on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<HybridAksClusterInner>> getByResourceGroupWithResponseAsync(
        String resourceGroupName, String hybridAksClusterName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (hybridAksClusterName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter hybridAksClusterName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getByResourceGroup(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            hybridAksClusterName,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Retrieve the additional details related to the Hybrid AKS provisioned cluster.
     *
     * <p>Get the additional details related to the provided Hybrid AKS provisioned cluster.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hybridAksClusterName The name of the Hybrid AKS cluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the additional details related to the provided Hybrid AKS provisioned cluster along with {@link Response}
     *     on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<HybridAksClusterInner>> getByResourceGroupWithResponseAsync(
        String resourceGroupName, String hybridAksClusterName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (hybridAksClusterName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter hybridAksClusterName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .getByResourceGroup(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                hybridAksClusterName,
                accept,
                context);
    }

    /**
     * Retrieve the additional details related to the Hybrid AKS provisioned cluster.
     *
     * <p>Get the additional details related to the provided Hybrid AKS provisioned cluster.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hybridAksClusterName The name of the Hybrid AKS cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the additional details related to the provided Hybrid AKS provisioned cluster on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<HybridAksClusterInner> getByResourceGroupAsync(String resourceGroupName, String hybridAksClusterName) {
        return getByResourceGroupWithResponseAsync(resourceGroupName, hybridAksClusterName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Retrieve the additional details related to the Hybrid AKS provisioned cluster.
     *
     * <p>Get the additional details related to the provided Hybrid AKS provisioned cluster.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hybridAksClusterName The name of the Hybrid AKS cluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the additional details related to the provided Hybrid AKS provisioned cluster along with {@link
     *     Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<HybridAksClusterInner> getByResourceGroupWithResponse(
        String resourceGroupName, String hybridAksClusterName, Context context) {
        return getByResourceGroupWithResponseAsync(resourceGroupName, hybridAksClusterName, context).block();
    }

    /**
     * Retrieve the additional details related to the Hybrid AKS provisioned cluster.
     *
     * <p>Get the additional details related to the provided Hybrid AKS provisioned cluster.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hybridAksClusterName The name of the Hybrid AKS cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the additional details related to the provided Hybrid AKS provisioned cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public HybridAksClusterInner getByResourceGroup(String resourceGroupName, String hybridAksClusterName) {
        return getByResourceGroupWithResponse(resourceGroupName, hybridAksClusterName, Context.NONE).getValue();
    }

    /**
     * Create or update the additional details related to the Hybrid AKS provisioned cluster.
     *
     * <p>Create new additional details related to the Hybrid AKS provisioned cluster or update the existing one. All
     * customer initiated requests will be rejected as the life cycle of this resource is managed by the system.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hybridAksClusterName The name of the Hybrid AKS cluster.
     * @param hybridAksClusterParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return hybridAksCluster represents the additional details regarding the Hybrid AKS cluster along with {@link
     *     Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(
        String resourceGroupName, String hybridAksClusterName, HybridAksClusterInner hybridAksClusterParameters) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (hybridAksClusterName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter hybridAksClusterName is required and cannot be null."));
        }
        if (hybridAksClusterParameters == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter hybridAksClusterParameters is required and cannot be null."));
        } else {
            hybridAksClusterParameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createOrUpdate(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            hybridAksClusterName,
                            hybridAksClusterParameters,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create or update the additional details related to the Hybrid AKS provisioned cluster.
     *
     * <p>Create new additional details related to the Hybrid AKS provisioned cluster or update the existing one. All
     * customer initiated requests will be rejected as the life cycle of this resource is managed by the system.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hybridAksClusterName The name of the Hybrid AKS cluster.
     * @param hybridAksClusterParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return hybridAksCluster represents the additional details regarding the Hybrid AKS cluster along with {@link
     *     Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(
        String resourceGroupName,
        String hybridAksClusterName,
        HybridAksClusterInner hybridAksClusterParameters,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (hybridAksClusterName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter hybridAksClusterName is required and cannot be null."));
        }
        if (hybridAksClusterParameters == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter hybridAksClusterParameters is required and cannot be null."));
        } else {
            hybridAksClusterParameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .createOrUpdate(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                hybridAksClusterName,
                hybridAksClusterParameters,
                accept,
                context);
    }

    /**
     * Create or update the additional details related to the Hybrid AKS provisioned cluster.
     *
     * <p>Create new additional details related to the Hybrid AKS provisioned cluster or update the existing one. All
     * customer initiated requests will be rejected as the life cycle of this resource is managed by the system.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hybridAksClusterName The name of the Hybrid AKS cluster.
     * @param hybridAksClusterParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of hybridAksCluster represents the additional details regarding the
     *     Hybrid AKS cluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<HybridAksClusterInner>, HybridAksClusterInner> beginCreateOrUpdateAsync(
        String resourceGroupName, String hybridAksClusterName, HybridAksClusterInner hybridAksClusterParameters) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            createOrUpdateWithResponseAsync(resourceGroupName, hybridAksClusterName, hybridAksClusterParameters);
        return this
            .client
            .<HybridAksClusterInner, HybridAksClusterInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                HybridAksClusterInner.class,
                HybridAksClusterInner.class,
                this.client.getContext());
    }

    /**
     * Create or update the additional details related to the Hybrid AKS provisioned cluster.
     *
     * <p>Create new additional details related to the Hybrid AKS provisioned cluster or update the existing one. All
     * customer initiated requests will be rejected as the life cycle of this resource is managed by the system.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hybridAksClusterName The name of the Hybrid AKS cluster.
     * @param hybridAksClusterParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of hybridAksCluster represents the additional details regarding the
     *     Hybrid AKS cluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<HybridAksClusterInner>, HybridAksClusterInner> beginCreateOrUpdateAsync(
        String resourceGroupName,
        String hybridAksClusterName,
        HybridAksClusterInner hybridAksClusterParameters,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            createOrUpdateWithResponseAsync(
                resourceGroupName, hybridAksClusterName, hybridAksClusterParameters, context);
        return this
            .client
            .<HybridAksClusterInner, HybridAksClusterInner>getLroResult(
                mono, this.client.getHttpPipeline(), HybridAksClusterInner.class, HybridAksClusterInner.class, context);
    }

    /**
     * Create or update the additional details related to the Hybrid AKS provisioned cluster.
     *
     * <p>Create new additional details related to the Hybrid AKS provisioned cluster or update the existing one. All
     * customer initiated requests will be rejected as the life cycle of this resource is managed by the system.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hybridAksClusterName The name of the Hybrid AKS cluster.
     * @param hybridAksClusterParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of hybridAksCluster represents the additional details regarding the
     *     Hybrid AKS cluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<HybridAksClusterInner>, HybridAksClusterInner> beginCreateOrUpdate(
        String resourceGroupName, String hybridAksClusterName, HybridAksClusterInner hybridAksClusterParameters) {
        return this
            .beginCreateOrUpdateAsync(resourceGroupName, hybridAksClusterName, hybridAksClusterParameters)
            .getSyncPoller();
    }

    /**
     * Create or update the additional details related to the Hybrid AKS provisioned cluster.
     *
     * <p>Create new additional details related to the Hybrid AKS provisioned cluster or update the existing one. All
     * customer initiated requests will be rejected as the life cycle of this resource is managed by the system.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hybridAksClusterName The name of the Hybrid AKS cluster.
     * @param hybridAksClusterParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of hybridAksCluster represents the additional details regarding the
     *     Hybrid AKS cluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<HybridAksClusterInner>, HybridAksClusterInner> beginCreateOrUpdate(
        String resourceGroupName,
        String hybridAksClusterName,
        HybridAksClusterInner hybridAksClusterParameters,
        Context context) {
        return this
            .beginCreateOrUpdateAsync(resourceGroupName, hybridAksClusterName, hybridAksClusterParameters, context)
            .getSyncPoller();
    }

    /**
     * Create or update the additional details related to the Hybrid AKS provisioned cluster.
     *
     * <p>Create new additional details related to the Hybrid AKS provisioned cluster or update the existing one. All
     * customer initiated requests will be rejected as the life cycle of this resource is managed by the system.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hybridAksClusterName The name of the Hybrid AKS cluster.
     * @param hybridAksClusterParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return hybridAksCluster represents the additional details regarding the Hybrid AKS cluster on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<HybridAksClusterInner> createOrUpdateAsync(
        String resourceGroupName, String hybridAksClusterName, HybridAksClusterInner hybridAksClusterParameters) {
        return beginCreateOrUpdateAsync(resourceGroupName, hybridAksClusterName, hybridAksClusterParameters)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create or update the additional details related to the Hybrid AKS provisioned cluster.
     *
     * <p>Create new additional details related to the Hybrid AKS provisioned cluster or update the existing one. All
     * customer initiated requests will be rejected as the life cycle of this resource is managed by the system.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hybridAksClusterName The name of the Hybrid AKS cluster.
     * @param hybridAksClusterParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return hybridAksCluster represents the additional details regarding the Hybrid AKS cluster on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<HybridAksClusterInner> createOrUpdateAsync(
        String resourceGroupName,
        String hybridAksClusterName,
        HybridAksClusterInner hybridAksClusterParameters,
        Context context) {
        return beginCreateOrUpdateAsync(resourceGroupName, hybridAksClusterName, hybridAksClusterParameters, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create or update the additional details related to the Hybrid AKS provisioned cluster.
     *
     * <p>Create new additional details related to the Hybrid AKS provisioned cluster or update the existing one. All
     * customer initiated requests will be rejected as the life cycle of this resource is managed by the system.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hybridAksClusterName The name of the Hybrid AKS cluster.
     * @param hybridAksClusterParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return hybridAksCluster represents the additional details regarding the Hybrid AKS cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public HybridAksClusterInner createOrUpdate(
        String resourceGroupName, String hybridAksClusterName, HybridAksClusterInner hybridAksClusterParameters) {
        return createOrUpdateAsync(resourceGroupName, hybridAksClusterName, hybridAksClusterParameters).block();
    }

    /**
     * Create or update the additional details related to the Hybrid AKS provisioned cluster.
     *
     * <p>Create new additional details related to the Hybrid AKS provisioned cluster or update the existing one. All
     * customer initiated requests will be rejected as the life cycle of this resource is managed by the system.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hybridAksClusterName The name of the Hybrid AKS cluster.
     * @param hybridAksClusterParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return hybridAksCluster represents the additional details regarding the Hybrid AKS cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public HybridAksClusterInner createOrUpdate(
        String resourceGroupName,
        String hybridAksClusterName,
        HybridAksClusterInner hybridAksClusterParameters,
        Context context) {
        return createOrUpdateAsync(resourceGroupName, hybridAksClusterName, hybridAksClusterParameters, context)
            .block();
    }

    /**
     * Delete the additional details related to the Hybrid AKS provisioned cluster.
     *
     * <p>Delete the additional details related to the provided Hybrid AKS provisioned cluster. All customer initiated
     * requests will be rejected as the life cycle of this resource is managed by the system.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hybridAksClusterName The name of the Hybrid AKS cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(
        String resourceGroupName, String hybridAksClusterName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (hybridAksClusterName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter hybridAksClusterName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .delete(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            hybridAksClusterName,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete the additional details related to the Hybrid AKS provisioned cluster.
     *
     * <p>Delete the additional details related to the provided Hybrid AKS provisioned cluster. All customer initiated
     * requests will be rejected as the life cycle of this resource is managed by the system.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hybridAksClusterName The name of the Hybrid AKS cluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(
        String resourceGroupName, String hybridAksClusterName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (hybridAksClusterName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter hybridAksClusterName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .delete(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                hybridAksClusterName,
                accept,
                context);
    }

    /**
     * Delete the additional details related to the Hybrid AKS provisioned cluster.
     *
     * <p>Delete the additional details related to the provided Hybrid AKS provisioned cluster. All customer initiated
     * requests will be rejected as the life cycle of this resource is managed by the system.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hybridAksClusterName The name of the Hybrid AKS cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String hybridAksClusterName) {
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(resourceGroupName, hybridAksClusterName);
        return this
            .client
            .<Void, Void>getLroResult(
                mono, this.client.getHttpPipeline(), Void.class, Void.class, this.client.getContext());
    }

    /**
     * Delete the additional details related to the Hybrid AKS provisioned cluster.
     *
     * <p>Delete the additional details related to the provided Hybrid AKS provisioned cluster. All customer initiated
     * requests will be rejected as the life cycle of this resource is managed by the system.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hybridAksClusterName The name of the Hybrid AKS cluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(
        String resourceGroupName, String hybridAksClusterName, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            deleteWithResponseAsync(resourceGroupName, hybridAksClusterName, context);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, context);
    }

    /**
     * Delete the additional details related to the Hybrid AKS provisioned cluster.
     *
     * <p>Delete the additional details related to the provided Hybrid AKS provisioned cluster. All customer initiated
     * requests will be rejected as the life cycle of this resource is managed by the system.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hybridAksClusterName The name of the Hybrid AKS cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String hybridAksClusterName) {
        return this.beginDeleteAsync(resourceGroupName, hybridAksClusterName).getSyncPoller();
    }

    /**
     * Delete the additional details related to the Hybrid AKS provisioned cluster.
     *
     * <p>Delete the additional details related to the provided Hybrid AKS provisioned cluster. All customer initiated
     * requests will be rejected as the life cycle of this resource is managed by the system.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hybridAksClusterName The name of the Hybrid AKS cluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(
        String resourceGroupName, String hybridAksClusterName, Context context) {
        return this.beginDeleteAsync(resourceGroupName, hybridAksClusterName, context).getSyncPoller();
    }

    /**
     * Delete the additional details related to the Hybrid AKS provisioned cluster.
     *
     * <p>Delete the additional details related to the provided Hybrid AKS provisioned cluster. All customer initiated
     * requests will be rejected as the life cycle of this resource is managed by the system.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hybridAksClusterName The name of the Hybrid AKS cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String hybridAksClusterName) {
        return beginDeleteAsync(resourceGroupName, hybridAksClusterName)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete the additional details related to the Hybrid AKS provisioned cluster.
     *
     * <p>Delete the additional details related to the provided Hybrid AKS provisioned cluster. All customer initiated
     * requests will be rejected as the life cycle of this resource is managed by the system.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hybridAksClusterName The name of the Hybrid AKS cluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String hybridAksClusterName, Context context) {
        return beginDeleteAsync(resourceGroupName, hybridAksClusterName, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete the additional details related to the Hybrid AKS provisioned cluster.
     *
     * <p>Delete the additional details related to the provided Hybrid AKS provisioned cluster. All customer initiated
     * requests will be rejected as the life cycle of this resource is managed by the system.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hybridAksClusterName The name of the Hybrid AKS cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String hybridAksClusterName) {
        deleteAsync(resourceGroupName, hybridAksClusterName).block();
    }

    /**
     * Delete the additional details related to the Hybrid AKS provisioned cluster.
     *
     * <p>Delete the additional details related to the provided Hybrid AKS provisioned cluster. All customer initiated
     * requests will be rejected as the life cycle of this resource is managed by the system.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hybridAksClusterName The name of the Hybrid AKS cluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String hybridAksClusterName, Context context) {
        deleteAsync(resourceGroupName, hybridAksClusterName, context).block();
    }

    /**
     * Patch the additional details related to the Hybrid AKS provisioned cluster.
     *
     * <p>Update tags associated with the additional details related to the Hybrid AKS provisioned cluster.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hybridAksClusterName The name of the Hybrid AKS cluster.
     * @param hybridAksClusterUpdateParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return hybridAksCluster represents the additional details regarding the Hybrid AKS cluster along with {@link
     *     Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<HybridAksClusterInner>> updateWithResponseAsync(
        String resourceGroupName,
        String hybridAksClusterName,
        HybridAksClusterPatchParameters hybridAksClusterUpdateParameters) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (hybridAksClusterName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter hybridAksClusterName is required and cannot be null."));
        }
        if (hybridAksClusterUpdateParameters != null) {
            hybridAksClusterUpdateParameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .update(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            hybridAksClusterName,
                            hybridAksClusterUpdateParameters,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Patch the additional details related to the Hybrid AKS provisioned cluster.
     *
     * <p>Update tags associated with the additional details related to the Hybrid AKS provisioned cluster.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hybridAksClusterName The name of the Hybrid AKS cluster.
     * @param hybridAksClusterUpdateParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return hybridAksCluster represents the additional details regarding the Hybrid AKS cluster along with {@link
     *     Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<HybridAksClusterInner>> updateWithResponseAsync(
        String resourceGroupName,
        String hybridAksClusterName,
        HybridAksClusterPatchParameters hybridAksClusterUpdateParameters,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (hybridAksClusterName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter hybridAksClusterName is required and cannot be null."));
        }
        if (hybridAksClusterUpdateParameters != null) {
            hybridAksClusterUpdateParameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .update(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                hybridAksClusterName,
                hybridAksClusterUpdateParameters,
                accept,
                context);
    }

    /**
     * Patch the additional details related to the Hybrid AKS provisioned cluster.
     *
     * <p>Update tags associated with the additional details related to the Hybrid AKS provisioned cluster.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hybridAksClusterName The name of the Hybrid AKS cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return hybridAksCluster represents the additional details regarding the Hybrid AKS cluster on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<HybridAksClusterInner> updateAsync(String resourceGroupName, String hybridAksClusterName) {
        final HybridAksClusterPatchParameters hybridAksClusterUpdateParameters = null;
        return updateWithResponseAsync(resourceGroupName, hybridAksClusterName, hybridAksClusterUpdateParameters)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Patch the additional details related to the Hybrid AKS provisioned cluster.
     *
     * <p>Update tags associated with the additional details related to the Hybrid AKS provisioned cluster.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hybridAksClusterName The name of the Hybrid AKS cluster.
     * @param hybridAksClusterUpdateParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return hybridAksCluster represents the additional details regarding the Hybrid AKS cluster along with {@link
     *     Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<HybridAksClusterInner> updateWithResponse(
        String resourceGroupName,
        String hybridAksClusterName,
        HybridAksClusterPatchParameters hybridAksClusterUpdateParameters,
        Context context) {
        return updateWithResponseAsync(
                resourceGroupName, hybridAksClusterName, hybridAksClusterUpdateParameters, context)
            .block();
    }

    /**
     * Patch the additional details related to the Hybrid AKS provisioned cluster.
     *
     * <p>Update tags associated with the additional details related to the Hybrid AKS provisioned cluster.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hybridAksClusterName The name of the Hybrid AKS cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return hybridAksCluster represents the additional details regarding the Hybrid AKS cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public HybridAksClusterInner update(String resourceGroupName, String hybridAksClusterName) {
        final HybridAksClusterPatchParameters hybridAksClusterUpdateParameters = null;
        return updateWithResponse(
                resourceGroupName, hybridAksClusterName, hybridAksClusterUpdateParameters, Context.NONE)
            .getValue();
    }

    /**
     * Restart a targeted node.
     *
     * <p>Restart a targeted node of a Hybrid AKS cluster.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hybridAksClusterName The name of the Hybrid AKS cluster.
     * @param hybridAksClusterRestartNodeParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> restartNodeWithResponseAsync(
        String resourceGroupName,
        String hybridAksClusterName,
        HybridAksClusterRestartNodeParameters hybridAksClusterRestartNodeParameters) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (hybridAksClusterName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter hybridAksClusterName is required and cannot be null."));
        }
        if (hybridAksClusterRestartNodeParameters == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter hybridAksClusterRestartNodeParameters is required and cannot be null."));
        } else {
            hybridAksClusterRestartNodeParameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .restartNode(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            hybridAksClusterName,
                            hybridAksClusterRestartNodeParameters,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Restart a targeted node.
     *
     * <p>Restart a targeted node of a Hybrid AKS cluster.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hybridAksClusterName The name of the Hybrid AKS cluster.
     * @param hybridAksClusterRestartNodeParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> restartNodeWithResponseAsync(
        String resourceGroupName,
        String hybridAksClusterName,
        HybridAksClusterRestartNodeParameters hybridAksClusterRestartNodeParameters,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (hybridAksClusterName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter hybridAksClusterName is required and cannot be null."));
        }
        if (hybridAksClusterRestartNodeParameters == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter hybridAksClusterRestartNodeParameters is required and cannot be null."));
        } else {
            hybridAksClusterRestartNodeParameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .restartNode(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                hybridAksClusterName,
                hybridAksClusterRestartNodeParameters,
                accept,
                context);
    }

    /**
     * Restart a targeted node.
     *
     * <p>Restart a targeted node of a Hybrid AKS cluster.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hybridAksClusterName The name of the Hybrid AKS cluster.
     * @param hybridAksClusterRestartNodeParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginRestartNodeAsync(
        String resourceGroupName,
        String hybridAksClusterName,
        HybridAksClusterRestartNodeParameters hybridAksClusterRestartNodeParameters) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            restartNodeWithResponseAsync(
                resourceGroupName, hybridAksClusterName, hybridAksClusterRestartNodeParameters);
        return this
            .client
            .<Void, Void>getLroResult(
                mono, this.client.getHttpPipeline(), Void.class, Void.class, this.client.getContext());
    }

    /**
     * Restart a targeted node.
     *
     * <p>Restart a targeted node of a Hybrid AKS cluster.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hybridAksClusterName The name of the Hybrid AKS cluster.
     * @param hybridAksClusterRestartNodeParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginRestartNodeAsync(
        String resourceGroupName,
        String hybridAksClusterName,
        HybridAksClusterRestartNodeParameters hybridAksClusterRestartNodeParameters,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            restartNodeWithResponseAsync(
                resourceGroupName, hybridAksClusterName, hybridAksClusterRestartNodeParameters, context);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, context);
    }

    /**
     * Restart a targeted node.
     *
     * <p>Restart a targeted node of a Hybrid AKS cluster.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hybridAksClusterName The name of the Hybrid AKS cluster.
     * @param hybridAksClusterRestartNodeParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginRestartNode(
        String resourceGroupName,
        String hybridAksClusterName,
        HybridAksClusterRestartNodeParameters hybridAksClusterRestartNodeParameters) {
        return this
            .beginRestartNodeAsync(resourceGroupName, hybridAksClusterName, hybridAksClusterRestartNodeParameters)
            .getSyncPoller();
    }

    /**
     * Restart a targeted node.
     *
     * <p>Restart a targeted node of a Hybrid AKS cluster.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hybridAksClusterName The name of the Hybrid AKS cluster.
     * @param hybridAksClusterRestartNodeParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginRestartNode(
        String resourceGroupName,
        String hybridAksClusterName,
        HybridAksClusterRestartNodeParameters hybridAksClusterRestartNodeParameters,
        Context context) {
        return this
            .beginRestartNodeAsync(
                resourceGroupName, hybridAksClusterName, hybridAksClusterRestartNodeParameters, context)
            .getSyncPoller();
    }

    /**
     * Restart a targeted node.
     *
     * <p>Restart a targeted node of a Hybrid AKS cluster.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hybridAksClusterName The name of the Hybrid AKS cluster.
     * @param hybridAksClusterRestartNodeParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> restartNodeAsync(
        String resourceGroupName,
        String hybridAksClusterName,
        HybridAksClusterRestartNodeParameters hybridAksClusterRestartNodeParameters) {
        return beginRestartNodeAsync(resourceGroupName, hybridAksClusterName, hybridAksClusterRestartNodeParameters)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Restart a targeted node.
     *
     * <p>Restart a targeted node of a Hybrid AKS cluster.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hybridAksClusterName The name of the Hybrid AKS cluster.
     * @param hybridAksClusterRestartNodeParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> restartNodeAsync(
        String resourceGroupName,
        String hybridAksClusterName,
        HybridAksClusterRestartNodeParameters hybridAksClusterRestartNodeParameters,
        Context context) {
        return beginRestartNodeAsync(
                resourceGroupName, hybridAksClusterName, hybridAksClusterRestartNodeParameters, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Restart a targeted node.
     *
     * <p>Restart a targeted node of a Hybrid AKS cluster.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hybridAksClusterName The name of the Hybrid AKS cluster.
     * @param hybridAksClusterRestartNodeParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void restartNode(
        String resourceGroupName,
        String hybridAksClusterName,
        HybridAksClusterRestartNodeParameters hybridAksClusterRestartNodeParameters) {
        restartNodeAsync(resourceGroupName, hybridAksClusterName, hybridAksClusterRestartNodeParameters).block();
    }

    /**
     * Restart a targeted node.
     *
     * <p>Restart a targeted node of a Hybrid AKS cluster.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hybridAksClusterName The name of the Hybrid AKS cluster.
     * @param hybridAksClusterRestartNodeParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void restartNode(
        String resourceGroupName,
        String hybridAksClusterName,
        HybridAksClusterRestartNodeParameters hybridAksClusterRestartNodeParameters,
        Context context) {
        restartNodeAsync(resourceGroupName, hybridAksClusterName, hybridAksClusterRestartNodeParameters, context)
            .block();
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return hybridAksClusterList represents a list of Hybrid AKS clusters along with {@link PagedResponse} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<HybridAksClusterInner>> listBySubscriptionNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listBySubscriptionNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<HybridAksClusterInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return hybridAksClusterList represents a list of Hybrid AKS clusters along with {@link PagedResponse} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<HybridAksClusterInner>> listBySubscriptionNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listBySubscriptionNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return hybridAksClusterList represents a list of Hybrid AKS clusters along with {@link PagedResponse} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<HybridAksClusterInner>> listByResourceGroupNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByResourceGroupNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<HybridAksClusterInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return hybridAksClusterList represents a list of Hybrid AKS clusters along with {@link PagedResponse} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<HybridAksClusterInner>> listByResourceGroupNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByResourceGroupNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }
}
