// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.networkcloud.models.ExtendedLocation;
import com.azure.resourcemanager.networkcloud.models.HybridAksClusterDetailedStatus;
import com.azure.resourcemanager.networkcloud.models.HybridAksClusterProvisioningState;
import com.azure.resourcemanager.networkcloud.models.NodeConfiguration;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/**
 * HybridAksCluster represents the additional details regarding the Hybrid AKS cluster.
 *
 * <p>The details are specific to the Network Cloud use of the Hybrid AKS cluster.
 */
@Fluent
public final class HybridAksClusterInner extends Resource {
    /*
     * ExtendedLocation represents the Azure custom location where the resource will be created.
     *
     * The extended location of the cluster associated with the resource.
     */
    @JsonProperty(value = "extendedLocation", required = true)
    private ExtendedLocation extendedLocation;

    /*
     * HybridAksClusterProperties represents the properties of Hybrid AKS cluster resource.
     *
     * The list of the resource properties.
     */
    @JsonProperty(value = "properties", required = true)
    private HybridAksClusterProperties innerProperties = new HybridAksClusterProperties();

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /** Creates an instance of HybridAksClusterInner class. */
    public HybridAksClusterInner() {
    }

    /**
     * Get the extendedLocation property: ExtendedLocation represents the Azure custom location where the resource will
     * be created.
     *
     * <p>The extended location of the cluster associated with the resource.
     *
     * @return the extendedLocation value.
     */
    public ExtendedLocation extendedLocation() {
        return this.extendedLocation;
    }

    /**
     * Set the extendedLocation property: ExtendedLocation represents the Azure custom location where the resource will
     * be created.
     *
     * <p>The extended location of the cluster associated with the resource.
     *
     * @param extendedLocation the extendedLocation value to set.
     * @return the HybridAksClusterInner object itself.
     */
    public HybridAksClusterInner withExtendedLocation(ExtendedLocation extendedLocation) {
        this.extendedLocation = extendedLocation;
        return this;
    }

    /**
     * Get the innerProperties property: HybridAksClusterProperties represents the properties of Hybrid AKS cluster
     * resource.
     *
     * <p>The list of the resource properties.
     *
     * @return the innerProperties value.
     */
    private HybridAksClusterProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     *
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /** {@inheritDoc} */
    @Override
    public HybridAksClusterInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public HybridAksClusterInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the associatedNetworkIds property: The list of resource IDs for the workload networks associated with the
     * Hybrid AKS cluster. It can be any of l2Networks, l3Networks, or trunkedNetworks resources. This field will also
     * contain one cloudServicesNetwork and one defaultCniNetwork.
     *
     * @return the associatedNetworkIds value.
     */
    public List<String> associatedNetworkIds() {
        return this.innerProperties() == null ? null : this.innerProperties().associatedNetworkIds();
    }

    /**
     * Set the associatedNetworkIds property: The list of resource IDs for the workload networks associated with the
     * Hybrid AKS cluster. It can be any of l2Networks, l3Networks, or trunkedNetworks resources. This field will also
     * contain one cloudServicesNetwork and one defaultCniNetwork.
     *
     * @param associatedNetworkIds the associatedNetworkIds value to set.
     * @return the HybridAksClusterInner object itself.
     */
    public HybridAksClusterInner withAssociatedNetworkIds(List<String> associatedNetworkIds) {
        if (this.innerProperties() == null) {
            this.innerProperties = new HybridAksClusterProperties();
        }
        this.innerProperties().withAssociatedNetworkIds(associatedNetworkIds);
        return this;
    }

    /**
     * Get the cloudServicesNetworkId property: The resource ID of the associated cloud services network.
     *
     * @return the cloudServicesNetworkId value.
     */
    public String cloudServicesNetworkId() {
        return this.innerProperties() == null ? null : this.innerProperties().cloudServicesNetworkId();
    }

    /**
     * Get the clusterId property: The resource ID of the Network Cloud cluster hosting the Hybrid AKS cluster.
     *
     * @return the clusterId value.
     */
    public String clusterId() {
        return this.innerProperties() == null ? null : this.innerProperties().clusterId();
    }

    /**
     * Get the controlPlaneCount property: The number of control plane node VMs.
     *
     * @return the controlPlaneCount value.
     */
    public long controlPlaneCount() {
        return this.innerProperties() == null ? 0L : this.innerProperties().controlPlaneCount();
    }

    /**
     * Set the controlPlaneCount property: The number of control plane node VMs.
     *
     * @param controlPlaneCount the controlPlaneCount value to set.
     * @return the HybridAksClusterInner object itself.
     */
    public HybridAksClusterInner withControlPlaneCount(long controlPlaneCount) {
        if (this.innerProperties() == null) {
            this.innerProperties = new HybridAksClusterProperties();
        }
        this.innerProperties().withControlPlaneCount(controlPlaneCount);
        return this;
    }

    /**
     * Get the controlPlaneNodes property: The list of node configurations detailing associated VMs that are part of the
     * control plane nodes of this Hybrid AKS cluster.
     *
     * @return the controlPlaneNodes value.
     */
    public List<NodeConfiguration> controlPlaneNodes() {
        return this.innerProperties() == null ? null : this.innerProperties().controlPlaneNodes();
    }

    /**
     * Get the defaultCniNetworkId property: The resource ID of the associated default CNI network.
     *
     * @return the defaultCniNetworkId value.
     */
    public String defaultCniNetworkId() {
        return this.innerProperties() == null ? null : this.innerProperties().defaultCniNetworkId();
    }

    /**
     * Get the detailedStatus property: The more detailed status of this Hybrid AKS cluster.
     *
     * @return the detailedStatus value.
     */
    public HybridAksClusterDetailedStatus detailedStatus() {
        return this.innerProperties() == null ? null : this.innerProperties().detailedStatus();
    }

    /**
     * Get the detailedStatusMessage property: The descriptive message about the current detailed status.
     *
     * @return the detailedStatusMessage value.
     */
    public String detailedStatusMessage() {
        return this.innerProperties() == null ? null : this.innerProperties().detailedStatusMessage();
    }

    /**
     * Get the hybridAksProvisionedClusterId property: The resource ID of the Hybrid AKS cluster that this additional
     * information is for.
     *
     * @return the hybridAksProvisionedClusterId value.
     */
    public String hybridAksProvisionedClusterId() {
        return this.innerProperties() == null ? null : this.innerProperties().hybridAksProvisionedClusterId();
    }

    /**
     * Set the hybridAksProvisionedClusterId property: The resource ID of the Hybrid AKS cluster that this additional
     * information is for.
     *
     * @param hybridAksProvisionedClusterId the hybridAksProvisionedClusterId value to set.
     * @return the HybridAksClusterInner object itself.
     */
    public HybridAksClusterInner withHybridAksProvisionedClusterId(String hybridAksProvisionedClusterId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new HybridAksClusterProperties();
        }
        this.innerProperties().withHybridAksProvisionedClusterId(hybridAksProvisionedClusterId);
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state of the Hybrid AKS cluster resource.
     *
     * @return the provisioningState value.
     */
    public HybridAksClusterProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the volumes property: The resource IDs of volumes that are attached to the Hybrid AKS cluster.
     *
     * @return the volumes value.
     */
    public List<String> volumes() {
        return this.innerProperties() == null ? null : this.innerProperties().volumes();
    }

    /**
     * Get the workerCount property: The number of worker node VMs.
     *
     * @return the workerCount value.
     */
    public long workerCount() {
        return this.innerProperties() == null ? 0L : this.innerProperties().workerCount();
    }

    /**
     * Set the workerCount property: The number of worker node VMs.
     *
     * @param workerCount the workerCount value to set.
     * @return the HybridAksClusterInner object itself.
     */
    public HybridAksClusterInner withWorkerCount(long workerCount) {
        if (this.innerProperties() == null) {
            this.innerProperties = new HybridAksClusterProperties();
        }
        this.innerProperties().withWorkerCount(workerCount);
        return this;
    }

    /**
     * Get the workerNodes property: The list of node configurations detailing associated VMs that are part of the
     * worker nodes of this Hybrid AKS cluster.
     *
     * @return the workerNodes value.
     */
    public List<NodeConfiguration> workerNodes() {
        return this.innerProperties() == null ? null : this.innerProperties().workerNodes();
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (extendedLocation() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property extendedLocation in model HybridAksClusterInner"));
        } else {
            extendedLocation().validate();
        }
        if (innerProperties() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property innerProperties in model HybridAksClusterInner"));
        } else {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(HybridAksClusterInner.class);
}
