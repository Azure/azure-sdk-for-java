// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * OsDisk represents configuration of the boot disk.
 */
@Fluent
public final class OsDisk implements JsonSerializable<OsDisk> {
    /*
     * The strategy for creating the OS disk.
     */
    private OsDiskCreateOption createOption;

    /*
     * The strategy for deleting the OS disk.
     */
    private OsDiskDeleteOption deleteOption;

    /*
     * The size of the disk. Required if the createOption is Ephemeral. Allocations are measured in gibibytes.
     */
    private long diskSizeGB;

    /**
     * Creates an instance of OsDisk class.
     */
    public OsDisk() {
    }

    /**
     * Get the createOption property: The strategy for creating the OS disk.
     * 
     * @return the createOption value.
     */
    public OsDiskCreateOption createOption() {
        return this.createOption;
    }

    /**
     * Set the createOption property: The strategy for creating the OS disk.
     * 
     * @param createOption the createOption value to set.
     * @return the OsDisk object itself.
     */
    public OsDisk withCreateOption(OsDiskCreateOption createOption) {
        this.createOption = createOption;
        return this;
    }

    /**
     * Get the deleteOption property: The strategy for deleting the OS disk.
     * 
     * @return the deleteOption value.
     */
    public OsDiskDeleteOption deleteOption() {
        return this.deleteOption;
    }

    /**
     * Set the deleteOption property: The strategy for deleting the OS disk.
     * 
     * @param deleteOption the deleteOption value to set.
     * @return the OsDisk object itself.
     */
    public OsDisk withDeleteOption(OsDiskDeleteOption deleteOption) {
        this.deleteOption = deleteOption;
        return this;
    }

    /**
     * Get the diskSizeGB property: The size of the disk. Required if the createOption is Ephemeral. Allocations are
     * measured in gibibytes.
     * 
     * @return the diskSizeGB value.
     */
    public long diskSizeGB() {
        return this.diskSizeGB;
    }

    /**
     * Set the diskSizeGB property: The size of the disk. Required if the createOption is Ephemeral. Allocations are
     * measured in gibibytes.
     * 
     * @param diskSizeGB the diskSizeGB value to set.
     * @return the OsDisk object itself.
     */
    public OsDisk withDiskSizeGB(long diskSizeGB) {
        this.diskSizeGB = diskSizeGB;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeLongField("diskSizeGB", this.diskSizeGB);
        jsonWriter.writeStringField("createOption", this.createOption == null ? null : this.createOption.toString());
        jsonWriter.writeStringField("deleteOption", this.deleteOption == null ? null : this.deleteOption.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OsDisk from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OsDisk if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the OsDisk.
     */
    public static OsDisk fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OsDisk deserializedOsDisk = new OsDisk();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("diskSizeGB".equals(fieldName)) {
                    deserializedOsDisk.diskSizeGB = reader.getLong();
                } else if ("createOption".equals(fieldName)) {
                    deserializedOsDisk.createOption = OsDiskCreateOption.fromString(reader.getString());
                } else if ("deleteOption".equals(fieldName)) {
                    deserializedOsDisk.deleteOption = OsDiskDeleteOption.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOsDisk;
        });
    }
}
