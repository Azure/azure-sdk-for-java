// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * BgpServiceLoadBalancerConfiguration represents the configuration of a BGP service load balancer.
 */
@Fluent
public final class BgpServiceLoadBalancerConfiguration
    implements JsonSerializable<BgpServiceLoadBalancerConfiguration> {
    /*
     * The association of IP address pools to the communities and peers, allowing for announcement of IPs.
     */
    private List<BgpAdvertisement> bgpAdvertisements;

    /*
     * The list of additional BgpPeer entities that the Kubernetes cluster will peer with. All peering must be
     * explicitly defined.
     */
    private List<ServiceLoadBalancerBgpPeer> bgpPeers;

    /*
     * The indicator to specify if the load balancer peers with the network fabric.
     */
    private FabricPeeringEnabled fabricPeeringEnabled;

    /*
     * The list of pools of IP addresses that can be allocated to load balancer services.
     */
    private List<IpAddressPool> ipAddressPools;

    /**
     * Creates an instance of BgpServiceLoadBalancerConfiguration class.
     */
    public BgpServiceLoadBalancerConfiguration() {
    }

    /**
     * Get the bgpAdvertisements property: The association of IP address pools to the communities and peers, allowing
     * for announcement of IPs.
     * 
     * @return the bgpAdvertisements value.
     */
    public List<BgpAdvertisement> bgpAdvertisements() {
        return this.bgpAdvertisements;
    }

    /**
     * Set the bgpAdvertisements property: The association of IP address pools to the communities and peers, allowing
     * for announcement of IPs.
     * 
     * @param bgpAdvertisements the bgpAdvertisements value to set.
     * @return the BgpServiceLoadBalancerConfiguration object itself.
     */
    public BgpServiceLoadBalancerConfiguration withBgpAdvertisements(List<BgpAdvertisement> bgpAdvertisements) {
        this.bgpAdvertisements = bgpAdvertisements;
        return this;
    }

    /**
     * Get the bgpPeers property: The list of additional BgpPeer entities that the Kubernetes cluster will peer with.
     * All peering must be explicitly defined.
     * 
     * @return the bgpPeers value.
     */
    public List<ServiceLoadBalancerBgpPeer> bgpPeers() {
        return this.bgpPeers;
    }

    /**
     * Set the bgpPeers property: The list of additional BgpPeer entities that the Kubernetes cluster will peer with.
     * All peering must be explicitly defined.
     * 
     * @param bgpPeers the bgpPeers value to set.
     * @return the BgpServiceLoadBalancerConfiguration object itself.
     */
    public BgpServiceLoadBalancerConfiguration withBgpPeers(List<ServiceLoadBalancerBgpPeer> bgpPeers) {
        this.bgpPeers = bgpPeers;
        return this;
    }

    /**
     * Get the fabricPeeringEnabled property: The indicator to specify if the load balancer peers with the network
     * fabric.
     * 
     * @return the fabricPeeringEnabled value.
     */
    public FabricPeeringEnabled fabricPeeringEnabled() {
        return this.fabricPeeringEnabled;
    }

    /**
     * Set the fabricPeeringEnabled property: The indicator to specify if the load balancer peers with the network
     * fabric.
     * 
     * @param fabricPeeringEnabled the fabricPeeringEnabled value to set.
     * @return the BgpServiceLoadBalancerConfiguration object itself.
     */
    public BgpServiceLoadBalancerConfiguration withFabricPeeringEnabled(FabricPeeringEnabled fabricPeeringEnabled) {
        this.fabricPeeringEnabled = fabricPeeringEnabled;
        return this;
    }

    /**
     * Get the ipAddressPools property: The list of pools of IP addresses that can be allocated to load balancer
     * services.
     * 
     * @return the ipAddressPools value.
     */
    public List<IpAddressPool> ipAddressPools() {
        return this.ipAddressPools;
    }

    /**
     * Set the ipAddressPools property: The list of pools of IP addresses that can be allocated to load balancer
     * services.
     * 
     * @param ipAddressPools the ipAddressPools value to set.
     * @return the BgpServiceLoadBalancerConfiguration object itself.
     */
    public BgpServiceLoadBalancerConfiguration withIpAddressPools(List<IpAddressPool> ipAddressPools) {
        this.ipAddressPools = ipAddressPools;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (bgpAdvertisements() != null) {
            bgpAdvertisements().forEach(e -> e.validate());
        }
        if (bgpPeers() != null) {
            bgpPeers().forEach(e -> e.validate());
        }
        if (ipAddressPools() != null) {
            ipAddressPools().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("bgpAdvertisements", this.bgpAdvertisements,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("bgpPeers", this.bgpPeers, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("fabricPeeringEnabled",
            this.fabricPeeringEnabled == null ? null : this.fabricPeeringEnabled.toString());
        jsonWriter.writeArrayField("ipAddressPools", this.ipAddressPools,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BgpServiceLoadBalancerConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BgpServiceLoadBalancerConfiguration if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the BgpServiceLoadBalancerConfiguration.
     */
    public static BgpServiceLoadBalancerConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BgpServiceLoadBalancerConfiguration deserializedBgpServiceLoadBalancerConfiguration
                = new BgpServiceLoadBalancerConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("bgpAdvertisements".equals(fieldName)) {
                    List<BgpAdvertisement> bgpAdvertisements
                        = reader.readArray(reader1 -> BgpAdvertisement.fromJson(reader1));
                    deserializedBgpServiceLoadBalancerConfiguration.bgpAdvertisements = bgpAdvertisements;
                } else if ("bgpPeers".equals(fieldName)) {
                    List<ServiceLoadBalancerBgpPeer> bgpPeers
                        = reader.readArray(reader1 -> ServiceLoadBalancerBgpPeer.fromJson(reader1));
                    deserializedBgpServiceLoadBalancerConfiguration.bgpPeers = bgpPeers;
                } else if ("fabricPeeringEnabled".equals(fieldName)) {
                    deserializedBgpServiceLoadBalancerConfiguration.fabricPeeringEnabled
                        = FabricPeeringEnabled.fromString(reader.getString());
                } else if ("ipAddressPools".equals(fieldName)) {
                    List<IpAddressPool> ipAddressPools = reader.readArray(reader1 -> IpAddressPool.fromJson(reader1));
                    deserializedBgpServiceLoadBalancerConfiguration.ipAddressPools = ipAddressPools;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBgpServiceLoadBalancerConfiguration;
        });
    }
}
