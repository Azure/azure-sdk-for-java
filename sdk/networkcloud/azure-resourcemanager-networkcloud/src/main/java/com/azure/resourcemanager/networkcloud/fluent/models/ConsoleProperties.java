// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.networkcloud.models.ConsoleDetailedStatus;
import com.azure.resourcemanager.networkcloud.models.ConsoleEnabled;
import com.azure.resourcemanager.networkcloud.models.ConsoleProvisioningState;
import com.azure.resourcemanager.networkcloud.models.SshPublicKey;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * ConsoleProperties represents the properties of the virtual machine console.
 */
@Fluent
public final class ConsoleProperties implements JsonSerializable<ConsoleProperties> {
    /*
     * The more detailed status of the console.
     */
    private ConsoleDetailedStatus detailedStatus;

    /*
     * The descriptive message about the current detailed status.
     */
    private String detailedStatusMessage;

    /*
     * The indicator of whether the console access is enabled.
     */
    private ConsoleEnabled enabled;

    /*
     * The date and time after which the key will be disallowed access.
     */
    private OffsetDateTime expiration;

    /*
     * The resource ID of the private link service that is used to provide virtual machine console access.
     */
    private String privateLinkServiceId;

    /*
     * The provisioning state of the virtual machine console.
     */
    private ConsoleProvisioningState provisioningState;

    /*
     * The SSH public key that will be provisioned for user access. The user is expected to have the corresponding SSH
     * private key for logging in.
     */
    private SshPublicKey sshPublicKey;

    /*
     * The unique identifier for the virtual machine that is used to access the console.
     */
    private String virtualMachineAccessId;

    /**
     * Creates an instance of ConsoleProperties class.
     */
    public ConsoleProperties() {
    }

    /**
     * Get the detailedStatus property: The more detailed status of the console.
     * 
     * @return the detailedStatus value.
     */
    public ConsoleDetailedStatus detailedStatus() {
        return this.detailedStatus;
    }

    /**
     * Get the detailedStatusMessage property: The descriptive message about the current detailed status.
     * 
     * @return the detailedStatusMessage value.
     */
    public String detailedStatusMessage() {
        return this.detailedStatusMessage;
    }

    /**
     * Get the enabled property: The indicator of whether the console access is enabled.
     * 
     * @return the enabled value.
     */
    public ConsoleEnabled enabled() {
        return this.enabled;
    }

    /**
     * Set the enabled property: The indicator of whether the console access is enabled.
     * 
     * @param enabled the enabled value to set.
     * @return the ConsoleProperties object itself.
     */
    public ConsoleProperties withEnabled(ConsoleEnabled enabled) {
        this.enabled = enabled;
        return this;
    }

    /**
     * Get the expiration property: The date and time after which the key will be disallowed access.
     * 
     * @return the expiration value.
     */
    public OffsetDateTime expiration() {
        return this.expiration;
    }

    /**
     * Set the expiration property: The date and time after which the key will be disallowed access.
     * 
     * @param expiration the expiration value to set.
     * @return the ConsoleProperties object itself.
     */
    public ConsoleProperties withExpiration(OffsetDateTime expiration) {
        this.expiration = expiration;
        return this;
    }

    /**
     * Get the privateLinkServiceId property: The resource ID of the private link service that is used to provide
     * virtual machine console access.
     * 
     * @return the privateLinkServiceId value.
     */
    public String privateLinkServiceId() {
        return this.privateLinkServiceId;
    }

    /**
     * Get the provisioningState property: The provisioning state of the virtual machine console.
     * 
     * @return the provisioningState value.
     */
    public ConsoleProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the sshPublicKey property: The SSH public key that will be provisioned for user access. The user is expected
     * to have the corresponding SSH private key for logging in.
     * 
     * @return the sshPublicKey value.
     */
    public SshPublicKey sshPublicKey() {
        return this.sshPublicKey;
    }

    /**
     * Set the sshPublicKey property: The SSH public key that will be provisioned for user access. The user is expected
     * to have the corresponding SSH private key for logging in.
     * 
     * @param sshPublicKey the sshPublicKey value to set.
     * @return the ConsoleProperties object itself.
     */
    public ConsoleProperties withSshPublicKey(SshPublicKey sshPublicKey) {
        this.sshPublicKey = sshPublicKey;
        return this;
    }

    /**
     * Get the virtualMachineAccessId property: The unique identifier for the virtual machine that is used to access the
     * console.
     * 
     * @return the virtualMachineAccessId value.
     */
    public String virtualMachineAccessId() {
        return this.virtualMachineAccessId;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (enabled() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property enabled in model ConsoleProperties"));
        }
        if (sshPublicKey() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property sshPublicKey in model ConsoleProperties"));
        } else {
            sshPublicKey().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ConsoleProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("enabled", this.enabled == null ? null : this.enabled.toString());
        jsonWriter.writeJsonField("sshPublicKey", this.sshPublicKey);
        jsonWriter.writeStringField("expiration",
            this.expiration == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.expiration));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ConsoleProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ConsoleProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ConsoleProperties.
     */
    public static ConsoleProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ConsoleProperties deserializedConsoleProperties = new ConsoleProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("enabled".equals(fieldName)) {
                    deserializedConsoleProperties.enabled = ConsoleEnabled.fromString(reader.getString());
                } else if ("sshPublicKey".equals(fieldName)) {
                    deserializedConsoleProperties.sshPublicKey = SshPublicKey.fromJson(reader);
                } else if ("detailedStatus".equals(fieldName)) {
                    deserializedConsoleProperties.detailedStatus = ConsoleDetailedStatus.fromString(reader.getString());
                } else if ("detailedStatusMessage".equals(fieldName)) {
                    deserializedConsoleProperties.detailedStatusMessage = reader.getString();
                } else if ("expiration".equals(fieldName)) {
                    deserializedConsoleProperties.expiration = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("privateLinkServiceId".equals(fieldName)) {
                    deserializedConsoleProperties.privateLinkServiceId = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedConsoleProperties.provisioningState
                        = ConsoleProvisioningState.fromString(reader.getString());
                } else if ("virtualMachineAccessId".equals(fieldName)) {
                    deserializedConsoleProperties.virtualMachineAccessId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedConsoleProperties;
        });
    }
}
