// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Type Deprecated. Will be removed in an upcoming version. LldpNeighbor represents the details about the device
 * connected to the NIC.
 */
@Immutable
public final class LldpNeighbor implements JsonSerializable<LldpNeighbor> {
    /*
     * The descriptive information about the port on the connected device.
     */
    private String portDescription;

    /*
     * The system-assigned name of the port on the connected device.
     */
    private String portName;

    /*
     * The descriptive information about the connected device.
     */
    private String systemDescription;

    /*
     * The system-assigned name of the connected device.
     */
    private String systemName;

    /**
     * Creates an instance of LldpNeighbor class.
     */
    public LldpNeighbor() {
    }

    /**
     * Get the portDescription property: The descriptive information about the port on the connected device.
     * 
     * @return the portDescription value.
     */
    public String portDescription() {
        return this.portDescription;
    }

    /**
     * Get the portName property: The system-assigned name of the port on the connected device.
     * 
     * @return the portName value.
     */
    public String portName() {
        return this.portName;
    }

    /**
     * Get the systemDescription property: The descriptive information about the connected device.
     * 
     * @return the systemDescription value.
     */
    public String systemDescription() {
        return this.systemDescription;
    }

    /**
     * Get the systemName property: The system-assigned name of the connected device.
     * 
     * @return the systemName value.
     */
    public String systemName() {
        return this.systemName;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LldpNeighbor from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LldpNeighbor if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the LldpNeighbor.
     */
    public static LldpNeighbor fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LldpNeighbor deserializedLldpNeighbor = new LldpNeighbor();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("portDescription".equals(fieldName)) {
                    deserializedLldpNeighbor.portDescription = reader.getString();
                } else if ("portName".equals(fieldName)) {
                    deserializedLldpNeighbor.portName = reader.getString();
                } else if ("systemDescription".equals(fieldName)) {
                    deserializedLldpNeighbor.systemDescription = reader.getString();
                } else if ("systemName".equals(fieldName)) {
                    deserializedLldpNeighbor.systemName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLldpNeighbor;
        });
    }
}
