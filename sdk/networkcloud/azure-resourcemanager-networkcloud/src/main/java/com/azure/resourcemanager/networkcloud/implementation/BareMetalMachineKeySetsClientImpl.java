// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.networkcloud.fluent.BareMetalMachineKeySetsClient;
import com.azure.resourcemanager.networkcloud.fluent.models.BareMetalMachineKeySetInner;
import com.azure.resourcemanager.networkcloud.fluent.models.OperationStatusResultInner;
import com.azure.resourcemanager.networkcloud.models.BareMetalMachineKeySetList;
import com.azure.resourcemanager.networkcloud.models.BareMetalMachineKeySetPatchParameters;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in BareMetalMachineKeySetsClient.
 */
public final class BareMetalMachineKeySetsClientImpl implements BareMetalMachineKeySetsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final BareMetalMachineKeySetsService service;

    /**
     * The service client containing this operation class.
     */
    private final NetworkCloudImpl client;

    /**
     * Initializes an instance of BareMetalMachineKeySetsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    BareMetalMachineKeySetsClientImpl(NetworkCloudImpl client) {
        this.service = RestProxy.create(BareMetalMachineKeySetsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for NetworkCloudBareMetalMachineKeySets to be used by the proxy service
     * to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "NetworkCloudBareMeta")
    public interface BareMetalMachineKeySetsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/clusters/{clusterName}/bareMetalMachineKeySets")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<BareMetalMachineKeySetList>> listByCluster(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("clusterName") String clusterName,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/clusters/{clusterName}/bareMetalMachineKeySets")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BareMetalMachineKeySetList> listByClusterSync(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("clusterName") String clusterName,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/clusters/{clusterName}/bareMetalMachineKeySets/{bareMetalMachineKeySetName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<BareMetalMachineKeySetInner>> get(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("clusterName") String clusterName,
            @PathParam("bareMetalMachineKeySetName") String bareMetalMachineKeySetName,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/clusters/{clusterName}/bareMetalMachineKeySets/{bareMetalMachineKeySetName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BareMetalMachineKeySetInner> getSync(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("clusterName") String clusterName,
            @PathParam("bareMetalMachineKeySetName") String bareMetalMachineKeySetName,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/clusters/{clusterName}/bareMetalMachineKeySets/{bareMetalMachineKeySetName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("clusterName") String clusterName,
            @PathParam("bareMetalMachineKeySetName") String bareMetalMachineKeySetName,
            @HeaderParam("If-Match") String ifMatch, @HeaderParam("If-None-Match") String ifNoneMatch,
            @BodyParam("application/json") BareMetalMachineKeySetInner bareMetalMachineKeySetParameters,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/clusters/{clusterName}/bareMetalMachineKeySets/{bareMetalMachineKeySetName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> createOrUpdateSync(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("clusterName") String clusterName,
            @PathParam("bareMetalMachineKeySetName") String bareMetalMachineKeySetName,
            @HeaderParam("If-Match") String ifMatch, @HeaderParam("If-None-Match") String ifNoneMatch,
            @BodyParam("application/json") BareMetalMachineKeySetInner bareMetalMachineKeySetParameters,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/clusters/{clusterName}/bareMetalMachineKeySets/{bareMetalMachineKeySetName}")
        @ExpectedResponses({ 200, 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("clusterName") String clusterName,
            @PathParam("bareMetalMachineKeySetName") String bareMetalMachineKeySetName,
            @HeaderParam("If-Match") String ifMatch, @HeaderParam("If-None-Match") String ifNoneMatch,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/clusters/{clusterName}/bareMetalMachineKeySets/{bareMetalMachineKeySetName}")
        @ExpectedResponses({ 200, 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> deleteSync(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("clusterName") String clusterName,
            @PathParam("bareMetalMachineKeySetName") String bareMetalMachineKeySetName,
            @HeaderParam("If-Match") String ifMatch, @HeaderParam("If-None-Match") String ifNoneMatch,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/clusters/{clusterName}/bareMetalMachineKeySets/{bareMetalMachineKeySetName}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> update(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("clusterName") String clusterName,
            @PathParam("bareMetalMachineKeySetName") String bareMetalMachineKeySetName,
            @HeaderParam("If-Match") String ifMatch, @HeaderParam("If-None-Match") String ifNoneMatch,
            @BodyParam("application/json") BareMetalMachineKeySetPatchParameters bareMetalMachineKeySetUpdateParameters,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/clusters/{clusterName}/bareMetalMachineKeySets/{bareMetalMachineKeySetName}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> updateSync(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("clusterName") String clusterName,
            @PathParam("bareMetalMachineKeySetName") String bareMetalMachineKeySetName,
            @HeaderParam("If-Match") String ifMatch, @HeaderParam("If-None-Match") String ifNoneMatch,
            @BodyParam("application/json") BareMetalMachineKeySetPatchParameters bareMetalMachineKeySetUpdateParameters,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<BareMetalMachineKeySetList>> listByClusterNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BareMetalMachineKeySetList> listByClusterNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * List bare metal machine key sets of the cluster.
     * 
     * Get a list of bare metal machine key sets for the provided cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of bare metal machine key sets for the provided cluster along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BareMetalMachineKeySetInner>> listByClusterSinglePageAsync(String resourceGroupName,
        String clusterName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterName == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByCluster(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, clusterName, accept, context))
            .<PagedResponse<BareMetalMachineKeySetInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List bare metal machine key sets of the cluster.
     * 
     * Get a list of bare metal machine key sets for the provided cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of bare metal machine key sets for the provided cluster as paginated response with
     * {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<BareMetalMachineKeySetInner> listByClusterAsync(String resourceGroupName, String clusterName) {
        return new PagedFlux<>(() -> listByClusterSinglePageAsync(resourceGroupName, clusterName),
            nextLink -> listByClusterNextSinglePageAsync(nextLink));
    }

    /**
     * List bare metal machine key sets of the cluster.
     * 
     * Get a list of bare metal machine key sets for the provided cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of bare metal machine key sets for the provided cluster along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BareMetalMachineKeySetInner> listByClusterSinglePage(String resourceGroupName,
        String clusterName) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<BareMetalMachineKeySetList> res
            = service.listByClusterSync(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, clusterName, accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List bare metal machine key sets of the cluster.
     * 
     * Get a list of bare metal machine key sets for the provided cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of bare metal machine key sets for the provided cluster along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BareMetalMachineKeySetInner> listByClusterSinglePage(String resourceGroupName,
        String clusterName, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<BareMetalMachineKeySetList> res
            = service.listByClusterSync(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, clusterName, accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List bare metal machine key sets of the cluster.
     * 
     * Get a list of bare metal machine key sets for the provided cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of bare metal machine key sets for the provided cluster as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BareMetalMachineKeySetInner> listByCluster(String resourceGroupName, String clusterName) {
        return new PagedIterable<>(() -> listByClusterSinglePage(resourceGroupName, clusterName),
            nextLink -> listByClusterNextSinglePage(nextLink));
    }

    /**
     * List bare metal machine key sets of the cluster.
     * 
     * Get a list of bare metal machine key sets for the provided cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of bare metal machine key sets for the provided cluster as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BareMetalMachineKeySetInner> listByCluster(String resourceGroupName, String clusterName,
        Context context) {
        return new PagedIterable<>(() -> listByClusterSinglePage(resourceGroupName, clusterName, context),
            nextLink -> listByClusterNextSinglePage(nextLink, context));
    }

    /**
     * Retrieve the bare metal machine key set of the cluster.
     * 
     * Get bare metal machine key set of the provided cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param bareMetalMachineKeySetName The name of the bare metal machine key set.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return bare metal machine key set of the provided cluster along with {@link Response} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<BareMetalMachineKeySetInner>> getWithResponseAsync(String resourceGroupName,
        String clusterName, String bareMetalMachineKeySetName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterName == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        if (bareMetalMachineKeySetName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter bareMetalMachineKeySetName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, clusterName, bareMetalMachineKeySetName, accept,
                context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Retrieve the bare metal machine key set of the cluster.
     * 
     * Get bare metal machine key set of the provided cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param bareMetalMachineKeySetName The name of the bare metal machine key set.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return bare metal machine key set of the provided cluster on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<BareMetalMachineKeySetInner> getAsync(String resourceGroupName, String clusterName,
        String bareMetalMachineKeySetName) {
        return getWithResponseAsync(resourceGroupName, clusterName, bareMetalMachineKeySetName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Retrieve the bare metal machine key set of the cluster.
     * 
     * Get bare metal machine key set of the provided cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param bareMetalMachineKeySetName The name of the bare metal machine key set.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return bare metal machine key set of the provided cluster along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BareMetalMachineKeySetInner> getWithResponse(String resourceGroupName, String clusterName,
        String bareMetalMachineKeySetName, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        if (bareMetalMachineKeySetName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter bareMetalMachineKeySetName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.getSync(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, clusterName, bareMetalMachineKeySetName, accept, context);
    }

    /**
     * Retrieve the bare metal machine key set of the cluster.
     * 
     * Get bare metal machine key set of the provided cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param bareMetalMachineKeySetName The name of the bare metal machine key set.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return bare metal machine key set of the provided cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BareMetalMachineKeySetInner get(String resourceGroupName, String clusterName,
        String bareMetalMachineKeySetName) {
        return getWithResponse(resourceGroupName, clusterName, bareMetalMachineKeySetName, Context.NONE).getValue();
    }

    /**
     * Create or update the bare metal machine key set of the cluster.
     * 
     * Create a new bare metal machine key set or update the existing one for the provided cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param bareMetalMachineKeySetName The name of the bare metal machine key set.
     * @param bareMetalMachineKeySetParameters The request body.
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current resource. Specify
     * the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new record set to be created, but to prevent updating an existing
     * resource. Other values will result in error from server as they are not supported.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return bareMetalMachineKeySet represents the bare metal machine key set along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String clusterName, String bareMetalMachineKeySetName,
        BareMetalMachineKeySetInner bareMetalMachineKeySetParameters, String ifMatch, String ifNoneMatch) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterName == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        if (bareMetalMachineKeySetName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter bareMetalMachineKeySetName is required and cannot be null."));
        }
        if (bareMetalMachineKeySetParameters == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter bareMetalMachineKeySetParameters is required and cannot be null."));
        } else {
            bareMetalMachineKeySetParameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createOrUpdate(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, clusterName, bareMetalMachineKeySetName, ifMatch,
                ifNoneMatch, bareMetalMachineKeySetParameters, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create or update the bare metal machine key set of the cluster.
     * 
     * Create a new bare metal machine key set or update the existing one for the provided cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param bareMetalMachineKeySetName The name of the bare metal machine key set.
     * @param bareMetalMachineKeySetParameters The request body.
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current resource. Specify
     * the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new record set to be created, but to prevent updating an existing
     * resource. Other values will result in error from server as they are not supported.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return bareMetalMachineKeySet represents the bare metal machine key set along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> createOrUpdateWithResponse(String resourceGroupName, String clusterName,
        String bareMetalMachineKeySetName, BareMetalMachineKeySetInner bareMetalMachineKeySetParameters, String ifMatch,
        String ifNoneMatch) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        if (bareMetalMachineKeySetName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter bareMetalMachineKeySetName is required and cannot be null."));
        }
        if (bareMetalMachineKeySetParameters == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter bareMetalMachineKeySetParameters is required and cannot be null."));
        } else {
            bareMetalMachineKeySetParameters.validate();
        }
        final String accept = "application/json";
        return service.createOrUpdateSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, clusterName, bareMetalMachineKeySetName, ifMatch,
            ifNoneMatch, bareMetalMachineKeySetParameters, accept, Context.NONE);
    }

    /**
     * Create or update the bare metal machine key set of the cluster.
     * 
     * Create a new bare metal machine key set or update the existing one for the provided cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param bareMetalMachineKeySetName The name of the bare metal machine key set.
     * @param bareMetalMachineKeySetParameters The request body.
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current resource. Specify
     * the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new record set to be created, but to prevent updating an existing
     * resource. Other values will result in error from server as they are not supported.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return bareMetalMachineKeySet represents the bare metal machine key set along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> createOrUpdateWithResponse(String resourceGroupName, String clusterName,
        String bareMetalMachineKeySetName, BareMetalMachineKeySetInner bareMetalMachineKeySetParameters, String ifMatch,
        String ifNoneMatch, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        if (bareMetalMachineKeySetName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter bareMetalMachineKeySetName is required and cannot be null."));
        }
        if (bareMetalMachineKeySetParameters == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter bareMetalMachineKeySetParameters is required and cannot be null."));
        } else {
            bareMetalMachineKeySetParameters.validate();
        }
        final String accept = "application/json";
        return service.createOrUpdateSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, clusterName, bareMetalMachineKeySetName, ifMatch,
            ifNoneMatch, bareMetalMachineKeySetParameters, accept, context);
    }

    /**
     * Create or update the bare metal machine key set of the cluster.
     * 
     * Create a new bare metal machine key set or update the existing one for the provided cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param bareMetalMachineKeySetName The name of the bare metal machine key set.
     * @param bareMetalMachineKeySetParameters The request body.
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current resource. Specify
     * the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new record set to be created, but to prevent updating an existing
     * resource. Other values will result in error from server as they are not supported.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of bareMetalMachineKeySet represents the bare metal machine key set.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<BareMetalMachineKeySetInner>, BareMetalMachineKeySetInner> beginCreateOrUpdateAsync(
        String resourceGroupName, String clusterName, String bareMetalMachineKeySetName,
        BareMetalMachineKeySetInner bareMetalMachineKeySetParameters, String ifMatch, String ifNoneMatch) {
        Mono<Response<Flux<ByteBuffer>>> mono = createOrUpdateWithResponseAsync(resourceGroupName, clusterName,
            bareMetalMachineKeySetName, bareMetalMachineKeySetParameters, ifMatch, ifNoneMatch);
        return this.client.<BareMetalMachineKeySetInner, BareMetalMachineKeySetInner>getLroResult(mono,
            this.client.getHttpPipeline(), BareMetalMachineKeySetInner.class, BareMetalMachineKeySetInner.class,
            this.client.getContext());
    }

    /**
     * Create or update the bare metal machine key set of the cluster.
     * 
     * Create a new bare metal machine key set or update the existing one for the provided cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param bareMetalMachineKeySetName The name of the bare metal machine key set.
     * @param bareMetalMachineKeySetParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of bareMetalMachineKeySet represents the bare metal machine key set.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<BareMetalMachineKeySetInner>, BareMetalMachineKeySetInner> beginCreateOrUpdateAsync(
        String resourceGroupName, String clusterName, String bareMetalMachineKeySetName,
        BareMetalMachineKeySetInner bareMetalMachineKeySetParameters) {
        final String ifMatch = null;
        final String ifNoneMatch = null;
        Mono<Response<Flux<ByteBuffer>>> mono = createOrUpdateWithResponseAsync(resourceGroupName, clusterName,
            bareMetalMachineKeySetName, bareMetalMachineKeySetParameters, ifMatch, ifNoneMatch);
        return this.client.<BareMetalMachineKeySetInner, BareMetalMachineKeySetInner>getLroResult(mono,
            this.client.getHttpPipeline(), BareMetalMachineKeySetInner.class, BareMetalMachineKeySetInner.class,
            this.client.getContext());
    }

    /**
     * Create or update the bare metal machine key set of the cluster.
     * 
     * Create a new bare metal machine key set or update the existing one for the provided cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param bareMetalMachineKeySetName The name of the bare metal machine key set.
     * @param bareMetalMachineKeySetParameters The request body.
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current resource. Specify
     * the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new record set to be created, but to prevent updating an existing
     * resource. Other values will result in error from server as they are not supported.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of bareMetalMachineKeySet represents the bare metal machine key set.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<BareMetalMachineKeySetInner>, BareMetalMachineKeySetInner> beginCreateOrUpdate(
        String resourceGroupName, String clusterName, String bareMetalMachineKeySetName,
        BareMetalMachineKeySetInner bareMetalMachineKeySetParameters, String ifMatch, String ifNoneMatch) {
        Response<BinaryData> response = createOrUpdateWithResponse(resourceGroupName, clusterName,
            bareMetalMachineKeySetName, bareMetalMachineKeySetParameters, ifMatch, ifNoneMatch);
        return this.client.<BareMetalMachineKeySetInner, BareMetalMachineKeySetInner>getLroResult(response,
            BareMetalMachineKeySetInner.class, BareMetalMachineKeySetInner.class, Context.NONE);
    }

    /**
     * Create or update the bare metal machine key set of the cluster.
     * 
     * Create a new bare metal machine key set or update the existing one for the provided cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param bareMetalMachineKeySetName The name of the bare metal machine key set.
     * @param bareMetalMachineKeySetParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of bareMetalMachineKeySet represents the bare metal machine key set.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<BareMetalMachineKeySetInner>, BareMetalMachineKeySetInner> beginCreateOrUpdate(
        String resourceGroupName, String clusterName, String bareMetalMachineKeySetName,
        BareMetalMachineKeySetInner bareMetalMachineKeySetParameters) {
        final String ifMatch = null;
        final String ifNoneMatch = null;
        Response<BinaryData> response = createOrUpdateWithResponse(resourceGroupName, clusterName,
            bareMetalMachineKeySetName, bareMetalMachineKeySetParameters, ifMatch, ifNoneMatch);
        return this.client.<BareMetalMachineKeySetInner, BareMetalMachineKeySetInner>getLroResult(response,
            BareMetalMachineKeySetInner.class, BareMetalMachineKeySetInner.class, Context.NONE);
    }

    /**
     * Create or update the bare metal machine key set of the cluster.
     * 
     * Create a new bare metal machine key set or update the existing one for the provided cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param bareMetalMachineKeySetName The name of the bare metal machine key set.
     * @param bareMetalMachineKeySetParameters The request body.
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current resource. Specify
     * the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new record set to be created, but to prevent updating an existing
     * resource. Other values will result in error from server as they are not supported.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of bareMetalMachineKeySet represents the bare metal machine key set.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<BareMetalMachineKeySetInner>, BareMetalMachineKeySetInner> beginCreateOrUpdate(
        String resourceGroupName, String clusterName, String bareMetalMachineKeySetName,
        BareMetalMachineKeySetInner bareMetalMachineKeySetParameters, String ifMatch, String ifNoneMatch,
        Context context) {
        Response<BinaryData> response = createOrUpdateWithResponse(resourceGroupName, clusterName,
            bareMetalMachineKeySetName, bareMetalMachineKeySetParameters, ifMatch, ifNoneMatch, context);
        return this.client.<BareMetalMachineKeySetInner, BareMetalMachineKeySetInner>getLroResult(response,
            BareMetalMachineKeySetInner.class, BareMetalMachineKeySetInner.class, context);
    }

    /**
     * Create or update the bare metal machine key set of the cluster.
     * 
     * Create a new bare metal machine key set or update the existing one for the provided cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param bareMetalMachineKeySetName The name of the bare metal machine key set.
     * @param bareMetalMachineKeySetParameters The request body.
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current resource. Specify
     * the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new record set to be created, but to prevent updating an existing
     * resource. Other values will result in error from server as they are not supported.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return bareMetalMachineKeySet represents the bare metal machine key set on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<BareMetalMachineKeySetInner> createOrUpdateAsync(String resourceGroupName, String clusterName,
        String bareMetalMachineKeySetName, BareMetalMachineKeySetInner bareMetalMachineKeySetParameters, String ifMatch,
        String ifNoneMatch) {
        return beginCreateOrUpdateAsync(resourceGroupName, clusterName, bareMetalMachineKeySetName,
            bareMetalMachineKeySetParameters, ifMatch, ifNoneMatch).last()
                .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create or update the bare metal machine key set of the cluster.
     * 
     * Create a new bare metal machine key set or update the existing one for the provided cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param bareMetalMachineKeySetName The name of the bare metal machine key set.
     * @param bareMetalMachineKeySetParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return bareMetalMachineKeySet represents the bare metal machine key set on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<BareMetalMachineKeySetInner> createOrUpdateAsync(String resourceGroupName, String clusterName,
        String bareMetalMachineKeySetName, BareMetalMachineKeySetInner bareMetalMachineKeySetParameters) {
        final String ifMatch = null;
        final String ifNoneMatch = null;
        return beginCreateOrUpdateAsync(resourceGroupName, clusterName, bareMetalMachineKeySetName,
            bareMetalMachineKeySetParameters, ifMatch, ifNoneMatch).last()
                .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create or update the bare metal machine key set of the cluster.
     * 
     * Create a new bare metal machine key set or update the existing one for the provided cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param bareMetalMachineKeySetName The name of the bare metal machine key set.
     * @param bareMetalMachineKeySetParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return bareMetalMachineKeySet represents the bare metal machine key set.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BareMetalMachineKeySetInner createOrUpdate(String resourceGroupName, String clusterName,
        String bareMetalMachineKeySetName, BareMetalMachineKeySetInner bareMetalMachineKeySetParameters) {
        final String ifMatch = null;
        final String ifNoneMatch = null;
        return beginCreateOrUpdate(resourceGroupName, clusterName, bareMetalMachineKeySetName,
            bareMetalMachineKeySetParameters, ifMatch, ifNoneMatch).getFinalResult();
    }

    /**
     * Create or update the bare metal machine key set of the cluster.
     * 
     * Create a new bare metal machine key set or update the existing one for the provided cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param bareMetalMachineKeySetName The name of the bare metal machine key set.
     * @param bareMetalMachineKeySetParameters The request body.
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current resource. Specify
     * the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new record set to be created, but to prevent updating an existing
     * resource. Other values will result in error from server as they are not supported.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return bareMetalMachineKeySet represents the bare metal machine key set.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BareMetalMachineKeySetInner createOrUpdate(String resourceGroupName, String clusterName,
        String bareMetalMachineKeySetName, BareMetalMachineKeySetInner bareMetalMachineKeySetParameters, String ifMatch,
        String ifNoneMatch, Context context) {
        return beginCreateOrUpdate(resourceGroupName, clusterName, bareMetalMachineKeySetName,
            bareMetalMachineKeySetParameters, ifMatch, ifNoneMatch, context).getFinalResult();
    }

    /**
     * Delete the bare metal machine key set of the cluster.
     * 
     * Delete the bare metal machine key set of the provided cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param bareMetalMachineKeySetName The name of the bare metal machine key set.
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current resource. Specify
     * the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new record set to be created, but to prevent updating an existing
     * resource. Other values will result in error from server as they are not supported.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName, String clusterName,
        String bareMetalMachineKeySetName, String ifMatch, String ifNoneMatch) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterName == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        if (bareMetalMachineKeySetName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter bareMetalMachineKeySetName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, clusterName, bareMetalMachineKeySetName, ifMatch,
                ifNoneMatch, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete the bare metal machine key set of the cluster.
     * 
     * Delete the bare metal machine key set of the provided cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param bareMetalMachineKeySetName The name of the bare metal machine key set.
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current resource. Specify
     * the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new record set to be created, but to prevent updating an existing
     * resource. Other values will result in error from server as they are not supported.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> deleteWithResponse(String resourceGroupName, String clusterName,
        String bareMetalMachineKeySetName, String ifMatch, String ifNoneMatch) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        if (bareMetalMachineKeySetName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter bareMetalMachineKeySetName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.deleteSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, clusterName, bareMetalMachineKeySetName, ifMatch,
            ifNoneMatch, accept, Context.NONE);
    }

    /**
     * Delete the bare metal machine key set of the cluster.
     * 
     * Delete the bare metal machine key set of the provided cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param bareMetalMachineKeySetName The name of the bare metal machine key set.
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current resource. Specify
     * the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new record set to be created, but to prevent updating an existing
     * resource. Other values will result in error from server as they are not supported.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> deleteWithResponse(String resourceGroupName, String clusterName,
        String bareMetalMachineKeySetName, String ifMatch, String ifNoneMatch, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        if (bareMetalMachineKeySetName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter bareMetalMachineKeySetName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.deleteSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, clusterName, bareMetalMachineKeySetName, ifMatch,
            ifNoneMatch, accept, context);
    }

    /**
     * Delete the bare metal machine key set of the cluster.
     * 
     * Delete the bare metal machine key set of the provided cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param bareMetalMachineKeySetName The name of the bare metal machine key set.
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current resource. Specify
     * the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new record set to be created, but to prevent updating an existing
     * resource. Other values will result in error from server as they are not supported.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<OperationStatusResultInner>, OperationStatusResultInner> beginDeleteAsync(
        String resourceGroupName, String clusterName, String bareMetalMachineKeySetName, String ifMatch,
        String ifNoneMatch) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = deleteWithResponseAsync(resourceGroupName, clusterName, bareMetalMachineKeySetName, ifMatch, ifNoneMatch);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(mono,
            this.client.getHttpPipeline(), OperationStatusResultInner.class, OperationStatusResultInner.class,
            this.client.getContext());
    }

    /**
     * Delete the bare metal machine key set of the cluster.
     * 
     * Delete the bare metal machine key set of the provided cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param bareMetalMachineKeySetName The name of the bare metal machine key set.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginDeleteAsync(String resourceGroupName, String clusterName, String bareMetalMachineKeySetName) {
        final String ifMatch = null;
        final String ifNoneMatch = null;
        Mono<Response<Flux<ByteBuffer>>> mono
            = deleteWithResponseAsync(resourceGroupName, clusterName, bareMetalMachineKeySetName, ifMatch, ifNoneMatch);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(mono,
            this.client.getHttpPipeline(), OperationStatusResultInner.class, OperationStatusResultInner.class,
            this.client.getContext());
    }

    /**
     * Delete the bare metal machine key set of the cluster.
     * 
     * Delete the bare metal machine key set of the provided cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param bareMetalMachineKeySetName The name of the bare metal machine key set.
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current resource. Specify
     * the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new record set to be created, but to prevent updating an existing
     * resource. Other values will result in error from server as they are not supported.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner> beginDelete(
        String resourceGroupName, String clusterName, String bareMetalMachineKeySetName, String ifMatch,
        String ifNoneMatch) {
        Response<BinaryData> response
            = deleteWithResponse(resourceGroupName, clusterName, bareMetalMachineKeySetName, ifMatch, ifNoneMatch);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(response,
            OperationStatusResultInner.class, OperationStatusResultInner.class, Context.NONE);
    }

    /**
     * Delete the bare metal machine key set of the cluster.
     * 
     * Delete the bare metal machine key set of the provided cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param bareMetalMachineKeySetName The name of the bare metal machine key set.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginDelete(String resourceGroupName, String clusterName, String bareMetalMachineKeySetName) {
        final String ifMatch = null;
        final String ifNoneMatch = null;
        Response<BinaryData> response
            = deleteWithResponse(resourceGroupName, clusterName, bareMetalMachineKeySetName, ifMatch, ifNoneMatch);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(response,
            OperationStatusResultInner.class, OperationStatusResultInner.class, Context.NONE);
    }

    /**
     * Delete the bare metal machine key set of the cluster.
     * 
     * Delete the bare metal machine key set of the provided cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param bareMetalMachineKeySetName The name of the bare metal machine key set.
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current resource. Specify
     * the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new record set to be created, but to prevent updating an existing
     * resource. Other values will result in error from server as they are not supported.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner> beginDelete(
        String resourceGroupName, String clusterName, String bareMetalMachineKeySetName, String ifMatch,
        String ifNoneMatch, Context context) {
        Response<BinaryData> response = deleteWithResponse(resourceGroupName, clusterName, bareMetalMachineKeySetName,
            ifMatch, ifNoneMatch, context);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(response,
            OperationStatusResultInner.class, OperationStatusResultInner.class, context);
    }

    /**
     * Delete the bare metal machine key set of the cluster.
     * 
     * Delete the bare metal machine key set of the provided cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param bareMetalMachineKeySetName The name of the bare metal machine key set.
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current resource. Specify
     * the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new record set to be created, but to prevent updating an existing
     * resource. Other values will result in error from server as they are not supported.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<OperationStatusResultInner> deleteAsync(String resourceGroupName, String clusterName,
        String bareMetalMachineKeySetName, String ifMatch, String ifNoneMatch) {
        return beginDeleteAsync(resourceGroupName, clusterName, bareMetalMachineKeySetName, ifMatch, ifNoneMatch).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete the bare metal machine key set of the cluster.
     * 
     * Delete the bare metal machine key set of the provided cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param bareMetalMachineKeySetName The name of the bare metal machine key set.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<OperationStatusResultInner> deleteAsync(String resourceGroupName, String clusterName,
        String bareMetalMachineKeySetName) {
        final String ifMatch = null;
        final String ifNoneMatch = null;
        return beginDeleteAsync(resourceGroupName, clusterName, bareMetalMachineKeySetName, ifMatch, ifNoneMatch).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete the bare metal machine key set of the cluster.
     * 
     * Delete the bare metal machine key set of the provided cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param bareMetalMachineKeySetName The name of the bare metal machine key set.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OperationStatusResultInner delete(String resourceGroupName, String clusterName,
        String bareMetalMachineKeySetName) {
        final String ifMatch = null;
        final String ifNoneMatch = null;
        return beginDelete(resourceGroupName, clusterName, bareMetalMachineKeySetName, ifMatch, ifNoneMatch)
            .getFinalResult();
    }

    /**
     * Delete the bare metal machine key set of the cluster.
     * 
     * Delete the bare metal machine key set of the provided cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param bareMetalMachineKeySetName The name of the bare metal machine key set.
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current resource. Specify
     * the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new record set to be created, but to prevent updating an existing
     * resource. Other values will result in error from server as they are not supported.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OperationStatusResultInner delete(String resourceGroupName, String clusterName,
        String bareMetalMachineKeySetName, String ifMatch, String ifNoneMatch, Context context) {
        return beginDelete(resourceGroupName, clusterName, bareMetalMachineKeySetName, ifMatch, ifNoneMatch, context)
            .getFinalResult();
    }

    /**
     * Patch bare metal machine key set of the cluster.
     * 
     * Patch properties of bare metal machine key set for the provided cluster, or update the tags associated with it.
     * Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param bareMetalMachineKeySetName The name of the bare metal machine key set.
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current resource. Specify
     * the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new record set to be created, but to prevent updating an existing
     * resource. Other values will result in error from server as they are not supported.
     * @param bareMetalMachineKeySetUpdateParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return bareMetalMachineKeySet represents the bare metal machine key set along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String resourceGroupName, String clusterName,
        String bareMetalMachineKeySetName, String ifMatch, String ifNoneMatch,
        BareMetalMachineKeySetPatchParameters bareMetalMachineKeySetUpdateParameters) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterName == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        if (bareMetalMachineKeySetName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter bareMetalMachineKeySetName is required and cannot be null."));
        }
        if (bareMetalMachineKeySetUpdateParameters != null) {
            bareMetalMachineKeySetUpdateParameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.update(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, clusterName, bareMetalMachineKeySetName, ifMatch,
                ifNoneMatch, bareMetalMachineKeySetUpdateParameters, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Patch bare metal machine key set of the cluster.
     * 
     * Patch properties of bare metal machine key set for the provided cluster, or update the tags associated with it.
     * Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param bareMetalMachineKeySetName The name of the bare metal machine key set.
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current resource. Specify
     * the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new record set to be created, but to prevent updating an existing
     * resource. Other values will result in error from server as they are not supported.
     * @param bareMetalMachineKeySetUpdateParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return bareMetalMachineKeySet represents the bare metal machine key set along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> updateWithResponse(String resourceGroupName, String clusterName,
        String bareMetalMachineKeySetName, String ifMatch, String ifNoneMatch,
        BareMetalMachineKeySetPatchParameters bareMetalMachineKeySetUpdateParameters) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        if (bareMetalMachineKeySetName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter bareMetalMachineKeySetName is required and cannot be null."));
        }
        if (bareMetalMachineKeySetUpdateParameters != null) {
            bareMetalMachineKeySetUpdateParameters.validate();
        }
        final String accept = "application/json";
        return service.updateSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, clusterName, bareMetalMachineKeySetName, ifMatch,
            ifNoneMatch, bareMetalMachineKeySetUpdateParameters, accept, Context.NONE);
    }

    /**
     * Patch bare metal machine key set of the cluster.
     * 
     * Patch properties of bare metal machine key set for the provided cluster, or update the tags associated with it.
     * Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param bareMetalMachineKeySetName The name of the bare metal machine key set.
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current resource. Specify
     * the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new record set to be created, but to prevent updating an existing
     * resource. Other values will result in error from server as they are not supported.
     * @param bareMetalMachineKeySetUpdateParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return bareMetalMachineKeySet represents the bare metal machine key set along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> updateWithResponse(String resourceGroupName, String clusterName,
        String bareMetalMachineKeySetName, String ifMatch, String ifNoneMatch,
        BareMetalMachineKeySetPatchParameters bareMetalMachineKeySetUpdateParameters, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        if (bareMetalMachineKeySetName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter bareMetalMachineKeySetName is required and cannot be null."));
        }
        if (bareMetalMachineKeySetUpdateParameters != null) {
            bareMetalMachineKeySetUpdateParameters.validate();
        }
        final String accept = "application/json";
        return service.updateSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, clusterName, bareMetalMachineKeySetName, ifMatch,
            ifNoneMatch, bareMetalMachineKeySetUpdateParameters, accept, context);
    }

    /**
     * Patch bare metal machine key set of the cluster.
     * 
     * Patch properties of bare metal machine key set for the provided cluster, or update the tags associated with it.
     * Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param bareMetalMachineKeySetName The name of the bare metal machine key set.
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current resource. Specify
     * the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new record set to be created, but to prevent updating an existing
     * resource. Other values will result in error from server as they are not supported.
     * @param bareMetalMachineKeySetUpdateParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of bareMetalMachineKeySet represents the bare metal machine key set.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<BareMetalMachineKeySetInner>, BareMetalMachineKeySetInner> beginUpdateAsync(
        String resourceGroupName, String clusterName, String bareMetalMachineKeySetName, String ifMatch,
        String ifNoneMatch, BareMetalMachineKeySetPatchParameters bareMetalMachineKeySetUpdateParameters) {
        Mono<Response<Flux<ByteBuffer>>> mono = updateWithResponseAsync(resourceGroupName, clusterName,
            bareMetalMachineKeySetName, ifMatch, ifNoneMatch, bareMetalMachineKeySetUpdateParameters);
        return this.client.<BareMetalMachineKeySetInner, BareMetalMachineKeySetInner>getLroResult(mono,
            this.client.getHttpPipeline(), BareMetalMachineKeySetInner.class, BareMetalMachineKeySetInner.class,
            this.client.getContext());
    }

    /**
     * Patch bare metal machine key set of the cluster.
     * 
     * Patch properties of bare metal machine key set for the provided cluster, or update the tags associated with it.
     * Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param bareMetalMachineKeySetName The name of the bare metal machine key set.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of bareMetalMachineKeySet represents the bare metal machine key set.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<BareMetalMachineKeySetInner>, BareMetalMachineKeySetInner>
        beginUpdateAsync(String resourceGroupName, String clusterName, String bareMetalMachineKeySetName) {
        final String ifMatch = null;
        final String ifNoneMatch = null;
        final BareMetalMachineKeySetPatchParameters bareMetalMachineKeySetUpdateParameters = null;
        Mono<Response<Flux<ByteBuffer>>> mono = updateWithResponseAsync(resourceGroupName, clusterName,
            bareMetalMachineKeySetName, ifMatch, ifNoneMatch, bareMetalMachineKeySetUpdateParameters);
        return this.client.<BareMetalMachineKeySetInner, BareMetalMachineKeySetInner>getLroResult(mono,
            this.client.getHttpPipeline(), BareMetalMachineKeySetInner.class, BareMetalMachineKeySetInner.class,
            this.client.getContext());
    }

    /**
     * Patch bare metal machine key set of the cluster.
     * 
     * Patch properties of bare metal machine key set for the provided cluster, or update the tags associated with it.
     * Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param bareMetalMachineKeySetName The name of the bare metal machine key set.
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current resource. Specify
     * the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new record set to be created, but to prevent updating an existing
     * resource. Other values will result in error from server as they are not supported.
     * @param bareMetalMachineKeySetUpdateParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of bareMetalMachineKeySet represents the bare metal machine key set.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<BareMetalMachineKeySetInner>, BareMetalMachineKeySetInner> beginUpdate(
        String resourceGroupName, String clusterName, String bareMetalMachineKeySetName, String ifMatch,
        String ifNoneMatch, BareMetalMachineKeySetPatchParameters bareMetalMachineKeySetUpdateParameters) {
        Response<BinaryData> response = updateWithResponse(resourceGroupName, clusterName, bareMetalMachineKeySetName,
            ifMatch, ifNoneMatch, bareMetalMachineKeySetUpdateParameters);
        return this.client.<BareMetalMachineKeySetInner, BareMetalMachineKeySetInner>getLroResult(response,
            BareMetalMachineKeySetInner.class, BareMetalMachineKeySetInner.class, Context.NONE);
    }

    /**
     * Patch bare metal machine key set of the cluster.
     * 
     * Patch properties of bare metal machine key set for the provided cluster, or update the tags associated with it.
     * Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param bareMetalMachineKeySetName The name of the bare metal machine key set.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of bareMetalMachineKeySet represents the bare metal machine key set.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<BareMetalMachineKeySetInner>, BareMetalMachineKeySetInner>
        beginUpdate(String resourceGroupName, String clusterName, String bareMetalMachineKeySetName) {
        final String ifMatch = null;
        final String ifNoneMatch = null;
        final BareMetalMachineKeySetPatchParameters bareMetalMachineKeySetUpdateParameters = null;
        Response<BinaryData> response = updateWithResponse(resourceGroupName, clusterName, bareMetalMachineKeySetName,
            ifMatch, ifNoneMatch, bareMetalMachineKeySetUpdateParameters);
        return this.client.<BareMetalMachineKeySetInner, BareMetalMachineKeySetInner>getLroResult(response,
            BareMetalMachineKeySetInner.class, BareMetalMachineKeySetInner.class, Context.NONE);
    }

    /**
     * Patch bare metal machine key set of the cluster.
     * 
     * Patch properties of bare metal machine key set for the provided cluster, or update the tags associated with it.
     * Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param bareMetalMachineKeySetName The name of the bare metal machine key set.
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current resource. Specify
     * the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new record set to be created, but to prevent updating an existing
     * resource. Other values will result in error from server as they are not supported.
     * @param bareMetalMachineKeySetUpdateParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of bareMetalMachineKeySet represents the bare metal machine key set.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<BareMetalMachineKeySetInner>, BareMetalMachineKeySetInner> beginUpdate(
        String resourceGroupName, String clusterName, String bareMetalMachineKeySetName, String ifMatch,
        String ifNoneMatch, BareMetalMachineKeySetPatchParameters bareMetalMachineKeySetUpdateParameters,
        Context context) {
        Response<BinaryData> response = updateWithResponse(resourceGroupName, clusterName, bareMetalMachineKeySetName,
            ifMatch, ifNoneMatch, bareMetalMachineKeySetUpdateParameters, context);
        return this.client.<BareMetalMachineKeySetInner, BareMetalMachineKeySetInner>getLroResult(response,
            BareMetalMachineKeySetInner.class, BareMetalMachineKeySetInner.class, context);
    }

    /**
     * Patch bare metal machine key set of the cluster.
     * 
     * Patch properties of bare metal machine key set for the provided cluster, or update the tags associated with it.
     * Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param bareMetalMachineKeySetName The name of the bare metal machine key set.
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current resource. Specify
     * the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new record set to be created, but to prevent updating an existing
     * resource. Other values will result in error from server as they are not supported.
     * @param bareMetalMachineKeySetUpdateParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return bareMetalMachineKeySet represents the bare metal machine key set on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<BareMetalMachineKeySetInner> updateAsync(String resourceGroupName, String clusterName,
        String bareMetalMachineKeySetName, String ifMatch, String ifNoneMatch,
        BareMetalMachineKeySetPatchParameters bareMetalMachineKeySetUpdateParameters) {
        return beginUpdateAsync(resourceGroupName, clusterName, bareMetalMachineKeySetName, ifMatch, ifNoneMatch,
            bareMetalMachineKeySetUpdateParameters).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Patch bare metal machine key set of the cluster.
     * 
     * Patch properties of bare metal machine key set for the provided cluster, or update the tags associated with it.
     * Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param bareMetalMachineKeySetName The name of the bare metal machine key set.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return bareMetalMachineKeySet represents the bare metal machine key set on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<BareMetalMachineKeySetInner> updateAsync(String resourceGroupName, String clusterName,
        String bareMetalMachineKeySetName) {
        final String ifMatch = null;
        final String ifNoneMatch = null;
        final BareMetalMachineKeySetPatchParameters bareMetalMachineKeySetUpdateParameters = null;
        return beginUpdateAsync(resourceGroupName, clusterName, bareMetalMachineKeySetName, ifMatch, ifNoneMatch,
            bareMetalMachineKeySetUpdateParameters).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Patch bare metal machine key set of the cluster.
     * 
     * Patch properties of bare metal machine key set for the provided cluster, or update the tags associated with it.
     * Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param bareMetalMachineKeySetName The name of the bare metal machine key set.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return bareMetalMachineKeySet represents the bare metal machine key set.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BareMetalMachineKeySetInner update(String resourceGroupName, String clusterName,
        String bareMetalMachineKeySetName) {
        final String ifMatch = null;
        final String ifNoneMatch = null;
        final BareMetalMachineKeySetPatchParameters bareMetalMachineKeySetUpdateParameters = null;
        return beginUpdate(resourceGroupName, clusterName, bareMetalMachineKeySetName, ifMatch, ifNoneMatch,
            bareMetalMachineKeySetUpdateParameters).getFinalResult();
    }

    /**
     * Patch bare metal machine key set of the cluster.
     * 
     * Patch properties of bare metal machine key set for the provided cluster, or update the tags associated with it.
     * Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param bareMetalMachineKeySetName The name of the bare metal machine key set.
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current resource. Specify
     * the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param ifNoneMatch Set to '*' to allow a new record set to be created, but to prevent updating an existing
     * resource. Other values will result in error from server as they are not supported.
     * @param bareMetalMachineKeySetUpdateParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return bareMetalMachineKeySet represents the bare metal machine key set.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BareMetalMachineKeySetInner update(String resourceGroupName, String clusterName,
        String bareMetalMachineKeySetName, String ifMatch, String ifNoneMatch,
        BareMetalMachineKeySetPatchParameters bareMetalMachineKeySetUpdateParameters, Context context) {
        return beginUpdate(resourceGroupName, clusterName, bareMetalMachineKeySetName, ifMatch, ifNoneMatch,
            bareMetalMachineKeySetUpdateParameters, context).getFinalResult();
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return bareMetalMachineKeySetList represents a list of bare metal machine key sets along with
     * {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BareMetalMachineKeySetInner>> listByClusterNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByClusterNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<BareMetalMachineKeySetInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return bareMetalMachineKeySetList represents a list of bare metal machine key sets along with
     * {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BareMetalMachineKeySetInner> listByClusterNextSinglePage(String nextLink) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<BareMetalMachineKeySetList> res
            = service.listByClusterNextSync(nextLink, this.client.getEndpoint(), accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return bareMetalMachineKeySetList represents a list of bare metal machine key sets along with
     * {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BareMetalMachineKeySetInner> listByClusterNextSinglePage(String nextLink, Context context) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<BareMetalMachineKeySetList> res
            = service.listByClusterNextSync(nextLink, this.client.getEndpoint(), accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    private static final ClientLogger LOGGER = new ClientLogger(BareMetalMachineKeySetsClientImpl.class);
}
