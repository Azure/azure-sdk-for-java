// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.networkcloud.models.MachineSkuSlot;
import com.azure.resourcemanager.networkcloud.models.RackSkuProvisioningState;
import com.azure.resourcemanager.networkcloud.models.RackSkuType;
import com.azure.resourcemanager.networkcloud.models.StorageApplianceSkuSlot;
import java.io.IOException;
import java.util.List;

/**
 * RackSkuProperties represents the properties of compute-related hardware for a rack. This supports both aggregator and
 * compute racks.
 */
@Immutable
public final class RackSkuProperties implements JsonSerializable<RackSkuProperties> {
    /*
     * The list of machine SKUs and associated rack slot for the compute-dedicated machines in this rack model.
     */
    private List<MachineSkuSlot> computeMachines;

    /*
     * The list of machine SKUs and associated rack slot for the control-plane dedicated machines in this rack model.
     */
    private List<MachineSkuSlot> controllerMachines;

    /*
     * The free-form text describing the rack.
     */
    private String description;

    /*
     * The maximum number of compute racks supported by an aggregator rack. 0 if this is a compute rack or a rack for a
     * single rack cluster(rackType="Single").
     */
    private Long maxClusterSlots;

    /*
     * The provisioning state of the rack SKU resource.
     */
    private RackSkuProvisioningState provisioningState;

    /*
     * The type of the rack.
     */
    private RackSkuType rackType;

    /*
     * The list of appliance SKUs and associated rack slot for the storage appliance(s) in this rack model.
     */
    private List<StorageApplianceSkuSlot> storageAppliances;

    /*
     * The list of supported SKUs if the rack is an aggregator.
     */
    private List<String> supportedRackSkuIds;

    /**
     * Creates an instance of RackSkuProperties class.
     */
    public RackSkuProperties() {
    }

    /**
     * Get the computeMachines property: The list of machine SKUs and associated rack slot for the compute-dedicated
     * machines in this rack model.
     * 
     * @return the computeMachines value.
     */
    public List<MachineSkuSlot> computeMachines() {
        return this.computeMachines;
    }

    /**
     * Get the controllerMachines property: The list of machine SKUs and associated rack slot for the control-plane
     * dedicated machines in this rack model.
     * 
     * @return the controllerMachines value.
     */
    public List<MachineSkuSlot> controllerMachines() {
        return this.controllerMachines;
    }

    /**
     * Get the description property: The free-form text describing the rack.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Get the maxClusterSlots property: The maximum number of compute racks supported by an aggregator rack. 0 if this
     * is a compute rack or a rack for a single rack cluster(rackType="Single").
     * 
     * @return the maxClusterSlots value.
     */
    public Long maxClusterSlots() {
        return this.maxClusterSlots;
    }

    /**
     * Get the provisioningState property: The provisioning state of the rack SKU resource.
     * 
     * @return the provisioningState value.
     */
    public RackSkuProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the rackType property: The type of the rack.
     * 
     * @return the rackType value.
     */
    public RackSkuType rackType() {
        return this.rackType;
    }

    /**
     * Get the storageAppliances property: The list of appliance SKUs and associated rack slot for the storage
     * appliance(s) in this rack model.
     * 
     * @return the storageAppliances value.
     */
    public List<StorageApplianceSkuSlot> storageAppliances() {
        return this.storageAppliances;
    }

    /**
     * Get the supportedRackSkuIds property: The list of supported SKUs if the rack is an aggregator.
     * 
     * @return the supportedRackSkuIds value.
     */
    public List<String> supportedRackSkuIds() {
        return this.supportedRackSkuIds;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (computeMachines() != null) {
            computeMachines().forEach(e -> e.validate());
        }
        if (controllerMachines() != null) {
            controllerMachines().forEach(e -> e.validate());
        }
        if (storageAppliances() != null) {
            storageAppliances().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RackSkuProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RackSkuProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the RackSkuProperties.
     */
    public static RackSkuProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RackSkuProperties deserializedRackSkuProperties = new RackSkuProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("computeMachines".equals(fieldName)) {
                    List<MachineSkuSlot> computeMachines
                        = reader.readArray(reader1 -> MachineSkuSlot.fromJson(reader1));
                    deserializedRackSkuProperties.computeMachines = computeMachines;
                } else if ("controllerMachines".equals(fieldName)) {
                    List<MachineSkuSlot> controllerMachines
                        = reader.readArray(reader1 -> MachineSkuSlot.fromJson(reader1));
                    deserializedRackSkuProperties.controllerMachines = controllerMachines;
                } else if ("description".equals(fieldName)) {
                    deserializedRackSkuProperties.description = reader.getString();
                } else if ("maxClusterSlots".equals(fieldName)) {
                    deserializedRackSkuProperties.maxClusterSlots = reader.getNullable(JsonReader::getLong);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedRackSkuProperties.provisioningState
                        = RackSkuProvisioningState.fromString(reader.getString());
                } else if ("rackType".equals(fieldName)) {
                    deserializedRackSkuProperties.rackType = RackSkuType.fromString(reader.getString());
                } else if ("storageAppliances".equals(fieldName)) {
                    List<StorageApplianceSkuSlot> storageAppliances
                        = reader.readArray(reader1 -> StorageApplianceSkuSlot.fromJson(reader1));
                    deserializedRackSkuProperties.storageAppliances = storageAppliances;
                } else if ("supportedRackSkuIds".equals(fieldName)) {
                    List<String> supportedRackSkuIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedRackSkuProperties.supportedRackSkuIds = supportedRackSkuIds;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRackSkuProperties;
        });
    }
}
