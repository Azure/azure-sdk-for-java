// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.networkcloud.models.StringKeyValuePair;
import java.io.IOException;
import java.util.List;

/**
 * KubernetesClusterFeaturePatchProperties represents the Kubernetes cluster feature properties for patching.
 */
@Fluent
public final class KubernetesClusterFeaturePatchProperties
    implements JsonSerializable<KubernetesClusterFeaturePatchProperties> {
    /*
     * The configured options for the feature.
     */
    private List<StringKeyValuePair> options;

    /**
     * Creates an instance of KubernetesClusterFeaturePatchProperties class.
     */
    public KubernetesClusterFeaturePatchProperties() {
    }

    /**
     * Get the options property: The configured options for the feature.
     * 
     * @return the options value.
     */
    public List<StringKeyValuePair> options() {
        return this.options;
    }

    /**
     * Set the options property: The configured options for the feature.
     * 
     * @param options the options value to set.
     * @return the KubernetesClusterFeaturePatchProperties object itself.
     */
    public KubernetesClusterFeaturePatchProperties withOptions(List<StringKeyValuePair> options) {
        this.options = options;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (options() != null) {
            options().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("options", this.options, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of KubernetesClusterFeaturePatchProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of KubernetesClusterFeaturePatchProperties if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the KubernetesClusterFeaturePatchProperties.
     */
    public static KubernetesClusterFeaturePatchProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            KubernetesClusterFeaturePatchProperties deserializedKubernetesClusterFeaturePatchProperties
                = new KubernetesClusterFeaturePatchProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("options".equals(fieldName)) {
                    List<StringKeyValuePair> options
                        = reader.readArray(reader1 -> StringKeyValuePair.fromJson(reader1));
                    deserializedKubernetesClusterFeaturePatchProperties.options = options;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedKubernetesClusterFeaturePatchProperties;
        });
    }
}
