// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Type Deprecated. Will be removed in an upcoming version. Nic represents the network interface card details.
 */
@Immutable
public final class Nic implements JsonSerializable<Nic> {
    /*
     * The information about the device connected to this NIC.
     */
    private LldpNeighbor lldpNeighbor;

    /*
     * The MAC address associated with this NIC.
     */
    private String macAddress;

    /*
     * The name of the NIC/interface.
     */
    private String name;

    /**
     * Creates an instance of Nic class.
     */
    public Nic() {
    }

    /**
     * Get the lldpNeighbor property: The information about the device connected to this NIC.
     * 
     * @return the lldpNeighbor value.
     */
    public LldpNeighbor lldpNeighbor() {
        return this.lldpNeighbor;
    }

    /**
     * Get the macAddress property: The MAC address associated with this NIC.
     * 
     * @return the macAddress value.
     */
    public String macAddress() {
        return this.macAddress;
    }

    /**
     * Get the name property: The name of the NIC/interface.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (lldpNeighbor() != null) {
            lldpNeighbor().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Nic from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Nic if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the Nic.
     */
    public static Nic fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Nic deserializedNic = new Nic();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("lldpNeighbor".equals(fieldName)) {
                    deserializedNic.lldpNeighbor = LldpNeighbor.fromJson(reader);
                } else if ("macAddress".equals(fieldName)) {
                    deserializedNic.macAddress = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedNic.name = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNic;
        });
    }
}
