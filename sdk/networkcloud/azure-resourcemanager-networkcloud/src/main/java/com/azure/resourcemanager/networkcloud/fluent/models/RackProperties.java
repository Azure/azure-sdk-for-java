// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.networkcloud.models.RackDetailedStatus;
import com.azure.resourcemanager.networkcloud.models.RackProvisioningState;
import java.io.IOException;

/**
 * RackProperties represents the properties of the rack.
 */
@Fluent
public final class RackProperties implements JsonSerializable<RackProperties> {
    /*
     * The value that will be used for machines in this rack to represent the availability zones that can be referenced
     * by Hybrid AKS Clusters for node arrangement.
     */
    private String availabilityZone;

    /*
     * The resource ID of the cluster the rack is created for. This value is set when the rack is created by the
     * cluster.
     */
    private String clusterId;

    /*
     * The more detailed status of the rack.
     */
    private RackDetailedStatus detailedStatus;

    /*
     * The descriptive message about the current detailed status.
     */
    private String detailedStatusMessage;

    /*
     * The provisioning state of the rack resource.
     */
    private RackProvisioningState provisioningState;

    /*
     * The free-form description of the rack location. (e.g. “DTN Datacenter, Floor 3, Isle 9, Rack 2B”)
     */
    private String rackLocation;

    /*
     * The unique identifier for the rack within Network Cloud cluster. An alternate unique alphanumeric value other
     * than a serial number may be provided if desired.
     */
    private String rackSerialNumber;

    /*
     * The SKU for the rack.
     */
    private String rackSkuId;

    /**
     * Creates an instance of RackProperties class.
     */
    public RackProperties() {
    }

    /**
     * Get the availabilityZone property: The value that will be used for machines in this rack to represent the
     * availability zones that can be referenced by Hybrid AKS Clusters for node arrangement.
     * 
     * @return the availabilityZone value.
     */
    public String availabilityZone() {
        return this.availabilityZone;
    }

    /**
     * Set the availabilityZone property: The value that will be used for machines in this rack to represent the
     * availability zones that can be referenced by Hybrid AKS Clusters for node arrangement.
     * 
     * @param availabilityZone the availabilityZone value to set.
     * @return the RackProperties object itself.
     */
    public RackProperties withAvailabilityZone(String availabilityZone) {
        this.availabilityZone = availabilityZone;
        return this;
    }

    /**
     * Get the clusterId property: The resource ID of the cluster the rack is created for. This value is set when the
     * rack is created by the cluster.
     * 
     * @return the clusterId value.
     */
    public String clusterId() {
        return this.clusterId;
    }

    /**
     * Get the detailedStatus property: The more detailed status of the rack.
     * 
     * @return the detailedStatus value.
     */
    public RackDetailedStatus detailedStatus() {
        return this.detailedStatus;
    }

    /**
     * Get the detailedStatusMessage property: The descriptive message about the current detailed status.
     * 
     * @return the detailedStatusMessage value.
     */
    public String detailedStatusMessage() {
        return this.detailedStatusMessage;
    }

    /**
     * Get the provisioningState property: The provisioning state of the rack resource.
     * 
     * @return the provisioningState value.
     */
    public RackProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the rackLocation property: The free-form description of the rack location. (e.g. “DTN Datacenter, Floor 3,
     * Isle 9, Rack 2B”).
     * 
     * @return the rackLocation value.
     */
    public String rackLocation() {
        return this.rackLocation;
    }

    /**
     * Set the rackLocation property: The free-form description of the rack location. (e.g. “DTN Datacenter, Floor 3,
     * Isle 9, Rack 2B”).
     * 
     * @param rackLocation the rackLocation value to set.
     * @return the RackProperties object itself.
     */
    public RackProperties withRackLocation(String rackLocation) {
        this.rackLocation = rackLocation;
        return this;
    }

    /**
     * Get the rackSerialNumber property: The unique identifier for the rack within Network Cloud cluster. An alternate
     * unique alphanumeric value other than a serial number may be provided if desired.
     * 
     * @return the rackSerialNumber value.
     */
    public String rackSerialNumber() {
        return this.rackSerialNumber;
    }

    /**
     * Set the rackSerialNumber property: The unique identifier for the rack within Network Cloud cluster. An alternate
     * unique alphanumeric value other than a serial number may be provided if desired.
     * 
     * @param rackSerialNumber the rackSerialNumber value to set.
     * @return the RackProperties object itself.
     */
    public RackProperties withRackSerialNumber(String rackSerialNumber) {
        this.rackSerialNumber = rackSerialNumber;
        return this;
    }

    /**
     * Get the rackSkuId property: The SKU for the rack.
     * 
     * @return the rackSkuId value.
     */
    public String rackSkuId() {
        return this.rackSkuId;
    }

    /**
     * Set the rackSkuId property: The SKU for the rack.
     * 
     * @param rackSkuId the rackSkuId value to set.
     * @return the RackProperties object itself.
     */
    public RackProperties withRackSkuId(String rackSkuId) {
        this.rackSkuId = rackSkuId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (availabilityZone() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property availabilityZone in model RackProperties"));
        }
        if (rackLocation() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property rackLocation in model RackProperties"));
        }
        if (rackSerialNumber() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property rackSerialNumber in model RackProperties"));
        }
        if (rackSkuId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property rackSkuId in model RackProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(RackProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("availabilityZone", this.availabilityZone);
        jsonWriter.writeStringField("rackLocation", this.rackLocation);
        jsonWriter.writeStringField("rackSerialNumber", this.rackSerialNumber);
        jsonWriter.writeStringField("rackSkuId", this.rackSkuId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RackProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RackProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RackProperties.
     */
    public static RackProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RackProperties deserializedRackProperties = new RackProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("availabilityZone".equals(fieldName)) {
                    deserializedRackProperties.availabilityZone = reader.getString();
                } else if ("rackLocation".equals(fieldName)) {
                    deserializedRackProperties.rackLocation = reader.getString();
                } else if ("rackSerialNumber".equals(fieldName)) {
                    deserializedRackProperties.rackSerialNumber = reader.getString();
                } else if ("rackSkuId".equals(fieldName)) {
                    deserializedRackProperties.rackSkuId = reader.getString();
                } else if ("clusterId".equals(fieldName)) {
                    deserializedRackProperties.clusterId = reader.getString();
                } else if ("detailedStatus".equals(fieldName)) {
                    deserializedRackProperties.detailedStatus = RackDetailedStatus.fromString(reader.getString());
                } else if ("detailedStatusMessage".equals(fieldName)) {
                    deserializedRackProperties.detailedStatusMessage = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedRackProperties.provisioningState = RackProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRackProperties;
        });
    }
}
