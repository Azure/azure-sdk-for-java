// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.networkcloud.models.HybridAksClusterDetailedStatus;
import com.azure.resourcemanager.networkcloud.models.HybridAksClusterProvisioningState;
import com.azure.resourcemanager.networkcloud.models.NodeConfiguration;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** HybridAksClusterProperties represents the properties of Hybrid AKS cluster resource. */
@Fluent
public final class HybridAksClusterProperties {
    /*
     * The list of resource IDs for the workload networks associated with the Hybrid AKS cluster. It can be any of
     * l2Networks, l3Networks, or trunkedNetworks resources. This field will also contain one cloudServicesNetwork and
     * one defaultCniNetwork.
     */
    @JsonProperty(value = "associatedNetworkIds", required = true)
    private List<String> associatedNetworkIds;

    /*
     * The resource ID of the associated cloud services network.
     */
    @JsonProperty(value = "cloudServicesNetworkId", access = JsonProperty.Access.WRITE_ONLY)
    private String cloudServicesNetworkId;

    /*
     * The resource ID of the Network Cloud cluster hosting the Hybrid AKS cluster.
     */
    @JsonProperty(value = "clusterId", access = JsonProperty.Access.WRITE_ONLY)
    private String clusterId;

    /*
     * The number of control plane node VMs.
     */
    @JsonProperty(value = "controlPlaneCount", required = true)
    private long controlPlaneCount;

    /*
     * The list of node configurations detailing associated VMs that are part of the control plane nodes of this Hybrid
     * AKS cluster.
     */
    @JsonProperty(value = "controlPlaneNodes", access = JsonProperty.Access.WRITE_ONLY)
    private List<NodeConfiguration> controlPlaneNodes;

    /*
     * The resource ID of the associated default CNI network.
     */
    @JsonProperty(value = "defaultCniNetworkId", access = JsonProperty.Access.WRITE_ONLY)
    private String defaultCniNetworkId;

    /*
     * The more detailed status of this Hybrid AKS cluster.
     */
    @JsonProperty(value = "detailedStatus", access = JsonProperty.Access.WRITE_ONLY)
    private HybridAksClusterDetailedStatus detailedStatus;

    /*
     * The descriptive message about the current detailed status.
     */
    @JsonProperty(value = "detailedStatusMessage", access = JsonProperty.Access.WRITE_ONLY)
    private String detailedStatusMessage;

    /*
     * The resource ID of the Hybrid AKS cluster that this additional information is for.
     */
    @JsonProperty(value = "hybridAksProvisionedClusterId", required = true)
    private String hybridAksProvisionedClusterId;

    /*
     * The provisioning state of the Hybrid AKS cluster resource.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private HybridAksClusterProvisioningState provisioningState;

    /*
     * The resource IDs of volumes that are attached to the Hybrid AKS cluster.
     */
    @JsonProperty(value = "volumes", access = JsonProperty.Access.WRITE_ONLY)
    private List<String> volumes;

    /*
     * The number of worker node VMs.
     */
    @JsonProperty(value = "workerCount", required = true)
    private long workerCount;

    /*
     * The list of node configurations detailing associated VMs that are part of the worker nodes of this Hybrid AKS
     * cluster.
     */
    @JsonProperty(value = "workerNodes", access = JsonProperty.Access.WRITE_ONLY)
    private List<NodeConfiguration> workerNodes;

    /** Creates an instance of HybridAksClusterProperties class. */
    public HybridAksClusterProperties() {
    }

    /**
     * Get the associatedNetworkIds property: The list of resource IDs for the workload networks associated with the
     * Hybrid AKS cluster. It can be any of l2Networks, l3Networks, or trunkedNetworks resources. This field will also
     * contain one cloudServicesNetwork and one defaultCniNetwork.
     *
     * @return the associatedNetworkIds value.
     */
    public List<String> associatedNetworkIds() {
        return this.associatedNetworkIds;
    }

    /**
     * Set the associatedNetworkIds property: The list of resource IDs for the workload networks associated with the
     * Hybrid AKS cluster. It can be any of l2Networks, l3Networks, or trunkedNetworks resources. This field will also
     * contain one cloudServicesNetwork and one defaultCniNetwork.
     *
     * @param associatedNetworkIds the associatedNetworkIds value to set.
     * @return the HybridAksClusterProperties object itself.
     */
    public HybridAksClusterProperties withAssociatedNetworkIds(List<String> associatedNetworkIds) {
        this.associatedNetworkIds = associatedNetworkIds;
        return this;
    }

    /**
     * Get the cloudServicesNetworkId property: The resource ID of the associated cloud services network.
     *
     * @return the cloudServicesNetworkId value.
     */
    public String cloudServicesNetworkId() {
        return this.cloudServicesNetworkId;
    }

    /**
     * Get the clusterId property: The resource ID of the Network Cloud cluster hosting the Hybrid AKS cluster.
     *
     * @return the clusterId value.
     */
    public String clusterId() {
        return this.clusterId;
    }

    /**
     * Get the controlPlaneCount property: The number of control plane node VMs.
     *
     * @return the controlPlaneCount value.
     */
    public long controlPlaneCount() {
        return this.controlPlaneCount;
    }

    /**
     * Set the controlPlaneCount property: The number of control plane node VMs.
     *
     * @param controlPlaneCount the controlPlaneCount value to set.
     * @return the HybridAksClusterProperties object itself.
     */
    public HybridAksClusterProperties withControlPlaneCount(long controlPlaneCount) {
        this.controlPlaneCount = controlPlaneCount;
        return this;
    }

    /**
     * Get the controlPlaneNodes property: The list of node configurations detailing associated VMs that are part of the
     * control plane nodes of this Hybrid AKS cluster.
     *
     * @return the controlPlaneNodes value.
     */
    public List<NodeConfiguration> controlPlaneNodes() {
        return this.controlPlaneNodes;
    }

    /**
     * Get the defaultCniNetworkId property: The resource ID of the associated default CNI network.
     *
     * @return the defaultCniNetworkId value.
     */
    public String defaultCniNetworkId() {
        return this.defaultCniNetworkId;
    }

    /**
     * Get the detailedStatus property: The more detailed status of this Hybrid AKS cluster.
     *
     * @return the detailedStatus value.
     */
    public HybridAksClusterDetailedStatus detailedStatus() {
        return this.detailedStatus;
    }

    /**
     * Get the detailedStatusMessage property: The descriptive message about the current detailed status.
     *
     * @return the detailedStatusMessage value.
     */
    public String detailedStatusMessage() {
        return this.detailedStatusMessage;
    }

    /**
     * Get the hybridAksProvisionedClusterId property: The resource ID of the Hybrid AKS cluster that this additional
     * information is for.
     *
     * @return the hybridAksProvisionedClusterId value.
     */
    public String hybridAksProvisionedClusterId() {
        return this.hybridAksProvisionedClusterId;
    }

    /**
     * Set the hybridAksProvisionedClusterId property: The resource ID of the Hybrid AKS cluster that this additional
     * information is for.
     *
     * @param hybridAksProvisionedClusterId the hybridAksProvisionedClusterId value to set.
     * @return the HybridAksClusterProperties object itself.
     */
    public HybridAksClusterProperties withHybridAksProvisionedClusterId(String hybridAksProvisionedClusterId) {
        this.hybridAksProvisionedClusterId = hybridAksProvisionedClusterId;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state of the Hybrid AKS cluster resource.
     *
     * @return the provisioningState value.
     */
    public HybridAksClusterProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the volumes property: The resource IDs of volumes that are attached to the Hybrid AKS cluster.
     *
     * @return the volumes value.
     */
    public List<String> volumes() {
        return this.volumes;
    }

    /**
     * Get the workerCount property: The number of worker node VMs.
     *
     * @return the workerCount value.
     */
    public long workerCount() {
        return this.workerCount;
    }

    /**
     * Set the workerCount property: The number of worker node VMs.
     *
     * @param workerCount the workerCount value to set.
     * @return the HybridAksClusterProperties object itself.
     */
    public HybridAksClusterProperties withWorkerCount(long workerCount) {
        this.workerCount = workerCount;
        return this;
    }

    /**
     * Get the workerNodes property: The list of node configurations detailing associated VMs that are part of the
     * worker nodes of this Hybrid AKS cluster.
     *
     * @return the workerNodes value.
     */
    public List<NodeConfiguration> workerNodes() {
        return this.workerNodes;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (associatedNetworkIds() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property associatedNetworkIds in model HybridAksClusterProperties"));
        }
        if (controlPlaneNodes() != null) {
            controlPlaneNodes().forEach(e -> e.validate());
        }
        if (hybridAksProvisionedClusterId() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property hybridAksProvisionedClusterId in model HybridAksClusterProperties"));
        }
        if (workerNodes() != null) {
            workerNodes().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(HybridAksClusterProperties.class);
}
