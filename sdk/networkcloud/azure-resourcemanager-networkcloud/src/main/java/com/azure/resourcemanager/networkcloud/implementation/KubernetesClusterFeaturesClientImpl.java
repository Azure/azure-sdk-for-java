// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.networkcloud.fluent.KubernetesClusterFeaturesClient;
import com.azure.resourcemanager.networkcloud.fluent.models.KubernetesClusterFeatureInner;
import com.azure.resourcemanager.networkcloud.fluent.models.OperationStatusResultInner;
import com.azure.resourcemanager.networkcloud.models.KubernetesClusterFeatureList;
import com.azure.resourcemanager.networkcloud.models.KubernetesClusterFeaturePatchParameters;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in KubernetesClusterFeaturesClient.
 */
public final class KubernetesClusterFeaturesClientImpl implements KubernetesClusterFeaturesClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final KubernetesClusterFeaturesService service;

    /**
     * The service client containing this operation class.
     */
    private final NetworkCloudImpl client;

    /**
     * Initializes an instance of KubernetesClusterFeaturesClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    KubernetesClusterFeaturesClientImpl(NetworkCloudImpl client) {
        this.service = RestProxy.create(KubernetesClusterFeaturesService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for NetworkCloudKubernetesClusterFeatures to be used by the proxy service
     * to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "NetworkCloudKubernet")
    public interface KubernetesClusterFeaturesService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/kubernetesClusters/{kubernetesClusterName}/features")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<KubernetesClusterFeatureList>> listByKubernetesCluster(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("kubernetesClusterName") String kubernetesClusterName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/kubernetesClusters/{kubernetesClusterName}/features/{featureName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<KubernetesClusterFeatureInner>> get(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("kubernetesClusterName") String kubernetesClusterName,
            @PathParam("featureName") String featureName, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/kubernetesClusters/{kubernetesClusterName}/features/{featureName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("kubernetesClusterName") String kubernetesClusterName,
            @PathParam("featureName") String featureName,
            @BodyParam("application/json") KubernetesClusterFeatureInner kubernetesClusterFeatureParameters,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/kubernetesClusters/{kubernetesClusterName}/features/{featureName}")
        @ExpectedResponses({ 200, 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("kubernetesClusterName") String kubernetesClusterName,
            @PathParam("featureName") String featureName, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/kubernetesClusters/{kubernetesClusterName}/features/{featureName}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> update(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("kubernetesClusterName") String kubernetesClusterName,
            @PathParam("featureName") String featureName,
            @BodyParam("application/json") KubernetesClusterFeaturePatchParameters kubernetesClusterFeatureUpdateParameters,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<KubernetesClusterFeatureList>> listByKubernetesClusterNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * List features for the Kubernetes cluster.
     * 
     * Get a list of features for the provided Kubernetes cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of features for the provided Kubernetes cluster along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<KubernetesClusterFeatureInner>>
        listByKubernetesClusterSinglePageAsync(String resourceGroupName, String kubernetesClusterName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (kubernetesClusterName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter kubernetesClusterName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByKubernetesCluster(this.client.getEndpoint(), this.client.getApiVersion(),
                    this.client.getSubscriptionId(), resourceGroupName, kubernetesClusterName, accept, context))
            .<PagedResponse<KubernetesClusterFeatureInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List features for the Kubernetes cluster.
     * 
     * Get a list of features for the provided Kubernetes cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of features for the provided Kubernetes cluster along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<KubernetesClusterFeatureInner>> listByKubernetesClusterSinglePageAsync(
        String resourceGroupName, String kubernetesClusterName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (kubernetesClusterName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter kubernetesClusterName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByKubernetesCluster(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, kubernetesClusterName, accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * List features for the Kubernetes cluster.
     * 
     * Get a list of features for the provided Kubernetes cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of features for the provided Kubernetes cluster as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<KubernetesClusterFeatureInner> listByKubernetesClusterAsync(String resourceGroupName,
        String kubernetesClusterName) {
        return new PagedFlux<>(() -> listByKubernetesClusterSinglePageAsync(resourceGroupName, kubernetesClusterName),
            nextLink -> listByKubernetesClusterNextSinglePageAsync(nextLink));
    }

    /**
     * List features for the Kubernetes cluster.
     * 
     * Get a list of features for the provided Kubernetes cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of features for the provided Kubernetes cluster as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<KubernetesClusterFeatureInner> listByKubernetesClusterAsync(String resourceGroupName,
        String kubernetesClusterName, Context context) {
        return new PagedFlux<>(
            () -> listByKubernetesClusterSinglePageAsync(resourceGroupName, kubernetesClusterName, context),
            nextLink -> listByKubernetesClusterNextSinglePageAsync(nextLink, context));
    }

    /**
     * List features for the Kubernetes cluster.
     * 
     * Get a list of features for the provided Kubernetes cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of features for the provided Kubernetes cluster as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<KubernetesClusterFeatureInner> listByKubernetesCluster(String resourceGroupName,
        String kubernetesClusterName) {
        return new PagedIterable<>(listByKubernetesClusterAsync(resourceGroupName, kubernetesClusterName));
    }

    /**
     * List features for the Kubernetes cluster.
     * 
     * Get a list of features for the provided Kubernetes cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of features for the provided Kubernetes cluster as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<KubernetesClusterFeatureInner> listByKubernetesCluster(String resourceGroupName,
        String kubernetesClusterName, Context context) {
        return new PagedIterable<>(listByKubernetesClusterAsync(resourceGroupName, kubernetesClusterName, context));
    }

    /**
     * Retrieve the Kubernetes cluster feature.
     * 
     * Get properties of the provided the Kubernetes cluster feature.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param featureName The name of the feature.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of the provided the Kubernetes cluster feature along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<KubernetesClusterFeatureInner>> getWithResponseAsync(String resourceGroupName,
        String kubernetesClusterName, String featureName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (kubernetesClusterName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter kubernetesClusterName is required and cannot be null."));
        }
        if (featureName == null) {
            return Mono.error(new IllegalArgumentException("Parameter featureName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.get(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, kubernetesClusterName, featureName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Retrieve the Kubernetes cluster feature.
     * 
     * Get properties of the provided the Kubernetes cluster feature.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param featureName The name of the feature.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of the provided the Kubernetes cluster feature along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<KubernetesClusterFeatureInner>> getWithResponseAsync(String resourceGroupName,
        String kubernetesClusterName, String featureName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (kubernetesClusterName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter kubernetesClusterName is required and cannot be null."));
        }
        if (featureName == null) {
            return Mono.error(new IllegalArgumentException("Parameter featureName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, kubernetesClusterName, featureName, accept, context);
    }

    /**
     * Retrieve the Kubernetes cluster feature.
     * 
     * Get properties of the provided the Kubernetes cluster feature.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param featureName The name of the feature.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of the provided the Kubernetes cluster feature on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<KubernetesClusterFeatureInner> getAsync(String resourceGroupName, String kubernetesClusterName,
        String featureName) {
        return getWithResponseAsync(resourceGroupName, kubernetesClusterName, featureName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Retrieve the Kubernetes cluster feature.
     * 
     * Get properties of the provided the Kubernetes cluster feature.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param featureName The name of the feature.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of the provided the Kubernetes cluster feature along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<KubernetesClusterFeatureInner> getWithResponse(String resourceGroupName,
        String kubernetesClusterName, String featureName, Context context) {
        return getWithResponseAsync(resourceGroupName, kubernetesClusterName, featureName, context).block();
    }

    /**
     * Retrieve the Kubernetes cluster feature.
     * 
     * Get properties of the provided the Kubernetes cluster feature.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param featureName The name of the feature.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of the provided the Kubernetes cluster feature.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public KubernetesClusterFeatureInner get(String resourceGroupName, String kubernetesClusterName,
        String featureName) {
        return getWithResponse(resourceGroupName, kubernetesClusterName, featureName, Context.NONE).getValue();
    }

    /**
     * Create or update the Kubernetes cluster feature.
     * 
     * Create a new Kubernetes cluster feature or update properties of the Kubernetes cluster feature if it exists.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param featureName The name of the feature.
     * @param kubernetesClusterFeatureParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return kubernetesClusterFeature represents the feature of a Kubernetes cluster along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String kubernetesClusterName, String featureName,
        KubernetesClusterFeatureInner kubernetesClusterFeatureParameters) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (kubernetesClusterName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter kubernetesClusterName is required and cannot be null."));
        }
        if (featureName == null) {
            return Mono.error(new IllegalArgumentException("Parameter featureName is required and cannot be null."));
        }
        if (kubernetesClusterFeatureParameters == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter kubernetesClusterFeatureParameters is required and cannot be null."));
        } else {
            kubernetesClusterFeatureParameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createOrUpdate(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, kubernetesClusterName, featureName,
                kubernetesClusterFeatureParameters, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create or update the Kubernetes cluster feature.
     * 
     * Create a new Kubernetes cluster feature or update properties of the Kubernetes cluster feature if it exists.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param featureName The name of the feature.
     * @param kubernetesClusterFeatureParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return kubernetesClusterFeature represents the feature of a Kubernetes cluster along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String kubernetesClusterName, String featureName,
        KubernetesClusterFeatureInner kubernetesClusterFeatureParameters, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (kubernetesClusterName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter kubernetesClusterName is required and cannot be null."));
        }
        if (featureName == null) {
            return Mono.error(new IllegalArgumentException("Parameter featureName is required and cannot be null."));
        }
        if (kubernetesClusterFeatureParameters == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter kubernetesClusterFeatureParameters is required and cannot be null."));
        } else {
            kubernetesClusterFeatureParameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.createOrUpdate(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, kubernetesClusterName, featureName,
            kubernetesClusterFeatureParameters, accept, context);
    }

    /**
     * Create or update the Kubernetes cluster feature.
     * 
     * Create a new Kubernetes cluster feature or update properties of the Kubernetes cluster feature if it exists.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param featureName The name of the feature.
     * @param kubernetesClusterFeatureParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of kubernetesClusterFeature represents the feature of a Kubernetes
     * cluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<KubernetesClusterFeatureInner>, KubernetesClusterFeatureInner>
        beginCreateOrUpdateAsync(String resourceGroupName, String kubernetesClusterName, String featureName,
            KubernetesClusterFeatureInner kubernetesClusterFeatureParameters) {
        Mono<Response<Flux<ByteBuffer>>> mono = createOrUpdateWithResponseAsync(resourceGroupName,
            kubernetesClusterName, featureName, kubernetesClusterFeatureParameters);
        return this.client.<KubernetesClusterFeatureInner, KubernetesClusterFeatureInner>getLroResult(mono,
            this.client.getHttpPipeline(), KubernetesClusterFeatureInner.class, KubernetesClusterFeatureInner.class,
            this.client.getContext());
    }

    /**
     * Create or update the Kubernetes cluster feature.
     * 
     * Create a new Kubernetes cluster feature or update properties of the Kubernetes cluster feature if it exists.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param featureName The name of the feature.
     * @param kubernetesClusterFeatureParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of kubernetesClusterFeature represents the feature of a Kubernetes
     * cluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<KubernetesClusterFeatureInner>, KubernetesClusterFeatureInner>
        beginCreateOrUpdateAsync(String resourceGroupName, String kubernetesClusterName, String featureName,
            KubernetesClusterFeatureInner kubernetesClusterFeatureParameters, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = createOrUpdateWithResponseAsync(resourceGroupName,
            kubernetesClusterName, featureName, kubernetesClusterFeatureParameters, context);
        return this.client.<KubernetesClusterFeatureInner, KubernetesClusterFeatureInner>getLroResult(mono,
            this.client.getHttpPipeline(), KubernetesClusterFeatureInner.class, KubernetesClusterFeatureInner.class,
            context);
    }

    /**
     * Create or update the Kubernetes cluster feature.
     * 
     * Create a new Kubernetes cluster feature or update properties of the Kubernetes cluster feature if it exists.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param featureName The name of the feature.
     * @param kubernetesClusterFeatureParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of kubernetesClusterFeature represents the feature of a Kubernetes
     * cluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<KubernetesClusterFeatureInner>, KubernetesClusterFeatureInner> beginCreateOrUpdate(
        String resourceGroupName, String kubernetesClusterName, String featureName,
        KubernetesClusterFeatureInner kubernetesClusterFeatureParameters) {
        return this
            .beginCreateOrUpdateAsync(resourceGroupName, kubernetesClusterName, featureName,
                kubernetesClusterFeatureParameters)
            .getSyncPoller();
    }

    /**
     * Create or update the Kubernetes cluster feature.
     * 
     * Create a new Kubernetes cluster feature or update properties of the Kubernetes cluster feature if it exists.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param featureName The name of the feature.
     * @param kubernetesClusterFeatureParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of kubernetesClusterFeature represents the feature of a Kubernetes
     * cluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<KubernetesClusterFeatureInner>, KubernetesClusterFeatureInner> beginCreateOrUpdate(
        String resourceGroupName, String kubernetesClusterName, String featureName,
        KubernetesClusterFeatureInner kubernetesClusterFeatureParameters, Context context) {
        return this
            .beginCreateOrUpdateAsync(resourceGroupName, kubernetesClusterName, featureName,
                kubernetesClusterFeatureParameters, context)
            .getSyncPoller();
    }

    /**
     * Create or update the Kubernetes cluster feature.
     * 
     * Create a new Kubernetes cluster feature or update properties of the Kubernetes cluster feature if it exists.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param featureName The name of the feature.
     * @param kubernetesClusterFeatureParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return kubernetesClusterFeature represents the feature of a Kubernetes cluster on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<KubernetesClusterFeatureInner> createOrUpdateAsync(String resourceGroupName,
        String kubernetesClusterName, String featureName,
        KubernetesClusterFeatureInner kubernetesClusterFeatureParameters) {
        return beginCreateOrUpdateAsync(resourceGroupName, kubernetesClusterName, featureName,
            kubernetesClusterFeatureParameters).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create or update the Kubernetes cluster feature.
     * 
     * Create a new Kubernetes cluster feature or update properties of the Kubernetes cluster feature if it exists.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param featureName The name of the feature.
     * @param kubernetesClusterFeatureParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return kubernetesClusterFeature represents the feature of a Kubernetes cluster on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<KubernetesClusterFeatureInner> createOrUpdateAsync(String resourceGroupName,
        String kubernetesClusterName, String featureName,
        KubernetesClusterFeatureInner kubernetesClusterFeatureParameters, Context context) {
        return beginCreateOrUpdateAsync(resourceGroupName, kubernetesClusterName, featureName,
            kubernetesClusterFeatureParameters, context).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create or update the Kubernetes cluster feature.
     * 
     * Create a new Kubernetes cluster feature or update properties of the Kubernetes cluster feature if it exists.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param featureName The name of the feature.
     * @param kubernetesClusterFeatureParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return kubernetesClusterFeature represents the feature of a Kubernetes cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public KubernetesClusterFeatureInner createOrUpdate(String resourceGroupName, String kubernetesClusterName,
        String featureName, KubernetesClusterFeatureInner kubernetesClusterFeatureParameters) {
        return createOrUpdateAsync(resourceGroupName, kubernetesClusterName, featureName,
            kubernetesClusterFeatureParameters).block();
    }

    /**
     * Create or update the Kubernetes cluster feature.
     * 
     * Create a new Kubernetes cluster feature or update properties of the Kubernetes cluster feature if it exists.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param featureName The name of the feature.
     * @param kubernetesClusterFeatureParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return kubernetesClusterFeature represents the feature of a Kubernetes cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public KubernetesClusterFeatureInner createOrUpdate(String resourceGroupName, String kubernetesClusterName,
        String featureName, KubernetesClusterFeatureInner kubernetesClusterFeatureParameters, Context context) {
        return createOrUpdateAsync(resourceGroupName, kubernetesClusterName, featureName,
            kubernetesClusterFeatureParameters, context).block();
    }

    /**
     * Delete the Kubernetes cluster feature.
     * 
     * Delete the provided Kubernetes cluster feature.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param featureName The name of the feature.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName,
        String kubernetesClusterName, String featureName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (kubernetesClusterName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter kubernetesClusterName is required and cannot be null."));
        }
        if (featureName == null) {
            return Mono.error(new IllegalArgumentException("Parameter featureName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.delete(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, kubernetesClusterName, featureName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete the Kubernetes cluster feature.
     * 
     * Delete the provided Kubernetes cluster feature.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param featureName The name of the feature.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName,
        String kubernetesClusterName, String featureName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (kubernetesClusterName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter kubernetesClusterName is required and cannot be null."));
        }
        if (featureName == null) {
            return Mono.error(new IllegalArgumentException("Parameter featureName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.delete(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, kubernetesClusterName, featureName, accept, context);
    }

    /**
     * Delete the Kubernetes cluster feature.
     * 
     * Delete the provided Kubernetes cluster feature.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param featureName The name of the feature.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginDeleteAsync(String resourceGroupName, String kubernetesClusterName, String featureName) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = deleteWithResponseAsync(resourceGroupName, kubernetesClusterName, featureName);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(mono,
            this.client.getHttpPipeline(), OperationStatusResultInner.class, OperationStatusResultInner.class,
            this.client.getContext());
    }

    /**
     * Delete the Kubernetes cluster feature.
     * 
     * Delete the provided Kubernetes cluster feature.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param featureName The name of the feature.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginDeleteAsync(String resourceGroupName, String kubernetesClusterName, String featureName, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = deleteWithResponseAsync(resourceGroupName, kubernetesClusterName, featureName, context);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(mono,
            this.client.getHttpPipeline(), OperationStatusResultInner.class, OperationStatusResultInner.class, context);
    }

    /**
     * Delete the Kubernetes cluster feature.
     * 
     * Delete the provided Kubernetes cluster feature.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param featureName The name of the feature.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginDelete(String resourceGroupName, String kubernetesClusterName, String featureName) {
        return this.beginDeleteAsync(resourceGroupName, kubernetesClusterName, featureName).getSyncPoller();
    }

    /**
     * Delete the Kubernetes cluster feature.
     * 
     * Delete the provided Kubernetes cluster feature.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param featureName The name of the feature.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginDelete(String resourceGroupName, String kubernetesClusterName, String featureName, Context context) {
        return this.beginDeleteAsync(resourceGroupName, kubernetesClusterName, featureName, context).getSyncPoller();
    }

    /**
     * Delete the Kubernetes cluster feature.
     * 
     * Delete the provided Kubernetes cluster feature.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param featureName The name of the feature.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<OperationStatusResultInner> deleteAsync(String resourceGroupName, String kubernetesClusterName,
        String featureName) {
        return beginDeleteAsync(resourceGroupName, kubernetesClusterName, featureName).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete the Kubernetes cluster feature.
     * 
     * Delete the provided Kubernetes cluster feature.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param featureName The name of the feature.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<OperationStatusResultInner> deleteAsync(String resourceGroupName, String kubernetesClusterName,
        String featureName, Context context) {
        return beginDeleteAsync(resourceGroupName, kubernetesClusterName, featureName, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete the Kubernetes cluster feature.
     * 
     * Delete the provided Kubernetes cluster feature.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param featureName The name of the feature.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OperationStatusResultInner delete(String resourceGroupName, String kubernetesClusterName,
        String featureName) {
        return deleteAsync(resourceGroupName, kubernetesClusterName, featureName).block();
    }

    /**
     * Delete the Kubernetes cluster feature.
     * 
     * Delete the provided Kubernetes cluster feature.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param featureName The name of the feature.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OperationStatusResultInner delete(String resourceGroupName, String kubernetesClusterName, String featureName,
        Context context) {
        return deleteAsync(resourceGroupName, kubernetesClusterName, featureName, context).block();
    }

    /**
     * Patch the Kubernetes cluster feature.
     * 
     * Patch properties of the provided Kubernetes cluster feature.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param featureName The name of the feature.
     * @param kubernetesClusterFeatureUpdateParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return kubernetesClusterFeature represents the feature of a Kubernetes cluster along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String resourceGroupName,
        String kubernetesClusterName, String featureName,
        KubernetesClusterFeaturePatchParameters kubernetesClusterFeatureUpdateParameters) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (kubernetesClusterName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter kubernetesClusterName is required and cannot be null."));
        }
        if (featureName == null) {
            return Mono.error(new IllegalArgumentException("Parameter featureName is required and cannot be null."));
        }
        if (kubernetesClusterFeatureUpdateParameters != null) {
            kubernetesClusterFeatureUpdateParameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.update(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, kubernetesClusterName, featureName,
                kubernetesClusterFeatureUpdateParameters, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Patch the Kubernetes cluster feature.
     * 
     * Patch properties of the provided Kubernetes cluster feature.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param featureName The name of the feature.
     * @param kubernetesClusterFeatureUpdateParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return kubernetesClusterFeature represents the feature of a Kubernetes cluster along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String resourceGroupName,
        String kubernetesClusterName, String featureName,
        KubernetesClusterFeaturePatchParameters kubernetesClusterFeatureUpdateParameters, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (kubernetesClusterName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter kubernetesClusterName is required and cannot be null."));
        }
        if (featureName == null) {
            return Mono.error(new IllegalArgumentException("Parameter featureName is required and cannot be null."));
        }
        if (kubernetesClusterFeatureUpdateParameters != null) {
            kubernetesClusterFeatureUpdateParameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.update(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, kubernetesClusterName, featureName, kubernetesClusterFeatureUpdateParameters, accept,
            context);
    }

    /**
     * Patch the Kubernetes cluster feature.
     * 
     * Patch properties of the provided Kubernetes cluster feature.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param featureName The name of the feature.
     * @param kubernetesClusterFeatureUpdateParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of kubernetesClusterFeature represents the feature of a Kubernetes
     * cluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<KubernetesClusterFeatureInner>, KubernetesClusterFeatureInner> beginUpdateAsync(
        String resourceGroupName, String kubernetesClusterName, String featureName,
        KubernetesClusterFeaturePatchParameters kubernetesClusterFeatureUpdateParameters) {
        Mono<Response<Flux<ByteBuffer>>> mono = updateWithResponseAsync(resourceGroupName, kubernetesClusterName,
            featureName, kubernetesClusterFeatureUpdateParameters);
        return this.client.<KubernetesClusterFeatureInner, KubernetesClusterFeatureInner>getLroResult(mono,
            this.client.getHttpPipeline(), KubernetesClusterFeatureInner.class, KubernetesClusterFeatureInner.class,
            this.client.getContext());
    }

    /**
     * Patch the Kubernetes cluster feature.
     * 
     * Patch properties of the provided Kubernetes cluster feature.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param featureName The name of the feature.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of kubernetesClusterFeature represents the feature of a Kubernetes
     * cluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<KubernetesClusterFeatureInner>, KubernetesClusterFeatureInner>
        beginUpdateAsync(String resourceGroupName, String kubernetesClusterName, String featureName) {
        final KubernetesClusterFeaturePatchParameters kubernetesClusterFeatureUpdateParameters = null;
        Mono<Response<Flux<ByteBuffer>>> mono = updateWithResponseAsync(resourceGroupName, kubernetesClusterName,
            featureName, kubernetesClusterFeatureUpdateParameters);
        return this.client.<KubernetesClusterFeatureInner, KubernetesClusterFeatureInner>getLroResult(mono,
            this.client.getHttpPipeline(), KubernetesClusterFeatureInner.class, KubernetesClusterFeatureInner.class,
            this.client.getContext());
    }

    /**
     * Patch the Kubernetes cluster feature.
     * 
     * Patch properties of the provided Kubernetes cluster feature.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param featureName The name of the feature.
     * @param kubernetesClusterFeatureUpdateParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of kubernetesClusterFeature represents the feature of a Kubernetes
     * cluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<KubernetesClusterFeatureInner>, KubernetesClusterFeatureInner> beginUpdateAsync(
        String resourceGroupName, String kubernetesClusterName, String featureName,
        KubernetesClusterFeaturePatchParameters kubernetesClusterFeatureUpdateParameters, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = updateWithResponseAsync(resourceGroupName, kubernetesClusterName,
            featureName, kubernetesClusterFeatureUpdateParameters, context);
        return this.client.<KubernetesClusterFeatureInner, KubernetesClusterFeatureInner>getLroResult(mono,
            this.client.getHttpPipeline(), KubernetesClusterFeatureInner.class, KubernetesClusterFeatureInner.class,
            context);
    }

    /**
     * Patch the Kubernetes cluster feature.
     * 
     * Patch properties of the provided Kubernetes cluster feature.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param featureName The name of the feature.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of kubernetesClusterFeature represents the feature of a Kubernetes
     * cluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<KubernetesClusterFeatureInner>, KubernetesClusterFeatureInner>
        beginUpdate(String resourceGroupName, String kubernetesClusterName, String featureName) {
        final KubernetesClusterFeaturePatchParameters kubernetesClusterFeatureUpdateParameters = null;
        return this
            .beginUpdateAsync(resourceGroupName, kubernetesClusterName, featureName,
                kubernetesClusterFeatureUpdateParameters)
            .getSyncPoller();
    }

    /**
     * Patch the Kubernetes cluster feature.
     * 
     * Patch properties of the provided Kubernetes cluster feature.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param featureName The name of the feature.
     * @param kubernetesClusterFeatureUpdateParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of kubernetesClusterFeature represents the feature of a Kubernetes
     * cluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<KubernetesClusterFeatureInner>, KubernetesClusterFeatureInner> beginUpdate(
        String resourceGroupName, String kubernetesClusterName, String featureName,
        KubernetesClusterFeaturePatchParameters kubernetesClusterFeatureUpdateParameters, Context context) {
        return this
            .beginUpdateAsync(resourceGroupName, kubernetesClusterName, featureName,
                kubernetesClusterFeatureUpdateParameters, context)
            .getSyncPoller();
    }

    /**
     * Patch the Kubernetes cluster feature.
     * 
     * Patch properties of the provided Kubernetes cluster feature.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param featureName The name of the feature.
     * @param kubernetesClusterFeatureUpdateParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return kubernetesClusterFeature represents the feature of a Kubernetes cluster on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<KubernetesClusterFeatureInner> updateAsync(String resourceGroupName, String kubernetesClusterName,
        String featureName, KubernetesClusterFeaturePatchParameters kubernetesClusterFeatureUpdateParameters) {
        return beginUpdateAsync(resourceGroupName, kubernetesClusterName, featureName,
            kubernetesClusterFeatureUpdateParameters).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Patch the Kubernetes cluster feature.
     * 
     * Patch properties of the provided Kubernetes cluster feature.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param featureName The name of the feature.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return kubernetesClusterFeature represents the feature of a Kubernetes cluster on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<KubernetesClusterFeatureInner> updateAsync(String resourceGroupName, String kubernetesClusterName,
        String featureName) {
        final KubernetesClusterFeaturePatchParameters kubernetesClusterFeatureUpdateParameters = null;
        return beginUpdateAsync(resourceGroupName, kubernetesClusterName, featureName,
            kubernetesClusterFeatureUpdateParameters).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Patch the Kubernetes cluster feature.
     * 
     * Patch properties of the provided Kubernetes cluster feature.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param featureName The name of the feature.
     * @param kubernetesClusterFeatureUpdateParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return kubernetesClusterFeature represents the feature of a Kubernetes cluster on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<KubernetesClusterFeatureInner> updateAsync(String resourceGroupName, String kubernetesClusterName,
        String featureName, KubernetesClusterFeaturePatchParameters kubernetesClusterFeatureUpdateParameters,
        Context context) {
        return beginUpdateAsync(resourceGroupName, kubernetesClusterName, featureName,
            kubernetesClusterFeatureUpdateParameters, context).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Patch the Kubernetes cluster feature.
     * 
     * Patch properties of the provided Kubernetes cluster feature.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param featureName The name of the feature.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return kubernetesClusterFeature represents the feature of a Kubernetes cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public KubernetesClusterFeatureInner update(String resourceGroupName, String kubernetesClusterName,
        String featureName) {
        final KubernetesClusterFeaturePatchParameters kubernetesClusterFeatureUpdateParameters = null;
        return updateAsync(resourceGroupName, kubernetesClusterName, featureName,
            kubernetesClusterFeatureUpdateParameters).block();
    }

    /**
     * Patch the Kubernetes cluster feature.
     * 
     * Patch properties of the provided Kubernetes cluster feature.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kubernetesClusterName The name of the Kubernetes cluster.
     * @param featureName The name of the feature.
     * @param kubernetesClusterFeatureUpdateParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return kubernetesClusterFeature represents the feature of a Kubernetes cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public KubernetesClusterFeatureInner update(String resourceGroupName, String kubernetesClusterName,
        String featureName, KubernetesClusterFeaturePatchParameters kubernetesClusterFeatureUpdateParameters,
        Context context) {
        return updateAsync(resourceGroupName, kubernetesClusterName, featureName,
            kubernetesClusterFeatureUpdateParameters, context).block();
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return kubernetesClusterFeatureList represents the list of Kubernetes cluster feature resources along with
     * {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<KubernetesClusterFeatureInner>>
        listByKubernetesClusterNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByKubernetesClusterNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<KubernetesClusterFeatureInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return kubernetesClusterFeatureList represents the list of Kubernetes cluster feature resources along with
     * {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<KubernetesClusterFeatureInner>>
        listByKubernetesClusterNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listByKubernetesClusterNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }
}
