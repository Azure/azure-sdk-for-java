// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * BareMetalMachineRunReadCommandsParameters represents the body of request containing list of read-only commands to run
 * on the bare metal machine.
 */
@Fluent
public final class BareMetalMachineRunReadCommandsParameters
    implements JsonSerializable<BareMetalMachineRunReadCommandsParameters> {
    /*
     * The list of read-only commands to be executed directly against the target machine.
     */
    private List<BareMetalMachineCommandSpecification> commands;

    /*
     * The maximum time the commands are allowed to run.
     * If the execution time exceeds the maximum, the script will be stopped, any output produced until then will be
     * captured, and the exit code matching a timeout will be returned (252).
     */
    private long limitTimeSeconds;

    /**
     * Creates an instance of BareMetalMachineRunReadCommandsParameters class.
     */
    public BareMetalMachineRunReadCommandsParameters() {
    }

    /**
     * Get the commands property: The list of read-only commands to be executed directly against the target machine.
     * 
     * @return the commands value.
     */
    public List<BareMetalMachineCommandSpecification> commands() {
        return this.commands;
    }

    /**
     * Set the commands property: The list of read-only commands to be executed directly against the target machine.
     * 
     * @param commands the commands value to set.
     * @return the BareMetalMachineRunReadCommandsParameters object itself.
     */
    public BareMetalMachineRunReadCommandsParameters withCommands(List<BareMetalMachineCommandSpecification> commands) {
        this.commands = commands;
        return this;
    }

    /**
     * Get the limitTimeSeconds property: The maximum time the commands are allowed to run.
     * If the execution time exceeds the maximum, the script will be stopped, any output produced until then will be
     * captured, and the exit code matching a timeout will be returned (252).
     * 
     * @return the limitTimeSeconds value.
     */
    public long limitTimeSeconds() {
        return this.limitTimeSeconds;
    }

    /**
     * Set the limitTimeSeconds property: The maximum time the commands are allowed to run.
     * If the execution time exceeds the maximum, the script will be stopped, any output produced until then will be
     * captured, and the exit code matching a timeout will be returned (252).
     * 
     * @param limitTimeSeconds the limitTimeSeconds value to set.
     * @return the BareMetalMachineRunReadCommandsParameters object itself.
     */
    public BareMetalMachineRunReadCommandsParameters withLimitTimeSeconds(long limitTimeSeconds) {
        this.limitTimeSeconds = limitTimeSeconds;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (commands() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property commands in model BareMetalMachineRunReadCommandsParameters"));
        } else {
            commands().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(BareMetalMachineRunReadCommandsParameters.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("commands", this.commands, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeLongField("limitTimeSeconds", this.limitTimeSeconds);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BareMetalMachineRunReadCommandsParameters from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BareMetalMachineRunReadCommandsParameters if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the BareMetalMachineRunReadCommandsParameters.
     */
    public static BareMetalMachineRunReadCommandsParameters fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BareMetalMachineRunReadCommandsParameters deserializedBareMetalMachineRunReadCommandsParameters
                = new BareMetalMachineRunReadCommandsParameters();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("commands".equals(fieldName)) {
                    List<BareMetalMachineCommandSpecification> commands
                        = reader.readArray(reader1 -> BareMetalMachineCommandSpecification.fromJson(reader1));
                    deserializedBareMetalMachineRunReadCommandsParameters.commands = commands;
                } else if ("limitTimeSeconds".equals(fieldName)) {
                    deserializedBareMetalMachineRunReadCommandsParameters.limitTimeSeconds = reader.getLong();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBareMetalMachineRunReadCommandsParameters;
        });
    }
}
