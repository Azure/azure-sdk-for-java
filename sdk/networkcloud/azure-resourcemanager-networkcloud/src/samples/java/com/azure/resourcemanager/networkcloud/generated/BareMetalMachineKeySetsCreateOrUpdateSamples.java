// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.resourcemanager.networkcloud.models.BareMetalMachineKeySetPrivilegeLevel;
import com.azure.resourcemanager.networkcloud.models.ExtendedLocation;
import com.azure.resourcemanager.networkcloud.models.KeySetUser;
import com.azure.resourcemanager.networkcloud.models.SshPublicKey;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/** Samples for BareMetalMachineKeySets CreateOrUpdate. */
public final class BareMetalMachineKeySetsCreateOrUpdateSamples {
    /*
     * x-ms-original-file: specification/networkcloud/resource-manager/Microsoft.NetworkCloud/preview/2023-05-01-preview/examples/BareMetalMachineKeySets_Create.json
     */
    /**
     * Sample code: Create or update bare metal machine key set of cluster.
     *
     * @param manager Entry point to NetworkCloudManager.
     */
    public static void createOrUpdateBareMetalMachineKeySetOfCluster(
        com.azure.resourcemanager.networkcloud.NetworkCloudManager manager) {
        manager
            .bareMetalMachineKeySets()
            .define("bareMetalMachineKeySetName")
            .withRegion("location")
            .withExistingCluster("resourceGroupName", "clusterName")
            .withExtendedLocation(
                new ExtendedLocation()
                    .withName(
                        "/subscriptions/123e4567-e89b-12d3-a456-426655440000/resourceGroups/resourceGroupName/providers/Microsoft.ExtendedLocation/customLocations/clusterExtendedLocationName")
                    .withType("CustomLocation"))
            .withAzureGroupId("f110271b-XXXX-4163-9b99-214d91660f0e")
            .withExpiration(OffsetDateTime.parse("2022-12-31T23:59:59.008Z"))
            .withJumpHostsAllowed(Arrays.asList("192.0.2.1", "192.0.2.5"))
            .withPrivilegeLevel(BareMetalMachineKeySetPrivilegeLevel.STANDARD)
            .withUserList(
                Arrays
                    .asList(
                        new KeySetUser()
                            .withAzureUsername("userABC")
                            .withDescription("Needs access for troubleshooting as a part of the support team")
                            .withSshPublicKey(new SshPublicKey().withKeyData("fakeTokenPlaceholder")),
                        new KeySetUser()
                            .withAzureUsername("userXYZ")
                            .withDescription("Needs access for troubleshooting as a part of the support team")
                            .withSshPublicKey(new SshPublicKey().withKeyData("fakeTokenPlaceholder"))))
            .withTags(mapOf("key1", "myvalue1", "key2", "myvalue2"))
            .withOsGroupName("standardAccessGroup")
            .create();
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
