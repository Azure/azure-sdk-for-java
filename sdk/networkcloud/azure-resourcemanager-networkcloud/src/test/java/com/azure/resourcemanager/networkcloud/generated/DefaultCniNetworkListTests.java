// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.networkcloud.fluent.models.DefaultCniNetworkInner;
import com.azure.resourcemanager.networkcloud.models.DefaultCniNetworkList;
import com.azure.resourcemanager.networkcloud.models.ExtendedLocation;
import com.azure.resourcemanager.networkcloud.models.IpAllocationType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DefaultCniNetworkListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DefaultCniNetworkList model =
            BinaryData
                .fromString(
                    "{\"nextLink\":\"e\",\"value\":[{\"extendedLocation\":{\"name\":\"pwo\",\"type\":\"uh\"},\"properties\":{\"clusterId\":\"p\",\"cniAsNumber\":5882727512565373358,\"detailedStatus\":\"Error\",\"detailedStatusMessage\":\"luu\",\"fabricBgpPeers\":[],\"hybridAksClustersAssociatedIds\":[],\"interfaceName\":\"ouwaboekqvkeln\",\"ipAllocationType\":\"IPV4\",\"ipv4ConnectedPrefix\":\"xwyjsflhhc\",\"ipv6ConnectedPrefix\":\"lnjixisxya\",\"l3IsolationDomainId\":\"joya\",\"provisioningState\":\"Provisioning\",\"vlan\":5415322759533569883},\"location\":\"pkii\",\"tags\":{\"tfolhbnx\":\"exznelixhnr\"},\"id\":\"nalaulppg\",\"name\":\"dtpnapnyiropuhp\",\"type\":\"gvpgy\"}]}")
                .toObject(DefaultCniNetworkList.class);
        Assertions.assertEquals("e", model.nextLink());
        Assertions.assertEquals("pkii", model.value().get(0).location());
        Assertions.assertEquals("exznelixhnr", model.value().get(0).tags().get("tfolhbnx"));
        Assertions.assertEquals("pwo", model.value().get(0).extendedLocation().name());
        Assertions.assertEquals("uh", model.value().get(0).extendedLocation().type());
        Assertions.assertEquals(IpAllocationType.IPV4, model.value().get(0).ipAllocationType());
        Assertions.assertEquals("xwyjsflhhc", model.value().get(0).ipv4ConnectedPrefix());
        Assertions.assertEquals("lnjixisxya", model.value().get(0).ipv6ConnectedPrefix());
        Assertions.assertEquals("joya", model.value().get(0).l3IsolationDomainId());
        Assertions.assertEquals(5415322759533569883L, model.value().get(0).vlan());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DefaultCniNetworkList model =
            new DefaultCniNetworkList()
                .withNextLink("e")
                .withValue(
                    Arrays
                        .asList(
                            new DefaultCniNetworkInner()
                                .withLocation("pkii")
                                .withTags(mapOf("tfolhbnx", "exznelixhnr"))
                                .withExtendedLocation(new ExtendedLocation().withName("pwo").withType("uh"))
                                .withIpAllocationType(IpAllocationType.IPV4)
                                .withIpv4ConnectedPrefix("xwyjsflhhc")
                                .withIpv6ConnectedPrefix("lnjixisxya")
                                .withL3IsolationDomainId("joya")
                                .withVlan(5415322759533569883L)));
        model = BinaryData.fromObject(model).toObject(DefaultCniNetworkList.class);
        Assertions.assertEquals("e", model.nextLink());
        Assertions.assertEquals("pkii", model.value().get(0).location());
        Assertions.assertEquals("exznelixhnr", model.value().get(0).tags().get("tfolhbnx"));
        Assertions.assertEquals("pwo", model.value().get(0).extendedLocation().name());
        Assertions.assertEquals("uh", model.value().get(0).extendedLocation().type());
        Assertions.assertEquals(IpAllocationType.IPV4, model.value().get(0).ipAllocationType());
        Assertions.assertEquals("xwyjsflhhc", model.value().get(0).ipv4ConnectedPrefix());
        Assertions.assertEquals("lnjixisxya", model.value().get(0).ipv6ConnectedPrefix());
        Assertions.assertEquals("joya", model.value().get(0).l3IsolationDomainId());
        Assertions.assertEquals(5415322759533569883L, model.value().get(0).vlan());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
