// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.networkcloud.fluent.models.TrunkedNetworkInner;
import com.azure.resourcemanager.networkcloud.models.ExtendedLocation;
import com.azure.resourcemanager.networkcloud.models.HybridAksPluginType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class TrunkedNetworkInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TrunkedNetworkInner model = BinaryData.fromString(
            "{\"extendedLocation\":{\"name\":\"bzdixzmq\",\"type\":\"noda\"},\"properties\":{\"associatedResourceIds\":[\"qhewj\"],\"clusterId\":\"mcgsbostzelnd\",\"detailedStatus\":\"Error\",\"detailedStatusMessage\":\"tmzlbiojlv\",\"hybridAksClustersAssociatedIds\":[\"bbpneqvcwwy\",\"urmochpprprs\",\"mo\",\"ayzejnhlbkpbz\"],\"hybridAksPluginType\":\"DPDK\",\"interfaceName\":\"ljhah\",\"isolationDomainIds\":[\"echndbnwieholew\",\"wiuub\",\"efqsfapaqtferrqw\",\"x\"],\"provisioningState\":\"Failed\",\"virtualMachinesAssociatedIds\":[\"apjwogqqnobpudcd\"],\"vlans\":[8045359345860647855,8090697821679343432,4391216695245524012,8634788845298655277]},\"location\":\"zasqbucljgkyexao\",\"tags\":{\"jumfqwazlnq\":\"aipidsdaultxi\",\"zqdqxt\":\"mcjn\",\"nyfusfzsvtuikzh\":\"jw\"},\"id\":\"jqg\",\"name\":\"cfhmlrqryxyn\",\"type\":\"nzrdpsovwxz\"}")
            .toObject(TrunkedNetworkInner.class);
        Assertions.assertEquals("zasqbucljgkyexao", model.location());
        Assertions.assertEquals("aipidsdaultxi", model.tags().get("jumfqwazlnq"));
        Assertions.assertEquals("bzdixzmq", model.extendedLocation().name());
        Assertions.assertEquals("noda", model.extendedLocation().type());
        Assertions.assertEquals(HybridAksPluginType.DPDK, model.hybridAksPluginType());
        Assertions.assertEquals("ljhah", model.interfaceName());
        Assertions.assertEquals("echndbnwieholew", model.isolationDomainIds().get(0));
        Assertions.assertEquals(8045359345860647855L, model.vlans().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TrunkedNetworkInner model = new TrunkedNetworkInner().withLocation("zasqbucljgkyexao")
            .withTags(mapOf("jumfqwazlnq", "aipidsdaultxi", "zqdqxt", "mcjn", "nyfusfzsvtuikzh", "jw"))
            .withExtendedLocation(new ExtendedLocation().withName("bzdixzmq").withType("noda"))
            .withHybridAksPluginType(HybridAksPluginType.DPDK)
            .withInterfaceName("ljhah")
            .withIsolationDomainIds(Arrays.asList("echndbnwieholew", "wiuub", "efqsfapaqtferrqw", "x"))
            .withVlans(
                Arrays.asList(8045359345860647855L, 8090697821679343432L, 4391216695245524012L, 8634788845298655277L));
        model = BinaryData.fromObject(model).toObject(TrunkedNetworkInner.class);
        Assertions.assertEquals("zasqbucljgkyexao", model.location());
        Assertions.assertEquals("aipidsdaultxi", model.tags().get("jumfqwazlnq"));
        Assertions.assertEquals("bzdixzmq", model.extendedLocation().name());
        Assertions.assertEquals("noda", model.extendedLocation().type());
        Assertions.assertEquals(HybridAksPluginType.DPDK, model.hybridAksPluginType());
        Assertions.assertEquals("ljhah", model.interfaceName());
        Assertions.assertEquals("echndbnwieholew", model.isolationDomainIds().get(0));
        Assertions.assertEquals(8045359345860647855L, model.vlans().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
