// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.networkcloud.fluent.models.VolumeInner;
import com.azure.resourcemanager.networkcloud.models.ExtendedLocation;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class VolumeInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VolumeInner model = BinaryData.fromString(
            "{\"extendedLocation\":{\"name\":\"xylrjvmtygjbmz\",\"type\":\"ospspshckf\"},\"properties\":{\"attachedTo\":[\"pms\",\"bpssdfp\",\"yogtieyujtvczkcn\",\"xrx\"],\"detailedStatus\":\"Provisioning\",\"detailedStatusMessage\":\"d\",\"provisioningState\":\"Accepted\",\"serialNumber\":\"nkvxlxpaglqi\",\"sizeMiB\":4471822545913660490},\"location\":\"cvkhpzvuqdfl\",\"tags\":{\"bcpzgpxtivh\":\"iypfp\",\"qjxgpnrhgovfgp\":\"knidib\",\"zvuporqzdfuydz\":\"kqmhhaowjr\"},\"id\":\"kfvxcnq\",\"name\":\"xqpswok\",\"type\":\"vkhlggdhbemz\"}")
            .toObject(VolumeInner.class);
        Assertions.assertEquals("cvkhpzvuqdfl", model.location());
        Assertions.assertEquals("iypfp", model.tags().get("bcpzgpxtivh"));
        Assertions.assertEquals("xylrjvmtygjbmz", model.extendedLocation().name());
        Assertions.assertEquals("ospspshckf", model.extendedLocation().type());
        Assertions.assertEquals(4471822545913660490L, model.sizeMiB());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VolumeInner model = new VolumeInner().withLocation("cvkhpzvuqdfl")
            .withTags(mapOf("bcpzgpxtivh", "iypfp", "qjxgpnrhgovfgp", "knidib", "zvuporqzdfuydz", "kqmhhaowjr"))
            .withExtendedLocation(new ExtendedLocation().withName("xylrjvmtygjbmz").withType("ospspshckf"))
            .withSizeMiB(4471822545913660490L);
        model = BinaryData.fromObject(model).toObject(VolumeInner.class);
        Assertions.assertEquals("cvkhpzvuqdfl", model.location());
        Assertions.assertEquals("iypfp", model.tags().get("bcpzgpxtivh"));
        Assertions.assertEquals("xylrjvmtygjbmz", model.extendedLocation().name());
        Assertions.assertEquals("ospspshckf", model.extendedLocation().type());
        Assertions.assertEquals(4471822545913660490L, model.sizeMiB());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
