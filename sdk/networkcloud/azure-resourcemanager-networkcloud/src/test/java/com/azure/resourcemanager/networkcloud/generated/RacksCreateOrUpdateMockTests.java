// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.networkcloud.NetworkCloudManager;
import com.azure.resourcemanager.networkcloud.models.ExtendedLocation;
import com.azure.resourcemanager.networkcloud.models.Rack;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class RacksCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"extendedLocation\":{\"name\":\"pwolgisubxb\",\"type\":\"eogfgfiijrykwl\"},\"properties\":{\"availabilityZone\":\"fksxqce\",\"clusterId\":\"fpxgnmqvz\",\"detailedStatus\":\"Error\",\"detailedStatusMessage\":\"q\",\"provisioningState\":\"Succeeded\",\"rackLocation\":\"ossscyva\",\"rackSerialNumber\":\"fppuacvfye\",\"rackSkuId\":\"w\"},\"location\":\"fxtjdhsoym\",\"tags\":{\"ehdpboujstkfvvds\":\"tyqft\"},\"id\":\"xcdedsu\",\"name\":\"nygnxcgjtfrnquk\",\"type\":\"rf\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        NetworkCloudManager manager = NetworkCloudManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        Rack response = manager.racks()
            .define("ptpqayamkn")
            .withRegion("xdhilz")
            .withExistingResourceGroup("yfejyvdwtf")
            .withExtendedLocation(new ExtendedLocation().withName("fgybmxs").withType("xocuullojkpoyhgw"))
            .withAvailabilityZone("djuxdbdljzgd")
            .withRackLocation("jnqogdxwbsfpyx")
            .withRackSerialNumber("tjlflecomi")
            .withRackSkuId("xojjl")
            .withTags(mapOf("ovribq", "zqjmueza", "qww", "otokhtvwtaznk"))
            .create();

        Assertions.assertEquals("fxtjdhsoym", response.location());
        Assertions.assertEquals("tyqft", response.tags().get("ehdpboujstkfvvds"));
        Assertions.assertEquals("pwolgisubxb", response.extendedLocation().name());
        Assertions.assertEquals("eogfgfiijrykwl", response.extendedLocation().type());
        Assertions.assertEquals("fksxqce", response.availabilityZone());
        Assertions.assertEquals("ossscyva", response.rackLocation());
        Assertions.assertEquals("fppuacvfye", response.rackSerialNumber());
        Assertions.assertEquals("w", response.rackSkuId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
