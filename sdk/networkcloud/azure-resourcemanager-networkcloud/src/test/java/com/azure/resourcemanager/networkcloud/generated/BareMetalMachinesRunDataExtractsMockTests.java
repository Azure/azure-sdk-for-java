// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.networkcloud.NetworkCloudManager;
import com.azure.resourcemanager.networkcloud.models.BareMetalMachineCommandSpecification;
import com.azure.resourcemanager.networkcloud.models.BareMetalMachineRunDataExtractsParameters;
import com.azure.resourcemanager.networkcloud.models.OperationStatusResult;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class BareMetalMachinesRunDataExtractsMockTests {
    @Test
    public void testRunDataExtracts() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"id\":\"tipwcxbyubhiqd\",\"resourceId\":\"urnpnuhzafccnuh\",\"name\":\"gbylbuig\",\"status\":\"xvatvcr\",\"percentComplete\":21.649128,\"startTime\":\"2021-03-26T19:13:55Z\",\"endTime\":\"2021-07-31T13:29:51Z\",\"operations\":[{\"id\":\"csyhzlwxaeaov\",\"resourceId\":\"exdnd\",\"name\":\"dwead\",\"status\":\"rzmwn\",\"percentComplete\":15.468043,\"startTime\":\"2021-06-07T19:00:04Z\",\"endTime\":\"2021-07-05T10:58:17Z\",\"operations\":[{\"id\":\"magoaqylkjz\",\"resourceId\":\"iua\",\"name\":\"cgm\",\"status\":\"itpfinzcpdl\",\"percentComplete\":31.125391,\"startTime\":\"2021-06-08T11:12:37Z\",\"endTime\":\"2021-10-17T10:54:47Z\",\"operations\":[{\"status\":\"drvcqguef\"}]}]}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        NetworkCloudManager manager =
            NetworkCloudManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        OperationStatusResult response =
            manager
                .bareMetalMachines()
                .runDataExtracts(
                    "jfoknubnoitpkp",
                    "trgdgxvc",
                    new BareMetalMachineRunDataExtractsParameters()
                        .withCommands(
                            Arrays
                                .asList(
                                    new BareMetalMachineCommandSpecification()
                                        .withArguments(Arrays.asList("sw", "gyxpqit", "eialwvskb"))
                                        .withCommand("hzacaqtyltco"),
                                    new BareMetalMachineCommandSpecification()
                                        .withArguments(Arrays.asList("jpds", "zakuejk", "vbiztjofqcv"))
                                        .withCommand("vjufycsjmlbe"),
                                    new BareMetalMachineCommandSpecification()
                                        .withArguments(Arrays.asList("jiriuxeg"))
                                        .withCommand("hortu"),
                                    new BareMetalMachineCommandSpecification()
                                        .withArguments(
                                            Arrays.asList("lpjfelqerpptcbgq", "zmnhiilialwc", "gckbb", "ccgzpraoxnyu"))
                                        .withCommand("fa")))
                        .withLimitTimeSeconds(9173171906821807545L),
                    com.azure.core.util.Context.NONE);

        Assertions.assertEquals("tipwcxbyubhiqd", response.id());
        Assertions.assertEquals("gbylbuig", response.name());
        Assertions.assertEquals("xvatvcr", response.status());
        Assertions.assertEquals(21.649128F, response.percentComplete());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-26T19:13:55Z"), response.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-31T13:29:51Z"), response.endTime());
        Assertions.assertEquals("csyhzlwxaeaov", response.operations().get(0).id());
        Assertions.assertEquals("dwead", response.operations().get(0).name());
        Assertions.assertEquals("rzmwn", response.operations().get(0).status());
        Assertions.assertEquals(15.468043F, response.operations().get(0).percentComplete());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-07T19:00:04Z"), response.operations().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-05T10:58:17Z"), response.operations().get(0).endTime());
        Assertions.assertEquals("magoaqylkjz", response.operations().get(0).operations().get(0).id());
        Assertions.assertEquals("cgm", response.operations().get(0).operations().get(0).name());
        Assertions.assertEquals("itpfinzcpdl", response.operations().get(0).operations().get(0).status());
        Assertions.assertEquals(31.125391F, response.operations().get(0).operations().get(0).percentComplete());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-06-08T11:12:37Z"),
                response.operations().get(0).operations().get(0).startTime());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-10-17T10:54:47Z"),
                response.operations().get(0).operations().get(0).endTime());
        Assertions
            .assertEquals("drvcqguef", response.operations().get(0).operations().get(0).operations().get(0).status());
    }
}
