// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.networkcloud.NetworkCloudManager;
import com.azure.resourcemanager.networkcloud.models.HybridAksIpamEnabled;
import com.azure.resourcemanager.networkcloud.models.HybridAksPluginType;
import com.azure.resourcemanager.networkcloud.models.IpAllocationType;
import com.azure.resourcemanager.networkcloud.models.L3Network;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class L3NetworksListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        String responseStr
            = "{\"value\":[{\"extendedLocation\":{\"name\":\"qxjhqxcsqhtkbtnq\",\"type\":\"rngl\"},\"properties\":{\"associatedResourceIds\":[\"iipsnawwlqkz\",\"xhhllxricct\",\"wmuqqoajxeiygle\",\"rwvaexhdc\"],\"clusterId\":\"ceqnkbrupobehd\",\"detailedStatus\":\"Provisioning\",\"detailedStatusMessage\":\"acvumepj\",\"hybridAksClustersAssociatedIds\":[\"bn\",\"pphepifexl\"],\"hybridAksIpamEnabled\":\"True\",\"hybridAksPluginType\":\"SRIOV\",\"interfaceName\":\"jclykcg\",\"ipAllocationType\":\"IPV4\",\"ipv4ConnectedPrefix\":\"jlvczu\",\"ipv6ConnectedPrefix\":\"ac\",\"l3IsolationDomainId\":\"u\",\"provisioningState\":\"Provisioning\",\"virtualMachinesAssociatedIds\":[\"pdjxqeskoynu\",\"ylpckaewsedv\",\"skwxe\"],\"vlan\":3769854061594278101},\"location\":\"rgfnz\",\"tags\":{\"bcbcpz\":\"mjtsgh\",\"ldtzmpypefcp\":\"rpzeqac\"},\"id\":\"zshnuqndaizup\",\"name\":\"kh\",\"type\":\"ytus\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        NetworkCloudManager manager = NetworkCloudManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<L3Network> response
            = manager.l3Networks().listByResourceGroup("slojfkqidnqt", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("rgfnz", response.iterator().next().location());
        Assertions.assertEquals("mjtsgh", response.iterator().next().tags().get("bcbcpz"));
        Assertions.assertEquals("qxjhqxcsqhtkbtnq", response.iterator().next().extendedLocation().name());
        Assertions.assertEquals("rngl", response.iterator().next().extendedLocation().type());
        Assertions.assertEquals(HybridAksIpamEnabled.TRUE, response.iterator().next().hybridAksIpamEnabled());
        Assertions.assertEquals(HybridAksPluginType.SRIOV, response.iterator().next().hybridAksPluginType());
        Assertions.assertEquals("jclykcg", response.iterator().next().interfaceName());
        Assertions.assertEquals(IpAllocationType.IPV4, response.iterator().next().ipAllocationType());
        Assertions.assertEquals("jlvczu", response.iterator().next().ipv4ConnectedPrefix());
        Assertions.assertEquals("ac", response.iterator().next().ipv6ConnectedPrefix());
        Assertions.assertEquals("u", response.iterator().next().l3IsolationDomainId());
        Assertions.assertEquals(3769854061594278101L, response.iterator().next().vlan());
    }
}
