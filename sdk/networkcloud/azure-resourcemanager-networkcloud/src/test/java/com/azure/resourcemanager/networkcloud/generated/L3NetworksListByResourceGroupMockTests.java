// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.networkcloud.NetworkCloudManager;
import com.azure.resourcemanager.networkcloud.models.HybridAksIpamEnabled;
import com.azure.resourcemanager.networkcloud.models.HybridAksPluginType;
import com.azure.resourcemanager.networkcloud.models.IpAllocationType;
import com.azure.resourcemanager.networkcloud.models.L3Network;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class L3NetworksListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        String responseStr
            = "{\"value\":[{\"etag\":\"fsrhkhgsnxu\",\"extendedLocation\":{\"name\":\"wkpphefsb\",\"type\":\"xlb\"},\"properties\":{\"associatedResourceIds\":[\"meikj\",\"lwzacn\"],\"clusterId\":\"pfsuqtaaz\",\"detailedStatus\":\"Error\",\"detailedStatusMessage\":\"yxoyfp\",\"hybridAksClustersAssociatedIds\":[\"iqezxlhdj\"],\"hybridAksIpamEnabled\":\"False\",\"hybridAksPluginType\":\"DPDK\",\"interfaceName\":\"wvpsoz\",\"ipAllocationType\":\"IPV6\",\"ipv4ConnectedPrefix\":\"jriyb\",\"ipv6ConnectedPrefix\":\"zo\",\"l3IsolationDomainId\":\"pnx\",\"provisioningState\":\"Accepted\",\"virtualMachinesAssociatedIds\":[\"jkgv\",\"nmx\",\"ursqf\"],\"vlan\":8569779612826853365},\"location\":\"yibuyvpirfqjpnqn\",\"tags\":{\"rexkxbhxvucn\":\"sbede\"},\"id\":\"lgmnhjevdyzn\",\"name\":\"ajsvk\",\"type\":\"kmq\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        NetworkCloudManager manager = NetworkCloudManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<L3Network> response
            = manager.l3Networks().listByResourceGroup("rr", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("yibuyvpirfqjpnqn", response.iterator().next().location());
        Assertions.assertEquals("sbede", response.iterator().next().tags().get("rexkxbhxvucn"));
        Assertions.assertEquals("wkpphefsb", response.iterator().next().extendedLocation().name());
        Assertions.assertEquals("xlb", response.iterator().next().extendedLocation().type());
        Assertions.assertEquals(HybridAksIpamEnabled.FALSE, response.iterator().next().hybridAksIpamEnabled());
        Assertions.assertEquals(HybridAksPluginType.DPDK, response.iterator().next().hybridAksPluginType());
        Assertions.assertEquals("wvpsoz", response.iterator().next().interfaceName());
        Assertions.assertEquals(IpAllocationType.IPV6, response.iterator().next().ipAllocationType());
        Assertions.assertEquals("jriyb", response.iterator().next().ipv4ConnectedPrefix());
        Assertions.assertEquals("zo", response.iterator().next().ipv6ConnectedPrefix());
        Assertions.assertEquals("pnx", response.iterator().next().l3IsolationDomainId());
        Assertions.assertEquals(8569779612826853365L, response.iterator().next().vlan());
    }
}
