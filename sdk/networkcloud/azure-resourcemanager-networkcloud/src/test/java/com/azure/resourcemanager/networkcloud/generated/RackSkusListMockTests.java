// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.networkcloud.NetworkCloudManager;
import com.azure.resourcemanager.networkcloud.models.RackSku;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class RackSkusListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"computeMachines\":[{\"properties\":{\"bootstrapProtocol\":\"PXE\",\"cpuCores\":1162369125520380881,\"cpuSockets\":7111612691048481144,\"disks\":[{},{}],\"generation\":\"vgw\",\"hardwareVersion\":\"fftedousnktj\",\"memoryCapacityGB\":5113328409555370770,\"model\":\"aqo\",\"networkInterfaces\":[{},{}],\"totalThreads\":1888260015025911012,\"vendor\":\"uzlqbtxxw\"},\"rackSlot\":970331481164269143}],\"controllerMachines\":[{\"properties\":{\"bootstrapProtocol\":\"PXE\",\"cpuCores\":3928980257078024599,\"cpuSockets\":2915829110747412317,\"disks\":[{}],\"generation\":\"ywhczzq\",\"hardwareVersion\":\"mngqbe\",\"memoryCapacityGB\":2849147667184046252,\"model\":\"rzwnyk\",\"networkInterfaces\":[{},{}],\"totalThreads\":2347230216812317496,\"vendor\":\"rmpwctofld\"},\"rackSlot\":1576220923773173717},{\"properties\":{\"bootstrapProtocol\":\"PXE\",\"cpuCores\":6662592798058262419,\"cpuSockets\":7447922914511830634,\"disks\":[{},{}],\"generation\":\"wjiyewhfjsrwq\",\"hardwareVersion\":\"etfgcwvrrmdqntyc\",\"memoryCapacityGB\":3858359410262703624,\"model\":\"vmaxgnuyea\",\"networkInterfaces\":[{},{},{},{}],\"totalThreads\":2750534725334847292,\"vendor\":\"jecehokwc\"},\"rackSlot\":8144409116555833798}],\"description\":\"oesqrggvrbnyruko\",\"maxClusterSlots\":2465905855167092108,\"provisioningState\":\"Canceled\",\"rackType\":\"Compute\",\"storageAppliances\":[{\"properties\":{\"capacityGB\":3626713664210758802,\"model\":\"h\"},\"rackSlot\":3498524662642148931},{\"properties\":{\"capacityGB\":6282947498031082528,\"model\":\"thqkkwhbgxvellv\"},\"rackSlot\":5113895630128192471}],\"supportedRackSkuIds\":[\"nitmujdtvmclyymf\",\"hmjpdd\"]},\"id\":\"xfzuvrzmzqmzj\",\"name\":\"rb\",\"type\":\"pv\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        NetworkCloudManager manager = NetworkCloudManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<RackSku> response = manager.rackSkus().list(com.azure.core.util.Context.NONE);

    }
}
