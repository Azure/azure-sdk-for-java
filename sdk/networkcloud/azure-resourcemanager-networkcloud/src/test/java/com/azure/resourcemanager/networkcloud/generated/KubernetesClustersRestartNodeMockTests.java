// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.networkcloud.NetworkCloudManager;
import com.azure.resourcemanager.networkcloud.models.KubernetesClusterRestartNodeParameters;
import com.azure.resourcemanager.networkcloud.models.OperationStatusResult;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class KubernetesClustersRestartNodeMockTests {
    @Test
    public void testRestartNode() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"id\":\"hyibdrqrswh\",\"resourceId\":\"ubpyrow\",\"name\":\"oxztfwfqch\",\"status\":\"czevjnn\",\"percentComplete\":64.1754,\"startTime\":\"2021-04-04T10:49Z\",\"endTime\":\"2021-05-24T09:27:10Z\",\"operations\":[{\"id\":\"qpemh\",\"resourceId\":\"gkrepdqhqyhw\",\"name\":\"e\",\"status\":\"vx\",\"percentComplete\":80.07647,\"startTime\":\"2021-11-27T02:47:28Z\",\"endTime\":\"2021-04-02T23:25:20Z\",\"operations\":[{\"id\":\"inhgre\",\"resourceId\":\"twhlpuzjpce\",\"name\":\"nzangprbfaxy\",\"status\":\"zlbciphmse\",\"percentComplete\":97.917725,\"startTime\":\"2021-11-20T12:21:36Z\",\"endTime\":\"2021-01-10T19:01:41Z\",\"operations\":[{\"status\":\"xfvonfeeqg\"},{\"status\":\"krie\"}]},{\"id\":\"nixxo\",\"resourceId\":\"zk\",\"name\":\"wnwpiwxeii\",\"status\":\"rmpepkld\",\"percentComplete\":24.544788,\"startTime\":\"2021-07-13T06:09:31Z\",\"endTime\":\"2021-11-28T06:05:09Z\",\"operations\":[{\"status\":\"ws\"},{\"status\":\"gkjgya\"}]}]},{\"id\":\"sekwefc\",\"resourceId\":\"inwoqartwyxq\",\"name\":\"l\",\"status\":\"dvatdavuqm\",\"percentComplete\":60.21031,\"startTime\":\"2021-10-15T14:21:54Z\",\"endTime\":\"2021-02-05T13:45:47Z\",\"operations\":[{\"id\":\"quvjez\",\"resourceId\":\"umvpsimioyoigl\",\"name\":\"iqwnnraclibbfq\",\"status\":\"spkladydgnhau\",\"percentComplete\":45.845135,\"startTime\":\"2021-04-29T04:27:22Z\",\"endTime\":\"2021-08-06T01:44:23Z\",\"operations\":[{\"status\":\"mnmabeddqil\"}]},{\"id\":\"fpfqf\",\"resourceId\":\"vstclg\",\"name\":\"vwerfwxbsmtb\",\"status\":\"jj\",\"percentComplete\":18.261974,\"startTime\":\"2021-02-16T12:19:52Z\",\"endTime\":\"2020-12-28T15:51:37Z\",\"operations\":[{\"status\":\"vbtbrekqhsqhtf\"}]}]},{\"id\":\"byejuwyqwdqigm\",\"resourceId\":\"ginz\",\"name\":\"lujkhn\",\"status\":\"cmrnkfmkhcq\",\"percentComplete\":12.672424,\"startTime\":\"2021-01-04T06:58:03Z\",\"endTime\":\"2021-09-23T04:33:55Z\",\"operations\":[{\"id\":\"qe\",\"resourceId\":\"j\",\"name\":\"vragpokddx\",\"status\":\"jhhkv\",\"percentComplete\":93.62849,\"startTime\":\"2021-01-20T22:08:25Z\",\"endTime\":\"2021-02-07T21:47:53Z\",\"operations\":[{\"status\":\"ewkq\"}]},{\"id\":\"pgb\",\"resourceId\":\"ffbkkwvdxaexqo\",\"name\":\"yrlji\",\"status\":\"lzbnobrqlpbcjt\",\"percentComplete\":67.76566,\"startTime\":\"2021-10-06T10:17Z\",\"endTime\":\"2021-10-31T04:42:12Z\",\"operations\":[{\"status\":\"bxnhsqeaeo\"},{\"status\":\"qelwgdhuruzytza\"},{\"status\":\"ogatmoljiy\"},{\"status\":\"mpinmzvfkneerzzt\"}]}]},{\"id\":\"j\",\"resourceId\":\"ugdybnhrxlel\",\"name\":\"hkeizcp\",\"status\":\"htdm\",\"percentComplete\":3.949666,\"startTime\":\"2021-05-22T08:34:02Z\",\"endTime\":\"2021-01-25T14:21:57Z\",\"operations\":[{\"id\":\"ydbjzcqymlcf\",\"resourceId\":\"hmhsurlgwqkpm\",\"name\":\"pstauol\",\"status\":\"wiubmomsgvv\",\"percentComplete\":92.820564,\"startTime\":\"2021-01-31T12:32:47Z\",\"endTime\":\"2021-01-17T00:07:41Z\",\"operations\":[{\"status\":\"ewjjmajnkdflqio\"},{\"status\":\"swaeqkzfz\"},{\"status\":\"xjoshohtotryegpk\"},{\"status\":\"xrmexznlw\"}]},{\"id\":\"okxkhupzer\",\"resourceId\":\"g\",\"name\":\"l\",\"status\":\"drmyfcemftzg\",\"percentComplete\":14.742958,\"startTime\":\"2021-07-17T22:46:30Z\",\"endTime\":\"2021-08-17T18:53:21Z\",\"operations\":[{\"status\":\"kd\"},{\"status\":\"qnhttwdowrczfj\"},{\"status\":\"nnuxxrkkmhm\"}]},{\"id\":\"wempdcifrhju\",\"resourceId\":\"sulwzpflusn\",\"name\":\"mhh\",\"status\":\"zotfriyrgkoek\",\"percentComplete\":74.13537,\"startTime\":\"2021-11-24T18:08:55Z\",\"endTime\":\"2021-03-14T19:38:08Z\",\"operations\":[{\"status\":\"ghctxbxmolpcqyde\"},{\"status\":\"kvskiczdfrjei\"},{\"status\":\"ikgqaboohxbms\"}]},{\"id\":\"qsxrmdvewu\",\"resourceId\":\"aeohpjhgejkbvhh\",\"name\":\"urghoo\",\"status\":\"aexbkhxjxjo\",\"percentComplete\":19.243462,\"startTime\":\"2021-05-08T22:48:16Z\",\"endTime\":\"2021-09-17T12:36:39Z\",\"operations\":[{\"status\":\"nkobektmbozom\"},{\"status\":\"zamicb\"}]}]}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        NetworkCloudManager manager =
            NetworkCloudManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        OperationStatusResult response =
            manager
                .kubernetesClusters()
                .restartNode(
                    "mrxkhlobvv",
                    "bhvhdiqay",
                    new KubernetesClusterRestartNodeParameters().withNodeName("luiyuosnuudte"),
                    com.azure.core.util.Context.NONE);

        Assertions.assertEquals("hyibdrqrswh", response.id());
        Assertions.assertEquals("oxztfwfqch", response.name());
        Assertions.assertEquals("czevjnn", response.status());
        Assertions.assertEquals(64.1754F, response.percentComplete());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-04T10:49Z"), response.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-24T09:27:10Z"), response.endTime());
        Assertions.assertEquals("qpemh", response.operations().get(0).id());
        Assertions.assertEquals("e", response.operations().get(0).name());
        Assertions.assertEquals("vx", response.operations().get(0).status());
        Assertions.assertEquals(80.07647F, response.operations().get(0).percentComplete());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-27T02:47:28Z"), response.operations().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-02T23:25:20Z"), response.operations().get(0).endTime());
        Assertions.assertEquals("inhgre", response.operations().get(0).operations().get(0).id());
        Assertions.assertEquals("nzangprbfaxy", response.operations().get(0).operations().get(0).name());
        Assertions.assertEquals("zlbciphmse", response.operations().get(0).operations().get(0).status());
        Assertions.assertEquals(97.917725F, response.operations().get(0).operations().get(0).percentComplete());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-11-20T12:21:36Z"),
                response.operations().get(0).operations().get(0).startTime());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-01-10T19:01:41Z"),
                response.operations().get(0).operations().get(0).endTime());
        Assertions
            .assertEquals("xfvonfeeqg", response.operations().get(0).operations().get(0).operations().get(0).status());
    }
}
