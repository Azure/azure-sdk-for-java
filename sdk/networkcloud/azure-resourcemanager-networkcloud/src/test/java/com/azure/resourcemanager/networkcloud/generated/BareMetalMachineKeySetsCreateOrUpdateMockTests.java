// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.networkcloud.NetworkCloudManager;
import com.azure.resourcemanager.networkcloud.models.BareMetalMachineKeySet;
import com.azure.resourcemanager.networkcloud.models.BareMetalMachineKeySetPrivilegeLevel;
import com.azure.resourcemanager.networkcloud.models.ExtendedLocation;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class BareMetalMachineKeySetsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"extendedLocation\":{\"name\":\"tsnld\",\"type\":\"pwolgisubxb\"},\"properties\":{\"azureGroupId\":\"eogfgfiijrykwl\",\"detailedStatus\":\"AllActive\",\"detailedStatusMessage\":\"xqceazfpxgn\",\"expiration\":\"2021-09-07T15:14:18Z\",\"jumpHostsAllowed\":[\"zvluyqqaiosss\",\"yvaifpp\"],\"lastValidation\":\"2020-12-21T21:17:06Z\",\"osGroupName\":\"fye\",\"privilegeLevel\":\"Standard\",\"provisioningState\":\"Succeeded\",\"userList\":[],\"userListStatus\":[]},\"location\":\"dhsoymhpv\",\"tags\":{\"pboujs\":\"ftteh\",\"suenyg\":\"kfvvdshxcde\",\"nquktrfnslnlrxs\":\"xcgjtf\",\"wntfmtbgwjdxwna\":\"ylt\"},\"id\":\"kurrdreyzjwh\",\"name\":\"etw\",\"type\":\"jwzzqseuzu\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        NetworkCloudManager manager =
            NetworkCloudManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        BareMetalMachineKeySet response =
            manager
                .bareMetalMachineKeySets()
                .define("cqypz")
                .withRegion("gzlrqhbj")
                .withExistingCluster("o", "jy")
                .withExtendedLocation(new ExtendedLocation().withName("zufgs").withType("fejyvdwtfxptpqa"))
                .withAzureGroupId("amkncfgy")
                .withExpiration(OffsetDateTime.parse("2021-02-01T21:40:19Z"))
                .withJumpHostsAllowed(Arrays.asList("kpoy"))
                .withPrivilegeLevel(BareMetalMachineKeySetPrivilegeLevel.SUPERUSER)
                .withUserList(Arrays.asList())
                .withTags(
                    mapOf("jlf", "gdxwbsfpyxx", "ilz", "ecominxojjluxxd", "za", "dzzqjmu", "otokhtvwtaznk", "ovribq"))
                .withOsGroupName("djuxdbdljzgd")
                .create();

        Assertions.assertEquals("dhsoymhpv", response.location());
        Assertions.assertEquals("ftteh", response.tags().get("pboujs"));
        Assertions.assertEquals("tsnld", response.extendedLocation().name());
        Assertions.assertEquals("pwolgisubxb", response.extendedLocation().type());
        Assertions.assertEquals("eogfgfiijrykwl", response.azureGroupId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-07T15:14:18Z"), response.expiration());
        Assertions.assertEquals("zvluyqqaiosss", response.jumpHostsAllowed().get(0));
        Assertions.assertEquals("fye", response.osGroupName());
        Assertions.assertEquals(BareMetalMachineKeySetPrivilegeLevel.STANDARD, response.privilegeLevel());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
