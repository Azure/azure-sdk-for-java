// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.networkcloud.NetworkCloudManager;
import com.azure.resourcemanager.networkcloud.models.BareMetalMachineRunCommandParameters;
import com.azure.resourcemanager.networkcloud.models.OperationStatusResult;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class BareMetalMachinesRunCommandMockTests {
    @Test
    public void testRunCommand() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"id\":\"lkcsmknhwtbbae\",\"resourceId\":\"rvvmqfloygb\",\"name\":\"wumgx\",\"status\":\"gdhpabgdexjddv\",\"percentComplete\":50.13225,\"startTime\":\"2021-10-15T10:21:04Z\",\"endTime\":\"2021-07-09T18:18:40Z\",\"operations\":[{\"id\":\"llcolsrsxapte\",\"resourceId\":\"excgjokjljnhvl\",\"name\":\"bekpeeksnbksdqhj\",\"status\":\"yklxe\",\"percentComplete\":13.086528,\"startTime\":\"2021-03-06T14:39:47Z\",\"endTime\":\"2021-11-12T17:23:36Z\",\"operations\":[{\"id\":\"oqmavnwqjwgo\",\"resourceId\":\"lejjjkxy\",\"name\":\"fdb\",\"status\":\"jbzten\",\"percentComplete\":48.449642,\"startTime\":\"2020-12-21T13:24:31Z\",\"endTime\":\"2021-10-20T20:55:34Z\",\"operations\":[{\"status\":\"kns\"},{\"status\":\"fwushcdpkupn\"}]}]},{\"id\":\"jfbp\",\"resourceId\":\"wxeoiojfizfavkj\",\"name\":\"fbcyaykmm\",\"status\":\"zs\",\"percentComplete\":94.81268,\"startTime\":\"2021-03-03T22:45:37Z\",\"endTime\":\"2021-03-01T10:08:57Z\",\"operations\":[{\"id\":\"wsrsxkrplbja\",\"resourceId\":\"jwwviy\",\"name\":\"ps\",\"status\":\"hbrnnhjx\",\"percentComplete\":13.075119,\"startTime\":\"2021-10-23T15:48:33Z\",\"endTime\":\"2021-04-28T17:16:52Z\",\"operations\":[{\"status\":\"wetp\"},{\"status\":\"zycyqiqyhg\"}]}]},{\"id\":\"zlex\",\"resourceId\":\"fledynojpziu\",\"name\":\"bzkkd\",\"status\":\"nhqs\",\"percentComplete\":32.192505,\"startTime\":\"2021-04-17T05:36:17Z\",\"endTime\":\"2021-11-12T21:16:46Z\",\"operations\":[{\"id\":\"bafvafhlbylcc\",\"resourceId\":\"vxrh\",\"name\":\"d\",\"status\":\"wrso\",\"percentComplete\":21.28094,\"startTime\":\"2021-08-15T11:31:01Z\",\"endTime\":\"2021-07-12T15:31:33Z\",\"operations\":[{\"status\":\"rrhvhfnracwnpq\"},{\"status\":\"g\"}]},{\"id\":\"jwouhda\",\"resourceId\":\"igrb\",\"name\":\"xsjybvitvqk\",\"status\":\"y\",\"percentComplete\":7.9839587,\"startTime\":\"2021-10-28T18:11:26Z\",\"endTime\":\"2021-07-21T21:37:11Z\",\"operations\":[{\"status\":\"uwdchozf\"}]},{\"id\":\"exlvxnoakiz\",\"resourceId\":\"aikn\",\"name\":\"lnuwiguy\",\"status\":\"lykwphvxz\",\"percentComplete\":66.61096,\"startTime\":\"2021-02-09T15:30:09Z\",\"endTime\":\"2021-08-08T23:29:51Z\",\"operations\":[{\"status\":\"lkexaonwivkcqh\"}]}]},{\"id\":\"knlccrmmkyup\",\"resourceId\":\"ubyqj\",\"name\":\"akfqfrkemyildud\",\"status\":\"jascowvfdjkpd\",\"percentComplete\":30.62821,\"startTime\":\"2021-02-03T18:42:47Z\",\"endTime\":\"2021-11-26T10:04:18Z\",\"operations\":[{\"id\":\"zvyfijdkzuqnwsi\",\"resourceId\":\"uqoly\",\"name\":\"luqw\",\"status\":\"ulsutrjbhxy\",\"percentComplete\":46.34994,\"startTime\":\"2021-07-20T12:13:18Z\",\"endTime\":\"2021-11-07T03:15:42Z\",\"operations\":[{\"status\":\"qugdrftbcvexreuq\"}]},{\"id\":\"tljvfwhreagkhyx\",\"resourceId\":\"qtvbczsu\",\"name\":\"dgglmepjpfs\",\"status\":\"ykgsangpszng\",\"percentComplete\":4.358429,\"startTime\":\"2021-06-06T23:22:02Z\",\"endTime\":\"2021-02-13T15:02:43Z\",\"operations\":[{\"status\":\"cj\"},{\"status\":\"jcngoadyed\"}]}]}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        NetworkCloudManager manager =
            NetworkCloudManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        OperationStatusResult response =
            manager
                .bareMetalMachines()
                .runCommand(
                    "vzrrryveimi",
                    "sk",
                    new BareMetalMachineRunCommandParameters()
                        .withArguments(Arrays.asList("atvfuzkaftj", "vru", "wigsyeipqdsm"))
                        .withLimitTimeSeconds(3521751266515762395L)
                        .withScript("rqgdgkkil"),
                    com.azure.core.util.Context.NONE);

        Assertions.assertEquals("lkcsmknhwtbbae", response.id());
        Assertions.assertEquals("wumgx", response.name());
        Assertions.assertEquals("gdhpabgdexjddv", response.status());
        Assertions.assertEquals(50.13225F, response.percentComplete());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-15T10:21:04Z"), response.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-09T18:18:40Z"), response.endTime());
        Assertions.assertEquals("llcolsrsxapte", response.operations().get(0).id());
        Assertions.assertEquals("bekpeeksnbksdqhj", response.operations().get(0).name());
        Assertions.assertEquals("yklxe", response.operations().get(0).status());
        Assertions.assertEquals(13.086528F, response.operations().get(0).percentComplete());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-06T14:39:47Z"), response.operations().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-12T17:23:36Z"), response.operations().get(0).endTime());
        Assertions.assertEquals("oqmavnwqjwgo", response.operations().get(0).operations().get(0).id());
        Assertions.assertEquals("fdb", response.operations().get(0).operations().get(0).name());
        Assertions.assertEquals("jbzten", response.operations().get(0).operations().get(0).status());
        Assertions.assertEquals(48.449642F, response.operations().get(0).operations().get(0).percentComplete());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2020-12-21T13:24:31Z"),
                response.operations().get(0).operations().get(0).startTime());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-10-20T20:55:34Z"),
                response.operations().get(0).operations().get(0).endTime());
        Assertions.assertEquals("kns", response.operations().get(0).operations().get(0).operations().get(0).status());
    }
}
