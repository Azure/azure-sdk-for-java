// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.networkcloud.models.ClusterUpdateStrategy;
import com.azure.resourcemanager.networkcloud.models.ClusterUpdateStrategyType;
import com.azure.resourcemanager.networkcloud.models.ValidationThresholdType;
import org.junit.jupiter.api.Assertions;

public final class ClusterUpdateStrategyTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ClusterUpdateStrategy model = BinaryData.fromString(
            "{\"maxUnavailable\":8183486072070109381,\"strategyType\":\"Rack\",\"thresholdType\":\"PercentSuccess\",\"thresholdValue\":1965197725763741075,\"waitTimeMinutes\":4275294117153207447}")
            .toObject(ClusterUpdateStrategy.class);
        Assertions.assertEquals(8183486072070109381L, model.maxUnavailable());
        Assertions.assertEquals(ClusterUpdateStrategyType.RACK, model.strategyType());
        Assertions.assertEquals(ValidationThresholdType.PERCENT_SUCCESS, model.thresholdType());
        Assertions.assertEquals(1965197725763741075L, model.thresholdValue());
        Assertions.assertEquals(4275294117153207447L, model.waitTimeMinutes());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ClusterUpdateStrategy model = new ClusterUpdateStrategy().withMaxUnavailable(8183486072070109381L)
            .withStrategyType(ClusterUpdateStrategyType.RACK)
            .withThresholdType(ValidationThresholdType.PERCENT_SUCCESS)
            .withThresholdValue(1965197725763741075L)
            .withWaitTimeMinutes(4275294117153207447L);
        model = BinaryData.fromObject(model).toObject(ClusterUpdateStrategy.class);
        Assertions.assertEquals(8183486072070109381L, model.maxUnavailable());
        Assertions.assertEquals(ClusterUpdateStrategyType.RACK, model.strategyType());
        Assertions.assertEquals(ValidationThresholdType.PERCENT_SUCCESS, model.thresholdType());
        Assertions.assertEquals(1965197725763741075L, model.thresholdValue());
        Assertions.assertEquals(4275294117153207447L, model.waitTimeMinutes());
    }
}
