// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.networkcloud.NetworkCloudManager;
import com.azure.resourcemanager.networkcloud.models.ClusterUpdateVersionParameters;
import com.azure.resourcemanager.networkcloud.models.OperationStatusResult;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ClustersUpdateVersionMockTests {
    @Test
    public void testUpdateVersion() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"id\":\"sn\",\"resourceId\":\"kpwolg\",\"name\":\"ubxbteogfgfiijr\",\"status\":\"kw\",\"percentComplete\":42.7373,\"startTime\":\"2021-01-10T10:54:04Z\",\"endTime\":\"2021-08-31T06:22:15Z\",\"operations\":[{\"id\":\"zfpxgnmqvzvluy\",\"resourceId\":\"aiossscyvaifp\",\"name\":\"acvfyeowps\",\"status\":\"x\",\"percentComplete\":53.485535,\"startTime\":\"2021-08-14T22:48:13Z\",\"endTime\":\"2021-09-25T20:23:40Z\",\"operations\":[{\"id\":\"v\",\"resourceId\":\"qfttehdpboujs\",\"name\":\"fvvdshxcdedsue\",\"status\":\"ygnxcgjtfrnqukt\",\"percentComplete\":94.54554,\"startTime\":\"2021-08-24T04:32:50Z\",\"endTime\":\"2021-01-18T17:13:09Z\",\"operations\":[{\"status\":\"s\"},{\"status\":\"ylt\"}]},{\"id\":\"tfmtbgwjdxwnazku\",\"resourceId\":\"drey\",\"name\":\"whsetwwjwzzqs\",\"status\":\"uzu\",\"percentComplete\":3.2954276,\"startTime\":\"2021-10-08T06:22:48Z\",\"endTime\":\"2021-11-09T13:06:10Z\",\"operations\":[{\"status\":\"qqzzdc\"}]},{\"id\":\"ystewfopa\",\"resourceId\":\"azgbsqgpe\",\"name\":\"c\",\"status\":\"utmdpvozg\",\"percentComplete\":20.778894,\"startTime\":\"2021-06-20T10:45:43Z\",\"endTime\":\"2021-10-05T16:50:55Z\",\"operations\":[{\"status\":\"lctzeyowmndcovd\"},{\"status\":\"zqauxzan\"}]}]},{\"id\":\"fruwkud\",\"resourceId\":\"cpft\",\"name\":\"dqyemebunaucm\",\"status\":\"irtneemmjau\",\"percentComplete\":19.34607,\"startTime\":\"2021-01-10T07:42:21Z\",\"endTime\":\"2021-09-29T04:30:33Z\",\"operations\":[{\"id\":\"itranizerwguda\",\"resourceId\":\"xubvf\",\"name\":\"gfcoc\",\"status\":\"fhpri\",\"percentComplete\":71.74806,\"startTime\":\"2021-10-26T02:43:40Z\",\"endTime\":\"2021-11-27T08:02:33Z\",\"operations\":[{\"status\":\"ud\"}]},{\"id\":\"lcdculregpq\",\"resourceId\":\"ojhvrz\",\"name\":\"vgysh\",\"status\":\"rdgrtwmewjzlp\",\"percentComplete\":10.935652,\"startTime\":\"2021-08-16T23:36:15Z\",\"endTime\":\"2021-08-23T04:29:55Z\",\"operations\":[{\"status\":\"cayer\"},{\"status\":\"rransyb\"},{\"status\":\"lpolwzrghsrle\"},{\"status\":\"nkfscjfn\"}]},{\"id\":\"vuagfqwtl\",\"resourceId\":\"gvmreuptrklzmi\",\"name\":\"jwolxfsvaghmpynw\",\"status\":\"slrcigtzj\",\"percentComplete\":30.121494,\"startTime\":\"2021-06-29T16:13:51Z\",\"endTime\":\"2021-03-10T01:51:25Z\",\"operations\":[{\"status\":\"nssovyxpav\"},{\"status\":\"dnievwffcvvy\"}]}]},{\"id\":\"puxgcbdsvalpnpt\",\"resourceId\":\"rkxgpazwugxyqvnj\",\"name\":\"felhldiuhzzgqlm\",\"status\":\"aewzgiudjp\",\"percentComplete\":70.10709,\"startTime\":\"2021-04-21T08:46:45Z\",\"endTime\":\"2021-07-17T16:07:33Z\",\"operations\":[{\"id\":\"hkrezsdsuxheqdgc\",\"resourceId\":\"xsp\",\"name\":\"ymmqgwokmikp\",\"status\":\"zfbmjxuv\",\"percentComplete\":53.539932,\"startTime\":\"2021-09-11T13:09:39Z\",\"endTime\":\"2021-05-30T11:35:27Z\",\"operations\":[{\"status\":\"dvwz\"},{\"status\":\"ehpphthdklmveta\"}]},{\"id\":\"kfqoixwgiksbb\",\"resourceId\":\"ooxr\",\"name\":\"gwphchgjtnht\",\"status\":\"kfac\",\"percentComplete\":18.23241,\"startTime\":\"2020-12-27T13:49:33Z\",\"endTime\":\"2021-08-10T14:00:59Z\",\"operations\":[{\"status\":\"eezbx\"},{\"status\":\"qx\"},{\"status\":\"nuvwcgasgomtmjzw\"}]},{\"id\":\"govsxpwwzt\",\"resourceId\":\"mkkhtgfredml\",\"name\":\"grllcc\",\"status\":\"aovjow\",\"percentComplete\":14.433879,\"startTime\":\"2021-01-21T20:12:23Z\",\"endTime\":\"2021-08-24T08:25:37Z\",\"operations\":[{\"status\":\"mlyotg\"}]}]},{\"id\":\"nsrqor\",\"resourceId\":\"enmvcebxeetq\",\"name\":\"xcxxqndcqjkedw\",\"status\":\"urcgojmrvvxwj\",\"percentComplete\":27.765995,\"startTime\":\"2021-08-17T05:51:47Z\",\"endTime\":\"2021-09-28T04:04:58Z\",\"operations\":[{\"id\":\"silc\",\"resourceId\":\"skx\",\"name\":\"ansbvriaqg\",\"status\":\"tojrulfucte\",\"percentComplete\":30.9254,\"startTime\":\"2021-12-07T06:33:03Z\",\"endTime\":\"2021-09-10T11:37:03Z\",\"operations\":[{\"status\":\"xlyubqjrostv\"},{\"status\":\"jeqmtzzbeqrzt\"},{\"status\":\"x\"},{\"status\":\"lxrdhabsrwrsn\"}]}]}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        NetworkCloudManager manager =
            NetworkCloudManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        OperationStatusResult response =
            manager
                .clusters()
                .updateVersion(
                    "ibqlotokhtvwtaz",
                    "kcqwwxwjyofgwh",
                    new ClusterUpdateVersionParameters().withTargetClusterVersion("kbtlwljssm"),
                    com.azure.core.util.Context.NONE);

        Assertions.assertEquals("sn", response.id());
        Assertions.assertEquals("ubxbteogfgfiijr", response.name());
        Assertions.assertEquals("kw", response.status());
        Assertions.assertEquals(42.7373F, response.percentComplete());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-10T10:54:04Z"), response.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-31T06:22:15Z"), response.endTime());
        Assertions.assertEquals("zfpxgnmqvzvluy", response.operations().get(0).id());
        Assertions.assertEquals("acvfyeowps", response.operations().get(0).name());
        Assertions.assertEquals("x", response.operations().get(0).status());
        Assertions.assertEquals(53.485535F, response.operations().get(0).percentComplete());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-14T22:48:13Z"), response.operations().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-25T20:23:40Z"), response.operations().get(0).endTime());
        Assertions.assertEquals("v", response.operations().get(0).operations().get(0).id());
        Assertions.assertEquals("fvvdshxcdedsue", response.operations().get(0).operations().get(0).name());
        Assertions.assertEquals("ygnxcgjtfrnqukt", response.operations().get(0).operations().get(0).status());
        Assertions.assertEquals(94.54554F, response.operations().get(0).operations().get(0).percentComplete());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-08-24T04:32:50Z"),
                response.operations().get(0).operations().get(0).startTime());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-01-18T17:13:09Z"),
                response.operations().get(0).operations().get(0).endTime());
        Assertions.assertEquals("s", response.operations().get(0).operations().get(0).operations().get(0).status());
    }
}
