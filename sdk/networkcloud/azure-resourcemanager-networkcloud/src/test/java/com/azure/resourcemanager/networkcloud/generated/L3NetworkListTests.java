// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.networkcloud.fluent.models.L3NetworkInner;
import com.azure.resourcemanager.networkcloud.models.ExtendedLocation;
import com.azure.resourcemanager.networkcloud.models.HybridAksIpamEnabled;
import com.azure.resourcemanager.networkcloud.models.HybridAksPluginType;
import com.azure.resourcemanager.networkcloud.models.IpAllocationType;
import com.azure.resourcemanager.networkcloud.models.L3NetworkList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class L3NetworkListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        L3NetworkList model = BinaryData.fromString(
            "{\"nextLink\":\"f\",\"value\":[{\"extendedLocation\":{\"name\":\"txhojujb\",\"type\":\"pelmcuvhixbjxyf\"},\"properties\":{\"associatedResourceIds\":[\"lrcoolsttpki\"],\"clusterId\":\"kbnujr\",\"detailedStatus\":\"Available\",\"detailedStatusMessage\":\"y\",\"hybridAksClustersAssociatedIds\":[\"pncur\",\"oiwiithtywub\"],\"hybridAksIpamEnabled\":\"False\",\"hybridAksPluginType\":\"OSDevice\",\"interfaceName\":\"qknfd\",\"ipAllocationType\":\"DualStack\",\"ipv4ConnectedPrefix\":\"chrdgoihxumwcto\",\"ipv6ConnectedPrefix\":\"zj\",\"l3IsolationDomainId\":\"uu\",\"provisioningState\":\"Provisioning\",\"virtualMachinesAssociatedIds\":[\"gg\",\"tsbwtovvtgse\",\"nqfiufxqknpi\",\"gnepttwqmsni\"],\"vlan\":6782038143058850219},\"location\":\"mqnrojlpijnkr\",\"tags\":{\"nasx\":\"ddhcratizzr\"},\"id\":\"ft\",\"name\":\"zq\",\"type\":\"zh\"},{\"extendedLocation\":{\"name\":\"tw\",\"type\":\"sgogczhonnxk\"},\"properties\":{\"associatedResourceIds\":[\"nyhmossxkkgthr\",\"gh\",\"jbdhqxvc\"],\"clusterId\":\"frpdsofbshrns\",\"detailedStatus\":\"Available\",\"detailedStatusMessage\":\"wdvzyy\",\"hybridAksClustersAssociatedIds\":[\"nu\",\"vj\"],\"hybridAksIpamEnabled\":\"True\",\"hybridAksPluginType\":\"DPDK\",\"interfaceName\":\"wnopqgikyzirtx\",\"ipAllocationType\":\"IPV6\",\"ipv4ConnectedPrefix\":\"zejntps\",\"ipv6ConnectedPrefix\":\"gioilqu\",\"l3IsolationDomainId\":\"rydxtqm\",\"provisioningState\":\"Failed\",\"virtualMachinesAssociatedIds\":[\"rgguf\",\"yaomtb\"],\"vlan\":6438928217909875539},\"location\":\"vgrvkffo\",\"tags\":{\"jmfxumvf\":\"hpjbib\"},\"id\":\"luyovwxnbkfezzx\",\"name\":\"cy\",\"type\":\"wzdgirujbzbo\"},{\"extendedLocation\":{\"name\":\"vzzbtdcq\",\"type\":\"pniyujviyl\"},\"properties\":{\"associatedResourceIds\":[\"hfssnrb\",\"ye\",\"rymsgaojfmw\"],\"clusterId\":\"otmrfhir\",\"detailedStatus\":\"Provisioning\",\"detailedStatusMessage\":\"oxoftpipiwycz\",\"hybridAksClustersAssociatedIds\":[\"a\",\"pqjlihhyusps\"],\"hybridAksIpamEnabled\":\"False\",\"hybridAksPluginType\":\"OSDevice\",\"interfaceName\":\"mfwdgzxu\",\"ipAllocationType\":\"IPV6\",\"ipv4ConnectedPrefix\":\"pamrsr\",\"ipv6ConnectedPrefix\":\"zvxurisjnhny\",\"l3IsolationDomainId\":\"xifqjzgxm\",\"provisioningState\":\"Failed\",\"virtualMachinesAssociatedIds\":[\"wp\"],\"vlan\":7038720826135192724},\"location\":\"trgjupauutpwoqh\",\"tags\":{\"fqntcyp\":\"jqgwzp\",\"rcizjxvyd\":\"xjvfoimwksl\"},\"id\":\"ceacvlhvygdy\",\"name\":\"t\",\"type\":\"mrtwna\"}]}")
            .toObject(L3NetworkList.class);
        Assertions.assertEquals("f", model.nextLink());
        Assertions.assertEquals("mqnrojlpijnkr", model.value().get(0).location());
        Assertions.assertEquals("ddhcratizzr", model.value().get(0).tags().get("nasx"));
        Assertions.assertEquals("txhojujb", model.value().get(0).extendedLocation().name());
        Assertions.assertEquals("pelmcuvhixbjxyf", model.value().get(0).extendedLocation().type());
        Assertions.assertEquals(HybridAksIpamEnabled.FALSE, model.value().get(0).hybridAksIpamEnabled());
        Assertions.assertEquals(HybridAksPluginType.OSDEVICE, model.value().get(0).hybridAksPluginType());
        Assertions.assertEquals("qknfd", model.value().get(0).interfaceName());
        Assertions.assertEquals(IpAllocationType.DUAL_STACK, model.value().get(0).ipAllocationType());
        Assertions.assertEquals("chrdgoihxumwcto", model.value().get(0).ipv4ConnectedPrefix());
        Assertions.assertEquals("zj", model.value().get(0).ipv6ConnectedPrefix());
        Assertions.assertEquals("uu", model.value().get(0).l3IsolationDomainId());
        Assertions.assertEquals(6782038143058850219L, model.value().get(0).vlan());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        L3NetworkList model
            = new L3NetworkList().withNextLink("f")
                .withValue(
                    Arrays.asList(
                        new L3NetworkInner().withLocation("mqnrojlpijnkr")
                            .withTags(mapOf("nasx", "ddhcratizzr"))
                            .withExtendedLocation(
                                new ExtendedLocation().withName("txhojujb").withType("pelmcuvhixbjxyf"))
                            .withHybridAksIpamEnabled(HybridAksIpamEnabled.FALSE)
                            .withHybridAksPluginType(HybridAksPluginType.OSDEVICE)
                            .withInterfaceName("qknfd")
                            .withIpAllocationType(IpAllocationType.DUAL_STACK)
                            .withIpv4ConnectedPrefix("chrdgoihxumwcto")
                            .withIpv6ConnectedPrefix("zj")
                            .withL3IsolationDomainId("uu")
                            .withVlan(6782038143058850219L),
                        new L3NetworkInner().withLocation("vgrvkffo")
                            .withTags(mapOf("jmfxumvf", "hpjbib"))
                            .withExtendedLocation(new ExtendedLocation().withName("tw").withType("sgogczhonnxk"))
                            .withHybridAksIpamEnabled(HybridAksIpamEnabled.TRUE)
                            .withHybridAksPluginType(HybridAksPluginType.DPDK)
                            .withInterfaceName("wnopqgikyzirtx")
                            .withIpAllocationType(IpAllocationType.IPV6)
                            .withIpv4ConnectedPrefix("zejntps")
                            .withIpv6ConnectedPrefix("gioilqu")
                            .withL3IsolationDomainId("rydxtqm")
                            .withVlan(6438928217909875539L),
                        new L3NetworkInner().withLocation("trgjupauutpwoqh")
                            .withTags(mapOf("fqntcyp", "jqgwzp", "rcizjxvyd", "xjvfoimwksl"))
                            .withExtendedLocation(new ExtendedLocation().withName("vzzbtdcq").withType("pniyujviyl"))
                            .withHybridAksIpamEnabled(HybridAksIpamEnabled.FALSE)
                            .withHybridAksPluginType(HybridAksPluginType.OSDEVICE)
                            .withInterfaceName("mfwdgzxu")
                            .withIpAllocationType(IpAllocationType.IPV6)
                            .withIpv4ConnectedPrefix("pamrsr")
                            .withIpv6ConnectedPrefix("zvxurisjnhny")
                            .withL3IsolationDomainId("xifqjzgxm")
                            .withVlan(7038720826135192724L)));
        model = BinaryData.fromObject(model).toObject(L3NetworkList.class);
        Assertions.assertEquals("f", model.nextLink());
        Assertions.assertEquals("mqnrojlpijnkr", model.value().get(0).location());
        Assertions.assertEquals("ddhcratizzr", model.value().get(0).tags().get("nasx"));
        Assertions.assertEquals("txhojujb", model.value().get(0).extendedLocation().name());
        Assertions.assertEquals("pelmcuvhixbjxyf", model.value().get(0).extendedLocation().type());
        Assertions.assertEquals(HybridAksIpamEnabled.FALSE, model.value().get(0).hybridAksIpamEnabled());
        Assertions.assertEquals(HybridAksPluginType.OSDEVICE, model.value().get(0).hybridAksPluginType());
        Assertions.assertEquals("qknfd", model.value().get(0).interfaceName());
        Assertions.assertEquals(IpAllocationType.DUAL_STACK, model.value().get(0).ipAllocationType());
        Assertions.assertEquals("chrdgoihxumwcto", model.value().get(0).ipv4ConnectedPrefix());
        Assertions.assertEquals("zj", model.value().get(0).ipv6ConnectedPrefix());
        Assertions.assertEquals("uu", model.value().get(0).l3IsolationDomainId());
        Assertions.assertEquals(6782038143058850219L, model.value().get(0).vlan());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
