// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.networkcloud.fluent.models.L3NetworkInner;
import com.azure.resourcemanager.networkcloud.models.ExtendedLocation;
import com.azure.resourcemanager.networkcloud.models.HybridAksIpamEnabled;
import com.azure.resourcemanager.networkcloud.models.HybridAksPluginType;
import com.azure.resourcemanager.networkcloud.models.IpAllocationType;
import com.azure.resourcemanager.networkcloud.models.L3NetworkList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class L3NetworkListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        L3NetworkList model = BinaryData.fromString(
            "{\"nextLink\":\"ool\",\"value\":[{\"extendedLocation\":{\"name\":\"x\",\"type\":\"v\"},\"properties\":{\"associatedResourceIds\":[\"gllqwjy\"],\"clusterId\":\"jayvblmhv\",\"detailedStatus\":\"Available\",\"detailedStatusMessage\":\"bxvvyhg\",\"hybridAksClustersAssociatedIds\":[\"byrqufeg\",\"uvwzfbnh\",\"mctlpdngitv\"],\"hybridAksIpamEnabled\":\"False\",\"hybridAksPluginType\":\"DPDK\",\"interfaceName\":\"xkw\",\"ipAllocationType\":\"DualStack\",\"ipv4ConnectedPrefix\":\"ejvegrhbpnaixex\",\"ipv6ConnectedPrefix\":\"b\",\"l3IsolationDomainId\":\"reaxhcexdr\",\"provisioningState\":\"Failed\",\"virtualMachinesAssociatedIds\":[\"qkghtpwijnhy\"],\"vlan\":1896207356770709532},\"location\":\"ycxzbfvoo\",\"tags\":{\"s\":\"vmtgjqppy\",\"sxkm\":\"ronzmyhgfip\"},\"id\":\"waekrrjreafxtsgu\",\"name\":\"hjglikk\",\"type\":\"wslolbqp\"},{\"extendedLocation\":{\"name\":\"uzlm\",\"type\":\"felfktg\"},\"properties\":{\"associatedResourceIds\":[\"rpw\"],\"clusterId\":\"eznoig\",\"detailedStatus\":\"Available\",\"detailedStatusMessage\":\"w\",\"hybridAksClustersAssociatedIds\":[\"pn\"],\"hybridAksIpamEnabled\":\"True\",\"hybridAksPluginType\":\"SRIOV\",\"interfaceName\":\"joqkagfhsxt\",\"ipAllocationType\":\"IPV4\",\"ipv4ConnectedPrefix\":\"zxnfaaz\",\"ipv6ConnectedPrefix\":\"dtnkdmkq\",\"l3IsolationDomainId\":\"jlwuenvrkp\",\"provisioningState\":\"Accepted\",\"virtualMachinesAssociatedIds\":[\"bre\",\"qaaysjkixqt\"],\"vlan\":8668201172705247496},\"location\":\"ezl\",\"tags\":{\"edltmmjihyeozp\":\"fiakpjpqqm\",\"qncygupkvi\":\"vwau\"},\"id\":\"mdscwxqupev\",\"name\":\"hfstotxhojujbyp\",\"type\":\"lmcuvhixb\"},{\"extendedLocation\":{\"name\":\"xyfwnylrcool\",\"type\":\"ttpkiwkkbnujrywv\"},\"properties\":{\"associatedResourceIds\":[\"bfpncurdo\",\"wiithtywub\",\"cbihwqk\"],\"clusterId\":\"dntwjchrdgo\",\"detailedStatus\":\"Provisioning\",\"detailedStatusMessage\":\"mwctondzjluudfd\",\"hybridAksClustersAssociatedIds\":[\"gytsbwtovv\"],\"hybridAksIpamEnabled\":\"False\",\"hybridAksPluginType\":\"SRIOV\",\"interfaceName\":\"qfi\",\"ipAllocationType\":\"IPV6\",\"ipv4ConnectedPrefix\":\"knpirgnepttwq\",\"ipv6ConnectedPrefix\":\"niffcdmqnroj\",\"l3IsolationDomainId\":\"pij\",\"provisioningState\":\"Provisioning\",\"virtualMachinesAssociatedIds\":[\"rddh\",\"ratiz\",\"ronasxift\"],\"vlan\":1507601090527968063},\"location\":\"zh\",\"tags\":{\"honnxkrlgnyhmos\":\"esgogc\",\"thrrgh\":\"xkk\",\"gf\":\"jbdhqxvc\"},\"id\":\"pdso\",\"name\":\"bshrnsvbuswd\",\"type\":\"z\"}]}")
            .toObject(L3NetworkList.class);
        Assertions.assertEquals("ool", model.nextLink());
        Assertions.assertEquals("ycxzbfvoo", model.value().get(0).location());
        Assertions.assertEquals("vmtgjqppy", model.value().get(0).tags().get("s"));
        Assertions.assertEquals("x", model.value().get(0).extendedLocation().name());
        Assertions.assertEquals("v", model.value().get(0).extendedLocation().type());
        Assertions.assertEquals(HybridAksIpamEnabled.FALSE, model.value().get(0).hybridAksIpamEnabled());
        Assertions.assertEquals(HybridAksPluginType.DPDK, model.value().get(0).hybridAksPluginType());
        Assertions.assertEquals("xkw", model.value().get(0).interfaceName());
        Assertions.assertEquals(IpAllocationType.DUAL_STACK, model.value().get(0).ipAllocationType());
        Assertions.assertEquals("ejvegrhbpnaixex", model.value().get(0).ipv4ConnectedPrefix());
        Assertions.assertEquals("b", model.value().get(0).ipv6ConnectedPrefix());
        Assertions.assertEquals("reaxhcexdr", model.value().get(0).l3IsolationDomainId());
        Assertions.assertEquals(1896207356770709532L, model.value().get(0).vlan());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        L3NetworkList model = new L3NetworkList().withNextLink("ool")
            .withValue(Arrays.asList(
                new L3NetworkInner().withLocation("ycxzbfvoo")
                    .withTags(mapOf("s", "vmtgjqppy", "sxkm", "ronzmyhgfip"))
                    .withExtendedLocation(new ExtendedLocation().withName("x").withType("v"))
                    .withHybridAksIpamEnabled(HybridAksIpamEnabled.FALSE)
                    .withHybridAksPluginType(HybridAksPluginType.DPDK)
                    .withInterfaceName("xkw")
                    .withIpAllocationType(IpAllocationType.DUAL_STACK)
                    .withIpv4ConnectedPrefix("ejvegrhbpnaixex")
                    .withIpv6ConnectedPrefix("b")
                    .withL3IsolationDomainId("reaxhcexdr")
                    .withVlan(1896207356770709532L),
                new L3NetworkInner().withLocation("ezl")
                    .withTags(mapOf("edltmmjihyeozp", "fiakpjpqqm", "qncygupkvi", "vwau"))
                    .withExtendedLocation(new ExtendedLocation().withName("uzlm").withType("felfktg"))
                    .withHybridAksIpamEnabled(HybridAksIpamEnabled.TRUE)
                    .withHybridAksPluginType(HybridAksPluginType.SRIOV)
                    .withInterfaceName("joqkagfhsxt")
                    .withIpAllocationType(IpAllocationType.IPV4)
                    .withIpv4ConnectedPrefix("zxnfaaz")
                    .withIpv6ConnectedPrefix("dtnkdmkq")
                    .withL3IsolationDomainId("jlwuenvrkp")
                    .withVlan(8668201172705247496L),
                new L3NetworkInner().withLocation("zh")
                    .withTags(mapOf("honnxkrlgnyhmos", "esgogc", "thrrgh", "xkk", "gf", "jbdhqxvc"))
                    .withExtendedLocation(new ExtendedLocation().withName("xyfwnylrcool").withType("ttpkiwkkbnujrywv"))
                    .withHybridAksIpamEnabled(HybridAksIpamEnabled.FALSE)
                    .withHybridAksPluginType(HybridAksPluginType.SRIOV)
                    .withInterfaceName("qfi")
                    .withIpAllocationType(IpAllocationType.IPV6)
                    .withIpv4ConnectedPrefix("knpirgnepttwq")
                    .withIpv6ConnectedPrefix("niffcdmqnroj")
                    .withL3IsolationDomainId("pij")
                    .withVlan(1507601090527968063L)));
        model = BinaryData.fromObject(model).toObject(L3NetworkList.class);
        Assertions.assertEquals("ool", model.nextLink());
        Assertions.assertEquals("ycxzbfvoo", model.value().get(0).location());
        Assertions.assertEquals("vmtgjqppy", model.value().get(0).tags().get("s"));
        Assertions.assertEquals("x", model.value().get(0).extendedLocation().name());
        Assertions.assertEquals("v", model.value().get(0).extendedLocation().type());
        Assertions.assertEquals(HybridAksIpamEnabled.FALSE, model.value().get(0).hybridAksIpamEnabled());
        Assertions.assertEquals(HybridAksPluginType.DPDK, model.value().get(0).hybridAksPluginType());
        Assertions.assertEquals("xkw", model.value().get(0).interfaceName());
        Assertions.assertEquals(IpAllocationType.DUAL_STACK, model.value().get(0).ipAllocationType());
        Assertions.assertEquals("ejvegrhbpnaixex", model.value().get(0).ipv4ConnectedPrefix());
        Assertions.assertEquals("b", model.value().get(0).ipv6ConnectedPrefix());
        Assertions.assertEquals("reaxhcexdr", model.value().get(0).l3IsolationDomainId());
        Assertions.assertEquals(1896207356770709532L, model.value().get(0).vlan());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
