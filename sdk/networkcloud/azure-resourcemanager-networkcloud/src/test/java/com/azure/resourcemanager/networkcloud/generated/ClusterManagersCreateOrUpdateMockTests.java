// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.networkcloud.NetworkCloudManager;
import com.azure.resourcemanager.networkcloud.models.ClusterManager;
import com.azure.resourcemanager.networkcloud.models.ManagedResourceGroupConfiguration;
import com.azure.resourcemanager.networkcloud.models.ManagedServiceIdentity;
import com.azure.resourcemanager.networkcloud.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.networkcloud.models.UserAssignedIdentity;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ClusterManagersCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"identity\":{\"principalId\":\"f61de19e-14ca-45ef-bc26-b22c526547bb\",\"tenantId\":\"e575b69b-a5d6-4dbf-8617-bad845357163\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"orhtss\":{\"principalId\":\"f4b54a73-bf39-4f8a-ac00-e8821da7e566\",\"clientId\":\"e61ea6fe-1b46-4333-bda3-1ba666519b92\"},\"nmdvha\":{\"principalId\":\"e880928a-1ec5-4135-8b24-04642ecf7920\",\"clientId\":\"d383fa2c-33b1-4582-8e58-731a76f4c3bb\"}}},\"properties\":{\"analyticsWorkspaceId\":\"vjytiqswbq\",\"availabilityZones\":[\"w\",\"iytxt\"],\"clusterVersions\":[{\"supportExpiryDate\":\"vlbpktgdstyou\",\"targetClusterVersion\":\"bewreswmowegmmut\"},{\"supportExpiryDate\":\"xeyg\",\"targetClusterVersion\":\"igijiitnspxlz\"}],\"detailedStatus\":\"Provisioning\",\"detailedStatusMessage\":\"grijwaiufanrayb\",\"fabricControllerId\":\"ueqfrojsyd\",\"managedResourceGroupConfiguration\":{\"location\":\"ydkygywezskieca\",\"name\":\"gzmxieqv\"},\"managerExtendedLocation\":{\"name\":\"makli\",\"type\":\"qcahyhxal\"},\"provisioningState\":\"Succeeded\",\"vmSize\":\"woijpodtbl\"},\"location\":\"kkwjdjodq\",\"tags\":{\"mehllizhceu\":\"incnr\",\"ibngqladyw\":\"oqodkadpp\",\"ds\":\"xwhydtluvv\"},\"id\":\"zsn\",\"name\":\"yemlowuowhlxln\",\"type\":\"y\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        NetworkCloudManager manager = NetworkCloudManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        ClusterManager response
            = manager.clusterManagers()
                .define("alfihcjmobcancd")
                .withRegion("cssbzhddu")
                .withExistingResourceGroup("aomhjrmkuhmaxl")
                .withFabricControllerId("qi")
                .withTags(mapOf("awugiqjti", "qfblhkalehpa", "ygspnbonhpczykm", "gqgdminictteajoh", "wxqcsehchkhufmpq",
                    "tp", "zulo", "mqyjgy"))
                .withIdentity(
                    new ManagedServiceIdentity().withType(ManagedServiceIdentityType.NONE)
                        .withUserAssignedIdentities(mapOf("fgvaknokzwj", new UserAssignedIdentity(), "ltixldzyyfytpq",
                            new UserAssignedIdentity())))
                .withAnalyticsWorkspaceId("x")
                .withAvailabilityZones(Arrays.asList("puj"))
                .withManagedResourceGroupConfiguration(
                    new ManagedResourceGroupConfiguration().withLocation("euy").withName("bmnwa"))
                .withVmSize("fckdvez")
                .create();

        Assertions.assertEquals("kkwjdjodq", response.location());
        Assertions.assertEquals("incnr", response.tags().get("mehllizhceu"));
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, response.identity().type());
        Assertions.assertEquals("vjytiqswbq", response.analyticsWorkspaceId());
        Assertions.assertEquals("w", response.availabilityZones().get(0));
        Assertions.assertEquals("ueqfrojsyd", response.fabricControllerId());
        Assertions.assertEquals("ydkygywezskieca", response.managedResourceGroupConfiguration().location());
        Assertions.assertEquals("gzmxieqv", response.managedResourceGroupConfiguration().name());
        Assertions.assertEquals("woijpodtbl", response.vmSize());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
