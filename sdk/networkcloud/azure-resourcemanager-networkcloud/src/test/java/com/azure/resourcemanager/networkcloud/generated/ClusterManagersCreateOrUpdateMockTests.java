// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.networkcloud.NetworkCloudManager;
import com.azure.resourcemanager.networkcloud.models.ClusterManager;
import com.azure.resourcemanager.networkcloud.models.ManagedResourceGroupConfiguration;
import com.azure.resourcemanager.networkcloud.models.ManagedServiceIdentity;
import com.azure.resourcemanager.networkcloud.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.networkcloud.models.UserAssignedIdentity;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ClusterManagersCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"etag\":\"dm\",\"identity\":{\"principalId\":\"801cad1e-3814-4cdc-8ac4-e023ca5c877b\",\"tenantId\":\"f4fba9d4-c3f8-44d3-b8cd-e942431b3eb8\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"bnoit\":{\"principalId\":\"145ab01c-e0c2-4d86-b3a1-7f5c72a47194\",\"clientId\":\"37fcad34-ebb1-44a5-a12c-438bea0ab0a5\"},\"ztrgdgxvcoq\":{\"principalId\":\"ae407148-7cbf-4643-8c38-30081b4af8aa\",\"clientId\":\"e3d40ced-1e40-422f-92a0-521dcf078bd6\"},\"wugyx\":{\"principalId\":\"6033a1fc-23cd-4c27-a339-8531253d9ee8\",\"clientId\":\"b1820843-eb61-4c7a-824f-f940f0cba035\"}}},\"properties\":{\"analyticsWorkspaceId\":\"itweialwvskbuh\",\"availabilityZones\":[\"aq\"],\"clusterVersions\":[{\"supportExpiryDate\":\"co\",\"targetClusterVersion\":\"ujpdsxzak\"},{\"supportExpiryDate\":\"jkmvbi\",\"targetClusterVersion\":\"jofqcvovjufycs\"}],\"detailedStatus\":\"Error\",\"detailedStatusMessage\":\"e\",\"fabricControllerId\":\"yeji\",\"managedResourceGroupConfiguration\":{\"location\":\"xeg\",\"name\":\"ortudawlpjfel\"},\"managerExtendedLocation\":{\"name\":\"rpptcbgqnzmnhiil\",\"type\":\"alwcjgckbb\"},\"provisioningState\":\"Succeeded\",\"vmSize\":\"zpraoxn\"},\"location\":\"ffatsgftipw\",\"tags\":{\"urnpnuhzafccnuh\":\"yubhiqdx\",\"byl\":\"i\",\"vxva\":\"ui\",\"lbnb\":\"vcrk\"},\"id\":\"xvhcs\",\"name\":\"hzlwxaea\",\"type\":\"vurex\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        NetworkCloudManager manager = NetworkCloudManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        ClusterManager response
            = manager.clusterManagers()
                .define("iyoypsuhbrnnhj")
                .withRegion("ve")
                .withExistingResourceGroup("lbjazejww")
                .withFabricControllerId("djkpdxph")
                .withTags(mapOf("agk", "uquowtljvfwhr"))
                .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.USER_ASSIGNED)
                    .withUserAssignedIdentities(mapOf("etzlexbsfledynoj", new UserAssignedIdentity(), "uwfbzkkdtnhqsy",
                        new UserAssignedIdentity(), "selpkpbaf", new UserAssignedIdentity(), "hlbylccbevxr",
                        new UserAssignedIdentity())))
                .withAnalyticsWorkspaceId("zdfwrsofpltdbm")
                .withAvailabilityZones(Arrays.asList("rhvhfnracwnpqigt", "ujwouhdawsi", "rb", "bxsjybvitvqkj"))
                .withManagedResourceGroupConfiguration(
                    new ManagedResourceGroupConfiguration().withLocation("snmgzvyfi").withName("kzuqnwsith"))
                .withVmSize("fhyqezvqqugdrft")
                .withIfMatch("fpgylkve")
                .withIfNoneMatch("jujcngoad")
                .create();

        Assertions.assertEquals("ffatsgftipw", response.location());
        Assertions.assertEquals("yubhiqdx", response.tags().get("urnpnuhzafccnuh"));
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, response.identity().type());
        Assertions.assertEquals("itweialwvskbuh", response.analyticsWorkspaceId());
        Assertions.assertEquals("aq", response.availabilityZones().get(0));
        Assertions.assertEquals("yeji", response.fabricControllerId());
        Assertions.assertEquals("xeg", response.managedResourceGroupConfiguration().location());
        Assertions.assertEquals("ortudawlpjfel", response.managedResourceGroupConfiguration().name());
        Assertions.assertEquals("zpraoxn", response.vmSize());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
