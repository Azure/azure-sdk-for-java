// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.networkcloud.NetworkCloudManager;
import com.azure.resourcemanager.networkcloud.models.RackSku;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class RackSkusGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"computeMachines\":[{\"properties\":{\"bootstrapProtocol\":\"PXE\",\"cpuCores\":740525382887173409,\"cpuSockets\":5500340265923019624,\"disks\":[{}],\"generation\":\"bvcpxtzhi\",\"hardwareVersion\":\"qbtimpk\",\"memoryCapacityGB\":1044102882013391726,\"model\":\"nsihqhudsm\",\"networkInterfaces\":[{},{}],\"totalThreads\":4060730487232753668,\"vendor\":\"akx\"},\"rackSlot\":6306579526133194151},{\"properties\":{\"bootstrapProtocol\":\"PXE\",\"cpuCores\":2595914989199311759,\"cpuSockets\":8083612341819769387,\"disks\":[{},{}],\"generation\":\"ba\",\"hardwareVersion\":\"sjtgirnbgmgmddo\",\"memoryCapacityGB\":8665774540406405469,\"model\":\"ltwmpftmf\",\"networkInterfaces\":[{}],\"totalThreads\":1965043221912539556,\"vendor\":\"yxwe\"},\"rackSlot\":2455970206380865852},{\"properties\":{\"bootstrapProtocol\":\"PXE\",\"cpuCores\":6507470422163849582,\"cpuSockets\":277162185175840671,\"disks\":[{},{}],\"generation\":\"recchdidrmu\",\"hardwareVersion\":\"ahmjedbiu\",\"memoryCapacityGB\":6239695269940490916,\"model\":\"wmjpjbweunxcqrr\",\"networkInterfaces\":[{},{},{}],\"totalThreads\":5847341110356575377,\"vendor\":\"ppiybxv\"},\"rackSlot\":2199635918669239119}],\"controllerMachines\":[{\"properties\":{\"bootstrapProtocol\":\"PXE\",\"cpuCores\":4542334182366032884,\"cpuSockets\":6282274110728740658,\"disks\":[{},{}],\"generation\":\"kunhdimjuk\",\"hardwareVersion\":\"r\",\"memoryCapacityGB\":184726325025481896,\"model\":\"pucdocf\",\"networkInterfaces\":[{},{}],\"totalThreads\":2825605898464765817,\"vendor\":\"m\"},\"rackSlot\":8576357507637884293}],\"description\":\"lvzkl\",\"maxClusterSlots\":6499757878767405026,\"provisioningState\":\"Succeeded\",\"rackType\":\"Aggregator\",\"storageAppliances\":[{\"properties\":{\"capacityGB\":4991304555138648039,\"model\":\"ishj\"},\"rackSlot\":8933790957352791226},{\"properties\":{\"capacityGB\":5289013246694502921,\"model\":\"kaoizjixw\"},\"rackSlot\":7700160116018729328},{\"properties\":{\"capacityGB\":7188469565987722721,\"model\":\"xwnujvqyn\"},\"rackSlot\":5295005918015200070},{\"properties\":{\"capacityGB\":8275230829067853990,\"model\":\"qohhihra\"},\"rackSlot\":7250011366444098060}],\"supportedRackSkuIds\":[\"wjc\"]},\"id\":\"brhlhpvzadb\",\"name\":\"enninafhxrzfrm\",\"type\":\"ztiucwviql\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        NetworkCloudManager manager =
            NetworkCloudManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        RackSku response = manager.rackSkus().getWithResponse("njhx", com.azure.core.util.Context.NONE).getValue();
    }
}
