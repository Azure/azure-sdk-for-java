// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.networkcloud.models.ClusterManagerPatchParameters;
import com.azure.resourcemanager.networkcloud.models.ManagedServiceIdentity;
import com.azure.resourcemanager.networkcloud.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.networkcloud.models.UserAssignedIdentity;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ClusterManagerPatchParametersTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ClusterManagerPatchParameters model = BinaryData.fromString(
            "{\"identity\":{\"principalId\":\"332b2a71-d135-4f05-ae83-5d393012ef92\",\"tenantId\":\"0df97778-955e-4746-9d68-3ca38b02ebe8\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"mjfjmyccxlzhcox\":{\"principalId\":\"96b5f1c8-0d04-4abe-a07a-7f38065018c5\",\"clientId\":\"a414f2da-0df0-4c10-abfe-a3c4b003f949\"},\"ekhenl\":{\"principalId\":\"ac4dbce3-1cd5-4152-8487-6edbdd0a2b00\",\"clientId\":\"4b29058a-5b66-40bd-9b8f-1566e7d354cf\"},\"nrd\":{\"principalId\":\"b456190f-25be-48da-915b-b1bf3e7554b8\",\"clientId\":\"5b82d3b5-ac77-4070-bb3c-ed16a89f5256\"}}},\"tags\":{\"ttgepuslvyjtcv\":\"txrdcqtjvi\",\"ughtuqfecjxeygtu\":\"wkasiziesf\",\"cbuewmrswnjlxuz\":\"xu\",\"aqehg\":\"hwpusxj\"}}")
            .toObject(ClusterManagerPatchParameters.class);
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("txrdcqtjvi", model.tags().get("ttgepuslvyjtcv"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ClusterManagerPatchParameters model = new ClusterManagerPatchParameters()
            .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.USER_ASSIGNED)
                .withUserAssignedIdentities(mapOf("mjfjmyccxlzhcox", new UserAssignedIdentity(), "ekhenl",
                    new UserAssignedIdentity(), "nrd", new UserAssignedIdentity())))
            .withTags(mapOf("ttgepuslvyjtcv", "txrdcqtjvi", "ughtuqfecjxeygtu", "wkasiziesf", "cbuewmrswnjlxuz", "xu",
                "aqehg", "hwpusxj"));
        model = BinaryData.fromObject(model).toObject(ClusterManagerPatchParameters.class);
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("txrdcqtjvi", model.tags().get("ttgepuslvyjtcv"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
