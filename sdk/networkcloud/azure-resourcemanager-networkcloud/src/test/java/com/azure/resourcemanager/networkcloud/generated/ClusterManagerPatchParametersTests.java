// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.networkcloud.models.ClusterManagerPatchParameters;
import com.azure.resourcemanager.networkcloud.models.ManagedServiceIdentity;
import com.azure.resourcemanager.networkcloud.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.networkcloud.models.UserAssignedIdentity;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ClusterManagerPatchParametersTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ClusterManagerPatchParameters model = BinaryData.fromString(
            "{\"identity\":{\"principalId\":\"ddf77f6c-ab83-4ca2-8201-297c174ebf2a\",\"tenantId\":\"8a340f76-a6ea-485a-8d25-c26bd92d1b1f\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"mjfjmyccxlzhcox\":{\"principalId\":\"96d4a1d5-424d-4afe-9c4b-29d3dec5081f\",\"clientId\":\"3d5152e1-baa1-4c5d-b8b8-170e4840859d\"},\"ekhenl\":{\"principalId\":\"50b1fe55-593a-4a1e-9bda-9d8b28ff6d50\",\"clientId\":\"1424143a-f1b1-40fd-befc-353a4be112c7\"},\"nrd\":{\"principalId\":\"d58328fd-7344-4dff-9e85-f6395276ec89\",\"clientId\":\"932c2ae8-9e40-442a-a142-38cf270ec420\"}}},\"tags\":{\"ttgepuslvyjtcv\":\"txrdcqtjvi\",\"ughtuqfecjxeygtu\":\"wkasiziesf\",\"cbuewmrswnjlxuz\":\"xu\",\"aqehg\":\"hwpusxj\"}}")
            .toObject(ClusterManagerPatchParameters.class);
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("txrdcqtjvi", model.tags().get("ttgepuslvyjtcv"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ClusterManagerPatchParameters model = new ClusterManagerPatchParameters()
            .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.USER_ASSIGNED)
                .withUserAssignedIdentities(mapOf("mjfjmyccxlzhcox", new UserAssignedIdentity(), "ekhenl",
                    new UserAssignedIdentity(), "nrd", new UserAssignedIdentity())))
            .withTags(mapOf("ttgepuslvyjtcv", "txrdcqtjvi", "ughtuqfecjxeygtu", "wkasiziesf", "cbuewmrswnjlxuz", "xu",
                "aqehg", "hwpusxj"));
        model = BinaryData.fromObject(model).toObject(ClusterManagerPatchParameters.class);
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("txrdcqtjvi", model.tags().get("ttgepuslvyjtcv"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
