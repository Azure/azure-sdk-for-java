// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.networkcloud.NetworkCloudManager;
import com.azure.resourcemanager.networkcloud.models.ClusterMetricsConfiguration;
import com.azure.resourcemanager.networkcloud.models.ExtendedLocation;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class MetricsConfigurationsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"extendedLocation\":{\"name\":\"q\",\"type\":\"btimpkjblor\"},\"properties\":{\"collectionInterval\":89470103286938544,\"detailedStatus\":\"Processing\",\"detailedStatusMessage\":\"uds\",\"disabledMetrics\":[\"uaawja\",\"xwjnfcz\"],\"enabledMetrics\":[\"iixyxvqbanosj\"],\"provisioningState\":\"Succeeded\"},\"location\":\"nbg\",\"tags\":{\"foeajogsy\":\"ddorgmynltwmpft\"},\"id\":\"wetamfddrvlk\",\"name\":\"zwbhnrecc\",\"type\":\"d\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        NetworkCloudManager manager = NetworkCloudManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        ClusterMetricsConfiguration response = manager.metricsConfigurations()
            .define("tvdxxhe")
            .withRegion("mlnfyz")
            .withExistingCluster("polzkgysdgzyy", "zoxlvoc")
            .withExtendedLocation(new ExtendedLocation().withName("gmlilwzghjhjvmab").withType("zbwaybfmdafbgym"))
            .withCollectionInterval(1745929206373036946L)
            .withTags(mapOf("dbkp", "rbypi", "njhx", "jtaqhsmqazpdg"))
            .withEnabledMetrics(Arrays.asList("sgnwdxzedpq", "rfbo"))
            .create();

        Assertions.assertEquals("nbg", response.location());
        Assertions.assertEquals("ddorgmynltwmpft", response.tags().get("foeajogsy"));
        Assertions.assertEquals("q", response.extendedLocation().name());
        Assertions.assertEquals("btimpkjblor", response.extendedLocation().type());
        Assertions.assertEquals(89470103286938544L, response.collectionInterval());
        Assertions.assertEquals("iixyxvqbanosj", response.enabledMetrics().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
