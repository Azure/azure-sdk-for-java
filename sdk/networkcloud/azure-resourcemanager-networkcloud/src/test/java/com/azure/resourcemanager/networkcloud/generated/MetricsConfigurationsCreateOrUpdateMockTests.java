// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.networkcloud.NetworkCloudManager;
import com.azure.resourcemanager.networkcloud.models.ClusterMetricsConfiguration;
import com.azure.resourcemanager.networkcloud.models.ExtendedLocation;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class MetricsConfigurationsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"etag\":\"jqqwmtqsmoxsazu\",\"extendedLocation\":{\"name\":\"ejgwe\",\"type\":\"ywnfyszzaczs\"},\"properties\":{\"collectionInterval\":2399079207304654323,\"detailedStatus\":\"Applied\",\"detailedStatusMessage\":\"ddbboz\",\"disabledMetrics\":[\"rmkjmyitrchwudlx\",\"eihtpmnoejh\",\"lfmsibzoyrfg\",\"kydpmypgfqvmtywh\"],\"enabledMetrics\":[\"xpejpewpy\"],\"provisioningState\":\"Succeeded\"},\"location\":\"ampqcrzgeuq\",\"tags\":{\"kgd\":\"iatwfaujegqdtadr\",\"tnqsktx\":\"hjkrukizyhgs\",\"iwdhdmncgbfzu\":\"fpjbqggwe\",\"mlhxdfbklcii\":\"cstu\"},\"id\":\"hgjsysmvxo\",\"name\":\"gwxfkzsi\",\"type\":\"cuvbdujgcwxvec\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        NetworkCloudManager manager = NetworkCloudManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        ClusterMetricsConfiguration response = manager.metricsConfigurations()
            .define("tbfjtdyotnplf")
            .withRegion("qjoghdsai")
            .withExistingCluster("uwhldxwhieproqks", "fxmcvprstvk")
            .withExtendedLocation(new ExtendedLocation().withName("rhutf").withType("oadtxopgehpadkmd"))
            .withCollectionInterval(4141296414546241521L)
            .withTags(mapOf("xxurntujmoilunwe", "normov"))
            .withEnabledMetrics(Arrays.asList("xxc"))
            .withIfMatch("xvgjbfi")
            .withIfNoneMatch("bpnjodf")
            .create();

        Assertions.assertEquals("ampqcrzgeuq", response.location());
        Assertions.assertEquals("iatwfaujegqdtadr", response.tags().get("kgd"));
        Assertions.assertEquals("ejgwe", response.extendedLocation().name());
        Assertions.assertEquals("ywnfyszzaczs", response.extendedLocation().type());
        Assertions.assertEquals(2399079207304654323L, response.collectionInterval());
        Assertions.assertEquals("xpejpewpy", response.enabledMetrics().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
