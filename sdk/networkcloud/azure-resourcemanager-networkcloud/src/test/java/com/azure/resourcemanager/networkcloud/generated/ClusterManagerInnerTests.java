// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.networkcloud.fluent.models.ClusterManagerInner;
import com.azure.resourcemanager.networkcloud.models.ManagedResourceGroupConfiguration;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ClusterManagerInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ClusterManagerInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"analyticsWorkspaceId\":\"bxzpuzycisp\",\"availabilityZones\":[\"ahmgkbrp\",\"y\",\"hibnuqqkpika\",\"rgvtqag\"],\"clusterVersions\":[{\"supportExpiryDate\":\"nhijggmebfsi\",\"targetClusterVersion\":\"butr\"},{\"supportExpiryDate\":\"pnazzm\",\"targetClusterVersion\":\"runmp\"}],\"detailedStatus\":\"UpdateFailed\",\"detailedStatusMessage\":\"bh\",\"fabricControllerId\":\"bnlankxmyskpb\",\"managedResourceGroupConfiguration\":{\"location\":\"btkcxywnytnrsyn\",\"name\":\"idybyxczf\"},\"managerExtendedLocation\":{\"name\":\"haaxdbabphl\",\"type\":\"rqlfktsthsucocmn\"},\"provisioningState\":\"Canceled\",\"vmSize\":\"t\"},\"location\":\"twwrqp\",\"tags\":{\"xibxujwbhqwalm\":\"ckzywbiexzfeyue\",\"ux\":\"zyoxaepdkzjan\",\"zt\":\"hdwbavxbniwdjs\"},\"id\":\"dbpgnxytxhp\",\"name\":\"xbzpfzab\",\"type\":\"lcuhxwtctyqiklb\"}")
                .toObject(ClusterManagerInner.class);
        Assertions.assertEquals("twwrqp", model.location());
        Assertions.assertEquals("ckzywbiexzfeyue", model.tags().get("xibxujwbhqwalm"));
        Assertions.assertEquals("bxzpuzycisp", model.analyticsWorkspaceId());
        Assertions.assertEquals("ahmgkbrp", model.availabilityZones().get(0));
        Assertions.assertEquals("bnlankxmyskpb", model.fabricControllerId());
        Assertions.assertEquals("btkcxywnytnrsyn", model.managedResourceGroupConfiguration().location());
        Assertions.assertEquals("idybyxczf", model.managedResourceGroupConfiguration().name());
        Assertions.assertEquals("t", model.vmSize());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ClusterManagerInner model =
            new ClusterManagerInner()
                .withLocation("twwrqp")
                .withTags(mapOf("xibxujwbhqwalm", "ckzywbiexzfeyue", "ux", "zyoxaepdkzjan", "zt", "hdwbavxbniwdjs"))
                .withAnalyticsWorkspaceId("bxzpuzycisp")
                .withAvailabilityZones(Arrays.asList("ahmgkbrp", "y", "hibnuqqkpika", "rgvtqag"))
                .withFabricControllerId("bnlankxmyskpb")
                .withManagedResourceGroupConfiguration(
                    new ManagedResourceGroupConfiguration().withLocation("btkcxywnytnrsyn").withName("idybyxczf"))
                .withVmSize("t");
        model = BinaryData.fromObject(model).toObject(ClusterManagerInner.class);
        Assertions.assertEquals("twwrqp", model.location());
        Assertions.assertEquals("ckzywbiexzfeyue", model.tags().get("xibxujwbhqwalm"));
        Assertions.assertEquals("bxzpuzycisp", model.analyticsWorkspaceId());
        Assertions.assertEquals("ahmgkbrp", model.availabilityZones().get(0));
        Assertions.assertEquals("bnlankxmyskpb", model.fabricControllerId());
        Assertions.assertEquals("btkcxywnytnrsyn", model.managedResourceGroupConfiguration().location());
        Assertions.assertEquals("idybyxczf", model.managedResourceGroupConfiguration().name());
        Assertions.assertEquals("t", model.vmSize());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
