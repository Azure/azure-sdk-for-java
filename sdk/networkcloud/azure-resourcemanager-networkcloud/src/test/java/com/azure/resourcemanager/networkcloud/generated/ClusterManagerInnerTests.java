// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.networkcloud.fluent.models.ClusterManagerInner;
import com.azure.resourcemanager.networkcloud.models.ManagedResourceGroupConfiguration;
import com.azure.resourcemanager.networkcloud.models.ManagedServiceIdentity;
import com.azure.resourcemanager.networkcloud.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.networkcloud.models.UserAssignedIdentity;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ClusterManagerInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ClusterManagerInner model = BinaryData.fromString(
            "{\"identity\":{\"principalId\":\"0e938a9d-be21-4110-9ed6-f88f0bcd0017\",\"tenantId\":\"ebf235b7-ca77-4bfc-91aa-cdbd786aaac9\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{\"ndslgnayqigynduh\":{\"principalId\":\"a0b8c190-1ad2-4fca-8b89-78134c32726d\",\"clientId\":\"e1329d2f-cc1f-4a30-b135-580e861a601e\"},\"qlkth\":{\"principalId\":\"1a1b9cb8-0913-4813-b27f-fd1bada526c6\",\"clientId\":\"14b02049-364f-4fc6-95ef-158e8c6685af\"},\"qolbgyc\":{\"principalId\":\"24901826-78fc-453d-a043-c6b957c194f3\",\"clientId\":\"8006aec1-c170-4860-a15b-11a03583dc68\"}}},\"properties\":{\"analyticsWorkspaceId\":\"iertgccymvaolp\",\"availabilityZones\":[\"qlfmmdnbb\",\"lzpswiydm\"],\"clusterVersions\":[{\"supportExpiryDate\":\"zdxss\",\"targetClusterVersion\":\"bzmnvdfznud\"}],\"detailedStatus\":\"Error\",\"detailedStatusMessage\":\"xzb\",\"fabricControllerId\":\"cblylpstdbhhxsr\",\"managedResourceGroupConfiguration\":{\"location\":\"ucerscdntnevfi\",\"name\":\"mygtdssls\"},\"managerExtendedLocation\":{\"name\":\"mweriofzpy\",\"type\":\"semwabnet\"},\"provisioningState\":\"Failed\",\"vmSize\":\"zhedplvwiw\"},\"location\":\"mwmbes\",\"tags\":{\"wtppjflcxogaoko\":\"k\"},\"id\":\"z\",\"name\":\"nsikvmkqzeqqkdl\",\"type\":\"fzxmhhvhgureodkw\"}")
            .toObject(ClusterManagerInner.class);
        Assertions.assertEquals("mwmbes", model.location());
        Assertions.assertEquals("k", model.tags().get("wtppjflcxogaoko"));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED, model.identity().type());
        Assertions.assertEquals("iertgccymvaolp", model.analyticsWorkspaceId());
        Assertions.assertEquals("qlfmmdnbb", model.availabilityZones().get(0));
        Assertions.assertEquals("cblylpstdbhhxsr", model.fabricControllerId());
        Assertions.assertEquals("ucerscdntnevfi", model.managedResourceGroupConfiguration().location());
        Assertions.assertEquals("mygtdssls", model.managedResourceGroupConfiguration().name());
        Assertions.assertEquals("zhedplvwiw", model.vmSize());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ClusterManagerInner model = new ClusterManagerInner().withLocation("mwmbes")
            .withTags(mapOf("wtppjflcxogaoko", "k"))
            .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED)
                .withUserAssignedIdentities(mapOf("ndslgnayqigynduh", new UserAssignedIdentity(), "qlkth",
                    new UserAssignedIdentity(), "qolbgyc", new UserAssignedIdentity())))
            .withAnalyticsWorkspaceId("iertgccymvaolp")
            .withAvailabilityZones(Arrays.asList("qlfmmdnbb", "lzpswiydm"))
            .withFabricControllerId("cblylpstdbhhxsr")
            .withManagedResourceGroupConfiguration(
                new ManagedResourceGroupConfiguration().withLocation("ucerscdntnevfi").withName("mygtdssls"))
            .withVmSize("zhedplvwiw");
        model = BinaryData.fromObject(model).toObject(ClusterManagerInner.class);
        Assertions.assertEquals("mwmbes", model.location());
        Assertions.assertEquals("k", model.tags().get("wtppjflcxogaoko"));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED, model.identity().type());
        Assertions.assertEquals("iertgccymvaolp", model.analyticsWorkspaceId());
        Assertions.assertEquals("qlfmmdnbb", model.availabilityZones().get(0));
        Assertions.assertEquals("cblylpstdbhhxsr", model.fabricControllerId());
        Assertions.assertEquals("ucerscdntnevfi", model.managedResourceGroupConfiguration().location());
        Assertions.assertEquals("mygtdssls", model.managedResourceGroupConfiguration().name());
        Assertions.assertEquals("zhedplvwiw", model.vmSize());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
