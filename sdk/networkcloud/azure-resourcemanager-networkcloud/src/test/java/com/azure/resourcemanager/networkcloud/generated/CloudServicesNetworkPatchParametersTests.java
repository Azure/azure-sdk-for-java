// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.networkcloud.models.CloudServicesNetworkEnableDefaultEgressEndpoints;
import com.azure.resourcemanager.networkcloud.models.CloudServicesNetworkPatchParameters;
import com.azure.resourcemanager.networkcloud.models.EgressEndpoint;
import com.azure.resourcemanager.networkcloud.models.EndpointDependency;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CloudServicesNetworkPatchParametersTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CloudServicesNetworkPatchParameters model = BinaryData.fromString(
            "{\"properties\":{\"additionalEgressEndpoints\":[{\"category\":\"dvmfqhppub\",\"endpoints\":[{\"domainName\":\"sepdfgk\",\"port\":1472948981030467615}]},{\"category\":\"erngbtcjuahokqto\",\"endpoints\":[{\"domainName\":\"auxofshfph\",\"port\":7863720780305943179},{\"domainName\":\"lai\",\"port\":161630464243090095}]},{\"category\":\"jy\",\"endpoints\":[{\"domainName\":\"slwkojpl\",\"port\":1910453689912487458}]}],\"enableDefaultEgressEndpoints\":\"False\"},\"tags\":{\"tefypococtfjgti\":\"pqafgfugsnnfhy\",\"rmlmuowo\":\"rjvzuyt\"}}")
            .toObject(CloudServicesNetworkPatchParameters.class);
        Assertions.assertEquals("pqafgfugsnnfhy", model.tags().get("tefypococtfjgti"));
        Assertions.assertEquals("dvmfqhppub", model.additionalEgressEndpoints().get(0).category());
        Assertions.assertEquals("sepdfgk", model.additionalEgressEndpoints().get(0).endpoints().get(0).domainName());
        Assertions.assertEquals(1472948981030467615L,
            model.additionalEgressEndpoints().get(0).endpoints().get(0).port());
        Assertions.assertEquals(CloudServicesNetworkEnableDefaultEgressEndpoints.FALSE,
            model.enableDefaultEgressEndpoints());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CloudServicesNetworkPatchParameters model = new CloudServicesNetworkPatchParameters()
            .withTags(mapOf("tefypococtfjgti", "pqafgfugsnnfhy", "rmlmuowo", "rjvzuyt"))
            .withAdditionalEgressEndpoints(Arrays.asList(
                new EgressEndpoint().withCategory("dvmfqhppub")
                    .withEndpoints(Arrays
                        .asList(new EndpointDependency().withDomainName("sepdfgk").withPort(1472948981030467615L))),
                new EgressEndpoint().withCategory("erngbtcjuahokqto")
                    .withEndpoints(Arrays.asList(
                        new EndpointDependency().withDomainName("auxofshfph").withPort(7863720780305943179L),
                        new EndpointDependency().withDomainName("lai").withPort(161630464243090095L))),
                new EgressEndpoint().withCategory("jy")
                    .withEndpoints(Arrays
                        .asList(new EndpointDependency().withDomainName("slwkojpl").withPort(1910453689912487458L)))))
            .withEnableDefaultEgressEndpoints(CloudServicesNetworkEnableDefaultEgressEndpoints.FALSE);
        model = BinaryData.fromObject(model).toObject(CloudServicesNetworkPatchParameters.class);
        Assertions.assertEquals("pqafgfugsnnfhy", model.tags().get("tefypococtfjgti"));
        Assertions.assertEquals("dvmfqhppub", model.additionalEgressEndpoints().get(0).category());
        Assertions.assertEquals("sepdfgk", model.additionalEgressEndpoints().get(0).endpoints().get(0).domainName());
        Assertions.assertEquals(1472948981030467615L,
            model.additionalEgressEndpoints().get(0).endpoints().get(0).port());
        Assertions.assertEquals(CloudServicesNetworkEnableDefaultEgressEndpoints.FALSE,
            model.enableDefaultEgressEndpoints());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
