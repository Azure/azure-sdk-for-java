// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.networkcloud.fluent.models.HybridAksClusterInner;
import com.azure.resourcemanager.networkcloud.models.ExtendedLocation;
import com.azure.resourcemanager.networkcloud.models.HybridAksClusterList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class HybridAksClusterListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HybridAksClusterList model =
            BinaryData
                .fromString(
                    "{\"nextLink\":\"vetvt\",\"value\":[{\"extendedLocation\":{\"name\":\"qtdo\",\"type\":\"mcbxvwvxysl\"},\"properties\":{\"associatedNetworkIds\":[],\"cloudServicesNetworkId\":\"hsfxoblytkb\",\"clusterId\":\"pe\",\"controlPlaneCount\":6710979409785542965,\"controlPlaneNodes\":[],\"defaultCniNetworkId\":\"krvrns\",\"detailedStatus\":\"Error\",\"detailedStatusMessage\":\"johxcrsb\",\"hybridAksProvisionedClusterId\":\"ovasrruvwbhsqfsu\",\"provisioningState\":\"Succeeded\",\"volumes\":[],\"workerCount\":4263658870464562119,\"workerNodes\":[]},\"location\":\"bpybsrfbjf\",\"tags\":{\"zbexilzznfqqnvw\":\"ssotftpv\"},\"id\":\"mqtaruoujmkcjh\",\"name\":\"qytjrybnwjewgd\",\"type\":\"jervnaenqpehi\"},{\"extendedLocation\":{\"name\":\"doy\",\"type\":\"mifthnzdnd\"},\"properties\":{\"associatedNetworkIds\":[],\"cloudServicesNetworkId\":\"gnayqigynduh\",\"clusterId\":\"hqlkthumaqo\",\"controlPlaneCount\":7247562094166892999,\"controlPlaneNodes\":[],\"defaultCniNetworkId\":\"duiertgcc\",\"detailedStatus\":\"Available\",\"detailedStatusMessage\":\"olpsslqlf\",\"hybridAksProvisionedClusterId\":\"mdnbbglzpswiy\",\"provisioningState\":\"Failed\",\"volumes\":[],\"workerCount\":2535246333551569384,\"workerNodes\":[]},\"location\":\"xssadbzmnvdf\",\"tags\":{\"stdbhhxsrzdzu\":\"daodvxzbncblyl\"},\"id\":\"erscdntne\",\"name\":\"fiwjmygtdssls\",\"type\":\"tmweriofzpyq\"},{\"extendedLocation\":{\"name\":\"emwabnet\",\"type\":\"hhszh\"},\"properties\":{\"associatedNetworkIds\":[],\"cloudServicesNetworkId\":\"plvwiwubmwmbes\",\"clusterId\":\"nkww\",\"controlPlaneCount\":1517331756853567290,\"controlPlaneNodes\":[],\"defaultCniNetworkId\":\"lcxog\",\"detailedStatus\":\"Error\",\"detailedStatusMessage\":\"nzmnsikvm\",\"hybridAksProvisionedClusterId\":\"qzeqqkdltfzxm\",\"provisioningState\":\"Canceled\",\"volumes\":[],\"workerCount\":5584347672923580701,\"workerNodes\":[]},\"location\":\"odkwobd\",\"tags\":{\"gqxndlkzgxhuripl\":\"tibqdxbxwakb\",\"bxmubyynt\":\"podxunkb\",\"tkoievseotgq\":\"lrb\",\"tmuwlauwzi\":\"l\"},\"id\":\"xbmp\",\"name\":\"cjefuzmu\",\"type\":\"pbttdum\"}]}")
                .toObject(HybridAksClusterList.class);
        Assertions.assertEquals("vetvt", model.nextLink());
        Assertions.assertEquals("bpybsrfbjf", model.value().get(0).location());
        Assertions.assertEquals("ssotftpv", model.value().get(0).tags().get("zbexilzznfqqnvw"));
        Assertions.assertEquals("qtdo", model.value().get(0).extendedLocation().name());
        Assertions.assertEquals("mcbxvwvxysl", model.value().get(0).extendedLocation().type());
        Assertions.assertEquals(6710979409785542965L, model.value().get(0).controlPlaneCount());
        Assertions.assertEquals("ovasrruvwbhsqfsu", model.value().get(0).hybridAksProvisionedClusterId());
        Assertions.assertEquals(4263658870464562119L, model.value().get(0).workerCount());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HybridAksClusterList model =
            new HybridAksClusterList()
                .withNextLink("vetvt")
                .withValue(
                    Arrays
                        .asList(
                            new HybridAksClusterInner()
                                .withLocation("bpybsrfbjf")
                                .withTags(mapOf("zbexilzznfqqnvw", "ssotftpv"))
                                .withExtendedLocation(new ExtendedLocation().withName("qtdo").withType("mcbxvwvxysl"))
                                .withAssociatedNetworkIds(Arrays.asList())
                                .withControlPlaneCount(6710979409785542965L)
                                .withHybridAksProvisionedClusterId("ovasrruvwbhsqfsu")
                                .withWorkerCount(4263658870464562119L),
                            new HybridAksClusterInner()
                                .withLocation("xssadbzmnvdf")
                                .withTags(mapOf("stdbhhxsrzdzu", "daodvxzbncblyl"))
                                .withExtendedLocation(new ExtendedLocation().withName("doy").withType("mifthnzdnd"))
                                .withAssociatedNetworkIds(Arrays.asList())
                                .withControlPlaneCount(7247562094166892999L)
                                .withHybridAksProvisionedClusterId("mdnbbglzpswiy")
                                .withWorkerCount(2535246333551569384L),
                            new HybridAksClusterInner()
                                .withLocation("odkwobd")
                                .withTags(
                                    mapOf(
                                        "gqxndlkzgxhuripl",
                                        "tibqdxbxwakb",
                                        "bxmubyynt",
                                        "podxunkb",
                                        "tkoievseotgq",
                                        "lrb",
                                        "tmuwlauwzi",
                                        "l"))
                                .withExtendedLocation(new ExtendedLocation().withName("emwabnet").withType("hhszh"))
                                .withAssociatedNetworkIds(Arrays.asList())
                                .withControlPlaneCount(1517331756853567290L)
                                .withHybridAksProvisionedClusterId("qzeqqkdltfzxm")
                                .withWorkerCount(5584347672923580701L)));
        model = BinaryData.fromObject(model).toObject(HybridAksClusterList.class);
        Assertions.assertEquals("vetvt", model.nextLink());
        Assertions.assertEquals("bpybsrfbjf", model.value().get(0).location());
        Assertions.assertEquals("ssotftpv", model.value().get(0).tags().get("zbexilzznfqqnvw"));
        Assertions.assertEquals("qtdo", model.value().get(0).extendedLocation().name());
        Assertions.assertEquals("mcbxvwvxysl", model.value().get(0).extendedLocation().type());
        Assertions.assertEquals(6710979409785542965L, model.value().get(0).controlPlaneCount());
        Assertions.assertEquals("ovasrruvwbhsqfsu", model.value().get(0).hybridAksProvisionedClusterId());
        Assertions.assertEquals(4263658870464562119L, model.value().get(0).workerCount());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
