// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.networkcloud.NetworkCloudManager;
import com.azure.resourcemanager.networkcloud.models.ExtendedLocation;
import com.azure.resourcemanager.networkcloud.models.Volume;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class VolumesCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"extendedLocation\":{\"name\":\"htfxcpupuki\",\"type\":\"mjzpwdlvwtiwsm\"},\"properties\":{\"attachedTo\":[\"onhqnam\",\"pultas\",\"aekewnazea\"],\"detailedStatus\":\"Active\",\"detailedStatusMessage\":\"jlcyizy\",\"provisioningState\":\"Succeeded\",\"serialNumber\":\"xo\",\"sizeMiB\":3845239989402943033},\"location\":\"fsxxby\",\"tags\":{\"pwgoljt\":\"qlvge\"},\"id\":\"xnmxsdobygoogxqa\",\"name\":\"j\",\"type\":\"vaz\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        NetworkCloudManager manager = NetworkCloudManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        Volume response = manager.volumes()
            .define("j")
            .withRegion("jnxumentq")
            .withExistingResourceGroup("gztlcgc")
            .withExtendedLocation(new ExtendedLocation().withName("hfjv").withType("ywjzebecuvlbefvw"))
            .withSizeMiB(3730360780056136704L)
            .withTags(mapOf("xym", "why"))
            .create();

        Assertions.assertEquals("fsxxby", response.location());
        Assertions.assertEquals("qlvge", response.tags().get("pwgoljt"));
        Assertions.assertEquals("htfxcpupuki", response.extendedLocation().name());
        Assertions.assertEquals("mjzpwdlvwtiwsm", response.extendedLocation().type());
        Assertions.assertEquals(3845239989402943033L, response.sizeMiB());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
