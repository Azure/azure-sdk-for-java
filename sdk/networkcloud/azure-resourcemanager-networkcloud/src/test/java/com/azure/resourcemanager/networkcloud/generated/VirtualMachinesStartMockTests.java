// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.networkcloud.NetworkCloudManager;
import com.azure.resourcemanager.networkcloud.models.OperationStatusResult;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class VirtualMachinesStartMockTests {
    @Test
    public void testStart() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"id\":\"gejcvjkjyczc\",\"resourceId\":\"age\",\"name\":\"jdyol\",\"status\":\"eqyxqfmzsiz\",\"percentComplete\":63.244267,\"startTime\":\"2021-06-25T15:18:38Z\",\"endTime\":\"2021-04-23T04:26:45Z\",\"operations\":[{\"id\":\"ymgqbgcx\",\"resourceId\":\"qxgzxler\",\"name\":\"merghski\",\"status\":\"hnp\",\"percentComplete\":57.21261,\"startTime\":\"2021-03-02T04:05:56Z\",\"endTime\":\"2021-02-15T10:23:10Z\",\"operations\":[{\"id\":\"l\",\"resourceId\":\"nvtsdydshkpafyal\",\"name\":\"ww\",\"status\":\"izzn\",\"percentComplete\":4.9079537,\"startTime\":\"2021-12-01T15:36:33Z\",\"endTime\":\"2021-04-07T13:51:15Z\",\"operations\":[{\"status\":\"fgufyjfdkqiy\"},{\"status\":\"ndjokgwesymzqh\"},{\"status\":\"qpfzlpejtznxlue\"},{\"status\":\"ujqbbgsimwejl\"}]},{\"id\":\"bpjzobdwbcpraswk\",\"resourceId\":\"ydtnaczkfwfatgaw\",\"name\":\"nskivdwgt\",\"status\":\"cumecsaaqg\",\"percentComplete\":35.443123,\"startTime\":\"2021-09-01T02:27:35Z\",\"endTime\":\"2021-08-02T21:58:18Z\",\"operations\":[{\"status\":\"bskowkr\"},{\"status\":\"hzhrbkhtm\"},{\"status\":\"owiuasfgq\"}]},{\"id\":\"yhfaimqvd\",\"resourceId\":\"ozkgyfpeoehg\",\"name\":\"qmskkixv\",\"status\":\"zjxplhpevasy\",\"percentComplete\":46.632397,\"startTime\":\"2021-10-23T18:44:15Z\",\"endTime\":\"2021-11-03T17:31:08Z\",\"operations\":[{\"status\":\"bqrvvbqv\"},{\"status\":\"nmpecqxgiqasifub\"},{\"status\":\"snstl\"},{\"status\":\"wqpjnxjkhtupsvy\"}]},{\"id\":\"euiyxfwkztsms\",\"resourceId\":\"evyllznfhkqyt\",\"name\":\"tadopgfzdg\",\"status\":\"fcycrsvlo\",\"percentComplete\":4.3409467,\"startTime\":\"2020-12-24T08:37:06Z\",\"endTime\":\"2021-08-07T20:15:24Z\",\"operations\":[{\"status\":\"uqw\"},{\"status\":\"ajquzxpixhyoi\"}]}]},{\"id\":\"bgsosc\",\"resourceId\":\"nezfvbennmfkbpj\",\"name\":\"tekwwnthropm\",\"status\":\"ud\",\"percentComplete\":37.443043,\"startTime\":\"2021-03-10T01:38:22Z\",\"endTime\":\"2021-05-17T15:02:17Z\",\"operations\":[{\"id\":\"jhf\",\"resourceId\":\"cqkoqyouerg\",\"name\":\"hpuzxkpye\",\"status\":\"hfdyldhgye\",\"percentComplete\":42.56546,\"startTime\":\"2021-02-18T09:07:49Z\",\"endTime\":\"2021-05-11T03:44:14Z\",\"operations\":[{\"status\":\"htdereun\"},{\"status\":\"kakzwhpjlwy\"},{\"status\":\"edznmxrfomckewv\"},{\"status\":\"yifop\"}]},{\"id\":\"jt\",\"resourceId\":\"yzoutxfptofh\",\"name\":\"uywezygvadg\",\"status\":\"aqwvkgjpytpmpvdn\",\"percentComplete\":0.2601564,\"startTime\":\"2021-10-27T11:51:17Z\",\"endTime\":\"2021-02-05T02:56:16Z\",\"operations\":[{\"status\":\"rtbnu\"},{\"status\":\"k\"},{\"status\":\"axzs\"}]}]},{\"id\":\"yjisskobq\",\"resourceId\":\"lflioewyhxessm\",\"name\":\"kdpsqeqfbd\",\"status\":\"mdsesbrujbjpp\",\"percentComplete\":18.978035,\"startTime\":\"2021-03-16T17:50:03Z\",\"endTime\":\"2021-01-23T11:21:01Z\",\"operations\":[{\"id\":\"th\",\"resourceId\":\"at\",\"name\":\"jrnm\",\"status\":\"nzqplgtkihonikzs\",\"percentComplete\":4.6403112,\"startTime\":\"2021-09-01T23:39:41Z\",\"endTime\":\"2021-01-01T07:39:09Z\",\"operations\":[{\"status\":\"fbpntogke\"}]},{\"id\":\"khbmcarmoyfxxk\",\"resourceId\":\"kuqdndxlykhkg\",\"name\":\"pvd\",\"status\":\"t\",\"percentComplete\":92.11887,\"startTime\":\"2021-03-18T15:35:52Z\",\"endTime\":\"2021-04-08T11:55:58Z\",\"operations\":[{\"status\":\"rnrnjrcufmbgacnr\"},{\"status\":\"fdtncmspsanma\"},{\"status\":\"eubkqiqmlf\"},{\"status\":\"hlq\"}]},{\"id\":\"kqj\",\"resourceId\":\"pt\",\"name\":\"ipuugkwdrqmr\",\"status\":\"ahuuonjkkxukg\",\"percentComplete\":30.199629,\"startTime\":\"2021-11-04T15:53:15Z\",\"endTime\":\"2021-02-23T21:43:03Z\",\"operations\":[{\"status\":\"gcjojlleui\"},{\"status\":\"pmtonvhgnhtm\"},{\"status\":\"plhbpjbapmummmkv\"}]}]}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        NetworkCloudManager manager =
            NetworkCloudManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        OperationStatusResult response =
            manager.virtualMachines().start("aorhjkehwvumo", "qircamqprlob", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("gejcvjkjyczc", response.id());
        Assertions.assertEquals("jdyol", response.name());
        Assertions.assertEquals("eqyxqfmzsiz", response.status());
        Assertions.assertEquals(63.244267F, response.percentComplete());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-25T15:18:38Z"), response.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-23T04:26:45Z"), response.endTime());
        Assertions.assertEquals("ymgqbgcx", response.operations().get(0).id());
        Assertions.assertEquals("merghski", response.operations().get(0).name());
        Assertions.assertEquals("hnp", response.operations().get(0).status());
        Assertions.assertEquals(57.21261F, response.operations().get(0).percentComplete());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-02T04:05:56Z"), response.operations().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-15T10:23:10Z"), response.operations().get(0).endTime());
        Assertions.assertEquals("l", response.operations().get(0).operations().get(0).id());
        Assertions.assertEquals("ww", response.operations().get(0).operations().get(0).name());
        Assertions.assertEquals("izzn", response.operations().get(0).operations().get(0).status());
        Assertions.assertEquals(4.9079537F, response.operations().get(0).operations().get(0).percentComplete());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-12-01T15:36:33Z"),
                response.operations().get(0).operations().get(0).startTime());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-04-07T13:51:15Z"),
                response.operations().get(0).operations().get(0).endTime());
        Assertions
            .assertEquals(
                "fgufyjfdkqiy", response.operations().get(0).operations().get(0).operations().get(0).status());
    }
}
