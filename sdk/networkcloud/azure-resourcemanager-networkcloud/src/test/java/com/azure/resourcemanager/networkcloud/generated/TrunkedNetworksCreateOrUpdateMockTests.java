// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.networkcloud.NetworkCloudManager;
import com.azure.resourcemanager.networkcloud.models.ExtendedLocation;
import com.azure.resourcemanager.networkcloud.models.HybridAksPluginType;
import com.azure.resourcemanager.networkcloud.models.TrunkedNetwork;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class TrunkedNetworksCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"extendedLocation\":{\"name\":\"nfee\",\"type\":\"gpkrie\"},\"properties\":{\"associatedResourceIds\":[\"nixxo\",\"wzkyf\",\"nwpiwxeiicrm\",\"e\"],\"clusterId\":\"ldmaxxijvskwsdgk\",\"detailedStatus\":\"Error\",\"detailedStatusMessage\":\"cwrase\",\"hybridAksClustersAssociatedIds\":[\"fcvoinwoqar\",\"wyxqiclad\"],\"hybridAksPluginType\":\"OSDevice\",\"interfaceName\":\"avuqmcbymsfobjlq\",\"isolationDomainIds\":[\"jezcjumvps\",\"mioyo\",\"glkmiqwnnr\",\"clibbfqpsp\"],\"provisioningState\":\"Succeeded\",\"virtualMachinesAssociatedIds\":[\"dgnhautw\",\"kexzgpmnmabeddqi\"],\"vlans\":[4313424007444767733]},\"location\":\"pfqfpc\",\"tags\":{\"rvwerfwxbsmtb\":\"clg\"},\"id\":\"jj\",\"name\":\"h\",\"type\":\"ci\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        NetworkCloudManager manager = NetworkCloudManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        TrunkedNetwork response = manager.trunkedNetworks()
            .define("exkydfb")
            .withRegion("nctagfyvrtpqpem")
            .withExistingResourceGroup("bowcpjqduqgi")
            .withExtendedLocation(new ExtendedLocation().withName("lj").withType("vhuerkjddvrglieg"))
            .withIsolationDomainIds(Arrays.asList("lobvv", "bhvhdiqay", "luiyuosnuudte"))
            .withVlans(Arrays.asList(1842583766553813115L, 3706472874283772066L))
            .withTags(mapOf("wemvxqabckmze", "gkrepdqhqyhw", "greohtwhlpuzjp", "xin", "angp", "eezn"))
            .withHybridAksPluginType(HybridAksPluginType.OSDEVICE)
            .withInterfaceName("gmnzjotvmrx")
            .create();

        Assertions.assertEquals("pfqfpc", response.location());
        Assertions.assertEquals("clg", response.tags().get("rvwerfwxbsmtb"));
        Assertions.assertEquals("nfee", response.extendedLocation().name());
        Assertions.assertEquals("gpkrie", response.extendedLocation().type());
        Assertions.assertEquals(HybridAksPluginType.OSDEVICE, response.hybridAksPluginType());
        Assertions.assertEquals("avuqmcbymsfobjlq", response.interfaceName());
        Assertions.assertEquals("jezcjumvps", response.isolationDomainIds().get(0));
        Assertions.assertEquals(4313424007444767733L, response.vlans().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
