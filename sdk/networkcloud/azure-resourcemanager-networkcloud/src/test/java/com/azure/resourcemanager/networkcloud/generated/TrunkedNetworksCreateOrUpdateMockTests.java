// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.networkcloud.NetworkCloudManager;
import com.azure.resourcemanager.networkcloud.models.ExtendedLocation;
import com.azure.resourcemanager.networkcloud.models.HybridAksPluginType;
import com.azure.resourcemanager.networkcloud.models.TrunkedNetwork;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class TrunkedNetworksCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"extendedLocation\":{\"name\":\"bgnixxoww\",\"type\":\"kyfwnwpiwxeiicr\"},\"properties\":{\"associatedResourceIds\":[\"pk\"],\"clusterId\":\"maxxijvskwsdgkjg\",\"detailedStatus\":\"Available\",\"detailedStatusMessage\":\"rasek\",\"hybridAksClustersAssociatedIds\":[\"cvo\",\"nwoqartwy\",\"qicladv\"],\"hybridAksPluginType\":\"DPDK\",\"interfaceName\":\"vuqmcbymsfobj\",\"isolationDomainIds\":[\"uvjezcjumvps\",\"mioyo\"],\"provisioningState\":\"Succeeded\",\"virtualMachinesAssociatedIds\":[\"iqwnnraclibbfq\",\"spkladydgnhau\",\"wuk\"],\"vlans\":[7303752207169631998,2000479169418585266]},\"location\":\"mabeddqilwgdf\",\"tags\":{\"xbsmtbljje\":\"fpcvstclgqrvwerf\"},\"id\":\"hci\",\"name\":\"kwdvbtb\",\"type\":\"ekqhs\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        NetworkCloudManager manager = NetworkCloudManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        TrunkedNetwork response = manager.trunkedNetworks()
            .define("iegftc")
            .withRegion("qyhwqwem")
            .withExistingResourceGroup("vrg")
            .withExtendedLocation(new ExtendedLocation().withName("biiftksdwgdnk").withType("fgmwd"))
            .withIsolationDomainIds(Arrays.asList("yfluiyuosnuudte", "vhyibdrqrsw", "buubpyrowt"))
            .withVlans(Arrays.asList(6929695590386362785L, 1867849265817616348L, 3999760044887162335L))
            .withTags(mapOf("h", "abckmzeoxinhgre", "angp", "whlpuzjpceezn", "phmsexroq", "bfaxyxzlbc"))
            .withHybridAksPluginType(HybridAksPluginType.SRIOV)
            .withInterfaceName("khlobvvjbhvhdi")
            .create();

        Assertions.assertEquals("mabeddqilwgdf", response.location());
        Assertions.assertEquals("fpcvstclgqrvwerf", response.tags().get("xbsmtbljje"));
        Assertions.assertEquals("bgnixxoww", response.extendedLocation().name());
        Assertions.assertEquals("kyfwnwpiwxeiicr", response.extendedLocation().type());
        Assertions.assertEquals(HybridAksPluginType.DPDK, response.hybridAksPluginType());
        Assertions.assertEquals("vuqmcbymsfobj", response.interfaceName());
        Assertions.assertEquals("uvjezcjumvps", response.isolationDomainIds().get(0));
        Assertions.assertEquals(7303752207169631998L, response.vlans().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
