// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.networkcloud.NetworkCloudManager;
import com.azure.resourcemanager.networkcloud.models.ExtendedLocation;
import com.azure.resourcemanager.networkcloud.models.HybridAksPluginType;
import com.azure.resourcemanager.networkcloud.models.TrunkedNetwork;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class TrunkedNetworksCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"extendedLocation\":{\"name\":\"mgnlqxsjxtel\",\"type\":\"xhvuqbozool\"},\"properties\":{\"associatedResourceIds\":[\"carkuzlb\",\"nndtsnxa\",\"qytl\",\"hd\"],\"clusterId\":\"myck\",\"detailedStatus\":\"Available\",\"detailedStatusMessage\":\"xak\",\"hybridAksClustersAssociatedIds\":[\"wymxgaabjk\",\"tfohf\",\"ogzvk\"],\"hybridAksPluginType\":\"DPDK\",\"interfaceName\":\"iwdyjqurykcrraue\",\"isolationDomainIds\":[\"csuehogddac\",\"cbgydlqi\"],\"provisioningState\":\"Succeeded\",\"virtualMachinesAssociatedIds\":[\"mptyrilkfbnrqqxv\",\"tpbnfnqtxjtoma\",\"swbnfddepldwqjns\"],\"vlans\":[7872201121451479596,3432210895062323891,2525083841214269064]},\"location\":\"hvmywhsbrcarycs\",\"tags\":{\"dmkrrb\":\"yvoaqajuvehzp\",\"ubefgybpmfbfunu\":\"mpfu\"},\"id\":\"mpzkrvfyifkd\",\"name\":\"chlzvfi\",\"type\":\"tnkjjwgcwnphb\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        NetworkCloudManager manager =
            NetworkCloudManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        TrunkedNetwork response =
            manager
                .trunkedNetworks()
                .define("bjczjnciuiyqvlda")
                .withRegion("dvwnjkgvfnmxa")
                .withExistingResourceGroup("syparybjufp")
                .withExtendedLocation(new ExtendedLocation().withName("wvppi").withType("qqzlgcndhz"))
                .withIsolationDomainIds(Arrays.asList("qezxlhdj", "qdcadwvps", "zjiihjr"))
                .withVlans(Arrays.asList(1795211368428256483L))
                .withTags(mapOf("tibtyi", "q", "jpnqnoowsbeden", "uyvpirf", "ucnulgmnh", "exkxbhx", "fajs", "evdyz"))
                .withHybridAksPluginType(HybridAksPluginType.OSDEVICE)
                .withInterfaceName("puq")
                .create();

        Assertions.assertEquals("hvmywhsbrcarycs", response.location());
        Assertions.assertEquals("yvoaqajuvehzp", response.tags().get("dmkrrb"));
        Assertions.assertEquals("mgnlqxsjxtel", response.extendedLocation().name());
        Assertions.assertEquals("xhvuqbozool", response.extendedLocation().type());
        Assertions.assertEquals(HybridAksPluginType.DPDK, response.hybridAksPluginType());
        Assertions.assertEquals("iwdyjqurykcrraue", response.interfaceName());
        Assertions.assertEquals("csuehogddac", response.isolationDomainIds().get(0));
        Assertions.assertEquals(7872201121451479596L, response.vlans().get(0));
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
