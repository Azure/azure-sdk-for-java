// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.networkcloud.NetworkCloudManager;
import com.azure.resourcemanager.networkcloud.models.ExtendedLocation;
import com.azure.resourcemanager.networkcloud.models.HybridAksPluginType;
import com.azure.resourcemanager.networkcloud.models.TrunkedNetwork;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class TrunkedNetworksCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"extendedLocation\":{\"name\":\"rlhgenuze\",\"type\":\"gvkvebaqszll\"},\"properties\":{\"clusterId\":\"lsmmdqgmi\",\"detailedStatus\":\"Error\",\"detailedStatusMessage\":\"mcqrhnxt\",\"hybridAksClustersAssociatedIds\":[\"klogx\",\"vtza\",\"hzvqnsqktcmbjwz\",\"oslpky\"],\"hybridAksPluginType\":\"DPDK\",\"interfaceName\":\"wkzpga\",\"isolationDomainIds\":[\"qjcemqbmf\",\"vqar\",\"z\",\"uqrebluimmbwx\"],\"provisioningState\":\"Succeeded\",\"virtualMachinesAssociatedIds\":[\"mbvx\",\"kraokq\",\"budbt\"],\"vlans\":[4508123453658920592,4762329078829269298,6783828828714715371,3248104129731185824]},\"location\":\"aaknwfr\",\"tags\":{\"p\":\"sm\",\"gatolekscbctnan\":\"ujd\",\"wnsnlaimouxwks\":\"imwbzxpdcldpk\"},\"id\":\"mud\",\"name\":\"fco\",\"type\":\"bicziuswswj\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        NetworkCloudManager manager =
            NetworkCloudManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        TrunkedNetwork response =
            manager
                .trunkedNetworks()
                .define("g")
                .withRegion("jxul")
                .withExistingResourceGroup("yeyng")
                .withExtendedLocation(new ExtendedLocation().withName("rquv").withType("ygg"))
                .withIsolationDomainIds(Arrays.asList("xyxgbkkqv", "cteoedlrslsk"))
                .withVlans(
                    Arrays
                        .asList(709135618554592742L, 5929214324622775226L, 7524586451465684112L, 8005992370097576622L))
                .withTags(mapOf("gcj", "cyrthxqlehm", "oka", "inue"))
                .withHybridAksPluginType(HybridAksPluginType.SRIOV)
                .withInterfaceName("blioskkfmkmf")
                .create();

        Assertions.assertEquals("aaknwfr", response.location());
        Assertions.assertEquals("sm", response.tags().get("p"));
        Assertions.assertEquals("rlhgenuze", response.extendedLocation().name());
        Assertions.assertEquals("gvkvebaqszll", response.extendedLocation().type());
        Assertions.assertEquals(HybridAksPluginType.DPDK, response.hybridAksPluginType());
        Assertions.assertEquals("wkzpga", response.interfaceName());
        Assertions.assertEquals("qjcemqbmf", response.isolationDomainIds().get(0));
        Assertions.assertEquals(4508123453658920592L, response.vlans().get(0));
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
