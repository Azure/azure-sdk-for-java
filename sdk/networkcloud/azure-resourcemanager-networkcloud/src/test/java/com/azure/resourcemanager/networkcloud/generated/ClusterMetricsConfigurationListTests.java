// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.networkcloud.fluent.models.ClusterMetricsConfigurationInner;
import com.azure.resourcemanager.networkcloud.models.ClusterMetricsConfigurationList;
import com.azure.resourcemanager.networkcloud.models.ExtendedLocation;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ClusterMetricsConfigurationListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ClusterMetricsConfigurationList model =
            BinaryData
                .fromString(
                    "{\"nextLink\":\"knlqwzdvpiwhxqsz\",\"value\":[{\"extendedLocation\":{\"name\":\"aajquhuxylrj\",\"type\":\"m\"},\"properties\":{\"collectionInterval\":6313544420005236065,\"detailedStatus\":\"Processing\",\"detailedStatusMessage\":\"zyos\",\"disabledMetrics\":[],\"enabledMetrics\":[],\"provisioningState\":\"Failed\"},\"location\":\"kfkyjp\",\"tags\":{\"yogtieyujtvczkcn\":\"bpssdfp\",\"unjdx\":\"xrx\",\"ivbgkcv\":\"glnkvxlxpagl\"},\"id\":\"hpzvuqdflvoniyp\",\"name\":\"pubcpzgpxtivhjk\",\"type\":\"idibgqjxgpn\"},{\"extendedLocation\":{\"name\":\"hgovfgp\",\"type\":\"kqmhhaowjr\"},\"properties\":{\"collectionInterval\":6664164718456368498,\"detailedStatus\":\"Processing\",\"detailedStatusMessage\":\"rqzdfuydzvkfvx\",\"disabledMetrics\":[],\"enabledMetrics\":[],\"provisioningState\":\"Canceled\"},\"location\":\"psw\",\"tags\":{\"kzsz\":\"vkhlggdhbemz\",\"fpgpicrmnzhrgm\":\"wiwtglxxhl\"},\"id\":\"gjsxv\",\"name\":\"qcbfrmbodths\",\"type\":\"qgvriibakcla\"},{\"extendedLocation\":{\"name\":\"jfrnxousxauzlwv\",\"type\":\"gmwohqfzizvu\"},\"properties\":{\"collectionInterval\":7333127118807568972,\"detailedStatus\":\"Processing\",\"detailedStatusMessage\":\"vthn\",\"disabledMetrics\":[],\"enabledMetrics\":[],\"provisioningState\":\"Succeeded\"},\"location\":\"ovmribiattg\",\"tags\":{\"swvxwlmzqwmv\":\"cfotangcfhnykzcu\",\"uqudtcvclxyn\":\"xnjmxm\",\"dugneiknp\":\"dkvgfabuiyjibuzp\"},\"id\":\"oxgjiuqhibt\",\"name\":\"z\",\"type\":\"pqwjedm\"}]}")
                .toObject(ClusterMetricsConfigurationList.class);
        Assertions.assertEquals("knlqwzdvpiwhxqsz", model.nextLink());
        Assertions.assertEquals("kfkyjp", model.value().get(0).location());
        Assertions.assertEquals("bpssdfp", model.value().get(0).tags().get("yogtieyujtvczkcn"));
        Assertions.assertEquals("aajquhuxylrj", model.value().get(0).extendedLocation().name());
        Assertions.assertEquals("m", model.value().get(0).extendedLocation().type());
        Assertions.assertEquals(6313544420005236065L, model.value().get(0).collectionInterval());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ClusterMetricsConfigurationList model =
            new ClusterMetricsConfigurationList()
                .withNextLink("knlqwzdvpiwhxqsz")
                .withValue(
                    Arrays
                        .asList(
                            new ClusterMetricsConfigurationInner()
                                .withLocation("kfkyjp")
                                .withTags(
                                    mapOf("yogtieyujtvczkcn", "bpssdfp", "unjdx", "xrx", "ivbgkcv", "glnkvxlxpagl"))
                                .withExtendedLocation(new ExtendedLocation().withName("aajquhuxylrj").withType("m"))
                                .withCollectionInterval(6313544420005236065L)
                                .withEnabledMetrics(Arrays.asList()),
                            new ClusterMetricsConfigurationInner()
                                .withLocation("psw")
                                .withTags(mapOf("kzsz", "vkhlggdhbemz", "fpgpicrmnzhrgm", "wiwtglxxhl"))
                                .withExtendedLocation(new ExtendedLocation().withName("hgovfgp").withType("kqmhhaowjr"))
                                .withCollectionInterval(6664164718456368498L)
                                .withEnabledMetrics(Arrays.asList()),
                            new ClusterMetricsConfigurationInner()
                                .withLocation("ovmribiattg")
                                .withTags(
                                    mapOf(
                                        "swvxwlmzqwmv",
                                        "cfotangcfhnykzcu",
                                        "uqudtcvclxyn",
                                        "xnjmxm",
                                        "dugneiknp",
                                        "dkvgfabuiyjibuzp"))
                                .withExtendedLocation(
                                    new ExtendedLocation().withName("jfrnxousxauzlwv").withType("gmwohqfzizvu"))
                                .withCollectionInterval(7333127118807568972L)
                                .withEnabledMetrics(Arrays.asList())));
        model = BinaryData.fromObject(model).toObject(ClusterMetricsConfigurationList.class);
        Assertions.assertEquals("knlqwzdvpiwhxqsz", model.nextLink());
        Assertions.assertEquals("kfkyjp", model.value().get(0).location());
        Assertions.assertEquals("bpssdfp", model.value().get(0).tags().get("yogtieyujtvczkcn"));
        Assertions.assertEquals("aajquhuxylrj", model.value().get(0).extendedLocation().name());
        Assertions.assertEquals("m", model.value().get(0).extendedLocation().type());
        Assertions.assertEquals(6313544420005236065L, model.value().get(0).collectionInterval());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
