// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.networkcloud.fluent.models.ClusterMetricsConfigurationInner;
import com.azure.resourcemanager.networkcloud.models.ClusterMetricsConfigurationList;
import com.azure.resourcemanager.networkcloud.models.ExtendedLocation;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ClusterMetricsConfigurationListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ClusterMetricsConfigurationList model = BinaryData.fromString(
            "{\"nextLink\":\"duugwbsre\",\"value\":[{\"extendedLocation\":{\"name\":\"q\",\"type\":\"fuarenlvhht\"},\"properties\":{\"collectionInterval\":8022511139260982610,\"detailedStatus\":\"Applied\",\"detailedStatusMessage\":\"fvv\",\"disabledMetrics\":[\"edev\"],\"enabledMetrics\":[\"slcqxypokkh\"],\"provisioningState\":\"Succeeded\"},\"location\":\"cymczngn\",\"tags\":{\"wuninv\":\"x\",\"h\":\"db\"},\"id\":\"qdtvqecrqctmxx\",\"name\":\"tddmf\",\"type\":\"huytxzvtzn\"},{\"extendedLocation\":{\"name\":\"pxbannovvoxc\",\"type\":\"ytprwnwvroev\"},\"properties\":{\"collectionInterval\":3836787591700110270,\"detailedStatus\":\"Error\",\"detailedStatusMessage\":\"rrrouuxvnsa\",\"disabledMetrics\":[\"rymo\",\"izrxklob\",\"xnazpmkml\",\"vevfxz\"],\"enabledMetrics\":[\"hbzxli\",\"hrdd\",\"tfgxqbawpcb\",\"nzqcy\"],\"provisioningState\":\"Failed\"},\"location\":\"qofyuicdhzbdy\",\"tags\":{\"lfmu\":\"gbdvibidmhmwff\",\"yoxoy\":\"apckccrrvw\",\"oshbragapyy\":\"ukphaimmoiroq\",\"opfppdbwnupgah\":\"mfsvbpav\"},\"id\":\"kuma\",\"name\":\"jcaacfdmmcpugm\",\"type\":\"hqepvufhbzehewh\"},{\"extendedLocation\":{\"name\":\"qhnlbqnbld\",\"type\":\"eaclgschorimk\"},\"properties\":{\"collectionInterval\":3947758974496733605,\"detailedStatus\":\"Applied\",\"detailedStatusMessage\":\"ucsofldpuviyf\",\"disabledMetrics\":[\"beolh\",\"hlvbmxu\",\"ibsxtkcud\"],\"enabledMetrics\":[\"farfs\"],\"provisioningState\":\"Provisioning\"},\"location\":\"kjxnqpvwgfstmhq\",\"tags\":{\"aoaf\":\"zmdk\",\"gc\":\"luqvoxmycjimryv\"},\"id\":\"wpbmzgwesydsxwef\",\"name\":\"hecbvopwndyq\",\"type\":\"eallklmtkhlo\"}]}")
            .toObject(ClusterMetricsConfigurationList.class);
        Assertions.assertEquals("duugwbsre", model.nextLink());
        Assertions.assertEquals("cymczngn", model.value().get(0).location());
        Assertions.assertEquals("x", model.value().get(0).tags().get("wuninv"));
        Assertions.assertEquals("q", model.value().get(0).extendedLocation().name());
        Assertions.assertEquals("fuarenlvhht", model.value().get(0).extendedLocation().type());
        Assertions.assertEquals(8022511139260982610L, model.value().get(0).collectionInterval());
        Assertions.assertEquals("slcqxypokkh", model.value().get(0).enabledMetrics().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ClusterMetricsConfigurationList model = new ClusterMetricsConfigurationList().withNextLink("duugwbsre")
            .withValue(Arrays.asList(
                new ClusterMetricsConfigurationInner().withLocation("cymczngn")
                    .withTags(mapOf("wuninv", "x", "h", "db"))
                    .withExtendedLocation(new ExtendedLocation().withName("q").withType("fuarenlvhht"))
                    .withCollectionInterval(8022511139260982610L)
                    .withEnabledMetrics(Arrays.asList("slcqxypokkh")),
                new ClusterMetricsConfigurationInner().withLocation("qofyuicdhzbdy")
                    .withTags(mapOf("lfmu", "gbdvibidmhmwff", "yoxoy", "apckccrrvw", "oshbragapyy", "ukphaimmoiroq",
                        "opfppdbwnupgah", "mfsvbpav"))
                    .withExtendedLocation(new ExtendedLocation().withName("pxbannovvoxc").withType("ytprwnwvroev"))
                    .withCollectionInterval(3836787591700110270L)
                    .withEnabledMetrics(Arrays.asList("hbzxli", "hrdd", "tfgxqbawpcb", "nzqcy")),
                new ClusterMetricsConfigurationInner().withLocation("kjxnqpvwgfstmhq")
                    .withTags(mapOf("aoaf", "zmdk", "gc", "luqvoxmycjimryv"))
                    .withExtendedLocation(new ExtendedLocation().withName("qhnlbqnbld").withType("eaclgschorimk"))
                    .withCollectionInterval(3947758974496733605L)
                    .withEnabledMetrics(Arrays.asList("farfs"))));
        model = BinaryData.fromObject(model).toObject(ClusterMetricsConfigurationList.class);
        Assertions.assertEquals("duugwbsre", model.nextLink());
        Assertions.assertEquals("cymczngn", model.value().get(0).location());
        Assertions.assertEquals("x", model.value().get(0).tags().get("wuninv"));
        Assertions.assertEquals("q", model.value().get(0).extendedLocation().name());
        Assertions.assertEquals("fuarenlvhht", model.value().get(0).extendedLocation().type());
        Assertions.assertEquals(8022511139260982610L, model.value().get(0).collectionInterval());
        Assertions.assertEquals("slcqxypokkh", model.value().get(0).enabledMetrics().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
