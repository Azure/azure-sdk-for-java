// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.networkcloud.fluent.models.ClusterMetricsConfigurationInner;
import com.azure.resourcemanager.networkcloud.models.ClusterMetricsConfigurationList;
import com.azure.resourcemanager.networkcloud.models.ExtendedLocation;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ClusterMetricsConfigurationListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ClusterMetricsConfigurationList model = BinaryData.fromString(
            "{\"nextLink\":\"qepvufhbzeh\",\"value\":[{\"extendedLocation\":{\"name\":\"oqhnlb\",\"type\":\"nbldxeaclgschori\"},\"properties\":{\"collectionInterval\":1577622662051732112,\"detailedStatus\":\"Processing\",\"detailedStatusMessage\":\"moucsofldpuviyfc\",\"disabledMetrics\":[\"eolhbhlvbmx\",\"qi\"],\"enabledMetrics\":[\"tkcudfbsfarfsiow\",\"kjxnqpvwgfstmhq\",\"kizmdksaoafclu\"],\"provisioningState\":\"Accepted\"},\"location\":\"mycjimryvwgcwwp\",\"tags\":{\"ydsx\":\"gwe\"},\"id\":\"efoh\",\"name\":\"cbvopwndyqleallk\",\"type\":\"mtkhlowkxxpvbr\"},{\"extendedLocation\":{\"name\":\"fjmzsyzfho\",\"type\":\"lhikcyychunsj\"},\"properties\":{\"collectionInterval\":6323687136904700414,\"detailedStatus\":\"Processing\",\"detailedStatusMessage\":\"szhv\",\"disabledMetrics\":[\"c\",\"hvtrrmhwrbfdpyf\",\"ubhvj\"],\"enabledMetrics\":[\"ocu\"],\"provisioningState\":\"Provisioning\"},\"location\":\"hhmemhooclutnp\",\"tags\":{\"ykyujxsg\":\"mczjkm\"},\"id\":\"hsrrryejylmbkz\",\"name\":\"dnigrfihot\",\"type\":\"e\"}]}")
            .toObject(ClusterMetricsConfigurationList.class);
        Assertions.assertEquals("qepvufhbzeh", model.nextLink());
        Assertions.assertEquals("mycjimryvwgcwwp", model.value().get(0).location());
        Assertions.assertEquals("gwe", model.value().get(0).tags().get("ydsx"));
        Assertions.assertEquals("oqhnlb", model.value().get(0).extendedLocation().name());
        Assertions.assertEquals("nbldxeaclgschori", model.value().get(0).extendedLocation().type());
        Assertions.assertEquals(1577622662051732112L, model.value().get(0).collectionInterval());
        Assertions.assertEquals("tkcudfbsfarfsiow", model.value().get(0).enabledMetrics().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ClusterMetricsConfigurationList model
            = new ClusterMetricsConfigurationList().withNextLink("qepvufhbzeh")
                .withValue(
                    Arrays.asList(
                        new ClusterMetricsConfigurationInner().withLocation("mycjimryvwgcwwp")
                            .withTags(mapOf("ydsx", "gwe"))
                            .withExtendedLocation(
                                new ExtendedLocation().withName("oqhnlb").withType("nbldxeaclgschori"))
                            .withCollectionInterval(1577622662051732112L)
                            .withEnabledMetrics(Arrays.asList("tkcudfbsfarfsiow", "kjxnqpvwgfstmhq", "kizmdksaoafclu")),
                        new ClusterMetricsConfigurationInner().withLocation("hhmemhooclutnp")
                            .withTags(mapOf("ykyujxsg", "mczjkm"))
                            .withExtendedLocation(
                                new ExtendedLocation().withName("fjmzsyzfho").withType("lhikcyychunsj"))
                            .withCollectionInterval(6323687136904700414L)
                            .withEnabledMetrics(Arrays.asList("ocu"))));
        model = BinaryData.fromObject(model).toObject(ClusterMetricsConfigurationList.class);
        Assertions.assertEquals("qepvufhbzeh", model.nextLink());
        Assertions.assertEquals("mycjimryvwgcwwp", model.value().get(0).location());
        Assertions.assertEquals("gwe", model.value().get(0).tags().get("ydsx"));
        Assertions.assertEquals("oqhnlb", model.value().get(0).extendedLocation().name());
        Assertions.assertEquals("nbldxeaclgschori", model.value().get(0).extendedLocation().type());
        Assertions.assertEquals(1577622662051732112L, model.value().get(0).collectionInterval());
        Assertions.assertEquals("tkcudfbsfarfsiow", model.value().get(0).enabledMetrics().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
