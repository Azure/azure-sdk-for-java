// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.networkcloud.NetworkCloudManager;
import com.azure.resourcemanager.networkcloud.models.HybridAksPluginType;
import com.azure.resourcemanager.networkcloud.models.TrunkedNetwork;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class TrunkedNetworksListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"extendedLocation\":{\"name\":\"tmojhvrztnvgyshq\",\"type\":\"dgrtwmew\"},\"properties\":{\"associatedResourceIds\":[\"py\"],\"clusterId\":\"fa\",\"detailedStatus\":\"Provisioning\",\"detailedStatusMessage\":\"cayer\",\"hybridAksClustersAssociatedIds\":[\"ansyb\",\"lpolwzrghsrle\"],\"hybridAksPluginType\":\"SRIOV\",\"interfaceName\":\"scjfncjwvuagf\",\"isolationDomainIds\":[\"tltng\",\"m\",\"e\",\"ptrklzmija\"],\"provisioningState\":\"Canceled\",\"virtualMachinesAssociatedIds\":[\"fsvagh\"],\"vlans\":[7469250402982686005,1276863809676580780,548743314358762108,4282149181142160943]},\"location\":\"gtzjcv\",\"tags\":{\"yxpavidnie\":\"lapsnsso\",\"slpuxgcbdsva\":\"wffcvvye\",\"rkxgpazwugxyqvnj\":\"pnptw\"},\"id\":\"bfe\",\"name\":\"hldiuhzzgqlm\",\"type\":\"aewzgiudjp\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        NetworkCloudManager manager = NetworkCloudManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<TrunkedNetwork> response = manager.trunkedNetworks().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("gtzjcv", response.iterator().next().location());
        Assertions.assertEquals("lapsnsso", response.iterator().next().tags().get("yxpavidnie"));
        Assertions.assertEquals("tmojhvrztnvgyshq", response.iterator().next().extendedLocation().name());
        Assertions.assertEquals("dgrtwmew", response.iterator().next().extendedLocation().type());
        Assertions.assertEquals(HybridAksPluginType.SRIOV, response.iterator().next().hybridAksPluginType());
        Assertions.assertEquals("scjfncjwvuagf", response.iterator().next().interfaceName());
        Assertions.assertEquals("tltng", response.iterator().next().isolationDomainIds().get(0));
        Assertions.assertEquals(7469250402982686005L, response.iterator().next().vlans().get(0));
    }
}
