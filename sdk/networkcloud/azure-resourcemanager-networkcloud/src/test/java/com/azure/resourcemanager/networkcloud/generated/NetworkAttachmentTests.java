// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.networkcloud.models.DefaultGateway;
import com.azure.resourcemanager.networkcloud.models.NetworkAttachment;
import com.azure.resourcemanager.networkcloud.models.VirtualMachineIpAllocationMethod;
import org.junit.jupiter.api.Assertions;

public final class NetworkAttachmentTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NetworkAttachment model =
            BinaryData
                .fromString(
                    "{\"attachedNetworkId\":\"hjpglkf\",\"defaultGateway\":\"False\",\"ipAllocationMethod\":\"Static\",\"ipv4Address\":\"euel\",\"ipv6Address\":\"hsd\",\"macAddress\":\"t\",\"networkAttachmentName\":\"fikdowwqu\"}")
                .toObject(NetworkAttachment.class);
        Assertions.assertEquals("hjpglkf", model.attachedNetworkId());
        Assertions.assertEquals(DefaultGateway.FALSE, model.defaultGateway());
        Assertions.assertEquals(VirtualMachineIpAllocationMethod.STATIC, model.ipAllocationMethod());
        Assertions.assertEquals("euel", model.ipv4Address());
        Assertions.assertEquals("hsd", model.ipv6Address());
        Assertions.assertEquals("fikdowwqu", model.networkAttachmentName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NetworkAttachment model =
            new NetworkAttachment()
                .withAttachedNetworkId("hjpglkf")
                .withDefaultGateway(DefaultGateway.FALSE)
                .withIpAllocationMethod(VirtualMachineIpAllocationMethod.STATIC)
                .withIpv4Address("euel")
                .withIpv6Address("hsd")
                .withNetworkAttachmentName("fikdowwqu");
        model = BinaryData.fromObject(model).toObject(NetworkAttachment.class);
        Assertions.assertEquals("hjpglkf", model.attachedNetworkId());
        Assertions.assertEquals(DefaultGateway.FALSE, model.defaultGateway());
        Assertions.assertEquals(VirtualMachineIpAllocationMethod.STATIC, model.ipAllocationMethod());
        Assertions.assertEquals("euel", model.ipv4Address());
        Assertions.assertEquals("hsd", model.ipv6Address());
        Assertions.assertEquals("fikdowwqu", model.networkAttachmentName());
    }
}
