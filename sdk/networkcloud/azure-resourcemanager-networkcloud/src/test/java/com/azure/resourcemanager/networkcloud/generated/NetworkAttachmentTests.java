// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.networkcloud.models.DefaultGateway;
import com.azure.resourcemanager.networkcloud.models.NetworkAttachment;
import com.azure.resourcemanager.networkcloud.models.VirtualMachineIpAllocationMethod;
import org.junit.jupiter.api.Assertions;

public final class NetworkAttachmentTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NetworkAttachment model = BinaryData.fromString(
            "{\"attachedNetworkId\":\"aldsy\",\"defaultGateway\":\"False\",\"ipAllocationMethod\":\"Disabled\",\"ipv4Address\":\"erqf\",\"ipv6Address\":\"wyznkbyku\",\"macAddress\":\"pfhpagmhrskdsnfd\",\"networkAttachmentName\":\"oakgtdlmkkzev\"}")
            .toObject(NetworkAttachment.class);
        Assertions.assertEquals("aldsy", model.attachedNetworkId());
        Assertions.assertEquals(DefaultGateway.FALSE, model.defaultGateway());
        Assertions.assertEquals(VirtualMachineIpAllocationMethod.DISABLED, model.ipAllocationMethod());
        Assertions.assertEquals("erqf", model.ipv4Address());
        Assertions.assertEquals("wyznkbyku", model.ipv6Address());
        Assertions.assertEquals("oakgtdlmkkzev", model.networkAttachmentName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NetworkAttachment model = new NetworkAttachment().withAttachedNetworkId("aldsy")
            .withDefaultGateway(DefaultGateway.FALSE)
            .withIpAllocationMethod(VirtualMachineIpAllocationMethod.DISABLED)
            .withIpv4Address("erqf")
            .withIpv6Address("wyznkbyku")
            .withNetworkAttachmentName("oakgtdlmkkzev");
        model = BinaryData.fromObject(model).toObject(NetworkAttachment.class);
        Assertions.assertEquals("aldsy", model.attachedNetworkId());
        Assertions.assertEquals(DefaultGateway.FALSE, model.defaultGateway());
        Assertions.assertEquals(VirtualMachineIpAllocationMethod.DISABLED, model.ipAllocationMethod());
        Assertions.assertEquals("erqf", model.ipv4Address());
        Assertions.assertEquals("wyznkbyku", model.ipv6Address());
        Assertions.assertEquals("oakgtdlmkkzev", model.networkAttachmentName());
    }
}
