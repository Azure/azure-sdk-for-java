// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.networkcloud.fluent.models.RackInner;
import com.azure.resourcemanager.networkcloud.models.ExtendedLocation;
import com.azure.resourcemanager.networkcloud.models.RackList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class RackListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        RackList model = BinaryData.fromString(
            "{\"nextLink\":\"eg\",\"value\":[{\"extendedLocation\":{\"name\":\"lzxwhcansy\",\"type\":\"oyqhlwig\"},\"properties\":{\"availabilityZone\":\"ivbkbxgomfaj\",\"clusterId\":\"asqvd\",\"detailedStatus\":\"Provisioning\",\"detailedStatusMessage\":\"guxak\",\"provisioningState\":\"Failed\",\"rackLocation\":\"zhzbezkgimsi\",\"rackSerialNumber\":\"xasicddyvvjskg\",\"rackSkuId\":\"mocwa\"},\"location\":\"qgatjeaahhvjhhn\",\"tags\":{\"yxvxevblbjed\":\"ybbjjidjksyx\",\"smjbnkppxyn\":\"ljlageuaulxu\"},\"id\":\"nlsvxeiz\",\"name\":\"gwklnsr\",\"type\":\"ffeycx\"},{\"extendedLocation\":{\"name\":\"ktp\",\"type\":\"ymerteeammxq\"},\"properties\":{\"availabilityZone\":\"ekkkzd\",\"clusterId\":\"tkgdojbmxva\",\"detailedStatus\":\"Error\",\"detailedStatusMessage\":\"de\",\"provisioningState\":\"Canceled\",\"rackLocation\":\"ecuijpxtxs\",\"rackSerialNumber\":\"wprtu\",\"rackSkuId\":\"wsawddjibabxvi\"},\"location\":\"tvtzeexavoxtfg\",\"tags\":{\"pypqtgsfj\":\"dmdqb\"},\"id\":\"cbslhhx\",\"name\":\"db\",\"type\":\"vodhtn\"},{\"extendedLocation\":{\"name\":\"irudh\",\"type\":\"m\"},\"properties\":{\"availabilityZone\":\"es\",\"clusterId\":\"dlpagzrcxfail\",\"detailedStatus\":\"Provisioning\",\"detailedStatusMessage\":\"m\",\"provisioningState\":\"Canceled\",\"rackLocation\":\"xdfgsftufqobr\",\"rackSerialNumber\":\"lnacgcc\",\"rackSkuId\":\"knh\"},\"location\":\"izvy\",\"tags\":{\"aaeranokqgukk\":\"zvulj\",\"oylaxxul\":\"qnvb\"},\"id\":\"disdosfjbjsvgj\",\"name\":\"whryvycytdcl\",\"type\":\"gc\"}]}")
            .toObject(RackList.class);
        Assertions.assertEquals("eg", model.nextLink());
        Assertions.assertEquals("qgatjeaahhvjhhn", model.value().get(0).location());
        Assertions.assertEquals("ybbjjidjksyx", model.value().get(0).tags().get("yxvxevblbjed"));
        Assertions.assertEquals("lzxwhcansy", model.value().get(0).extendedLocation().name());
        Assertions.assertEquals("oyqhlwig", model.value().get(0).extendedLocation().type());
        Assertions.assertEquals("ivbkbxgomfaj", model.value().get(0).availabilityZone());
        Assertions.assertEquals("zhzbezkgimsi", model.value().get(0).rackLocation());
        Assertions.assertEquals("xasicddyvvjskg", model.value().get(0).rackSerialNumber());
        Assertions.assertEquals("mocwa", model.value().get(0).rackSkuId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        RackList model
            = new RackList().withNextLink("eg")
                .withValue(
                    Arrays
                        .asList(
                            new RackInner().withLocation("qgatjeaahhvjhhn")
                                .withTags(mapOf("yxvxevblbjed", "ybbjjidjksyx", "smjbnkppxyn", "ljlageuaulxu"))
                                .withExtendedLocation(
                                    new ExtendedLocation().withName("lzxwhcansy").withType("oyqhlwig"))
                                .withAvailabilityZone("ivbkbxgomfaj")
                                .withRackLocation("zhzbezkgimsi")
                                .withRackSerialNumber("xasicddyvvjskg")
                                .withRackSkuId("mocwa"),
                            new RackInner().withLocation("tvtzeexavoxtfg")
                                .withTags(mapOf("pypqtgsfj", "dmdqb"))
                                .withExtendedLocation(new ExtendedLocation().withName("ktp").withType("ymerteeammxq"))
                                .withAvailabilityZone("ekkkzd")
                                .withRackLocation("ecuijpxtxs")
                                .withRackSerialNumber("wprtu")
                                .withRackSkuId("wsawddjibabxvi"),
                            new RackInner().withLocation("izvy")
                                .withTags(mapOf("aaeranokqgukk", "zvulj", "oylaxxul", "qnvb"))
                                .withExtendedLocation(new ExtendedLocation().withName("irudh").withType("m"))
                                .withAvailabilityZone("es")
                                .withRackLocation("xdfgsftufqobr")
                                .withRackSerialNumber("lnacgcc")
                                .withRackSkuId("knh")));
        model = BinaryData.fromObject(model).toObject(RackList.class);
        Assertions.assertEquals("eg", model.nextLink());
        Assertions.assertEquals("qgatjeaahhvjhhn", model.value().get(0).location());
        Assertions.assertEquals("ybbjjidjksyx", model.value().get(0).tags().get("yxvxevblbjed"));
        Assertions.assertEquals("lzxwhcansy", model.value().get(0).extendedLocation().name());
        Assertions.assertEquals("oyqhlwig", model.value().get(0).extendedLocation().type());
        Assertions.assertEquals("ivbkbxgomfaj", model.value().get(0).availabilityZone());
        Assertions.assertEquals("zhzbezkgimsi", model.value().get(0).rackLocation());
        Assertions.assertEquals("xasicddyvvjskg", model.value().get(0).rackSerialNumber());
        Assertions.assertEquals("mocwa", model.value().get(0).rackSkuId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
