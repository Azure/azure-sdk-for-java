// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.networkcloud.fluent.models.RackInner;
import com.azure.resourcemanager.networkcloud.models.ExtendedLocation;
import com.azure.resourcemanager.networkcloud.models.RackList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class RackListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        RackList model = BinaryData.fromString(
            "{\"nextLink\":\"hzdsqtzbsrgnow\",\"value\":[{\"extendedLocation\":{\"name\":\"fgmvecactxmwo\",\"type\":\"e\"},\"properties\":{\"availabilityZone\":\"owcluqo\",\"clusterId\":\"kqvgqouw\",\"detailedStatus\":\"Available\",\"detailedStatusMessage\":\"pjwyiv\",\"provisioningState\":\"Failed\",\"rackLocation\":\"f\",\"rackSerialNumber\":\"cvhrfsp\",\"rackSkuId\":\"uagrttikteusqc\"},\"location\":\"vyklxuby\",\"tags\":{\"bgq\":\"fmmfblcqcu\"},\"id\":\"brta\",\"name\":\"metttwgd\",\"type\":\"lqxihhrmooiz\"},{\"extendedLocation\":{\"name\":\"seypxiutcxapz\",\"type\":\"y\"},\"properties\":{\"availabilityZone\":\"petogebjox\",\"clusterId\":\"hvnh\",\"detailedStatus\":\"Error\",\"detailedStatusMessage\":\"q\",\"provisioningState\":\"Accepted\",\"rackLocation\":\"zjcjbtr\",\"rackSerialNumber\":\"aehvvibrxjjstoq\",\"rackSkuId\":\"eitpkxztmo\"},\"location\":\"klf\",\"tags\":{\"yhohujswtwkozzwc\":\"gfcwqmpimaqxzhem\",\"wpfaj\":\"lkb\"},\"id\":\"jwltlwtjjgu\",\"name\":\"talhsnvkcdmxzr\",\"type\":\"oaimlnw\"},{\"extendedLocation\":{\"name\":\"aaomylweazu\",\"type\":\"cse\"},\"properties\":{\"availabilityZone\":\"hwwn\",\"clusterId\":\"hlf\",\"detailedStatus\":\"Error\",\"detailedStatusMessage\":\"ch\",\"provisioningState\":\"Provisioning\",\"rackLocation\":\"fb\",\"rackSerialNumber\":\"usnfepgfewet\",\"rackSkuId\":\"l\"},\"location\":\"gncxykxhdj\",\"tags\":{\"rxvxcjzh\":\"mmbcxfhbcp\",\"qscjavftjuh\":\"izxfpxt\"},\"id\":\"qaz\",\"name\":\"mtggu\",\"type\":\"pijrajcivmmghf\"}]}")
            .toObject(RackList.class);
        Assertions.assertEquals("hzdsqtzbsrgnow", model.nextLink());
        Assertions.assertEquals("vyklxuby", model.value().get(0).location());
        Assertions.assertEquals("fmmfblcqcu", model.value().get(0).tags().get("bgq"));
        Assertions.assertEquals("fgmvecactxmwo", model.value().get(0).extendedLocation().name());
        Assertions.assertEquals("e", model.value().get(0).extendedLocation().type());
        Assertions.assertEquals("owcluqo", model.value().get(0).availabilityZone());
        Assertions.assertEquals("f", model.value().get(0).rackLocation());
        Assertions.assertEquals("cvhrfsp", model.value().get(0).rackSerialNumber());
        Assertions.assertEquals("uagrttikteusqc", model.value().get(0).rackSkuId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        RackList model = new RackList().withNextLink("hzdsqtzbsrgnow")
            .withValue(Arrays.asList(
                new RackInner().withLocation("vyklxuby")
                    .withTags(mapOf("bgq", "fmmfblcqcu"))
                    .withExtendedLocation(new ExtendedLocation().withName("fgmvecactxmwo").withType("e"))
                    .withAvailabilityZone("owcluqo")
                    .withRackLocation("f")
                    .withRackSerialNumber("cvhrfsp")
                    .withRackSkuId("uagrttikteusqc"),
                new RackInner().withLocation("klf")
                    .withTags(mapOf("yhohujswtwkozzwc", "gfcwqmpimaqxzhem", "wpfaj", "lkb"))
                    .withExtendedLocation(new ExtendedLocation().withName("seypxiutcxapz").withType("y"))
                    .withAvailabilityZone("petogebjox")
                    .withRackLocation("zjcjbtr")
                    .withRackSerialNumber("aehvvibrxjjstoq")
                    .withRackSkuId("eitpkxztmo"),
                new RackInner().withLocation("gncxykxhdj")
                    .withTags(mapOf("rxvxcjzh", "mmbcxfhbcp", "qscjavftjuh", "izxfpxt"))
                    .withExtendedLocation(new ExtendedLocation().withName("aaomylweazu").withType("cse"))
                    .withAvailabilityZone("hwwn")
                    .withRackLocation("fb")
                    .withRackSerialNumber("usnfepgfewet")
                    .withRackSkuId("l")));
        model = BinaryData.fromObject(model).toObject(RackList.class);
        Assertions.assertEquals("hzdsqtzbsrgnow", model.nextLink());
        Assertions.assertEquals("vyklxuby", model.value().get(0).location());
        Assertions.assertEquals("fmmfblcqcu", model.value().get(0).tags().get("bgq"));
        Assertions.assertEquals("fgmvecactxmwo", model.value().get(0).extendedLocation().name());
        Assertions.assertEquals("e", model.value().get(0).extendedLocation().type());
        Assertions.assertEquals("owcluqo", model.value().get(0).availabilityZone());
        Assertions.assertEquals("f", model.value().get(0).rackLocation());
        Assertions.assertEquals("cvhrfsp", model.value().get(0).rackSerialNumber());
        Assertions.assertEquals("uagrttikteusqc", model.value().get(0).rackSkuId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
