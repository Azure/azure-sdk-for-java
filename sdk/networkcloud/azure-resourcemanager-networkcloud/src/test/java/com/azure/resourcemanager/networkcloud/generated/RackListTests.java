// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.networkcloud.fluent.models.RackInner;
import com.azure.resourcemanager.networkcloud.models.ExtendedLocation;
import com.azure.resourcemanager.networkcloud.models.RackList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class RackListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        RackList model =
            BinaryData
                .fromString(
                    "{\"nextLink\":\"bquwrbehw\",\"value\":[{\"extendedLocation\":{\"name\":\"hbuffkmrq\",\"type\":\"mvvhmxtdrjfuta\"},\"properties\":{\"availabilityZone\":\"oe\",\"clusterId\":\"vewzcj\",\"detailedStatus\":\"Available\",\"detailedStatusMessage\":\"cpmguaadraufact\",\"provisioningState\":\"Canceled\",\"rackLocation\":\"zov\",\"rackSerialNumber\":\"jjziuxxpsh\",\"rackSkuId\":\"eekulfgslqubkwd\"},\"location\":\"nrdsutujbazpjuoh\",\"tags\":{\"rwm\":\"yfln\",\"xpgpq\":\"uvwpklvxwmyg\"},\"id\":\"hiszepnnbjcrxgib\",\"name\":\"daxconfozauorsuk\",\"type\":\"kwbqplhlvnuu\"}]}")
                .toObject(RackList.class);
        Assertions.assertEquals("bquwrbehw", model.nextLink());
        Assertions.assertEquals("nrdsutujbazpjuoh", model.value().get(0).location());
        Assertions.assertEquals("yfln", model.value().get(0).tags().get("rwm"));
        Assertions.assertEquals("hbuffkmrq", model.value().get(0).extendedLocation().name());
        Assertions.assertEquals("mvvhmxtdrjfuta", model.value().get(0).extendedLocation().type());
        Assertions.assertEquals("oe", model.value().get(0).availabilityZone());
        Assertions.assertEquals("zov", model.value().get(0).rackLocation());
        Assertions.assertEquals("jjziuxxpsh", model.value().get(0).rackSerialNumber());
        Assertions.assertEquals("eekulfgslqubkwd", model.value().get(0).rackSkuId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        RackList model =
            new RackList()
                .withNextLink("bquwrbehw")
                .withValue(
                    Arrays
                        .asList(
                            new RackInner()
                                .withLocation("nrdsutujbazpjuoh")
                                .withTags(mapOf("rwm", "yfln", "xpgpq", "uvwpklvxwmyg"))
                                .withExtendedLocation(
                                    new ExtendedLocation().withName("hbuffkmrq").withType("mvvhmxtdrjfuta"))
                                .withAvailabilityZone("oe")
                                .withRackLocation("zov")
                                .withRackSerialNumber("jjziuxxpsh")
                                .withRackSkuId("eekulfgslqubkwd")));
        model = BinaryData.fromObject(model).toObject(RackList.class);
        Assertions.assertEquals("bquwrbehw", model.nextLink());
        Assertions.assertEquals("nrdsutujbazpjuoh", model.value().get(0).location());
        Assertions.assertEquals("yfln", model.value().get(0).tags().get("rwm"));
        Assertions.assertEquals("hbuffkmrq", model.value().get(0).extendedLocation().name());
        Assertions.assertEquals("mvvhmxtdrjfuta", model.value().get(0).extendedLocation().type());
        Assertions.assertEquals("oe", model.value().get(0).availabilityZone());
        Assertions.assertEquals("zov", model.value().get(0).rackLocation());
        Assertions.assertEquals("jjziuxxpsh", model.value().get(0).rackSerialNumber());
        Assertions.assertEquals("eekulfgslqubkwd", model.value().get(0).rackSkuId());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
