// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.networkcloud.fluent.models.ClusterMetricsConfigurationInner;
import com.azure.resourcemanager.networkcloud.models.ExtendedLocation;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ClusterMetricsConfigurationInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ClusterMetricsConfigurationInner model = BinaryData.fromString(
            "{\"extendedLocation\":{\"name\":\"kxxpvbrd\",\"type\":\"jmzsyzfh\"},\"properties\":{\"collectionInterval\":4218059828246905287,\"detailedStatus\":\"Applied\",\"detailedStatusMessage\":\"cyychunsjlp\",\"disabledMetrics\":[\"wszhvvuicphvtrr\",\"hwrbfdpyflubh\",\"jgl\"],\"enabledMetrics\":[\"uyzlw\",\"hmem\",\"ooclutnp\",\"memczjkmmyk\"],\"provisioningState\":\"Succeeded\"},\"location\":\"sglhsr\",\"tags\":{\"nigrfihotjewl\":\"ejylmbkzu\",\"hqo\":\"xuzzjgnrefq\",\"diw\":\"oihiqak\",\"hcspo\":\"brkwpzdqt\"},\"id\":\"aqa\",\"name\":\"sipi\",\"type\":\"tgbebj\"}")
            .toObject(ClusterMetricsConfigurationInner.class);
        Assertions.assertEquals("sglhsr", model.location());
        Assertions.assertEquals("ejylmbkzu", model.tags().get("nigrfihotjewl"));
        Assertions.assertEquals("kxxpvbrd", model.extendedLocation().name());
        Assertions.assertEquals("jmzsyzfh", model.extendedLocation().type());
        Assertions.assertEquals(4218059828246905287L, model.collectionInterval());
        Assertions.assertEquals("uyzlw", model.enabledMetrics().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ClusterMetricsConfigurationInner model = new ClusterMetricsConfigurationInner().withLocation("sglhsr")
            .withTags(mapOf("nigrfihotjewl", "ejylmbkzu", "hqo", "xuzzjgnrefq", "diw", "oihiqak", "hcspo", "brkwpzdqt"))
            .withExtendedLocation(new ExtendedLocation().withName("kxxpvbrd").withType("jmzsyzfh"))
            .withCollectionInterval(4218059828246905287L)
            .withEnabledMetrics(Arrays.asList("uyzlw", "hmem", "ooclutnp", "memczjkmmyk"));
        model = BinaryData.fromObject(model).toObject(ClusterMetricsConfigurationInner.class);
        Assertions.assertEquals("sglhsr", model.location());
        Assertions.assertEquals("ejylmbkzu", model.tags().get("nigrfihotjewl"));
        Assertions.assertEquals("kxxpvbrd", model.extendedLocation().name());
        Assertions.assertEquals("jmzsyzfh", model.extendedLocation().type());
        Assertions.assertEquals(4218059828246905287L, model.collectionInterval());
        Assertions.assertEquals("uyzlw", model.enabledMetrics().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
