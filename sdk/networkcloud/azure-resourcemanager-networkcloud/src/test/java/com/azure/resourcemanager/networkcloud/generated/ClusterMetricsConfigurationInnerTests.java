// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.networkcloud.fluent.models.ClusterMetricsConfigurationInner;
import com.azure.resourcemanager.networkcloud.models.ExtendedLocation;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ClusterMetricsConfigurationInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ClusterMetricsConfigurationInner model =
            BinaryData
                .fromString(
                    "{\"extendedLocation\":{\"name\":\"fcsserxhtvsox\",\"type\":\"lwntsjgqrs\"},\"properties\":{\"collectionInterval\":994604483308032293,\"detailedStatus\":\"Processing\",\"detailedStatusMessage\":\"u\",\"disabledMetrics\":[\"chrszi\",\"oyuelyetn\",\"nb\"],\"enabledMetrics\":[\"ggagfln\",\"gm\",\"rwahzjmucftbyr\"],\"provisioningState\":\"Accepted\"},\"location\":\"hkpigqfusuckzmkw\",\"tags\":{\"hjnhgwydyynfsvk\":\"noxaxmqeqal\",\"ta\":\"gbv\",\"jcpeogkhnmg\":\"arfdlpukhpyrnei\"},\"id\":\"ro\",\"name\":\"xddbhfhpfpaz\",\"type\":\"zoyw\"}")
                .toObject(ClusterMetricsConfigurationInner.class);
        Assertions.assertEquals("hkpigqfusuckzmkw", model.location());
        Assertions.assertEquals("noxaxmqeqal", model.tags().get("hjnhgwydyynfsvk"));
        Assertions.assertEquals("fcsserxhtvsox", model.extendedLocation().name());
        Assertions.assertEquals("lwntsjgqrs", model.extendedLocation().type());
        Assertions.assertEquals(994604483308032293L, model.collectionInterval());
        Assertions.assertEquals("ggagfln", model.enabledMetrics().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ClusterMetricsConfigurationInner model =
            new ClusterMetricsConfigurationInner()
                .withLocation("hkpigqfusuckzmkw")
                .withTags(mapOf("hjnhgwydyynfsvk", "noxaxmqeqal", "ta", "gbv", "jcpeogkhnmg", "arfdlpukhpyrnei"))
                .withExtendedLocation(new ExtendedLocation().withName("fcsserxhtvsox").withType("lwntsjgqrs"))
                .withCollectionInterval(994604483308032293L)
                .withEnabledMetrics(Arrays.asList("ggagfln", "gm", "rwahzjmucftbyr"));
        model = BinaryData.fromObject(model).toObject(ClusterMetricsConfigurationInner.class);
        Assertions.assertEquals("hkpigqfusuckzmkw", model.location());
        Assertions.assertEquals("noxaxmqeqal", model.tags().get("hjnhgwydyynfsvk"));
        Assertions.assertEquals("fcsserxhtvsox", model.extendedLocation().name());
        Assertions.assertEquals("lwntsjgqrs", model.extendedLocation().type());
        Assertions.assertEquals(994604483308032293L, model.collectionInterval());
        Assertions.assertEquals("ggagfln", model.enabledMetrics().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
