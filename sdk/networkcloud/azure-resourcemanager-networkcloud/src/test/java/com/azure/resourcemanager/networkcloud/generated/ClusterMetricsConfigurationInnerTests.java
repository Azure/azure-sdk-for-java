// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.networkcloud.fluent.models.ClusterMetricsConfigurationInner;
import com.azure.resourcemanager.networkcloud.models.ExtendedLocation;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ClusterMetricsConfigurationInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ClusterMetricsConfigurationInner model = BinaryData.fromString(
            "{\"extendedLocation\":{\"name\":\"lpxuzzjgnrefq\",\"type\":\"hqo\"},\"properties\":{\"collectionInterval\":7381829670910914372,\"detailedStatus\":\"Processing\",\"detailedStatusMessage\":\"akydiwfbrkwpz\",\"disabledMetrics\":[\"vhcspodaqaxsip\",\"etgbebjfulb\"],\"enabledMetrics\":[\"chdlpnfpubn\",\"nbatzvi\"],\"provisioningState\":\"Canceled\"},\"location\":\"saaelca\",\"tags\":{\"plrvkmjcwmjvlg\":\"ju\",\"y\":\"ggcvk\",\"psfxsf\":\"izrzb\"},\"id\":\"ztlvtmvagbwidqlv\",\"name\":\"ukoveofi\",\"type\":\"rvjfnmjmvlw\"}")
            .toObject(ClusterMetricsConfigurationInner.class);
        Assertions.assertEquals("saaelca", model.location());
        Assertions.assertEquals("ju", model.tags().get("plrvkmjcwmjvlg"));
        Assertions.assertEquals("lpxuzzjgnrefq", model.extendedLocation().name());
        Assertions.assertEquals("hqo", model.extendedLocation().type());
        Assertions.assertEquals(7381829670910914372L, model.collectionInterval());
        Assertions.assertEquals("chdlpnfpubn", model.enabledMetrics().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ClusterMetricsConfigurationInner model = new ClusterMetricsConfigurationInner().withLocation("saaelca")
            .withTags(mapOf("plrvkmjcwmjvlg", "ju", "y", "ggcvk", "psfxsf", "izrzb"))
            .withExtendedLocation(new ExtendedLocation().withName("lpxuzzjgnrefq").withType("hqo"))
            .withCollectionInterval(7381829670910914372L)
            .withEnabledMetrics(Arrays.asList("chdlpnfpubn", "nbatzvi"));
        model = BinaryData.fromObject(model).toObject(ClusterMetricsConfigurationInner.class);
        Assertions.assertEquals("saaelca", model.location());
        Assertions.assertEquals("ju", model.tags().get("plrvkmjcwmjvlg"));
        Assertions.assertEquals("lpxuzzjgnrefq", model.extendedLocation().name());
        Assertions.assertEquals("hqo", model.extendedLocation().type());
        Assertions.assertEquals(7381829670910914372L, model.collectionInterval());
        Assertions.assertEquals("chdlpnfpubn", model.enabledMetrics().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
