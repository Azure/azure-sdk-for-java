// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.networkcloud.NetworkCloudManager;
import com.azure.resourcemanager.networkcloud.models.CloudServicesNetwork;
import com.azure.resourcemanager.networkcloud.models.CloudServicesNetworkEnableDefaultEgressEndpoints;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class CloudServicesNetworksListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"extendedLocation\":{\"name\":\"pydjfboc\",\"type\":\"v\"},\"properties\":{\"additionalEgressEndpoints\":[{\"category\":\"rtywi\",\"endpoints\":[{\"domainName\":\"mhlaku\"},{\"domainName\":\"lgbhgauacdi\"},{\"domainName\":\"mxu\"},{\"domainName\":\"rs\"}]},{\"category\":\"yjq\",\"endpoints\":[{\"domainName\":\"kfnozoeoqbvj\"},{\"domainName\":\"vefgwbmqjchntas\"},{\"domainName\":\"ay\"},{\"domainName\":\"xbulpzealbmqkyo\"}]},{\"category\":\"wyvf\",\"endpoints\":[{\"domainName\":\"btsuahxs\"},{\"domainName\":\"xjcmmzrrsc\"},{\"domainName\":\"biwsd\"}]},{\"category\":\"npxqwodi\",\"endpoints\":[{\"domainName\":\"jxcjrmmuabwib\"},{\"domainName\":\"jogjonmc\"},{\"domainName\":\"e\"},{\"domainName\":\"oyzbamwineofvf\"}]}],\"associatedResourceIds\":[\"pol\",\"t\",\"evboclzhzjknyuxg\"],\"clusterId\":\"txpnrupza\",\"detailedStatus\":\"Error\",\"detailedStatusMessage\":\"i\",\"enableDefaultEgressEndpoints\":\"False\",\"enabledEgressEndpoints\":[{\"category\":\"ids\",\"endpoints\":[{\"domainName\":\"skbruffgllukkut\"},{\"domainName\":\"lxhrp\"}]},{\"category\":\"hvmblcouqehbhbc\",\"endpoints\":[{\"domainName\":\"ziryrandoy\"},{\"domainName\":\"mbltoo\"},{\"domainName\":\"mkfqlwxldy\"}]}],\"hybridAksClustersAssociatedIds\":[\"sy\",\"aolnjpnnbmjk\"],\"interfaceName\":\"bjgsjjxxahmrn\",\"provisioningState\":\"Canceled\",\"virtualMachinesAssociatedIds\":[\"egxyivpinbmhwbji\",\"kgqxn\",\"mbk\"]},\"location\":\"njaujvaan\",\"tags\":{\"wxwfekaumrr\":\"iycwkdta\",\"atbnxwbj\":\"mbzmqk\",\"dgo\":\"idbirkfpkso\",\"zkye\":\"ewijymrhbguz\"},\"id\":\"nfnzhhh\",\"name\":\"o\",\"type\":\"mffjkutycyarn\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        NetworkCloudManager manager = NetworkCloudManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<CloudServicesNetwork> response
            = manager.cloudServicesNetworks().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("njaujvaan", response.iterator().next().location());
        Assertions.assertEquals("iycwkdta", response.iterator().next().tags().get("wxwfekaumrr"));
        Assertions.assertEquals("pydjfboc", response.iterator().next().extendedLocation().name());
        Assertions.assertEquals("v", response.iterator().next().extendedLocation().type());
        Assertions.assertEquals("rtywi", response.iterator().next().additionalEgressEndpoints().get(0).category());
        Assertions.assertEquals("mhlaku",
            response.iterator().next().additionalEgressEndpoints().get(0).endpoints().get(0).domainName());
        Assertions.assertEquals(CloudServicesNetworkEnableDefaultEgressEndpoints.FALSE,
            response.iterator().next().enableDefaultEgressEndpoints());
    }
}
