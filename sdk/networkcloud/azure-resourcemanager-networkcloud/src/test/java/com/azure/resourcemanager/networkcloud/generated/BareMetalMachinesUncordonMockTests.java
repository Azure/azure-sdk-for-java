// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.networkcloud.NetworkCloudManager;
import com.azure.resourcemanager.networkcloud.models.OperationStatusResult;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class BareMetalMachinesUncordonMockTests {
    @Test
    public void testUncordon() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"id\":\"afygzmxieqvds\",\"resourceId\":\"klixqcahyhxaly\",\"name\":\"awoijp\",\"status\":\"dtblxpk\",\"percentComplete\":5.4994345,\"startTime\":\"2021-03-11T11:00:19Z\",\"endTime\":\"2021-02-25T09:30:02Z\",\"operations\":[{\"id\":\"kincnremeh\",\"resourceId\":\"izhceumoqodkadp\",\"name\":\"ibngqladyw\",\"status\":\"xwhydtluvv\",\"percentComplete\":83.74028,\"startTime\":\"2021-06-14T02:58:28Z\",\"endTime\":\"2021-10-16T20:00:10Z\",\"operations\":[{\"id\":\"mlowuowhl\",\"resourceId\":\"nwyrmouv\",\"name\":\"gmokzkltrfowt\",\"status\":\"vrfmvlihcvjd\",\"percentComplete\":63.08274,\"startTime\":\"2021-07-16T20:14:45Z\",\"endTime\":\"2021-07-22T00:47:16Z\",\"operations\":[{\"status\":\"tuk\"},{\"status\":\"hdxlw\"}]},{\"id\":\"bfqz\",\"resourceId\":\"fnjyix\",\"name\":\"fratqxmbjroumzz\",\"status\":\"valqjrhuzgfxo\",\"percentComplete\":55.975597,\"startTime\":\"2021-03-25T12:43:55Z\",\"endTime\":\"2021-08-03T10:15:28Z\",\"operations\":[{\"status\":\"wpvtiotzbpdbol\"},{\"status\":\"gryfqiuasig\"}]},{\"id\":\"socnequygdjboq\",\"resourceId\":\"mtqjkqevadrmm\",\"name\":\"uawvcmjzk\",\"status\":\"iidisczskoswoqiq\",\"percentComplete\":24.43844,\"startTime\":\"2021-11-05T09:28:24Z\",\"endTime\":\"2021-03-12T04:19:04Z\",\"operations\":[{\"status\":\"rrcoi\"},{\"status\":\"sbamnppcc\"},{\"status\":\"kuztdsbezaxyfu\"},{\"status\":\"zxuizhyhnepkpe\"}]},{\"id\":\"rx\",\"resourceId\":\"ubxdukecpxdazvdh\",\"name\":\"mmkoszudb\",\"status\":\"nsntrpcaqki\",\"percentComplete\":10.727042,\"startTime\":\"2021-01-28T07:10:21Z\",\"endTime\":\"2021-07-02T06:02:13Z\",\"operations\":[{\"status\":\"lbnld\"}]}]},{\"id\":\"h\",\"resourceId\":\"zyqu\",\"name\":\"sqxutr\",\"status\":\"brruyuuatv\",\"percentComplete\":54.63494,\"startTime\":\"2021-08-31T05:43:57Z\",\"endTime\":\"2021-01-22T06:54:58Z\",\"operations\":[{\"id\":\"x\",\"resourceId\":\"nwtpcpahprz\",\"name\":\"xhmtfhocnxzc\",\"status\":\"jhngxnoq\",\"percentComplete\":81.584305,\"startTime\":\"2021-08-24T09:16:57Z\",\"endTime\":\"2021-08-17T14:16:34Z\",\"operations\":[{\"status\":\"vhdl\"},{\"status\":\"ydidwhepfwwtjf\"},{\"status\":\"o\"}]}]}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        NetworkCloudManager manager =
            NetworkCloudManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        OperationStatusResult response =
            manager.bareMetalMachines().uncordon("h", "dkygywezski", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("afygzmxieqvds", response.id());
        Assertions.assertEquals("awoijp", response.name());
        Assertions.assertEquals("dtblxpk", response.status());
        Assertions.assertEquals(5.4994345F, response.percentComplete());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-11T11:00:19Z"), response.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-25T09:30:02Z"), response.endTime());
        Assertions.assertEquals("kincnremeh", response.operations().get(0).id());
        Assertions.assertEquals("ibngqladyw", response.operations().get(0).name());
        Assertions.assertEquals("xwhydtluvv", response.operations().get(0).status());
        Assertions.assertEquals(83.74028F, response.operations().get(0).percentComplete());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-14T02:58:28Z"), response.operations().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-16T20:00:10Z"), response.operations().get(0).endTime());
        Assertions.assertEquals("mlowuowhl", response.operations().get(0).operations().get(0).id());
        Assertions.assertEquals("gmokzkltrfowt", response.operations().get(0).operations().get(0).name());
        Assertions.assertEquals("vrfmvlihcvjd", response.operations().get(0).operations().get(0).status());
        Assertions.assertEquals(63.08274F, response.operations().get(0).operations().get(0).percentComplete());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-07-16T20:14:45Z"),
                response.operations().get(0).operations().get(0).startTime());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-07-22T00:47:16Z"),
                response.operations().get(0).operations().get(0).endTime());
        Assertions.assertEquals("tuk", response.operations().get(0).operations().get(0).operations().get(0).status());
    }
}
