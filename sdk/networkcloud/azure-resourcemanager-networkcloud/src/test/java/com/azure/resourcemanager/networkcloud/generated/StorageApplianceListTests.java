// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.networkcloud.fluent.models.StorageApplianceInner;
import com.azure.resourcemanager.networkcloud.models.ExtendedLocation;
import com.azure.resourcemanager.networkcloud.models.StorageApplianceList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class StorageApplianceListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        StorageApplianceList model =
            BinaryData
                .fromString(
                    "{\"nextLink\":\"iml\",\"value\":[{\"extendedLocation\":{\"name\":\"jxkcgxxlxsff\",\"type\":\"cvizqzdwlvw\"},\"properties\":{\"capacity\":7995359679400580024,\"capacityUsed\":4149594913386983887,\"clusterId\":\"bkjubdyhgkfmins\",\"detailedStatus\":\"Available\",\"detailedStatusMessage\":\"fttsttk\",\"managementIpv4Address\":\"ahbqactxtgzuk\",\"provisioningState\":\"Canceled\",\"rackId\":\"mmqtgqqqxhr\",\"rackSlot\":3642932980642992654,\"remoteVendorManagementFeature\":\"Supported\",\"remoteVendorManagementStatus\":\"Enabled\",\"serialNumber\":\"uisavokq\",\"storageApplianceSkuId\":\"zfvazi\"},\"location\":\"l\",\"tags\":{\"katnwxyi\":\"ttbaj\",\"igovi\":\"pidkqqfkuvscxkdm\"},\"id\":\"rxkpmloazuruoc\",\"name\":\"goorbteo\",\"type\":\"bfhjxakvvjgsl\"},{\"extendedLocation\":{\"name\":\"r\",\"type\":\"il\"},\"properties\":{\"capacity\":4699671859850911433,\"capacityUsed\":5269658629842403913,\"clusterId\":\"xnyed\",\"detailedStatus\":\"Available\",\"detailedStatusMessage\":\"vudtjuewbcihx\",\"managementIpv4Address\":\"whcjyxcc\",\"provisioningState\":\"Provisioning\",\"rackId\":\"payakkud\",\"rackSlot\":1791393814695153018,\"remoteVendorManagementFeature\":\"Supported\",\"remoteVendorManagementStatus\":\"Unsupported\",\"serialNumber\":\"lma\",\"storageApplianceSkuId\":\"stcyohpfkyrkdbd\"},\"location\":\"ogsjkmnwqjno\",\"tags\":{\"egfnmntfpmvmemfn\":\"yhddvia\",\"lchpodbzevwrdn\":\"zdwvvbalxl\"},\"id\":\"fukuvsjcswsmystu\",\"name\":\"uqypfcvle\",\"type\":\"chpqbmfpjba\"},{\"extendedLocation\":{\"name\":\"widf\",\"type\":\"xsspuunnoxyhk\"},\"properties\":{\"capacity\":8055152895694004280,\"capacityUsed\":8879508928062968266,\"clusterId\":\"pfhoqcaaewdao\",\"detailedStatus\":\"Provisioning\",\"detailedStatusMessage\":\"l\",\"managementIpv4Address\":\"x\",\"provisioningState\":\"Succeeded\",\"rackId\":\"brm\",\"rackSlot\":5897306141430880557,\"remoteVendorManagementFeature\":\"Unsupported\",\"remoteVendorManagementStatus\":\"Unsupported\",\"serialNumber\":\"ykzkdncjdxo\",\"storageApplianceSkuId\":\"bzo\"},\"location\":\"culapzwyrpgogtq\",\"tags\":{\"lbfu\":\"n\",\"hvfcibyfmow\":\"jlyjtlvofq\"},\"id\":\"xrkjpvdw\",\"name\":\"fzwiivwzjbhyz\",\"type\":\"xjrk\"}]}")
                .toObject(StorageApplianceList.class);
        Assertions.assertEquals("iml", model.nextLink());
        Assertions.assertEquals("l", model.value().get(0).location());
        Assertions.assertEquals("ttbaj", model.value().get(0).tags().get("katnwxyi"));
        Assertions.assertEquals("jxkcgxxlxsff", model.value().get(0).extendedLocation().name());
        Assertions.assertEquals("cvizqzdwlvw", model.value().get(0).extendedLocation().type());
        Assertions.assertEquals("mmqtgqqqxhr", model.value().get(0).rackId());
        Assertions.assertEquals(3642932980642992654L, model.value().get(0).rackSlot());
        Assertions.assertEquals("uisavokq", model.value().get(0).serialNumber());
        Assertions.assertEquals("zfvazi", model.value().get(0).storageApplianceSkuId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        StorageApplianceList model =
            new StorageApplianceList()
                .withNextLink("iml")
                .withValue(
                    Arrays
                        .asList(
                            new StorageApplianceInner()
                                .withLocation("l")
                                .withTags(mapOf("katnwxyi", "ttbaj", "igovi", "pidkqqfkuvscxkdm"))
                                .withExtendedLocation(
                                    new ExtendedLocation().withName("jxkcgxxlxsff").withType("cvizqzdwlvw"))
                                .withRackId("mmqtgqqqxhr")
                                .withRackSlot(3642932980642992654L)
                                .withSerialNumber("uisavokq")
                                .withStorageApplianceSkuId("zfvazi"),
                            new StorageApplianceInner()
                                .withLocation("ogsjkmnwqjno")
                                .withTags(mapOf("egfnmntfpmvmemfn", "yhddvia", "lchpodbzevwrdn", "zdwvvbalxl"))
                                .withExtendedLocation(new ExtendedLocation().withName("r").withType("il"))
                                .withRackId("payakkud")
                                .withRackSlot(1791393814695153018L)
                                .withSerialNumber("lma")
                                .withStorageApplianceSkuId("stcyohpfkyrkdbd"),
                            new StorageApplianceInner()
                                .withLocation("culapzwyrpgogtq")
                                .withTags(mapOf("lbfu", "n", "hvfcibyfmow", "jlyjtlvofq"))
                                .withExtendedLocation(new ExtendedLocation().withName("widf").withType("xsspuunnoxyhk"))
                                .withRackId("brm")
                                .withRackSlot(5897306141430880557L)
                                .withSerialNumber("ykzkdncjdxo")
                                .withStorageApplianceSkuId("bzo")));
        model = BinaryData.fromObject(model).toObject(StorageApplianceList.class);
        Assertions.assertEquals("iml", model.nextLink());
        Assertions.assertEquals("l", model.value().get(0).location());
        Assertions.assertEquals("ttbaj", model.value().get(0).tags().get("katnwxyi"));
        Assertions.assertEquals("jxkcgxxlxsff", model.value().get(0).extendedLocation().name());
        Assertions.assertEquals("cvizqzdwlvw", model.value().get(0).extendedLocation().type());
        Assertions.assertEquals("mmqtgqqqxhr", model.value().get(0).rackId());
        Assertions.assertEquals(3642932980642992654L, model.value().get(0).rackSlot());
        Assertions.assertEquals("uisavokq", model.value().get(0).serialNumber());
        Assertions.assertEquals("zfvazi", model.value().get(0).storageApplianceSkuId());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
