// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.networkcloud.fluent.models.L2NetworkInner;
import com.azure.resourcemanager.networkcloud.models.ExtendedLocation;
import com.azure.resourcemanager.networkcloud.models.HybridAksPluginType;
import com.azure.resourcemanager.networkcloud.models.L2NetworkList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class L2NetworkListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        L2NetworkList model =
            BinaryData
                .fromString(
                    "{\"nextLink\":\"xzxcl\",\"value\":[{\"extendedLocation\":{\"name\":\"hhqzonosgg\",\"type\":\"hcohfwdsjnk\"},\"properties\":{\"associatedResourceIds\":[\"utiiswacf\",\"gdkz\",\"ewkfvhqcrai\"],\"clusterId\":\"pnppfuf\",\"detailedStatus\":\"Available\",\"detailedStatusMessage\":\"mh\",\"hybridAksClustersAssociatedIds\":[\"yjrxsagafcnih\",\"wqapnedgfbcvk\",\"vq\",\"pkeqdcvdrhvoo\"],\"hybridAksPluginType\":\"OSDevice\",\"interfaceName\":\"bobzdopcjwvnhd\",\"l2IsolationDomainId\":\"d\",\"provisioningState\":\"Canceled\",\"virtualMachinesAssociatedIds\":[\"xrslpm\",\"twuoegrpkhjwni\",\"qsluicp\",\"ggkzzlvmbmpa\"]},\"location\":\"odfvuefywsbp\",\"tags\":{\"wiyzvqtmnubexkp\":\"wyhrfouyftaakc\",\"mquxvypo\":\"ksmond\"},\"id\":\"gkopkwhojvpajqgx\",\"name\":\"smocmbq\",\"type\":\"qvmkcxo\"},{\"extendedLocation\":{\"name\":\"apvhelxprgly\",\"type\":\"tddckcb\"},\"properties\":{\"associatedResourceIds\":[\"jrjxgciqibrhosx\",\"dqrhzoymib\",\"rq\",\"ibahwflus\"],\"clusterId\":\"tmhrkwofyyvoqacp\",\"detailedStatus\":\"Available\",\"detailedStatusMessage\":\"btgiwbwoenwas\",\"hybridAksClustersAssociatedIds\":[\"dtkcnqxwbpokulp\",\"ujw\"],\"hybridAksPluginType\":\"SRIOV\",\"interfaceName\":\"pqiiobyuqe\",\"l2IsolationDomainId\":\"pqlpq\",\"provisioningState\":\"Failed\",\"virtualMachinesAssociatedIds\":[\"qgbdbuta\",\"vfbtkuwh\",\"mhykojoxafnndl\",\"ichkoymkcdyhb\"]},\"location\":\"kpw\",\"tags\":{\"ovvqfovljxywsu\":\"q\",\"aeneqnzarrwl\":\"syrsndsytgadgvra\",\"jfqka\":\"uu\"},\"id\":\"e\",\"name\":\"iipfpubj\",\"type\":\"bwwift\"},{\"extendedLocation\":{\"name\":\"hqkvpuvksgplsak\",\"type\":\"ynfs\"},\"properties\":{\"associatedResourceIds\":[\"jphuopxodlqi\",\"ntorzihleosjswsr\",\"slyzrpzbchckqq\"],\"clusterId\":\"ioxiysuiizyn\",\"detailedStatus\":\"Available\",\"detailedStatusMessage\":\"atrwyhqmibzyh\",\"hybridAksClustersAssociatedIds\":[\"smypyynpc\",\"pumnz\",\"mwzn\"],\"hybridAksPluginType\":\"OSDevice\",\"interfaceName\":\"knso\",\"l2IsolationDomainId\":\"gj\",\"provisioningState\":\"Failed\",\"virtualMachinesAssociatedIds\":[\"tlwwrlk\",\"m\",\"ncvokotllxdyhg\"]},\"location\":\"ocogj\",\"tags\":{\"oocrkvcikhnv\":\"tbnnha\",\"gxk\":\"amqgxqquezikyw\"},\"id\":\"lla\",\"name\":\"melwuipiccjz\",\"type\":\"z\"},{\"extendedLocation\":{\"name\":\"v\",\"type\":\"vvcnayr\"},\"properties\":{\"associatedResourceIds\":[\"nxxmueedndrdv\",\"tkwqqtchealm\",\"mtdaa\"],\"clusterId\":\"dvwvgpio\",\"detailedStatus\":\"Error\",\"detailedStatusMessage\":\"rtfudxepxg\",\"hybridAksClustersAssociatedIds\":[\"gvr\",\"mnpkukghimdblxg\",\"imfnjhfjx\"],\"hybridAksPluginType\":\"SRIOV\",\"interfaceName\":\"kkfoqr\",\"l2IsolationDomainId\":\"yfkzik\",\"provisioningState\":\"Failed\",\"virtualMachinesAssociatedIds\":[\"eaivxwczel\"]},\"location\":\"irels\",\"tags\":{\"ddxbjhwuaanoz\":\"enwabfatk\",\"jrvxaglrv\":\"osphyoul\"},\"id\":\"mjwosytx\",\"name\":\"tcs\",\"type\":\"fcktqumiekke\"}]}")
                .toObject(L2NetworkList.class);
        Assertions.assertEquals("xzxcl", model.nextLink());
        Assertions.assertEquals("odfvuefywsbp", model.value().get(0).location());
        Assertions.assertEquals("wyhrfouyftaakc", model.value().get(0).tags().get("wiyzvqtmnubexkp"));
        Assertions.assertEquals("hhqzonosgg", model.value().get(0).extendedLocation().name());
        Assertions.assertEquals("hcohfwdsjnk", model.value().get(0).extendedLocation().type());
        Assertions.assertEquals(HybridAksPluginType.OSDEVICE, model.value().get(0).hybridAksPluginType());
        Assertions.assertEquals("bobzdopcjwvnhd", model.value().get(0).interfaceName());
        Assertions.assertEquals("d", model.value().get(0).l2IsolationDomainId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        L2NetworkList model =
            new L2NetworkList()
                .withNextLink("xzxcl")
                .withValue(
                    Arrays
                        .asList(
                            new L2NetworkInner()
                                .withLocation("odfvuefywsbp")
                                .withTags(mapOf("wiyzvqtmnubexkp", "wyhrfouyftaakc", "mquxvypo", "ksmond"))
                                .withExtendedLocation(
                                    new ExtendedLocation().withName("hhqzonosgg").withType("hcohfwdsjnk"))
                                .withHybridAksPluginType(HybridAksPluginType.OSDEVICE)
                                .withInterfaceName("bobzdopcjwvnhd")
                                .withL2IsolationDomainId("d"),
                            new L2NetworkInner()
                                .withLocation("kpw")
                                .withTags(
                                    mapOf("ovvqfovljxywsu", "q", "aeneqnzarrwl", "syrsndsytgadgvra", "jfqka", "uu"))
                                .withExtendedLocation(
                                    new ExtendedLocation().withName("apvhelxprgly").withType("tddckcb"))
                                .withHybridAksPluginType(HybridAksPluginType.SRIOV)
                                .withInterfaceName("pqiiobyuqe")
                                .withL2IsolationDomainId("pqlpq"),
                            new L2NetworkInner()
                                .withLocation("ocogj")
                                .withTags(mapOf("oocrkvcikhnv", "tbnnha", "gxk", "amqgxqquezikyw"))
                                .withExtendedLocation(
                                    new ExtendedLocation().withName("hqkvpuvksgplsak").withType("ynfs"))
                                .withHybridAksPluginType(HybridAksPluginType.OSDEVICE)
                                .withInterfaceName("knso")
                                .withL2IsolationDomainId("gj"),
                            new L2NetworkInner()
                                .withLocation("irels")
                                .withTags(mapOf("ddxbjhwuaanoz", "enwabfatk", "jrvxaglrv", "osphyoul"))
                                .withExtendedLocation(new ExtendedLocation().withName("v").withType("vvcnayr"))
                                .withHybridAksPluginType(HybridAksPluginType.SRIOV)
                                .withInterfaceName("kkfoqr")
                                .withL2IsolationDomainId("yfkzik")));
        model = BinaryData.fromObject(model).toObject(L2NetworkList.class);
        Assertions.assertEquals("xzxcl", model.nextLink());
        Assertions.assertEquals("odfvuefywsbp", model.value().get(0).location());
        Assertions.assertEquals("wyhrfouyftaakc", model.value().get(0).tags().get("wiyzvqtmnubexkp"));
        Assertions.assertEquals("hhqzonosgg", model.value().get(0).extendedLocation().name());
        Assertions.assertEquals("hcohfwdsjnk", model.value().get(0).extendedLocation().type());
        Assertions.assertEquals(HybridAksPluginType.OSDEVICE, model.value().get(0).hybridAksPluginType());
        Assertions.assertEquals("bobzdopcjwvnhd", model.value().get(0).interfaceName());
        Assertions.assertEquals("d", model.value().get(0).l2IsolationDomainId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
