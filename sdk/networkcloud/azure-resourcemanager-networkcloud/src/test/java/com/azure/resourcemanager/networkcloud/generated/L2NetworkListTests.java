// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.networkcloud.fluent.models.L2NetworkInner;
import com.azure.resourcemanager.networkcloud.models.ExtendedLocation;
import com.azure.resourcemanager.networkcloud.models.HybridAksPluginType;
import com.azure.resourcemanager.networkcloud.models.L2NetworkList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class L2NetworkListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        L2NetworkList model = BinaryData.fromString(
            "{\"nextLink\":\"hewpusdsttwv\",\"value\":[{\"extendedLocation\":{\"name\":\"bbejdcngqqm\",\"type\":\"akufgmjz\"},\"properties\":{\"associatedResourceIds\":[\"dgrtwaenuuzkopbm\",\"nrfdw\"],\"clusterId\":\"uhhziuiefozbhdm\",\"detailedStatus\":\"Provisioning\",\"detailedStatusMessage\":\"zqhof\",\"hybridAksClustersAssociatedIds\":[\"ae\",\"u\",\"ah\",\"icslfaoq\"],\"hybridAksPluginType\":\"SRIOV\",\"interfaceName\":\"ylhalnswhcc\",\"l2IsolationDomainId\":\"ph\",\"provisioningState\":\"Canceled\",\"virtualMachinesAssociatedIds\":[\"itqscywuggwoluhc\",\"bwemhairs\",\"rgzdwmsweyp\",\"w\"]},\"location\":\"ggicccnxqhue\",\"tags\":{\"ncsdtclusiyp\":\"ttlstvlzywemhz\"},\"id\":\"sfgytguslfead\",\"name\":\"ygqukyhejh\",\"type\":\"isxgfp\"},{\"extendedLocation\":{\"name\":\"lolp\",\"type\":\"vk\"},\"properties\":{\"associatedResourceIds\":[\"qvujzraehtwdwrf\",\"swibyr\",\"dl\",\"h\"],\"clusterId\":\"fwpracstwi\",\"detailedStatus\":\"Available\",\"detailedStatusMessage\":\"evxccedcp\",\"hybridAksClustersAssociatedIds\":[\"yodnwzxltj\",\"vnhltiugcx\",\"avvwxqi\"],\"hybridAksPluginType\":\"OSDevice\",\"interfaceName\":\"nyowxwlmdjrkvfg\",\"l2IsolationDomainId\":\"vfvpdbodaciz\",\"provisioningState\":\"Succeeded\",\"virtualMachinesAssociatedIds\":[\"krribdeibqi\"]},\"location\":\"kghv\",\"tags\":{\"efajpj\":\"zwmk\",\"yhgbijtjivfx\":\"rwkq\",\"stawfsdjpvkv\":\"sjabibs\"},\"id\":\"bjxbkzbzk\",\"name\":\"vncjabudurgk\",\"type\":\"kmokz\"},{\"extendedLocation\":{\"name\":\"jjklff\",\"type\":\"mouwqlgzrfzeey\"},\"properties\":{\"associatedResourceIds\":[\"zi\",\"ayuhqlbjbsy\",\"bqwrvtldgm\"],\"clusterId\":\"gvmpipaslthaqfx\",\"detailedStatus\":\"Error\",\"detailedStatusMessage\":\"u\",\"hybridAksClustersAssociatedIds\":[\"dsrezpdrhneuyow\",\"kdw\"],\"hybridAksPluginType\":\"OSDevice\",\"interfaceName\":\"ib\",\"l2IsolationDomainId\":\"rcgp\",\"provisioningState\":\"Failed\",\"virtualMachinesAssociatedIds\":[\"mejzanlfzxia\",\"rmbzo\"]},\"location\":\"kixrj\",\"tags\":{\"frl\":\"rgz\",\"jylwbtlhflsj\":\"zszrnwoiindfpw\"},\"id\":\"dhszfjv\",\"name\":\"bgofeljag\",\"type\":\"qmqhldvriii\"}]}")
            .toObject(L2NetworkList.class);
        Assertions.assertEquals("hewpusdsttwv", model.nextLink());
        Assertions.assertEquals("ggicccnxqhue", model.value().get(0).location());
        Assertions.assertEquals("ttlstvlzywemhz", model.value().get(0).tags().get("ncsdtclusiyp"));
        Assertions.assertEquals("bbejdcngqqm", model.value().get(0).extendedLocation().name());
        Assertions.assertEquals("akufgmjz", model.value().get(0).extendedLocation().type());
        Assertions.assertEquals(HybridAksPluginType.SRIOV, model.value().get(0).hybridAksPluginType());
        Assertions.assertEquals("ylhalnswhcc", model.value().get(0).interfaceName());
        Assertions.assertEquals("ph", model.value().get(0).l2IsolationDomainId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        L2NetworkList model
            = new L2NetworkList().withNextLink("hewpusdsttwv")
                .withValue(
                    Arrays
                        .asList(
                            new L2NetworkInner().withLocation("ggicccnxqhue")
                                .withTags(mapOf("ncsdtclusiyp", "ttlstvlzywemhz"))
                                .withExtendedLocation(
                                    new ExtendedLocation().withName("bbejdcngqqm").withType("akufgmjz"))
                                .withHybridAksPluginType(HybridAksPluginType.SRIOV)
                                .withInterfaceName("ylhalnswhcc")
                                .withL2IsolationDomainId("ph"),
                            new L2NetworkInner().withLocation("kghv")
                                .withTags(mapOf("efajpj", "zwmk", "yhgbijtjivfx", "rwkq", "stawfsdjpvkv", "sjabibs"))
                                .withExtendedLocation(new ExtendedLocation().withName("lolp").withType("vk"))
                                .withHybridAksPluginType(HybridAksPluginType.OSDEVICE)
                                .withInterfaceName("nyowxwlmdjrkvfg")
                                .withL2IsolationDomainId("vfvpdbodaciz"),
                            new L2NetworkInner().withLocation("kixrj")
                                .withTags(mapOf("frl", "rgz", "jylwbtlhflsj", "zszrnwoiindfpw"))
                                .withExtendedLocation(
                                    new ExtendedLocation().withName("jjklff").withType("mouwqlgzrfzeey"))
                                .withHybridAksPluginType(HybridAksPluginType.OSDEVICE)
                                .withInterfaceName("ib")
                                .withL2IsolationDomainId("rcgp")));
        model = BinaryData.fromObject(model).toObject(L2NetworkList.class);
        Assertions.assertEquals("hewpusdsttwv", model.nextLink());
        Assertions.assertEquals("ggicccnxqhue", model.value().get(0).location());
        Assertions.assertEquals("ttlstvlzywemhz", model.value().get(0).tags().get("ncsdtclusiyp"));
        Assertions.assertEquals("bbejdcngqqm", model.value().get(0).extendedLocation().name());
        Assertions.assertEquals("akufgmjz", model.value().get(0).extendedLocation().type());
        Assertions.assertEquals(HybridAksPluginType.SRIOV, model.value().get(0).hybridAksPluginType());
        Assertions.assertEquals("ylhalnswhcc", model.value().get(0).interfaceName());
        Assertions.assertEquals("ph", model.value().get(0).l2IsolationDomainId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
