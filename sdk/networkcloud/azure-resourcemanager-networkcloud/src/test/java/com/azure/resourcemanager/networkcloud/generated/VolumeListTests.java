// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.networkcloud.fluent.models.VolumeInner;
import com.azure.resourcemanager.networkcloud.models.ExtendedLocation;
import com.azure.resourcemanager.networkcloud.models.VolumeList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class VolumeListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VolumeList model =
            BinaryData
                .fromString(
                    "{\"nextLink\":\"xasicddyvvjskg\",\"value\":[{\"extendedLocation\":{\"name\":\"cw\",\"type\":\"hpqgatjeaahhvj\"},\"properties\":{\"attachedTo\":[],\"detailedStatus\":\"Provisioning\",\"detailedStatusMessage\":\"zybbj\",\"provisioningState\":\"Provisioning\",\"serialNumber\":\"ksyxkyxvxevblbje\",\"sizeMiB\":4276098433975464246},\"location\":\"lageuaulxun\",\"tags\":{\"ppxynenls\":\"bn\",\"klnsrmffey\":\"xeizzg\"},\"id\":\"xcktpiymerteeamm\",\"name\":\"qiekkkzddrt\",\"type\":\"g\"},{\"extendedLocation\":{\"name\":\"ojbmxv\",\"type\":\"vrefdeesv\"},\"properties\":{\"attachedTo\":[],\"detailedStatus\":\"Provisioning\",\"detailedStatusMessage\":\"pxtxsuwp\",\"provisioningState\":\"Succeeded\",\"serialNumber\":\"wsawddjibabxvi\",\"sizeMiB\":2713805626921616669},\"location\":\"tzeexav\",\"tags\":{\"pqtgsfjac\":\"fglecdmdqbwp\",\"d\":\"slhhxudbxv\"},\"id\":\"tnsi\",\"name\":\"ud\",\"type\":\"z\"}]}")
                .toObject(VolumeList.class);
        Assertions.assertEquals("xasicddyvvjskg", model.nextLink());
        Assertions.assertEquals("lageuaulxun", model.value().get(0).location());
        Assertions.assertEquals("bn", model.value().get(0).tags().get("ppxynenls"));
        Assertions.assertEquals("cw", model.value().get(0).extendedLocation().name());
        Assertions.assertEquals("hpqgatjeaahhvj", model.value().get(0).extendedLocation().type());
        Assertions.assertEquals(4276098433975464246L, model.value().get(0).sizeMiB());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VolumeList model =
            new VolumeList()
                .withNextLink("xasicddyvvjskg")
                .withValue(
                    Arrays
                        .asList(
                            new VolumeInner()
                                .withLocation("lageuaulxun")
                                .withTags(mapOf("ppxynenls", "bn", "klnsrmffey", "xeizzg"))
                                .withExtendedLocation(new ExtendedLocation().withName("cw").withType("hpqgatjeaahhvj"))
                                .withSizeMiB(4276098433975464246L),
                            new VolumeInner()
                                .withLocation("tzeexav")
                                .withTags(mapOf("pqtgsfjac", "fglecdmdqbwp", "d", "slhhxudbxv"))
                                .withExtendedLocation(new ExtendedLocation().withName("ojbmxv").withType("vrefdeesv"))
                                .withSizeMiB(2713805626921616669L)));
        model = BinaryData.fromObject(model).toObject(VolumeList.class);
        Assertions.assertEquals("xasicddyvvjskg", model.nextLink());
        Assertions.assertEquals("lageuaulxun", model.value().get(0).location());
        Assertions.assertEquals("bn", model.value().get(0).tags().get("ppxynenls"));
        Assertions.assertEquals("cw", model.value().get(0).extendedLocation().name());
        Assertions.assertEquals("hpqgatjeaahhvj", model.value().get(0).extendedLocation().type());
        Assertions.assertEquals(4276098433975464246L, model.value().get(0).sizeMiB());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
