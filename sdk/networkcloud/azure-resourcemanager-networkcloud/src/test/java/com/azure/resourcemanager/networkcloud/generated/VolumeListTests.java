// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.networkcloud.fluent.models.VolumeInner;
import com.azure.resourcemanager.networkcloud.models.ExtendedLocation;
import com.azure.resourcemanager.networkcloud.models.VolumeList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class VolumeListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VolumeList model = BinaryData.fromString(
            "{\"nextLink\":\"zid\",\"value\":[{\"extendedLocation\":{\"name\":\"aabzmif\",\"type\":\"ygznmmaxrizk\"},\"properties\":{\"attachedTo\":[\"gopxlhslnelxie\",\"xynl\",\"xecwcro\"],\"detailedStatus\":\"Active\",\"detailedStatusMessage\":\"lhc\",\"provisioningState\":\"Failed\",\"serialNumber\":\"tifdwfmvi\",\"sizeMiB\":2572871112622021825},\"location\":\"jbt\",\"tags\":{\"fhonqjujeickpzvc\":\"raglk\"},\"id\":\"opmx\",\"name\":\"lnwcltyjed\",\"type\":\"xxmlfmkqscazua\"},{\"extendedLocation\":{\"name\":\"xtzx\",\"type\":\"uamwabzxrvxc\"},\"properties\":{\"attachedTo\":[\"sphaivmxyasflvg\",\"gzwywak\",\"ihknsmjbl\"],\"detailedStatus\":\"Error\",\"detailedStatusMessage\":\"lnymzotqy\",\"provisioningState\":\"Accepted\",\"serialNumber\":\"cbm\",\"sizeMiB\":2876121281979781425},\"location\":\"mv\",\"tags\":{\"nsup\":\"tayx\",\"oibgsxg\":\"ujlzqnhcvsqltn\",\"dbxiqx\":\"xfyqonmpqoxwdo\",\"htmwwinh\":\"iiqbi\"},\"id\":\"hfqpofv\",\"name\":\"bcblemb\",\"type\":\"kbwvqvxkdiv\"},{\"extendedLocation\":{\"name\":\"ihebwtsw\",\"type\":\"zuwfmdur\"},\"properties\":{\"attachedTo\":[\"gi\",\"vcjfelisdjubggb\"],\"detailedStatus\":\"Error\",\"detailedStatusMessage\":\"xkbsazgakgac\",\"provisioningState\":\"Provisioning\",\"serialNumber\":\"jdmspofapvuhryln\",\"sizeMiB\":5973350387675876264},\"location\":\"zgb\",\"tags\":{\"nlvxbcuii\":\"dmstk\"},\"id\":\"nktwfansnvpdibmi\",\"name\":\"ostbzbkiwb\",\"type\":\"qnyophzfyls\"},{\"extendedLocation\":{\"name\":\"crpfbcunez\",\"type\":\"cez\"},\"properties\":{\"attachedTo\":[\"w\",\"fwlwxjwetnps\",\"hclafzvaylptrs\"],\"detailedStatus\":\"Error\",\"detailedStatusMessage\":\"tcmwqkchc\",\"provisioningState\":\"Accepted\",\"serialNumber\":\"fewz\",\"sizeMiB\":2734356009177202328},\"location\":\"xfdeqvhpsyl\",\"tags\":{\"zjrgyww\":\"hkbffmbm\"},\"id\":\"gjxsnptfu\",\"name\":\"gicgaaoepttaq\",\"type\":\"tdewemxswvruu\"}]}")
            .toObject(VolumeList.class);
        Assertions.assertEquals("zid", model.nextLink());
        Assertions.assertEquals("jbt", model.value().get(0).location());
        Assertions.assertEquals("raglk", model.value().get(0).tags().get("fhonqjujeickpzvc"));
        Assertions.assertEquals("aabzmif", model.value().get(0).extendedLocation().name());
        Assertions.assertEquals("ygznmmaxrizk", model.value().get(0).extendedLocation().type());
        Assertions.assertEquals(2572871112622021825L, model.value().get(0).sizeMiB());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VolumeList model
            = new VolumeList().withNextLink("zid")
                .withValue(
                    Arrays
                        .asList(
                            new VolumeInner().withLocation("jbt")
                                .withTags(mapOf("fhonqjujeickpzvc", "raglk"))
                                .withExtendedLocation(
                                    new ExtendedLocation().withName("aabzmif").withType("ygznmmaxrizk"))
                                .withSizeMiB(2572871112622021825L),
                            new VolumeInner().withLocation("mv")
                                .withTags(mapOf("nsup", "tayx", "oibgsxg", "ujlzqnhcvsqltn", "dbxiqx", "xfyqonmpqoxwdo",
                                    "htmwwinh", "iiqbi"))
                                .withExtendedLocation(new ExtendedLocation().withName("xtzx").withType("uamwabzxrvxc"))
                                .withSizeMiB(2876121281979781425L),
                            new VolumeInner().withLocation("zgb")
                                .withTags(mapOf("nlvxbcuii", "dmstk"))
                                .withExtendedLocation(new ExtendedLocation().withName("ihebwtsw").withType("zuwfmdur"))
                                .withSizeMiB(5973350387675876264L),
                            new VolumeInner().withLocation("xfdeqvhpsyl")
                                .withTags(mapOf("zjrgyww", "hkbffmbm"))
                                .withExtendedLocation(new ExtendedLocation().withName("crpfbcunez").withType("cez"))
                                .withSizeMiB(2734356009177202328L)));
        model = BinaryData.fromObject(model).toObject(VolumeList.class);
        Assertions.assertEquals("zid", model.nextLink());
        Assertions.assertEquals("jbt", model.value().get(0).location());
        Assertions.assertEquals("raglk", model.value().get(0).tags().get("fhonqjujeickpzvc"));
        Assertions.assertEquals("aabzmif", model.value().get(0).extendedLocation().name());
        Assertions.assertEquals("ygznmmaxrizk", model.value().get(0).extendedLocation().type());
        Assertions.assertEquals(2572871112622021825L, model.value().get(0).sizeMiB());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
