// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.networkcloud.NetworkCloudManager;
import com.azure.resourcemanager.networkcloud.models.ExtendedLocation;
import com.azure.resourcemanager.networkcloud.models.HybridAksPluginType;
import com.azure.resourcemanager.networkcloud.models.L2Network;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class L2NetworksCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"extendedLocation\":{\"name\":\"ldrlefgnaavua\",\"type\":\"n\"},\"properties\":{\"associatedResourceIds\":[\"aou\",\"n\",\"dc\"],\"clusterId\":\"hspfefyihd\",\"detailedStatus\":\"Available\",\"detailedStatusMessage\":\"yldphm\",\"hybridAksClustersAssociatedIds\":[\"kcgsuthhl\",\"nmwynefxexl\",\"ciatxtjrrl\",\"mdskjhhxdlajfoxc\"],\"hybridAksPluginType\":\"OSDevice\",\"interfaceName\":\"slxlhu\",\"l2IsolationDomainId\":\"vkrmukmyjmkx\",\"provisioningState\":\"Succeeded\",\"virtualMachinesAssociatedIds\":[\"lojfkqidnqto\",\"xjhqxcsqhtkb\",\"nqlrng\"]},\"location\":\"mbiipsnawwlqk\",\"tags\":{\"xricctkwmuqq\":\"hhl\",\"rwvaexhdc\":\"ajxeiygle\",\"hdmljz\":\"rceqnkbrupob\"},\"id\":\"cvumepjpbi\",\"name\":\"nzpphepife\",\"type\":\"leqirccjclykcgxv\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        NetworkCloudManager manager = NetworkCloudManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        L2Network response = manager.l2Networks()
            .define("ilkfbnrqqxv")
            .withRegion("nkjjwgcwnphbkgf")
            .withExistingResourceGroup("mhmpty")
            .withExtendedLocation(new ExtendedLocation().withName("tpbnfnqtxjtoma").withType("swbnfddepldwqjns"))
            .withL2IsolationDomainId("fbfunun")
            .withTags(mapOf("cdf", "ogmhmjpj", "ev", "dqwty", "x", "wmseharxifvqn", "sidqpxlbtpakft", "mbpjptnvwjh"))
            .withHybridAksPluginType(HybridAksPluginType.DPDK)
            .withInterfaceName("ulubefgybp")
            .create();

        Assertions.assertEquals("mbiipsnawwlqk", response.location());
        Assertions.assertEquals("hhl", response.tags().get("xricctkwmuqq"));
        Assertions.assertEquals("ldrlefgnaavua", response.extendedLocation().name());
        Assertions.assertEquals("n", response.extendedLocation().type());
        Assertions.assertEquals(HybridAksPluginType.OSDEVICE, response.hybridAksPluginType());
        Assertions.assertEquals("slxlhu", response.interfaceName());
        Assertions.assertEquals("vkrmukmyjmkx", response.l2IsolationDomainId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
