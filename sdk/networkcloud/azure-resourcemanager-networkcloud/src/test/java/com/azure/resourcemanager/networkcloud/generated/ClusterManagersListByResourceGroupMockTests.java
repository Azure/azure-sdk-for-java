// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.networkcloud.NetworkCloudManager;
import com.azure.resourcemanager.networkcloud.models.ClusterManager;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ClusterManagersListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"properties\":{\"analyticsWorkspaceId\":\"ptjgwdt\",\"availabilityZones\":[\"ranblwphqlkccu\",\"gygqwah\",\"iul\",\"gniiprglvaw\"],\"clusterVersions\":[],\"detailedStatus\":\"ProvisioningFailed\",\"detailedStatusMessage\":\"ypivlsbb\",\"fabricControllerId\":\"pmcubkmifoxxkub\",\"managedResourceGroupConfiguration\":{\"location\":\"avp\",\"name\":\"brbqgvgovp\"},\"managerExtendedLocation\":{\"name\":\"ttefjoknssq\",\"type\":\"zqedikdfrdbi\"},\"provisioningState\":\"Canceled\",\"vmSize\":\"geihfql\"},\"location\":\"wfiwzcxmj\",\"tags\":{\"pgxh\":\"ephmgtvljvrcmyfq\",\"yaswlpaugmr\":\"pomyqwcabvnuile\",\"fkvcisi\":\"fjlrxwtoauk\",\"uivedwcgyeewxeiq\":\"moaedsxj\"},\"id\":\"psmgo\",\"name\":\"guamlj\",\"type\":\"l\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        NetworkCloudManager manager =
            NetworkCloudManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<ClusterManager> response =
            manager.clusterManagers().listByResourceGroup("e", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("wfiwzcxmj", response.iterator().next().location());
        Assertions.assertEquals("ephmgtvljvrcmyfq", response.iterator().next().tags().get("pgxh"));
        Assertions.assertEquals("ptjgwdt", response.iterator().next().analyticsWorkspaceId());
        Assertions.assertEquals("ranblwphqlkccu", response.iterator().next().availabilityZones().get(0));
        Assertions.assertEquals("pmcubkmifoxxkub", response.iterator().next().fabricControllerId());
        Assertions.assertEquals("avp", response.iterator().next().managedResourceGroupConfiguration().location());
        Assertions.assertEquals("brbqgvgovp", response.iterator().next().managedResourceGroupConfiguration().name());
        Assertions.assertEquals("geihfql", response.iterator().next().vmSize());
    }
}
