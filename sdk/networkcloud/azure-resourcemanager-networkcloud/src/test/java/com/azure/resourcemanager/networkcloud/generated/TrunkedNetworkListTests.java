// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.networkcloud.fluent.models.TrunkedNetworkInner;
import com.azure.resourcemanager.networkcloud.models.ExtendedLocation;
import com.azure.resourcemanager.networkcloud.models.HybridAksPluginType;
import com.azure.resourcemanager.networkcloud.models.TrunkedNetworkList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class TrunkedNetworkListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TrunkedNetworkList model = BinaryData.fromString(
            "{\"nextLink\":\"qwigpibudqwyxe\",\"value\":[{\"extendedLocation\":{\"name\":\"bpmzzn\",\"type\":\"tffyaqit\"},\"properties\":{\"associatedResourceIds\":[\"eioqaqhvse\",\"fuqyrxpdlcgqlsi\"],\"clusterId\":\"jqfrddgamquh\",\"detailedStatus\":\"Provisioning\",\"detailedStatusMessage\":\"sjuivfcdisyir\",\"hybridAksClustersAssociatedIds\":[\"hcz\",\"xrxzbujrtr\",\"qvwre\",\"khgn\"],\"hybridAksPluginType\":\"DPDK\",\"interfaceName\":\"nzlrpiqywncvjt\",\"isolationDomainIds\":[\"cof\"],\"provisioningState\":\"Failed\",\"virtualMachinesAssociatedIds\":[\"dhgbjkvre\",\"jeamurv\",\"mlovuanashcxl\"],\"vlans\":[8237777567310895411,2636756459622918306]},\"location\":\"kelvidizozsdb\",\"tags\":{\"n\":\"jmonfdgn\",\"keifzzhmkdasv\":\"ypuuwwltvuqjctze\"},\"id\":\"lyhb\",\"name\":\"cu\",\"type\":\"chxgs\"},{\"extendedLocation\":{\"name\":\"boldforobwj\",\"type\":\"vizbfhfo\"},\"properties\":{\"associatedResourceIds\":[\"cqpbtuo\",\"xesz\",\"bbelawumuaslzk\",\"rrwoycqucwyhahn\"],\"clusterId\":\"drkywuhps\",\"detailedStatus\":\"Error\",\"detailedStatusMessage\":\"rutlwexxwlalniex\",\"hybridAksClustersAssociatedIds\":[\"zpgepqty\",\"bwwpgdakchzy\"],\"hybridAksPluginType\":\"OSDevice\",\"interfaceName\":\"q\",\"isolationDomainIds\":[\"kcxk\",\"ibn\"],\"provisioningState\":\"Succeeded\",\"virtualMachinesAssociatedIds\":[\"xs\",\"qrntv\",\"wijpsttexoqqpwc\"],\"vlans\":[9080784931973400625,62183573876209376,4699628288110082515,1940530152318069855]},\"location\":\"wmqs\",\"tags\":{\"ctddun\":\"dqzh\",\"pchrqbn\":\"ndy\",\"gydcw\":\"jrcg\"},\"id\":\"oxjumvqqo\",\"name\":\"ihrraiouaub\",\"type\":\"jtlo\"},{\"extendedLocation\":{\"name\":\"xfuojrn\",\"type\":\"iflrzpasccbiu\"},\"properties\":{\"associatedResourceIds\":[\"dlyjdf\",\"wmkyoqufdvruzsl\",\"ojhp\"],\"clusterId\":\"fnmdxotn\",\"detailedStatus\":\"Available\",\"detailedStatusMessage\":\"ugeyzihgrkyuiza\",\"hybridAksClustersAssociatedIds\":[\"mfp\",\"hojeevy\"],\"hybridAksPluginType\":\"DPDK\",\"interfaceName\":\"gzfc\",\"isolationDomainIds\":[\"gomfgbeglq\",\"leohibetnluankr\",\"fxeeebtijvacvbm\"],\"provisioningState\":\"Accepted\",\"virtualMachinesAssociatedIds\":[\"xl\"],\"vlans\":[8990763059560550950,427219157067437416,3434804221994319117]},\"location\":\"veh\",\"tags\":{\"aoqltfaey\":\"yxoaf\",\"hriypoqeyhlqhy\":\"inmfgvxirp\"},\"id\":\"prlpy\",\"name\":\"nuciqdsmexiit\",\"type\":\"fuxtyasiibmiybnn\"},{\"extendedLocation\":{\"name\":\"stgnl\",\"type\":\"hnmgixhcm\"},\"properties\":{\"associatedResourceIds\":[\"qfoudorhcgyy\",\"rotwypundmbxhugc\",\"jkavl\"],\"clusterId\":\"rb\",\"detailedStatus\":\"Error\",\"detailedStatusMessage\":\"mdtzfjltfvnzc\",\"hybridAksClustersAssociatedIds\":[\"otp\"],\"hybridAksPluginType\":\"SRIOV\",\"interfaceName\":\"pbdbzqgqqi\",\"isolationDomainIds\":[\"dsvqwt\",\"mkyi\",\"cysihs\"],\"provisioningState\":\"Accepted\",\"virtualMachinesAssociatedIds\":[\"hohsd\",\"mcdzsufcohdxbz\",\"mcmuapc\",\"hdbevwqqxeyskon\"],\"vlans\":[328893230492625152,8634594792511917277,3261426872131970605,1183436721296067733]},\"location\":\"bowxe\",\"tags\":{\"efezrxcczurtlei\":\"ljmygvkzqkjjeokb\"},\"id\":\"q\",\"name\":\"bkwvzg\",\"type\":\"zvd\"}]}")
            .toObject(TrunkedNetworkList.class);
        Assertions.assertEquals("qwigpibudqwyxe", model.nextLink());
        Assertions.assertEquals("kelvidizozsdb", model.value().get(0).location());
        Assertions.assertEquals("jmonfdgn", model.value().get(0).tags().get("n"));
        Assertions.assertEquals("bpmzzn", model.value().get(0).extendedLocation().name());
        Assertions.assertEquals("tffyaqit", model.value().get(0).extendedLocation().type());
        Assertions.assertEquals(HybridAksPluginType.DPDK, model.value().get(0).hybridAksPluginType());
        Assertions.assertEquals("nzlrpiqywncvjt", model.value().get(0).interfaceName());
        Assertions.assertEquals("cof", model.value().get(0).isolationDomainIds().get(0));
        Assertions.assertEquals(8237777567310895411L, model.value().get(0).vlans().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TrunkedNetworkList model = new TrunkedNetworkList().withNextLink("qwigpibudqwyxe")
            .withValue(Arrays.asList(
                new TrunkedNetworkInner().withLocation("kelvidizozsdb")
                    .withTags(mapOf("n", "jmonfdgn", "keifzzhmkdasv", "ypuuwwltvuqjctze"))
                    .withExtendedLocation(new ExtendedLocation().withName("bpmzzn").withType("tffyaqit"))
                    .withHybridAksPluginType(HybridAksPluginType.DPDK)
                    .withInterfaceName("nzlrpiqywncvjt")
                    .withIsolationDomainIds(Arrays.asList("cof"))
                    .withVlans(Arrays.asList(8237777567310895411L, 2636756459622918306L)),
                new TrunkedNetworkInner().withLocation("wmqs")
                    .withTags(mapOf("ctddun", "dqzh", "pchrqbn", "ndy", "gydcw", "jrcg"))
                    .withExtendedLocation(new ExtendedLocation().withName("boldforobwj").withType("vizbfhfo"))
                    .withHybridAksPluginType(HybridAksPluginType.OSDEVICE)
                    .withInterfaceName("q")
                    .withIsolationDomainIds(Arrays.asList("kcxk", "ibn"))
                    .withVlans(Arrays.asList(9080784931973400625L, 62183573876209376L, 4699628288110082515L,
                        1940530152318069855L)),
                new TrunkedNetworkInner().withLocation("veh")
                    .withTags(mapOf("aoqltfaey", "yxoaf", "hriypoqeyhlqhy", "inmfgvxirp"))
                    .withExtendedLocation(new ExtendedLocation().withName("xfuojrn").withType("iflrzpasccbiu"))
                    .withHybridAksPluginType(HybridAksPluginType.DPDK)
                    .withInterfaceName("gzfc")
                    .withIsolationDomainIds(Arrays.asList("gomfgbeglq", "leohibetnluankr", "fxeeebtijvacvbm"))
                    .withVlans(Arrays.asList(8990763059560550950L, 427219157067437416L, 3434804221994319117L)),
                new TrunkedNetworkInner().withLocation("bowxe")
                    .withTags(mapOf("efezrxcczurtlei", "ljmygvkzqkjjeokb"))
                    .withExtendedLocation(new ExtendedLocation().withName("stgnl").withType("hnmgixhcm"))
                    .withHybridAksPluginType(HybridAksPluginType.SRIOV)
                    .withInterfaceName("pbdbzqgqqi")
                    .withIsolationDomainIds(Arrays.asList("dsvqwt", "mkyi", "cysihs"))
                    .withVlans(Arrays.asList(328893230492625152L, 8634594792511917277L, 3261426872131970605L,
                        1183436721296067733L))));
        model = BinaryData.fromObject(model).toObject(TrunkedNetworkList.class);
        Assertions.assertEquals("qwigpibudqwyxe", model.nextLink());
        Assertions.assertEquals("kelvidizozsdb", model.value().get(0).location());
        Assertions.assertEquals("jmonfdgn", model.value().get(0).tags().get("n"));
        Assertions.assertEquals("bpmzzn", model.value().get(0).extendedLocation().name());
        Assertions.assertEquals("tffyaqit", model.value().get(0).extendedLocation().type());
        Assertions.assertEquals(HybridAksPluginType.DPDK, model.value().get(0).hybridAksPluginType());
        Assertions.assertEquals("nzlrpiqywncvjt", model.value().get(0).interfaceName());
        Assertions.assertEquals("cof", model.value().get(0).isolationDomainIds().get(0));
        Assertions.assertEquals(8237777567310895411L, model.value().get(0).vlans().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
