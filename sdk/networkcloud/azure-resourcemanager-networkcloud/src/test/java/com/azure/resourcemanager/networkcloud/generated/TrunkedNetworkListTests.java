// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.networkcloud.fluent.models.TrunkedNetworkInner;
import com.azure.resourcemanager.networkcloud.models.ExtendedLocation;
import com.azure.resourcemanager.networkcloud.models.HybridAksPluginType;
import com.azure.resourcemanager.networkcloud.models.TrunkedNetworkList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class TrunkedNetworkListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TrunkedNetworkList model =
            BinaryData
                .fromString(
                    "{\"nextLink\":\"peewchpxlkt\",\"value\":[{\"extendedLocation\":{\"name\":\"ziycslevufuztck\",\"type\":\"yhjtqedcgzu\"},\"properties\":{\"clusterId\":\"mmrqz\",\"detailedStatus\":\"Provisioning\",\"detailedStatusMessage\":\"vpglydz\",\"hybridAksClustersAssociatedIds\":[],\"hybridAksPluginType\":\"SRIOV\",\"interfaceName\":\"eevt\",\"isolationDomainIds\":[],\"provisioningState\":\"Accepted\",\"virtualMachinesAssociatedIds\":[],\"vlans\":[]},\"location\":\"utnwytpzdmovzvf\",\"tags\":{\"f\":\"wzqa\",\"cokpv\":\"gzuriglaecxndt\"},\"id\":\"mlqtmldgxob\",\"name\":\"irclnpk\",\"type\":\"iayz\"},{\"extendedLocation\":{\"name\":\"iykhy\",\"type\":\"wf\"},\"properties\":{\"clusterId\":\"lboxqvkjl\",\"detailedStatus\":\"Error\",\"detailedStatusMessage\":\"mdy\",\"hybridAksClustersAssociatedIds\":[],\"hybridAksPluginType\":\"DPDK\",\"interfaceName\":\"igu\",\"isolationDomainIds\":[],\"provisioningState\":\"Provisioning\",\"virtualMachinesAssociatedIds\":[],\"vlans\":[]},\"location\":\"auzzptjazysd\",\"tags\":{\"qyuvvfonkp\":\"zwwva\",\"auy\":\"hqyikvy\"},\"id\":\"vluwmncsttij\",\"name\":\"y\",\"type\":\"vpo\"}]}")
                .toObject(TrunkedNetworkList.class);
        Assertions.assertEquals("peewchpxlkt", model.nextLink());
        Assertions.assertEquals("utnwytpzdmovzvf", model.value().get(0).location());
        Assertions.assertEquals("wzqa", model.value().get(0).tags().get("f"));
        Assertions.assertEquals("ziycslevufuztck", model.value().get(0).extendedLocation().name());
        Assertions.assertEquals("yhjtqedcgzu", model.value().get(0).extendedLocation().type());
        Assertions.assertEquals(HybridAksPluginType.SRIOV, model.value().get(0).hybridAksPluginType());
        Assertions.assertEquals("eevt", model.value().get(0).interfaceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TrunkedNetworkList model =
            new TrunkedNetworkList()
                .withNextLink("peewchpxlkt")
                .withValue(
                    Arrays
                        .asList(
                            new TrunkedNetworkInner()
                                .withLocation("utnwytpzdmovzvf")
                                .withTags(mapOf("f", "wzqa", "cokpv", "gzuriglaecxndt"))
                                .withExtendedLocation(
                                    new ExtendedLocation().withName("ziycslevufuztck").withType("yhjtqedcgzu"))
                                .withHybridAksPluginType(HybridAksPluginType.SRIOV)
                                .withInterfaceName("eevt")
                                .withIsolationDomainIds(Arrays.asList())
                                .withVlans(Arrays.asList()),
                            new TrunkedNetworkInner()
                                .withLocation("auzzptjazysd")
                                .withTags(mapOf("qyuvvfonkp", "zwwva", "auy", "hqyikvy"))
                                .withExtendedLocation(new ExtendedLocation().withName("iykhy").withType("wf"))
                                .withHybridAksPluginType(HybridAksPluginType.DPDK)
                                .withInterfaceName("igu")
                                .withIsolationDomainIds(Arrays.asList())
                                .withVlans(Arrays.asList())));
        model = BinaryData.fromObject(model).toObject(TrunkedNetworkList.class);
        Assertions.assertEquals("peewchpxlkt", model.nextLink());
        Assertions.assertEquals("utnwytpzdmovzvf", model.value().get(0).location());
        Assertions.assertEquals("wzqa", model.value().get(0).tags().get("f"));
        Assertions.assertEquals("ziycslevufuztck", model.value().get(0).extendedLocation().name());
        Assertions.assertEquals("yhjtqedcgzu", model.value().get(0).extendedLocation().type());
        Assertions.assertEquals(HybridAksPluginType.SRIOV, model.value().get(0).hybridAksPluginType());
        Assertions.assertEquals("eevt", model.value().get(0).interfaceName());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
