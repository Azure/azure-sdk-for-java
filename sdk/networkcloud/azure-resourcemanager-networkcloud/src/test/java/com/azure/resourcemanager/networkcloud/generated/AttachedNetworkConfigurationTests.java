// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.networkcloud.models.AttachedNetworkConfiguration;
import com.azure.resourcemanager.networkcloud.models.KubernetesPluginType;
import com.azure.resourcemanager.networkcloud.models.L2NetworkAttachmentConfiguration;
import com.azure.resourcemanager.networkcloud.models.L3NetworkAttachmentConfiguration;
import com.azure.resourcemanager.networkcloud.models.L3NetworkConfigurationIpamEnabled;
import com.azure.resourcemanager.networkcloud.models.TrunkedNetworkAttachmentConfiguration;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class AttachedNetworkConfigurationTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AttachedNetworkConfiguration model = BinaryData.fromString(
            "{\"l2Networks\":[{\"networkId\":\"lddxbjhwua\",\"pluginType\":\"OSDevice\"}],\"l3Networks\":[{\"ipamEnabled\":\"False\",\"networkId\":\"ph\",\"pluginType\":\"SRIOV\"}],\"trunkedNetworks\":[{\"networkId\":\"jrvxaglrv\",\"pluginType\":\"DPDK\"},{\"networkId\":\"wosytxitcskf\",\"pluginType\":\"MACVLAN\"}]}")
            .toObject(AttachedNetworkConfiguration.class);
        Assertions.assertEquals("lddxbjhwua", model.l2Networks().get(0).networkId());
        Assertions.assertEquals(KubernetesPluginType.OSDEVICE, model.l2Networks().get(0).pluginType());
        Assertions.assertEquals(L3NetworkConfigurationIpamEnabled.FALSE, model.l3Networks().get(0).ipamEnabled());
        Assertions.assertEquals("ph", model.l3Networks().get(0).networkId());
        Assertions.assertEquals(KubernetesPluginType.SRIOV, model.l3Networks().get(0).pluginType());
        Assertions.assertEquals("jrvxaglrv", model.trunkedNetworks().get(0).networkId());
        Assertions.assertEquals(KubernetesPluginType.DPDK, model.trunkedNetworks().get(0).pluginType());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AttachedNetworkConfiguration model = new AttachedNetworkConfiguration()
            .withL2Networks(Arrays.asList(new L2NetworkAttachmentConfiguration().withNetworkId("lddxbjhwua")
                .withPluginType(KubernetesPluginType.OSDEVICE)))
            .withL3Networks(Arrays
                .asList(new L3NetworkAttachmentConfiguration().withIpamEnabled(L3NetworkConfigurationIpamEnabled.FALSE)
                    .withNetworkId("ph")
                    .withPluginType(KubernetesPluginType.SRIOV)))
            .withTrunkedNetworks(Arrays.asList(
                new TrunkedNetworkAttachmentConfiguration().withNetworkId("jrvxaglrv")
                    .withPluginType(KubernetesPluginType.DPDK),
                new TrunkedNetworkAttachmentConfiguration().withNetworkId("wosytxitcskf")
                    .withPluginType(KubernetesPluginType.MACVLAN)));
        model = BinaryData.fromObject(model).toObject(AttachedNetworkConfiguration.class);
        Assertions.assertEquals("lddxbjhwua", model.l2Networks().get(0).networkId());
        Assertions.assertEquals(KubernetesPluginType.OSDEVICE, model.l2Networks().get(0).pluginType());
        Assertions.assertEquals(L3NetworkConfigurationIpamEnabled.FALSE, model.l3Networks().get(0).ipamEnabled());
        Assertions.assertEquals("ph", model.l3Networks().get(0).networkId());
        Assertions.assertEquals(KubernetesPluginType.SRIOV, model.l3Networks().get(0).pluginType());
        Assertions.assertEquals("jrvxaglrv", model.trunkedNetworks().get(0).networkId());
        Assertions.assertEquals(KubernetesPluginType.DPDK, model.trunkedNetworks().get(0).pluginType());
    }
}
