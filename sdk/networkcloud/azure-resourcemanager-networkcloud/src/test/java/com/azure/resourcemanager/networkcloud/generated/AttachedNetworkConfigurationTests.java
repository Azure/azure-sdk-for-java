// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.networkcloud.models.AttachedNetworkConfiguration;
import com.azure.resourcemanager.networkcloud.models.KubernetesPluginType;
import com.azure.resourcemanager.networkcloud.models.L2NetworkAttachmentConfiguration;
import com.azure.resourcemanager.networkcloud.models.L3NetworkAttachmentConfiguration;
import com.azure.resourcemanager.networkcloud.models.L3NetworkConfigurationIpamEnabled;
import com.azure.resourcemanager.networkcloud.models.TrunkedNetworkAttachmentConfiguration;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class AttachedNetworkConfigurationTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AttachedNetworkConfiguration model =
            BinaryData
                .fromString(
                    "{\"l2Networks\":[{\"networkId\":\"i\",\"pluginType\":\"SRIOV\"},{\"networkId\":\"lpjzuaejxdu\",\"pluginType\":\"IPVLAN\"},{\"networkId\":\"kzbbtd\",\"pluginType\":\"IPVLAN\"},{\"networkId\":\"veekgpwozuhkfp\",\"pluginType\":\"DPDK\"}],\"l3Networks\":[{\"ipamEnabled\":\"True\",\"networkId\":\"xl\",\"pluginType\":\"IPVLAN\"}],\"trunkedNetworks\":[{\"networkId\":\"touwaboekqv\",\"pluginType\":\"MACVLAN\"},{\"networkId\":\"nsmvbxwyj\",\"pluginType\":\"MACVLAN\"},{\"networkId\":\"hhcaal\",\"pluginType\":\"SRIOV\"},{\"networkId\":\"xisxyawjoyaqcsl\",\"pluginType\":\"MACVLAN\"}]}")
                .toObject(AttachedNetworkConfiguration.class);
        Assertions.assertEquals("i", model.l2Networks().get(0).networkId());
        Assertions.assertEquals(KubernetesPluginType.SRIOV, model.l2Networks().get(0).pluginType());
        Assertions.assertEquals(L3NetworkConfigurationIpamEnabled.TRUE, model.l3Networks().get(0).ipamEnabled());
        Assertions.assertEquals("xl", model.l3Networks().get(0).networkId());
        Assertions.assertEquals(KubernetesPluginType.IPVLAN, model.l3Networks().get(0).pluginType());
        Assertions.assertEquals("touwaboekqv", model.trunkedNetworks().get(0).networkId());
        Assertions.assertEquals(KubernetesPluginType.MACVLAN, model.trunkedNetworks().get(0).pluginType());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AttachedNetworkConfiguration model =
            new AttachedNetworkConfiguration()
                .withL2Networks(
                    Arrays
                        .asList(
                            new L2NetworkAttachmentConfiguration()
                                .withNetworkId("i")
                                .withPluginType(KubernetesPluginType.SRIOV),
                            new L2NetworkAttachmentConfiguration()
                                .withNetworkId("lpjzuaejxdu")
                                .withPluginType(KubernetesPluginType.IPVLAN),
                            new L2NetworkAttachmentConfiguration()
                                .withNetworkId("kzbbtd")
                                .withPluginType(KubernetesPluginType.IPVLAN),
                            new L2NetworkAttachmentConfiguration()
                                .withNetworkId("veekgpwozuhkfp")
                                .withPluginType(KubernetesPluginType.DPDK)))
                .withL3Networks(
                    Arrays
                        .asList(
                            new L3NetworkAttachmentConfiguration()
                                .withIpamEnabled(L3NetworkConfigurationIpamEnabled.TRUE)
                                .withNetworkId("xl")
                                .withPluginType(KubernetesPluginType.IPVLAN)))
                .withTrunkedNetworks(
                    Arrays
                        .asList(
                            new TrunkedNetworkAttachmentConfiguration()
                                .withNetworkId("touwaboekqv")
                                .withPluginType(KubernetesPluginType.MACVLAN),
                            new TrunkedNetworkAttachmentConfiguration()
                                .withNetworkId("nsmvbxwyj")
                                .withPluginType(KubernetesPluginType.MACVLAN),
                            new TrunkedNetworkAttachmentConfiguration()
                                .withNetworkId("hhcaal")
                                .withPluginType(KubernetesPluginType.SRIOV),
                            new TrunkedNetworkAttachmentConfiguration()
                                .withNetworkId("xisxyawjoyaqcsl")
                                .withPluginType(KubernetesPluginType.MACVLAN)));
        model = BinaryData.fromObject(model).toObject(AttachedNetworkConfiguration.class);
        Assertions.assertEquals("i", model.l2Networks().get(0).networkId());
        Assertions.assertEquals(KubernetesPluginType.SRIOV, model.l2Networks().get(0).pluginType());
        Assertions.assertEquals(L3NetworkConfigurationIpamEnabled.TRUE, model.l3Networks().get(0).ipamEnabled());
        Assertions.assertEquals("xl", model.l3Networks().get(0).networkId());
        Assertions.assertEquals(KubernetesPluginType.IPVLAN, model.l3Networks().get(0).pluginType());
        Assertions.assertEquals("touwaboekqv", model.trunkedNetworks().get(0).networkId());
        Assertions.assertEquals(KubernetesPluginType.MACVLAN, model.trunkedNetworks().get(0).pluginType());
    }
}
