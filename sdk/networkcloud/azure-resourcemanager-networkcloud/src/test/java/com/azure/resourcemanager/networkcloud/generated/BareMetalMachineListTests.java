// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.networkcloud.fluent.models.BareMetalMachineInner;
import com.azure.resourcemanager.networkcloud.models.BareMetalMachineList;
import com.azure.resourcemanager.networkcloud.models.ExtendedLocation;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class BareMetalMachineListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        BareMetalMachineList model =
            BinaryData
                .fromString(
                    "{\"nextLink\":\"a\",\"value\":[{\"extendedLocation\":{\"name\":\"hxqh\",\"type\":\"bifpikxwczb\"},\"properties\":{\"bmcConnectionString\":\"scnpqxuhivy\",\"bmcMacAddress\":\"n\",\"bootMacAddress\":\"wby\",\"clusterId\":\"k\",\"cordonStatus\":\"Uncordoned\",\"detailedStatus\":\"Provisioned\",\"detailedStatusMessage\":\"grtfwvu\",\"hybridAksClustersAssociatedIds\":[],\"kubernetesNodeName\":\"dcc\",\"kubernetesVersion\":\"h\",\"machineDetails\":\"jcny\",\"machineName\":\"j\",\"machineSkuId\":\"kryhtnapczwlokj\",\"oamIpv4Address\":\"mkkvnip\",\"oamIpv6Address\":\"xzjnchgejs\",\"osImage\":\"dmailzydehojw\",\"powerState\":\"Off\",\"provisioningState\":\"Failed\",\"rackId\":\"inpm\",\"rackSlot\":3546974038977071607,\"readyState\":\"False\",\"serialNumber\":\"wixjsprozvcp\",\"serviceTag\":\"eg\",\"virtualMachinesAssociatedIds\":[]},\"location\":\"mfdatscmdvpj\",\"tags\":{\"kjozkrwfnd\":\"suuv\",\"vwryoqpso\":\"odjpslwejd\",\"yffdfdos\":\"cctazakljlahbc\",\"hcrzevd\":\"gexpaojakhmsbz\"},\"id\":\"hlxaolthqtr\",\"name\":\"qjbpfzfsin\",\"type\":\"gvfcj\"}]}")
                .toObject(BareMetalMachineList.class);
        Assertions.assertEquals("a", model.nextLink());
        Assertions.assertEquals("mfdatscmdvpj", model.value().get(0).location());
        Assertions.assertEquals("suuv", model.value().get(0).tags().get("kjozkrwfnd"));
        Assertions.assertEquals("hxqh", model.value().get(0).extendedLocation().name());
        Assertions.assertEquals("bifpikxwczb", model.value().get(0).extendedLocation().type());
        Assertions.assertEquals("scnpqxuhivy", model.value().get(0).bmcConnectionString());
        Assertions.assertEquals("n", model.value().get(0).bmcMacAddress());
        Assertions.assertEquals("wby", model.value().get(0).bootMacAddress());
        Assertions.assertEquals("jcny", model.value().get(0).machineDetails());
        Assertions.assertEquals("j", model.value().get(0).machineName());
        Assertions.assertEquals("kryhtnapczwlokj", model.value().get(0).machineSkuId());
        Assertions.assertEquals("inpm", model.value().get(0).rackId());
        Assertions.assertEquals(3546974038977071607L, model.value().get(0).rackSlot());
        Assertions.assertEquals("wixjsprozvcp", model.value().get(0).serialNumber());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        BareMetalMachineList model =
            new BareMetalMachineList()
                .withNextLink("a")
                .withValue(
                    Arrays
                        .asList(
                            new BareMetalMachineInner()
                                .withLocation("mfdatscmdvpj")
                                .withTags(
                                    mapOf(
                                        "kjozkrwfnd",
                                        "suuv",
                                        "vwryoqpso",
                                        "odjpslwejd",
                                        "yffdfdos",
                                        "cctazakljlahbc",
                                        "hcrzevd",
                                        "gexpaojakhmsbz"))
                                .withExtendedLocation(new ExtendedLocation().withName("hxqh").withType("bifpikxwczb"))
                                .withBmcConnectionString("scnpqxuhivy")
                                .withBmcMacAddress("n")
                                .withBootMacAddress("wby")
                                .withMachineDetails("jcny")
                                .withMachineName("j")
                                .withMachineSkuId("kryhtnapczwlokj")
                                .withRackId("inpm")
                                .withRackSlot(3546974038977071607L)
                                .withSerialNumber("wixjsprozvcp")));
        model = BinaryData.fromObject(model).toObject(BareMetalMachineList.class);
        Assertions.assertEquals("a", model.nextLink());
        Assertions.assertEquals("mfdatscmdvpj", model.value().get(0).location());
        Assertions.assertEquals("suuv", model.value().get(0).tags().get("kjozkrwfnd"));
        Assertions.assertEquals("hxqh", model.value().get(0).extendedLocation().name());
        Assertions.assertEquals("bifpikxwczb", model.value().get(0).extendedLocation().type());
        Assertions.assertEquals("scnpqxuhivy", model.value().get(0).bmcConnectionString());
        Assertions.assertEquals("n", model.value().get(0).bmcMacAddress());
        Assertions.assertEquals("wby", model.value().get(0).bootMacAddress());
        Assertions.assertEquals("jcny", model.value().get(0).machineDetails());
        Assertions.assertEquals("j", model.value().get(0).machineName());
        Assertions.assertEquals("kryhtnapczwlokj", model.value().get(0).machineSkuId());
        Assertions.assertEquals("inpm", model.value().get(0).rackId());
        Assertions.assertEquals(3546974038977071607L, model.value().get(0).rackSlot());
        Assertions.assertEquals("wixjsprozvcp", model.value().get(0).serialNumber());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
