// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.networkcloud.fluent.models.L3NetworkInner;
import com.azure.resourcemanager.networkcloud.models.ExtendedLocation;
import com.azure.resourcemanager.networkcloud.models.HybridAksIpamEnabled;
import com.azure.resourcemanager.networkcloud.models.HybridAksPluginType;
import com.azure.resourcemanager.networkcloud.models.IpAllocationType;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class L3NetworkInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        L3NetworkInner model =
            BinaryData
                .fromString(
                    "{\"extendedLocation\":{\"name\":\"piyylhalnswhccsp\",\"type\":\"kaivwit\"},\"properties\":{\"associatedResourceIds\":[\"ywuggwoluhcz\",\"wem\",\"ai\"],\"clusterId\":\"brgz\",\"detailedStatus\":\"Provisioning\",\"detailedStatusMessage\":\"weyp\",\"hybridAksClustersAssociatedIds\":[\"xggicccnxqhuexmk\",\"tlstvlzywem\",\"zrncsdt\",\"lusiy\"],\"hybridAksIpamEnabled\":\"False\",\"hybridAksPluginType\":\"DPDK\",\"interfaceName\":\"tg\",\"ipAllocationType\":\"IPV4\",\"ipv4ConnectedPrefix\":\"eadcygqukyhejhz\",\"ipv6ConnectedPrefix\":\"xgfpelolppv\",\"l3IsolationDomainId\":\"srp\",\"provisioningState\":\"Failed\",\"virtualMachinesAssociatedIds\":[\"raehtwdwrft\",\"wib\"],\"vlan\":4339974263260215047},\"location\":\"l\",\"tags\":{\"khevxccedc\":\"hfwpracstwit\",\"jc\":\"nmdyodnwzxl\",\"vvwxqi\":\"nhltiugcxn\",\"unyowxwl\":\"y\"},\"id\":\"djrkvfgbvfvpd\",\"name\":\"odacizs\",\"type\":\"q\"}")
                .toObject(L3NetworkInner.class);
        Assertions.assertEquals("l", model.location());
        Assertions.assertEquals("hfwpracstwit", model.tags().get("khevxccedc"));
        Assertions.assertEquals("piyylhalnswhccsp", model.extendedLocation().name());
        Assertions.assertEquals("kaivwit", model.extendedLocation().type());
        Assertions.assertEquals(HybridAksIpamEnabled.FALSE, model.hybridAksIpamEnabled());
        Assertions.assertEquals(HybridAksPluginType.DPDK, model.hybridAksPluginType());
        Assertions.assertEquals("tg", model.interfaceName());
        Assertions.assertEquals(IpAllocationType.IPV4, model.ipAllocationType());
        Assertions.assertEquals("eadcygqukyhejhz", model.ipv4ConnectedPrefix());
        Assertions.assertEquals("xgfpelolppv", model.ipv6ConnectedPrefix());
        Assertions.assertEquals("srp", model.l3IsolationDomainId());
        Assertions.assertEquals(4339974263260215047L, model.vlan());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        L3NetworkInner model =
            new L3NetworkInner()
                .withLocation("l")
                .withTags(
                    mapOf("khevxccedc", "hfwpracstwit", "jc", "nmdyodnwzxl", "vvwxqi", "nhltiugcxn", "unyowxwl", "y"))
                .withExtendedLocation(new ExtendedLocation().withName("piyylhalnswhccsp").withType("kaivwit"))
                .withHybridAksIpamEnabled(HybridAksIpamEnabled.FALSE)
                .withHybridAksPluginType(HybridAksPluginType.DPDK)
                .withInterfaceName("tg")
                .withIpAllocationType(IpAllocationType.IPV4)
                .withIpv4ConnectedPrefix("eadcygqukyhejhz")
                .withIpv6ConnectedPrefix("xgfpelolppv")
                .withL3IsolationDomainId("srp")
                .withVlan(4339974263260215047L);
        model = BinaryData.fromObject(model).toObject(L3NetworkInner.class);
        Assertions.assertEquals("l", model.location());
        Assertions.assertEquals("hfwpracstwit", model.tags().get("khevxccedc"));
        Assertions.assertEquals("piyylhalnswhccsp", model.extendedLocation().name());
        Assertions.assertEquals("kaivwit", model.extendedLocation().type());
        Assertions.assertEquals(HybridAksIpamEnabled.FALSE, model.hybridAksIpamEnabled());
        Assertions.assertEquals(HybridAksPluginType.DPDK, model.hybridAksPluginType());
        Assertions.assertEquals("tg", model.interfaceName());
        Assertions.assertEquals(IpAllocationType.IPV4, model.ipAllocationType());
        Assertions.assertEquals("eadcygqukyhejhz", model.ipv4ConnectedPrefix());
        Assertions.assertEquals("xgfpelolppv", model.ipv6ConnectedPrefix());
        Assertions.assertEquals("srp", model.l3IsolationDomainId());
        Assertions.assertEquals(4339974263260215047L, model.vlan());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
