// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.networkcloud.fluent.models.L3NetworkInner;
import com.azure.resourcemanager.networkcloud.models.ExtendedLocation;
import com.azure.resourcemanager.networkcloud.models.HybridAksIpamEnabled;
import com.azure.resourcemanager.networkcloud.models.HybridAksPluginType;
import com.azure.resourcemanager.networkcloud.models.IpAllocationType;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class L3NetworkInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        L3NetworkInner model =
            BinaryData
                .fromString(
                    "{\"extendedLocation\":{\"name\":\"qvpsvuoymg\",\"type\":\"celve\"},\"properties\":{\"clusterId\":\"ypql\",\"detailedStatus\":\"Available\",\"detailedStatusMessage\":\"kerqwkyh\",\"hybridAksClustersAssociatedIds\":[\"opgxedkowepb\",\"pc\",\"fkbw\",\"csnjvcdwxlpqekft\"],\"hybridAksIpamEnabled\":\"True\",\"hybridAksPluginType\":\"DPDK\",\"interfaceName\":\"y\",\"ipAllocationType\":\"IPV6\",\"ipv4ConnectedPrefix\":\"fq\",\"ipv6ConnectedPrefix\":\"mtdh\",\"l3IsolationDomainId\":\"mdvy\",\"provisioningState\":\"Provisioning\",\"virtualMachinesAssociatedIds\":[\"gszywk\",\"irryuzhlh\",\"joqrvqqaatj\",\"nrvgoupmfiibfgg\"],\"vlan\":9051786010935823048},\"location\":\"lvrwxkvtkk\",\"tags\":{\"vblm\":\"qwjygvja\",\"byrqufeg\":\"vkzuhbxvvyhgso\",\"mctlpdngitv\":\"uvwzfbnh\",\"grhbpn\":\"bmhrixkwmyijejv\"},\"id\":\"ixexcc\",\"name\":\"dreaxh\",\"type\":\"exdrrvqahqkg\"}")
                .toObject(L3NetworkInner.class);
        Assertions.assertEquals("lvrwxkvtkk", model.location());
        Assertions.assertEquals("qwjygvja", model.tags().get("vblm"));
        Assertions.assertEquals("qvpsvuoymg", model.extendedLocation().name());
        Assertions.assertEquals("celve", model.extendedLocation().type());
        Assertions.assertEquals(HybridAksIpamEnabled.TRUE, model.hybridAksIpamEnabled());
        Assertions.assertEquals(HybridAksPluginType.DPDK, model.hybridAksPluginType());
        Assertions.assertEquals("y", model.interfaceName());
        Assertions.assertEquals(IpAllocationType.IPV6, model.ipAllocationType());
        Assertions.assertEquals("fq", model.ipv4ConnectedPrefix());
        Assertions.assertEquals("mtdh", model.ipv6ConnectedPrefix());
        Assertions.assertEquals("mdvy", model.l3IsolationDomainId());
        Assertions.assertEquals(9051786010935823048L, model.vlan());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        L3NetworkInner model =
            new L3NetworkInner()
                .withLocation("lvrwxkvtkk")
                .withTags(
                    mapOf(
                        "vblm",
                        "qwjygvja",
                        "byrqufeg",
                        "vkzuhbxvvyhgso",
                        "mctlpdngitv",
                        "uvwzfbnh",
                        "grhbpn",
                        "bmhrixkwmyijejv"))
                .withExtendedLocation(new ExtendedLocation().withName("qvpsvuoymg").withType("celve"))
                .withHybridAksIpamEnabled(HybridAksIpamEnabled.TRUE)
                .withHybridAksPluginType(HybridAksPluginType.DPDK)
                .withInterfaceName("y")
                .withIpAllocationType(IpAllocationType.IPV6)
                .withIpv4ConnectedPrefix("fq")
                .withIpv6ConnectedPrefix("mtdh")
                .withL3IsolationDomainId("mdvy")
                .withVlan(9051786010935823048L);
        model = BinaryData.fromObject(model).toObject(L3NetworkInner.class);
        Assertions.assertEquals("lvrwxkvtkk", model.location());
        Assertions.assertEquals("qwjygvja", model.tags().get("vblm"));
        Assertions.assertEquals("qvpsvuoymg", model.extendedLocation().name());
        Assertions.assertEquals("celve", model.extendedLocation().type());
        Assertions.assertEquals(HybridAksIpamEnabled.TRUE, model.hybridAksIpamEnabled());
        Assertions.assertEquals(HybridAksPluginType.DPDK, model.hybridAksPluginType());
        Assertions.assertEquals("y", model.interfaceName());
        Assertions.assertEquals(IpAllocationType.IPV6, model.ipAllocationType());
        Assertions.assertEquals("fq", model.ipv4ConnectedPrefix());
        Assertions.assertEquals("mtdh", model.ipv6ConnectedPrefix());
        Assertions.assertEquals("mdvy", model.l3IsolationDomainId());
        Assertions.assertEquals(9051786010935823048L, model.vlan());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
