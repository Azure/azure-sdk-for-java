// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.networkcloud.fluent.models.L3NetworkInner;
import com.azure.resourcemanager.networkcloud.models.ExtendedLocation;
import com.azure.resourcemanager.networkcloud.models.HybridAksIpamEnabled;
import com.azure.resourcemanager.networkcloud.models.HybridAksPluginType;
import com.azure.resourcemanager.networkcloud.models.IpAllocationType;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class L3NetworkInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        L3NetworkInner model = BinaryData.fromString(
            "{\"extendedLocation\":{\"name\":\"ybycnunvj\",\"type\":\"rtkfawnopq\"},\"properties\":{\"associatedResourceIds\":[\"yzirtxdyuxzejn\",\"psew\",\"ioilqukrydxtq\"],\"clusterId\":\"eoxorggufhyao\",\"detailedStatus\":\"Available\",\"detailedStatusMessage\":\"hhavgrvkffovjz\",\"hybridAksClustersAssociatedIds\":[\"bibgjmfxumv\",\"cluyovwxnbkf\"],\"hybridAksIpamEnabled\":\"False\",\"hybridAksPluginType\":\"SRIOV\",\"interfaceName\":\"yhwzdgiruj\",\"ipAllocationType\":\"IPV4\",\"ipv4ConnectedPrefix\":\"mvzzbtdcqvp\",\"ipv6ConnectedPrefix\":\"yujviylwdshfssn\",\"l3IsolationDomainId\":\"bgye\",\"provisioningState\":\"Provisioning\",\"virtualMachinesAssociatedIds\":[\"gaojf\",\"wncot\",\"rfh\"],\"vlan\":4929010454105023595},\"location\":\"ymoxoftpipiwyczu\",\"tags\":{\"pskasdvlmfwdg\":\"cpqjlihhyu\"},\"id\":\"x\",\"name\":\"lucvpam\",\"type\":\"sreuzvxurisjnh\"}")
            .toObject(L3NetworkInner.class);
        Assertions.assertEquals("ymoxoftpipiwyczu", model.location());
        Assertions.assertEquals("cpqjlihhyu", model.tags().get("pskasdvlmfwdg"));
        Assertions.assertEquals("ybycnunvj", model.extendedLocation().name());
        Assertions.assertEquals("rtkfawnopq", model.extendedLocation().type());
        Assertions.assertEquals(HybridAksIpamEnabled.FALSE, model.hybridAksIpamEnabled());
        Assertions.assertEquals(HybridAksPluginType.SRIOV, model.hybridAksPluginType());
        Assertions.assertEquals("yhwzdgiruj", model.interfaceName());
        Assertions.assertEquals(IpAllocationType.IPV4, model.ipAllocationType());
        Assertions.assertEquals("mvzzbtdcqvp", model.ipv4ConnectedPrefix());
        Assertions.assertEquals("yujviylwdshfssn", model.ipv6ConnectedPrefix());
        Assertions.assertEquals("bgye", model.l3IsolationDomainId());
        Assertions.assertEquals(4929010454105023595L, model.vlan());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        L3NetworkInner model = new L3NetworkInner().withLocation("ymoxoftpipiwyczu")
            .withTags(mapOf("pskasdvlmfwdg", "cpqjlihhyu"))
            .withExtendedLocation(new ExtendedLocation().withName("ybycnunvj").withType("rtkfawnopq"))
            .withHybridAksIpamEnabled(HybridAksIpamEnabled.FALSE)
            .withHybridAksPluginType(HybridAksPluginType.SRIOV)
            .withInterfaceName("yhwzdgiruj")
            .withIpAllocationType(IpAllocationType.IPV4)
            .withIpv4ConnectedPrefix("mvzzbtdcqvp")
            .withIpv6ConnectedPrefix("yujviylwdshfssn")
            .withL3IsolationDomainId("bgye")
            .withVlan(4929010454105023595L);
        model = BinaryData.fromObject(model).toObject(L3NetworkInner.class);
        Assertions.assertEquals("ymoxoftpipiwyczu", model.location());
        Assertions.assertEquals("cpqjlihhyu", model.tags().get("pskasdvlmfwdg"));
        Assertions.assertEquals("ybycnunvj", model.extendedLocation().name());
        Assertions.assertEquals("rtkfawnopq", model.extendedLocation().type());
        Assertions.assertEquals(HybridAksIpamEnabled.FALSE, model.hybridAksIpamEnabled());
        Assertions.assertEquals(HybridAksPluginType.SRIOV, model.hybridAksPluginType());
        Assertions.assertEquals("yhwzdgiruj", model.interfaceName());
        Assertions.assertEquals(IpAllocationType.IPV4, model.ipAllocationType());
        Assertions.assertEquals("mvzzbtdcqvp", model.ipv4ConnectedPrefix());
        Assertions.assertEquals("yujviylwdshfssn", model.ipv6ConnectedPrefix());
        Assertions.assertEquals("bgye", model.l3IsolationDomainId());
        Assertions.assertEquals(4929010454105023595L, model.vlan());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
