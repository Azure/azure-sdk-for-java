// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.networkcloud.fluent.models.L3NetworkInner;
import com.azure.resourcemanager.networkcloud.models.ExtendedLocation;
import com.azure.resourcemanager.networkcloud.models.HybridAksIpamEnabled;
import com.azure.resourcemanager.networkcloud.models.HybridAksPluginType;
import com.azure.resourcemanager.networkcloud.models.IpAllocationType;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class L3NetworkInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        L3NetworkInner model = BinaryData.fromString(
            "{\"extendedLocation\":{\"name\":\"jslb\",\"type\":\"wkojgcyztsfmzn\"},\"properties\":{\"associatedResourceIds\":[\"qphchqnrnrpxehuw\",\"ykqgaifmvik\",\"bydvkhbejdz\"],\"clusterId\":\"cvdsrhnj\",\"detailedStatus\":\"Error\",\"detailedStatusMessage\":\"v\",\"hybridAksClustersAssociatedIds\":[\"v\",\"fzg\"],\"hybridAksIpamEnabled\":\"False\",\"hybridAksPluginType\":\"OSDevice\",\"interfaceName\":\"uljltduceamtmcz\",\"ipAllocationType\":\"IPV4\",\"ipv4ConnectedPrefix\":\"jw\",\"ipv6ConnectedPrefix\":\"wqiok\",\"l3IsolationDomainId\":\"ssxmojms\",\"provisioningState\":\"Failed\",\"virtualMachinesAssociatedIds\":[\"rvkwc\",\"zqljyxgtczh\",\"ydbsd\",\"hmkxmaehvbb\"],\"vlan\":3684169029000070784},\"location\":\"pltfnhtba\",\"tags\":{\"kpyklyhp\":\"xywr\"},\"id\":\"uodpv\",\"name\":\"uudl\",\"type\":\"zibt\"}")
            .toObject(L3NetworkInner.class);
        Assertions.assertEquals("pltfnhtba", model.location());
        Assertions.assertEquals("xywr", model.tags().get("kpyklyhp"));
        Assertions.assertEquals("jslb", model.extendedLocation().name());
        Assertions.assertEquals("wkojgcyztsfmzn", model.extendedLocation().type());
        Assertions.assertEquals(HybridAksIpamEnabled.FALSE, model.hybridAksIpamEnabled());
        Assertions.assertEquals(HybridAksPluginType.OSDEVICE, model.hybridAksPluginType());
        Assertions.assertEquals("uljltduceamtmcz", model.interfaceName());
        Assertions.assertEquals(IpAllocationType.IPV4, model.ipAllocationType());
        Assertions.assertEquals("jw", model.ipv4ConnectedPrefix());
        Assertions.assertEquals("wqiok", model.ipv6ConnectedPrefix());
        Assertions.assertEquals("ssxmojms", model.l3IsolationDomainId());
        Assertions.assertEquals(3684169029000070784L, model.vlan());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        L3NetworkInner model = new L3NetworkInner().withLocation("pltfnhtba")
            .withTags(mapOf("kpyklyhp", "xywr"))
            .withExtendedLocation(new ExtendedLocation().withName("jslb").withType("wkojgcyztsfmzn"))
            .withHybridAksIpamEnabled(HybridAksIpamEnabled.FALSE)
            .withHybridAksPluginType(HybridAksPluginType.OSDEVICE)
            .withInterfaceName("uljltduceamtmcz")
            .withIpAllocationType(IpAllocationType.IPV4)
            .withIpv4ConnectedPrefix("jw")
            .withIpv6ConnectedPrefix("wqiok")
            .withL3IsolationDomainId("ssxmojms")
            .withVlan(3684169029000070784L);
        model = BinaryData.fromObject(model).toObject(L3NetworkInner.class);
        Assertions.assertEquals("pltfnhtba", model.location());
        Assertions.assertEquals("xywr", model.tags().get("kpyklyhp"));
        Assertions.assertEquals("jslb", model.extendedLocation().name());
        Assertions.assertEquals("wkojgcyztsfmzn", model.extendedLocation().type());
        Assertions.assertEquals(HybridAksIpamEnabled.FALSE, model.hybridAksIpamEnabled());
        Assertions.assertEquals(HybridAksPluginType.OSDEVICE, model.hybridAksPluginType());
        Assertions.assertEquals("uljltduceamtmcz", model.interfaceName());
        Assertions.assertEquals(IpAllocationType.IPV4, model.ipAllocationType());
        Assertions.assertEquals("jw", model.ipv4ConnectedPrefix());
        Assertions.assertEquals("wqiok", model.ipv6ConnectedPrefix());
        Assertions.assertEquals("ssxmojms", model.l3IsolationDomainId());
        Assertions.assertEquals(3684169029000070784L, model.vlan());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
