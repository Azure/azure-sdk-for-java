// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.networkcloud.models.BareMetalMachineCommandSpecification;
import com.azure.resourcemanager.networkcloud.models.BareMetalMachineRunReadCommandsParameters;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class BareMetalMachineRunReadCommandsParametersTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        BareMetalMachineRunReadCommandsParameters model =
            BinaryData
                .fromString(
                    "{\"commands\":[{\"arguments\":[\"di\",\"ozsdbccxj\",\"on\",\"dgnwncypuuwwlt\"],\"command\":\"uqj\"},{\"arguments\":[\"e\",\"keifzzhmkdasv\",\"lyhb\",\"cu\"],\"command\":\"chxgs\"},{\"arguments\":[\"ldforobwj\",\"vizbfhfo\",\"vacqpbtuodxesz\"],\"command\":\"bbelawumuaslzk\"}],\"limitTimeSeconds\":7026636829095827227}")
                .toObject(BareMetalMachineRunReadCommandsParameters.class);
        Assertions.assertEquals("di", model.commands().get(0).arguments().get(0));
        Assertions.assertEquals("uqj", model.commands().get(0).command());
        Assertions.assertEquals(7026636829095827227L, model.limitTimeSeconds());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        BareMetalMachineRunReadCommandsParameters model =
            new BareMetalMachineRunReadCommandsParameters()
                .withCommands(
                    Arrays
                        .asList(
                            new BareMetalMachineCommandSpecification()
                                .withArguments(Arrays.asList("di", "ozsdbccxj", "on", "dgnwncypuuwwlt"))
                                .withCommand("uqj"),
                            new BareMetalMachineCommandSpecification()
                                .withArguments(Arrays.asList("e", "keifzzhmkdasv", "lyhb", "cu"))
                                .withCommand("chxgs"),
                            new BareMetalMachineCommandSpecification()
                                .withArguments(Arrays.asList("ldforobwj", "vizbfhfo", "vacqpbtuodxesz"))
                                .withCommand("bbelawumuaslzk")))
                .withLimitTimeSeconds(7026636829095827227L);
        model = BinaryData.fromObject(model).toObject(BareMetalMachineRunReadCommandsParameters.class);
        Assertions.assertEquals("di", model.commands().get(0).arguments().get(0));
        Assertions.assertEquals("uqj", model.commands().get(0).command());
        Assertions.assertEquals(7026636829095827227L, model.limitTimeSeconds());
    }
}
