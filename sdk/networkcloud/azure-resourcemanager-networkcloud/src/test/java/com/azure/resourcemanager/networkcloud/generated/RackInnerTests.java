// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.networkcloud.fluent.models.RackInner;
import com.azure.resourcemanager.networkcloud.models.ExtendedLocation;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class RackInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        RackInner model = BinaryData.fromString(
            "{\"extendedLocation\":{\"name\":\"fiwrxgkn\",\"type\":\"uvyinzqodfvpgs\"},\"properties\":{\"availabilityZone\":\"oxgsgbpfgzdjtx\",\"clusterId\":\"flbqvgaq\",\"detailedStatus\":\"Available\",\"detailedStatusMessage\":\"fcq\",\"provisioningState\":\"Provisioning\",\"rackLocation\":\"dvetnws\",\"rackSerialNumber\":\"tutnwlduycvuzhyr\",\"rackSkuId\":\"ewipm\"},\"location\":\"k\",\"tags\":{\"zhhzjhfjmhvvmu\":\"kuqgsjjxundxgket\",\"yihsasbhudypohyu\":\"gpmuneqsxvmhfbuz\"},\"id\":\"ms\",\"name\":\"ynsqyrpfoobr\",\"type\":\"ttymsjny\"}")
            .toObject(RackInner.class);
        Assertions.assertEquals("k", model.location());
        Assertions.assertEquals("kuqgsjjxundxgket", model.tags().get("zhhzjhfjmhvvmu"));
        Assertions.assertEquals("fiwrxgkn", model.extendedLocation().name());
        Assertions.assertEquals("uvyinzqodfvpgs", model.extendedLocation().type());
        Assertions.assertEquals("oxgsgbpfgzdjtx", model.availabilityZone());
        Assertions.assertEquals("dvetnws", model.rackLocation());
        Assertions.assertEquals("tutnwlduycvuzhyr", model.rackSerialNumber());
        Assertions.assertEquals("ewipm", model.rackSkuId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        RackInner model = new RackInner().withLocation("k")
            .withTags(mapOf("zhhzjhfjmhvvmu", "kuqgsjjxundxgket", "yihsasbhudypohyu", "gpmuneqsxvmhfbuz"))
            .withExtendedLocation(new ExtendedLocation().withName("fiwrxgkn").withType("uvyinzqodfvpgs"))
            .withAvailabilityZone("oxgsgbpfgzdjtx")
            .withRackLocation("dvetnws")
            .withRackSerialNumber("tutnwlduycvuzhyr")
            .withRackSkuId("ewipm");
        model = BinaryData.fromObject(model).toObject(RackInner.class);
        Assertions.assertEquals("k", model.location());
        Assertions.assertEquals("kuqgsjjxundxgket", model.tags().get("zhhzjhfjmhvvmu"));
        Assertions.assertEquals("fiwrxgkn", model.extendedLocation().name());
        Assertions.assertEquals("uvyinzqodfvpgs", model.extendedLocation().type());
        Assertions.assertEquals("oxgsgbpfgzdjtx", model.availabilityZone());
        Assertions.assertEquals("dvetnws", model.rackLocation());
        Assertions.assertEquals("tutnwlduycvuzhyr", model.rackSerialNumber());
        Assertions.assertEquals("ewipm", model.rackSkuId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
