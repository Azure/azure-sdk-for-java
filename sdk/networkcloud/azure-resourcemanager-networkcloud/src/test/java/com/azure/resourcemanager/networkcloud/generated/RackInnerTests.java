// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.networkcloud.fluent.models.RackInner;
import com.azure.resourcemanager.networkcloud.models.ExtendedLocation;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class RackInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        RackInner model = BinaryData.fromString(
            "{\"extendedLocation\":{\"name\":\"knfnwmbtmvpdv\",\"type\":\"dhttzaefedxihchr\"},\"properties\":{\"availabilityZone\":\"hk\",\"clusterId\":\"rjdqnsdfzp\",\"detailedStatus\":\"Provisioning\",\"detailedStatusMessage\":\"kylkdghrj\",\"provisioningState\":\"Failed\",\"rackLocation\":\"tl\",\"rackSerialNumber\":\"xezw\",\"rackSkuId\":\"hokvbwnh\"},\"location\":\"qlgehg\",\"tags\":{\"csheafidltugsr\":\"pifhpfeoajvgcxtx\",\"h\":\"smkss\",\"egprhptil\":\"iftxfkf\",\"qtgdqohmcwsl\":\"ucb\"},\"id\":\"riz\",\"name\":\"tpwb\",\"type\":\"a\"}")
            .toObject(RackInner.class);
        Assertions.assertEquals("qlgehg", model.location());
        Assertions.assertEquals("pifhpfeoajvgcxtx", model.tags().get("csheafidltugsr"));
        Assertions.assertEquals("knfnwmbtmvpdv", model.extendedLocation().name());
        Assertions.assertEquals("dhttzaefedxihchr", model.extendedLocation().type());
        Assertions.assertEquals("hk", model.availabilityZone());
        Assertions.assertEquals("tl", model.rackLocation());
        Assertions.assertEquals("xezw", model.rackSerialNumber());
        Assertions.assertEquals("hokvbwnh", model.rackSkuId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        RackInner model = new RackInner().withLocation("qlgehg")
            .withTags(mapOf("csheafidltugsr", "pifhpfeoajvgcxtx", "h", "smkss", "egprhptil", "iftxfkf", "qtgdqohmcwsl",
                "ucb"))
            .withExtendedLocation(new ExtendedLocation().withName("knfnwmbtmvpdv").withType("dhttzaefedxihchr"))
            .withAvailabilityZone("hk")
            .withRackLocation("tl")
            .withRackSerialNumber("xezw")
            .withRackSkuId("hokvbwnh");
        model = BinaryData.fromObject(model).toObject(RackInner.class);
        Assertions.assertEquals("qlgehg", model.location());
        Assertions.assertEquals("pifhpfeoajvgcxtx", model.tags().get("csheafidltugsr"));
        Assertions.assertEquals("knfnwmbtmvpdv", model.extendedLocation().name());
        Assertions.assertEquals("dhttzaefedxihchr", model.extendedLocation().type());
        Assertions.assertEquals("hk", model.availabilityZone());
        Assertions.assertEquals("tl", model.rackLocation());
        Assertions.assertEquals("xezw", model.rackSerialNumber());
        Assertions.assertEquals("hokvbwnh", model.rackSkuId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
