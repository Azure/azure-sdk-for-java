// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.networkcloud.NetworkCloudManager;
import com.azure.resourcemanager.networkcloud.models.BareMetalMachinePowerOffParameters;
import com.azure.resourcemanager.networkcloud.models.BareMetalMachineSkipShutdown;
import com.azure.resourcemanager.networkcloud.models.OperationStatusResult;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class BareMetalMachinesPowerOffMockTests {
    @Test
    public void testPowerOff() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"id\":\"wdpyq\",\"resourceId\":\"bxubmdna\",\"name\":\"bqwremjela\",\"status\":\"acigel\",\"percentComplete\":74.37067,\"startTime\":\"2021-11-26T05:52:39Z\",\"endTime\":\"2021-04-23T10:22:37Z\",\"operations\":[{\"id\":\"kjopwbeon\",\"resourceId\":\"kwzdqybxcea\",\"name\":\"cptsoqfyiase\",\"status\":\"chkrttzr\",\"percentComplete\":90.373055,\"startTime\":\"2021-04-10T05:16:30Z\",\"endTime\":\"2021-05-21T21:38:58Z\",\"operations\":[{\"id\":\"mvanbwzo\",\"resourceId\":\"nrxxbsojklin\",\"name\":\"dptysprqs\",\"status\":\"nzxojpslsvjgpli\",\"percentComplete\":81.04206,\"startTime\":\"2021-07-10T14:05:30Z\",\"endTime\":\"2021-12-08T21:04:16Z\",\"operations\":[{\"status\":\"vapcoh\"},{\"status\":\"oucqpqojx\"},{\"status\":\"x\"}]}]},{\"id\":\"cgdz\",\"resourceId\":\"nr\",\"name\":\"cawetzqddt\",\"status\":\"wflj\",\"percentComplete\":58.680862,\"startTime\":\"2021-04-10T13:20:50Z\",\"endTime\":\"2021-07-09T20:30:45Z\",\"operations\":[{\"id\":\"zwcjjncqtj\",\"resourceId\":\"izvg\",\"name\":\"atzuuv\",\"status\":\"xngre\",\"percentComplete\":31.940014,\"startTime\":\"2021-07-20T12:45:18Z\",\"endTime\":\"2021-01-16T19:45:25Z\",\"operations\":[{\"status\":\"lswva\"},{\"status\":\"qfutlxjo\"},{\"status\":\"zasunwqrjzfrgq\"}]},{\"id\":\"hcmbuocnjrohmbp\",\"resourceId\":\"yx\",\"name\":\"eblydyv\",\"status\":\"fkmroc\",\"percentComplete\":4.2229533,\"startTime\":\"2021-07-09T08:52:55Z\",\"endTime\":\"2021-08-13T16:19:10Z\",\"operations\":[{\"status\":\"dlfp\"},{\"status\":\"apucygvo\"},{\"status\":\"vyuns\"},{\"status\":\"xlghieegj\"}]}]},{\"id\":\"paseksgb\",\"resourceId\":\"antuygdhgaqipirp\",\"name\":\"rqofulopmjnlexwh\",\"status\":\"bjpi\",\"percentComplete\":3.5229385,\"startTime\":\"2021-04-03T07:18:13Z\",\"endTime\":\"2021-05-30T08:42:44Z\",\"operations\":[{\"id\":\"ctatoyintqpbrlcy\",\"resourceId\":\"uczkgofxyfsruc\",\"name\":\"rrp\",\"status\":\"jttbstv\",\"percentComplete\":84.53266,\"startTime\":\"2021-06-06T13:44:54Z\",\"endTime\":\"2021-08-03T20:23:39Z\",\"operations\":[{\"status\":\"fkoxmlghktuidvr\"},{\"status\":\"azlp\"}]},{\"id\":\"exymzvla\",\"resourceId\":\"pbh\",\"name\":\"vqs\",\"status\":\"ny\",\"percentComplete\":91.92979,\"startTime\":\"2021-04-23T19:57:01Z\",\"endTime\":\"2021-10-14T08:13:15Z\",\"operations\":[{\"status\":\"rpmey\"},{\"status\":\"vpkpatlb\"}]},{\"id\":\"zgs\",\"resourceId\":\"rfhfvo\",\"name\":\"knbnxwcdommpvfq\",\"status\":\"wzfgbrttuiaclkie\",\"percentComplete\":69.9188,\"startTime\":\"2021-04-18T23:10:57Z\",\"endTime\":\"2021-04-17T02:43:37Z\",\"operations\":[{\"status\":\"iqfyuttdi\"},{\"status\":\"gbpvnwswmtxkyct\"},{\"status\":\"wgzwxjlmecvog\"}]}]},{\"id\":\"vne\",\"resourceId\":\"aifghtmoqqt\",\"name\":\"fhzbkr\",\"status\":\"jjjavfqnvhnq\",\"percentComplete\":69.29112,\"startTime\":\"2021-01-06T07:59:03Z\",\"endTime\":\"2020-12-26T00:21:50Z\",\"operations\":[{\"id\":\"esypvidbztjh\",\"resourceId\":\"fbov\",\"name\":\"nkbw\",\"status\":\"tnjuhpsprkzyaupi\",\"percentComplete\":73.421104,\"startTime\":\"2021-01-29T16:38:57Z\",\"endTime\":\"2021-09-15T16:45:58Z\",\"operations\":[{\"status\":\"qroohtu\"}]},{\"id\":\"aonurjtumg\",\"resourceId\":\"hpv\",\"name\":\"mslclblyjxlt\",\"status\":\"sjuscvsfxigctmg\",\"percentComplete\":74.84599,\"startTime\":\"2021-08-09T09:46:25Z\",\"endTime\":\"2021-04-21T17:26:50Z\",\"operations\":[{\"status\":\"cydrtceukdqkk\"}]},{\"id\":\"ztgeqmgqzgwld\",\"resourceId\":\"chillcecf\",\"name\":\"uwaoaguhicqlli\",\"status\":\"stacsjvhrweftkwq\",\"percentComplete\":60.642326,\"startTime\":\"2021-05-08T02:12:14Z\",\"endTime\":\"2021-04-07T07:21:40Z\",\"operations\":[{\"status\":\"aepwamcxtcz\"}]},{\"id\":\"euknijduyyes\",\"resourceId\":\"djfbocyv\",\"name\":\"ulrtywikdmh\",\"status\":\"akuflgbhgauacdix\",\"percentComplete\":14.551282,\"startTime\":\"2021-07-21T10:11:29Z\",\"endTime\":\"2021-10-28T11:16:26Z\",\"operations\":[{\"status\":\"qg\"},{\"status\":\"kfnozoeoqbvj\"},{\"status\":\"vefgwbmqjchntas\"}]}]}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        NetworkCloudManager manager =
            NetworkCloudManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        OperationStatusResult response =
            manager
                .bareMetalMachines()
                .powerOff(
                    "thwmgnmbsc",
                    "bxigdhxiidlo",
                    new BareMetalMachinePowerOffParameters().withSkipShutdown(BareMetalMachineSkipShutdown.FALSE),
                    com.azure.core.util.Context.NONE);

        Assertions.assertEquals("wdpyq", response.id());
        Assertions.assertEquals("bqwremjela", response.name());
        Assertions.assertEquals("acigel", response.status());
        Assertions.assertEquals(74.37067F, response.percentComplete());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-26T05:52:39Z"), response.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-23T10:22:37Z"), response.endTime());
        Assertions.assertEquals("kjopwbeon", response.operations().get(0).id());
        Assertions.assertEquals("cptsoqfyiase", response.operations().get(0).name());
        Assertions.assertEquals("chkrttzr", response.operations().get(0).status());
        Assertions.assertEquals(90.373055F, response.operations().get(0).percentComplete());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-10T05:16:30Z"), response.operations().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-21T21:38:58Z"), response.operations().get(0).endTime());
        Assertions.assertEquals("mvanbwzo", response.operations().get(0).operations().get(0).id());
        Assertions.assertEquals("dptysprqs", response.operations().get(0).operations().get(0).name());
        Assertions.assertEquals("nzxojpslsvjgpli", response.operations().get(0).operations().get(0).status());
        Assertions.assertEquals(81.04206F, response.operations().get(0).operations().get(0).percentComplete());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-07-10T14:05:30Z"),
                response.operations().get(0).operations().get(0).startTime());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-12-08T21:04:16Z"),
                response.operations().get(0).operations().get(0).endTime());
        Assertions
            .assertEquals("vapcoh", response.operations().get(0).operations().get(0).operations().get(0).status());
    }
}
