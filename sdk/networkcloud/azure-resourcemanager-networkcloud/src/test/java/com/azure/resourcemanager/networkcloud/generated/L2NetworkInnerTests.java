// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.networkcloud.fluent.models.L2NetworkInner;
import com.azure.resourcemanager.networkcloud.models.ExtendedLocation;
import com.azure.resourcemanager.networkcloud.models.HybridAksPluginType;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class L2NetworkInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        L2NetworkInner model = BinaryData.fromString(
            "{\"extendedLocation\":{\"name\":\"jnalghf\",\"type\":\"vtvsexsowueluq\"},\"properties\":{\"associatedResourceIds\":[\"hhxvrhmzkwpj\",\"wws\"],\"clusterId\":\"ghftqsxhqxujxuk\",\"detailedStatus\":\"Error\",\"detailedStatusMessage\":\"igrjguufzdm\",\"hybridAksClustersAssociatedIds\":[\"tfih\",\"hbotzingamvppho\",\"zqzudph\",\"amvdkfwynwcvtbv\"],\"hybridAksPluginType\":\"DPDK\",\"interfaceName\":\"mtnvyq\",\"l2IsolationDomainId\":\"atkzwpcnpw\",\"provisioningState\":\"Failed\",\"virtualMachinesAssociatedIds\":[\"sgvvsccyajguq\",\"hwyg\",\"lvdnkfx\"]},\"location\":\"emdwzrmuhapfc\",\"tags\":{\"vuoy\":\"sqxqvp\",\"elvezrypq\":\"gc\"},\"id\":\"mfe\",\"name\":\"kerqwkyh\",\"type\":\"ob\"}")
            .toObject(L2NetworkInner.class);
        Assertions.assertEquals("emdwzrmuhapfc", model.location());
        Assertions.assertEquals("sqxqvp", model.tags().get("vuoy"));
        Assertions.assertEquals("jnalghf", model.extendedLocation().name());
        Assertions.assertEquals("vtvsexsowueluq", model.extendedLocation().type());
        Assertions.assertEquals(HybridAksPluginType.DPDK, model.hybridAksPluginType());
        Assertions.assertEquals("mtnvyq", model.interfaceName());
        Assertions.assertEquals("atkzwpcnpw", model.l2IsolationDomainId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        L2NetworkInner model = new L2NetworkInner().withLocation("emdwzrmuhapfc")
            .withTags(mapOf("vuoy", "sqxqvp", "elvezrypq", "gc"))
            .withExtendedLocation(new ExtendedLocation().withName("jnalghf").withType("vtvsexsowueluq"))
            .withHybridAksPluginType(HybridAksPluginType.DPDK)
            .withInterfaceName("mtnvyq")
            .withL2IsolationDomainId("atkzwpcnpw");
        model = BinaryData.fromObject(model).toObject(L2NetworkInner.class);
        Assertions.assertEquals("emdwzrmuhapfc", model.location());
        Assertions.assertEquals("sqxqvp", model.tags().get("vuoy"));
        Assertions.assertEquals("jnalghf", model.extendedLocation().name());
        Assertions.assertEquals("vtvsexsowueluq", model.extendedLocation().type());
        Assertions.assertEquals(HybridAksPluginType.DPDK, model.hybridAksPluginType());
        Assertions.assertEquals("mtnvyq", model.interfaceName());
        Assertions.assertEquals("atkzwpcnpw", model.l2IsolationDomainId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
