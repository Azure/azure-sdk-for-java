// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.networkcloud.NetworkCloudManager;
import com.azure.resourcemanager.networkcloud.models.CloudServicesNetwork;
import com.azure.resourcemanager.networkcloud.models.CloudServicesNetworkEnableDefaultEgressEndpoints;
import com.azure.resourcemanager.networkcloud.models.EgressEndpoint;
import com.azure.resourcemanager.networkcloud.models.EndpointDependency;
import com.azure.resourcemanager.networkcloud.models.ExtendedLocation;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class CloudServicesNetworksCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"extendedLocation\":{\"name\":\"wrso\",\"type\":\"pl\"},\"properties\":{\"additionalEgressEndpoints\":[{\"category\":\"airrhvhfnracw\",\"endpoints\":[{\"domainName\":\"qigtuujwouhdaws\"},{\"domainName\":\"grbjbxsjybvitvqk\"},{\"domainName\":\"y\"},{\"domainName\":\"znumtggmuwdchoz\"}]},{\"category\":\"nkf\",\"endpoints\":[{\"domainName\":\"lv\"},{\"domainName\":\"noakiz\"},{\"domainName\":\"oaiknaqlnuwig\"}]}],\"associatedResourceIds\":[\"lykwphvxz\"],\"clusterId\":\"xhmpejtlkex\",\"detailedStatus\":\"Available\",\"detailedStatusMessage\":\"ivkcqh\",\"enableDefaultEgressEndpoints\":\"False\",\"enabledEgressEndpoints\":[{\"category\":\"nlccrm\",\"endpoints\":[{\"domainName\":\"yupiju\"},{\"domainName\":\"yqjf\"},{\"domainName\":\"akfqfrkemyildud\"}]},{\"category\":\"jascowvfdjkpd\",\"endpoints\":[{\"domainName\":\"hlkks\"},{\"domainName\":\"mgzvyfi\"}]},{\"category\":\"dkz\",\"endpoints\":[{\"domainName\":\"nwsithuqolyahluq\"},{\"domainName\":\"qulsutrjbhxykfhy\"},{\"domainName\":\"ezvqq\"},{\"domainName\":\"g\"}]}],\"hybridAksClustersAssociatedIds\":[\"tb\",\"ve\",\"reuquowtljvf\",\"hreagk\"],\"interfaceName\":\"xv\",\"provisioningState\":\"Succeeded\",\"virtualMachinesAssociatedIds\":[\"czsulmdggl\",\"epjpfs\",\"ykgsangpszng\",\"fpgylkve\"]},\"location\":\"ujcngo\",\"tags\":{\"oitpkpztrgdgx\":\"edmzrgjfoknub\",\"wugyx\":\"coqra\"},\"id\":\"qi\",\"name\":\"we\",\"type\":\"alwvskbu\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        NetworkCloudManager manager = NetworkCloudManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        CloudServicesNetwork response = manager.cloudServicesNetworks()
            .define("imipskdyzatvfuz")
            .withRegion("e")
            .withExistingResourceGroup("zrrryv")
            .withExtendedLocation(new ExtendedLocation().withName("aftjvvruxwigsy").withType("ip"))
            .withTags(mapOf("kkdtnhqsy", "ojpziuwfb"))
            .withAdditionalEgressEndpoints(Arrays.asList(
                new EgressEndpoint().withCategory("jtgrqgdgkkileplk")
                    .withEndpoints(Arrays.asList(new EndpointDependency().withDomainName("mknhwtbbaedor"))),
                new EgressEndpoint().withCategory("vmq")
                    .withEndpoints(Arrays.asList(new EndpointDependency().withDomainName("oygbdgwumgxd")))))
            .withEnableDefaultEgressEndpoints(CloudServicesNetworkEnableDefaultEgressEndpoints.TRUE)
            .create();

        Assertions.assertEquals("ujcngo", response.location());
        Assertions.assertEquals("edmzrgjfoknub", response.tags().get("oitpkpztrgdgx"));
        Assertions.assertEquals("wrso", response.extendedLocation().name());
        Assertions.assertEquals("pl", response.extendedLocation().type());
        Assertions.assertEquals("airrhvhfnracw", response.additionalEgressEndpoints().get(0).category());
        Assertions.assertEquals("qigtuujwouhdaws",
            response.additionalEgressEndpoints().get(0).endpoints().get(0).domainName());
        Assertions.assertEquals(CloudServicesNetworkEnableDefaultEgressEndpoints.FALSE,
            response.enableDefaultEgressEndpoints());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
