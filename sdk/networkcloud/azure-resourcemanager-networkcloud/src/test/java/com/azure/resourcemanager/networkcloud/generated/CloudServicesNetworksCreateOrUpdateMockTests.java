// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.networkcloud.NetworkCloudManager;
import com.azure.resourcemanager.networkcloud.models.CloudServicesNetwork;
import com.azure.resourcemanager.networkcloud.models.CloudServicesNetworkEnableDefaultEgressEndpoints;
import com.azure.resourcemanager.networkcloud.models.EgressEndpoint;
import com.azure.resourcemanager.networkcloud.models.EndpointDependency;
import com.azure.resourcemanager.networkcloud.models.ExtendedLocation;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class CloudServicesNetworksCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"etag\":\"oormkfqlwxldyka\",\"extendedLocation\":{\"name\":\"sy\",\"type\":\"aolnjpnnbmjk\"},\"properties\":{\"additionalEgressEndpoints\":[{\"category\":\"gsjjxxahmrna\",\"endpoints\":[{\"domainName\":\"yqegx\"},{\"domainName\":\"iv\"},{\"domainName\":\"inbmh\"}]},{\"category\":\"bjijkgqxnh\",\"endpoints\":[{\"domainName\":\"keznjaujvaa\"},{\"domainName\":\"nggiycwkdtaa\"}]},{\"category\":\"xw\",\"endpoints\":[{\"domainName\":\"ka\"},{\"domainName\":\"mrrqmbzmqkratb\"}]}],\"associatedResourceIds\":[\"bjsidb\",\"rkfpks\",\"kd\"],\"clusterId\":\"gewi\",\"detailedStatus\":\"Error\",\"detailedStatusMessage\":\"hbguzo\",\"enableDefaultEgressEndpoints\":\"False\",\"enabledEgressEndpoints\":[{\"category\":\"nfnzhhh\",\"endpoints\":[{\"domainName\":\"smffjkutycyarnr\"}]}],\"hybridAksClustersAssociatedIds\":[\"g\",\"abzoghktdpyczhco\",\"ocnhzqrottjzcfyj\",\"pt\"],\"interfaceName\":\"lohap\",\"provisioningState\":\"Succeeded\",\"virtualMachinesAssociatedIds\":[\"zpyglqdhmrj\",\"ralcxpjbyypsj\",\"qcjenkyhf\"]},\"location\":\"vsqxfxjelgcmpzqj\",\"tags\":{\"oyvivbsiz\":\"qxuwyvca\"},\"id\":\"sjsz\",\"name\":\"bscm\",\"type\":\"lzijiufehgmvflnw\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        NetworkCloudManager manager = NetworkCloudManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        CloudServicesNetwork response = manager.cloudServicesNetworks()
            .define("vogygzyvneez")
            .withRegion("gjonmcy")
            .withExistingResourceGroup("xjlme")
            .withExtendedLocation(new ExtendedLocation().withName("tmoqqtlffhzb").withType("rkjjjavfqnvhnq"))
            .withTags(mapOf("bamwineo", "y", "vevboclzh", "vfkakpold", "gvttx", "jknyu", "a", "nrup"))
            .withAdditionalEgressEndpoints(Arrays.asList(
                new EgressEndpoint().withCategory("ogiyetes")
                    .withEndpoints(Arrays.asList(new EndpointDependency().withDomainName("vidbztjhqtfb"),
                        new EndpointDependency().withDomainName("vnynkb"))),
                new EgressEndpoint().withCategory("etnjuhpsprkz")
                    .withEndpoints(Arrays.asList(new EndpointDependency().withDomainName("upia"),
                        new EndpointDependency().withDomainName("cxnafbwqrooh"))),
                new EgressEndpoint().withCategory("uovmaonurjt")
                    .withEndpoints(Arrays.asList(new EndpointDependency().withDomainName("ghihpvecms"),
                        new EndpointDependency().withDomainName("clbl")))))
            .withEnableDefaultEgressEndpoints(CloudServicesNetworkEnableDefaultEgressEndpoints.FALSE)
            .withIfMatch("lcouqehbhbcdszir")
            .withIfNoneMatch("randoypmb")
            .create();

        Assertions.assertEquals("vsqxfxjelgcmpzqj", response.location());
        Assertions.assertEquals("qxuwyvca", response.tags().get("oyvivbsiz"));
        Assertions.assertEquals("sy", response.extendedLocation().name());
        Assertions.assertEquals("aolnjpnnbmjk", response.extendedLocation().type());
        Assertions.assertEquals("gsjjxxahmrna", response.additionalEgressEndpoints().get(0).category());
        Assertions.assertEquals("yqegx", response.additionalEgressEndpoints().get(0).endpoints().get(0).domainName());
        Assertions.assertEquals(CloudServicesNetworkEnableDefaultEgressEndpoints.FALSE,
            response.enableDefaultEgressEndpoints());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
