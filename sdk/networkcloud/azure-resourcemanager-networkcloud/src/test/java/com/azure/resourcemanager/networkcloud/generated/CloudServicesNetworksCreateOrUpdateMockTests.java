// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.networkcloud.NetworkCloudManager;
import com.azure.resourcemanager.networkcloud.models.CloudServicesNetwork;
import com.azure.resourcemanager.networkcloud.models.CloudServicesNetworkEnableDefaultEgressEndpoints;
import com.azure.resourcemanager.networkcloud.models.EgressEndpoint;
import com.azure.resourcemanager.networkcloud.models.EndpointDependency;
import com.azure.resourcemanager.networkcloud.models.ExtendedLocation;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class CloudServicesNetworksCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"extendedLocation\":{\"name\":\"ev\",\"type\":\"sxivzrrryvei\"},\"properties\":{\"additionalEgressEndpoints\":[{\"category\":\"kdyzatvfuzk\",\"endpoints\":[{\"domainName\":\"tjvv\"},{\"domainName\":\"uxwigsyeipqdsm\"},{\"domainName\":\"tgrqgdgkkile\"},{\"domainName\":\"lkcsmknhwtbbae\"}]}],\"associatedResourceIds\":[\"vv\",\"qfloygbdgwum\",\"xdgd\"],\"clusterId\":\"abgdexj\",\"detailedStatus\":\"Provisioning\",\"detailedStatusMessage\":\"saq\",\"enableDefaultEgressEndpoints\":\"True\",\"enabledEgressEndpoints\":[{\"category\":\"wllcolsr\",\"endpoints\":[{\"domainName\":\"apte\"},{\"domainName\":\"hexcgjokj\"},{\"domainName\":\"jnhvlqjbekpeeks\"},{\"domainName\":\"bksdqhjvyklxesl\"}]},{\"category\":\"hhus\",\"endpoints\":[{\"domainName\":\"poq\"}]},{\"category\":\"avnwqj\",\"endpoints\":[{\"domainName\":\"o\"}]},{\"category\":\"nlejjjkxybwf\",\"endpoints\":[{\"domainName\":\"kjbztensvkzykj\"},{\"domainName\":\"jknsxfwu\"}]}],\"hybridAksClustersAssociatedIds\":[\"dpkupnqrmgjf\"],\"interfaceName\":\"kuwxeoiojfizfavk\",\"provisioningState\":\"Succeeded\",\"virtualMachinesAssociatedIds\":[\"cyayk\",\"mfzsbf\",\"xrzxmdewsrsxkrp\"]},\"location\":\"jazejwwviyoyp\",\"tags\":{\"hqkb\":\"brnnhjxsqw\",\"zycyqiqyhg\":\"wetp\"},\"id\":\"se\",\"name\":\"zlex\",\"type\":\"sfledyn\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        NetworkCloudManager manager = NetworkCloudManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        CloudServicesNetwork response = manager.cloudServicesNetworks()
            .define("mclujyxkyxlzgs")
            .withRegion("ssmzhhkuui")
            .withExistingResourceGroup("uusioycblev")
            .withExtendedLocation(new ExtendedLocation().withName("gkzz").withType("taf"))
            .withTags(mapOf("ctekval", "q"))
            .withAdditionalEgressEndpoints(Arrays.asList(
                new EgressEndpoint().withCategory("fovwmbjlzqsczpg")
                    .withEndpoints(Arrays.asList(new EndpointDependency().withDomainName("wnapfdq"),
                        new EndpointDependency().withDomainName("owftptnuwjtks"))),
                new EgressEndpoint().withCategory("h")
                    .withEndpoints(Arrays.asList(new EndpointDependency().withDomainName("gqy"),
                        new EndpointDependency().withDomainName("leseyqrhvyeldo"),
                        new EndpointDependency().withDomainName("jv"))),
                new EgressEndpoint().withCategory("kwiswskukjtas")
                    .withEndpoints(Arrays.asList(new EndpointDependency().withDomainName("wispkxk"),
                        new EndpointDependency().withDomainName("txfkndlqvt"))),
                new EgressEndpoint().withCategory("knvgmmbugtywat")
                    .withEndpoints(Arrays.asList(new EndpointDependency().withDomainName("aqkue"),
                        new EndpointDependency().withDomainName("tgroesh")))))
            .withEnableDefaultEgressEndpoints(CloudServicesNetworkEnableDefaultEgressEndpoints.TRUE)
            .create();

        Assertions.assertEquals("jazejwwviyoyp", response.location());
        Assertions.assertEquals("brnnhjxsqw", response.tags().get("hqkb"));
        Assertions.assertEquals("ev", response.extendedLocation().name());
        Assertions.assertEquals("sxivzrrryvei", response.extendedLocation().type());
        Assertions.assertEquals("kdyzatvfuzk", response.additionalEgressEndpoints().get(0).category());
        Assertions.assertEquals("tjvv", response.additionalEgressEndpoints().get(0).endpoints().get(0).domainName());
        Assertions.assertEquals(CloudServicesNetworkEnableDefaultEgressEndpoints.TRUE,
            response.enableDefaultEgressEndpoints());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
