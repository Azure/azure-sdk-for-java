// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.networkcloud.fluent.models.ClusterManagerInner;
import com.azure.resourcemanager.networkcloud.models.ClusterManagerList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ClusterManagerListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ClusterManagerList model =
            BinaryData
                .fromString(
                    "{\"nextLink\":\"dgwdslfhot\",\"value\":[{\"properties\":{\"analyticsWorkspaceId\":\"npwlbjnpg\",\"availabilityZones\":[],\"clusterVersions\":[],\"detailedStatus\":\"UpdateFailed\",\"detailedStatusMessage\":\"ehxnltyfsop\",\"fabricControllerId\":\"usue\",\"provisioningState\":\"Succeeded\",\"vmSize\":\"jbavorxzdm\"},\"location\":\"ctbqvudwx\",\"tags\":{\"wdkcglhsl\":\"nvowgujju\",\"yggdtjixh\":\"zj\"},\"id\":\"kuofqweykhme\",\"name\":\"evfyexfwhybcib\",\"type\":\"yvdcsitynnaa\"},{\"properties\":{\"analyticsWorkspaceId\":\"ectehf\",\"availabilityZones\":[],\"clusterVersions\":[],\"detailedStatus\":\"Provisioning\",\"detailedStatusMessage\":\"ypvhezrkg\",\"fabricControllerId\":\"hcjrefovgmk\",\"provisioningState\":\"Succeeded\",\"vmSize\":\"vxyqjpkcattpngjc\"},\"location\":\"czsqpjhvm\",\"tags\":{\"ysou\":\"v\",\"canoaeupf\":\"q\",\"tuo\":\"yhltrpmopjmcm\"},\"id\":\"thfuiuaodsfcpkvx\",\"name\":\"dpuozmyz\",\"type\":\"dagfuaxbezyiuok\"},{\"properties\":{\"analyticsWorkspaceId\":\"whrdxwzywqsmbsu\",\"availabilityZones\":[],\"clusterVersions\":[],\"detailedStatus\":\"Provisioning\",\"detailedStatusMessage\":\"ryocfsfksymdd\",\"fabricControllerId\":\"stkiiuxhqyud\",\"provisioningState\":\"Failed\",\"vmSize\":\"b\"},\"location\":\"czvyifq\",\"tags\":{\"atkpnp\":\"dvjsllrmvvdf\",\"iqzbq\":\"lexxbczwtru\"},\"id\":\"vsovmyokac\",\"name\":\"pkwlhz\",\"type\":\"obpxjmflbvvn\"}]}")
                .toObject(ClusterManagerList.class);
        Assertions.assertEquals("dgwdslfhot", model.nextLink());
        Assertions.assertEquals("ctbqvudwx", model.value().get(0).location());
        Assertions.assertEquals("nvowgujju", model.value().get(0).tags().get("wdkcglhsl"));
        Assertions.assertEquals("npwlbjnpg", model.value().get(0).analyticsWorkspaceId());
        Assertions.assertEquals("usue", model.value().get(0).fabricControllerId());
        Assertions.assertEquals("jbavorxzdm", model.value().get(0).vmSize());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ClusterManagerList model =
            new ClusterManagerList()
                .withNextLink("dgwdslfhot")
                .withValue(
                    Arrays
                        .asList(
                            new ClusterManagerInner()
                                .withLocation("ctbqvudwx")
                                .withTags(mapOf("wdkcglhsl", "nvowgujju", "yggdtjixh", "zj"))
                                .withAnalyticsWorkspaceId("npwlbjnpg")
                                .withAvailabilityZones(Arrays.asList())
                                .withFabricControllerId("usue")
                                .withVmSize("jbavorxzdm"),
                            new ClusterManagerInner()
                                .withLocation("czsqpjhvm")
                                .withTags(mapOf("ysou", "v", "canoaeupf", "q", "tuo", "yhltrpmopjmcm"))
                                .withAnalyticsWorkspaceId("ectehf")
                                .withAvailabilityZones(Arrays.asList())
                                .withFabricControllerId("hcjrefovgmk")
                                .withVmSize("vxyqjpkcattpngjc"),
                            new ClusterManagerInner()
                                .withLocation("czvyifq")
                                .withTags(mapOf("atkpnp", "dvjsllrmvvdf", "iqzbq", "lexxbczwtru"))
                                .withAnalyticsWorkspaceId("whrdxwzywqsmbsu")
                                .withAvailabilityZones(Arrays.asList())
                                .withFabricControllerId("stkiiuxhqyud")
                                .withVmSize("b")));
        model = BinaryData.fromObject(model).toObject(ClusterManagerList.class);
        Assertions.assertEquals("dgwdslfhot", model.nextLink());
        Assertions.assertEquals("ctbqvudwx", model.value().get(0).location());
        Assertions.assertEquals("nvowgujju", model.value().get(0).tags().get("wdkcglhsl"));
        Assertions.assertEquals("npwlbjnpg", model.value().get(0).analyticsWorkspaceId());
        Assertions.assertEquals("usue", model.value().get(0).fabricControllerId());
        Assertions.assertEquals("jbavorxzdm", model.value().get(0).vmSize());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
