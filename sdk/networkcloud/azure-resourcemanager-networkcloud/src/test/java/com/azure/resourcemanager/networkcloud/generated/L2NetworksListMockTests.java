// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.networkcloud.NetworkCloudManager;
import com.azure.resourcemanager.networkcloud.models.HybridAksPluginType;
import com.azure.resourcemanager.networkcloud.models.L2Network;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class L2NetworksListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"extendedLocation\":{\"name\":\"ksqd\",\"type\":\"iw\"},\"properties\":{\"associatedResourceIds\":[\"lboncqbazqicqc\",\"ygtvxbyjanepub\"],\"clusterId\":\"kxyqvgxiaodetv\",\"detailedStatus\":\"Error\",\"detailedStatusMessage\":\"dxuwsaifm\",\"hybridAksClustersAssociatedIds\":[\"osbz\",\"ehgcvkbcknjo\"],\"hybridAksPluginType\":\"DPDK\",\"interfaceName\":\"yxpvelszerqze\",\"l2IsolationDomainId\":\"xoqeintxwalj\",\"provisioningState\":\"Provisioning\",\"virtualMachinesAssociatedIds\":[\"lqwa\",\"frqulhmzyqbhd\",\"afjrqpjiyrqjcrg\",\"xwmzwdfkbnrz\"]},\"location\":\"pdltbq\",\"tags\":{\"dgvpyig\":\"jfgxxsaetg\"},\"id\":\"aqqilzdcduwjoed\",\"name\":\"ngucaifpaurww\",\"type\":\"ilfjqqacdmk\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        NetworkCloudManager manager = NetworkCloudManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<L2Network> response = manager.l2Networks().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("pdltbq", response.iterator().next().location());
        Assertions.assertEquals("jfgxxsaetg", response.iterator().next().tags().get("dgvpyig"));
        Assertions.assertEquals("ksqd", response.iterator().next().extendedLocation().name());
        Assertions.assertEquals("iw", response.iterator().next().extendedLocation().type());
        Assertions.assertEquals(HybridAksPluginType.DPDK, response.iterator().next().hybridAksPluginType());
        Assertions.assertEquals("yxpvelszerqze", response.iterator().next().interfaceName());
        Assertions.assertEquals("xoqeintxwalj", response.iterator().next().l2IsolationDomainId());
    }
}
