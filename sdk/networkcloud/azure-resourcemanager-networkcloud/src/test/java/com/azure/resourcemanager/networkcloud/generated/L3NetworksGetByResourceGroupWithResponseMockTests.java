// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.networkcloud.NetworkCloudManager;
import com.azure.resourcemanager.networkcloud.models.HybridAksIpamEnabled;
import com.azure.resourcemanager.networkcloud.models.HybridAksPluginType;
import com.azure.resourcemanager.networkcloud.models.IpAllocationType;
import com.azure.resourcemanager.networkcloud.models.L3Network;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class L3NetworksGetByResourceGroupWithResponseMockTests {
    @Test
    public void testGetByResourceGroupWithResponse() throws Exception {
        String responseStr
            = "{\"etag\":\"olro\",\"extendedLocation\":{\"name\":\"qqlmgnlqxsjxte\",\"type\":\"exhvuqbozoolz\"},\"properties\":{\"associatedResourceIds\":[\"arkuzl\",\"cnn\"],\"clusterId\":\"snxawqyt\",\"detailedStatus\":\"Available\",\"detailedStatusMessage\":\"yzm\",\"hybridAksClustersAssociatedIds\":[\"zexnxakcky\",\"ymx\"],\"hybridAksIpamEnabled\":\"False\",\"hybridAksPluginType\":\"DPDK\",\"interfaceName\":\"dtfohfaog\",\"ipAllocationType\":\"DualStack\",\"ipv4ConnectedPrefix\":\"wrsiwdyjqurykc\",\"ipv6ConnectedPrefix\":\"aueekcsueh\",\"l3IsolationDomainId\":\"gdda\",\"provisioningState\":\"Succeeded\",\"virtualMachinesAssociatedIds\":[\"ydl\",\"idywmhmptyril\",\"fbnrq\"],\"vlan\":4983075934158225758},\"location\":\"tpbnfnqtxjtoma\",\"tags\":{\"dwq\":\"bnfddep\",\"zygleexahvm\":\"ns\",\"sjjzyvoaqajuveh\":\"whsbrcary\"},\"id\":\"ptdmkrrbhmpful\",\"name\":\"be\",\"type\":\"gybpmfb\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        NetworkCloudManager manager = NetworkCloudManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        L3Network response = manager.l3Networks()
            .getByResourceGroupWithResponse("zzkivyhjr", "iizjixlqfhefkwa", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("tpbnfnqtxjtoma", response.location());
        Assertions.assertEquals("bnfddep", response.tags().get("dwq"));
        Assertions.assertEquals("qqlmgnlqxsjxte", response.extendedLocation().name());
        Assertions.assertEquals("exhvuqbozoolz", response.extendedLocation().type());
        Assertions.assertEquals(HybridAksIpamEnabled.FALSE, response.hybridAksIpamEnabled());
        Assertions.assertEquals(HybridAksPluginType.DPDK, response.hybridAksPluginType());
        Assertions.assertEquals("dtfohfaog", response.interfaceName());
        Assertions.assertEquals(IpAllocationType.DUAL_STACK, response.ipAllocationType());
        Assertions.assertEquals("wrsiwdyjqurykc", response.ipv4ConnectedPrefix());
        Assertions.assertEquals("aueekcsueh", response.ipv6ConnectedPrefix());
        Assertions.assertEquals("gdda", response.l3IsolationDomainId());
        Assertions.assertEquals(4983075934158225758L, response.vlan());
    }
}
