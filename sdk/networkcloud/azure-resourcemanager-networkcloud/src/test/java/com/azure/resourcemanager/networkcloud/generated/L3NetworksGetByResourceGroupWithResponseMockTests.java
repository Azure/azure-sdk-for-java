// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.networkcloud.NetworkCloudManager;
import com.azure.resourcemanager.networkcloud.models.HybridAksIpamEnabled;
import com.azure.resourcemanager.networkcloud.models.HybridAksPluginType;
import com.azure.resourcemanager.networkcloud.models.IpAllocationType;
import com.azure.resourcemanager.networkcloud.models.L3Network;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class L3NetworksGetByResourceGroupWithResponseMockTests {
    @Test
    public void testGetByResourceGroupWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"extendedLocation\":{\"name\":\"zakuejk\",\"type\":\"vbiztjofqcv\"},\"properties\":{\"associatedResourceIds\":[\"uf\"],\"clusterId\":\"sj\",\"detailedStatus\":\"Error\",\"detailedStatusMessage\":\"myejiriuxegthor\",\"hybridAksClustersAssociatedIds\":[\"awlpjfelqerpp\",\"cbgqnzmnhiil\",\"alwcjgckbb\",\"ccgzpraoxnyu\"],\"hybridAksIpamEnabled\":\"True\",\"hybridAksPluginType\":\"OSDevice\",\"interfaceName\":\"ftipwcxbyubhiq\",\"ipAllocationType\":\"DualStack\",\"ipv4ConnectedPrefix\":\"rnpnuhzafccnuh\",\"ipv6ConnectedPrefix\":\"gbylbuig\",\"l3IsolationDomainId\":\"xvatvcr\",\"provisioningState\":\"Accepted\",\"virtualMachinesAssociatedIds\":[\"bqxvhcsyhzlwxae\",\"ov\",\"rexdndsbd\",\"ead\"],\"vlan\":5366703007852569923},\"location\":\"wntopag\",\"tags\":{\"magoaqylkjz\":\"v\",\"mxitpfinzcpd\":\"jiuazjc\",\"vcqguefzh\":\"tkrlgjmtbd\",\"lyujlfyoump\":\"mpheqdur\"},\"id\":\"kyeclcdigpta\",\"name\":\"brzmqxucycijoclx\",\"type\":\"utgjcyz\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        NetworkCloudManager manager =
            NetworkCloudManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        L3Network response =
            manager
                .l3Networks()
                .getByResourceGroupWithResponse("ltcoqc", "jpds", com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("wntopag", response.location());
        Assertions.assertEquals("v", response.tags().get("magoaqylkjz"));
        Assertions.assertEquals("zakuejk", response.extendedLocation().name());
        Assertions.assertEquals("vbiztjofqcv", response.extendedLocation().type());
        Assertions.assertEquals(HybridAksIpamEnabled.TRUE, response.hybridAksIpamEnabled());
        Assertions.assertEquals(HybridAksPluginType.OSDEVICE, response.hybridAksPluginType());
        Assertions.assertEquals("ftipwcxbyubhiq", response.interfaceName());
        Assertions.assertEquals(IpAllocationType.DUAL_STACK, response.ipAllocationType());
        Assertions.assertEquals("rnpnuhzafccnuh", response.ipv4ConnectedPrefix());
        Assertions.assertEquals("gbylbuig", response.ipv6ConnectedPrefix());
        Assertions.assertEquals("xvatvcr", response.l3IsolationDomainId());
        Assertions.assertEquals(5366703007852569923L, response.vlan());
    }
}
