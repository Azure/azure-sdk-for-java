// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.networkcloud.NetworkCloudManager;
import com.azure.resourcemanager.networkcloud.models.ExtendedLocation;
import com.azure.resourcemanager.networkcloud.models.HybridAksIpamEnabled;
import com.azure.resourcemanager.networkcloud.models.HybridAksPluginType;
import com.azure.resourcemanager.networkcloud.models.IpAllocationType;
import com.azure.resourcemanager.networkcloud.models.L3Network;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class L3NetworksCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"extendedLocation\":{\"name\":\"vcb\",\"type\":\"hez\"},\"properties\":{\"clusterId\":\"u\",\"detailedStatus\":\"Error\",\"detailedStatusMessage\":\"xut\",\"hybridAksClustersAssociatedIds\":[\"rruyuu\",\"tvlmbjwcolbmxlb\",\"w\"],\"hybridAksIpamEnabled\":\"False\",\"hybridAksPluginType\":\"SRIOV\",\"interfaceName\":\"pr\",\"ipAllocationType\":\"DualStack\",\"ipv4ConnectedPrefix\":\"hmtfho\",\"ipv6ConnectedPrefix\":\"xzcmjhngxno\",\"l3IsolationDomainId\":\"rxtd\",\"provisioningState\":\"Succeeded\",\"virtualMachinesAssociatedIds\":[\"vhdl\",\"ydidwhepfwwtjf\",\"o\"],\"vlan\":4178865755333855309},\"location\":\"hmwcdbck\",\"tags\":{\"jzrbhtmeplv\":\"kxkxhnegk\",\"pgsn\":\"kaobrl\",\"a\":\"agnchjhgemuowaky\"},\"id\":\"hjym\",\"name\":\"cgqtag\",\"type\":\"rclsso\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        NetworkCloudManager manager =
            NetworkCloudManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        L3Network response =
            manager
                .l3Networks()
                .define("zd")
                .withRegion("u")
                .withExistingResourceGroup("ojbf")
                .withExtendedLocation(new ExtendedLocation().withName("fnjyix").withType("afr"))
                .withL3IsolationDomainId("evadrmmwiu")
                .withVlan(5630136548807311881L)
                .withTags(mapOf("hnepkpeti", "sbezaxyfukzxuizh", "iubxdukec", "rx", "hctmmkosz", "xdazv"))
                .withHybridAksIpamEnabled(HybridAksIpamEnabled.TRUE)
                .withHybridAksPluginType(HybridAksPluginType.DPDK)
                .withInterfaceName("lgry")
                .withIpAllocationType(IpAllocationType.DUAL_STACK)
                .withIpv4ConnectedPrefix("asigrowsocne")
                .withIpv6ConnectedPrefix("ygdjboqgrmtqjk")
                .create();

        Assertions.assertEquals("hmwcdbck", response.location());
        Assertions.assertEquals("kxkxhnegk", response.tags().get("jzrbhtmeplv"));
        Assertions.assertEquals("vcb", response.extendedLocation().name());
        Assertions.assertEquals("hez", response.extendedLocation().type());
        Assertions.assertEquals(HybridAksIpamEnabled.FALSE, response.hybridAksIpamEnabled());
        Assertions.assertEquals(HybridAksPluginType.SRIOV, response.hybridAksPluginType());
        Assertions.assertEquals("pr", response.interfaceName());
        Assertions.assertEquals(IpAllocationType.DUAL_STACK, response.ipAllocationType());
        Assertions.assertEquals("hmtfho", response.ipv4ConnectedPrefix());
        Assertions.assertEquals("xzcmjhngxno", response.ipv6ConnectedPrefix());
        Assertions.assertEquals("rxtd", response.l3IsolationDomainId());
        Assertions.assertEquals(4178865755333855309L, response.vlan());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
