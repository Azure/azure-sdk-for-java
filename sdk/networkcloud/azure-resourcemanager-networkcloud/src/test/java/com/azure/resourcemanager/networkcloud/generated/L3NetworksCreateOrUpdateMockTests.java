// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.networkcloud.NetworkCloudManager;
import com.azure.resourcemanager.networkcloud.models.ExtendedLocation;
import com.azure.resourcemanager.networkcloud.models.HybridAksIpamEnabled;
import com.azure.resourcemanager.networkcloud.models.HybridAksPluginType;
import com.azure.resourcemanager.networkcloud.models.IpAllocationType;
import com.azure.resourcemanager.networkcloud.models.L3Network;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class L3NetworksCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"extendedLocation\":{\"name\":\"odlikcdrdaasax\",\"type\":\"obsmf\"},\"properties\":{\"associatedResourceIds\":[\"yjvzukosr\",\"awn\"],\"clusterId\":\"mlnkoywsxv\",\"detailedStatus\":\"Error\",\"detailedStatusMessage\":\"qqax\",\"hybridAksClustersAssociatedIds\":[\"y\"],\"hybridAksIpamEnabled\":\"True\",\"hybridAksPluginType\":\"OSDevice\",\"interfaceName\":\"doabhj\",\"ipAllocationType\":\"IPV4\",\"ipv4ConnectedPrefix\":\"weuipmpvksmi\",\"ipv6ConnectedPrefix\":\"sqxtltclkrdpq\",\"l3IsolationDomainId\":\"fhyrfrakk\",\"provisioningState\":\"Succeeded\",\"virtualMachinesAssociatedIds\":[\"wfcmfcnr\"],\"vlan\":6199502759615666213},\"location\":\"matxjti\",\"tags\":{\"fbbmtlp\":\"zqgxx\",\"rnzcalinc\":\"agynoi\",\"ymqruqguhfupet\":\"yqxzxaqzibmqim\",\"xsyaowuzowpuoh\":\"svvoqsbpkflanfk\"},\"id\":\"kc\",\"name\":\"rgukxrztio\",\"type\":\"hlutixmqrudjizc\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        NetworkCloudManager manager = NetworkCloudManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        L3Network response = manager.l3Networks()
            .define("vfejvqnttmbqda")
            .withRegion("ekscbctnanqimwbz")
            .withExistingResourceGroup("oka")
            .withExtendedLocation(new ExtendedLocation().withName("zfivfokpysthhzag").withType("fwy"))
            .withL3IsolationDomainId("waokbavlytta")
            .withVlan(7333016694568690931L)
            .withTags(mapOf("nlaimouxwksqmudm", "cldpkawn", "qsj", "coibicziuswswjrk", "yrfwbivq", "btqqvyfs"))
            .withHybridAksIpamEnabled(HybridAksIpamEnabled.TRUE)
            .withHybridAksPluginType(HybridAksPluginType.DPDK)
            .withInterfaceName("mm")
            .withIpAllocationType(IpAllocationType.IPV6)
            .withIpv4ConnectedPrefix("fgtdmbvx")
            .withIpv6ConnectedPrefix("raokqkbudb")
            .create();

        Assertions.assertEquals("matxjti", response.location());
        Assertions.assertEquals("zqgxx", response.tags().get("fbbmtlp"));
        Assertions.assertEquals("odlikcdrdaasax", response.extendedLocation().name());
        Assertions.assertEquals("obsmf", response.extendedLocation().type());
        Assertions.assertEquals(HybridAksIpamEnabled.TRUE, response.hybridAksIpamEnabled());
        Assertions.assertEquals(HybridAksPluginType.OSDEVICE, response.hybridAksPluginType());
        Assertions.assertEquals("doabhj", response.interfaceName());
        Assertions.assertEquals(IpAllocationType.IPV4, response.ipAllocationType());
        Assertions.assertEquals("weuipmpvksmi", response.ipv4ConnectedPrefix());
        Assertions.assertEquals("sqxtltclkrdpq", response.ipv6ConnectedPrefix());
        Assertions.assertEquals("fhyrfrakk", response.l3IsolationDomainId());
        Assertions.assertEquals(6199502759615666213L, response.vlan());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
