// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.networkcloud.NetworkCloudManager;
import com.azure.resourcemanager.networkcloud.models.ExtendedLocation;
import com.azure.resourcemanager.networkcloud.models.HybridAksIpamEnabled;
import com.azure.resourcemanager.networkcloud.models.HybridAksPluginType;
import com.azure.resourcemanager.networkcloud.models.IpAllocationType;
import com.azure.resourcemanager.networkcloud.models.L3Network;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class L3NetworksCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"etag\":\"dmljzacvumepjp\",\"extendedLocation\":{\"name\":\"ibnzp\",\"type\":\"hep\"},\"properties\":{\"associatedResourceIds\":[\"xleqircc\",\"cly\",\"cgxvrpj\"],\"clusterId\":\"czuod\",\"detailedStatus\":\"Error\",\"detailedStatusMessage\":\"nettepdjxqeskoy\",\"hybridAksClustersAssociatedIds\":[\"ylpckaewsedv\",\"skwxe\"],\"hybridAksIpamEnabled\":\"False\",\"hybridAksPluginType\":\"DPDK\",\"interfaceName\":\"fn\",\"ipAllocationType\":\"DualStack\",\"ipv4ConnectedPrefix\":\"mjtsgh\",\"ipv6ConnectedPrefix\":\"c\",\"l3IsolationDomainId\":\"cp\",\"provisioningState\":\"Succeeded\",\"virtualMachinesAssociatedIds\":[\"eqacd\"],\"vlan\":8906126674616609071},\"location\":\"mpypefcpczshnuq\",\"tags\":{\"tu\":\"izupfkhu\"},\"id\":\"zx\",\"name\":\"mtvtvegwqiukvzwy\",\"type\":\"wtthaokgksk\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        NetworkCloudManager manager = NetworkCloudManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        L3Network response = manager.l3Networks()
            .define("ygevgwmseharx")
            .withRegion("xett")
            .withExistingResourceGroup("scdfpdqw")
            .withExtendedLocation(new ExtendedLocation().withName("tnvw").withType("hrsidq"))
            .withL3IsolationDomainId("scv")
            .withVlan(5644542844680160959L)
            .withTags(mapOf("dnqtoqxjhqx", "ojfkq", "htkbtnq", "s", "mbiipsnawwlqk", "rngl"))
            .withHybridAksIpamEnabled(HybridAksIpamEnabled.FALSE)
            .withHybridAksPluginType(HybridAksPluginType.OSDEVICE)
            .withInterfaceName("bkcgsuthhllnm")
            .withIpAllocationType(IpAllocationType.IPV4)
            .withIpv4ConnectedPrefix("fxexlfciatxtjrr")
            .withIpv6ConnectedPrefix("mdskjhhxdlajfoxc")
            .withIfMatch("rwvaexhdc")
            .withIfNoneMatch("rceqnkbrupob")
            .create();

        Assertions.assertEquals("mpypefcpczshnuq", response.location());
        Assertions.assertEquals("izupfkhu", response.tags().get("tu"));
        Assertions.assertEquals("ibnzp", response.extendedLocation().name());
        Assertions.assertEquals("hep", response.extendedLocation().type());
        Assertions.assertEquals(HybridAksIpamEnabled.FALSE, response.hybridAksIpamEnabled());
        Assertions.assertEquals(HybridAksPluginType.DPDK, response.hybridAksPluginType());
        Assertions.assertEquals("fn", response.interfaceName());
        Assertions.assertEquals(IpAllocationType.DUAL_STACK, response.ipAllocationType());
        Assertions.assertEquals("mjtsgh", response.ipv4ConnectedPrefix());
        Assertions.assertEquals("c", response.ipv6ConnectedPrefix());
        Assertions.assertEquals("cp", response.l3IsolationDomainId());
        Assertions.assertEquals(8906126674616609071L, response.vlan());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
