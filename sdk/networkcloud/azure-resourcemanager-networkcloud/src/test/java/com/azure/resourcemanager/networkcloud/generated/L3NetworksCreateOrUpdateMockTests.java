// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.networkcloud.NetworkCloudManager;
import com.azure.resourcemanager.networkcloud.models.ExtendedLocation;
import com.azure.resourcemanager.networkcloud.models.HybridAksIpamEnabled;
import com.azure.resourcemanager.networkcloud.models.HybridAksPluginType;
import com.azure.resourcemanager.networkcloud.models.IpAllocationType;
import com.azure.resourcemanager.networkcloud.models.L3Network;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class L3NetworksCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"extendedLocation\":{\"name\":\"kxiuxqggvqr\",\"type\":\"hyhlwcjsqg\"},\"properties\":{\"associatedResourceIds\":[\"ffbxrqrkij\",\"euqlsdxeqztv\"],\"clusterId\":\"mwwmjswenaww\",\"detailedStatus\":\"Error\",\"detailedStatusMessage\":\"leqioulndh\",\"hybridAksClustersAssociatedIds\":[\"eojhtollhsvi\",\"mytzln\"],\"hybridAksIpamEnabled\":\"True\",\"hybridAksPluginType\":\"OSDevice\",\"interfaceName\":\"vyoanfbcswqagywv\",\"ipAllocationType\":\"IPV4\",\"ipv4ConnectedPrefix\":\"vjrktpgaeukyawoh\",\"ipv6ConnectedPrefix\":\"w\",\"l3IsolationDomainId\":\"qnucs\",\"provisioningState\":\"Succeeded\",\"virtualMachinesAssociatedIds\":[\"dsjtdlpbni\"],\"vlan\":5256685083551946475},\"location\":\"zlsvbzfcpuoeed\",\"tags\":{\"yek\":\"ciklh\",\"i\":\"drenxol\"},\"id\":\"ehqbeivdlhydwbdb\",\"name\":\"grlpuny\",\"type\":\"jlkesmmpath\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        NetworkCloudManager manager = NetworkCloudManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        L3Network response = manager.l3Networks()
            .define("wnvz")
            .withRegion("petasvvoqsb")
            .withExistingResourceGroup("ukosrn")
            .withExtendedLocation(new ExtendedLocation().withName("lnk").withType("ywsxvjabjqqaxu"))
            .withL3IsolationDomainId("gynoiprnzcali")
            .withVlan(8328781066288077099L)
            .withTags(mapOf("wuzowpuoh", "lanfkgxsya", "rgukxrztio", "kc", "f", "hlutixmqrudjizc"))
            .withHybridAksIpamEnabled(HybridAksIpamEnabled.FALSE)
            .withHybridAksPluginType(HybridAksPluginType.DPDK)
            .withInterfaceName("rcwfcmfcnrjajq")
            .withIpAllocationType(IpAllocationType.DUAL_STACK)
            .withIpv4ConnectedPrefix("jti")
            .withIpv6ConnectedPrefix("nzqgxxgfbbmtlpq")
            .create();

        Assertions.assertEquals("zlsvbzfcpuoeed", response.location());
        Assertions.assertEquals("ciklh", response.tags().get("yek"));
        Assertions.assertEquals("kxiuxqggvqr", response.extendedLocation().name());
        Assertions.assertEquals("hyhlwcjsqg", response.extendedLocation().type());
        Assertions.assertEquals(HybridAksIpamEnabled.TRUE, response.hybridAksIpamEnabled());
        Assertions.assertEquals(HybridAksPluginType.OSDEVICE, response.hybridAksPluginType());
        Assertions.assertEquals("vyoanfbcswqagywv", response.interfaceName());
        Assertions.assertEquals(IpAllocationType.IPV4, response.ipAllocationType());
        Assertions.assertEquals("vjrktpgaeukyawoh", response.ipv4ConnectedPrefix());
        Assertions.assertEquals("w", response.ipv6ConnectedPrefix());
        Assertions.assertEquals("qnucs", response.l3IsolationDomainId());
        Assertions.assertEquals(5256685083551946475L, response.vlan());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
