// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.verticals.agrifood.farming;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.HttpMethod;
import com.azure.core.http.llc.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;

/**
 * Initializes a new instance of the OAuthTokensClient type.
 */
@ServiceClient(builder = FarmBeatsClientBuilder.class)
public final class OAuthTokensClient {
    private final OAuthTokensAsyncClient asyncClient;

    /**
     * Initializes an instance of OAuthTokensClient client.
     * 
     * @param asyncClient The OAuthTokensAsyncClient underneath.
     */
    OAuthTokensClient(OAuthTokensAsyncClient asyncClient) {
        this.asyncClient = asyncClient;
    }

    /**
     * Returns Connection link needed in the OAuth flow.
     * <p><strong>Request Body Schema</strong></p>
     * <pre>{@code
     * {
     *     farmerId: String
     *     oAuthProviderId: String
     *     userRedirectLink: String
     *     userRedirectState: String
     * }
     * }</pre>
     * <p><strong>Response Body Schema</strong></p>
     * <pre>{@code
     * String
     * }</pre>
     * 
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getOAuthConnectionLinkWithResponse(RequestOptions options) {
        return asyncClient.getOAuthConnectionLinkWithResponse(options).block();
    }

    /**
     * Get cascade delete job details for OAuth tokens for specified job ID.
     * <p><strong>Response Body Schema</strong></p>
     * <pre>{@code
     * {
     *     farmerId: String
     *     resourceId: String
     *     resourceType: String
     *     id: String
     *     status: String
     *     durationInSeconds: Double
     *     message: String
     *     createdDateTime: OffsetDateTime
     *     lastActionDateTime: OffsetDateTime
     *     startTime: OffsetDateTime
     *     endTime: OffsetDateTime
     *     name: String
     *     description: String
     *     properties: {
     *         String: Object
     *     }
     * }
     * }</pre>
     * 
     * @param jobId ID of the job.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getCascadeDeleteJobDetailsWithResponse(String jobId, RequestOptions options) {
        return asyncClient.getCascadeDeleteJobDetailsWithResponse(jobId, options).block();
    }

    /**
     * Create a cascade delete job for OAuth tokens.
     * <p><strong>Response Body Schema</strong></p>
     * <pre>{@code
     * {
     *     farmerId: String
     *     resourceId: String
     *     resourceType: String
     *     id: String
     *     status: String
     *     durationInSeconds: Double
     *     message: String
     *     createdDateTime: OffsetDateTime
     *     lastActionDateTime: OffsetDateTime
     *     startTime: OffsetDateTime
     *     endTime: OffsetDateTime
     *     name: String
     *     description: String
     *     properties: {
     *         String: Object
     *     }
     * }
     * }</pre>
     * 
     * @param jobId Job ID supplied by end user.
     * @param farmerId ID of the farmer.
     * @param oauthProviderId ID of the OAuthProvider.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createCascadeDeleteJobWithResponse(String jobId, String farmerId, String oauthProviderId, RequestOptions options) {
        return asyncClient.createCascadeDeleteJobWithResponse(jobId, farmerId, oauthProviderId, options).block();
    }

    /**
     * Create an empty DynamicRequest with the serializer and pipeline initialized for this client.
     * 
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> invoke(String url, HttpMethod httpMethod, BinaryData body, RequestOptions options) {
        return asyncClient.invoke(url, httpMethod, body, options).block();
    }
}
