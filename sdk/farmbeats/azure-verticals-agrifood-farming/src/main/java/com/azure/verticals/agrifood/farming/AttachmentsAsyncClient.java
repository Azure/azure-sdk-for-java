// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.verticals.agrifood.farming;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.HttpMethod;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.llc.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.BinaryData;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the AttachmentsAsyncClient type.
 */
@ServiceClient(builder = FarmBeatsClientBuilder.class)
public final class AttachmentsAsyncClient {
    private final String endpoint;

    private final String apiVersion;

    private final HttpPipeline httpPipeline;

    /**
     * Initializes an instance of AttachmentsAsyncClient client.
     * 
     * @param endpoint The endpoint of your FarmBeats resource (protocol and hostname, for example: https://{resourceName}.farmbeats.azure.net).
     * @param apiVersion Api Version.
     * @param httpPipeline The HTTP pipeline to send requests through.
     */
    AttachmentsAsyncClient(String endpoint, String apiVersion, HttpPipeline httpPipeline) {
        this.endpoint = endpoint;
        this.apiVersion = apiVersion;
        this.httpPipeline = httpPipeline;
    }

    /**
     * Gets a specified attachment resource under a particular farmer.
     * <p><strong>Response Body Schema</strong></p>
     * <pre>{@code
     * {
     *     farmerId: String
     *     resourceId: String
     *     resourceType: String
     *     originalFileName: String
     *     id: String
     *     status: String
     *     createdDateTime: OffsetDateTime
     *     modifiedDateTime: OffsetDateTime
     *     name: String
     *     description: String
     *     eTag: String
     * }
     * }</pre>
     * 
     * @param farmerId ID of the associated farmer.
     * @param attachmentId ID of the attachment.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getWithResponse(String farmerId, String attachmentId, RequestOptions options) {
        String url = "{Endpoint}/farmers/{farmerId}/attachments/{attachmentId}";
        url = url.replace("{Endpoint}", endpoint);
        url = url.replace("{farmerId}", farmerId);
        url = url.replace("{attachmentId}", attachmentId);
        url = url + (url.contains("?") ? "&" : "?") + "api-version=" + apiVersion;
        HttpRequest request = new HttpRequest(HttpMethod.GET, url);
        request.getHeaders().set("Accept", "application/json");
        request.getHeaders().set("Content-Type", "application/json");
        if (options != null) {
            options.getRequestCallback().accept(request);
        }
        return httpPipeline.send(request)
            .flatMap(httpResponse -> BinaryData.fromFlux(httpResponse.getBody())
            .map(binaryData -> new SimpleResponse<>(httpResponse.getRequest(), httpResponse.getStatusCode(), httpResponse.getHeaders(), binaryData)));
    }

    /**
     * Creates or updates an attachment resource under a particular farmer.
     * <p><strong>Optional Header Parameters</strong></p>
     * <table border="1">
     *     <caption>Optional Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Description</th></tr>
     *     <tr><td>contentLength</td><td>Long</td><td>The contentLength parameter</td></tr>
     * </table>
     * <p><strong>Request Body Schema</strong></p>
     * <pre>{@code
     * Flux<ByteBuffer>
     * }</pre>
     * <p><strong>Response Body Schema</strong></p>
     * <pre>{@code
     * {
     *     farmerId: String
     *     resourceId: String
     *     resourceType: String
     *     originalFileName: String
     *     id: String
     *     status: String
     *     createdDateTime: OffsetDateTime
     *     modifiedDateTime: OffsetDateTime
     *     name: String
     *     description: String
     *     eTag: String
     * }
     * }</pre>
     * 
     * @param farmerId ID of the associated farmer resource.
     * @param attachmentId ID of the attachment resource.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createOrUpdateWithResponse(String farmerId, String attachmentId, RequestOptions options) {
        String url = "{Endpoint}/farmers/{farmerId}/attachments/{attachmentId}";
        url = url.replace("{Endpoint}", endpoint);
        url = url.replace("{farmerId}", farmerId);
        url = url.replace("{attachmentId}", attachmentId);
        url = url + (url.contains("?") ? "&" : "?") + "api-version=" + apiVersion;
        HttpRequest request = new HttpRequest(HttpMethod.PATCH, url);
        request.getHeaders().set("Accept", "application/json");
        request.getHeaders().set("Content-Type", "multipart/form-data");
        if (options != null) {
            options.getRequestCallback().accept(request);
        }
        return httpPipeline.send(request)
            .flatMap(httpResponse -> BinaryData.fromFlux(httpResponse.getBody())
            .map(binaryData -> new SimpleResponse<>(httpResponse.getRequest(), httpResponse.getStatusCode(), httpResponse.getHeaders(), binaryData)));
    }

    /**
     * Deletes a specified attachment resource under a particular farmer.
     * 
     * @param farmerId ID of the farmer.
     * @param attachmentId ID of the attachment.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> deleteWithResponse(String farmerId, String attachmentId, RequestOptions options) {
        String url = "{Endpoint}/farmers/{farmerId}/attachments/{attachmentId}";
        url = url.replace("{Endpoint}", endpoint);
        url = url.replace("{farmerId}", farmerId);
        url = url.replace("{attachmentId}", attachmentId);
        url = url + (url.contains("?") ? "&" : "?") + "api-version=" + apiVersion;
        HttpRequest request = new HttpRequest(HttpMethod.DELETE, url);
        request.getHeaders().set("Accept", "application/json");
        request.getHeaders().set("Content-Type", "application/json");
        if (options != null) {
            options.getRequestCallback().accept(request);
        }
        return httpPipeline.send(request)
            .flatMap(httpResponse -> BinaryData.fromFlux(httpResponse.getBody())
            .map(binaryData -> new SimpleResponse<>(httpResponse.getRequest(), httpResponse.getStatusCode(), httpResponse.getHeaders(), binaryData)));
    }

    /**
     * Downloads and returns attachment as response for the given input filePath.
     * 
     * @param farmerId ID of the associated farmer.
     * @param attachmentId ID of attachment to be downloaded.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> downloadWithResponse(String farmerId, String attachmentId, RequestOptions options) {
        String url = "{Endpoint}/farmers/{farmerId}/attachments/{attachmentId}/file";
        url = url.replace("{Endpoint}", endpoint);
        url = url.replace("{farmerId}", farmerId);
        url = url.replace("{attachmentId}", attachmentId);
        url = url + (url.contains("?") ? "&" : "?") + "api-version=" + apiVersion;
        HttpRequest request = new HttpRequest(HttpMethod.GET, url);
        request.getHeaders().set("Accept", "application/octet-stream, application/json");
        request.getHeaders().set("Content-Type", "application/json");
        if (options != null) {
            options.getRequestCallback().accept(request);
        }
        return httpPipeline.send(request)
            .flatMap(httpResponse -> BinaryData.fromFlux(httpResponse.getBody())
            .map(binaryData -> new SimpleResponse<>(httpResponse.getRequest(), httpResponse.getStatusCode(), httpResponse.getHeaders(), binaryData)));
    }

    /**
     * Create an empty DynamicRequest with the serializer and pipeline initialized for this client.
     * 
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> invoke(String url, HttpMethod httpMethod, BinaryData body, RequestOptions options) {
        HttpRequest request = new HttpRequest(httpMethod, url);
        request.setBody(body.toBytes());
        if (options != null) {
            options.getRequestCallback().accept(request);
        }
        return httpPipeline.send(request)
            .flatMap(httpResponse -> BinaryData.fromFlux(httpResponse.getBody())
            .map(binaryData -> new SimpleResponse<>(
                httpResponse.getRequest(),
                httpResponse.getStatusCode(),
                httpResponse.getHeaders(),
                binaryData)));
    }
}
