// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.verticals.agrifood.farming;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.HttpMethod;
import com.azure.core.http.llc.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;

/**
 * Initializes a new instance of the ScenesClient type.
 */
@ServiceClient(builder = FarmBeatsClientBuilder.class)
public final class ScenesClient {
    private final ScenesAsyncClient asyncClient;

    /**
     * Initializes an instance of ScenesClient client.
     * 
     * @param asyncClient The ScenesAsyncClient underneath.
     */
    ScenesClient(ScenesAsyncClient asyncClient) {
        this.asyncClient = asyncClient;
    }

    /**
     * Create a satellite data ingestion job.
     * <p><strong>Request Body Schema</strong></p>
     * <pre>{@code
     * {
     *     farmerId: String
     *     boundaryId: String
     *     startDateTime: OffsetDateTime
     *     endDateTime: OffsetDateTime
     *     provider: String(Microsoft)
     *     source: String(Sentinel_2_L2A)
     *     data: {
     *         imageNames: [
     *             String
     *         ]
     *         imageFormats: [
     *             String
     *         ]
     *         imageResolutions: [
     *             double
     *         ]
     *     }
     *     id: String
     *     status: String
     *     durationInSeconds: Double
     *     message: String
     *     createdDateTime: OffsetDateTime
     *     lastActionDateTime: OffsetDateTime
     *     startTime: OffsetDateTime
     *     endTime: OffsetDateTime
     *     name: String
     *     description: String
     *     properties: {
     *         String: Object
     *     }
     * }
     * }</pre>
     * <p><strong>Response Body Schema</strong></p>
     * <pre>{@code
     * (recursive schema, see above)
     * }</pre>
     * 
     * @param jobId JobId provided by user.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createSatelliteDataIngestionJobWithResponse(String jobId, RequestOptions options) {
        return asyncClient.createSatelliteDataIngestionJobWithResponse(jobId, options).block();
    }

    /**
     * Get a satellite data ingestion job.
     * <p><strong>Response Body Schema</strong></p>
     * <pre>{@code
     * {
     *     farmerId: String
     *     boundaryId: String
     *     startDateTime: OffsetDateTime
     *     endDateTime: OffsetDateTime
     *     provider: String(Microsoft)
     *     source: String(Sentinel_2_L2A)
     *     data: {
     *         imageNames: [
     *             String
     *         ]
     *         imageFormats: [
     *             String
     *         ]
     *         imageResolutions: [
     *             double
     *         ]
     *     }
     *     id: String
     *     status: String
     *     durationInSeconds: Double
     *     message: String
     *     createdDateTime: OffsetDateTime
     *     lastActionDateTime: OffsetDateTime
     *     startTime: OffsetDateTime
     *     endTime: OffsetDateTime
     *     name: String
     *     description: String
     *     properties: {
     *         String: Object
     *     }
     * }
     * }</pre>
     * 
     * @param jobId ID of the job.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getSatelliteDataIngestionJobDetailsWithResponse(String jobId, RequestOptions options) {
        return asyncClient.getSatelliteDataIngestionJobDetailsWithResponse(jobId, options).block();
    }

    /**
     * Downloads and returns file stream as response for the given input filePath.
     * 
     * @param filePath cloud storage path of scene file.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> downloadWithResponse(String filePath, RequestOptions options) {
        return asyncClient.downloadWithResponse(filePath, options).block();
    }

    /**
     * Create an empty DynamicRequest with the serializer and pipeline initialized for this client.
     * 
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> invoke(String url, HttpMethod httpMethod, BinaryData body, RequestOptions options) {
        return asyncClient.invoke(url, httpMethod, body, options).block();
    }
}
