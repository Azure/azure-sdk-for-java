// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.verticals.agrifood.farming;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.HttpMethod;
import com.azure.core.http.llc.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;

/**
 * Initializes a new instance of the CropsClient type.
 */
@ServiceClient(builder = FarmBeatsClientBuilder.class)
public final class CropsClient {
    private final CropsAsyncClient asyncClient;

    /**
     * Initializes an instance of CropsClient client.
     * 
     * @param asyncClient The CropsAsyncClient underneath.
     */
    CropsClient(CropsAsyncClient asyncClient) {
        this.asyncClient = asyncClient;
    }

    /**
     * Gets a specified crop resource.
     * <p><strong>Response Body Schema</strong></p>
     * <pre>{@code
     * {
     *     phenotype: String
     *     id: String
     *     eTag: String
     *     status: String
     *     createdDateTime: OffsetDateTime
     *     modifiedDateTime: OffsetDateTime
     *     name: String
     *     description: String
     *     properties: {
     *         String: Object
     *     }
     * }
     * }</pre>
     * 
     * @param cropId ID of the crop.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getWithResponse(String cropId, RequestOptions options) {
        return asyncClient.getWithResponse(cropId, options).block();
    }

    /**
     * Creates or updates a crop resource.
     * <p><strong>Request Body Schema</strong></p>
     * <pre>{@code
     * {
     *     phenotype: String
     *     id: String
     *     eTag: String
     *     status: String
     *     createdDateTime: OffsetDateTime
     *     modifiedDateTime: OffsetDateTime
     *     name: String
     *     description: String
     *     properties: {
     *         String: Object
     *     }
     * }
     * }</pre>
     * <p><strong>Response Body Schema</strong></p>
     * <pre>{@code
     * (recursive schema, see above)
     * }</pre>
     * 
     * @param cropId ID of the crop resource.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createOrUpdateWithResponse(String cropId, RequestOptions options) {
        return asyncClient.createOrUpdateWithResponse(cropId, options).block();
    }

    /**
     * Deletes Crop for given crop id.
     * 
     * @param cropId ID of crop to be deleted.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> deleteWithResponse(String cropId, RequestOptions options) {
        return asyncClient.deleteWithResponse(cropId, options).block();
    }

    /**
     * Create an empty DynamicRequest with the serializer and pipeline initialized for this client.
     * 
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> invoke(String url, HttpMethod httpMethod, BinaryData body, RequestOptions options) {
        return asyncClient.invoke(url, httpMethod, body, options).block();
    }
}
