// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.verticals.agrifood.farming;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.HttpMethod;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.llc.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.BinaryData;
import com.azure.core.util.polling.PollResult;
import com.azure.core.util.polling.PollerFactory;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.serializer.JacksonAdapter;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the FarmsAsyncClient type.
 */
@ServiceClient(builder = FarmBeatsClientBuilder.class)
public final class FarmsAsyncClient {
    private final String endpoint;

    private final String apiVersion;

    private final HttpPipeline httpPipeline;

    /**
     * Initializes an instance of FarmsAsyncClient client.
     * 
     * @param endpoint The endpoint of your FarmBeats resource (protocol and hostname, for example: https://{resourceName}.farmbeats.azure.net).
     * @param apiVersion Api Version.
     * @param httpPipeline The HTTP pipeline to send requests through.
     */
    FarmsAsyncClient(String endpoint, String apiVersion, HttpPipeline httpPipeline) {
        this.endpoint = endpoint;
        this.apiVersion = apiVersion;
        this.httpPipeline = httpPipeline;
    }

    /**
     * Gets a specified farm resource under a particular farmer.
     * <p><strong>Response Body Schema</strong></p>
     * <pre>{@code
     * {
     *     farmerId: String
     *     id: String
     *     eTag: String
     *     status: String
     *     createdDateTime: OffsetDateTime
     *     modifiedDateTime: OffsetDateTime
     *     name: String
     *     description: String
     *     properties: {
     *         String: Object
     *     }
     * }
     * }</pre>
     * 
     * @param farmerId ID of the associated farmer resource.
     * @param farmId ID of the farm resource.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getWithResponse(String farmerId, String farmId, RequestOptions options) {
        String url = "{Endpoint}/farmers/{farmerId}/farms/{farmId}";
        url = url.replace("{Endpoint}", endpoint);
        url = url.replace("{farmerId}", farmerId);
        url = url.replace("{farmId}", farmId);
        url = url + (url.contains("?") ? "&" : "?") + "api-version=" + apiVersion;
        HttpRequest request = new HttpRequest(HttpMethod.GET, url);
        request.getHeaders().set("Accept", "application/json");
        request.getHeaders().set("Content-Type", "application/json");
        if (options != null) {
            options.getRequestCallback().accept(request);
        }
        return httpPipeline.send(request)
            .flatMap(httpResponse -> BinaryData.fromFlux(httpResponse.getBody())
            .map(binaryData -> new SimpleResponse<>(httpResponse.getRequest(), httpResponse.getStatusCode(), httpResponse.getHeaders(), binaryData)));
    }

    /**
     * Creates or updates a farm resource under a particular farmer.
     * <p><strong>Request Body Schema</strong></p>
     * <pre>{@code
     * {
     *     farmerId: String
     *     id: String
     *     eTag: String
     *     status: String
     *     createdDateTime: OffsetDateTime
     *     modifiedDateTime: OffsetDateTime
     *     name: String
     *     description: String
     *     properties: {
     *         String: Object
     *     }
     * }
     * }</pre>
     * <p><strong>Response Body Schema</strong></p>
     * <pre>{@code
     * (recursive schema, see above)
     * }</pre>
     * 
     * @param farmerId ID of the associated farmer resource.
     * @param farmId ID of the farm resource.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createOrUpdateWithResponse(String farmerId, String farmId, RequestOptions options) {
        String url = "{Endpoint}/farmers/{farmerId}/farms/{farmId}";
        url = url.replace("{Endpoint}", endpoint);
        url = url.replace("{farmerId}", farmerId);
        url = url.replace("{farmId}", farmId);
        url = url + (url.contains("?") ? "&" : "?") + "api-version=" + apiVersion;
        HttpRequest request = new HttpRequest(HttpMethod.PATCH, url);
        request.getHeaders().set("Accept", "application/json");
        request.getHeaders().set("Content-Type", "application/merge-patch+json");
        if (options != null) {
            options.getRequestCallback().accept(request);
        }
        return httpPipeline.send(request)
            .flatMap(httpResponse -> BinaryData.fromFlux(httpResponse.getBody())
            .map(binaryData -> new SimpleResponse<>(httpResponse.getRequest(), httpResponse.getStatusCode(), httpResponse.getHeaders(), binaryData)));
    }

    public PollerFlux<PollResult, BinaryData> beginCreateOrUpdateWithResponse(String farmerId, String farmId, RequestOptions options) {
        return new PollerFactory<BinaryData>(new JacksonAdapter(), httpPipeline)
                .createPoller(new FarmBeatsPollingStrategy(apiVersion), () -> createOrUpdateWithResponse(farmerId, farmId, options), BinaryData.class);
    }

    /**
     * Deletes a specified farm resource under a particular farmer.
     * 
     * @param farmerId ID of the farmer.
     * @param farmId ID of the farm.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> deleteWithResponse(String farmerId, String farmId, RequestOptions options) {
        String url = "{Endpoint}/farmers/{farmerId}/farms/{farmId}";
        url = url.replace("{Endpoint}", endpoint);
        url = url.replace("{farmerId}", farmerId);
        url = url.replace("{farmId}", farmId);
        url = url + (url.contains("?") ? "&" : "?") + "api-version=" + apiVersion;
        HttpRequest request = new HttpRequest(HttpMethod.DELETE, url);
        request.getHeaders().set("Accept", "application/json");
        request.getHeaders().set("Content-Type", "application/json");
        if (options != null) {
            options.getRequestCallback().accept(request);
        }
        return httpPipeline.send(request)
            .flatMap(httpResponse -> BinaryData.fromFlux(httpResponse.getBody())
            .map(binaryData -> new SimpleResponse<>(httpResponse.getRequest(), httpResponse.getStatusCode(), httpResponse.getHeaders(), binaryData)));
    }

    /**
     * Get a cascade delete job for specified farm.
     * <p><strong>Response Body Schema</strong></p>
     * <pre>{@code
     * {
     *     farmerId: String
     *     resourceId: String
     *     resourceType: String
     *     id: String
     *     status: String
     *     durationInSeconds: Double
     *     message: String
     *     createdDateTime: OffsetDateTime
     *     lastActionDateTime: OffsetDateTime
     *     startTime: OffsetDateTime
     *     endTime: OffsetDateTime
     *     name: String
     *     description: String
     *     properties: {
     *         String: Object
     *     }
     * }
     * }</pre>
     * 
     * @param jobId ID of the job.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getCascadeDeleteJobDetailsWithResponse(String jobId, RequestOptions options) {
        String url = "{Endpoint}/farms/cascade-delete/{jobId}";
        url = url.replace("{Endpoint}", endpoint);
        url = url.replace("{jobId}", jobId);
        url = url + (url.contains("?") ? "&" : "?") + "api-version=" + apiVersion;
        HttpRequest request = new HttpRequest(HttpMethod.GET, url);
        request.getHeaders().set("Accept", "application/json");
        request.getHeaders().set("Content-Type", "application/json");
        if (options != null) {
            options.getRequestCallback().accept(request);
        }
        return httpPipeline.send(request)
            .flatMap(httpResponse -> BinaryData.fromFlux(httpResponse.getBody())
            .map(binaryData -> new SimpleResponse<>(httpResponse.getRequest(), httpResponse.getStatusCode(), httpResponse.getHeaders(), binaryData)));
    }

    /**
     * Create a cascade delete job for specified farm.
     * <p><strong>Response Body Schema</strong></p>
     * <pre>{@code
     * {
     *     farmerId: String
     *     resourceId: String
     *     resourceType: String
     *     id: String
     *     status: String
     *     durationInSeconds: Double
     *     message: String
     *     createdDateTime: OffsetDateTime
     *     lastActionDateTime: OffsetDateTime
     *     startTime: OffsetDateTime
     *     endTime: OffsetDateTime
     *     name: String
     *     description: String
     *     properties: {
     *         String: Object
     *     }
     * }
     * }</pre>
     * 
     * @param jobId Job ID supplied by end user.
     * @param farmerId ID of the associated farmer.
     * @param farmId ID of the farm to be deleted.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createCascadeDeleteJobWithResponse(String jobId, String farmerId, String farmId, RequestOptions options) {
        String url = "{Endpoint}/farms/cascade-delete/{jobId}";
        url = url.replace("{Endpoint}", endpoint);
        url = url.replace("{jobId}", jobId);
        url = url + (url.contains("?") ? "&" : "?") + "farmerId=" + farmerId;
        url = url + (url.contains("?") ? "&" : "?") + "farmId=" + farmId;
        url = url + (url.contains("?") ? "&" : "?") + "api-version=" + apiVersion;
        HttpRequest request = new HttpRequest(HttpMethod.PUT, url);
        request.getHeaders().set("Accept", "application/json");
        request.getHeaders().set("Content-Type", "application/json");
        if (options != null) {
            options.getRequestCallback().accept(request);
        }
        return httpPipeline.send(request)
            .flatMap(httpResponse -> BinaryData.fromFlux(httpResponse.getBody())
            .map(binaryData -> new SimpleResponse<>(httpResponse.getRequest(), httpResponse.getStatusCode(), httpResponse.getHeaders(), binaryData)));
    }

    /**
     * Create an empty DynamicRequest with the serializer and pipeline initialized for this client.
     * 
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> invoke(String url, HttpMethod httpMethod, BinaryData body, RequestOptions options) {
        HttpRequest request = new HttpRequest(httpMethod, url);
        request.setBody(body.toBytes());
        if (options != null) {
            options.getRequestCallback().accept(request);
        }
        return httpPipeline.send(request)
            .flatMap(httpResponse -> BinaryData.fromFlux(httpResponse.getBody())
            .map(binaryData -> new SimpleResponse<>(
                httpResponse.getRequest(),
                httpResponse.getStatusCode(),
                httpResponse.getHeaders(),
                binaryData)));
    }
}
