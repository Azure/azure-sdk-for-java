// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.verticals.agrifood.farming;

import com.azure.core.annotation.ServiceClientBuilder;
import com.azure.core.credential.TokenCredential;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.policy.BearerTokenAuthenticationPolicy;
import com.azure.core.http.policy.CookiePolicy;
import com.azure.core.http.policy.HttpLogOptions;
import com.azure.core.http.policy.HttpLoggingPolicy;
import com.azure.core.http.policy.HttpPipelinePolicy;
import com.azure.core.http.policy.HttpPolicyProviders;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.util.Configuration;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * A builder for creating a new instance of the FarmBeatsClient type.
 */
@ServiceClientBuilder(serviceClients = {ApplicationDataClient.class, AttachmentsClient.class, BoundariesClient.class, CropsClient.class, CropVarietiesClient.class, FarmersClient.class, FarmOperationsClient.class, FarmsClient.class, FieldsClient.class, HarvestDataClient.class, ImageProcessingClient.class, OAuthProvidersClient.class, OAuthTokensClient.class, PlantingDataClient.class, ScenesClient.class, SeasonalFieldsClient.class, SeasonsClient.class, TillageDataClient.class, WeatherClient.class, ApplicationDataAsyncClient.class, AttachmentsAsyncClient.class, BoundariesAsyncClient.class, CropsAsyncClient.class, CropVarietiesAsyncClient.class, FarmersAsyncClient.class, FarmOperationsAsyncClient.class, FarmsAsyncClient.class, FieldsAsyncClient.class, HarvestDataAsyncClient.class, ImageProcessingAsyncClient.class, OAuthProvidersAsyncClient.class, OAuthTokensAsyncClient.class, PlantingDataAsyncClient.class, ScenesAsyncClient.class, SeasonalFieldsAsyncClient.class, SeasonsAsyncClient.class, TillageDataAsyncClient.class, WeatherAsyncClient.class})
public final class FarmBeatsClientBuilder {
    private static final String SDK_NAME = "name";

    private static final String SDK_VERSION = "version";

    static final String[] DEFAULT_SCOPES = new String[] {"https://farmbeats-dogfood.azure.net/.default"};

    private final Map<String, String> properties = new HashMap<>();

    /**
     * Create an instance of the FarmBeatsClientBuilder.
     */
    public FarmBeatsClientBuilder() {
        this.pipelinePolicies = new ArrayList<>();
    }

    /*
     * The endpoint of your FarmBeats resource (protocol and hostname, for
     * example: https://{resourceName}.farmbeats.azure.net).
     */
    private String endpoint;

    /**
     * Sets The endpoint of your FarmBeats resource (protocol and hostname, for example: https://{resourceName}.farmbeats.azure.net).
     * 
     * @param endpoint the endpoint value.
     * @return the FarmBeatsClientBuilder.
     */
    public FarmBeatsClientBuilder endpoint(String endpoint) {
        this.endpoint = endpoint;
        return this;
    }

    /*
     * Api Version
     */
    private String apiVersion;

    /**
     * Sets Api Version.
     * 
     * @param apiVersion the apiVersion value.
     * @return the FarmBeatsClientBuilder.
     */
    public FarmBeatsClientBuilder apiVersion(String apiVersion) {
        this.apiVersion = apiVersion;
        return this;
    }

    /*
     * The HTTP pipeline to send requests through
     */
    private HttpPipeline pipeline;

    /**
     * Sets The HTTP pipeline to send requests through.
     * 
     * @param pipeline the pipeline value.
     * @return the FarmBeatsClientBuilder.
     */
    public FarmBeatsClientBuilder pipeline(HttpPipeline pipeline) {
        this.pipeline = pipeline;
        return this;
    }

    /*
     * The HTTP client used to send the request.
     */
    private HttpClient httpClient;

    /**
     * Sets The HTTP client used to send the request.
     * 
     * @param httpClient the httpClient value.
     * @return the FarmBeatsClientBuilder.
     */
    public FarmBeatsClientBuilder httpClient(HttpClient httpClient) {
        this.httpClient = httpClient;
        return this;
    }

    /*
     * The configuration store that is used during construction of the service
     * client.
     */
    private Configuration configuration;

    /**
     * Sets The configuration store that is used during construction of the service client.
     * 
     * @param configuration the configuration value.
     * @return the FarmBeatsClientBuilder.
     */
    public FarmBeatsClientBuilder configuration(Configuration configuration) {
        this.configuration = configuration;
        return this;
    }

    /*
     * The TokenCredential used for authentication.
     */
    private TokenCredential tokenCredential;

    /**
     * Sets The TokenCredential used for authentication.
     * 
     * @param tokenCredential the tokenCredential value.
     * @return the FarmBeatsClientBuilder.
     */
    public FarmBeatsClientBuilder credential(TokenCredential tokenCredential) {
        this.tokenCredential = tokenCredential;
        return this;
    }

    /*
     * The logging configuration for HTTP requests and responses.
     */
    private HttpLogOptions httpLogOptions;

    /**
     * Sets The logging configuration for HTTP requests and responses.
     * 
     * @param httpLogOptions the httpLogOptions value.
     * @return the FarmBeatsClientBuilder.
     */
    public FarmBeatsClientBuilder httpLogOptions(HttpLogOptions httpLogOptions) {
        this.httpLogOptions = httpLogOptions;
        return this;
    }

    /*
     * The retry policy that will attempt to retry failed requests, if
     * applicable.
     */
    private RetryPolicy retryPolicy;

    /**
     * Sets The retry policy that will attempt to retry failed requests, if applicable.
     * 
     * @param retryPolicy the retryPolicy value.
     * @return the FarmBeatsClientBuilder.
     */
    public FarmBeatsClientBuilder retryPolicy(RetryPolicy retryPolicy) {
        this.retryPolicy = retryPolicy;
        return this;
    }

    /*
     * The list of Http pipeline policies to add.
     */
    private final List<HttpPipelinePolicy> pipelinePolicies;

    /**
     * Adds a custom Http pipeline policy.
     * 
     * @param customPolicy The custom Http pipeline policy to add.
     * @return the FarmBeatsClientBuilder.
     */
    public FarmBeatsClientBuilder addPolicy(HttpPipelinePolicy customPolicy) {
        pipelinePolicies.add(customPolicy);
        return this;
    }

    private HttpPipeline createHttpPipeline() {
        Configuration buildConfiguration = (configuration == null) ? Configuration.getGlobalConfiguration() : configuration;
        if (httpLogOptions == null) {
            httpLogOptions = new HttpLogOptions();
        }
        List<HttpPipelinePolicy> policies = new ArrayList<>();
        if (tokenCredential != null) {
            policies.add(new BearerTokenAuthenticationPolicy(tokenCredential, DEFAULT_SCOPES));
        }
        String clientName = properties.getOrDefault(SDK_NAME, "UnknownName");
        String clientVersion = properties.getOrDefault(SDK_VERSION, "UnknownVersion");
        policies.add(new UserAgentPolicy(httpLogOptions.getApplicationId(), clientName, clientVersion, buildConfiguration));
        HttpPolicyProviders.addBeforeRetryPolicies(policies);
        policies.add(retryPolicy == null ? new RetryPolicy() : retryPolicy);
        policies.add(new CookiePolicy());
        policies.addAll(this.pipelinePolicies);
        HttpPolicyProviders.addAfterRetryPolicies(policies);
        policies.add(new HttpLoggingPolicy(httpLogOptions));
        HttpPipeline httpPipeline = new HttpPipelineBuilder().policies(policies.toArray(new HttpPipelinePolicy[0])).httpClient(httpClient).build();
        return httpPipeline;
    }

    /**
     * Builds an instance of ApplicationDataAsyncClient low level client.
     * 
     * @return an instance of ApplicationDataAsyncClient.
     */
    public ApplicationDataAsyncClient buildApplicationDataAsyncClient() {
        if (apiVersion == null) {
            this.apiVersion = "2021-03-31-preview";
        }
        if (pipeline == null) {
            this.pipeline = createHttpPipeline();
        }
        ApplicationDataAsyncClient client = new ApplicationDataAsyncClient(endpoint, apiVersion, pipeline);
        return client;
    }

    /**
     * Builds an instance of AttachmentsAsyncClient low level client.
     * 
     * @return an instance of AttachmentsAsyncClient.
     */
    public AttachmentsAsyncClient buildAttachmentsAsyncClient() {
        if (apiVersion == null) {
            this.apiVersion = "2021-03-31-preview";
        }
        if (pipeline == null) {
            this.pipeline = createHttpPipeline();
        }
        AttachmentsAsyncClient client = new AttachmentsAsyncClient(endpoint, apiVersion, pipeline);
        return client;
    }

    /**
     * Builds an instance of BoundariesAsyncClient low level client.
     * 
     * @return an instance of BoundariesAsyncClient.
     */
    public BoundariesAsyncClient buildBoundariesAsyncClient() {
        if (apiVersion == null) {
            this.apiVersion = "2021-03-31-preview";
        }
        if (pipeline == null) {
            this.pipeline = createHttpPipeline();
        }
        BoundariesAsyncClient client = new BoundariesAsyncClient(endpoint, apiVersion, pipeline);
        return client;
    }

    /**
     * Builds an instance of CropsAsyncClient low level client.
     * 
     * @return an instance of CropsAsyncClient.
     */
    public CropsAsyncClient buildCropsAsyncClient() {
        if (apiVersion == null) {
            this.apiVersion = "2021-03-31-preview";
        }
        if (pipeline == null) {
            this.pipeline = createHttpPipeline();
        }
        CropsAsyncClient client = new CropsAsyncClient(endpoint, apiVersion, pipeline);
        return client;
    }

    /**
     * Builds an instance of CropVarietiesAsyncClient low level client.
     * 
     * @return an instance of CropVarietiesAsyncClient.
     */
    public CropVarietiesAsyncClient buildCropVarietiesAsyncClient() {
        if (apiVersion == null) {
            this.apiVersion = "2021-03-31-preview";
        }
        if (pipeline == null) {
            this.pipeline = createHttpPipeline();
        }
        CropVarietiesAsyncClient client = new CropVarietiesAsyncClient(endpoint, apiVersion, pipeline);
        return client;
    }

    /**
     * Builds an instance of FarmersAsyncClient low level client.
     * 
     * @return an instance of FarmersAsyncClient.
     */
    public FarmersAsyncClient buildFarmersAsyncClient() {
        if (apiVersion == null) {
            this.apiVersion = "2021-03-31-preview";
        }
        if (pipeline == null) {
            this.pipeline = createHttpPipeline();
        }
        FarmersAsyncClient client = new FarmersAsyncClient(endpoint, apiVersion, pipeline);
        return client;
    }

    /**
     * Builds an instance of FarmOperationsAsyncClient low level client.
     * 
     * @return an instance of FarmOperationsAsyncClient.
     */
    public FarmOperationsAsyncClient buildFarmOperationsAsyncClient() {
        if (apiVersion == null) {
            this.apiVersion = "2021-03-31-preview";
        }
        if (pipeline == null) {
            this.pipeline = createHttpPipeline();
        }
        FarmOperationsAsyncClient client = new FarmOperationsAsyncClient(endpoint, apiVersion, pipeline);
        return client;
    }

    /**
     * Builds an instance of FarmsAsyncClient low level client.
     * 
     * @return an instance of FarmsAsyncClient.
     */
    public FarmsAsyncClient buildFarmsAsyncClient() {
        if (apiVersion == null) {
            this.apiVersion = "2021-03-31-preview";
        }
        if (pipeline == null) {
            this.pipeline = createHttpPipeline();
        }
        FarmsAsyncClient client = new FarmsAsyncClient(endpoint, apiVersion, pipeline);
        return client;
    }

    /**
     * Builds an instance of FieldsAsyncClient low level client.
     * 
     * @return an instance of FieldsAsyncClient.
     */
    public FieldsAsyncClient buildFieldsAsyncClient() {
        if (apiVersion == null) {
            this.apiVersion = "2021-03-31-preview";
        }
        if (pipeline == null) {
            this.pipeline = createHttpPipeline();
        }
        FieldsAsyncClient client = new FieldsAsyncClient(endpoint, apiVersion, pipeline);
        return client;
    }

    /**
     * Builds an instance of HarvestDataAsyncClient low level client.
     * 
     * @return an instance of HarvestDataAsyncClient.
     */
    public HarvestDataAsyncClient buildHarvestDataAsyncClient() {
        if (apiVersion == null) {
            this.apiVersion = "2021-03-31-preview";
        }
        if (pipeline == null) {
            this.pipeline = createHttpPipeline();
        }
        HarvestDataAsyncClient client = new HarvestDataAsyncClient(endpoint, apiVersion, pipeline);
        return client;
    }

    /**
     * Builds an instance of ImageProcessingAsyncClient low level client.
     * 
     * @return an instance of ImageProcessingAsyncClient.
     */
    public ImageProcessingAsyncClient buildImageProcessingAsyncClient() {
        if (apiVersion == null) {
            this.apiVersion = "2021-03-31-preview";
        }
        if (pipeline == null) {
            this.pipeline = createHttpPipeline();
        }
        ImageProcessingAsyncClient client = new ImageProcessingAsyncClient(endpoint, apiVersion, pipeline);
        return client;
    }

    /**
     * Builds an instance of OAuthProvidersAsyncClient low level client.
     * 
     * @return an instance of OAuthProvidersAsyncClient.
     */
    public OAuthProvidersAsyncClient buildOAuthProvidersAsyncClient() {
        if (apiVersion == null) {
            this.apiVersion = "2021-03-31-preview";
        }
        if (pipeline == null) {
            this.pipeline = createHttpPipeline();
        }
        OAuthProvidersAsyncClient client = new OAuthProvidersAsyncClient(endpoint, apiVersion, pipeline);
        return client;
    }

    /**
     * Builds an instance of OAuthTokensAsyncClient low level client.
     * 
     * @return an instance of OAuthTokensAsyncClient.
     */
    public OAuthTokensAsyncClient buildOAuthTokensAsyncClient() {
        if (apiVersion == null) {
            this.apiVersion = "2021-03-31-preview";
        }
        if (pipeline == null) {
            this.pipeline = createHttpPipeline();
        }
        OAuthTokensAsyncClient client = new OAuthTokensAsyncClient(endpoint, apiVersion, pipeline);
        return client;
    }

    /**
     * Builds an instance of PlantingDataAsyncClient low level client.
     * 
     * @return an instance of PlantingDataAsyncClient.
     */
    public PlantingDataAsyncClient buildPlantingDataAsyncClient() {
        if (apiVersion == null) {
            this.apiVersion = "2021-03-31-preview";
        }
        if (pipeline == null) {
            this.pipeline = createHttpPipeline();
        }
        PlantingDataAsyncClient client = new PlantingDataAsyncClient(endpoint, apiVersion, pipeline);
        return client;
    }

    /**
     * Builds an instance of ScenesAsyncClient low level client.
     * 
     * @return an instance of ScenesAsyncClient.
     */
    public ScenesAsyncClient buildScenesAsyncClient() {
        if (apiVersion == null) {
            this.apiVersion = "2021-03-31-preview";
        }
        if (pipeline == null) {
            this.pipeline = createHttpPipeline();
        }
        ScenesAsyncClient client = new ScenesAsyncClient(endpoint, apiVersion, pipeline);
        return client;
    }

    /**
     * Builds an instance of SeasonalFieldsAsyncClient low level client.
     * 
     * @return an instance of SeasonalFieldsAsyncClient.
     */
    public SeasonalFieldsAsyncClient buildSeasonalFieldsAsyncClient() {
        if (apiVersion == null) {
            this.apiVersion = "2021-03-31-preview";
        }
        if (pipeline == null) {
            this.pipeline = createHttpPipeline();
        }
        SeasonalFieldsAsyncClient client = new SeasonalFieldsAsyncClient(endpoint, apiVersion, pipeline);
        return client;
    }

    /**
     * Builds an instance of SeasonsAsyncClient low level client.
     * 
     * @return an instance of SeasonsAsyncClient.
     */
    public SeasonsAsyncClient buildSeasonsAsyncClient() {
        if (apiVersion == null) {
            this.apiVersion = "2021-03-31-preview";
        }
        if (pipeline == null) {
            this.pipeline = createHttpPipeline();
        }
        SeasonsAsyncClient client = new SeasonsAsyncClient(endpoint, apiVersion, pipeline);
        return client;
    }

    /**
     * Builds an instance of TillageDataAsyncClient low level client.
     * 
     * @return an instance of TillageDataAsyncClient.
     */
    public TillageDataAsyncClient buildTillageDataAsyncClient() {
        if (apiVersion == null) {
            this.apiVersion = "2021-03-31-preview";
        }
        if (pipeline == null) {
            this.pipeline = createHttpPipeline();
        }
        TillageDataAsyncClient client = new TillageDataAsyncClient(endpoint, apiVersion, pipeline);
        return client;
    }

    /**
     * Builds an instance of WeatherAsyncClient low level client.
     * 
     * @return an instance of WeatherAsyncClient.
     */
    public WeatherAsyncClient buildWeatherAsyncClient() {
        if (apiVersion == null) {
            this.apiVersion = "2021-03-31-preview";
        }
        if (pipeline == null) {
            this.pipeline = createHttpPipeline();
        }
        WeatherAsyncClient client = new WeatherAsyncClient(endpoint, apiVersion, pipeline);
        return client;
    }

    /**
     * Builds an instance of ApplicationDataClient low level client.
     * 
     * @return an instance of ApplicationDataClient.
     */
    public ApplicationDataClient buildApplicationDataClient() {
        return new ApplicationDataClient(buildApplicationDataAsyncClient());
    }

    /**
     * Builds an instance of AttachmentsClient low level client.
     * 
     * @return an instance of AttachmentsClient.
     */
    public AttachmentsClient buildAttachmentsClient() {
        return new AttachmentsClient(buildAttachmentsAsyncClient());
    }

    /**
     * Builds an instance of BoundariesClient low level client.
     * 
     * @return an instance of BoundariesClient.
     */
    public BoundariesClient buildBoundariesClient() {
        return new BoundariesClient(buildBoundariesAsyncClient());
    }

    /**
     * Builds an instance of CropsClient low level client.
     * 
     * @return an instance of CropsClient.
     */
    public CropsClient buildCropsClient() {
        return new CropsClient(buildCropsAsyncClient());
    }

    /**
     * Builds an instance of CropVarietiesClient low level client.
     * 
     * @return an instance of CropVarietiesClient.
     */
    public CropVarietiesClient buildCropVarietiesClient() {
        return new CropVarietiesClient(buildCropVarietiesAsyncClient());
    }

    /**
     * Builds an instance of FarmersClient low level client.
     * 
     * @return an instance of FarmersClient.
     */
    public FarmersClient buildFarmersClient() {
        return new FarmersClient(buildFarmersAsyncClient());
    }

    /**
     * Builds an instance of FarmOperationsClient low level client.
     * 
     * @return an instance of FarmOperationsClient.
     */
    public FarmOperationsClient buildFarmOperationsClient() {
        return new FarmOperationsClient(buildFarmOperationsAsyncClient());
    }

    /**
     * Builds an instance of FarmsClient low level client.
     * 
     * @return an instance of FarmsClient.
     */
    public FarmsClient buildFarmsClient() {
        return new FarmsClient(buildFarmsAsyncClient());
    }

    /**
     * Builds an instance of FieldsClient low level client.
     * 
     * @return an instance of FieldsClient.
     */
    public FieldsClient buildFieldsClient() {
        return new FieldsClient(buildFieldsAsyncClient());
    }

    /**
     * Builds an instance of HarvestDataClient low level client.
     * 
     * @return an instance of HarvestDataClient.
     */
    public HarvestDataClient buildHarvestDataClient() {
        return new HarvestDataClient(buildHarvestDataAsyncClient());
    }

    /**
     * Builds an instance of ImageProcessingClient low level client.
     * 
     * @return an instance of ImageProcessingClient.
     */
    public ImageProcessingClient buildImageProcessingClient() {
        return new ImageProcessingClient(buildImageProcessingAsyncClient());
    }

    /**
     * Builds an instance of OAuthProvidersClient low level client.
     * 
     * @return an instance of OAuthProvidersClient.
     */
    public OAuthProvidersClient buildOAuthProvidersClient() {
        return new OAuthProvidersClient(buildOAuthProvidersAsyncClient());
    }

    /**
     * Builds an instance of OAuthTokensClient low level client.
     * 
     * @return an instance of OAuthTokensClient.
     */
    public OAuthTokensClient buildOAuthTokensClient() {
        return new OAuthTokensClient(buildOAuthTokensAsyncClient());
    }

    /**
     * Builds an instance of PlantingDataClient low level client.
     * 
     * @return an instance of PlantingDataClient.
     */
    public PlantingDataClient buildPlantingDataClient() {
        return new PlantingDataClient(buildPlantingDataAsyncClient());
    }

    /**
     * Builds an instance of ScenesClient low level client.
     * 
     * @return an instance of ScenesClient.
     */
    public ScenesClient buildScenesClient() {
        return new ScenesClient(buildScenesAsyncClient());
    }

    /**
     * Builds an instance of SeasonalFieldsClient low level client.
     * 
     * @return an instance of SeasonalFieldsClient.
     */
    public SeasonalFieldsClient buildSeasonalFieldsClient() {
        return new SeasonalFieldsClient(buildSeasonalFieldsAsyncClient());
    }

    /**
     * Builds an instance of SeasonsClient low level client.
     * 
     * @return an instance of SeasonsClient.
     */
    public SeasonsClient buildSeasonsClient() {
        return new SeasonsClient(buildSeasonsAsyncClient());
    }

    /**
     * Builds an instance of TillageDataClient low level client.
     * 
     * @return an instance of TillageDataClient.
     */
    public TillageDataClient buildTillageDataClient() {
        return new TillageDataClient(buildTillageDataAsyncClient());
    }

    /**
     * Builds an instance of WeatherClient low level client.
     * 
     * @return an instance of WeatherClient.
     */
    public WeatherClient buildWeatherClient() {
        return new WeatherClient(buildWeatherAsyncClient());
    }
}
