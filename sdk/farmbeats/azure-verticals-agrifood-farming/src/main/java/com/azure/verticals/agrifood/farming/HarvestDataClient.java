// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.verticals.agrifood.farming;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.HttpMethod;
import com.azure.core.http.llc.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;

/**
 * Initializes a new instance of the HarvestDataClient type.
 */
@ServiceClient(builder = FarmBeatsClientBuilder.class)
public final class HarvestDataClient {
    private final HarvestDataAsyncClient asyncClient;

    /**
     * Initializes an instance of HarvestDataClient client.
     * 
     * @param asyncClient The HarvestDataAsyncClient underneath.
     */
    HarvestDataClient(HarvestDataAsyncClient asyncClient) {
        this.asyncClient = asyncClient;
    }

    /**
     * Get a specified harvest data resource under a particular farmer.
     * <p><strong>Response Body Schema</strong></p>
     * <pre>{@code
     * {
     *     totalYield: {
     *         unit: String
     *         value: Double
     *     }
     *     avgYield: (recursive schema, see avgYield above)
     *     totalWetMass: (recursive schema, see totalWetMass above)
     *     avgWetMass: (recursive schema, see avgWetMass above)
     *     avgMoisture: (recursive schema, see avgMoisture above)
     *     avgSpeed: (recursive schema, see avgSpeed above)
     *     harvestProductDetails: [
     *         {
     *             productName: String
     *             area: (recursive schema, see area above)
     *             totalYield: (recursive schema, see totalYield above)
     *             avgYield: (recursive schema, see avgYield above)
     *             avgMoisture: (recursive schema, see avgMoisture above)
     *             totalWetMass: (recursive schema, see totalWetMass above)
     *             avgWetMass: (recursive schema, see avgWetMass above)
     *         }
     *     ]
     *     area: (recursive schema, see area above)
     *     source: String
     *     operationModifiedDateTime: OffsetDateTime
     *     operationStartDateTime: OffsetDateTime
     *     operationEndDateTime: OffsetDateTime
     *     attachmentsLink: String
     *     associatedBoundaryId: String
     *     operationBoundaryId: String
     *     farmerId: String
     *     id: String
     *     eTag: String
     *     status: String
     *     createdDateTime: OffsetDateTime
     *     modifiedDateTime: OffsetDateTime
     *     name: String
     *     description: String
     *     properties: {
     *         String: Object
     *     }
     * }
     * }</pre>
     * 
     * @param farmerId ID of the associated farmer resource.
     * @param harvestDataId ID of the harvest data resource.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getWithResponse(String farmerId, String harvestDataId, RequestOptions options) {
        return asyncClient.getWithResponse(farmerId, harvestDataId, options).block();
    }

    /**
     * Creates or updates harvest data resource under a particular farmer.
     * <p><strong>Request Body Schema</strong></p>
     * <pre>{@code
     * {
     *     totalYield: {
     *         unit: String
     *         value: Double
     *     }
     *     avgYield: (recursive schema, see avgYield above)
     *     totalWetMass: (recursive schema, see totalWetMass above)
     *     avgWetMass: (recursive schema, see avgWetMass above)
     *     avgMoisture: (recursive schema, see avgMoisture above)
     *     avgSpeed: (recursive schema, see avgSpeed above)
     *     harvestProductDetails: [
     *         {
     *             productName: String
     *             area: (recursive schema, see area above)
     *             totalYield: (recursive schema, see totalYield above)
     *             avgYield: (recursive schema, see avgYield above)
     *             avgMoisture: (recursive schema, see avgMoisture above)
     *             totalWetMass: (recursive schema, see totalWetMass above)
     *             avgWetMass: (recursive schema, see avgWetMass above)
     *         }
     *     ]
     *     area: (recursive schema, see area above)
     *     source: String
     *     operationModifiedDateTime: OffsetDateTime
     *     operationStartDateTime: OffsetDateTime
     *     operationEndDateTime: OffsetDateTime
     *     attachmentsLink: String
     *     associatedBoundaryId: String
     *     operationBoundaryId: String
     *     farmerId: String
     *     id: String
     *     eTag: String
     *     status: String
     *     createdDateTime: OffsetDateTime
     *     modifiedDateTime: OffsetDateTime
     *     name: String
     *     description: String
     *     properties: {
     *         String: Object
     *     }
     * }
     * }</pre>
     * <p><strong>Response Body Schema</strong></p>
     * <pre>{@code
     * (recursive schema, see above)
     * }</pre>
     * 
     * @param farmerId ID of the farmer.
     * @param harvestDataId ID of the harvest data resource.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createOrUpdateWithResponse(String farmerId, String harvestDataId, RequestOptions options) {
        return asyncClient.createOrUpdateWithResponse(farmerId, harvestDataId, options).block();
    }

    /**
     * Deletes a specified harvest data resource under a particular farmer.
     * 
     * @param farmerId ID of the associated farmer resource.
     * @param harvestDataId ID of the harvest data.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> deleteWithResponse(String farmerId, String harvestDataId, RequestOptions options) {
        return asyncClient.deleteWithResponse(farmerId, harvestDataId, options).block();
    }

    /**
     * Create an empty DynamicRequest with the serializer and pipeline initialized for this client.
     * 
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> invoke(String url, HttpMethod httpMethod, BinaryData body, RequestOptions options) {
        return asyncClient.invoke(url, httpMethod, body, options).block();
    }
}
