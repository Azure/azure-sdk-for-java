// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.frontdoor.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.frontdoor.fluent.models.FrontDoorProperties;
import com.azure.resourcemanager.frontdoor.fluent.models.FrontendEndpointInner;
import com.azure.resourcemanager.frontdoor.models.BackendPool;
import com.azure.resourcemanager.frontdoor.models.BackendPoolsSettings;
import com.azure.resourcemanager.frontdoor.models.EnforceCertificateNameCheckEnabledState;
import com.azure.resourcemanager.frontdoor.models.FrontDoorEnabledState;
import com.azure.resourcemanager.frontdoor.models.FrontDoorHealthProbeMethod;
import com.azure.resourcemanager.frontdoor.models.FrontDoorProtocol;
import com.azure.resourcemanager.frontdoor.models.HealthProbeEnabled;
import com.azure.resourcemanager.frontdoor.models.HealthProbeSettingsModel;
import com.azure.resourcemanager.frontdoor.models.LoadBalancingSettingsModel;
import com.azure.resourcemanager.frontdoor.models.RoutingRule;
import com.azure.resourcemanager.frontdoor.models.RoutingRuleEnabledState;
import com.azure.resourcemanager.frontdoor.models.SessionAffinityEnabledState;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class FrontDoorPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        FrontDoorProperties model =
            BinaryData
                .fromString(
                    "{\"resourceState\":\"Creating\",\"provisioningState\":\"aex\",\"cname\":\"vfadmws\",\"frontdoorId\":\"r\",\"rulesEngines\":[{\"properties\":{\"resourceState\":\"Disabling\",\"rules\":[]},\"id\":\"mzlfmisgwb\",\"name\":\"b\",\"type\":\"e\"},{\"properties\":{\"resourceState\":\"Disabled\",\"rules\":[]},\"id\":\"zbaliourqha\",\"name\":\"auhashsfwx\",\"type\":\"sowzxcugi\"}],\"friendlyName\":\"ooxdjebwpuc\",\"routingRules\":[{\"properties\":{\"resourceState\":\"Creating\",\"frontendEndpoints\":[],\"acceptedProtocols\":[],\"patternsToMatch\":[],\"enabledState\":\"Enabled\"},\"name\":\"yhz\",\"type\":\"uojgj\",\"id\":\"jueiotwmcdytd\"},{\"properties\":{\"resourceState\":\"Disabled\",\"frontendEndpoints\":[],\"acceptedProtocols\":[],\"patternsToMatch\":[],\"enabledState\":\"Disabled\"},\"name\":\"gxhnisk\",\"type\":\"bkpyc\",\"id\":\"lwn\"},{\"properties\":{\"resourceState\":\"Disabling\",\"frontendEndpoints\":[],\"acceptedProtocols\":[],\"patternsToMatch\":[],\"enabledState\":\"Enabled\"},\"name\":\"zbtd\",\"type\":\"ujznb\",\"id\":\"ow\"},{\"properties\":{\"resourceState\":\"Deleting\",\"frontendEndpoints\":[],\"acceptedProtocols\":[],\"patternsToMatch\":[],\"enabledState\":\"Disabled\"},\"name\":\"pjmkhfxobbc\",\"type\":\"s\",\"id\":\"jriplrbpbewtghf\"}],\"loadBalancingSettings\":[{\"properties\":{\"resourceState\":\"Creating\",\"sampleSize\":1261477123,\"successfulSamplesRequired\":1623747079,\"additionalLatencyMilliseconds\":932562427},\"name\":\"jkbegibtnmxiebww\",\"type\":\"oayqc\",\"id\":\"rtzju\"},{\"properties\":{\"resourceState\":\"Creating\",\"sampleSize\":1773507503,\"successfulSamplesRequired\":957944639,\"additionalLatencyMilliseconds\":1672254683},\"name\":\"gmtsavjcbpwxqpsr\",\"type\":\"ftguv\",\"id\":\"uhprwmdyvxqt\"},{\"properties\":{\"resourceState\":\"Enabling\",\"sampleSize\":1013122573,\"successfulSamplesRequired\":724820131,\"additionalLatencyMilliseconds\":997642669},\"name\":\"exrmcqibycnojvk\",\"type\":\"e\",\"id\":\"sgzvahapjyzhpv\"}],\"healthProbeSettings\":[{\"properties\":{\"resourceState\":\"Enabling\",\"path\":\"xdjzlmwlxk\",\"protocol\":\"Https\",\"intervalInSeconds\":1476273747,\"healthProbeMethod\":\"HEAD\",\"enabledState\":\"Disabled\"},\"name\":\"jvzunluthnnp\",\"type\":\"xipeilpjzuaejx\",\"id\":\"ltskzbbtd\"},{\"properties\":{\"resourceState\":\"Creating\",\"path\":\"ekg\",\"protocol\":\"Http\",\"intervalInSeconds\":311434030,\"healthProbeMethod\":\"GET\",\"enabledState\":\"Enabled\"},\"name\":\"sjyofdx\",\"type\":\"us\",\"id\":\"touwaboekqv\"},{\"properties\":{\"resourceState\":\"Enabling\",\"path\":\"mvb\",\"protocol\":\"Https\",\"intervalInSeconds\":1739794958,\"healthProbeMethod\":\"GET\",\"enabledState\":\"Disabled\"},\"name\":\"aalnjixi\",\"type\":\"yaw\",\"id\":\"yaqcslyjpkiidz\"},{\"properties\":{\"resourceState\":\"Disabling\",\"path\":\"eli\",\"protocol\":\"Http\",\"intervalInSeconds\":417791826,\"healthProbeMethod\":\"HEAD\",\"enabledState\":\"Enabled\"},\"name\":\"bnxknalaulppg\",\"type\":\"tpnapnyiropuhpig\",\"id\":\"gylgqgitxmedjvcs\"}],\"backendPools\":[{\"properties\":{\"resourceState\":\"Disabled\",\"backends\":[]},\"name\":\"zhxgktrmgucn\",\"type\":\"kteo\",\"id\":\"lwptfdy\"}],\"frontendEndpoints\":[{\"properties\":{\"resourceState\":\"Deleting\",\"customHttpsProvisioningState\":\"Disabled\",\"customHttpsProvisioningSubstate\":\"SubmittingDomainControlValidationRequest\",\"hostName\":\"fqrhhuaopppc\",\"sessionAffinityEnabledState\":\"Disabled\",\"sessionAffinityTtlSeconds\":472962562},\"name\":\"dahzxctobg\",\"type\":\"dmoizpostmg\",\"id\":\"fbunrmfqjhhk\"},{\"properties\":{\"resourceState\":\"Disabling\",\"customHttpsProvisioningState\":\"Enabled\",\"customHttpsProvisioningSubstate\":\"DeletingCertificate\",\"hostName\":\"xjyngudivk\",\"sessionAffinityEnabledState\":\"Enabled\",\"sessionAffinityTtlSeconds\":1042702068},\"name\":\"zvszj\",\"type\":\"uvjfdxxive\",\"id\":\"t\"},{\"properties\":{\"resourceState\":\"Disabled\",\"customHttpsProvisioningState\":\"Failed\",\"customHttpsProvisioningSubstate\":\"DomainControlValidationRequestTimedOut\",\"hostName\":\"bxvwv\",\"sessionAffinityEnabledState\":\"Enabled\",\"sessionAffinityTtlSeconds\":45805707},\"name\":\"sfxobl\",\"type\":\"k\",\"id\":\"mpew\"}],\"backendPoolsSettings\":{\"enforceCertificateNameCheck\":\"Disabled\",\"sendRecvTimeoutSeconds\":1359376561},\"enabledState\":\"Enabled\"}")
                .toObject(FrontDoorProperties.class);
        Assertions.assertEquals("ooxdjebwpuc", model.friendlyName());
        Assertions.assertEquals("jueiotwmcdytd", model.routingRules().get(0).id());
        Assertions.assertEquals("yhz", model.routingRules().get(0).name());
        Assertions.assertEquals(RoutingRuleEnabledState.ENABLED, model.routingRules().get(0).enabledState());
        Assertions.assertEquals("rtzju", model.loadBalancingSettings().get(0).id());
        Assertions.assertEquals("jkbegibtnmxiebww", model.loadBalancingSettings().get(0).name());
        Assertions.assertEquals(1261477123, model.loadBalancingSettings().get(0).sampleSize());
        Assertions.assertEquals(1623747079, model.loadBalancingSettings().get(0).successfulSamplesRequired());
        Assertions.assertEquals(932562427, model.loadBalancingSettings().get(0).additionalLatencyMilliseconds());
        Assertions.assertEquals("ltskzbbtd", model.healthProbeSettings().get(0).id());
        Assertions.assertEquals("jvzunluthnnp", model.healthProbeSettings().get(0).name());
        Assertions.assertEquals("xdjzlmwlxk", model.healthProbeSettings().get(0).path());
        Assertions.assertEquals(FrontDoorProtocol.HTTPS, model.healthProbeSettings().get(0).protocol());
        Assertions.assertEquals(1476273747, model.healthProbeSettings().get(0).intervalInSeconds());
        Assertions
            .assertEquals(FrontDoorHealthProbeMethod.HEAD, model.healthProbeSettings().get(0).healthProbeMethod());
        Assertions.assertEquals(HealthProbeEnabled.DISABLED, model.healthProbeSettings().get(0).enabledState());
        Assertions.assertEquals("lwptfdy", model.backendPools().get(0).id());
        Assertions.assertEquals("zhxgktrmgucn", model.backendPools().get(0).name());
        Assertions.assertEquals("fbunrmfqjhhk", model.frontendEndpoints().get(0).id());
        Assertions.assertEquals("dahzxctobg", model.frontendEndpoints().get(0).name());
        Assertions.assertEquals("fqrhhuaopppc", model.frontendEndpoints().get(0).hostname());
        Assertions
            .assertEquals(
                SessionAffinityEnabledState.DISABLED, model.frontendEndpoints().get(0).sessionAffinityEnabledState());
        Assertions.assertEquals(472962562, model.frontendEndpoints().get(0).sessionAffinityTtlSeconds());
        Assertions
            .assertEquals(
                EnforceCertificateNameCheckEnabledState.DISABLED,
                model.backendPoolsSettings().enforceCertificateNameCheck());
        Assertions.assertEquals(1359376561, model.backendPoolsSettings().sendRecvTimeoutSeconds());
        Assertions.assertEquals(FrontDoorEnabledState.ENABLED, model.enabledState());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        FrontDoorProperties model =
            new FrontDoorProperties()
                .withFriendlyName("ooxdjebwpuc")
                .withRoutingRules(
                    Arrays
                        .asList(
                            new RoutingRule()
                                .withId("jueiotwmcdytd")
                                .withName("yhz")
                                .withFrontendEndpoints(Arrays.asList())
                                .withAcceptedProtocols(Arrays.asList())
                                .withPatternsToMatch(Arrays.asList())
                                .withEnabledState(RoutingRuleEnabledState.ENABLED),
                            new RoutingRule()
                                .withId("lwn")
                                .withName("gxhnisk")
                                .withFrontendEndpoints(Arrays.asList())
                                .withAcceptedProtocols(Arrays.asList())
                                .withPatternsToMatch(Arrays.asList())
                                .withEnabledState(RoutingRuleEnabledState.DISABLED),
                            new RoutingRule()
                                .withId("ow")
                                .withName("zbtd")
                                .withFrontendEndpoints(Arrays.asList())
                                .withAcceptedProtocols(Arrays.asList())
                                .withPatternsToMatch(Arrays.asList())
                                .withEnabledState(RoutingRuleEnabledState.ENABLED),
                            new RoutingRule()
                                .withId("jriplrbpbewtghf")
                                .withName("pjmkhfxobbc")
                                .withFrontendEndpoints(Arrays.asList())
                                .withAcceptedProtocols(Arrays.asList())
                                .withPatternsToMatch(Arrays.asList())
                                .withEnabledState(RoutingRuleEnabledState.DISABLED)))
                .withLoadBalancingSettings(
                    Arrays
                        .asList(
                            new LoadBalancingSettingsModel()
                                .withId("rtzju")
                                .withName("jkbegibtnmxiebww")
                                .withSampleSize(1261477123)
                                .withSuccessfulSamplesRequired(1623747079)
                                .withAdditionalLatencyMilliseconds(932562427),
                            new LoadBalancingSettingsModel()
                                .withId("uhprwmdyvxqt")
                                .withName("gmtsavjcbpwxqpsr")
                                .withSampleSize(1773507503)
                                .withSuccessfulSamplesRequired(957944639)
                                .withAdditionalLatencyMilliseconds(1672254683),
                            new LoadBalancingSettingsModel()
                                .withId("sgzvahapjyzhpv")
                                .withName("exrmcqibycnojvk")
                                .withSampleSize(1013122573)
                                .withSuccessfulSamplesRequired(724820131)
                                .withAdditionalLatencyMilliseconds(997642669)))
                .withHealthProbeSettings(
                    Arrays
                        .asList(
                            new HealthProbeSettingsModel()
                                .withId("ltskzbbtd")
                                .withName("jvzunluthnnp")
                                .withPath("xdjzlmwlxk")
                                .withProtocol(FrontDoorProtocol.HTTPS)
                                .withIntervalInSeconds(1476273747)
                                .withHealthProbeMethod(FrontDoorHealthProbeMethod.HEAD)
                                .withEnabledState(HealthProbeEnabled.DISABLED),
                            new HealthProbeSettingsModel()
                                .withId("touwaboekqv")
                                .withName("sjyofdx")
                                .withPath("ekg")
                                .withProtocol(FrontDoorProtocol.HTTP)
                                .withIntervalInSeconds(311434030)
                                .withHealthProbeMethod(FrontDoorHealthProbeMethod.GET)
                                .withEnabledState(HealthProbeEnabled.ENABLED),
                            new HealthProbeSettingsModel()
                                .withId("yaqcslyjpkiidz")
                                .withName("aalnjixi")
                                .withPath("mvb")
                                .withProtocol(FrontDoorProtocol.HTTPS)
                                .withIntervalInSeconds(1739794958)
                                .withHealthProbeMethod(FrontDoorHealthProbeMethod.GET)
                                .withEnabledState(HealthProbeEnabled.DISABLED),
                            new HealthProbeSettingsModel()
                                .withId("gylgqgitxmedjvcs")
                                .withName("bnxknalaulppg")
                                .withPath("eli")
                                .withProtocol(FrontDoorProtocol.HTTP)
                                .withIntervalInSeconds(417791826)
                                .withHealthProbeMethod(FrontDoorHealthProbeMethod.HEAD)
                                .withEnabledState(HealthProbeEnabled.ENABLED)))
                .withBackendPools(
                    Arrays
                        .asList(
                            new BackendPool().withId("lwptfdy").withName("zhxgktrmgucn").withBackends(Arrays.asList())))
                .withFrontendEndpoints(
                    Arrays
                        .asList(
                            new FrontendEndpointInner()
                                .withId("fbunrmfqjhhk")
                                .withName("dahzxctobg")
                                .withHostname("fqrhhuaopppc")
                                .withSessionAffinityEnabledState(SessionAffinityEnabledState.DISABLED)
                                .withSessionAffinityTtlSeconds(472962562),
                            new FrontendEndpointInner()
                                .withId("t")
                                .withName("zvszj")
                                .withHostname("xjyngudivk")
                                .withSessionAffinityEnabledState(SessionAffinityEnabledState.ENABLED)
                                .withSessionAffinityTtlSeconds(1042702068),
                            new FrontendEndpointInner()
                                .withId("mpew")
                                .withName("sfxobl")
                                .withHostname("bxvwv")
                                .withSessionAffinityEnabledState(SessionAffinityEnabledState.ENABLED)
                                .withSessionAffinityTtlSeconds(45805707)))
                .withBackendPoolsSettings(
                    new BackendPoolsSettings()
                        .withEnforceCertificateNameCheck(EnforceCertificateNameCheckEnabledState.DISABLED)
                        .withSendRecvTimeoutSeconds(1359376561))
                .withEnabledState(FrontDoorEnabledState.ENABLED);
        model = BinaryData.fromObject(model).toObject(FrontDoorProperties.class);
        Assertions.assertEquals("ooxdjebwpuc", model.friendlyName());
        Assertions.assertEquals("jueiotwmcdytd", model.routingRules().get(0).id());
        Assertions.assertEquals("yhz", model.routingRules().get(0).name());
        Assertions.assertEquals(RoutingRuleEnabledState.ENABLED, model.routingRules().get(0).enabledState());
        Assertions.assertEquals("rtzju", model.loadBalancingSettings().get(0).id());
        Assertions.assertEquals("jkbegibtnmxiebww", model.loadBalancingSettings().get(0).name());
        Assertions.assertEquals(1261477123, model.loadBalancingSettings().get(0).sampleSize());
        Assertions.assertEquals(1623747079, model.loadBalancingSettings().get(0).successfulSamplesRequired());
        Assertions.assertEquals(932562427, model.loadBalancingSettings().get(0).additionalLatencyMilliseconds());
        Assertions.assertEquals("ltskzbbtd", model.healthProbeSettings().get(0).id());
        Assertions.assertEquals("jvzunluthnnp", model.healthProbeSettings().get(0).name());
        Assertions.assertEquals("xdjzlmwlxk", model.healthProbeSettings().get(0).path());
        Assertions.assertEquals(FrontDoorProtocol.HTTPS, model.healthProbeSettings().get(0).protocol());
        Assertions.assertEquals(1476273747, model.healthProbeSettings().get(0).intervalInSeconds());
        Assertions
            .assertEquals(FrontDoorHealthProbeMethod.HEAD, model.healthProbeSettings().get(0).healthProbeMethod());
        Assertions.assertEquals(HealthProbeEnabled.DISABLED, model.healthProbeSettings().get(0).enabledState());
        Assertions.assertEquals("lwptfdy", model.backendPools().get(0).id());
        Assertions.assertEquals("zhxgktrmgucn", model.backendPools().get(0).name());
        Assertions.assertEquals("fbunrmfqjhhk", model.frontendEndpoints().get(0).id());
        Assertions.assertEquals("dahzxctobg", model.frontendEndpoints().get(0).name());
        Assertions.assertEquals("fqrhhuaopppc", model.frontendEndpoints().get(0).hostname());
        Assertions
            .assertEquals(
                SessionAffinityEnabledState.DISABLED, model.frontendEndpoints().get(0).sessionAffinityEnabledState());
        Assertions.assertEquals(472962562, model.frontendEndpoints().get(0).sessionAffinityTtlSeconds());
        Assertions
            .assertEquals(
                EnforceCertificateNameCheckEnabledState.DISABLED,
                model.backendPoolsSettings().enforceCertificateNameCheck());
        Assertions.assertEquals(1359376561, model.backendPoolsSettings().sendRecvTimeoutSeconds());
        Assertions.assertEquals(FrontDoorEnabledState.ENABLED, model.enabledState());
    }
}
