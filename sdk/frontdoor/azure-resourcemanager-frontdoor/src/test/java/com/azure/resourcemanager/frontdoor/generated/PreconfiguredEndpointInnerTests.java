// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.frontdoor.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.frontdoor.fluent.models.PreconfiguredEndpointInner;
import com.azure.resourcemanager.frontdoor.models.EndpointType;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PreconfiguredEndpointInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PreconfiguredEndpointInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"description\":\"i\",\"endpoint\":\"yqkgfg\",\"endpointType\":\"ATM\",\"backend\":\"dgak\"},\"location\":\"qsrxybzqqed\",\"tags\":{\"nkzsmodmglou\":\"bciqfouflm\",\"duqkt\":\"pbkwtmu\",\"kdosvqw\":\"pspwgcuertu\"},\"id\":\"bmdg\",\"name\":\"bjf\",\"type\":\"dgmb\"}")
                .toObject(PreconfiguredEndpointInner.class);
        Assertions.assertEquals("qsrxybzqqed", model.location());
        Assertions.assertEquals("bciqfouflm", model.tags().get("nkzsmodmglou"));
        Assertions.assertEquals("i", model.description());
        Assertions.assertEquals("yqkgfg", model.endpoint());
        Assertions.assertEquals(EndpointType.ATM, model.endpointType());
        Assertions.assertEquals("dgak", model.backend());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PreconfiguredEndpointInner model =
            new PreconfiguredEndpointInner()
                .withLocation("qsrxybzqqed")
                .withTags(mapOf("nkzsmodmglou", "bciqfouflm", "duqkt", "pbkwtmu", "kdosvqw", "pspwgcuertu"))
                .withDescription("i")
                .withEndpoint("yqkgfg")
                .withEndpointType(EndpointType.ATM)
                .withBackend("dgak");
        model = BinaryData.fromObject(model).toObject(PreconfiguredEndpointInner.class);
        Assertions.assertEquals("qsrxybzqqed", model.location());
        Assertions.assertEquals("bciqfouflm", model.tags().get("nkzsmodmglou"));
        Assertions.assertEquals("i", model.description());
        Assertions.assertEquals("yqkgfg", model.endpoint());
        Assertions.assertEquals(EndpointType.ATM, model.endpointType());
        Assertions.assertEquals("dgak", model.backend());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
