// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.frontdoor.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.frontdoor.fluent.models.PreconfiguredEndpointInner;
import com.azure.resourcemanager.frontdoor.models.EndpointType;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PreconfiguredEndpointInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PreconfiguredEndpointInner model = BinaryData.fromString(
            "{\"properties\":{\"description\":\"zrcxfailcfxwmdbo\",\"endpoint\":\"fgsftufqob\",\"endpointType\":\"AzureRegion\",\"backend\":\"acgcckknhx\"},\"location\":\"izvy\",\"tags\":{\"aaeranokqgukk\":\"zvulj\",\"oylaxxul\":\"qnvb\"},\"id\":\"disdosfjbjsvgj\",\"name\":\"whryvycytdcl\",\"type\":\"gc\"}")
            .toObject(PreconfiguredEndpointInner.class);
        Assertions.assertEquals("izvy", model.location());
        Assertions.assertEquals("zvulj", model.tags().get("aaeranokqgukk"));
        Assertions.assertEquals("zrcxfailcfxwmdbo", model.description());
        Assertions.assertEquals("fgsftufqob", model.endpoint());
        Assertions.assertEquals(EndpointType.AZURE_REGION, model.endpointType());
        Assertions.assertEquals("acgcckknhx", model.backend());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PreconfiguredEndpointInner model = new PreconfiguredEndpointInner().withLocation("izvy")
            .withTags(mapOf("aaeranokqgukk", "zvulj", "oylaxxul", "qnvb"))
            .withDescription("zrcxfailcfxwmdbo")
            .withEndpoint("fgsftufqob")
            .withEndpointType(EndpointType.AZURE_REGION)
            .withBackend("acgcckknhx");
        model = BinaryData.fromObject(model).toObject(PreconfiguredEndpointInner.class);
        Assertions.assertEquals("izvy", model.location());
        Assertions.assertEquals("zvulj", model.tags().get("aaeranokqgukk"));
        Assertions.assertEquals("zrcxfailcfxwmdbo", model.description());
        Assertions.assertEquals("fgsftufqob", model.endpoint());
        Assertions.assertEquals(EndpointType.AZURE_REGION, model.endpointType());
        Assertions.assertEquals("acgcckknhx", model.backend());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
