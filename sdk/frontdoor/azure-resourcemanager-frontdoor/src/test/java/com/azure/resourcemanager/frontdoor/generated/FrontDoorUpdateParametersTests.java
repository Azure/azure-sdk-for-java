// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.frontdoor.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.frontdoor.fluent.models.FrontendEndpointInner;
import com.azure.resourcemanager.frontdoor.models.BackendPool;
import com.azure.resourcemanager.frontdoor.models.BackendPoolsSettings;
import com.azure.resourcemanager.frontdoor.models.EnforceCertificateNameCheckEnabledState;
import com.azure.resourcemanager.frontdoor.models.FrontDoorEnabledState;
import com.azure.resourcemanager.frontdoor.models.FrontDoorHealthProbeMethod;
import com.azure.resourcemanager.frontdoor.models.FrontDoorProtocol;
import com.azure.resourcemanager.frontdoor.models.FrontDoorUpdateParameters;
import com.azure.resourcemanager.frontdoor.models.HealthProbeEnabled;
import com.azure.resourcemanager.frontdoor.models.HealthProbeSettingsModel;
import com.azure.resourcemanager.frontdoor.models.LoadBalancingSettingsModel;
import com.azure.resourcemanager.frontdoor.models.RoutingRule;
import com.azure.resourcemanager.frontdoor.models.RoutingRuleEnabledState;
import com.azure.resourcemanager.frontdoor.models.SessionAffinityEnabledState;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class FrontDoorUpdateParametersTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        FrontDoorUpdateParameters model =
            BinaryData
                .fromString(
                    "{\"friendlyName\":\"vnhdldwmgxcxr\",\"routingRules\":[{\"properties\":{\"resourceState\":\"Creating\",\"frontendEndpoints\":[],\"acceptedProtocols\":[],\"patternsToMatch\":[],\"enabledState\":\"Disabled\"},\"name\":\"jw\",\"type\":\"yqsluic\",\"id\":\"ggkzzlvmbmpa\"},{\"properties\":{\"resourceState\":\"Creating\",\"frontendEndpoints\":[],\"acceptedProtocols\":[],\"patternsToMatch\":[],\"enabledState\":\"Enabled\"},\"name\":\"pfvmwyhrfou\",\"type\":\"taakc\",\"id\":\"iyzvqtmnub\"}],\"loadBalancingSettings\":[{\"properties\":{\"resourceState\":\"Disabling\",\"sampleSize\":986433901,\"successfulSamplesRequired\":487764269,\"additionalLatencyMilliseconds\":848558030},\"name\":\"quxvypomgkop\",\"type\":\"hojvpajqgxysmocm\",\"id\":\"fqvm\"},{\"properties\":{\"resourceState\":\"Deleting\",\"sampleSize\":1061947770,\"successfulSamplesRequired\":1373468362,\"additionalLatencyMilliseconds\":1382848835},\"name\":\"xprglyatddc\",\"type\":\"bcuejrjxgci\",\"id\":\"brh\"},{\"properties\":{\"resourceState\":\"Deleting\",\"sampleSize\":1655789286,\"successfulSamplesRequired\":656063523,\"additionalLatencyMilliseconds\":218775906},\"name\":\"m\",\"type\":\"m\",\"id\":\"yiba\"}],\"healthProbeSettings\":[{\"properties\":{\"resourceState\":\"Enabled\",\"path\":\"dtmhrkwofyyvoqa\",\"protocol\":\"Https\",\"intervalInSeconds\":339045288,\"healthProbeMethod\":\"HEAD\",\"enabledState\":\"Disabled\"},\"name\":\"wbwo\",\"type\":\"washr\",\"id\":\"tkcnqxwb\"},{\"properties\":{\"resourceState\":\"Disabled\",\"path\":\"pi\",\"protocol\":\"Http\",\"intervalInSeconds\":2036871201,\"healthProbeMethod\":\"HEAD\",\"enabledState\":\"Disabled\"},\"name\":\"iobyu\",\"type\":\"rpqlp\",\"id\":\"cciuqgbdbutau\"}],\"backendPools\":[{\"properties\":{\"resourceState\":\"Disabled\",\"backends\":[]},\"name\":\"hykojoxafnndlpic\",\"type\":\"o\",\"id\":\"kcdyhbpk\"},{\"properties\":{\"resourceState\":\"Disabled\",\"backends\":[]},\"name\":\"ovvqfovljxywsu\",\"type\":\"yrs\",\"id\":\"sytgadgvraea\"}],\"frontendEndpoints\":[{\"properties\":{\"resourceState\":\"Enabling\",\"customHttpsProvisioningState\":\"Disabled\",\"customHttpsProvisioningSubstate\":\"DomainControlValidationRequestRejected\",\"hostName\":\"uu\",\"sessionAffinityEnabledState\":\"Enabled\",\"sessionAffinityTtlSeconds\":419659092},\"name\":\"e\",\"type\":\"ipfpubji\",\"id\":\"wifto\"}],\"backendPoolsSettings\":{\"enforceCertificateNameCheck\":\"Enabled\",\"sendRecvTimeoutSeconds\":2128432962},\"enabledState\":\"Enabled\"}")
                .toObject(FrontDoorUpdateParameters.class);
        Assertions.assertEquals("vnhdldwmgxcxr", model.friendlyName());
        Assertions.assertEquals("ggkzzlvmbmpa", model.routingRules().get(0).id());
        Assertions.assertEquals("jw", model.routingRules().get(0).name());
        Assertions.assertEquals(RoutingRuleEnabledState.DISABLED, model.routingRules().get(0).enabledState());
        Assertions.assertEquals("fqvm", model.loadBalancingSettings().get(0).id());
        Assertions.assertEquals("quxvypomgkop", model.loadBalancingSettings().get(0).name());
        Assertions.assertEquals(986433901, model.loadBalancingSettings().get(0).sampleSize());
        Assertions.assertEquals(487764269, model.loadBalancingSettings().get(0).successfulSamplesRequired());
        Assertions.assertEquals(848558030, model.loadBalancingSettings().get(0).additionalLatencyMilliseconds());
        Assertions.assertEquals("tkcnqxwb", model.healthProbeSettings().get(0).id());
        Assertions.assertEquals("wbwo", model.healthProbeSettings().get(0).name());
        Assertions.assertEquals("dtmhrkwofyyvoqa", model.healthProbeSettings().get(0).path());
        Assertions.assertEquals(FrontDoorProtocol.HTTPS, model.healthProbeSettings().get(0).protocol());
        Assertions.assertEquals(339045288, model.healthProbeSettings().get(0).intervalInSeconds());
        Assertions
            .assertEquals(FrontDoorHealthProbeMethod.HEAD, model.healthProbeSettings().get(0).healthProbeMethod());
        Assertions.assertEquals(HealthProbeEnabled.DISABLED, model.healthProbeSettings().get(0).enabledState());
        Assertions.assertEquals("kcdyhbpk", model.backendPools().get(0).id());
        Assertions.assertEquals("hykojoxafnndlpic", model.backendPools().get(0).name());
        Assertions.assertEquals("wifto", model.frontendEndpoints().get(0).id());
        Assertions.assertEquals("e", model.frontendEndpoints().get(0).name());
        Assertions.assertEquals("uu", model.frontendEndpoints().get(0).hostname());
        Assertions
            .assertEquals(
                SessionAffinityEnabledState.ENABLED, model.frontendEndpoints().get(0).sessionAffinityEnabledState());
        Assertions.assertEquals(419659092, model.frontendEndpoints().get(0).sessionAffinityTtlSeconds());
        Assertions
            .assertEquals(
                EnforceCertificateNameCheckEnabledState.ENABLED,
                model.backendPoolsSettings().enforceCertificateNameCheck());
        Assertions.assertEquals(2128432962, model.backendPoolsSettings().sendRecvTimeoutSeconds());
        Assertions.assertEquals(FrontDoorEnabledState.ENABLED, model.enabledState());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        FrontDoorUpdateParameters model =
            new FrontDoorUpdateParameters()
                .withFriendlyName("vnhdldwmgxcxr")
                .withRoutingRules(
                    Arrays
                        .asList(
                            new RoutingRule()
                                .withId("ggkzzlvmbmpa")
                                .withName("jw")
                                .withFrontendEndpoints(Arrays.asList())
                                .withAcceptedProtocols(Arrays.asList())
                                .withPatternsToMatch(Arrays.asList())
                                .withEnabledState(RoutingRuleEnabledState.DISABLED),
                            new RoutingRule()
                                .withId("iyzvqtmnub")
                                .withName("pfvmwyhrfou")
                                .withFrontendEndpoints(Arrays.asList())
                                .withAcceptedProtocols(Arrays.asList())
                                .withPatternsToMatch(Arrays.asList())
                                .withEnabledState(RoutingRuleEnabledState.ENABLED)))
                .withLoadBalancingSettings(
                    Arrays
                        .asList(
                            new LoadBalancingSettingsModel()
                                .withId("fqvm")
                                .withName("quxvypomgkop")
                                .withSampleSize(986433901)
                                .withSuccessfulSamplesRequired(487764269)
                                .withAdditionalLatencyMilliseconds(848558030),
                            new LoadBalancingSettingsModel()
                                .withId("brh")
                                .withName("xprglyatddc")
                                .withSampleSize(1061947770)
                                .withSuccessfulSamplesRequired(1373468362)
                                .withAdditionalLatencyMilliseconds(1382848835),
                            new LoadBalancingSettingsModel()
                                .withId("yiba")
                                .withName("m")
                                .withSampleSize(1655789286)
                                .withSuccessfulSamplesRequired(656063523)
                                .withAdditionalLatencyMilliseconds(218775906)))
                .withHealthProbeSettings(
                    Arrays
                        .asList(
                            new HealthProbeSettingsModel()
                                .withId("tkcnqxwb")
                                .withName("wbwo")
                                .withPath("dtmhrkwofyyvoqa")
                                .withProtocol(FrontDoorProtocol.HTTPS)
                                .withIntervalInSeconds(339045288)
                                .withHealthProbeMethod(FrontDoorHealthProbeMethod.HEAD)
                                .withEnabledState(HealthProbeEnabled.DISABLED),
                            new HealthProbeSettingsModel()
                                .withId("cciuqgbdbutau")
                                .withName("iobyu")
                                .withPath("pi")
                                .withProtocol(FrontDoorProtocol.HTTP)
                                .withIntervalInSeconds(2036871201)
                                .withHealthProbeMethod(FrontDoorHealthProbeMethod.HEAD)
                                .withEnabledState(HealthProbeEnabled.DISABLED)))
                .withBackendPools(
                    Arrays
                        .asList(
                            new BackendPool()
                                .withId("kcdyhbpk")
                                .withName("hykojoxafnndlpic")
                                .withBackends(Arrays.asList()),
                            new BackendPool()
                                .withId("sytgadgvraea")
                                .withName("ovvqfovljxywsu")
                                .withBackends(Arrays.asList())))
                .withFrontendEndpoints(
                    Arrays
                        .asList(
                            new FrontendEndpointInner()
                                .withId("wifto")
                                .withName("e")
                                .withHostname("uu")
                                .withSessionAffinityEnabledState(SessionAffinityEnabledState.ENABLED)
                                .withSessionAffinityTtlSeconds(419659092)))
                .withBackendPoolsSettings(
                    new BackendPoolsSettings()
                        .withEnforceCertificateNameCheck(EnforceCertificateNameCheckEnabledState.ENABLED)
                        .withSendRecvTimeoutSeconds(2128432962))
                .withEnabledState(FrontDoorEnabledState.ENABLED);
        model = BinaryData.fromObject(model).toObject(FrontDoorUpdateParameters.class);
        Assertions.assertEquals("vnhdldwmgxcxr", model.friendlyName());
        Assertions.assertEquals("ggkzzlvmbmpa", model.routingRules().get(0).id());
        Assertions.assertEquals("jw", model.routingRules().get(0).name());
        Assertions.assertEquals(RoutingRuleEnabledState.DISABLED, model.routingRules().get(0).enabledState());
        Assertions.assertEquals("fqvm", model.loadBalancingSettings().get(0).id());
        Assertions.assertEquals("quxvypomgkop", model.loadBalancingSettings().get(0).name());
        Assertions.assertEquals(986433901, model.loadBalancingSettings().get(0).sampleSize());
        Assertions.assertEquals(487764269, model.loadBalancingSettings().get(0).successfulSamplesRequired());
        Assertions.assertEquals(848558030, model.loadBalancingSettings().get(0).additionalLatencyMilliseconds());
        Assertions.assertEquals("tkcnqxwb", model.healthProbeSettings().get(0).id());
        Assertions.assertEquals("wbwo", model.healthProbeSettings().get(0).name());
        Assertions.assertEquals("dtmhrkwofyyvoqa", model.healthProbeSettings().get(0).path());
        Assertions.assertEquals(FrontDoorProtocol.HTTPS, model.healthProbeSettings().get(0).protocol());
        Assertions.assertEquals(339045288, model.healthProbeSettings().get(0).intervalInSeconds());
        Assertions
            .assertEquals(FrontDoorHealthProbeMethod.HEAD, model.healthProbeSettings().get(0).healthProbeMethod());
        Assertions.assertEquals(HealthProbeEnabled.DISABLED, model.healthProbeSettings().get(0).enabledState());
        Assertions.assertEquals("kcdyhbpk", model.backendPools().get(0).id());
        Assertions.assertEquals("hykojoxafnndlpic", model.backendPools().get(0).name());
        Assertions.assertEquals("wifto", model.frontendEndpoints().get(0).id());
        Assertions.assertEquals("e", model.frontendEndpoints().get(0).name());
        Assertions.assertEquals("uu", model.frontendEndpoints().get(0).hostname());
        Assertions
            .assertEquals(
                SessionAffinityEnabledState.ENABLED, model.frontendEndpoints().get(0).sessionAffinityEnabledState());
        Assertions.assertEquals(419659092, model.frontendEndpoints().get(0).sessionAffinityTtlSeconds());
        Assertions
            .assertEquals(
                EnforceCertificateNameCheckEnabledState.ENABLED,
                model.backendPoolsSettings().enforceCertificateNameCheck());
        Assertions.assertEquals(2128432962, model.backendPoolsSettings().sendRecvTimeoutSeconds());
        Assertions.assertEquals(FrontDoorEnabledState.ENABLED, model.enabledState());
    }
}
