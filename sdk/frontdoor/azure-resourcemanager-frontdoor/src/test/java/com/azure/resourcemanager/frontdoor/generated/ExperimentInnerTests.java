// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.frontdoor.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.frontdoor.fluent.models.ExperimentInner;
import com.azure.resourcemanager.frontdoor.models.Endpoint;
import com.azure.resourcemanager.frontdoor.models.State;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ExperimentInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ExperimentInner model = BinaryData.fromString(
            "{\"properties\":{\"description\":\"vgpmun\",\"endpointA\":{\"name\":\"xvmhf\",\"endpoint\":\"zjyi\"},\"endpointB\":{\"name\":\"sbhud\",\"endpoint\":\"ohyuemslynsq\"},\"enabledState\":\"Enabled\",\"resourceState\":\"Disabling\",\"status\":\"brlttymsjnygq\",\"scriptFileUri\":\"fwqzdz\"},\"location\":\"tilaxh\",\"tags\":{\"wivkxo\":\"qlyvijo\",\"ti\":\"zunbixx\"},\"id\":\"vcpwpgclrc\",\"name\":\"vtsoxf\",\"type\":\"kenx\"}")
            .toObject(ExperimentInner.class);
        Assertions.assertEquals("tilaxh", model.location());
        Assertions.assertEquals("qlyvijo", model.tags().get("wivkxo"));
        Assertions.assertEquals("vgpmun", model.description());
        Assertions.assertEquals("xvmhf", model.endpointA().name());
        Assertions.assertEquals("zjyi", model.endpointA().endpoint());
        Assertions.assertEquals("sbhud", model.endpointB().name());
        Assertions.assertEquals("ohyuemslynsq", model.endpointB().endpoint());
        Assertions.assertEquals(State.ENABLED, model.enabledState());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ExperimentInner model = new ExperimentInner().withLocation("tilaxh")
            .withTags(mapOf("wivkxo", "qlyvijo", "ti", "zunbixx"))
            .withDescription("vgpmun")
            .withEndpointA(new Endpoint().withName("xvmhf").withEndpoint("zjyi"))
            .withEndpointB(new Endpoint().withName("sbhud").withEndpoint("ohyuemslynsq"))
            .withEnabledState(State.ENABLED);
        model = BinaryData.fromObject(model).toObject(ExperimentInner.class);
        Assertions.assertEquals("tilaxh", model.location());
        Assertions.assertEquals("qlyvijo", model.tags().get("wivkxo"));
        Assertions.assertEquals("vgpmun", model.description());
        Assertions.assertEquals("xvmhf", model.endpointA().name());
        Assertions.assertEquals("zjyi", model.endpointA().endpoint());
        Assertions.assertEquals("sbhud", model.endpointB().name());
        Assertions.assertEquals("ohyuemslynsq", model.endpointB().endpoint());
        Assertions.assertEquals(State.ENABLED, model.enabledState());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
