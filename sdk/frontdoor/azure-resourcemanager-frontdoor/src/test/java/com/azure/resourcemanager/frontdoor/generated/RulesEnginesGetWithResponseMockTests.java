// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.frontdoor.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.frontdoor.FrontDoorManager;
import com.azure.resourcemanager.frontdoor.models.HeaderActionType;
import com.azure.resourcemanager.frontdoor.models.MatchProcessingBehavior;
import com.azure.resourcemanager.frontdoor.models.RulesEngine;
import com.azure.resourcemanager.frontdoor.models.RulesEngineMatchVariable;
import com.azure.resourcemanager.frontdoor.models.RulesEngineOperator;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class RulesEnginesGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"resourceState\":\"Deleting\",\"rules\":[{\"name\":\"cnhz\",\"priority\":1513584029,\"action\":{\"requestHeaderActions\":[{\"headerActionType\":\"Overwrite\",\"headerName\":\"jzcfyjzptwr\"},{\"headerActionType\":\"Delete\",\"headerName\":\"h\"},{\"headerActionType\":\"Overwrite\",\"headerName\":\"qinfszpyglqd\"}],\"responseHeaderActions\":[{\"headerActionType\":\"Append\",\"headerName\":\"zralcxpjbyyps\"},{\"headerActionType\":\"Overwrite\",\"headerName\":\"qcjenkyhf\"}],\"routeConfigurationOverride\":{\"@odata.type\":\"RouteConfiguration\"}},\"matchConditions\":[{\"rulesEngineMatchVariable\":\"PostArgs\",\"rulesEngineOperator\":\"GreaterThan\",\"rulesEngineMatchValue\":[]},{\"rulesEngineMatchVariable\":\"RequestScheme\",\"rulesEngineOperator\":\"Equal\",\"rulesEngineMatchValue\":[]},{\"rulesEngineMatchVariable\":\"RequestScheme\",\"rulesEngineOperator\":\"LessThan\",\"rulesEngineMatchValue\":[]},{\"rulesEngineMatchVariable\":\"RequestPath\",\"rulesEngineOperator\":\"IPMatch\",\"rulesEngineMatchValue\":[]}],\"matchProcessingBehavior\":\"Stop\"},{\"name\":\"pzqjhhhq\",\"priority\":663285814,\"action\":{\"requestHeaderActions\":[{\"headerActionType\":\"Overwrite\",\"headerName\":\"cacoyvivbsiz\"}],\"responseHeaderActions\":[{\"headerActionType\":\"Overwrite\",\"headerName\":\"zlbscmnlziji\"},{\"headerActionType\":\"Overwrite\",\"headerName\":\"ehgmvflnwyv\"}],\"routeConfigurationOverride\":{\"@odata.type\":\"RouteConfiguration\"}},\"matchConditions\":[{\"rulesEngineMatchVariable\":\"QueryString\",\"rulesEngineOperator\":\"EndsWith\",\"rulesEngineMatchValue\":[]},{\"rulesEngineMatchVariable\":\"RequestScheme\",\"rulesEngineOperator\":\"GreaterThanOrEqual\",\"rulesEngineMatchValue\":[]}],\"matchProcessingBehavior\":\"Continue\"},{\"name\":\"lylyfwxzutgqz\",\"priority\":1687298742,\"action\":{\"requestHeaderActions\":[{\"headerActionType\":\"Append\",\"headerName\":\"mupgxy\"}],\"responseHeaderActions\":[{\"headerActionType\":\"Overwrite\",\"headerName\":\"xabb\"}],\"routeConfigurationOverride\":{\"@odata.type\":\"RouteConfiguration\"}},\"matchConditions\":[{\"rulesEngineMatchVariable\":\"RequestHeader\",\"rulesEngineOperator\":\"LessThanOrEqual\",\"rulesEngineMatchValue\":[]},{\"rulesEngineMatchVariable\":\"QueryString\",\"rulesEngineOperator\":\"LessThan\",\"rulesEngineMatchValue\":[]}],\"matchProcessingBehavior\":\"Continue\"},{\"name\":\"klqpx\",\"priority\":1851207538,\"action\":{\"requestHeaderActions\":[{\"headerActionType\":\"Append\",\"headerName\":\"e\"},{\"headerActionType\":\"Delete\",\"headerName\":\"wwnlzafwxudgnh\"},{\"headerActionType\":\"Append\",\"headerName\":\"okrtalvnb\"}],\"responseHeaderActions\":[{\"headerActionType\":\"Append\",\"headerName\":\"emeluclv\"},{\"headerActionType\":\"Overwrite\",\"headerName\":\"jukyrdn\"}],\"routeConfigurationOverride\":{\"@odata.type\":\"RouteConfiguration\"}},\"matchConditions\":[{\"rulesEngineMatchVariable\":\"RequestFilename\",\"rulesEngineOperator\":\"IPMatch\",\"rulesEngineMatchValue\":[]},{\"rulesEngineMatchVariable\":\"QueryString\",\"rulesEngineOperator\":\"Contains\",\"rulesEngineMatchValue\":[]},{\"rulesEngineMatchVariable\":\"RequestFilename\",\"rulesEngineOperator\":\"Contains\",\"rulesEngineMatchValue\":[]},{\"rulesEngineMatchVariable\":\"IsMobile\",\"rulesEngineOperator\":\"Any\",\"rulesEngineMatchValue\":[]}],\"matchProcessingBehavior\":\"Stop\"}]},\"id\":\"vzoqgyipemchgavs\",\"name\":\"zuejd\",\"type\":\"xptlghwzho\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        FrontDoorManager manager = FrontDoorManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        RulesEngine response = manager.rulesEngines()
            .getWithResponse("mffjkutycyarn", "oohguabzoghkt", "pyc", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("cnhz", response.rules().get(0).name());
        Assertions.assertEquals(1513584029, response.rules().get(0).priority());
        Assertions.assertEquals(HeaderActionType.OVERWRITE,
            response.rules().get(0).action().requestHeaderActions().get(0).headerActionType());
        Assertions.assertEquals("jzcfyjzptwr",
            response.rules().get(0).action().requestHeaderActions().get(0).headerName());
        Assertions.assertEquals(HeaderActionType.APPEND,
            response.rules().get(0).action().responseHeaderActions().get(0).headerActionType());
        Assertions.assertEquals("zralcxpjbyyps",
            response.rules().get(0).action().responseHeaderActions().get(0).headerName());
        Assertions.assertEquals(RulesEngineMatchVariable.POST_ARGS,
            response.rules().get(0).matchConditions().get(0).rulesEngineMatchVariable());
        Assertions.assertEquals(RulesEngineOperator.GREATER_THAN,
            response.rules().get(0).matchConditions().get(0).rulesEngineOperator());
        Assertions.assertEquals(MatchProcessingBehavior.STOP, response.rules().get(0).matchProcessingBehavior());
    }
}
