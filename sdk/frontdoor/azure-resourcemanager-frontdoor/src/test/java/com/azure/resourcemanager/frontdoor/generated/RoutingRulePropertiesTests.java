// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.frontdoor.generated;

import com.azure.core.management.SubResource;
import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.frontdoor.fluent.models.RoutingRuleProperties;
import com.azure.resourcemanager.frontdoor.models.FrontDoorProtocol;
import com.azure.resourcemanager.frontdoor.models.RouteConfiguration;
import com.azure.resourcemanager.frontdoor.models.RoutingRuleEnabledState;
import com.azure.resourcemanager.frontdoor.models.RoutingRuleUpdateParametersWebApplicationFirewallPolicyLink;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class RoutingRulePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        RoutingRuleProperties model = BinaryData.fromString(
            "{\"resourceState\":\"Creating\",\"frontendEndpoints\":[{\"id\":\"rymsgaojfmw\"}],\"acceptedProtocols\":[\"Http\",\"Https\"],\"patternsToMatch\":[\"hirctymoxoftpipi\"],\"enabledState\":\"Disabled\",\"routeConfiguration\":{\"@odata.type\":\"hxacpqjlihhyu\"},\"rulesEngine\":{\"id\":\"kasdvlm\"},\"webApplicationFirewallPolicyLink\":{\"id\":\"gz\"}}")
            .toObject(RoutingRuleProperties.class);
        Assertions.assertEquals("rymsgaojfmw", model.frontendEndpoints().get(0).id());
        Assertions.assertEquals(FrontDoorProtocol.HTTP, model.acceptedProtocols().get(0));
        Assertions.assertEquals("hirctymoxoftpipi", model.patternsToMatch().get(0));
        Assertions.assertEquals(RoutingRuleEnabledState.DISABLED, model.enabledState());
        Assertions.assertEquals("kasdvlm", model.rulesEngine().id());
        Assertions.assertEquals("gz", model.webApplicationFirewallPolicyLink().id());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        RoutingRuleProperties model
            = new RoutingRuleProperties().withFrontendEndpoints(Arrays.asList(new SubResource().withId("rymsgaojfmw")))
                .withAcceptedProtocols(Arrays.asList(FrontDoorProtocol.HTTP, FrontDoorProtocol.HTTPS))
                .withPatternsToMatch(Arrays.asList("hirctymoxoftpipi"))
                .withEnabledState(RoutingRuleEnabledState.DISABLED)
                .withRouteConfiguration(new RouteConfiguration())
                .withRulesEngine(new SubResource().withId("kasdvlm"))
                .withWebApplicationFirewallPolicyLink(
                    new RoutingRuleUpdateParametersWebApplicationFirewallPolicyLink().withId("gz"));
        model = BinaryData.fromObject(model).toObject(RoutingRuleProperties.class);
        Assertions.assertEquals("rymsgaojfmw", model.frontendEndpoints().get(0).id());
        Assertions.assertEquals(FrontDoorProtocol.HTTP, model.acceptedProtocols().get(0));
        Assertions.assertEquals("hirctymoxoftpipi", model.patternsToMatch().get(0));
        Assertions.assertEquals(RoutingRuleEnabledState.DISABLED, model.enabledState());
        Assertions.assertEquals("kasdvlm", model.rulesEngine().id());
        Assertions.assertEquals("gz", model.webApplicationFirewallPolicyLink().id());
    }
}
