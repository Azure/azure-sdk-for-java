// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.frontdoor.generated;

import com.azure.core.management.SubResource;
import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.frontdoor.models.Backend;
import com.azure.resourcemanager.frontdoor.models.BackendEnabledState;
import com.azure.resourcemanager.frontdoor.models.BackendPoolUpdateParameters;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class BackendPoolUpdateParametersTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        BackendPoolUpdateParameters model = BinaryData.fromString(
            "{\"backends\":[{\"address\":\"ukiscvwmzhw\",\"privateLinkAlias\":\"efaxvxilc\",\"privateLinkResourceId\":\"gnhnzeyq\",\"privateLinkLocation\":\"jjfzqlqhycavo\",\"privateEndpointStatus\":\"Rejected\",\"privateLinkApprovalMessage\":\"dbeesmie\",\"httpPort\":426944858,\"httpsPort\":1641970858,\"enabledState\":\"Enabled\",\"priority\":2070170024,\"weight\":1897469256,\"backendHostHeader\":\"agy\"},{\"address\":\"qfby\",\"privateLinkAlias\":\"rfgi\",\"privateLinkResourceId\":\"tcojocqwo\",\"privateLinkLocation\":\"nzjvusfzldm\",\"privateEndpointStatus\":\"Approved\",\"privateLinkApprovalMessage\":\"ylfsbtk\",\"httpPort\":2130953454,\"httpsPort\":201650328,\"enabledState\":\"Enabled\",\"priority\":1574366459,\"weight\":268742670,\"backendHostHeader\":\"bugrj\"},{\"address\":\"to\",\"privateLinkAlias\":\"mi\",\"privateLinkResourceId\":\"fieypefojyqdhcup\",\"privateLinkLocation\":\"plcwkhi\",\"privateEndpointStatus\":\"Timeout\",\"privateLinkApprovalMessage\":\"hzdsqtzbsrgnow\",\"httpPort\":994844547,\"httpsPort\":741446459,\"enabledState\":\"Enabled\",\"priority\":907830465,\"weight\":1670061981,\"backendHostHeader\":\"xmwoteyowcluqo\"}],\"loadBalancingSettings\":{\"id\":\"qvgqouw\"},\"healthProbeSettings\":{\"id\":\"mpjw\"}}")
            .toObject(BackendPoolUpdateParameters.class);
        Assertions.assertEquals("ukiscvwmzhw", model.backends().get(0).address());
        Assertions.assertEquals("efaxvxilc", model.backends().get(0).privateLinkAlias());
        Assertions.assertEquals("gnhnzeyq", model.backends().get(0).privateLinkResourceId());
        Assertions.assertEquals("jjfzqlqhycavo", model.backends().get(0).privateLinkLocation());
        Assertions.assertEquals("dbeesmie", model.backends().get(0).privateLinkApprovalMessage());
        Assertions.assertEquals(426944858, model.backends().get(0).httpPort());
        Assertions.assertEquals(1641970858, model.backends().get(0).httpsPort());
        Assertions.assertEquals(BackendEnabledState.ENABLED, model.backends().get(0).enabledState());
        Assertions.assertEquals(2070170024, model.backends().get(0).priority());
        Assertions.assertEquals(1897469256, model.backends().get(0).weight());
        Assertions.assertEquals("agy", model.backends().get(0).backendHostHeader());
        Assertions.assertEquals("qvgqouw", model.loadBalancingSettings().id());
        Assertions.assertEquals("mpjw", model.healthProbeSettings().id());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        BackendPoolUpdateParameters model = new BackendPoolUpdateParameters()
            .withBackends(Arrays.asList(
                new Backend().withAddress("ukiscvwmzhw")
                    .withPrivateLinkAlias("efaxvxilc")
                    .withPrivateLinkResourceId("gnhnzeyq")
                    .withPrivateLinkLocation("jjfzqlqhycavo")
                    .withPrivateLinkApprovalMessage("dbeesmie")
                    .withHttpPort(426944858)
                    .withHttpsPort(1641970858)
                    .withEnabledState(BackendEnabledState.ENABLED)
                    .withPriority(2070170024)
                    .withWeight(1897469256)
                    .withBackendHostHeader("agy"),
                new Backend().withAddress("qfby")
                    .withPrivateLinkAlias("rfgi")
                    .withPrivateLinkResourceId("tcojocqwo")
                    .withPrivateLinkLocation("nzjvusfzldm")
                    .withPrivateLinkApprovalMessage("ylfsbtk")
                    .withHttpPort(2130953454)
                    .withHttpsPort(201650328)
                    .withEnabledState(BackendEnabledState.ENABLED)
                    .withPriority(1574366459)
                    .withWeight(268742670)
                    .withBackendHostHeader("bugrj"),
                new Backend().withAddress("to")
                    .withPrivateLinkAlias("mi")
                    .withPrivateLinkResourceId("fieypefojyqdhcup")
                    .withPrivateLinkLocation("plcwkhi")
                    .withPrivateLinkApprovalMessage("hzdsqtzbsrgnow")
                    .withHttpPort(994844547)
                    .withHttpsPort(741446459)
                    .withEnabledState(BackendEnabledState.ENABLED)
                    .withPriority(907830465)
                    .withWeight(1670061981)
                    .withBackendHostHeader("xmwoteyowcluqo")))
            .withLoadBalancingSettings(new SubResource().withId("qvgqouw"))
            .withHealthProbeSettings(new SubResource().withId("mpjw"));
        model = BinaryData.fromObject(model).toObject(BackendPoolUpdateParameters.class);
        Assertions.assertEquals("ukiscvwmzhw", model.backends().get(0).address());
        Assertions.assertEquals("efaxvxilc", model.backends().get(0).privateLinkAlias());
        Assertions.assertEquals("gnhnzeyq", model.backends().get(0).privateLinkResourceId());
        Assertions.assertEquals("jjfzqlqhycavo", model.backends().get(0).privateLinkLocation());
        Assertions.assertEquals("dbeesmie", model.backends().get(0).privateLinkApprovalMessage());
        Assertions.assertEquals(426944858, model.backends().get(0).httpPort());
        Assertions.assertEquals(1641970858, model.backends().get(0).httpsPort());
        Assertions.assertEquals(BackendEnabledState.ENABLED, model.backends().get(0).enabledState());
        Assertions.assertEquals(2070170024, model.backends().get(0).priority());
        Assertions.assertEquals(1897469256, model.backends().get(0).weight());
        Assertions.assertEquals("agy", model.backends().get(0).backendHostHeader());
        Assertions.assertEquals("qvgqouw", model.loadBalancingSettings().id());
        Assertions.assertEquals("mpjw", model.healthProbeSettings().id());
    }
}
