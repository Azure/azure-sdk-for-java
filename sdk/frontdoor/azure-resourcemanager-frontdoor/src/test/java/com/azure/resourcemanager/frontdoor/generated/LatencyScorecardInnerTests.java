// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.frontdoor.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.frontdoor.fluent.models.LatencyScorecardInner;
import com.azure.resourcemanager.frontdoor.models.LatencyMetric;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class LatencyScorecardInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        LatencyScorecardInner model = BinaryData.fromString(
            "{\"properties\":{\"id\":\"tngfdgugeyzihgr\",\"name\":\"ui\",\"description\":\"bsnmfpph\",\"endpointA\":\"eevy\",\"endpointB\":\"hsgz\",\"startDateTimeUTC\":\"2021-09-04T20:31:38Z\",\"endDateTimeUTC\":\"2021-04-26T23:03:25Z\",\"country\":\"mfg\",\"latencyMetrics\":[{\"name\":\"qgleohibetnluank\",\"endDateTimeUTC\":\"fxeeebtijvacvbm\",\"aValue\":39.060837,\"bValue\":0.7475734,\"delta\":82.000725,\"deltaPercent\":54.551792,\"aCLower95CI\":9.691727,\"aHUpper95CI\":32.127506,\"bCLower95CI\":83.196625,\"bUpper95CI\":15.094423},{\"name\":\"h\",\"endDateTimeUTC\":\"uyxoaf\",\"aValue\":43.28481,\"bValue\":12.039203,\"delta\":22.252481,\"deltaPercent\":12.664461,\"aCLower95CI\":42.13147,\"aHUpper95CI\":6.4531984,\"bCLower95CI\":98.56035,\"bUpper95CI\":70.414665}]},\"location\":\"xirpghriy\",\"tags\":{\"yznuciqd\":\"eyhlqhykprl\"},\"id\":\"mexiitdfuxt\",\"name\":\"asiibmiybnnust\",\"type\":\"nlj\"}")
            .toObject(LatencyScorecardInner.class);
        Assertions.assertEquals("xirpghriy", model.location());
        Assertions.assertEquals("eyhlqhykprl", model.tags().get("yznuciqd"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        LatencyScorecardInner model = new LatencyScorecardInner().withLocation("xirpghriy")
            .withTags(mapOf("yznuciqd", "eyhlqhykprl"))
            .withLatencyMetrics(Arrays.asList(new LatencyMetric(), new LatencyMetric()));
        model = BinaryData.fromObject(model).toObject(LatencyScorecardInner.class);
        Assertions.assertEquals("xirpghriy", model.location());
        Assertions.assertEquals("eyhlqhykprl", model.tags().get("yznuciqd"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
