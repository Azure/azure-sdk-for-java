// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.frontdoor.generated;

import com.azure.core.management.SubResource;
import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.frontdoor.models.FrontDoorProtocol;
import com.azure.resourcemanager.frontdoor.models.RouteConfiguration;
import com.azure.resourcemanager.frontdoor.models.RoutingRuleEnabledState;
import com.azure.resourcemanager.frontdoor.models.RoutingRuleUpdateParameters;
import com.azure.resourcemanager.frontdoor.models.RoutingRuleUpdateParametersWebApplicationFirewallPolicyLink;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class RoutingRuleUpdateParametersTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        RoutingRuleUpdateParameters model = BinaryData.fromString(
            "{\"frontendEndpoints\":[{\"id\":\"vlp\"},{\"id\":\"xkzb\"}],\"acceptedProtocols\":[\"Https\",\"Https\"],\"patternsToMatch\":[\"siykzkdncjdxonbz\",\"ggcula\",\"z\",\"y\"],\"enabledState\":\"Disabled\",\"routeConfiguration\":{\"@odata.type\":\"RouteConfiguration\"},\"rulesEngine\":{\"id\":\"qxepnylbfuaj\"},\"webApplicationFirewallPolicyLink\":{\"id\":\"tlvofq\"}}")
            .toObject(RoutingRuleUpdateParameters.class);
        Assertions.assertEquals("vlp", model.frontendEndpoints().get(0).id());
        Assertions.assertEquals(FrontDoorProtocol.HTTPS, model.acceptedProtocols().get(0));
        Assertions.assertEquals("siykzkdncjdxonbz", model.patternsToMatch().get(0));
        Assertions.assertEquals(RoutingRuleEnabledState.DISABLED, model.enabledState());
        Assertions.assertEquals("qxepnylbfuaj", model.rulesEngine().id());
        Assertions.assertEquals("tlvofq", model.webApplicationFirewallPolicyLink().id());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        RoutingRuleUpdateParameters model = new RoutingRuleUpdateParameters()
            .withFrontendEndpoints(Arrays.asList(new SubResource().withId("vlp"), new SubResource().withId("xkzb")))
            .withAcceptedProtocols(Arrays.asList(FrontDoorProtocol.HTTPS, FrontDoorProtocol.HTTPS))
            .withPatternsToMatch(Arrays.asList("siykzkdncjdxonbz", "ggcula", "z", "y"))
            .withEnabledState(RoutingRuleEnabledState.DISABLED)
            .withRouteConfiguration(new RouteConfiguration())
            .withRulesEngine(new SubResource().withId("qxepnylbfuaj"))
            .withWebApplicationFirewallPolicyLink(
                new RoutingRuleUpdateParametersWebApplicationFirewallPolicyLink().withId("tlvofq"));
        model = BinaryData.fromObject(model).toObject(RoutingRuleUpdateParameters.class);
        Assertions.assertEquals("vlp", model.frontendEndpoints().get(0).id());
        Assertions.assertEquals(FrontDoorProtocol.HTTPS, model.acceptedProtocols().get(0));
        Assertions.assertEquals("siykzkdncjdxonbz", model.patternsToMatch().get(0));
        Assertions.assertEquals(RoutingRuleEnabledState.DISABLED, model.enabledState());
        Assertions.assertEquals("qxepnylbfuaj", model.rulesEngine().id());
        Assertions.assertEquals("tlvofq", model.webApplicationFirewallPolicyLink().id());
    }
}
