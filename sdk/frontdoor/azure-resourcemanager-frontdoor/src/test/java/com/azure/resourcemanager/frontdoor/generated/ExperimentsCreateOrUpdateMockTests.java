// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.frontdoor.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.frontdoor.FrontDoorManager;
import com.azure.resourcemanager.frontdoor.models.Endpoint;
import com.azure.resourcemanager.frontdoor.models.Experiment;
import com.azure.resourcemanager.frontdoor.models.State;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ExperimentsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"description\":\"ormkfqlwxldyk\",\"endpointA\":{\"name\":\"ygaolnjpnnb\",\"endpoint\":\"ksibjgsjjxx\"},\"endpointB\":{\"name\":\"rnadzyqegxyiv\",\"endpoint\":\"nbm\"},\"enabledState\":\"Disabled\",\"resourceState\":\"Enabling\",\"status\":\"kgqxn\",\"scriptFileUri\":\"bkezn\"},\"location\":\"aujvaa\",\"tags\":{\"umrrqmbzm\":\"giycwkdtaawxwfek\",\"idbirkfpkso\":\"kratbnxwbj\",\"ewijymrhbguz\":\"dgo\",\"nfnzhhh\":\"zkye\"},\"id\":\"o\",\"name\":\"mffjkutycyarn\",\"type\":\"oohguabzoghkt\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        FrontDoorManager manager = FrontDoorManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        Experiment response = manager.experiments()
            .define("jxcjrmmuabwib")
            .withRegion("ekidswyskb")
            .withExistingNetworkExperimentProfile("jcmmzrrscub", "wsdrnpxqwodif")
            .withTags(mapOf("rpq", "fgllukkutvlx"))
            .withDescription("gjonmcy")
            .withEndpointA(new Endpoint().withName("y").withEndpoint("amwineofvfkakp"))
            .withEndpointB(new Endpoint().withName("t").withEndpoint("vboclzhzjk"))
            .withEnabledState(State.DISABLED)
            .create();

        Assertions.assertEquals("aujvaa", response.location());
        Assertions.assertEquals("giycwkdtaawxwfek", response.tags().get("umrrqmbzm"));
        Assertions.assertEquals("ormkfqlwxldyk", response.description());
        Assertions.assertEquals("ygaolnjpnnb", response.endpointA().name());
        Assertions.assertEquals("ksibjgsjjxx", response.endpointA().endpoint());
        Assertions.assertEquals("rnadzyqegxyiv", response.endpointB().name());
        Assertions.assertEquals("nbm", response.endpointB().endpoint());
        Assertions.assertEquals(State.DISABLED, response.enabledState());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
