// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.frontdoor.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.frontdoor.models.ActionType;
import com.azure.resourcemanager.frontdoor.models.ManagedRuleEnabledState;
import com.azure.resourcemanager.frontdoor.models.ManagedRuleExclusion;
import com.azure.resourcemanager.frontdoor.models.ManagedRuleExclusionMatchVariable;
import com.azure.resourcemanager.frontdoor.models.ManagedRuleExclusionSelectorMatchOperator;
import com.azure.resourcemanager.frontdoor.models.ManagedRuleOverride;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ManagedRuleOverrideTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ManagedRuleOverride model = BinaryData.fromString(
            "{\"ruleId\":\"kftutqxlngxlefg\",\"enabledState\":\"Disabled\",\"action\":\"Redirect\",\"exclusions\":[{\"matchVariable\":\"RequestBodyPostArgNames\",\"selectorMatchOperator\":\"Contains\",\"selector\":\"mi\"},{\"matchVariable\":\"RequestBodyPostArgNames\",\"selectorMatchOperator\":\"EqualsAny\",\"selector\":\"hzrvqd\"},{\"matchVariable\":\"RequestBodyPostArgNames\",\"selectorMatchOperator\":\"Contains\",\"selector\":\"hjybigehoqfbo\"},{\"matchVariable\":\"RequestHeaderNames\",\"selectorMatchOperator\":\"EqualsAny\",\"selector\":\"anyktzlcuiywg\"}]}")
            .toObject(ManagedRuleOverride.class);
        Assertions.assertEquals("kftutqxlngxlefg", model.ruleId());
        Assertions.assertEquals(ManagedRuleEnabledState.DISABLED, model.enabledState());
        Assertions.assertEquals(ActionType.REDIRECT, model.action());
        Assertions.assertEquals(ManagedRuleExclusionMatchVariable.REQUEST_BODY_POST_ARG_NAMES,
            model.exclusions().get(0).matchVariable());
        Assertions.assertEquals(ManagedRuleExclusionSelectorMatchOperator.CONTAINS,
            model.exclusions().get(0).selectorMatchOperator());
        Assertions.assertEquals("mi", model.exclusions().get(0).selector());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ManagedRuleOverride model = new ManagedRuleOverride().withRuleId("kftutqxlngxlefg")
            .withEnabledState(ManagedRuleEnabledState.DISABLED)
            .withAction(ActionType.REDIRECT)
            .withExclusions(Arrays.asList(
                new ManagedRuleExclusion()
                    .withMatchVariable(ManagedRuleExclusionMatchVariable.REQUEST_BODY_POST_ARG_NAMES)
                    .withSelectorMatchOperator(ManagedRuleExclusionSelectorMatchOperator.CONTAINS)
                    .withSelector("mi"),
                new ManagedRuleExclusion()
                    .withMatchVariable(ManagedRuleExclusionMatchVariable.REQUEST_BODY_POST_ARG_NAMES)
                    .withSelectorMatchOperator(ManagedRuleExclusionSelectorMatchOperator.EQUALS_ANY)
                    .withSelector("hzrvqd"),
                new ManagedRuleExclusion()
                    .withMatchVariable(ManagedRuleExclusionMatchVariable.REQUEST_BODY_POST_ARG_NAMES)
                    .withSelectorMatchOperator(ManagedRuleExclusionSelectorMatchOperator.CONTAINS)
                    .withSelector("hjybigehoqfbo"),
                new ManagedRuleExclusion().withMatchVariable(ManagedRuleExclusionMatchVariable.REQUEST_HEADER_NAMES)
                    .withSelectorMatchOperator(ManagedRuleExclusionSelectorMatchOperator.EQUALS_ANY)
                    .withSelector("anyktzlcuiywg")));
        model = BinaryData.fromObject(model).toObject(ManagedRuleOverride.class);
        Assertions.assertEquals("kftutqxlngxlefg", model.ruleId());
        Assertions.assertEquals(ManagedRuleEnabledState.DISABLED, model.enabledState());
        Assertions.assertEquals(ActionType.REDIRECT, model.action());
        Assertions.assertEquals(ManagedRuleExclusionMatchVariable.REQUEST_BODY_POST_ARG_NAMES,
            model.exclusions().get(0).matchVariable());
        Assertions.assertEquals(ManagedRuleExclusionSelectorMatchOperator.CONTAINS,
            model.exclusions().get(0).selectorMatchOperator());
        Assertions.assertEquals("mi", model.exclusions().get(0).selector());
    }
}
