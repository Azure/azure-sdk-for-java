// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.frontdoor.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.frontdoor.fluent.models.ProfileInner;
import com.azure.resourcemanager.frontdoor.models.State;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ProfileInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ProfileInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"resourceState\":\"Disabled\",\"enabledState\":\"Disabled\"},\"etag\":\"ztzp\",\"location\":\"fn\",\"tags\":{\"zfeqztppri\":\"wyfzqwhxxbuyqa\",\"bqwcsdbnwdcf\":\"lxorjaltolmncws\",\"jcanvxbvtvudut\":\"ucqdpfuvglsb\",\"xqtvcofu\":\"cormr\"},\"id\":\"f\",\"name\":\"vkg\",\"type\":\"u\"}")
                .toObject(ProfileInner.class);
        Assertions.assertEquals("fn", model.location());
        Assertions.assertEquals("wyfzqwhxxbuyqa", model.tags().get("zfeqztppri"));
        Assertions.assertEquals("ztzp", model.etag());
        Assertions.assertEquals(State.DISABLED, model.enabledState());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ProfileInner model =
            new ProfileInner()
                .withLocation("fn")
                .withTags(
                    mapOf(
                        "zfeqztppri",
                        "wyfzqwhxxbuyqa",
                        "bqwcsdbnwdcf",
                        "lxorjaltolmncws",
                        "jcanvxbvtvudut",
                        "ucqdpfuvglsb",
                        "xqtvcofu",
                        "cormr"))
                .withEtag("ztzp")
                .withEnabledState(State.DISABLED);
        model = BinaryData.fromObject(model).toObject(ProfileInner.class);
        Assertions.assertEquals("fn", model.location());
        Assertions.assertEquals("wyfzqwhxxbuyqa", model.tags().get("zfeqztppri"));
        Assertions.assertEquals("ztzp", model.etag());
        Assertions.assertEquals(State.DISABLED, model.enabledState());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
