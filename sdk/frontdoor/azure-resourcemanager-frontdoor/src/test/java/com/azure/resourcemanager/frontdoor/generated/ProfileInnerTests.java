// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.frontdoor.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.frontdoor.fluent.models.ProfileInner;
import com.azure.resourcemanager.frontdoor.models.State;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ProfileInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ProfileInner model = BinaryData.fromString(
            "{\"properties\":{\"resourceState\":\"Disabled\",\"enabledState\":\"Disabled\"},\"etag\":\"fwqzdz\",\"location\":\"tilaxh\",\"tags\":{\"wivkxo\":\"qlyvijo\",\"ti\":\"zunbixx\"},\"id\":\"vcpwpgclrc\",\"name\":\"vtsoxf\",\"type\":\"kenx\"}")
            .toObject(ProfileInner.class);
        Assertions.assertEquals("tilaxh", model.location());
        Assertions.assertEquals("qlyvijo", model.tags().get("wivkxo"));
        Assertions.assertEquals("fwqzdz", model.etag());
        Assertions.assertEquals(State.DISABLED, model.enabledState());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ProfileInner model = new ProfileInner().withLocation("tilaxh")
            .withTags(mapOf("wivkxo", "qlyvijo", "ti", "zunbixx"))
            .withEtag("fwqzdz")
            .withEnabledState(State.DISABLED);
        model = BinaryData.fromObject(model).toObject(ProfileInner.class);
        Assertions.assertEquals("tilaxh", model.location());
        Assertions.assertEquals("qlyvijo", model.tags().get("wivkxo"));
        Assertions.assertEquals("fwqzdz", model.etag());
        Assertions.assertEquals(State.DISABLED, model.enabledState());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
