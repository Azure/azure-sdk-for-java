// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.frontdoor.generated;

import com.azure.core.management.SubResource;
import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.frontdoor.fluent.models.BackendPoolProperties;
import com.azure.resourcemanager.frontdoor.models.Backend;
import com.azure.resourcemanager.frontdoor.models.BackendEnabledState;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class BackendPoolPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        BackendPoolProperties model =
            BinaryData
                .fromString(
                    "{\"resourceState\":\"Enabled\",\"backends\":[{\"address\":\"krmnjijpxacqqud\",\"privateLinkAlias\":\"byxbaaabjy\",\"privateLinkResourceId\":\"yffimrzrtuzqogs\",\"privateLinkLocation\":\"nevfdnw\",\"privateEndpointStatus\":\"Timeout\",\"privateLinkApprovalMessage\":\"wzsyyceuzs\",\"httpPort\":1342883301,\"httpsPort\":414197490,\"enabledState\":\"Disabled\",\"priority\":470627882,\"weight\":1769429451,\"backendHostHeader\":\"thzvaytdwkqbrqu\"},{\"address\":\"axhexiilivp\",\"privateLinkAlias\":\"iirqtd\",\"privateLinkResourceId\":\"axoruzfgsquy\",\"privateLinkLocation\":\"rxxle\",\"privateEndpointStatus\":\"Timeout\",\"privateLinkApprovalMessage\":\"mxjezwlw\",\"httpPort\":966805028,\"httpsPort\":1769146485,\"enabledState\":\"Disabled\",\"priority\":172570467,\"weight\":1821219123,\"backendHostHeader\":\"atdooaojkniod\"}],\"loadBalancingSettings\":{\"id\":\"ebwnujhe\"},\"healthProbeSettings\":{\"id\":\"bvdkcrodtjin\"}}")
                .toObject(BackendPoolProperties.class);
        Assertions.assertEquals("krmnjijpxacqqud", model.backends().get(0).address());
        Assertions.assertEquals("byxbaaabjy", model.backends().get(0).privateLinkAlias());
        Assertions.assertEquals("yffimrzrtuzqogs", model.backends().get(0).privateLinkResourceId());
        Assertions.assertEquals("nevfdnw", model.backends().get(0).privateLinkLocation());
        Assertions.assertEquals("wzsyyceuzs", model.backends().get(0).privateLinkApprovalMessage());
        Assertions.assertEquals(1342883301, model.backends().get(0).httpPort());
        Assertions.assertEquals(414197490, model.backends().get(0).httpsPort());
        Assertions.assertEquals(BackendEnabledState.DISABLED, model.backends().get(0).enabledState());
        Assertions.assertEquals(470627882, model.backends().get(0).priority());
        Assertions.assertEquals(1769429451, model.backends().get(0).weight());
        Assertions.assertEquals("thzvaytdwkqbrqu", model.backends().get(0).backendHostHeader());
        Assertions.assertEquals("ebwnujhe", model.loadBalancingSettings().id());
        Assertions.assertEquals("bvdkcrodtjin", model.healthProbeSettings().id());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        BackendPoolProperties model =
            new BackendPoolProperties()
                .withBackends(
                    Arrays
                        .asList(
                            new Backend()
                                .withAddress("krmnjijpxacqqud")
                                .withPrivateLinkAlias("byxbaaabjy")
                                .withPrivateLinkResourceId("yffimrzrtuzqogs")
                                .withPrivateLinkLocation("nevfdnw")
                                .withPrivateLinkApprovalMessage("wzsyyceuzs")
                                .withHttpPort(1342883301)
                                .withHttpsPort(414197490)
                                .withEnabledState(BackendEnabledState.DISABLED)
                                .withPriority(470627882)
                                .withWeight(1769429451)
                                .withBackendHostHeader("thzvaytdwkqbrqu"),
                            new Backend()
                                .withAddress("axhexiilivp")
                                .withPrivateLinkAlias("iirqtd")
                                .withPrivateLinkResourceId("axoruzfgsquy")
                                .withPrivateLinkLocation("rxxle")
                                .withPrivateLinkApprovalMessage("mxjezwlw")
                                .withHttpPort(966805028)
                                .withHttpsPort(1769146485)
                                .withEnabledState(BackendEnabledState.DISABLED)
                                .withPriority(172570467)
                                .withWeight(1821219123)
                                .withBackendHostHeader("atdooaojkniod")))
                .withLoadBalancingSettings(new SubResource().withId("ebwnujhe"))
                .withHealthProbeSettings(new SubResource().withId("bvdkcrodtjin"));
        model = BinaryData.fromObject(model).toObject(BackendPoolProperties.class);
        Assertions.assertEquals("krmnjijpxacqqud", model.backends().get(0).address());
        Assertions.assertEquals("byxbaaabjy", model.backends().get(0).privateLinkAlias());
        Assertions.assertEquals("yffimrzrtuzqogs", model.backends().get(0).privateLinkResourceId());
        Assertions.assertEquals("nevfdnw", model.backends().get(0).privateLinkLocation());
        Assertions.assertEquals("wzsyyceuzs", model.backends().get(0).privateLinkApprovalMessage());
        Assertions.assertEquals(1342883301, model.backends().get(0).httpPort());
        Assertions.assertEquals(414197490, model.backends().get(0).httpsPort());
        Assertions.assertEquals(BackendEnabledState.DISABLED, model.backends().get(0).enabledState());
        Assertions.assertEquals(470627882, model.backends().get(0).priority());
        Assertions.assertEquals(1769429451, model.backends().get(0).weight());
        Assertions.assertEquals("thzvaytdwkqbrqu", model.backends().get(0).backendHostHeader());
        Assertions.assertEquals("ebwnujhe", model.loadBalancingSettings().id());
        Assertions.assertEquals("bvdkcrodtjin", model.healthProbeSettings().id());
    }
}
