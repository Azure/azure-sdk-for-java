// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.frontdoor.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.frontdoor.FrontDoorManager;
import com.azure.resourcemanager.frontdoor.models.HeaderActionType;
import com.azure.resourcemanager.frontdoor.models.MatchProcessingBehavior;
import com.azure.resourcemanager.frontdoor.models.RulesEngine;
import com.azure.resourcemanager.frontdoor.models.RulesEngineMatchVariable;
import com.azure.resourcemanager.frontdoor.models.RulesEngineOperator;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class RulesEnginesListByFrontDoorMockTests {
    @Test
    public void testListByFrontDoor() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"resourceState\":\"Creating\",\"rules\":[{\"name\":\"tvlxhrpqh\",\"priority\":1760825319,\"action\":{\"requestHeaderActions\":[{\"headerActionType\":\"Overwrite\",\"headerName\":\"ouq\"},{\"headerActionType\":\"Append\",\"headerName\":\"bhbcdszir\"},{\"headerActionType\":\"Append\",\"headerName\":\"an\"},{\"headerActionType\":\"Append\",\"headerName\":\"ypmbltoormkfq\"}],\"responseHeaderActions\":[{\"headerActionType\":\"Append\",\"headerName\":\"dykalsygaolnjpnn\"},{\"headerActionType\":\"Delete\",\"headerName\":\"jksibjg\"},{\"headerActionType\":\"Overwrite\",\"headerName\":\"jxxahmrnad\"},{\"headerActionType\":\"Delete\",\"headerName\":\"qegxyivpin\"}],\"routeConfigurationOverride\":{\"@odata.type\":\"RouteConfiguration\"}},\"matchConditions\":[{\"rulesEngineMatchVariable\":\"RequestMethod\",\"rulesEngineOperator\":\"BeginsWith\",\"rulesEngineMatchValue\":[]},{\"rulesEngineMatchVariable\":\"RequestFilename\",\"rulesEngineOperator\":\"LessThan\",\"rulesEngineMatchValue\":[]}],\"matchProcessingBehavior\":\"Stop\"},{\"name\":\"qxnhmb\",\"priority\":2095777913,\"action\":{\"requestHeaderActions\":[{\"headerActionType\":\"Append\",\"headerName\":\"aujvaa\"},{\"headerActionType\":\"Append\",\"headerName\":\"ggiycwkdtaawxwf\"},{\"headerActionType\":\"Delete\",\"headerName\":\"aumrrqmbzmqkrat\"}],\"responseHeaderActions\":[{\"headerActionType\":\"Overwrite\",\"headerName\":\"bjsidb\"},{\"headerActionType\":\"Append\",\"headerName\":\"kfpksokdgo\"}],\"routeConfigurationOverride\":{\"@odata.type\":\"RouteConfiguration\"}},\"matchConditions\":[{\"rulesEngineMatchVariable\":\"RequestPath\",\"rulesEngineOperator\":\"LessThanOrEqual\",\"rulesEngineMatchValue\":[]},{\"rulesEngineMatchVariable\":\"RequestPath\",\"rulesEngineOperator\":\"EndsWith\",\"rulesEngineMatchValue\":[]},{\"rulesEngineMatchVariable\":\"RequestScheme\",\"rulesEngineOperator\":\"GreaterThanOrEqual\",\"rulesEngineMatchValue\":[]},{\"rulesEngineMatchVariable\":\"QueryString\",\"rulesEngineOperator\":\"Any\",\"rulesEngineMatchValue\":[]}],\"matchProcessingBehavior\":\"Stop\"}]},\"id\":\"zkye\",\"name\":\"nfnzhhh\",\"type\":\"o\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        FrontDoorManager manager = FrontDoorManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<RulesEngine> response
            = manager.rulesEngines().listByFrontDoor("br", "ffg", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("tvlxhrpqh", response.iterator().next().rules().get(0).name());
        Assertions.assertEquals(1760825319, response.iterator().next().rules().get(0).priority());
        Assertions.assertEquals(HeaderActionType.OVERWRITE,
            response.iterator().next().rules().get(0).action().requestHeaderActions().get(0).headerActionType());
        Assertions.assertEquals("ouq",
            response.iterator().next().rules().get(0).action().requestHeaderActions().get(0).headerName());
        Assertions.assertEquals(HeaderActionType.APPEND,
            response.iterator().next().rules().get(0).action().responseHeaderActions().get(0).headerActionType());
        Assertions.assertEquals("dykalsygaolnjpnn",
            response.iterator().next().rules().get(0).action().responseHeaderActions().get(0).headerName());
        Assertions.assertEquals(RulesEngineMatchVariable.REQUEST_METHOD,
            response.iterator().next().rules().get(0).matchConditions().get(0).rulesEngineMatchVariable());
        Assertions.assertEquals(RulesEngineOperator.BEGINS_WITH,
            response.iterator().next().rules().get(0).matchConditions().get(0).rulesEngineOperator());
        Assertions.assertEquals(MatchProcessingBehavior.STOP,
            response.iterator().next().rules().get(0).matchProcessingBehavior());
    }
}
