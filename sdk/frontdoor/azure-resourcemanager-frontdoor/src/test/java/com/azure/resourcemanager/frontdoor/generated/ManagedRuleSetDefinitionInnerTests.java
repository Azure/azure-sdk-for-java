// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.frontdoor.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.frontdoor.fluent.models.ManagedRuleSetDefinitionInner;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ManagedRuleSetDefinitionInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ManagedRuleSetDefinitionInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"provisioningState\":\"ujysvle\",\"ruleSetId\":\"vfqawrlyxwjkcpr\",\"ruleSetType\":\"wbxgjvt\",\"ruleSetVersion\":\"p\",\"ruleGroups\":[{\"ruleGroupName\":\"dnrujqguhmuouqfp\",\"description\":\"zw\",\"rules\":[]},{\"ruleGroupName\":\"uitnwuiz\",\"description\":\"zxufiz\",\"rules\":[]}]},\"location\":\"kyfi\",\"tags\":{\"zwdzuh\":\"idf\",\"wxmnteiwao\":\"ymwisdkft\"},\"id\":\"vkmijcmmxdcuf\",\"name\":\"fsrpymzidnse\",\"type\":\"cxtbzsg\"}")
                .toObject(ManagedRuleSetDefinitionInner.class);
        Assertions.assertEquals("kyfi", model.location());
        Assertions.assertEquals("idf", model.tags().get("zwdzuh"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ManagedRuleSetDefinitionInner model =
            new ManagedRuleSetDefinitionInner()
                .withLocation("kyfi")
                .withTags(mapOf("zwdzuh", "idf", "wxmnteiwao", "ymwisdkft"));
        model = BinaryData.fromObject(model).toObject(ManagedRuleSetDefinitionInner.class);
        Assertions.assertEquals("kyfi", model.location());
        Assertions.assertEquals("idf", model.tags().get("zwdzuh"));
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
