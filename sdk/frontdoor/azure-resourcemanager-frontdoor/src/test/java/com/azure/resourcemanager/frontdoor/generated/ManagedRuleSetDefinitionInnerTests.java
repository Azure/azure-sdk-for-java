// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.frontdoor.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.frontdoor.fluent.models.ManagedRuleSetDefinitionInner;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ManagedRuleSetDefinitionInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ManagedRuleSetDefinitionInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"provisioningState\":\"pij\",\"ruleSetId\":\"rxfrddhc\",\"ruleSetType\":\"tizzronasxif\",\"ruleSetVersion\":\"zq\",\"ruleGroups\":[{\"ruleGroupName\":\"tw\",\"description\":\"gogczhonnxkrlgny\",\"rules\":[]},{\"ruleGroupName\":\"ssxkkgthr\",\"description\":\"hxjbdhqxvc\",\"rules\":[]},{\"ruleGroupName\":\"rpdsof\",\"description\":\"hrnsvbu\",\"rules\":[]}]},\"location\":\"dvzyybycnun\",\"tags\":{\"ikyzirtxdy\":\"rtkfawnopq\",\"ejnt\":\"x\"},\"id\":\"sewgioilqukr\",\"name\":\"dxtqmieoxo\",\"type\":\"ggufhyaomtb\"}")
                .toObject(ManagedRuleSetDefinitionInner.class);
        Assertions.assertEquals("dvzyybycnun", model.location());
        Assertions.assertEquals("rtkfawnopq", model.tags().get("ikyzirtxdy"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ManagedRuleSetDefinitionInner model =
            new ManagedRuleSetDefinitionInner()
                .withLocation("dvzyybycnun")
                .withTags(mapOf("ikyzirtxdy", "rtkfawnopq", "ejnt", "x"));
        model = BinaryData.fromObject(model).toObject(ManagedRuleSetDefinitionInner.class);
        Assertions.assertEquals("dvzyybycnun", model.location());
        Assertions.assertEquals("rtkfawnopq", model.tags().get("ikyzirtxdy"));
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
