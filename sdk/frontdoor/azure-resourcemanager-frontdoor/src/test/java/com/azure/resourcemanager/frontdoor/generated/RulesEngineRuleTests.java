// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.frontdoor.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.frontdoor.models.HeaderAction;
import com.azure.resourcemanager.frontdoor.models.HeaderActionType;
import com.azure.resourcemanager.frontdoor.models.MatchProcessingBehavior;
import com.azure.resourcemanager.frontdoor.models.RouteConfiguration;
import com.azure.resourcemanager.frontdoor.models.RulesEngineAction;
import com.azure.resourcemanager.frontdoor.models.RulesEngineMatchCondition;
import com.azure.resourcemanager.frontdoor.models.RulesEngineMatchVariable;
import com.azure.resourcemanager.frontdoor.models.RulesEngineOperator;
import com.azure.resourcemanager.frontdoor.models.RulesEngineRule;
import com.azure.resourcemanager.frontdoor.models.Transform;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class RulesEngineRuleTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        RulesEngineRule model = BinaryData.fromString(
            "{\"name\":\"rwxkvtkkgl\",\"priority\":2106281603,\"action\":{\"requestHeaderActions\":[{\"headerActionType\":\"Delete\",\"headerName\":\"gvjayvblmh\",\"value\":\"zuhbxvvyhgsopb\"},{\"headerActionType\":\"Delete\",\"headerName\":\"qufegxuvwzfbn\",\"value\":\"mctlpdngitv\"},{\"headerActionType\":\"Overwrite\",\"headerName\":\"mhrixkwmyijejve\",\"value\":\"hbpnaixexccbd\"}],\"responseHeaderActions\":[{\"headerActionType\":\"Overwrite\",\"headerName\":\"hcexdrrvqa\",\"value\":\"kghtpwijnh\"}],\"routeConfigurationOverride\":{\"@odata.type\":\"RouteConfiguration\"}},\"matchConditions\":[{\"rulesEngineMatchVariable\":\"RequestHeader\",\"selector\":\"cxzbfvoowvr\",\"rulesEngineOperator\":\"Equal\",\"negateCondition\":false,\"rulesEngineMatchValue\":[\"qp\",\"y\",\"s\",\"ronzmyhgfip\"],\"transforms\":[\"RemoveNulls\",\"Lowercase\",\"Trim\",\"Trim\"]},{\"rulesEngineMatchVariable\":\"IsMobile\",\"selector\":\"krrjrea\",\"rulesEngineOperator\":\"Any\",\"negateCondition\":true,\"rulesEngineMatchValue\":[\"umh\",\"glikkxwslolb\",\"pvuzlmv\",\"elfk\"],\"transforms\":[\"UrlDecode\",\"Uppercase\",\"UrlEncode\",\"RemoveNulls\"]}],\"matchProcessingBehavior\":\"Stop\"}")
            .toObject(RulesEngineRule.class);
        Assertions.assertEquals("rwxkvtkkgl", model.name());
        Assertions.assertEquals(2106281603, model.priority());
        Assertions.assertEquals(HeaderActionType.DELETE,
            model.action().requestHeaderActions().get(0).headerActionType());
        Assertions.assertEquals("gvjayvblmh", model.action().requestHeaderActions().get(0).headerName());
        Assertions.assertEquals("zuhbxvvyhgsopb", model.action().requestHeaderActions().get(0).value());
        Assertions.assertEquals(HeaderActionType.OVERWRITE,
            model.action().responseHeaderActions().get(0).headerActionType());
        Assertions.assertEquals("hcexdrrvqa", model.action().responseHeaderActions().get(0).headerName());
        Assertions.assertEquals("kghtpwijnh", model.action().responseHeaderActions().get(0).value());
        Assertions.assertEquals(RulesEngineMatchVariable.REQUEST_HEADER,
            model.matchConditions().get(0).rulesEngineMatchVariable());
        Assertions.assertEquals("cxzbfvoowvr", model.matchConditions().get(0).selector());
        Assertions.assertEquals(RulesEngineOperator.EQUAL, model.matchConditions().get(0).rulesEngineOperator());
        Assertions.assertEquals(false, model.matchConditions().get(0).negateCondition());
        Assertions.assertEquals("qp", model.matchConditions().get(0).rulesEngineMatchValue().get(0));
        Assertions.assertEquals(Transform.REMOVE_NULLS, model.matchConditions().get(0).transforms().get(0));
        Assertions.assertEquals(MatchProcessingBehavior.STOP, model.matchProcessingBehavior());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        RulesEngineRule model = new RulesEngineRule().withName("rwxkvtkkgl")
            .withPriority(2106281603)
            .withAction(new RulesEngineAction()
                .withRequestHeaderActions(Arrays.asList(
                    new HeaderAction().withHeaderActionType(HeaderActionType.DELETE)
                        .withHeaderName("gvjayvblmh")
                        .withValue("zuhbxvvyhgsopb"),
                    new HeaderAction().withHeaderActionType(HeaderActionType.DELETE)
                        .withHeaderName("qufegxuvwzfbn")
                        .withValue("mctlpdngitv"),
                    new HeaderAction().withHeaderActionType(HeaderActionType.OVERWRITE)
                        .withHeaderName("mhrixkwmyijejve")
                        .withValue("hbpnaixexccbd")))
                .withResponseHeaderActions(
                    Arrays.asList(new HeaderAction().withHeaderActionType(HeaderActionType.OVERWRITE)
                        .withHeaderName("hcexdrrvqa")
                        .withValue("kghtpwijnh")))
                .withRouteConfigurationOverride(new RouteConfiguration()))
            .withMatchConditions(
                Arrays
                    .asList(
                        new RulesEngineMatchCondition()
                            .withRulesEngineMatchVariable(RulesEngineMatchVariable.REQUEST_HEADER)
                            .withSelector("cxzbfvoowvr")
                            .withRulesEngineOperator(RulesEngineOperator.EQUAL)
                            .withNegateCondition(false)
                            .withRulesEngineMatchValue(Arrays.asList("qp", "y", "s", "ronzmyhgfip"))
                            .withTransforms(Arrays.asList(Transform.REMOVE_NULLS, Transform.LOWERCASE, Transform.TRIM,
                                Transform.TRIM)),
                        new RulesEngineMatchCondition().withRulesEngineMatchVariable(RulesEngineMatchVariable.IS_MOBILE)
                            .withSelector("krrjrea")
                            .withRulesEngineOperator(RulesEngineOperator.ANY)
                            .withNegateCondition(true)
                            .withRulesEngineMatchValue(Arrays.asList("umh", "glikkxwslolb", "pvuzlmv", "elfk"))
                            .withTransforms(Arrays.asList(Transform.URL_DECODE, Transform.UPPERCASE,
                                Transform.URL_ENCODE, Transform.REMOVE_NULLS))))
            .withMatchProcessingBehavior(MatchProcessingBehavior.STOP);
        model = BinaryData.fromObject(model).toObject(RulesEngineRule.class);
        Assertions.assertEquals("rwxkvtkkgl", model.name());
        Assertions.assertEquals(2106281603, model.priority());
        Assertions.assertEquals(HeaderActionType.DELETE,
            model.action().requestHeaderActions().get(0).headerActionType());
        Assertions.assertEquals("gvjayvblmh", model.action().requestHeaderActions().get(0).headerName());
        Assertions.assertEquals("zuhbxvvyhgsopb", model.action().requestHeaderActions().get(0).value());
        Assertions.assertEquals(HeaderActionType.OVERWRITE,
            model.action().responseHeaderActions().get(0).headerActionType());
        Assertions.assertEquals("hcexdrrvqa", model.action().responseHeaderActions().get(0).headerName());
        Assertions.assertEquals("kghtpwijnh", model.action().responseHeaderActions().get(0).value());
        Assertions.assertEquals(RulesEngineMatchVariable.REQUEST_HEADER,
            model.matchConditions().get(0).rulesEngineMatchVariable());
        Assertions.assertEquals("cxzbfvoowvr", model.matchConditions().get(0).selector());
        Assertions.assertEquals(RulesEngineOperator.EQUAL, model.matchConditions().get(0).rulesEngineOperator());
        Assertions.assertEquals(false, model.matchConditions().get(0).negateCondition());
        Assertions.assertEquals("qp", model.matchConditions().get(0).rulesEngineMatchValue().get(0));
        Assertions.assertEquals(Transform.REMOVE_NULLS, model.matchConditions().get(0).transforms().get(0));
        Assertions.assertEquals(MatchProcessingBehavior.STOP, model.matchProcessingBehavior());
    }
}
