// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.frontdoor.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.frontdoor.models.HeaderAction;
import com.azure.resourcemanager.frontdoor.models.HeaderActionType;
import com.azure.resourcemanager.frontdoor.models.MatchProcessingBehavior;
import com.azure.resourcemanager.frontdoor.models.RouteConfiguration;
import com.azure.resourcemanager.frontdoor.models.RulesEngineAction;
import com.azure.resourcemanager.frontdoor.models.RulesEngineMatchCondition;
import com.azure.resourcemanager.frontdoor.models.RulesEngineMatchVariable;
import com.azure.resourcemanager.frontdoor.models.RulesEngineOperator;
import com.azure.resourcemanager.frontdoor.models.RulesEngineRule;
import com.azure.resourcemanager.frontdoor.models.Transform;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class RulesEngineRuleTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        RulesEngineRule model =
            BinaryData
                .fromString(
                    "{\"name\":\"n\",\"priority\":1515008733,\"action\":{\"requestHeaderActions\":[{\"headerActionType\":\"Append\",\"headerName\":\"vxzbncb\",\"value\":\"lpstdbhhxsrzdz\"}],\"responseHeaderActions\":[{\"headerActionType\":\"Overwrite\",\"headerName\":\"scdntnevf\",\"value\":\"jmygtdsslswtmwer\"},{\"headerActionType\":\"Overwrite\",\"headerName\":\"fzp\",\"value\":\"semwabnet\"},{\"headerActionType\":\"Append\",\"headerName\":\"hszhedplvwiwu\",\"value\":\"wmbesldnkw\"}],\"routeConfigurationOverride\":{\"@odata.type\":\"RouteConfiguration\"}},\"matchConditions\":[{\"rulesEngineMatchVariable\":\"RemoteAddr\",\"selector\":\"lcxog\",\"rulesEngineOperator\":\"BeginsWith\",\"negateCondition\":false,\"rulesEngineMatchValue\":[\"z\",\"nsikvmkqzeqqkdl\",\"fzxmhhvhgureodkw\"],\"transforms\":[\"UrlDecode\",\"UrlEncode\",\"UrlEncode\"]},{\"rulesEngineMatchVariable\":\"RequestScheme\",\"selector\":\"bqdxbx\",\"rulesEngineOperator\":\"EndsWith\",\"negateCondition\":true,\"rulesEngineMatchValue\":[\"gqxndlkzgxhuripl\",\"podxunkb\",\"bxmubyynt\",\"lrb\"],\"transforms\":[\"Lowercase\",\"Trim\"]},{\"rulesEngineMatchVariable\":\"RequestBody\",\"selector\":\"seotgqrllt\",\"rulesEngineOperator\":\"Any\",\"negateCondition\":true,\"rulesEngineMatchValue\":[\"uwz\",\"zxb\",\"pgcjefuzmuvp\"],\"transforms\":[\"RemoveNulls\"]}],\"matchProcessingBehavior\":\"Stop\"}")
                .toObject(RulesEngineRule.class);
        Assertions.assertEquals("n", model.name());
        Assertions.assertEquals(1515008733, model.priority());
        Assertions
            .assertEquals(HeaderActionType.APPEND, model.action().requestHeaderActions().get(0).headerActionType());
        Assertions.assertEquals("vxzbncb", model.action().requestHeaderActions().get(0).headerName());
        Assertions.assertEquals("lpstdbhhxsrzdz", model.action().requestHeaderActions().get(0).value());
        Assertions
            .assertEquals(HeaderActionType.OVERWRITE, model.action().responseHeaderActions().get(0).headerActionType());
        Assertions.assertEquals("scdntnevf", model.action().responseHeaderActions().get(0).headerName());
        Assertions.assertEquals("jmygtdsslswtmwer", model.action().responseHeaderActions().get(0).value());
        Assertions
            .assertEquals(
                RulesEngineMatchVariable.REMOTE_ADDR, model.matchConditions().get(0).rulesEngineMatchVariable());
        Assertions.assertEquals("lcxog", model.matchConditions().get(0).selector());
        Assertions.assertEquals(RulesEngineOperator.BEGINS_WITH, model.matchConditions().get(0).rulesEngineOperator());
        Assertions.assertEquals(false, model.matchConditions().get(0).negateCondition());
        Assertions.assertEquals("z", model.matchConditions().get(0).rulesEngineMatchValue().get(0));
        Assertions.assertEquals(Transform.URL_DECODE, model.matchConditions().get(0).transforms().get(0));
        Assertions.assertEquals(MatchProcessingBehavior.STOP, model.matchProcessingBehavior());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        RulesEngineRule model =
            new RulesEngineRule()
                .withName("n")
                .withPriority(1515008733)
                .withAction(
                    new RulesEngineAction()
                        .withRequestHeaderActions(
                            Arrays
                                .asList(
                                    new HeaderAction()
                                        .withHeaderActionType(HeaderActionType.APPEND)
                                        .withHeaderName("vxzbncb")
                                        .withValue("lpstdbhhxsrzdz")))
                        .withResponseHeaderActions(
                            Arrays
                                .asList(
                                    new HeaderAction()
                                        .withHeaderActionType(HeaderActionType.OVERWRITE)
                                        .withHeaderName("scdntnevf")
                                        .withValue("jmygtdsslswtmwer"),
                                    new HeaderAction()
                                        .withHeaderActionType(HeaderActionType.OVERWRITE)
                                        .withHeaderName("fzp")
                                        .withValue("semwabnet"),
                                    new HeaderAction()
                                        .withHeaderActionType(HeaderActionType.APPEND)
                                        .withHeaderName("hszhedplvwiwu")
                                        .withValue("wmbesldnkw")))
                        .withRouteConfigurationOverride(new RouteConfiguration()))
                .withMatchConditions(
                    Arrays
                        .asList(
                            new RulesEngineMatchCondition()
                                .withRulesEngineMatchVariable(RulesEngineMatchVariable.REMOTE_ADDR)
                                .withSelector("lcxog")
                                .withRulesEngineOperator(RulesEngineOperator.BEGINS_WITH)
                                .withNegateCondition(false)
                                .withRulesEngineMatchValue(Arrays.asList("z", "nsikvmkqzeqqkdl", "fzxmhhvhgureodkw"))
                                .withTransforms(
                                    Arrays.asList(Transform.URL_DECODE, Transform.URL_ENCODE, Transform.URL_ENCODE)),
                            new RulesEngineMatchCondition()
                                .withRulesEngineMatchVariable(RulesEngineMatchVariable.REQUEST_SCHEME)
                                .withSelector("bqdxbx")
                                .withRulesEngineOperator(RulesEngineOperator.ENDS_WITH)
                                .withNegateCondition(true)
                                .withRulesEngineMatchValue(
                                    Arrays.asList("gqxndlkzgxhuripl", "podxunkb", "bxmubyynt", "lrb"))
                                .withTransforms(Arrays.asList(Transform.LOWERCASE, Transform.TRIM)),
                            new RulesEngineMatchCondition()
                                .withRulesEngineMatchVariable(RulesEngineMatchVariable.REQUEST_BODY)
                                .withSelector("seotgqrllt")
                                .withRulesEngineOperator(RulesEngineOperator.ANY)
                                .withNegateCondition(true)
                                .withRulesEngineMatchValue(Arrays.asList("uwz", "zxb", "pgcjefuzmuvp"))
                                .withTransforms(Arrays.asList(Transform.REMOVE_NULLS))))
                .withMatchProcessingBehavior(MatchProcessingBehavior.STOP);
        model = BinaryData.fromObject(model).toObject(RulesEngineRule.class);
        Assertions.assertEquals("n", model.name());
        Assertions.assertEquals(1515008733, model.priority());
        Assertions
            .assertEquals(HeaderActionType.APPEND, model.action().requestHeaderActions().get(0).headerActionType());
        Assertions.assertEquals("vxzbncb", model.action().requestHeaderActions().get(0).headerName());
        Assertions.assertEquals("lpstdbhhxsrzdz", model.action().requestHeaderActions().get(0).value());
        Assertions
            .assertEquals(HeaderActionType.OVERWRITE, model.action().responseHeaderActions().get(0).headerActionType());
        Assertions.assertEquals("scdntnevf", model.action().responseHeaderActions().get(0).headerName());
        Assertions.assertEquals("jmygtdsslswtmwer", model.action().responseHeaderActions().get(0).value());
        Assertions
            .assertEquals(
                RulesEngineMatchVariable.REMOTE_ADDR, model.matchConditions().get(0).rulesEngineMatchVariable());
        Assertions.assertEquals("lcxog", model.matchConditions().get(0).selector());
        Assertions.assertEquals(RulesEngineOperator.BEGINS_WITH, model.matchConditions().get(0).rulesEngineOperator());
        Assertions.assertEquals(false, model.matchConditions().get(0).negateCondition());
        Assertions.assertEquals("z", model.matchConditions().get(0).rulesEngineMatchValue().get(0));
        Assertions.assertEquals(Transform.URL_DECODE, model.matchConditions().get(0).transforms().get(0));
        Assertions.assertEquals(MatchProcessingBehavior.STOP, model.matchProcessingBehavior());
    }
}
