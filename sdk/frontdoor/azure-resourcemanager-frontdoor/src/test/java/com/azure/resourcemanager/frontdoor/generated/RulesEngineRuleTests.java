// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.frontdoor.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.frontdoor.models.HeaderAction;
import com.azure.resourcemanager.frontdoor.models.HeaderActionType;
import com.azure.resourcemanager.frontdoor.models.MatchProcessingBehavior;
import com.azure.resourcemanager.frontdoor.models.RouteConfiguration;
import com.azure.resourcemanager.frontdoor.models.RulesEngineAction;
import com.azure.resourcemanager.frontdoor.models.RulesEngineMatchCondition;
import com.azure.resourcemanager.frontdoor.models.RulesEngineMatchVariable;
import com.azure.resourcemanager.frontdoor.models.RulesEngineOperator;
import com.azure.resourcemanager.frontdoor.models.RulesEngineRule;
import com.azure.resourcemanager.frontdoor.models.Transform;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class RulesEngineRuleTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        RulesEngineRule model = BinaryData.fromString(
            "{\"name\":\"dmsmlm\",\"priority\":1354395459,\"action\":{\"requestHeaderActions\":[{\"headerActionType\":\"Append\",\"headerName\":\"trmaequiahxicslf\",\"value\":\"qzpiyyl\"},{\"headerActionType\":\"Delete\",\"headerName\":\"lnswhcc\",\"value\":\"hka\"},{\"headerActionType\":\"Delete\",\"headerName\":\"witqscywuggwoluh\",\"value\":\"bwemhairs\"}],\"responseHeaderActions\":[{\"headerActionType\":\"Delete\",\"headerName\":\"dwmsweypqwd\",\"value\":\"gicccnxqhuex\"}],\"routeConfigurationOverride\":{\"@odata.type\":\"tlstvlzywem\"}},\"matchConditions\":[{\"rulesEngineMatchVariable\":\"RequestUri\",\"selector\":\"sdtclusiypbs\",\"rulesEngineOperator\":\"Any\",\"negateCondition\":false,\"rulesEngineMatchValue\":[\"uslfead\"],\"transforms\":[\"Trim\"]},{\"rulesEngineMatchVariable\":\"RequestPath\",\"selector\":\"yhejhzisxgfp\",\"rulesEngineOperator\":\"LessThan\",\"negateCondition\":true,\"rulesEngineMatchValue\":[\"pv\"],\"transforms\":[\"RemoveNulls\"]},{\"rulesEngineMatchVariable\":\"RemoteAddr\",\"selector\":\"ujzra\",\"rulesEngineOperator\":\"Any\",\"negateCondition\":false,\"rulesEngineMatchValue\":[\"wrft\"],\"transforms\":[\"Trim\"]}],\"matchProcessingBehavior\":\"Stop\"}")
            .toObject(RulesEngineRule.class);
        Assertions.assertEquals("dmsmlm", model.name());
        Assertions.assertEquals(1354395459, model.priority());
        Assertions.assertEquals(HeaderActionType.APPEND,
            model.action().requestHeaderActions().get(0).headerActionType());
        Assertions.assertEquals("trmaequiahxicslf", model.action().requestHeaderActions().get(0).headerName());
        Assertions.assertEquals("qzpiyyl", model.action().requestHeaderActions().get(0).value());
        Assertions.assertEquals(HeaderActionType.DELETE,
            model.action().responseHeaderActions().get(0).headerActionType());
        Assertions.assertEquals("dwmsweypqwd", model.action().responseHeaderActions().get(0).headerName());
        Assertions.assertEquals("gicccnxqhuex", model.action().responseHeaderActions().get(0).value());
        Assertions.assertEquals(RulesEngineMatchVariable.REQUEST_URI,
            model.matchConditions().get(0).rulesEngineMatchVariable());
        Assertions.assertEquals("sdtclusiypbs", model.matchConditions().get(0).selector());
        Assertions.assertEquals(RulesEngineOperator.ANY, model.matchConditions().get(0).rulesEngineOperator());
        Assertions.assertEquals(false, model.matchConditions().get(0).negateCondition());
        Assertions.assertEquals("uslfead", model.matchConditions().get(0).rulesEngineMatchValue().get(0));
        Assertions.assertEquals(Transform.TRIM, model.matchConditions().get(0).transforms().get(0));
        Assertions.assertEquals(MatchProcessingBehavior.STOP, model.matchProcessingBehavior());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        RulesEngineRule model = new RulesEngineRule().withName("dmsmlm")
            .withPriority(1354395459)
            .withAction(new RulesEngineAction()
                .withRequestHeaderActions(Arrays.asList(
                    new HeaderAction().withHeaderActionType(HeaderActionType.APPEND)
                        .withHeaderName("trmaequiahxicslf")
                        .withValue("qzpiyyl"),
                    new HeaderAction().withHeaderActionType(HeaderActionType.DELETE)
                        .withHeaderName("lnswhcc")
                        .withValue("hka"),
                    new HeaderAction().withHeaderActionType(HeaderActionType.DELETE)
                        .withHeaderName("witqscywuggwoluh")
                        .withValue("bwemhairs")))
                .withResponseHeaderActions(
                    Arrays.asList(new HeaderAction().withHeaderActionType(HeaderActionType.DELETE)
                        .withHeaderName("dwmsweypqwd")
                        .withValue("gicccnxqhuex")))
                .withRouteConfigurationOverride(new RouteConfiguration()))
            .withMatchConditions(Arrays.asList(
                new RulesEngineMatchCondition().withRulesEngineMatchVariable(RulesEngineMatchVariable.REQUEST_URI)
                    .withSelector("sdtclusiypbs")
                    .withRulesEngineOperator(RulesEngineOperator.ANY)
                    .withNegateCondition(false)
                    .withRulesEngineMatchValue(Arrays.asList("uslfead"))
                    .withTransforms(Arrays.asList(Transform.TRIM)),
                new RulesEngineMatchCondition().withRulesEngineMatchVariable(RulesEngineMatchVariable.REQUEST_PATH)
                    .withSelector("yhejhzisxgfp")
                    .withRulesEngineOperator(RulesEngineOperator.LESS_THAN)
                    .withNegateCondition(true)
                    .withRulesEngineMatchValue(Arrays.asList("pv"))
                    .withTransforms(Arrays.asList(Transform.REMOVE_NULLS)),
                new RulesEngineMatchCondition().withRulesEngineMatchVariable(RulesEngineMatchVariable.REMOTE_ADDR)
                    .withSelector("ujzra")
                    .withRulesEngineOperator(RulesEngineOperator.ANY)
                    .withNegateCondition(false)
                    .withRulesEngineMatchValue(Arrays.asList("wrft"))
                    .withTransforms(Arrays.asList(Transform.TRIM))))
            .withMatchProcessingBehavior(MatchProcessingBehavior.STOP);
        model = BinaryData.fromObject(model).toObject(RulesEngineRule.class);
        Assertions.assertEquals("dmsmlm", model.name());
        Assertions.assertEquals(1354395459, model.priority());
        Assertions.assertEquals(HeaderActionType.APPEND,
            model.action().requestHeaderActions().get(0).headerActionType());
        Assertions.assertEquals("trmaequiahxicslf", model.action().requestHeaderActions().get(0).headerName());
        Assertions.assertEquals("qzpiyyl", model.action().requestHeaderActions().get(0).value());
        Assertions.assertEquals(HeaderActionType.DELETE,
            model.action().responseHeaderActions().get(0).headerActionType());
        Assertions.assertEquals("dwmsweypqwd", model.action().responseHeaderActions().get(0).headerName());
        Assertions.assertEquals("gicccnxqhuex", model.action().responseHeaderActions().get(0).value());
        Assertions.assertEquals(RulesEngineMatchVariable.REQUEST_URI,
            model.matchConditions().get(0).rulesEngineMatchVariable());
        Assertions.assertEquals("sdtclusiypbs", model.matchConditions().get(0).selector());
        Assertions.assertEquals(RulesEngineOperator.ANY, model.matchConditions().get(0).rulesEngineOperator());
        Assertions.assertEquals(false, model.matchConditions().get(0).negateCondition());
        Assertions.assertEquals("uslfead", model.matchConditions().get(0).rulesEngineMatchValue().get(0));
        Assertions.assertEquals(Transform.TRIM, model.matchConditions().get(0).transforms().get(0));
        Assertions.assertEquals(MatchProcessingBehavior.STOP, model.matchProcessingBehavior());
    }
}
