// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.frontdoor.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.frontdoor.fluent.models.TimeseriesProperties;
import com.azure.resourcemanager.frontdoor.models.AggregationInterval;
import com.azure.resourcemanager.frontdoor.models.TimeseriesDataPoint;
import com.azure.resourcemanager.frontdoor.models.TimeseriesType;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class TimeseriesPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TimeseriesProperties model = BinaryData.fromString(
            "{\"endpoint\":\"daultxijjumfq\",\"startDateTimeUTC\":\"z\",\"endDateTimeUTC\":\"qnmcjngzqdqx\",\"aggregationInterval\":\"Hourly\",\"timeseriesType\":\"MeasurementCounts\",\"country\":\"yfu\",\"timeseriesData\":[{\"dateTimeUTC\":\"vtuikzhajq\",\"value\":72.3863},{\"dateTimeUTC\":\"hm\",\"value\":36.039417},{\"dateTimeUTC\":\"yxynq\",\"value\":8.290434},{\"dateTimeUTC\":\"p\",\"value\":27.988852}]}")
            .toObject(TimeseriesProperties.class);
        Assertions.assertEquals("daultxijjumfq", model.endpoint());
        Assertions.assertEquals("z", model.startDateTimeUtc());
        Assertions.assertEquals("qnmcjngzqdqx", model.endDateTimeUtc());
        Assertions.assertEquals(AggregationInterval.HOURLY, model.aggregationInterval());
        Assertions.assertEquals(TimeseriesType.MEASUREMENT_COUNTS, model.timeseriesType());
        Assertions.assertEquals("yfu", model.country());
        Assertions.assertEquals("vtuikzhajq", model.timeseriesData().get(0).dateTimeUtc());
        Assertions.assertEquals(72.3863F, model.timeseriesData().get(0).value());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TimeseriesProperties model = new TimeseriesProperties().withEndpoint("daultxijjumfq")
            .withStartDateTimeUtc("z")
            .withEndDateTimeUtc("qnmcjngzqdqx")
            .withAggregationInterval(AggregationInterval.HOURLY)
            .withTimeseriesType(TimeseriesType.MEASUREMENT_COUNTS)
            .withCountry("yfu")
            .withTimeseriesData(
                Arrays.asList(new TimeseriesDataPoint().withDateTimeUtc("vtuikzhajq").withValue(72.3863F),
                    new TimeseriesDataPoint().withDateTimeUtc("hm").withValue(36.039417F),
                    new TimeseriesDataPoint().withDateTimeUtc("yxynq").withValue(8.290434F),
                    new TimeseriesDataPoint().withDateTimeUtc("p").withValue(27.988852F)));
        model = BinaryData.fromObject(model).toObject(TimeseriesProperties.class);
        Assertions.assertEquals("daultxijjumfq", model.endpoint());
        Assertions.assertEquals("z", model.startDateTimeUtc());
        Assertions.assertEquals("qnmcjngzqdqx", model.endDateTimeUtc());
        Assertions.assertEquals(AggregationInterval.HOURLY, model.aggregationInterval());
        Assertions.assertEquals(TimeseriesType.MEASUREMENT_COUNTS, model.timeseriesType());
        Assertions.assertEquals("yfu", model.country());
        Assertions.assertEquals("vtuikzhajq", model.timeseriesData().get(0).dateTimeUtc());
        Assertions.assertEquals(72.3863F, model.timeseriesData().get(0).value());
    }
}
