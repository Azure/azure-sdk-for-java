// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.frontdoor.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.frontdoor.fluent.models.TimeseriesProperties;
import com.azure.resourcemanager.frontdoor.models.AggregationInterval;
import com.azure.resourcemanager.frontdoor.models.TimeseriesDataPoint;
import com.azure.resourcemanager.frontdoor.models.TimeseriesType;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class TimeseriesPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TimeseriesProperties model = BinaryData.fromString(
            "{\"endpoint\":\"udqwyxebeybpmzz\",\"startDateTimeUTC\":\"tffyaqit\",\"endDateTimeUTC\":\"heioqa\",\"aggregationInterval\":\"Hourly\",\"timeseriesType\":\"LatencyP95\",\"country\":\"fuqyrxpdlcgqlsi\",\"timeseriesData\":[{\"dateTimeUTC\":\"frddgamquhiosrsj\",\"value\":58.48823},{\"dateTimeUTC\":\"cdisyir\",\"value\":97.895584},{\"dateTimeUTC\":\"czexrxzbujrtrhqv\",\"value\":21.759623}]}")
            .toObject(TimeseriesProperties.class);
        Assertions.assertEquals("udqwyxebeybpmzz", model.endpoint());
        Assertions.assertEquals("tffyaqit", model.startDateTimeUtc());
        Assertions.assertEquals("heioqa", model.endDateTimeUtc());
        Assertions.assertEquals(AggregationInterval.HOURLY, model.aggregationInterval());
        Assertions.assertEquals(TimeseriesType.LATENCY_P95, model.timeseriesType());
        Assertions.assertEquals("fuqyrxpdlcgqlsi", model.country());
        Assertions.assertEquals("frddgamquhiosrsj", model.timeseriesData().get(0).dateTimeUtc());
        Assertions.assertEquals(58.48823F, model.timeseriesData().get(0).value());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TimeseriesProperties model = new TimeseriesProperties().withEndpoint("udqwyxebeybpmzz")
            .withStartDateTimeUtc("tffyaqit")
            .withEndDateTimeUtc("heioqa")
            .withAggregationInterval(AggregationInterval.HOURLY)
            .withTimeseriesType(TimeseriesType.LATENCY_P95)
            .withCountry("fuqyrxpdlcgqlsi")
            .withTimeseriesData(
                Arrays.asList(new TimeseriesDataPoint().withDateTimeUtc("frddgamquhiosrsj").withValue(58.48823F),
                    new TimeseriesDataPoint().withDateTimeUtc("cdisyir").withValue(97.895584F),
                    new TimeseriesDataPoint().withDateTimeUtc("czexrxzbujrtrhqv").withValue(21.759623F)));
        model = BinaryData.fromObject(model).toObject(TimeseriesProperties.class);
        Assertions.assertEquals("udqwyxebeybpmzz", model.endpoint());
        Assertions.assertEquals("tffyaqit", model.startDateTimeUtc());
        Assertions.assertEquals("heioqa", model.endDateTimeUtc());
        Assertions.assertEquals(AggregationInterval.HOURLY, model.aggregationInterval());
        Assertions.assertEquals(TimeseriesType.LATENCY_P95, model.timeseriesType());
        Assertions.assertEquals("fuqyrxpdlcgqlsi", model.country());
        Assertions.assertEquals("frddgamquhiosrsj", model.timeseriesData().get(0).dateTimeUtc());
        Assertions.assertEquals(58.48823F, model.timeseriesData().get(0).value());
    }
}
