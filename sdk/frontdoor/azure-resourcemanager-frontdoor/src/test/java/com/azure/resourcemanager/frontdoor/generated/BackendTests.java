// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.frontdoor.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.frontdoor.models.Backend;
import com.azure.resourcemanager.frontdoor.models.BackendEnabledState;
import org.junit.jupiter.api.Assertions;

public final class BackendTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        Backend model = BinaryData.fromString(
            "{\"address\":\"vqikfxcvhrfsphu\",\"privateLinkAlias\":\"rttikteusqc\",\"privateLinkResourceId\":\"vyklxuby\",\"privateLinkLocation\":\"ff\",\"privateEndpointStatus\":\"Approved\",\"privateLinkApprovalMessage\":\"lcqcuubgqibrt\",\"httpPort\":2109412730,\"httpsPort\":1066879045,\"enabledState\":\"Enabled\",\"priority\":1081428420,\"weight\":1155063942,\"backendHostHeader\":\"qxihhrmooi\"}")
            .toObject(Backend.class);
        Assertions.assertEquals("vqikfxcvhrfsphu", model.address());
        Assertions.assertEquals("rttikteusqc", model.privateLinkAlias());
        Assertions.assertEquals("vyklxuby", model.privateLinkResourceId());
        Assertions.assertEquals("ff", model.privateLinkLocation());
        Assertions.assertEquals("lcqcuubgqibrt", model.privateLinkApprovalMessage());
        Assertions.assertEquals(2109412730, model.httpPort());
        Assertions.assertEquals(1066879045, model.httpsPort());
        Assertions.assertEquals(BackendEnabledState.ENABLED, model.enabledState());
        Assertions.assertEquals(1081428420, model.priority());
        Assertions.assertEquals(1155063942, model.weight());
        Assertions.assertEquals("qxihhrmooi", model.backendHostHeader());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        Backend model = new Backend().withAddress("vqikfxcvhrfsphu")
            .withPrivateLinkAlias("rttikteusqc")
            .withPrivateLinkResourceId("vyklxuby")
            .withPrivateLinkLocation("ff")
            .withPrivateLinkApprovalMessage("lcqcuubgqibrt")
            .withHttpPort(2109412730)
            .withHttpsPort(1066879045)
            .withEnabledState(BackendEnabledState.ENABLED)
            .withPriority(1081428420)
            .withWeight(1155063942)
            .withBackendHostHeader("qxihhrmooi");
        model = BinaryData.fromObject(model).toObject(Backend.class);
        Assertions.assertEquals("vqikfxcvhrfsphu", model.address());
        Assertions.assertEquals("rttikteusqc", model.privateLinkAlias());
        Assertions.assertEquals("vyklxuby", model.privateLinkResourceId());
        Assertions.assertEquals("ff", model.privateLinkLocation());
        Assertions.assertEquals("lcqcuubgqibrt", model.privateLinkApprovalMessage());
        Assertions.assertEquals(2109412730, model.httpPort());
        Assertions.assertEquals(1066879045, model.httpsPort());
        Assertions.assertEquals(BackendEnabledState.ENABLED, model.enabledState());
        Assertions.assertEquals(1081428420, model.priority());
        Assertions.assertEquals(1155063942, model.weight());
        Assertions.assertEquals("qxihhrmooi", model.backendHostHeader());
    }
}
