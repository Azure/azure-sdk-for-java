// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.frontdoor.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.frontdoor.models.RulesEngineMatchCondition;
import com.azure.resourcemanager.frontdoor.models.RulesEngineMatchVariable;
import com.azure.resourcemanager.frontdoor.models.RulesEngineOperator;
import com.azure.resourcemanager.frontdoor.models.Transform;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class RulesEngineMatchConditionTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        RulesEngineMatchCondition model = BinaryData.fromString(
            "{\"rulesEngineMatchVariable\":\"PostArgs\",\"selector\":\"jpqqmted\",\"rulesEngineOperator\":\"GreaterThanOrEqual\",\"negateCondition\":true,\"rulesEngineMatchValue\":[\"ihyeozphvw\"],\"transforms\":[\"Trim\"]}")
            .toObject(RulesEngineMatchCondition.class);
        Assertions.assertEquals(RulesEngineMatchVariable.POST_ARGS, model.rulesEngineMatchVariable());
        Assertions.assertEquals("jpqqmted", model.selector());
        Assertions.assertEquals(RulesEngineOperator.GREATER_THAN_OR_EQUAL, model.rulesEngineOperator());
        Assertions.assertEquals(true, model.negateCondition());
        Assertions.assertEquals("ihyeozphvw", model.rulesEngineMatchValue().get(0));
        Assertions.assertEquals(Transform.TRIM, model.transforms().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        RulesEngineMatchCondition model
            = new RulesEngineMatchCondition().withRulesEngineMatchVariable(RulesEngineMatchVariable.POST_ARGS)
                .withSelector("jpqqmted")
                .withRulesEngineOperator(RulesEngineOperator.GREATER_THAN_OR_EQUAL)
                .withNegateCondition(true)
                .withRulesEngineMatchValue(Arrays.asList("ihyeozphvw"))
                .withTransforms(Arrays.asList(Transform.TRIM));
        model = BinaryData.fromObject(model).toObject(RulesEngineMatchCondition.class);
        Assertions.assertEquals(RulesEngineMatchVariable.POST_ARGS, model.rulesEngineMatchVariable());
        Assertions.assertEquals("jpqqmted", model.selector());
        Assertions.assertEquals(RulesEngineOperator.GREATER_THAN_OR_EQUAL, model.rulesEngineOperator());
        Assertions.assertEquals(true, model.negateCondition());
        Assertions.assertEquals("ihyeozphvw", model.rulesEngineMatchValue().get(0));
        Assertions.assertEquals(Transform.TRIM, model.transforms().get(0));
    }
}
