// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.frontdoor.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.frontdoor.models.MatchCondition;
import com.azure.resourcemanager.frontdoor.models.MatchVariable;
import com.azure.resourcemanager.frontdoor.models.Operator;
import com.azure.resourcemanager.frontdoor.models.TransformType;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class MatchConditionTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MatchCondition model = BinaryData.fromString(
            "{\"matchVariable\":\"PostArgs\",\"selector\":\"jspodmailzyde\",\"operator\":\"Equal\",\"negateCondition\":true,\"matchValue\":[\"ahuxinpm\",\"njaqwixjspro\"],\"transforms\":[\"UrlEncode\",\"RemoveNulls\",\"Trim\",\"RemoveNulls\"]}")
            .toObject(MatchCondition.class);
        Assertions.assertEquals(MatchVariable.POST_ARGS, model.matchVariable());
        Assertions.assertEquals("jspodmailzyde", model.selector());
        Assertions.assertEquals(Operator.EQUAL, model.operator());
        Assertions.assertEquals(true, model.negateCondition());
        Assertions.assertEquals("ahuxinpm", model.matchValue().get(0));
        Assertions.assertEquals(TransformType.URL_ENCODE, model.transforms().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MatchCondition model = new MatchCondition().withMatchVariable(MatchVariable.POST_ARGS)
            .withSelector("jspodmailzyde")
            .withOperator(Operator.EQUAL)
            .withNegateCondition(true)
            .withMatchValue(Arrays.asList("ahuxinpm", "njaqwixjspro"))
            .withTransforms(Arrays.asList(TransformType.URL_ENCODE, TransformType.REMOVE_NULLS, TransformType.TRIM,
                TransformType.REMOVE_NULLS));
        model = BinaryData.fromObject(model).toObject(MatchCondition.class);
        Assertions.assertEquals(MatchVariable.POST_ARGS, model.matchVariable());
        Assertions.assertEquals("jspodmailzyde", model.selector());
        Assertions.assertEquals(Operator.EQUAL, model.operator());
        Assertions.assertEquals(true, model.negateCondition());
        Assertions.assertEquals("ahuxinpm", model.matchValue().get(0));
        Assertions.assertEquals(TransformType.URL_ENCODE, model.transforms().get(0));
    }
}
