// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.frontdoor.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.frontdoor.models.MatchCondition;
import com.azure.resourcemanager.frontdoor.models.MatchVariable;
import com.azure.resourcemanager.frontdoor.models.Operator;
import com.azure.resourcemanager.frontdoor.models.TransformType;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class MatchConditionTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MatchCondition model =
            BinaryData
                .fromString(
                    "{\"matchVariable\":\"QueryString\",\"selector\":\"otzi\",\"operator\":\"Equal\",\"negateCondition\":false,\"matchValue\":[\"pph\",\"szqzudphqamv\"],\"transforms\":[\"UrlDecode\",\"Lowercase\",\"Lowercase\",\"RemoveNulls\"]}")
                .toObject(MatchCondition.class);
        Assertions.assertEquals(MatchVariable.QUERY_STRING, model.matchVariable());
        Assertions.assertEquals("otzi", model.selector());
        Assertions.assertEquals(Operator.EQUAL, model.operator());
        Assertions.assertEquals(false, model.negateCondition());
        Assertions.assertEquals("pph", model.matchValue().get(0));
        Assertions.assertEquals(TransformType.URL_DECODE, model.transforms().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MatchCondition model =
            new MatchCondition()
                .withMatchVariable(MatchVariable.QUERY_STRING)
                .withSelector("otzi")
                .withOperator(Operator.EQUAL)
                .withNegateCondition(false)
                .withMatchValue(Arrays.asList("pph", "szqzudphqamv"))
                .withTransforms(
                    Arrays
                        .asList(
                            TransformType.URL_DECODE,
                            TransformType.LOWERCASE,
                            TransformType.LOWERCASE,
                            TransformType.REMOVE_NULLS));
        model = BinaryData.fromObject(model).toObject(MatchCondition.class);
        Assertions.assertEquals(MatchVariable.QUERY_STRING, model.matchVariable());
        Assertions.assertEquals("otzi", model.selector());
        Assertions.assertEquals(Operator.EQUAL, model.operator());
        Assertions.assertEquals(false, model.negateCondition());
        Assertions.assertEquals("pph", model.matchValue().get(0));
        Assertions.assertEquals(TransformType.URL_DECODE, model.transforms().get(0));
    }
}
