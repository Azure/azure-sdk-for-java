// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.frontdoor.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.frontdoor.fluent.models.TimeseriesInner;
import com.azure.resourcemanager.frontdoor.models.AggregationInterval;
import com.azure.resourcemanager.frontdoor.models.TimeseriesDataPoint;
import com.azure.resourcemanager.frontdoor.models.TimeseriesType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class TimeseriesInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TimeseriesInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"endpoint\":\"pjhvmdajvnys\",\"startDateTimeUTC\":\"nqecanoaeup\",\"endDateTimeUTC\":\"yhltrpmopjmcm\",\"aggregationInterval\":\"Hourly\",\"timeseriesType\":\"LatencyP50\",\"country\":\"hfuiuaodsfc\",\"timeseriesData\":[{\"dateTimeUTC\":\"odpuozmyzydag\",\"value\":52.79117},{\"dateTimeUTC\":\"bezy\",\"value\":56.270218}]},\"location\":\"kktwhrdxw\",\"tags\":{\"mbsureximo\":\"q\",\"fksymddystki\":\"yocf\"},\"id\":\"uxh\",\"name\":\"yudxorrqnbp\",\"type\":\"czvyifq\"}")
                .toObject(TimeseriesInner.class);
        Assertions.assertEquals("kktwhrdxw", model.location());
        Assertions.assertEquals("q", model.tags().get("mbsureximo"));
        Assertions.assertEquals("pjhvmdajvnys", model.endpoint());
        Assertions.assertEquals("nqecanoaeup", model.startDateTimeUtc());
        Assertions.assertEquals("yhltrpmopjmcm", model.endDateTimeUtc());
        Assertions.assertEquals(AggregationInterval.HOURLY, model.aggregationInterval());
        Assertions.assertEquals(TimeseriesType.LATENCY_P50, model.timeseriesType());
        Assertions.assertEquals("hfuiuaodsfc", model.country());
        Assertions.assertEquals("odpuozmyzydag", model.timeseriesData().get(0).dateTimeUtc());
        Assertions.assertEquals(52.79117F, model.timeseriesData().get(0).value());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TimeseriesInner model =
            new TimeseriesInner()
                .withLocation("kktwhrdxw")
                .withTags(mapOf("mbsureximo", "q", "fksymddystki", "yocf"))
                .withEndpoint("pjhvmdajvnys")
                .withStartDateTimeUtc("nqecanoaeup")
                .withEndDateTimeUtc("yhltrpmopjmcm")
                .withAggregationInterval(AggregationInterval.HOURLY)
                .withTimeseriesType(TimeseriesType.LATENCY_P50)
                .withCountry("hfuiuaodsfc")
                .withTimeseriesData(
                    Arrays
                        .asList(
                            new TimeseriesDataPoint().withDateTimeUtc("odpuozmyzydag").withValue(52.79117F),
                            new TimeseriesDataPoint().withDateTimeUtc("bezy").withValue(56.270218F)));
        model = BinaryData.fromObject(model).toObject(TimeseriesInner.class);
        Assertions.assertEquals("kktwhrdxw", model.location());
        Assertions.assertEquals("q", model.tags().get("mbsureximo"));
        Assertions.assertEquals("pjhvmdajvnys", model.endpoint());
        Assertions.assertEquals("nqecanoaeup", model.startDateTimeUtc());
        Assertions.assertEquals("yhltrpmopjmcm", model.endDateTimeUtc());
        Assertions.assertEquals(AggregationInterval.HOURLY, model.aggregationInterval());
        Assertions.assertEquals(TimeseriesType.LATENCY_P50, model.timeseriesType());
        Assertions.assertEquals("hfuiuaodsfc", model.country());
        Assertions.assertEquals("odpuozmyzydag", model.timeseriesData().get(0).dateTimeUtc());
        Assertions.assertEquals(52.79117F, model.timeseriesData().get(0).value());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
