// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.frontdoor.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.frontdoor.fluent.models.TimeseriesInner;
import com.azure.resourcemanager.frontdoor.models.AggregationInterval;
import com.azure.resourcemanager.frontdoor.models.TimeseriesDataPoint;
import com.azure.resourcemanager.frontdoor.models.TimeseriesType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class TimeseriesInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TimeseriesInner model = BinaryData.fromString(
            "{\"properties\":{\"endpoint\":\"kjpdnjzhajo\",\"startDateTimeUTC\":\"hjlmu\",\"endDateTimeUTC\":\"xprimrsop\",\"aggregationInterval\":\"Hourly\",\"timeseriesType\":\"MeasurementCounts\",\"country\":\"eislstvasylwx\",\"timeseriesData\":[{\"dateTimeUTC\":\"mweoohgu\",\"value\":61.49866},{\"dateTimeUTC\":\"boyjathwt\",\"value\":71.97595},{\"dateTimeUTC\":\"a\",\"value\":10.500872},{\"dateTimeUTC\":\"dxmeb\",\"value\":50.187386}]},\"location\":\"cjpahl\",\"tags\":{\"f\":\"a\",\"qcttadijaeukmrsi\":\"xnmwmqtibxyijddt\"},\"id\":\"ekpndzaapmudq\",\"name\":\"eqw\",\"type\":\"gp\"}")
            .toObject(TimeseriesInner.class);
        Assertions.assertEquals("cjpahl", model.location());
        Assertions.assertEquals("a", model.tags().get("f"));
        Assertions.assertEquals("kjpdnjzhajo", model.endpoint());
        Assertions.assertEquals("hjlmu", model.startDateTimeUtc());
        Assertions.assertEquals("xprimrsop", model.endDateTimeUtc());
        Assertions.assertEquals(AggregationInterval.HOURLY, model.aggregationInterval());
        Assertions.assertEquals(TimeseriesType.MEASUREMENT_COUNTS, model.timeseriesType());
        Assertions.assertEquals("eislstvasylwx", model.country());
        Assertions.assertEquals("mweoohgu", model.timeseriesData().get(0).dateTimeUtc());
        Assertions.assertEquals(61.49866F, model.timeseriesData().get(0).value());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TimeseriesInner model = new TimeseriesInner().withLocation("cjpahl")
            .withTags(mapOf("f", "a", "qcttadijaeukmrsi", "xnmwmqtibxyijddt"))
            .withEndpoint("kjpdnjzhajo")
            .withStartDateTimeUtc("hjlmu")
            .withEndDateTimeUtc("xprimrsop")
            .withAggregationInterval(AggregationInterval.HOURLY)
            .withTimeseriesType(TimeseriesType.MEASUREMENT_COUNTS)
            .withCountry("eislstvasylwx")
            .withTimeseriesData(
                Arrays.asList(new TimeseriesDataPoint().withDateTimeUtc("mweoohgu").withValue(61.49866F),
                    new TimeseriesDataPoint().withDateTimeUtc("boyjathwt").withValue(71.97595F),
                    new TimeseriesDataPoint().withDateTimeUtc("a").withValue(10.500872F),
                    new TimeseriesDataPoint().withDateTimeUtc("dxmeb").withValue(50.187386F)));
        model = BinaryData.fromObject(model).toObject(TimeseriesInner.class);
        Assertions.assertEquals("cjpahl", model.location());
        Assertions.assertEquals("a", model.tags().get("f"));
        Assertions.assertEquals("kjpdnjzhajo", model.endpoint());
        Assertions.assertEquals("hjlmu", model.startDateTimeUtc());
        Assertions.assertEquals("xprimrsop", model.endDateTimeUtc());
        Assertions.assertEquals(AggregationInterval.HOURLY, model.aggregationInterval());
        Assertions.assertEquals(TimeseriesType.MEASUREMENT_COUNTS, model.timeseriesType());
        Assertions.assertEquals("eislstvasylwx", model.country());
        Assertions.assertEquals("mweoohgu", model.timeseriesData().get(0).dateTimeUtc());
        Assertions.assertEquals(61.49866F, model.timeseriesData().get(0).value());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
