// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.frontdoor.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.frontdoor.fluent.models.TimeseriesInner;
import com.azure.resourcemanager.frontdoor.models.AggregationInterval;
import com.azure.resourcemanager.frontdoor.models.TimeseriesDataPoint;
import com.azure.resourcemanager.frontdoor.models.TimeseriesType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class TimeseriesInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TimeseriesInner model = BinaryData.fromString(
            "{\"properties\":{\"endpoint\":\"zmqpnodawopqhewj\",\"startDateTimeUTC\":\"mcgsbostzelnd\",\"endDateTimeUTC\":\"tutmzl\",\"aggregationInterval\":\"Daily\",\"timeseriesType\":\"LatencyP50\",\"country\":\"fhrbbpneqvcw\",\"timeseriesData\":[{\"dateTimeUTC\":\"r\",\"value\":23.208946},{\"dateTimeUTC\":\"ppr\",\"value\":61.050842},{\"dateTimeUTC\":\"mo\",\"value\":51.150536},{\"dateTimeUTC\":\"ejnhlbkpb\",\"value\":30.076385}]},\"location\":\"piljhahzvech\",\"tags\":{\"uubw\":\"nwieholewjw\",\"aqtferr\":\"fqsfa\",\"nobpudcdabtqwpw\":\"wexjkmfxapjwogq\"},\"id\":\"awbzasqb\",\"name\":\"clj\",\"type\":\"kyexaoguyaipi\"}")
            .toObject(TimeseriesInner.class);
        Assertions.assertEquals("piljhahzvech", model.location());
        Assertions.assertEquals("nwieholewjw", model.tags().get("uubw"));
        Assertions.assertEquals("zmqpnodawopqhewj", model.endpoint());
        Assertions.assertEquals("mcgsbostzelnd", model.startDateTimeUtc());
        Assertions.assertEquals("tutmzl", model.endDateTimeUtc());
        Assertions.assertEquals(AggregationInterval.DAILY, model.aggregationInterval());
        Assertions.assertEquals(TimeseriesType.LATENCY_P50, model.timeseriesType());
        Assertions.assertEquals("fhrbbpneqvcw", model.country());
        Assertions.assertEquals("r", model.timeseriesData().get(0).dateTimeUtc());
        Assertions.assertEquals(23.208946F, model.timeseriesData().get(0).value());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TimeseriesInner model = new TimeseriesInner().withLocation("piljhahzvech")
            .withTags(mapOf("uubw", "nwieholewjw", "aqtferr", "fqsfa", "nobpudcdabtqwpw", "wexjkmfxapjwogq"))
            .withEndpoint("zmqpnodawopqhewj")
            .withStartDateTimeUtc("mcgsbostzelnd")
            .withEndDateTimeUtc("tutmzl")
            .withAggregationInterval(AggregationInterval.DAILY)
            .withTimeseriesType(TimeseriesType.LATENCY_P50)
            .withCountry("fhrbbpneqvcw")
            .withTimeseriesData(Arrays.asList(new TimeseriesDataPoint().withDateTimeUtc("r").withValue(23.208946F),
                new TimeseriesDataPoint().withDateTimeUtc("ppr").withValue(61.050842F),
                new TimeseriesDataPoint().withDateTimeUtc("mo").withValue(51.150536F),
                new TimeseriesDataPoint().withDateTimeUtc("ejnhlbkpb").withValue(30.076385F)));
        model = BinaryData.fromObject(model).toObject(TimeseriesInner.class);
        Assertions.assertEquals("piljhahzvech", model.location());
        Assertions.assertEquals("nwieholewjw", model.tags().get("uubw"));
        Assertions.assertEquals("zmqpnodawopqhewj", model.endpoint());
        Assertions.assertEquals("mcgsbostzelnd", model.startDateTimeUtc());
        Assertions.assertEquals("tutmzl", model.endDateTimeUtc());
        Assertions.assertEquals(AggregationInterval.DAILY, model.aggregationInterval());
        Assertions.assertEquals(TimeseriesType.LATENCY_P50, model.timeseriesType());
        Assertions.assertEquals("fhrbbpneqvcw", model.country());
        Assertions.assertEquals("r", model.timeseriesData().get(0).dateTimeUtc());
        Assertions.assertEquals(23.208946F, model.timeseriesData().get(0).value());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
