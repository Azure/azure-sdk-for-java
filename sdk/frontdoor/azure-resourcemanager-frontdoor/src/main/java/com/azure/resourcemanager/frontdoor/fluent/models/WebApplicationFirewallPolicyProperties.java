// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.frontdoor.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.frontdoor.models.CustomRuleList;
import com.azure.resourcemanager.frontdoor.models.FrontendEndpointLink;
import com.azure.resourcemanager.frontdoor.models.ManagedRuleSetList;
import com.azure.resourcemanager.frontdoor.models.PolicyResourceState;
import com.azure.resourcemanager.frontdoor.models.PolicySettings;
import com.azure.resourcemanager.frontdoor.models.RoutingRuleLink;
import com.azure.resourcemanager.frontdoor.models.SecurityPolicyLink;
import java.io.IOException;
import java.util.List;

/**
 * Defines web application firewall policy properties.
 */
@Fluent
public final class WebApplicationFirewallPolicyProperties
    implements JsonSerializable<WebApplicationFirewallPolicyProperties> {
    /*
     * Describes settings for the policy.
     */
    private PolicySettings policySettings;

    /*
     * Describes custom rules inside the policy.
     */
    private CustomRuleList customRules;

    /*
     * Describes managed rules inside the policy.
     */
    private ManagedRuleSetList managedRules;

    /*
     * Describes Frontend Endpoints associated with this Web Application Firewall policy.
     */
    private List<FrontendEndpointLink> frontendEndpointLinks;

    /*
     * Describes Routing Rules associated with this Web Application Firewall policy.
     */
    private List<RoutingRuleLink> routingRuleLinks;

    /*
     * Describes Security Policy associated with this Web Application Firewall policy.
     */
    private List<SecurityPolicyLink> securityPolicyLinks;

    /*
     * Provisioning state of the policy.
     */
    private String provisioningState;

    /*
     * Resource status of the policy.
     */
    private PolicyResourceState resourceState;

    /**
     * Creates an instance of WebApplicationFirewallPolicyProperties class.
     */
    public WebApplicationFirewallPolicyProperties() {
    }

    /**
     * Get the policySettings property: Describes settings for the policy.
     * 
     * @return the policySettings value.
     */
    public PolicySettings policySettings() {
        return this.policySettings;
    }

    /**
     * Set the policySettings property: Describes settings for the policy.
     * 
     * @param policySettings the policySettings value to set.
     * @return the WebApplicationFirewallPolicyProperties object itself.
     */
    public WebApplicationFirewallPolicyProperties withPolicySettings(PolicySettings policySettings) {
        this.policySettings = policySettings;
        return this;
    }

    /**
     * Get the customRules property: Describes custom rules inside the policy.
     * 
     * @return the customRules value.
     */
    public CustomRuleList customRules() {
        return this.customRules;
    }

    /**
     * Set the customRules property: Describes custom rules inside the policy.
     * 
     * @param customRules the customRules value to set.
     * @return the WebApplicationFirewallPolicyProperties object itself.
     */
    public WebApplicationFirewallPolicyProperties withCustomRules(CustomRuleList customRules) {
        this.customRules = customRules;
        return this;
    }

    /**
     * Get the managedRules property: Describes managed rules inside the policy.
     * 
     * @return the managedRules value.
     */
    public ManagedRuleSetList managedRules() {
        return this.managedRules;
    }

    /**
     * Set the managedRules property: Describes managed rules inside the policy.
     * 
     * @param managedRules the managedRules value to set.
     * @return the WebApplicationFirewallPolicyProperties object itself.
     */
    public WebApplicationFirewallPolicyProperties withManagedRules(ManagedRuleSetList managedRules) {
        this.managedRules = managedRules;
        return this;
    }

    /**
     * Get the frontendEndpointLinks property: Describes Frontend Endpoints associated with this Web Application
     * Firewall policy.
     * 
     * @return the frontendEndpointLinks value.
     */
    public List<FrontendEndpointLink> frontendEndpointLinks() {
        return this.frontendEndpointLinks;
    }

    /**
     * Get the routingRuleLinks property: Describes Routing Rules associated with this Web Application Firewall policy.
     * 
     * @return the routingRuleLinks value.
     */
    public List<RoutingRuleLink> routingRuleLinks() {
        return this.routingRuleLinks;
    }

    /**
     * Get the securityPolicyLinks property: Describes Security Policy associated with this Web Application Firewall
     * policy.
     * 
     * @return the securityPolicyLinks value.
     */
    public List<SecurityPolicyLink> securityPolicyLinks() {
        return this.securityPolicyLinks;
    }

    /**
     * Get the provisioningState property: Provisioning state of the policy.
     * 
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the resourceState property: Resource status of the policy.
     * 
     * @return the resourceState value.
     */
    public PolicyResourceState resourceState() {
        return this.resourceState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (policySettings() != null) {
            policySettings().validate();
        }
        if (customRules() != null) {
            customRules().validate();
        }
        if (managedRules() != null) {
            managedRules().validate();
        }
        if (frontendEndpointLinks() != null) {
            frontendEndpointLinks().forEach(e -> e.validate());
        }
        if (routingRuleLinks() != null) {
            routingRuleLinks().forEach(e -> e.validate());
        }
        if (securityPolicyLinks() != null) {
            securityPolicyLinks().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("policySettings", this.policySettings);
        jsonWriter.writeJsonField("customRules", this.customRules);
        jsonWriter.writeJsonField("managedRules", this.managedRules);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WebApplicationFirewallPolicyProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WebApplicationFirewallPolicyProperties if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the WebApplicationFirewallPolicyProperties.
     */
    public static WebApplicationFirewallPolicyProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WebApplicationFirewallPolicyProperties deserializedWebApplicationFirewallPolicyProperties
                = new WebApplicationFirewallPolicyProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("policySettings".equals(fieldName)) {
                    deserializedWebApplicationFirewallPolicyProperties.policySettings = PolicySettings.fromJson(reader);
                } else if ("customRules".equals(fieldName)) {
                    deserializedWebApplicationFirewallPolicyProperties.customRules = CustomRuleList.fromJson(reader);
                } else if ("managedRules".equals(fieldName)) {
                    deserializedWebApplicationFirewallPolicyProperties.managedRules
                        = ManagedRuleSetList.fromJson(reader);
                } else if ("frontendEndpointLinks".equals(fieldName)) {
                    List<FrontendEndpointLink> frontendEndpointLinks
                        = reader.readArray(reader1 -> FrontendEndpointLink.fromJson(reader1));
                    deserializedWebApplicationFirewallPolicyProperties.frontendEndpointLinks = frontendEndpointLinks;
                } else if ("routingRuleLinks".equals(fieldName)) {
                    List<RoutingRuleLink> routingRuleLinks
                        = reader.readArray(reader1 -> RoutingRuleLink.fromJson(reader1));
                    deserializedWebApplicationFirewallPolicyProperties.routingRuleLinks = routingRuleLinks;
                } else if ("securityPolicyLinks".equals(fieldName)) {
                    List<SecurityPolicyLink> securityPolicyLinks
                        = reader.readArray(reader1 -> SecurityPolicyLink.fromJson(reader1));
                    deserializedWebApplicationFirewallPolicyProperties.securityPolicyLinks = securityPolicyLinks;
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedWebApplicationFirewallPolicyProperties.provisioningState = reader.getString();
                } else if ("resourceState".equals(fieldName)) {
                    deserializedWebApplicationFirewallPolicyProperties.resourceState
                        = PolicyResourceState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWebApplicationFirewallPolicyProperties;
        });
    }
}
