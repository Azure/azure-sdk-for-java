// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.frontdoor.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Frontend endpoint used in routing rule.
 */
@Fluent
public class FrontendEndpointUpdateParameters implements JsonSerializable<FrontendEndpointUpdateParameters> {
    /*
     * The host name of the frontendEndpoint. Must be a domain name.
     */
    private String hostname;

    /*
     * Whether to allow session affinity on this host. Valid options are 'Enabled' or 'Disabled'
     */
    private SessionAffinityEnabledState sessionAffinityEnabledState;

    /*
     * UNUSED. This field will be ignored. The TTL to use in seconds for session affinity, if applicable.
     */
    private Integer sessionAffinityTtlSeconds;

    /*
     * Defines the Web Application Firewall policy for each host (if applicable)
     */
    private FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink webApplicationFirewallPolicyLink;

    /**
     * Creates an instance of FrontendEndpointUpdateParameters class.
     */
    public FrontendEndpointUpdateParameters() {
    }

    /**
     * Get the hostname property: The host name of the frontendEndpoint. Must be a domain name.
     * 
     * @return the hostname value.
     */
    public String hostname() {
        return this.hostname;
    }

    /**
     * Set the hostname property: The host name of the frontendEndpoint. Must be a domain name.
     * 
     * @param hostname the hostname value to set.
     * @return the FrontendEndpointUpdateParameters object itself.
     */
    public FrontendEndpointUpdateParameters withHostname(String hostname) {
        this.hostname = hostname;
        return this;
    }

    /**
     * Get the sessionAffinityEnabledState property: Whether to allow session affinity on this host. Valid options are
     * 'Enabled' or 'Disabled'.
     * 
     * @return the sessionAffinityEnabledState value.
     */
    public SessionAffinityEnabledState sessionAffinityEnabledState() {
        return this.sessionAffinityEnabledState;
    }

    /**
     * Set the sessionAffinityEnabledState property: Whether to allow session affinity on this host. Valid options are
     * 'Enabled' or 'Disabled'.
     * 
     * @param sessionAffinityEnabledState the sessionAffinityEnabledState value to set.
     * @return the FrontendEndpointUpdateParameters object itself.
     */
    public FrontendEndpointUpdateParameters
        withSessionAffinityEnabledState(SessionAffinityEnabledState sessionAffinityEnabledState) {
        this.sessionAffinityEnabledState = sessionAffinityEnabledState;
        return this;
    }

    /**
     * Get the sessionAffinityTtlSeconds property: UNUSED. This field will be ignored. The TTL to use in seconds for
     * session affinity, if applicable.
     * 
     * @return the sessionAffinityTtlSeconds value.
     */
    public Integer sessionAffinityTtlSeconds() {
        return this.sessionAffinityTtlSeconds;
    }

    /**
     * Set the sessionAffinityTtlSeconds property: UNUSED. This field will be ignored. The TTL to use in seconds for
     * session affinity, if applicable.
     * 
     * @param sessionAffinityTtlSeconds the sessionAffinityTtlSeconds value to set.
     * @return the FrontendEndpointUpdateParameters object itself.
     */
    public FrontendEndpointUpdateParameters withSessionAffinityTtlSeconds(Integer sessionAffinityTtlSeconds) {
        this.sessionAffinityTtlSeconds = sessionAffinityTtlSeconds;
        return this;
    }

    /**
     * Get the webApplicationFirewallPolicyLink property: Defines the Web Application Firewall policy for each host (if
     * applicable).
     * 
     * @return the webApplicationFirewallPolicyLink value.
     */
    public FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink webApplicationFirewallPolicyLink() {
        return this.webApplicationFirewallPolicyLink;
    }

    /**
     * Set the webApplicationFirewallPolicyLink property: Defines the Web Application Firewall policy for each host (if
     * applicable).
     * 
     * @param webApplicationFirewallPolicyLink the webApplicationFirewallPolicyLink value to set.
     * @return the FrontendEndpointUpdateParameters object itself.
     */
    public FrontendEndpointUpdateParameters withWebApplicationFirewallPolicyLink(
        FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink webApplicationFirewallPolicyLink) {
        this.webApplicationFirewallPolicyLink = webApplicationFirewallPolicyLink;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (webApplicationFirewallPolicyLink() != null) {
            webApplicationFirewallPolicyLink().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("hostName", this.hostname);
        jsonWriter.writeStringField("sessionAffinityEnabledState",
            this.sessionAffinityEnabledState == null ? null : this.sessionAffinityEnabledState.toString());
        jsonWriter.writeNumberField("sessionAffinityTtlSeconds", this.sessionAffinityTtlSeconds);
        jsonWriter.writeJsonField("webApplicationFirewallPolicyLink", this.webApplicationFirewallPolicyLink);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FrontendEndpointUpdateParameters from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FrontendEndpointUpdateParameters if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the FrontendEndpointUpdateParameters.
     */
    public static FrontendEndpointUpdateParameters fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FrontendEndpointUpdateParameters deserializedFrontendEndpointUpdateParameters
                = new FrontendEndpointUpdateParameters();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("hostName".equals(fieldName)) {
                    deserializedFrontendEndpointUpdateParameters.hostname = reader.getString();
                } else if ("sessionAffinityEnabledState".equals(fieldName)) {
                    deserializedFrontendEndpointUpdateParameters.sessionAffinityEnabledState
                        = SessionAffinityEnabledState.fromString(reader.getString());
                } else if ("sessionAffinityTtlSeconds".equals(fieldName)) {
                    deserializedFrontendEndpointUpdateParameters.sessionAffinityTtlSeconds
                        = reader.getNullable(JsonReader::getInt);
                } else if ("webApplicationFirewallPolicyLink".equals(fieldName)) {
                    deserializedFrontendEndpointUpdateParameters.webApplicationFirewallPolicyLink
                        = FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFrontendEndpointUpdateParameters;
        });
    }
}
