// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.frontdoor.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.frontdoor.models.LatencyMetric;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * Defines a the properties of a Latency Scorecard.
 */
@Fluent
public final class LatencyScorecardProperties implements JsonSerializable<LatencyScorecardProperties> {
    /*
     * The unique identifier of the Latency Scorecard
     */
    private String id;

    /*
     * The name of the Latency Scorecard
     */
    private String name;

    /*
     * The description of the Latency Scorecard
     */
    private String description;

    /*
     * The A endpoint in the scorecard
     */
    private String endpointA;

    /*
     * The B endpoint in the scorecard
     */
    private String endpointB;

    /*
     * The start time of the Latency Scorecard in UTC
     */
    private OffsetDateTime startDateTimeUtc;

    /*
     * The end time of the Latency Scorecard in UTC
     */
    private OffsetDateTime endDateTimeUtc;

    /*
     * The country associated with the Latency Scorecard. Values are country ISO codes as specified here-
     * https://www.iso.org/iso-3166-country-codes.html
     */
    private String country;

    /*
     * The latency metrics of the Latency Scorecard
     */
    private List<LatencyMetric> latencyMetrics;

    /**
     * Creates an instance of LatencyScorecardProperties class.
     */
    public LatencyScorecardProperties() {
    }

    /**
     * Get the id property: The unique identifier of the Latency Scorecard.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Get the name property: The name of the Latency Scorecard.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Get the description property: The description of the Latency Scorecard.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Get the endpointA property: The A endpoint in the scorecard.
     * 
     * @return the endpointA value.
     */
    public String endpointA() {
        return this.endpointA;
    }

    /**
     * Get the endpointB property: The B endpoint in the scorecard.
     * 
     * @return the endpointB value.
     */
    public String endpointB() {
        return this.endpointB;
    }

    /**
     * Get the startDateTimeUtc property: The start time of the Latency Scorecard in UTC.
     * 
     * @return the startDateTimeUtc value.
     */
    public OffsetDateTime startDateTimeUtc() {
        return this.startDateTimeUtc;
    }

    /**
     * Get the endDateTimeUtc property: The end time of the Latency Scorecard in UTC.
     * 
     * @return the endDateTimeUtc value.
     */
    public OffsetDateTime endDateTimeUtc() {
        return this.endDateTimeUtc;
    }

    /**
     * Get the country property: The country associated with the Latency Scorecard. Values are country ISO codes as
     * specified here- https://www.iso.org/iso-3166-country-codes.html.
     * 
     * @return the country value.
     */
    public String country() {
        return this.country;
    }

    /**
     * Get the latencyMetrics property: The latency metrics of the Latency Scorecard.
     * 
     * @return the latencyMetrics value.
     */
    public List<LatencyMetric> latencyMetrics() {
        return this.latencyMetrics;
    }

    /**
     * Set the latencyMetrics property: The latency metrics of the Latency Scorecard.
     * 
     * @param latencyMetrics the latencyMetrics value to set.
     * @return the LatencyScorecardProperties object itself.
     */
    public LatencyScorecardProperties withLatencyMetrics(List<LatencyMetric> latencyMetrics) {
        this.latencyMetrics = latencyMetrics;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (latencyMetrics() != null) {
            latencyMetrics().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("latencyMetrics", this.latencyMetrics,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LatencyScorecardProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LatencyScorecardProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the LatencyScorecardProperties.
     */
    public static LatencyScorecardProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LatencyScorecardProperties deserializedLatencyScorecardProperties = new LatencyScorecardProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedLatencyScorecardProperties.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedLatencyScorecardProperties.name = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedLatencyScorecardProperties.description = reader.getString();
                } else if ("endpointA".equals(fieldName)) {
                    deserializedLatencyScorecardProperties.endpointA = reader.getString();
                } else if ("endpointB".equals(fieldName)) {
                    deserializedLatencyScorecardProperties.endpointB = reader.getString();
                } else if ("startDateTimeUTC".equals(fieldName)) {
                    deserializedLatencyScorecardProperties.startDateTimeUtc = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("endDateTimeUTC".equals(fieldName)) {
                    deserializedLatencyScorecardProperties.endDateTimeUtc = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("country".equals(fieldName)) {
                    deserializedLatencyScorecardProperties.country = reader.getString();
                } else if ("latencyMetrics".equals(fieldName)) {
                    List<LatencyMetric> latencyMetrics = reader.readArray(reader1 -> LatencyMetric.fromJson(reader1));
                    deserializedLatencyScorecardProperties.latencyMetrics = latencyMetrics;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLatencyScorecardProperties;
        });
    }
}
