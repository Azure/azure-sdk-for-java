// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.frontdoor.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.frontdoor.models.KeyVaultCertificateSourceParametersVault;
import java.io.IOException;

/**
 * Parameters required for bring-your-own-certification via Key Vault.
 */
@Fluent
public final class KeyVaultCertificateSourceParameters
    implements JsonSerializable<KeyVaultCertificateSourceParameters> {
    /*
     * The Key Vault containing the SSL certificate
     */
    private KeyVaultCertificateSourceParametersVault vault;

    /*
     * The name of the Key Vault secret representing the full certificate PFX
     */
    private String secretName;

    /*
     * The version of the Key Vault secret representing the full certificate PFX
     */
    private String secretVersion;

    /**
     * Creates an instance of KeyVaultCertificateSourceParameters class.
     */
    public KeyVaultCertificateSourceParameters() {
    }

    /**
     * Get the vault property: The Key Vault containing the SSL certificate.
     * 
     * @return the vault value.
     */
    public KeyVaultCertificateSourceParametersVault vault() {
        return this.vault;
    }

    /**
     * Set the vault property: The Key Vault containing the SSL certificate.
     * 
     * @param vault the vault value to set.
     * @return the KeyVaultCertificateSourceParameters object itself.
     */
    public KeyVaultCertificateSourceParameters withVault(KeyVaultCertificateSourceParametersVault vault) {
        this.vault = vault;
        return this;
    }

    /**
     * Get the secretName property: The name of the Key Vault secret representing the full certificate PFX.
     * 
     * @return the secretName value.
     */
    public String secretName() {
        return this.secretName;
    }

    /**
     * Set the secretName property: The name of the Key Vault secret representing the full certificate PFX.
     * 
     * @param secretName the secretName value to set.
     * @return the KeyVaultCertificateSourceParameters object itself.
     */
    public KeyVaultCertificateSourceParameters withSecretName(String secretName) {
        this.secretName = secretName;
        return this;
    }

    /**
     * Get the secretVersion property: The version of the Key Vault secret representing the full certificate PFX.
     * 
     * @return the secretVersion value.
     */
    public String secretVersion() {
        return this.secretVersion;
    }

    /**
     * Set the secretVersion property: The version of the Key Vault secret representing the full certificate PFX.
     * 
     * @param secretVersion the secretVersion value to set.
     * @return the KeyVaultCertificateSourceParameters object itself.
     */
    public KeyVaultCertificateSourceParameters withSecretVersion(String secretVersion) {
        this.secretVersion = secretVersion;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (vault() != null) {
            vault().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("vault", this.vault);
        jsonWriter.writeStringField("secretName", this.secretName);
        jsonWriter.writeStringField("secretVersion", this.secretVersion);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of KeyVaultCertificateSourceParameters from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of KeyVaultCertificateSourceParameters if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the KeyVaultCertificateSourceParameters.
     */
    public static KeyVaultCertificateSourceParameters fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            KeyVaultCertificateSourceParameters deserializedKeyVaultCertificateSourceParameters
                = new KeyVaultCertificateSourceParameters();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("vault".equals(fieldName)) {
                    deserializedKeyVaultCertificateSourceParameters.vault
                        = KeyVaultCertificateSourceParametersVault.fromJson(reader);
                } else if ("secretName".equals(fieldName)) {
                    deserializedKeyVaultCertificateSourceParameters.secretName = reader.getString();
                } else if ("secretVersion".equals(fieldName)) {
                    deserializedKeyVaultCertificateSourceParameters.secretVersion = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedKeyVaultCertificateSourceParameters;
        });
    }
}
