// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.frontdoor.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Define a match condition.
 */
@Fluent
public final class RulesEngineMatchCondition implements JsonSerializable<RulesEngineMatchCondition> {
    /*
     * Match Variable
     */
    private RulesEngineMatchVariable rulesEngineMatchVariable;

    /*
     * Name of selector in RequestHeader or RequestBody to be matched
     */
    private String selector;

    /*
     * Describes operator to apply to the match condition.
     */
    private RulesEngineOperator rulesEngineOperator;

    /*
     * Describes if this is negate condition or not
     */
    private Boolean negateCondition;

    /*
     * Match values to match against. The operator will apply to each value in here with OR semantics. If any of them
     * match the variable with the given operator this match condition is considered a match.
     */
    private List<String> rulesEngineMatchValue;

    /*
     * List of transforms
     */
    private List<Transform> transforms;

    /**
     * Creates an instance of RulesEngineMatchCondition class.
     */
    public RulesEngineMatchCondition() {
    }

    /**
     * Get the rulesEngineMatchVariable property: Match Variable.
     * 
     * @return the rulesEngineMatchVariable value.
     */
    public RulesEngineMatchVariable rulesEngineMatchVariable() {
        return this.rulesEngineMatchVariable;
    }

    /**
     * Set the rulesEngineMatchVariable property: Match Variable.
     * 
     * @param rulesEngineMatchVariable the rulesEngineMatchVariable value to set.
     * @return the RulesEngineMatchCondition object itself.
     */
    public RulesEngineMatchCondition withRulesEngineMatchVariable(RulesEngineMatchVariable rulesEngineMatchVariable) {
        this.rulesEngineMatchVariable = rulesEngineMatchVariable;
        return this;
    }

    /**
     * Get the selector property: Name of selector in RequestHeader or RequestBody to be matched.
     * 
     * @return the selector value.
     */
    public String selector() {
        return this.selector;
    }

    /**
     * Set the selector property: Name of selector in RequestHeader or RequestBody to be matched.
     * 
     * @param selector the selector value to set.
     * @return the RulesEngineMatchCondition object itself.
     */
    public RulesEngineMatchCondition withSelector(String selector) {
        this.selector = selector;
        return this;
    }

    /**
     * Get the rulesEngineOperator property: Describes operator to apply to the match condition.
     * 
     * @return the rulesEngineOperator value.
     */
    public RulesEngineOperator rulesEngineOperator() {
        return this.rulesEngineOperator;
    }

    /**
     * Set the rulesEngineOperator property: Describes operator to apply to the match condition.
     * 
     * @param rulesEngineOperator the rulesEngineOperator value to set.
     * @return the RulesEngineMatchCondition object itself.
     */
    public RulesEngineMatchCondition withRulesEngineOperator(RulesEngineOperator rulesEngineOperator) {
        this.rulesEngineOperator = rulesEngineOperator;
        return this;
    }

    /**
     * Get the negateCondition property: Describes if this is negate condition or not.
     * 
     * @return the negateCondition value.
     */
    public Boolean negateCondition() {
        return this.negateCondition;
    }

    /**
     * Set the negateCondition property: Describes if this is negate condition or not.
     * 
     * @param negateCondition the negateCondition value to set.
     * @return the RulesEngineMatchCondition object itself.
     */
    public RulesEngineMatchCondition withNegateCondition(Boolean negateCondition) {
        this.negateCondition = negateCondition;
        return this;
    }

    /**
     * Get the rulesEngineMatchValue property: Match values to match against. The operator will apply to each value in
     * here with OR semantics. If any of them match the variable with the given operator this match condition is
     * considered a match.
     * 
     * @return the rulesEngineMatchValue value.
     */
    public List<String> rulesEngineMatchValue() {
        return this.rulesEngineMatchValue;
    }

    /**
     * Set the rulesEngineMatchValue property: Match values to match against. The operator will apply to each value in
     * here with OR semantics. If any of them match the variable with the given operator this match condition is
     * considered a match.
     * 
     * @param rulesEngineMatchValue the rulesEngineMatchValue value to set.
     * @return the RulesEngineMatchCondition object itself.
     */
    public RulesEngineMatchCondition withRulesEngineMatchValue(List<String> rulesEngineMatchValue) {
        this.rulesEngineMatchValue = rulesEngineMatchValue;
        return this;
    }

    /**
     * Get the transforms property: List of transforms.
     * 
     * @return the transforms value.
     */
    public List<Transform> transforms() {
        return this.transforms;
    }

    /**
     * Set the transforms property: List of transforms.
     * 
     * @param transforms the transforms value to set.
     * @return the RulesEngineMatchCondition object itself.
     */
    public RulesEngineMatchCondition withTransforms(List<Transform> transforms) {
        this.transforms = transforms;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (rulesEngineMatchVariable() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property rulesEngineMatchVariable in model RulesEngineMatchCondition"));
        }
        if (rulesEngineOperator() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property rulesEngineOperator in model RulesEngineMatchCondition"));
        }
        if (rulesEngineMatchValue() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property rulesEngineMatchValue in model RulesEngineMatchCondition"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(RulesEngineMatchCondition.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("rulesEngineMatchVariable",
            this.rulesEngineMatchVariable == null ? null : this.rulesEngineMatchVariable.toString());
        jsonWriter.writeStringField("rulesEngineOperator",
            this.rulesEngineOperator == null ? null : this.rulesEngineOperator.toString());
        jsonWriter.writeArrayField("rulesEngineMatchValue", this.rulesEngineMatchValue,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("selector", this.selector);
        jsonWriter.writeBooleanField("negateCondition", this.negateCondition);
        jsonWriter.writeArrayField("transforms", this.transforms,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RulesEngineMatchCondition from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RulesEngineMatchCondition if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RulesEngineMatchCondition.
     */
    public static RulesEngineMatchCondition fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RulesEngineMatchCondition deserializedRulesEngineMatchCondition = new RulesEngineMatchCondition();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("rulesEngineMatchVariable".equals(fieldName)) {
                    deserializedRulesEngineMatchCondition.rulesEngineMatchVariable
                        = RulesEngineMatchVariable.fromString(reader.getString());
                } else if ("rulesEngineOperator".equals(fieldName)) {
                    deserializedRulesEngineMatchCondition.rulesEngineOperator
                        = RulesEngineOperator.fromString(reader.getString());
                } else if ("rulesEngineMatchValue".equals(fieldName)) {
                    List<String> rulesEngineMatchValue = reader.readArray(reader1 -> reader1.getString());
                    deserializedRulesEngineMatchCondition.rulesEngineMatchValue = rulesEngineMatchValue;
                } else if ("selector".equals(fieldName)) {
                    deserializedRulesEngineMatchCondition.selector = reader.getString();
                } else if ("negateCondition".equals(fieldName)) {
                    deserializedRulesEngineMatchCondition.negateCondition = reader.getNullable(JsonReader::getBoolean);
                } else if ("transforms".equals(fieldName)) {
                    List<Transform> transforms = reader.readArray(reader1 -> Transform.fromString(reader1.getString()));
                    deserializedRulesEngineMatchCondition.transforms = transforms;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRulesEngineMatchCondition;
        });
    }
}
