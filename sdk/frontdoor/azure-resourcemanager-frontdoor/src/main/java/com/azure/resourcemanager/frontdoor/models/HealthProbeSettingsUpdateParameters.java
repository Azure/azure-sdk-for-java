// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.frontdoor.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * L7 health probe settings for a backend pool.
 */
@Fluent
public class HealthProbeSettingsUpdateParameters implements JsonSerializable<HealthProbeSettingsUpdateParameters> {
    /*
     * The path to use for the health probe. Default is /
     */
    private String path;

    /*
     * Protocol scheme to use for this probe
     */
    private FrontDoorProtocol protocol;

    /*
     * The number of seconds between health probes.
     */
    private Integer intervalInSeconds;

    /*
     * Configures which HTTP method to use to probe the backends defined under backendPools.
     */
    private FrontDoorHealthProbeMethod healthProbeMethod;

    /*
     * Whether to enable health probes to be made against backends defined under backendPools. Health probes can only be
     * disabled if there is a single enabled backend in single enabled backend pool.
     */
    private HealthProbeEnabled enabledState;

    /**
     * Creates an instance of HealthProbeSettingsUpdateParameters class.
     */
    public HealthProbeSettingsUpdateParameters() {
    }

    /**
     * Get the path property: The path to use for the health probe. Default is /.
     * 
     * @return the path value.
     */
    public String path() {
        return this.path;
    }

    /**
     * Set the path property: The path to use for the health probe. Default is /.
     * 
     * @param path the path value to set.
     * @return the HealthProbeSettingsUpdateParameters object itself.
     */
    public HealthProbeSettingsUpdateParameters withPath(String path) {
        this.path = path;
        return this;
    }

    /**
     * Get the protocol property: Protocol scheme to use for this probe.
     * 
     * @return the protocol value.
     */
    public FrontDoorProtocol protocol() {
        return this.protocol;
    }

    /**
     * Set the protocol property: Protocol scheme to use for this probe.
     * 
     * @param protocol the protocol value to set.
     * @return the HealthProbeSettingsUpdateParameters object itself.
     */
    public HealthProbeSettingsUpdateParameters withProtocol(FrontDoorProtocol protocol) {
        this.protocol = protocol;
        return this;
    }

    /**
     * Get the intervalInSeconds property: The number of seconds between health probes.
     * 
     * @return the intervalInSeconds value.
     */
    public Integer intervalInSeconds() {
        return this.intervalInSeconds;
    }

    /**
     * Set the intervalInSeconds property: The number of seconds between health probes.
     * 
     * @param intervalInSeconds the intervalInSeconds value to set.
     * @return the HealthProbeSettingsUpdateParameters object itself.
     */
    public HealthProbeSettingsUpdateParameters withIntervalInSeconds(Integer intervalInSeconds) {
        this.intervalInSeconds = intervalInSeconds;
        return this;
    }

    /**
     * Get the healthProbeMethod property: Configures which HTTP method to use to probe the backends defined under
     * backendPools.
     * 
     * @return the healthProbeMethod value.
     */
    public FrontDoorHealthProbeMethod healthProbeMethod() {
        return this.healthProbeMethod;
    }

    /**
     * Set the healthProbeMethod property: Configures which HTTP method to use to probe the backends defined under
     * backendPools.
     * 
     * @param healthProbeMethod the healthProbeMethod value to set.
     * @return the HealthProbeSettingsUpdateParameters object itself.
     */
    public HealthProbeSettingsUpdateParameters withHealthProbeMethod(FrontDoorHealthProbeMethod healthProbeMethod) {
        this.healthProbeMethod = healthProbeMethod;
        return this;
    }

    /**
     * Get the enabledState property: Whether to enable health probes to be made against backends defined under
     * backendPools. Health probes can only be disabled if there is a single enabled backend in single enabled backend
     * pool.
     * 
     * @return the enabledState value.
     */
    public HealthProbeEnabled enabledState() {
        return this.enabledState;
    }

    /**
     * Set the enabledState property: Whether to enable health probes to be made against backends defined under
     * backendPools. Health probes can only be disabled if there is a single enabled backend in single enabled backend
     * pool.
     * 
     * @param enabledState the enabledState value to set.
     * @return the HealthProbeSettingsUpdateParameters object itself.
     */
    public HealthProbeSettingsUpdateParameters withEnabledState(HealthProbeEnabled enabledState) {
        this.enabledState = enabledState;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("path", this.path);
        jsonWriter.writeStringField("protocol", this.protocol == null ? null : this.protocol.toString());
        jsonWriter.writeNumberField("intervalInSeconds", this.intervalInSeconds);
        jsonWriter.writeStringField("healthProbeMethod",
            this.healthProbeMethod == null ? null : this.healthProbeMethod.toString());
        jsonWriter.writeStringField("enabledState", this.enabledState == null ? null : this.enabledState.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of HealthProbeSettingsUpdateParameters from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of HealthProbeSettingsUpdateParameters if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the HealthProbeSettingsUpdateParameters.
     */
    public static HealthProbeSettingsUpdateParameters fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            HealthProbeSettingsUpdateParameters deserializedHealthProbeSettingsUpdateParameters
                = new HealthProbeSettingsUpdateParameters();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("path".equals(fieldName)) {
                    deserializedHealthProbeSettingsUpdateParameters.path = reader.getString();
                } else if ("protocol".equals(fieldName)) {
                    deserializedHealthProbeSettingsUpdateParameters.protocol
                        = FrontDoorProtocol.fromString(reader.getString());
                } else if ("intervalInSeconds".equals(fieldName)) {
                    deserializedHealthProbeSettingsUpdateParameters.intervalInSeconds
                        = reader.getNullable(JsonReader::getInt);
                } else if ("healthProbeMethod".equals(fieldName)) {
                    deserializedHealthProbeSettingsUpdateParameters.healthProbeMethod
                        = FrontDoorHealthProbeMethod.fromString(reader.getString());
                } else if ("enabledState".equals(fieldName)) {
                    deserializedHealthProbeSettingsUpdateParameters.enabledState
                        = HealthProbeEnabled.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedHealthProbeSettingsUpdateParameters;
        });
    }
}
