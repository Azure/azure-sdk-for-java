// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.frontdoor.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.SubResource;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Routing rules to apply to an endpoint.
 */
@Fluent
public class RoutingRuleUpdateParameters implements JsonSerializable<RoutingRuleUpdateParameters> {
    /*
     * Frontend endpoints associated with this rule
     */
    private List<SubResource> frontendEndpoints;

    /*
     * Protocol schemes to match for this rule
     */
    private List<FrontDoorProtocol> acceptedProtocols;

    /*
     * The route patterns of the rule.
     */
    private List<String> patternsToMatch;

    /*
     * Whether to enable use of this rule. Permitted values are 'Enabled' or 'Disabled'
     */
    private RoutingRuleEnabledState enabledState;

    /*
     * A reference to the routing configuration.
     */
    private RouteConfiguration routeConfiguration;

    /*
     * A reference to a specific Rules Engine Configuration to apply to this route.
     */
    private SubResource rulesEngine;

    /*
     * Defines the Web Application Firewall policy for each routing rule (if applicable)
     */
    private RoutingRuleUpdateParametersWebApplicationFirewallPolicyLink webApplicationFirewallPolicyLink;

    /**
     * Creates an instance of RoutingRuleUpdateParameters class.
     */
    public RoutingRuleUpdateParameters() {
    }

    /**
     * Get the frontendEndpoints property: Frontend endpoints associated with this rule.
     * 
     * @return the frontendEndpoints value.
     */
    public List<SubResource> frontendEndpoints() {
        return this.frontendEndpoints;
    }

    /**
     * Set the frontendEndpoints property: Frontend endpoints associated with this rule.
     * 
     * @param frontendEndpoints the frontendEndpoints value to set.
     * @return the RoutingRuleUpdateParameters object itself.
     */
    public RoutingRuleUpdateParameters withFrontendEndpoints(List<SubResource> frontendEndpoints) {
        this.frontendEndpoints = frontendEndpoints;
        return this;
    }

    /**
     * Get the acceptedProtocols property: Protocol schemes to match for this rule.
     * 
     * @return the acceptedProtocols value.
     */
    public List<FrontDoorProtocol> acceptedProtocols() {
        return this.acceptedProtocols;
    }

    /**
     * Set the acceptedProtocols property: Protocol schemes to match for this rule.
     * 
     * @param acceptedProtocols the acceptedProtocols value to set.
     * @return the RoutingRuleUpdateParameters object itself.
     */
    public RoutingRuleUpdateParameters withAcceptedProtocols(List<FrontDoorProtocol> acceptedProtocols) {
        this.acceptedProtocols = acceptedProtocols;
        return this;
    }

    /**
     * Get the patternsToMatch property: The route patterns of the rule.
     * 
     * @return the patternsToMatch value.
     */
    public List<String> patternsToMatch() {
        return this.patternsToMatch;
    }

    /**
     * Set the patternsToMatch property: The route patterns of the rule.
     * 
     * @param patternsToMatch the patternsToMatch value to set.
     * @return the RoutingRuleUpdateParameters object itself.
     */
    public RoutingRuleUpdateParameters withPatternsToMatch(List<String> patternsToMatch) {
        this.patternsToMatch = patternsToMatch;
        return this;
    }

    /**
     * Get the enabledState property: Whether to enable use of this rule. Permitted values are 'Enabled' or 'Disabled'.
     * 
     * @return the enabledState value.
     */
    public RoutingRuleEnabledState enabledState() {
        return this.enabledState;
    }

    /**
     * Set the enabledState property: Whether to enable use of this rule. Permitted values are 'Enabled' or 'Disabled'.
     * 
     * @param enabledState the enabledState value to set.
     * @return the RoutingRuleUpdateParameters object itself.
     */
    public RoutingRuleUpdateParameters withEnabledState(RoutingRuleEnabledState enabledState) {
        this.enabledState = enabledState;
        return this;
    }

    /**
     * Get the routeConfiguration property: A reference to the routing configuration.
     * 
     * @return the routeConfiguration value.
     */
    public RouteConfiguration routeConfiguration() {
        return this.routeConfiguration;
    }

    /**
     * Set the routeConfiguration property: A reference to the routing configuration.
     * 
     * @param routeConfiguration the routeConfiguration value to set.
     * @return the RoutingRuleUpdateParameters object itself.
     */
    public RoutingRuleUpdateParameters withRouteConfiguration(RouteConfiguration routeConfiguration) {
        this.routeConfiguration = routeConfiguration;
        return this;
    }

    /**
     * Get the rulesEngine property: A reference to a specific Rules Engine Configuration to apply to this route.
     * 
     * @return the rulesEngine value.
     */
    public SubResource rulesEngine() {
        return this.rulesEngine;
    }

    /**
     * Set the rulesEngine property: A reference to a specific Rules Engine Configuration to apply to this route.
     * 
     * @param rulesEngine the rulesEngine value to set.
     * @return the RoutingRuleUpdateParameters object itself.
     */
    public RoutingRuleUpdateParameters withRulesEngine(SubResource rulesEngine) {
        this.rulesEngine = rulesEngine;
        return this;
    }

    /**
     * Get the webApplicationFirewallPolicyLink property: Defines the Web Application Firewall policy for each routing
     * rule (if applicable).
     * 
     * @return the webApplicationFirewallPolicyLink value.
     */
    public RoutingRuleUpdateParametersWebApplicationFirewallPolicyLink webApplicationFirewallPolicyLink() {
        return this.webApplicationFirewallPolicyLink;
    }

    /**
     * Set the webApplicationFirewallPolicyLink property: Defines the Web Application Firewall policy for each routing
     * rule (if applicable).
     * 
     * @param webApplicationFirewallPolicyLink the webApplicationFirewallPolicyLink value to set.
     * @return the RoutingRuleUpdateParameters object itself.
     */
    public RoutingRuleUpdateParameters withWebApplicationFirewallPolicyLink(
        RoutingRuleUpdateParametersWebApplicationFirewallPolicyLink webApplicationFirewallPolicyLink) {
        this.webApplicationFirewallPolicyLink = webApplicationFirewallPolicyLink;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (routeConfiguration() != null) {
            routeConfiguration().validate();
        }
        if (webApplicationFirewallPolicyLink() != null) {
            webApplicationFirewallPolicyLink().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("frontendEndpoints", this.frontendEndpoints,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("acceptedProtocols", this.acceptedProtocols,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeArrayField("patternsToMatch", this.patternsToMatch,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("enabledState", this.enabledState == null ? null : this.enabledState.toString());
        jsonWriter.writeJsonField("routeConfiguration", this.routeConfiguration);
        jsonWriter.writeJsonField("rulesEngine", this.rulesEngine);
        jsonWriter.writeJsonField("webApplicationFirewallPolicyLink", this.webApplicationFirewallPolicyLink);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RoutingRuleUpdateParameters from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RoutingRuleUpdateParameters if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the RoutingRuleUpdateParameters.
     */
    public static RoutingRuleUpdateParameters fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RoutingRuleUpdateParameters deserializedRoutingRuleUpdateParameters = new RoutingRuleUpdateParameters();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("frontendEndpoints".equals(fieldName)) {
                    List<SubResource> frontendEndpoints = reader.readArray(reader1 -> SubResource.fromJson(reader1));
                    deserializedRoutingRuleUpdateParameters.frontendEndpoints = frontendEndpoints;
                } else if ("acceptedProtocols".equals(fieldName)) {
                    List<FrontDoorProtocol> acceptedProtocols
                        = reader.readArray(reader1 -> FrontDoorProtocol.fromString(reader1.getString()));
                    deserializedRoutingRuleUpdateParameters.acceptedProtocols = acceptedProtocols;
                } else if ("patternsToMatch".equals(fieldName)) {
                    List<String> patternsToMatch = reader.readArray(reader1 -> reader1.getString());
                    deserializedRoutingRuleUpdateParameters.patternsToMatch = patternsToMatch;
                } else if ("enabledState".equals(fieldName)) {
                    deserializedRoutingRuleUpdateParameters.enabledState
                        = RoutingRuleEnabledState.fromString(reader.getString());
                } else if ("routeConfiguration".equals(fieldName)) {
                    deserializedRoutingRuleUpdateParameters.routeConfiguration = RouteConfiguration.fromJson(reader);
                } else if ("rulesEngine".equals(fieldName)) {
                    deserializedRoutingRuleUpdateParameters.rulesEngine = SubResource.fromJson(reader);
                } else if ("webApplicationFirewallPolicyLink".equals(fieldName)) {
                    deserializedRoutingRuleUpdateParameters.webApplicationFirewallPolicyLink
                        = RoutingRuleUpdateParametersWebApplicationFirewallPolicyLink.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRoutingRuleUpdateParameters;
        });
    }
}
