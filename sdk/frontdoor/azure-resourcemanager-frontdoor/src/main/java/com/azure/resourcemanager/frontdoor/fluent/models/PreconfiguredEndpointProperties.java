// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.frontdoor.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.frontdoor.models.EndpointType;
import java.io.IOException;

/**
 * Defines the properties of a preconfigured endpoint.
 */
@Fluent
public final class PreconfiguredEndpointProperties implements JsonSerializable<PreconfiguredEndpointProperties> {
    /*
     * The description of the endpoint
     */
    private String description;

    /*
     * The endpoint that is preconfigured
     */
    private String endpoint;

    /*
     * The type of endpoint
     */
    private EndpointType endpointType;

    /*
     * The preconfigured endpoint backend
     */
    private String backend;

    /**
     * Creates an instance of PreconfiguredEndpointProperties class.
     */
    public PreconfiguredEndpointProperties() {
    }

    /**
     * Get the description property: The description of the endpoint.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: The description of the endpoint.
     * 
     * @param description the description value to set.
     * @return the PreconfiguredEndpointProperties object itself.
     */
    public PreconfiguredEndpointProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the endpoint property: The endpoint that is preconfigured.
     * 
     * @return the endpoint value.
     */
    public String endpoint() {
        return this.endpoint;
    }

    /**
     * Set the endpoint property: The endpoint that is preconfigured.
     * 
     * @param endpoint the endpoint value to set.
     * @return the PreconfiguredEndpointProperties object itself.
     */
    public PreconfiguredEndpointProperties withEndpoint(String endpoint) {
        this.endpoint = endpoint;
        return this;
    }

    /**
     * Get the endpointType property: The type of endpoint.
     * 
     * @return the endpointType value.
     */
    public EndpointType endpointType() {
        return this.endpointType;
    }

    /**
     * Set the endpointType property: The type of endpoint.
     * 
     * @param endpointType the endpointType value to set.
     * @return the PreconfiguredEndpointProperties object itself.
     */
    public PreconfiguredEndpointProperties withEndpointType(EndpointType endpointType) {
        this.endpointType = endpointType;
        return this;
    }

    /**
     * Get the backend property: The preconfigured endpoint backend.
     * 
     * @return the backend value.
     */
    public String backend() {
        return this.backend;
    }

    /**
     * Set the backend property: The preconfigured endpoint backend.
     * 
     * @param backend the backend value to set.
     * @return the PreconfiguredEndpointProperties object itself.
     */
    public PreconfiguredEndpointProperties withBackend(String backend) {
        this.backend = backend;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeStringField("endpoint", this.endpoint);
        jsonWriter.writeStringField("endpointType", this.endpointType == null ? null : this.endpointType.toString());
        jsonWriter.writeStringField("backend", this.backend);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PreconfiguredEndpointProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PreconfiguredEndpointProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the PreconfiguredEndpointProperties.
     */
    public static PreconfiguredEndpointProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PreconfiguredEndpointProperties deserializedPreconfiguredEndpointProperties
                = new PreconfiguredEndpointProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("description".equals(fieldName)) {
                    deserializedPreconfiguredEndpointProperties.description = reader.getString();
                } else if ("endpoint".equals(fieldName)) {
                    deserializedPreconfiguredEndpointProperties.endpoint = reader.getString();
                } else if ("endpointType".equals(fieldName)) {
                    deserializedPreconfiguredEndpointProperties.endpointType
                        = EndpointType.fromString(reader.getString());
                } else if ("backend".equals(fieldName)) {
                    deserializedPreconfiguredEndpointProperties.backend = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPreconfiguredEndpointProperties;
        });
    }
}
