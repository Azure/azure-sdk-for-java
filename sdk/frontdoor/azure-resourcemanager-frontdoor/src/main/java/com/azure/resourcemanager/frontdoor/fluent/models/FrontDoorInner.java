// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.frontdoor.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.management.Resource;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.frontdoor.models.BackendPool;
import com.azure.resourcemanager.frontdoor.models.BackendPoolsSettings;
import com.azure.resourcemanager.frontdoor.models.FrontDoorEnabledState;
import com.azure.resourcemanager.frontdoor.models.FrontDoorResourceState;
import com.azure.resourcemanager.frontdoor.models.HealthProbeSettingsModel;
import com.azure.resourcemanager.frontdoor.models.LoadBalancingSettingsModel;
import com.azure.resourcemanager.frontdoor.models.RoutingRule;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/**
 * Front Door represents a collection of backend endpoints to route traffic to along with rules that specify how traffic
 * is sent there.
 */
@JsonFlatten
@Fluent
public class FrontDoorInner extends Resource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(FrontDoorInner.class);

    /*
     * A friendly name for the frontDoor
     */
    @JsonProperty(value = "properties.friendlyName")
    private String friendlyName;

    /*
     * Routing rules associated with this Front Door.
     */
    @JsonProperty(value = "properties.routingRules")
    private List<RoutingRule> routingRules;

    /*
     * Load balancing settings associated with this Front Door instance.
     */
    @JsonProperty(value = "properties.loadBalancingSettings")
    private List<LoadBalancingSettingsModel> loadBalancingSettings;

    /*
     * Health probe settings associated with this Front Door instance.
     */
    @JsonProperty(value = "properties.healthProbeSettings")
    private List<HealthProbeSettingsModel> healthProbeSettings;

    /*
     * Backend pools available to routing rules.
     */
    @JsonProperty(value = "properties.backendPools")
    private List<BackendPool> backendPools;

    /*
     * Frontend endpoints available to routing rules.
     */
    @JsonProperty(value = "properties.frontendEndpoints")
    private List<FrontendEndpointInner> frontendEndpoints;

    /*
     * Settings for all backendPools
     */
    @JsonProperty(value = "properties.backendPoolsSettings")
    private BackendPoolsSettings backendPoolsSettings;

    /*
     * Operational status of the Front Door load balancer. Permitted values are
     * 'Enabled' or 'Disabled'
     */
    @JsonProperty(value = "properties.enabledState")
    private FrontDoorEnabledState enabledState;

    /*
     * Resource status of the Front Door.
     */
    @JsonProperty(value = "properties.resourceState", access = JsonProperty.Access.WRITE_ONLY)
    private FrontDoorResourceState resourceState;

    /*
     * Provisioning state of the Front Door.
     */
    @JsonProperty(value = "properties.provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private String provisioningState;

    /*
     * The host that each frontendEndpoint must CNAME to.
     */
    @JsonProperty(value = "properties.cname", access = JsonProperty.Access.WRITE_ONLY)
    private String cname;

    /*
     * The Id of the frontdoor.
     */
    @JsonProperty(value = "properties.frontdoorId", access = JsonProperty.Access.WRITE_ONLY)
    private String frontdoorId;

    /*
     * Rules Engine Configurations available to routing rules.
     */
    @JsonProperty(value = "properties.rulesEngines", access = JsonProperty.Access.WRITE_ONLY)
    private List<RulesEngineInner> rulesEngines;

    /**
     * Get the friendlyName property: A friendly name for the frontDoor.
     *
     * @return the friendlyName value.
     */
    public String friendlyName() {
        return this.friendlyName;
    }

    /**
     * Set the friendlyName property: A friendly name for the frontDoor.
     *
     * @param friendlyName the friendlyName value to set.
     * @return the FrontDoorInner object itself.
     */
    public FrontDoorInner withFriendlyName(String friendlyName) {
        this.friendlyName = friendlyName;
        return this;
    }

    /**
     * Get the routingRules property: Routing rules associated with this Front Door.
     *
     * @return the routingRules value.
     */
    public List<RoutingRule> routingRules() {
        return this.routingRules;
    }

    /**
     * Set the routingRules property: Routing rules associated with this Front Door.
     *
     * @param routingRules the routingRules value to set.
     * @return the FrontDoorInner object itself.
     */
    public FrontDoorInner withRoutingRules(List<RoutingRule> routingRules) {
        this.routingRules = routingRules;
        return this;
    }

    /**
     * Get the loadBalancingSettings property: Load balancing settings associated with this Front Door instance.
     *
     * @return the loadBalancingSettings value.
     */
    public List<LoadBalancingSettingsModel> loadBalancingSettings() {
        return this.loadBalancingSettings;
    }

    /**
     * Set the loadBalancingSettings property: Load balancing settings associated with this Front Door instance.
     *
     * @param loadBalancingSettings the loadBalancingSettings value to set.
     * @return the FrontDoorInner object itself.
     */
    public FrontDoorInner withLoadBalancingSettings(List<LoadBalancingSettingsModel> loadBalancingSettings) {
        this.loadBalancingSettings = loadBalancingSettings;
        return this;
    }

    /**
     * Get the healthProbeSettings property: Health probe settings associated with this Front Door instance.
     *
     * @return the healthProbeSettings value.
     */
    public List<HealthProbeSettingsModel> healthProbeSettings() {
        return this.healthProbeSettings;
    }

    /**
     * Set the healthProbeSettings property: Health probe settings associated with this Front Door instance.
     *
     * @param healthProbeSettings the healthProbeSettings value to set.
     * @return the FrontDoorInner object itself.
     */
    public FrontDoorInner withHealthProbeSettings(List<HealthProbeSettingsModel> healthProbeSettings) {
        this.healthProbeSettings = healthProbeSettings;
        return this;
    }

    /**
     * Get the backendPools property: Backend pools available to routing rules.
     *
     * @return the backendPools value.
     */
    public List<BackendPool> backendPools() {
        return this.backendPools;
    }

    /**
     * Set the backendPools property: Backend pools available to routing rules.
     *
     * @param backendPools the backendPools value to set.
     * @return the FrontDoorInner object itself.
     */
    public FrontDoorInner withBackendPools(List<BackendPool> backendPools) {
        this.backendPools = backendPools;
        return this;
    }

    /**
     * Get the frontendEndpoints property: Frontend endpoints available to routing rules.
     *
     * @return the frontendEndpoints value.
     */
    public List<FrontendEndpointInner> frontendEndpoints() {
        return this.frontendEndpoints;
    }

    /**
     * Set the frontendEndpoints property: Frontend endpoints available to routing rules.
     *
     * @param frontendEndpoints the frontendEndpoints value to set.
     * @return the FrontDoorInner object itself.
     */
    public FrontDoorInner withFrontendEndpoints(List<FrontendEndpointInner> frontendEndpoints) {
        this.frontendEndpoints = frontendEndpoints;
        return this;
    }

    /**
     * Get the backendPoolsSettings property: Settings for all backendPools.
     *
     * @return the backendPoolsSettings value.
     */
    public BackendPoolsSettings backendPoolsSettings() {
        return this.backendPoolsSettings;
    }

    /**
     * Set the backendPoolsSettings property: Settings for all backendPools.
     *
     * @param backendPoolsSettings the backendPoolsSettings value to set.
     * @return the FrontDoorInner object itself.
     */
    public FrontDoorInner withBackendPoolsSettings(BackendPoolsSettings backendPoolsSettings) {
        this.backendPoolsSettings = backendPoolsSettings;
        return this;
    }

    /**
     * Get the enabledState property: Operational status of the Front Door load balancer. Permitted values are 'Enabled'
     * or 'Disabled'.
     *
     * @return the enabledState value.
     */
    public FrontDoorEnabledState enabledState() {
        return this.enabledState;
    }

    /**
     * Set the enabledState property: Operational status of the Front Door load balancer. Permitted values are 'Enabled'
     * or 'Disabled'.
     *
     * @param enabledState the enabledState value to set.
     * @return the FrontDoorInner object itself.
     */
    public FrontDoorInner withEnabledState(FrontDoorEnabledState enabledState) {
        this.enabledState = enabledState;
        return this;
    }

    /**
     * Get the resourceState property: Resource status of the Front Door.
     *
     * @return the resourceState value.
     */
    public FrontDoorResourceState resourceState() {
        return this.resourceState;
    }

    /**
     * Get the provisioningState property: Provisioning state of the Front Door.
     *
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the cname property: The host that each frontendEndpoint must CNAME to.
     *
     * @return the cname value.
     */
    public String cname() {
        return this.cname;
    }

    /**
     * Get the frontdoorId property: The Id of the frontdoor.
     *
     * @return the frontdoorId value.
     */
    public String frontdoorId() {
        return this.frontdoorId;
    }

    /**
     * Get the rulesEngines property: Rules Engine Configurations available to routing rules.
     *
     * @return the rulesEngines value.
     */
    public List<RulesEngineInner> rulesEngines() {
        return this.rulesEngines;
    }

    /** {@inheritDoc} */
    @Override
    public FrontDoorInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public FrontDoorInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (routingRules() != null) {
            routingRules().forEach(e -> e.validate());
        }
        if (loadBalancingSettings() != null) {
            loadBalancingSettings().forEach(e -> e.validate());
        }
        if (healthProbeSettings() != null) {
            healthProbeSettings().forEach(e -> e.validate());
        }
        if (backendPools() != null) {
            backendPools().forEach(e -> e.validate());
        }
        if (frontendEndpoints() != null) {
            frontendEndpoints().forEach(e -> e.validate());
        }
        if (backendPoolsSettings() != null) {
            backendPoolsSettings().validate();
        }
        if (rulesEngines() != null) {
            rulesEngines().forEach(e -> e.validate());
        }
    }
}
