// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.frontdoor.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.frontdoor.models.FrontDoorResourceState;
import com.azure.resourcemanager.frontdoor.models.LoadBalancingSettingsUpdateParameters;
import java.io.IOException;

/**
 * The JSON object that contains the properties required to create load balancing settings.
 */
@Fluent
public final class LoadBalancingSettingsProperties extends LoadBalancingSettingsUpdateParameters {
    /*
     * Resource status.
     */
    private FrontDoorResourceState resourceState;

    /**
     * Creates an instance of LoadBalancingSettingsProperties class.
     */
    public LoadBalancingSettingsProperties() {
    }

    /**
     * Get the resourceState property: Resource status.
     * 
     * @return the resourceState value.
     */
    public FrontDoorResourceState resourceState() {
        return this.resourceState;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LoadBalancingSettingsProperties withSampleSize(Integer sampleSize) {
        super.withSampleSize(sampleSize);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LoadBalancingSettingsProperties withSuccessfulSamplesRequired(Integer successfulSamplesRequired) {
        super.withSuccessfulSamplesRequired(successfulSamplesRequired);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LoadBalancingSettingsProperties withAdditionalLatencyMilliseconds(Integer additionalLatencyMilliseconds) {
        super.withAdditionalLatencyMilliseconds(additionalLatencyMilliseconds);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("sampleSize", sampleSize());
        jsonWriter.writeNumberField("successfulSamplesRequired", successfulSamplesRequired());
        jsonWriter.writeNumberField("additionalLatencyMilliseconds", additionalLatencyMilliseconds());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LoadBalancingSettingsProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LoadBalancingSettingsProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the LoadBalancingSettingsProperties.
     */
    public static LoadBalancingSettingsProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LoadBalancingSettingsProperties deserializedLoadBalancingSettingsProperties
                = new LoadBalancingSettingsProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sampleSize".equals(fieldName)) {
                    deserializedLoadBalancingSettingsProperties.withSampleSize(reader.getNullable(JsonReader::getInt));
                } else if ("successfulSamplesRequired".equals(fieldName)) {
                    deserializedLoadBalancingSettingsProperties
                        .withSuccessfulSamplesRequired(reader.getNullable(JsonReader::getInt));
                } else if ("additionalLatencyMilliseconds".equals(fieldName)) {
                    deserializedLoadBalancingSettingsProperties
                        .withAdditionalLatencyMilliseconds(reader.getNullable(JsonReader::getInt));
                } else if ("resourceState".equals(fieldName)) {
                    deserializedLoadBalancingSettingsProperties.resourceState
                        = FrontDoorResourceState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLoadBalancingSettingsProperties;
        });
    }
}
