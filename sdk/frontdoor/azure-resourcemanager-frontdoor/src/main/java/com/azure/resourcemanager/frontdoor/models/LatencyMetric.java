// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.frontdoor.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Defines the properties of a latency metric used in the latency scorecard.
 */
@Immutable
public final class LatencyMetric implements JsonSerializable<LatencyMetric> {
    /*
     * The name of the Latency Metric
     */
    private String name;

    /*
     * The end time of the Latency Scorecard in UTC
     */
    private String endDateTimeUtc;

    /*
     * The metric value of the A endpoint
     */
    private Float aValue;

    /*
     * The metric value of the B endpoint
     */
    private Float bValue;

    /*
     * The difference in value between endpoint A and B
     */
    private Float delta;

    /*
     * The percent difference between endpoint A and B
     */
    private Float deltaPercent;

    /*
     * The lower end of the 95% confidence interval for endpoint A
     */
    private Float aCLower95CI;

    /*
     * The upper end of the 95% confidence interval for endpoint A
     */
    private Float aHUpper95CI;

    /*
     * The lower end of the 95% confidence interval for endpoint B
     */
    private Float bCLower95CI;

    /*
     * The upper end of the 95% confidence interval for endpoint B
     */
    private Float bUpper95CI;

    /**
     * Creates an instance of LatencyMetric class.
     */
    public LatencyMetric() {
    }

    /**
     * Get the name property: The name of the Latency Metric.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Get the endDateTimeUtc property: The end time of the Latency Scorecard in UTC.
     * 
     * @return the endDateTimeUtc value.
     */
    public String endDateTimeUtc() {
        return this.endDateTimeUtc;
    }

    /**
     * Get the aValue property: The metric value of the A endpoint.
     * 
     * @return the aValue value.
     */
    public Float aValue() {
        return this.aValue;
    }

    /**
     * Get the bValue property: The metric value of the B endpoint.
     * 
     * @return the bValue value.
     */
    public Float bValue() {
        return this.bValue;
    }

    /**
     * Get the delta property: The difference in value between endpoint A and B.
     * 
     * @return the delta value.
     */
    public Float delta() {
        return this.delta;
    }

    /**
     * Get the deltaPercent property: The percent difference between endpoint A and B.
     * 
     * @return the deltaPercent value.
     */
    public Float deltaPercent() {
        return this.deltaPercent;
    }

    /**
     * Get the aCLower95CI property: The lower end of the 95% confidence interval for endpoint A.
     * 
     * @return the aCLower95CI value.
     */
    public Float aCLower95CI() {
        return this.aCLower95CI;
    }

    /**
     * Get the aHUpper95CI property: The upper end of the 95% confidence interval for endpoint A.
     * 
     * @return the aHUpper95CI value.
     */
    public Float aHUpper95CI() {
        return this.aHUpper95CI;
    }

    /**
     * Get the bCLower95CI property: The lower end of the 95% confidence interval for endpoint B.
     * 
     * @return the bCLower95CI value.
     */
    public Float bCLower95CI() {
        return this.bCLower95CI;
    }

    /**
     * Get the bUpper95CI property: The upper end of the 95% confidence interval for endpoint B.
     * 
     * @return the bUpper95CI value.
     */
    public Float bUpper95CI() {
        return this.bUpper95CI;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LatencyMetric from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LatencyMetric if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the LatencyMetric.
     */
    public static LatencyMetric fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LatencyMetric deserializedLatencyMetric = new LatencyMetric();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedLatencyMetric.name = reader.getString();
                } else if ("endDateTimeUTC".equals(fieldName)) {
                    deserializedLatencyMetric.endDateTimeUtc = reader.getString();
                } else if ("aValue".equals(fieldName)) {
                    deserializedLatencyMetric.aValue = reader.getNullable(JsonReader::getFloat);
                } else if ("bValue".equals(fieldName)) {
                    deserializedLatencyMetric.bValue = reader.getNullable(JsonReader::getFloat);
                } else if ("delta".equals(fieldName)) {
                    deserializedLatencyMetric.delta = reader.getNullable(JsonReader::getFloat);
                } else if ("deltaPercent".equals(fieldName)) {
                    deserializedLatencyMetric.deltaPercent = reader.getNullable(JsonReader::getFloat);
                } else if ("aCLower95CI".equals(fieldName)) {
                    deserializedLatencyMetric.aCLower95CI = reader.getNullable(JsonReader::getFloat);
                } else if ("aHUpper95CI".equals(fieldName)) {
                    deserializedLatencyMetric.aHUpper95CI = reader.getNullable(JsonReader::getFloat);
                } else if ("bCLower95CI".equals(fieldName)) {
                    deserializedLatencyMetric.bCLower95CI = reader.getNullable(JsonReader::getFloat);
                } else if ("bUpper95CI".equals(fieldName)) {
                    deserializedLatencyMetric.bUpper95CI = reader.getNullable(JsonReader::getFloat);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLatencyMetric;
        });
    }
}
