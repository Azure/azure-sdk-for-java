// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.frontdoor.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.frontdoor.fluent.models.PolicySettingsLogScrubbing;
import java.io.IOException;
import java.util.List;

/**
 * Defines top-level WebApplicationFirewallPolicy configuration settings.
 */
@Fluent
public final class PolicySettings implements JsonSerializable<PolicySettings> {
    /*
     * Describes if the policy is in enabled or disabled state. Defaults to Enabled if not specified.
     */
    private PolicyEnabledState enabledState;

    /*
     * Describes if it is in detection mode or prevention mode at policy level.
     */
    private PolicyMode mode;

    /*
     * If action type is redirect, this field represents redirect URL for the client.
     */
    private String redirectUrl;

    /*
     * If the action type is block, customer can override the response status code.
     */
    private Integer customBlockResponseStatusCode;

    /*
     * If the action type is block, customer can override the response body. The body must be specified in base64
     * encoding.
     */
    private String customBlockResponseBody;

    /*
     * Describes if policy managed rules will inspect the request body content.
     */
    private PolicyRequestBodyCheck requestBodyCheck;

    /*
     * Defines the JavaScript challenge cookie validity lifetime in minutes. This setting is only applicable to
     * Premium_AzureFrontDoor. Value must be an integer between 5 and 1440 with the default value being 30.
     */
    private Integer javascriptChallengeExpirationInMinutes;

    /*
     * Defines rules that scrub sensitive fields in the Web Application Firewall logs.
     */
    private PolicySettingsLogScrubbing innerLogScrubbing;

    /**
     * Creates an instance of PolicySettings class.
     */
    public PolicySettings() {
    }

    /**
     * Get the enabledState property: Describes if the policy is in enabled or disabled state. Defaults to Enabled if
     * not specified.
     * 
     * @return the enabledState value.
     */
    public PolicyEnabledState enabledState() {
        return this.enabledState;
    }

    /**
     * Set the enabledState property: Describes if the policy is in enabled or disabled state. Defaults to Enabled if
     * not specified.
     * 
     * @param enabledState the enabledState value to set.
     * @return the PolicySettings object itself.
     */
    public PolicySettings withEnabledState(PolicyEnabledState enabledState) {
        this.enabledState = enabledState;
        return this;
    }

    /**
     * Get the mode property: Describes if it is in detection mode or prevention mode at policy level.
     * 
     * @return the mode value.
     */
    public PolicyMode mode() {
        return this.mode;
    }

    /**
     * Set the mode property: Describes if it is in detection mode or prevention mode at policy level.
     * 
     * @param mode the mode value to set.
     * @return the PolicySettings object itself.
     */
    public PolicySettings withMode(PolicyMode mode) {
        this.mode = mode;
        return this;
    }

    /**
     * Get the redirectUrl property: If action type is redirect, this field represents redirect URL for the client.
     * 
     * @return the redirectUrl value.
     */
    public String redirectUrl() {
        return this.redirectUrl;
    }

    /**
     * Set the redirectUrl property: If action type is redirect, this field represents redirect URL for the client.
     * 
     * @param redirectUrl the redirectUrl value to set.
     * @return the PolicySettings object itself.
     */
    public PolicySettings withRedirectUrl(String redirectUrl) {
        this.redirectUrl = redirectUrl;
        return this;
    }

    /**
     * Get the customBlockResponseStatusCode property: If the action type is block, customer can override the response
     * status code.
     * 
     * @return the customBlockResponseStatusCode value.
     */
    public Integer customBlockResponseStatusCode() {
        return this.customBlockResponseStatusCode;
    }

    /**
     * Set the customBlockResponseStatusCode property: If the action type is block, customer can override the response
     * status code.
     * 
     * @param customBlockResponseStatusCode the customBlockResponseStatusCode value to set.
     * @return the PolicySettings object itself.
     */
    public PolicySettings withCustomBlockResponseStatusCode(Integer customBlockResponseStatusCode) {
        this.customBlockResponseStatusCode = customBlockResponseStatusCode;
        return this;
    }

    /**
     * Get the customBlockResponseBody property: If the action type is block, customer can override the response body.
     * The body must be specified in base64 encoding.
     * 
     * @return the customBlockResponseBody value.
     */
    public String customBlockResponseBody() {
        return this.customBlockResponseBody;
    }

    /**
     * Set the customBlockResponseBody property: If the action type is block, customer can override the response body.
     * The body must be specified in base64 encoding.
     * 
     * @param customBlockResponseBody the customBlockResponseBody value to set.
     * @return the PolicySettings object itself.
     */
    public PolicySettings withCustomBlockResponseBody(String customBlockResponseBody) {
        this.customBlockResponseBody = customBlockResponseBody;
        return this;
    }

    /**
     * Get the requestBodyCheck property: Describes if policy managed rules will inspect the request body content.
     * 
     * @return the requestBodyCheck value.
     */
    public PolicyRequestBodyCheck requestBodyCheck() {
        return this.requestBodyCheck;
    }

    /**
     * Set the requestBodyCheck property: Describes if policy managed rules will inspect the request body content.
     * 
     * @param requestBodyCheck the requestBodyCheck value to set.
     * @return the PolicySettings object itself.
     */
    public PolicySettings withRequestBodyCheck(PolicyRequestBodyCheck requestBodyCheck) {
        this.requestBodyCheck = requestBodyCheck;
        return this;
    }

    /**
     * Get the javascriptChallengeExpirationInMinutes property: Defines the JavaScript challenge cookie validity
     * lifetime in minutes. This setting is only applicable to Premium_AzureFrontDoor. Value must be an integer between
     * 5 and 1440 with the default value being 30.
     * 
     * @return the javascriptChallengeExpirationInMinutes value.
     */
    public Integer javascriptChallengeExpirationInMinutes() {
        return this.javascriptChallengeExpirationInMinutes;
    }

    /**
     * Set the javascriptChallengeExpirationInMinutes property: Defines the JavaScript challenge cookie validity
     * lifetime in minutes. This setting is only applicable to Premium_AzureFrontDoor. Value must be an integer between
     * 5 and 1440 with the default value being 30.
     * 
     * @param javascriptChallengeExpirationInMinutes the javascriptChallengeExpirationInMinutes value to set.
     * @return the PolicySettings object itself.
     */
    public PolicySettings withJavascriptChallengeExpirationInMinutes(Integer javascriptChallengeExpirationInMinutes) {
        this.javascriptChallengeExpirationInMinutes = javascriptChallengeExpirationInMinutes;
        return this;
    }

    /**
     * Get the innerLogScrubbing property: Defines rules that scrub sensitive fields in the Web Application Firewall
     * logs.
     * 
     * @return the innerLogScrubbing value.
     */
    private PolicySettingsLogScrubbing innerLogScrubbing() {
        return this.innerLogScrubbing;
    }

    /**
     * Get the state property: State of the log scrubbing config. Default value is Enabled.
     * 
     * @return the state value.
     */
    public WebApplicationFirewallScrubbingState state() {
        return this.innerLogScrubbing() == null ? null : this.innerLogScrubbing().state();
    }

    /**
     * Set the state property: State of the log scrubbing config. Default value is Enabled.
     * 
     * @param state the state value to set.
     * @return the PolicySettings object itself.
     */
    public PolicySettings withState(WebApplicationFirewallScrubbingState state) {
        if (this.innerLogScrubbing() == null) {
            this.innerLogScrubbing = new PolicySettingsLogScrubbing();
        }
        this.innerLogScrubbing().withState(state);
        return this;
    }

    /**
     * Get the scrubbingRules property: List of log scrubbing rules applied to the Web Application Firewall logs.
     * 
     * @return the scrubbingRules value.
     */
    public List<WebApplicationFirewallScrubbingRules> scrubbingRules() {
        return this.innerLogScrubbing() == null ? null : this.innerLogScrubbing().scrubbingRules();
    }

    /**
     * Set the scrubbingRules property: List of log scrubbing rules applied to the Web Application Firewall logs.
     * 
     * @param scrubbingRules the scrubbingRules value to set.
     * @return the PolicySettings object itself.
     */
    public PolicySettings withScrubbingRules(List<WebApplicationFirewallScrubbingRules> scrubbingRules) {
        if (this.innerLogScrubbing() == null) {
            this.innerLogScrubbing = new PolicySettingsLogScrubbing();
        }
        this.innerLogScrubbing().withScrubbingRules(scrubbingRules);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerLogScrubbing() != null) {
            innerLogScrubbing().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("enabledState", this.enabledState == null ? null : this.enabledState.toString());
        jsonWriter.writeStringField("mode", this.mode == null ? null : this.mode.toString());
        jsonWriter.writeStringField("redirectUrl", this.redirectUrl);
        jsonWriter.writeNumberField("customBlockResponseStatusCode", this.customBlockResponseStatusCode);
        jsonWriter.writeStringField("customBlockResponseBody", this.customBlockResponseBody);
        jsonWriter.writeStringField("requestBodyCheck",
            this.requestBodyCheck == null ? null : this.requestBodyCheck.toString());
        jsonWriter.writeNumberField("javascriptChallengeExpirationInMinutes",
            this.javascriptChallengeExpirationInMinutes);
        jsonWriter.writeJsonField("logScrubbing", this.innerLogScrubbing);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PolicySettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PolicySettings if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the PolicySettings.
     */
    public static PolicySettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PolicySettings deserializedPolicySettings = new PolicySettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("enabledState".equals(fieldName)) {
                    deserializedPolicySettings.enabledState = PolicyEnabledState.fromString(reader.getString());
                } else if ("mode".equals(fieldName)) {
                    deserializedPolicySettings.mode = PolicyMode.fromString(reader.getString());
                } else if ("redirectUrl".equals(fieldName)) {
                    deserializedPolicySettings.redirectUrl = reader.getString();
                } else if ("customBlockResponseStatusCode".equals(fieldName)) {
                    deserializedPolicySettings.customBlockResponseStatusCode = reader.getNullable(JsonReader::getInt);
                } else if ("customBlockResponseBody".equals(fieldName)) {
                    deserializedPolicySettings.customBlockResponseBody = reader.getString();
                } else if ("requestBodyCheck".equals(fieldName)) {
                    deserializedPolicySettings.requestBodyCheck = PolicyRequestBodyCheck.fromString(reader.getString());
                } else if ("javascriptChallengeExpirationInMinutes".equals(fieldName)) {
                    deserializedPolicySettings.javascriptChallengeExpirationInMinutes
                        = reader.getNullable(JsonReader::getInt);
                } else if ("logScrubbing".equals(fieldName)) {
                    deserializedPolicySettings.innerLogScrubbing = PolicySettingsLogScrubbing.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPolicySettings;
        });
    }
}
