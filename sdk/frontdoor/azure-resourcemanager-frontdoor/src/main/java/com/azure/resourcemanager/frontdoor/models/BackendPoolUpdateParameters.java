// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.frontdoor.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.SubResource;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A collection of backends that can be routed to.
 */
@Fluent
public class BackendPoolUpdateParameters implements JsonSerializable<BackendPoolUpdateParameters> {
    /*
     * The set of backends for this pool
     */
    private List<Backend> backends;

    /*
     * Load balancing settings for a backend pool
     */
    private SubResource loadBalancingSettings;

    /*
     * L7 health probe settings for a backend pool
     */
    private SubResource healthProbeSettings;

    /**
     * Creates an instance of BackendPoolUpdateParameters class.
     */
    public BackendPoolUpdateParameters() {
    }

    /**
     * Get the backends property: The set of backends for this pool.
     * 
     * @return the backends value.
     */
    public List<Backend> backends() {
        return this.backends;
    }

    /**
     * Set the backends property: The set of backends for this pool.
     * 
     * @param backends the backends value to set.
     * @return the BackendPoolUpdateParameters object itself.
     */
    public BackendPoolUpdateParameters withBackends(List<Backend> backends) {
        this.backends = backends;
        return this;
    }

    /**
     * Get the loadBalancingSettings property: Load balancing settings for a backend pool.
     * 
     * @return the loadBalancingSettings value.
     */
    public SubResource loadBalancingSettings() {
        return this.loadBalancingSettings;
    }

    /**
     * Set the loadBalancingSettings property: Load balancing settings for a backend pool.
     * 
     * @param loadBalancingSettings the loadBalancingSettings value to set.
     * @return the BackendPoolUpdateParameters object itself.
     */
    public BackendPoolUpdateParameters withLoadBalancingSettings(SubResource loadBalancingSettings) {
        this.loadBalancingSettings = loadBalancingSettings;
        return this;
    }

    /**
     * Get the healthProbeSettings property: L7 health probe settings for a backend pool.
     * 
     * @return the healthProbeSettings value.
     */
    public SubResource healthProbeSettings() {
        return this.healthProbeSettings;
    }

    /**
     * Set the healthProbeSettings property: L7 health probe settings for a backend pool.
     * 
     * @param healthProbeSettings the healthProbeSettings value to set.
     * @return the BackendPoolUpdateParameters object itself.
     */
    public BackendPoolUpdateParameters withHealthProbeSettings(SubResource healthProbeSettings) {
        this.healthProbeSettings = healthProbeSettings;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (backends() != null) {
            backends().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("backends", this.backends, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("loadBalancingSettings", this.loadBalancingSettings);
        jsonWriter.writeJsonField("healthProbeSettings", this.healthProbeSettings);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BackendPoolUpdateParameters from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BackendPoolUpdateParameters if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the BackendPoolUpdateParameters.
     */
    public static BackendPoolUpdateParameters fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BackendPoolUpdateParameters deserializedBackendPoolUpdateParameters = new BackendPoolUpdateParameters();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("backends".equals(fieldName)) {
                    List<Backend> backends = reader.readArray(reader1 -> Backend.fromJson(reader1));
                    deserializedBackendPoolUpdateParameters.backends = backends;
                } else if ("loadBalancingSettings".equals(fieldName)) {
                    deserializedBackendPoolUpdateParameters.loadBalancingSettings = SubResource.fromJson(reader);
                } else if ("healthProbeSettings".equals(fieldName)) {
                    deserializedBackendPoolUpdateParameters.healthProbeSettings = SubResource.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBackendPoolUpdateParameters;
        });
    }
}
