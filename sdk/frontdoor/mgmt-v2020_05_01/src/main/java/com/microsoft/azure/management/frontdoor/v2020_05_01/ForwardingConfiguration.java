/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.frontdoor.v2020_05_01;

import com.microsoft.azure.SubResource;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Describes Forwarding Route.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "@odata\\.type", defaultImpl = ForwardingConfiguration.class)
@JsonTypeName("#Microsoft.Azure.FrontDoor.Models.FrontdoorForwardingConfiguration")
public class ForwardingConfiguration extends RouteConfiguration {
    /**
     * A custom path used to rewrite resource paths matched by this rule. Leave
     * empty to use incoming path.
     */
    @JsonProperty(value = "customForwardingPath")
    private String customForwardingPath;

    /**
     * Protocol this rule will use when forwarding traffic to backends.
     * Possible values include: 'HttpOnly', 'HttpsOnly', 'MatchRequest'.
     */
    @JsonProperty(value = "forwardingProtocol")
    private FrontDoorForwardingProtocol forwardingProtocol;

    /**
     * The caching configuration associated with this rule.
     */
    @JsonProperty(value = "cacheConfiguration")
    private CacheConfiguration cacheConfiguration;

    /**
     * A reference to the BackendPool which this rule routes to.
     */
    @JsonProperty(value = "backendPool")
    private SubResource backendPool;

    /**
     * Get a custom path used to rewrite resource paths matched by this rule. Leave empty to use incoming path.
     *
     * @return the customForwardingPath value
     */
    public String customForwardingPath() {
        return this.customForwardingPath;
    }

    /**
     * Set a custom path used to rewrite resource paths matched by this rule. Leave empty to use incoming path.
     *
     * @param customForwardingPath the customForwardingPath value to set
     * @return the ForwardingConfiguration object itself.
     */
    public ForwardingConfiguration withCustomForwardingPath(String customForwardingPath) {
        this.customForwardingPath = customForwardingPath;
        return this;
    }

    /**
     * Get protocol this rule will use when forwarding traffic to backends. Possible values include: 'HttpOnly', 'HttpsOnly', 'MatchRequest'.
     *
     * @return the forwardingProtocol value
     */
    public FrontDoorForwardingProtocol forwardingProtocol() {
        return this.forwardingProtocol;
    }

    /**
     * Set protocol this rule will use when forwarding traffic to backends. Possible values include: 'HttpOnly', 'HttpsOnly', 'MatchRequest'.
     *
     * @param forwardingProtocol the forwardingProtocol value to set
     * @return the ForwardingConfiguration object itself.
     */
    public ForwardingConfiguration withForwardingProtocol(FrontDoorForwardingProtocol forwardingProtocol) {
        this.forwardingProtocol = forwardingProtocol;
        return this;
    }

    /**
     * Get the caching configuration associated with this rule.
     *
     * @return the cacheConfiguration value
     */
    public CacheConfiguration cacheConfiguration() {
        return this.cacheConfiguration;
    }

    /**
     * Set the caching configuration associated with this rule.
     *
     * @param cacheConfiguration the cacheConfiguration value to set
     * @return the ForwardingConfiguration object itself.
     */
    public ForwardingConfiguration withCacheConfiguration(CacheConfiguration cacheConfiguration) {
        this.cacheConfiguration = cacheConfiguration;
        return this;
    }

    /**
     * Get a reference to the BackendPool which this rule routes to.
     *
     * @return the backendPool value
     */
    public SubResource backendPool() {
        return this.backendPool;
    }

    /**
     * Set a reference to the BackendPool which this rule routes to.
     *
     * @param backendPool the backendPool value to set
     * @return the ForwardingConfiguration object itself.
     */
    public ForwardingConfiguration withBackendPool(SubResource backendPool) {
        this.backendPool = backendPool;
        return this;
    }

}
