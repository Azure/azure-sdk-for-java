/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.frontdoor.v2020_05_01;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.management.frontdoor.v2020_05_01.implementation.RulesEngineInner;
import com.microsoft.azure.arm.model.Indexable;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.frontdoor.v2020_05_01.implementation.NetworkManager;
import java.util.List;

/**
 * Type representing RulesEngine.
 */
public interface RulesEngine extends HasInner<RulesEngineInner>, Indexable, Refreshable<RulesEngine>, Updatable<RulesEngine.Update>, HasManager<NetworkManager> {
    /**
     * @return the id value.
     */
    String id();

    /**
     * @return the name value.
     */
    String name();

    /**
     * @return the resourceState value.
     */
    FrontDoorResourceState resourceState();

    /**
     * @return the rules value.
     */
    List<RulesEngineRule> rules();

    /**
     * @return the type value.
     */
    String type();

    /**
     * The entirety of the RulesEngine definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithFrontDoor, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of RulesEngine definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a RulesEngine definition.
         */
        interface Blank extends WithFrontDoor {
        }

        /**
         * The stage of the rulesengine definition allowing to specify FrontDoor.
         */
        interface WithFrontDoor {
           /**
            * Specifies resourceGroupName, frontDoorName.
            * @param resourceGroupName Name of the Resource group within the Azure subscription
            * @param frontDoorName Name of the Front Door which is globally unique
            * @return the next definition stage
            */
            WithCreate withExistingFrontDoor(String resourceGroupName, String frontDoorName);
        }

        /**
         * The stage of the rulesengine definition allowing to specify ResourceState.
         */
        interface WithResourceState {
            /**
             * Specifies resourceState.
             * @param resourceState Resource status. Possible values include: 'Creating', 'Enabling', 'Enabled', 'Disabling', 'Disabled', 'Deleting'
             * @return the next definition stage
             */
            WithCreate withResourceState(FrontDoorResourceState resourceState);
        }

        /**
         * The stage of the rulesengine definition allowing to specify Rules.
         */
        interface WithRules {
            /**
             * Specifies rules.
             * @param rules A list of rules that define a particular Rules Engine Configuration
             * @return the next definition stage
             */
            WithCreate withRules(List<RulesEngineRule> rules);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<RulesEngine>, DefinitionStages.WithResourceState, DefinitionStages.WithRules {
        }
    }
    /**
     * The template for a RulesEngine update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<RulesEngine>, UpdateStages.WithResourceState, UpdateStages.WithRules {
    }

    /**
     * Grouping of RulesEngine update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the rulesengine update allowing to specify ResourceState.
         */
        interface WithResourceState {
            /**
             * Specifies resourceState.
             * @param resourceState Resource status. Possible values include: 'Creating', 'Enabling', 'Enabled', 'Disabling', 'Disabled', 'Deleting'
             * @return the next update stage
             */
            Update withResourceState(FrontDoorResourceState resourceState);
        }

        /**
         * The stage of the rulesengine update allowing to specify Rules.
         */
        interface WithRules {
            /**
             * Specifies rules.
             * @param rules A list of rules that define a particular Rules Engine Configuration
             * @return the next update stage
             */
            Update withRules(List<RulesEngineRule> rules);
        }

    }
}
