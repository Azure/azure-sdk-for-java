/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.frontdoor.v2020_05_01;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * L7 health probe settings for a backend pool.
 */
public class HealthProbeSettingsUpdateParameters {
    /**
     * The path to use for the health probe. Default is /.
     */
    @JsonProperty(value = "path")
    private String path;

    /**
     * Protocol scheme to use for this probe. Possible values include: 'Http',
     * 'Https'.
     */
    @JsonProperty(value = "protocol")
    private FrontDoorProtocol protocol;

    /**
     * The number of seconds between health probes.
     */
    @JsonProperty(value = "intervalInSeconds")
    private Integer intervalInSeconds;

    /**
     * Configures which HTTP method to use to probe the backends defined under
     * backendPools. Possible values include: 'GET', 'HEAD'.
     */
    @JsonProperty(value = "healthProbeMethod")
    private FrontDoorHealthProbeMethod healthProbeMethod;

    /**
     * Whether to enable health probes to be made against backends defined
     * under backendPools. Health probes can only be disabled if there is a
     * single enabled backend in single enabled backend pool. Possible values
     * include: 'Enabled', 'Disabled'.
     */
    @JsonProperty(value = "enabledState")
    private HealthProbeEnabled enabledState;

    /**
     * Get the path to use for the health probe. Default is /.
     *
     * @return the path value
     */
    public String path() {
        return this.path;
    }

    /**
     * Set the path to use for the health probe. Default is /.
     *
     * @param path the path value to set
     * @return the HealthProbeSettingsUpdateParameters object itself.
     */
    public HealthProbeSettingsUpdateParameters withPath(String path) {
        this.path = path;
        return this;
    }

    /**
     * Get protocol scheme to use for this probe. Possible values include: 'Http', 'Https'.
     *
     * @return the protocol value
     */
    public FrontDoorProtocol protocol() {
        return this.protocol;
    }

    /**
     * Set protocol scheme to use for this probe. Possible values include: 'Http', 'Https'.
     *
     * @param protocol the protocol value to set
     * @return the HealthProbeSettingsUpdateParameters object itself.
     */
    public HealthProbeSettingsUpdateParameters withProtocol(FrontDoorProtocol protocol) {
        this.protocol = protocol;
        return this;
    }

    /**
     * Get the number of seconds between health probes.
     *
     * @return the intervalInSeconds value
     */
    public Integer intervalInSeconds() {
        return this.intervalInSeconds;
    }

    /**
     * Set the number of seconds between health probes.
     *
     * @param intervalInSeconds the intervalInSeconds value to set
     * @return the HealthProbeSettingsUpdateParameters object itself.
     */
    public HealthProbeSettingsUpdateParameters withIntervalInSeconds(Integer intervalInSeconds) {
        this.intervalInSeconds = intervalInSeconds;
        return this;
    }

    /**
     * Get configures which HTTP method to use to probe the backends defined under backendPools. Possible values include: 'GET', 'HEAD'.
     *
     * @return the healthProbeMethod value
     */
    public FrontDoorHealthProbeMethod healthProbeMethod() {
        return this.healthProbeMethod;
    }

    /**
     * Set configures which HTTP method to use to probe the backends defined under backendPools. Possible values include: 'GET', 'HEAD'.
     *
     * @param healthProbeMethod the healthProbeMethod value to set
     * @return the HealthProbeSettingsUpdateParameters object itself.
     */
    public HealthProbeSettingsUpdateParameters withHealthProbeMethod(FrontDoorHealthProbeMethod healthProbeMethod) {
        this.healthProbeMethod = healthProbeMethod;
        return this;
    }

    /**
     * Get whether to enable health probes to be made against backends defined under backendPools. Health probes can only be disabled if there is a single enabled backend in single enabled backend pool. Possible values include: 'Enabled', 'Disabled'.
     *
     * @return the enabledState value
     */
    public HealthProbeEnabled enabledState() {
        return this.enabledState;
    }

    /**
     * Set whether to enable health probes to be made against backends defined under backendPools. Health probes can only be disabled if there is a single enabled backend in single enabled backend pool. Possible values include: 'Enabled', 'Disabled'.
     *
     * @param enabledState the enabledState value to set
     * @return the HealthProbeSettingsUpdateParameters object itself.
     */
    public HealthProbeSettingsUpdateParameters withEnabledState(HealthProbeEnabled enabledState) {
        this.enabledState = enabledState;
        return this;
    }

}
