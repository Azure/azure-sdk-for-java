/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.frontdoor.v2020_05_01.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.frontdoor.v2020_05_01.CustomHttpsConfiguration;
import com.microsoft.azure.management.frontdoor.v2020_05_01.ErrorResponseException;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;
import com.microsoft.azure.LongRunningFinalState;
import com.microsoft.azure.LongRunningOperationOptions;

/**
 * An instance of this class provides access to all the operations defined
 * in FrontendEndpoints.
 */
public class FrontendEndpointsInner {
    /** The Retrofit service to perform REST calls. */
    private FrontendEndpointsService service;
    /** The service client containing this operation class. */
    private FrontDoorManagementClientImpl client;

    /**
     * Initializes an instance of FrontendEndpointsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public FrontendEndpointsInner(Retrofit retrofit, FrontDoorManagementClientImpl client) {
        this.service = retrofit.create(FrontendEndpointsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for FrontendEndpoints to be
     * used by Retrofit to perform actually REST calls.
     */
    interface FrontendEndpointsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.frontdoor.v2020_05_01.FrontendEndpoints listByFrontDoor" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors/{frontDoorName}/frontendEndpoints")
        Observable<Response<ResponseBody>> listByFrontDoor(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("frontDoorName") String frontDoorName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.frontdoor.v2020_05_01.FrontendEndpoints get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors/{frontDoorName}/frontendEndpoints/{frontendEndpointName}")
        Observable<Response<ResponseBody>> get(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("frontDoorName") String frontDoorName, @Path("frontendEndpointName") String frontendEndpointName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.frontdoor.v2020_05_01.FrontendEndpoints enableHttps" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors/{frontDoorName}/frontendEndpoints/{frontendEndpointName}/enableHttps")
        Observable<Response<ResponseBody>> enableHttps(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("frontDoorName") String frontDoorName, @Path("frontendEndpointName") String frontendEndpointName, @Body CustomHttpsConfiguration customHttpsConfiguration, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.frontdoor.v2020_05_01.FrontendEndpoints beginEnableHttps" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors/{frontDoorName}/frontendEndpoints/{frontendEndpointName}/enableHttps")
        Observable<Response<ResponseBody>> beginEnableHttps(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("frontDoorName") String frontDoorName, @Path("frontendEndpointName") String frontendEndpointName, @Body CustomHttpsConfiguration customHttpsConfiguration, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.frontdoor.v2020_05_01.FrontendEndpoints disableHttps" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors/{frontDoorName}/frontendEndpoints/{frontendEndpointName}/disableHttps")
        Observable<Response<ResponseBody>> disableHttps(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("frontDoorName") String frontDoorName, @Path("frontendEndpointName") String frontendEndpointName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.frontdoor.v2020_05_01.FrontendEndpoints beginDisableHttps" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors/{frontDoorName}/frontendEndpoints/{frontendEndpointName}/disableHttps")
        Observable<Response<ResponseBody>> beginDisableHttps(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("frontDoorName") String frontDoorName, @Path("frontendEndpointName") String frontendEndpointName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.frontdoor.v2020_05_01.FrontendEndpoints listByFrontDoorNext" })
        @GET
        Observable<Response<ResponseBody>> listByFrontDoorNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Lists all of the frontend endpoints within a Front Door.
     *
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param frontDoorName Name of the Front Door which is globally unique.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;FrontendEndpointInner&gt; object if successful.
     */
    public PagedList<FrontendEndpointInner> listByFrontDoor(final String resourceGroupName, final String frontDoorName) {
        ServiceResponse<Page<FrontendEndpointInner>> response = listByFrontDoorSinglePageAsync(resourceGroupName, frontDoorName).toBlocking().single();
        return new PagedList<FrontendEndpointInner>(response.body()) {
            @Override
            public Page<FrontendEndpointInner> nextPage(String nextPageLink) {
                return listByFrontDoorNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists all of the frontend endpoints within a Front Door.
     *
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param frontDoorName Name of the Front Door which is globally unique.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<FrontendEndpointInner>> listByFrontDoorAsync(final String resourceGroupName, final String frontDoorName, final ListOperationCallback<FrontendEndpointInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByFrontDoorSinglePageAsync(resourceGroupName, frontDoorName),
            new Func1<String, Observable<ServiceResponse<Page<FrontendEndpointInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<FrontendEndpointInner>>> call(String nextPageLink) {
                    return listByFrontDoorNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists all of the frontend endpoints within a Front Door.
     *
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param frontDoorName Name of the Front Door which is globally unique.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;FrontendEndpointInner&gt; object
     */
    public Observable<Page<FrontendEndpointInner>> listByFrontDoorAsync(final String resourceGroupName, final String frontDoorName) {
        return listByFrontDoorWithServiceResponseAsync(resourceGroupName, frontDoorName)
            .map(new Func1<ServiceResponse<Page<FrontendEndpointInner>>, Page<FrontendEndpointInner>>() {
                @Override
                public Page<FrontendEndpointInner> call(ServiceResponse<Page<FrontendEndpointInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists all of the frontend endpoints within a Front Door.
     *
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param frontDoorName Name of the Front Door which is globally unique.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;FrontendEndpointInner&gt; object
     */
    public Observable<ServiceResponse<Page<FrontendEndpointInner>>> listByFrontDoorWithServiceResponseAsync(final String resourceGroupName, final String frontDoorName) {
        return listByFrontDoorSinglePageAsync(resourceGroupName, frontDoorName)
            .concatMap(new Func1<ServiceResponse<Page<FrontendEndpointInner>>, Observable<ServiceResponse<Page<FrontendEndpointInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<FrontendEndpointInner>>> call(ServiceResponse<Page<FrontendEndpointInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByFrontDoorNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists all of the frontend endpoints within a Front Door.
     *
    ServiceResponse<PageImpl<FrontendEndpointInner>> * @param resourceGroupName Name of the Resource group within the Azure subscription.
    ServiceResponse<PageImpl<FrontendEndpointInner>> * @param frontDoorName Name of the Front Door which is globally unique.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;FrontendEndpointInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<FrontendEndpointInner>>> listByFrontDoorSinglePageAsync(final String resourceGroupName, final String frontDoorName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (frontDoorName == null) {
            throw new IllegalArgumentException("Parameter frontDoorName is required and cannot be null.");
        }
        final String apiVersion = "2020-05-01";
        return service.listByFrontDoor(this.client.subscriptionId(), resourceGroupName, frontDoorName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<FrontendEndpointInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<FrontendEndpointInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<FrontendEndpointInner>> result = listByFrontDoorDelegate(response);
                        return Observable.just(new ServiceResponse<Page<FrontendEndpointInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<FrontendEndpointInner>> listByFrontDoorDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<FrontendEndpointInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<FrontendEndpointInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets a Frontend endpoint with the specified name within the specified Front Door.
     *
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param frontDoorName Name of the Front Door which is globally unique.
     * @param frontendEndpointName Name of the Frontend endpoint which is unique within the Front Door.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the FrontendEndpointInner object if successful.
     */
    public FrontendEndpointInner get(String resourceGroupName, String frontDoorName, String frontendEndpointName) {
        return getWithServiceResponseAsync(resourceGroupName, frontDoorName, frontendEndpointName).toBlocking().single().body();
    }

    /**
     * Gets a Frontend endpoint with the specified name within the specified Front Door.
     *
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param frontDoorName Name of the Front Door which is globally unique.
     * @param frontendEndpointName Name of the Frontend endpoint which is unique within the Front Door.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<FrontendEndpointInner> getAsync(String resourceGroupName, String frontDoorName, String frontendEndpointName, final ServiceCallback<FrontendEndpointInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroupName, frontDoorName, frontendEndpointName), serviceCallback);
    }

    /**
     * Gets a Frontend endpoint with the specified name within the specified Front Door.
     *
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param frontDoorName Name of the Front Door which is globally unique.
     * @param frontendEndpointName Name of the Frontend endpoint which is unique within the Front Door.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the FrontendEndpointInner object
     */
    public Observable<FrontendEndpointInner> getAsync(String resourceGroupName, String frontDoorName, String frontendEndpointName) {
        return getWithServiceResponseAsync(resourceGroupName, frontDoorName, frontendEndpointName).map(new Func1<ServiceResponse<FrontendEndpointInner>, FrontendEndpointInner>() {
            @Override
            public FrontendEndpointInner call(ServiceResponse<FrontendEndpointInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets a Frontend endpoint with the specified name within the specified Front Door.
     *
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param frontDoorName Name of the Front Door which is globally unique.
     * @param frontendEndpointName Name of the Frontend endpoint which is unique within the Front Door.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the FrontendEndpointInner object
     */
    public Observable<ServiceResponse<FrontendEndpointInner>> getWithServiceResponseAsync(String resourceGroupName, String frontDoorName, String frontendEndpointName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (frontDoorName == null) {
            throw new IllegalArgumentException("Parameter frontDoorName is required and cannot be null.");
        }
        if (frontendEndpointName == null) {
            throw new IllegalArgumentException("Parameter frontendEndpointName is required and cannot be null.");
        }
        final String apiVersion = "2020-05-01";
        return service.get(this.client.subscriptionId(), resourceGroupName, frontDoorName, frontendEndpointName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<FrontendEndpointInner>>>() {
                @Override
                public Observable<ServiceResponse<FrontendEndpointInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<FrontendEndpointInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<FrontendEndpointInner> getDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<FrontendEndpointInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<FrontendEndpointInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Enables a frontendEndpoint for HTTPS traffic.
     *
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param frontDoorName Name of the Front Door which is globally unique.
     * @param frontendEndpointName Name of the Frontend endpoint which is unique within the Front Door.
     * @param customHttpsConfiguration The configuration specifying how to enable HTTPS
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void enableHttps(String resourceGroupName, String frontDoorName, String frontendEndpointName, CustomHttpsConfiguration customHttpsConfiguration) {
        enableHttpsWithServiceResponseAsync(resourceGroupName, frontDoorName, frontendEndpointName, customHttpsConfiguration).toBlocking().last().body();
    }

    /**
     * Enables a frontendEndpoint for HTTPS traffic.
     *
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param frontDoorName Name of the Front Door which is globally unique.
     * @param frontendEndpointName Name of the Frontend endpoint which is unique within the Front Door.
     * @param customHttpsConfiguration The configuration specifying how to enable HTTPS
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> enableHttpsAsync(String resourceGroupName, String frontDoorName, String frontendEndpointName, CustomHttpsConfiguration customHttpsConfiguration, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(enableHttpsWithServiceResponseAsync(resourceGroupName, frontDoorName, frontendEndpointName, customHttpsConfiguration), serviceCallback);
    }

    /**
     * Enables a frontendEndpoint for HTTPS traffic.
     *
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param frontDoorName Name of the Front Door which is globally unique.
     * @param frontendEndpointName Name of the Frontend endpoint which is unique within the Front Door.
     * @param customHttpsConfiguration The configuration specifying how to enable HTTPS
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> enableHttpsAsync(String resourceGroupName, String frontDoorName, String frontendEndpointName, CustomHttpsConfiguration customHttpsConfiguration) {
        return enableHttpsWithServiceResponseAsync(resourceGroupName, frontDoorName, frontendEndpointName, customHttpsConfiguration).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Enables a frontendEndpoint for HTTPS traffic.
     *
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param frontDoorName Name of the Front Door which is globally unique.
     * @param frontendEndpointName Name of the Frontend endpoint which is unique within the Front Door.
     * @param customHttpsConfiguration The configuration specifying how to enable HTTPS
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> enableHttpsWithServiceResponseAsync(String resourceGroupName, String frontDoorName, String frontendEndpointName, CustomHttpsConfiguration customHttpsConfiguration) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (frontDoorName == null) {
            throw new IllegalArgumentException("Parameter frontDoorName is required and cannot be null.");
        }
        if (frontendEndpointName == null) {
            throw new IllegalArgumentException("Parameter frontendEndpointName is required and cannot be null.");
        }
        if (customHttpsConfiguration == null) {
            throw new IllegalArgumentException("Parameter customHttpsConfiguration is required and cannot be null.");
        }
        Validator.validate(customHttpsConfiguration);
        final String apiVersion = "2020-05-01";
        Observable<Response<ResponseBody>> observable = service.enableHttps(this.client.subscriptionId(), resourceGroupName, frontDoorName, frontendEndpointName, customHttpsConfiguration, apiVersion, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new LongRunningOperationOptions().withFinalStateVia(LongRunningFinalState.AZURE_ASYNC_OPERATION), new TypeToken<Void>() { }.getType());
    }

    /**
     * Enables a frontendEndpoint for HTTPS traffic.
     *
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param frontDoorName Name of the Front Door which is globally unique.
     * @param frontendEndpointName Name of the Frontend endpoint which is unique within the Front Door.
     * @param customHttpsConfiguration The configuration specifying how to enable HTTPS
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginEnableHttps(String resourceGroupName, String frontDoorName, String frontendEndpointName, CustomHttpsConfiguration customHttpsConfiguration) {
        beginEnableHttpsWithServiceResponseAsync(resourceGroupName, frontDoorName, frontendEndpointName, customHttpsConfiguration).toBlocking().single().body();
    }

    /**
     * Enables a frontendEndpoint for HTTPS traffic.
     *
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param frontDoorName Name of the Front Door which is globally unique.
     * @param frontendEndpointName Name of the Frontend endpoint which is unique within the Front Door.
     * @param customHttpsConfiguration The configuration specifying how to enable HTTPS
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginEnableHttpsAsync(String resourceGroupName, String frontDoorName, String frontendEndpointName, CustomHttpsConfiguration customHttpsConfiguration, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginEnableHttpsWithServiceResponseAsync(resourceGroupName, frontDoorName, frontendEndpointName, customHttpsConfiguration), serviceCallback);
    }

    /**
     * Enables a frontendEndpoint for HTTPS traffic.
     *
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param frontDoorName Name of the Front Door which is globally unique.
     * @param frontendEndpointName Name of the Frontend endpoint which is unique within the Front Door.
     * @param customHttpsConfiguration The configuration specifying how to enable HTTPS
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginEnableHttpsAsync(String resourceGroupName, String frontDoorName, String frontendEndpointName, CustomHttpsConfiguration customHttpsConfiguration) {
        return beginEnableHttpsWithServiceResponseAsync(resourceGroupName, frontDoorName, frontendEndpointName, customHttpsConfiguration).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Enables a frontendEndpoint for HTTPS traffic.
     *
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param frontDoorName Name of the Front Door which is globally unique.
     * @param frontendEndpointName Name of the Frontend endpoint which is unique within the Front Door.
     * @param customHttpsConfiguration The configuration specifying how to enable HTTPS
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginEnableHttpsWithServiceResponseAsync(String resourceGroupName, String frontDoorName, String frontendEndpointName, CustomHttpsConfiguration customHttpsConfiguration) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (frontDoorName == null) {
            throw new IllegalArgumentException("Parameter frontDoorName is required and cannot be null.");
        }
        if (frontendEndpointName == null) {
            throw new IllegalArgumentException("Parameter frontendEndpointName is required and cannot be null.");
        }
        if (customHttpsConfiguration == null) {
            throw new IllegalArgumentException("Parameter customHttpsConfiguration is required and cannot be null.");
        }
        Validator.validate(customHttpsConfiguration);
        final String apiVersion = "2020-05-01";
        return service.beginEnableHttps(this.client.subscriptionId(), resourceGroupName, frontDoorName, frontendEndpointName, customHttpsConfiguration, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginEnableHttpsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginEnableHttpsDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Disables a frontendEndpoint for HTTPS traffic.
     *
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param frontDoorName Name of the Front Door which is globally unique.
     * @param frontendEndpointName Name of the Frontend endpoint which is unique within the Front Door.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void disableHttps(String resourceGroupName, String frontDoorName, String frontendEndpointName) {
        disableHttpsWithServiceResponseAsync(resourceGroupName, frontDoorName, frontendEndpointName).toBlocking().last().body();
    }

    /**
     * Disables a frontendEndpoint for HTTPS traffic.
     *
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param frontDoorName Name of the Front Door which is globally unique.
     * @param frontendEndpointName Name of the Frontend endpoint which is unique within the Front Door.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> disableHttpsAsync(String resourceGroupName, String frontDoorName, String frontendEndpointName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(disableHttpsWithServiceResponseAsync(resourceGroupName, frontDoorName, frontendEndpointName), serviceCallback);
    }

    /**
     * Disables a frontendEndpoint for HTTPS traffic.
     *
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param frontDoorName Name of the Front Door which is globally unique.
     * @param frontendEndpointName Name of the Frontend endpoint which is unique within the Front Door.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> disableHttpsAsync(String resourceGroupName, String frontDoorName, String frontendEndpointName) {
        return disableHttpsWithServiceResponseAsync(resourceGroupName, frontDoorName, frontendEndpointName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Disables a frontendEndpoint for HTTPS traffic.
     *
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param frontDoorName Name of the Front Door which is globally unique.
     * @param frontendEndpointName Name of the Frontend endpoint which is unique within the Front Door.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> disableHttpsWithServiceResponseAsync(String resourceGroupName, String frontDoorName, String frontendEndpointName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (frontDoorName == null) {
            throw new IllegalArgumentException("Parameter frontDoorName is required and cannot be null.");
        }
        if (frontendEndpointName == null) {
            throw new IllegalArgumentException("Parameter frontendEndpointName is required and cannot be null.");
        }
        final String apiVersion = "2020-05-01";
        Observable<Response<ResponseBody>> observable = service.disableHttps(this.client.subscriptionId(), resourceGroupName, frontDoorName, frontendEndpointName, apiVersion, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new LongRunningOperationOptions().withFinalStateVia(LongRunningFinalState.AZURE_ASYNC_OPERATION), new TypeToken<Void>() { }.getType());
    }

    /**
     * Disables a frontendEndpoint for HTTPS traffic.
     *
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param frontDoorName Name of the Front Door which is globally unique.
     * @param frontendEndpointName Name of the Frontend endpoint which is unique within the Front Door.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDisableHttps(String resourceGroupName, String frontDoorName, String frontendEndpointName) {
        beginDisableHttpsWithServiceResponseAsync(resourceGroupName, frontDoorName, frontendEndpointName).toBlocking().single().body();
    }

    /**
     * Disables a frontendEndpoint for HTTPS traffic.
     *
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param frontDoorName Name of the Front Door which is globally unique.
     * @param frontendEndpointName Name of the Frontend endpoint which is unique within the Front Door.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDisableHttpsAsync(String resourceGroupName, String frontDoorName, String frontendEndpointName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginDisableHttpsWithServiceResponseAsync(resourceGroupName, frontDoorName, frontendEndpointName), serviceCallback);
    }

    /**
     * Disables a frontendEndpoint for HTTPS traffic.
     *
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param frontDoorName Name of the Front Door which is globally unique.
     * @param frontendEndpointName Name of the Frontend endpoint which is unique within the Front Door.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginDisableHttpsAsync(String resourceGroupName, String frontDoorName, String frontendEndpointName) {
        return beginDisableHttpsWithServiceResponseAsync(resourceGroupName, frontDoorName, frontendEndpointName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Disables a frontendEndpoint for HTTPS traffic.
     *
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param frontDoorName Name of the Front Door which is globally unique.
     * @param frontendEndpointName Name of the Frontend endpoint which is unique within the Front Door.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginDisableHttpsWithServiceResponseAsync(String resourceGroupName, String frontDoorName, String frontendEndpointName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (frontDoorName == null) {
            throw new IllegalArgumentException("Parameter frontDoorName is required and cannot be null.");
        }
        if (frontendEndpointName == null) {
            throw new IllegalArgumentException("Parameter frontendEndpointName is required and cannot be null.");
        }
        final String apiVersion = "2020-05-01";
        return service.beginDisableHttps(this.client.subscriptionId(), resourceGroupName, frontDoorName, frontendEndpointName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginDisableHttpsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginDisableHttpsDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists all of the frontend endpoints within a Front Door.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;FrontendEndpointInner&gt; object if successful.
     */
    public PagedList<FrontendEndpointInner> listByFrontDoorNext(final String nextPageLink) {
        ServiceResponse<Page<FrontendEndpointInner>> response = listByFrontDoorNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<FrontendEndpointInner>(response.body()) {
            @Override
            public Page<FrontendEndpointInner> nextPage(String nextPageLink) {
                return listByFrontDoorNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists all of the frontend endpoints within a Front Door.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<FrontendEndpointInner>> listByFrontDoorNextAsync(final String nextPageLink, final ServiceFuture<List<FrontendEndpointInner>> serviceFuture, final ListOperationCallback<FrontendEndpointInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByFrontDoorNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<FrontendEndpointInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<FrontendEndpointInner>>> call(String nextPageLink) {
                    return listByFrontDoorNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists all of the frontend endpoints within a Front Door.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;FrontendEndpointInner&gt; object
     */
    public Observable<Page<FrontendEndpointInner>> listByFrontDoorNextAsync(final String nextPageLink) {
        return listByFrontDoorNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<FrontendEndpointInner>>, Page<FrontendEndpointInner>>() {
                @Override
                public Page<FrontendEndpointInner> call(ServiceResponse<Page<FrontendEndpointInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists all of the frontend endpoints within a Front Door.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;FrontendEndpointInner&gt; object
     */
    public Observable<ServiceResponse<Page<FrontendEndpointInner>>> listByFrontDoorNextWithServiceResponseAsync(final String nextPageLink) {
        return listByFrontDoorNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<FrontendEndpointInner>>, Observable<ServiceResponse<Page<FrontendEndpointInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<FrontendEndpointInner>>> call(ServiceResponse<Page<FrontendEndpointInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByFrontDoorNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists all of the frontend endpoints within a Front Door.
     *
    ServiceResponse<PageImpl<FrontendEndpointInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;FrontendEndpointInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<FrontendEndpointInner>>> listByFrontDoorNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByFrontDoorNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<FrontendEndpointInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<FrontendEndpointInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<FrontendEndpointInner>> result = listByFrontDoorNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<FrontendEndpointInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<FrontendEndpointInner>> listByFrontDoorNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<FrontendEndpointInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<FrontendEndpointInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
