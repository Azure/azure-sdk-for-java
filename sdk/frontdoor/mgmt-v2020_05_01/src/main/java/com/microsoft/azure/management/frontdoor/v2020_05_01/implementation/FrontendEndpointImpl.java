/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.frontdoor.v2020_05_01.implementation;

import com.microsoft.azure.management.frontdoor.v2020_05_01.FrontendEndpoint;
import com.microsoft.azure.arm.model.implementation.IndexableRefreshableWrapperImpl;
import rx.Observable;
import com.microsoft.azure.management.frontdoor.v2020_05_01.CustomHttpsConfiguration;
import com.microsoft.azure.management.frontdoor.v2020_05_01.CustomHttpsProvisioningState;
import com.microsoft.azure.management.frontdoor.v2020_05_01.CustomHttpsProvisioningSubstate;
import com.microsoft.azure.management.frontdoor.v2020_05_01.FrontDoorResourceState;
import com.microsoft.azure.management.frontdoor.v2020_05_01.SessionAffinityEnabledState;
import com.microsoft.azure.management.frontdoor.v2020_05_01.FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink;

class FrontendEndpointImpl extends IndexableRefreshableWrapperImpl<FrontendEndpoint, FrontendEndpointInner> implements FrontendEndpoint {
    private final NetworkManager manager;
    private String resourceGroupName;
    private String frontDoorName;
    private String frontendEndpointName;

    FrontendEndpointImpl(FrontendEndpointInner inner,  NetworkManager manager) {
        super(null, inner);
        this.manager = manager;
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.frontDoorName = IdParsingUtils.getValueFromIdByName(inner.id(), "frontDoors");
        this.frontendEndpointName = IdParsingUtils.getValueFromIdByName(inner.id(), "frontendEndpoints");
    }

    @Override
    public NetworkManager manager() {
        return this.manager;
    }

    @Override
    protected Observable<FrontendEndpointInner> getInnerAsync() {
        FrontendEndpointsInner client = this.manager().inner().frontendEndpoints();
        return client.getAsync(this.resourceGroupName, this.frontDoorName, this.frontendEndpointName);
    }



    @Override
    public CustomHttpsConfiguration customHttpsConfiguration() {
        return this.inner().customHttpsConfiguration();
    }

    @Override
    public CustomHttpsProvisioningState customHttpsProvisioningState() {
        return this.inner().customHttpsProvisioningState();
    }

    @Override
    public CustomHttpsProvisioningSubstate customHttpsProvisioningSubstate() {
        return this.inner().customHttpsProvisioningSubstate();
    }

    @Override
    public String hostName() {
        return this.inner().hostName();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public FrontDoorResourceState resourceState() {
        return this.inner().resourceState();
    }

    @Override
    public SessionAffinityEnabledState sessionAffinityEnabledState() {
        return this.inner().sessionAffinityEnabledState();
    }

    @Override
    public Integer sessionAffinityTtlSeconds() {
        return this.inner().sessionAffinityTtlSeconds();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink webApplicationFirewallPolicyLink() {
        return this.inner().webApplicationFirewallPolicyLink();
    }

}
