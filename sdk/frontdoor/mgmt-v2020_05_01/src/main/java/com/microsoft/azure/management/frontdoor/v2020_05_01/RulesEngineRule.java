/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.frontdoor.v2020_05_01;

import java.util.List;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Contains a list of match conditions, and an action on how to modify the
 * request/response. If multiple rules match, the actions from one rule that
 * conflict with a previous rule overwrite for a singular action, or append in
 * the case of headers manipulation.
 */
public class RulesEngineRule {
    /**
     * A name to refer to this specific rule.
     */
    @JsonProperty(value = "name", required = true)
    private String name;

    /**
     * A priority assigned to this rule.
     */
    @JsonProperty(value = "priority", required = true)
    private int priority;

    /**
     * Actions to perform on the request and response if all of the match
     * conditions are met.
     */
    @JsonProperty(value = "action", required = true)
    private RulesEngineAction action;

    /**
     * A list of match conditions that must meet in order for the actions of
     * this rule to run. Having no match conditions means the actions will
     * always run.
     */
    @JsonProperty(value = "matchConditions")
    private List<RulesEngineMatchCondition> matchConditions;

    /**
     * If this rule is a match should the rules engine continue running the
     * remaining rules or stop. If not present, defaults to Continue. Possible
     * values include: 'Continue', 'Stop'.
     */
    @JsonProperty(value = "matchProcessingBehavior")
    private MatchProcessingBehavior matchProcessingBehavior;

    /**
     * Get a name to refer to this specific rule.
     *
     * @return the name value
     */
    public String name() {
        return this.name;
    }

    /**
     * Set a name to refer to this specific rule.
     *
     * @param name the name value to set
     * @return the RulesEngineRule object itself.
     */
    public RulesEngineRule withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get a priority assigned to this rule.
     *
     * @return the priority value
     */
    public int priority() {
        return this.priority;
    }

    /**
     * Set a priority assigned to this rule.
     *
     * @param priority the priority value to set
     * @return the RulesEngineRule object itself.
     */
    public RulesEngineRule withPriority(int priority) {
        this.priority = priority;
        return this;
    }

    /**
     * Get actions to perform on the request and response if all of the match conditions are met.
     *
     * @return the action value
     */
    public RulesEngineAction action() {
        return this.action;
    }

    /**
     * Set actions to perform on the request and response if all of the match conditions are met.
     *
     * @param action the action value to set
     * @return the RulesEngineRule object itself.
     */
    public RulesEngineRule withAction(RulesEngineAction action) {
        this.action = action;
        return this;
    }

    /**
     * Get a list of match conditions that must meet in order for the actions of this rule to run. Having no match conditions means the actions will always run.
     *
     * @return the matchConditions value
     */
    public List<RulesEngineMatchCondition> matchConditions() {
        return this.matchConditions;
    }

    /**
     * Set a list of match conditions that must meet in order for the actions of this rule to run. Having no match conditions means the actions will always run.
     *
     * @param matchConditions the matchConditions value to set
     * @return the RulesEngineRule object itself.
     */
    public RulesEngineRule withMatchConditions(List<RulesEngineMatchCondition> matchConditions) {
        this.matchConditions = matchConditions;
        return this;
    }

    /**
     * Get if this rule is a match should the rules engine continue running the remaining rules or stop. If not present, defaults to Continue. Possible values include: 'Continue', 'Stop'.
     *
     * @return the matchProcessingBehavior value
     */
    public MatchProcessingBehavior matchProcessingBehavior() {
        return this.matchProcessingBehavior;
    }

    /**
     * Set if this rule is a match should the rules engine continue running the remaining rules or stop. If not present, defaults to Continue. Possible values include: 'Continue', 'Stop'.
     *
     * @param matchProcessingBehavior the matchProcessingBehavior value to set
     * @return the RulesEngineRule object itself.
     */
    public RulesEngineRule withMatchProcessingBehavior(MatchProcessingBehavior matchProcessingBehavior) {
        this.matchProcessingBehavior = matchProcessingBehavior;
        return this;
    }

}
