/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.frontdoor.v2020_05_01.implementation;

import com.microsoft.azure.management.frontdoor.v2020_05_01.RulesEngine;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import java.util.List;
import com.microsoft.azure.management.frontdoor.v2020_05_01.RulesEngineRule;
import com.microsoft.azure.management.frontdoor.v2020_05_01.FrontDoorResourceState;

class RulesEngineImpl extends CreatableUpdatableImpl<RulesEngine, RulesEngineInner, RulesEngineImpl> implements RulesEngine, RulesEngine.Definition, RulesEngine.Update {
    private final NetworkManager manager;
    private String resourceGroupName;
    private String frontDoorName;
    private String rulesEngineName;

    RulesEngineImpl(String name, NetworkManager manager) {
        super(name, new RulesEngineInner());
        this.manager = manager;
        // Set resource name
        this.rulesEngineName = name;
        //
    }

    RulesEngineImpl(RulesEngineInner inner, NetworkManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.rulesEngineName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.frontDoorName = IdParsingUtils.getValueFromIdByName(inner.id(), "frontDoors");
        this.rulesEngineName = IdParsingUtils.getValueFromIdByName(inner.id(), "rulesEngines");
        //
    }

    @Override
    public NetworkManager manager() {
        return this.manager;
    }

    @Override
    public Observable<RulesEngine> createResourceAsync() {
        RulesEnginesInner client = this.manager().inner().rulesEngines();
        return client.createOrUpdateAsync(this.resourceGroupName, this.frontDoorName, this.rulesEngineName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<RulesEngine> updateResourceAsync() {
        RulesEnginesInner client = this.manager().inner().rulesEngines();
        return client.createOrUpdateAsync(this.resourceGroupName, this.frontDoorName, this.rulesEngineName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<RulesEngineInner> getInnerAsync() {
        RulesEnginesInner client = this.manager().inner().rulesEngines();
        return client.getAsync(this.resourceGroupName, this.frontDoorName, this.rulesEngineName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public FrontDoorResourceState resourceState() {
        return this.inner().resourceState();
    }

    @Override
    public List<RulesEngineRule> rules() {
        return this.inner().rules();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public RulesEngineImpl withExistingFrontDoor(String resourceGroupName, String frontDoorName) {
        this.resourceGroupName = resourceGroupName;
        this.frontDoorName = frontDoorName;
        return this;
    }

    @Override
    public RulesEngineImpl withResourceState(FrontDoorResourceState resourceState) {
        this.inner().withResourceState(resourceState);
        return this;
    }

    @Override
    public RulesEngineImpl withRules(List<RulesEngineRule> rules) {
        this.inner().withRules(rules);
        return this;
    }

}
