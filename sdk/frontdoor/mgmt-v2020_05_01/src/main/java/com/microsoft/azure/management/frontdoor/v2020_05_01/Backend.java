/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.frontdoor.v2020_05_01;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Backend address of a frontDoor load balancer.
 */
public class Backend {
    /**
     * Location of the backend (IP address or FQDN).
     */
    @JsonProperty(value = "address")
    private String address;

    /**
     * The Alias of the Private Link resource. Populating this optional field
     * indicates that this backend is 'Private'.
     */
    @JsonProperty(value = "privateLinkAlias")
    private String privateLinkAlias;

    /**
     * The Resource Id of the Private Link resource. Populating this optional
     * field indicates that this backend is 'Private'.
     */
    @JsonProperty(value = "privateLinkResourceId")
    private String privateLinkResourceId;

    /**
     * The location of the Private Link resource. Required only if
     * 'privateLinkResourceId' is populated.
     */
    @JsonProperty(value = "privateLinkLocation")
    private String privateLinkLocation;

    /**
     * The Approval status for the connection to the Private Link. Possible
     * values include: 'Pending', 'Approved', 'Rejected', 'Disconnected',
     * 'Timeout'.
     */
    @JsonProperty(value = "privateEndpointStatus", access = JsonProperty.Access.WRITE_ONLY)
    private PrivateEndpointStatus privateEndpointStatus;

    /**
     * A custom message to be included in the approval request to connect to
     * the Private Link.
     */
    @JsonProperty(value = "privateLinkApprovalMessage")
    private String privateLinkApprovalMessage;

    /**
     * The HTTP TCP port number. Must be between 1 and 65535.
     */
    @JsonProperty(value = "httpPort")
    private Integer httpPort;

    /**
     * The HTTPS TCP port number. Must be between 1 and 65535.
     */
    @JsonProperty(value = "httpsPort")
    private Integer httpsPort;

    /**
     * Whether to enable use of this backend. Permitted values are 'Enabled' or
     * 'Disabled'. Possible values include: 'Enabled', 'Disabled'.
     */
    @JsonProperty(value = "enabledState")
    private BackendEnabledState enabledState;

    /**
     * Priority to use for load balancing. Higher priorities will not be used
     * for load balancing if any lower priority backend is healthy.
     */
    @JsonProperty(value = "priority")
    private Integer priority;

    /**
     * Weight of this endpoint for load balancing purposes.
     */
    @JsonProperty(value = "weight")
    private Integer weight;

    /**
     * The value to use as the host header sent to the backend. If blank or
     * unspecified, this defaults to the incoming host.
     */
    @JsonProperty(value = "backendHostHeader")
    private String backendHostHeader;

    /**
     * Get location of the backend (IP address or FQDN).
     *
     * @return the address value
     */
    public String address() {
        return this.address;
    }

    /**
     * Set location of the backend (IP address or FQDN).
     *
     * @param address the address value to set
     * @return the Backend object itself.
     */
    public Backend withAddress(String address) {
        this.address = address;
        return this;
    }

    /**
     * Get the Alias of the Private Link resource. Populating this optional field indicates that this backend is 'Private'.
     *
     * @return the privateLinkAlias value
     */
    public String privateLinkAlias() {
        return this.privateLinkAlias;
    }

    /**
     * Set the Alias of the Private Link resource. Populating this optional field indicates that this backend is 'Private'.
     *
     * @param privateLinkAlias the privateLinkAlias value to set
     * @return the Backend object itself.
     */
    public Backend withPrivateLinkAlias(String privateLinkAlias) {
        this.privateLinkAlias = privateLinkAlias;
        return this;
    }

    /**
     * Get the Resource Id of the Private Link resource. Populating this optional field indicates that this backend is 'Private'.
     *
     * @return the privateLinkResourceId value
     */
    public String privateLinkResourceId() {
        return this.privateLinkResourceId;
    }

    /**
     * Set the Resource Id of the Private Link resource. Populating this optional field indicates that this backend is 'Private'.
     *
     * @param privateLinkResourceId the privateLinkResourceId value to set
     * @return the Backend object itself.
     */
    public Backend withPrivateLinkResourceId(String privateLinkResourceId) {
        this.privateLinkResourceId = privateLinkResourceId;
        return this;
    }

    /**
     * Get the location of the Private Link resource. Required only if 'privateLinkResourceId' is populated.
     *
     * @return the privateLinkLocation value
     */
    public String privateLinkLocation() {
        return this.privateLinkLocation;
    }

    /**
     * Set the location of the Private Link resource. Required only if 'privateLinkResourceId' is populated.
     *
     * @param privateLinkLocation the privateLinkLocation value to set
     * @return the Backend object itself.
     */
    public Backend withPrivateLinkLocation(String privateLinkLocation) {
        this.privateLinkLocation = privateLinkLocation;
        return this;
    }

    /**
     * Get the Approval status for the connection to the Private Link. Possible values include: 'Pending', 'Approved', 'Rejected', 'Disconnected', 'Timeout'.
     *
     * @return the privateEndpointStatus value
     */
    public PrivateEndpointStatus privateEndpointStatus() {
        return this.privateEndpointStatus;
    }

    /**
     * Get a custom message to be included in the approval request to connect to the Private Link.
     *
     * @return the privateLinkApprovalMessage value
     */
    public String privateLinkApprovalMessage() {
        return this.privateLinkApprovalMessage;
    }

    /**
     * Set a custom message to be included in the approval request to connect to the Private Link.
     *
     * @param privateLinkApprovalMessage the privateLinkApprovalMessage value to set
     * @return the Backend object itself.
     */
    public Backend withPrivateLinkApprovalMessage(String privateLinkApprovalMessage) {
        this.privateLinkApprovalMessage = privateLinkApprovalMessage;
        return this;
    }

    /**
     * Get the HTTP TCP port number. Must be between 1 and 65535.
     *
     * @return the httpPort value
     */
    public Integer httpPort() {
        return this.httpPort;
    }

    /**
     * Set the HTTP TCP port number. Must be between 1 and 65535.
     *
     * @param httpPort the httpPort value to set
     * @return the Backend object itself.
     */
    public Backend withHttpPort(Integer httpPort) {
        this.httpPort = httpPort;
        return this;
    }

    /**
     * Get the HTTPS TCP port number. Must be between 1 and 65535.
     *
     * @return the httpsPort value
     */
    public Integer httpsPort() {
        return this.httpsPort;
    }

    /**
     * Set the HTTPS TCP port number. Must be between 1 and 65535.
     *
     * @param httpsPort the httpsPort value to set
     * @return the Backend object itself.
     */
    public Backend withHttpsPort(Integer httpsPort) {
        this.httpsPort = httpsPort;
        return this;
    }

    /**
     * Get whether to enable use of this backend. Permitted values are 'Enabled' or 'Disabled'. Possible values include: 'Enabled', 'Disabled'.
     *
     * @return the enabledState value
     */
    public BackendEnabledState enabledState() {
        return this.enabledState;
    }

    /**
     * Set whether to enable use of this backend. Permitted values are 'Enabled' or 'Disabled'. Possible values include: 'Enabled', 'Disabled'.
     *
     * @param enabledState the enabledState value to set
     * @return the Backend object itself.
     */
    public Backend withEnabledState(BackendEnabledState enabledState) {
        this.enabledState = enabledState;
        return this;
    }

    /**
     * Get priority to use for load balancing. Higher priorities will not be used for load balancing if any lower priority backend is healthy.
     *
     * @return the priority value
     */
    public Integer priority() {
        return this.priority;
    }

    /**
     * Set priority to use for load balancing. Higher priorities will not be used for load balancing if any lower priority backend is healthy.
     *
     * @param priority the priority value to set
     * @return the Backend object itself.
     */
    public Backend withPriority(Integer priority) {
        this.priority = priority;
        return this;
    }

    /**
     * Get weight of this endpoint for load balancing purposes.
     *
     * @return the weight value
     */
    public Integer weight() {
        return this.weight;
    }

    /**
     * Set weight of this endpoint for load balancing purposes.
     *
     * @param weight the weight value to set
     * @return the Backend object itself.
     */
    public Backend withWeight(Integer weight) {
        this.weight = weight;
        return this;
    }

    /**
     * Get the value to use as the host header sent to the backend. If blank or unspecified, this defaults to the incoming host.
     *
     * @return the backendHostHeader value
     */
    public String backendHostHeader() {
        return this.backendHostHeader;
    }

    /**
     * Set the value to use as the host header sent to the backend. If blank or unspecified, this defaults to the incoming host.
     *
     * @param backendHostHeader the backendHostHeader value to set
     * @return the Backend object itself.
     */
    public Backend withBackendHostHeader(String backendHostHeader) {
        this.backendHostHeader = backendHostHeader;
        return this;
    }

}
