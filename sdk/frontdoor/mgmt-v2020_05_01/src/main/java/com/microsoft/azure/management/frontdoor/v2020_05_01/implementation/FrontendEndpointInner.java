/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.frontdoor.v2020_05_01.implementation;

import com.microsoft.azure.management.frontdoor.v2020_05_01.SessionAffinityEnabledState;
import com.microsoft.azure.management.frontdoor.v2020_05_01.FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink;
import com.microsoft.azure.management.frontdoor.v2020_05_01.FrontDoorResourceState;
import com.microsoft.azure.management.frontdoor.v2020_05_01.CustomHttpsProvisioningState;
import com.microsoft.azure.management.frontdoor.v2020_05_01.CustomHttpsProvisioningSubstate;
import com.microsoft.azure.management.frontdoor.v2020_05_01.CustomHttpsConfiguration;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.microsoft.rest.serializer.JsonFlatten;
import com.microsoft.azure.SubResource;

/**
 * A frontend endpoint used for routing.
 */
@JsonFlatten
public class FrontendEndpointInner extends SubResource {
    /**
     * The host name of the frontendEndpoint. Must be a domain name.
     */
    @JsonProperty(value = "properties.hostName")
    private String hostName;

    /**
     * Whether to allow session affinity on this host. Valid options are
     * 'Enabled' or 'Disabled'. Possible values include: 'Enabled', 'Disabled'.
     */
    @JsonProperty(value = "properties.sessionAffinityEnabledState")
    private SessionAffinityEnabledState sessionAffinityEnabledState;

    /**
     * UNUSED. This field will be ignored. The TTL to use in seconds for
     * session affinity, if applicable.
     */
    @JsonProperty(value = "properties.sessionAffinityTtlSeconds")
    private Integer sessionAffinityTtlSeconds;

    /**
     * Defines the Web Application Firewall policy for each host (if
     * applicable).
     */
    @JsonProperty(value = "properties.webApplicationFirewallPolicyLink")
    private FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink webApplicationFirewallPolicyLink;

    /**
     * Resource status. Possible values include: 'Creating', 'Enabling',
     * 'Enabled', 'Disabling', 'Disabled', 'Deleting'.
     */
    @JsonProperty(value = "properties.resourceState")
    private FrontDoorResourceState resourceState;

    /**
     * Provisioning status of Custom Https of the frontendEndpoint. Possible
     * values include: 'Enabling', 'Enabled', 'Disabling', 'Disabled',
     * 'Failed'.
     */
    @JsonProperty(value = "properties.customHttpsProvisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private CustomHttpsProvisioningState customHttpsProvisioningState;

    /**
     * Provisioning substate shows the progress of custom HTTPS
     * enabling/disabling process step by step. Possible values include:
     * 'SubmittingDomainControlValidationRequest',
     * 'PendingDomainControlValidationREquestApproval',
     * 'DomainControlValidationRequestApproved',
     * 'DomainControlValidationRequestRejected',
     * 'DomainControlValidationRequestTimedOut', 'IssuingCertificate',
     * 'DeployingCertificate', 'CertificateDeployed', 'DeletingCertificate',
     * 'CertificateDeleted'.
     */
    @JsonProperty(value = "properties.customHttpsProvisioningSubstate", access = JsonProperty.Access.WRITE_ONLY)
    private CustomHttpsProvisioningSubstate customHttpsProvisioningSubstate;

    /**
     * The configuration specifying how to enable HTTPS.
     */
    @JsonProperty(value = "properties.customHttpsConfiguration", access = JsonProperty.Access.WRITE_ONLY)
    private CustomHttpsConfiguration customHttpsConfiguration;

    /**
     * Resource name.
     */
    @JsonProperty(value = "name")
    private String name;

    /**
     * Resource type.
     */
    @JsonProperty(value = "type", access = JsonProperty.Access.WRITE_ONLY)
    private String type;

    /**
     * Get the host name of the frontendEndpoint. Must be a domain name.
     *
     * @return the hostName value
     */
    public String hostName() {
        return this.hostName;
    }

    /**
     * Set the host name of the frontendEndpoint. Must be a domain name.
     *
     * @param hostName the hostName value to set
     * @return the FrontendEndpointInner object itself.
     */
    public FrontendEndpointInner withHostName(String hostName) {
        this.hostName = hostName;
        return this;
    }

    /**
     * Get whether to allow session affinity on this host. Valid options are 'Enabled' or 'Disabled'. Possible values include: 'Enabled', 'Disabled'.
     *
     * @return the sessionAffinityEnabledState value
     */
    public SessionAffinityEnabledState sessionAffinityEnabledState() {
        return this.sessionAffinityEnabledState;
    }

    /**
     * Set whether to allow session affinity on this host. Valid options are 'Enabled' or 'Disabled'. Possible values include: 'Enabled', 'Disabled'.
     *
     * @param sessionAffinityEnabledState the sessionAffinityEnabledState value to set
     * @return the FrontendEndpointInner object itself.
     */
    public FrontendEndpointInner withSessionAffinityEnabledState(SessionAffinityEnabledState sessionAffinityEnabledState) {
        this.sessionAffinityEnabledState = sessionAffinityEnabledState;
        return this;
    }

    /**
     * Get uNUSED. This field will be ignored. The TTL to use in seconds for session affinity, if applicable.
     *
     * @return the sessionAffinityTtlSeconds value
     */
    public Integer sessionAffinityTtlSeconds() {
        return this.sessionAffinityTtlSeconds;
    }

    /**
     * Set uNUSED. This field will be ignored. The TTL to use in seconds for session affinity, if applicable.
     *
     * @param sessionAffinityTtlSeconds the sessionAffinityTtlSeconds value to set
     * @return the FrontendEndpointInner object itself.
     */
    public FrontendEndpointInner withSessionAffinityTtlSeconds(Integer sessionAffinityTtlSeconds) {
        this.sessionAffinityTtlSeconds = sessionAffinityTtlSeconds;
        return this;
    }

    /**
     * Get defines the Web Application Firewall policy for each host (if applicable).
     *
     * @return the webApplicationFirewallPolicyLink value
     */
    public FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink webApplicationFirewallPolicyLink() {
        return this.webApplicationFirewallPolicyLink;
    }

    /**
     * Set defines the Web Application Firewall policy for each host (if applicable).
     *
     * @param webApplicationFirewallPolicyLink the webApplicationFirewallPolicyLink value to set
     * @return the FrontendEndpointInner object itself.
     */
    public FrontendEndpointInner withWebApplicationFirewallPolicyLink(FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink webApplicationFirewallPolicyLink) {
        this.webApplicationFirewallPolicyLink = webApplicationFirewallPolicyLink;
        return this;
    }

    /**
     * Get resource status. Possible values include: 'Creating', 'Enabling', 'Enabled', 'Disabling', 'Disabled', 'Deleting'.
     *
     * @return the resourceState value
     */
    public FrontDoorResourceState resourceState() {
        return this.resourceState;
    }

    /**
     * Set resource status. Possible values include: 'Creating', 'Enabling', 'Enabled', 'Disabling', 'Disabled', 'Deleting'.
     *
     * @param resourceState the resourceState value to set
     * @return the FrontendEndpointInner object itself.
     */
    public FrontendEndpointInner withResourceState(FrontDoorResourceState resourceState) {
        this.resourceState = resourceState;
        return this;
    }

    /**
     * Get provisioning status of Custom Https of the frontendEndpoint. Possible values include: 'Enabling', 'Enabled', 'Disabling', 'Disabled', 'Failed'.
     *
     * @return the customHttpsProvisioningState value
     */
    public CustomHttpsProvisioningState customHttpsProvisioningState() {
        return this.customHttpsProvisioningState;
    }

    /**
     * Get provisioning substate shows the progress of custom HTTPS enabling/disabling process step by step. Possible values include: 'SubmittingDomainControlValidationRequest', 'PendingDomainControlValidationREquestApproval', 'DomainControlValidationRequestApproved', 'DomainControlValidationRequestRejected', 'DomainControlValidationRequestTimedOut', 'IssuingCertificate', 'DeployingCertificate', 'CertificateDeployed', 'DeletingCertificate', 'CertificateDeleted'.
     *
     * @return the customHttpsProvisioningSubstate value
     */
    public CustomHttpsProvisioningSubstate customHttpsProvisioningSubstate() {
        return this.customHttpsProvisioningSubstate;
    }

    /**
     * Get the configuration specifying how to enable HTTPS.
     *
     * @return the customHttpsConfiguration value
     */
    public CustomHttpsConfiguration customHttpsConfiguration() {
        return this.customHttpsConfiguration;
    }

    /**
     * Get resource name.
     *
     * @return the name value
     */
    public String name() {
        return this.name;
    }

    /**
     * Set resource name.
     *
     * @param name the name value to set
     * @return the FrontendEndpointInner object itself.
     */
    public FrontendEndpointInner withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get resource type.
     *
     * @return the type value
     */
    public String type() {
        return this.type;
    }

}
