/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.frontdoor.v2020_05_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.frontdoor.v2020_05_01.RulesEngines;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.frontdoor.v2020_05_01.RulesEngine;

class RulesEnginesImpl extends WrapperImpl<RulesEnginesInner> implements RulesEngines {
    private final NetworkManager manager;

    RulesEnginesImpl(NetworkManager manager) {
        super(manager.inner().rulesEngines());
        this.manager = manager;
    }

    public NetworkManager manager() {
        return this.manager;
    }

    @Override
    public RulesEngineImpl define(String name) {
        return wrapModel(name);
    }

    private RulesEngineImpl wrapModel(RulesEngineInner inner) {
        return  new RulesEngineImpl(inner, manager());
    }

    private RulesEngineImpl wrapModel(String name) {
        return new RulesEngineImpl(name, this.manager());
    }

    @Override
    public Observable<RulesEngine> listByFrontDoorAsync(final String resourceGroupName, final String frontDoorName) {
        RulesEnginesInner client = this.inner();
        return client.listByFrontDoorAsync(resourceGroupName, frontDoorName)
        .flatMapIterable(new Func1<Page<RulesEngineInner>, Iterable<RulesEngineInner>>() {
            @Override
            public Iterable<RulesEngineInner> call(Page<RulesEngineInner> page) {
                return page.items();
            }
        })
        .map(new Func1<RulesEngineInner, RulesEngine>() {
            @Override
            public RulesEngine call(RulesEngineInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<RulesEngine> getAsync(String resourceGroupName, String frontDoorName, String rulesEngineName) {
        RulesEnginesInner client = this.inner();
        return client.getAsync(resourceGroupName, frontDoorName, rulesEngineName)
        .flatMap(new Func1<RulesEngineInner, Observable<RulesEngine>>() {
            @Override
            public Observable<RulesEngine> call(RulesEngineInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((RulesEngine)wrapModel(inner));
                }
            }
       });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String frontDoorName, String rulesEngineName) {
        RulesEnginesInner client = this.inner();
        return client.deleteAsync(resourceGroupName, frontDoorName, rulesEngineName).toCompletable();
    }

}
