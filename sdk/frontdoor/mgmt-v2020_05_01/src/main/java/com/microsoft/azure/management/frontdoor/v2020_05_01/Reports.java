/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.frontdoor.v2020_05_01;

import rx.Observable;
import org.joda.time.DateTime;

/**
 * Type representing Reports.
 */
public interface Reports {
    /**
     * Gets a Latency Scorecard for a given Experiment.
     *
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param profileName The Profile identifier associated with the Tenant and Partner
     * @param experimentName The Experiment identifier associated with the Experiment
     * @param aggregationInterval The aggregation interval of the Latency Scorecard. Possible values include: 'Daily', 'Weekly', 'Monthly'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<LatencyScorecard> getLatencyScorecardsAsync(String resourceGroupName, String profileName, String experimentName, LatencyScorecardAggregationInterval aggregationInterval);

    /**
     * Gets a Timeseries for a given Experiment.
     *
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param profileName The Profile identifier associated with the Tenant and Partner
     * @param experimentName The Experiment identifier associated with the Experiment
     * @param startDateTimeUTC The start DateTime of the Timeseries in UTC
     * @param endDateTimeUTC The end DateTime of the Timeseries in UTC
     * @param aggregationInterval The aggregation interval of the Timeseries. Possible values include: 'Hourly', 'Daily'
     * @param timeseriesType The type of Timeseries. Possible values include: 'MeasurementCounts', 'LatencyP50', 'LatencyP75', 'LatencyP95'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<Timeseries> getTimeseriesAsync(String resourceGroupName, String profileName, String experimentName, DateTime startDateTimeUTC, DateTime endDateTimeUTC, TimeseriesAggregationInterval aggregationInterval, TimeseriesType timeseriesType);

}
