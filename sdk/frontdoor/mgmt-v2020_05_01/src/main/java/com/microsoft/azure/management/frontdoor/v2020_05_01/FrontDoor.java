/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.frontdoor.v2020_05_01;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.arm.resources.models.Resource;
import com.microsoft.azure.arm.resources.models.GroupableResourceCore;
import com.microsoft.azure.arm.resources.models.HasResourceGroup;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.frontdoor.v2020_05_01.implementation.NetworkManager;
import java.util.List;
import com.microsoft.azure.management.frontdoor.v2020_05_01.implementation.FrontendEndpointInner;
import com.microsoft.azure.management.frontdoor.v2020_05_01.implementation.FrontDoorInner;

/**
 * Type representing FrontDoor.
 */
public interface FrontDoor extends HasInner<FrontDoorInner>, Resource, GroupableResourceCore<NetworkManager, FrontDoorInner>, HasResourceGroup, Refreshable<FrontDoor>, Updatable<FrontDoor.Update>, HasManager<NetworkManager> {
    /**
     * @return the backendPools value.
     */
    List<BackendPool> backendPools();

    /**
     * @return the backendPoolsSettings value.
     */
    BackendPoolsSettings backendPoolsSettings();

    /**
     * @return the cname value.
     */
    String cname();

    /**
     * @return the enabledState value.
     */
    FrontDoorEnabledState enabledState();

    /**
     * @return the friendlyName value.
     */
    String friendlyName();

    /**
     * @return the frontdoorId value.
     */
    String frontdoorId();

    /**
     * @return the frontendEndpoints value.
     */
    List<FrontendEndpoint> frontendEndpoints();

    /**
     * @return the healthProbeSettings value.
     */
    List<HealthProbeSettingsModel> healthProbeSettings();

    /**
     * @return the loadBalancingSettings value.
     */
    List<LoadBalancingSettingsModel> loadBalancingSettings();

    /**
     * @return the provisioningState value.
     */
    String provisioningState();

    /**
     * @return the resourceState value.
     */
    FrontDoorResourceState resourceState();

    /**
     * @return the routingRules value.
     */
    List<RoutingRule> routingRules();

    /**
     * @return the rulesEngines value.
     */
    List<RulesEngine> rulesEngines();

    /**
     * The entirety of the FrontDoor definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithGroup, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of FrontDoor definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a FrontDoor definition.
         */
        interface Blank extends GroupableResourceCore.DefinitionWithRegion<WithGroup> {
        }

        /**
         * The stage of the FrontDoor definition allowing to specify the resource group.
         */
        interface WithGroup extends GroupableResourceCore.DefinitionStages.WithGroup<WithCreate> {
        }

        /**
         * The stage of the frontdoor definition allowing to specify BackendPools.
         */
        interface WithBackendPools {
            /**
             * Specifies backendPools.
             * @param backendPools Backend pools available to routing rules
             * @return the next definition stage
             */
            WithCreate withBackendPools(List<BackendPool> backendPools);
        }

        /**
         * The stage of the frontdoor definition allowing to specify BackendPoolsSettings.
         */
        interface WithBackendPoolsSettings {
            /**
             * Specifies backendPoolsSettings.
             * @param backendPoolsSettings Settings for all backendPools
             * @return the next definition stage
             */
            WithCreate withBackendPoolsSettings(BackendPoolsSettings backendPoolsSettings);
        }

        /**
         * The stage of the frontdoor definition allowing to specify EnabledState.
         */
        interface WithEnabledState {
            /**
             * Specifies enabledState.
             * @param enabledState Operational status of the Front Door load balancer. Permitted values are 'Enabled' or 'Disabled'. Possible values include: 'Enabled', 'Disabled'
             * @return the next definition stage
             */
            WithCreate withEnabledState(FrontDoorEnabledState enabledState);
        }

        /**
         * The stage of the frontdoor definition allowing to specify FriendlyName.
         */
        interface WithFriendlyName {
            /**
             * Specifies friendlyName.
             * @param friendlyName A friendly name for the frontDoor
             * @return the next definition stage
             */
            WithCreate withFriendlyName(String friendlyName);
        }

        /**
         * The stage of the frontdoor definition allowing to specify FrontendEndpoints.
         */
        interface WithFrontendEndpoints {
            /**
             * Specifies frontendEndpoints.
             * @param frontendEndpoints Frontend endpoints available to routing rules
             * @return the next definition stage
             */
            WithCreate withFrontendEndpoints(List<FrontendEndpointInner> frontendEndpoints);
        }

        /**
         * The stage of the frontdoor definition allowing to specify HealthProbeSettings.
         */
        interface WithHealthProbeSettings {
            /**
             * Specifies healthProbeSettings.
             * @param healthProbeSettings Health probe settings associated with this Front Door instance
             * @return the next definition stage
             */
            WithCreate withHealthProbeSettings(List<HealthProbeSettingsModel> healthProbeSettings);
        }

        /**
         * The stage of the frontdoor definition allowing to specify LoadBalancingSettings.
         */
        interface WithLoadBalancingSettings {
            /**
             * Specifies loadBalancingSettings.
             * @param loadBalancingSettings Load balancing settings associated with this Front Door instance
             * @return the next definition stage
             */
            WithCreate withLoadBalancingSettings(List<LoadBalancingSettingsModel> loadBalancingSettings);
        }

        /**
         * The stage of the frontdoor definition allowing to specify ResourceState.
         */
        interface WithResourceState {
            /**
             * Specifies resourceState.
             * @param resourceState Resource status of the Front Door. Possible values include: 'Creating', 'Enabling', 'Enabled', 'Disabling', 'Disabled', 'Deleting'
             * @return the next definition stage
             */
            WithCreate withResourceState(FrontDoorResourceState resourceState);
        }

        /**
         * The stage of the frontdoor definition allowing to specify RoutingRules.
         */
        interface WithRoutingRules {
            /**
             * Specifies routingRules.
             * @param routingRules Routing rules associated with this Front Door
             * @return the next definition stage
             */
            WithCreate withRoutingRules(List<RoutingRule> routingRules);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<FrontDoor>, Resource.DefinitionWithTags<WithCreate>, DefinitionStages.WithBackendPools, DefinitionStages.WithBackendPoolsSettings, DefinitionStages.WithEnabledState, DefinitionStages.WithFriendlyName, DefinitionStages.WithFrontendEndpoints, DefinitionStages.WithHealthProbeSettings, DefinitionStages.WithLoadBalancingSettings, DefinitionStages.WithResourceState, DefinitionStages.WithRoutingRules {
        }
    }
    /**
     * The template for a FrontDoor update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<FrontDoor>, Resource.UpdateWithTags<Update>, UpdateStages.WithBackendPools, UpdateStages.WithBackendPoolsSettings, UpdateStages.WithEnabledState, UpdateStages.WithFriendlyName, UpdateStages.WithFrontendEndpoints, UpdateStages.WithHealthProbeSettings, UpdateStages.WithLoadBalancingSettings, UpdateStages.WithResourceState, UpdateStages.WithRoutingRules {
    }

    /**
     * Grouping of FrontDoor update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the frontdoor update allowing to specify BackendPools.
         */
        interface WithBackendPools {
            /**
             * Specifies backendPools.
             * @param backendPools Backend pools available to routing rules
             * @return the next update stage
             */
            Update withBackendPools(List<BackendPool> backendPools);
        }

        /**
         * The stage of the frontdoor update allowing to specify BackendPoolsSettings.
         */
        interface WithBackendPoolsSettings {
            /**
             * Specifies backendPoolsSettings.
             * @param backendPoolsSettings Settings for all backendPools
             * @return the next update stage
             */
            Update withBackendPoolsSettings(BackendPoolsSettings backendPoolsSettings);
        }

        /**
         * The stage of the frontdoor update allowing to specify EnabledState.
         */
        interface WithEnabledState {
            /**
             * Specifies enabledState.
             * @param enabledState Operational status of the Front Door load balancer. Permitted values are 'Enabled' or 'Disabled'. Possible values include: 'Enabled', 'Disabled'
             * @return the next update stage
             */
            Update withEnabledState(FrontDoorEnabledState enabledState);
        }

        /**
         * The stage of the frontdoor update allowing to specify FriendlyName.
         */
        interface WithFriendlyName {
            /**
             * Specifies friendlyName.
             * @param friendlyName A friendly name for the frontDoor
             * @return the next update stage
             */
            Update withFriendlyName(String friendlyName);
        }

        /**
         * The stage of the frontdoor update allowing to specify FrontendEndpoints.
         */
        interface WithFrontendEndpoints {
            /**
             * Specifies frontendEndpoints.
             * @param frontendEndpoints Frontend endpoints available to routing rules
             * @return the next update stage
             */
            Update withFrontendEndpoints(List<FrontendEndpointInner> frontendEndpoints);
        }

        /**
         * The stage of the frontdoor update allowing to specify HealthProbeSettings.
         */
        interface WithHealthProbeSettings {
            /**
             * Specifies healthProbeSettings.
             * @param healthProbeSettings Health probe settings associated with this Front Door instance
             * @return the next update stage
             */
            Update withHealthProbeSettings(List<HealthProbeSettingsModel> healthProbeSettings);
        }

        /**
         * The stage of the frontdoor update allowing to specify LoadBalancingSettings.
         */
        interface WithLoadBalancingSettings {
            /**
             * Specifies loadBalancingSettings.
             * @param loadBalancingSettings Load balancing settings associated with this Front Door instance
             * @return the next update stage
             */
            Update withLoadBalancingSettings(List<LoadBalancingSettingsModel> loadBalancingSettings);
        }

        /**
         * The stage of the frontdoor update allowing to specify ResourceState.
         */
        interface WithResourceState {
            /**
             * Specifies resourceState.
             * @param resourceState Resource status of the Front Door. Possible values include: 'Creating', 'Enabling', 'Enabled', 'Disabling', 'Disabled', 'Deleting'
             * @return the next update stage
             */
            Update withResourceState(FrontDoorResourceState resourceState);
        }

        /**
         * The stage of the frontdoor update allowing to specify RoutingRules.
         */
        interface WithRoutingRules {
            /**
             * Specifies routingRules.
             * @param routingRules Routing rules associated with this Front Door
             * @return the next update stage
             */
            Update withRoutingRules(List<RoutingRule> routingRules);
        }

    }
}
