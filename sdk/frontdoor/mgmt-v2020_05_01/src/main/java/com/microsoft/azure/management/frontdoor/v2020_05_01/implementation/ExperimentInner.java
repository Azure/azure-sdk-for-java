/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.frontdoor.v2020_05_01.implementation;

import com.microsoft.azure.management.frontdoor.v2020_05_01.State;
import com.microsoft.azure.management.frontdoor.v2020_05_01.NetworkExperimentResourceState;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.microsoft.rest.serializer.JsonFlatten;
import com.microsoft.rest.SkipParentValidation;
import com.microsoft.azure.Resource;

/**
 * Defines the properties of an Experiment.
 */
@JsonFlatten
@SkipParentValidation
public class ExperimentInner extends Resource {
    /**
     * The description of the details or intents of the Experiment.
     */
    @JsonProperty(value = "properties.description")
    private String description;

    /**
     * The endpoint A of an experiment.
     */
    @JsonProperty(value = "properties.endpointA")
    private EndpointInner endpointA;

    /**
     * The endpoint B of an experiment.
     */
    @JsonProperty(value = "properties.endpointB")
    private EndpointInner endpointB;

    /**
     * The state of the Experiment. Possible values include: 'Enabled',
     * 'Disabled'.
     */
    @JsonProperty(value = "properties.enabledState")
    private State enabledState;

    /**
     * Resource status. Possible values include: 'Creating', 'Enabling',
     * 'Enabled', 'Disabling', 'Disabled', 'Deleting'.
     */
    @JsonProperty(value = "properties.resourceState")
    private NetworkExperimentResourceState resourceState;

    /**
     * The description of Experiment status from the server side.
     */
    @JsonProperty(value = "properties.status", access = JsonProperty.Access.WRITE_ONLY)
    private String status;

    /**
     * The uri to the Script used in the Experiment.
     */
    @JsonProperty(value = "properties.scriptFileUri", access = JsonProperty.Access.WRITE_ONLY)
    private String scriptFileUri;

    /**
     * Get the description of the details or intents of the Experiment.
     *
     * @return the description value
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description of the details or intents of the Experiment.
     *
     * @param description the description value to set
     * @return the ExperimentInner object itself.
     */
    public ExperimentInner withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the endpoint A of an experiment.
     *
     * @return the endpointA value
     */
    public EndpointInner endpointA() {
        return this.endpointA;
    }

    /**
     * Set the endpoint A of an experiment.
     *
     * @param endpointA the endpointA value to set
     * @return the ExperimentInner object itself.
     */
    public ExperimentInner withEndpointA(EndpointInner endpointA) {
        this.endpointA = endpointA;
        return this;
    }

    /**
     * Get the endpoint B of an experiment.
     *
     * @return the endpointB value
     */
    public EndpointInner endpointB() {
        return this.endpointB;
    }

    /**
     * Set the endpoint B of an experiment.
     *
     * @param endpointB the endpointB value to set
     * @return the ExperimentInner object itself.
     */
    public ExperimentInner withEndpointB(EndpointInner endpointB) {
        this.endpointB = endpointB;
        return this;
    }

    /**
     * Get the state of the Experiment. Possible values include: 'Enabled', 'Disabled'.
     *
     * @return the enabledState value
     */
    public State enabledState() {
        return this.enabledState;
    }

    /**
     * Set the state of the Experiment. Possible values include: 'Enabled', 'Disabled'.
     *
     * @param enabledState the enabledState value to set
     * @return the ExperimentInner object itself.
     */
    public ExperimentInner withEnabledState(State enabledState) {
        this.enabledState = enabledState;
        return this;
    }

    /**
     * Get resource status. Possible values include: 'Creating', 'Enabling', 'Enabled', 'Disabling', 'Disabled', 'Deleting'.
     *
     * @return the resourceState value
     */
    public NetworkExperimentResourceState resourceState() {
        return this.resourceState;
    }

    /**
     * Set resource status. Possible values include: 'Creating', 'Enabling', 'Enabled', 'Disabling', 'Disabled', 'Deleting'.
     *
     * @param resourceState the resourceState value to set
     * @return the ExperimentInner object itself.
     */
    public ExperimentInner withResourceState(NetworkExperimentResourceState resourceState) {
        this.resourceState = resourceState;
        return this;
    }

    /**
     * Get the description of Experiment status from the server side.
     *
     * @return the status value
     */
    public String status() {
        return this.status;
    }

    /**
     * Get the uri to the Script used in the Experiment.
     *
     * @return the scriptFileUri value
     */
    public String scriptFileUri() {
        return this.scriptFileUri;
    }

}
