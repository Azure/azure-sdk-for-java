/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.frontdoor.v2020_05_01;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Settings that apply to all backend pools.
 */
public class BackendPoolsSettings {
    /**
     * Whether to enforce certificate name check on HTTPS requests to all
     * backend pools. No effect on non-HTTPS requests. Possible values include:
     * 'Enabled', 'Disabled'.
     */
    @JsonProperty(value = "enforceCertificateNameCheck")
    private EnforceCertificateNameCheckEnabledState enforceCertificateNameCheck;

    /**
     * Send and receive timeout on forwarding request to the backend. When
     * timeout is reached, the request fails and returns.
     */
    @JsonProperty(value = "sendRecvTimeoutSeconds")
    private Integer sendRecvTimeoutSeconds;

    /**
     * Get whether to enforce certificate name check on HTTPS requests to all backend pools. No effect on non-HTTPS requests. Possible values include: 'Enabled', 'Disabled'.
     *
     * @return the enforceCertificateNameCheck value
     */
    public EnforceCertificateNameCheckEnabledState enforceCertificateNameCheck() {
        return this.enforceCertificateNameCheck;
    }

    /**
     * Set whether to enforce certificate name check on HTTPS requests to all backend pools. No effect on non-HTTPS requests. Possible values include: 'Enabled', 'Disabled'.
     *
     * @param enforceCertificateNameCheck the enforceCertificateNameCheck value to set
     * @return the BackendPoolsSettings object itself.
     */
    public BackendPoolsSettings withEnforceCertificateNameCheck(EnforceCertificateNameCheckEnabledState enforceCertificateNameCheck) {
        this.enforceCertificateNameCheck = enforceCertificateNameCheck;
        return this;
    }

    /**
     * Get send and receive timeout on forwarding request to the backend. When timeout is reached, the request fails and returns.
     *
     * @return the sendRecvTimeoutSeconds value
     */
    public Integer sendRecvTimeoutSeconds() {
        return this.sendRecvTimeoutSeconds;
    }

    /**
     * Set send and receive timeout on forwarding request to the backend. When timeout is reached, the request fails and returns.
     *
     * @param sendRecvTimeoutSeconds the sendRecvTimeoutSeconds value to set
     * @return the BackendPoolsSettings object itself.
     */
    public BackendPoolsSettings withSendRecvTimeoutSeconds(Integer sendRecvTimeoutSeconds) {
        this.sendRecvTimeoutSeconds = sendRecvTimeoutSeconds;
        return this;
    }

}
