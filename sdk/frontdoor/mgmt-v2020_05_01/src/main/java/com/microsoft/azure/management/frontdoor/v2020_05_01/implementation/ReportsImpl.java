/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * abc
 */

package com.microsoft.azure.management.frontdoor.v2020_05_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.frontdoor.v2020_05_01.Reports;
import rx.functions.Func1;
import rx.Observable;
import com.microsoft.azure.management.frontdoor.v2020_05_01.LatencyScorecard;
import com.microsoft.azure.management.frontdoor.v2020_05_01.LatencyScorecardAggregationInterval;
import com.microsoft.azure.management.frontdoor.v2020_05_01.Timeseries;
import org.joda.time.DateTime;
import com.microsoft.azure.management.frontdoor.v2020_05_01.TimeseriesAggregationInterval;
import com.microsoft.azure.management.frontdoor.v2020_05_01.TimeseriesType;

class ReportsImpl extends WrapperImpl<ReportsInner> implements Reports {
    private final NetworkManager manager;

    ReportsImpl(NetworkManager manager) {
        super(manager.inner().reports());
        this.manager = manager;
    }

    public NetworkManager manager() {
        return this.manager;
    }

    @Override
    public Observable<LatencyScorecard> getLatencyScorecardsAsync(String resourceGroupName, String profileName, String experimentName, LatencyScorecardAggregationInterval aggregationInterval) {
        ReportsInner client = this.inner();
        return client.getLatencyScorecardsAsync(resourceGroupName, profileName, experimentName, aggregationInterval)
        .map(new Func1<LatencyScorecardInner, LatencyScorecard>() {
            @Override
            public LatencyScorecard call(LatencyScorecardInner inner) {
                return new LatencyScorecardImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<Timeseries> getTimeseriesAsync(String resourceGroupName, String profileName, String experimentName, DateTime startDateTimeUTC, DateTime endDateTimeUTC, TimeseriesAggregationInterval aggregationInterval, TimeseriesType timeseriesType) {
        ReportsInner client = this.inner();
        return client.getTimeseriesAsync(resourceGroupName, profileName, experimentName, startDateTimeUTC, endDateTimeUTC, aggregationInterval, timeseriesType)
        .map(new Func1<TimeseriesInner, Timeseries>() {
            @Override
            public Timeseries call(TimeseriesInner inner) {
                return new TimeseriesImpl(inner, manager());
            }
        });
    }

}
