/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.frontdoor.v2020_05_01;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.arm.resources.models.Resource;
import com.microsoft.azure.arm.resources.models.GroupableResourceCore;
import com.microsoft.azure.arm.resources.models.HasResourceGroup;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.frontdoor.v2020_05_01.implementation.NetworkManager;
import com.microsoft.azure.management.frontdoor.v2020_05_01.implementation.ProfileInner;

/**
 * Type representing Profile.
 */
public interface Profile extends HasInner<ProfileInner>, Resource, GroupableResourceCore<NetworkManager, ProfileInner>, HasResourceGroup, Refreshable<Profile>, Updatable<Profile.Update>, HasManager<NetworkManager> {
    /**
     * @return the enabledState value.
     */
    State enabledState();

    /**
     * @return the etag value.
     */
    String etag();

    /**
     * @return the resourceState value.
     */
    NetworkExperimentResourceState resourceState();

    /**
     * The entirety of the Profile definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithGroup, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of Profile definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a Profile definition.
         */
        interface Blank extends GroupableResourceCore.DefinitionWithRegion<WithGroup> {
        }

        /**
         * The stage of the Profile definition allowing to specify the resource group.
         */
        interface WithGroup extends GroupableResourceCore.DefinitionStages.WithGroup<WithCreate> {
        }

        /**
         * The stage of the profile definition allowing to specify EnabledState.
         */
        interface WithEnabledState {
            /**
             * Specifies enabledState.
             * @param enabledState The state of the Experiment. Possible values include: 'Enabled', 'Disabled'
             * @return the next definition stage
             */
            WithCreate withEnabledState(State enabledState);
        }

        /**
         * The stage of the profile definition allowing to specify Etag.
         */
        interface WithEtag {
            /**
             * Specifies etag.
             * @param etag Gets a unique read-only string that changes whenever the resource is updated
             * @return the next definition stage
             */
            WithCreate withEtag(String etag);
        }

        /**
         * The stage of the profile definition allowing to specify ResourceState.
         */
        interface WithResourceState {
            /**
             * Specifies resourceState.
             * @param resourceState Resource status. Possible values include: 'Creating', 'Enabling', 'Enabled', 'Disabling', 'Disabled', 'Deleting'
             * @return the next definition stage
             */
            WithCreate withResourceState(NetworkExperimentResourceState resourceState);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<Profile>, Resource.DefinitionWithTags<WithCreate>, DefinitionStages.WithEnabledState, DefinitionStages.WithEtag, DefinitionStages.WithResourceState {
        }
    }
    /**
     * The template for a Profile update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<Profile>, Resource.UpdateWithTags<Update>, UpdateStages.WithEnabledState {
    }

    /**
     * Grouping of Profile update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the profile update allowing to specify EnabledState.
         */
        interface WithEnabledState {
            /**
             * Specifies enabledState.
             * @param enabledState The enabled state of the Profile. Possible values include: 'Enabled', 'Disabled'
             * @return the next update stage
             */
            Update withEnabledState(State enabledState);
        }

    }
}
