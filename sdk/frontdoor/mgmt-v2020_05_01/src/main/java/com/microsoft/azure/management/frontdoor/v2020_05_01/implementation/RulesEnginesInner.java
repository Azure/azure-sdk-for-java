/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.frontdoor.v2020_05_01.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.frontdoor.v2020_05_01.ErrorResponseException;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in RulesEngines.
 */
public class RulesEnginesInner {
    /** The Retrofit service to perform REST calls. */
    private RulesEnginesService service;
    /** The service client containing this operation class. */
    private FrontDoorManagementClientImpl client;

    /**
     * Initializes an instance of RulesEnginesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public RulesEnginesInner(Retrofit retrofit, FrontDoorManagementClientImpl client) {
        this.service = retrofit.create(RulesEnginesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for RulesEngines to be
     * used by Retrofit to perform actually REST calls.
     */
    interface RulesEnginesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.frontdoor.v2020_05_01.RulesEngines listByFrontDoor" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors/{frontDoorName}/rulesEngines")
        Observable<Response<ResponseBody>> listByFrontDoor(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("frontDoorName") String frontDoorName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.frontdoor.v2020_05_01.RulesEngines get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors/{frontDoorName}/rulesEngines/{rulesEngineName}")
        Observable<Response<ResponseBody>> get(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("frontDoorName") String frontDoorName, @Path("rulesEngineName") String rulesEngineName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.frontdoor.v2020_05_01.RulesEngines createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors/{frontDoorName}/rulesEngines/{rulesEngineName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("frontDoorName") String frontDoorName, @Path("rulesEngineName") String rulesEngineName, @Body RulesEngineInner rulesEngineParameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.frontdoor.v2020_05_01.RulesEngines beginCreateOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors/{frontDoorName}/rulesEngines/{rulesEngineName}")
        Observable<Response<ResponseBody>> beginCreateOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("frontDoorName") String frontDoorName, @Path("rulesEngineName") String rulesEngineName, @Body RulesEngineInner rulesEngineParameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.frontdoor.v2020_05_01.RulesEngines delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors/{frontDoorName}/rulesEngines/{rulesEngineName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("frontDoorName") String frontDoorName, @Path("rulesEngineName") String rulesEngineName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.frontdoor.v2020_05_01.RulesEngines beginDelete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors/{frontDoorName}/rulesEngines/{rulesEngineName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginDelete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("frontDoorName") String frontDoorName, @Path("rulesEngineName") String rulesEngineName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.frontdoor.v2020_05_01.RulesEngines listByFrontDoorNext" })
        @GET
        Observable<Response<ResponseBody>> listByFrontDoorNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Lists all of the Rules Engine Configurations within a Front Door.
     *
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param frontDoorName Name of the Front Door which is globally unique.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;RulesEngineInner&gt; object if successful.
     */
    public PagedList<RulesEngineInner> listByFrontDoor(final String resourceGroupName, final String frontDoorName) {
        ServiceResponse<Page<RulesEngineInner>> response = listByFrontDoorSinglePageAsync(resourceGroupName, frontDoorName).toBlocking().single();
        return new PagedList<RulesEngineInner>(response.body()) {
            @Override
            public Page<RulesEngineInner> nextPage(String nextPageLink) {
                return listByFrontDoorNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists all of the Rules Engine Configurations within a Front Door.
     *
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param frontDoorName Name of the Front Door which is globally unique.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<RulesEngineInner>> listByFrontDoorAsync(final String resourceGroupName, final String frontDoorName, final ListOperationCallback<RulesEngineInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByFrontDoorSinglePageAsync(resourceGroupName, frontDoorName),
            new Func1<String, Observable<ServiceResponse<Page<RulesEngineInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RulesEngineInner>>> call(String nextPageLink) {
                    return listByFrontDoorNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists all of the Rules Engine Configurations within a Front Door.
     *
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param frontDoorName Name of the Front Door which is globally unique.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RulesEngineInner&gt; object
     */
    public Observable<Page<RulesEngineInner>> listByFrontDoorAsync(final String resourceGroupName, final String frontDoorName) {
        return listByFrontDoorWithServiceResponseAsync(resourceGroupName, frontDoorName)
            .map(new Func1<ServiceResponse<Page<RulesEngineInner>>, Page<RulesEngineInner>>() {
                @Override
                public Page<RulesEngineInner> call(ServiceResponse<Page<RulesEngineInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists all of the Rules Engine Configurations within a Front Door.
     *
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param frontDoorName Name of the Front Door which is globally unique.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RulesEngineInner&gt; object
     */
    public Observable<ServiceResponse<Page<RulesEngineInner>>> listByFrontDoorWithServiceResponseAsync(final String resourceGroupName, final String frontDoorName) {
        return listByFrontDoorSinglePageAsync(resourceGroupName, frontDoorName)
            .concatMap(new Func1<ServiceResponse<Page<RulesEngineInner>>, Observable<ServiceResponse<Page<RulesEngineInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RulesEngineInner>>> call(ServiceResponse<Page<RulesEngineInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByFrontDoorNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists all of the Rules Engine Configurations within a Front Door.
     *
    ServiceResponse<PageImpl<RulesEngineInner>> * @param resourceGroupName Name of the Resource group within the Azure subscription.
    ServiceResponse<PageImpl<RulesEngineInner>> * @param frontDoorName Name of the Front Door which is globally unique.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;RulesEngineInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<RulesEngineInner>>> listByFrontDoorSinglePageAsync(final String resourceGroupName, final String frontDoorName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (frontDoorName == null) {
            throw new IllegalArgumentException("Parameter frontDoorName is required and cannot be null.");
        }
        final String apiVersion = "2020-05-01";
        return service.listByFrontDoor(this.client.subscriptionId(), resourceGroupName, frontDoorName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<RulesEngineInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RulesEngineInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<RulesEngineInner>> result = listByFrontDoorDelegate(response);
                        return Observable.just(new ServiceResponse<Page<RulesEngineInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<RulesEngineInner>> listByFrontDoorDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<RulesEngineInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<RulesEngineInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets a Rules Engine Configuration with the specified name within the specified Front Door.
     *
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param frontDoorName Name of the Front Door which is globally unique.
     * @param rulesEngineName Name of the Rules Engine which is unique within the Front Door.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RulesEngineInner object if successful.
     */
    public RulesEngineInner get(String resourceGroupName, String frontDoorName, String rulesEngineName) {
        return getWithServiceResponseAsync(resourceGroupName, frontDoorName, rulesEngineName).toBlocking().single().body();
    }

    /**
     * Gets a Rules Engine Configuration with the specified name within the specified Front Door.
     *
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param frontDoorName Name of the Front Door which is globally unique.
     * @param rulesEngineName Name of the Rules Engine which is unique within the Front Door.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<RulesEngineInner> getAsync(String resourceGroupName, String frontDoorName, String rulesEngineName, final ServiceCallback<RulesEngineInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroupName, frontDoorName, rulesEngineName), serviceCallback);
    }

    /**
     * Gets a Rules Engine Configuration with the specified name within the specified Front Door.
     *
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param frontDoorName Name of the Front Door which is globally unique.
     * @param rulesEngineName Name of the Rules Engine which is unique within the Front Door.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RulesEngineInner object
     */
    public Observable<RulesEngineInner> getAsync(String resourceGroupName, String frontDoorName, String rulesEngineName) {
        return getWithServiceResponseAsync(resourceGroupName, frontDoorName, rulesEngineName).map(new Func1<ServiceResponse<RulesEngineInner>, RulesEngineInner>() {
            @Override
            public RulesEngineInner call(ServiceResponse<RulesEngineInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets a Rules Engine Configuration with the specified name within the specified Front Door.
     *
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param frontDoorName Name of the Front Door which is globally unique.
     * @param rulesEngineName Name of the Rules Engine which is unique within the Front Door.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RulesEngineInner object
     */
    public Observable<ServiceResponse<RulesEngineInner>> getWithServiceResponseAsync(String resourceGroupName, String frontDoorName, String rulesEngineName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (frontDoorName == null) {
            throw new IllegalArgumentException("Parameter frontDoorName is required and cannot be null.");
        }
        if (rulesEngineName == null) {
            throw new IllegalArgumentException("Parameter rulesEngineName is required and cannot be null.");
        }
        final String apiVersion = "2020-05-01";
        return service.get(this.client.subscriptionId(), resourceGroupName, frontDoorName, rulesEngineName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<RulesEngineInner>>>() {
                @Override
                public Observable<ServiceResponse<RulesEngineInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<RulesEngineInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<RulesEngineInner> getDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<RulesEngineInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<RulesEngineInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Creates a new Rules Engine Configuration with the specified name within the specified Front Door.
     *
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param frontDoorName Name of the Front Door which is globally unique.
     * @param rulesEngineName Name of the Rules Engine which is unique within the Front Door.
     * @param rulesEngineParameters Rules Engine Configuration properties needed to create a new Rules Engine Configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RulesEngineInner object if successful.
     */
    public RulesEngineInner createOrUpdate(String resourceGroupName, String frontDoorName, String rulesEngineName, RulesEngineInner rulesEngineParameters) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, frontDoorName, rulesEngineName, rulesEngineParameters).toBlocking().last().body();
    }

    /**
     * Creates a new Rules Engine Configuration with the specified name within the specified Front Door.
     *
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param frontDoorName Name of the Front Door which is globally unique.
     * @param rulesEngineName Name of the Rules Engine which is unique within the Front Door.
     * @param rulesEngineParameters Rules Engine Configuration properties needed to create a new Rules Engine Configuration.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<RulesEngineInner> createOrUpdateAsync(String resourceGroupName, String frontDoorName, String rulesEngineName, RulesEngineInner rulesEngineParameters, final ServiceCallback<RulesEngineInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, frontDoorName, rulesEngineName, rulesEngineParameters), serviceCallback);
    }

    /**
     * Creates a new Rules Engine Configuration with the specified name within the specified Front Door.
     *
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param frontDoorName Name of the Front Door which is globally unique.
     * @param rulesEngineName Name of the Rules Engine which is unique within the Front Door.
     * @param rulesEngineParameters Rules Engine Configuration properties needed to create a new Rules Engine Configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<RulesEngineInner> createOrUpdateAsync(String resourceGroupName, String frontDoorName, String rulesEngineName, RulesEngineInner rulesEngineParameters) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, frontDoorName, rulesEngineName, rulesEngineParameters).map(new Func1<ServiceResponse<RulesEngineInner>, RulesEngineInner>() {
            @Override
            public RulesEngineInner call(ServiceResponse<RulesEngineInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates a new Rules Engine Configuration with the specified name within the specified Front Door.
     *
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param frontDoorName Name of the Front Door which is globally unique.
     * @param rulesEngineName Name of the Rules Engine which is unique within the Front Door.
     * @param rulesEngineParameters Rules Engine Configuration properties needed to create a new Rules Engine Configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<RulesEngineInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String frontDoorName, String rulesEngineName, RulesEngineInner rulesEngineParameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (frontDoorName == null) {
            throw new IllegalArgumentException("Parameter frontDoorName is required and cannot be null.");
        }
        if (rulesEngineName == null) {
            throw new IllegalArgumentException("Parameter rulesEngineName is required and cannot be null.");
        }
        if (rulesEngineParameters == null) {
            throw new IllegalArgumentException("Parameter rulesEngineParameters is required and cannot be null.");
        }
        Validator.validate(rulesEngineParameters);
        final String apiVersion = "2020-05-01";
        Observable<Response<ResponseBody>> observable = service.createOrUpdate(this.client.subscriptionId(), resourceGroupName, frontDoorName, rulesEngineName, rulesEngineParameters, apiVersion, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<RulesEngineInner>() { }.getType());
    }

    /**
     * Creates a new Rules Engine Configuration with the specified name within the specified Front Door.
     *
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param frontDoorName Name of the Front Door which is globally unique.
     * @param rulesEngineName Name of the Rules Engine which is unique within the Front Door.
     * @param rulesEngineParameters Rules Engine Configuration properties needed to create a new Rules Engine Configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RulesEngineInner object if successful.
     */
    public RulesEngineInner beginCreateOrUpdate(String resourceGroupName, String frontDoorName, String rulesEngineName, RulesEngineInner rulesEngineParameters) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, frontDoorName, rulesEngineName, rulesEngineParameters).toBlocking().single().body();
    }

    /**
     * Creates a new Rules Engine Configuration with the specified name within the specified Front Door.
     *
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param frontDoorName Name of the Front Door which is globally unique.
     * @param rulesEngineName Name of the Rules Engine which is unique within the Front Door.
     * @param rulesEngineParameters Rules Engine Configuration properties needed to create a new Rules Engine Configuration.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<RulesEngineInner> beginCreateOrUpdateAsync(String resourceGroupName, String frontDoorName, String rulesEngineName, RulesEngineInner rulesEngineParameters, final ServiceCallback<RulesEngineInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, frontDoorName, rulesEngineName, rulesEngineParameters), serviceCallback);
    }

    /**
     * Creates a new Rules Engine Configuration with the specified name within the specified Front Door.
     *
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param frontDoorName Name of the Front Door which is globally unique.
     * @param rulesEngineName Name of the Rules Engine which is unique within the Front Door.
     * @param rulesEngineParameters Rules Engine Configuration properties needed to create a new Rules Engine Configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RulesEngineInner object
     */
    public Observable<RulesEngineInner> beginCreateOrUpdateAsync(String resourceGroupName, String frontDoorName, String rulesEngineName, RulesEngineInner rulesEngineParameters) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, frontDoorName, rulesEngineName, rulesEngineParameters).map(new Func1<ServiceResponse<RulesEngineInner>, RulesEngineInner>() {
            @Override
            public RulesEngineInner call(ServiceResponse<RulesEngineInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates a new Rules Engine Configuration with the specified name within the specified Front Door.
     *
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param frontDoorName Name of the Front Door which is globally unique.
     * @param rulesEngineName Name of the Rules Engine which is unique within the Front Door.
     * @param rulesEngineParameters Rules Engine Configuration properties needed to create a new Rules Engine Configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RulesEngineInner object
     */
    public Observable<ServiceResponse<RulesEngineInner>> beginCreateOrUpdateWithServiceResponseAsync(String resourceGroupName, String frontDoorName, String rulesEngineName, RulesEngineInner rulesEngineParameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (frontDoorName == null) {
            throw new IllegalArgumentException("Parameter frontDoorName is required and cannot be null.");
        }
        if (rulesEngineName == null) {
            throw new IllegalArgumentException("Parameter rulesEngineName is required and cannot be null.");
        }
        if (rulesEngineParameters == null) {
            throw new IllegalArgumentException("Parameter rulesEngineParameters is required and cannot be null.");
        }
        Validator.validate(rulesEngineParameters);
        final String apiVersion = "2020-05-01";
        return service.beginCreateOrUpdate(this.client.subscriptionId(), resourceGroupName, frontDoorName, rulesEngineName, rulesEngineParameters, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<RulesEngineInner>>>() {
                @Override
                public Observable<ServiceResponse<RulesEngineInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<RulesEngineInner> clientResponse = beginCreateOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<RulesEngineInner> beginCreateOrUpdateDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<RulesEngineInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<RulesEngineInner>() { }.getType())
                .register(201, new TypeToken<RulesEngineInner>() { }.getType())
                .register(202, new TypeToken<RulesEngineInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Deletes an existing Rules Engine Configuration with the specified parameters.
     *
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param frontDoorName Name of the Front Door which is globally unique.
     * @param rulesEngineName Name of the Rules Engine which is unique within the Front Door.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String frontDoorName, String rulesEngineName) {
        deleteWithServiceResponseAsync(resourceGroupName, frontDoorName, rulesEngineName).toBlocking().last().body();
    }

    /**
     * Deletes an existing Rules Engine Configuration with the specified parameters.
     *
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param frontDoorName Name of the Front Door which is globally unique.
     * @param rulesEngineName Name of the Rules Engine which is unique within the Front Door.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String frontDoorName, String rulesEngineName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, frontDoorName, rulesEngineName), serviceCallback);
    }

    /**
     * Deletes an existing Rules Engine Configuration with the specified parameters.
     *
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param frontDoorName Name of the Front Door which is globally unique.
     * @param rulesEngineName Name of the Rules Engine which is unique within the Front Door.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String frontDoorName, String rulesEngineName) {
        return deleteWithServiceResponseAsync(resourceGroupName, frontDoorName, rulesEngineName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes an existing Rules Engine Configuration with the specified parameters.
     *
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param frontDoorName Name of the Front Door which is globally unique.
     * @param rulesEngineName Name of the Rules Engine which is unique within the Front Door.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String frontDoorName, String rulesEngineName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (frontDoorName == null) {
            throw new IllegalArgumentException("Parameter frontDoorName is required and cannot be null.");
        }
        if (rulesEngineName == null) {
            throw new IllegalArgumentException("Parameter rulesEngineName is required and cannot be null.");
        }
        final String apiVersion = "2020-05-01";
        Observable<Response<ResponseBody>> observable = service.delete(this.client.subscriptionId(), resourceGroupName, frontDoorName, rulesEngineName, apiVersion, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Deletes an existing Rules Engine Configuration with the specified parameters.
     *
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param frontDoorName Name of the Front Door which is globally unique.
     * @param rulesEngineName Name of the Rules Engine which is unique within the Front Door.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDelete(String resourceGroupName, String frontDoorName, String rulesEngineName) {
        beginDeleteWithServiceResponseAsync(resourceGroupName, frontDoorName, rulesEngineName).toBlocking().single().body();
    }

    /**
     * Deletes an existing Rules Engine Configuration with the specified parameters.
     *
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param frontDoorName Name of the Front Door which is globally unique.
     * @param rulesEngineName Name of the Rules Engine which is unique within the Front Door.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDeleteAsync(String resourceGroupName, String frontDoorName, String rulesEngineName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeleteWithServiceResponseAsync(resourceGroupName, frontDoorName, rulesEngineName), serviceCallback);
    }

    /**
     * Deletes an existing Rules Engine Configuration with the specified parameters.
     *
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param frontDoorName Name of the Front Door which is globally unique.
     * @param rulesEngineName Name of the Rules Engine which is unique within the Front Door.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginDeleteAsync(String resourceGroupName, String frontDoorName, String rulesEngineName) {
        return beginDeleteWithServiceResponseAsync(resourceGroupName, frontDoorName, rulesEngineName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes an existing Rules Engine Configuration with the specified parameters.
     *
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param frontDoorName Name of the Front Door which is globally unique.
     * @param rulesEngineName Name of the Rules Engine which is unique within the Front Door.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginDeleteWithServiceResponseAsync(String resourceGroupName, String frontDoorName, String rulesEngineName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (frontDoorName == null) {
            throw new IllegalArgumentException("Parameter frontDoorName is required and cannot be null.");
        }
        if (rulesEngineName == null) {
            throw new IllegalArgumentException("Parameter rulesEngineName is required and cannot be null.");
        }
        final String apiVersion = "2020-05-01";
        return service.beginDelete(this.client.subscriptionId(), resourceGroupName, frontDoorName, rulesEngineName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginDeleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginDeleteDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists all of the Rules Engine Configurations within a Front Door.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;RulesEngineInner&gt; object if successful.
     */
    public PagedList<RulesEngineInner> listByFrontDoorNext(final String nextPageLink) {
        ServiceResponse<Page<RulesEngineInner>> response = listByFrontDoorNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<RulesEngineInner>(response.body()) {
            @Override
            public Page<RulesEngineInner> nextPage(String nextPageLink) {
                return listByFrontDoorNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists all of the Rules Engine Configurations within a Front Door.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<RulesEngineInner>> listByFrontDoorNextAsync(final String nextPageLink, final ServiceFuture<List<RulesEngineInner>> serviceFuture, final ListOperationCallback<RulesEngineInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByFrontDoorNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<RulesEngineInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RulesEngineInner>>> call(String nextPageLink) {
                    return listByFrontDoorNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists all of the Rules Engine Configurations within a Front Door.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RulesEngineInner&gt; object
     */
    public Observable<Page<RulesEngineInner>> listByFrontDoorNextAsync(final String nextPageLink) {
        return listByFrontDoorNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<RulesEngineInner>>, Page<RulesEngineInner>>() {
                @Override
                public Page<RulesEngineInner> call(ServiceResponse<Page<RulesEngineInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists all of the Rules Engine Configurations within a Front Door.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RulesEngineInner&gt; object
     */
    public Observable<ServiceResponse<Page<RulesEngineInner>>> listByFrontDoorNextWithServiceResponseAsync(final String nextPageLink) {
        return listByFrontDoorNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<RulesEngineInner>>, Observable<ServiceResponse<Page<RulesEngineInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RulesEngineInner>>> call(ServiceResponse<Page<RulesEngineInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByFrontDoorNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists all of the Rules Engine Configurations within a Front Door.
     *
    ServiceResponse<PageImpl<RulesEngineInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;RulesEngineInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<RulesEngineInner>>> listByFrontDoorNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByFrontDoorNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<RulesEngineInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RulesEngineInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<RulesEngineInner>> result = listByFrontDoorNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<RulesEngineInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<RulesEngineInner>> listByFrontDoorNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<RulesEngineInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<RulesEngineInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
