// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hardwaresecuritymodules.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.exception.ManagementError;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Backup and Restore operation common properties.
 */
@Fluent
public class BackupRestoreBaseResultProperties implements JsonSerializable<BackupRestoreBaseResultProperties> {
    /*
     * Status of the backup/restore operation
     */
    private BackupRestoreOperationStatus status;

    /*
     * The status details of backup/restore operation
     */
    private String statusDetails;

    /*
     * Error encountered, if any, during the backup/restore operation.
     */
    private ManagementError error;

    /*
     * The start time of the backup/restore operation in UTC
     */
    private OffsetDateTime startTime;

    /*
     * The end time of the backup/restore operation in UTC
     */
    private OffsetDateTime endTime;

    /*
     * Identifier for the backup/restore operation.
     */
    private String jobId;

    /**
     * Creates an instance of BackupRestoreBaseResultProperties class.
     */
    public BackupRestoreBaseResultProperties() {
    }

    /**
     * Get the status property: Status of the backup/restore operation.
     * 
     * @return the status value.
     */
    public BackupRestoreOperationStatus status() {
        return this.status;
    }

    /**
     * Set the status property: Status of the backup/restore operation.
     * 
     * @param status the status value to set.
     * @return the BackupRestoreBaseResultProperties object itself.
     */
    BackupRestoreBaseResultProperties withStatus(BackupRestoreOperationStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Get the statusDetails property: The status details of backup/restore operation.
     * 
     * @return the statusDetails value.
     */
    public String statusDetails() {
        return this.statusDetails;
    }

    /**
     * Set the statusDetails property: The status details of backup/restore operation.
     * 
     * @param statusDetails the statusDetails value to set.
     * @return the BackupRestoreBaseResultProperties object itself.
     */
    public BackupRestoreBaseResultProperties withStatusDetails(String statusDetails) {
        this.statusDetails = statusDetails;
        return this;
    }

    /**
     * Get the error property: Error encountered, if any, during the backup/restore operation.
     * 
     * @return the error value.
     */
    public ManagementError error() {
        return this.error;
    }

    /**
     * Set the error property: Error encountered, if any, during the backup/restore operation.
     * 
     * @param error the error value to set.
     * @return the BackupRestoreBaseResultProperties object itself.
     */
    public BackupRestoreBaseResultProperties withError(ManagementError error) {
        this.error = error;
        return this;
    }

    /**
     * Get the startTime property: The start time of the backup/restore operation in UTC.
     * 
     * @return the startTime value.
     */
    public OffsetDateTime startTime() {
        return this.startTime;
    }

    /**
     * Set the startTime property: The start time of the backup/restore operation in UTC.
     * 
     * @param startTime the startTime value to set.
     * @return the BackupRestoreBaseResultProperties object itself.
     */
    BackupRestoreBaseResultProperties withStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }

    /**
     * Get the endTime property: The end time of the backup/restore operation in UTC.
     * 
     * @return the endTime value.
     */
    public OffsetDateTime endTime() {
        return this.endTime;
    }

    /**
     * Set the endTime property: The end time of the backup/restore operation in UTC.
     * 
     * @param endTime the endTime value to set.
     * @return the BackupRestoreBaseResultProperties object itself.
     */
    BackupRestoreBaseResultProperties withEndTime(OffsetDateTime endTime) {
        this.endTime = endTime;
        return this;
    }

    /**
     * Get the jobId property: Identifier for the backup/restore operation.
     * 
     * @return the jobId value.
     */
    public String jobId() {
        return this.jobId;
    }

    /**
     * Set the jobId property: Identifier for the backup/restore operation.
     * 
     * @param jobId the jobId value to set.
     * @return the BackupRestoreBaseResultProperties object itself.
     */
    public BackupRestoreBaseResultProperties withJobId(String jobId) {
        this.jobId = jobId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("statusDetails", this.statusDetails);
        jsonWriter.writeJsonField("error", this.error);
        jsonWriter.writeStringField("jobId", this.jobId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BackupRestoreBaseResultProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BackupRestoreBaseResultProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the BackupRestoreBaseResultProperties.
     */
    public static BackupRestoreBaseResultProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BackupRestoreBaseResultProperties deserializedBackupRestoreBaseResultProperties
                = new BackupRestoreBaseResultProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("status".equals(fieldName)) {
                    deserializedBackupRestoreBaseResultProperties.status
                        = BackupRestoreOperationStatus.fromString(reader.getString());
                } else if ("statusDetails".equals(fieldName)) {
                    deserializedBackupRestoreBaseResultProperties.statusDetails = reader.getString();
                } else if ("error".equals(fieldName)) {
                    deserializedBackupRestoreBaseResultProperties.error = ManagementError.fromJson(reader);
                } else if ("startTime".equals(fieldName)) {
                    deserializedBackupRestoreBaseResultProperties.startTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("endTime".equals(fieldName)) {
                    deserializedBackupRestoreBaseResultProperties.endTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("jobId".equals(fieldName)) {
                    deserializedBackupRestoreBaseResultProperties.jobId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBackupRestoreBaseResultProperties;
        });
    }
}
