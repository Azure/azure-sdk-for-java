// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.hardwaresecuritymodules.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.management.exception.ManagementError;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Properties of the Cloud HSM Cluster.
 */
@Immutable
public final class BackupResultProperties extends BackupRestoreBaseResultProperties {
    /*
     * The Azure blob storage container Uri which contains the backup
     */
    private String azureStorageBlobContainerUri;

    /*
     * The ID of the backup.
     */
    private String backupId;

    /*
     * Identifier for the backup/restore operation.
     */
    private String jobId;

    /*
     * The end time of the backup/restore operation in UTC
     */
    private OffsetDateTime endTime;

    /*
     * The start time of the backup/restore operation in UTC
     */
    private OffsetDateTime startTime;

    /*
     * Error encountered, if any, during the backup/restore operation.
     */
    private ManagementError error;

    /*
     * The status details of backup/restore operation
     */
    private String statusDetails;

    /*
     * Status of the backup/restore operation
     */
    private BackupRestoreOperationStatus status;

    /**
     * Creates an instance of BackupResultProperties class.
     */
    private BackupResultProperties() {
    }

    /**
     * Get the azureStorageBlobContainerUri property: The Azure blob storage container Uri which contains the backup.
     * 
     * @return the azureStorageBlobContainerUri value.
     */
    public String azureStorageBlobContainerUri() {
        return this.azureStorageBlobContainerUri;
    }

    /**
     * Get the backupId property: The ID of the backup.
     * 
     * @return the backupId value.
     */
    public String backupId() {
        return this.backupId;
    }

    /**
     * Get the jobId property: Identifier for the backup/restore operation.
     * 
     * @return the jobId value.
     */
    @Override
    public String jobId() {
        return this.jobId;
    }

    /**
     * Get the endTime property: The end time of the backup/restore operation in UTC.
     * 
     * @return the endTime value.
     */
    @Override
    public OffsetDateTime endTime() {
        return this.endTime;
    }

    /**
     * Get the startTime property: The start time of the backup/restore operation in UTC.
     * 
     * @return the startTime value.
     */
    @Override
    public OffsetDateTime startTime() {
        return this.startTime;
    }

    /**
     * Get the error property: Error encountered, if any, during the backup/restore operation.
     * 
     * @return the error value.
     */
    @Override
    public ManagementError error() {
        return this.error;
    }

    /**
     * Get the statusDetails property: The status details of backup/restore operation.
     * 
     * @return the statusDetails value.
     */
    @Override
    public String statusDetails() {
        return this.statusDetails;
    }

    /**
     * Get the status property: Status of the backup/restore operation.
     * 
     * @return the status value.
     */
    @Override
    public BackupRestoreOperationStatus status() {
        return this.status;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("statusDetails", statusDetails());
        jsonWriter.writeJsonField("error", error());
        jsonWriter.writeStringField("jobId", jobId());
        jsonWriter.writeStringField("azureStorageBlobContainerUri", this.azureStorageBlobContainerUri);
        jsonWriter.writeStringField("backupId", this.backupId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BackupResultProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BackupResultProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the BackupResultProperties.
     */
    public static BackupResultProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BackupResultProperties deserializedBackupResultProperties = new BackupResultProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("status".equals(fieldName)) {
                    deserializedBackupResultProperties.status
                        = BackupRestoreOperationStatus.fromString(reader.getString());
                } else if ("statusDetails".equals(fieldName)) {
                    deserializedBackupResultProperties.statusDetails = reader.getString();
                } else if ("error".equals(fieldName)) {
                    deserializedBackupResultProperties.error = ManagementError.fromJson(reader);
                } else if ("startTime".equals(fieldName)) {
                    deserializedBackupResultProperties.startTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("endTime".equals(fieldName)) {
                    deserializedBackupResultProperties.endTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("jobId".equals(fieldName)) {
                    deserializedBackupResultProperties.jobId = reader.getString();
                } else if ("azureStorageBlobContainerUri".equals(fieldName)) {
                    deserializedBackupResultProperties.azureStorageBlobContainerUri = reader.getString();
                } else if ("backupId".equals(fieldName)) {
                    deserializedBackupResultProperties.backupId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBackupResultProperties;
        });
    }
}
