// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hardwaresecuritymodules.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Cloud Hsm Cluster restore information.
 */
@Fluent
public final class RestoreRequestProperties extends BackupRestoreRequestBaseProperties {
    /*
     * An autogenerated unique string ID for labeling the backup. It contains both a UUID and a date timestamp.
     */
    private String backupId;

    /**
     * Creates an instance of RestoreRequestProperties class.
     */
    public RestoreRequestProperties() {
    }

    /**
     * Get the backupId property: An autogenerated unique string ID for labeling the backup. It contains both a UUID and
     * a date timestamp.
     * 
     * @return the backupId value.
     */
    public String backupId() {
        return this.backupId;
    }

    /**
     * Set the backupId property: An autogenerated unique string ID for labeling the backup. It contains both a UUID and
     * a date timestamp.
     * 
     * @param backupId the backupId value to set.
     * @return the RestoreRequestProperties object itself.
     */
    public RestoreRequestProperties withBackupId(String backupId) {
        this.backupId = backupId;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RestoreRequestProperties withAzureStorageBlobContainerUri(String azureStorageBlobContainerUri) {
        super.withAzureStorageBlobContainerUri(azureStorageBlobContainerUri);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RestoreRequestProperties withToken(String token) {
        super.withToken(token);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (backupId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property backupId in model RestoreRequestProperties"));
        }
        if (azureStorageBlobContainerUri() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property azureStorageBlobContainerUri in model RestoreRequestProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(RestoreRequestProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("azureStorageBlobContainerUri", azureStorageBlobContainerUri());
        jsonWriter.writeStringField("token", token());
        jsonWriter.writeStringField("backupId", this.backupId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RestoreRequestProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RestoreRequestProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RestoreRequestProperties.
     */
    public static RestoreRequestProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RestoreRequestProperties deserializedRestoreRequestProperties = new RestoreRequestProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("azureStorageBlobContainerUri".equals(fieldName)) {
                    deserializedRestoreRequestProperties.withAzureStorageBlobContainerUri(reader.getString());
                } else if ("token".equals(fieldName)) {
                    deserializedRestoreRequestProperties.withToken(reader.getString());
                } else if ("backupId".equals(fieldName)) {
                    deserializedRestoreRequestProperties.backupId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRestoreRequestProperties;
        });
    }
}
