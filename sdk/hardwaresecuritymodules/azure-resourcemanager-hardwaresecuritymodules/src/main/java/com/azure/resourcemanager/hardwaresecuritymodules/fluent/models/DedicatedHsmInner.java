// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.hardwaresecuritymodules.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.hardwaresecuritymodules.models.JsonWebKeyType;
import com.azure.resourcemanager.hardwaresecuritymodules.models.NetworkProfile;
import com.azure.resourcemanager.hardwaresecuritymodules.models.Sku;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Resource information with extended details.
 */
@Fluent
public final class DedicatedHsmInner extends Resource {
    /*
     * SKU details
     */
    private Sku sku;

    /*
     * The availability zones.
     */
    private List<String> zones;

    /*
     * Properties of the dedicated HSM
     */
    private DedicatedHsmProperties innerProperties = new DedicatedHsmProperties();

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of DedicatedHsmInner class.
     */
    public DedicatedHsmInner() {
    }

    /**
     * Get the sku property: SKU details.
     * 
     * @return the sku value.
     */
    public Sku sku() {
        return this.sku;
    }

    /**
     * Set the sku property: SKU details.
     * 
     * @param sku the sku value to set.
     * @return the DedicatedHsmInner object itself.
     */
    public DedicatedHsmInner withSku(Sku sku) {
        this.sku = sku;
        return this;
    }

    /**
     * Get the zones property: The availability zones.
     * 
     * @return the zones value.
     */
    public List<String> zones() {
        return this.zones;
    }

    /**
     * Set the zones property: The availability zones.
     * 
     * @param zones the zones value to set.
     * @return the DedicatedHsmInner object itself.
     */
    public DedicatedHsmInner withZones(List<String> zones) {
        this.zones = zones;
        return this;
    }

    /**
     * Get the innerProperties property: Properties of the dedicated HSM.
     * 
     * @return the innerProperties value.
     */
    private DedicatedHsmProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DedicatedHsmInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DedicatedHsmInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the networkProfile property: Specifies the network interfaces of the dedicated hsm.
     * 
     * @return the networkProfile value.
     */
    public NetworkProfile networkProfile() {
        return this.innerProperties() == null ? null : this.innerProperties().networkProfile();
    }

    /**
     * Set the networkProfile property: Specifies the network interfaces of the dedicated hsm.
     * 
     * @param networkProfile the networkProfile value to set.
     * @return the DedicatedHsmInner object itself.
     */
    public DedicatedHsmInner withNetworkProfile(NetworkProfile networkProfile) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DedicatedHsmProperties();
        }
        this.innerProperties().withNetworkProfile(networkProfile);
        return this;
    }

    /**
     * Get the managementNetworkProfile property: Specifies the management network interfaces of the dedicated hsm.
     * 
     * @return the managementNetworkProfile value.
     */
    public NetworkProfile managementNetworkProfile() {
        return this.innerProperties() == null ? null : this.innerProperties().managementNetworkProfile();
    }

    /**
     * Set the managementNetworkProfile property: Specifies the management network interfaces of the dedicated hsm.
     * 
     * @param managementNetworkProfile the managementNetworkProfile value to set.
     * @return the DedicatedHsmInner object itself.
     */
    public DedicatedHsmInner withManagementNetworkProfile(NetworkProfile managementNetworkProfile) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DedicatedHsmProperties();
        }
        this.innerProperties().withManagementNetworkProfile(managementNetworkProfile);
        return this;
    }

    /**
     * Get the stampId property: This field will be used when RP does not support Availability zones.
     * 
     * @return the stampId value.
     */
    public String stampId() {
        return this.innerProperties() == null ? null : this.innerProperties().stampId();
    }

    /**
     * Set the stampId property: This field will be used when RP does not support Availability zones.
     * 
     * @param stampId the stampId value to set.
     * @return the DedicatedHsmInner object itself.
     */
    public DedicatedHsmInner withStampId(String stampId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DedicatedHsmProperties();
        }
        this.innerProperties().withStampId(stampId);
        return this;
    }

    /**
     * Get the statusMessage property: Resource Status Message.
     * 
     * @return the statusMessage value.
     */
    public String statusMessage() {
        return this.innerProperties() == null ? null : this.innerProperties().statusMessage();
    }

    /**
     * Get the provisioningState property: Provisioning state.
     * 
     * @return the provisioningState value.
     */
    public JsonWebKeyType provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (sku() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property sku in model DedicatedHsmInner"));
        } else {
            sku().validate();
        }
        if (innerProperties() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property innerProperties in model DedicatedHsmInner"));
        } else {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DedicatedHsmInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("location", location());
        jsonWriter.writeMapField("tags", tags(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("sku", this.sku);
        jsonWriter.writeJsonField("properties", this.innerProperties);
        jsonWriter.writeArrayField("zones", this.zones, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DedicatedHsmInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DedicatedHsmInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DedicatedHsmInner.
     */
    public static DedicatedHsmInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DedicatedHsmInner deserializedDedicatedHsmInner = new DedicatedHsmInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedDedicatedHsmInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedDedicatedHsmInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedDedicatedHsmInner.type = reader.getString();
                } else if ("location".equals(fieldName)) {
                    deserializedDedicatedHsmInner.withLocation(reader.getString());
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedDedicatedHsmInner.withTags(tags);
                } else if ("sku".equals(fieldName)) {
                    deserializedDedicatedHsmInner.sku = Sku.fromJson(reader);
                } else if ("properties".equals(fieldName)) {
                    deserializedDedicatedHsmInner.innerProperties = DedicatedHsmProperties.fromJson(reader);
                } else if ("zones".equals(fieldName)) {
                    List<String> zones = reader.readArray(reader1 -> reader1.getString());
                    deserializedDedicatedHsmInner.zones = zones;
                } else if ("systemData".equals(fieldName)) {
                    deserializedDedicatedHsmInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDedicatedHsmInner;
        });
    }
}
