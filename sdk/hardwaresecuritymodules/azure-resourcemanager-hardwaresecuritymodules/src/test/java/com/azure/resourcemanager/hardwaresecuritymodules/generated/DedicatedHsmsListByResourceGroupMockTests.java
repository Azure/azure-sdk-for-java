// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hardwaresecuritymodules.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.hardwaresecuritymodules.HardwareSecurityModulesManager;
import com.azure.resourcemanager.hardwaresecuritymodules.models.DedicatedHsm;
import com.azure.resourcemanager.hardwaresecuritymodules.models.SkuName;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class DedicatedHsmsListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"value\":[{\"systemData\":{\"createdBy\":\"cimpevfg\",\"createdByType\":\"User\",\"createdAt\":\"2021-08-11T19:05:11Z\",\"lastModifiedBy\":\"lbywdxsm\",\"lastModifiedByType\":\"Application\",\"lastModifiedAt\":\"2021-03-19T10:07:06Z\"},\"properties\":{\"networkProfile\":{\"subnet\":{\"id\":\"cj\"},\"networkInterfaces\":[{\"id\":\"szqujizdvoq\",\"privateIpAddress\":\"ibyowbblgyavutp\"},{\"id\":\"joxoism\",\"privateIpAddress\":\"sbpimlq\"}]},\"managementNetworkProfile\":{\"subnet\":{\"id\":\"kcgxxlxsffgcvi\"},\"networkInterfaces\":[{\"id\":\"wlvwlyoupf\",\"privateIpAddress\":\"bkjubdyhgkfmins\"},{\"id\":\"wzf\",\"privateIpAddress\":\"sttktlahbqa\"},{\"id\":\"xtgzukxitmmqtgqq\",\"privateIpAddress\":\"hrnxrxc\"},{\"id\":\"uisavokq\",\"privateIpAddress\":\"fvazivjlfrqttba\"}]},\"stampId\":\"katnwxyi\",\"statusMessage\":\"id\",\"provisioningState\":\"CheckingQuota\"},\"sku\":{\"name\":\"payShield10K_LMK2_CPS2500\"},\"zones\":[\"cxkdmligovi\"],\"location\":\"rxkpmloazuruoc\",\"tags\":{\"fhjxakvvjgs\":\"orbteoy\"},\"id\":\"ordilmywwtkgkxny\",\"name\":\"dabg\",\"type\":\"vudtjuewbcihx\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        HardwareSecurityModulesManager manager = HardwareSecurityModulesManager.configure().withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<DedicatedHsm> response
            = manager.dedicatedHsms().listByResourceGroup("onmacjekniz", 1720447469, com.azure.core.util.Context.NONE);

        Assertions.assertEquals("rxkpmloazuruoc", response.iterator().next().location());
        Assertions.assertEquals("orbteoy", response.iterator().next().tags().get("fhjxakvvjgs"));
        Assertions.assertEquals(SkuName.PAY_SHIELD10K_LMK2_CPS2500, response.iterator().next().sku().name());
        Assertions.assertEquals("cxkdmligovi", response.iterator().next().zones().get(0));
        Assertions.assertEquals("cj", response.iterator().next().properties().networkProfile().subnet().id());
        Assertions.assertEquals("ibyowbblgyavutp",
            response.iterator().next().properties().networkProfile().networkInterfaces().get(0).privateIpAddress());
        Assertions.assertEquals("kcgxxlxsffgcvi",
            response.iterator().next().properties().managementNetworkProfile().subnet().id());
        Assertions.assertEquals("bkjubdyhgkfmins", response.iterator().next().properties().managementNetworkProfile()
            .networkInterfaces().get(0).privateIpAddress());
        Assertions.assertEquals("katnwxyi", response.iterator().next().properties().stampId());
    }
}
