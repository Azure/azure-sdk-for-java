// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hardwaresecuritymodules.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.hardwaresecuritymodules.HardwareSecurityModulesManager;
import com.azure.resourcemanager.hardwaresecuritymodules.models.CloudHsmCluster;
import com.azure.resourcemanager.hardwaresecuritymodules.models.CloudHsmClusterSkuFamily;
import com.azure.resourcemanager.hardwaresecuritymodules.models.CloudHsmClusterSkuName;
import com.azure.resourcemanager.hardwaresecuritymodules.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.hardwaresecuritymodules.models.ProvisioningState;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class CloudHsmClustersGetByResourceGroupWithResponseMockTests {
    @Test
    public void testGetByResourceGroupWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"autoGeneratedDomainNameLabelScope\":\"qumiek\",\"securityDomain\":{\"fipsState\":1320070179,\"activationStatus\":\"khly\"},\"hsms\":[{\"fqdn\":\"gqggebdunygae\",\"state\":\"db\",\"stateMessage\":\"atpxl\"},{\"fqdn\":\"xcyjmoadsuvarmy\",\"state\":\"mjsjqb\",\"stateMessage\":\"hyxxrwlycoduhpk\"}],\"publicNetworkAccess\":\"gymare\",\"privateEndpointConnections\":[{\"properties\":{\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Failed\",\"groupIds\":[\"hky\",\"ubeddg\"]},\"etag\":\"ofwq\",\"id\":\"qal\",\"name\":\"rmnjijpx\",\"type\":\"cqqudf\"}],\"statusMessage\":\"yxbaaabjyvayf\",\"restoreProperties\":{\"foldername\":\"rzrtuzqogsex\",\"azureStorageResourceUri\":\"vfdnwnwmewzsyyce\"},\"backupProperties\":{\"azureStorageResourceUri\":\"oibjudpfrxtrthz\",\"lastBackupDateTime\":\"2021-02-19T16:12:44Z\",\"lastBackupStatus\":\"dwkqbrq\"}},\"sku\":{\"family\":\"B\",\"name\":\"Standard B10\",\"capacity\":31333478},\"identity\":{\"principalId\":\"1fdc109f-4fc6-4086-ba8b-2fba24f07378\",\"tenantId\":\"9fe660b8-93a2-4267-a93e-08413b8aba26\",\"type\":\"None\",\"userAssignedIdentities\":{\"dtiirqt\":{\"principalId\":\"ba850707-ac94-41aa-9c1b-fce8a79333b6\",\"clientId\":\"b5124a79-f73d-4c3a-96bc-d53b9ec17775\"},\"axoruzfgsquy\":{\"principalId\":\"8c358e95-3a02-4120-ba70-803b99357980\",\"clientId\":\"fba8bda7-54b8-414b-ae59-8700f85341f3\"}}},\"location\":\"rxxle\",\"tags\":{\"wxuqlcvydypatdoo\":\"amxjezwlw\",\"kooebwnu\":\"ojknio\",\"vdkcrodtj\":\"hemms\"},\"id\":\"nfwjlfltkacjvefk\",\"name\":\"lfoakg\",\"type\":\"kfpagao\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        HardwareSecurityModulesManager manager = HardwareSecurityModulesManager.configure().withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        CloudHsmCluster response = manager.cloudHsmClusters()
            .getByResourceGroupWithResponse("tx", "tcs", com.azure.core.util.Context.NONE).getValue();

        Assertions.assertEquals("rxxle", response.location());
        Assertions.assertEquals("amxjezwlw", response.tags().get("wxuqlcvydypatdoo"));
        Assertions.assertEquals(CloudHsmClusterSkuFamily.B, response.sku().family());
        Assertions.assertEquals(CloudHsmClusterSkuName.STANDARD_B10, response.sku().name());
        Assertions.assertEquals(31333478, response.sku().capacity());
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, response.identity().type());
        Assertions.assertEquals(ProvisioningState.SUCCEEDED, response.properties().provisioningState());
        Assertions.assertEquals("qumiek", response.properties().autoGeneratedDomainNameLabelScope());
        Assertions.assertEquals(1320070179, response.properties().securityDomain().fipsState());
        Assertions.assertEquals("khly", response.properties().securityDomain().activationStatus());
        Assertions.assertEquals("gqggebdunygae", response.properties().hsms().get(0).fqdn());
        Assertions.assertEquals("db", response.properties().hsms().get(0).state());
        Assertions.assertEquals("atpxl", response.properties().hsms().get(0).stateMessage());
        Assertions.assertEquals("gymare", response.properties().publicNetworkAccess());
        Assertions.assertEquals("ofwq", response.properties().privateEndpointConnections().get(0).etag());
        Assertions.assertEquals("rzrtuzqogsex", response.properties().restoreProperties().foldername());
        Assertions.assertEquals("vfdnwnwmewzsyyce",
            response.properties().restoreProperties().azureStorageResourceUri());
        Assertions.assertEquals("oibjudpfrxtrthz", response.properties().backupProperties().azureStorageResourceUri());
    }
}
