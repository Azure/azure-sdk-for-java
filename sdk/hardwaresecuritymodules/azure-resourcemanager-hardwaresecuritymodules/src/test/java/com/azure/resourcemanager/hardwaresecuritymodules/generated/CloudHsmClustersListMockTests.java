// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.hardwaresecuritymodules.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.hardwaresecuritymodules.HardwareSecurityModulesManager;
import com.azure.resourcemanager.hardwaresecuritymodules.models.AutoGeneratedDomainNameLabelScope;
import com.azure.resourcemanager.hardwaresecuritymodules.models.CloudHsmCluster;
import com.azure.resourcemanager.hardwaresecuritymodules.models.CloudHsmClusterSkuFamily;
import com.azure.resourcemanager.hardwaresecuritymodules.models.CloudHsmClusterSkuName;
import com.azure.resourcemanager.hardwaresecuritymodules.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.hardwaresecuritymodules.models.PublicNetworkAccess;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class CloudHsmClustersListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"activationState\":\"Active\",\"autoGeneratedDomainNameLabelScope\":\"SubscriptionReuse\",\"hsms\":[{\"fqdn\":\"zis\",\"state\":\"fpel\",\"stateMessage\":\"p\"}],\"privateEndpointConnections\":[{\"properties\":{\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Failed\",\"groupIds\":[\"jzraehtwdwrf\",\"swibyr\"]},\"etag\":\"l\",\"id\":\"shfwpracstwity\",\"name\":\"hevxcced\",\"type\":\"pnmdyodnwzxltjcv\"},{\"properties\":{\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Creating\",\"groupIds\":[\"cxnavv\"]},\"etag\":\"qiby\",\"id\":\"nyowxwlmdjrkvfg\",\"name\":\"vfvpdbodaciz\",\"type\":\"j\"}],\"provisioningState\":\"Failed\",\"publicNetworkAccess\":\"Disabled\",\"statusMessage\":\"ibdeibq\"},\"identity\":{\"principalId\":\"kghv\",\"tenantId\":\"dzwmkrefajpj\",\"type\":\"None\",\"userAssignedIdentities\":{\"ystawfsdjpvkvp\":{\"principalId\":\"nyhgbijtji\",\"clientId\":\"xzsjabib\"},\"jjklff\":{\"principalId\":\"xbkzbzkdvncj\",\"clientId\":\"udurgkakmokz\"}}},\"sku\":{\"family\":\"B\",\"name\":\"Standard B10\",\"capacity\":714387513},\"location\":\"gzrf\",\"tags\":{\"lbjbsyb\":\"yebizikayuh\",\"vm\":\"qwrvtldgmfp\",\"wbdsr\":\"ipaslthaqfxssmwu\",\"owqkdwytisi\":\"zpdrhneu\"},\"id\":\"ircgpikpz\",\"name\":\"mejzanlfzxia\",\"type\":\"rmbzo\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        HardwareSecurityModulesManager manager = HardwareSecurityModulesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<CloudHsmCluster> response
            = manager.cloudHsmClusters().list("cy", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("gzrf", response.iterator().next().location());
        Assertions.assertEquals("yebizikayuh", response.iterator().next().tags().get("lbjbsyb"));
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, response.iterator().next().identity().type());
        Assertions.assertEquals(CloudHsmClusterSkuFamily.B, response.iterator().next().sku().family());
        Assertions.assertEquals(CloudHsmClusterSkuName.STANDARD_B10, response.iterator().next().sku().name());
        Assertions.assertEquals(714387513, response.iterator().next().sku().capacity());
        Assertions.assertEquals(AutoGeneratedDomainNameLabelScope.SUBSCRIPTION_REUSE,
            response.iterator().next().autoGeneratedDomainNameLabelScope());
        Assertions.assertEquals(PublicNetworkAccess.DISABLED, response.iterator().next().publicNetworkAccess());
    }
}
