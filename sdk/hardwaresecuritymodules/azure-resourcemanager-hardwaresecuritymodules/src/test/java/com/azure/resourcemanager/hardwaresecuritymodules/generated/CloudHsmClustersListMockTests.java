// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hardwaresecuritymodules.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.hardwaresecuritymodules.HardwareSecurityModulesManager;
import com.azure.resourcemanager.hardwaresecuritymodules.models.CloudHsmCluster;
import com.azure.resourcemanager.hardwaresecuritymodules.models.CloudHsmClusterSkuFamily;
import com.azure.resourcemanager.hardwaresecuritymodules.models.CloudHsmClusterSkuName;
import com.azure.resourcemanager.hardwaresecuritymodules.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.hardwaresecuritymodules.models.ProvisioningState;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class CloudHsmClustersListMockTests {
    @Test
    public void testList() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"value\":[{\"properties\":{\"provisioningState\":\"Deleting\",\"autoGeneratedDomainNameLabelScope\":\"sdtclusiypbs\",\"securityDomain\":{\"fipsState\":479037464,\"activationStatus\":\"uslfead\"},\"hsms\":[{\"fqdn\":\"ukyhejhzis\",\"state\":\"fpel\",\"stateMessage\":\"p\"}],\"publicNetworkAccess\":\"ksrpqv\",\"privateEndpointConnections\":[{\"properties\":{\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Creating\",\"groupIds\":[\"dw\"]},\"etag\":\"tswiby\",\"id\":\"dl\",\"name\":\"h\",\"type\":\"hfwpracstwit\"},{\"properties\":{\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Succeeded\",\"groupIds\":[\"cedcpnmdy\"]},\"etag\":\"nwzxltjcv\",\"id\":\"ltiugcxnavv\",\"name\":\"xqi\",\"type\":\"y\"}],\"statusMessage\":\"nyowxwlmdjrkvfg\",\"restoreProperties\":{\"foldername\":\"vpdbodaciz\",\"azureStorageResourceUri\":\"q\"},\"backupProperties\":{\"azureStorageResourceUri\":\"rribd\",\"lastBackupDateTime\":\"2021-11-18T01:40:56Z\",\"lastBackupStatus\":\"ipqkghvxndzwm\"}},\"sku\":{\"family\":\"B\",\"name\":\"Standard B10\",\"capacity\":1191994884},\"identity\":{\"principalId\":\"936ad98c-25d6-49ff-a8d4-6d7fe63ce900\",\"tenantId\":\"219e9cb1-99f5-4725-b61a-40d65f3db07f\",\"type\":\"None\",\"userAssignedIdentities\":{\"yhgbijtjivfx\":{\"principalId\":\"1e3de9cc-fdb6-4a1e-8bec-536eb107a258\",\"clientId\":\"8bed8536-a158-442a-9eef-cf064dc75d52\"},\"ab\":{\"principalId\":\"32f9a526-b4ae-4009-95dc-a660d896f7ef\",\"clientId\":\"c3d0dc7e-5b94-457e-a174-17ce8a18f110\"}}},\"location\":\"systawfsdjp\",\"tags\":{\"jxbkzbzkdvn\":\"p\"},\"id\":\"jabudurgkakmo\",\"name\":\"zhjjklffhmouwq\",\"type\":\"gzrf\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        HardwareSecurityModulesManager manager = HardwareSecurityModulesManager.configure().withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<CloudHsmCluster> response
            = manager.cloudHsmClusters().list("tlstvlzywem", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("systawfsdjp", response.iterator().next().location());
        Assertions.assertEquals("p", response.iterator().next().tags().get("jxbkzbzkdvn"));
        Assertions.assertEquals(CloudHsmClusterSkuFamily.B, response.iterator().next().sku().family());
        Assertions.assertEquals(CloudHsmClusterSkuName.STANDARD_B10, response.iterator().next().sku().name());
        Assertions.assertEquals(1191994884, response.iterator().next().sku().capacity());
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, response.iterator().next().identity().type());
        Assertions.assertEquals(ProvisioningState.DELETING,
            response.iterator().next().properties().provisioningState());
        Assertions.assertEquals("sdtclusiypbs",
            response.iterator().next().properties().autoGeneratedDomainNameLabelScope());
        Assertions.assertEquals(479037464, response.iterator().next().properties().securityDomain().fipsState());
        Assertions.assertEquals("uslfead", response.iterator().next().properties().securityDomain().activationStatus());
        Assertions.assertEquals("ukyhejhzis", response.iterator().next().properties().hsms().get(0).fqdn());
        Assertions.assertEquals("fpel", response.iterator().next().properties().hsms().get(0).state());
        Assertions.assertEquals("p", response.iterator().next().properties().hsms().get(0).stateMessage());
        Assertions.assertEquals("ksrpqv", response.iterator().next().properties().publicNetworkAccess());
        Assertions.assertEquals("tswiby",
            response.iterator().next().properties().privateEndpointConnections().get(0).etag());
        Assertions.assertEquals("vpdbodaciz", response.iterator().next().properties().restoreProperties().foldername());
        Assertions.assertEquals("q",
            response.iterator().next().properties().restoreProperties().azureStorageResourceUri());
        Assertions.assertEquals("rribd",
            response.iterator().next().properties().backupProperties().azureStorageResourceUri());
    }
}
