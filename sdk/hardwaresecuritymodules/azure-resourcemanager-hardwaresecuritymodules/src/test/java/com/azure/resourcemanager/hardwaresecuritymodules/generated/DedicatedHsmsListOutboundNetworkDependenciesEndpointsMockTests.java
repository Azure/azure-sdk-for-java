// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hardwaresecuritymodules.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.hardwaresecuritymodules.HardwareSecurityModulesManager;
import com.azure.resourcemanager.hardwaresecuritymodules.models.OutboundEnvironmentEndpoint;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class DedicatedHsmsListOutboundNetworkDependenciesEndpointsMockTests {
    @Test
    public void testListOutboundNetworkDependenciesEndpoints() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"value\":[{\"category\":\"jvpglydzgk\",\"endpoints\":[{\"domainName\":\"ev\",\"endpointDetails\":[{\"ipAddress\":\"r\",\"port\":108809884,\"protocol\":\"wytpzdmovz\",\"description\":\"va\"}]},{\"domainName\":\"zqadf\",\"endpointDetails\":[{\"ipAddress\":\"riglaec\",\"port\":566063527,\"protocol\":\"icokpv\",\"description\":\"lqtmldgxob\"}]}]}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        HardwareSecurityModulesManager manager = HardwareSecurityModulesManager.configure().withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<OutboundEnvironmentEndpoint> response = manager.dedicatedHsms()
            .listOutboundNetworkDependenciesEndpoints("qedcgzulwm", "rqzz", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("jvpglydzgk", response.iterator().next().category());
        Assertions.assertEquals("ev", response.iterator().next().endpoints().get(0).domainName());
        Assertions.assertEquals("r",
            response.iterator().next().endpoints().get(0).endpointDetails().get(0).ipAddress());
        Assertions.assertEquals(108809884,
            response.iterator().next().endpoints().get(0).endpointDetails().get(0).port());
        Assertions.assertEquals("wytpzdmovz",
            response.iterator().next().endpoints().get(0).endpointDetails().get(0).protocol());
        Assertions.assertEquals("va",
            response.iterator().next().endpoints().get(0).endpointDetails().get(0).description());
    }
}
