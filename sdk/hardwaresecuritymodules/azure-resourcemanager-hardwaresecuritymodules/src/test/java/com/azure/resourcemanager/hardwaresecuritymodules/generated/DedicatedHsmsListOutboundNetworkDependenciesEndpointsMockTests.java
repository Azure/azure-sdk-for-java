// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.hardwaresecuritymodules.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.hardwaresecuritymodules.HardwareSecurityModulesManager;
import com.azure.resourcemanager.hardwaresecuritymodules.models.OutboundEnvironmentEndpoint;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DedicatedHsmsListOutboundNetworkDependenciesEndpointsMockTests {
    @Test
    public void testListOutboundNetworkDependenciesEndpoints() throws Exception {
        String responseStr
            = "{\"value\":[{\"category\":\"iopid\",\"endpoints\":[{\"domainName\":\"kuvscxkdm\",\"endpointDetails\":[{\"ipAddress\":\"vibrxkpmloazuruo\",\"port\":1983144959,\"protocol\":\"orbteoy\",\"description\":\"hjxa\"},{\"ipAddress\":\"vjgsl\",\"port\":1644045294,\"protocol\":\"lmywwtkgkxnyed\",\"description\":\"gyvudtjuewbc\"},{\"ipAddress\":\"xuuwhcj\",\"port\":1562574982,\"protocol\":\"ybvpay\",\"description\":\"kudzpxgwj\"},{\"ipAddress\":\"mag\",\"port\":1164278403,\"protocol\":\"ohpfkyrkdbdgiog\",\"description\":\"kmnwqjnobaiyhddv\"}]},{\"domainName\":\"cegfnmntfp\",\"endpointDetails\":[{\"ipAddress\":\"mfnczd\",\"port\":97692731,\"protocol\":\"alxlllchp\",\"description\":\"bzevwrd\"},{\"ipAddress\":\"fukuvsjcswsmystu\",\"port\":1485763904,\"protocol\":\"pfcvlerchpqbmfp\",\"description\":\"abwidfcxsspuun\"},{\"ipAddress\":\"xyh\",\"port\":14245290,\"protocol\":\"ddrihpf\",\"description\":\"qcaaewdaomdjvl\"},{\"ipAddress\":\"x\",\"port\":392505640,\"protocol\":\"rmsgeivsiykzkd\",\"description\":\"jdxon\"}]},{\"domainName\":\"oggculapz\",\"endpointDetails\":[{\"ipAddress\":\"gogtqxepnylbf\",\"port\":347721012,\"protocol\":\"yjt\",\"description\":\"of\"},{\"ipAddress\":\"hvfcibyfmow\",\"port\":1105067830,\"protocol\":\"jpvd\",\"description\":\"fzwiivwzjbhyz\"},{\"ipAddress\":\"jrkambtrnegvmnv\",\"port\":531370640,\"protocol\":\"vldspa\",\"description\":\"jbkkdmflvestmjl\"}]},{\"domainName\":\"ril\",\"endpointDetails\":[{\"ipAddress\":\"eewchpxlktw\",\"port\":1788111588,\"protocol\":\"ycslevufuztcktyh\",\"description\":\"qedcgzulwm\"},{\"ipAddress\":\"qzz\",\"port\":360309363,\"protocol\":\"pglydz\",\"description\":\"rvqeevtoepryutn\"},{\"ipAddress\":\"tpzdmovzvfvaawzq\",\"port\":230826239,\"protocol\":\"gzuriglaecxndt\",\"description\":\"okpvzm\"}]}]}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        HardwareSecurityModulesManager manager = HardwareSecurityModulesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<OutboundEnvironmentEndpoint> response = manager.dedicatedHsms()
            .listOutboundNetworkDependenciesEndpoints("vjlfrqtt", "ajlkatnw", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("iopid", response.iterator().next().category());
        Assertions.assertEquals("kuvscxkdm", response.iterator().next().endpoints().get(0).domainName());
        Assertions.assertEquals("vibrxkpmloazuruo",
            response.iterator().next().endpoints().get(0).endpointDetails().get(0).ipAddress());
        Assertions.assertEquals(1983144959,
            response.iterator().next().endpoints().get(0).endpointDetails().get(0).port());
        Assertions.assertEquals("orbteoy",
            response.iterator().next().endpoints().get(0).endpointDetails().get(0).protocol());
        Assertions.assertEquals("hjxa",
            response.iterator().next().endpoints().get(0).endpointDetails().get(0).description());
    }
}
