// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hardwaresecuritymodules.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.hardwaresecuritymodules.HardwareSecurityModulesManager;
import com.azure.resourcemanager.hardwaresecuritymodules.models.CloudHsmCluster;
import com.azure.resourcemanager.hardwaresecuritymodules.models.CloudHsmClusterSkuFamily;
import com.azure.resourcemanager.hardwaresecuritymodules.models.CloudHsmClusterSkuName;
import com.azure.resourcemanager.hardwaresecuritymodules.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.hardwaresecuritymodules.models.ProvisioningState;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class CloudHsmClustersListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"value\":[{\"properties\":{\"provisioningState\":\"Canceled\",\"autoGeneratedDomainNameLabelScope\":\"uukzclewyhmlw\",\"securityDomain\":{\"fipsState\":1363862891,\"activationStatus\":\"pofncck\"},\"hsms\":[{\"fqdn\":\"qwhxxbuyqaxzfeqz\",\"state\":\"priolx\",\"stateMessage\":\"jaltolmnc\"}],\"publicNetworkAccess\":\"obqwcsdbnwdcfh\",\"privateEndpointConnections\":[{\"properties\":{\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Creating\",\"groupIds\":[\"lsbjjcanvxbv\",\"vudutncor\"]},\"etag\":\"lxqtvcofudfl\",\"id\":\"gj\",\"name\":\"bgdknnqv\",\"type\":\"aznqntoru\"},{\"properties\":{\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Deleting\",\"groupIds\":[\"kycgrauwj\",\"etaebu\"]},\"etag\":\"vdmovsmzlxwabm\",\"id\":\"efkifr\",\"name\":\"tpuqujmq\",\"type\":\"gkfbtndoaong\"},{\"properties\":{\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Canceled\",\"groupIds\":[\"i\",\"c\",\"ed\",\"twwaezkojvdcpzf\"]},\"etag\":\"ouicybxarzgszu\",\"id\":\"x\",\"name\":\"iqopidoamciod\",\"type\":\"khazxkhnzbonlwn\"},{\"properties\":{\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Deleting\",\"groupIds\":[\"wbw\",\"kszzcmrvexztv\",\"t\",\"gsfraoyzkoow\"]},\"etag\":\"mnguxawqaldsyu\",\"id\":\"imerqfobwyznk\",\"name\":\"ykutwpf\",\"type\":\"pagmhrskdsnf\"}],\"statusMessage\":\"doakgtdlmkkzevdl\",\"restoreProperties\":{\"foldername\":\"pusdstt\",\"azureStorageResourceUri\":\"ogvbbejdcngq\"},\"backupProperties\":{\"azureStorageResourceUri\":\"akufgmjz\",\"lastBackupDateTime\":\"2021-09-27T05:33:50Z\",\"lastBackupStatus\":\"grtwae\"}},\"sku\":{\"family\":\"B\",\"name\":\"Standard_B1\",\"capacity\":438426140},\"identity\":{\"principalId\":\"e3979aea-1d42-41d3-a27b-e387a38f3b0c\",\"tenantId\":\"dd263c33-8515-4ef3-bdf0-6ad4058c6bd2\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"woyuhhziuief\":{\"principalId\":\"a734ea08-83fb-4654-9cf1-4a8e2240d29a\",\"clientId\":\"d344bf85-1f98-4974-89ea-b6c82058f587\"},\"hdmsmlmzqhoftrm\":{\"principalId\":\"1ab2ef35-71c3-4cca-95ab-7ded3e4fb748\",\"clientId\":\"2acb1793-29b4-44c0-9c95-3514f4d3a6db\"}}},\"location\":\"qu\",\"tags\":{\"z\":\"xicslfao\",\"kaivwit\":\"iyylhalnswhccsp\",\"bwemhairs\":\"scywuggwoluhc\"},\"id\":\"rgzdwmsweyp\",\"name\":\"w\",\"type\":\"xggicccnxqhuexmk\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        HardwareSecurityModulesManager manager = HardwareSecurityModulesManager.configure().withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<CloudHsmCluster> response = manager.cloudHsmClusters().listByResourceGroup("zuempsbzkf",
            "beyvpnqicvinvkjj", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("qu", response.iterator().next().location());
        Assertions.assertEquals("xicslfao", response.iterator().next().tags().get("z"));
        Assertions.assertEquals(CloudHsmClusterSkuFamily.B, response.iterator().next().sku().family());
        Assertions.assertEquals(CloudHsmClusterSkuName.STANDARD_B1, response.iterator().next().sku().name());
        Assertions.assertEquals(438426140, response.iterator().next().sku().capacity());
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, response.iterator().next().identity().type());
        Assertions.assertEquals(ProvisioningState.CANCELED,
            response.iterator().next().properties().provisioningState());
        Assertions.assertEquals("uukzclewyhmlw",
            response.iterator().next().properties().autoGeneratedDomainNameLabelScope());
        Assertions.assertEquals(1363862891, response.iterator().next().properties().securityDomain().fipsState());
        Assertions.assertEquals("pofncck", response.iterator().next().properties().securityDomain().activationStatus());
        Assertions.assertEquals("qwhxxbuyqaxzfeqz", response.iterator().next().properties().hsms().get(0).fqdn());
        Assertions.assertEquals("priolx", response.iterator().next().properties().hsms().get(0).state());
        Assertions.assertEquals("jaltolmnc", response.iterator().next().properties().hsms().get(0).stateMessage());
        Assertions.assertEquals("obqwcsdbnwdcfh", response.iterator().next().properties().publicNetworkAccess());
        Assertions.assertEquals("lxqtvcofudfl",
            response.iterator().next().properties().privateEndpointConnections().get(0).etag());
        Assertions.assertEquals("pusdstt", response.iterator().next().properties().restoreProperties().foldername());
        Assertions.assertEquals("ogvbbejdcngq",
            response.iterator().next().properties().restoreProperties().azureStorageResourceUri());
        Assertions.assertEquals("akufgmjz",
            response.iterator().next().properties().backupProperties().azureStorageResourceUri());
    }
}
