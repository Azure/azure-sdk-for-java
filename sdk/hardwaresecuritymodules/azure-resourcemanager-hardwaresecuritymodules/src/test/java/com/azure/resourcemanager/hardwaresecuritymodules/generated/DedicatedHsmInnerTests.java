// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hardwaresecuritymodules.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hardwaresecuritymodules.fluent.models.DedicatedHsmInner;
import com.azure.resourcemanager.hardwaresecuritymodules.models.ApiEntityReference;
import com.azure.resourcemanager.hardwaresecuritymodules.models.DedicatedHsmProperties;
import com.azure.resourcemanager.hardwaresecuritymodules.models.NetworkInterface;
import com.azure.resourcemanager.hardwaresecuritymodules.models.NetworkProfile;
import com.azure.resourcemanager.hardwaresecuritymodules.models.Sku;
import com.azure.resourcemanager.hardwaresecuritymodules.models.SkuName;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DedicatedHsmInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DedicatedHsmInner model = BinaryData.fromString(
            "{\"properties\":{\"networkProfile\":{\"subnet\":{\"id\":\"dbihanufhfcbj\"},\"networkInterfaces\":[{\"id\":\"ithxqhabifpi\",\"privateIpAddress\":\"wczbys\"}]},\"managementNetworkProfile\":{\"subnet\":{\"id\":\"x\"},\"networkInterfaces\":[{\"id\":\"y\",\"privateIpAddress\":\"iwbybrkxvdumjg\"},{\"id\":\"fwvuk\",\"privateIpAddress\":\"audccsnhs\"},{\"id\":\"nyejhkryhtnap\",\"privateIpAddress\":\"wlokjyem\"},{\"id\":\"vnipjox\",\"privateIpAddress\":\"nchgej\"}]},\"stampId\":\"odmailzyd\",\"statusMessage\":\"o\",\"provisioningState\":\"Succeeded\"},\"sku\":{\"name\":\"payShield10K_LMK2_CPS250\"},\"zones\":[\"npmqnjaqwixjspro\"],\"location\":\"vcputegj\",\"tags\":{\"dvpjhulsuuvmk\":\"fdatsc\",\"jdpvwryo\":\"ozkrwfndiodjpslw\",\"hbcryffdfdosyge\":\"psoacctazakljl\"},\"id\":\"paojakhmsbzjh\",\"name\":\"rzevdphlxaol\",\"type\":\"hqtrgqjbpf\"}")
            .toObject(DedicatedHsmInner.class);
        Assertions.assertEquals("vcputegj", model.location());
        Assertions.assertEquals("fdatsc", model.tags().get("dvpjhulsuuvmk"));
        Assertions.assertEquals(SkuName.PAY_SHIELD10K_LMK2_CPS250, model.sku().name());
        Assertions.assertEquals("npmqnjaqwixjspro", model.zones().get(0));
        Assertions.assertEquals("dbihanufhfcbj", model.properties().networkProfile().subnet().id());
        Assertions.assertEquals("wczbys",
            model.properties().networkProfile().networkInterfaces().get(0).privateIpAddress());
        Assertions.assertEquals("x", model.properties().managementNetworkProfile().subnet().id());
        Assertions.assertEquals("iwbybrkxvdumjg",
            model.properties().managementNetworkProfile().networkInterfaces().get(0).privateIpAddress());
        Assertions.assertEquals("odmailzyd", model.properties().stampId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DedicatedHsmInner model = new DedicatedHsmInner().withLocation("vcputegj")
            .withTags(
                mapOf("dvpjhulsuuvmk", "fdatsc", "jdpvwryo", "ozkrwfndiodjpslw", "hbcryffdfdosyge", "psoacctazakljl"))
            .withSku(new Sku().withName(SkuName.PAY_SHIELD10K_LMK2_CPS250))
            .withZones(Arrays.asList("npmqnjaqwixjspro"))
            .withProperties(new DedicatedHsmProperties()
                .withNetworkProfile(new NetworkProfile().withSubnet(new ApiEntityReference().withId("dbihanufhfcbj"))
                    .withNetworkInterfaces(Arrays.asList(new NetworkInterface().withPrivateIpAddress("wczbys"))))
                .withManagementNetworkProfile(new NetworkProfile().withSubnet(new ApiEntityReference().withId("x"))
                    .withNetworkInterfaces(Arrays.asList(new NetworkInterface().withPrivateIpAddress("iwbybrkxvdumjg"),
                        new NetworkInterface().withPrivateIpAddress("audccsnhs"),
                        new NetworkInterface().withPrivateIpAddress("wlokjyem"),
                        new NetworkInterface().withPrivateIpAddress("nchgej"))))
                .withStampId("odmailzyd"));
        model = BinaryData.fromObject(model).toObject(DedicatedHsmInner.class);
        Assertions.assertEquals("vcputegj", model.location());
        Assertions.assertEquals("fdatsc", model.tags().get("dvpjhulsuuvmk"));
        Assertions.assertEquals(SkuName.PAY_SHIELD10K_LMK2_CPS250, model.sku().name());
        Assertions.assertEquals("npmqnjaqwixjspro", model.zones().get(0));
        Assertions.assertEquals("dbihanufhfcbj", model.properties().networkProfile().subnet().id());
        Assertions.assertEquals("wczbys",
            model.properties().networkProfile().networkInterfaces().get(0).privateIpAddress());
        Assertions.assertEquals("x", model.properties().managementNetworkProfile().subnet().id());
        Assertions.assertEquals("iwbybrkxvdumjg",
            model.properties().managementNetworkProfile().networkInterfaces().get(0).privateIpAddress());
        Assertions.assertEquals("odmailzyd", model.properties().stampId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
