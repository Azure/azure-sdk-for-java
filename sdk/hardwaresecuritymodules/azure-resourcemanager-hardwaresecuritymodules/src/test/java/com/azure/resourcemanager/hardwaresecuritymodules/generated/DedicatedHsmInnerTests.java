// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.hardwaresecuritymodules.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hardwaresecuritymodules.fluent.models.DedicatedHsmInner;
import com.azure.resourcemanager.hardwaresecuritymodules.models.ApiEntityReference;
import com.azure.resourcemanager.hardwaresecuritymodules.models.DedicatedHsmProperties;
import com.azure.resourcemanager.hardwaresecuritymodules.models.NetworkInterface;
import com.azure.resourcemanager.hardwaresecuritymodules.models.NetworkProfile;
import com.azure.resourcemanager.hardwaresecuritymodules.models.Sku;
import com.azure.resourcemanager.hardwaresecuritymodules.models.SkuName;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DedicatedHsmInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DedicatedHsmInner model = BinaryData.fromString(
            "{\"sku\":{\"name\":\"payShield10K_LMK1_CPS2500\"},\"zones\":[\"uaceopzfqrhhu\"],\"properties\":{\"networkProfile\":{\"subnet\":{\"resourceId\":\"pcqeqx\"},\"networkInterfaces\":[{\"resourceId\":\"ahzxctobgbk\",\"privateIpAddress\":\"oizpostmgrcfbun\"}]},\"managementNetworkProfile\":{\"subnet\":{\"resourceId\":\"jhhkxbp\"},\"networkInterfaces\":[{\"resourceId\":\"jhxxjyn\",\"privateIpAddress\":\"divkrt\"},{\"resourceId\":\"bxqz\",\"privateIpAddress\":\"zjf\"},{\"resourceId\":\"vjfdx\",\"privateIpAddress\":\"vetvt\"},{\"resourceId\":\"aqtdoqmcbx\",\"privateIpAddress\":\"vxysl\"}]},\"stampId\":\"hsfxoblytkb\",\"statusMessage\":\"pe\",\"provisioningState\":\"Failed\"},\"location\":\"bkrvrnsvshqj\",\"tags\":{\"uvwbhsqfs\":\"crsbfovasr\"},\"id\":\"bcgjbirxbp\",\"name\":\"bsrfbj\",\"type\":\"dtws\"}")
            .toObject(DedicatedHsmInner.class);
        Assertions.assertEquals("bkrvrnsvshqj", model.location());
        Assertions.assertEquals("crsbfovasr", model.tags().get("uvwbhsqfs"));
        Assertions.assertEquals(SkuName.PAY_SHIELD10K_LMK1_CPS2500, model.sku().name());
        Assertions.assertEquals("uaceopzfqrhhu", model.zones().get(0));
        Assertions.assertEquals("pcqeqx", model.properties().networkProfile().subnet().resourceId());
        Assertions.assertEquals("oizpostmgrcfbun",
            model.properties().networkProfile().networkInterfaces().get(0).privateIpAddress());
        Assertions.assertEquals("jhhkxbp", model.properties().managementNetworkProfile().subnet().resourceId());
        Assertions.assertEquals("divkrt",
            model.properties().managementNetworkProfile().networkInterfaces().get(0).privateIpAddress());
        Assertions.assertEquals("hsfxoblytkb", model.properties().stampId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DedicatedHsmInner model = new DedicatedHsmInner().withLocation("bkrvrnsvshqj")
            .withTags(mapOf("uvwbhsqfs", "crsbfovasr"))
            .withSku(new Sku().withName(SkuName.PAY_SHIELD10K_LMK1_CPS2500))
            .withZones(Arrays.asList("uaceopzfqrhhu"))
            .withProperties(new DedicatedHsmProperties()
                .withNetworkProfile(new NetworkProfile().withSubnet(new ApiEntityReference().withResourceId("pcqeqx"))
                    .withNetworkInterfaces(
                        Arrays.asList(new NetworkInterface().withPrivateIpAddress("oizpostmgrcfbun"))))
                .withManagementNetworkProfile(
                    new NetworkProfile().withSubnet(new ApiEntityReference().withResourceId("jhhkxbp"))
                        .withNetworkInterfaces(Arrays.asList(new NetworkInterface().withPrivateIpAddress("divkrt"),
                            new NetworkInterface().withPrivateIpAddress("zjf"),
                            new NetworkInterface().withPrivateIpAddress("vetvt"),
                            new NetworkInterface().withPrivateIpAddress("vxysl"))))
                .withStampId("hsfxoblytkb"));
        model = BinaryData.fromObject(model).toObject(DedicatedHsmInner.class);
        Assertions.assertEquals("bkrvrnsvshqj", model.location());
        Assertions.assertEquals("crsbfovasr", model.tags().get("uvwbhsqfs"));
        Assertions.assertEquals(SkuName.PAY_SHIELD10K_LMK1_CPS2500, model.sku().name());
        Assertions.assertEquals("uaceopzfqrhhu", model.zones().get(0));
        Assertions.assertEquals("pcqeqx", model.properties().networkProfile().subnet().resourceId());
        Assertions.assertEquals("oizpostmgrcfbun",
            model.properties().networkProfile().networkInterfaces().get(0).privateIpAddress());
        Assertions.assertEquals("jhhkxbp", model.properties().managementNetworkProfile().subnet().resourceId());
        Assertions.assertEquals("divkrt",
            model.properties().managementNetworkProfile().networkInterfaces().get(0).privateIpAddress());
        Assertions.assertEquals("hsfxoblytkb", model.properties().stampId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
