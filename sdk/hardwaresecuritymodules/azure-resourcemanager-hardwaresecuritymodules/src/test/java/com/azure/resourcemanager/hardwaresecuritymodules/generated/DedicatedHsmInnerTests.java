// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.hardwaresecuritymodules.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hardwaresecuritymodules.fluent.models.DedicatedHsmInner;
import com.azure.resourcemanager.hardwaresecuritymodules.models.ApiEntityReference;
import com.azure.resourcemanager.hardwaresecuritymodules.models.DedicatedHsmProperties;
import com.azure.resourcemanager.hardwaresecuritymodules.models.NetworkInterface;
import com.azure.resourcemanager.hardwaresecuritymodules.models.NetworkProfile;
import com.azure.resourcemanager.hardwaresecuritymodules.models.Sku;
import com.azure.resourcemanager.hardwaresecuritymodules.models.SkuName;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DedicatedHsmInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DedicatedHsmInner model = BinaryData.fromString(
            "{\"properties\":{\"networkProfile\":{\"subnet\":{\"resourceId\":\"b\"},\"networkInterfaces\":[{\"resourceId\":\"op\",\"privateIpAddress\":\"qrhhu\"},{\"resourceId\":\"pppcqeqxo\",\"privateIpAddress\":\"dahzxctobg\"},{\"resourceId\":\"dmoizpostmg\",\"privateIpAddress\":\"fbunrmfqjhhk\"},{\"resourceId\":\"pvjymjhxxjyng\",\"privateIpAddress\":\"ivkrtsw\"}]},\"managementNetworkProfile\":{\"subnet\":{\"resourceId\":\"vszjfauvjfdxxi\"},\"networkInterfaces\":[{\"resourceId\":\"t\",\"privateIpAddress\":\"aqtdoqmcbx\"}]},\"stampId\":\"vxysl\",\"statusMessage\":\"hsfxoblytkb\",\"provisioningState\":\"Connecting\"},\"sku\":{\"name\":\"SafeNet Luna Network HSM A790\"},\"zones\":[\"fbkrvrnsvs\",\"q\",\"ohxcrsbfova\"],\"location\":\"ruvw\",\"tags\":{\"pybsrfbjfdtw\":\"qfsubcgjbirx\",\"bexilzznfqqnv\":\"sotftpvj\",\"ujmkcjhwqy\":\"pmqtaru\",\"naenqpehindo\":\"jrybnwjewgdrjer\"},\"id\":\"gmifthnzd\",\"name\":\"dslgnayqigynduh\",\"type\":\"vhqlkthumaqo\"}")
            .toObject(DedicatedHsmInner.class);
        Assertions.assertEquals("ruvw", model.location());
        Assertions.assertEquals("qfsubcgjbirx", model.tags().get("pybsrfbjfdtw"));
        Assertions.assertEquals("b", model.properties().networkProfile().subnet().resourceId());
        Assertions.assertEquals("qrhhu",
            model.properties().networkProfile().networkInterfaces().get(0).privateIpAddress());
        Assertions.assertEquals("vszjfauvjfdxxi", model.properties().managementNetworkProfile().subnet().resourceId());
        Assertions.assertEquals("aqtdoqmcbx",
            model.properties().managementNetworkProfile().networkInterfaces().get(0).privateIpAddress());
        Assertions.assertEquals("vxysl", model.properties().stampId());
        Assertions.assertEquals(SkuName.SAFE_NET_LUNA_NETWORK_HSM_A790, model.sku().name());
        Assertions.assertEquals("fbkrvrnsvs", model.zones().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DedicatedHsmInner model = new DedicatedHsmInner().withLocation("ruvw")
            .withTags(mapOf("pybsrfbjfdtw", "qfsubcgjbirx", "bexilzznfqqnv", "sotftpvj", "ujmkcjhwqy", "pmqtaru",
                "naenqpehindo", "jrybnwjewgdrjer"))
            .withProperties(new DedicatedHsmProperties()
                .withNetworkProfile(new NetworkProfile().withSubnet(new ApiEntityReference().withResourceId("b"))
                    .withNetworkInterfaces(Arrays.asList(new NetworkInterface().withPrivateIpAddress("qrhhu"),
                        new NetworkInterface().withPrivateIpAddress("dahzxctobg"),
                        new NetworkInterface().withPrivateIpAddress("fbunrmfqjhhk"),
                        new NetworkInterface().withPrivateIpAddress("ivkrtsw"))))
                .withManagementNetworkProfile(new NetworkProfile()
                    .withSubnet(new ApiEntityReference().withResourceId("vszjfauvjfdxxi"))
                    .withNetworkInterfaces(Arrays.asList(new NetworkInterface().withPrivateIpAddress("aqtdoqmcbx"))))
                .withStampId("vxysl"))
            .withSku(new Sku().withName(SkuName.SAFE_NET_LUNA_NETWORK_HSM_A790))
            .withZones(Arrays.asList("fbkrvrnsvs", "q", "ohxcrsbfova"));
        model = BinaryData.fromObject(model).toObject(DedicatedHsmInner.class);
        Assertions.assertEquals("ruvw", model.location());
        Assertions.assertEquals("qfsubcgjbirx", model.tags().get("pybsrfbjfdtw"));
        Assertions.assertEquals("b", model.properties().networkProfile().subnet().resourceId());
        Assertions.assertEquals("qrhhu",
            model.properties().networkProfile().networkInterfaces().get(0).privateIpAddress());
        Assertions.assertEquals("vszjfauvjfdxxi", model.properties().managementNetworkProfile().subnet().resourceId());
        Assertions.assertEquals("aqtdoqmcbx",
            model.properties().managementNetworkProfile().networkInterfaces().get(0).privateIpAddress());
        Assertions.assertEquals("vxysl", model.properties().stampId());
        Assertions.assertEquals(SkuName.SAFE_NET_LUNA_NETWORK_HSM_A790, model.sku().name());
        Assertions.assertEquals("fbkrvrnsvs", model.zones().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
