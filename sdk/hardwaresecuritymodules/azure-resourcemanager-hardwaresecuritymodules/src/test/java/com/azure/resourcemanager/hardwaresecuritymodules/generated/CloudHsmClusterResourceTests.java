// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hardwaresecuritymodules.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hardwaresecuritymodules.models.CloudHsmClusterResource;
import com.azure.resourcemanager.hardwaresecuritymodules.models.CloudHsmClusterSku;
import com.azure.resourcemanager.hardwaresecuritymodules.models.CloudHsmClusterSkuFamily;
import com.azure.resourcemanager.hardwaresecuritymodules.models.CloudHsmClusterSkuName;
import com.azure.resourcemanager.hardwaresecuritymodules.models.ManagedServiceIdentity;
import com.azure.resourcemanager.hardwaresecuritymodules.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.hardwaresecuritymodules.models.UserAssignedIdentity;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CloudHsmClusterResourceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CloudHsmClusterResource model = BinaryData.fromString(
            "{\"identity\":{\"principalId\":\"f6cd80f3-d3ba-4bd5-9439-a4396354defe\",\"tenantId\":\"15cb0d84-d0fa-4b9e-89dd-05440968b6f8\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{\"wrwjfeu\":{\"principalId\":\"0b044c3b-4e94-4aa0-8d21-6cc492160c41\",\"clientId\":\"a7fc24ca-8328-4d33-9853-56671467e708\"},\"utjeltmrldhugj\":{\"principalId\":\"29c8d5e6-e309-48af-b0f6-ce55427cb357\",\"clientId\":\"37faefbf-e3a6-4fc1-8f66-efa2cdf0bd85\"},\"atqxho\":{\"principalId\":\"93e1dfb3-edc4-413f-89fa-718040576808\",\"clientId\":\"93c6c21e-49b0-4cb8-b0c2-3d11516ddeaa\"}}},\"sku\":{\"family\":\"B\",\"name\":\"Standard_B1\",\"capacity\":274751337},\"location\":\"gphuticndvka\",\"tags\":{\"ftyxolniw\":\"yiftyhxhuro\",\"ryplwckbasyypn\":\"wcukjfkgiawxk\",\"phejkotynqgoulz\":\"dhsgcba\"},\"id\":\"dlikwyqkgfgibma\",\"name\":\"gakeqsr\",\"type\":\"yb\"}")
            .toObject(CloudHsmClusterResource.class);
        Assertions.assertEquals("gphuticndvka", model.location());
        Assertions.assertEquals("yiftyhxhuro", model.tags().get("ftyxolniw"));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED, model.identity().type());
        Assertions.assertEquals(CloudHsmClusterSkuFamily.B, model.sku().family());
        Assertions.assertEquals(CloudHsmClusterSkuName.STANDARD_B1, model.sku().name());
        Assertions.assertEquals(274751337, model.sku().capacity());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CloudHsmClusterResource model = new CloudHsmClusterResource().withLocation("gphuticndvka")
            .withTags(
                mapOf("ftyxolniw", "yiftyhxhuro", "ryplwckbasyypn", "wcukjfkgiawxk", "phejkotynqgoulz", "dhsgcba"))
            .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED)
                .withUserAssignedIdentities(mapOf("wrwjfeu", new UserAssignedIdentity(), "utjeltmrldhugj",
                    new UserAssignedIdentity(), "atqxho", new UserAssignedIdentity())))
            .withSku(new CloudHsmClusterSku().withFamily(CloudHsmClusterSkuFamily.B)
                .withName(CloudHsmClusterSkuName.STANDARD_B1)
                .withCapacity(274751337));
        model = BinaryData.fromObject(model).toObject(CloudHsmClusterResource.class);
        Assertions.assertEquals("gphuticndvka", model.location());
        Assertions.assertEquals("yiftyhxhuro", model.tags().get("ftyxolniw"));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED, model.identity().type());
        Assertions.assertEquals(CloudHsmClusterSkuFamily.B, model.sku().family());
        Assertions.assertEquals(CloudHsmClusterSkuName.STANDARD_B1, model.sku().name());
        Assertions.assertEquals(274751337, model.sku().capacity());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
