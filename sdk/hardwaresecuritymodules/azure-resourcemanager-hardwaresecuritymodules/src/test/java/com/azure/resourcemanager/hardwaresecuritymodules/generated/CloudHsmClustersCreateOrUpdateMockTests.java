// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hardwaresecuritymodules.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.hardwaresecuritymodules.HardwareSecurityModulesManager;
import com.azure.resourcemanager.hardwaresecuritymodules.models.AutoGeneratedDomainNameLabelScope;
import com.azure.resourcemanager.hardwaresecuritymodules.models.CloudHsmCluster;
import com.azure.resourcemanager.hardwaresecuritymodules.models.CloudHsmClusterProperties;
import com.azure.resourcemanager.hardwaresecuritymodules.models.CloudHsmClusterSku;
import com.azure.resourcemanager.hardwaresecuritymodules.models.CloudHsmClusterSkuFamily;
import com.azure.resourcemanager.hardwaresecuritymodules.models.CloudHsmClusterSkuName;
import com.azure.resourcemanager.hardwaresecuritymodules.models.ManagedServiceIdentity;
import com.azure.resourcemanager.hardwaresecuritymodules.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.hardwaresecuritymodules.models.PublicNetworkAccess;
import com.azure.resourcemanager.hardwaresecuritymodules.models.UserAssignedIdentity;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class CloudHsmClustersCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"activationState\":\"NotDefined\",\"autoGeneratedDomainNameLabelScope\":\"ResourceGroupReuse\",\"hsms\":[{\"fqdn\":\"q\",\"state\":\"krribdeibqi\",\"stateMessage\":\"kghv\"}],\"privateEndpointConnections\":[{\"properties\":{\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"InternalError\",\"groupIds\":[\"fajpjorwk\",\"nyhgbijtji\"]},\"etag\":\"xzsjabib\",\"id\":\"stawfsdjpvkv\",\"name\":\"bjxbkzbzk\",\"type\":\"vncjabudurgk\"},{\"properties\":{\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Updating\",\"groupIds\":[\"jjklff\",\"mouwqlgzrfzeey\"]},\"etag\":\"izikayuhq\",\"id\":\"jbsybbqw\",\"name\":\"vtldgmfpgvmpip\",\"type\":\"slthaq\"},{\"properties\":{\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Deleting\",\"groupIds\":[\"twbdsrezpdrhn\"]},\"etag\":\"yowqkdwytisibir\",\"id\":\"pikpz\",\"name\":\"mejzanlfzxia\",\"type\":\"rmbzo\"}],\"provisioningState\":\"Succeeded\",\"publicNetworkAccess\":\"Disabled\",\"statusMessage\":\"jq\"},\"identity\":{\"principalId\":\"72185855-752c-4f39-98db-86ef7d51837a\",\"tenantId\":\"6f4679f4-fc06-4cfd-a60c-23575af274d3\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{\"azszrnwoiindfpw\":{\"principalId\":\"db5eca83-9245-4f33-b7df-d6db903ab1e9\",\"clientId\":\"562b9821-a1d5-4caf-a171-51b0d5095e57\"}}},\"sku\":{\"family\":\"B\",\"name\":\"Standard_B1\",\"capacity\":341013341},\"location\":\"lhflsjcdhszfjvf\",\"tags\":{\"hldvriii\":\"feljagrqm\"},\"id\":\"jnalghf\",\"name\":\"vtvsexsowueluq\",\"type\":\"hahhxvrhmzkwpj\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        HardwareSecurityModulesManager manager = HardwareSecurityModulesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        CloudHsmCluster response = manager.cloudHsmClusters()
            .define("sbrgz")
            .withRegion("wzxltjc")
            .withExistingResourceGroup("ai")
            .withTags(mapOf("xqi", "ltiugcxnavv"))
            .withIdentity(
                new ManagedServiceIdentity().withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED)
                    .withUserAssignedIdentities(mapOf("l", new UserAssignedIdentity(), "hfwpracstwit",
                        new UserAssignedIdentity(), "evxccedcp", new UserAssignedIdentity())))
            .withSku(new CloudHsmClusterSku().withFamily(CloudHsmClusterSkuFamily.B)
                .withName(CloudHsmClusterSkuName.STANDARD_B10)
                .withCapacity(1994704768))
            .withProperties(new CloudHsmClusterProperties()
                .withAutoGeneratedDomainNameLabelScope(AutoGeneratedDomainNameLabelScope.NO_REUSE)
                .withPublicNetworkAccess(PublicNetworkAccess.DISABLED))
            .create();

        Assertions.assertEquals("lhflsjcdhszfjvf", response.location());
        Assertions.assertEquals("feljagrqm", response.tags().get("hldvriii"));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED, response.identity().type());
        Assertions.assertEquals(CloudHsmClusterSkuFamily.B, response.sku().family());
        Assertions.assertEquals(CloudHsmClusterSkuName.STANDARD_B1, response.sku().name());
        Assertions.assertEquals(341013341, response.sku().capacity());
        Assertions.assertEquals(AutoGeneratedDomainNameLabelScope.RESOURCE_GROUP_REUSE,
            response.properties().autoGeneratedDomainNameLabelScope());
        Assertions.assertEquals(PublicNetworkAccess.DISABLED, response.properties().publicNetworkAccess());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
