// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.hardwaresecuritymodules.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.hardwaresecuritymodules.HardwareSecurityModulesManager;
import com.azure.resourcemanager.hardwaresecuritymodules.models.AutoGeneratedDomainNameLabelScope;
import com.azure.resourcemanager.hardwaresecuritymodules.models.CloudHsmCluster;
import com.azure.resourcemanager.hardwaresecuritymodules.models.CloudHsmClusterProperties;
import com.azure.resourcemanager.hardwaresecuritymodules.models.CloudHsmClusterSku;
import com.azure.resourcemanager.hardwaresecuritymodules.models.CloudHsmClusterSkuFamily;
import com.azure.resourcemanager.hardwaresecuritymodules.models.CloudHsmClusterSkuName;
import com.azure.resourcemanager.hardwaresecuritymodules.models.ManagedServiceIdentity;
import com.azure.resourcemanager.hardwaresecuritymodules.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.hardwaresecuritymodules.models.PublicNetworkAccess;
import com.azure.resourcemanager.hardwaresecuritymodules.models.UserAssignedIdentity;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class CloudHsmClustersCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"activationState\":\"Active\",\"autoGeneratedDomainNameLabelScope\":\"SubscriptionReuse\",\"hsms\":[{\"fqdn\":\"fdntwjchrdgoih\",\"state\":\"mwctondzjluudfd\",\"stateMessage\":\"gg\"}],\"privateEndpointConnections\":[{\"properties\":{\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Deleting\",\"groupIds\":[\"tgseinqfiufxqkn\",\"irgne\"]},\"etag\":\"twqmsniffcdmqnr\",\"id\":\"lpijnkrxfrd\",\"name\":\"hcrat\",\"type\":\"zzronasx\"}],\"provisioningState\":\"Succeeded\",\"publicNetworkAccess\":\"Disabled\",\"statusMessage\":\"yzhftwesgogczh\"},\"identity\":{\"principalId\":\"xkr\",\"tenantId\":\"nyhmossxkkgthr\",\"type\":\"None\",\"userAssignedIdentities\":{\"buswdvzyy\":{\"principalId\":\"bdhqxvcxgf\",\"clientId\":\"dsofbshrns\"}}},\"sku\":{\"family\":\"B\",\"name\":\"Standard_B1\",\"capacity\":81774332},\"location\":\"jsrtk\",\"tags\":{\"yuxzejntpsewgi\":\"nopqgikyzirtx\",\"rydxtqm\":\"ilqu\",\"tbghhavgrvkf\":\"eoxorggufhyao\",\"mv\":\"ovjzhpjbibgjmfx\"},\"id\":\"cluyovwxnbkf\",\"name\":\"zzxscyhwzdgiruj\",\"type\":\"zbomvzzbtdcqvpni\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        HardwareSecurityModulesManager manager = HardwareSecurityModulesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        CloudHsmCluster response = manager.cloudHsmClusters()
            .define("k")
            .withRegion("vhixbjxy")
            .withExistingResourceGroup("llqwjygvjayvblmh")
            .withTags(mapOf("coolsttpkiwkkb", "yl"))
            .withProperties(new CloudHsmClusterProperties()
                .withAutoGeneratedDomainNameLabelScope(AutoGeneratedDomainNameLabelScope.SUBSCRIPTION_REUSE)
                .withPublicNetworkAccess(PublicNetworkAccess.DISABLED))
            .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.USER_ASSIGNED)
                .withUserAssignedIdentities(
                    mapOf("envrkpyouaibrebq", new UserAssignedIdentity(), "jpqqmted", new UserAssignedIdentity(),
                        "auyqncygupkv", new UserAssignedIdentity(), "totxhojujb", new UserAssignedIdentity())))
            .withSku(new CloudHsmClusterSku().withFamily(CloudHsmClusterSkuFamily.B)
                .withName(CloudHsmClusterSkuName.STANDARD_B10)
                .withCapacity(93878588))
            .create();

        Assertions.assertEquals("jsrtk", response.location());
        Assertions.assertEquals("nopqgikyzirtx", response.tags().get("yuxzejntpsewgi"));
        Assertions.assertEquals(AutoGeneratedDomainNameLabelScope.SUBSCRIPTION_REUSE,
            response.properties().autoGeneratedDomainNameLabelScope());
        Assertions.assertEquals(PublicNetworkAccess.DISABLED, response.properties().publicNetworkAccess());
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, response.identity().type());
        Assertions.assertEquals(CloudHsmClusterSkuFamily.B, response.sku().family());
        Assertions.assertEquals(CloudHsmClusterSkuName.STANDARD_B1, response.sku().name());
        Assertions.assertEquals(81774332, response.sku().capacity());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
