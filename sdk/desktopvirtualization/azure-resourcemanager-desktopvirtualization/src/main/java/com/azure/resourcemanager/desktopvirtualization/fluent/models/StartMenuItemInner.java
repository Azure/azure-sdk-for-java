// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Represents a StartMenuItem definition.
 */
@Fluent
public final class StartMenuItemInner extends ProxyResource {
    /*
     * Detailed properties for StartMenuItem
     */
    private StartMenuItemProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of StartMenuItemInner class.
     */
    public StartMenuItemInner() {
    }

    /**
     * Get the innerProperties property: Detailed properties for StartMenuItem.
     * 
     * @return the innerProperties value.
     */
    private StartMenuItemProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the appAlias property: Alias of StartMenuItem.
     * 
     * @return the appAlias value.
     */
    public String appAlias() {
        return this.innerProperties() == null ? null : this.innerProperties().appAlias();
    }

    /**
     * Set the appAlias property: Alias of StartMenuItem.
     * 
     * @param appAlias the appAlias value to set.
     * @return the StartMenuItemInner object itself.
     */
    public StartMenuItemInner withAppAlias(String appAlias) {
        if (this.innerProperties() == null) {
            this.innerProperties = new StartMenuItemProperties();
        }
        this.innerProperties().withAppAlias(appAlias);
        return this;
    }

    /**
     * Get the filePath property: Path to the file of StartMenuItem.
     * 
     * @return the filePath value.
     */
    public String filePath() {
        return this.innerProperties() == null ? null : this.innerProperties().filePath();
    }

    /**
     * Set the filePath property: Path to the file of StartMenuItem.
     * 
     * @param filePath the filePath value to set.
     * @return the StartMenuItemInner object itself.
     */
    public StartMenuItemInner withFilePath(String filePath) {
        if (this.innerProperties() == null) {
            this.innerProperties = new StartMenuItemProperties();
        }
        this.innerProperties().withFilePath(filePath);
        return this;
    }

    /**
     * Get the commandLineArguments property: Command line arguments for StartMenuItem.
     * 
     * @return the commandLineArguments value.
     */
    public String commandLineArguments() {
        return this.innerProperties() == null ? null : this.innerProperties().commandLineArguments();
    }

    /**
     * Set the commandLineArguments property: Command line arguments for StartMenuItem.
     * 
     * @param commandLineArguments the commandLineArguments value to set.
     * @return the StartMenuItemInner object itself.
     */
    public StartMenuItemInner withCommandLineArguments(String commandLineArguments) {
        if (this.innerProperties() == null) {
            this.innerProperties = new StartMenuItemProperties();
        }
        this.innerProperties().withCommandLineArguments(commandLineArguments);
        return this;
    }

    /**
     * Get the iconPath property: Path to the icon.
     * 
     * @return the iconPath value.
     */
    public String iconPath() {
        return this.innerProperties() == null ? null : this.innerProperties().iconPath();
    }

    /**
     * Set the iconPath property: Path to the icon.
     * 
     * @param iconPath the iconPath value to set.
     * @return the StartMenuItemInner object itself.
     */
    public StartMenuItemInner withIconPath(String iconPath) {
        if (this.innerProperties() == null) {
            this.innerProperties = new StartMenuItemProperties();
        }
        this.innerProperties().withIconPath(iconPath);
        return this;
    }

    /**
     * Get the iconIndex property: Index of the icon.
     * 
     * @return the iconIndex value.
     */
    public Integer iconIndex() {
        return this.innerProperties() == null ? null : this.innerProperties().iconIndex();
    }

    /**
     * Set the iconIndex property: Index of the icon.
     * 
     * @param iconIndex the iconIndex value to set.
     * @return the StartMenuItemInner object itself.
     */
    public StartMenuItemInner withIconIndex(Integer iconIndex) {
        if (this.innerProperties() == null) {
            this.innerProperties = new StartMenuItemProperties();
        }
        this.innerProperties().withIconIndex(iconIndex);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StartMenuItemInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StartMenuItemInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the StartMenuItemInner.
     */
    public static StartMenuItemInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StartMenuItemInner deserializedStartMenuItemInner = new StartMenuItemInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedStartMenuItemInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedStartMenuItemInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedStartMenuItemInner.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedStartMenuItemInner.innerProperties = StartMenuItemProperties.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedStartMenuItemInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStartMenuItemInner;
        });
    }
}
