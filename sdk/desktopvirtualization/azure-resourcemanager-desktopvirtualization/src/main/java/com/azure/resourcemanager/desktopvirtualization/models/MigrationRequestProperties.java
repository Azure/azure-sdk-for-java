// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Properties for arm migration. */
@Fluent
public final class MigrationRequestProperties {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(MigrationRequestProperties.class);

    /*
     * The type of operation for migration.
     */
    @JsonProperty(value = "operation")
    private Operation operation;

    /*
     * The path to the legacy object to migrate.
     */
    @JsonProperty(value = "migrationPath")
    private String migrationPath;

    /**
     * Get the operation property: The type of operation for migration.
     *
     * @return the operation value.
     */
    public Operation operation() {
        return this.operation;
    }

    /**
     * Set the operation property: The type of operation for migration.
     *
     * @param operation the operation value to set.
     * @return the MigrationRequestProperties object itself.
     */
    public MigrationRequestProperties withOperation(Operation operation) {
        this.operation = operation;
        return this;
    }

    /**
     * Get the migrationPath property: The path to the legacy object to migrate.
     *
     * @return the migrationPath value.
     */
    public String migrationPath() {
        return this.migrationPath;
    }

    /**
     * Set the migrationPath property: The path to the legacy object to migrate.
     *
     * @param migrationPath the migrationPath value to set.
     * @return the MigrationRequestProperties object itself.
     */
    public MigrationRequestProperties withMigrationPath(String migrationPath) {
        this.migrationPath = migrationPath;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
