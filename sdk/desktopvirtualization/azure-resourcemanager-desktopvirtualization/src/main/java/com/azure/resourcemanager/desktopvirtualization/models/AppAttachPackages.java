// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/**
 * Resource collection API of AppAttachPackages.
 */
public interface AppAttachPackages {
    /**
     * Get an app attach package.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param appAttachPackageName The name of the App Attach package.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an app attach package along with {@link Response}.
     */
    Response<AppAttachPackage> getByResourceGroupWithResponse(String resourceGroupName, String appAttachPackageName,
        Context context);

    /**
     * Get an app attach package.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param appAttachPackageName The name of the App Attach package.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an app attach package.
     */
    AppAttachPackage getByResourceGroup(String resourceGroupName, String appAttachPackageName);

    /**
     * Remove an App Attach Package.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param appAttachPackageName The name of the App Attach package.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> deleteByResourceGroupWithResponse(String resourceGroupName, String appAttachPackageName,
        Context context);

    /**
     * Remove an App Attach Package.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param appAttachPackageName The name of the App Attach package.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByResourceGroup(String resourceGroupName, String appAttachPackageName);

    /**
     * List App Attach packages in resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return appAttachPackageList as paginated response with {@link PagedIterable}.
     */
    PagedIterable<AppAttachPackage> listByResourceGroup(String resourceGroupName);

    /**
     * List App Attach packages in resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param filter OData filter expression. Valid properties for filtering are package name and host pool.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return appAttachPackageList as paginated response with {@link PagedIterable}.
     */
    PagedIterable<AppAttachPackage> listByResourceGroup(String resourceGroupName, String filter, Context context);

    /**
     * List App Attach packages in subscription.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return appAttachPackageList as paginated response with {@link PagedIterable}.
     */
    PagedIterable<AppAttachPackage> list();

    /**
     * List App Attach packages in subscription.
     * 
     * @param filter OData filter expression. Valid properties for filtering are package name, host pool, and resource
     * group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return appAttachPackageList as paginated response with {@link PagedIterable}.
     */
    PagedIterable<AppAttachPackage> list(String filter, Context context);

    /**
     * Get an app attach package.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an app attach package along with {@link Response}.
     */
    AppAttachPackage getById(String id);

    /**
     * Get an app attach package.
     * 
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an app attach package along with {@link Response}.
     */
    Response<AppAttachPackage> getByIdWithResponse(String id, Context context);

    /**
     * Remove an App Attach Package.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteById(String id);

    /**
     * Remove an App Attach Package.
     * 
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> deleteByIdWithResponse(String id, Context context);

    /**
     * Begins definition for a new AppAttachPackage resource.
     * 
     * @param name resource name.
     * @return the first stage of the new AppAttachPackage definition.
     */
    AppAttachPackage.DefinitionStages.Blank define(String name);
}
