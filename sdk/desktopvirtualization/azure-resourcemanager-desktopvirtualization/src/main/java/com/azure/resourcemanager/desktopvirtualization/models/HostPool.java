// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.models;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.desktopvirtualization.fluent.models.HostPoolInner;
import java.util.List;
import java.util.Map;

/** An immutable client-side representation of HostPool. */
public interface HostPool {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     *
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     *
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the friendlyName property: Friendly name of HostPool.
     *
     * @return the friendlyName value.
     */
    String friendlyName();

    /**
     * Gets the description property: Description of HostPool.
     *
     * @return the description value.
     */
    String description();

    /**
     * Gets the hostPoolType property: HostPool type for desktop.
     *
     * @return the hostPoolType value.
     */
    HostPoolType hostPoolType();

    /**
     * Gets the personalDesktopAssignmentType property: PersonalDesktopAssignment type for HostPool.
     *
     * @return the personalDesktopAssignmentType value.
     */
    PersonalDesktopAssignmentType personalDesktopAssignmentType();

    /**
     * Gets the customRdpProperty property: Custom rdp property of HostPool.
     *
     * @return the customRdpProperty value.
     */
    String customRdpProperty();

    /**
     * Gets the maxSessionLimit property: The max session limit of HostPool.
     *
     * @return the maxSessionLimit value.
     */
    Integer maxSessionLimit();

    /**
     * Gets the loadBalancerType property: The type of the load balancer.
     *
     * @return the loadBalancerType value.
     */
    LoadBalancerType loadBalancerType();

    /**
     * Gets the ring property: The ring number of HostPool.
     *
     * @return the ring value.
     */
    Integer ring();

    /**
     * Gets the validationEnvironment property: Is validation environment.
     *
     * @return the validationEnvironment value.
     */
    Boolean validationEnvironment();

    /**
     * Gets the registrationInfo property: The registration info of HostPool.
     *
     * @return the registrationInfo value.
     */
    RegistrationInfo registrationInfo();

    /**
     * Gets the vmTemplate property: VM template for sessionhosts configuration within hostpool.
     *
     * @return the vmTemplate value.
     */
    String vmTemplate();

    /**
     * Gets the applicationGroupReferences property: List of applicationGroup links.
     *
     * @return the applicationGroupReferences value.
     */
    List<String> applicationGroupReferences();

    /**
     * Gets the ssoContext property: Path to keyvault containing ssoContext secret.
     *
     * @return the ssoContext value.
     */
    String ssoContext();

    /**
     * Gets the ssoadfsAuthority property: URL to customer ADFS server for signing WVD SSO certificates.
     *
     * @return the ssoadfsAuthority value.
     */
    String ssoadfsAuthority();

    /**
     * Gets the ssoClientId property: ClientId for the registered Relying Party used to issue WVD SSO certificates.
     *
     * @return the ssoClientId value.
     */
    String ssoClientId();

    /**
     * Gets the ssoClientSecretKeyVaultPath property: Path to Azure KeyVault storing the secret used for communication
     * to ADFS.
     *
     * @return the ssoClientSecretKeyVaultPath value.
     */
    String ssoClientSecretKeyVaultPath();

    /**
     * Gets the ssoSecretType property: The type of single sign on Secret Type.
     *
     * @return the ssoSecretType value.
     */
    SsoSecretType ssoSecretType();

    /**
     * Gets the preferredAppGroupType property: The type of preferred application group type, default to Desktop
     * Application Group.
     *
     * @return the preferredAppGroupType value.
     */
    PreferredAppGroupType preferredAppGroupType();

    /**
     * Gets the startVMOnConnect property: The flag to turn on/off StartVMOnConnect feature.
     *
     * @return the startVMOnConnect value.
     */
    Boolean startVMOnConnect();

    /**
     * Gets the region of the resource.
     *
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     *
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the inner com.azure.resourcemanager.desktopvirtualization.fluent.models.HostPoolInner object.
     *
     * @return the inner object.
     */
    HostPoolInner innerModel();

    /** The entirety of the HostPool definition. */
    interface Definition
        extends DefinitionStages.Blank,
            DefinitionStages.WithLocation,
            DefinitionStages.WithResourceGroup,
            DefinitionStages.WithHostPoolType,
            DefinitionStages.WithLoadBalancerType,
            DefinitionStages.WithPreferredAppGroupType,
            DefinitionStages.WithCreate {
    }
    /** The HostPool definition stages. */
    interface DefinitionStages {
        /** The first stage of the HostPool definition. */
        interface Blank extends WithLocation {
        }
        /** The stage of the HostPool definition allowing to specify location. */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(Region location);

            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(String location);
        }
        /** The stage of the HostPool definition allowing to specify parent resource. */
        interface WithResourceGroup {
            /**
             * Specifies resourceGroupName.
             *
             * @param resourceGroupName The name of the resource group. The name is case insensitive.
             * @return the next definition stage.
             */
            WithHostPoolType withExistingResourceGroup(String resourceGroupName);
        }
        /** The stage of the HostPool definition allowing to specify hostPoolType. */
        interface WithHostPoolType {
            /**
             * Specifies the hostPoolType property: HostPool type for desktop..
             *
             * @param hostPoolType HostPool type for desktop.
             * @return the next definition stage.
             */
            WithLoadBalancerType withHostPoolType(HostPoolType hostPoolType);
        }
        /** The stage of the HostPool definition allowing to specify loadBalancerType. */
        interface WithLoadBalancerType {
            /**
             * Specifies the loadBalancerType property: The type of the load balancer..
             *
             * @param loadBalancerType The type of the load balancer.
             * @return the next definition stage.
             */
            WithPreferredAppGroupType withLoadBalancerType(LoadBalancerType loadBalancerType);
        }
        /** The stage of the HostPool definition allowing to specify preferredAppGroupType. */
        interface WithPreferredAppGroupType {
            /**
             * Specifies the preferredAppGroupType property: The type of preferred application group type, default to
             * Desktop Application Group.
             *
             * @param preferredAppGroupType The type of preferred application group type, default to Desktop Application
             *     Group.
             * @return the next definition stage.
             */
            WithCreate withPreferredAppGroupType(PreferredAppGroupType preferredAppGroupType);
        }
        /**
         * The stage of the HostPool definition which contains all the minimum required properties for the resource to
         * be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithTags,
                DefinitionStages.WithFriendlyName,
                DefinitionStages.WithDescription,
                DefinitionStages.WithPersonalDesktopAssignmentType,
                DefinitionStages.WithCustomRdpProperty,
                DefinitionStages.WithMaxSessionLimit,
                DefinitionStages.WithRing,
                DefinitionStages.WithValidationEnvironment,
                DefinitionStages.WithRegistrationInfo,
                DefinitionStages.WithVmTemplate,
                DefinitionStages.WithSsoContext,
                DefinitionStages.WithSsoadfsAuthority,
                DefinitionStages.WithSsoClientId,
                DefinitionStages.WithSsoClientSecretKeyVaultPath,
                DefinitionStages.WithSsoSecretType,
                DefinitionStages.WithStartVMOnConnect {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            HostPool create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            HostPool create(Context context);
        }
        /** The stage of the HostPool definition allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }
        /** The stage of the HostPool definition allowing to specify friendlyName. */
        interface WithFriendlyName {
            /**
             * Specifies the friendlyName property: Friendly name of HostPool..
             *
             * @param friendlyName Friendly name of HostPool.
             * @return the next definition stage.
             */
            WithCreate withFriendlyName(String friendlyName);
        }
        /** The stage of the HostPool definition allowing to specify description. */
        interface WithDescription {
            /**
             * Specifies the description property: Description of HostPool..
             *
             * @param description Description of HostPool.
             * @return the next definition stage.
             */
            WithCreate withDescription(String description);
        }
        /** The stage of the HostPool definition allowing to specify personalDesktopAssignmentType. */
        interface WithPersonalDesktopAssignmentType {
            /**
             * Specifies the personalDesktopAssignmentType property: PersonalDesktopAssignment type for HostPool..
             *
             * @param personalDesktopAssignmentType PersonalDesktopAssignment type for HostPool.
             * @return the next definition stage.
             */
            WithCreate withPersonalDesktopAssignmentType(PersonalDesktopAssignmentType personalDesktopAssignmentType);
        }
        /** The stage of the HostPool definition allowing to specify customRdpProperty. */
        interface WithCustomRdpProperty {
            /**
             * Specifies the customRdpProperty property: Custom rdp property of HostPool..
             *
             * @param customRdpProperty Custom rdp property of HostPool.
             * @return the next definition stage.
             */
            WithCreate withCustomRdpProperty(String customRdpProperty);
        }
        /** The stage of the HostPool definition allowing to specify maxSessionLimit. */
        interface WithMaxSessionLimit {
            /**
             * Specifies the maxSessionLimit property: The max session limit of HostPool..
             *
             * @param maxSessionLimit The max session limit of HostPool.
             * @return the next definition stage.
             */
            WithCreate withMaxSessionLimit(Integer maxSessionLimit);
        }
        /** The stage of the HostPool definition allowing to specify ring. */
        interface WithRing {
            /**
             * Specifies the ring property: The ring number of HostPool..
             *
             * @param ring The ring number of HostPool.
             * @return the next definition stage.
             */
            WithCreate withRing(Integer ring);
        }
        /** The stage of the HostPool definition allowing to specify validationEnvironment. */
        interface WithValidationEnvironment {
            /**
             * Specifies the validationEnvironment property: Is validation environment..
             *
             * @param validationEnvironment Is validation environment.
             * @return the next definition stage.
             */
            WithCreate withValidationEnvironment(Boolean validationEnvironment);
        }
        /** The stage of the HostPool definition allowing to specify registrationInfo. */
        interface WithRegistrationInfo {
            /**
             * Specifies the registrationInfo property: The registration info of HostPool..
             *
             * @param registrationInfo The registration info of HostPool.
             * @return the next definition stage.
             */
            WithCreate withRegistrationInfo(RegistrationInfo registrationInfo);
        }
        /** The stage of the HostPool definition allowing to specify vmTemplate. */
        interface WithVmTemplate {
            /**
             * Specifies the vmTemplate property: VM template for sessionhosts configuration within hostpool..
             *
             * @param vmTemplate VM template for sessionhosts configuration within hostpool.
             * @return the next definition stage.
             */
            WithCreate withVmTemplate(String vmTemplate);
        }
        /** The stage of the HostPool definition allowing to specify ssoContext. */
        interface WithSsoContext {
            /**
             * Specifies the ssoContext property: Path to keyvault containing ssoContext secret..
             *
             * @param ssoContext Path to keyvault containing ssoContext secret.
             * @return the next definition stage.
             */
            WithCreate withSsoContext(String ssoContext);
        }
        /** The stage of the HostPool definition allowing to specify ssoadfsAuthority. */
        interface WithSsoadfsAuthority {
            /**
             * Specifies the ssoadfsAuthority property: URL to customer ADFS server for signing WVD SSO certificates..
             *
             * @param ssoadfsAuthority URL to customer ADFS server for signing WVD SSO certificates.
             * @return the next definition stage.
             */
            WithCreate withSsoadfsAuthority(String ssoadfsAuthority);
        }
        /** The stage of the HostPool definition allowing to specify ssoClientId. */
        interface WithSsoClientId {
            /**
             * Specifies the ssoClientId property: ClientId for the registered Relying Party used to issue WVD SSO
             * certificates..
             *
             * @param ssoClientId ClientId for the registered Relying Party used to issue WVD SSO certificates.
             * @return the next definition stage.
             */
            WithCreate withSsoClientId(String ssoClientId);
        }
        /** The stage of the HostPool definition allowing to specify ssoClientSecretKeyVaultPath. */
        interface WithSsoClientSecretKeyVaultPath {
            /**
             * Specifies the ssoClientSecretKeyVaultPath property: Path to Azure KeyVault storing the secret used for
             * communication to ADFS..
             *
             * @param ssoClientSecretKeyVaultPath Path to Azure KeyVault storing the secret used for communication to
             *     ADFS.
             * @return the next definition stage.
             */
            WithCreate withSsoClientSecretKeyVaultPath(String ssoClientSecretKeyVaultPath);
        }
        /** The stage of the HostPool definition allowing to specify ssoSecretType. */
        interface WithSsoSecretType {
            /**
             * Specifies the ssoSecretType property: The type of single sign on Secret Type..
             *
             * @param ssoSecretType The type of single sign on Secret Type.
             * @return the next definition stage.
             */
            WithCreate withSsoSecretType(SsoSecretType ssoSecretType);
        }
        /** The stage of the HostPool definition allowing to specify startVMOnConnect. */
        interface WithStartVMOnConnect {
            /**
             * Specifies the startVMOnConnect property: The flag to turn on/off StartVMOnConnect feature..
             *
             * @param startVMOnConnect The flag to turn on/off StartVMOnConnect feature.
             * @return the next definition stage.
             */
            WithCreate withStartVMOnConnect(Boolean startVMOnConnect);
        }
    }
    /**
     * Begins update for the HostPool resource.
     *
     * @return the stage of resource update.
     */
    HostPool.Update update();

    /** The template for HostPool update. */
    interface Update
        extends UpdateStages.WithTags,
            UpdateStages.WithFriendlyName,
            UpdateStages.WithDescription,
            UpdateStages.WithCustomRdpProperty,
            UpdateStages.WithMaxSessionLimit,
            UpdateStages.WithPersonalDesktopAssignmentType,
            UpdateStages.WithLoadBalancerType,
            UpdateStages.WithRing,
            UpdateStages.WithValidationEnvironment,
            UpdateStages.WithRegistrationInfo,
            UpdateStages.WithVmTemplate,
            UpdateStages.WithSsoContext,
            UpdateStages.WithSsoadfsAuthority,
            UpdateStages.WithSsoClientId,
            UpdateStages.WithSsoClientSecretKeyVaultPath,
            UpdateStages.WithSsoSecretType,
            UpdateStages.WithPreferredAppGroupType,
            UpdateStages.WithStartVMOnConnect {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        HostPool apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        HostPool apply(Context context);
    }
    /** The HostPool update stages. */
    interface UpdateStages {
        /** The stage of the HostPool update allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: tags to be updated.
             *
             * @param tags tags to be updated.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }
        /** The stage of the HostPool update allowing to specify friendlyName. */
        interface WithFriendlyName {
            /**
             * Specifies the friendlyName property: Friendly name of HostPool..
             *
             * @param friendlyName Friendly name of HostPool.
             * @return the next definition stage.
             */
            Update withFriendlyName(String friendlyName);
        }
        /** The stage of the HostPool update allowing to specify description. */
        interface WithDescription {
            /**
             * Specifies the description property: Description of HostPool..
             *
             * @param description Description of HostPool.
             * @return the next definition stage.
             */
            Update withDescription(String description);
        }
        /** The stage of the HostPool update allowing to specify customRdpProperty. */
        interface WithCustomRdpProperty {
            /**
             * Specifies the customRdpProperty property: Custom rdp property of HostPool..
             *
             * @param customRdpProperty Custom rdp property of HostPool.
             * @return the next definition stage.
             */
            Update withCustomRdpProperty(String customRdpProperty);
        }
        /** The stage of the HostPool update allowing to specify maxSessionLimit. */
        interface WithMaxSessionLimit {
            /**
             * Specifies the maxSessionLimit property: The max session limit of HostPool..
             *
             * @param maxSessionLimit The max session limit of HostPool.
             * @return the next definition stage.
             */
            Update withMaxSessionLimit(Integer maxSessionLimit);
        }
        /** The stage of the HostPool update allowing to specify personalDesktopAssignmentType. */
        interface WithPersonalDesktopAssignmentType {
            /**
             * Specifies the personalDesktopAssignmentType property: PersonalDesktopAssignment type for HostPool..
             *
             * @param personalDesktopAssignmentType PersonalDesktopAssignment type for HostPool.
             * @return the next definition stage.
             */
            Update withPersonalDesktopAssignmentType(PersonalDesktopAssignmentType personalDesktopAssignmentType);
        }
        /** The stage of the HostPool update allowing to specify loadBalancerType. */
        interface WithLoadBalancerType {
            /**
             * Specifies the loadBalancerType property: The type of the load balancer..
             *
             * @param loadBalancerType The type of the load balancer.
             * @return the next definition stage.
             */
            Update withLoadBalancerType(LoadBalancerType loadBalancerType);
        }
        /** The stage of the HostPool update allowing to specify ring. */
        interface WithRing {
            /**
             * Specifies the ring property: The ring number of HostPool..
             *
             * @param ring The ring number of HostPool.
             * @return the next definition stage.
             */
            Update withRing(Integer ring);
        }
        /** The stage of the HostPool update allowing to specify validationEnvironment. */
        interface WithValidationEnvironment {
            /**
             * Specifies the validationEnvironment property: Is validation environment..
             *
             * @param validationEnvironment Is validation environment.
             * @return the next definition stage.
             */
            Update withValidationEnvironment(Boolean validationEnvironment);
        }
        /** The stage of the HostPool update allowing to specify registrationInfo. */
        interface WithRegistrationInfo {
            /**
             * Specifies the registrationInfo property: The registration info of HostPool..
             *
             * @param registrationInfo The registration info of HostPool.
             * @return the next definition stage.
             */
            Update withRegistrationInfo(RegistrationInfoPatch registrationInfo);
        }
        /** The stage of the HostPool update allowing to specify vmTemplate. */
        interface WithVmTemplate {
            /**
             * Specifies the vmTemplate property: VM template for sessionhosts configuration within hostpool..
             *
             * @param vmTemplate VM template for sessionhosts configuration within hostpool.
             * @return the next definition stage.
             */
            Update withVmTemplate(String vmTemplate);
        }
        /** The stage of the HostPool update allowing to specify ssoContext. */
        interface WithSsoContext {
            /**
             * Specifies the ssoContext property: Path to keyvault containing ssoContext secret..
             *
             * @param ssoContext Path to keyvault containing ssoContext secret.
             * @return the next definition stage.
             */
            Update withSsoContext(String ssoContext);
        }
        /** The stage of the HostPool update allowing to specify ssoadfsAuthority. */
        interface WithSsoadfsAuthority {
            /**
             * Specifies the ssoadfsAuthority property: URL to customer ADFS server for signing WVD SSO certificates..
             *
             * @param ssoadfsAuthority URL to customer ADFS server for signing WVD SSO certificates.
             * @return the next definition stage.
             */
            Update withSsoadfsAuthority(String ssoadfsAuthority);
        }
        /** The stage of the HostPool update allowing to specify ssoClientId. */
        interface WithSsoClientId {
            /**
             * Specifies the ssoClientId property: ClientId for the registered Relying Party used to issue WVD SSO
             * certificates..
             *
             * @param ssoClientId ClientId for the registered Relying Party used to issue WVD SSO certificates.
             * @return the next definition stage.
             */
            Update withSsoClientId(String ssoClientId);
        }
        /** The stage of the HostPool update allowing to specify ssoClientSecretKeyVaultPath. */
        interface WithSsoClientSecretKeyVaultPath {
            /**
             * Specifies the ssoClientSecretKeyVaultPath property: Path to Azure KeyVault storing the secret used for
             * communication to ADFS..
             *
             * @param ssoClientSecretKeyVaultPath Path to Azure KeyVault storing the secret used for communication to
             *     ADFS.
             * @return the next definition stage.
             */
            Update withSsoClientSecretKeyVaultPath(String ssoClientSecretKeyVaultPath);
        }
        /** The stage of the HostPool update allowing to specify ssoSecretType. */
        interface WithSsoSecretType {
            /**
             * Specifies the ssoSecretType property: The type of single sign on Secret Type..
             *
             * @param ssoSecretType The type of single sign on Secret Type.
             * @return the next definition stage.
             */
            Update withSsoSecretType(SsoSecretType ssoSecretType);
        }
        /** The stage of the HostPool update allowing to specify preferredAppGroupType. */
        interface WithPreferredAppGroupType {
            /**
             * Specifies the preferredAppGroupType property: The type of preferred application group type, default to
             * Desktop Application Group.
             *
             * @param preferredAppGroupType The type of preferred application group type, default to Desktop Application
             *     Group.
             * @return the next definition stage.
             */
            Update withPreferredAppGroupType(PreferredAppGroupType preferredAppGroupType);
        }
        /** The stage of the HostPool update allowing to specify startVMOnConnect. */
        interface WithStartVMOnConnect {
            /**
             * Specifies the startVMOnConnect property: The flag to turn on/off StartVMOnConnect feature..
             *
             * @param startVMOnConnect The flag to turn on/off StartVMOnConnect feature.
             * @return the next definition stage.
             */
            Update withStartVMOnConnect(Boolean startVMOnConnect);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    HostPool refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    HostPool refresh(Context context);
}
