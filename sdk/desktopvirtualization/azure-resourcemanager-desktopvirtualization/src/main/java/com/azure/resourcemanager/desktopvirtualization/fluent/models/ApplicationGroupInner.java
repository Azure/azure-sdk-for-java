// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.desktopvirtualization.models.ApplicationGroupType;
import com.azure.resourcemanager.desktopvirtualization.models.MigrationRequestProperties;
import com.azure.resourcemanager.desktopvirtualization.models.ResourceModelWithAllowedPropertySet;
import com.azure.resourcemanager.desktopvirtualization.models.ResourceModelWithAllowedPropertySetIdentity;
import com.azure.resourcemanager.desktopvirtualization.models.ResourceModelWithAllowedPropertySetPlan;
import com.azure.resourcemanager.desktopvirtualization.models.ResourceModelWithAllowedPropertySetSku;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/** Represents a ApplicationGroup definition. */
@JsonFlatten
@Fluent
public class ApplicationGroupInner extends ResourceModelWithAllowedPropertySet {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ApplicationGroupInner.class);

    /*
     * ObjectId of ApplicationGroup. (internal use)
     */
    @JsonProperty(value = "properties.objectId", access = JsonProperty.Access.WRITE_ONLY)
    private String objectId;

    /*
     * Description of ApplicationGroup.
     */
    @JsonProperty(value = "properties.description")
    private String description;

    /*
     * Friendly name of ApplicationGroup.
     */
    @JsonProperty(value = "properties.friendlyName")
    private String friendlyName;

    /*
     * HostPool arm path of ApplicationGroup.
     */
    @JsonProperty(value = "properties.hostPoolArmPath", required = true)
    private String hostPoolArmPath;

    /*
     * Workspace arm path of ApplicationGroup.
     */
    @JsonProperty(value = "properties.workspaceArmPath", access = JsonProperty.Access.WRITE_ONLY)
    private String workspaceArmPath;

    /*
     * Resource Type of ApplicationGroup.
     */
    @JsonProperty(value = "properties.applicationGroupType", required = true)
    private ApplicationGroupType applicationGroupType;

    /*
     * The registration info of HostPool.
     */
    @JsonProperty(value = "properties.migrationRequest")
    private MigrationRequestProperties migrationRequest;

    /*
     * Is cloud pc resource.
     */
    @JsonProperty(value = "properties.cloudPcResource", access = JsonProperty.Access.WRITE_ONLY)
    private Boolean cloudPcResource;

    /**
     * Get the objectId property: ObjectId of ApplicationGroup. (internal use).
     *
     * @return the objectId value.
     */
    public String objectId() {
        return this.objectId;
    }

    /**
     * Get the description property: Description of ApplicationGroup.
     *
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: Description of ApplicationGroup.
     *
     * @param description the description value to set.
     * @return the ApplicationGroupInner object itself.
     */
    public ApplicationGroupInner withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the friendlyName property: Friendly name of ApplicationGroup.
     *
     * @return the friendlyName value.
     */
    public String friendlyName() {
        return this.friendlyName;
    }

    /**
     * Set the friendlyName property: Friendly name of ApplicationGroup.
     *
     * @param friendlyName the friendlyName value to set.
     * @return the ApplicationGroupInner object itself.
     */
    public ApplicationGroupInner withFriendlyName(String friendlyName) {
        this.friendlyName = friendlyName;
        return this;
    }

    /**
     * Get the hostPoolArmPath property: HostPool arm path of ApplicationGroup.
     *
     * @return the hostPoolArmPath value.
     */
    public String hostPoolArmPath() {
        return this.hostPoolArmPath;
    }

    /**
     * Set the hostPoolArmPath property: HostPool arm path of ApplicationGroup.
     *
     * @param hostPoolArmPath the hostPoolArmPath value to set.
     * @return the ApplicationGroupInner object itself.
     */
    public ApplicationGroupInner withHostPoolArmPath(String hostPoolArmPath) {
        this.hostPoolArmPath = hostPoolArmPath;
        return this;
    }

    /**
     * Get the workspaceArmPath property: Workspace arm path of ApplicationGroup.
     *
     * @return the workspaceArmPath value.
     */
    public String workspaceArmPath() {
        return this.workspaceArmPath;
    }

    /**
     * Get the applicationGroupType property: Resource Type of ApplicationGroup.
     *
     * @return the applicationGroupType value.
     */
    public ApplicationGroupType applicationGroupType() {
        return this.applicationGroupType;
    }

    /**
     * Set the applicationGroupType property: Resource Type of ApplicationGroup.
     *
     * @param applicationGroupType the applicationGroupType value to set.
     * @return the ApplicationGroupInner object itself.
     */
    public ApplicationGroupInner withApplicationGroupType(ApplicationGroupType applicationGroupType) {
        this.applicationGroupType = applicationGroupType;
        return this;
    }

    /**
     * Get the migrationRequest property: The registration info of HostPool.
     *
     * @return the migrationRequest value.
     */
    public MigrationRequestProperties migrationRequest() {
        return this.migrationRequest;
    }

    /**
     * Set the migrationRequest property: The registration info of HostPool.
     *
     * @param migrationRequest the migrationRequest value to set.
     * @return the ApplicationGroupInner object itself.
     */
    public ApplicationGroupInner withMigrationRequest(MigrationRequestProperties migrationRequest) {
        this.migrationRequest = migrationRequest;
        return this;
    }

    /**
     * Get the cloudPcResource property: Is cloud pc resource.
     *
     * @return the cloudPcResource value.
     */
    public Boolean cloudPcResource() {
        return this.cloudPcResource;
    }

    /** {@inheritDoc} */
    @Override
    public ApplicationGroupInner withManagedBy(String managedBy) {
        super.withManagedBy(managedBy);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ApplicationGroupInner withKind(String kind) {
        super.withKind(kind);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ApplicationGroupInner withIdentity(ResourceModelWithAllowedPropertySetIdentity identity) {
        super.withIdentity(identity);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ApplicationGroupInner withSku(ResourceModelWithAllowedPropertySetSku sku) {
        super.withSku(sku);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ApplicationGroupInner withPlan(ResourceModelWithAllowedPropertySetPlan plan) {
        super.withPlan(plan);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ApplicationGroupInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ApplicationGroupInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (hostPoolArmPath() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property hostPoolArmPath in model ApplicationGroupInner"));
        }
        if (applicationGroupType() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property applicationGroupType in model ApplicationGroupInner"));
        }
        if (migrationRequest() != null) {
            migrationRequest().validate();
        }
    }
}
