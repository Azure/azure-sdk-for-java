// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.desktopvirtualization.fluent.models.ScalingPlanProperties;
import com.azure.resourcemanager.desktopvirtualization.models.ScalingHostPoolReference;
import com.azure.resourcemanager.desktopvirtualization.models.ScalingHostPoolType;
import com.azure.resourcemanager.desktopvirtualization.models.ScalingSchedule;
import com.azure.resourcemanager.desktopvirtualization.models.ScalingScheduleDaysOfWeekItem;
import com.azure.resourcemanager.desktopvirtualization.models.SessionHostLoadBalancingAlgorithm;
import com.azure.resourcemanager.desktopvirtualization.models.StopHostsWhen;
import com.azure.resourcemanager.desktopvirtualization.models.Time;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ScalingPlanPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScalingPlanProperties model = BinaryData.fromString(
            "{\"objectId\":\"mjmwvvjektcx\",\"description\":\"nhwlrsffrzpwvl\",\"friendlyName\":\"q\",\"timeZone\":\"biqylihkaet\",\"hostPoolType\":\"Pooled\",\"exclusionTag\":\"fcivfsnkym\",\"schedules\":[{\"name\":\"hjfbebrjcxe\",\"daysOfWeek\":[\"Sunday\",\"Thursday\",\"Tuesday\",\"Thursday\"],\"rampUpStartTime\":{\"hour\":107980614,\"minute\":1379118334},\"rampUpLoadBalancingAlgorithm\":\"DepthFirst\",\"rampUpMinimumHostsPct\":871472535,\"rampUpCapacityThresholdPct\":380913381,\"peakStartTime\":{\"hour\":1236632858,\"minute\":468707866},\"peakLoadBalancingAlgorithm\":\"DepthFirst\",\"rampDownStartTime\":{\"hour\":536989913,\"minute\":1103023268},\"rampDownLoadBalancingAlgorithm\":\"BreadthFirst\",\"rampDownMinimumHostsPct\":1195568358,\"rampDownCapacityThresholdPct\":573812586,\"rampDownForceLogoffUsers\":false,\"rampDownStopHostsWhen\":\"ZeroActiveSessions\",\"rampDownWaitTimeMinutes\":1238878906,\"rampDownNotificationMessage\":\"ujqgidok\",\"offPeakStartTime\":{\"hour\":792619615,\"minute\":10143119},\"offPeakLoadBalancingAlgorithm\":\"BreadthFirst\"},{\"name\":\"gvcl\",\"daysOfWeek\":[\"Thursday\",\"Wednesday\",\"Friday\"],\"rampUpStartTime\":{\"hour\":298785749,\"minute\":1435851366},\"rampUpLoadBalancingAlgorithm\":\"BreadthFirst\",\"rampUpMinimumHostsPct\":331647248,\"rampUpCapacityThresholdPct\":991237131,\"peakStartTime\":{\"hour\":1537141479,\"minute\":1755265349},\"peakLoadBalancingAlgorithm\":\"BreadthFirst\",\"rampDownStartTime\":{\"hour\":836032675,\"minute\":1589441162},\"rampDownLoadBalancingAlgorithm\":\"BreadthFirst\",\"rampDownMinimumHostsPct\":615517918,\"rampDownCapacityThresholdPct\":1787736845,\"rampDownForceLogoffUsers\":true,\"rampDownStopHostsWhen\":\"ZeroSessions\",\"rampDownWaitTimeMinutes\":284383009,\"rampDownNotificationMessage\":\"ec\",\"offPeakStartTime\":{\"hour\":1266686553,\"minute\":1976417253},\"offPeakLoadBalancingAlgorithm\":\"BreadthFirst\"},{\"name\":\"qkkrb\",\"daysOfWeek\":[\"Tuesday\",\"Saturday\"],\"rampUpStartTime\":{\"hour\":481409327,\"minute\":1233954324},\"rampUpLoadBalancingAlgorithm\":\"DepthFirst\",\"rampUpMinimumHostsPct\":1233074363,\"rampUpCapacityThresholdPct\":595725350,\"peakStartTime\":{\"hour\":266686286,\"minute\":599393599},\"peakLoadBalancingAlgorithm\":\"BreadthFirst\",\"rampDownStartTime\":{\"hour\":1526069036,\"minute\":1610498845},\"rampDownLoadBalancingAlgorithm\":\"BreadthFirst\",\"rampDownMinimumHostsPct\":315992042,\"rampDownCapacityThresholdPct\":2071345899,\"rampDownForceLogoffUsers\":true,\"rampDownStopHostsWhen\":\"ZeroActiveSessions\",\"rampDownWaitTimeMinutes\":318334591,\"rampDownNotificationMessage\":\"yydhibnuqqk\",\"offPeakStartTime\":{\"hour\":1850827957,\"minute\":35719444},\"offPeakLoadBalancingAlgorithm\":\"BreadthFirst\"}],\"hostPoolReferences\":[{\"hostPoolArmPath\":\"qagnbuyn\",\"scalingPlanEnabled\":true}]}")
            .toObject(ScalingPlanProperties.class);
        Assertions.assertEquals("nhwlrsffrzpwvl", model.description());
        Assertions.assertEquals("q", model.friendlyName());
        Assertions.assertEquals("biqylihkaet", model.timeZone());
        Assertions.assertEquals(ScalingHostPoolType.POOLED, model.hostPoolType());
        Assertions.assertEquals("fcivfsnkym", model.exclusionTag());
        Assertions.assertEquals("hjfbebrjcxe", model.schedules().get(0).name());
        Assertions.assertEquals(ScalingScheduleDaysOfWeekItem.SUNDAY, model.schedules().get(0).daysOfWeek().get(0));
        Assertions.assertEquals(107980614, model.schedules().get(0).rampUpStartTime().hour());
        Assertions.assertEquals(1379118334, model.schedules().get(0).rampUpStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.DEPTH_FIRST,
            model.schedules().get(0).rampUpLoadBalancingAlgorithm());
        Assertions.assertEquals(871472535, model.schedules().get(0).rampUpMinimumHostsPct());
        Assertions.assertEquals(380913381, model.schedules().get(0).rampUpCapacityThresholdPct());
        Assertions.assertEquals(1236632858, model.schedules().get(0).peakStartTime().hour());
        Assertions.assertEquals(468707866, model.schedules().get(0).peakStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.DEPTH_FIRST,
            model.schedules().get(0).peakLoadBalancingAlgorithm());
        Assertions.assertEquals(536989913, model.schedules().get(0).rampDownStartTime().hour());
        Assertions.assertEquals(1103023268, model.schedules().get(0).rampDownStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST,
            model.schedules().get(0).rampDownLoadBalancingAlgorithm());
        Assertions.assertEquals(1195568358, model.schedules().get(0).rampDownMinimumHostsPct());
        Assertions.assertEquals(573812586, model.schedules().get(0).rampDownCapacityThresholdPct());
        Assertions.assertEquals(false, model.schedules().get(0).rampDownForceLogoffUsers());
        Assertions.assertEquals(StopHostsWhen.ZERO_ACTIVE_SESSIONS, model.schedules().get(0).rampDownStopHostsWhen());
        Assertions.assertEquals(1238878906, model.schedules().get(0).rampDownWaitTimeMinutes());
        Assertions.assertEquals("ujqgidok", model.schedules().get(0).rampDownNotificationMessage());
        Assertions.assertEquals(792619615, model.schedules().get(0).offPeakStartTime().hour());
        Assertions.assertEquals(10143119, model.schedules().get(0).offPeakStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST,
            model.schedules().get(0).offPeakLoadBalancingAlgorithm());
        Assertions.assertEquals("qagnbuyn", model.hostPoolReferences().get(0).hostPoolArmPath());
        Assertions.assertEquals(true, model.hostPoolReferences().get(0).scalingPlanEnabled());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScalingPlanProperties model = new ScalingPlanProperties().withDescription("nhwlrsffrzpwvl")
            .withFriendlyName("q")
            .withTimeZone("biqylihkaet")
            .withHostPoolType(ScalingHostPoolType.POOLED)
            .withExclusionTag("fcivfsnkym")
            .withSchedules(Arrays.asList(
                new ScalingSchedule().withName("hjfbebrjcxe")
                    .withDaysOfWeek(
                        Arrays.asList(ScalingScheduleDaysOfWeekItem.SUNDAY, ScalingScheduleDaysOfWeekItem.THURSDAY,
                            ScalingScheduleDaysOfWeekItem.TUESDAY, ScalingScheduleDaysOfWeekItem.THURSDAY))
                    .withRampUpStartTime(new Time().withHour(107980614).withMinute(1379118334))
                    .withRampUpLoadBalancingAlgorithm(SessionHostLoadBalancingAlgorithm.DEPTH_FIRST)
                    .withRampUpMinimumHostsPct(871472535)
                    .withRampUpCapacityThresholdPct(380913381)
                    .withPeakStartTime(new Time().withHour(1236632858).withMinute(468707866))
                    .withPeakLoadBalancingAlgorithm(SessionHostLoadBalancingAlgorithm.DEPTH_FIRST)
                    .withRampDownStartTime(new Time().withHour(536989913).withMinute(1103023268))
                    .withRampDownLoadBalancingAlgorithm(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST)
                    .withRampDownMinimumHostsPct(1195568358)
                    .withRampDownCapacityThresholdPct(573812586)
                    .withRampDownForceLogoffUsers(false)
                    .withRampDownStopHostsWhen(StopHostsWhen.ZERO_ACTIVE_SESSIONS)
                    .withRampDownWaitTimeMinutes(1238878906)
                    .withRampDownNotificationMessage("ujqgidok")
                    .withOffPeakStartTime(new Time().withHour(792619615).withMinute(10143119))
                    .withOffPeakLoadBalancingAlgorithm(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST),
                new ScalingSchedule().withName("gvcl")
                    .withDaysOfWeek(Arrays.asList(ScalingScheduleDaysOfWeekItem.THURSDAY,
                        ScalingScheduleDaysOfWeekItem.WEDNESDAY, ScalingScheduleDaysOfWeekItem.FRIDAY))
                    .withRampUpStartTime(new Time().withHour(298785749).withMinute(1435851366))
                    .withRampUpLoadBalancingAlgorithm(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST)
                    .withRampUpMinimumHostsPct(331647248)
                    .withRampUpCapacityThresholdPct(991237131)
                    .withPeakStartTime(new Time().withHour(1537141479).withMinute(1755265349))
                    .withPeakLoadBalancingAlgorithm(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST)
                    .withRampDownStartTime(new Time().withHour(836032675).withMinute(1589441162))
                    .withRampDownLoadBalancingAlgorithm(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST)
                    .withRampDownMinimumHostsPct(615517918)
                    .withRampDownCapacityThresholdPct(1787736845)
                    .withRampDownForceLogoffUsers(true)
                    .withRampDownStopHostsWhen(StopHostsWhen.ZERO_SESSIONS)
                    .withRampDownWaitTimeMinutes(284383009)
                    .withRampDownNotificationMessage("ec")
                    .withOffPeakStartTime(new Time().withHour(1266686553).withMinute(1976417253))
                    .withOffPeakLoadBalancingAlgorithm(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST),
                new ScalingSchedule().withName("qkkrb")
                    .withDaysOfWeek(
                        Arrays.asList(ScalingScheduleDaysOfWeekItem.TUESDAY, ScalingScheduleDaysOfWeekItem.SATURDAY))
                    .withRampUpStartTime(new Time().withHour(481409327).withMinute(1233954324))
                    .withRampUpLoadBalancingAlgorithm(SessionHostLoadBalancingAlgorithm.DEPTH_FIRST)
                    .withRampUpMinimumHostsPct(1233074363)
                    .withRampUpCapacityThresholdPct(595725350)
                    .withPeakStartTime(new Time().withHour(266686286).withMinute(599393599))
                    .withPeakLoadBalancingAlgorithm(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST)
                    .withRampDownStartTime(new Time().withHour(1526069036).withMinute(1610498845))
                    .withRampDownLoadBalancingAlgorithm(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST)
                    .withRampDownMinimumHostsPct(315992042)
                    .withRampDownCapacityThresholdPct(2071345899)
                    .withRampDownForceLogoffUsers(true)
                    .withRampDownStopHostsWhen(StopHostsWhen.ZERO_ACTIVE_SESSIONS)
                    .withRampDownWaitTimeMinutes(318334591)
                    .withRampDownNotificationMessage("yydhibnuqqk")
                    .withOffPeakStartTime(new Time().withHour(1850827957).withMinute(35719444))
                    .withOffPeakLoadBalancingAlgorithm(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST)))
            .withHostPoolReferences(Arrays
                .asList(new ScalingHostPoolReference().withHostPoolArmPath("qagnbuyn").withScalingPlanEnabled(true)));
        model = BinaryData.fromObject(model).toObject(ScalingPlanProperties.class);
        Assertions.assertEquals("nhwlrsffrzpwvl", model.description());
        Assertions.assertEquals("q", model.friendlyName());
        Assertions.assertEquals("biqylihkaet", model.timeZone());
        Assertions.assertEquals(ScalingHostPoolType.POOLED, model.hostPoolType());
        Assertions.assertEquals("fcivfsnkym", model.exclusionTag());
        Assertions.assertEquals("hjfbebrjcxe", model.schedules().get(0).name());
        Assertions.assertEquals(ScalingScheduleDaysOfWeekItem.SUNDAY, model.schedules().get(0).daysOfWeek().get(0));
        Assertions.assertEquals(107980614, model.schedules().get(0).rampUpStartTime().hour());
        Assertions.assertEquals(1379118334, model.schedules().get(0).rampUpStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.DEPTH_FIRST,
            model.schedules().get(0).rampUpLoadBalancingAlgorithm());
        Assertions.assertEquals(871472535, model.schedules().get(0).rampUpMinimumHostsPct());
        Assertions.assertEquals(380913381, model.schedules().get(0).rampUpCapacityThresholdPct());
        Assertions.assertEquals(1236632858, model.schedules().get(0).peakStartTime().hour());
        Assertions.assertEquals(468707866, model.schedules().get(0).peakStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.DEPTH_FIRST,
            model.schedules().get(0).peakLoadBalancingAlgorithm());
        Assertions.assertEquals(536989913, model.schedules().get(0).rampDownStartTime().hour());
        Assertions.assertEquals(1103023268, model.schedules().get(0).rampDownStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST,
            model.schedules().get(0).rampDownLoadBalancingAlgorithm());
        Assertions.assertEquals(1195568358, model.schedules().get(0).rampDownMinimumHostsPct());
        Assertions.assertEquals(573812586, model.schedules().get(0).rampDownCapacityThresholdPct());
        Assertions.assertEquals(false, model.schedules().get(0).rampDownForceLogoffUsers());
        Assertions.assertEquals(StopHostsWhen.ZERO_ACTIVE_SESSIONS, model.schedules().get(0).rampDownStopHostsWhen());
        Assertions.assertEquals(1238878906, model.schedules().get(0).rampDownWaitTimeMinutes());
        Assertions.assertEquals("ujqgidok", model.schedules().get(0).rampDownNotificationMessage());
        Assertions.assertEquals(792619615, model.schedules().get(0).offPeakStartTime().hour());
        Assertions.assertEquals(10143119, model.schedules().get(0).offPeakStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST,
            model.schedules().get(0).offPeakLoadBalancingAlgorithm());
        Assertions.assertEquals("qagnbuyn", model.hostPoolReferences().get(0).hostPoolArmPath());
        Assertions.assertEquals(true, model.hostPoolReferences().get(0).scalingPlanEnabled());
    }
}
