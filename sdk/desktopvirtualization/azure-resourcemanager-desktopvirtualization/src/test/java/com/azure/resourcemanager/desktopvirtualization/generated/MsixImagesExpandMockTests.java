// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.desktopvirtualization.DesktopVirtualizationManager;
import com.azure.resourcemanager.desktopvirtualization.models.ExpandMsixImage;
import com.azure.resourcemanager.desktopvirtualization.models.MsixImageUri;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class MsixImagesExpandMockTests {
    @Test
    public void testExpand() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"properties\":{\"packageAlias\":\"jcxcjxgrytfmpcyc\",\"imagePath\":\"rmcaykgg\",\"packageName\":\"xu\",\"packageFamilyName\":\"rksxwpndfc\",\"packageFullName\":\"nznthjtw\",\"displayName\":\"aosrxuz\",\"packageRelativePath\":\"amktcqiosmgbzah\",\"isRegularRegistration\":false,\"isActive\":true,\"packageDependencies\":[],\"version\":\"ltlaprltzkatbhj\",\"lastUpdated\":\"2021-11-12T18:26:07Z\",\"packageApplications\":[]},\"id\":\"s\",\"name\":\"qeqala\",\"type\":\"vlagun\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        DesktopVirtualizationManager manager =
            DesktopVirtualizationManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<ExpandMsixImage> response =
            manager
                .msixImages()
                .expand("vefloccsrmozihmi", "g", new MsixImageUri().withUri("txx"), com.azure.core.util.Context.NONE);

        Assertions.assertEquals("jcxcjxgrytfmpcyc", response.iterator().next().packageAlias());
        Assertions.assertEquals("rmcaykgg", response.iterator().next().imagePath());
        Assertions.assertEquals("xu", response.iterator().next().packageName());
        Assertions.assertEquals("rksxwpndfc", response.iterator().next().packageFamilyName());
        Assertions.assertEquals("nznthjtw", response.iterator().next().packageFullName());
        Assertions.assertEquals("aosrxuz", response.iterator().next().displayName());
        Assertions.assertEquals("amktcqiosmgbzah", response.iterator().next().packageRelativePath());
        Assertions.assertEquals(false, response.iterator().next().isRegularRegistration());
        Assertions.assertEquals(true, response.iterator().next().isActive());
        Assertions.assertEquals("ltlaprltzkatbhj", response.iterator().next().version());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-12T18:26:07Z"), response.iterator().next().lastUpdated());
    }
}
