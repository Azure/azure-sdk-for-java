// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.desktopvirtualization.models.PublicNetworkAccess;
import com.azure.resourcemanager.desktopvirtualization.models.WorkspacePatch;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class WorkspacePatchTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WorkspacePatch model = BinaryData.fromString(
            "{\"tags\":{\"pvkmijcmmxdcuf\":\"hwxmnteiwa\",\"cxtbzsg\":\"fsrpymzidnse\",\"sne\":\"yc\",\"flnrosfqpteehzz\":\"mdwzjeiachboo\"},\"properties\":{\"description\":\"yqrimzin\",\"friendlyName\":\"swjdkirso\",\"applicationGroupReferences\":[\"xhcr\",\"nohjt\"],\"publicNetworkAccess\":\"Disabled\"}}")
            .toObject(WorkspacePatch.class);
        Assertions.assertEquals("hwxmnteiwa", model.tags().get("pvkmijcmmxdcuf"));
        Assertions.assertEquals("yqrimzin", model.description());
        Assertions.assertEquals("swjdkirso", model.friendlyName());
        Assertions.assertEquals("xhcr", model.applicationGroupReferences().get(0));
        Assertions.assertEquals(PublicNetworkAccess.DISABLED, model.publicNetworkAccess());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WorkspacePatch model = new WorkspacePatch()
            .withTags(mapOf("pvkmijcmmxdcuf", "hwxmnteiwa", "cxtbzsg", "fsrpymzidnse", "sne", "yc", "flnrosfqpteehzz",
                "mdwzjeiachboo"))
            .withDescription("yqrimzin")
            .withFriendlyName("swjdkirso")
            .withApplicationGroupReferences(Arrays.asList("xhcr", "nohjt"))
            .withPublicNetworkAccess(PublicNetworkAccess.DISABLED);
        model = BinaryData.fromObject(model).toObject(WorkspacePatch.class);
        Assertions.assertEquals("hwxmnteiwa", model.tags().get("pvkmijcmmxdcuf"));
        Assertions.assertEquals("yqrimzin", model.description());
        Assertions.assertEquals("swjdkirso", model.friendlyName());
        Assertions.assertEquals("xhcr", model.applicationGroupReferences().get(0));
        Assertions.assertEquals(PublicNetworkAccess.DISABLED, model.publicNetworkAccess());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
