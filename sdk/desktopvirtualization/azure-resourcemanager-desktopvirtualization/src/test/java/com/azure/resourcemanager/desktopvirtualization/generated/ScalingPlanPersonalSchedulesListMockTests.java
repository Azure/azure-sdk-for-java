// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.desktopvirtualization.DesktopVirtualizationManager;
import com.azure.resourcemanager.desktopvirtualization.models.DayOfWeek;
import com.azure.resourcemanager.desktopvirtualization.models.ScalingPlanPersonalSchedule;
import com.azure.resourcemanager.desktopvirtualization.models.SessionHandlingOperation;
import com.azure.resourcemanager.desktopvirtualization.models.SetStartVMOnConnect;
import com.azure.resourcemanager.desktopvirtualization.models.StartupBehavior;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ScalingPlanPersonalSchedulesListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"daysOfWeek\":[\"Monday\",\"Friday\"],\"rampUpStartTime\":{\"hour\":384841052,\"minute\":1302563571},\"rampUpAutoStartHosts\":\"All\",\"rampUpStartVMOnConnect\":\"Disable\",\"rampUpActionOnDisconnect\":\"None\",\"rampUpMinutesToWaitOnDisconnect\":569544642,\"rampUpActionOnLogoff\":\"Hibernate\",\"rampUpMinutesToWaitOnLogoff\":937935605,\"peakStartTime\":{\"hour\":149368324,\"minute\":1258404942},\"peakStartVMOnConnect\":\"Enable\",\"peakActionOnDisconnect\":\"Hibernate\",\"peakMinutesToWaitOnDisconnect\":1055328892,\"peakActionOnLogoff\":\"Hibernate\",\"peakMinutesToWaitOnLogoff\":716318057,\"rampDownStartTime\":{\"hour\":1761348556,\"minute\":620018681},\"rampDownStartVMOnConnect\":\"Disable\",\"rampDownActionOnDisconnect\":\"Deallocate\",\"rampDownMinutesToWaitOnDisconnect\":971775646,\"rampDownActionOnLogoff\":\"None\",\"rampDownMinutesToWaitOnLogoff\":1389401676,\"offPeakStartTime\":{\"hour\":537279980,\"minute\":2138808813},\"offPeakStartVMOnConnect\":\"Disable\",\"offPeakActionOnDisconnect\":\"Hibernate\",\"offPeakMinutesToWaitOnDisconnect\":1546615539,\"offPeakActionOnLogoff\":\"None\",\"offPeakMinutesToWaitOnLogoff\":1583480383},\"id\":\"tnjadhq\",\"name\":\"aw\",\"type\":\"qoyueayfbpcmsplb\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DesktopVirtualizationManager manager = DesktopVirtualizationManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<ScalingPlanPersonalSchedule> response = manager.scalingPlanPersonalSchedules()
            .list("gypxrxvbfihwuhvc", "a", 64697059, true, 2010585731, com.azure.core.util.Context.NONE);

        Assertions.assertEquals(DayOfWeek.MONDAY, response.iterator().next().daysOfWeek().get(0));
        Assertions.assertEquals(384841052, response.iterator().next().rampUpStartTime().hour());
        Assertions.assertEquals(1302563571, response.iterator().next().rampUpStartTime().minute());
        Assertions.assertEquals(StartupBehavior.ALL, response.iterator().next().rampUpAutoStartHosts());
        Assertions.assertEquals(SetStartVMOnConnect.DISABLE, response.iterator().next().rampUpStartVMOnConnect());
        Assertions.assertEquals(SessionHandlingOperation.NONE, response.iterator().next().rampUpActionOnDisconnect());
        Assertions.assertEquals(569544642, response.iterator().next().rampUpMinutesToWaitOnDisconnect());
        Assertions.assertEquals(SessionHandlingOperation.HIBERNATE, response.iterator().next().rampUpActionOnLogoff());
        Assertions.assertEquals(937935605, response.iterator().next().rampUpMinutesToWaitOnLogoff());
        Assertions.assertEquals(149368324, response.iterator().next().peakStartTime().hour());
        Assertions.assertEquals(1258404942, response.iterator().next().peakStartTime().minute());
        Assertions.assertEquals(SetStartVMOnConnect.ENABLE, response.iterator().next().peakStartVMOnConnect());
        Assertions.assertEquals(SessionHandlingOperation.HIBERNATE,
            response.iterator().next().peakActionOnDisconnect());
        Assertions.assertEquals(1055328892, response.iterator().next().peakMinutesToWaitOnDisconnect());
        Assertions.assertEquals(SessionHandlingOperation.HIBERNATE, response.iterator().next().peakActionOnLogoff());
        Assertions.assertEquals(716318057, response.iterator().next().peakMinutesToWaitOnLogoff());
        Assertions.assertEquals(1761348556, response.iterator().next().rampDownStartTime().hour());
        Assertions.assertEquals(620018681, response.iterator().next().rampDownStartTime().minute());
        Assertions.assertEquals(SetStartVMOnConnect.DISABLE, response.iterator().next().rampDownStartVMOnConnect());
        Assertions.assertEquals(SessionHandlingOperation.DEALLOCATE,
            response.iterator().next().rampDownActionOnDisconnect());
        Assertions.assertEquals(971775646, response.iterator().next().rampDownMinutesToWaitOnDisconnect());
        Assertions.assertEquals(SessionHandlingOperation.NONE, response.iterator().next().rampDownActionOnLogoff());
        Assertions.assertEquals(1389401676, response.iterator().next().rampDownMinutesToWaitOnLogoff());
        Assertions.assertEquals(537279980, response.iterator().next().offPeakStartTime().hour());
        Assertions.assertEquals(2138808813, response.iterator().next().offPeakStartTime().minute());
        Assertions.assertEquals(SetStartVMOnConnect.DISABLE, response.iterator().next().offPeakStartVMOnConnect());
        Assertions.assertEquals(SessionHandlingOperation.HIBERNATE,
            response.iterator().next().offPeakActionOnDisconnect());
        Assertions.assertEquals(1546615539, response.iterator().next().offPeakMinutesToWaitOnDisconnect());
        Assertions.assertEquals(SessionHandlingOperation.NONE, response.iterator().next().offPeakActionOnLogoff());
        Assertions.assertEquals(1583480383, response.iterator().next().offPeakMinutesToWaitOnLogoff());
    }
}
