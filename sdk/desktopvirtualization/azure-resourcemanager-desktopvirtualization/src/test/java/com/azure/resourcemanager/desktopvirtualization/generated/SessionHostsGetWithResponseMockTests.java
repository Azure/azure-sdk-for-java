// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.desktopvirtualization.DesktopVirtualizationManager;
import com.azure.resourcemanager.desktopvirtualization.models.SessionHost;
import com.azure.resourcemanager.desktopvirtualization.models.Status;
import com.azure.resourcemanager.desktopvirtualization.models.UpdateState;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class SessionHostsGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"objectId\":\"k\",\"lastHeartBeat\":\"2021-03-23T11:52:12Z\",\"sessions\":1942149440,\"agentVersion\":\"hlb\",\"allowNewSession\":true,\"virtualMachineId\":\"pcpil\",\"resourceId\":\"a\",\"assignedUser\":\"vechndbnwiehole\",\"friendlyName\":\"wiuub\",\"status\":\"Upgrading\",\"statusTimestamp\":\"2021-11-19T16:29:04Z\",\"osVersion\":\"ap\",\"sxSStackVersion\":\"tf\",\"updateState\":\"Started\",\"lastUpdateTime\":\"2021-03-29T04:36:42Z\",\"updateErrorMessage\":\"x\",\"sessionHostHealthCheckResults\":[]},\"id\":\"fxapjwogqqnobpu\",\"name\":\"cdabtqwpwya\",\"type\":\"bzasqbucljgkyexa\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        DesktopVirtualizationManager manager =
            DesktopVirtualizationManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        SessionHost response =
            manager
                .sessionHosts()
                .getWithResponse("hrbbpneqvcwwyy", "r", "ochpprpr", com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals(OffsetDateTime.parse("2021-03-23T11:52:12Z"), response.lastHeartBeat());
        Assertions.assertEquals(1942149440, response.sessions());
        Assertions.assertEquals("hlb", response.agentVersion());
        Assertions.assertEquals(true, response.allowNewSession());
        Assertions.assertEquals("vechndbnwiehole", response.assignedUser());
        Assertions.assertEquals("wiuub", response.friendlyName());
        Assertions.assertEquals(Status.UPGRADING, response.status());
        Assertions.assertEquals("ap", response.osVersion());
        Assertions.assertEquals("tf", response.sxSStackVersion());
        Assertions.assertEquals(UpdateState.STARTED, response.updateState());
        Assertions.assertEquals("x", response.updateErrorMessage());
    }
}
