// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.desktopvirtualization.models.ScalingHostPoolReference;
import com.azure.resourcemanager.desktopvirtualization.models.ScalingPlanPatch;
import com.azure.resourcemanager.desktopvirtualization.models.ScalingSchedule;
import com.azure.resourcemanager.desktopvirtualization.models.ScalingScheduleDaysOfWeekItem;
import com.azure.resourcemanager.desktopvirtualization.models.SessionHostLoadBalancingAlgorithm;
import com.azure.resourcemanager.desktopvirtualization.models.StopHostsWhen;
import com.azure.resourcemanager.desktopvirtualization.models.Time;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ScalingPlanPatchTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScalingPlanPatch model = BinaryData.fromString(
            "{\"tags\":{\"nyyazttbtwwrqpue\":\"ucoc\",\"xibxujwbhqwalm\":\"ckzywbiexzfeyue\",\"ux\":\"zyoxaepdkzjan\",\"zt\":\"hdwbavxbniwdjs\"},\"properties\":{\"description\":\"pgn\",\"friendlyName\":\"txhp\",\"timeZone\":\"bzpfzab\",\"exclusionTag\":\"cuh\",\"schedules\":[{\"name\":\"tyq\",\"daysOfWeek\":[\"Tuesday\",\"Tuesday\"],\"rampUpStartTime\":{\"hour\":2077643232,\"minute\":946920071},\"rampUpLoadBalancingAlgorithm\":\"DepthFirst\",\"rampUpMinimumHostsPct\":1271650742,\"rampUpCapacityThresholdPct\":2103179015,\"peakStartTime\":{\"hour\":1239569697,\"minute\":35212160},\"peakLoadBalancingAlgorithm\":\"DepthFirst\",\"rampDownStartTime\":{\"hour\":615952432,\"minute\":230150141},\"rampDownLoadBalancingAlgorithm\":\"DepthFirst\",\"rampDownMinimumHostsPct\":439757511,\"rampDownCapacityThresholdPct\":941863244,\"rampDownForceLogoffUsers\":true,\"rampDownStopHostsWhen\":\"ZeroActiveSessions\",\"rampDownWaitTimeMinutes\":74448491,\"rampDownNotificationMessage\":\"gmgsxnkjzkde\",\"offPeakStartTime\":{\"hour\":1710407502,\"minute\":571941714},\"offPeakLoadBalancingAlgorithm\":\"BreadthFirst\"}],\"hostPoolReferences\":[{\"hostPoolArmPath\":\"yighxpk\",\"scalingPlanEnabled\":false},{\"hostPoolArmPath\":\"aiuebbaumnyqu\",\"scalingPlanEnabled\":false},{\"hostPoolArmPath\":\"ojnabckhsmtxpsie\",\"scalingPlanEnabled\":true}]}}")
            .toObject(ScalingPlanPatch.class);
        Assertions.assertEquals("ucoc", model.tags().get("nyyazttbtwwrqpue"));
        Assertions.assertEquals("pgn", model.description());
        Assertions.assertEquals("txhp", model.friendlyName());
        Assertions.assertEquals("bzpfzab", model.timeZone());
        Assertions.assertEquals("cuh", model.exclusionTag());
        Assertions.assertEquals("tyq", model.schedules().get(0).name());
        Assertions.assertEquals(ScalingScheduleDaysOfWeekItem.TUESDAY, model.schedules().get(0).daysOfWeek().get(0));
        Assertions.assertEquals(2077643232, model.schedules().get(0).rampUpStartTime().hour());
        Assertions.assertEquals(946920071, model.schedules().get(0).rampUpStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.DEPTH_FIRST,
            model.schedules().get(0).rampUpLoadBalancingAlgorithm());
        Assertions.assertEquals(1271650742, model.schedules().get(0).rampUpMinimumHostsPct());
        Assertions.assertEquals(2103179015, model.schedules().get(0).rampUpCapacityThresholdPct());
        Assertions.assertEquals(1239569697, model.schedules().get(0).peakStartTime().hour());
        Assertions.assertEquals(35212160, model.schedules().get(0).peakStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.DEPTH_FIRST,
            model.schedules().get(0).peakLoadBalancingAlgorithm());
        Assertions.assertEquals(615952432, model.schedules().get(0).rampDownStartTime().hour());
        Assertions.assertEquals(230150141, model.schedules().get(0).rampDownStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.DEPTH_FIRST,
            model.schedules().get(0).rampDownLoadBalancingAlgorithm());
        Assertions.assertEquals(439757511, model.schedules().get(0).rampDownMinimumHostsPct());
        Assertions.assertEquals(941863244, model.schedules().get(0).rampDownCapacityThresholdPct());
        Assertions.assertEquals(true, model.schedules().get(0).rampDownForceLogoffUsers());
        Assertions.assertEquals(StopHostsWhen.ZERO_ACTIVE_SESSIONS, model.schedules().get(0).rampDownStopHostsWhen());
        Assertions.assertEquals(74448491, model.schedules().get(0).rampDownWaitTimeMinutes());
        Assertions.assertEquals("gmgsxnkjzkde", model.schedules().get(0).rampDownNotificationMessage());
        Assertions.assertEquals(1710407502, model.schedules().get(0).offPeakStartTime().hour());
        Assertions.assertEquals(571941714, model.schedules().get(0).offPeakStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST,
            model.schedules().get(0).offPeakLoadBalancingAlgorithm());
        Assertions.assertEquals("yighxpk", model.hostPoolReferences().get(0).hostPoolArmPath());
        Assertions.assertEquals(false, model.hostPoolReferences().get(0).scalingPlanEnabled());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScalingPlanPatch model = new ScalingPlanPatch()
            .withTags(mapOf("nyyazttbtwwrqpue", "ucoc", "xibxujwbhqwalm", "ckzywbiexzfeyue", "ux", "zyoxaepdkzjan",
                "zt", "hdwbavxbniwdjs"))
            .withDescription("pgn")
            .withFriendlyName("txhp")
            .withTimeZone("bzpfzab")
            .withExclusionTag("cuh")
            .withSchedules(Arrays.asList(new ScalingSchedule().withName("tyq")
                .withDaysOfWeek(
                    Arrays.asList(ScalingScheduleDaysOfWeekItem.TUESDAY, ScalingScheduleDaysOfWeekItem.TUESDAY))
                .withRampUpStartTime(new Time().withHour(2077643232).withMinute(946920071))
                .withRampUpLoadBalancingAlgorithm(SessionHostLoadBalancingAlgorithm.DEPTH_FIRST)
                .withRampUpMinimumHostsPct(1271650742)
                .withRampUpCapacityThresholdPct(2103179015)
                .withPeakStartTime(new Time().withHour(1239569697).withMinute(35212160))
                .withPeakLoadBalancingAlgorithm(SessionHostLoadBalancingAlgorithm.DEPTH_FIRST)
                .withRampDownStartTime(new Time().withHour(615952432).withMinute(230150141))
                .withRampDownLoadBalancingAlgorithm(SessionHostLoadBalancingAlgorithm.DEPTH_FIRST)
                .withRampDownMinimumHostsPct(439757511)
                .withRampDownCapacityThresholdPct(941863244)
                .withRampDownForceLogoffUsers(true)
                .withRampDownStopHostsWhen(StopHostsWhen.ZERO_ACTIVE_SESSIONS)
                .withRampDownWaitTimeMinutes(74448491)
                .withRampDownNotificationMessage("gmgsxnkjzkde")
                .withOffPeakStartTime(new Time().withHour(1710407502).withMinute(571941714))
                .withOffPeakLoadBalancingAlgorithm(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST)))
            .withHostPoolReferences(Arrays.asList(
                new ScalingHostPoolReference().withHostPoolArmPath("yighxpk").withScalingPlanEnabled(false),
                new ScalingHostPoolReference().withHostPoolArmPath("aiuebbaumnyqu").withScalingPlanEnabled(false),
                new ScalingHostPoolReference().withHostPoolArmPath("ojnabckhsmtxpsie").withScalingPlanEnabled(true)));
        model = BinaryData.fromObject(model).toObject(ScalingPlanPatch.class);
        Assertions.assertEquals("ucoc", model.tags().get("nyyazttbtwwrqpue"));
        Assertions.assertEquals("pgn", model.description());
        Assertions.assertEquals("txhp", model.friendlyName());
        Assertions.assertEquals("bzpfzab", model.timeZone());
        Assertions.assertEquals("cuh", model.exclusionTag());
        Assertions.assertEquals("tyq", model.schedules().get(0).name());
        Assertions.assertEquals(ScalingScheduleDaysOfWeekItem.TUESDAY, model.schedules().get(0).daysOfWeek().get(0));
        Assertions.assertEquals(2077643232, model.schedules().get(0).rampUpStartTime().hour());
        Assertions.assertEquals(946920071, model.schedules().get(0).rampUpStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.DEPTH_FIRST,
            model.schedules().get(0).rampUpLoadBalancingAlgorithm());
        Assertions.assertEquals(1271650742, model.schedules().get(0).rampUpMinimumHostsPct());
        Assertions.assertEquals(2103179015, model.schedules().get(0).rampUpCapacityThresholdPct());
        Assertions.assertEquals(1239569697, model.schedules().get(0).peakStartTime().hour());
        Assertions.assertEquals(35212160, model.schedules().get(0).peakStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.DEPTH_FIRST,
            model.schedules().get(0).peakLoadBalancingAlgorithm());
        Assertions.assertEquals(615952432, model.schedules().get(0).rampDownStartTime().hour());
        Assertions.assertEquals(230150141, model.schedules().get(0).rampDownStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.DEPTH_FIRST,
            model.schedules().get(0).rampDownLoadBalancingAlgorithm());
        Assertions.assertEquals(439757511, model.schedules().get(0).rampDownMinimumHostsPct());
        Assertions.assertEquals(941863244, model.schedules().get(0).rampDownCapacityThresholdPct());
        Assertions.assertEquals(true, model.schedules().get(0).rampDownForceLogoffUsers());
        Assertions.assertEquals(StopHostsWhen.ZERO_ACTIVE_SESSIONS, model.schedules().get(0).rampDownStopHostsWhen());
        Assertions.assertEquals(74448491, model.schedules().get(0).rampDownWaitTimeMinutes());
        Assertions.assertEquals("gmgsxnkjzkde", model.schedules().get(0).rampDownNotificationMessage());
        Assertions.assertEquals(1710407502, model.schedules().get(0).offPeakStartTime().hour());
        Assertions.assertEquals(571941714, model.schedules().get(0).offPeakStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST,
            model.schedules().get(0).offPeakLoadBalancingAlgorithm());
        Assertions.assertEquals("yighxpk", model.hostPoolReferences().get(0).hostPoolArmPath());
        Assertions.assertEquals(false, model.hostPoolReferences().get(0).scalingPlanEnabled());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
