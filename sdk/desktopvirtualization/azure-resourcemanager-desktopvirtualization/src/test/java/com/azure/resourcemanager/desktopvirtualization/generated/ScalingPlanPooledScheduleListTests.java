// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.desktopvirtualization.fluent.models.ScalingPlanPooledScheduleInner;
import com.azure.resourcemanager.desktopvirtualization.models.DayOfWeek;
import com.azure.resourcemanager.desktopvirtualization.models.ScalingPlanPooledScheduleList;
import com.azure.resourcemanager.desktopvirtualization.models.SessionHostLoadBalancingAlgorithm;
import com.azure.resourcemanager.desktopvirtualization.models.StopHostsWhen;
import com.azure.resourcemanager.desktopvirtualization.models.Time;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ScalingPlanPooledScheduleListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScalingPlanPooledScheduleList model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"daysOfWeek\":[\"Tuesday\",\"Saturday\",\"Thursday\",\"Monday\"],\"rampUpStartTime\":{\"hour\":628335164,\"minute\":1772436776},\"rampUpLoadBalancingAlgorithm\":\"BreadthFirst\",\"rampUpMinimumHostsPct\":2113030944,\"rampUpCapacityThresholdPct\":2033382031,\"peakStartTime\":{\"hour\":1793705984,\"minute\":888543440},\"peakLoadBalancingAlgorithm\":\"BreadthFirst\",\"rampDownStartTime\":{\"hour\":1211885049,\"minute\":1841035114},\"rampDownLoadBalancingAlgorithm\":\"BreadthFirst\",\"rampDownMinimumHostsPct\":1984552254,\"rampDownCapacityThresholdPct\":1911330715,\"rampDownForceLogoffUsers\":false,\"rampDownStopHostsWhen\":\"ZeroSessions\",\"rampDownWaitTimeMinutes\":231705927,\"rampDownNotificationMessage\":\"hb\",\"offPeakStartTime\":{\"hour\":297001975,\"minute\":245214837},\"offPeakLoadBalancingAlgorithm\":\"BreadthFirst\"},\"id\":\"ulppggdtpnapnyir\",\"name\":\"pu\",\"type\":\"pigvpgylgqgitx\"},{\"properties\":{\"daysOfWeek\":[\"Sunday\",\"Saturday\"],\"rampUpStartTime\":{\"hour\":229566097,\"minute\":939730908},\"rampUpLoadBalancingAlgorithm\":\"BreadthFirst\",\"rampUpMinimumHostsPct\":598877873,\"rampUpCapacityThresholdPct\":745098113,\"peakStartTime\":{\"hour\":785152893,\"minute\":261774364},\"peakLoadBalancingAlgorithm\":\"BreadthFirst\",\"rampDownStartTime\":{\"hour\":1437797215,\"minute\":953152084},\"rampDownLoadBalancingAlgorithm\":\"BreadthFirst\",\"rampDownMinimumHostsPct\":45036784,\"rampDownCapacityThresholdPct\":591532413,\"rampDownForceLogoffUsers\":true,\"rampDownStopHostsWhen\":\"ZeroSessions\",\"rampDownWaitTimeMinutes\":1324416407,\"rampDownNotificationMessage\":\"ellwptfdy\",\"offPeakStartTime\":{\"hour\":622690283,\"minute\":975485251},\"offPeakLoadBalancingAlgorithm\":\"DepthFirst\"},\"id\":\"ceopzfqrhhuaopp\",\"name\":\"cq\",\"type\":\"qxolzdahzx\"}],\"nextLink\":\"obgbkdmoizp\"}")
            .toObject(ScalingPlanPooledScheduleList.class);
        Assertions.assertEquals(DayOfWeek.TUESDAY, model.value().get(0).daysOfWeek().get(0));
        Assertions.assertEquals(628335164, model.value().get(0).rampUpStartTime().hour());
        Assertions.assertEquals(1772436776, model.value().get(0).rampUpStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST,
            model.value().get(0).rampUpLoadBalancingAlgorithm());
        Assertions.assertEquals(2113030944, model.value().get(0).rampUpMinimumHostsPct());
        Assertions.assertEquals(2033382031, model.value().get(0).rampUpCapacityThresholdPct());
        Assertions.assertEquals(1793705984, model.value().get(0).peakStartTime().hour());
        Assertions.assertEquals(888543440, model.value().get(0).peakStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST,
            model.value().get(0).peakLoadBalancingAlgorithm());
        Assertions.assertEquals(1211885049, model.value().get(0).rampDownStartTime().hour());
        Assertions.assertEquals(1841035114, model.value().get(0).rampDownStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST,
            model.value().get(0).rampDownLoadBalancingAlgorithm());
        Assertions.assertEquals(1984552254, model.value().get(0).rampDownMinimumHostsPct());
        Assertions.assertEquals(1911330715, model.value().get(0).rampDownCapacityThresholdPct());
        Assertions.assertEquals(false, model.value().get(0).rampDownForceLogoffUsers());
        Assertions.assertEquals(StopHostsWhen.ZERO_SESSIONS, model.value().get(0).rampDownStopHostsWhen());
        Assertions.assertEquals(231705927, model.value().get(0).rampDownWaitTimeMinutes());
        Assertions.assertEquals("hb", model.value().get(0).rampDownNotificationMessage());
        Assertions.assertEquals(297001975, model.value().get(0).offPeakStartTime().hour());
        Assertions.assertEquals(245214837, model.value().get(0).offPeakStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST,
            model.value().get(0).offPeakLoadBalancingAlgorithm());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScalingPlanPooledScheduleList model
            = new ScalingPlanPooledScheduleList()
                .withValue(
                    Arrays.asList(
                        new ScalingPlanPooledScheduleInner()
                            .withDaysOfWeek(Arrays.asList(DayOfWeek.TUESDAY, DayOfWeek.SATURDAY, DayOfWeek.THURSDAY,
                                DayOfWeek.MONDAY))
                            .withRampUpStartTime(new Time().withHour(628335164).withMinute(1772436776))
                            .withRampUpLoadBalancingAlgorithm(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST)
                            .withRampUpMinimumHostsPct(2113030944)
                            .withRampUpCapacityThresholdPct(2033382031)
                            .withPeakStartTime(new Time().withHour(1793705984).withMinute(888543440))
                            .withPeakLoadBalancingAlgorithm(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST)
                            .withRampDownStartTime(new Time().withHour(1211885049).withMinute(1841035114))
                            .withRampDownLoadBalancingAlgorithm(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST)
                            .withRampDownMinimumHostsPct(1984552254)
                            .withRampDownCapacityThresholdPct(1911330715)
                            .withRampDownForceLogoffUsers(false)
                            .withRampDownStopHostsWhen(StopHostsWhen.ZERO_SESSIONS)
                            .withRampDownWaitTimeMinutes(231705927)
                            .withRampDownNotificationMessage("hb")
                            .withOffPeakStartTime(new Time().withHour(297001975).withMinute(245214837))
                            .withOffPeakLoadBalancingAlgorithm(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST),
                        new ScalingPlanPooledScheduleInner()
                            .withDaysOfWeek(Arrays.asList(DayOfWeek.SUNDAY, DayOfWeek.SATURDAY))
                            .withRampUpStartTime(new Time().withHour(229566097).withMinute(939730908))
                            .withRampUpLoadBalancingAlgorithm(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST)
                            .withRampUpMinimumHostsPct(598877873)
                            .withRampUpCapacityThresholdPct(745098113)
                            .withPeakStartTime(new Time().withHour(785152893).withMinute(261774364))
                            .withPeakLoadBalancingAlgorithm(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST)
                            .withRampDownStartTime(new Time().withHour(1437797215).withMinute(953152084))
                            .withRampDownLoadBalancingAlgorithm(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST)
                            .withRampDownMinimumHostsPct(45036784)
                            .withRampDownCapacityThresholdPct(591532413)
                            .withRampDownForceLogoffUsers(true)
                            .withRampDownStopHostsWhen(StopHostsWhen.ZERO_SESSIONS)
                            .withRampDownWaitTimeMinutes(1324416407)
                            .withRampDownNotificationMessage("ellwptfdy")
                            .withOffPeakStartTime(new Time().withHour(622690283).withMinute(975485251))
                            .withOffPeakLoadBalancingAlgorithm(SessionHostLoadBalancingAlgorithm.DEPTH_FIRST)));
        model = BinaryData.fromObject(model).toObject(ScalingPlanPooledScheduleList.class);
        Assertions.assertEquals(DayOfWeek.TUESDAY, model.value().get(0).daysOfWeek().get(0));
        Assertions.assertEquals(628335164, model.value().get(0).rampUpStartTime().hour());
        Assertions.assertEquals(1772436776, model.value().get(0).rampUpStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST,
            model.value().get(0).rampUpLoadBalancingAlgorithm());
        Assertions.assertEquals(2113030944, model.value().get(0).rampUpMinimumHostsPct());
        Assertions.assertEquals(2033382031, model.value().get(0).rampUpCapacityThresholdPct());
        Assertions.assertEquals(1793705984, model.value().get(0).peakStartTime().hour());
        Assertions.assertEquals(888543440, model.value().get(0).peakStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST,
            model.value().get(0).peakLoadBalancingAlgorithm());
        Assertions.assertEquals(1211885049, model.value().get(0).rampDownStartTime().hour());
        Assertions.assertEquals(1841035114, model.value().get(0).rampDownStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST,
            model.value().get(0).rampDownLoadBalancingAlgorithm());
        Assertions.assertEquals(1984552254, model.value().get(0).rampDownMinimumHostsPct());
        Assertions.assertEquals(1911330715, model.value().get(0).rampDownCapacityThresholdPct());
        Assertions.assertEquals(false, model.value().get(0).rampDownForceLogoffUsers());
        Assertions.assertEquals(StopHostsWhen.ZERO_SESSIONS, model.value().get(0).rampDownStopHostsWhen());
        Assertions.assertEquals(231705927, model.value().get(0).rampDownWaitTimeMinutes());
        Assertions.assertEquals("hb", model.value().get(0).rampDownNotificationMessage());
        Assertions.assertEquals(297001975, model.value().get(0).offPeakStartTime().hour());
        Assertions.assertEquals(245214837, model.value().get(0).offPeakStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST,
            model.value().get(0).offPeakLoadBalancingAlgorithm());
    }
}
