// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.desktopvirtualization.fluent.models.ScalingPlanPooledScheduleInner;
import com.azure.resourcemanager.desktopvirtualization.models.DayOfWeek;
import com.azure.resourcemanager.desktopvirtualization.models.ScalingPlanPooledScheduleList;
import com.azure.resourcemanager.desktopvirtualization.models.SessionHostLoadBalancingAlgorithm;
import com.azure.resourcemanager.desktopvirtualization.models.StopHostsWhen;
import com.azure.resourcemanager.desktopvirtualization.models.Time;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ScalingPlanPooledScheduleListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScalingPlanPooledScheduleList model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"daysOfWeek\":[\"Friday\",\"Wednesday\",\"Tuesday\"],\"rampUpStartTime\":{\"hour\":2019040636,\"minute\":338367472},\"rampUpLoadBalancingAlgorithm\":\"BreadthFirst\",\"rampUpMinimumHostsPct\":809589965,\"rampUpCapacityThresholdPct\":1987785731,\"peakStartTime\":{\"hour\":1767174247,\"minute\":1198942422},\"peakLoadBalancingAlgorithm\":\"DepthFirst\",\"rampDownStartTime\":{\"hour\":1796159221,\"minute\":24250609},\"rampDownLoadBalancingAlgorithm\":\"BreadthFirst\",\"rampDownMinimumHostsPct\":1189484284,\"rampDownCapacityThresholdPct\":2098592267,\"rampDownForceLogoffUsers\":true,\"rampDownStopHostsWhen\":\"ZeroActiveSessions\",\"rampDownWaitTimeMinutes\":882329549,\"rampDownNotificationMessage\":\"qgitxmed\",\"offPeakStartTime\":{\"hour\":119641642,\"minute\":229566097},\"offPeakLoadBalancingAlgorithm\":\"DepthFirst\"},\"id\":\"qwwncw\",\"name\":\"zhxgktrmgucn\",\"type\":\"pkteo\"},{\"properties\":{\"daysOfWeek\":[\"Monday\",\"Wednesday\"],\"rampUpStartTime\":{\"hour\":1750481006,\"minute\":220477618},\"rampUpLoadBalancingAlgorithm\":\"DepthFirst\",\"rampUpMinimumHostsPct\":622690283,\"rampUpCapacityThresholdPct\":190116972,\"peakStartTime\":{\"hour\":377649989,\"minute\":1732351428},\"peakLoadBalancingAlgorithm\":\"BreadthFirst\",\"rampDownStartTime\":{\"hour\":598270118,\"minute\":1015467310},\"rampDownLoadBalancingAlgorithm\":\"DepthFirst\",\"rampDownMinimumHostsPct\":1863472171,\"rampDownCapacityThresholdPct\":350693240,\"rampDownForceLogoffUsers\":true,\"rampDownStopHostsWhen\":\"ZeroSessions\",\"rampDownWaitTimeMinutes\":1290719044,\"rampDownNotificationMessage\":\"qxolzdahzx\",\"offPeakStartTime\":{\"hour\":792773086,\"minute\":1183289800},\"offPeakLoadBalancingAlgorithm\":\"BreadthFirst\"},\"id\":\"dmoizpostmg\",\"name\":\"cfbu\",\"type\":\"rmfqjhhkxbpvj\"},{\"properties\":{\"daysOfWeek\":[\"Wednesday\",\"Tuesday\"],\"rampUpStartTime\":{\"hour\":256415791,\"minute\":1905459835},\"rampUpLoadBalancingAlgorithm\":\"DepthFirst\",\"rampUpMinimumHostsPct\":1547170393,\"rampUpCapacityThresholdPct\":709411733,\"peakStartTime\":{\"hour\":258725864,\"minute\":1003023874},\"peakLoadBalancingAlgorithm\":\"DepthFirst\",\"rampDownStartTime\":{\"hour\":173760475,\"minute\":1688847935},\"rampDownLoadBalancingAlgorithm\":\"DepthFirst\",\"rampDownMinimumHostsPct\":668834645,\"rampDownCapacityThresholdPct\":133351915,\"rampDownForceLogoffUsers\":true,\"rampDownStopHostsWhen\":\"ZeroSessions\",\"rampDownWaitTimeMinutes\":1315854655,\"rampDownNotificationMessage\":\"xivetvt\",\"offPeakStartTime\":{\"hour\":393815457,\"minute\":928990245},\"offPeakLoadBalancingAlgorithm\":\"DepthFirst\"},\"id\":\"qmcbxvwvxyslqbhs\",\"name\":\"xoblytkbl\",\"type\":\"pe\"}],\"nextLink\":\"wfbkrvrns\"}")
            .toObject(ScalingPlanPooledScheduleList.class);
        Assertions.assertEquals(DayOfWeek.FRIDAY, model.value().get(0).daysOfWeek().get(0));
        Assertions.assertEquals(2019040636, model.value().get(0).rampUpStartTime().hour());
        Assertions.assertEquals(338367472, model.value().get(0).rampUpStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST,
            model.value().get(0).rampUpLoadBalancingAlgorithm());
        Assertions.assertEquals(809589965, model.value().get(0).rampUpMinimumHostsPct());
        Assertions.assertEquals(1987785731, model.value().get(0).rampUpCapacityThresholdPct());
        Assertions.assertEquals(1767174247, model.value().get(0).peakStartTime().hour());
        Assertions.assertEquals(1198942422, model.value().get(0).peakStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.DEPTH_FIRST,
            model.value().get(0).peakLoadBalancingAlgorithm());
        Assertions.assertEquals(1796159221, model.value().get(0).rampDownStartTime().hour());
        Assertions.assertEquals(24250609, model.value().get(0).rampDownStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST,
            model.value().get(0).rampDownLoadBalancingAlgorithm());
        Assertions.assertEquals(1189484284, model.value().get(0).rampDownMinimumHostsPct());
        Assertions.assertEquals(2098592267, model.value().get(0).rampDownCapacityThresholdPct());
        Assertions.assertEquals(true, model.value().get(0).rampDownForceLogoffUsers());
        Assertions.assertEquals(StopHostsWhen.ZERO_ACTIVE_SESSIONS, model.value().get(0).rampDownStopHostsWhen());
        Assertions.assertEquals(882329549, model.value().get(0).rampDownWaitTimeMinutes());
        Assertions.assertEquals("qgitxmed", model.value().get(0).rampDownNotificationMessage());
        Assertions.assertEquals(119641642, model.value().get(0).offPeakStartTime().hour());
        Assertions.assertEquals(229566097, model.value().get(0).offPeakStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.DEPTH_FIRST,
            model.value().get(0).offPeakLoadBalancingAlgorithm());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScalingPlanPooledScheduleList model = new ScalingPlanPooledScheduleList().withValue(Arrays.asList(
            new ScalingPlanPooledScheduleInner()
                .withDaysOfWeek(Arrays.asList(DayOfWeek.FRIDAY, DayOfWeek.WEDNESDAY, DayOfWeek.TUESDAY))
                .withRampUpStartTime(new Time().withHour(2019040636).withMinute(338367472))
                .withRampUpLoadBalancingAlgorithm(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST)
                .withRampUpMinimumHostsPct(809589965)
                .withRampUpCapacityThresholdPct(1987785731)
                .withPeakStartTime(new Time().withHour(1767174247).withMinute(1198942422))
                .withPeakLoadBalancingAlgorithm(SessionHostLoadBalancingAlgorithm.DEPTH_FIRST)
                .withRampDownStartTime(new Time().withHour(1796159221).withMinute(24250609))
                .withRampDownLoadBalancingAlgorithm(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST)
                .withRampDownMinimumHostsPct(1189484284)
                .withRampDownCapacityThresholdPct(2098592267)
                .withRampDownForceLogoffUsers(true)
                .withRampDownStopHostsWhen(StopHostsWhen.ZERO_ACTIVE_SESSIONS)
                .withRampDownWaitTimeMinutes(882329549)
                .withRampDownNotificationMessage("qgitxmed")
                .withOffPeakStartTime(new Time().withHour(119641642).withMinute(229566097))
                .withOffPeakLoadBalancingAlgorithm(SessionHostLoadBalancingAlgorithm.DEPTH_FIRST),
            new ScalingPlanPooledScheduleInner().withDaysOfWeek(Arrays.asList(DayOfWeek.MONDAY, DayOfWeek.WEDNESDAY))
                .withRampUpStartTime(new Time().withHour(1750481006).withMinute(220477618))
                .withRampUpLoadBalancingAlgorithm(SessionHostLoadBalancingAlgorithm.DEPTH_FIRST)
                .withRampUpMinimumHostsPct(622690283)
                .withRampUpCapacityThresholdPct(190116972)
                .withPeakStartTime(new Time().withHour(377649989).withMinute(1732351428))
                .withPeakLoadBalancingAlgorithm(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST)
                .withRampDownStartTime(new Time().withHour(598270118).withMinute(1015467310))
                .withRampDownLoadBalancingAlgorithm(SessionHostLoadBalancingAlgorithm.DEPTH_FIRST)
                .withRampDownMinimumHostsPct(1863472171)
                .withRampDownCapacityThresholdPct(350693240)
                .withRampDownForceLogoffUsers(true)
                .withRampDownStopHostsWhen(StopHostsWhen.ZERO_SESSIONS)
                .withRampDownWaitTimeMinutes(1290719044)
                .withRampDownNotificationMessage("qxolzdahzx")
                .withOffPeakStartTime(new Time().withHour(792773086).withMinute(1183289800))
                .withOffPeakLoadBalancingAlgorithm(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST),
            new ScalingPlanPooledScheduleInner().withDaysOfWeek(Arrays.asList(DayOfWeek.WEDNESDAY, DayOfWeek.TUESDAY))
                .withRampUpStartTime(new Time().withHour(256415791).withMinute(1905459835))
                .withRampUpLoadBalancingAlgorithm(SessionHostLoadBalancingAlgorithm.DEPTH_FIRST)
                .withRampUpMinimumHostsPct(1547170393)
                .withRampUpCapacityThresholdPct(709411733)
                .withPeakStartTime(new Time().withHour(258725864).withMinute(1003023874))
                .withPeakLoadBalancingAlgorithm(SessionHostLoadBalancingAlgorithm.DEPTH_FIRST)
                .withRampDownStartTime(new Time().withHour(173760475).withMinute(1688847935))
                .withRampDownLoadBalancingAlgorithm(SessionHostLoadBalancingAlgorithm.DEPTH_FIRST)
                .withRampDownMinimumHostsPct(668834645)
                .withRampDownCapacityThresholdPct(133351915)
                .withRampDownForceLogoffUsers(true)
                .withRampDownStopHostsWhen(StopHostsWhen.ZERO_SESSIONS)
                .withRampDownWaitTimeMinutes(1315854655)
                .withRampDownNotificationMessage("xivetvt")
                .withOffPeakStartTime(new Time().withHour(393815457).withMinute(928990245))
                .withOffPeakLoadBalancingAlgorithm(SessionHostLoadBalancingAlgorithm.DEPTH_FIRST)));
        model = BinaryData.fromObject(model).toObject(ScalingPlanPooledScheduleList.class);
        Assertions.assertEquals(DayOfWeek.FRIDAY, model.value().get(0).daysOfWeek().get(0));
        Assertions.assertEquals(2019040636, model.value().get(0).rampUpStartTime().hour());
        Assertions.assertEquals(338367472, model.value().get(0).rampUpStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST,
            model.value().get(0).rampUpLoadBalancingAlgorithm());
        Assertions.assertEquals(809589965, model.value().get(0).rampUpMinimumHostsPct());
        Assertions.assertEquals(1987785731, model.value().get(0).rampUpCapacityThresholdPct());
        Assertions.assertEquals(1767174247, model.value().get(0).peakStartTime().hour());
        Assertions.assertEquals(1198942422, model.value().get(0).peakStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.DEPTH_FIRST,
            model.value().get(0).peakLoadBalancingAlgorithm());
        Assertions.assertEquals(1796159221, model.value().get(0).rampDownStartTime().hour());
        Assertions.assertEquals(24250609, model.value().get(0).rampDownStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST,
            model.value().get(0).rampDownLoadBalancingAlgorithm());
        Assertions.assertEquals(1189484284, model.value().get(0).rampDownMinimumHostsPct());
        Assertions.assertEquals(2098592267, model.value().get(0).rampDownCapacityThresholdPct());
        Assertions.assertEquals(true, model.value().get(0).rampDownForceLogoffUsers());
        Assertions.assertEquals(StopHostsWhen.ZERO_ACTIVE_SESSIONS, model.value().get(0).rampDownStopHostsWhen());
        Assertions.assertEquals(882329549, model.value().get(0).rampDownWaitTimeMinutes());
        Assertions.assertEquals("qgitxmed", model.value().get(0).rampDownNotificationMessage());
        Assertions.assertEquals(119641642, model.value().get(0).offPeakStartTime().hour());
        Assertions.assertEquals(229566097, model.value().get(0).offPeakStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.DEPTH_FIRST,
            model.value().get(0).offPeakLoadBalancingAlgorithm());
    }
}
