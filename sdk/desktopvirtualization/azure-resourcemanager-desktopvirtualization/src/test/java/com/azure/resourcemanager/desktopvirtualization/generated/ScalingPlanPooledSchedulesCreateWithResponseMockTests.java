// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.desktopvirtualization.DesktopVirtualizationManager;
import com.azure.resourcemanager.desktopvirtualization.models.DayOfWeek;
import com.azure.resourcemanager.desktopvirtualization.models.ScalingPlanPooledSchedule;
import com.azure.resourcemanager.desktopvirtualization.models.SessionHostLoadBalancingAlgorithm;
import com.azure.resourcemanager.desktopvirtualization.models.StopHostsWhen;
import com.azure.resourcemanager.desktopvirtualization.models.Time;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ScalingPlanPooledSchedulesCreateWithResponseMockTests {
    @Test
    public void testCreateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"daysOfWeek\":[\"Thursday\"],\"rampUpStartTime\":{\"hour\":1468160039,\"minute\":1632066505},\"rampUpLoadBalancingAlgorithm\":\"BreadthFirst\",\"rampUpMinimumHostsPct\":966764042,\"rampUpCapacityThresholdPct\":771556133,\"peakStartTime\":{\"hour\":1743083802,\"minute\":761308188},\"peakLoadBalancingAlgorithm\":\"DepthFirst\",\"rampDownStartTime\":{\"hour\":1990405862,\"minute\":1925288663},\"rampDownLoadBalancingAlgorithm\":\"BreadthFirst\",\"rampDownMinimumHostsPct\":807094173,\"rampDownCapacityThresholdPct\":1845774986,\"rampDownForceLogoffUsers\":false,\"rampDownStopHostsWhen\":\"ZeroSessions\",\"rampDownWaitTimeMinutes\":982791914,\"rampDownNotificationMessage\":\"bjpsfxsfuztlvtm\",\"offPeakStartTime\":{\"hour\":175189485,\"minute\":1490631232},\"offPeakLoadBalancingAlgorithm\":\"BreadthFirst\"},\"id\":\"qlvh\",\"name\":\"koveof\",\"type\":\"zrvjfnmjmvlwyzgi\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DesktopVirtualizationManager manager = DesktopVirtualizationManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        ScalingPlanPooledSchedule response = manager.scalingPlanPooledSchedules()
            .define("lpxuzzjgnrefq")
            .withExistingScalingPlan("dnigrfihot", "e")
            .withDaysOfWeek(Arrays.asList(DayOfWeek.SUNDAY, DayOfWeek.FRIDAY, DayOfWeek.FRIDAY, DayOfWeek.THURSDAY))
            .withRampUpStartTime(new Time().withHour(773254967).withMinute(1642476072))
            .withRampUpLoadBalancingAlgorithm(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST)
            .withRampUpMinimumHostsPct(595468584)
            .withRampUpCapacityThresholdPct(376876153)
            .withPeakStartTime(new Time().withHour(143556698).withMinute(1733569114))
            .withPeakLoadBalancingAlgorithm(SessionHostLoadBalancingAlgorithm.DEPTH_FIRST)
            .withRampDownStartTime(new Time().withHour(587303890).withMinute(1946832159))
            .withRampDownLoadBalancingAlgorithm(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST)
            .withRampDownMinimumHostsPct(1216566407)
            .withRampDownCapacityThresholdPct(1983000193)
            .withRampDownForceLogoffUsers(false)
            .withRampDownStopHostsWhen(StopHostsWhen.ZERO_SESSIONS)
            .withRampDownWaitTimeMinutes(334230788)
            .withRampDownNotificationMessage("sipi")
            .withOffPeakStartTime(new Time().withHour(1379010451).withMinute(1553413277))
            .withOffPeakLoadBalancingAlgorithm(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST)
            .create();

        Assertions.assertEquals(DayOfWeek.THURSDAY, response.daysOfWeek().get(0));
        Assertions.assertEquals(1468160039, response.rampUpStartTime().hour());
        Assertions.assertEquals(1632066505, response.rampUpStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST,
            response.rampUpLoadBalancingAlgorithm());
        Assertions.assertEquals(966764042, response.rampUpMinimumHostsPct());
        Assertions.assertEquals(771556133, response.rampUpCapacityThresholdPct());
        Assertions.assertEquals(1743083802, response.peakStartTime().hour());
        Assertions.assertEquals(761308188, response.peakStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.DEPTH_FIRST, response.peakLoadBalancingAlgorithm());
        Assertions.assertEquals(1990405862, response.rampDownStartTime().hour());
        Assertions.assertEquals(1925288663, response.rampDownStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST,
            response.rampDownLoadBalancingAlgorithm());
        Assertions.assertEquals(807094173, response.rampDownMinimumHostsPct());
        Assertions.assertEquals(1845774986, response.rampDownCapacityThresholdPct());
        Assertions.assertEquals(false, response.rampDownForceLogoffUsers());
        Assertions.assertEquals(StopHostsWhen.ZERO_SESSIONS, response.rampDownStopHostsWhen());
        Assertions.assertEquals(982791914, response.rampDownWaitTimeMinutes());
        Assertions.assertEquals("bjpsfxsfuztlvtm", response.rampDownNotificationMessage());
        Assertions.assertEquals(175189485, response.offPeakStartTime().hour());
        Assertions.assertEquals(1490631232, response.offPeakStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST,
            response.offPeakLoadBalancingAlgorithm());
    }
}
