// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.desktopvirtualization.DesktopVirtualizationManager;
import com.azure.resourcemanager.desktopvirtualization.models.DayOfWeek;
import com.azure.resourcemanager.desktopvirtualization.models.ScalingPlanPooledSchedule;
import com.azure.resourcemanager.desktopvirtualization.models.SessionHostLoadBalancingAlgorithm;
import com.azure.resourcemanager.desktopvirtualization.models.StopHostsWhen;
import com.azure.resourcemanager.desktopvirtualization.models.Time;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ScalingPlanPooledSchedulesCreateWithResponseMockTests {
    @Test
    public void testCreateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"daysOfWeek\":[\"Wednesday\",\"Saturday\"],\"rampUpStartTime\":{\"hour\":1894414352,\"minute\":1596880769},\"rampUpLoadBalancingAlgorithm\":\"BreadthFirst\",\"rampUpMinimumHostsPct\":1600495341,\"rampUpCapacityThresholdPct\":1829685622,\"peakStartTime\":{\"hour\":179076410,\"minute\":20816690},\"peakLoadBalancingAlgorithm\":\"DepthFirst\",\"rampDownStartTime\":{\"hour\":1302013713,\"minute\":1486616410},\"rampDownLoadBalancingAlgorithm\":\"BreadthFirst\",\"rampDownMinimumHostsPct\":517596277,\"rampDownCapacityThresholdPct\":1116825850,\"rampDownForceLogoffUsers\":true,\"rampDownStopHostsWhen\":\"ZeroActiveSessions\",\"rampDownWaitTimeMinutes\":1688050054,\"rampDownNotificationMessage\":\"gnxkympqan\",\"offPeakStartTime\":{\"hour\":490513850,\"minute\":526112283},\"offPeakLoadBalancingAlgorithm\":\"BreadthFirst\"},\"id\":\"wbtaoyp\",\"name\":\"yghs\",\"type\":\"xcy\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DesktopVirtualizationManager manager = DesktopVirtualizationManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        ScalingPlanPooledSchedule response = manager.scalingPlanPooledSchedules()
            .define("ui")
            .withExistingScalingPlan("yfqi", "gxhnpomyqwcabv")
            .withDaysOfWeek(Arrays.asList(DayOfWeek.SATURDAY))
            .withRampUpStartTime(new Time().withHour(967163680).withMinute(1969142096))
            .withRampUpLoadBalancingAlgorithm(SessionHostLoadBalancingAlgorithm.DEPTH_FIRST)
            .withRampUpMinimumHostsPct(1591261256)
            .withRampUpCapacityThresholdPct(1407391920)
            .withPeakStartTime(new Time().withHour(732928958).withMinute(689377521))
            .withPeakLoadBalancingAlgorithm(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST)
            .withRampDownStartTime(new Time().withHour(917013147).withMinute(230489139))
            .withRampDownLoadBalancingAlgorithm(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST)
            .withRampDownMinimumHostsPct(1644377593)
            .withRampDownCapacityThresholdPct(2037522133)
            .withRampDownForceLogoffUsers(false)
            .withRampDownStopHostsWhen(StopHostsWhen.ZERO_SESSIONS)
            .withRampDownWaitTimeMinutes(1630733068)
            .withRampDownNotificationMessage("zmoaeds")
            .withOffPeakStartTime(new Time().withHour(1606633619).withMinute(2101312168))
            .withOffPeakLoadBalancingAlgorithm(SessionHostLoadBalancingAlgorithm.DEPTH_FIRST)
            .create();

        Assertions.assertEquals(DayOfWeek.WEDNESDAY, response.daysOfWeek().get(0));
        Assertions.assertEquals(1894414352, response.rampUpStartTime().hour());
        Assertions.assertEquals(1596880769, response.rampUpStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST,
            response.rampUpLoadBalancingAlgorithm());
        Assertions.assertEquals(1600495341, response.rampUpMinimumHostsPct());
        Assertions.assertEquals(1829685622, response.rampUpCapacityThresholdPct());
        Assertions.assertEquals(179076410, response.peakStartTime().hour());
        Assertions.assertEquals(20816690, response.peakStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.DEPTH_FIRST, response.peakLoadBalancingAlgorithm());
        Assertions.assertEquals(1302013713, response.rampDownStartTime().hour());
        Assertions.assertEquals(1486616410, response.rampDownStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST,
            response.rampDownLoadBalancingAlgorithm());
        Assertions.assertEquals(517596277, response.rampDownMinimumHostsPct());
        Assertions.assertEquals(1116825850, response.rampDownCapacityThresholdPct());
        Assertions.assertEquals(true, response.rampDownForceLogoffUsers());
        Assertions.assertEquals(StopHostsWhen.ZERO_ACTIVE_SESSIONS, response.rampDownStopHostsWhen());
        Assertions.assertEquals(1688050054, response.rampDownWaitTimeMinutes());
        Assertions.assertEquals("gnxkympqan", response.rampDownNotificationMessage());
        Assertions.assertEquals(490513850, response.offPeakStartTime().hour());
        Assertions.assertEquals(526112283, response.offPeakStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST,
            response.offPeakLoadBalancingAlgorithm());
    }
}
