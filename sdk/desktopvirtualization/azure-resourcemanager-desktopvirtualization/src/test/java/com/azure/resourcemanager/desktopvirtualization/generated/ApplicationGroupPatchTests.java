// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.desktopvirtualization.models.ApplicationGroupPatch;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ApplicationGroupPatchTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ApplicationGroupPatch model =
            BinaryData
                .fromString(
                    "{\"tags\":{\"axibxujw\":\"biexzfeyu\",\"muzyoxaepdk\":\"hqwa\",\"rhdwbavxbniw\":\"jancu\"},\"properties\":{\"description\":\"wz\",\"friendlyName\":\"dbpgnxytxhp\"},\"id\":\"xbzpfzab\",\"name\":\"lcuhxwtctyqiklb\",\"type\":\"ovplw\"}")
                .toObject(ApplicationGroupPatch.class);
        Assertions.assertEquals("biexzfeyu", model.tags().get("axibxujw"));
        Assertions.assertEquals("wz", model.description());
        Assertions.assertEquals("dbpgnxytxhp", model.friendlyName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ApplicationGroupPatch model =
            new ApplicationGroupPatch()
                .withTags(mapOf("axibxujw", "biexzfeyu", "muzyoxaepdk", "hqwa", "rhdwbavxbniw", "jancu"))
                .withDescription("wz")
                .withFriendlyName("dbpgnxytxhp");
        model = BinaryData.fromObject(model).toObject(ApplicationGroupPatch.class);
        Assertions.assertEquals("biexzfeyu", model.tags().get("axibxujw"));
        Assertions.assertEquals("wz", model.description());
        Assertions.assertEquals("dbpgnxytxhp", model.friendlyName());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
