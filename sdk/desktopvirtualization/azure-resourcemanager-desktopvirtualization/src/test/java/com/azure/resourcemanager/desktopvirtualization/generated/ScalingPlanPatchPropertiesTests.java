// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.desktopvirtualization.fluent.models.ScalingPlanPatchProperties;
import com.azure.resourcemanager.desktopvirtualization.models.ScalingHostPoolReference;
import com.azure.resourcemanager.desktopvirtualization.models.ScalingSchedule;
import com.azure.resourcemanager.desktopvirtualization.models.ScalingScheduleDaysOfWeekItem;
import com.azure.resourcemanager.desktopvirtualization.models.SessionHostLoadBalancingAlgorithm;
import com.azure.resourcemanager.desktopvirtualization.models.StopHostsWhen;
import com.azure.resourcemanager.desktopvirtualization.models.Time;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ScalingPlanPatchPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScalingPlanPatchProperties model = BinaryData.fromString(
            "{\"description\":\"vpesapskrdqmhjjd\",\"friendlyName\":\"ldwkyzxuutkn\",\"timeZone\":\"scwsv\",\"exclusionTag\":\"otogtwrupqs\",\"schedules\":[{\"name\":\"i\",\"daysOfWeek\":[\"Tuesday\",\"Thursday\",\"Friday\",\"Monday\"],\"rampUpStartTime\":{\"hour\":579723655,\"minute\":1739821364},\"rampUpLoadBalancingAlgorithm\":\"DepthFirst\",\"rampUpMinimumHostsPct\":1344905503,\"rampUpCapacityThresholdPct\":2133356892,\"peakStartTime\":{\"hour\":297433861,\"minute\":1073138726},\"peakLoadBalancingAlgorithm\":\"DepthFirst\",\"rampDownStartTime\":{\"hour\":1358891927,\"minute\":625040434},\"rampDownLoadBalancingAlgorithm\":\"BreadthFirst\",\"rampDownMinimumHostsPct\":74427835,\"rampDownCapacityThresholdPct\":95653514,\"rampDownForceLogoffUsers\":true,\"rampDownStopHostsWhen\":\"ZeroActiveSessions\",\"rampDownWaitTimeMinutes\":59412891,\"rampDownNotificationMessage\":\"wpn\",\"offPeakStartTime\":{\"hour\":224051014,\"minute\":597860603},\"offPeakLoadBalancingAlgorithm\":\"BreadthFirst\"}],\"hostPoolReferences\":[{\"hostPoolArmPath\":\"clfp\",\"scalingPlanEnabled\":false},{\"hostPoolArmPath\":\"xus\",\"scalingPlanEnabled\":false},{\"hostPoolArmPath\":\"bgyepsbj\",\"scalingPlanEnabled\":false}]}")
            .toObject(ScalingPlanPatchProperties.class);
        Assertions.assertEquals("vpesapskrdqmhjjd", model.description());
        Assertions.assertEquals("ldwkyzxuutkn", model.friendlyName());
        Assertions.assertEquals("scwsv", model.timeZone());
        Assertions.assertEquals("otogtwrupqs", model.exclusionTag());
        Assertions.assertEquals("i", model.schedules().get(0).name());
        Assertions.assertEquals(ScalingScheduleDaysOfWeekItem.TUESDAY, model.schedules().get(0).daysOfWeek().get(0));
        Assertions.assertEquals(579723655, model.schedules().get(0).rampUpStartTime().hour());
        Assertions.assertEquals(1739821364, model.schedules().get(0).rampUpStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.DEPTH_FIRST,
            model.schedules().get(0).rampUpLoadBalancingAlgorithm());
        Assertions.assertEquals(1344905503, model.schedules().get(0).rampUpMinimumHostsPct());
        Assertions.assertEquals(2133356892, model.schedules().get(0).rampUpCapacityThresholdPct());
        Assertions.assertEquals(297433861, model.schedules().get(0).peakStartTime().hour());
        Assertions.assertEquals(1073138726, model.schedules().get(0).peakStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.DEPTH_FIRST,
            model.schedules().get(0).peakLoadBalancingAlgorithm());
        Assertions.assertEquals(1358891927, model.schedules().get(0).rampDownStartTime().hour());
        Assertions.assertEquals(625040434, model.schedules().get(0).rampDownStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST,
            model.schedules().get(0).rampDownLoadBalancingAlgorithm());
        Assertions.assertEquals(74427835, model.schedules().get(0).rampDownMinimumHostsPct());
        Assertions.assertEquals(95653514, model.schedules().get(0).rampDownCapacityThresholdPct());
        Assertions.assertEquals(true, model.schedules().get(0).rampDownForceLogoffUsers());
        Assertions.assertEquals(StopHostsWhen.ZERO_ACTIVE_SESSIONS, model.schedules().get(0).rampDownStopHostsWhen());
        Assertions.assertEquals(59412891, model.schedules().get(0).rampDownWaitTimeMinutes());
        Assertions.assertEquals("wpn", model.schedules().get(0).rampDownNotificationMessage());
        Assertions.assertEquals(224051014, model.schedules().get(0).offPeakStartTime().hour());
        Assertions.assertEquals(597860603, model.schedules().get(0).offPeakStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST,
            model.schedules().get(0).offPeakLoadBalancingAlgorithm());
        Assertions.assertEquals("clfp", model.hostPoolReferences().get(0).hostPoolArmPath());
        Assertions.assertEquals(false, model.hostPoolReferences().get(0).scalingPlanEnabled());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScalingPlanPatchProperties model
            = new ScalingPlanPatchProperties().withDescription("vpesapskrdqmhjjd")
                .withFriendlyName("ldwkyzxuutkn")
                .withTimeZone("scwsv")
                .withExclusionTag("otogtwrupqs")
                .withSchedules(
                    Arrays
                        .asList(new ScalingSchedule().withName("i")
                            .withDaysOfWeek(Arrays.asList(ScalingScheduleDaysOfWeekItem.TUESDAY,
                                ScalingScheduleDaysOfWeekItem.THURSDAY, ScalingScheduleDaysOfWeekItem.FRIDAY,
                                ScalingScheduleDaysOfWeekItem.MONDAY))
                            .withRampUpStartTime(new Time().withHour(579723655).withMinute(1739821364))
                            .withRampUpLoadBalancingAlgorithm(SessionHostLoadBalancingAlgorithm.DEPTH_FIRST)
                            .withRampUpMinimumHostsPct(1344905503)
                            .withRampUpCapacityThresholdPct(2133356892)
                            .withPeakStartTime(new Time().withHour(297433861).withMinute(1073138726))
                            .withPeakLoadBalancingAlgorithm(SessionHostLoadBalancingAlgorithm.DEPTH_FIRST)
                            .withRampDownStartTime(new Time().withHour(1358891927).withMinute(625040434))
                            .withRampDownLoadBalancingAlgorithm(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST)
                            .withRampDownMinimumHostsPct(74427835)
                            .withRampDownCapacityThresholdPct(95653514)
                            .withRampDownForceLogoffUsers(true)
                            .withRampDownStopHostsWhen(StopHostsWhen.ZERO_ACTIVE_SESSIONS)
                            .withRampDownWaitTimeMinutes(59412891)
                            .withRampDownNotificationMessage("wpn")
                            .withOffPeakStartTime(new Time().withHour(224051014).withMinute(597860603))
                            .withOffPeakLoadBalancingAlgorithm(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST)))
                .withHostPoolReferences(Arrays.asList(
                    new ScalingHostPoolReference().withHostPoolArmPath("clfp").withScalingPlanEnabled(false),
                    new ScalingHostPoolReference().withHostPoolArmPath("xus").withScalingPlanEnabled(false),
                    new ScalingHostPoolReference().withHostPoolArmPath("bgyepsbj").withScalingPlanEnabled(false)));
        model = BinaryData.fromObject(model).toObject(ScalingPlanPatchProperties.class);
        Assertions.assertEquals("vpesapskrdqmhjjd", model.description());
        Assertions.assertEquals("ldwkyzxuutkn", model.friendlyName());
        Assertions.assertEquals("scwsv", model.timeZone());
        Assertions.assertEquals("otogtwrupqs", model.exclusionTag());
        Assertions.assertEquals("i", model.schedules().get(0).name());
        Assertions.assertEquals(ScalingScheduleDaysOfWeekItem.TUESDAY, model.schedules().get(0).daysOfWeek().get(0));
        Assertions.assertEquals(579723655, model.schedules().get(0).rampUpStartTime().hour());
        Assertions.assertEquals(1739821364, model.schedules().get(0).rampUpStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.DEPTH_FIRST,
            model.schedules().get(0).rampUpLoadBalancingAlgorithm());
        Assertions.assertEquals(1344905503, model.schedules().get(0).rampUpMinimumHostsPct());
        Assertions.assertEquals(2133356892, model.schedules().get(0).rampUpCapacityThresholdPct());
        Assertions.assertEquals(297433861, model.schedules().get(0).peakStartTime().hour());
        Assertions.assertEquals(1073138726, model.schedules().get(0).peakStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.DEPTH_FIRST,
            model.schedules().get(0).peakLoadBalancingAlgorithm());
        Assertions.assertEquals(1358891927, model.schedules().get(0).rampDownStartTime().hour());
        Assertions.assertEquals(625040434, model.schedules().get(0).rampDownStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST,
            model.schedules().get(0).rampDownLoadBalancingAlgorithm());
        Assertions.assertEquals(74427835, model.schedules().get(0).rampDownMinimumHostsPct());
        Assertions.assertEquals(95653514, model.schedules().get(0).rampDownCapacityThresholdPct());
        Assertions.assertEquals(true, model.schedules().get(0).rampDownForceLogoffUsers());
        Assertions.assertEquals(StopHostsWhen.ZERO_ACTIVE_SESSIONS, model.schedules().get(0).rampDownStopHostsWhen());
        Assertions.assertEquals(59412891, model.schedules().get(0).rampDownWaitTimeMinutes());
        Assertions.assertEquals("wpn", model.schedules().get(0).rampDownNotificationMessage());
        Assertions.assertEquals(224051014, model.schedules().get(0).offPeakStartTime().hour());
        Assertions.assertEquals(597860603, model.schedules().get(0).offPeakStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST,
            model.schedules().get(0).offPeakLoadBalancingAlgorithm());
        Assertions.assertEquals("clfp", model.hostPoolReferences().get(0).hostPoolArmPath());
        Assertions.assertEquals(false, model.hostPoolReferences().get(0).scalingPlanEnabled());
    }
}
