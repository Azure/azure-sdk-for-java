// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.desktopvirtualization.fluent.models.ScalingPlanPatchProperties;
import com.azure.resourcemanager.desktopvirtualization.models.ScalingHostPoolReference;
import com.azure.resourcemanager.desktopvirtualization.models.ScalingSchedule;
import com.azure.resourcemanager.desktopvirtualization.models.ScalingScheduleDaysOfWeekItem;
import com.azure.resourcemanager.desktopvirtualization.models.SessionHostLoadBalancingAlgorithm;
import com.azure.resourcemanager.desktopvirtualization.models.StopHostsWhen;
import com.azure.resourcemanager.desktopvirtualization.models.Time;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ScalingPlanPatchPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScalingPlanPatchProperties model =
            BinaryData
                .fromString(
                    "{\"description\":\"axdbabph\",\"friendlyName\":\"rqlfktsthsucocmn\",\"timeZone\":\"azt\",\"exclusionTag\":\"twwrqp\",\"schedules\":[{\"name\":\"kzywbiex\",\"daysOfWeek\":[\"Monday\",\"Saturday\",\"Tuesday\",\"Thursday\"],\"rampUpStartTime\":{\"hour\":537783371,\"minute\":712970145},\"rampUpLoadBalancingAlgorithm\":\"BreadthFirst\",\"rampUpMinimumHostsPct\":1757218598,\"rampUpCapacityThresholdPct\":954772002,\"peakStartTime\":{\"hour\":913520848,\"minute\":2089644825},\"peakLoadBalancingAlgorithm\":\"DepthFirst\",\"rampDownStartTime\":{\"hour\":1122495677,\"minute\":978941807},\"rampDownLoadBalancingAlgorithm\":\"DepthFirst\",\"rampDownMinimumHostsPct\":1637273093,\"rampDownCapacityThresholdPct\":556709719,\"rampDownForceLogoffUsers\":false,\"rampDownStopHostsWhen\":\"ZeroSessions\",\"rampDownWaitTimeMinutes\":539118010,\"rampDownNotificationMessage\":\"xrhdwbavxbniwdjs\",\"offPeakStartTime\":{\"hour\":1721819579,\"minute\":44682703},\"offPeakLoadBalancingAlgorithm\":\"BreadthFirst\"},{\"name\":\"gnxytxhpzxbz\",\"daysOfWeek\":[\"Tuesday\",\"Saturday\",\"Sunday\"],\"rampUpStartTime\":{\"hour\":687811406,\"minute\":2112719993},\"rampUpLoadBalancingAlgorithm\":\"DepthFirst\",\"rampUpMinimumHostsPct\":1070511980,\"rampUpCapacityThresholdPct\":767485321,\"peakStartTime\":{\"hour\":683096645,\"minute\":228169976},\"peakLoadBalancingAlgorithm\":\"BreadthFirst\",\"rampDownStartTime\":{\"hour\":1091212098,\"minute\":1229662931},\"rampDownLoadBalancingAlgorithm\":\"DepthFirst\",\"rampDownMinimumHostsPct\":507562638,\"rampDownCapacityThresholdPct\":1271650742,\"rampDownForceLogoffUsers\":false,\"rampDownStopHostsWhen\":\"ZeroActiveSessions\",\"rampDownWaitTimeMinutes\":338198941,\"rampDownNotificationMessage\":\"osvmk\",\"offPeakStartTime\":{\"hour\":979826416,\"minute\":941863244},\"offPeakLoadBalancingAlgorithm\":\"DepthFirst\"},{\"name\":\"kfplgmgsxnk\",\"daysOfWeek\":[\"Friday\"],\"rampUpStartTime\":{\"hour\":1802573976,\"minute\":1649575445},\"rampUpLoadBalancingAlgorithm\":\"DepthFirst\",\"rampUpMinimumHostsPct\":909915522,\"rampUpCapacityThresholdPct\":566835679,\"peakStartTime\":{\"hour\":1665401728,\"minute\":1601345404},\"peakLoadBalancingAlgorithm\":\"BreadthFirst\",\"rampDownStartTime\":{\"hour\":2017228559,\"minute\":1973154307},\"rampDownLoadBalancingAlgorithm\":\"BreadthFirst\",\"rampDownMinimumHostsPct\":1060544654,\"rampDownCapacityThresholdPct\":413325201,\"rampDownForceLogoffUsers\":false,\"rampDownStopHostsWhen\":\"ZeroActiveSessions\",\"rampDownWaitTimeMinutes\":1370468424,\"rampDownNotificationMessage\":\"nyqupedeojnabck\",\"offPeakStartTime\":{\"hour\":598884844,\"minute\":611656940},\"offPeakLoadBalancingAlgorithm\":\"DepthFirst\"}],\"hostPoolReferences\":[{\"hostPoolArmPath\":\"btfhvpesaps\",\"scalingPlanEnabled\":false}]}")
                .toObject(ScalingPlanPatchProperties.class);
        Assertions.assertEquals("axdbabph", model.description());
        Assertions.assertEquals("rqlfktsthsucocmn", model.friendlyName());
        Assertions.assertEquals("azt", model.timeZone());
        Assertions.assertEquals("twwrqp", model.exclusionTag());
        Assertions.assertEquals("kzywbiex", model.schedules().get(0).name());
        Assertions.assertEquals(ScalingScheduleDaysOfWeekItem.MONDAY, model.schedules().get(0).daysOfWeek().get(0));
        Assertions.assertEquals(537783371, model.schedules().get(0).rampUpStartTime().hour());
        Assertions.assertEquals(712970145, model.schedules().get(0).rampUpStartTime().minute());
        Assertions
            .assertEquals(
                SessionHostLoadBalancingAlgorithm.BREADTH_FIRST,
                model.schedules().get(0).rampUpLoadBalancingAlgorithm());
        Assertions.assertEquals(1757218598, model.schedules().get(0).rampUpMinimumHostsPct());
        Assertions.assertEquals(954772002, model.schedules().get(0).rampUpCapacityThresholdPct());
        Assertions.assertEquals(913520848, model.schedules().get(0).peakStartTime().hour());
        Assertions.assertEquals(2089644825, model.schedules().get(0).peakStartTime().minute());
        Assertions
            .assertEquals(
                SessionHostLoadBalancingAlgorithm.DEPTH_FIRST, model.schedules().get(0).peakLoadBalancingAlgorithm());
        Assertions.assertEquals(1122495677, model.schedules().get(0).rampDownStartTime().hour());
        Assertions.assertEquals(978941807, model.schedules().get(0).rampDownStartTime().minute());
        Assertions
            .assertEquals(
                SessionHostLoadBalancingAlgorithm.DEPTH_FIRST,
                model.schedules().get(0).rampDownLoadBalancingAlgorithm());
        Assertions.assertEquals(1637273093, model.schedules().get(0).rampDownMinimumHostsPct());
        Assertions.assertEquals(556709719, model.schedules().get(0).rampDownCapacityThresholdPct());
        Assertions.assertEquals(false, model.schedules().get(0).rampDownForceLogoffUsers());
        Assertions.assertEquals(StopHostsWhen.ZERO_SESSIONS, model.schedules().get(0).rampDownStopHostsWhen());
        Assertions.assertEquals(539118010, model.schedules().get(0).rampDownWaitTimeMinutes());
        Assertions.assertEquals("xrhdwbavxbniwdjs", model.schedules().get(0).rampDownNotificationMessage());
        Assertions.assertEquals(1721819579, model.schedules().get(0).offPeakStartTime().hour());
        Assertions.assertEquals(44682703, model.schedules().get(0).offPeakStartTime().minute());
        Assertions
            .assertEquals(
                SessionHostLoadBalancingAlgorithm.BREADTH_FIRST,
                model.schedules().get(0).offPeakLoadBalancingAlgorithm());
        Assertions.assertEquals("btfhvpesaps", model.hostPoolReferences().get(0).hostPoolArmPath());
        Assertions.assertEquals(false, model.hostPoolReferences().get(0).scalingPlanEnabled());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScalingPlanPatchProperties model =
            new ScalingPlanPatchProperties()
                .withDescription("axdbabph")
                .withFriendlyName("rqlfktsthsucocmn")
                .withTimeZone("azt")
                .withExclusionTag("twwrqp")
                .withSchedules(
                    Arrays
                        .asList(
                            new ScalingSchedule()
                                .withName("kzywbiex")
                                .withDaysOfWeek(
                                    Arrays
                                        .asList(
                                            ScalingScheduleDaysOfWeekItem.MONDAY,
                                            ScalingScheduleDaysOfWeekItem.SATURDAY,
                                            ScalingScheduleDaysOfWeekItem.TUESDAY,
                                            ScalingScheduleDaysOfWeekItem.THURSDAY))
                                .withRampUpStartTime(new Time().withHour(537783371).withMinute(712970145))
                                .withRampUpLoadBalancingAlgorithm(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST)
                                .withRampUpMinimumHostsPct(1757218598)
                                .withRampUpCapacityThresholdPct(954772002)
                                .withPeakStartTime(new Time().withHour(913520848).withMinute(2089644825))
                                .withPeakLoadBalancingAlgorithm(SessionHostLoadBalancingAlgorithm.DEPTH_FIRST)
                                .withRampDownStartTime(new Time().withHour(1122495677).withMinute(978941807))
                                .withRampDownLoadBalancingAlgorithm(SessionHostLoadBalancingAlgorithm.DEPTH_FIRST)
                                .withRampDownMinimumHostsPct(1637273093)
                                .withRampDownCapacityThresholdPct(556709719)
                                .withRampDownForceLogoffUsers(false)
                                .withRampDownStopHostsWhen(StopHostsWhen.ZERO_SESSIONS)
                                .withRampDownWaitTimeMinutes(539118010)
                                .withRampDownNotificationMessage("xrhdwbavxbniwdjs")
                                .withOffPeakStartTime(new Time().withHour(1721819579).withMinute(44682703))
                                .withOffPeakLoadBalancingAlgorithm(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST),
                            new ScalingSchedule()
                                .withName("gnxytxhpzxbz")
                                .withDaysOfWeek(
                                    Arrays
                                        .asList(
                                            ScalingScheduleDaysOfWeekItem.TUESDAY,
                                            ScalingScheduleDaysOfWeekItem.SATURDAY,
                                            ScalingScheduleDaysOfWeekItem.SUNDAY))
                                .withRampUpStartTime(new Time().withHour(687811406).withMinute(2112719993))
                                .withRampUpLoadBalancingAlgorithm(SessionHostLoadBalancingAlgorithm.DEPTH_FIRST)
                                .withRampUpMinimumHostsPct(1070511980)
                                .withRampUpCapacityThresholdPct(767485321)
                                .withPeakStartTime(new Time().withHour(683096645).withMinute(228169976))
                                .withPeakLoadBalancingAlgorithm(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST)
                                .withRampDownStartTime(new Time().withHour(1091212098).withMinute(1229662931))
                                .withRampDownLoadBalancingAlgorithm(SessionHostLoadBalancingAlgorithm.DEPTH_FIRST)
                                .withRampDownMinimumHostsPct(507562638)
                                .withRampDownCapacityThresholdPct(1271650742)
                                .withRampDownForceLogoffUsers(false)
                                .withRampDownStopHostsWhen(StopHostsWhen.ZERO_ACTIVE_SESSIONS)
                                .withRampDownWaitTimeMinutes(338198941)
                                .withRampDownNotificationMessage("osvmk")
                                .withOffPeakStartTime(new Time().withHour(979826416).withMinute(941863244))
                                .withOffPeakLoadBalancingAlgorithm(SessionHostLoadBalancingAlgorithm.DEPTH_FIRST),
                            new ScalingSchedule()
                                .withName("kfplgmgsxnk")
                                .withDaysOfWeek(Arrays.asList(ScalingScheduleDaysOfWeekItem.FRIDAY))
                                .withRampUpStartTime(new Time().withHour(1802573976).withMinute(1649575445))
                                .withRampUpLoadBalancingAlgorithm(SessionHostLoadBalancingAlgorithm.DEPTH_FIRST)
                                .withRampUpMinimumHostsPct(909915522)
                                .withRampUpCapacityThresholdPct(566835679)
                                .withPeakStartTime(new Time().withHour(1665401728).withMinute(1601345404))
                                .withPeakLoadBalancingAlgorithm(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST)
                                .withRampDownStartTime(new Time().withHour(2017228559).withMinute(1973154307))
                                .withRampDownLoadBalancingAlgorithm(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST)
                                .withRampDownMinimumHostsPct(1060544654)
                                .withRampDownCapacityThresholdPct(413325201)
                                .withRampDownForceLogoffUsers(false)
                                .withRampDownStopHostsWhen(StopHostsWhen.ZERO_ACTIVE_SESSIONS)
                                .withRampDownWaitTimeMinutes(1370468424)
                                .withRampDownNotificationMessage("nyqupedeojnabck")
                                .withOffPeakStartTime(new Time().withHour(598884844).withMinute(611656940))
                                .withOffPeakLoadBalancingAlgorithm(SessionHostLoadBalancingAlgorithm.DEPTH_FIRST)))
                .withHostPoolReferences(
                    Arrays
                        .asList(
                            new ScalingHostPoolReference()
                                .withHostPoolArmPath("btfhvpesaps")
                                .withScalingPlanEnabled(false)));
        model = BinaryData.fromObject(model).toObject(ScalingPlanPatchProperties.class);
        Assertions.assertEquals("axdbabph", model.description());
        Assertions.assertEquals("rqlfktsthsucocmn", model.friendlyName());
        Assertions.assertEquals("azt", model.timeZone());
        Assertions.assertEquals("twwrqp", model.exclusionTag());
        Assertions.assertEquals("kzywbiex", model.schedules().get(0).name());
        Assertions.assertEquals(ScalingScheduleDaysOfWeekItem.MONDAY, model.schedules().get(0).daysOfWeek().get(0));
        Assertions.assertEquals(537783371, model.schedules().get(0).rampUpStartTime().hour());
        Assertions.assertEquals(712970145, model.schedules().get(0).rampUpStartTime().minute());
        Assertions
            .assertEquals(
                SessionHostLoadBalancingAlgorithm.BREADTH_FIRST,
                model.schedules().get(0).rampUpLoadBalancingAlgorithm());
        Assertions.assertEquals(1757218598, model.schedules().get(0).rampUpMinimumHostsPct());
        Assertions.assertEquals(954772002, model.schedules().get(0).rampUpCapacityThresholdPct());
        Assertions.assertEquals(913520848, model.schedules().get(0).peakStartTime().hour());
        Assertions.assertEquals(2089644825, model.schedules().get(0).peakStartTime().minute());
        Assertions
            .assertEquals(
                SessionHostLoadBalancingAlgorithm.DEPTH_FIRST, model.schedules().get(0).peakLoadBalancingAlgorithm());
        Assertions.assertEquals(1122495677, model.schedules().get(0).rampDownStartTime().hour());
        Assertions.assertEquals(978941807, model.schedules().get(0).rampDownStartTime().minute());
        Assertions
            .assertEquals(
                SessionHostLoadBalancingAlgorithm.DEPTH_FIRST,
                model.schedules().get(0).rampDownLoadBalancingAlgorithm());
        Assertions.assertEquals(1637273093, model.schedules().get(0).rampDownMinimumHostsPct());
        Assertions.assertEquals(556709719, model.schedules().get(0).rampDownCapacityThresholdPct());
        Assertions.assertEquals(false, model.schedules().get(0).rampDownForceLogoffUsers());
        Assertions.assertEquals(StopHostsWhen.ZERO_SESSIONS, model.schedules().get(0).rampDownStopHostsWhen());
        Assertions.assertEquals(539118010, model.schedules().get(0).rampDownWaitTimeMinutes());
        Assertions.assertEquals("xrhdwbavxbniwdjs", model.schedules().get(0).rampDownNotificationMessage());
        Assertions.assertEquals(1721819579, model.schedules().get(0).offPeakStartTime().hour());
        Assertions.assertEquals(44682703, model.schedules().get(0).offPeakStartTime().minute());
        Assertions
            .assertEquals(
                SessionHostLoadBalancingAlgorithm.BREADTH_FIRST,
                model.schedules().get(0).offPeakLoadBalancingAlgorithm());
        Assertions.assertEquals("btfhvpesaps", model.hostPoolReferences().get(0).hostPoolArmPath());
        Assertions.assertEquals(false, model.hostPoolReferences().get(0).scalingPlanEnabled());
    }
}
