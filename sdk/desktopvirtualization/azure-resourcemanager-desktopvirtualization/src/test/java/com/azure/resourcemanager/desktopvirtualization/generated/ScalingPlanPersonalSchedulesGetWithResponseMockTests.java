// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.desktopvirtualization.DesktopVirtualizationManager;
import com.azure.resourcemanager.desktopvirtualization.models.DayOfWeek;
import com.azure.resourcemanager.desktopvirtualization.models.ScalingPlanPersonalSchedule;
import com.azure.resourcemanager.desktopvirtualization.models.SessionHandlingOperation;
import com.azure.resourcemanager.desktopvirtualization.models.SetStartVMOnConnect;
import com.azure.resourcemanager.desktopvirtualization.models.StartupBehavior;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ScalingPlanPersonalSchedulesGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"daysOfWeek\":[\"Saturday\",\"Saturday\",\"Friday\"],\"rampUpStartTime\":{\"hour\":1280282209,\"minute\":87714602},\"rampUpAutoStartHosts\":\"None\",\"rampUpStartVMOnConnect\":\"Enable\",\"rampUpActionOnDisconnect\":\"Hibernate\",\"rampUpMinutesToWaitOnDisconnect\":2014573492,\"rampUpActionOnLogoff\":\"Hibernate\",\"rampUpMinutesToWaitOnLogoff\":1515961977,\"peakStartTime\":{\"hour\":1015093902,\"minute\":1169828149},\"peakStartVMOnConnect\":\"Disable\",\"peakActionOnDisconnect\":\"Deallocate\",\"peakMinutesToWaitOnDisconnect\":926245450,\"peakActionOnLogoff\":\"Hibernate\",\"peakMinutesToWaitOnLogoff\":1688935370,\"rampDownStartTime\":{\"hour\":1415978839,\"minute\":958462215},\"rampDownStartVMOnConnect\":\"Enable\",\"rampDownActionOnDisconnect\":\"None\",\"rampDownMinutesToWaitOnDisconnect\":1099673066,\"rampDownActionOnLogoff\":\"None\",\"rampDownMinutesToWaitOnLogoff\":1760855054,\"offPeakStartTime\":{\"hour\":980512005,\"minute\":1991575166},\"offPeakStartVMOnConnect\":\"Disable\",\"offPeakActionOnDisconnect\":\"Hibernate\",\"offPeakMinutesToWaitOnDisconnect\":1928813132,\"offPeakActionOnLogoff\":\"Hibernate\",\"offPeakMinutesToWaitOnLogoff\":243221217},\"id\":\"dxfzzzwyjaf\",\"name\":\"tlhguynuchl\",\"type\":\"mltx\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DesktopVirtualizationManager manager = DesktopVirtualizationManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        ScalingPlanPersonalSchedule response = manager.scalingPlanPersonalSchedules()
            .getWithResponse("lkujrllfojui", "jpu", "yjucejikzoeo", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals(DayOfWeek.SATURDAY, response.daysOfWeek().get(0));
        Assertions.assertEquals(1280282209, response.rampUpStartTime().hour());
        Assertions.assertEquals(87714602, response.rampUpStartTime().minute());
        Assertions.assertEquals(StartupBehavior.NONE, response.rampUpAutoStartHosts());
        Assertions.assertEquals(SetStartVMOnConnect.ENABLE, response.rampUpStartVMOnConnect());
        Assertions.assertEquals(SessionHandlingOperation.HIBERNATE, response.rampUpActionOnDisconnect());
        Assertions.assertEquals(2014573492, response.rampUpMinutesToWaitOnDisconnect());
        Assertions.assertEquals(SessionHandlingOperation.HIBERNATE, response.rampUpActionOnLogoff());
        Assertions.assertEquals(1515961977, response.rampUpMinutesToWaitOnLogoff());
        Assertions.assertEquals(1015093902, response.peakStartTime().hour());
        Assertions.assertEquals(1169828149, response.peakStartTime().minute());
        Assertions.assertEquals(SetStartVMOnConnect.DISABLE, response.peakStartVMOnConnect());
        Assertions.assertEquals(SessionHandlingOperation.DEALLOCATE, response.peakActionOnDisconnect());
        Assertions.assertEquals(926245450, response.peakMinutesToWaitOnDisconnect());
        Assertions.assertEquals(SessionHandlingOperation.HIBERNATE, response.peakActionOnLogoff());
        Assertions.assertEquals(1688935370, response.peakMinutesToWaitOnLogoff());
        Assertions.assertEquals(1415978839, response.rampDownStartTime().hour());
        Assertions.assertEquals(958462215, response.rampDownStartTime().minute());
        Assertions.assertEquals(SetStartVMOnConnect.ENABLE, response.rampDownStartVMOnConnect());
        Assertions.assertEquals(SessionHandlingOperation.NONE, response.rampDownActionOnDisconnect());
        Assertions.assertEquals(1099673066, response.rampDownMinutesToWaitOnDisconnect());
        Assertions.assertEquals(SessionHandlingOperation.NONE, response.rampDownActionOnLogoff());
        Assertions.assertEquals(1760855054, response.rampDownMinutesToWaitOnLogoff());
        Assertions.assertEquals(980512005, response.offPeakStartTime().hour());
        Assertions.assertEquals(1991575166, response.offPeakStartTime().minute());
        Assertions.assertEquals(SetStartVMOnConnect.DISABLE, response.offPeakStartVMOnConnect());
        Assertions.assertEquals(SessionHandlingOperation.HIBERNATE, response.offPeakActionOnDisconnect());
        Assertions.assertEquals(1928813132, response.offPeakMinutesToWaitOnDisconnect());
        Assertions.assertEquals(SessionHandlingOperation.HIBERNATE, response.offPeakActionOnLogoff());
        Assertions.assertEquals(243221217, response.offPeakMinutesToWaitOnLogoff());
    }
}
