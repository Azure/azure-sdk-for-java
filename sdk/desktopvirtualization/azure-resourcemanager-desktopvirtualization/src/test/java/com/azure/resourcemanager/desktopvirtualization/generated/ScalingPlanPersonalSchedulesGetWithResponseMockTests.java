// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.desktopvirtualization.DesktopVirtualizationManager;
import com.azure.resourcemanager.desktopvirtualization.models.DayOfWeek;
import com.azure.resourcemanager.desktopvirtualization.models.ScalingPlanPersonalSchedule;
import com.azure.resourcemanager.desktopvirtualization.models.SessionHandlingOperation;
import com.azure.resourcemanager.desktopvirtualization.models.SetStartVMOnConnect;
import com.azure.resourcemanager.desktopvirtualization.models.StartupBehavior;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ScalingPlanPersonalSchedulesGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"daysOfWeek\":[\"Wednesday\"],\"rampUpStartTime\":{\"hour\":504276200,\"minute\":273714552},\"rampUpAutoStartHosts\":\"All\",\"rampUpStartVMOnConnect\":\"Enable\",\"rampUpActionOnDisconnect\":\"Hibernate\",\"rampUpMinutesToWaitOnDisconnect\":837661803,\"rampUpActionOnLogoff\":\"Hibernate\",\"rampUpMinutesToWaitOnLogoff\":1248753250,\"peakStartTime\":{\"hour\":442073665,\"minute\":2020150927},\"peakStartVMOnConnect\":\"Disable\",\"peakActionOnDisconnect\":\"None\",\"peakMinutesToWaitOnDisconnect\":792139303,\"peakActionOnLogoff\":\"Deallocate\",\"peakMinutesToWaitOnLogoff\":381107449,\"rampDownStartTime\":{\"hour\":639293987,\"minute\":685959660},\"rampDownStartVMOnConnect\":\"Disable\",\"rampDownActionOnDisconnect\":\"Deallocate\",\"rampDownMinutesToWaitOnDisconnect\":1539061935,\"rampDownActionOnLogoff\":\"Hibernate\",\"rampDownMinutesToWaitOnLogoff\":1692137412,\"offPeakStartTime\":{\"hour\":45100221,\"minute\":758863003},\"offPeakStartVMOnConnect\":\"Disable\",\"offPeakActionOnDisconnect\":\"Hibernate\",\"offPeakMinutesToWaitOnDisconnect\":2055999585,\"offPeakActionOnLogoff\":\"Hibernate\",\"offPeakMinutesToWaitOnLogoff\":1093469503},\"id\":\"hfhpfp\",\"name\":\"zjzoywjxhpdul\",\"type\":\"ntacn\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        DesktopVirtualizationManager manager =
            DesktopVirtualizationManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        ScalingPlanPersonalSchedule response =
            manager
                .scalingPlanPersonalSchedules()
                .getWithResponse("byrplrohkpig", "fusuckzmkwklsno", "axmqeqal", com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals(DayOfWeek.WEDNESDAY, response.daysOfWeek().get(0));
        Assertions.assertEquals(504276200, response.rampUpStartTime().hour());
        Assertions.assertEquals(273714552, response.rampUpStartTime().minute());
        Assertions.assertEquals(StartupBehavior.ALL, response.rampUpAutoStartHosts());
        Assertions.assertEquals(SetStartVMOnConnect.ENABLE, response.rampUpStartVMOnConnect());
        Assertions.assertEquals(SessionHandlingOperation.HIBERNATE, response.rampUpActionOnDisconnect());
        Assertions.assertEquals(837661803, response.rampUpMinutesToWaitOnDisconnect());
        Assertions.assertEquals(SessionHandlingOperation.HIBERNATE, response.rampUpActionOnLogoff());
        Assertions.assertEquals(1248753250, response.rampUpMinutesToWaitOnLogoff());
        Assertions.assertEquals(442073665, response.peakStartTime().hour());
        Assertions.assertEquals(2020150927, response.peakStartTime().minute());
        Assertions.assertEquals(SetStartVMOnConnect.DISABLE, response.peakStartVMOnConnect());
        Assertions.assertEquals(SessionHandlingOperation.NONE, response.peakActionOnDisconnect());
        Assertions.assertEquals(792139303, response.peakMinutesToWaitOnDisconnect());
        Assertions.assertEquals(SessionHandlingOperation.DEALLOCATE, response.peakActionOnLogoff());
        Assertions.assertEquals(381107449, response.peakMinutesToWaitOnLogoff());
        Assertions.assertEquals(639293987, response.rampDownStartTime().hour());
        Assertions.assertEquals(685959660, response.rampDownStartTime().minute());
        Assertions.assertEquals(SetStartVMOnConnect.DISABLE, response.rampDownStartVMOnConnect());
        Assertions.assertEquals(SessionHandlingOperation.DEALLOCATE, response.rampDownActionOnDisconnect());
        Assertions.assertEquals(1539061935, response.rampDownMinutesToWaitOnDisconnect());
        Assertions.assertEquals(SessionHandlingOperation.HIBERNATE, response.rampDownActionOnLogoff());
        Assertions.assertEquals(1692137412, response.rampDownMinutesToWaitOnLogoff());
        Assertions.assertEquals(45100221, response.offPeakStartTime().hour());
        Assertions.assertEquals(758863003, response.offPeakStartTime().minute());
        Assertions.assertEquals(SetStartVMOnConnect.DISABLE, response.offPeakStartVMOnConnect());
        Assertions.assertEquals(SessionHandlingOperation.HIBERNATE, response.offPeakActionOnDisconnect());
        Assertions.assertEquals(2055999585, response.offPeakMinutesToWaitOnDisconnect());
        Assertions.assertEquals(SessionHandlingOperation.HIBERNATE, response.offPeakActionOnLogoff());
        Assertions.assertEquals(1093469503, response.offPeakMinutesToWaitOnLogoff());
    }
}
