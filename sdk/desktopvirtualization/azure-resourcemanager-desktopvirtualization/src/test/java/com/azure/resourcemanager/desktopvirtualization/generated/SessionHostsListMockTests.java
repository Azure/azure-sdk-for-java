// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.desktopvirtualization.DesktopVirtualizationManager;
import com.azure.resourcemanager.desktopvirtualization.models.SessionHost;
import com.azure.resourcemanager.desktopvirtualization.models.Status;
import com.azure.resourcemanager.desktopvirtualization.models.UpdateState;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class SessionHostsListMockTests {
    @Test
    public void testList() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"properties\":{\"objectId\":\"koih\",\"lastHeartBeat\":\"2021-01-04T00:33:47Z\",\"sessions\":874789657,\"agentVersion\":\"lmljhlnymzotq\",\"allowNewSession\":true,\"virtualMachineId\":\"zcbmqqvxmvwf\",\"resourceId\":\"ayxonsupeujl\",\"assignedUser\":\"nh\",\"friendlyName\":\"sqltnzo\",\"status\":\"NeedsAssistance\",\"statusTimestamp\":\"2020-12-29T06:07:24Z\",\"osVersion\":\"nxfyqonm\",\"sxSStackVersion\":\"ox\",\"updateState\":\"Started\",\"lastUpdateTime\":\"2021-07-30T17:53:09Z\",\"updateErrorMessage\":\"xiqxeiiqbimh\",\"sessionHostHealthCheckResults\":[]},\"id\":\"winhehfqpo\",\"name\":\"vwbcblembnkbwv\",\"type\":\"vxkdivqihebwtswb\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        DesktopVirtualizationManager manager =
            DesktopVirtualizationManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<SessionHost> response =
            manager
                .sessionHosts()
                .list("s", "sphaivmxyasflvg", 1752644697, false, 826140742, com.azure.core.util.Context.NONE);

        Assertions
            .assertEquals(OffsetDateTime.parse("2021-01-04T00:33:47Z"), response.iterator().next().lastHeartBeat());
        Assertions.assertEquals(874789657, response.iterator().next().sessions());
        Assertions.assertEquals("lmljhlnymzotq", response.iterator().next().agentVersion());
        Assertions.assertEquals(true, response.iterator().next().allowNewSession());
        Assertions.assertEquals("nh", response.iterator().next().assignedUser());
        Assertions.assertEquals("sqltnzo", response.iterator().next().friendlyName());
        Assertions.assertEquals(Status.NEEDS_ASSISTANCE, response.iterator().next().status());
        Assertions.assertEquals("nxfyqonm", response.iterator().next().osVersion());
        Assertions.assertEquals("ox", response.iterator().next().sxSStackVersion());
        Assertions.assertEquals(UpdateState.STARTED, response.iterator().next().updateState());
        Assertions.assertEquals("xiqxeiiqbimh", response.iterator().next().updateErrorMessage());
    }
}
