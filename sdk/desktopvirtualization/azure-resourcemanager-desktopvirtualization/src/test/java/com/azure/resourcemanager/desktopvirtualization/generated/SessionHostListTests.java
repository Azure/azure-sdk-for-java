// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.desktopvirtualization.fluent.models.SessionHostInner;
import com.azure.resourcemanager.desktopvirtualization.models.SessionHostList;
import com.azure.resourcemanager.desktopvirtualization.models.Status;
import com.azure.resourcemanager.desktopvirtualization.models.UpdateState;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class SessionHostListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SessionHostList model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"objectId\":\"zrypqlmfeokerqw\",\"lastHeartBeat\":\"2021-11-05T16:27:54Z\",\"sessions\":359384916,\"agentVersion\":\"opgxedkowepb\",\"allowNewSession\":false,\"virtualMachineId\":\"fkbw\",\"resourceId\":\"snjvcdwxlpqekftn\",\"assignedUser\":\"tjsyin\",\"friendlyName\":\"fq\",\"status\":\"UpgradeFailed\",\"statusTimestamp\":\"2021-03-09T17:47:29Z\",\"osVersion\":\"tmdvypgikdgs\",\"sxSStackVersion\":\"w\",\"updateState\":\"Failed\",\"lastUpdateTime\":\"2021-12-09T01:29:35Z\",\"updateErrorMessage\":\"uzhlhkjoqrv\",\"sessionHostHealthCheckResults\":[{\"healthCheckName\":\"SxSStackListenerCheck\",\"healthCheckResult\":\"HealthCheckFailed\",\"additionalFailureDetails\":{}},{\"healthCheckName\":\"FSLogixHealthCheck\",\"healthCheckResult\":\"HealthCheckSucceeded\",\"additionalFailureDetails\":{}},{\"healthCheckName\":\"MonitoringAgentCheck\",\"healthCheckResult\":\"HealthCheckSucceeded\",\"additionalFailureDetails\":{}},{\"healthCheckName\":\"DomainTrustCheck\",\"healthCheckResult\":\"Unknown\",\"additionalFailureDetails\":{}}]},\"id\":\"ool\",\"name\":\"rwxkvtkkgl\",\"type\":\"qwjygvja\"}],\"nextLink\":\"blmhvkzuhb\"}")
            .toObject(SessionHostList.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-05T16:27:54Z"), model.value().get(0).lastHeartBeat());
        Assertions.assertEquals(359384916, model.value().get(0).sessions());
        Assertions.assertEquals("opgxedkowepb", model.value().get(0).agentVersion());
        Assertions.assertEquals(false, model.value().get(0).allowNewSession());
        Assertions.assertEquals("tjsyin", model.value().get(0).assignedUser());
        Assertions.assertEquals("fq", model.value().get(0).friendlyName());
        Assertions.assertEquals(Status.UPGRADE_FAILED, model.value().get(0).status());
        Assertions.assertEquals("tmdvypgikdgs", model.value().get(0).osVersion());
        Assertions.assertEquals("w", model.value().get(0).sxSStackVersion());
        Assertions.assertEquals(UpdateState.FAILED, model.value().get(0).updateState());
        Assertions.assertEquals("uzhlhkjoqrv", model.value().get(0).updateErrorMessage());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SessionHostList model = new SessionHostList().withValue(
            Arrays.asList(new SessionHostInner().withLastHeartBeat(OffsetDateTime.parse("2021-11-05T16:27:54Z"))
                .withSessions(359384916)
                .withAgentVersion("opgxedkowepb")
                .withAllowNewSession(false)
                .withAssignedUser("tjsyin")
                .withFriendlyName("fq")
                .withStatus(Status.UPGRADE_FAILED)
                .withOsVersion("tmdvypgikdgs")
                .withSxSStackVersion("w")
                .withUpdateState(UpdateState.FAILED)
                .withUpdateErrorMessage("uzhlhkjoqrv")));
        model = BinaryData.fromObject(model).toObject(SessionHostList.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-05T16:27:54Z"), model.value().get(0).lastHeartBeat());
        Assertions.assertEquals(359384916, model.value().get(0).sessions());
        Assertions.assertEquals("opgxedkowepb", model.value().get(0).agentVersion());
        Assertions.assertEquals(false, model.value().get(0).allowNewSession());
        Assertions.assertEquals("tjsyin", model.value().get(0).assignedUser());
        Assertions.assertEquals("fq", model.value().get(0).friendlyName());
        Assertions.assertEquals(Status.UPGRADE_FAILED, model.value().get(0).status());
        Assertions.assertEquals("tmdvypgikdgs", model.value().get(0).osVersion());
        Assertions.assertEquals("w", model.value().get(0).sxSStackVersion());
        Assertions.assertEquals(UpdateState.FAILED, model.value().get(0).updateState());
        Assertions.assertEquals("uzhlhkjoqrv", model.value().get(0).updateErrorMessage());
    }
}
