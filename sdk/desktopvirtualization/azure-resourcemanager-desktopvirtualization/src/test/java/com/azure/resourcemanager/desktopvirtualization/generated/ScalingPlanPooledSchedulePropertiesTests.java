// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.desktopvirtualization.fluent.models.ScalingPlanPooledScheduleProperties;
import com.azure.resourcemanager.desktopvirtualization.models.DayOfWeek;
import com.azure.resourcemanager.desktopvirtualization.models.SessionHostLoadBalancingAlgorithm;
import com.azure.resourcemanager.desktopvirtualization.models.StopHostsWhen;
import com.azure.resourcemanager.desktopvirtualization.models.Time;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ScalingPlanPooledSchedulePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScalingPlanPooledScheduleProperties model = BinaryData.fromString(
            "{\"daysOfWeek\":[\"Saturday\",\"Thursday\"],\"rampUpStartTime\":{\"hour\":141640204,\"minute\":256612038},\"rampUpLoadBalancingAlgorithm\":\"DepthFirst\",\"rampUpMinimumHostsPct\":1243580735,\"rampUpCapacityThresholdPct\":1207917179,\"peakStartTime\":{\"hour\":1413734297,\"minute\":1151827085},\"peakLoadBalancingAlgorithm\":\"DepthFirst\",\"rampDownStartTime\":{\"hour\":413444138,\"minute\":1967682720},\"rampDownLoadBalancingAlgorithm\":\"DepthFirst\",\"rampDownMinimumHostsPct\":693329650,\"rampDownCapacityThresholdPct\":1596436522,\"rampDownForceLogoffUsers\":true,\"rampDownStopHostsWhen\":\"ZeroSessions\",\"rampDownWaitTimeMinutes\":2073757128,\"rampDownNotificationMessage\":\"uthnnprnxipeilpj\",\"offPeakStartTime\":{\"hour\":1074564233,\"minute\":115468496},\"offPeakLoadBalancingAlgorithm\":\"BreadthFirst\"}")
            .toObject(ScalingPlanPooledScheduleProperties.class);
        Assertions.assertEquals(DayOfWeek.SATURDAY, model.daysOfWeek().get(0));
        Assertions.assertEquals(141640204, model.rampUpStartTime().hour());
        Assertions.assertEquals(256612038, model.rampUpStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.DEPTH_FIRST, model.rampUpLoadBalancingAlgorithm());
        Assertions.assertEquals(1243580735, model.rampUpMinimumHostsPct());
        Assertions.assertEquals(1207917179, model.rampUpCapacityThresholdPct());
        Assertions.assertEquals(1413734297, model.peakStartTime().hour());
        Assertions.assertEquals(1151827085, model.peakStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.DEPTH_FIRST, model.peakLoadBalancingAlgorithm());
        Assertions.assertEquals(413444138, model.rampDownStartTime().hour());
        Assertions.assertEquals(1967682720, model.rampDownStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.DEPTH_FIRST, model.rampDownLoadBalancingAlgorithm());
        Assertions.assertEquals(693329650, model.rampDownMinimumHostsPct());
        Assertions.assertEquals(1596436522, model.rampDownCapacityThresholdPct());
        Assertions.assertEquals(true, model.rampDownForceLogoffUsers());
        Assertions.assertEquals(StopHostsWhen.ZERO_SESSIONS, model.rampDownStopHostsWhen());
        Assertions.assertEquals(2073757128, model.rampDownWaitTimeMinutes());
        Assertions.assertEquals("uthnnprnxipeilpj", model.rampDownNotificationMessage());
        Assertions.assertEquals(1074564233, model.offPeakStartTime().hour());
        Assertions.assertEquals(115468496, model.offPeakStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST, model.offPeakLoadBalancingAlgorithm());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScalingPlanPooledScheduleProperties model = new ScalingPlanPooledScheduleProperties()
            .withDaysOfWeek(Arrays.asList(DayOfWeek.SATURDAY, DayOfWeek.THURSDAY))
            .withRampUpStartTime(new Time().withHour(141640204).withMinute(256612038))
            .withRampUpLoadBalancingAlgorithm(SessionHostLoadBalancingAlgorithm.DEPTH_FIRST)
            .withRampUpMinimumHostsPct(1243580735)
            .withRampUpCapacityThresholdPct(1207917179)
            .withPeakStartTime(new Time().withHour(1413734297).withMinute(1151827085))
            .withPeakLoadBalancingAlgorithm(SessionHostLoadBalancingAlgorithm.DEPTH_FIRST)
            .withRampDownStartTime(new Time().withHour(413444138).withMinute(1967682720))
            .withRampDownLoadBalancingAlgorithm(SessionHostLoadBalancingAlgorithm.DEPTH_FIRST)
            .withRampDownMinimumHostsPct(693329650)
            .withRampDownCapacityThresholdPct(1596436522)
            .withRampDownForceLogoffUsers(true)
            .withRampDownStopHostsWhen(StopHostsWhen.ZERO_SESSIONS)
            .withRampDownWaitTimeMinutes(2073757128)
            .withRampDownNotificationMessage("uthnnprnxipeilpj")
            .withOffPeakStartTime(new Time().withHour(1074564233).withMinute(115468496))
            .withOffPeakLoadBalancingAlgorithm(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST);
        model = BinaryData.fromObject(model).toObject(ScalingPlanPooledScheduleProperties.class);
        Assertions.assertEquals(DayOfWeek.SATURDAY, model.daysOfWeek().get(0));
        Assertions.assertEquals(141640204, model.rampUpStartTime().hour());
        Assertions.assertEquals(256612038, model.rampUpStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.DEPTH_FIRST, model.rampUpLoadBalancingAlgorithm());
        Assertions.assertEquals(1243580735, model.rampUpMinimumHostsPct());
        Assertions.assertEquals(1207917179, model.rampUpCapacityThresholdPct());
        Assertions.assertEquals(1413734297, model.peakStartTime().hour());
        Assertions.assertEquals(1151827085, model.peakStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.DEPTH_FIRST, model.peakLoadBalancingAlgorithm());
        Assertions.assertEquals(413444138, model.rampDownStartTime().hour());
        Assertions.assertEquals(1967682720, model.rampDownStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.DEPTH_FIRST, model.rampDownLoadBalancingAlgorithm());
        Assertions.assertEquals(693329650, model.rampDownMinimumHostsPct());
        Assertions.assertEquals(1596436522, model.rampDownCapacityThresholdPct());
        Assertions.assertEquals(true, model.rampDownForceLogoffUsers());
        Assertions.assertEquals(StopHostsWhen.ZERO_SESSIONS, model.rampDownStopHostsWhen());
        Assertions.assertEquals(2073757128, model.rampDownWaitTimeMinutes());
        Assertions.assertEquals("uthnnprnxipeilpj", model.rampDownNotificationMessage());
        Assertions.assertEquals(1074564233, model.offPeakStartTime().hour());
        Assertions.assertEquals(115468496, model.offPeakStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST, model.offPeakLoadBalancingAlgorithm());
    }
}
