// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.desktopvirtualization.fluent.models.ScalingPlanPooledScheduleProperties;
import com.azure.resourcemanager.desktopvirtualization.models.DayOfWeek;
import com.azure.resourcemanager.desktopvirtualization.models.SessionHostLoadBalancingAlgorithm;
import com.azure.resourcemanager.desktopvirtualization.models.StopHostsWhen;
import com.azure.resourcemanager.desktopvirtualization.models.Time;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ScalingPlanPooledSchedulePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScalingPlanPooledScheduleProperties model = BinaryData.fromString(
            "{\"daysOfWeek\":[\"Tuesday\",\"Saturday\",\"Friday\",\"Wednesday\"],\"rampUpStartTime\":{\"hour\":1310045138,\"minute\":1368880432},\"rampUpLoadBalancingAlgorithm\":\"DepthFirst\",\"rampUpMinimumHostsPct\":950263579,\"rampUpCapacityThresholdPct\":538368150,\"peakStartTime\":{\"hour\":369228588,\"minute\":1391640173},\"peakLoadBalancingAlgorithm\":\"BreadthFirst\",\"rampDownStartTime\":{\"hour\":583849936,\"minute\":692695288},\"rampDownLoadBalancingAlgorithm\":\"BreadthFirst\",\"rampDownMinimumHostsPct\":311434030,\"rampDownCapacityThresholdPct\":1290652027,\"rampDownForceLogoffUsers\":false,\"rampDownStopHostsWhen\":\"ZeroSessions\",\"rampDownWaitTimeMinutes\":820009390,\"rampDownNotificationMessage\":\"f\",\"offPeakStartTime\":{\"hour\":568244971,\"minute\":519560547},\"offPeakLoadBalancingAlgorithm\":\"BreadthFirst\"}")
            .toObject(ScalingPlanPooledScheduleProperties.class);
        Assertions.assertEquals(DayOfWeek.TUESDAY, model.daysOfWeek().get(0));
        Assertions.assertEquals(1310045138, model.rampUpStartTime().hour());
        Assertions.assertEquals(1368880432, model.rampUpStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.DEPTH_FIRST, model.rampUpLoadBalancingAlgorithm());
        Assertions.assertEquals(950263579, model.rampUpMinimumHostsPct());
        Assertions.assertEquals(538368150, model.rampUpCapacityThresholdPct());
        Assertions.assertEquals(369228588, model.peakStartTime().hour());
        Assertions.assertEquals(1391640173, model.peakStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST, model.peakLoadBalancingAlgorithm());
        Assertions.assertEquals(583849936, model.rampDownStartTime().hour());
        Assertions.assertEquals(692695288, model.rampDownStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST,
            model.rampDownLoadBalancingAlgorithm());
        Assertions.assertEquals(311434030, model.rampDownMinimumHostsPct());
        Assertions.assertEquals(1290652027, model.rampDownCapacityThresholdPct());
        Assertions.assertEquals(false, model.rampDownForceLogoffUsers());
        Assertions.assertEquals(StopHostsWhen.ZERO_SESSIONS, model.rampDownStopHostsWhen());
        Assertions.assertEquals(820009390, model.rampDownWaitTimeMinutes());
        Assertions.assertEquals("f", model.rampDownNotificationMessage());
        Assertions.assertEquals(568244971, model.offPeakStartTime().hour());
        Assertions.assertEquals(519560547, model.offPeakStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST, model.offPeakLoadBalancingAlgorithm());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScalingPlanPooledScheduleProperties model = new ScalingPlanPooledScheduleProperties()
            .withDaysOfWeek(Arrays.asList(DayOfWeek.TUESDAY, DayOfWeek.SATURDAY, DayOfWeek.FRIDAY, DayOfWeek.WEDNESDAY))
            .withRampUpStartTime(new Time().withHour(1310045138).withMinute(1368880432))
            .withRampUpLoadBalancingAlgorithm(SessionHostLoadBalancingAlgorithm.DEPTH_FIRST)
            .withRampUpMinimumHostsPct(950263579)
            .withRampUpCapacityThresholdPct(538368150)
            .withPeakStartTime(new Time().withHour(369228588).withMinute(1391640173))
            .withPeakLoadBalancingAlgorithm(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST)
            .withRampDownStartTime(new Time().withHour(583849936).withMinute(692695288))
            .withRampDownLoadBalancingAlgorithm(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST)
            .withRampDownMinimumHostsPct(311434030)
            .withRampDownCapacityThresholdPct(1290652027)
            .withRampDownForceLogoffUsers(false)
            .withRampDownStopHostsWhen(StopHostsWhen.ZERO_SESSIONS)
            .withRampDownWaitTimeMinutes(820009390)
            .withRampDownNotificationMessage("f")
            .withOffPeakStartTime(new Time().withHour(568244971).withMinute(519560547))
            .withOffPeakLoadBalancingAlgorithm(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST);
        model = BinaryData.fromObject(model).toObject(ScalingPlanPooledScheduleProperties.class);
        Assertions.assertEquals(DayOfWeek.TUESDAY, model.daysOfWeek().get(0));
        Assertions.assertEquals(1310045138, model.rampUpStartTime().hour());
        Assertions.assertEquals(1368880432, model.rampUpStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.DEPTH_FIRST, model.rampUpLoadBalancingAlgorithm());
        Assertions.assertEquals(950263579, model.rampUpMinimumHostsPct());
        Assertions.assertEquals(538368150, model.rampUpCapacityThresholdPct());
        Assertions.assertEquals(369228588, model.peakStartTime().hour());
        Assertions.assertEquals(1391640173, model.peakStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST, model.peakLoadBalancingAlgorithm());
        Assertions.assertEquals(583849936, model.rampDownStartTime().hour());
        Assertions.assertEquals(692695288, model.rampDownStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST,
            model.rampDownLoadBalancingAlgorithm());
        Assertions.assertEquals(311434030, model.rampDownMinimumHostsPct());
        Assertions.assertEquals(1290652027, model.rampDownCapacityThresholdPct());
        Assertions.assertEquals(false, model.rampDownForceLogoffUsers());
        Assertions.assertEquals(StopHostsWhen.ZERO_SESSIONS, model.rampDownStopHostsWhen());
        Assertions.assertEquals(820009390, model.rampDownWaitTimeMinutes());
        Assertions.assertEquals("f", model.rampDownNotificationMessage());
        Assertions.assertEquals(568244971, model.offPeakStartTime().hour());
        Assertions.assertEquals(519560547, model.offPeakStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST, model.offPeakLoadBalancingAlgorithm());
    }
}
