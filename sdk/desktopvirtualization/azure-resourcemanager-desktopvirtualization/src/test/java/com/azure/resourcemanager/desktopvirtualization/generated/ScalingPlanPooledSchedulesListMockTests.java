// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.desktopvirtualization.DesktopVirtualizationManager;
import com.azure.resourcemanager.desktopvirtualization.models.DayOfWeek;
import com.azure.resourcemanager.desktopvirtualization.models.ScalingPlanPooledSchedule;
import com.azure.resourcemanager.desktopvirtualization.models.SessionHostLoadBalancingAlgorithm;
import com.azure.resourcemanager.desktopvirtualization.models.StopHostsWhen;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ScalingPlanPooledSchedulesListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"daysOfWeek\":[\"Friday\",\"Tuesday\",\"Wednesday\",\"Monday\"],\"rampUpStartTime\":{\"hour\":1314772316,\"minute\":860870754},\"rampUpLoadBalancingAlgorithm\":\"DepthFirst\",\"rampUpMinimumHostsPct\":118504398,\"rampUpCapacityThresholdPct\":1140037970,\"peakStartTime\":{\"hour\":1699127103,\"minute\":1126783291},\"peakLoadBalancingAlgorithm\":\"BreadthFirst\",\"rampDownStartTime\":{\"hour\":591587350,\"minute\":1739999630},\"rampDownLoadBalancingAlgorithm\":\"BreadthFirst\",\"rampDownMinimumHostsPct\":2059938924,\"rampDownCapacityThresholdPct\":1104352328,\"rampDownForceLogoffUsers\":false,\"rampDownStopHostsWhen\":\"ZeroActiveSessions\",\"rampDownWaitTimeMinutes\":1284227714,\"rampDownNotificationMessage\":\"mhoocl\",\"offPeakStartTime\":{\"hour\":195400750,\"minute\":1149950699},\"offPeakLoadBalancingAlgorithm\":\"DepthFirst\"},\"id\":\"mczjkm\",\"name\":\"ykyujxsg\",\"type\":\"hsrrryejylmbkz\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DesktopVirtualizationManager manager = DesktopVirtualizationManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<ScalingPlanPooledSchedule> response = manager.scalingPlanPooledSchedules()
            .list("nsjlpjrtws", "hv", 672942547, true, 56804817, com.azure.core.util.Context.NONE);

        Assertions.assertEquals(DayOfWeek.FRIDAY, response.iterator().next().daysOfWeek().get(0));
        Assertions.assertEquals(1314772316, response.iterator().next().rampUpStartTime().hour());
        Assertions.assertEquals(860870754, response.iterator().next().rampUpStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.DEPTH_FIRST,
            response.iterator().next().rampUpLoadBalancingAlgorithm());
        Assertions.assertEquals(118504398, response.iterator().next().rampUpMinimumHostsPct());
        Assertions.assertEquals(1140037970, response.iterator().next().rampUpCapacityThresholdPct());
        Assertions.assertEquals(1699127103, response.iterator().next().peakStartTime().hour());
        Assertions.assertEquals(1126783291, response.iterator().next().peakStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST,
            response.iterator().next().peakLoadBalancingAlgorithm());
        Assertions.assertEquals(591587350, response.iterator().next().rampDownStartTime().hour());
        Assertions.assertEquals(1739999630, response.iterator().next().rampDownStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST,
            response.iterator().next().rampDownLoadBalancingAlgorithm());
        Assertions.assertEquals(2059938924, response.iterator().next().rampDownMinimumHostsPct());
        Assertions.assertEquals(1104352328, response.iterator().next().rampDownCapacityThresholdPct());
        Assertions.assertEquals(false, response.iterator().next().rampDownForceLogoffUsers());
        Assertions.assertEquals(StopHostsWhen.ZERO_ACTIVE_SESSIONS, response.iterator().next().rampDownStopHostsWhen());
        Assertions.assertEquals(1284227714, response.iterator().next().rampDownWaitTimeMinutes());
        Assertions.assertEquals("mhoocl", response.iterator().next().rampDownNotificationMessage());
        Assertions.assertEquals(195400750, response.iterator().next().offPeakStartTime().hour());
        Assertions.assertEquals(1149950699, response.iterator().next().offPeakStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.DEPTH_FIRST,
            response.iterator().next().offPeakLoadBalancingAlgorithm());
    }
}
