// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.desktopvirtualization.DesktopVirtualizationManager;
import com.azure.resourcemanager.desktopvirtualization.models.DayOfWeek;
import com.azure.resourcemanager.desktopvirtualization.models.ScalingPlanPooledSchedule;
import com.azure.resourcemanager.desktopvirtualization.models.SessionHostLoadBalancingAlgorithm;
import com.azure.resourcemanager.desktopvirtualization.models.StopHostsWhen;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ScalingPlanPooledSchedulesListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"daysOfWeek\":[\"Wednesday\",\"Thursday\"],\"rampUpStartTime\":{\"hour\":702030035,\"minute\":1296918547},\"rampUpLoadBalancingAlgorithm\":\"BreadthFirst\",\"rampUpMinimumHostsPct\":1647760135,\"rampUpCapacityThresholdPct\":259877172,\"peakStartTime\":{\"hour\":882727572,\"minute\":1158513524},\"peakLoadBalancingAlgorithm\":\"DepthFirst\",\"rampDownStartTime\":{\"hour\":685883648,\"minute\":218977704},\"rampDownLoadBalancingAlgorithm\":\"DepthFirst\",\"rampDownMinimumHostsPct\":1489611742,\"rampDownCapacityThresholdPct\":529091506,\"rampDownForceLogoffUsers\":true,\"rampDownStopHostsWhen\":\"ZeroActiveSessions\",\"rampDownWaitTimeMinutes\":1170752971,\"rampDownNotificationMessage\":\"eihfq\",\"offPeakStartTime\":{\"hour\":1276446692,\"minute\":61409648},\"offPeakLoadBalancingAlgorithm\":\"DepthFirst\"},\"id\":\"zcxmjpbyep\",\"name\":\"mgtvlj\",\"type\":\"rc\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DesktopVirtualizationManager manager = DesktopVirtualizationManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<ScalingPlanPooledSchedule> response = manager.scalingPlanPooledSchedules()
            .list("pmcubkmifoxxkub", "phavpmhbrb", 1491297661, true, 215978587, com.azure.core.util.Context.NONE);

        Assertions.assertEquals(DayOfWeek.WEDNESDAY, response.iterator().next().daysOfWeek().get(0));
        Assertions.assertEquals(702030035, response.iterator().next().rampUpStartTime().hour());
        Assertions.assertEquals(1296918547, response.iterator().next().rampUpStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST,
            response.iterator().next().rampUpLoadBalancingAlgorithm());
        Assertions.assertEquals(1647760135, response.iterator().next().rampUpMinimumHostsPct());
        Assertions.assertEquals(259877172, response.iterator().next().rampUpCapacityThresholdPct());
        Assertions.assertEquals(882727572, response.iterator().next().peakStartTime().hour());
        Assertions.assertEquals(1158513524, response.iterator().next().peakStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.DEPTH_FIRST,
            response.iterator().next().peakLoadBalancingAlgorithm());
        Assertions.assertEquals(685883648, response.iterator().next().rampDownStartTime().hour());
        Assertions.assertEquals(218977704, response.iterator().next().rampDownStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.DEPTH_FIRST,
            response.iterator().next().rampDownLoadBalancingAlgorithm());
        Assertions.assertEquals(1489611742, response.iterator().next().rampDownMinimumHostsPct());
        Assertions.assertEquals(529091506, response.iterator().next().rampDownCapacityThresholdPct());
        Assertions.assertEquals(true, response.iterator().next().rampDownForceLogoffUsers());
        Assertions.assertEquals(StopHostsWhen.ZERO_ACTIVE_SESSIONS, response.iterator().next().rampDownStopHostsWhen());
        Assertions.assertEquals(1170752971, response.iterator().next().rampDownWaitTimeMinutes());
        Assertions.assertEquals("eihfq", response.iterator().next().rampDownNotificationMessage());
        Assertions.assertEquals(1276446692, response.iterator().next().offPeakStartTime().hour());
        Assertions.assertEquals(61409648, response.iterator().next().offPeakStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.DEPTH_FIRST,
            response.iterator().next().offPeakLoadBalancingAlgorithm());
    }
}
