// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.desktopvirtualization.models.DayOfWeek;
import com.azure.resourcemanager.desktopvirtualization.models.ScalingPlanPooledSchedulePatch;
import com.azure.resourcemanager.desktopvirtualization.models.SessionHostLoadBalancingAlgorithm;
import com.azure.resourcemanager.desktopvirtualization.models.StopHostsWhen;
import com.azure.resourcemanager.desktopvirtualization.models.Time;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ScalingPlanPooledSchedulePatchTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScalingPlanPooledSchedulePatch model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"daysOfWeek\":[\"Saturday\"],\"rampUpStartTime\":{\"hour\":391776168,\"minute\":2086388671},\"rampUpLoadBalancingAlgorithm\":\"BreadthFirst\",\"rampUpMinimumHostsPct\":2051758056,\"rampUpCapacityThresholdPct\":1378087535,\"peakStartTime\":{\"hour\":439169956,\"minute\":1264115895},\"peakLoadBalancingAlgorithm\":\"DepthFirst\",\"rampDownStartTime\":{\"hour\":92762624,\"minute\":63686383},\"rampDownLoadBalancingAlgorithm\":\"DepthFirst\",\"rampDownMinimumHostsPct\":1220568259,\"rampDownCapacityThresholdPct\":810124654,\"rampDownForceLogoffUsers\":true,\"rampDownStopHostsWhen\":\"ZeroActiveSessions\",\"rampDownWaitTimeMinutes\":2067966148,\"rampDownNotificationMessage\":\"rwmdyvxqtay\",\"offPeakStartTime\":{\"hour\":357638492,\"minute\":1013122573},\"offPeakLoadBalancingAlgorithm\":\"BreadthFirst\"},\"id\":\"yqbexrmcqibycno\",\"name\":\"v\",\"type\":\"nmefqsgzvahapj\"}")
                .toObject(ScalingPlanPooledSchedulePatch.class);
        Assertions.assertEquals(DayOfWeek.SATURDAY, model.daysOfWeek().get(0));
        Assertions.assertEquals(391776168, model.rampUpStartTime().hour());
        Assertions.assertEquals(2086388671, model.rampUpStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST, model.rampUpLoadBalancingAlgorithm());
        Assertions.assertEquals(2051758056, model.rampUpMinimumHostsPct());
        Assertions.assertEquals(1378087535, model.rampUpCapacityThresholdPct());
        Assertions.assertEquals(439169956, model.peakStartTime().hour());
        Assertions.assertEquals(1264115895, model.peakStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.DEPTH_FIRST, model.peakLoadBalancingAlgorithm());
        Assertions.assertEquals(92762624, model.rampDownStartTime().hour());
        Assertions.assertEquals(63686383, model.rampDownStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.DEPTH_FIRST, model.rampDownLoadBalancingAlgorithm());
        Assertions.assertEquals(1220568259, model.rampDownMinimumHostsPct());
        Assertions.assertEquals(810124654, model.rampDownCapacityThresholdPct());
        Assertions.assertEquals(true, model.rampDownForceLogoffUsers());
        Assertions.assertEquals(StopHostsWhen.ZERO_ACTIVE_SESSIONS, model.rampDownStopHostsWhen());
        Assertions.assertEquals(2067966148, model.rampDownWaitTimeMinutes());
        Assertions.assertEquals("rwmdyvxqtay", model.rampDownNotificationMessage());
        Assertions.assertEquals(357638492, model.offPeakStartTime().hour());
        Assertions.assertEquals(1013122573, model.offPeakStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST, model.offPeakLoadBalancingAlgorithm());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScalingPlanPooledSchedulePatch model =
            new ScalingPlanPooledSchedulePatch()
                .withDaysOfWeek(Arrays.asList(DayOfWeek.SATURDAY))
                .withRampUpStartTime(new Time().withHour(391776168).withMinute(2086388671))
                .withRampUpLoadBalancingAlgorithm(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST)
                .withRampUpMinimumHostsPct(2051758056)
                .withRampUpCapacityThresholdPct(1378087535)
                .withPeakStartTime(new Time().withHour(439169956).withMinute(1264115895))
                .withPeakLoadBalancingAlgorithm(SessionHostLoadBalancingAlgorithm.DEPTH_FIRST)
                .withRampDownStartTime(new Time().withHour(92762624).withMinute(63686383))
                .withRampDownLoadBalancingAlgorithm(SessionHostLoadBalancingAlgorithm.DEPTH_FIRST)
                .withRampDownMinimumHostsPct(1220568259)
                .withRampDownCapacityThresholdPct(810124654)
                .withRampDownForceLogoffUsers(true)
                .withRampDownStopHostsWhen(StopHostsWhen.ZERO_ACTIVE_SESSIONS)
                .withRampDownWaitTimeMinutes(2067966148)
                .withRampDownNotificationMessage("rwmdyvxqtay")
                .withOffPeakStartTime(new Time().withHour(357638492).withMinute(1013122573))
                .withOffPeakLoadBalancingAlgorithm(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST);
        model = BinaryData.fromObject(model).toObject(ScalingPlanPooledSchedulePatch.class);
        Assertions.assertEquals(DayOfWeek.SATURDAY, model.daysOfWeek().get(0));
        Assertions.assertEquals(391776168, model.rampUpStartTime().hour());
        Assertions.assertEquals(2086388671, model.rampUpStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST, model.rampUpLoadBalancingAlgorithm());
        Assertions.assertEquals(2051758056, model.rampUpMinimumHostsPct());
        Assertions.assertEquals(1378087535, model.rampUpCapacityThresholdPct());
        Assertions.assertEquals(439169956, model.peakStartTime().hour());
        Assertions.assertEquals(1264115895, model.peakStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.DEPTH_FIRST, model.peakLoadBalancingAlgorithm());
        Assertions.assertEquals(92762624, model.rampDownStartTime().hour());
        Assertions.assertEquals(63686383, model.rampDownStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.DEPTH_FIRST, model.rampDownLoadBalancingAlgorithm());
        Assertions.assertEquals(1220568259, model.rampDownMinimumHostsPct());
        Assertions.assertEquals(810124654, model.rampDownCapacityThresholdPct());
        Assertions.assertEquals(true, model.rampDownForceLogoffUsers());
        Assertions.assertEquals(StopHostsWhen.ZERO_ACTIVE_SESSIONS, model.rampDownStopHostsWhen());
        Assertions.assertEquals(2067966148, model.rampDownWaitTimeMinutes());
        Assertions.assertEquals("rwmdyvxqtay", model.rampDownNotificationMessage());
        Assertions.assertEquals(357638492, model.offPeakStartTime().hour());
        Assertions.assertEquals(1013122573, model.offPeakStartTime().minute());
        Assertions.assertEquals(SessionHostLoadBalancingAlgorithm.BREADTH_FIRST, model.offPeakLoadBalancingAlgorithm());
    }
}
