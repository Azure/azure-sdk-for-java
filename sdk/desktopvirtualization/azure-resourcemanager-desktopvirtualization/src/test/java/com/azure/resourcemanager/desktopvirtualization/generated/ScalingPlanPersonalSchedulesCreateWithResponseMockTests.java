// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.desktopvirtualization.DesktopVirtualizationManager;
import com.azure.resourcemanager.desktopvirtualization.models.DayOfWeek;
import com.azure.resourcemanager.desktopvirtualization.models.ScalingPlanPersonalSchedule;
import com.azure.resourcemanager.desktopvirtualization.models.SessionHandlingOperation;
import com.azure.resourcemanager.desktopvirtualization.models.SetStartVMOnConnect;
import com.azure.resourcemanager.desktopvirtualization.models.StartupBehavior;
import com.azure.resourcemanager.desktopvirtualization.models.Time;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ScalingPlanPersonalSchedulesCreateWithResponseMockTests {
    @Test
    public void testCreateWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"daysOfWeek\":[\"Thursday\",\"Saturday\"],\"rampUpStartTime\":{\"hour\":474729802,\"minute\":513283107},\"rampUpAutoStartHosts\":\"All\",\"rampUpStartVMOnConnect\":\"Enable\",\"rampUpActionOnDisconnect\":\"None\",\"rampUpMinutesToWaitOnDisconnect\":120570270,\"rampUpActionOnLogoff\":\"Deallocate\",\"rampUpMinutesToWaitOnLogoff\":1801029414,\"peakStartTime\":{\"hour\":2013893290,\"minute\":728731016},\"peakStartVMOnConnect\":\"Disable\",\"peakActionOnDisconnect\":\"None\",\"peakMinutesToWaitOnDisconnect\":956531866,\"peakActionOnLogoff\":\"Deallocate\",\"peakMinutesToWaitOnLogoff\":1159295504,\"rampDownStartTime\":{\"hour\":881600617,\"minute\":323271862},\"rampDownStartVMOnConnect\":\"Disable\",\"rampDownActionOnDisconnect\":\"Hibernate\",\"rampDownMinutesToWaitOnDisconnect\":643996998,\"rampDownActionOnLogoff\":\"None\",\"rampDownMinutesToWaitOnLogoff\":1995436037,\"offPeakStartTime\":{\"hour\":429676827,\"minute\":550582192},\"offPeakStartVMOnConnect\":\"Disable\",\"offPeakActionOnDisconnect\":\"Hibernate\",\"offPeakMinutesToWaitOnDisconnect\":420064622,\"offPeakActionOnLogoff\":\"Hibernate\",\"offPeakMinutesToWaitOnLogoff\":617111065},\"id\":\"iroqbosh\",\"name\":\"ragapyyrmfsvbp\",\"type\":\"vbopfppdbwnu\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        DesktopVirtualizationManager manager =
            DesktopVirtualizationManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        ScalingPlanPersonalSchedule response =
            manager
                .scalingPlanPersonalSchedules()
                .define("tlyo")
                .withExistingScalingPlan("xbannovvoxc", "ytprwnwvroev")
                .withDaysOfWeek(
                    Arrays.asList(DayOfWeek.FRIDAY, DayOfWeek.MONDAY, DayOfWeek.WEDNESDAY, DayOfWeek.MONDAY))
                .withRampUpStartTime(new Time().withHour(725083050).withMinute(1442660338))
                .withRampUpAutoStartHosts(StartupBehavior.NONE)
                .withRampUpStartVMOnConnect(SetStartVMOnConnect.DISABLE)
                .withRampUpActionOnDisconnect(SessionHandlingOperation.HIBERNATE)
                .withRampUpMinutesToWaitOnDisconnect(251649293)
                .withRampUpActionOnLogoff(SessionHandlingOperation.HIBERNATE)
                .withRampUpMinutesToWaitOnLogoff(1458275962)
                .withPeakStartTime(new Time().withHour(952405971).withMinute(1835764964))
                .withPeakStartVMOnConnect(SetStartVMOnConnect.ENABLE)
                .withPeakActionOnDisconnect(SessionHandlingOperation.NONE)
                .withPeakMinutesToWaitOnDisconnect(61809023)
                .withPeakActionOnLogoff(SessionHandlingOperation.DEALLOCATE)
                .withPeakMinutesToWaitOnLogoff(552291505)
                .withRampDownStartTime(new Time().withHour(796000684).withMinute(312997434))
                .withRampDownStartVMOnConnect(SetStartVMOnConnect.DISABLE)
                .withRampDownActionOnDisconnect(SessionHandlingOperation.NONE)
                .withRampDownMinutesToWaitOnDisconnect(1195443779)
                .withRampDownActionOnLogoff(SessionHandlingOperation.DEALLOCATE)
                .withRampDownMinutesToWaitOnLogoff(1597074926)
                .withOffPeakStartTime(new Time().withHour(1352836682).withMinute(315314299))
                .withOffPeakStartVMOnConnect(SetStartVMOnConnect.DISABLE)
                .withOffPeakActionOnDisconnect(SessionHandlingOperation.NONE)
                .withOffPeakMinutesToWaitOnDisconnect(265709427)
                .withOffPeakActionOnLogoff(SessionHandlingOperation.DEALLOCATE)
                .withOffPeakMinutesToWaitOnLogoff(347000614)
                .create();

        Assertions.assertEquals(DayOfWeek.THURSDAY, response.daysOfWeek().get(0));
        Assertions.assertEquals(474729802, response.rampUpStartTime().hour());
        Assertions.assertEquals(513283107, response.rampUpStartTime().minute());
        Assertions.assertEquals(StartupBehavior.ALL, response.rampUpAutoStartHosts());
        Assertions.assertEquals(SetStartVMOnConnect.ENABLE, response.rampUpStartVMOnConnect());
        Assertions.assertEquals(SessionHandlingOperation.NONE, response.rampUpActionOnDisconnect());
        Assertions.assertEquals(120570270, response.rampUpMinutesToWaitOnDisconnect());
        Assertions.assertEquals(SessionHandlingOperation.DEALLOCATE, response.rampUpActionOnLogoff());
        Assertions.assertEquals(1801029414, response.rampUpMinutesToWaitOnLogoff());
        Assertions.assertEquals(2013893290, response.peakStartTime().hour());
        Assertions.assertEquals(728731016, response.peakStartTime().minute());
        Assertions.assertEquals(SetStartVMOnConnect.DISABLE, response.peakStartVMOnConnect());
        Assertions.assertEquals(SessionHandlingOperation.NONE, response.peakActionOnDisconnect());
        Assertions.assertEquals(956531866, response.peakMinutesToWaitOnDisconnect());
        Assertions.assertEquals(SessionHandlingOperation.DEALLOCATE, response.peakActionOnLogoff());
        Assertions.assertEquals(1159295504, response.peakMinutesToWaitOnLogoff());
        Assertions.assertEquals(881600617, response.rampDownStartTime().hour());
        Assertions.assertEquals(323271862, response.rampDownStartTime().minute());
        Assertions.assertEquals(SetStartVMOnConnect.DISABLE, response.rampDownStartVMOnConnect());
        Assertions.assertEquals(SessionHandlingOperation.HIBERNATE, response.rampDownActionOnDisconnect());
        Assertions.assertEquals(643996998, response.rampDownMinutesToWaitOnDisconnect());
        Assertions.assertEquals(SessionHandlingOperation.NONE, response.rampDownActionOnLogoff());
        Assertions.assertEquals(1995436037, response.rampDownMinutesToWaitOnLogoff());
        Assertions.assertEquals(429676827, response.offPeakStartTime().hour());
        Assertions.assertEquals(550582192, response.offPeakStartTime().minute());
        Assertions.assertEquals(SetStartVMOnConnect.DISABLE, response.offPeakStartVMOnConnect());
        Assertions.assertEquals(SessionHandlingOperation.HIBERNATE, response.offPeakActionOnDisconnect());
        Assertions.assertEquals(420064622, response.offPeakMinutesToWaitOnDisconnect());
        Assertions.assertEquals(SessionHandlingOperation.HIBERNATE, response.offPeakActionOnLogoff());
        Assertions.assertEquals(617111065, response.offPeakMinutesToWaitOnLogoff());
    }
}
