// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.desktopvirtualization.DesktopVirtualizationManager;
import com.azure.resourcemanager.desktopvirtualization.models.DayOfWeek;
import com.azure.resourcemanager.desktopvirtualization.models.ScalingPlanPersonalSchedule;
import com.azure.resourcemanager.desktopvirtualization.models.SessionHandlingOperation;
import com.azure.resourcemanager.desktopvirtualization.models.SetStartVMOnConnect;
import com.azure.resourcemanager.desktopvirtualization.models.StartupBehavior;
import com.azure.resourcemanager.desktopvirtualization.models.Time;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ScalingPlanPersonalSchedulesCreateWithResponseMockTests {
    @Test
    public void testCreateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"daysOfWeek\":[\"Tuesday\"],\"rampUpStartTime\":{\"hour\":1740485415,\"minute\":1580981613},\"rampUpAutoStartHosts\":\"None\",\"rampUpStartVMOnConnect\":\"Enable\",\"rampUpActionOnDisconnect\":\"Deallocate\",\"rampUpMinutesToWaitOnDisconnect\":425650083,\"rampUpActionOnLogoff\":\"Deallocate\",\"rampUpMinutesToWaitOnLogoff\":1409401531,\"peakStartTime\":{\"hour\":1569096648,\"minute\":1529419314},\"peakStartVMOnConnect\":\"Disable\",\"peakActionOnDisconnect\":\"Hibernate\",\"peakMinutesToWaitOnDisconnect\":233230140,\"peakActionOnLogoff\":\"None\",\"peakMinutesToWaitOnLogoff\":2042229356,\"rampDownStartTime\":{\"hour\":1674537674,\"minute\":717249946},\"rampDownStartVMOnConnect\":\"Disable\",\"rampDownActionOnDisconnect\":\"Deallocate\",\"rampDownMinutesToWaitOnDisconnect\":1772909914,\"rampDownActionOnLogoff\":\"Deallocate\",\"rampDownMinutesToWaitOnLogoff\":70597241,\"offPeakStartTime\":{\"hour\":990938401,\"minute\":1699692322},\"offPeakStartVMOnConnect\":\"Enable\",\"offPeakActionOnDisconnect\":\"Hibernate\",\"offPeakMinutesToWaitOnDisconnect\":1400894548,\"offPeakActionOnLogoff\":\"None\",\"offPeakMinutesToWaitOnLogoff\":1125182676},\"id\":\"xqvapcohh\",\"name\":\"ucqpqojxcxzrz\",\"type\":\"cgdz\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DesktopVirtualizationManager manager = DesktopVirtualizationManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        ScalingPlanPersonalSchedule response = manager.scalingPlanPersonalSchedules()
            .define("gdhxi")
            .withExistingScalingPlan("rrueqthwmg", "mbscbbx")
            .withDaysOfWeek(Arrays.asList(DayOfWeek.SATURDAY, DayOfWeek.THURSDAY, DayOfWeek.TUESDAY, DayOfWeek.TUESDAY))
            .withRampUpStartTime(new Time().withHour(1096839019).withMinute(896412004))
            .withRampUpAutoStartHosts(StartupBehavior.ALL)
            .withRampUpStartVMOnConnect(SetStartVMOnConnect.DISABLE)
            .withRampUpActionOnDisconnect(SessionHandlingOperation.NONE)
            .withRampUpMinutesToWaitOnDisconnect(1122142083)
            .withRampUpActionOnLogoff(SessionHandlingOperation.HIBERNATE)
            .withRampUpMinutesToWaitOnLogoff(1483648250)
            .withPeakStartTime(new Time().withHour(935812516).withMinute(686332411))
            .withPeakStartVMOnConnect(SetStartVMOnConnect.ENABLE)
            .withPeakActionOnDisconnect(SessionHandlingOperation.NONE)
            .withPeakMinutesToWaitOnDisconnect(912585397)
            .withPeakActionOnLogoff(SessionHandlingOperation.HIBERNATE)
            .withPeakMinutesToWaitOnLogoff(939528719)
            .withRampDownStartTime(new Time().withHour(1438564589).withMinute(1525948244))
            .withRampDownStartVMOnConnect(SetStartVMOnConnect.DISABLE)
            .withRampDownActionOnDisconnect(SessionHandlingOperation.HIBERNATE)
            .withRampDownMinutesToWaitOnDisconnect(757969717)
            .withRampDownActionOnLogoff(SessionHandlingOperation.DEALLOCATE)
            .withRampDownMinutesToWaitOnLogoff(883742006)
            .withOffPeakStartTime(new Time().withHour(1335444948).withMinute(1699509778))
            .withOffPeakStartVMOnConnect(SetStartVMOnConnect.DISABLE)
            .withOffPeakActionOnDisconnect(SessionHandlingOperation.DEALLOCATE)
            .withOffPeakMinutesToWaitOnDisconnect(1120950278)
            .withOffPeakActionOnLogoff(SessionHandlingOperation.NONE)
            .withOffPeakMinutesToWaitOnLogoff(49618457)
            .create();

        Assertions.assertEquals(DayOfWeek.TUESDAY, response.daysOfWeek().get(0));
        Assertions.assertEquals(1740485415, response.rampUpStartTime().hour());
        Assertions.assertEquals(1580981613, response.rampUpStartTime().minute());
        Assertions.assertEquals(StartupBehavior.NONE, response.rampUpAutoStartHosts());
        Assertions.assertEquals(SetStartVMOnConnect.ENABLE, response.rampUpStartVMOnConnect());
        Assertions.assertEquals(SessionHandlingOperation.DEALLOCATE, response.rampUpActionOnDisconnect());
        Assertions.assertEquals(425650083, response.rampUpMinutesToWaitOnDisconnect());
        Assertions.assertEquals(SessionHandlingOperation.DEALLOCATE, response.rampUpActionOnLogoff());
        Assertions.assertEquals(1409401531, response.rampUpMinutesToWaitOnLogoff());
        Assertions.assertEquals(1569096648, response.peakStartTime().hour());
        Assertions.assertEquals(1529419314, response.peakStartTime().minute());
        Assertions.assertEquals(SetStartVMOnConnect.DISABLE, response.peakStartVMOnConnect());
        Assertions.assertEquals(SessionHandlingOperation.HIBERNATE, response.peakActionOnDisconnect());
        Assertions.assertEquals(233230140, response.peakMinutesToWaitOnDisconnect());
        Assertions.assertEquals(SessionHandlingOperation.NONE, response.peakActionOnLogoff());
        Assertions.assertEquals(2042229356, response.peakMinutesToWaitOnLogoff());
        Assertions.assertEquals(1674537674, response.rampDownStartTime().hour());
        Assertions.assertEquals(717249946, response.rampDownStartTime().minute());
        Assertions.assertEquals(SetStartVMOnConnect.DISABLE, response.rampDownStartVMOnConnect());
        Assertions.assertEquals(SessionHandlingOperation.DEALLOCATE, response.rampDownActionOnDisconnect());
        Assertions.assertEquals(1772909914, response.rampDownMinutesToWaitOnDisconnect());
        Assertions.assertEquals(SessionHandlingOperation.DEALLOCATE, response.rampDownActionOnLogoff());
        Assertions.assertEquals(70597241, response.rampDownMinutesToWaitOnLogoff());
        Assertions.assertEquals(990938401, response.offPeakStartTime().hour());
        Assertions.assertEquals(1699692322, response.offPeakStartTime().minute());
        Assertions.assertEquals(SetStartVMOnConnect.ENABLE, response.offPeakStartVMOnConnect());
        Assertions.assertEquals(SessionHandlingOperation.HIBERNATE, response.offPeakActionOnDisconnect());
        Assertions.assertEquals(1400894548, response.offPeakMinutesToWaitOnDisconnect());
        Assertions.assertEquals(SessionHandlingOperation.NONE, response.offPeakActionOnLogoff());
        Assertions.assertEquals(1125182676, response.offPeakMinutesToWaitOnLogoff());
    }
}
