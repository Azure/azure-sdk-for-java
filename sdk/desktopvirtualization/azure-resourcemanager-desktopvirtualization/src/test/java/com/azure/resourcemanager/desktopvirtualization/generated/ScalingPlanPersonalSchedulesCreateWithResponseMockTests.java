// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.desktopvirtualization.DesktopVirtualizationManager;
import com.azure.resourcemanager.desktopvirtualization.models.DayOfWeek;
import com.azure.resourcemanager.desktopvirtualization.models.ScalingPlanPersonalSchedule;
import com.azure.resourcemanager.desktopvirtualization.models.SessionHandlingOperation;
import com.azure.resourcemanager.desktopvirtualization.models.SetStartVMOnConnect;
import com.azure.resourcemanager.desktopvirtualization.models.StartupBehavior;
import com.azure.resourcemanager.desktopvirtualization.models.Time;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ScalingPlanPersonalSchedulesCreateWithResponseMockTests {
    @Test
    public void testCreateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"daysOfWeek\":[\"Friday\"],\"rampUpStartTime\":{\"hour\":410887908,\"minute\":1078545272},\"rampUpAutoStartHosts\":\"All\",\"rampUpStartVMOnConnect\":\"Enable\",\"rampUpActionOnDisconnect\":\"Deallocate\",\"rampUpMinutesToWaitOnDisconnect\":584168937,\"rampUpActionOnLogoff\":\"Deallocate\",\"rampUpMinutesToWaitOnLogoff\":1034337618,\"peakStartTime\":{\"hour\":310367728,\"minute\":2099611502},\"peakStartVMOnConnect\":\"Disable\",\"peakActionOnDisconnect\":\"Deallocate\",\"peakMinutesToWaitOnDisconnect\":1763617442,\"peakActionOnLogoff\":\"None\",\"peakMinutesToWaitOnLogoff\":547069832,\"rampDownStartTime\":{\"hour\":401939336,\"minute\":485663577},\"rampDownStartVMOnConnect\":\"Disable\",\"rampDownActionOnDisconnect\":\"None\",\"rampDownMinutesToWaitOnDisconnect\":834235749,\"rampDownActionOnLogoff\":\"Deallocate\",\"rampDownMinutesToWaitOnLogoff\":1413642651,\"offPeakStartTime\":{\"hour\":1232350365,\"minute\":656399594},\"offPeakStartVMOnConnect\":\"Enable\",\"offPeakActionOnDisconnect\":\"Hibernate\",\"offPeakMinutesToWaitOnDisconnect\":489491649,\"offPeakActionOnLogoff\":\"None\",\"offPeakMinutesToWaitOnLogoff\":824374091},\"id\":\"s\",\"name\":\"qwjksghudgz\",\"type\":\"xog\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DesktopVirtualizationManager manager = DesktopVirtualizationManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        ScalingPlanPersonalSchedule response = manager.scalingPlanPersonalSchedules()
            .define("rwgdnqzbrfks")
            .withExistingScalingPlan("mzegjon", "hj")
            .withDaysOfWeek(Arrays.asList(DayOfWeek.FRIDAY, DayOfWeek.SATURDAY))
            .withRampUpStartTime(new Time().withHour(523241538).withMinute(794113784))
            .withRampUpAutoStartHosts(StartupBehavior.ALL)
            .withRampUpStartVMOnConnect(SetStartVMOnConnect.DISABLE)
            .withRampUpActionOnDisconnect(SessionHandlingOperation.HIBERNATE)
            .withRampUpMinutesToWaitOnDisconnect(1846207781)
            .withRampUpActionOnLogoff(SessionHandlingOperation.DEALLOCATE)
            .withRampUpMinutesToWaitOnLogoff(2086929658)
            .withPeakStartTime(new Time().withHour(1354192290).withMinute(2141124487))
            .withPeakStartVMOnConnect(SetStartVMOnConnect.DISABLE)
            .withPeakActionOnDisconnect(SessionHandlingOperation.HIBERNATE)
            .withPeakMinutesToWaitOnDisconnect(918177081)
            .withPeakActionOnLogoff(SessionHandlingOperation.HIBERNATE)
            .withPeakMinutesToWaitOnLogoff(1908248061)
            .withRampDownStartTime(new Time().withHour(1256156886).withMinute(2004448547))
            .withRampDownStartVMOnConnect(SetStartVMOnConnect.DISABLE)
            .withRampDownActionOnDisconnect(SessionHandlingOperation.NONE)
            .withRampDownMinutesToWaitOnDisconnect(2002444871)
            .withRampDownActionOnLogoff(SessionHandlingOperation.HIBERNATE)
            .withRampDownMinutesToWaitOnLogoff(1777257386)
            .withOffPeakStartTime(new Time().withHour(1822893044).withMinute(563407576))
            .withOffPeakStartVMOnConnect(SetStartVMOnConnect.DISABLE)
            .withOffPeakActionOnDisconnect(SessionHandlingOperation.HIBERNATE)
            .withOffPeakMinutesToWaitOnDisconnect(1511444784)
            .withOffPeakActionOnLogoff(SessionHandlingOperation.HIBERNATE)
            .withOffPeakMinutesToWaitOnLogoff(835259898)
            .create();

        Assertions.assertEquals(DayOfWeek.FRIDAY, response.daysOfWeek().get(0));
        Assertions.assertEquals(410887908, response.rampUpStartTime().hour());
        Assertions.assertEquals(1078545272, response.rampUpStartTime().minute());
        Assertions.assertEquals(StartupBehavior.ALL, response.rampUpAutoStartHosts());
        Assertions.assertEquals(SetStartVMOnConnect.ENABLE, response.rampUpStartVMOnConnect());
        Assertions.assertEquals(SessionHandlingOperation.DEALLOCATE, response.rampUpActionOnDisconnect());
        Assertions.assertEquals(584168937, response.rampUpMinutesToWaitOnDisconnect());
        Assertions.assertEquals(SessionHandlingOperation.DEALLOCATE, response.rampUpActionOnLogoff());
        Assertions.assertEquals(1034337618, response.rampUpMinutesToWaitOnLogoff());
        Assertions.assertEquals(310367728, response.peakStartTime().hour());
        Assertions.assertEquals(2099611502, response.peakStartTime().minute());
        Assertions.assertEquals(SetStartVMOnConnect.DISABLE, response.peakStartVMOnConnect());
        Assertions.assertEquals(SessionHandlingOperation.DEALLOCATE, response.peakActionOnDisconnect());
        Assertions.assertEquals(1763617442, response.peakMinutesToWaitOnDisconnect());
        Assertions.assertEquals(SessionHandlingOperation.NONE, response.peakActionOnLogoff());
        Assertions.assertEquals(547069832, response.peakMinutesToWaitOnLogoff());
        Assertions.assertEquals(401939336, response.rampDownStartTime().hour());
        Assertions.assertEquals(485663577, response.rampDownStartTime().minute());
        Assertions.assertEquals(SetStartVMOnConnect.DISABLE, response.rampDownStartVMOnConnect());
        Assertions.assertEquals(SessionHandlingOperation.NONE, response.rampDownActionOnDisconnect());
        Assertions.assertEquals(834235749, response.rampDownMinutesToWaitOnDisconnect());
        Assertions.assertEquals(SessionHandlingOperation.DEALLOCATE, response.rampDownActionOnLogoff());
        Assertions.assertEquals(1413642651, response.rampDownMinutesToWaitOnLogoff());
        Assertions.assertEquals(1232350365, response.offPeakStartTime().hour());
        Assertions.assertEquals(656399594, response.offPeakStartTime().minute());
        Assertions.assertEquals(SetStartVMOnConnect.ENABLE, response.offPeakStartVMOnConnect());
        Assertions.assertEquals(SessionHandlingOperation.HIBERNATE, response.offPeakActionOnDisconnect());
        Assertions.assertEquals(489491649, response.offPeakMinutesToWaitOnDisconnect());
        Assertions.assertEquals(SessionHandlingOperation.NONE, response.offPeakActionOnLogoff());
        Assertions.assertEquals(824374091, response.offPeakMinutesToWaitOnLogoff());
    }
}
