// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.desktopvirtualization.models.ApplicationPatch;
import com.azure.resourcemanager.desktopvirtualization.models.CommandLineSetting;
import com.azure.resourcemanager.desktopvirtualization.models.RemoteApplicationType;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ApplicationPatchTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ApplicationPatch model =
            BinaryData
                .fromString(
                    "{\"tags\":{\"kotl\":\"wwrlkdmtncv\",\"gsyocogj\":\"xdy\"},\"properties\":{\"description\":\"tbnnha\",\"friendlyName\":\"ocrkvcikh\",\"filePath\":\"p\",\"commandLineSetting\":\"Require\",\"commandLineArguments\":\"x\",\"showInPortal\":false,\"iconPath\":\"zikywgg\",\"iconIndex\":1558005484,\"msixPackageFamilyName\":\"la\",\"msixPackageApplicationId\":\"elwuipi\",\"applicationType\":\"InBuilt\"}}")
                .toObject(ApplicationPatch.class);
        Assertions.assertEquals("wwrlkdmtncv", model.tags().get("kotl"));
        Assertions.assertEquals("tbnnha", model.description());
        Assertions.assertEquals("ocrkvcikh", model.friendlyName());
        Assertions.assertEquals("p", model.filePath());
        Assertions.assertEquals(CommandLineSetting.REQUIRE, model.commandLineSetting());
        Assertions.assertEquals("x", model.commandLineArguments());
        Assertions.assertEquals(false, model.showInPortal());
        Assertions.assertEquals("zikywgg", model.iconPath());
        Assertions.assertEquals(1558005484, model.iconIndex());
        Assertions.assertEquals("la", model.msixPackageFamilyName());
        Assertions.assertEquals("elwuipi", model.msixPackageApplicationId());
        Assertions.assertEquals(RemoteApplicationType.IN_BUILT, model.applicationType());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ApplicationPatch model =
            new ApplicationPatch()
                .withTags(mapOf("kotl", "wwrlkdmtncv", "gsyocogj", "xdy"))
                .withDescription("tbnnha")
                .withFriendlyName("ocrkvcikh")
                .withFilePath("p")
                .withCommandLineSetting(CommandLineSetting.REQUIRE)
                .withCommandLineArguments("x")
                .withShowInPortal(false)
                .withIconPath("zikywgg")
                .withIconIndex(1558005484)
                .withMsixPackageFamilyName("la")
                .withMsixPackageApplicationId("elwuipi")
                .withApplicationType(RemoteApplicationType.IN_BUILT);
        model = BinaryData.fromObject(model).toObject(ApplicationPatch.class);
        Assertions.assertEquals("wwrlkdmtncv", model.tags().get("kotl"));
        Assertions.assertEquals("tbnnha", model.description());
        Assertions.assertEquals("ocrkvcikh", model.friendlyName());
        Assertions.assertEquals("p", model.filePath());
        Assertions.assertEquals(CommandLineSetting.REQUIRE, model.commandLineSetting());
        Assertions.assertEquals("x", model.commandLineArguments());
        Assertions.assertEquals(false, model.showInPortal());
        Assertions.assertEquals("zikywgg", model.iconPath());
        Assertions.assertEquals(1558005484, model.iconIndex());
        Assertions.assertEquals("la", model.msixPackageFamilyName());
        Assertions.assertEquals("elwuipi", model.msixPackageApplicationId());
        Assertions.assertEquals(RemoteApplicationType.IN_BUILT, model.applicationType());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
