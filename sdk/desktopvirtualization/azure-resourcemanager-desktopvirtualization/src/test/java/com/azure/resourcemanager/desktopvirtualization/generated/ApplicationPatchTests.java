// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.desktopvirtualization.models.ApplicationPatch;
import com.azure.resourcemanager.desktopvirtualization.models.CommandLineSetting;
import com.azure.resourcemanager.desktopvirtualization.models.RemoteApplicationType;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ApplicationPatchTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ApplicationPatch model = BinaryData.fromString(
            "{\"tags\":{\"tkl\":\"aenwabf\"},\"properties\":{\"description\":\"bjhwuaan\",\"friendlyName\":\"jos\",\"filePath\":\"youlp\",\"commandLineSetting\":\"Require\",\"commandLineArguments\":\"ag\",\"showInPortal\":false,\"iconPath\":\"mjwosytx\",\"iconIndex\":1413257471,\"msixPackageFamilyName\":\"kfcktqum\",\"msixPackageApplicationId\":\"kkezzikhlyfjhdgq\",\"applicationType\":\"InBuilt\"}}")
            .toObject(ApplicationPatch.class);
        Assertions.assertEquals("aenwabf", model.tags().get("tkl"));
        Assertions.assertEquals("bjhwuaan", model.description());
        Assertions.assertEquals("jos", model.friendlyName());
        Assertions.assertEquals("youlp", model.filePath());
        Assertions.assertEquals(CommandLineSetting.REQUIRE, model.commandLineSetting());
        Assertions.assertEquals("ag", model.commandLineArguments());
        Assertions.assertEquals(false, model.showInPortal());
        Assertions.assertEquals("mjwosytx", model.iconPath());
        Assertions.assertEquals(1413257471, model.iconIndex());
        Assertions.assertEquals("kfcktqum", model.msixPackageFamilyName());
        Assertions.assertEquals("kkezzikhlyfjhdgq", model.msixPackageApplicationId());
        Assertions.assertEquals(RemoteApplicationType.IN_BUILT, model.applicationType());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ApplicationPatch model = new ApplicationPatch().withTags(mapOf("tkl", "aenwabf"))
            .withDescription("bjhwuaan")
            .withFriendlyName("jos")
            .withFilePath("youlp")
            .withCommandLineSetting(CommandLineSetting.REQUIRE)
            .withCommandLineArguments("ag")
            .withShowInPortal(false)
            .withIconPath("mjwosytx")
            .withIconIndex(1413257471)
            .withMsixPackageFamilyName("kfcktqum")
            .withMsixPackageApplicationId("kkezzikhlyfjhdgq")
            .withApplicationType(RemoteApplicationType.IN_BUILT);
        model = BinaryData.fromObject(model).toObject(ApplicationPatch.class);
        Assertions.assertEquals("aenwabf", model.tags().get("tkl"));
        Assertions.assertEquals("bjhwuaan", model.description());
        Assertions.assertEquals("jos", model.friendlyName());
        Assertions.assertEquals("youlp", model.filePath());
        Assertions.assertEquals(CommandLineSetting.REQUIRE, model.commandLineSetting());
        Assertions.assertEquals("ag", model.commandLineArguments());
        Assertions.assertEquals(false, model.showInPortal());
        Assertions.assertEquals("mjwosytx", model.iconPath());
        Assertions.assertEquals(1413257471, model.iconIndex());
        Assertions.assertEquals("kfcktqum", model.msixPackageFamilyName());
        Assertions.assertEquals("kkezzikhlyfjhdgq", model.msixPackageApplicationId());
        Assertions.assertEquals(RemoteApplicationType.IN_BUILT, model.applicationType());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
