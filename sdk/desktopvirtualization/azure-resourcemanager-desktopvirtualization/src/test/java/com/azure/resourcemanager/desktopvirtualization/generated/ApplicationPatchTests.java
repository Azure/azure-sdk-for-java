// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.desktopvirtualization.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.desktopvirtualization.models.ApplicationPatch;
import com.azure.resourcemanager.desktopvirtualization.models.CommandLineSetting;
import com.azure.resourcemanager.desktopvirtualization.models.RemoteApplicationType;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ApplicationPatchTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ApplicationPatch model = BinaryData.fromString(
            "{\"tags\":{\"alm\":\"qqtch\"},\"properties\":{\"description\":\"d\",\"friendlyName\":\"ygdvwv\",\"filePath\":\"iohgwxrtfud\",\"commandLineSetting\":\"Allow\",\"commandLineArguments\":\"gyqagvrvmnpkuk\",\"showInPortal\":false,\"iconPath\":\"dblx\",\"iconIndex\":261614569,\"msixPackageFamilyName\":\"fnjhfjxwmszkkfo\",\"msixPackageApplicationId\":\"eyfkzikfja\",\"applicationType\":\"MsixApplication\"}}")
            .toObject(ApplicationPatch.class);
        Assertions.assertEquals("qqtch", model.tags().get("alm"));
        Assertions.assertEquals("d", model.description());
        Assertions.assertEquals("ygdvwv", model.friendlyName());
        Assertions.assertEquals("iohgwxrtfud", model.filePath());
        Assertions.assertEquals(CommandLineSetting.ALLOW, model.commandLineSetting());
        Assertions.assertEquals("gyqagvrvmnpkuk", model.commandLineArguments());
        Assertions.assertEquals(false, model.showInPortal());
        Assertions.assertEquals("dblx", model.iconPath());
        Assertions.assertEquals(261614569, model.iconIndex());
        Assertions.assertEquals("fnjhfjxwmszkkfo", model.msixPackageFamilyName());
        Assertions.assertEquals("eyfkzikfja", model.msixPackageApplicationId());
        Assertions.assertEquals(RemoteApplicationType.MSIX_APPLICATION, model.applicationType());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ApplicationPatch model = new ApplicationPatch().withTags(mapOf("alm", "qqtch"))
            .withDescription("d")
            .withFriendlyName("ygdvwv")
            .withFilePath("iohgwxrtfud")
            .withCommandLineSetting(CommandLineSetting.ALLOW)
            .withCommandLineArguments("gyqagvrvmnpkuk")
            .withShowInPortal(false)
            .withIconPath("dblx")
            .withIconIndex(261614569)
            .withMsixPackageFamilyName("fnjhfjxwmszkkfo")
            .withMsixPackageApplicationId("eyfkzikfja")
            .withApplicationType(RemoteApplicationType.MSIX_APPLICATION);
        model = BinaryData.fromObject(model).toObject(ApplicationPatch.class);
        Assertions.assertEquals("qqtch", model.tags().get("alm"));
        Assertions.assertEquals("d", model.description());
        Assertions.assertEquals("ygdvwv", model.friendlyName());
        Assertions.assertEquals("iohgwxrtfud", model.filePath());
        Assertions.assertEquals(CommandLineSetting.ALLOW, model.commandLineSetting());
        Assertions.assertEquals("gyqagvrvmnpkuk", model.commandLineArguments());
        Assertions.assertEquals(false, model.showInPortal());
        Assertions.assertEquals("dblx", model.iconPath());
        Assertions.assertEquals(261614569, model.iconIndex());
        Assertions.assertEquals("fnjhfjxwmszkkfo", model.msixPackageFamilyName());
        Assertions.assertEquals("eyfkzikfja", model.msixPackageApplicationId());
        Assertions.assertEquals(RemoteApplicationType.MSIX_APPLICATION, model.applicationType());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
