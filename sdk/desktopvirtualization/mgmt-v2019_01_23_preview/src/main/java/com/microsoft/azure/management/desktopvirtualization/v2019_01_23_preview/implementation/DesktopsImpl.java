/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.desktopvirtualization.v2019_01_23_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.desktopvirtualization.v2019_01_23_preview.Desktops;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.management.desktopvirtualization.v2019_01_23_preview.DesktopList;
import com.microsoft.azure.management.desktopvirtualization.v2019_01_23_preview.Desktop;

class DesktopsImpl extends WrapperImpl<DesktopsInner> implements Desktops {
    private final DesktopVirtualizationManager manager;

    DesktopsImpl(DesktopVirtualizationManager manager) {
        super(manager.inner().desktops());
        this.manager = manager;
    }

    public DesktopVirtualizationManager manager() {
        return this.manager;
    }

    private DesktopImpl wrapModel(DesktopInner inner) {
        return  new DesktopImpl(inner, manager());
    }

    @Override
    public Observable<DesktopList> listAsync(String resourceGroupName, String applicationGroupName) {
        DesktopsInner client = this.inner();
        return client.listAsync(resourceGroupName, applicationGroupName)
        .map(new Func1<DesktopListInner, DesktopList>() {
            @Override
            public DesktopList call(DesktopListInner inner) {
                return new DesktopListImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<Desktop> getAsync(String resourceGroupName, String applicationGroupName, String desktopName) {
        DesktopsInner client = this.inner();
        return client.getAsync(resourceGroupName, applicationGroupName, desktopName)
        .flatMap(new Func1<DesktopInner, Observable<Desktop>>() {
            @Override
            public Observable<Desktop> call(DesktopInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((Desktop)wrapModel(inner));
                }
            }
       });
    }

}
