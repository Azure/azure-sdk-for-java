/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.desktopvirtualization.v2019_01_23_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.desktopvirtualization.v2019_01_23_preview.ActiveApplications;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.desktopvirtualization.v2019_01_23_preview.HostPoolApplication;

class ActiveApplicationsImpl extends WrapperImpl<ActiveApplicationsInner> implements ActiveApplications {
    private final DesktopVirtualizationManager manager;

    ActiveApplicationsImpl(DesktopVirtualizationManager manager) {
        super(manager.inner().activeApplications());
        this.manager = manager;
    }

    public DesktopVirtualizationManager manager() {
        return this.manager;
    }

    private HostPoolApplicationImpl wrapModel(ApplicationInner inner) {
        return  new HostPoolApplicationImpl(inner, manager());
    }

    @Override
    public Observable<HostPoolApplication> listBySessionHostAsync(final String resourceGroupName, final String hostPoolName, final String sessionHostName) {
        ActiveApplicationsInner client = this.inner();
        return client.listBySessionHostAsync(resourceGroupName, hostPoolName, sessionHostName)
        .flatMapIterable(new Func1<Page<ApplicationInner>, Iterable<ApplicationInner>>() {
            @Override
            public Iterable<ApplicationInner> call(Page<ApplicationInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ApplicationInner, HostPoolApplication>() {
            @Override
            public HostPoolApplication call(ApplicationInner inner) {
                return wrapModel(inner);
            }
        });
    }

}
