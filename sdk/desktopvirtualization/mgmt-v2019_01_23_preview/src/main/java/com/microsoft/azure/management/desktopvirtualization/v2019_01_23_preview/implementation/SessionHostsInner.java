/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.desktopvirtualization.v2019_01_23_preview.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.desktopvirtualization.v2019_01_23_preview.SessionHostPatch;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in SessionHosts.
 */
public class SessionHostsInner {
    /** The Retrofit service to perform REST calls. */
    private SessionHostsService service;
    /** The service client containing this operation class. */
    private DesktopVirtualizationAPIClientImpl client;

    /**
     * Initializes an instance of SessionHostsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public SessionHostsInner(Retrofit retrofit, DesktopVirtualizationAPIClientImpl client) {
        this.service = retrofit.create(SessionHostsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for SessionHosts to be
     * used by Retrofit to perform actually REST calls.
     */
    interface SessionHostsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.desktopvirtualization.v2019_01_23_preview.SessionHosts get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}/sessionHosts/{sessionHostName}")
        Observable<Response<ResponseBody>> get(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("hostPoolName") String hostPoolName, @Path("sessionHostName") String sessionHostName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.desktopvirtualization.v2019_01_23_preview.SessionHosts delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}/sessionHosts/{sessionHostName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("hostPoolName") String hostPoolName, @Path("sessionHostName") String sessionHostName, @Query("api-version") String apiVersion, @Query("force") Boolean force, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.desktopvirtualization.v2019_01_23_preview.SessionHosts update" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}/sessionHosts/{sessionHostName}")
        Observable<Response<ResponseBody>> update(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("hostPoolName") String hostPoolName, @Path("sessionHostName") String sessionHostName, @Query("api-version") String apiVersion, @Body SessionHostPatch sessionHost, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.desktopvirtualization.v2019_01_23_preview.SessionHosts list" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}/sessionHosts")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("hostPoolName") String hostPoolName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.desktopvirtualization.v2019_01_23_preview.SessionHosts listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Get a session host.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param sessionHostName The name of the session host within the specified host pool
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SessionHostInner object if successful.
     */
    public SessionHostInner get(String resourceGroupName, String hostPoolName, String sessionHostName) {
        return getWithServiceResponseAsync(resourceGroupName, hostPoolName, sessionHostName).toBlocking().single().body();
    }

    /**
     * Get a session host.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param sessionHostName The name of the session host within the specified host pool
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SessionHostInner> getAsync(String resourceGroupName, String hostPoolName, String sessionHostName, final ServiceCallback<SessionHostInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroupName, hostPoolName, sessionHostName), serviceCallback);
    }

    /**
     * Get a session host.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param sessionHostName The name of the session host within the specified host pool
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SessionHostInner object
     */
    public Observable<SessionHostInner> getAsync(String resourceGroupName, String hostPoolName, String sessionHostName) {
        return getWithServiceResponseAsync(resourceGroupName, hostPoolName, sessionHostName).map(new Func1<ServiceResponse<SessionHostInner>, SessionHostInner>() {
            @Override
            public SessionHostInner call(ServiceResponse<SessionHostInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get a session host.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param sessionHostName The name of the session host within the specified host pool
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SessionHostInner object
     */
    public Observable<ServiceResponse<SessionHostInner>> getWithServiceResponseAsync(String resourceGroupName, String hostPoolName, String sessionHostName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (hostPoolName == null) {
            throw new IllegalArgumentException("Parameter hostPoolName is required and cannot be null.");
        }
        if (sessionHostName == null) {
            throw new IllegalArgumentException("Parameter sessionHostName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(this.client.subscriptionId(), resourceGroupName, hostPoolName, sessionHostName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SessionHostInner>>>() {
                @Override
                public Observable<ServiceResponse<SessionHostInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SessionHostInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SessionHostInner> getDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<SessionHostInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<SessionHostInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Remove a SessionHost.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param sessionHostName The name of the session host within the specified host pool
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String hostPoolName, String sessionHostName) {
        deleteWithServiceResponseAsync(resourceGroupName, hostPoolName, sessionHostName).toBlocking().single().body();
    }

    /**
     * Remove a SessionHost.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param sessionHostName The name of the session host within the specified host pool
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String hostPoolName, String sessionHostName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, hostPoolName, sessionHostName), serviceCallback);
    }

    /**
     * Remove a SessionHost.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param sessionHostName The name of the session host within the specified host pool
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String hostPoolName, String sessionHostName) {
        return deleteWithServiceResponseAsync(resourceGroupName, hostPoolName, sessionHostName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Remove a SessionHost.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param sessionHostName The name of the session host within the specified host pool
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String hostPoolName, String sessionHostName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (hostPoolName == null) {
            throw new IllegalArgumentException("Parameter hostPoolName is required and cannot be null.");
        }
        if (sessionHostName == null) {
            throw new IllegalArgumentException("Parameter sessionHostName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final Boolean force = null;
        return service.delete(this.client.subscriptionId(), resourceGroupName, hostPoolName, sessionHostName, this.client.apiVersion(), force, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Remove a SessionHost.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param sessionHostName The name of the session host within the specified host pool
     * @param force Force flag to force sessionHost deletion even when userSession exists.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String hostPoolName, String sessionHostName, Boolean force) {
        deleteWithServiceResponseAsync(resourceGroupName, hostPoolName, sessionHostName, force).toBlocking().single().body();
    }

    /**
     * Remove a SessionHost.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param sessionHostName The name of the session host within the specified host pool
     * @param force Force flag to force sessionHost deletion even when userSession exists.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String hostPoolName, String sessionHostName, Boolean force, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, hostPoolName, sessionHostName, force), serviceCallback);
    }

    /**
     * Remove a SessionHost.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param sessionHostName The name of the session host within the specified host pool
     * @param force Force flag to force sessionHost deletion even when userSession exists.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String hostPoolName, String sessionHostName, Boolean force) {
        return deleteWithServiceResponseAsync(resourceGroupName, hostPoolName, sessionHostName, force).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Remove a SessionHost.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param sessionHostName The name of the session host within the specified host pool
     * @param force Force flag to force sessionHost deletion even when userSession exists.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String hostPoolName, String sessionHostName, Boolean force) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (hostPoolName == null) {
            throw new IllegalArgumentException("Parameter hostPoolName is required and cannot be null.");
        }
        if (sessionHostName == null) {
            throw new IllegalArgumentException("Parameter sessionHostName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.delete(this.client.subscriptionId(), resourceGroupName, hostPoolName, sessionHostName, this.client.apiVersion(), force, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Update a session host.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param sessionHostName The name of the session host within the specified host pool
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SessionHostInner object if successful.
     */
    public SessionHostInner update(String resourceGroupName, String hostPoolName, String sessionHostName) {
        return updateWithServiceResponseAsync(resourceGroupName, hostPoolName, sessionHostName).toBlocking().single().body();
    }

    /**
     * Update a session host.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param sessionHostName The name of the session host within the specified host pool
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SessionHostInner> updateAsync(String resourceGroupName, String hostPoolName, String sessionHostName, final ServiceCallback<SessionHostInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, hostPoolName, sessionHostName), serviceCallback);
    }

    /**
     * Update a session host.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param sessionHostName The name of the session host within the specified host pool
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SessionHostInner object
     */
    public Observable<SessionHostInner> updateAsync(String resourceGroupName, String hostPoolName, String sessionHostName) {
        return updateWithServiceResponseAsync(resourceGroupName, hostPoolName, sessionHostName).map(new Func1<ServiceResponse<SessionHostInner>, SessionHostInner>() {
            @Override
            public SessionHostInner call(ServiceResponse<SessionHostInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Update a session host.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param sessionHostName The name of the session host within the specified host pool
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SessionHostInner object
     */
    public Observable<ServiceResponse<SessionHostInner>> updateWithServiceResponseAsync(String resourceGroupName, String hostPoolName, String sessionHostName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (hostPoolName == null) {
            throw new IllegalArgumentException("Parameter hostPoolName is required and cannot be null.");
        }
        if (sessionHostName == null) {
            throw new IllegalArgumentException("Parameter sessionHostName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final SessionHostPatch sessionHost = null;
        return service.update(this.client.subscriptionId(), resourceGroupName, hostPoolName, sessionHostName, this.client.apiVersion(), sessionHost, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SessionHostInner>>>() {
                @Override
                public Observable<ServiceResponse<SessionHostInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SessionHostInner> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Update a session host.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param sessionHostName The name of the session host within the specified host pool
     * @param sessionHost Object containing SessionHost definitions.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SessionHostInner object if successful.
     */
    public SessionHostInner update(String resourceGroupName, String hostPoolName, String sessionHostName, SessionHostPatch sessionHost) {
        return updateWithServiceResponseAsync(resourceGroupName, hostPoolName, sessionHostName, sessionHost).toBlocking().single().body();
    }

    /**
     * Update a session host.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param sessionHostName The name of the session host within the specified host pool
     * @param sessionHost Object containing SessionHost definitions.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SessionHostInner> updateAsync(String resourceGroupName, String hostPoolName, String sessionHostName, SessionHostPatch sessionHost, final ServiceCallback<SessionHostInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, hostPoolName, sessionHostName, sessionHost), serviceCallback);
    }

    /**
     * Update a session host.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param sessionHostName The name of the session host within the specified host pool
     * @param sessionHost Object containing SessionHost definitions.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SessionHostInner object
     */
    public Observable<SessionHostInner> updateAsync(String resourceGroupName, String hostPoolName, String sessionHostName, SessionHostPatch sessionHost) {
        return updateWithServiceResponseAsync(resourceGroupName, hostPoolName, sessionHostName, sessionHost).map(new Func1<ServiceResponse<SessionHostInner>, SessionHostInner>() {
            @Override
            public SessionHostInner call(ServiceResponse<SessionHostInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Update a session host.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param sessionHostName The name of the session host within the specified host pool
     * @param sessionHost Object containing SessionHost definitions.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SessionHostInner object
     */
    public Observable<ServiceResponse<SessionHostInner>> updateWithServiceResponseAsync(String resourceGroupName, String hostPoolName, String sessionHostName, SessionHostPatch sessionHost) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (hostPoolName == null) {
            throw new IllegalArgumentException("Parameter hostPoolName is required and cannot be null.");
        }
        if (sessionHostName == null) {
            throw new IllegalArgumentException("Parameter sessionHostName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(sessionHost);
        return service.update(this.client.subscriptionId(), resourceGroupName, hostPoolName, sessionHostName, this.client.apiVersion(), sessionHost, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SessionHostInner>>>() {
                @Override
                public Observable<ServiceResponse<SessionHostInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SessionHostInner> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SessionHostInner> updateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<SessionHostInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<SessionHostInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List sessionHosts.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;SessionHostInner&gt; object if successful.
     */
    public PagedList<SessionHostInner> list(final String resourceGroupName, final String hostPoolName) {
        ServiceResponse<Page<SessionHostInner>> response = listSinglePageAsync(resourceGroupName, hostPoolName).toBlocking().single();
        return new PagedList<SessionHostInner>(response.body()) {
            @Override
            public Page<SessionHostInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List sessionHosts.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<SessionHostInner>> listAsync(final String resourceGroupName, final String hostPoolName, final ListOperationCallback<SessionHostInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(resourceGroupName, hostPoolName),
            new Func1<String, Observable<ServiceResponse<Page<SessionHostInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<SessionHostInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List sessionHosts.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;SessionHostInner&gt; object
     */
    public Observable<Page<SessionHostInner>> listAsync(final String resourceGroupName, final String hostPoolName) {
        return listWithServiceResponseAsync(resourceGroupName, hostPoolName)
            .map(new Func1<ServiceResponse<Page<SessionHostInner>>, Page<SessionHostInner>>() {
                @Override
                public Page<SessionHostInner> call(ServiceResponse<Page<SessionHostInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List sessionHosts.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;SessionHostInner&gt; object
     */
    public Observable<ServiceResponse<Page<SessionHostInner>>> listWithServiceResponseAsync(final String resourceGroupName, final String hostPoolName) {
        return listSinglePageAsync(resourceGroupName, hostPoolName)
            .concatMap(new Func1<ServiceResponse<Page<SessionHostInner>>, Observable<ServiceResponse<Page<SessionHostInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<SessionHostInner>>> call(ServiceResponse<Page<SessionHostInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List sessionHosts.
     *
    ServiceResponse<PageImpl<SessionHostInner>> * @param resourceGroupName The name of the resource group. The name is case insensitive.
    ServiceResponse<PageImpl<SessionHostInner>> * @param hostPoolName The name of the host pool within the specified resource group
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;SessionHostInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<SessionHostInner>>> listSinglePageAsync(final String resourceGroupName, final String hostPoolName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (hostPoolName == null) {
            throw new IllegalArgumentException("Parameter hostPoolName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.subscriptionId(), resourceGroupName, hostPoolName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<SessionHostInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<SessionHostInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<SessionHostInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<SessionHostInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<SessionHostInner>> listDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<SessionHostInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<SessionHostInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List sessionHosts.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;SessionHostInner&gt; object if successful.
     */
    public PagedList<SessionHostInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<SessionHostInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<SessionHostInner>(response.body()) {
            @Override
            public Page<SessionHostInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List sessionHosts.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<SessionHostInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<SessionHostInner>> serviceFuture, final ListOperationCallback<SessionHostInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<SessionHostInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<SessionHostInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List sessionHosts.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;SessionHostInner&gt; object
     */
    public Observable<Page<SessionHostInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<SessionHostInner>>, Page<SessionHostInner>>() {
                @Override
                public Page<SessionHostInner> call(ServiceResponse<Page<SessionHostInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List sessionHosts.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;SessionHostInner&gt; object
     */
    public Observable<ServiceResponse<Page<SessionHostInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<SessionHostInner>>, Observable<ServiceResponse<Page<SessionHostInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<SessionHostInner>>> call(ServiceResponse<Page<SessionHostInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List sessionHosts.
     *
    ServiceResponse<PageImpl<SessionHostInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;SessionHostInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<SessionHostInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<SessionHostInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<SessionHostInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<SessionHostInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<SessionHostInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<SessionHostInner>> listNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<SessionHostInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<SessionHostInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
