/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.desktopvirtualization.v2020_09_21_preview.implementation;

import com.microsoft.azure.arm.collection.InnerSupportsGet;
import com.microsoft.azure.arm.collection.InnerSupportsDelete;
import com.microsoft.azure.arm.collection.InnerSupportsListing;
import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.desktopvirtualization.v2020_09_21_preview.ApplicationGroupPatch;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in ApplicationGroups.
 */
public class ApplicationGroupsInner implements InnerSupportsGet<ApplicationGroupInner>, InnerSupportsDelete<Void>, InnerSupportsListing<ApplicationGroupInner> {
    /** The Retrofit service to perform REST calls. */
    private ApplicationGroupsService service;
    /** The service client containing this operation class. */
    private DesktopVirtualizationAPIClientImpl client;

    /**
     * Initializes an instance of ApplicationGroupsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ApplicationGroupsInner(Retrofit retrofit, DesktopVirtualizationAPIClientImpl client) {
        this.service = retrofit.create(ApplicationGroupsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for ApplicationGroups to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ApplicationGroupsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.desktopvirtualization.v2020_09_21_preview.ApplicationGroups getByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/applicationGroups/{applicationGroupName}")
        Observable<Response<ResponseBody>> getByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("applicationGroupName") String applicationGroupName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.desktopvirtualization.v2020_09_21_preview.ApplicationGroups createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/applicationGroups/{applicationGroupName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("applicationGroupName") String applicationGroupName, @Query("api-version") String apiVersion, @Body ApplicationGroupInner applicationGroup, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.desktopvirtualization.v2020_09_21_preview.ApplicationGroups delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/applicationGroups/{applicationGroupName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("applicationGroupName") String applicationGroupName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.desktopvirtualization.v2020_09_21_preview.ApplicationGroups update" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/applicationGroups/{applicationGroupName}")
        Observable<Response<ResponseBody>> update(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("applicationGroupName") String applicationGroupName, @Query("api-version") String apiVersion, @Body ApplicationGroupPatch applicationGroup, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.desktopvirtualization.v2020_09_21_preview.ApplicationGroups listByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/applicationGroups")
        Observable<Response<ResponseBody>> listByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Query("$filter") String filter, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.desktopvirtualization.v2020_09_21_preview.ApplicationGroups list" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.DesktopVirtualization/applicationGroups")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Query("$filter") String filter, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.desktopvirtualization.v2020_09_21_preview.ApplicationGroups listByResourceGroupNext" })
        @GET
        Observable<Response<ResponseBody>> listByResourceGroupNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.desktopvirtualization.v2020_09_21_preview.ApplicationGroups listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Get an application group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationGroupName The name of the application group
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ApplicationGroupInner object if successful.
     */
    public ApplicationGroupInner getByResourceGroup(String resourceGroupName, String applicationGroupName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, applicationGroupName).toBlocking().single().body();
    }

    /**
     * Get an application group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationGroupName The name of the application group
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ApplicationGroupInner> getByResourceGroupAsync(String resourceGroupName, String applicationGroupName, final ServiceCallback<ApplicationGroupInner> serviceCallback) {
        return ServiceFuture.fromResponse(getByResourceGroupWithServiceResponseAsync(resourceGroupName, applicationGroupName), serviceCallback);
    }

    /**
     * Get an application group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationGroupName The name of the application group
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApplicationGroupInner object
     */
    public Observable<ApplicationGroupInner> getByResourceGroupAsync(String resourceGroupName, String applicationGroupName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, applicationGroupName).map(new Func1<ServiceResponse<ApplicationGroupInner>, ApplicationGroupInner>() {
            @Override
            public ApplicationGroupInner call(ServiceResponse<ApplicationGroupInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get an application group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationGroupName The name of the application group
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApplicationGroupInner object
     */
    public Observable<ServiceResponse<ApplicationGroupInner>> getByResourceGroupWithServiceResponseAsync(String resourceGroupName, String applicationGroupName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (applicationGroupName == null) {
            throw new IllegalArgumentException("Parameter applicationGroupName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getByResourceGroup(this.client.subscriptionId(), resourceGroupName, applicationGroupName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ApplicationGroupInner>>>() {
                @Override
                public Observable<ServiceResponse<ApplicationGroupInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ApplicationGroupInner> clientResponse = getByResourceGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ApplicationGroupInner> getByResourceGroupDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ApplicationGroupInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ApplicationGroupInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Create or update an applicationGroup.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationGroupName The name of the application group
     * @param applicationGroup Object containing ApplicationGroup definitions.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ApplicationGroupInner object if successful.
     */
    public ApplicationGroupInner createOrUpdate(String resourceGroupName, String applicationGroupName, ApplicationGroupInner applicationGroup) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, applicationGroupName, applicationGroup).toBlocking().single().body();
    }

    /**
     * Create or update an applicationGroup.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationGroupName The name of the application group
     * @param applicationGroup Object containing ApplicationGroup definitions.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ApplicationGroupInner> createOrUpdateAsync(String resourceGroupName, String applicationGroupName, ApplicationGroupInner applicationGroup, final ServiceCallback<ApplicationGroupInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, applicationGroupName, applicationGroup), serviceCallback);
    }

    /**
     * Create or update an applicationGroup.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationGroupName The name of the application group
     * @param applicationGroup Object containing ApplicationGroup definitions.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApplicationGroupInner object
     */
    public Observable<ApplicationGroupInner> createOrUpdateAsync(String resourceGroupName, String applicationGroupName, ApplicationGroupInner applicationGroup) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, applicationGroupName, applicationGroup).map(new Func1<ServiceResponse<ApplicationGroupInner>, ApplicationGroupInner>() {
            @Override
            public ApplicationGroupInner call(ServiceResponse<ApplicationGroupInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or update an applicationGroup.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationGroupName The name of the application group
     * @param applicationGroup Object containing ApplicationGroup definitions.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApplicationGroupInner object
     */
    public Observable<ServiceResponse<ApplicationGroupInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String applicationGroupName, ApplicationGroupInner applicationGroup) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (applicationGroupName == null) {
            throw new IllegalArgumentException("Parameter applicationGroupName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (applicationGroup == null) {
            throw new IllegalArgumentException("Parameter applicationGroup is required and cannot be null.");
        }
        Validator.validate(applicationGroup);
        return service.createOrUpdate(this.client.subscriptionId(), resourceGroupName, applicationGroupName, this.client.apiVersion(), applicationGroup, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ApplicationGroupInner>>>() {
                @Override
                public Observable<ServiceResponse<ApplicationGroupInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ApplicationGroupInner> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ApplicationGroupInner> createOrUpdateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ApplicationGroupInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ApplicationGroupInner>() { }.getType())
                .register(201, new TypeToken<ApplicationGroupInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Remove an applicationGroup.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationGroupName The name of the application group
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String applicationGroupName) {
        deleteWithServiceResponseAsync(resourceGroupName, applicationGroupName).toBlocking().single().body();
    }

    /**
     * Remove an applicationGroup.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationGroupName The name of the application group
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String applicationGroupName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, applicationGroupName), serviceCallback);
    }

    /**
     * Remove an applicationGroup.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationGroupName The name of the application group
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String applicationGroupName) {
        return deleteWithServiceResponseAsync(resourceGroupName, applicationGroupName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Remove an applicationGroup.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationGroupName The name of the application group
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String applicationGroupName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (applicationGroupName == null) {
            throw new IllegalArgumentException("Parameter applicationGroupName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.delete(this.client.subscriptionId(), resourceGroupName, applicationGroupName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Update an applicationGroup.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationGroupName The name of the application group
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ApplicationGroupInner object if successful.
     */
    public ApplicationGroupInner update(String resourceGroupName, String applicationGroupName) {
        return updateWithServiceResponseAsync(resourceGroupName, applicationGroupName).toBlocking().single().body();
    }

    /**
     * Update an applicationGroup.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationGroupName The name of the application group
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ApplicationGroupInner> updateAsync(String resourceGroupName, String applicationGroupName, final ServiceCallback<ApplicationGroupInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, applicationGroupName), serviceCallback);
    }

    /**
     * Update an applicationGroup.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationGroupName The name of the application group
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApplicationGroupInner object
     */
    public Observable<ApplicationGroupInner> updateAsync(String resourceGroupName, String applicationGroupName) {
        return updateWithServiceResponseAsync(resourceGroupName, applicationGroupName).map(new Func1<ServiceResponse<ApplicationGroupInner>, ApplicationGroupInner>() {
            @Override
            public ApplicationGroupInner call(ServiceResponse<ApplicationGroupInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Update an applicationGroup.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationGroupName The name of the application group
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApplicationGroupInner object
     */
    public Observable<ServiceResponse<ApplicationGroupInner>> updateWithServiceResponseAsync(String resourceGroupName, String applicationGroupName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (applicationGroupName == null) {
            throw new IllegalArgumentException("Parameter applicationGroupName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final ApplicationGroupPatch applicationGroup = null;
        return service.update(this.client.subscriptionId(), resourceGroupName, applicationGroupName, this.client.apiVersion(), applicationGroup, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ApplicationGroupInner>>>() {
                @Override
                public Observable<ServiceResponse<ApplicationGroupInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ApplicationGroupInner> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Update an applicationGroup.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationGroupName The name of the application group
     * @param applicationGroup Object containing ApplicationGroup definitions.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ApplicationGroupInner object if successful.
     */
    public ApplicationGroupInner update(String resourceGroupName, String applicationGroupName, ApplicationGroupPatch applicationGroup) {
        return updateWithServiceResponseAsync(resourceGroupName, applicationGroupName, applicationGroup).toBlocking().single().body();
    }

    /**
     * Update an applicationGroup.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationGroupName The name of the application group
     * @param applicationGroup Object containing ApplicationGroup definitions.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ApplicationGroupInner> updateAsync(String resourceGroupName, String applicationGroupName, ApplicationGroupPatch applicationGroup, final ServiceCallback<ApplicationGroupInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, applicationGroupName, applicationGroup), serviceCallback);
    }

    /**
     * Update an applicationGroup.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationGroupName The name of the application group
     * @param applicationGroup Object containing ApplicationGroup definitions.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApplicationGroupInner object
     */
    public Observable<ApplicationGroupInner> updateAsync(String resourceGroupName, String applicationGroupName, ApplicationGroupPatch applicationGroup) {
        return updateWithServiceResponseAsync(resourceGroupName, applicationGroupName, applicationGroup).map(new Func1<ServiceResponse<ApplicationGroupInner>, ApplicationGroupInner>() {
            @Override
            public ApplicationGroupInner call(ServiceResponse<ApplicationGroupInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Update an applicationGroup.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationGroupName The name of the application group
     * @param applicationGroup Object containing ApplicationGroup definitions.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApplicationGroupInner object
     */
    public Observable<ServiceResponse<ApplicationGroupInner>> updateWithServiceResponseAsync(String resourceGroupName, String applicationGroupName, ApplicationGroupPatch applicationGroup) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (applicationGroupName == null) {
            throw new IllegalArgumentException("Parameter applicationGroupName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(applicationGroup);
        return service.update(this.client.subscriptionId(), resourceGroupName, applicationGroupName, this.client.apiVersion(), applicationGroup, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ApplicationGroupInner>>>() {
                @Override
                public Observable<ServiceResponse<ApplicationGroupInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ApplicationGroupInner> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ApplicationGroupInner> updateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ApplicationGroupInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ApplicationGroupInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List applicationGroups.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ApplicationGroupInner&gt; object if successful.
     */
    public PagedList<ApplicationGroupInner> listByResourceGroup(final String resourceGroupName) {
        ServiceResponse<Page<ApplicationGroupInner>> response = listByResourceGroupSinglePageAsync(resourceGroupName).toBlocking().single();
        return new PagedList<ApplicationGroupInner>(response.body()) {
            @Override
            public Page<ApplicationGroupInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List applicationGroups.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ApplicationGroupInner>> listByResourceGroupAsync(final String resourceGroupName, final ListOperationCallback<ApplicationGroupInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupSinglePageAsync(resourceGroupName),
            new Func1<String, Observable<ServiceResponse<Page<ApplicationGroupInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ApplicationGroupInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List applicationGroups.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ApplicationGroupInner&gt; object
     */
    public Observable<Page<ApplicationGroupInner>> listByResourceGroupAsync(final String resourceGroupName) {
        return listByResourceGroupWithServiceResponseAsync(resourceGroupName)
            .map(new Func1<ServiceResponse<Page<ApplicationGroupInner>>, Page<ApplicationGroupInner>>() {
                @Override
                public Page<ApplicationGroupInner> call(ServiceResponse<Page<ApplicationGroupInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List applicationGroups.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ApplicationGroupInner&gt; object
     */
    public Observable<ServiceResponse<Page<ApplicationGroupInner>>> listByResourceGroupWithServiceResponseAsync(final String resourceGroupName) {
        return listByResourceGroupSinglePageAsync(resourceGroupName)
            .concatMap(new Func1<ServiceResponse<Page<ApplicationGroupInner>>, Observable<ServiceResponse<Page<ApplicationGroupInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ApplicationGroupInner>>> call(ServiceResponse<Page<ApplicationGroupInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List applicationGroups.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ApplicationGroupInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ApplicationGroupInner>>> listByResourceGroupSinglePageAsync(final String resourceGroupName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String filter = null;
        return service.listByResourceGroup(this.client.subscriptionId(), resourceGroupName, this.client.apiVersion(), filter, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ApplicationGroupInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ApplicationGroupInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ApplicationGroupInner>> result = listByResourceGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ApplicationGroupInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * List applicationGroups.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param filter OData filter expression. Valid properties for filtering are applicationGroupType.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ApplicationGroupInner&gt; object if successful.
     */
    public PagedList<ApplicationGroupInner> listByResourceGroup(final String resourceGroupName, final String filter) {
        ServiceResponse<Page<ApplicationGroupInner>> response = listByResourceGroupSinglePageAsync(resourceGroupName, filter).toBlocking().single();
        return new PagedList<ApplicationGroupInner>(response.body()) {
            @Override
            public Page<ApplicationGroupInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List applicationGroups.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param filter OData filter expression. Valid properties for filtering are applicationGroupType.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ApplicationGroupInner>> listByResourceGroupAsync(final String resourceGroupName, final String filter, final ListOperationCallback<ApplicationGroupInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupSinglePageAsync(resourceGroupName, filter),
            new Func1<String, Observable<ServiceResponse<Page<ApplicationGroupInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ApplicationGroupInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List applicationGroups.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param filter OData filter expression. Valid properties for filtering are applicationGroupType.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ApplicationGroupInner&gt; object
     */
    public Observable<Page<ApplicationGroupInner>> listByResourceGroupAsync(final String resourceGroupName, final String filter) {
        return listByResourceGroupWithServiceResponseAsync(resourceGroupName, filter)
            .map(new Func1<ServiceResponse<Page<ApplicationGroupInner>>, Page<ApplicationGroupInner>>() {
                @Override
                public Page<ApplicationGroupInner> call(ServiceResponse<Page<ApplicationGroupInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List applicationGroups.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param filter OData filter expression. Valid properties for filtering are applicationGroupType.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ApplicationGroupInner&gt; object
     */
    public Observable<ServiceResponse<Page<ApplicationGroupInner>>> listByResourceGroupWithServiceResponseAsync(final String resourceGroupName, final String filter) {
        return listByResourceGroupSinglePageAsync(resourceGroupName, filter)
            .concatMap(new Func1<ServiceResponse<Page<ApplicationGroupInner>>, Observable<ServiceResponse<Page<ApplicationGroupInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ApplicationGroupInner>>> call(ServiceResponse<Page<ApplicationGroupInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List applicationGroups.
     *
    ServiceResponse<PageImpl<ApplicationGroupInner>> * @param resourceGroupName The name of the resource group. The name is case insensitive.
    ServiceResponse<PageImpl<ApplicationGroupInner>> * @param filter OData filter expression. Valid properties for filtering are applicationGroupType.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ApplicationGroupInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ApplicationGroupInner>>> listByResourceGroupSinglePageAsync(final String resourceGroupName, final String filter) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByResourceGroup(this.client.subscriptionId(), resourceGroupName, this.client.apiVersion(), filter, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ApplicationGroupInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ApplicationGroupInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ApplicationGroupInner>> result = listByResourceGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ApplicationGroupInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ApplicationGroupInner>> listByResourceGroupDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ApplicationGroupInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ApplicationGroupInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List applicationGroups in subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ApplicationGroupInner&gt; object if successful.
     */
    public PagedList<ApplicationGroupInner> list() {
        ServiceResponse<Page<ApplicationGroupInner>> response = listSinglePageAsync().toBlocking().single();
        return new PagedList<ApplicationGroupInner>(response.body()) {
            @Override
            public Page<ApplicationGroupInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List applicationGroups in subscription.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ApplicationGroupInner>> listAsync(final ListOperationCallback<ApplicationGroupInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(),
            new Func1<String, Observable<ServiceResponse<Page<ApplicationGroupInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ApplicationGroupInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List applicationGroups in subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ApplicationGroupInner&gt; object
     */
    public Observable<Page<ApplicationGroupInner>> listAsync() {
        return listWithServiceResponseAsync()
            .map(new Func1<ServiceResponse<Page<ApplicationGroupInner>>, Page<ApplicationGroupInner>>() {
                @Override
                public Page<ApplicationGroupInner> call(ServiceResponse<Page<ApplicationGroupInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List applicationGroups in subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ApplicationGroupInner&gt; object
     */
    public Observable<ServiceResponse<Page<ApplicationGroupInner>>> listWithServiceResponseAsync() {
        return listSinglePageAsync()
            .concatMap(new Func1<ServiceResponse<Page<ApplicationGroupInner>>, Observable<ServiceResponse<Page<ApplicationGroupInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ApplicationGroupInner>>> call(ServiceResponse<Page<ApplicationGroupInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List applicationGroups in subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ApplicationGroupInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ApplicationGroupInner>>> listSinglePageAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String filter = null;
        return service.list(this.client.subscriptionId(), this.client.apiVersion(), filter, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ApplicationGroupInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ApplicationGroupInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ApplicationGroupInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ApplicationGroupInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * List applicationGroups in subscription.
     *
     * @param filter OData filter expression. Valid properties for filtering are applicationGroupType.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ApplicationGroupInner&gt; object if successful.
     */
    public PagedList<ApplicationGroupInner> list(final String filter) {
        ServiceResponse<Page<ApplicationGroupInner>> response = listSinglePageAsync(filter).toBlocking().single();
        return new PagedList<ApplicationGroupInner>(response.body()) {
            @Override
            public Page<ApplicationGroupInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List applicationGroups in subscription.
     *
     * @param filter OData filter expression. Valid properties for filtering are applicationGroupType.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ApplicationGroupInner>> listAsync(final String filter, final ListOperationCallback<ApplicationGroupInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(filter),
            new Func1<String, Observable<ServiceResponse<Page<ApplicationGroupInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ApplicationGroupInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List applicationGroups in subscription.
     *
     * @param filter OData filter expression. Valid properties for filtering are applicationGroupType.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ApplicationGroupInner&gt; object
     */
    public Observable<Page<ApplicationGroupInner>> listAsync(final String filter) {
        return listWithServiceResponseAsync(filter)
            .map(new Func1<ServiceResponse<Page<ApplicationGroupInner>>, Page<ApplicationGroupInner>>() {
                @Override
                public Page<ApplicationGroupInner> call(ServiceResponse<Page<ApplicationGroupInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List applicationGroups in subscription.
     *
     * @param filter OData filter expression. Valid properties for filtering are applicationGroupType.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ApplicationGroupInner&gt; object
     */
    public Observable<ServiceResponse<Page<ApplicationGroupInner>>> listWithServiceResponseAsync(final String filter) {
        return listSinglePageAsync(filter)
            .concatMap(new Func1<ServiceResponse<Page<ApplicationGroupInner>>, Observable<ServiceResponse<Page<ApplicationGroupInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ApplicationGroupInner>>> call(ServiceResponse<Page<ApplicationGroupInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List applicationGroups in subscription.
     *
    ServiceResponse<PageImpl<ApplicationGroupInner>> * @param filter OData filter expression. Valid properties for filtering are applicationGroupType.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ApplicationGroupInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ApplicationGroupInner>>> listSinglePageAsync(final String filter) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.subscriptionId(), this.client.apiVersion(), filter, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ApplicationGroupInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ApplicationGroupInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ApplicationGroupInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ApplicationGroupInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ApplicationGroupInner>> listDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ApplicationGroupInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ApplicationGroupInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List applicationGroups.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ApplicationGroupInner&gt; object if successful.
     */
    public PagedList<ApplicationGroupInner> listByResourceGroupNext(final String nextPageLink) {
        ServiceResponse<Page<ApplicationGroupInner>> response = listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<ApplicationGroupInner>(response.body()) {
            @Override
            public Page<ApplicationGroupInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List applicationGroups.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ApplicationGroupInner>> listByResourceGroupNextAsync(final String nextPageLink, final ServiceFuture<List<ApplicationGroupInner>> serviceFuture, final ListOperationCallback<ApplicationGroupInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<ApplicationGroupInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ApplicationGroupInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List applicationGroups.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ApplicationGroupInner&gt; object
     */
    public Observable<Page<ApplicationGroupInner>> listByResourceGroupNextAsync(final String nextPageLink) {
        return listByResourceGroupNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<ApplicationGroupInner>>, Page<ApplicationGroupInner>>() {
                @Override
                public Page<ApplicationGroupInner> call(ServiceResponse<Page<ApplicationGroupInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List applicationGroups.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ApplicationGroupInner&gt; object
     */
    public Observable<ServiceResponse<Page<ApplicationGroupInner>>> listByResourceGroupNextWithServiceResponseAsync(final String nextPageLink) {
        return listByResourceGroupNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<ApplicationGroupInner>>, Observable<ServiceResponse<Page<ApplicationGroupInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ApplicationGroupInner>>> call(ServiceResponse<Page<ApplicationGroupInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List applicationGroups.
     *
    ServiceResponse<PageImpl<ApplicationGroupInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ApplicationGroupInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ApplicationGroupInner>>> listByResourceGroupNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByResourceGroupNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ApplicationGroupInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ApplicationGroupInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ApplicationGroupInner>> result = listByResourceGroupNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ApplicationGroupInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ApplicationGroupInner>> listByResourceGroupNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ApplicationGroupInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ApplicationGroupInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List applicationGroups in subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ApplicationGroupInner&gt; object if successful.
     */
    public PagedList<ApplicationGroupInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<ApplicationGroupInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<ApplicationGroupInner>(response.body()) {
            @Override
            public Page<ApplicationGroupInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List applicationGroups in subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ApplicationGroupInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<ApplicationGroupInner>> serviceFuture, final ListOperationCallback<ApplicationGroupInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<ApplicationGroupInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ApplicationGroupInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List applicationGroups in subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ApplicationGroupInner&gt; object
     */
    public Observable<Page<ApplicationGroupInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<ApplicationGroupInner>>, Page<ApplicationGroupInner>>() {
                @Override
                public Page<ApplicationGroupInner> call(ServiceResponse<Page<ApplicationGroupInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List applicationGroups in subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ApplicationGroupInner&gt; object
     */
    public Observable<ServiceResponse<Page<ApplicationGroupInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<ApplicationGroupInner>>, Observable<ServiceResponse<Page<ApplicationGroupInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ApplicationGroupInner>>> call(ServiceResponse<Page<ApplicationGroupInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List applicationGroups in subscription.
     *
    ServiceResponse<PageImpl<ApplicationGroupInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ApplicationGroupInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ApplicationGroupInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ApplicationGroupInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ApplicationGroupInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ApplicationGroupInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ApplicationGroupInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ApplicationGroupInner>> listNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ApplicationGroupInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ApplicationGroupInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
