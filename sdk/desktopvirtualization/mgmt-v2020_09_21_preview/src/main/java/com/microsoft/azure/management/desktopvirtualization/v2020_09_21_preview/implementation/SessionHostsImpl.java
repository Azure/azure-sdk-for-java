/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.desktopvirtualization.v2020_09_21_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.desktopvirtualization.v2020_09_21_preview.SessionHosts;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.desktopvirtualization.v2020_09_21_preview.SessionHost;

class SessionHostsImpl extends WrapperImpl<SessionHostsInner> implements SessionHosts {
    private final DesktopVirtualizationManager manager;

    SessionHostsImpl(DesktopVirtualizationManager manager) {
        super(manager.inner().sessionHosts());
        this.manager = manager;
    }

    public DesktopVirtualizationManager manager() {
        return this.manager;
    }

    private SessionHostImpl wrapModel(SessionHostInner inner) {
        return  new SessionHostImpl(inner, manager());
    }

    @Override
    public Observable<SessionHost> listAsync(final String resourceGroupName, final String hostPoolName) {
        SessionHostsInner client = this.inner();
        return client.listAsync(resourceGroupName, hostPoolName)
        .flatMapIterable(new Func1<Page<SessionHostInner>, Iterable<SessionHostInner>>() {
            @Override
            public Iterable<SessionHostInner> call(Page<SessionHostInner> page) {
                return page.items();
            }
        })
        .map(new Func1<SessionHostInner, SessionHost>() {
            @Override
            public SessionHost call(SessionHostInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<SessionHost> getAsync(String resourceGroupName, String hostPoolName, String sessionHostName) {
        SessionHostsInner client = this.inner();
        return client.getAsync(resourceGroupName, hostPoolName, sessionHostName)
        .flatMap(new Func1<SessionHostInner, Observable<SessionHost>>() {
            @Override
            public Observable<SessionHost> call(SessionHostInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((SessionHost)wrapModel(inner));
                }
            }
       });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String hostPoolName, String sessionHostName) {
        SessionHostsInner client = this.inner();
        return client.deleteAsync(resourceGroupName, hostPoolName, sessionHostName).toCompletable();
    }

}
