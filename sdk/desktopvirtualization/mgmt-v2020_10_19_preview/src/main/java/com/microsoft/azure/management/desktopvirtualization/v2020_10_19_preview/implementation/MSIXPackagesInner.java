/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.desktopvirtualization.v2020_10_19_preview.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.desktopvirtualization.v2020_10_19_preview.MSIXPackagePatch;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in MSIXPackages.
 */
public class MSIXPackagesInner {
    /** The Retrofit service to perform REST calls. */
    private MSIXPackagesService service;
    /** The service client containing this operation class. */
    private DesktopVirtualizationAPIClientImpl client;

    /**
     * Initializes an instance of MSIXPackagesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public MSIXPackagesInner(Retrofit retrofit, DesktopVirtualizationAPIClientImpl client) {
        this.service = retrofit.create(MSIXPackagesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for MSIXPackages to be
     * used by Retrofit to perform actually REST calls.
     */
    interface MSIXPackagesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.desktopvirtualization.v2020_10_19_preview.MSIXPackages get" })
        @GET("subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}/msixPackages/{msixPackageFullName}")
        Observable<Response<ResponseBody>> get(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("hostPoolName") String hostPoolName, @Path("msixPackageFullName") String msixPackageFullName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.desktopvirtualization.v2020_10_19_preview.MSIXPackages createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}/msixPackages/{msixPackageFullName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("hostPoolName") String hostPoolName, @Path("msixPackageFullName") String msixPackageFullName, @Query("api-version") String apiVersion, @Body MSIXPackageInner msixPackage, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.desktopvirtualization.v2020_10_19_preview.MSIXPackages delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}/msixPackages/{msixPackageFullName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("hostPoolName") String hostPoolName, @Path("msixPackageFullName") String msixPackageFullName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.desktopvirtualization.v2020_10_19_preview.MSIXPackages update" })
        @PATCH("subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}/msixPackages/{msixPackageFullName}")
        Observable<Response<ResponseBody>> update(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("hostPoolName") String hostPoolName, @Path("msixPackageFullName") String msixPackageFullName, @Query("api-version") String apiVersion, @Body MSIXPackagePatch msixPackage, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.desktopvirtualization.v2020_10_19_preview.MSIXPackages list" })
        @GET("subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}/msixPackages")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("hostPoolName") String hostPoolName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.desktopvirtualization.v2020_10_19_preview.MSIXPackages listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Get a msixpackage.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param msixPackageFullName The version specific package full name of the MSIX package within specified hostpool
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the MSIXPackageInner object if successful.
     */
    public MSIXPackageInner get(String resourceGroupName, String hostPoolName, String msixPackageFullName) {
        return getWithServiceResponseAsync(resourceGroupName, hostPoolName, msixPackageFullName).toBlocking().single().body();
    }

    /**
     * Get a msixpackage.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param msixPackageFullName The version specific package full name of the MSIX package within specified hostpool
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<MSIXPackageInner> getAsync(String resourceGroupName, String hostPoolName, String msixPackageFullName, final ServiceCallback<MSIXPackageInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroupName, hostPoolName, msixPackageFullName), serviceCallback);
    }

    /**
     * Get a msixpackage.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param msixPackageFullName The version specific package full name of the MSIX package within specified hostpool
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the MSIXPackageInner object
     */
    public Observable<MSIXPackageInner> getAsync(String resourceGroupName, String hostPoolName, String msixPackageFullName) {
        return getWithServiceResponseAsync(resourceGroupName, hostPoolName, msixPackageFullName).map(new Func1<ServiceResponse<MSIXPackageInner>, MSIXPackageInner>() {
            @Override
            public MSIXPackageInner call(ServiceResponse<MSIXPackageInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get a msixpackage.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param msixPackageFullName The version specific package full name of the MSIX package within specified hostpool
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the MSIXPackageInner object
     */
    public Observable<ServiceResponse<MSIXPackageInner>> getWithServiceResponseAsync(String resourceGroupName, String hostPoolName, String msixPackageFullName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (hostPoolName == null) {
            throw new IllegalArgumentException("Parameter hostPoolName is required and cannot be null.");
        }
        if (msixPackageFullName == null) {
            throw new IllegalArgumentException("Parameter msixPackageFullName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(this.client.subscriptionId(), resourceGroupName, hostPoolName, msixPackageFullName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<MSIXPackageInner>>>() {
                @Override
                public Observable<ServiceResponse<MSIXPackageInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<MSIXPackageInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<MSIXPackageInner> getDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<MSIXPackageInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<MSIXPackageInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Create or update a MSIX package.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param msixPackageFullName The version specific package full name of the MSIX package within specified hostpool
     * @param msixPackage Object containing  MSIX Package definitions.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the MSIXPackageInner object if successful.
     */
    public MSIXPackageInner createOrUpdate(String resourceGroupName, String hostPoolName, String msixPackageFullName, MSIXPackageInner msixPackage) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, hostPoolName, msixPackageFullName, msixPackage).toBlocking().single().body();
    }

    /**
     * Create or update a MSIX package.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param msixPackageFullName The version specific package full name of the MSIX package within specified hostpool
     * @param msixPackage Object containing  MSIX Package definitions.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<MSIXPackageInner> createOrUpdateAsync(String resourceGroupName, String hostPoolName, String msixPackageFullName, MSIXPackageInner msixPackage, final ServiceCallback<MSIXPackageInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, hostPoolName, msixPackageFullName, msixPackage), serviceCallback);
    }

    /**
     * Create or update a MSIX package.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param msixPackageFullName The version specific package full name of the MSIX package within specified hostpool
     * @param msixPackage Object containing  MSIX Package definitions.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the MSIXPackageInner object
     */
    public Observable<MSIXPackageInner> createOrUpdateAsync(String resourceGroupName, String hostPoolName, String msixPackageFullName, MSIXPackageInner msixPackage) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, hostPoolName, msixPackageFullName, msixPackage).map(new Func1<ServiceResponse<MSIXPackageInner>, MSIXPackageInner>() {
            @Override
            public MSIXPackageInner call(ServiceResponse<MSIXPackageInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or update a MSIX package.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param msixPackageFullName The version specific package full name of the MSIX package within specified hostpool
     * @param msixPackage Object containing  MSIX Package definitions.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the MSIXPackageInner object
     */
    public Observable<ServiceResponse<MSIXPackageInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String hostPoolName, String msixPackageFullName, MSIXPackageInner msixPackage) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (hostPoolName == null) {
            throw new IllegalArgumentException("Parameter hostPoolName is required and cannot be null.");
        }
        if (msixPackageFullName == null) {
            throw new IllegalArgumentException("Parameter msixPackageFullName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (msixPackage == null) {
            throw new IllegalArgumentException("Parameter msixPackage is required and cannot be null.");
        }
        Validator.validate(msixPackage);
        return service.createOrUpdate(this.client.subscriptionId(), resourceGroupName, hostPoolName, msixPackageFullName, this.client.apiVersion(), msixPackage, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<MSIXPackageInner>>>() {
                @Override
                public Observable<ServiceResponse<MSIXPackageInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<MSIXPackageInner> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<MSIXPackageInner> createOrUpdateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<MSIXPackageInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<MSIXPackageInner>() { }.getType())
                .register(201, new TypeToken<MSIXPackageInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Remove an MSIX Package.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param msixPackageFullName The version specific package full name of the MSIX package within specified hostpool
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String hostPoolName, String msixPackageFullName) {
        deleteWithServiceResponseAsync(resourceGroupName, hostPoolName, msixPackageFullName).toBlocking().single().body();
    }

    /**
     * Remove an MSIX Package.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param msixPackageFullName The version specific package full name of the MSIX package within specified hostpool
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String hostPoolName, String msixPackageFullName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, hostPoolName, msixPackageFullName), serviceCallback);
    }

    /**
     * Remove an MSIX Package.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param msixPackageFullName The version specific package full name of the MSIX package within specified hostpool
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String hostPoolName, String msixPackageFullName) {
        return deleteWithServiceResponseAsync(resourceGroupName, hostPoolName, msixPackageFullName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Remove an MSIX Package.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param msixPackageFullName The version specific package full name of the MSIX package within specified hostpool
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String hostPoolName, String msixPackageFullName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (hostPoolName == null) {
            throw new IllegalArgumentException("Parameter hostPoolName is required and cannot be null.");
        }
        if (msixPackageFullName == null) {
            throw new IllegalArgumentException("Parameter msixPackageFullName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.delete(this.client.subscriptionId(), resourceGroupName, hostPoolName, msixPackageFullName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Update an  MSIX Package.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param msixPackageFullName The version specific package full name of the MSIX package within specified hostpool
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the MSIXPackageInner object if successful.
     */
    public MSIXPackageInner update(String resourceGroupName, String hostPoolName, String msixPackageFullName) {
        return updateWithServiceResponseAsync(resourceGroupName, hostPoolName, msixPackageFullName).toBlocking().single().body();
    }

    /**
     * Update an  MSIX Package.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param msixPackageFullName The version specific package full name of the MSIX package within specified hostpool
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<MSIXPackageInner> updateAsync(String resourceGroupName, String hostPoolName, String msixPackageFullName, final ServiceCallback<MSIXPackageInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, hostPoolName, msixPackageFullName), serviceCallback);
    }

    /**
     * Update an  MSIX Package.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param msixPackageFullName The version specific package full name of the MSIX package within specified hostpool
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the MSIXPackageInner object
     */
    public Observable<MSIXPackageInner> updateAsync(String resourceGroupName, String hostPoolName, String msixPackageFullName) {
        return updateWithServiceResponseAsync(resourceGroupName, hostPoolName, msixPackageFullName).map(new Func1<ServiceResponse<MSIXPackageInner>, MSIXPackageInner>() {
            @Override
            public MSIXPackageInner call(ServiceResponse<MSIXPackageInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Update an  MSIX Package.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param msixPackageFullName The version specific package full name of the MSIX package within specified hostpool
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the MSIXPackageInner object
     */
    public Observable<ServiceResponse<MSIXPackageInner>> updateWithServiceResponseAsync(String resourceGroupName, String hostPoolName, String msixPackageFullName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (hostPoolName == null) {
            throw new IllegalArgumentException("Parameter hostPoolName is required and cannot be null.");
        }
        if (msixPackageFullName == null) {
            throw new IllegalArgumentException("Parameter msixPackageFullName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final MSIXPackagePatch msixPackage = null;
        return service.update(this.client.subscriptionId(), resourceGroupName, hostPoolName, msixPackageFullName, this.client.apiVersion(), msixPackage, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<MSIXPackageInner>>>() {
                @Override
                public Observable<ServiceResponse<MSIXPackageInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<MSIXPackageInner> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Update an  MSIX Package.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param msixPackageFullName The version specific package full name of the MSIX package within specified hostpool
     * @param msixPackage Object containing MSIX Package definitions.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the MSIXPackageInner object if successful.
     */
    public MSIXPackageInner update(String resourceGroupName, String hostPoolName, String msixPackageFullName, MSIXPackagePatch msixPackage) {
        return updateWithServiceResponseAsync(resourceGroupName, hostPoolName, msixPackageFullName, msixPackage).toBlocking().single().body();
    }

    /**
     * Update an  MSIX Package.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param msixPackageFullName The version specific package full name of the MSIX package within specified hostpool
     * @param msixPackage Object containing MSIX Package definitions.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<MSIXPackageInner> updateAsync(String resourceGroupName, String hostPoolName, String msixPackageFullName, MSIXPackagePatch msixPackage, final ServiceCallback<MSIXPackageInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, hostPoolName, msixPackageFullName, msixPackage), serviceCallback);
    }

    /**
     * Update an  MSIX Package.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param msixPackageFullName The version specific package full name of the MSIX package within specified hostpool
     * @param msixPackage Object containing MSIX Package definitions.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the MSIXPackageInner object
     */
    public Observable<MSIXPackageInner> updateAsync(String resourceGroupName, String hostPoolName, String msixPackageFullName, MSIXPackagePatch msixPackage) {
        return updateWithServiceResponseAsync(resourceGroupName, hostPoolName, msixPackageFullName, msixPackage).map(new Func1<ServiceResponse<MSIXPackageInner>, MSIXPackageInner>() {
            @Override
            public MSIXPackageInner call(ServiceResponse<MSIXPackageInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Update an  MSIX Package.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param msixPackageFullName The version specific package full name of the MSIX package within specified hostpool
     * @param msixPackage Object containing MSIX Package definitions.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the MSIXPackageInner object
     */
    public Observable<ServiceResponse<MSIXPackageInner>> updateWithServiceResponseAsync(String resourceGroupName, String hostPoolName, String msixPackageFullName, MSIXPackagePatch msixPackage) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (hostPoolName == null) {
            throw new IllegalArgumentException("Parameter hostPoolName is required and cannot be null.");
        }
        if (msixPackageFullName == null) {
            throw new IllegalArgumentException("Parameter msixPackageFullName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(msixPackage);
        return service.update(this.client.subscriptionId(), resourceGroupName, hostPoolName, msixPackageFullName, this.client.apiVersion(), msixPackage, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<MSIXPackageInner>>>() {
                @Override
                public Observable<ServiceResponse<MSIXPackageInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<MSIXPackageInner> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<MSIXPackageInner> updateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<MSIXPackageInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<MSIXPackageInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List MSIX packages in hostpool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;MSIXPackageInner&gt; object if successful.
     */
    public PagedList<MSIXPackageInner> list(final String resourceGroupName, final String hostPoolName) {
        ServiceResponse<Page<MSIXPackageInner>> response = listSinglePageAsync(resourceGroupName, hostPoolName).toBlocking().single();
        return new PagedList<MSIXPackageInner>(response.body()) {
            @Override
            public Page<MSIXPackageInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List MSIX packages in hostpool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<MSIXPackageInner>> listAsync(final String resourceGroupName, final String hostPoolName, final ListOperationCallback<MSIXPackageInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(resourceGroupName, hostPoolName),
            new Func1<String, Observable<ServiceResponse<Page<MSIXPackageInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MSIXPackageInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List MSIX packages in hostpool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;MSIXPackageInner&gt; object
     */
    public Observable<Page<MSIXPackageInner>> listAsync(final String resourceGroupName, final String hostPoolName) {
        return listWithServiceResponseAsync(resourceGroupName, hostPoolName)
            .map(new Func1<ServiceResponse<Page<MSIXPackageInner>>, Page<MSIXPackageInner>>() {
                @Override
                public Page<MSIXPackageInner> call(ServiceResponse<Page<MSIXPackageInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List MSIX packages in hostpool.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;MSIXPackageInner&gt; object
     */
    public Observable<ServiceResponse<Page<MSIXPackageInner>>> listWithServiceResponseAsync(final String resourceGroupName, final String hostPoolName) {
        return listSinglePageAsync(resourceGroupName, hostPoolName)
            .concatMap(new Func1<ServiceResponse<Page<MSIXPackageInner>>, Observable<ServiceResponse<Page<MSIXPackageInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MSIXPackageInner>>> call(ServiceResponse<Page<MSIXPackageInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List MSIX packages in hostpool.
     *
    ServiceResponse<PageImpl<MSIXPackageInner>> * @param resourceGroupName The name of the resource group. The name is case insensitive.
    ServiceResponse<PageImpl<MSIXPackageInner>> * @param hostPoolName The name of the host pool within the specified resource group
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;MSIXPackageInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<MSIXPackageInner>>> listSinglePageAsync(final String resourceGroupName, final String hostPoolName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (hostPoolName == null) {
            throw new IllegalArgumentException("Parameter hostPoolName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.subscriptionId(), resourceGroupName, hostPoolName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<MSIXPackageInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MSIXPackageInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<MSIXPackageInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<MSIXPackageInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<MSIXPackageInner>> listDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<MSIXPackageInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<MSIXPackageInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List MSIX packages in hostpool.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;MSIXPackageInner&gt; object if successful.
     */
    public PagedList<MSIXPackageInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<MSIXPackageInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<MSIXPackageInner>(response.body()) {
            @Override
            public Page<MSIXPackageInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List MSIX packages in hostpool.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<MSIXPackageInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<MSIXPackageInner>> serviceFuture, final ListOperationCallback<MSIXPackageInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<MSIXPackageInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MSIXPackageInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List MSIX packages in hostpool.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;MSIXPackageInner&gt; object
     */
    public Observable<Page<MSIXPackageInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<MSIXPackageInner>>, Page<MSIXPackageInner>>() {
                @Override
                public Page<MSIXPackageInner> call(ServiceResponse<Page<MSIXPackageInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List MSIX packages in hostpool.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;MSIXPackageInner&gt; object
     */
    public Observable<ServiceResponse<Page<MSIXPackageInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<MSIXPackageInner>>, Observable<ServiceResponse<Page<MSIXPackageInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MSIXPackageInner>>> call(ServiceResponse<Page<MSIXPackageInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List MSIX packages in hostpool.
     *
    ServiceResponse<PageImpl<MSIXPackageInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;MSIXPackageInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<MSIXPackageInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<MSIXPackageInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MSIXPackageInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<MSIXPackageInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<MSIXPackageInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<MSIXPackageInner>> listNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<MSIXPackageInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<MSIXPackageInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
