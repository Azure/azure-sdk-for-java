/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.desktopvirtualization.v2020_11-02-preview;

import com.microsoft.azure.arm.collection.SupportsCreating;
import rx.Completable;
import rx.Observable;
import com.microsoft.azure.management.desktopvirtualization.v2020_11-02-preview.implementation.ApplicationsInner;
import com.microsoft.azure.arm.model.HasInner;

/**
 * Type representing Applications.
 */
public interface Applications extends SupportsCreating<Application.DefinitionStages.Blank>, HasInner<ApplicationsInner> {
    /**
     * Get an application.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationGroupName The name of the application group
     * @param applicationName The name of the application within the specified application group
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<Application> getAsync(String resourceGroupName, String applicationGroupName, String applicationName);

    /**
     * List applications.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationGroupName The name of the application group
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<Application> listAsync(final String resourceGroupName, final String applicationGroupName);

    /**
     * Remove an application.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationGroupName The name of the application group
     * @param applicationName The name of the application within the specified application group
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable deleteAsync(String resourceGroupName, String applicationGroupName, String applicationName);

}
