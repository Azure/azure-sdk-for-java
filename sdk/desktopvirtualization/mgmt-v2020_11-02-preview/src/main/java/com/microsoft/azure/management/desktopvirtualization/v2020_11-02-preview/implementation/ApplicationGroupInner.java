/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.desktopvirtualization.v2020_11-02-preview.implementation;

import com.microsoft.azure.management.desktopvirtualization.v2020_11-02-preview.ApplicationGroupType;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.microsoft.rest.serializer.JsonFlatten;
import com.microsoft.azure.Resource;

/**
 * Represents a ApplicationGroup definition.
 */
@JsonFlatten
public class ApplicationGroupInner extends Resource {
    /**
     * Description of ApplicationGroup.
     */
    @JsonProperty(value = "properties.description")
    private String description;

    /**
     * Friendly name of ApplicationGroup.
     */
    @JsonProperty(value = "properties.friendlyName")
    private String friendlyName;

    /**
     * HostPool arm path of ApplicationGroup.
     */
    @JsonProperty(value = "properties.hostPoolArmPath", required = true)
    private String hostPoolArmPath;

    /**
     * Workspace arm path of ApplicationGroup.
     */
    @JsonProperty(value = "properties.workspaceArmPath", access = JsonProperty.Access.WRITE_ONLY)
    private String workspaceArmPath;

    /**
     * Resource Type of ApplicationGroup. Possible values include: 'RemoteApp',
     * 'Desktop'.
     */
    @JsonProperty(value = "properties.applicationGroupType", required = true)
    private ApplicationGroupType applicationGroupType;

    /**
     * Get description of ApplicationGroup.
     *
     * @return the description value
     */
    public String description() {
        return this.description;
    }

    /**
     * Set description of ApplicationGroup.
     *
     * @param description the description value to set
     * @return the ApplicationGroupInner object itself.
     */
    public ApplicationGroupInner withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get friendly name of ApplicationGroup.
     *
     * @return the friendlyName value
     */
    public String friendlyName() {
        return this.friendlyName;
    }

    /**
     * Set friendly name of ApplicationGroup.
     *
     * @param friendlyName the friendlyName value to set
     * @return the ApplicationGroupInner object itself.
     */
    public ApplicationGroupInner withFriendlyName(String friendlyName) {
        this.friendlyName = friendlyName;
        return this;
    }

    /**
     * Get hostPool arm path of ApplicationGroup.
     *
     * @return the hostPoolArmPath value
     */
    public String hostPoolArmPath() {
        return this.hostPoolArmPath;
    }

    /**
     * Set hostPool arm path of ApplicationGroup.
     *
     * @param hostPoolArmPath the hostPoolArmPath value to set
     * @return the ApplicationGroupInner object itself.
     */
    public ApplicationGroupInner withHostPoolArmPath(String hostPoolArmPath) {
        this.hostPoolArmPath = hostPoolArmPath;
        return this;
    }

    /**
     * Get workspace arm path of ApplicationGroup.
     *
     * @return the workspaceArmPath value
     */
    public String workspaceArmPath() {
        return this.workspaceArmPath;
    }

    /**
     * Get resource Type of ApplicationGroup. Possible values include: 'RemoteApp', 'Desktop'.
     *
     * @return the applicationGroupType value
     */
    public ApplicationGroupType applicationGroupType() {
        return this.applicationGroupType;
    }

    /**
     * Set resource Type of ApplicationGroup. Possible values include: 'RemoteApp', 'Desktop'.
     *
     * @param applicationGroupType the applicationGroupType value to set
     * @return the ApplicationGroupInner object itself.
     */
    public ApplicationGroupInner withApplicationGroupType(ApplicationGroupType applicationGroupType) {
        this.applicationGroupType = applicationGroupType;
        return this;
    }

}
