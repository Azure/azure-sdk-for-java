/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.desktopvirtualization.v2020_11-02-preview.implementation;

import com.microsoft.azure.management.desktopvirtualization.v2020_11-02-preview.MSIXPackage;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.desktopvirtualization.v2020_11-02-preview.MSIXPackagePatch;
import java.util.List;
import com.microsoft.azure.management.desktopvirtualization.v2020_11-02-preview.MsixPackageDependencies;
import org.joda.time.DateTime;
import com.microsoft.azure.management.desktopvirtualization.v2020_11-02-preview.MsixPackageApplications;
import rx.functions.Func1;

class MSIXPackageImpl extends CreatableUpdatableImpl<MSIXPackage, MSIXPackageInner, MSIXPackageImpl> implements MSIXPackage, MSIXPackage.Definition, MSIXPackage.Update {
    private final DesktopVirtualizationManager manager;
    private String resourceGroupName;
    private String hostPoolName;
    private String msixPackageFullName;
    private MSIXPackagePatch updateParameter;

    MSIXPackageImpl(String name, DesktopVirtualizationManager manager) {
        super(name, new MSIXPackageInner());
        this.manager = manager;
        // Set resource name
        this.msixPackageFullName = name;
        //
        this.updateParameter = new MSIXPackagePatch();
    }

    MSIXPackageImpl(MSIXPackageInner inner, DesktopVirtualizationManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.msixPackageFullName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourcegroups");
        this.hostPoolName = IdParsingUtils.getValueFromIdByName(inner.id(), "hostPools");
        this.msixPackageFullName = IdParsingUtils.getValueFromIdByName(inner.id(), "msixPackages");
        //
        this.updateParameter = new MSIXPackagePatch();
    }

    @Override
    public DesktopVirtualizationManager manager() {
        return this.manager;
    }

    @Override
    public Observable<MSIXPackage> createResourceAsync() {
        MSIXPackagesInner client = this.manager().inner().mSIXPackages();
        return client.createOrUpdateAsync(this.resourceGroupName, this.hostPoolName, this.msixPackageFullName, this.inner())
            .map(new Func1<MSIXPackageInner, MSIXPackageInner>() {
               @Override
               public MSIXPackageInner call(MSIXPackageInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<MSIXPackage> updateResourceAsync() {
        MSIXPackagesInner client = this.manager().inner().mSIXPackages();
        return client.updateAsync(this.resourceGroupName, this.hostPoolName, this.msixPackageFullName, this.updateParameter)
            .map(new Func1<MSIXPackageInner, MSIXPackageInner>() {
               @Override
               public MSIXPackageInner call(MSIXPackageInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<MSIXPackageInner> getInnerAsync() {
        MSIXPackagesInner client = this.manager().inner().mSIXPackages();
        return client.getAsync(this.resourceGroupName, this.hostPoolName, this.msixPackageFullName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }

    private void resetCreateUpdateParameters() {
        this.updateParameter = new MSIXPackagePatch();
    }

    @Override
    public String displayName() {
        return this.inner().displayName();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String imagePath() {
        return this.inner().imagePath();
    }

    @Override
    public boolean isActive() {
        return this.inner().isActive();
    }

    @Override
    public boolean isRegularRegistration() {
        return this.inner().isRegularRegistration();
    }

    @Override
    public DateTime lastUpdated() {
        return this.inner().lastUpdated();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public List<MsixPackageApplications> packageApplications() {
        return this.inner().packageApplications();
    }

    @Override
    public List<MsixPackageDependencies> packageDependencies() {
        return this.inner().packageDependencies();
    }

    @Override
    public String packageFamilyName() {
        return this.inner().packageFamilyName();
    }

    @Override
    public String packageName() {
        return this.inner().packageName();
    }

    @Override
    public String packageRelativePath() {
        return this.inner().packageRelativePath();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public String version() {
        return this.inner().version();
    }

    @Override
    public MSIXPackageImpl withExistingHostPool(String resourceGroupName, String hostPoolName) {
        this.resourceGroupName = resourceGroupName;
        this.hostPoolName = hostPoolName;
        return this;
    }

    @Override
    public MSIXPackageImpl withImagePath(String imagePath) {
        this.inner().withImagePath(imagePath);
        return this;
    }

    @Override
    public MSIXPackageImpl withIsActive(boolean isActive) {
        this.inner().withIsActive(isActive);
        return this;
    }

    @Override
    public MSIXPackageImpl withIsRegularRegistration(boolean isRegularRegistration) {
        this.inner().withIsRegularRegistration(isRegularRegistration);
        return this;
    }

    @Override
    public MSIXPackageImpl withLastUpdated(DateTime lastUpdated) {
        this.inner().withLastUpdated(lastUpdated);
        return this;
    }

    @Override
    public MSIXPackageImpl withPackageApplications(List<MsixPackageApplications> packageApplications) {
        this.inner().withPackageApplications(packageApplications);
        return this;
    }

    @Override
    public MSIXPackageImpl withPackageDependencies(List<MsixPackageDependencies> packageDependencies) {
        this.inner().withPackageDependencies(packageDependencies);
        return this;
    }

    @Override
    public MSIXPackageImpl withPackageFamilyName(String packageFamilyName) {
        this.inner().withPackageFamilyName(packageFamilyName);
        return this;
    }

    @Override
    public MSIXPackageImpl withPackageName(String packageName) {
        this.inner().withPackageName(packageName);
        return this;
    }

    @Override
    public MSIXPackageImpl withPackageRelativePath(String packageRelativePath) {
        this.inner().withPackageRelativePath(packageRelativePath);
        return this;
    }

    @Override
    public MSIXPackageImpl withVersion(String version) {
        this.inner().withVersion(version);
        return this;
    }

    @Override
    public MSIXPackageImpl withIsActive(Boolean isActive) {
        this.updateParameter.withIsActive(isActive);
        return this;
    }

    @Override
    public MSIXPackageImpl withIsRegularRegistration(Boolean isRegularRegistration) {
        this.updateParameter.withIsRegularRegistration(isRegularRegistration);
        return this;
    }

    @Override
    public MSIXPackageImpl withDisplayName(String displayName) {
        if (isInCreateMode()) {
            this.inner().withDisplayName(displayName);
        } else {
            this.updateParameter.withDisplayName(displayName);
        }
        return this;
    }

}
