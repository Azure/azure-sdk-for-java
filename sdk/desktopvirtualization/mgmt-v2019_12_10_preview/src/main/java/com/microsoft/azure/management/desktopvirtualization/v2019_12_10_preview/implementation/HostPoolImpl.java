/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.desktopvirtualization.v2019_12_10_preview.implementation;

import com.microsoft.azure.arm.resources.models.implementation.GroupableResourceCoreImpl;
import com.microsoft.azure.management.desktopvirtualization.v2019_12_10_preview.HostPool;
import rx.Observable;
import com.microsoft.azure.management.desktopvirtualization.v2019_12_10_preview.HostPoolPatch;
import com.microsoft.azure.management.desktopvirtualization.v2019_12_10_preview.HostPoolType;
import com.microsoft.azure.management.desktopvirtualization.v2019_12_10_preview.PersonalDesktopAssignmentType;
import com.microsoft.azure.management.desktopvirtualization.v2019_12_10_preview.LoadBalancerType;
import com.microsoft.azure.management.desktopvirtualization.v2019_12_10_preview.RegistrationInfo;
import java.util.List;
import com.microsoft.azure.management.desktopvirtualization.v2019_12_10_preview.PreferredAppGroupType;
import com.microsoft.azure.management.desktopvirtualization.v2019_12_10_preview.RegistrationInfoPatch;
import rx.functions.Func1;

class HostPoolImpl extends GroupableResourceCoreImpl<HostPool, HostPoolInner, HostPoolImpl, DesktopVirtualizationManager> implements HostPool, HostPool.Definition, HostPool.Update {
    private HostPoolPatch updateParameter;
    HostPoolImpl(String name, HostPoolInner inner, DesktopVirtualizationManager manager) {
        super(name, inner, manager);
        this.updateParameter = new HostPoolPatch();
    }

    @Override
    public Observable<HostPool> createResourceAsync() {
        HostPoolsInner client = this.manager().inner().hostPools();
        return client.createOrUpdateAsync(this.resourceGroupName(), this.name(), this.inner())
            .map(new Func1<HostPoolInner, HostPoolInner>() {
               @Override
               public HostPoolInner call(HostPoolInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<HostPool> updateResourceAsync() {
        HostPoolsInner client = this.manager().inner().hostPools();
        return client.updateAsync(this.resourceGroupName(), this.name(), this.updateParameter)
            .map(new Func1<HostPoolInner, HostPoolInner>() {
               @Override
               public HostPoolInner call(HostPoolInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<HostPoolInner> getInnerAsync() {
        HostPoolsInner client = this.manager().inner().hostPools();
        return client.getByResourceGroupAsync(this.resourceGroupName(), this.name());
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }

    private void resetCreateUpdateParameters() {
        this.updateParameter = new HostPoolPatch();
    }

    @Override
    public List<String> applicationGroupReferences() {
        return this.inner().applicationGroupReferences();
    }

    @Override
    public String customRdpProperty() {
        return this.inner().customRdpProperty();
    }

    @Override
    public String description() {
        return this.inner().description();
    }

    @Override
    public String friendlyName() {
        return this.inner().friendlyName();
    }

    @Override
    public HostPoolType hostPoolType() {
        return this.inner().hostPoolType();
    }

    @Override
    public LoadBalancerType loadBalancerType() {
        return this.inner().loadBalancerType();
    }

    @Override
    public Integer maxSessionLimit() {
        return this.inner().maxSessionLimit();
    }

    @Override
    public PersonalDesktopAssignmentType personalDesktopAssignmentType() {
        return this.inner().personalDesktopAssignmentType();
    }

    @Override
    public PreferredAppGroupType preferredAppGroupType() {
        return this.inner().preferredAppGroupType();
    }

    @Override
    public RegistrationInfo registrationInfo() {
        return this.inner().registrationInfo();
    }

    @Override
    public Integer ring() {
        return this.inner().ring();
    }

    @Override
    public String ssoContext() {
        return this.inner().ssoContext();
    }

    @Override
    public Boolean validationEnvironment() {
        return this.inner().validationEnvironment();
    }

    @Override
    public String vmTemplate() {
        return this.inner().vmTemplate();
    }

    @Override
    public HostPoolImpl withHostPoolType(HostPoolType hostPoolType) {
        this.inner().withHostPoolType(hostPoolType);
        return this;
    }

    @Override
    public HostPoolImpl withRegistrationInfo(RegistrationInfo registrationInfo) {
        this.inner().withRegistrationInfo(registrationInfo);
        return this;
    }

    @Override
    public HostPoolImpl withVmTemplate(String vmTemplate) {
        this.inner().withVmTemplate(vmTemplate);
        return this;
    }

    @Override
    public HostPoolImpl withRegistrationInfo(RegistrationInfoPatch registrationInfo) {
        this.updateParameter.withRegistrationInfo(registrationInfo);
        return this;
    }

    @Override
    public HostPoolImpl withLoadBalancerType(LoadBalancerType loadBalancerType) {
        if (isInCreateMode()) {
            this.inner().withLoadBalancerType(loadBalancerType);
        } else {
            this.updateParameter.withLoadBalancerType(loadBalancerType);
        }
        return this;
    }

    @Override
    public HostPoolImpl withPersonalDesktopAssignmentType(PersonalDesktopAssignmentType personalDesktopAssignmentType) {
        if (isInCreateMode()) {
            this.inner().withPersonalDesktopAssignmentType(personalDesktopAssignmentType);
        } else {
            this.updateParameter.withPersonalDesktopAssignmentType(personalDesktopAssignmentType);
        }
        return this;
    }

    @Override
    public HostPoolImpl withPreferredAppGroupType(PreferredAppGroupType preferredAppGroupType) {
        if (isInCreateMode()) {
            this.inner().withPreferredAppGroupType(preferredAppGroupType);
        } else {
            this.updateParameter.withPreferredAppGroupType(preferredAppGroupType);
        }
        return this;
    }

    @Override
    public HostPoolImpl withCustomRdpProperty(String customRdpProperty) {
        if (isInCreateMode()) {
            this.inner().withCustomRdpProperty(customRdpProperty);
        } else {
            this.updateParameter.withCustomRdpProperty(customRdpProperty);
        }
        return this;
    }

    @Override
    public HostPoolImpl withDescription(String description) {
        if (isInCreateMode()) {
            this.inner().withDescription(description);
        } else {
            this.updateParameter.withDescription(description);
        }
        return this;
    }

    @Override
    public HostPoolImpl withFriendlyName(String friendlyName) {
        if (isInCreateMode()) {
            this.inner().withFriendlyName(friendlyName);
        } else {
            this.updateParameter.withFriendlyName(friendlyName);
        }
        return this;
    }

    @Override
    public HostPoolImpl withMaxSessionLimit(Integer maxSessionLimit) {
        if (isInCreateMode()) {
            this.inner().withMaxSessionLimit(maxSessionLimit);
        } else {
            this.updateParameter.withMaxSessionLimit(maxSessionLimit);
        }
        return this;
    }

    @Override
    public HostPoolImpl withRing(Integer ring) {
        if (isInCreateMode()) {
            this.inner().withRing(ring);
        } else {
            this.updateParameter.withRing(ring);
        }
        return this;
    }

    @Override
    public HostPoolImpl withSsoContext(String ssoContext) {
        if (isInCreateMode()) {
            this.inner().withSsoContext(ssoContext);
        } else {
            this.updateParameter.withSsoContext(ssoContext);
        }
        return this;
    }

    @Override
    public HostPoolImpl withValidationEnvironment(Boolean validationEnvironment) {
        if (isInCreateMode()) {
            this.inner().withValidationEnvironment(validationEnvironment);
        } else {
            this.updateParameter.withValidationEnvironment(validationEnvironment);
        }
        return this;
    }

}
