/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.desktopvirtualization.v2019_12_10_preview.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in ActiveApplications.
 */
public class ActiveApplicationsInner {
    /** The Retrofit service to perform REST calls. */
    private ActiveApplicationsService service;
    /** The service client containing this operation class. */
    private DesktopVirtualizationAPIClientImpl client;

    /**
     * Initializes an instance of ActiveApplicationsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ActiveApplicationsInner(Retrofit retrofit, DesktopVirtualizationAPIClientImpl client) {
        this.service = retrofit.create(ActiveApplicationsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for ActiveApplications to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ActiveApplicationsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.desktopvirtualization.v2019_12_10_preview.ActiveApplications listBySessionHost" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}/sessionHosts/{sessionHostName}/activeApplications")
        Observable<Response<ResponseBody>> listBySessionHost(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("hostPoolName") String hostPoolName, @Path("sessionHostName") String sessionHostName, @Query("api-version") String apiVersion, @Query("$filter") String filter, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.desktopvirtualization.v2019_12_10_preview.ActiveApplications listBySessionHostNext" })
        @GET
        Observable<Response<ResponseBody>> listBySessionHostNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * List applications for the given session host.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param sessionHostName The name of the session host within the specified host pool
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ApplicationInner&gt; object if successful.
     */
    public PagedList<ApplicationInner> listBySessionHost(final String resourceGroupName, final String hostPoolName, final String sessionHostName) {
        ServiceResponse<Page<ApplicationInner>> response = listBySessionHostSinglePageAsync(resourceGroupName, hostPoolName, sessionHostName).toBlocking().single();
        return new PagedList<ApplicationInner>(response.body()) {
            @Override
            public Page<ApplicationInner> nextPage(String nextPageLink) {
                return listBySessionHostNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List applications for the given session host.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param sessionHostName The name of the session host within the specified host pool
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ApplicationInner>> listBySessionHostAsync(final String resourceGroupName, final String hostPoolName, final String sessionHostName, final ListOperationCallback<ApplicationInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listBySessionHostSinglePageAsync(resourceGroupName, hostPoolName, sessionHostName),
            new Func1<String, Observable<ServiceResponse<Page<ApplicationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ApplicationInner>>> call(String nextPageLink) {
                    return listBySessionHostNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List applications for the given session host.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param sessionHostName The name of the session host within the specified host pool
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ApplicationInner&gt; object
     */
    public Observable<Page<ApplicationInner>> listBySessionHostAsync(final String resourceGroupName, final String hostPoolName, final String sessionHostName) {
        return listBySessionHostWithServiceResponseAsync(resourceGroupName, hostPoolName, sessionHostName)
            .map(new Func1<ServiceResponse<Page<ApplicationInner>>, Page<ApplicationInner>>() {
                @Override
                public Page<ApplicationInner> call(ServiceResponse<Page<ApplicationInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List applications for the given session host.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param sessionHostName The name of the session host within the specified host pool
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ApplicationInner&gt; object
     */
    public Observable<ServiceResponse<Page<ApplicationInner>>> listBySessionHostWithServiceResponseAsync(final String resourceGroupName, final String hostPoolName, final String sessionHostName) {
        return listBySessionHostSinglePageAsync(resourceGroupName, hostPoolName, sessionHostName)
            .concatMap(new Func1<ServiceResponse<Page<ApplicationInner>>, Observable<ServiceResponse<Page<ApplicationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ApplicationInner>>> call(ServiceResponse<Page<ApplicationInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listBySessionHostNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List applications for the given session host.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param sessionHostName The name of the session host within the specified host pool
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ApplicationInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ApplicationInner>>> listBySessionHostSinglePageAsync(final String resourceGroupName, final String hostPoolName, final String sessionHostName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (hostPoolName == null) {
            throw new IllegalArgumentException("Parameter hostPoolName is required and cannot be null.");
        }
        if (sessionHostName == null) {
            throw new IllegalArgumentException("Parameter sessionHostName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String filter = null;
        return service.listBySessionHost(this.client.subscriptionId(), resourceGroupName, hostPoolName, sessionHostName, this.client.apiVersion(), filter, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ApplicationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ApplicationInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ApplicationInner>> result = listBySessionHostDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ApplicationInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * List applications for the given session host.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param sessionHostName The name of the session host within the specified host pool
     * @param filter OData filter expression. Valid properties for filtering are userprincipalname and sessionstate.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ApplicationInner&gt; object if successful.
     */
    public PagedList<ApplicationInner> listBySessionHost(final String resourceGroupName, final String hostPoolName, final String sessionHostName, final String filter) {
        ServiceResponse<Page<ApplicationInner>> response = listBySessionHostSinglePageAsync(resourceGroupName, hostPoolName, sessionHostName, filter).toBlocking().single();
        return new PagedList<ApplicationInner>(response.body()) {
            @Override
            public Page<ApplicationInner> nextPage(String nextPageLink) {
                return listBySessionHostNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List applications for the given session host.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param sessionHostName The name of the session host within the specified host pool
     * @param filter OData filter expression. Valid properties for filtering are userprincipalname and sessionstate.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ApplicationInner>> listBySessionHostAsync(final String resourceGroupName, final String hostPoolName, final String sessionHostName, final String filter, final ListOperationCallback<ApplicationInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listBySessionHostSinglePageAsync(resourceGroupName, hostPoolName, sessionHostName, filter),
            new Func1<String, Observable<ServiceResponse<Page<ApplicationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ApplicationInner>>> call(String nextPageLink) {
                    return listBySessionHostNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List applications for the given session host.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param sessionHostName The name of the session host within the specified host pool
     * @param filter OData filter expression. Valid properties for filtering are userprincipalname and sessionstate.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ApplicationInner&gt; object
     */
    public Observable<Page<ApplicationInner>> listBySessionHostAsync(final String resourceGroupName, final String hostPoolName, final String sessionHostName, final String filter) {
        return listBySessionHostWithServiceResponseAsync(resourceGroupName, hostPoolName, sessionHostName, filter)
            .map(new Func1<ServiceResponse<Page<ApplicationInner>>, Page<ApplicationInner>>() {
                @Override
                public Page<ApplicationInner> call(ServiceResponse<Page<ApplicationInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List applications for the given session host.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param sessionHostName The name of the session host within the specified host pool
     * @param filter OData filter expression. Valid properties for filtering are userprincipalname and sessionstate.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ApplicationInner&gt; object
     */
    public Observable<ServiceResponse<Page<ApplicationInner>>> listBySessionHostWithServiceResponseAsync(final String resourceGroupName, final String hostPoolName, final String sessionHostName, final String filter) {
        return listBySessionHostSinglePageAsync(resourceGroupName, hostPoolName, sessionHostName, filter)
            .concatMap(new Func1<ServiceResponse<Page<ApplicationInner>>, Observable<ServiceResponse<Page<ApplicationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ApplicationInner>>> call(ServiceResponse<Page<ApplicationInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listBySessionHostNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List applications for the given session host.
     *
    ServiceResponse<PageImpl<ApplicationInner>> * @param resourceGroupName The name of the resource group. The name is case insensitive.
    ServiceResponse<PageImpl<ApplicationInner>> * @param hostPoolName The name of the host pool within the specified resource group
    ServiceResponse<PageImpl<ApplicationInner>> * @param sessionHostName The name of the session host within the specified host pool
    ServiceResponse<PageImpl<ApplicationInner>> * @param filter OData filter expression. Valid properties for filtering are userprincipalname and sessionstate.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ApplicationInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ApplicationInner>>> listBySessionHostSinglePageAsync(final String resourceGroupName, final String hostPoolName, final String sessionHostName, final String filter) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (hostPoolName == null) {
            throw new IllegalArgumentException("Parameter hostPoolName is required and cannot be null.");
        }
        if (sessionHostName == null) {
            throw new IllegalArgumentException("Parameter sessionHostName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listBySessionHost(this.client.subscriptionId(), resourceGroupName, hostPoolName, sessionHostName, this.client.apiVersion(), filter, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ApplicationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ApplicationInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ApplicationInner>> result = listBySessionHostDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ApplicationInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ApplicationInner>> listBySessionHostDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ApplicationInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ApplicationInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List applications for the given session host.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ApplicationInner&gt; object if successful.
     */
    public PagedList<ApplicationInner> listBySessionHostNext(final String nextPageLink) {
        ServiceResponse<Page<ApplicationInner>> response = listBySessionHostNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<ApplicationInner>(response.body()) {
            @Override
            public Page<ApplicationInner> nextPage(String nextPageLink) {
                return listBySessionHostNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List applications for the given session host.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ApplicationInner>> listBySessionHostNextAsync(final String nextPageLink, final ServiceFuture<List<ApplicationInner>> serviceFuture, final ListOperationCallback<ApplicationInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listBySessionHostNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<ApplicationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ApplicationInner>>> call(String nextPageLink) {
                    return listBySessionHostNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List applications for the given session host.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ApplicationInner&gt; object
     */
    public Observable<Page<ApplicationInner>> listBySessionHostNextAsync(final String nextPageLink) {
        return listBySessionHostNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<ApplicationInner>>, Page<ApplicationInner>>() {
                @Override
                public Page<ApplicationInner> call(ServiceResponse<Page<ApplicationInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List applications for the given session host.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ApplicationInner&gt; object
     */
    public Observable<ServiceResponse<Page<ApplicationInner>>> listBySessionHostNextWithServiceResponseAsync(final String nextPageLink) {
        return listBySessionHostNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<ApplicationInner>>, Observable<ServiceResponse<Page<ApplicationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ApplicationInner>>> call(ServiceResponse<Page<ApplicationInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listBySessionHostNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List applications for the given session host.
     *
    ServiceResponse<PageImpl<ApplicationInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ApplicationInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ApplicationInner>>> listBySessionHostNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listBySessionHostNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ApplicationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ApplicationInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ApplicationInner>> result = listBySessionHostNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ApplicationInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ApplicationInner>> listBySessionHostNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ApplicationInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ApplicationInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
