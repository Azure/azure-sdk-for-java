/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.desktopvirtualization.v2019_12_10_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.desktopvirtualization.v2019_12_10_preview.ApplicationGroupAssignments;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.desktopvirtualization.v2019_12_10_preview.WorkspaceApplicationGroup;

class ApplicationGroupAssignmentsImpl extends WrapperImpl<ApplicationGroupAssignmentsInner> implements ApplicationGroupAssignments {
    private final DesktopVirtualizationManager manager;

    ApplicationGroupAssignmentsImpl(DesktopVirtualizationManager manager) {
        super(manager.inner().applicationGroupAssignments());
        this.manager = manager;
    }

    public DesktopVirtualizationManager manager() {
        return this.manager;
    }

    private WorkspaceApplicationGroupImpl wrapModel(ApplicationGroupInner inner) {
        return  new WorkspaceApplicationGroupImpl(inner, manager());
    }

    @Override
    public Observable<WorkspaceApplicationGroup> workspaceLevelListAsync(final String resourceGroupName, final String workspaceName) {
        ApplicationGroupAssignmentsInner client = this.inner();
        return client.workspaceLevelListAsync(resourceGroupName, workspaceName)
        .flatMapIterable(new Func1<Page<ApplicationGroupInner>, Iterable<ApplicationGroupInner>>() {
            @Override
            public Iterable<ApplicationGroupInner> call(Page<ApplicationGroupInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ApplicationGroupInner, WorkspaceApplicationGroup>() {
            @Override
            public WorkspaceApplicationGroup call(ApplicationGroupInner inner) {
                return wrapModel(inner);
            }
        });
    }

}
