// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.managednetworkfabric.fluent.models.InternetGatewayRuleInner;
import com.azure.resourcemanager.managednetworkfabric.models.Action;
import com.azure.resourcemanager.managednetworkfabric.models.RuleProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class InternetGatewayRuleInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        InternetGatewayRuleInner model = BinaryData.fromString(
            "{\"properties\":{\"ruleProperties\":{\"action\":\"Allow\",\"addressList\":[\"moichdlpnfpubntn\",\"atzviqsowsaael\"]},\"provisioningState\":\"Updating\",\"internetGatewayIds\":[\"ju\",\"plrvkmjcwmjvlg\",\"ggcvk\"],\"annotation\":\"lizrzbjpsfxsfuz\"},\"location\":\"vtmva\",\"tags\":{\"oveofizrvjfnmj\":\"idqlvhu\"},\"id\":\"vlwyzg\",\"name\":\"blkujrllfojuidjp\",\"type\":\"uyjucejikzo\"}")
            .toObject(InternetGatewayRuleInner.class);
        Assertions.assertEquals("vtmva", model.location());
        Assertions.assertEquals("idqlvhu", model.tags().get("oveofizrvjfnmj"));
        Assertions.assertEquals(Action.ALLOW, model.ruleProperties().action());
        Assertions.assertEquals("moichdlpnfpubntn", model.ruleProperties().addressList().get(0));
        Assertions.assertEquals("lizrzbjpsfxsfuz", model.annotation());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        InternetGatewayRuleInner model = new InternetGatewayRuleInner().withLocation("vtmva")
            .withTags(mapOf("oveofizrvjfnmj", "idqlvhu"))
            .withRuleProperties(new RuleProperties().withAction(Action.ALLOW)
                .withAddressList(Arrays.asList("moichdlpnfpubntn", "atzviqsowsaael")))
            .withAnnotation("lizrzbjpsfxsfuz");
        model = BinaryData.fromObject(model).toObject(InternetGatewayRuleInner.class);
        Assertions.assertEquals("vtmva", model.location());
        Assertions.assertEquals("idqlvhu", model.tags().get("oveofizrvjfnmj"));
        Assertions.assertEquals(Action.ALLOW, model.ruleProperties().action());
        Assertions.assertEquals("moichdlpnfpubntn", model.ruleProperties().addressList().get(0));
        Assertions.assertEquals("lizrzbjpsfxsfuz", model.annotation());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
